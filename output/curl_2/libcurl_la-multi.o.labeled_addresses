Curl_multi_pipelining_site_bl	ELSE,0:SWITCH,0:FOR,0:WHILE,0:CALL,0:DO,0:functions,0:IF,0	2
0x4003aa5	    0x488d87800100	                  lea rax, [rdi + 0x180]	      3096	multi.c	FUNCTION_58
0x4003aac	              0xc3	                                     ret	      3097	multi.c	FUNCTION_58
curl_multi_wait	ELSE,1:SWITCH,0:FOR,4:WHILE,2:CALL,10:DO,0:functions,0:IF,23	227
0x4000ce4	            0x4157	                                push r15	       967	multi.c	FUNCTION_24
0x4000ce6	            0x4156	                                push r14	       967	multi.c	FUNCTION_24
0x4000ce8	            0x4155	                                push r13	       967	multi.c	FUNCTION_24
0x4000cea	            0x4154	                                push r12	       967	multi.c	FUNCTION_24
0x4000cec	              0x55	                                push rbp	       967	multi.c	FUNCTION_24
0x4000ced	              0x53	                                push rbx	       967	multi.c	FUNCTION_24
0x4000cee	    0x4881ecb80000	                           sub rsp, 0xb8	       967	multi.c	FUNCTION_24
0x4000cf5	      0x4889742408	                mov qword [rsp + 8], rsi	       967	multi.c	FUNCTION_24
0x4000cfa	        0x894c2404	                mov dword [rsp + 4], ecx	       967	multi.c	FUNCTION_24
0x4000cfe	      0x4c89442410	              mov qword [rsp + 0x10], r8	       967	multi.c	FUNCTION_24
0x4000d03	    0x64488b042528	                mov rax, qword fs:[0x28]	       967	multi.c	FUNCTION_24
0x4000d0c	    0x48898424a800	             mov qword [rsp + 0xa8], rax	       967	multi.c	FUNCTION_24
0x4000d14	            0x31c0	                            xor eax, eax	       967	multi.c	FUNCTION_24
0x4000d16	          0x4885ff	                           test rdi, rdi	       980	multi.c	FUNCTION_24	IF_1
0x4000d19	     0xf8484020000	                            je 0x4000fa3	       980	multi.c	FUNCTION_24	IF_1
0x4000d1f	          0x4889fd	                            mov rbp, rdi	       980	multi.c	FUNCTION_24	IF_1
0x4000d22	          0x4189d5	                           mov r13d, edx	       980	multi.c	FUNCTION_24	IF_1
0x4000d25	      0xb801000000	                              mov eax, 1	       981	multi.c	FUNCTION_24	IF_1
0x4000d2a	    0x48813f1eab0b	                cmp qword [rdi], 0xbab1e	       980	multi.c	FUNCTION_24	IF_1
0x4000d31	     0xf8578020000	                           jne 0x4000faf	       980	multi.c	FUNCTION_24	IF_1
0x4000d37	      0xb808000000	                              mov eax, 8	       984	multi.c	FUNCTION_24	IF_2
0x4000d3c	    0x80bfe0010000	               cmp byte [rdi + 0x1e0], 0	       983	multi.c	FUNCTION_24	IF_2
0x4000d43	     0xf8566020000	                           jne 0x4000faf	       983	multi.c	FUNCTION_24	IF_2
0x4000d49	      0x488d742428	                   lea rsi, [rsp + 0x28]	       989	multi.c	FUNCTION_24	CALL_1
0x4000d4e	      0xe854f3ffff	                  call sym.multi_timeout	       989	multi.c	FUNCTION_24	CALL_1
0x4000d53	      0x488b442428	            mov rax, qword [rsp + 0x28] 	       990	multi.c	FUNCTION_24	IF_3
0x4000d58	          0x4885c0	                           test rax, rax	       990	multi.c	FUNCTION_24	IF_3
0x4000d5b	            0x7811	                            js 0x4000d6e	       990	multi.c	FUNCTION_24	IF_3
0x4000d5d	        0x8b5c2404	                mov ebx, dword [rsp + 4]	       990	multi.c	FUNCTION_24	IF_3
0x4000d61	          0x4863d3	                         movsxd rdx, ebx	       990	multi.c	FUNCTION_24	IF_3
0x4000d64	          0x4839d0	                            cmp rax, rdx	       991	multi.c	FUNCTION_24	IF_3
0x4000d67	           0xf4dc3	                         cmovge eax, ebx	       991	multi.c	FUNCTION_24	IF_3
0x4000d6a	        0x89442404	                mov dword [rsp + 4], eax	       991	multi.c	FUNCTION_24	IF_3
0x4000d6e	        0x4c8b7508	                mov r14, qword [rbp + 8]	       994	multi.c	FUNCTION_24
0x4000d72	          0x4d85f6	                           test r14, r14	       995	multi.c	FUNCTION_24	WHILE_1
0x4000d75	     0xf8467020000	                            je 0x4000fe2	       995	multi.c	FUNCTION_24	WHILE_1
0x4000d7b	      0xbb00000000	                              mov ebx, 0	       995	multi.c	FUNCTION_24	WHILE_1
0x4000d80	      0x4c8d642430	                   lea r12, [rsp + 0x30]	       996	multi.c	FUNCTION_24	WHILE_1	CALL_2
0x4000d85	      0xba05000000	                              mov edx, 5	       996	multi.c	FUNCTION_24	WHILE_1	CALL_2
0x4000d8a	          0x4c89e6	                            mov rsi, r12	       996	multi.c	FUNCTION_24	WHILE_1	CALL_2
0x4000d8d	          0x4c89f7	                            mov rdi, r14	       996	multi.c	FUNCTION_24	WHILE_1	CALL_2
0x4000d90	      0xe8e8f4ffff	                  call sym.multi_getsock	       996	multi.c	FUNCTION_24	WHILE_1	CALL_2
0x4000d95	      0xb910000000	                           mov ecx, 0x10	       996	multi.c	FUNCTION_24	WHILE_1	CALL_2
0x4000d9a	      0xba00000000	                              mov edx, 0	       996	multi.c	FUNCTION_24	WHILE_1	CALL_2
0x4000d9f	           0xfa3d0	                             bt eax, edx	      1001	multi.c	FUNCTION_24	WHILE_1	FOR_1	IF_4	CALL_3
0x4000da2	     0xf831c020000	                           jae 0x4000fc4	      1001	multi.c	FUNCTION_24	WHILE_1	FOR_1	IF_4	CALL_3
0x4000da8	          0x83c301	                              add ebx, 1	      1002	multi.c	FUNCTION_24	WHILE_1	FOR_1	IF_4
0x4000dab	        0x418b3494	            mov esi, dword [r12 + rdx*4]	      1003	multi.c	FUNCTION_24	WHILE_1	FOR_1	IF_4
0x4000daf	           0xfa3c8	                             bt eax, ecx	      1005	multi.c	FUNCTION_24	WHILE_1	FOR_1	IF_5	CALL_4
0x4000db2	            0x7307	                           jae 0x4000dbb	      1005	multi.c	FUNCTION_24	WHILE_1	FOR_1	IF_5	CALL_4
0x4000db4	          0x83c301	                              add ebx, 1	      1006	multi.c	FUNCTION_24	WHILE_1	FOR_1	IF_5
0x4000db7	        0x418b3494	            mov esi, dword [r12 + rdx*4]	      1007	multi.c	FUNCTION_24	WHILE_1	FOR_1	IF_5
0x4000dbb	          0x83feff	             cmp esi, 0xffffffffffffffff	      1009	multi.c	FUNCTION_24	WHILE_1	FOR_1	IF_6
0x4000dbe	            0x740c	                            je 0x4000dcc	      1009	multi.c	FUNCTION_24	WHILE_1	FOR_1	IF_6
0x4000dc0	        0x4883c201	                              add rdx, 1	      1009	multi.c	FUNCTION_24	WHILE_1	FOR_1	IF_6
0x4000dc4	          0x83c101	                              add ecx, 1	      1009	multi.c	FUNCTION_24	WHILE_1	FOR_1	IF_6
0x4000dc7	          0x83f915	                           cmp ecx, 0x15	       998	multi.c	FUNCTION_24	WHILE_1	FOR_1
0x4000dca	            0x75d3	                           jne 0x4000d9f	       998	multi.c	FUNCTION_24	WHILE_1	FOR_1
0x4000dcc	          0x4d8b36	                    mov r14, qword [r14]	      1014	multi.c	FUNCTION_24	WHILE_1
0x4000dcf	          0x4d85f6	                           test r14, r14	       995	multi.c	FUNCTION_24	WHILE_1
0x4000dd2	            0x75b1	                           jne 0x4000d85	       995	multi.c	FUNCTION_24	WHILE_1
0x4000dd4	            0x89d8	                            mov eax, ebx	      1020	multi.c	FUNCTION_24	IF_7
0x4000dd6	          0x4401e8	                           add eax, r13d	      1020	multi.c	FUNCTION_24	IF_7
0x4000dd9	        0x8944241c	             mov dword [rsp + 0x1c], eax	      1020	multi.c	FUNCTION_24	IF_7
0x4000ddd	            0x7446	                            je 0x4000e25	      1020	multi.c	FUNCTION_24	IF_7
0x4000ddf	            0xeb0a	                           jmp 0x4000deb	      1020	multi.c	FUNCTION_24	IF_7
0x4000de1	      0x44896c241c	            mov dword [rsp + 0x1c], r13d	      1018	multi.c	FUNCTION_24
0x4000de6	      0xbb00000000	                              mov ebx, 0	       972	multi.c	FUNCTION_24
0x4000deb	      0xc644241b00	                mov byte [rsp + 0x1b], 0	       975	multi.c	FUNCTION_24
0x4000df0	      0x4c8d642450	                   lea r12, [rsp + 0x50]	      1032	multi.c	FUNCTION_24	IF_7	ELSE_1
0x4000df5	      0x837c241c0a	            cmp dword [rsp + 0x1c], 0xa 	      1021	multi.c	FUNCTION_24	IF_7	IF_8
0x4000dfa	            0x7634	                           jbe 0x4000e30	      1021	multi.c	FUNCTION_24	IF_7	IF_8
0x4000dfc	        0x8b7c241c	            mov edi, dword [rsp + 0x1c] 	      1026	multi.c	FUNCTION_24	IF_7	IF_8	CALL_5
0x4000e00	        0x48c1e703	                              shl rdi, 3	      1026	multi.c	FUNCTION_24	IF_7	IF_8	CALL_5
0x4000e04	    0x488b05000000	            mov rax, qword [0x04000e0b] 	      1026	multi.c	FUNCTION_24	IF_7	IF_8	CALL_5
0x4000e0b	            0xff10	                        call qword [rax]	      1026	multi.c	FUNCTION_24	IF_7	IF_8	CALL_5
0x4000e0d	          0x4989c4	                            mov r12, rax	      1026	multi.c	FUNCTION_24	IF_7	IF_8	CALL_5
0x4000e10	      0xb803000000	                              mov eax, 3	      1028	multi.c	FUNCTION_24	IF_7	IF_8	IF_9
0x4000e15	          0x4d85e4	                           test r12, r12	      1027	multi.c	FUNCTION_24	IF_7	IF_8	IF_9
0x4000e18	     0xf8491010000	                            je 0x4000faf	      1027	multi.c	FUNCTION_24	IF_7	IF_8	IF_9
0x4000e1e	      0xc644241b01	                mov byte [rsp + 0x1b], 1	      1029	multi.c	FUNCTION_24	IF_7	IF_8
0x4000e23	            0xeb0b	                           jmp 0x4000e30	      1029	multi.c	FUNCTION_24	IF_7	IF_8
0x4000e25	      0xc644241b00	                mov byte [rsp + 0x1b], 0	       975	multi.c	FUNCTION_24
0x4000e2a	    0x41bc00000000	                             mov r12d, 0	       974	multi.c	FUNCTION_24
0x4000e30	            0x85db	                           test ebx, ebx	      1039	multi.c	FUNCTION_24	ELSE_1	IF_10
0x4000e32	            0x7515	                           jne 0x4000e49	      1039	multi.c	FUNCTION_24	ELSE_1	IF_10
0x4000e34	      0xe999010000	                           jmp 0x4000fd2	      1039	multi.c	FUNCTION_24	ELSE_1	IF_10
0x4000e39	            0x89ee	                            mov esi, ebp	      1070	multi.c	FUNCTION_24	FOR_3
0x4000e3b	          0x4585ed	                         test r13d, r13d	      1070	multi.c	FUNCTION_24	FOR_3
0x4000e3e	     0xf84dc000000	                            je 0x4000f20	      1070	multi.c	FUNCTION_24	FOR_3
0x4000e44	      0xe989000000	                           jmp 0x4000ed2	      1070	multi.c	FUNCTION_24	FOR_3
0x4000e49	        0x4c8b7508	                mov r14, qword [rbp + 8]	      1041	multi.c	FUNCTION_24	ELSE_1	IF_10
0x4000e4d	          0x4d85f6	                           test r14, r14	      1042	multi.c	FUNCTION_24	ELSE_1	IF_10	WHILE_2
0x4000e50	     0xf847c010000	                            je 0x4000fd2	      1042	multi.c	FUNCTION_24	ELSE_1	IF_10	WHILE_2
0x4000e56	      0xbd00000000	                              mov ebp, 0	      1042	multi.c	FUNCTION_24	ELSE_1	IF_10	WHILE_2
0x4000e5b	      0x4c8d7c2430	                   lea r15, [rsp + 0x30]	      1043	multi.c	FUNCTION_24	ELSE_1	IF_10	WHILE_2	CALL_6
0x4000e60	      0xba05000000	                              mov edx, 5	      1043	multi.c	FUNCTION_24	ELSE_1	IF_10	WHILE_2	CALL_6
0x4000e65	          0x4c89fe	                            mov rsi, r15	      1043	multi.c	FUNCTION_24	ELSE_1	IF_10	WHILE_2	CALL_6
0x4000e68	          0x4c89f7	                            mov rdi, r14	      1043	multi.c	FUNCTION_24	ELSE_1	IF_10	WHILE_2	CALL_6
0x4000e6b	      0xe80df4ffff	                  call sym.multi_getsock	      1043	multi.c	FUNCTION_24	ELSE_1	IF_10	WHILE_2	CALL_6
0x4000e70	          0x4c89f9	                            mov rcx, r15	      1043	multi.c	FUNCTION_24	ELSE_1	IF_10	WHILE_2	CALL_6
0x4000e73	      0xba00000000	                              mov edx, 0	      1045	multi.c	FUNCTION_24	ELSE_1	IF_10	WHILE_2	FOR_2
0x4000e78	      0xbeffffffff	                     mov esi, 0xffffffff	      1046	multi.c	FUNCTION_24	ELSE_1	IF_10	WHILE_2	FOR_2
0x4000e7d	           0xfa3d0	                             bt eax, edx	      1048	multi.c	FUNCTION_24	ELSE_1	IF_10	WHILE_2	FOR_2	IF_11	CALL_7
0x4000e80	            0x7315	                           jae 0x4000e97	      1048	multi.c	FUNCTION_24	ELSE_1	IF_10	WHILE_2	FOR_2	IF_11	CALL_7
0x4000e82	            0x89ee	                            mov esi, ebp	      1049	multi.c	FUNCTION_24	ELSE_1	IF_10	WHILE_2	FOR_2	IF_11
0x4000e84	        0x498d34f4	                  lea rsi, [r12 + rsi*8]	      1049	multi.c	FUNCTION_24	ELSE_1	IF_10	WHILE_2	FOR_2	IF_11
0x4000e88	            0x8b39	                    mov edi, dword [rcx]	      1049	multi.c	FUNCTION_24	ELSE_1	IF_10	WHILE_2	FOR_2	IF_11
0x4000e8a	            0x893e	                    mov dword [rsi], edi	      1049	multi.c	FUNCTION_24	ELSE_1	IF_10	WHILE_2	FOR_2	IF_11
0x4000e8c	    0x66c746040100	                   mov word [rsi + 4], 1	      1050	multi.c	FUNCTION_24	ELSE_1	IF_10	WHILE_2	FOR_2	IF_11
0x4000e92	          0x83c501	                              add ebp, 1	      1051	multi.c	FUNCTION_24	ELSE_1	IF_10	WHILE_2	FOR_2	IF_11
0x4000e95	            0x8b31	                    mov esi, dword [rcx]	      1052	multi.c	FUNCTION_24	ELSE_1	IF_10	WHILE_2	FOR_2	IF_11
0x4000e97	          0x8d7a10	                   lea edi, [rdx + 0x10]	      1054	multi.c	FUNCTION_24	ELSE_1	IF_10	WHILE_2	FOR_2	IF_12	CALL_8
0x4000e9a	           0xfa3f8	                             bt eax, edi	      1054	multi.c	FUNCTION_24	ELSE_1	IF_10	WHILE_2	FOR_2	IF_12	CALL_8
0x4000e9d	            0x7315	                           jae 0x4000eb4	      1054	multi.c	FUNCTION_24	ELSE_1	IF_10	WHILE_2	FOR_2	IF_12	CALL_8
0x4000e9f	            0x89ee	                            mov esi, ebp	      1055	multi.c	FUNCTION_24	ELSE_1	IF_10	WHILE_2	FOR_2	IF_12
0x4000ea1	        0x498d34f4	                  lea rsi, [r12 + rsi*8]	      1055	multi.c	FUNCTION_24	ELSE_1	IF_10	WHILE_2	FOR_2	IF_12
0x4000ea5	            0x8b39	                    mov edi, dword [rcx]	      1055	multi.c	FUNCTION_24	ELSE_1	IF_10	WHILE_2	FOR_2	IF_12
0x4000ea7	            0x893e	                    mov dword [rsi], edi	      1055	multi.c	FUNCTION_24	ELSE_1	IF_10	WHILE_2	FOR_2	IF_12
0x4000ea9	    0x66c746040400	                   mov word [rsi + 4], 4	      1056	multi.c	FUNCTION_24	ELSE_1	IF_10	WHILE_2	FOR_2	IF_12
0x4000eaf	          0x83c501	                              add ebp, 1	      1057	multi.c	FUNCTION_24	ELSE_1	IF_10	WHILE_2	FOR_2	IF_12
0x4000eb2	            0x8b31	                    mov esi, dword [rcx]	      1058	multi.c	FUNCTION_24	ELSE_1	IF_10	WHILE_2	FOR_2	IF_12
0x4000eb4	          0x83feff	             cmp esi, 0xffffffffffffffff	      1060	multi.c	FUNCTION_24	ELSE_1	IF_10	WHILE_2	FOR_2	IF_13
0x4000eb7	            0x740c	                            je 0x4000ec5	      1060	multi.c	FUNCTION_24	ELSE_1	IF_10	WHILE_2	FOR_2	IF_13
0x4000eb9	          0x83c201	                              add edx, 1	      1045	multi.c	FUNCTION_24	ELSE_1	IF_10	WHILE_2	FOR_2
0x4000ebc	        0x4883c104	                              add rcx, 4	      1045	multi.c	FUNCTION_24	ELSE_1	IF_10	WHILE_2	FOR_2
0x4000ec0	          0x83fa05	                              cmp edx, 5	      1045	multi.c	FUNCTION_24	ELSE_1	IF_10	WHILE_2	FOR_2
0x4000ec3	            0x75b3	                           jne 0x4000e78	      1045	multi.c	FUNCTION_24	ELSE_1	IF_10	WHILE_2	FOR_2
0x4000ec5	          0x4d8b36	                    mov r14, qword [r14]	      1065	multi.c	FUNCTION_24	ELSE_1	IF_10	WHILE_2
0x4000ec8	          0x4d85f6	                           test r14, r14	      1042	multi.c	FUNCTION_24	ELSE_1	IF_10	WHILE_2
0x4000ecb	            0x7593	                           jne 0x4000e60	      1042	multi.c	FUNCTION_24	ELSE_1	IF_10	WHILE_2
0x4000ecd	      0xe967ffffff	                           jmp 0x4000e39	      1042	multi.c	FUNCTION_24	ELSE_1	IF_10	WHILE_2
0x4000ed2	      0x488b442408	                mov rax, qword [rsp + 8]	      1042	multi.c	FUNCTION_24	ELSE_1	IF_10	WHILE_2
0x4000ed7	        0x488d5004	                      lea rdx, [rax + 4]	      1042	multi.c	FUNCTION_24	ELSE_1	IF_10	WHILE_2
0x4000edb	            0x89ee	                            mov esi, ebp	      1070	multi.c	FUNCTION_24	FOR_3
0x4000edd	            0x89f0	                            mov eax, esi	      1071	multi.c	FUNCTION_24	FOR_3
0x4000edf	        0x498d04c4	                  lea rax, [r12 + rax*8]	      1071	multi.c	FUNCTION_24	FOR_3
0x4000ee3	          0x4889d1	                            mov rcx, rdx	      1071	multi.c	FUNCTION_24	FOR_3
0x4000ee6	          0x8b7afc	                mov edi, dword [rdx - 4]	      1071	multi.c	FUNCTION_24	FOR_3
0x4000ee9	            0x8938	                    mov dword [rax], edi	      1071	multi.c	FUNCTION_24	FOR_3
0x4000eeb	    0x66c740040000	                   mov word [rax + 4], 0	      1072	multi.c	FUNCTION_24	FOR_3
0x4000ef1	          0xf60201	                      test byte [rdx], 1	      1073	multi.c	FUNCTION_24	FOR_3	IF_14
0x4000ef4	            0x7406	                            je 0x4000efc	      1073	multi.c	FUNCTION_24	FOR_3	IF_14
0x4000ef6	    0x66c740040100	                   mov word [rax + 4], 1	      1074	multi.c	FUNCTION_24	FOR_3	IF_14
0x4000efc	          0xf60102	                      test byte [rcx], 2	      1075	multi.c	FUNCTION_24	FOR_3	IF_15
0x4000eff	            0x7405	                            je 0x4000f06	      1075	multi.c	FUNCTION_24	FOR_3	IF_15
0x4000f01	      0x6683480402	                    or word [rax + 4], 2	      1076	multi.c	FUNCTION_24	FOR_3	IF_15
0x4000f06	          0xf60104	                      test byte [rcx], 4	      1077	multi.c	FUNCTION_24	FOR_3	IF_16
0x4000f09	            0x7405	                            je 0x4000f10	      1077	multi.c	FUNCTION_24	FOR_3	IF_16
0x4000f0b	      0x6683480404	                    or word [rax + 4], 4	      1078	multi.c	FUNCTION_24	FOR_3	IF_16
0x4000f10	          0x83c601	                              add esi, 1	      1079	multi.c	FUNCTION_24	FOR_3
0x4000f13	        0x4883c208	                              add rdx, 8	      1079	multi.c	FUNCTION_24	FOR_3
0x4000f17	            0x89f0	                            mov eax, esi	      1070	multi.c	FUNCTION_24	FOR_3
0x4000f19	            0x29e8	                            sub eax, ebp	      1070	multi.c	FUNCTION_24	FOR_3
0x4000f1b	          0x4139c5	                           cmp r13d, eax	      1070	multi.c	FUNCTION_24	FOR_3
0x4000f1e	            0x77bd	                            ja 0x4000edd	      1070	multi.c	FUNCTION_24	FOR_3
0x4000f20	      0xbd00000000	                              mov ebp, 0	       977	multi.c	FUNCTION_24
0x4000f25	            0x85f6	                           test esi, esi	      1082	multi.c	FUNCTION_24	IF_17
0x4000f27	            0x7454	                            je 0x4000f7d	      1082	multi.c	FUNCTION_24	IF_17
0x4000f29	        0x8b542404	                mov edx, dword [rsp + 4]	      1085	multi.c	FUNCTION_24	IF_17	CALL_9
0x4000f2d	          0x4c89e7	                            mov rdi, r12	      1085	multi.c	FUNCTION_24	IF_17	CALL_9
0x4000f30	      0xe800000000	                          call 0x4000f35	      1085	multi.c	FUNCTION_24	IF_17	CALL_9
0x4000f35	            0x89c5	                            mov ebp, eax	      1085	multi.c	FUNCTION_24	IF_17	CALL_9
0x4000f37	            0x85c0	                           test eax, eax	      1087	multi.c	FUNCTION_24	IF_17	IF_18
0x4000f39	            0x7e3d	                           jle 0x4000f78	      1087	multi.c	FUNCTION_24	IF_17	IF_18
0x4000f3b	          0x4585ed	                         test r13d, r13d	      1092	multi.c	FUNCTION_24	IF_17	IF_18	FOR_4
0x4000f3e	            0x743d	                            je 0x4000f7d	      1092	multi.c	FUNCTION_24	IF_17	IF_18	FOR_4
0x4000f40	      0x488b742408	                mov rsi, qword [rsp + 8]	      1092	multi.c	FUNCTION_24	IF_17	IF_18	FOR_4
0x4000f45	        0x4883c606	                              add rsi, 6	      1092	multi.c	FUNCTION_24	IF_17	IF_18	FOR_4
0x4000f49	        0x8b7c241c	            mov edi, dword [rsp + 0x1c] 	      1092	multi.c	FUNCTION_24	IF_17	IF_18	FOR_4
0x4000f4d	            0x89d8	                            mov eax, ebx	      1094	multi.c	FUNCTION_24	IF_17	IF_18	FOR_4
0x4000f4f	    0x410fb744c406	      movzx eax, word [r12 + rax*8 + 6] 	      1094	multi.c	FUNCTION_24	IF_17	IF_18	FOR_4
0x4000f55	            0x89c1	                            mov ecx, eax	      1093	multi.c	FUNCTION_24	IF_17	IF_18	FOR_4
0x4000f57	          0x83e101	                              and ecx, 1	      1093	multi.c	FUNCTION_24	IF_17	IF_18	FOR_4
0x4000f5a	            0x89c2	                            mov edx, eax	      1098	multi.c	FUNCTION_24	IF_17	IF_18	FOR_4	IF_20
0x4000f5c	        0x6683e204	                               and dx, 4	      1098	multi.c	FUNCTION_24	IF_17	IF_18	FOR_4	IF_20
0x4000f60	             0x9ca	                             or edx, ecx	      1099	multi.c	FUNCTION_24	IF_17	IF_18	FOR_4	IF_20
0x4000f62	        0x6683e002	                               and ax, 2	      1100	multi.c	FUNCTION_24	IF_17	IF_18	FOR_4	IF_21
0x4000f66	             0x9c2	                             or edx, eax	      1101	multi.c	FUNCTION_24	IF_17	IF_18	FOR_4	IF_21
0x4000f68	          0x668916	                      mov word [rsi], dx	      1103	multi.c	FUNCTION_24	IF_17	IF_18	FOR_4
0x4000f6b	          0x83c301	                              add ebx, 1	      1103	multi.c	FUNCTION_24	IF_17	IF_18	FOR_4
0x4000f6e	        0x4883c608	                              add rsi, 8	      1103	multi.c	FUNCTION_24	IF_17	IF_18	FOR_4
0x4000f72	            0x39fb	                            cmp ebx, edi	      1092	multi.c	FUNCTION_24	IF_17	IF_18	FOR_4
0x4000f74	            0x75d7	                           jne 0x4000f4d	      1092	multi.c	FUNCTION_24	IF_17	IF_18	FOR_4
0x4000f76	            0xeb05	                           jmp 0x4000f7d	      1092	multi.c	FUNCTION_24	IF_17	IF_18	FOR_4
0x4000f78	      0xbd00000000	                              mov ebp, 0	       977	multi.c	FUNCTION_24
0x4000f7d	      0x807c241b00	                cmp byte [rsp + 0x1b], 0	      1108	multi.c	FUNCTION_24	IF_22
0x4000f82	            0x740c	                            je 0x4000f90	      1108	multi.c	FUNCTION_24	IF_22
0x4000f84	          0x4c89e7	                            mov rdi, r12	      1109	multi.c	FUNCTION_24	CALL_10
0x4000f87	    0x488b05000000	            mov rax, qword [0x04000f8e] 	      1109	multi.c	FUNCTION_24	CALL_10
0x4000f8e	            0xff10	                        call qword [rax]	      1109	multi.c	FUNCTION_24	CALL_10
0x4000f90	      0x488b442410	            mov rax, qword [rsp + 0x10] 	      1110	multi.c	FUNCTION_24	IF_23
0x4000f95	          0x4885c0	                           test rax, rax	      1110	multi.c	FUNCTION_24	IF_23
0x4000f98	            0x7410	                            je 0x4000faa	      1110	multi.c	FUNCTION_24	IF_23
0x4000f9a	            0x8928	                    mov dword [rax], ebp	      1111	multi.c	FUNCTION_24	IF_23
0x4000f9c	      0xb800000000	                              mov eax, 0	      1112	multi.c	FUNCTION_24
0x4000fa1	            0xeb0c	                           jmp 0x4000faf	      1112	multi.c	FUNCTION_24
0x4000fa3	      0xb801000000	                              mov eax, 1	       981	multi.c	FUNCTION_24	IF_1
0x4000fa8	            0xeb05	                           jmp 0x4000faf	       981	multi.c	FUNCTION_24	IF_1
0x4000faa	      0xb800000000	                              mov eax, 0	      1112	multi.c	FUNCTION_24
0x4000faf	    0x488b9c24a800	            mov rbx, qword [rsp + 0xa8] 	      1113	multi.c	FUNCTION_24
0x4000fb7	    0x6448331c2528	                xor rbx, qword fs:[0x28]	      1113	multi.c	FUNCTION_24
0x4000fc0	            0x7445	                            je 0x4001007	      1113	multi.c	FUNCTION_24
0x4000fc2	            0xeb3e	                           jmp 0x4001002	      1113	multi.c	FUNCTION_24
0x4000fc4	           0xfa3c8	                             bt eax, ecx	      1005	multi.c	FUNCTION_24	WHILE_1	FOR_1	IF_5	CALL_4
0x4000fc7	     0xf82e7fdffff	                            jb 0x4000db4	      1005	multi.c	FUNCTION_24	WHILE_1	FOR_1	IF_5	CALL_4
0x4000fcd	      0xe9fafdffff	                           jmp 0x4000dcc	      1005	multi.c	FUNCTION_24	WHILE_1	FOR_1	IF_5	CALL_4
0x4000fd2	      0xbd00000000	                              mov ebp, 0	      1070	multi.c	FUNCTION_24	FOR_3
0x4000fd7	          0x4585ed	                         test r13d, r13d	      1070	multi.c	FUNCTION_24	FOR_3
0x4000fda	     0xf85f2feffff	                           jne 0x4000ed2	      1070	multi.c	FUNCTION_24	FOR_3
0x4000fe0	            0xeb9b	                           jmp 0x4000f7d	      1070	multi.c	FUNCTION_24	FOR_3
0x4000fe2	          0x4585ed	                         test r13d, r13d	      1020	multi.c	FUNCTION_24	IF_7
0x4000fe5	     0xf85f6fdffff	                           jne 0x4000de1	      1020	multi.c	FUNCTION_24	IF_7
0x4000feb	      0x44896c241c	            mov dword [rsp + 0x1c], r13d	      1018	multi.c	FUNCTION_24
0x4000ff0	      0xbb00000000	                              mov ebx, 0	       972	multi.c	FUNCTION_24
0x4000ff5	      0xc644241b00	                mov byte [rsp + 0x1b], 0	       975	multi.c	FUNCTION_24
0x4000ffa	    0x41bc00000000	                             mov r12d, 0	       974	multi.c	FUNCTION_24
0x4001000	            0xebd0	                           jmp 0x4000fd2	       974	multi.c	FUNCTION_24
0x4001002	      0xe800000000	                          call 0x4001007	      1113	multi.c	FUNCTION_24
0x4001007	    0x4881c4b80000	                           add rsp, 0xb8	      1113	multi.c	FUNCTION_24
0x400100e	              0x5b	                                 pop rbx	      1113	multi.c	FUNCTION_24
0x400100f	              0x5d	                                 pop rbp	      1113	multi.c	FUNCTION_24
0x4001010	            0x415c	                                 pop r12	      1113	multi.c	FUNCTION_24
0x4001012	            0x415d	                                 pop r13	      1113	multi.c	FUNCTION_24
0x4001014	            0x415e	                                 pop r14	      1113	multi.c	FUNCTION_24
0x4001016	            0x415f	                                 pop r15	      1113	multi.c	FUNCTION_24
0x4001018	              0xc3	                                     ret	      1113	multi.c	FUNCTION_24
curl_multi_init	ELSE,0:SWITCH,0:FOR,0:WHILE,0:CALL,1:DO,0:functions,0:IF,0	6
0x4000b20	        0x4883ec08	                              sub rsp, 8	       350	multi.c	FUNCTION_12
0x4000b24	      0xbe61000000	                           mov esi, 0x61	       351	multi.c	FUNCTION_12	CALL_1
0x4000b29	      0xbf8f030000	                          mov edi, 0x38f	       351	multi.c	FUNCTION_12	CALL_1
0x4000b2e	      0xe800000000	                          call 0x4000b33	       351	multi.c	FUNCTION_12	CALL_1
0x4000b33	        0x4883c408	                              add rsp, 8	       353	multi.c	FUNCTION_12
0x4000b37	              0xc3	                                     ret	       353	multi.c	FUNCTION_12
Curl_pipeline_wanted	ELSE,0:SWITCH,0:FOR,0:WHILE,0:CALL,0:DO,0:functions,0:IF,0	10
0x4000b38	          0x4885ff	                           test rdi, rdi	       783	multi.c	FUNCTION_17
0x4000b3b	            0x7412	                            je 0x4000b4f	       783	multi.c	FUNCTION_17
0x4000b3d	          0x4863f6	                         movsxd rsi, esi	       783	multi.c	FUNCTION_17
0x4000b40	    0x4885b7e80000	           test qword [rdi + 0xe8], rsi 	       783	multi.c	FUNCTION_17
0x4000b47	           0xf95c0	                                setne al	       783	multi.c	FUNCTION_17
0x4000b4a	           0xfb6c0	                           movzx eax, al	       783	multi.c	FUNCTION_17
0x4000b4d	            0xeb05	                           jmp 0x4000b54	       783	multi.c	FUNCTION_17
0x4000b4f	      0xb800000000	                              mov eax, 0	       783	multi.c	FUNCTION_17
0x4000b54	          0x83e001	                              and eax, 1	       783	multi.c	FUNCTION_17
0x4000b57	              0xc3	                                     ret	       784	multi.c	FUNCTION_17
curl_multi_add_handle	ELSE,4:SWITCH,0:FOR,0:WHILE,0:CALL,6:DO,0:functions,0:IF,11	102
0x400175e	          0x4885ff	                           test rdi, rdi	       359	multi.c	FUNCTION_13	IF_1
0x4001761	     0xf84c0010000	                            je 0x4001927	       359	multi.c	FUNCTION_13	IF_1
0x4001767	      0xb801000000	                              mov eax, 1	       360	multi.c	FUNCTION_13	IF_1
0x400176c	    0x48813f1eab0b	                cmp qword [rdi], 0xbab1e	       359	multi.c	FUNCTION_13	IF_1
0x4001773	     0xf85cd010000	                           jne 0x4001946	       359	multi.c	FUNCTION_13	IF_1
0x4001779	      0xb802000000	                              mov eax, 2	       364	multi.c	FUNCTION_13	IF_2
0x400177e	          0x4885f6	                           test rsi, rsi	       363	multi.c	FUNCTION_13	IF_2	CALL_1
0x4001781	     0xf84bf010000	                            je 0x4001946	       363	multi.c	FUNCTION_13	IF_2	CALL_1
0x4001787	    0x81bed0520000	   cmp dword [rsi + 0x52d0], 0xc0dedbad 	       363	multi.c	FUNCTION_13	IF_2	CALL_1
0x4001791	     0xf85af010000	                           jne 0x4001946	       363	multi.c	FUNCTION_13	IF_2	CALL_1
0x4001797	      0xb807000000	                              mov eax, 7	       369	multi.c	FUNCTION_13	IF_3
0x400179c	    0x4883bea80000	               cmp qword [rsi + 0xa8], 0	       368	multi.c	FUNCTION_13	IF_3
0x40017a4	     0xf859c010000	                           jne 0x4001946	       368	multi.c	FUNCTION_13	IF_3
0x40017aa	      0xb808000000	                              mov eax, 8	       372	multi.c	FUNCTION_13	IF_4
0x40017af	    0x80bfe0010000	               cmp byte [rdi + 0x1e0], 0	       371	multi.c	FUNCTION_13	IF_4
0x40017b6	     0xf858a010000	                           jne 0x4001946	       371	multi.c	FUNCTION_13	IF_4
0x40017bc	              0x55	                                push rbp	       357	multi.c	FUNCTION_13
0x40017bd	              0x53	                                push rbx	       357	multi.c	FUNCTION_13
0x40017be	        0x4883ec08	                              sub rsp, 8	       357	multi.c	FUNCTION_13
0x40017c2	          0x4889f5	                            mov rbp, rsi	       357	multi.c	FUNCTION_13
0x40017c5	          0x4889fb	                            mov rbx, rdi	       357	multi.c	FUNCTION_13
0x40017c8	    0x488dbef04e00	                 lea rdi, [rsi + 0x4ef0]	       375	multi.c	FUNCTION_13	CALL_2
0x40017cf	      0xbe00000000	                              mov esi, 0	       375	multi.c	FUNCTION_13	CALL_2
0x40017d4	      0xe800000000	                          call 0x40017d9	       375	multi.c	FUNCTION_13	CALL_2
0x40017d9	    0x488b85000200	           mov rax, qword [rbp + 0x200] 	       383	multi.c	FUNCTION_13	IF_5
0x40017e0	          0x4885c0	                           test rax, rax	       383	multi.c	FUNCTION_13	IF_5
0x40017e3	            0x7403	                            je 0x40017e8	       383	multi.c	FUNCTION_13	IF_5
0x40017e5	          0xc60000	                       mov byte [rax], 0	       384	multi.c	FUNCTION_13	IF_5
0x40017e8	      0xbe00000000	                              mov esi, 0	       387	multi.c	FUNCTION_13
0x40017ed	          0x4889ef	                            mov rdi, rbp	       387	multi.c	FUNCTION_13
0x40017f0	      0xe84be8ffff	                         call sym.mstate	       387	multi.c	FUNCTION_13
0x40017f5	    0x80bdfd070000	               cmp byte [rbp + 0x7fd], 0	       389	multi.c	FUNCTION_13	IF_6
0x40017fc	            0x742a	                            je 0x4001828	       389	multi.c	FUNCTION_13	IF_6
0x40017fe	    0x83bda0000000	               cmp dword [rbp + 0xa0], 1	       389	multi.c	FUNCTION_13	IF_6
0x4001805	     0xf8422010000	                            je 0x400192d	       389	multi.c	FUNCTION_13	IF_6
0x400180b	      0xe800000000	                          call 0x4001810	       392	multi.c	FUNCTION_13	IF_6	CALL_3
0x4001810	          0x4885c0	                           test rax, rax	       393	multi.c	FUNCTION_13	IF_6	IF_7
0x4001813	            0x743e	                            je 0x4001853	       393	multi.c	FUNCTION_13	IF_6	IF_7
0x4001815	    0x488985980000	            mov qword [rbp + 0x98], rax 	       395	multi.c	FUNCTION_13	IF_6	IF_7
0x400181c	    0xc785a0000000	               mov dword [rbp + 0xa0], 1	       396	multi.c	FUNCTION_13	IF_6	IF_7
0x4001826	            0xeb2b	                           jmp 0x4001853	       396	multi.c	FUNCTION_13	IF_6	IF_7
0x4001828	    0x4883bd980000	               cmp qword [rbp + 0x98], 0	       401	multi.c	FUNCTION_13	ELSE_1	IF_8
0x4001830	            0x7409	                            je 0x400183b	       401	multi.c	FUNCTION_13	ELSE_1	IF_8
0x4001832	    0x83bda0000000	               cmp dword [rbp + 0xa0], 0	       401	multi.c	FUNCTION_13	ELSE_1	IF_8
0x4001839	            0x7518	                           jne 0x4001853	       401	multi.c	FUNCTION_13	ELSE_1	IF_8
0x400183b	    0x488d83800000	                   lea rax, [rbx + 0x80]	       403	multi.c	FUNCTION_13	ELSE_1	IF_8
0x4001842	    0x488985980000	            mov qword [rbp + 0x98], rax 	       403	multi.c	FUNCTION_13	ELSE_1	IF_8
0x4001849	    0xc785a0000000	               mov dword [rbp + 0xa0], 2	       404	multi.c	FUNCTION_13	ELSE_1	IF_8
0x4001853	    0x488b85b80000	            mov rax, qword [rbp + 0xb8] 	       408	multi.c	FUNCTION_13	IF_9
0x400185a	          0x4885c0	                           test rax, rax	       408	multi.c	FUNCTION_13	IF_9
0x400185d	            0x7412	                            je 0x4001871	       408	multi.c	FUNCTION_13	IF_9
0x400185f	          0xf60020	                   test byte [rax], 0x20	       408	multi.c	FUNCTION_13	IF_9
0x4001862	            0x740d	                            je 0x4001871	       408	multi.c	FUNCTION_13	IF_9
0x4001864	        0x4883c020	                           add rax, 0x20	       409	multi.c	FUNCTION_13	IF_9
0x4001868	    0x488985e80c00	           mov qword [rbp + 0xce8], rax 	       409	multi.c	FUNCTION_13	IF_9
0x400186f	            0xeb0e	                           jmp 0x400187f	       409	multi.c	FUNCTION_13	IF_9
0x4001871	    0x488d83f80000	                   lea rax, [rbx + 0xf8]	       411	multi.c	FUNCTION_13	ELSE_2
0x4001878	    0x488985e80c00	           mov qword [rbp + 0xce8], rax 	       411	multi.c	FUNCTION_13	ELSE_2
0x400187f	    0x48c745000000	                      mov qword [rbp], 0	       427	multi.c	FUNCTION_13	ELSE_3
0x4001887	      0x48837b0800	                  cmp qword [rbx + 8], 0	       428	multi.c	FUNCTION_13	ELSE_3	IF_11
0x400188c	            0x7411	                            je 0x400189f	       428	multi.c	FUNCTION_13	ELSE_3	IF_11
0x400188e	        0x488b4310	            mov rax, qword [rbx + 0x10] 	       429	multi.c	FUNCTION_13	ELSE_3	IF_11
0x4001892	          0x488928	                    mov qword [rax], rbp	       430	multi.c	FUNCTION_13	ELSE_3	IF_11
0x4001895	        0x48894508	                mov qword [rbp + 8], rax	       431	multi.c	FUNCTION_13	ELSE_3	IF_11
0x4001899	        0x48896b10	             mov qword [rbx + 0x10], rbp	       432	multi.c	FUNCTION_13	ELSE_3	IF_11
0x400189d	            0xeb10	                           jmp 0x40018af	       432	multi.c	FUNCTION_13	ELSE_3	IF_11
0x400189f	    0x48c745080000	                  mov qword [rbp + 8], 0	       436	multi.c	FUNCTION_13	ELSE_4
0x40018a7	        0x48896b08	                mov qword [rbx + 8], rbp	       437	multi.c	FUNCTION_13	ELSE_4
0x40018ab	        0x48896b10	             mov qword [rbx + 0x10], rbp	       437	multi.c	FUNCTION_13	ELSE_4
0x40018af	    0x48899da80000	            mov qword [rbp + 0xa8], rbx 	       441	multi.c	FUNCTION_13
0x40018b6	      0xba06000000	                              mov edx, 6	       449	multi.c	FUNCTION_13	CALL_4
0x40018bb	      0xbe00000000	                              mov esi, 0	       449	multi.c	FUNCTION_13	CALL_4
0x40018c0	          0x4889ef	                            mov rdi, rbp	       449	multi.c	FUNCTION_13	CALL_4
0x40018c3	      0xe800000000	                          call 0x40018c8	       449	multi.c	FUNCTION_13	CALL_4
0x40018c8	        0x83431801	               add dword [rbx + 0x18], 1	       452	multi.c	FUNCTION_13
0x40018cc	        0x83431c01	               add dword [rbx + 0x1c], 1	       455	multi.c	FUNCTION_13
0x40018d0	    0x488d93d00100	                  lea rdx, [rbx + 0x1d0]	        90	string3.h	FUNCTION_67	CALL_6
0x40018d7	      0xb904000000	                              mov ecx, 4	        90	string3.h	FUNCTION_67	CALL_6
0x40018dc	      0xb800000000	                              mov eax, 0	        90	string3.h	FUNCTION_67	CALL_6
0x40018e1	          0x4889d7	                            mov rdi, rdx	        90	string3.h	FUNCTION_67	CALL_6
0x40018e4	            0xf3ab	              rep stosd dword [rdi], eax	        90	string3.h	FUNCTION_67	CALL_6
0x40018e6	    0x488b85e80c00	           mov rax, qword [rbp + 0xce8] 	       473	multi.c	FUNCTION_13
0x40018ed	        0x488b4050	            mov rax, qword [rax + 0x50] 	       473	multi.c	FUNCTION_13
0x40018f1	    0x488b95300300	           mov rdx, qword [rbp + 0x330] 	       473	multi.c	FUNCTION_13
0x40018f8	    0x488990300300	            mov qword [rax + 0x330], rdx	       473	multi.c	FUNCTION_13
0x40018ff	    0x488b85e80c00	           mov rax, qword [rbp + 0xce8] 	       474	multi.c	FUNCTION_13
0x4001906	        0x488b4050	            mov rax, qword [rax + 0x50] 	       474	multi.c	FUNCTION_13
0x400190a	    0x488b95500300	           mov rdx, qword [rbp + 0x350] 	       475	multi.c	FUNCTION_13
0x4001911	    0x488990500300	            mov qword [rax + 0x350], rdx	       474	multi.c	FUNCTION_13
0x4001918	          0x4889df	                            mov rdi, rbx	       477	multi.c	FUNCTION_13	CALL_6
0x400191b	      0xe82ae8ffff	                   call sym.update_timer	       477	multi.c	FUNCTION_13	CALL_6
0x4001920	      0xb800000000	                              mov eax, 0	       478	multi.c	FUNCTION_13
0x4001925	            0xeb19	                           jmp 0x4001940	       478	multi.c	FUNCTION_13
0x4001927	      0xb801000000	                              mov eax, 1	       360	multi.c	FUNCTION_13	IF_1
0x400192c	              0xc3	                                     ret	       479	multi.c	FUNCTION_13
0x400192d	    0x4883bd980000	               cmp qword [rbp + 0x98], 0	       401	multi.c	FUNCTION_13	ELSE_1	IF_8
0x4001935	     0xf8518ffffff	                           jne 0x4001853	       401	multi.c	FUNCTION_13	ELSE_1	IF_8
0x400193b	      0xe9fbfeffff	                           jmp 0x400183b	       401	multi.c	FUNCTION_13	ELSE_1	IF_8
0x4001940	        0x4883c408	                              add rsp, 8	       479	multi.c	FUNCTION_13
0x4001944	              0x5b	                                 pop rbx	       479	multi.c	FUNCTION_13
0x4001945	              0x5d	                                 pop rbp	       479	multi.c	FUNCTION_13
0x4001946	              0xc3	                                     ret	       479	multi.c	FUNCTION_13
curl_multi_timeout	ELSE,0:SWITCH,0:FOR,0:WHILE,0:CALL,1:DO,0:functions,0:IF,2	15
0x400150c	          0x4885ff	                           test rdi, rdi	      2823	multi.c	ELSE_2	ELSE_3	FUNCTION_46	IF_1
0x400150f	            0x7427	                            je 0x4001538	      2823	multi.c	ELSE_2	ELSE_3	FUNCTION_46	IF_1
0x4001511	      0xb801000000	                              mov eax, 1	      2824	multi.c	ELSE_2	ELSE_3	FUNCTION_46	IF_1
0x4001516	    0x48813f1eab0b	                cmp qword [rdi], 0xbab1e	      2823	multi.c	ELSE_2	ELSE_3	FUNCTION_46	IF_1
0x400151d	            0x7523	                           jne 0x4001542	      2823	multi.c	ELSE_2	ELSE_3	FUNCTION_46	IF_1
0x400151f	      0xb808000000	                              mov eax, 8	      2827	multi.c	ELSE_2	ELSE_3	FUNCTION_46	IF_2
0x4001524	    0x80bfe0010000	               cmp byte [rdi + 0x1e0], 0	      2826	multi.c	ELSE_2	ELSE_3	FUNCTION_46	IF_2
0x400152b	            0x7515	                           jne 0x4001542	      2826	multi.c	ELSE_2	ELSE_3	FUNCTION_46	IF_2
0x400152d	        0x4883ec08	                              sub rsp, 8	      2821	multi.c	ELSE_2	ELSE_3	FUNCTION_46
0x4001531	      0xe871ebffff	                  call sym.multi_timeout	      2829	multi.c	ELSE_2	ELSE_3	FUNCTION_46	CALL_1
0x4001536	            0xeb06	                           jmp 0x400153e	      2829	multi.c	ELSE_2	ELSE_3	FUNCTION_46	CALL_1
0x4001538	      0xb801000000	                              mov eax, 1	      2824	multi.c	ELSE_2	ELSE_3	FUNCTION_46	IF_1
0x400153d	              0xc3	                                     ret	      2824	multi.c	ELSE_2	ELSE_3	FUNCTION_46	IF_1
0x400153e	        0x4883c408	                              add rsp, 8	      2830	multi.c	ELSE_2	ELSE_3	FUNCTION_46
0x4001542	            0xf3c3	                                     ret	      2830	multi.c	ELSE_2	ELSE_3	FUNCTION_46
Curl_expire_clear	ELSE,0:SWITCH,0:FOR,0:WHILE,1:CALL,4:DO,0:functions,0:IF,3	37
0x4001de2	              0x55	                                push rbp	      3019	multi.c	FUNCTION_52
0x4001de3	              0x53	                                push rbx	      3019	multi.c	FUNCTION_52
0x4001de4	        0x4883ec08	                              sub rsp, 8	      3019	multi.c	FUNCTION_52
0x4001de8	    0x488b87a80000	            mov rax, qword [rdi + 0xa8] 	      3020	multi.c	FUNCTION_52
0x4001def	          0x4885c0	                           test rax, rax	      3026	multi.c	FUNCTION_52	IF_1
0x4001df2	     0xf848e000000	                            je 0x4001e86	      3026	multi.c	FUNCTION_52	IF_1
0x4001df8	    0x4883bfa84e00	             cmp qword [rdi + 0x4ea8], 0	      3029	multi.c	FUNCTION_52	IF_2
0x4001e00	            0x7509	                           jne 0x4001e0b	      3029	multi.c	FUNCTION_52	IF_2
0x4001e02	    0x83bfb04e0000	             cmp dword [rdi + 0x4eb0], 0	      3029	multi.c	FUNCTION_52	IF_2
0x4001e09	            0x747b	                            je 0x4001e86	      3029	multi.c	FUNCTION_52	IF_2
0x4001e0b	          0x4889fb	                            mov rbx, rdi	      3029	multi.c	FUNCTION_52	IF_2
0x4001e0e	    0x488daff04e00	                 lea rbp, [rdi + 0x4ef0]	      3032	multi.c	FUNCTION_52	IF_2
0x4001e15	    0x488d90b00000	                   lea rdx, [rax + 0xb0]	      3034	multi.c	FUNCTION_52	IF_2	CALL_1
0x4001e1c	    0x488db7b84e00	                 lea rsi, [rdi + 0x4eb8]	      3034	multi.c	FUNCTION_52	IF_2	CALL_1
0x4001e23	    0x488bb8b00000	            mov rdi, qword [rax + 0xb0] 	      3034	multi.c	FUNCTION_52	IF_2	CALL_1
0x4001e2a	      0xe800000000	                          call 0x4001e2f	      3034	multi.c	FUNCTION_52	IF_2	CALL_1
0x4001e2f	            0x85c0	                           test eax, eax	      3037	multi.c	FUNCTION_52	IF_2	IF_3
0x4001e31	            0x7416	                            je 0x4001e49	      3037	multi.c	FUNCTION_52	IF_2	IF_3
0x4001e33	            0x89c2	                            mov edx, eax	      3038	multi.c	FUNCTION_52	IF_2	CALL_2
0x4001e35	    0x488d35000000	                   lea rsi, [0x04001e3c]	      3038	multi.c	FUNCTION_52	IF_2	CALL_2
0x4001e3c	          0x4889df	                            mov rdi, rbx	      3038	multi.c	FUNCTION_52	IF_2	CALL_2
0x4001e3f	      0xb800000000	                              mov eax, 0	      3038	multi.c	FUNCTION_52	IF_2	CALL_2
0x4001e44	      0xe800000000	                          call 0x4001e49	      3038	multi.c	FUNCTION_52	IF_2	CALL_2
0x4001e49	    0x4883bb084f00	             cmp qword [rbx + 0x4f08], 0	      3041	multi.c	FUNCTION_52	IF_2	WHILE_1
0x4001e51	            0x741e	                            je 0x4001e71	      3041	multi.c	FUNCTION_52	IF_2	WHILE_1
0x4001e53	    0x488bb3f84e00	          mov rsi, qword [rbx + 0x4ef8] 	      3042	multi.c	FUNCTION_52	IF_2	WHILE_1	CALL_3
0x4001e5a	      0xba00000000	                              mov edx, 0	      3042	multi.c	FUNCTION_52	IF_2	WHILE_1	CALL_3
0x4001e5f	          0x4889ef	                            mov rdi, rbp	      3042	multi.c	FUNCTION_52	IF_2	WHILE_1	CALL_3
0x4001e62	      0xe800000000	                          call 0x4001e67	      3042	multi.c	FUNCTION_52	IF_2	WHILE_1	CALL_3
0x4001e67	    0x4883bb084f00	             cmp qword [rbx + 0x4f08], 0	      3041	multi.c	FUNCTION_52	IF_2	WHILE_1
0x4001e6f	            0x75e2	                           jne 0x4001e53	      3041	multi.c	FUNCTION_52	IF_2	WHILE_1
0x4001e71	    0x48c783a84e00	            mov qword [rbx + 0x4ea8], 0 	      3048	multi.c	FUNCTION_52	IF_2
0x4001e7c	    0xc783b04e0000	            mov dword [rbx + 0x4eb0], 0 	      3049	multi.c	FUNCTION_52	IF_2
0x4001e86	        0x4883c408	                              add rsp, 8	      3051	multi.c	FUNCTION_52
0x4001e8a	              0x5b	                                 pop rbx	      3051	multi.c	FUNCTION_52
0x4001e8b	              0x5d	                                 pop rbp	      3051	multi.c	FUNCTION_52
0x4001e8c	              0xc3	                                     ret	      3051	multi.c	FUNCTION_52
Curl_multi_chunk_length_penalty_size	ELSE,0:SWITCH,0:FOR,0:WHILE,0:CALL,0:DO,0:functions,0:IF,0	6
0x4003a92	          0x4885ff	                           test rdi, rdi	      3091	multi.c	FUNCTION_57
0x4003a95	            0x7408	                            je 0x4003a9f	      3091	multi.c	FUNCTION_57
0x4003a97	    0x488b87780100	           mov rax, qword [rdi + 0x178] 	      3091	multi.c	FUNCTION_57
0x4003a9e	              0xc3	                                     ret	      3091	multi.c	FUNCTION_57
0x4003a9f	      0xb800000000	                              mov eax, 0	      3091	multi.c	FUNCTION_57
0x4003aa4	              0xc3	                                     ret	      3092	multi.c	FUNCTION_57
Curl_multi_max_total_connections	ELSE,0:SWITCH,0:FOR,0:WHILE,0:CALL,0:DO,0:functions,0:IF,0	6
0x4003a6c	          0x4885ff	                           test rdi, rdi	      3081	multi.c	FUNCTION_55
0x4003a6f	            0x7408	                            je 0x4003a79	      3081	multi.c	FUNCTION_55
0x4003a71	    0x488b87600100	           mov rax, qword [rdi + 0x160] 	      3081	multi.c	FUNCTION_55
0x4003a78	              0xc3	                                     ret	      3081	multi.c	FUNCTION_55
0x4003a79	      0xb800000000	                              mov eax, 0	      3081	multi.c	FUNCTION_55
0x4003a7e	              0xc3	                                     ret	      3082	multi.c	FUNCTION_55
Curl_is_in_callback	ELSE,0:SWITCH,0:FOR,0:WHILE,0:CALL,0:DO,0:functions,0:IF,0	14
0x4003ade	    0x488b97a80000	            mov rdx, qword [rdi + 0xa8] 	      3132	multi.c	FUNCTION_62
0x4003ae5	          0x4885d2	                           test rdx, rdx	      3132	multi.c	FUNCTION_62
0x4003ae8	            0x740e	                            je 0x4003af8	      3132	multi.c	FUNCTION_62
0x4003aea	      0xb801000000	                              mov eax, 1	      3132	multi.c	FUNCTION_62
0x4003aef	    0x80bae0010000	               cmp byte [rdx + 0x1e0], 0	      3132	multi.c	FUNCTION_62
0x4003af6	            0x751a	                           jne 0x4003b12	      3132	multi.c	FUNCTION_62
0x4003af8	    0x488b87b00000	            mov rax, qword [rdi + 0xb0] 	      3133	multi.c	FUNCTION_62
0x4003aff	          0x4885c0	                           test rax, rax	      3132	multi.c	FUNCTION_62
0x4003b02	            0x7409	                            je 0x4003b0d	      3132	multi.c	FUNCTION_62
0x4003b04	     0xfb680e00100	          movzx eax, byte [rax + 0x1e0] 	      3132	multi.c	FUNCTION_62
0x4003b0b	            0xeb05	                           jmp 0x4003b12	      3132	multi.c	FUNCTION_62
0x4003b0d	      0xb800000000	                              mov eax, 0	      3132	multi.c	FUNCTION_62
0x4003b12	          0x83e001	                              and eax, 1	      3132	multi.c	FUNCTION_62
0x4003b15	              0xc3	                                     ret	      3134	multi.c	FUNCTION_62
curl_multi_remove_handle	ELSE,3:SWITCH,0:FOR,1:WHILE,0:CALL,10:DO,0:functions,0:IF,14	148
0x4001e8d	          0x4885ff	                           test rdi, rdi	       648	multi.c	FUNCTION_16	IF_1
0x4001e90	     0xf8407020000	                            je 0x400209d	       648	multi.c	FUNCTION_16	IF_1
0x4001e96	      0xb801000000	                              mov eax, 1	       649	multi.c	FUNCTION_16	IF_1
0x4001e9b	    0x48813f1eab0b	                cmp qword [rdi], 0xbab1e	       648	multi.c	FUNCTION_16	IF_1
0x4001ea2	     0xf853a020000	                           jne 0x40020e2	       648	multi.c	FUNCTION_16	IF_1
0x4001ea8	      0xb802000000	                              mov eax, 2	       653	multi.c	FUNCTION_16	IF_2
0x4001ead	          0x4885f6	                           test rsi, rsi	       652	multi.c	FUNCTION_16	IF_2	CALL_1
0x4001eb0	     0xf842c020000	                            je 0x40020e2	       652	multi.c	FUNCTION_16	IF_2	CALL_1
0x4001eb6	    0x81bed0520000	   cmp dword [rsi + 0x52d0], 0xc0dedbad 	       652	multi.c	FUNCTION_16	IF_2	CALL_1
0x4001ec0	     0xf851c020000	                           jne 0x40020e2	       652	multi.c	FUNCTION_16	IF_2	CALL_1
0x4001ec6	    0x4883bea80000	               cmp qword [rsi + 0xa8], 0	       656	multi.c	FUNCTION_16	IF_3
0x4001ece	     0xf84cf010000	                            je 0x40020a3	       656	multi.c	FUNCTION_16	IF_3
0x4001ed4	      0xb808000000	                              mov eax, 8	       660	multi.c	FUNCTION_16	IF_4
0x4001ed9	    0x80bfe0010000	               cmp byte [rdi + 0x1e0], 0	       659	multi.c	FUNCTION_16	IF_4
0x4001ee0	     0xf85fc010000	                           jne 0x40020e2	       659	multi.c	FUNCTION_16	IF_4
0x4001ee6	            0x4155	                                push r13	       641	multi.c	FUNCTION_16
0x4001ee8	            0x4154	                                push r12	       641	multi.c	FUNCTION_16
0x4001eea	              0x55	                                push rbp	       641	multi.c	FUNCTION_16
0x4001eeb	              0x53	                                push rbx	       641	multi.c	FUNCTION_16
0x4001eec	        0x4883ec08	                              sub rsp, 8	       641	multi.c	FUNCTION_16
0x4001ef0	          0x4889f5	                            mov rbp, rsi	       641	multi.c	FUNCTION_16
0x4001ef3	          0x4889fb	                            mov rbx, rdi	       641	multi.c	FUNCTION_16
0x4001ef6	        0x448b6648	           mov r12d, dword [rsi + 0x48] 	       662	multi.c	FUNCTION_16
0x4001efa	        0x488b4610	            mov rax, qword [rsi + 0x10] 	       663	multi.c	FUNCTION_16
0x4001efe	          0x4885c0	                           test rax, rax	       664	multi.c	FUNCTION_16
0x4001f01	     0xf84bc010000	                            je 0x40020c3	       664	multi.c	FUNCTION_16
0x4001f07	          0x483b30	                    cmp rsi, qword [rax]	       664	multi.c	FUNCTION_16
0x4001f0a	     0xf85a8010000	                           jne 0x40020b8	       664	multi.c	FUNCTION_16
0x4001f10	        0x4183fc10	                          cmp r12d, 0x10	       668	multi.c	FUNCTION_16	IF_5
0x4001f14	            0x771c	                            ja 0x4001f32	       668	multi.c	FUNCTION_16	IF_5
0x4001f16	    0x41bd01000000	                             mov r13d, 1	       664	multi.c	FUNCTION_16
0x4001f1c	            0xeb0e	                           jmp 0x4001f2c	       664	multi.c	FUNCTION_16
0x4001f1e	    0x41bd00000000	                             mov r13d, 0	       664	multi.c	FUNCTION_16
0x4001f24	            0xeb06	                           jmp 0x4001f2c	       664	multi.c	FUNCTION_16
0x4001f26	    0x41bd00000000	                             mov r13d, 0	       664	multi.c	FUNCTION_16
0x4001f2c	        0x836b1c01	               sub dword [rbx + 0x1c], 1	       671	multi.c	FUNCTION_16	IF_5
0x4001f30	            0xeb06	                           jmp 0x4001f38	       671	multi.c	FUNCTION_16	IF_5
0x4001f32	    0x41bd01000000	                             mov r13d, 1	       664	multi.c	FUNCTION_16
0x4001f38	        0x488b5510	            mov rdx, qword [rbp + 0x10] 	       674	multi.c	FUNCTION_16	IF_6
0x4001f3c	          0x4885d2	                           test rdx, rdx	       674	multi.c	FUNCTION_16	IF_6
0x4001f3f	            0x742d	                            je 0x4001f6e	       674	multi.c	FUNCTION_16	IF_6
0x4001f41	          0x8b4548	            mov eax, dword [rbp + 0x48] 	       675	multi.c	FUNCTION_16	IF_6
0x4001f44	          0x83e80a	                            sub eax, 0xa	       675	multi.c	FUNCTION_16	IF_6
0x4001f47	          0x83f806	                              cmp eax, 6	       675	multi.c	FUNCTION_16	IF_6
0x4001f4a	            0x7722	                            ja 0x4001f6e	       675	multi.c	FUNCTION_16	IF_6
0x4001f4c	          0x48892a	                    mov qword [rdx], rbp	       679	multi.c	FUNCTION_16	IF_6
0x4001f4f	        0x488b7d10	            mov rdi, qword [rbp + 0x10] 	       683	multi.c	FUNCTION_16	IF_6	CALL_2
0x4001f53	      0xbe02000000	                              mov esi, 2	       683	multi.c	FUNCTION_16	IF_6	CALL_2
0x4001f58	      0xe800000000	                          call 0x4001f5d	       683	multi.c	FUNCTION_16	IF_6	CALL_2
0x4001f5d	          0x4889ef	                            mov rdi, rbp	       690	multi.c	FUNCTION_16	CALL_3
0x4001f60	      0xe800000000	                          call 0x4001f65	       690	multi.c	FUNCTION_16	CALL_3
0x4001f65	      0x48837d1000	               cmp qword [rbp + 0x10], 0	       692	multi.c	FUNCTION_16	IF_7
0x4001f6a	            0x7518	                           jne 0x4001f84	       692	multi.c	FUNCTION_16	IF_7
0x4001f6c	            0xeb36	                           jmp 0x4001fa4	       692	multi.c	FUNCTION_16	IF_7
0x4001f6e	          0x4889ef	                            mov rdi, rbp	       690	multi.c	FUNCTION_16	CALL_3
0x4001f71	      0xe800000000	                          call 0x4001f76	       690	multi.c	FUNCTION_16	CALL_3
0x4001f76	        0x488b7510	            mov rsi, qword [rbp + 0x10] 	       692	multi.c	FUNCTION_16	IF_7
0x4001f7a	          0x4885f6	                           test rsi, rsi	       692	multi.c	FUNCTION_16	IF_7
0x4001f7d	            0x7425	                            je 0x4001fa4	       692	multi.c	FUNCTION_16	IF_7
0x4001f7f	          0x4585ed	                         test r13d, r13d	       696	multi.c	FUNCTION_16	IF_7	IF_8
0x4001f82	            0x7418	                            je 0x4001f9c	       696	multi.c	FUNCTION_16	IF_7	IF_8
0x4001f84	        0x4183fc10	                          cmp r12d, 0x10	       703	multi.c	FUNCTION_16	IF_7	IF_8	CALL_4
0x4001f88	           0xf96c2	                                setbe dl	       703	multi.c	FUNCTION_16	IF_7	IF_8	CALL_4
0x4001f8b	           0xfb6d2	                           movzx edx, dl	       703	multi.c	FUNCTION_16	IF_7	IF_8	CALL_4
0x4001f8e	          0x8b754c	            mov esi, dword [rbp + 0x4c] 	       703	multi.c	FUNCTION_16	IF_7	IF_8	CALL_4
0x4001f91	        0x488d7d10	                   lea rdi, [rbp + 0x10]	       703	multi.c	FUNCTION_16	IF_7	IF_8	CALL_4
0x4001f95	      0xe848faffff	                     call sym.multi_done	       703	multi.c	FUNCTION_16	IF_7	IF_8	CALL_4
0x4001f9a	            0xeb08	                           jmp 0x4001fa4	       703	multi.c	FUNCTION_16	IF_7	IF_8	CALL_4
0x4001f9c	          0x4889ef	                            mov rdi, rbp	       707	multi.c	FUNCTION_16	IF_7	CALL_5
0x4001f9f	      0xe800000000	                          call 0x4001fa4	       707	multi.c	FUNCTION_16	IF_7	CALL_5
0x4001fa4	    0x83bda0000000	               cmp dword [rbp + 0xa0], 2	       710	multi.c	FUNCTION_16	IF_9
0x4001fab	            0x7515	                           jne 0x4001fc2	       710	multi.c	FUNCTION_16	IF_9
0x4001fad	    0x48c785980000	               mov qword [rbp + 0x98], 0	       713	multi.c	FUNCTION_16	IF_9
0x4001fb8	    0xc785a0000000	               mov dword [rbp + 0xa0], 0	       714	multi.c	FUNCTION_16	IF_9
0x4001fc2	    0x488dbd885100	                 lea rdi, [rbp + 0x5188]	       717	multi.c	FUNCTION_16	CALL_6
0x4001fc9	      0xe800000000	                          call 0x4001fce	       717	multi.c	FUNCTION_16	CALL_6
0x4001fce	    0x488dbdf04e00	                 lea rdi, [rbp + 0x4ef0]	       721	multi.c	FUNCTION_16	CALL_7
0x4001fd5	      0xbe00000000	                              mov esi, 0	       721	multi.c	FUNCTION_16	CALL_7
0x4001fda	      0xe800000000	                          call 0x4001fdf	       721	multi.c	FUNCTION_16	CALL_7
0x4001fdf	    0x48c785e80c00	              mov qword [rbp + 0xce8], 0	       725	multi.c	FUNCTION_16
0x4001fea	    0xc74548110000	           mov dword [rbp + 0x48], 0x11 	       729	multi.c	FUNCTION_16
0x4001ff1	          0x4889ee	                            mov rsi, rbp	       730	multi.c	FUNCTION_16	CALL_8
0x4001ff4	          0x4889df	                            mov rdi, rbx	       730	multi.c	FUNCTION_16	CALL_8
0x4001ff7	      0xe83ce4ffff	                   call sym.singlesocket	       730	multi.c	FUNCTION_16	CALL_8
0x4001ffc	        0x488b4510	            mov rax, qword [rbp + 0x10] 	       734	multi.c	FUNCTION_16	IF_10
0x4002000	          0x4885c0	                           test rax, rax	       734	multi.c	FUNCTION_16	IF_10
0x4002003	            0x740f	                            je 0x4002014	       734	multi.c	FUNCTION_16	IF_10
0x4002005	    0x48c700000000	                      mov qword [rax], 0	       735	multi.c	FUNCTION_16	IF_10
0x400200c	    0x48c745100000	               mov qword [rbp + 0x10], 0	       736	multi.c	FUNCTION_16	IF_10
0x4002014	    0x48c785a80000	               mov qword [rbp + 0xa8], 0	       745	multi.c	FUNCTION_16
0x400201f	        0x488b7320	            mov rsi, qword [rbx + 0x20] 	       750	multi.c	FUNCTION_16	FOR_1
0x4002023	          0x4885f6	                           test rsi, rsi	       750	multi.c	FUNCTION_16	FOR_1
0x4002026	            0x742d	                            je 0x4002055	       750	multi.c	FUNCTION_16	FOR_1
0x4002028	          0x488b06	                    mov rax, qword [rsi]	       753	multi.c	FUNCTION_16	FOR_1	IF_12
0x400202b	        0x483b6820	            cmp rbp, qword [rax + 0x20] 	       753	multi.c	FUNCTION_16	FOR_1	IF_12
0x400202f	            0x751b	                           jne 0x400204c	       753	multi.c	FUNCTION_16	FOR_1	IF_12
0x4002031	            0xeb09	                           jmp 0x400203c	       753	multi.c	FUNCTION_16	FOR_1	IF_12
0x4002033	          0x488b06	                    mov rax, qword [rsi]	       753	multi.c	FUNCTION_16	FOR_1	IF_12
0x4002036	        0x483b6820	            cmp rbp, qword [rax + 0x20] 	       753	multi.c	FUNCTION_16	FOR_1	IF_12
0x400203a	            0x7510	                           jne 0x400204c	       753	multi.c	FUNCTION_16	FOR_1	IF_12
0x400203c	        0x488d7b20	                   lea rdi, [rbx + 0x20]	       754	multi.c	FUNCTION_16	FOR_1	IF_12	CALL_9
0x4002040	      0xba00000000	                              mov edx, 0	       754	multi.c	FUNCTION_16	FOR_1	IF_12	CALL_9
0x4002045	      0xe800000000	                          call 0x400204a	       754	multi.c	FUNCTION_16	FOR_1	IF_12	CALL_9
0x400204a	            0xeb09	                           jmp 0x4002055	       756	multi.c	FUNCTION_16	FOR_1	IF_12
0x400204c	        0x488b7610	            mov rsi, qword [rsi + 0x10] 	       750	multi.c	FUNCTION_16	FOR_1
0x4002050	          0x4885f6	                           test rsi, rsi	       750	multi.c	FUNCTION_16	FOR_1
0x4002053	            0x75de	                           jne 0x4002033	       750	multi.c	FUNCTION_16	FOR_1
0x4002055	        0x488b4508	                mov rax, qword [rbp + 8]	       761	multi.c	FUNCTION_16	IF_13
0x4002059	          0x4885c0	                           test rax, rax	       761	multi.c	FUNCTION_16	IF_13
0x400205c	            0x7409	                            je 0x4002067	       761	multi.c	FUNCTION_16	IF_13
0x400205e	        0x488b5500	                    mov rdx, qword [rbp]	       762	multi.c	FUNCTION_16	IF_13
0x4002062	          0x488910	                    mov qword [rax], rdx	       762	multi.c	FUNCTION_16	IF_13
0x4002065	            0xeb08	                           jmp 0x400206f	       762	multi.c	FUNCTION_16	IF_13
0x4002067	        0x488b4500	                    mov rax, qword [rbp]	       764	multi.c	FUNCTION_16	ELSE_2
0x400206b	        0x48894308	                mov qword [rbx + 8], rax	       764	multi.c	FUNCTION_16	ELSE_2
0x400206f	        0x488b4500	                    mov rax, qword [rbp]	       767	multi.c	FUNCTION_16	IF_14
0x4002073	          0x4885c0	                           test rax, rax	       767	multi.c	FUNCTION_16	IF_14
0x4002076	            0x740a	                            je 0x4002082	       767	multi.c	FUNCTION_16	IF_14
0x4002078	        0x488b5508	                mov rdx, qword [rbp + 8]	       768	multi.c	FUNCTION_16	IF_14
0x400207c	        0x48895008	                mov qword [rax + 8], rdx	       768	multi.c	FUNCTION_16	IF_14
0x4002080	            0xeb08	                           jmp 0x400208a	       768	multi.c	FUNCTION_16	IF_14
0x4002082	        0x488b4508	                mov rax, qword [rbp + 8]	       770	multi.c	FUNCTION_16	ELSE_3
0x4002086	        0x48894310	             mov qword [rbx + 0x10], rax	       770	multi.c	FUNCTION_16	ELSE_3
0x400208a	        0x836b1801	               sub dword [rbx + 0x18], 1	       774	multi.c	FUNCTION_16
0x400208e	          0x4889df	                            mov rdi, rbx	       776	multi.c	FUNCTION_16	CALL_10
0x4002091	      0xe8b4e0ffff	                   call sym.update_timer	       776	multi.c	FUNCTION_16	CALL_10
0x4002096	      0xb800000000	                              mov eax, 0	       777	multi.c	FUNCTION_16
0x400209b	            0xeb3b	                           jmp 0x40020d8	       777	multi.c	FUNCTION_16
0x400209d	      0xb801000000	                              mov eax, 1	       649	multi.c	FUNCTION_16	IF_1
0x40020a2	              0xc3	                                     ret	       778	multi.c	FUNCTION_16
0x40020a3	      0xb800000000	                              mov eax, 0	       657	multi.c	FUNCTION_16	IF_3
0x40020a8	              0xc3	                                     ret	       657	multi.c	FUNCTION_16	IF_3
0x40020a9	        0x488b5510	            mov rdx, qword [rbp + 0x10] 	       674	multi.c	FUNCTION_16	IF_6
0x40020ad	    0x41bd00000000	                             mov r13d, 0	       664	multi.c	FUNCTION_16
0x40020b3	      0xe989feffff	                           jmp 0x4001f41	       664	multi.c	FUNCTION_16
0x40020b8	        0x4183fc10	                          cmp r12d, 0x10	       668	multi.c	FUNCTION_16	IF_5
0x40020bc	            0x77eb	                            ja 0x40020a9	       668	multi.c	FUNCTION_16	IF_5
0x40020be	      0xe95bfeffff	                           jmp 0x4001f1e	       668	multi.c	FUNCTION_16	IF_5
0x40020c3	    0x41bd00000000	                             mov r13d, 0	       664	multi.c	FUNCTION_16
0x40020c9	        0x4183fc10	                          cmp r12d, 0x10	       668	multi.c	FUNCTION_16	IF_5
0x40020cd	     0xf879bfeffff	                            ja 0x4001f6e	       668	multi.c	FUNCTION_16	IF_5
0x40020d3	      0xe94efeffff	                           jmp 0x4001f26	       668	multi.c	FUNCTION_16	IF_5
0x40020d8	        0x4883c408	                              add rsp, 8	       778	multi.c	FUNCTION_16
0x40020dc	              0x5b	                                 pop rbx	       778	multi.c	FUNCTION_16
0x40020dd	              0x5d	                                 pop rbp	       778	multi.c	FUNCTION_16
0x40020de	            0x415c	                                 pop r12	       778	multi.c	FUNCTION_16
0x40020e0	            0x415d	                                 pop r13	       778	multi.c	FUNCTION_16
0x40020e2	            0xf3c3	                                     ret	       778	multi.c	FUNCTION_16
Curl_updatesocket	ELSE,0:SWITCH,0:FOR,0:WHILE,0:CALL,1:DO,0:functions,0:IF,0	6
0x400109f	        0x4883ec08	                              sub rsp, 8	      2447	multi.c	FUNCTION_37
0x40010a3	          0x4889fe	                            mov rsi, rdi	      2447	multi.c	FUNCTION_37
0x40010a6	    0x488bbfa80000	            mov rdi, qword [rdi + 0xa8] 	      2448	multi.c	FUNCTION_37	CALL_1
0x40010ad	      0xe886f3ffff	                   call sym.singlesocket	      2448	multi.c	FUNCTION_37	CALL_1
0x40010b2	        0x4883c408	                              add rsp, 8	      2449	multi.c	FUNCTION_37
0x40010b6	              0xc3	                                     ret	      2449	multi.c	FUNCTION_37
add_next_timeout	ELSE,2:SWITCH,0:FOR,1:WHILE,0:CALL,4:DO,0:functions,0:IF,2	64
0x40008ff	            0x4157	                                push r15	      2497	multi.c	FUNCTION_39
0x4000901	            0x4156	                                push r14	      2497	multi.c	FUNCTION_39
0x4000903	            0x4155	                                push r13	      2497	multi.c	FUNCTION_39
0x4000905	            0x4154	                                push r12	      2497	multi.c	FUNCTION_39
0x4000907	              0x55	                                push rbp	      2497	multi.c	FUNCTION_39
0x4000908	              0x53	                                push rbx	      2497	multi.c	FUNCTION_39
0x4000909	        0x4883ec28	                           sub rsp, 0x28	      2497	multi.c	FUNCTION_39
0x400090d	          0x4989fe	                            mov r14, rdi	      2497	multi.c	FUNCTION_39
0x4000910	          0x4989f5	                            mov r13, rsi	      2497	multi.c	FUNCTION_39
0x4000913	      0x4889542418	             mov qword [rsp + 0x18], rdx	      2497	multi.c	FUNCTION_39
0x4000918	          0x4889c8	                            mov rax, rcx	      2497	multi.c	FUNCTION_39
0x400091b	      0x48894c2408	                mov qword [rsp + 8], rcx	      2497	multi.c	FUNCTION_39
0x4000920	    0x488d89a84e00	                 lea rcx, [rcx + 0x4ea8]	      2498	multi.c	FUNCTION_39
0x4000927	      0x48894c2410	             mov qword [rsp + 0x10], rcx	      2498	multi.c	FUNCTION_39
0x400092c	    0x4c8db8f04e00	                 lea r15, [rax + 0x4ef0]	      2499	multi.c	FUNCTION_39
0x4000933	    0x488b98f04e00	          mov rbx, qword [rax + 0x4ef0] 	      2506	multi.c	FUNCTION_39	FOR_1
0x400093a	          0x4885db	                           test rbx, rbx	      2506	multi.c	FUNCTION_39	FOR_1
0x400093d	            0x7446	                            je 0x4000985	      2506	multi.c	FUNCTION_39	FOR_1
0x400093f	        0x4c8b6310	            mov r12, qword [rbx + 0x10] 	      2507	multi.c	FUNCTION_39	FOR_1
0x4000943	          0x488b2b	                    mov rbp, qword [rbx]	      2509	multi.c	FUNCTION_39	FOR_1
0x4000946	        0x488b7d18	            mov rdi, qword [rbp + 0x18] 	      2510	multi.c	FUNCTION_39	FOR_1	CALL_1
0x400094a	        0x488b7520	            mov rsi, qword [rbp + 0x20] 	      2510	multi.c	FUNCTION_39	FOR_1	CALL_1
0x400094e	          0x4c89f2	                            mov rdx, r14	      2510	multi.c	FUNCTION_39	FOR_1	CALL_1
0x4000951	          0x4c89e9	                            mov rcx, r13	      2510	multi.c	FUNCTION_39	FOR_1	CALL_1
0x4000954	      0xe800000000	                          call 0x4000959	      2510	multi.c	FUNCTION_39	FOR_1	CALL_1
0x4000959	          0x4885c0	                           test rax, rax	      2511	multi.c	FUNCTION_39	FOR_1	IF_1
0x400095c	            0x7f18	                            jg 0x4000976	      2511	multi.c	FUNCTION_39	FOR_1	IF_1
0x400095e	      0xba00000000	                              mov edx, 0	      2513	multi.c	FUNCTION_39	FOR_1	CALL_2
0x4000963	          0x4889de	                            mov rsi, rbx	      2513	multi.c	FUNCTION_39	FOR_1	CALL_2
0x4000966	          0x4c89ff	                            mov rdi, r15	      2513	multi.c	FUNCTION_39	FOR_1	CALL_2
0x4000969	      0xe800000000	                          call 0x400096e	      2513	multi.c	FUNCTION_39	FOR_1	CALL_2
0x400096e	          0x4c89e3	                            mov rbx, r12	      2517	multi.c	FUNCTION_39	FOR_1	ELSE_1
0x4000971	          0x4d85e4	                           test r12, r12	      2506	multi.c	FUNCTION_39	FOR_1
0x4000974	            0x75c9	                           jne 0x400093f	      2506	multi.c	FUNCTION_39	FOR_1
0x4000976	      0x488b442408	                mov rax, qword [rsp + 8]	      2520	multi.c	FUNCTION_39	ELSE_1	IF_2
0x400097b	    0x4883b8f04e00	             cmp qword [rax + 0x4ef0], 0	      2520	multi.c	FUNCTION_39	ELSE_1	IF_2
0x4000983	            0x751c	                           jne 0x40009a1	      2520	multi.c	FUNCTION_39	ELSE_1	IF_2
0x4000985	      0x488b442408	                mov rax, qword [rsp + 8]	      2523	multi.c	FUNCTION_39	ELSE_1	IF_2
0x400098a	    0x48c780a84e00	            mov qword [rax + 0x4ea8], 0 	      2523	multi.c	FUNCTION_39	ELSE_1	IF_2
0x4000995	    0xc780b04e0000	            mov dword [rax + 0x4eb0], 0 	      2524	multi.c	FUNCTION_39	ELSE_1	IF_2
0x400099f	            0xeb4d	                           jmp 0x40009ee	      2524	multi.c	FUNCTION_39	ELSE_1	IF_2
0x40009a1	        0x488b4518	            mov rax, qword [rbp + 0x18] 	      2524	multi.c	FUNCTION_39	ELSE_1	IF_2
0x40009a5	        0x488b5520	            mov rdx, qword [rbp + 0x20] 	      2524	multi.c	FUNCTION_39	ELSE_1	IF_2
0x40009a9	      0x488b4c2408	                mov rcx, qword [rsp + 8]	        53	string3.h	FUNCTION_64	CALL_3
0x40009ae	    0x488981a84e00	          mov qword [rcx + 0x4ea8], rax 	        53	string3.h	FUNCTION_64	CALL_3
0x40009b5	    0x488991b04e00	          mov qword [rcx + 0x4eb0], rdx 	        53	string3.h	FUNCTION_64	CALL_3
0x40009bc	          0x4889c8	                            mov rax, rcx	      2532	multi.c	FUNCTION_39	ELSE_2	CALL_4
0x40009bf	    0x4881c1b84e00	                         add rcx, 0x4eb8	      2532	multi.c	FUNCTION_39	ELSE_2	CALL_4
0x40009c6	      0x488b5c2418	            mov rbx, qword [rsp + 0x18] 	      2532	multi.c	FUNCTION_39	ELSE_2	CALL_4
0x40009cb	    0x488b93b00000	            mov rdx, qword [rbx + 0xb0] 	      2532	multi.c	FUNCTION_39	ELSE_2	CALL_4
0x40009d2	    0x488bb8a84e00	          mov rdi, qword [rax + 0x4ea8] 	      2532	multi.c	FUNCTION_39	ELSE_2	CALL_4
0x40009d9	      0x488b442410	            mov rax, qword [rsp + 0x10] 	      2532	multi.c	FUNCTION_39	ELSE_2	CALL_4
0x40009de	        0x488b7008	                mov rsi, qword [rax + 8]	      2532	multi.c	FUNCTION_39	ELSE_2	CALL_4
0x40009e2	      0xe800000000	                          call 0x40009e7	      2532	multi.c	FUNCTION_39	ELSE_2	CALL_4
0x40009e7	    0x488983b00000	             mov qword [rbx + 0xb0], rax	      2532	multi.c	FUNCTION_39	ELSE_2	CALL_4
0x40009ee	      0xb800000000	                              mov eax, 0	      2536	multi.c	FUNCTION_39
0x40009f3	        0x4883c428	                           add rsp, 0x28	      2536	multi.c	FUNCTION_39
0x40009f7	              0x5b	                                 pop rbx	      2536	multi.c	FUNCTION_39
0x40009f8	              0x5d	                                 pop rbp	      2536	multi.c	FUNCTION_39
0x40009f9	            0x415c	                                 pop r12	      2536	multi.c	FUNCTION_39
0x40009fb	            0x415d	                                 pop r13	      2536	multi.c	FUNCTION_39
0x40009fd	            0x415e	                                 pop r14	      2536	multi.c	FUNCTION_39
0x40009ff	            0x415f	                                 pop r15	      2536	multi.c	FUNCTION_39
0x4000a01	              0xc3	                                     ret	      2536	multi.c	FUNCTION_39
hash_fd	ELSE,0:SWITCH,0:FOR,0:WHILE,0:CALL,0:DO,0:functions,0:IF,0	6
0x4000093	          0x4889d1	                            mov rcx, rdx	       253	multi.c	FUNCTION_7
0x4000096	          0x486307	                 movsxd rax, dword [rdi]	       257	multi.c	FUNCTION_7
0x4000099	      0xba00000000	                              mov edx, 0	       257	multi.c	FUNCTION_7
0x400009e	          0x48f7f1	                                 div rcx	       257	multi.c	FUNCTION_7
0x40000a1	          0x4889d0	                            mov rax, rdx	       258	multi.c	FUNCTION_7
0x40000a4	              0xc3	                                     ret	       258	multi.c	FUNCTION_7
multi_deltimeout	ELSE,0:SWITCH,0:FOR,1:WHILE,0:CALL,1:DO,0:functions,0:IF,1	21
0x4000237	        0x4883ec08	                              sub rsp, 8	      2875	multi.c	FUNCTION_48
0x400023b	    0x488b87f04e00	          mov rax, qword [rdi + 0x4ef0] 	      2879	multi.c	FUNCTION_48	FOR_1
0x4000242	          0x4885c0	                           test rax, rax	      2879	multi.c	FUNCTION_48	FOR_1
0x4000245	            0x7431	                            je 0x4000278	      2879	multi.c	FUNCTION_48	FOR_1
0x4000247	          0x488b10	                    mov rdx, qword [rax]	      2881	multi.c	FUNCTION_48	FOR_1	IF_1
0x400024a	          0x3b7228	            cmp esi, dword [rdx + 0x28] 	      2881	multi.c	FUNCTION_48	FOR_1	IF_1
0x400024d	            0x7520	                           jne 0x400026f	      2881	multi.c	FUNCTION_48	FOR_1	IF_1
0x400024f	            0xeb08	                           jmp 0x4000259	      2881	multi.c	FUNCTION_48	FOR_1	IF_1
0x4000251	          0x488b10	                    mov rdx, qword [rax]	      2881	multi.c	FUNCTION_48	FOR_1	IF_1
0x4000254	          0x397228	            cmp dword [rdx + 0x28], esi 	      2881	multi.c	FUNCTION_48	FOR_1	IF_1
0x4000257	            0x7516	                           jne 0x400026f	      2881	multi.c	FUNCTION_48	FOR_1	IF_1
0x4000259	    0x4881c7f04e00	                         add rdi, 0x4ef0	      2877	multi.c	FUNCTION_48
0x4000260	      0xba00000000	                              mov edx, 0	      2882	multi.c	FUNCTION_48	FOR_1	IF_1	CALL_1
0x4000265	          0x4889c6	                            mov rsi, rax	      2882	multi.c	FUNCTION_48	FOR_1	IF_1	CALL_1
0x4000268	      0xe800000000	                          call 0x400026d	      2882	multi.c	FUNCTION_48	FOR_1	IF_1	CALL_1
0x400026d	            0xeb09	                           jmp 0x4000278	      2883	multi.c	FUNCTION_48	FOR_1	IF_1
0x400026f	        0x488b4010	            mov rax, qword [rax + 0x10] 	      2879	multi.c	FUNCTION_48	FOR_1
0x4000273	          0x4885c0	                           test rax, rax	      2879	multi.c	FUNCTION_48	FOR_1
0x4000276	            0x75d9	                           jne 0x4000251	      2879	multi.c	FUNCTION_48	FOR_1
0x4000278	        0x4883c408	                              add rsp, 8	      2886	multi.c	FUNCTION_48
0x400027c	              0xc3	                                     ret	      2886	multi.c	FUNCTION_48
Curl_multi_handlePipeBreak	ELSE,0:SWITCH,0:FOR,0:WHILE,0:CALL,0:DO,0:functions,0:IF,0	2
0x4000b58	    0x48c747100000	               mov qword [rdi + 0x10], 0	       788	multi.c	FUNCTION_18
0x4000b60	              0xc3	                                     ret	       788	multi.c	FUNCTION_18
curl_multi_socket_action	ELSE,0:SWITCH,0:FOR,0:WHILE,0:CALL,2:DO,0:functions,0:IF,2	22
0x400399c	      0xb808000000	                              mov eax, 8	      2761	multi.c	FUNCTION_43	IF_1
0x40039a1	    0x80bfe0010000	               cmp byte [rdi + 0x1e0], 0	      2760	multi.c	FUNCTION_43	IF_1
0x40039a8	            0x7530	                           jne 0x40039da	      2760	multi.c	FUNCTION_43	IF_1
0x40039aa	              0x55	                                push rbp	      2758	multi.c	FUNCTION_43
0x40039ab	              0x53	                                push rbx	      2758	multi.c	FUNCTION_43
0x40039ac	        0x4883ec08	                              sub rsp, 8	      2758	multi.c	FUNCTION_43
0x40039b0	          0x4989c8	                             mov r8, rcx	      2758	multi.c	FUNCTION_43
0x40039b3	            0x89d1	                            mov ecx, edx	      2758	multi.c	FUNCTION_43
0x40039b5	          0x4889fb	                            mov rbx, rdi	      2758	multi.c	FUNCTION_43
0x40039b8	            0x89f2	                            mov edx, esi	      2762	multi.c	FUNCTION_43	CALL_1
0x40039ba	      0xbe00000000	                              mov esi, 0	      2762	multi.c	FUNCTION_43	CALL_1
0x40039bf	      0xe821fdffff	                   call sym.multi_socket	      2762	multi.c	FUNCTION_43	CALL_1
0x40039c4	            0x89c5	                            mov ebp, eax	      2762	multi.c	FUNCTION_43	CALL_1
0x40039c6	            0x85c0	                           test eax, eax	      2763	multi.c	FUNCTION_43	IF_2
0x40039c8	            0x7f0a	                            jg 0x40039d4	      2763	multi.c	FUNCTION_43	IF_2
0x40039ca	          0x4889df	                            mov rdi, rbx	      2764	multi.c	FUNCTION_43	CALL_2
0x40039cd	      0xe878c7ffff	                   call sym.update_timer	      2764	multi.c	FUNCTION_43	CALL_2
0x40039d2	            0x89e8	                            mov eax, ebp	      2765	multi.c	FUNCTION_43
0x40039d4	        0x4883c408	                              add rsp, 8	      2766	multi.c	FUNCTION_43
0x40039d8	              0x5b	                                 pop rbx	      2766	multi.c	FUNCTION_43
0x40039d9	              0x5d	                                 pop rbp	      2766	multi.c	FUNCTION_43
0x40039da	            0xf3c3	                                     ret	      2766	multi.c	FUNCTION_43
multi_done	ELSE,3:SWITCH,1:FOR,1:WHILE,0:CALL,20:DO,0:functions,0:IF,9	156
0x40019e2	            0x4157	                                push r15	       501	multi.c	FUNCTION_15
0x40019e4	            0x4156	                                push r14	       501	multi.c	FUNCTION_15
0x40019e6	            0x4155	                                push r13	       501	multi.c	FUNCTION_15
0x40019e8	            0x4154	                                push r12	       501	multi.c	FUNCTION_15
0x40019ea	              0x55	                                push rbp	       501	multi.c	FUNCTION_15
0x40019eb	              0x53	                                push rbx	       501	multi.c	FUNCTION_15
0x40019ec	    0x4881ec280100	                          sub rsp, 0x128	       501	multi.c	FUNCTION_15
0x40019f3	        0x8854240f	                mov byte [rsp + 0xf], dl	       501	multi.c	FUNCTION_15
0x40019f7	    0x64488b042528	                mov rax, qword fs:[0x28]	       501	multi.c	FUNCTION_15
0x4001a00	    0x488984241801	            mov qword [rsp + 0x118], rax	       501	multi.c	FUNCTION_15
0x4001a08	            0x31c0	                            xor eax, eax	       501	multi.c	FUNCTION_15
0x4001a0a	          0x488b2f	                    mov rbp, qword [rdi]	       509	multi.c	FUNCTION_15
0x4001a0d	        0x488b5d00	                    mov rbx, qword [rbp]	       510	multi.c	FUNCTION_15
0x4001a11	    0x80bb60510000	              cmp byte [rbx + 0x5160], 0	       514	multi.c	FUNCTION_15	IF_1
0x4001a18	     0xf8544020000	                           jne 0x4001c62	       514	multi.c	FUNCTION_15	IF_1
0x4001a1e	          0x4989fd	                            mov r13, rdi	       514	multi.c	FUNCTION_15	IF_1
0x4001a21	          0x4189f4	                           mov r12d, esi	       514	multi.c	FUNCTION_15	IF_1
0x4001a24	          0x4889ee	                            mov rsi, rbp	       518	multi.c	FUNCTION_15	CALL_4
0x4001a27	          0x4889df	                            mov rdi, rbx	       518	multi.c	FUNCTION_15	CALL_4
0x4001a2a	      0xe800000000	                          call 0x4001a2f	       518	multi.c	FUNCTION_15	CALL_4
0x4001a2f	    0x488bbbc80100	           mov rdi, qword [rbx + 0x1c8] 	       521	multi.c	FUNCTION_15	CALL_5
0x4001a36	    0x4c8b35000000	            mov r14, qword [0x04001a3d] 	       521	multi.c	FUNCTION_15	CALL_5
0x4001a3d	          0x41ff16	                        call qword [r14]	       521	multi.c	FUNCTION_15	CALL_5
0x4001a40	    0x48c783c80100	              mov qword [rbx + 0x1c8], 0	       522	multi.c	FUNCTION_15
0x4001a4b	    0x488bbbc00100	           mov rdi, qword [rbx + 0x1c0] 	       523	multi.c	FUNCTION_15	CALL_6
0x4001a52	          0x41ff16	                        call qword [r14]	       523	multi.c	FUNCTION_15	CALL_6
0x4001a55	    0x48c783c00100	              mov qword [rbx + 0x1c0], 0	       524	multi.c	FUNCTION_15
0x4001a60	        0x4183fc1a	                          cmp r12d, 0x1a	       526	multi.c	FUNCTION_15	SWITCH_1
0x4001a64	            0x740c	                            je 0x4001a72	       526	multi.c	FUNCTION_15	SWITCH_1
0x4001a66	        0x4183fc2a	                          cmp r12d, 0x2a	       526	multi.c	FUNCTION_15	SWITCH_1
0x4001a6a	            0x7406	                            je 0x4001a72	       526	multi.c	FUNCTION_15	SWITCH_1
0x4001a6c	        0x4183fc17	                          cmp r12d, 0x17	       526	multi.c	FUNCTION_15	SWITCH_1
0x4001a70	            0x7505	                           jne 0x4001a77	       526	multi.c	FUNCTION_15	SWITCH_1
0x4001a72	      0xc644240f01	                 mov byte [rsp + 0xf], 1	       534	multi.c	FUNCTION_15	SWITCH_1
0x4001a77	    0x488b85e00300	           mov rax, qword [rbp + 0x3e0] 	       540	multi.c	FUNCTION_15	IF_2
0x4001a7e	        0x488b4018	            mov rax, qword [rax + 0x18] 	       540	multi.c	FUNCTION_15	IF_2
0x4001a82	          0x4885c0	                           test rax, rax	       540	multi.c	FUNCTION_15	IF_2
0x4001a85	            0x7410	                            je 0x4001a97	       540	multi.c	FUNCTION_15	IF_2
0x4001a87	       0xfb654240f	            movzx edx, byte [rsp + 0xf] 	       541	multi.c	FUNCTION_15	CALL_7
0x4001a8c	          0x4489e6	                           mov esi, r12d	       541	multi.c	FUNCTION_15	CALL_7
0x4001a8f	          0x4889ef	                            mov rdi, rbp	       541	multi.c	FUNCTION_15	CALL_7
0x4001a92	            0xffd0	                                call rax	       541	multi.c	FUNCTION_15	CALL_7
0x4001a94	          0x4189c4	                           mov r12d, eax	       541	multi.c	FUNCTION_15	CALL_7
0x4001a97	        0x4183fc2a	                          cmp r12d, 0x2a	       545	multi.c	FUNCTION_15	ELSE_1	IF_3
0x4001a9b	            0x741d	                            je 0x4001aba	       545	multi.c	FUNCTION_15	ELSE_1	IF_3
0x4001a9d	          0x4889ef	                            mov rdi, rbp	       548	multi.c	FUNCTION_15	ELSE_1	IF_3	CALL_8
0x4001aa0	      0xe800000000	                          call 0x4001aa5	       548	multi.c	FUNCTION_15	ELSE_1	IF_3	CALL_8
0x4001aa5	          0x4585e4	                         test r12d, r12d	       549	multi.c	FUNCTION_15	ELSE_1	IF_3	IF_4
0x4001aa8	            0x7510	                           jne 0x4001aba	       549	multi.c	FUNCTION_15	ELSE_1	IF_3	IF_4
0x4001aaa	            0x85c0	                           test eax, eax	       549	multi.c	FUNCTION_15	ELSE_1	IF_3	IF_4
0x4001aac	           0xf95c0	                                setne al	       549	multi.c	FUNCTION_15	ELSE_1	IF_3	IF_4
0x4001aaf	            0x84c0	                             test al, al	       550	multi.c	FUNCTION_15	ELSE_1	IF_3	IF_4
0x4001ab1	      0xb82a000000	                           mov eax, 0x2a	       550	multi.c	FUNCTION_15	ELSE_1	IF_3	IF_4
0x4001ab6	        0x440f45e0	                        cmovne r12d, eax	       550	multi.c	FUNCTION_15	ELSE_1	IF_3	IF_4
0x4001aba	    0x488bbba80000	            mov rdi, qword [rbx + 0xa8] 	       553	multi.c	FUNCTION_15	CALL_9
0x4001ac1	      0xe8d3feffff	        call sym.process_pending_handles	       553	multi.c	FUNCTION_15	CALL_9
0x4001ac6	    0x4883bd700400	              cmp qword [rbp + 0x470], 0	       555	multi.c	FUNCTION_15	IF_5
0x4001ace	            0x750a	                           jne 0x4001ada	       555	multi.c	FUNCTION_15	IF_5
0x4001ad0	    0x4883bd900400	              cmp qword [rbp + 0x490], 0	       555	multi.c	FUNCTION_15	IF_5
0x4001ad8	            0x7412	                            je 0x4001aec	       555	multi.c	FUNCTION_15	IF_5
0x4001ada	    0x48c743100000	               mov qword [rbx + 0x10], 0	       557	multi.c	FUNCTION_15	IF_5
0x4001ae2	      0xb800000000	                              mov eax, 0	       561	multi.c	FUNCTION_15	IF_5
0x4001ae7	      0xe976010000	                           jmp 0x4001c62	       561	multi.c	FUNCTION_15	IF_5
0x4001aec	    0xc68360510000	              mov byte [rbx + 0x5160], 1	       564	multi.c	FUNCTION_15
0x4001af3	          0x4889ef	                            mov rdi, rbp	       565	multi.c	FUNCTION_15	CALL_12
0x4001af6	      0xe800000000	                          call 0x4001afb	       565	multi.c	FUNCTION_15	CALL_12
0x4001afb	        0x488b7570	            mov rsi, qword [rbp + 0x70] 	       567	multi.c	FUNCTION_15	IF_6
0x4001aff	          0x4885f6	                           test rsi, rsi	       567	multi.c	FUNCTION_15	IF_6
0x4001b02	            0x7410	                            je 0x4001b14	       567	multi.c	FUNCTION_15	IF_6
0x4001b04	          0x4889df	                            mov rdi, rbx	       568	multi.c	FUNCTION_15	IF_6	CALL_13
0x4001b07	      0xe800000000	                          call 0x4001b0c	       568	multi.c	FUNCTION_15	IF_6	CALL_13
0x4001b0c	    0x48c745700000	               mov qword [rbp + 0x70], 0	       569	multi.c	FUNCTION_15	IF_6
0x4001b14	          0x4889df	                            mov rdi, rbx	       571	multi.c	FUNCTION_15	CALL_14
0x4001b17	      0xe800000000	                          call 0x4001b1c	       571	multi.c	FUNCTION_15	CALL_14
0x4001b1c	    0x83bb604d0000	             cmp dword [rbx + 0x4d60], 0	       575	multi.c	FUNCTION_15	FOR_1
0x4001b23	            0x742a	                            je 0x4001b4f	       575	multi.c	FUNCTION_15	FOR_1
0x4001b25	    0x4c8dbb684d00	                 lea r15, [rbx + 0x4d68]	       575	multi.c	FUNCTION_15	FOR_1
0x4001b2c	    0x41be00000000	                             mov r14d, 0	       575	multi.c	FUNCTION_15	FOR_1
0x4001b32	          0x498b3f	                    mov rdi, qword [r15]	       576	multi.c	FUNCTION_15	FOR_1	CALL_15
0x4001b35	    0x488b05000000	            mov rax, qword [0x04001b3c] 	       576	multi.c	FUNCTION_15	FOR_1	CALL_15
0x4001b3c	            0xff10	                        call qword [rax]	       576	multi.c	FUNCTION_15	FOR_1	CALL_15
0x4001b3e	        0x4183c601	                             add r14d, 1	       575	multi.c	FUNCTION_15	FOR_1
0x4001b42	        0x4983c718	                           add r15, 0x18	       575	multi.c	FUNCTION_15	FOR_1
0x4001b46	    0x4439b3604d00	         cmp dword [rbx + 0x4d60], r14d 	       575	multi.c	FUNCTION_15	FOR_1
0x4001b4d	            0x77e3	                            ja 0x4001b32	       575	multi.c	FUNCTION_15	FOR_1
0x4001b4f	    0xc783604d0000	            mov dword [rbx + 0x4d60], 0 	       578	multi.c	FUNCTION_15
0x4001b59	    0x80bbea070000	               cmp byte [rbx + 0x7ea], 0	       595	multi.c	FUNCTION_15	IF_7
0x4001b60	            0x7412	                            je 0x4001b74	       595	multi.c	FUNCTION_15	IF_7
0x4001b62	    0x83bdc0040000	              cmp dword [rbp + 0x4c0], 2	       597	multi.c	FUNCTION_15	IF_7
0x4001b69	            0x7409	                            je 0x4001b74	       597	multi.c	FUNCTION_15	IF_7
0x4001b6b	    0x83bde0040000	              cmp dword [rbp + 0x4e0], 2	       597	multi.c	FUNCTION_15	IF_7
0x4001b72	            0x7520	                           jne 0x4001b94	       597	multi.c	FUNCTION_15	IF_7
0x4001b74	    0x80bd99030000	               cmp byte [rbp + 0x399], 0	       600	multi.c	FUNCTION_15	IF_7
0x4001b7b	            0x7517	                           jne 0x4001b94	       600	multi.c	FUNCTION_15	IF_7
0x4001b7d	      0x807c240f00	                 cmp byte [rsp + 0xf], 0	       601	multi.c	FUNCTION_15	IF_7
0x4001b82	            0x7436	                            je 0x4001bba	       601	multi.c	FUNCTION_15	IF_7
0x4001b84	    0x488b85e00300	           mov rax, qword [rbp + 0x3e0] 	       601	multi.c	FUNCTION_15	IF_7
0x4001b8b	    0xf68085000000	               test byte [rax + 0x85], 2	       601	multi.c	FUNCTION_15	IF_7
0x4001b92	            0x7526	                           jne 0x4001bba	       601	multi.c	FUNCTION_15	IF_7
0x4001b94	       0xfb674240f	            movzx esi, byte [rsp + 0xf] 	       602	multi.c	FUNCTION_15	IF_7	CALL_16
0x4001b99	          0x4889ef	                            mov rdi, rbp	       602	multi.c	FUNCTION_15	IF_7	CALL_16
0x4001b9c	      0xe800000000	                          call 0x4001ba1	       602	multi.c	FUNCTION_15	IF_7	CALL_16
0x4001ba1	          0x4585e4	                         test r12d, r12d	       606	multi.c	FUNCTION_15	IF_7	IF_8
0x4001ba4	     0xf85a5000000	                           jne 0x4001c4f	       606	multi.c	FUNCTION_15	IF_7	IF_8
0x4001baa	            0x85c0	                           test eax, eax	       606	multi.c	FUNCTION_15	IF_7	IF_8
0x4001bac	           0xf95c2	                                setne dl	       606	multi.c	FUNCTION_15	IF_7	IF_8
0x4001baf	            0x84d2	                             test dl, dl	       607	multi.c	FUNCTION_15	IF_7	IF_8
0x4001bb1	        0x440f45e0	                        cmovne r12d, eax	       607	multi.c	FUNCTION_15	IF_7	IF_8
0x4001bb5	      0xe995000000	                           jmp 0x4001c4f	       607	multi.c	FUNCTION_15	IF_7	IF_8
0x4001bba	    0x80bd9f030000	               cmp byte [rbp + 0x39f], 0	       612	multi.c	FUNCTION_15	ELSE_2	CALL_17
0x4001bc1	            0x7409	                            je 0x4001bcc	       612	multi.c	FUNCTION_15	ELSE_2	CALL_17
0x4001bc3	    0x4c8b85280100	            mov r8, qword [rbp + 0x128] 	       612	multi.c	FUNCTION_15	ELSE_2	CALL_17
0x4001bca	            0xeb2b	                           jmp 0x4001bf7	       612	multi.c	FUNCTION_15	ELSE_2	CALL_17
0x4001bcc	    0x80bd9e030000	               cmp byte [rbp + 0x39e], 0	       616	multi.c	FUNCTION_15	ELSE_2
0x4001bd3	            0x7409	                            je 0x4001bde	       616	multi.c	FUNCTION_15	ELSE_2
0x4001bd5	    0x4c8b85680100	            mov r8, qword [rbp + 0x168] 	       616	multi.c	FUNCTION_15	ELSE_2
0x4001bdc	            0xeb19	                           jmp 0x4001bf7	       616	multi.c	FUNCTION_15	ELSE_2
0x4001bde	    0x80bd9b030000	               cmp byte [rbp + 0x39b], 0	       617	multi.c	FUNCTION_15	ELSE_2
0x4001be5	            0x7409	                            je 0x4001bf0	       617	multi.c	FUNCTION_15	ELSE_2
0x4001be7	    0x4c8b85080100	            mov r8, qword [rbp + 0x108] 	       617	multi.c	FUNCTION_15	ELSE_2
0x4001bee	            0xeb07	                           jmp 0x4001bf7	       617	multi.c	FUNCTION_15	ELSE_2
0x4001bf0	    0x4c8b85e00000	              mov r8, qword [rbp + 0xe0]	       617	multi.c	FUNCTION_15	ELSE_2
0x4001bf7	        0x488b4d68	            mov rcx, qword [rbp + 0x68] 	       612	multi.c	FUNCTION_15	ELSE_2	CALL_17
0x4001bfb	      0x488d7c2410	                   lea rdi, [rsp + 0x10]	       612	multi.c	FUNCTION_15	ELSE_2	CALL_17
0x4001c00	    0x488d15000000	                   lea rdx, [0x04001c07]	       612	multi.c	FUNCTION_15	ELSE_2	CALL_17
0x4001c07	      0xbe00010000	                          mov esi, 0x100	       612	multi.c	FUNCTION_15	ELSE_2	CALL_17
0x4001c0c	      0xb800000000	                              mov eax, 0	       612	multi.c	FUNCTION_15	ELSE_2	CALL_17
0x4001c11	      0xe800000000	                          call 0x4001c16	       612	multi.c	FUNCTION_15	ELSE_2	CALL_17
0x4001c16	          0x4889ef	                            mov rdi, rbp	       621	multi.c	FUNCTION_15	ELSE_2	IF_9	CALL_18
0x4001c19	      0xe800000000	                          call 0x4001c1e	       621	multi.c	FUNCTION_15	ELSE_2	IF_9	CALL_18
0x4001c1e	            0x84c0	                             test al, al	       621	multi.c	FUNCTION_15	ELSE_2	IF_9	CALL_18
0x4001c20	            0x7422	                            je 0x4001c44	       621	multi.c	FUNCTION_15	ELSE_2	IF_9	CALL_18
0x4001c22	    0x4889ab080d00	            mov qword [rbx + 0xd08], rbp	       623	multi.c	FUNCTION_15	ELSE_2	IF_9
0x4001c29	      0x488d542410	                   lea rdx, [rsp + 0x10]	       624	multi.c	FUNCTION_15	ELSE_2	IF_9	CALL_19
0x4001c2e	    0x488d35000000	                   lea rsi, [0x04001c35]	       624	multi.c	FUNCTION_15	ELSE_2	IF_9	CALL_19
0x4001c35	          0x4889df	                            mov rdi, rbx	       624	multi.c	FUNCTION_15	ELSE_2	IF_9	CALL_19
0x4001c38	      0xb800000000	                              mov eax, 0	       624	multi.c	FUNCTION_15	ELSE_2	IF_9	CALL_19
0x4001c3d	      0xe800000000	                          call 0x4001c42	       624	multi.c	FUNCTION_15	ELSE_2	IF_9	CALL_19
0x4001c42	            0xeb0b	                           jmp 0x4001c4f	       624	multi.c	FUNCTION_15	ELSE_2	IF_9	CALL_19
0x4001c44	    0x48c783080d00	              mov qword [rbx + 0xd08], 0	       627	multi.c	FUNCTION_15	ELSE_2	ELSE_3
0x4001c4f	    0x49c745000000	                      mov qword [r13], 0	       630	multi.c	FUNCTION_15
0x4001c57	          0x4889df	                            mov rdi, rbx	       634	multi.c	FUNCTION_15	CALL_20
0x4001c5a	      0xe800000000	                          call 0x4001c5f	       634	multi.c	FUNCTION_15	CALL_20
0x4001c5f	          0x4489e0	                           mov eax, r12d	       636	multi.c	FUNCTION_15
0x4001c62	    0x488b8c241801	           mov rcx, qword [rsp + 0x118] 	       637	multi.c	FUNCTION_15
0x4001c6a	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       637	multi.c	FUNCTION_15
0x4001c73	            0x7405	                            je 0x4001c7a	       637	multi.c	FUNCTION_15
0x4001c75	      0xe800000000	                          call 0x4001c7a	       637	multi.c	FUNCTION_15
0x4001c7a	    0x4881c4280100	                          add rsp, 0x128	       637	multi.c	FUNCTION_15
0x4001c81	              0x5b	                                 pop rbx	       637	multi.c	FUNCTION_15
0x4001c82	              0x5d	                                 pop rbp	       637	multi.c	FUNCTION_15
0x4001c83	            0x415c	                                 pop r12	       637	multi.c	FUNCTION_15
0x4001c85	            0x415d	                                 pop r13	       637	multi.c	FUNCTION_15
0x4001c87	            0x415e	                                 pop r14	       637	multi.c	FUNCTION_15
0x4001c89	            0x415f	                                 pop r15	       637	multi.c	FUNCTION_15
0x4001c8b	              0xc3	                                     ret	       637	multi.c	FUNCTION_15
curl_multi_info_read	ELSE,0:SWITCH,0:FOR,0:WHILE,0:CALL,4:DO,0:functions,0:IF,1	38
0x4001021	    0xc70600000000	                      mov dword [rsi], 0	      2280	multi.c	FUNCTION_35
0x4001027	          0x4885ff	                           test rdi, rdi	      2282	multi.c	FUNCTION_35	IF_1
0x400102a	            0x7467	                            je 0x4001093	      2282	multi.c	FUNCTION_35	IF_1
0x400102c	      0xb800000000	                              mov eax, 0	      2300	multi.c	FUNCTION_35
0x4001031	    0x48813f1eab0b	                cmp qword [rdi], 0xbab1e	      2282	multi.c	FUNCTION_35	IF_1
0x4001038	            0x7563	                           jne 0x400109d	      2282	multi.c	FUNCTION_35	IF_1
0x400103a	    0x80bfe0010000	               cmp byte [rdi + 0x1e0], 0	      2282	multi.c	FUNCTION_35	IF_1
0x4001041	            0x755a	                           jne 0x400109d	      2282	multi.c	FUNCTION_35	IF_1
0x4001043	            0x4154	                                push r12	      2277	multi.c	FUNCTION_35
0x4001045	              0x55	                                push rbp	      2277	multi.c	FUNCTION_35
0x4001046	              0x53	                                push rbx	      2277	multi.c	FUNCTION_35
0x4001047	          0x4889f5	                            mov rbp, rsi	      2277	multi.c	FUNCTION_35
0x400104a	          0x4889fb	                            mov rbx, rdi	      2277	multi.c	FUNCTION_35
0x400104d	        0x4c8d6720	                   lea r12, [rdi + 0x20]	      2284	multi.c	FUNCTION_35	IF_1	CALL_1
0x4001051	          0x4c89e7	                            mov rdi, r12	      2284	multi.c	FUNCTION_35	IF_1	CALL_1
0x4001054	      0xe800000000	                          call 0x4001059	      2284	multi.c	FUNCTION_35	IF_1	CALL_1
0x4001059	          0x4889c2	                            mov rdx, rax	      2284	multi.c	FUNCTION_35	IF_1	CALL_1
0x400105c	      0xb800000000	                              mov eax, 0	      2300	multi.c	FUNCTION_35
0x4001061	          0x4885d2	                           test rdx, rdx	      2283	multi.c	FUNCTION_35	IF_1
0x4001064	            0x7433	                            je 0x4001099	      2283	multi.c	FUNCTION_35	IF_1
0x4001066	        0x488b7320	            mov rsi, qword [rbx + 0x20] 	      2289	multi.c	FUNCTION_35	IF_1
0x400106a	          0x488b1e	                    mov rbx, qword [rsi]	      2291	multi.c	FUNCTION_35	IF_1
0x400106d	      0xba00000000	                              mov edx, 0	      2294	multi.c	FUNCTION_35	IF_1	CALL_2
0x4001072	          0x4c89e7	                            mov rdi, r12	      2294	multi.c	FUNCTION_35	IF_1	CALL_2
0x4001075	      0xe800000000	                          call 0x400107a	      2294	multi.c	FUNCTION_35	IF_1	CALL_2
0x400107a	          0x4c89e7	                            mov rdi, r12	      2296	multi.c	FUNCTION_35	IF_1	CALL_4
0x400107d	      0xe800000000	                          call 0x4001082	      2296	multi.c	FUNCTION_35	IF_1	CALL_4
0x4001082	          0x4889c7	                            mov rdi, rax	      2296	multi.c	FUNCTION_35	IF_1	CALL_4
0x4001085	      0xe800000000	                          call 0x400108a	      2296	multi.c	FUNCTION_35	IF_1	CALL_4
0x400108a	          0x894500	                    mov dword [rbp], eax	      2296	multi.c	FUNCTION_35	IF_1	CALL_4
0x400108d	        0x488d4318	                   lea rax, [rbx + 0x18]	      2298	multi.c	FUNCTION_35	IF_1
0x4001091	            0xeb06	                           jmp 0x4001099	      2298	multi.c	FUNCTION_35	IF_1
0x4001093	      0xb800000000	                              mov eax, 0	      2300	multi.c	FUNCTION_35
0x4001098	              0xc3	                                     ret	      2300	multi.c	FUNCTION_35
0x4001099	              0x5b	                                 pop rbx	      2301	multi.c	FUNCTION_35
0x400109a	              0x5d	                                 pop rbp	      2301	multi.c	FUNCTION_35
0x400109b	            0x415c	                                 pop r12	      2301	multi.c	FUNCTION_35
0x400109d	            0xf3c3	                                     ret	      2301	multi.c	FUNCTION_35
Curl_multi_closed	ELSE,0:SWITCH,0:FOR,0:WHILE,0:CALL,3:DO,0:functions,0:IF,3	43
0x40010b7	            0x4155	                                push r13	      2463	multi.c	FUNCTION_38
0x40010b9	            0x4154	                                push r12	      2463	multi.c	FUNCTION_38
0x40010bb	              0x55	                                push rbp	      2463	multi.c	FUNCTION_38
0x40010bc	              0x53	                                push rbx	      2463	multi.c	FUNCTION_38
0x40010bd	        0x4883ec18	                           sub rsp, 0x18	      2463	multi.c	FUNCTION_38
0x40010c1	    0x64488b042528	                mov rax, qword fs:[0x28]	      2463	multi.c	FUNCTION_38
0x40010ca	      0x4889442408	                mov qword [rsp + 8], rax	      2463	multi.c	FUNCTION_38
0x40010cf	            0x31c0	                            xor eax, eax	      2463	multi.c	FUNCTION_38
0x40010d1	          0x488b07	                    mov rax, qword [rdi]	      2464	multi.c	FUNCTION_38
0x40010d4	    0x488b98a80000	            mov rbx, qword [rax + 0xa8] 	      2464	multi.c	FUNCTION_38
0x40010db	          0x4885db	                           test rbx, rbx	      2465	multi.c	FUNCTION_38	IF_1
0x40010de	            0x744e	                            je 0x400112e	      2465	multi.c	FUNCTION_38	IF_1
0x40010e0	          0x4989fc	                            mov r12, rdi	      2465	multi.c	FUNCTION_38	IF_1
0x40010e3	            0x89f5	                            mov ebp, esi	      2465	multi.c	FUNCTION_38	IF_1
0x40010e5	    0x4c8dabb80000	                   lea r13, [rbx + 0xb8]	      2468	multi.c	FUNCTION_38	IF_1	CALL_1
0x40010ec	          0x4c89ef	                            mov rdi, r13	      2468	multi.c	FUNCTION_38	IF_1	CALL_1
0x40010ef	      0xe81cf3ffff	                    call sym.sh_getentry	      2468	multi.c	FUNCTION_38	IF_1	CALL_1
0x40010f4	          0x4885c0	                           test rax, rax	      2470	multi.c	FUNCTION_38	IF_1	IF_2
0x40010f7	            0x7435	                            je 0x400112e	      2470	multi.c	FUNCTION_38	IF_1	IF_2
0x40010f9	        0x4c8b4b60	              mov r9, qword [rbx + 0x60]	      2471	multi.c	FUNCTION_38	IF_1	IF_2	IF_3
0x40010fd	          0x4d85c9	                             test r9, r9	      2471	multi.c	FUNCTION_38	IF_1	IF_2	IF_3
0x4001100	            0x7416	                            je 0x4001118	      2471	multi.c	FUNCTION_38	IF_1	IF_2	IF_3
0x4001102	        0x488b4b68	            mov rcx, qword [rbx + 0x68] 	      2472	multi.c	FUNCTION_38	IF_1	IF_2	IF_3	CALL_2
0x4001106	        0x4c8b4010	              mov r8, qword [rax + 0x10]	      2472	multi.c	FUNCTION_38	IF_1	IF_2	IF_3	CALL_2
0x400110a	      0xba04000000	                              mov edx, 4	      2472	multi.c	FUNCTION_38	IF_1	IF_2	IF_3	CALL_2
0x400110f	            0x89ee	                            mov esi, ebp	      2472	multi.c	FUNCTION_38	IF_1	IF_2	IF_3	CALL_2
0x4001111	        0x498b3c24	                    mov rdi, qword [r12]	      2472	multi.c	FUNCTION_38	IF_1	IF_2	IF_3	CALL_2
0x4001115	          0x41ffd1	                                 call r9	      2472	multi.c	FUNCTION_38	IF_1	IF_2	IF_3	CALL_2
0x4001118	        0x896c2404	                mov dword [rsp + 4], ebp	      2472	multi.c	FUNCTION_38	IF_1	IF_2	IF_3	CALL_2
0x400111c	      0x488d742404	                      lea rsi, [rsp + 4]	       232	multi.c	FUNCTION_4	CALL_1
0x4001121	      0xba04000000	                              mov edx, 4	       232	multi.c	FUNCTION_4	CALL_1
0x4001126	          0x4c89ef	                            mov rdi, r13	       232	multi.c	FUNCTION_4	CALL_1
0x4001129	      0xe800000000	                          call 0x400112e	       232	multi.c	FUNCTION_4	CALL_1
0x400112e	      0x488b442408	                mov rax, qword [rsp + 8]	      2480	multi.c	FUNCTION_38
0x4001133	    0x644833042528	                xor rax, qword fs:[0x28]	      2480	multi.c	FUNCTION_38
0x400113c	            0x7405	                            je 0x4001143	      2480	multi.c	FUNCTION_38
0x400113e	      0xe800000000	                          call 0x4001143	      2480	multi.c	FUNCTION_38
0x4001143	        0x4883c418	                           add rsp, 0x18	      2480	multi.c	FUNCTION_38
0x4001147	              0x5b	                                 pop rbx	      2480	multi.c	FUNCTION_38
0x4001148	              0x5d	                                 pop rbp	      2480	multi.c	FUNCTION_38
0x4001149	            0x415c	                                 pop r12	      2480	multi.c	FUNCTION_38
0x400114b	            0x415d	                                 pop r13	      2480	multi.c	FUNCTION_38
0x400114d	              0xc3	                                     ret	      2480	multi.c	FUNCTION_38
fd_key_compare	ELSE,0:SWITCH,0:FOR,0:WHILE,0:CALL,0:DO,0:functions,0:IF,0	5
0x4000088	            0x8b02	                    mov eax, dword [rdx]	       249	multi.c	FUNCTION_6
0x400008a	            0x3907	                    cmp dword [rdi], eax	       249	multi.c	FUNCTION_6
0x400008c	           0xf94c0	                                 sete al	       249	multi.c	FUNCTION_6
0x400008f	           0xfb6c0	                           movzx eax, al	       249	multi.c	FUNCTION_6
0x4000092	              0xc3	                                     ret	       250	multi.c	FUNCTION_6
mstate	ELSE,0:SWITCH,0:FOR,0:WHILE,0:CALL,1:DO,0:functions,0:IF,5	16
0x4000040	          0x397748	            cmp dword [rdi + 0x48], esi 	       136	multi.c	FUNCTION_1	IF_1
0x4000043	            0x742f	                            je 0x4000074	       136	multi.c	FUNCTION_1	IF_1
0x4000045	          0x897748	             mov dword [rdi + 0x48], esi	       140	multi.c	FUNCTION_1
0x4000048	          0x83fe11	                           cmp esi, 0x11	       157	multi.c	FUNCTION_1	IF_4
0x400004b	            0x750b	                           jne 0x4000058	       157	multi.c	FUNCTION_1	IF_4
0x400004d	    0x488b87a80000	            mov rax, qword [rdi + 0xa8] 	       159	multi.c	FUNCTION_1	IF_4
0x4000054	        0x83681c01	               sub dword [rax + 0x1c], 1	       159	multi.c	FUNCTION_1	IF_4
0x4000058	            0x89f6	                            mov esi, esi	       162	multi.c	FUNCTION_1	IF_5
0x400005a	    0x488d05000000	                   lea rax, [0x04000061]	       162	multi.c	FUNCTION_1	IF_5
0x4000061	        0x488b04f0	            mov rax, qword [rax + rsi*8]	       162	multi.c	FUNCTION_1	IF_5
0x4000065	          0x4885c0	                           test rax, rax	       162	multi.c	FUNCTION_1	IF_5
0x4000068	            0x740a	                            je 0x4000074	       162	multi.c	FUNCTION_1	IF_5
0x400006a	        0x4883ec08	                              sub rsp, 8	       116	multi.c	FUNCTION_1
0x400006e	            0xffd0	                                call rax	       163	multi.c	FUNCTION_1	IF_5
0x4000070	        0x4883c408	                              add rsp, 8	       164	multi.c	FUNCTION_1
0x4000074	            0xf3c3	                                     ret	       164	multi.c	FUNCTION_1
multi_timeout	ELSE,3:SWITCH,0:FOR,0:WHILE,0:CALL,4:DO,0:functions,0:IF,3	45
0x40000a7	    0x4883bfb00000	               cmp qword [rdi + 0xb0], 0	      2785	multi.c	FUNCTION_45	IF_1
0x40000af	            0x747c	                            je 0x400012d	      2785	multi.c	FUNCTION_45	IF_1
0x40000b1	            0x4155	                                push r13	      2782	multi.c	FUNCTION_45
0x40000b3	            0x4154	                                push r12	      2782	multi.c	FUNCTION_45
0x40000b5	              0x55	                                push rbp	      2782	multi.c	FUNCTION_45
0x40000b6	              0x53	                                push rbx	      2782	multi.c	FUNCTION_45
0x40000b7	        0x4883ec08	                              sub rsp, 8	      2782	multi.c	FUNCTION_45
0x40000bb	          0x4889f5	                            mov rbp, rsi	      2782	multi.c	FUNCTION_45
0x40000be	          0x4889fb	                            mov rbx, rdi	      2782	multi.c	FUNCTION_45
0x40000c1	      0xe800000000	                          call 0x40000c6	      2787	multi.c	FUNCTION_45	IF_1	CALL_1
0x40000c6	          0x4989c4	                            mov r12, rax	      2787	multi.c	FUNCTION_45	IF_1	CALL_1
0x40000c9	          0x4989d5	                            mov r13, rdx	      2787	multi.c	FUNCTION_45	IF_1	CALL_1
0x40000cc	    0x488b93b00000	            mov rdx, qword [rbx + 0xb0] 	      2790	multi.c	FUNCTION_45	IF_1	CALL_2
0x40000d3	    0x488b3d000000	            mov rdi, qword [0x040000da] 	      2790	multi.c	FUNCTION_45	IF_1	CALL_2
0x40000da	    0x488b35000000	            mov rsi, qword [0x040000e1] 	      2790	multi.c	FUNCTION_45	IF_1	CALL_2
0x40000e1	      0xe800000000	                          call 0x40000e6	      2790	multi.c	FUNCTION_45	IF_1	CALL_2
0x40000e6	    0x488983b00000	             mov qword [rbx + 0xb0], rax	      2790	multi.c	FUNCTION_45	IF_1	CALL_2
0x40000ed	        0x488b5020	            mov rdx, qword [rax + 0x20] 	      2792	multi.c	FUNCTION_45	IF_1	IF_2	CALL_3
0x40000f1	          0x4c39e2	                            cmp rdx, r12	      2792	multi.c	FUNCTION_45	IF_1	IF_2	CALL_3
0x40000f4	            0x7c2d	                            jl 0x4000123	      2792	multi.c	FUNCTION_45	IF_1	IF_2	CALL_3
0x40000f6	            0x7f06	                            jg 0x40000fe	      2792	multi.c	FUNCTION_45	IF_1	IF_2	CALL_3
0x40000f8	        0x44396828	           cmp dword [rax + 0x28], r13d 	      2792	multi.c	FUNCTION_45	IF_1	IF_2	CALL_3
0x40000fc	            0x7e25	                           jle 0x4000123	      2792	multi.c	FUNCTION_45	IF_1	IF_2	CALL_3
0x40000fe	        0x488b7820	            mov rdi, qword [rax + 0x20] 	      2794	multi.c	FUNCTION_45	IF_1	IF_2	CALL_4
0x4000102	        0x488b7028	            mov rsi, qword [rax + 0x28] 	      2794	multi.c	FUNCTION_45	IF_1	IF_2	CALL_4
0x4000106	          0x4c89e2	                            mov rdx, r12	      2794	multi.c	FUNCTION_45	IF_1	IF_2	CALL_4
0x4000109	          0x4c89e9	                            mov rcx, r13	      2794	multi.c	FUNCTION_45	IF_1	IF_2	CALL_4
0x400010c	      0xe800000000	                          call 0x4000111	      2794	multi.c	FUNCTION_45	IF_1	IF_2	CALL_4
0x4000111	          0x4885c0	                           test rax, rax	      2803	multi.c	FUNCTION_45	IF_1	IF_2	IF_3
0x4000114	      0xba01000000	                              mov edx, 1	      2803	multi.c	FUNCTION_45	IF_1	IF_2	IF_3
0x4000119	        0x480f4ec2	                         cmovle rax, rdx	      2803	multi.c	FUNCTION_45	IF_1	IF_2	IF_3
0x400011d	        0x48894500	                    mov qword [rbp], rax	      2803	multi.c	FUNCTION_45	IF_1	IF_2	IF_3
0x4000121	            0xeb17	                           jmp 0x400013a	      2803	multi.c	FUNCTION_45	IF_1	IF_2	IF_3
0x4000123	    0x48c745000000	                      mov qword [rbp], 0	      2811	multi.c	FUNCTION_45	IF_1	ELSE_2
0x400012b	            0xeb0d	                           jmp 0x400013a	      2811	multi.c	FUNCTION_45	IF_1	ELSE_2
0x400012d	    0x48c706ffffff	     mov qword [rsi], 0xffffffffffffffff	      2814	multi.c	FUNCTION_45	ELSE_2	ELSE_3
0x4000134	      0xb800000000	                              mov eax, 0	      2817	multi.c	FUNCTION_45	ELSE_2	ELSE_3
0x4000139	              0xc3	                                     ret	      2817	multi.c	FUNCTION_45	ELSE_2	ELSE_3
0x400013a	      0xb800000000	                              mov eax, 0	      2817	multi.c	FUNCTION_45	ELSE_2	ELSE_3
0x400013f	        0x4883c408	                              add rsp, 8	      2817	multi.c	FUNCTION_45	ELSE_2	ELSE_3
0x4000143	              0x5b	                                 pop rbx	      2817	multi.c	FUNCTION_45	ELSE_2	ELSE_3
0x4000144	              0x5d	                                 pop rbp	      2817	multi.c	FUNCTION_45	ELSE_2	ELSE_3
0x4000145	            0x415c	                                 pop r12	      2817	multi.c	FUNCTION_45	ELSE_2	ELSE_3
0x4000147	            0x415d	                                 pop r13	      2817	multi.c	FUNCTION_45	ELSE_2	ELSE_3
0x4000149	              0xc3	                                     ret	      2817	multi.c	FUNCTION_45	ELSE_2	ELSE_3
Curl_expire	ELSE,0:SWITCH,0:FOR,0:WHILE,0:CALL,8:DO,0:functions,0:IF,5	129
0x4001544	            0x4157	                                push r15	      2943	multi.c	FUNCTION_50
0x4001546	            0x4156	                                push r14	      2943	multi.c	FUNCTION_50
0x4001548	            0x4155	                                push r13	      2943	multi.c	FUNCTION_50
0x400154a	            0x4154	                                push r12	      2943	multi.c	FUNCTION_50
0x400154c	              0x55	                                push rbp	      2943	multi.c	FUNCTION_50
0x400154d	              0x53	                                push rbx	      2943	multi.c	FUNCTION_50
0x400154e	        0x4883ec18	                           sub rsp, 0x18	      2943	multi.c	FUNCTION_50
0x4001552	    0x4c8bbfa80000	            mov r15, qword [rdi + 0xa8] 	      2944	multi.c	FUNCTION_50
0x4001559	          0x4d85ff	                           test r15, r15	      2951	multi.c	FUNCTION_50	IF_1
0x400155c	     0xf84ed010000	                            je 0x400174f	      2951	multi.c	FUNCTION_50	IF_1
0x4001562	            0x89d3	                            mov ebx, edx	      2951	multi.c	FUNCTION_50	IF_1
0x4001564	          0x4989f4	                            mov r12, rsi	      2951	multi.c	FUNCTION_50	IF_1
0x4001567	          0x4889fd	                            mov rbp, rdi	      2951	multi.c	FUNCTION_50	IF_1
0x400156a	      0xe800000000	                          call 0x400156f	      2956	multi.c	FUNCTION_50	CALL_2
0x400156f	          0x4989c6	                            mov r14, rax	      2956	multi.c	FUNCTION_50	CALL_2
0x4001572	          0x4989d5	                            mov r13, rdx	      2956	multi.c	FUNCTION_50	CALL_2
0x4001575	    0x48bacff753e3	          movabs rdx, 0x20c49ba5e353f7cf	      2957	multi.c	FUNCTION_50
0x400157f	          0x4c89e0	                            mov rax, r12	      2957	multi.c	FUNCTION_50
0x4001582	          0x48f7ea	                                imul rdx	      2957	multi.c	FUNCTION_50
0x4001585	        0x48c1fa07	                              sar rdx, 7	      2957	multi.c	FUNCTION_50
0x4001589	          0x4c89e0	                            mov rax, r12	      2957	multi.c	FUNCTION_50
0x400158c	        0x48c1f83f	                           sar rax, 0x3f	      2957	multi.c	FUNCTION_50
0x4001590	          0x4829c2	                            sub rdx, rax	      2957	multi.c	FUNCTION_50
0x4001593	        0x4a8d0c32	                    lea rcx, [rdx + r14]	      2957	multi.c	FUNCTION_50
0x4001597	          0x4989ce	                            mov r14, rcx	      2957	multi.c	FUNCTION_50
0x400159a	    0x4869d2e80300	                    imul rdx, rdx, 0x3e8	      2958	multi.c	FUNCTION_50
0x40015a1	          0x4929d4	                            sub r12, rdx	      2958	multi.c	FUNCTION_50
0x40015a4	    0x4569e4e80300	                  imul r12d, r12d, 0x3e8	      2958	multi.c	FUNCTION_50
0x40015ab	          0x4501ec	                          add r12d, r13d	      2958	multi.c	FUNCTION_50
0x40015ae	          0x4489e2	                           mov edx, r12d	      2958	multi.c	FUNCTION_50
0x40015b1	    0x48b800000000	          movabs rax, 0xffffffff00000000	      2958	multi.c	FUNCTION_50
0x40015bb	          0x4921c5	                            and r13, rax	      2958	multi.c	FUNCTION_50
0x40015be	          0x4c89e8	                            mov rax, r13	      2958	multi.c	FUNCTION_50
0x40015c1	          0x4809d0	                             or rax, rdx	      2958	multi.c	FUNCTION_50
0x40015c4	          0x4989c5	                            mov r13, rax	      2958	multi.c	FUNCTION_50
0x40015c7	    0x4181fc3f420f	                       cmp r12d, 0xf423f	      2960	multi.c	FUNCTION_50	IF_2
0x40015ce	            0x7e1f	                           jle 0x40015ef	      2960	multi.c	FUNCTION_50	IF_2
0x40015d0	        0x4c8d7101	                      lea r14, [rcx + 1]	      2961	multi.c	FUNCTION_50	IF_2
0x40015d4	    0x418d9424c0bd	                lea edx, [r12 - 0xf4240]	      2962	multi.c	FUNCTION_50	IF_2
0x40015dc	    0x49bd00000000	          movabs r13, 0xffffffff00000000	      2962	multi.c	FUNCTION_50	IF_2
0x40015e6	          0x4c21e8	                            and rax, r13	      2962	multi.c	FUNCTION_50	IF_2
0x40015e9	          0x4809d0	                             or rax, rdx	      2962	multi.c	FUNCTION_50	IF_2
0x40015ec	          0x4989c5	                            mov r13, rax	      2962	multi.c	FUNCTION_50	IF_2
0x40015ef	            0x89de	                            mov esi, ebx	      2966	multi.c	FUNCTION_50	CALL_3
0x40015f1	          0x4889ef	                            mov rdi, rbp	      2966	multi.c	FUNCTION_50	CALL_3
0x40015f4	      0xe83eecffff	               call sym.multi_deltimeout	      2966	multi.c	FUNCTION_50	CALL_3
0x40015f9	    0x488d85f04e00	                 lea rax, [rbp + 0x4ef0]	      2904	multi.c	FUNCTION_49
0x4001600	          0x4889c7	                            mov rdi, rax	      2904	multi.c	FUNCTION_49
0x4001603	      0x4889442408	                mov qword [rsp + 8], rax	      2904	multi.c	FUNCTION_49
0x4001608	            0x89d8	                            mov eax, ebx	      2906	multi.c	FUNCTION_49
0x400160a	        0x488d0c00	                    lea rcx, [rax + rax]	      2906	multi.c	FUNCTION_49
0x400160e	        0x488d1401	                    lea rdx, [rcx + rax]	      2906	multi.c	FUNCTION_49
0x4001612	        0x48c1e204	                              shl rdx, 4	      2906	multi.c	FUNCTION_49
0x4001616	    0x4c8da415104f	           lea r12, [rbp + rdx + 0x4f10]	      2906	multi.c	FUNCTION_49
0x400161e	        0x488d1401	                    lea rdx, [rcx + rax]	      2909	multi.c	FUNCTION_49	CALL_1
0x4001622	        0x48c1e204	                              shl rdx, 4	      2909	multi.c	FUNCTION_49	CALL_1
0x4001626	    0x4c89b415284f	    mov qword [rbp + rdx + 0x4f28], r14 	        53	string3.h	FUNCTION_64	CALL_3
0x400162e	    0x4c89ac15304f	    mov qword [rbp + rdx + 0x4f30], r13 	        53	string3.h	FUNCTION_64	CALL_3
0x4001636	          0x4801c8	                            add rax, rcx	      2910	multi.c	FUNCTION_49
0x4001639	        0x48c1e004	                              shl rax, 4	      2910	multi.c	FUNCTION_49
0x400163d	    0x899c05384f00	    mov dword [rbp + rax + 0x4f38], ebx 	      2910	multi.c	FUNCTION_49
0x4001644	      0xe800000000	                          call 0x4001649	      2912	multi.c	FUNCTION_49	CALL_2
0x4001649	    0x48c704240000	                      mov qword [rsp], 0	      2902	multi.c	FUNCTION_49
0x4001651	          0x4885c0	                           test rax, rax	      2913	multi.c	FUNCTION_49	IF_1
0x4001654	            0x7443	                            je 0x4001699	      2913	multi.c	FUNCTION_49	IF_1
0x4001656	    0x488b9df04e00	          mov rbx, qword [rbp + 0x4ef0] 	      2915	multi.c	FUNCTION_49	IF_1	FOR_1
0x400165d	          0x4885db	                           test rbx, rbx	      2915	multi.c	FUNCTION_49	IF_1	FOR_1
0x4001660	            0x7433	                            je 0x4001695	      2915	multi.c	FUNCTION_49	IF_1	FOR_1
0x4001662	            0xeb03	                           jmp 0x4001667	      2915	multi.c	FUNCTION_49	IF_1	FOR_1
0x4001664	          0x4889c3	                            mov rbx, rax	      2915	multi.c	FUNCTION_49	IF_1	FOR_1
0x4001667	          0x488b03	                    mov rax, qword [rbx]	      2917	multi.c	FUNCTION_49	IF_1	FOR_1	CALL_3
0x400166a	        0x488b7818	            mov rdi, qword [rax + 0x18] 	      2917	multi.c	FUNCTION_49	IF_1	FOR_1	CALL_3
0x400166e	        0x488b7020	            mov rsi, qword [rax + 0x20] 	      2917	multi.c	FUNCTION_49	IF_1	FOR_1	CALL_3
0x4001672	      0x498b542418	            mov rdx, qword [r12 + 0x18] 	      2917	multi.c	FUNCTION_49	IF_1	FOR_1	CALL_3
0x4001677	      0x498b4c2420	            mov rcx, qword [r12 + 0x20] 	      2917	multi.c	FUNCTION_49	IF_1	FOR_1	CALL_3
0x400167c	      0xe800000000	                          call 0x4001681	      2917	multi.c	FUNCTION_49	IF_1	FOR_1	CALL_3
0x4001681	          0x4885c0	                           test rax, rax	      2918	multi.c	FUNCTION_49	IF_1	FOR_1	IF_2
0x4001684	            0x7f13	                            jg 0x4001699	      2918	multi.c	FUNCTION_49	IF_1	FOR_1	IF_2
0x4001686	        0x488b4310	            mov rax, qword [rbx + 0x10] 	      2915	multi.c	FUNCTION_49	IF_1	FOR_1
0x400168a	        0x48891c24	                    mov qword [rsp], rbx	      2915	multi.c	FUNCTION_49	IF_1	FOR_1
0x400168e	          0x4885c0	                           test rax, rax	      2915	multi.c	FUNCTION_49	IF_1	FOR_1
0x4001691	            0x75d1	                           jne 0x4001664	      2915	multi.c	FUNCTION_49	IF_1	FOR_1
0x4001693	            0xeb04	                           jmp 0x4001699	      2915	multi.c	FUNCTION_49	IF_1	FOR_1
0x4001695	        0x48891c24	                    mov qword [rsp], rbx	      2902	multi.c	FUNCTION_49
0x4001699	    0x488d9da84e00	                 lea rbx, [rbp + 0x4ea8]	      2945	multi.c	FUNCTION_50
0x40016a0	          0x4c89e1	                            mov rcx, r12	      2927	multi.c	FUNCTION_49	CALL_4
0x40016a3	          0x4c89e2	                            mov rdx, r12	      2927	multi.c	FUNCTION_49	CALL_4
0x40016a6	        0x488b3424	                    mov rsi, qword [rsp]	      2927	multi.c	FUNCTION_49	CALL_4
0x40016aa	      0x488b7c2408	                mov rdi, qword [rsp + 8]	      2927	multi.c	FUNCTION_49	CALL_4
0x40016af	      0xe800000000	                          call 0x40016b4	      2927	multi.c	FUNCTION_49	CALL_4
0x40016b4	    0x4883bda84e00	             cmp qword [rbp + 0x4ea8], 0	      2972	multi.c	FUNCTION_50	IF_3
0x40016bc	            0x7509	                           jne 0x40016c7	      2972	multi.c	FUNCTION_50	IF_3
0x40016be	    0x83bdb04e0000	             cmp dword [rbp + 0x4eb0], 0	      2972	multi.c	FUNCTION_50	IF_3
0x40016c5	            0x7452	                            je 0x4001719	      2972	multi.c	FUNCTION_50	IF_3
0x40016c7	    0x488b95a84e00	          mov rdx, qword [rbp + 0x4ea8] 	      2976	multi.c	FUNCTION_50	IF_3	CALL_5
0x40016ce	    0x488b8db04e00	          mov rcx, qword [rbp + 0x4eb0] 	      2976	multi.c	FUNCTION_50	IF_3	CALL_5
0x40016d5	          0x4c89f7	                            mov rdi, r14	      2976	multi.c	FUNCTION_50	IF_3	CALL_5
0x40016d8	          0x4c89ee	                            mov rsi, r13	      2976	multi.c	FUNCTION_50	IF_3	CALL_5
0x40016db	      0xe800000000	                          call 0x40016e0	      2976	multi.c	FUNCTION_50	IF_3	CALL_5
0x40016e0	          0x4885c0	                           test rax, rax	      2978	multi.c	FUNCTION_50	IF_3	IF_4
0x40016e3	            0x7f6a	                            jg 0x400174f	      2978	multi.c	FUNCTION_50	IF_3	IF_4
0x40016e5	    0x498d97b00000	                   lea rdx, [r15 + 0xb0]	      2986	multi.c	FUNCTION_50	IF_3	CALL_6
0x40016ec	    0x488db5b84e00	                 lea rsi, [rbp + 0x4eb8]	      2986	multi.c	FUNCTION_50	IF_3	CALL_6
0x40016f3	    0x498bbfb00000	            mov rdi, qword [r15 + 0xb0] 	      2986	multi.c	FUNCTION_50	IF_3	CALL_6
0x40016fa	      0xe800000000	                          call 0x40016ff	      2986	multi.c	FUNCTION_50	IF_3	CALL_6
0x40016ff	            0x85c0	                           test eax, eax	      2989	multi.c	FUNCTION_50	IF_3	IF_5
0x4001701	            0x7416	                            je 0x4001719	      2989	multi.c	FUNCTION_50	IF_3	IF_5
0x4001703	            0x89c2	                            mov edx, eax	      2990	multi.c	FUNCTION_50	IF_3	CALL_7
0x4001705	    0x488d35000000	                   lea rsi, [0x0400170c]	      2990	multi.c	FUNCTION_50	IF_3	CALL_7
0x400170c	          0x4889ef	                            mov rdi, rbp	      2990	multi.c	FUNCTION_50	IF_3	CALL_7
0x400170f	      0xb800000000	                              mov eax, 0	      2990	multi.c	FUNCTION_50	IF_3	CALL_7
0x4001714	      0xe800000000	                          call 0x4001719	      2990	multi.c	FUNCTION_50	IF_3	CALL_7
0x4001719	    0x4c89b5a84e00	          mov qword [rbp + 0x4ea8], r14 	      2995	multi.c	FUNCTION_50
0x4001720	    0x4c89adb04e00	          mov qword [rbp + 0x4eb0], r13 	      2995	multi.c	FUNCTION_50
0x4001727	    0x4889ade84e00	          mov qword [rbp + 0x4ee8], rbp 	      2996	multi.c	FUNCTION_50
0x400172e	    0x488d8db84e00	                 lea rcx, [rbp + 0x4eb8]	      2997	multi.c	FUNCTION_50	CALL_8
0x4001735	    0x498b97b00000	            mov rdx, qword [r15 + 0xb0] 	      2997	multi.c	FUNCTION_50	CALL_8
0x400173c	          0x4c89f7	                            mov rdi, r14	      2997	multi.c	FUNCTION_50	CALL_8
0x400173f	        0x488b7308	                mov rsi, qword [rbx + 8]	      2997	multi.c	FUNCTION_50	CALL_8
0x4001743	      0xe800000000	                          call 0x4001748	      2997	multi.c	FUNCTION_50	CALL_8
0x4001748	    0x498987b00000	             mov qword [r15 + 0xb0], rax	      2997	multi.c	FUNCTION_50	CALL_8
0x400174f	        0x4883c418	                           add rsp, 0x18	      2999	multi.c	FUNCTION_50
0x4001753	              0x5b	                                 pop rbx	      2999	multi.c	FUNCTION_50
0x4001754	              0x5d	                                 pop rbp	      2999	multi.c	FUNCTION_50
0x4001755	            0x415c	                                 pop r12	      2999	multi.c	FUNCTION_50
0x4001757	            0x415d	                                 pop r13	      2999	multi.c	FUNCTION_50
0x4001759	            0x415e	                                 pop r14	      2999	multi.c	FUNCTION_50
0x400175b	            0x415f	                                 pop r15	      2999	multi.c	FUNCTION_50
0x400175d	              0xc3	                                     ret	      2999	multi.c	FUNCTION_50
Curl_multi_max_host_connections	ELSE,0:SWITCH,0:FOR,0:WHILE,0:CALL,0:DO,0:functions,0:IF,0	6
0x4003a59	          0x4885ff	                           test rdi, rdi	      3076	multi.c	FUNCTION_54
0x4003a5c	            0x7408	                            je 0x4003a66	      3076	multi.c	FUNCTION_54
0x4003a5e	    0x488b87580100	           mov rax, qword [rdi + 0x158] 	      3076	multi.c	FUNCTION_54
0x4003a65	              0xc3	                                     ret	      3076	multi.c	FUNCTION_54
0x4003a66	      0xb800000000	                              mov eax, 0	      3076	multi.c	FUNCTION_54
0x4003a6b	              0xc3	                                     ret	      3077	multi.c	FUNCTION_54
curl_multi_setopt	ELSE,0:SWITCH,1:FOR,0:WHILE,0:CALL,19:DO,0:functions,0:IF,2	235
0x400114e	        0x4883ec58	                           sub rsp, 0x58	      2673	multi.c	FUNCTION_41
0x4001152	      0x4889542430	             mov qword [rsp + 0x30], rdx	      2673	multi.c	FUNCTION_41
0x4001157	      0x48894c2438	             mov qword [rsp + 0x38], rcx	      2673	multi.c	FUNCTION_41
0x400115c	      0x4c89442440	              mov qword [rsp + 0x40], r8	      2673	multi.c	FUNCTION_41
0x4001161	      0x4c894c2448	              mov qword [rsp + 0x48], r9	      2673	multi.c	FUNCTION_41
0x4001166	    0x64488b042528	                mov rax, qword fs:[0x28]	      2673	multi.c	FUNCTION_41
0x400116f	      0x4889442418	             mov qword [rsp + 0x18], rax	      2673	multi.c	FUNCTION_41
0x4001174	            0x31c0	                            xor eax, eax	      2673	multi.c	FUNCTION_41
0x4001176	          0x4885ff	                           test rdi, rdi	      2677	multi.c	FUNCTION_41	IF_1
0x4001179	     0xf846e030000	                            je 0x40014ed	      2677	multi.c	FUNCTION_41	IF_1
0x400117f	      0xb801000000	                              mov eax, 1	      2678	multi.c	FUNCTION_41	IF_1
0x4001184	    0x48813f1eab0b	                cmp qword [rdi], 0xbab1e	      2677	multi.c	FUNCTION_41	IF_1
0x400118b	     0xf8561030000	                           jne 0x40014f2	      2677	multi.c	FUNCTION_41	IF_1
0x4001191	      0xb808000000	                              mov eax, 8	      2681	multi.c	FUNCTION_41	IF_2
0x4001196	    0x80bfe0010000	               cmp byte [rdi + 0x1e0], 0	      2680	multi.c	FUNCTION_41	IF_2
0x400119d	     0xf854f030000	                           jne 0x40014f2	      2680	multi.c	FUNCTION_41	IF_2
0x40011a3	    0xc70424100000	                   mov dword [rsp], 0x10	      2683	multi.c	FUNCTION_41	CALL_1
0x40011aa	      0x488d442460	                   lea rax, [rsp + 0x60]	      2683	multi.c	FUNCTION_41	CALL_1
0x40011af	      0x4889442408	                mov qword [rsp + 8], rax	      2683	multi.c	FUNCTION_41	CALL_1
0x40011b4	      0x488d442420	                   lea rax, [rsp + 0x20]	      2683	multi.c	FUNCTION_41	CALL_1
0x40011b9	      0x4889442410	             mov qword [rsp + 0x10], rax	      2683	multi.c	FUNCTION_41	CALL_1
0x40011be	    0x81fe1b270000	                         cmp esi, 0x271b	      2685	multi.c	FUNCTION_41	SWITCH_1
0x40011c4	     0xf84a7020000	                            je 0x4001471	      2685	multi.c	FUNCTION_41	SWITCH_1
0x40011ca	    0x81fe1b270000	                         cmp esi, 0x271b	      2685	multi.c	FUNCTION_41	SWITCH_1
0x40011d0	            0x7754	                            ja 0x4001226	      2685	multi.c	FUNCTION_41	SWITCH_1
0x40011d2	          0x83fe08	                              cmp esi, 8	      2685	multi.c	FUNCTION_41	SWITCH_1
0x40011d5	     0xf8418020000	                            je 0x40013f3	      2685	multi.c	FUNCTION_41	SWITCH_1
0x40011db	          0x83fe08	                              cmp esi, 8	      2685	multi.c	FUNCTION_41	SWITCH_1
0x40011de	            0x7720	                            ja 0x4001200	      2685	multi.c	FUNCTION_41	SWITCH_1
0x40011e0	          0x83fe06	                              cmp esi, 6	      2685	multi.c	FUNCTION_41	SWITCH_1
0x40011e3	     0xf84b6010000	                            je 0x400139f	      2685	multi.c	FUNCTION_41	SWITCH_1
0x40011e9	          0x83fe06	                              cmp esi, 6	      2685	multi.c	FUNCTION_41	SWITCH_1
0x40011ec	     0xf87d7010000	                            ja 0x40013c9	      2685	multi.c	FUNCTION_41	SWITCH_1
0x40011f2	          0x83fe03	                              cmp esi, 3	      2685	multi.c	FUNCTION_41	SWITCH_1
0x40011f5	     0xf8426010000	                            je 0x4001321	      2685	multi.c	FUNCTION_41	SWITCH_1
0x40011fb	      0xe9e6020000	                           jmp 0x40014e6	      2685	multi.c	FUNCTION_41	SWITCH_1
0x4001200	    0x81fe12270000	                         cmp esi, 0x2712	      2685	multi.c	FUNCTION_41	SWITCH_1
0x4001206	     0xf84a0000000	                            je 0x40012ac	      2685	multi.c	FUNCTION_41	SWITCH_1
0x400120c	    0x81fe15270000	                         cmp esi, 0x2715	      2685	multi.c	FUNCTION_41	SWITCH_1
0x4001212	     0xf845d010000	                            je 0x4001375	      2685	multi.c	FUNCTION_41	SWITCH_1
0x4001218	          0x83fe0d	                            cmp esi, 0xd	      2685	multi.c	FUNCTION_41	SWITCH_1
0x400121b	     0xf85c5020000	                           jne 0x40014e6	      2685	multi.c	FUNCTION_41	SWITCH_1
0x4001221	      0xe999020000	                           jmp 0x40014bf	      2685	multi.c	FUNCTION_41	SWITCH_1
0x4001226	    0x81fe244e0000	                         cmp esi, 0x4e24	      2685	multi.c	FUNCTION_41	SWITCH_1
0x400122c	     0xf8419010000	                            je 0x400134b	      2685	multi.c	FUNCTION_41	SWITCH_1
0x4001232	    0x81fe244e0000	                         cmp esi, 0x4e24	      2685	multi.c	FUNCTION_41	SWITCH_1
0x4001238	            0x7725	                            ja 0x400125f	      2685	multi.c	FUNCTION_41	SWITCH_1
0x400123a	    0x81fe1f270000	                         cmp esi, 0x271f	      2685	multi.c	FUNCTION_41	SWITCH_1
0x4001240	     0xf84b4000000	                            je 0x40012fa	      2685	multi.c	FUNCTION_41	SWITCH_1
0x4001246	    0x81fe214e0000	                         cmp esi, 0x4e21	      2685	multi.c	FUNCTION_41	SWITCH_1
0x400124c	            0x7437	                            je 0x4001285	      2685	multi.c	FUNCTION_41	SWITCH_1
0x400124e	    0x81fe1c270000	                         cmp esi, 0x271c	      2685	multi.c	FUNCTION_41	SWITCH_1
0x4001254	     0xf858c020000	                           jne 0x40014e6	      2685	multi.c	FUNCTION_41	SWITCH_1
0x400125a	      0xe939020000	                           jmp 0x4001498	      2685	multi.c	FUNCTION_41	SWITCH_1
0x400125f	    0x81fe39750000	                         cmp esi, 0x7539	      2685	multi.c	FUNCTION_41	SWITCH_1
0x4001265	     0xf84b2010000	                            je 0x400141d	      2685	multi.c	FUNCTION_41	SWITCH_1
0x400126b	    0x81fe3a750000	                         cmp esi, 0x753a	      2685	multi.c	FUNCTION_41	SWITCH_1
0x4001271	     0xf84d0010000	                            je 0x4001447	      2685	multi.c	FUNCTION_41	SWITCH_1
0x4001277	    0x81fe2e4e0000	                         cmp esi, 0x4e2e	      2685	multi.c	FUNCTION_41	SWITCH_1
0x400127d	     0xf8563020000	                           jne 0x40014e6	      2685	multi.c	FUNCTION_41	SWITCH_1
0x4001283	            0xeb4e	                           jmp 0x40012d3	      2685	multi.c	FUNCTION_41	SWITCH_1
0x4001285	          0x8b0424	                    mov eax, dword [rsp]	      2687	multi.c	FUNCTION_41	SWITCH_1	CALL_2
0x4001288	          0x83f82f	                           cmp eax, 0x2f	      2687	multi.c	FUNCTION_41	SWITCH_1	CALL_2
0x400128b	            0x7709	                            ja 0x4001296	      2687	multi.c	FUNCTION_41	SWITCH_1	CALL_2
0x400128d	            0x89c0	                            mov eax, eax	      2687	multi.c	FUNCTION_41	SWITCH_1	CALL_2
0x400128f	      0x4803442410	             add rax, qword [rsp + 0x10]	      2687	multi.c	FUNCTION_41	SWITCH_1	CALL_2
0x4001294	            0xeb05	                           jmp 0x400129b	      2687	multi.c	FUNCTION_41	SWITCH_1	CALL_2
0x4001296	      0x488b442408	                mov rax, qword [rsp + 8]	      2687	multi.c	FUNCTION_41	SWITCH_1	CALL_2
0x400129b	          0x488b00	                    mov rax, qword [rax]	      2687	multi.c	FUNCTION_41	SWITCH_1	CALL_2
0x400129e	        0x48894760	             mov qword [rdi + 0x60], rax	      2687	multi.c	FUNCTION_41	SWITCH_1	CALL_2
0x40012a2	      0xb800000000	                              mov eax, 0	      2674	multi.c	FUNCTION_41
0x40012a7	      0xe946020000	                           jmp 0x40014f2	      2688	multi.c	FUNCTION_41	SWITCH_1
0x40012ac	          0x8b0424	                    mov eax, dword [rsp]	      2690	multi.c	FUNCTION_41	SWITCH_1	CALL_3
0x40012af	          0x83f82f	                           cmp eax, 0x2f	      2690	multi.c	FUNCTION_41	SWITCH_1	CALL_3
0x40012b2	            0x7709	                            ja 0x40012bd	      2690	multi.c	FUNCTION_41	SWITCH_1	CALL_3
0x40012b4	            0x89c0	                            mov eax, eax	      2690	multi.c	FUNCTION_41	SWITCH_1	CALL_3
0x40012b6	      0x4803442410	             add rax, qword [rsp + 0x10]	      2690	multi.c	FUNCTION_41	SWITCH_1	CALL_3
0x40012bb	            0xeb05	                           jmp 0x40012c2	      2690	multi.c	FUNCTION_41	SWITCH_1	CALL_3
0x40012bd	      0x488b442408	                mov rax, qword [rsp + 8]	      2690	multi.c	FUNCTION_41	SWITCH_1	CALL_3
0x40012c2	          0x488b00	                    mov rax, qword [rax]	      2690	multi.c	FUNCTION_41	SWITCH_1	CALL_3
0x40012c5	        0x48894768	             mov qword [rdi + 0x68], rax	      2690	multi.c	FUNCTION_41	SWITCH_1	CALL_3
0x40012c9	      0xb800000000	                              mov eax, 0	      2674	multi.c	FUNCTION_41
0x40012ce	      0xe91f020000	                           jmp 0x40014f2	      2691	multi.c	FUNCTION_41	SWITCH_1
0x40012d3	          0x8b0424	                    mov eax, dword [rsp]	      2693	multi.c	FUNCTION_41	SWITCH_1	CALL_4
0x40012d6	          0x83f82f	                           cmp eax, 0x2f	      2693	multi.c	FUNCTION_41	SWITCH_1	CALL_4
0x40012d9	            0x7709	                            ja 0x40012e4	      2693	multi.c	FUNCTION_41	SWITCH_1	CALL_4
0x40012db	            0x89c0	                            mov eax, eax	      2693	multi.c	FUNCTION_41	SWITCH_1	CALL_4
0x40012dd	      0x4803442410	             add rax, qword [rsp + 0x10]	      2693	multi.c	FUNCTION_41	SWITCH_1	CALL_4
0x40012e2	            0xeb05	                           jmp 0x40012e9	      2693	multi.c	FUNCTION_41	SWITCH_1	CALL_4
0x40012e4	      0x488b442408	                mov rax, qword [rsp + 8]	      2693	multi.c	FUNCTION_41	SWITCH_1	CALL_4
0x40012e9	          0x488b00	                    mov rax, qword [rax]	      2693	multi.c	FUNCTION_41	SWITCH_1	CALL_4
0x40012ec	        0x48894770	             mov qword [rdi + 0x70], rax	      2693	multi.c	FUNCTION_41	SWITCH_1	CALL_4
0x40012f0	      0xb800000000	                              mov eax, 0	      2674	multi.c	FUNCTION_41
0x40012f5	      0xe9f8010000	                           jmp 0x40014f2	      2694	multi.c	FUNCTION_41	SWITCH_1
0x40012fa	          0x8b0424	                    mov eax, dword [rsp]	      2696	multi.c	FUNCTION_41	SWITCH_1	CALL_5
0x40012fd	          0x83f82f	                           cmp eax, 0x2f	      2696	multi.c	FUNCTION_41	SWITCH_1	CALL_5
0x4001300	            0x7709	                            ja 0x400130b	      2696	multi.c	FUNCTION_41	SWITCH_1	CALL_5
0x4001302	            0x89c0	                            mov eax, eax	      2696	multi.c	FUNCTION_41	SWITCH_1	CALL_5
0x4001304	      0x4803442410	             add rax, qword [rsp + 0x10]	      2696	multi.c	FUNCTION_41	SWITCH_1	CALL_5
0x4001309	            0xeb05	                           jmp 0x4001310	      2696	multi.c	FUNCTION_41	SWITCH_1	CALL_5
0x400130b	      0x488b442408	                mov rax, qword [rsp + 8]	      2696	multi.c	FUNCTION_41	SWITCH_1	CALL_5
0x4001310	          0x488b00	                    mov rax, qword [rax]	      2696	multi.c	FUNCTION_41	SWITCH_1	CALL_5
0x4001313	        0x48894778	             mov qword [rdi + 0x78], rax	      2696	multi.c	FUNCTION_41	SWITCH_1	CALL_5
0x4001317	      0xb800000000	                              mov eax, 0	      2674	multi.c	FUNCTION_41
0x400131c	      0xe9d1010000	                           jmp 0x40014f2	      2697	multi.c	FUNCTION_41	SWITCH_1
0x4001321	          0x8b0424	                    mov eax, dword [rsp]	      2699	multi.c	FUNCTION_41	SWITCH_1	CALL_6
0x4001324	          0x83f82f	                           cmp eax, 0x2f	      2699	multi.c	FUNCTION_41	SWITCH_1	CALL_6
0x4001327	            0x7709	                            ja 0x4001332	      2699	multi.c	FUNCTION_41	SWITCH_1	CALL_6
0x4001329	            0x89c0	                            mov eax, eax	      2699	multi.c	FUNCTION_41	SWITCH_1	CALL_6
0x400132b	      0x4803442410	             add rax, qword [rsp + 0x10]	      2699	multi.c	FUNCTION_41	SWITCH_1	CALL_6
0x4001330	            0xeb05	                           jmp 0x4001337	      2699	multi.c	FUNCTION_41	SWITCH_1	CALL_6
0x4001332	      0x488b442408	                mov rax, qword [rsp + 8]	      2699	multi.c	FUNCTION_41	SWITCH_1	CALL_6
0x4001337	          0x488b00	                    mov rax, qword [rax]	      2699	multi.c	FUNCTION_41	SWITCH_1	CALL_6
0x400133a	    0x488987e80000	             mov qword [rdi + 0xe8], rax	      2699	multi.c	FUNCTION_41	SWITCH_1	CALL_6
0x4001341	      0xb800000000	                              mov eax, 0	      2674	multi.c	FUNCTION_41
0x4001346	      0xe9a7010000	                           jmp 0x40014f2	      2700	multi.c	FUNCTION_41	SWITCH_1
0x400134b	          0x8b0424	                    mov eax, dword [rsp]	      2702	multi.c	FUNCTION_41	SWITCH_1	CALL_7
0x400134e	          0x83f82f	                           cmp eax, 0x2f	      2702	multi.c	FUNCTION_41	SWITCH_1	CALL_7
0x4001351	            0x7709	                            ja 0x400135c	      2702	multi.c	FUNCTION_41	SWITCH_1	CALL_7
0x4001353	            0x89c0	                            mov eax, eax	      2702	multi.c	FUNCTION_41	SWITCH_1	CALL_7
0x4001355	      0x4803442410	             add rax, qword [rsp + 0x10]	      2702	multi.c	FUNCTION_41	SWITCH_1	CALL_7
0x400135a	            0xeb05	                           jmp 0x4001361	      2702	multi.c	FUNCTION_41	SWITCH_1	CALL_7
0x400135c	      0x488b442408	                mov rax, qword [rsp + 8]	      2702	multi.c	FUNCTION_41	SWITCH_1	CALL_7
0x4001361	          0x488b00	                    mov rax, qword [rax]	      2702	multi.c	FUNCTION_41	SWITCH_1	CALL_7
0x4001364	    0x488987c00100	            mov qword [rdi + 0x1c0], rax	      2702	multi.c	FUNCTION_41	SWITCH_1	CALL_7
0x400136b	      0xb800000000	                              mov eax, 0	      2674	multi.c	FUNCTION_41
0x4001370	      0xe97d010000	                           jmp 0x40014f2	      2703	multi.c	FUNCTION_41	SWITCH_1
0x4001375	          0x8b0424	                    mov eax, dword [rsp]	      2705	multi.c	FUNCTION_41	SWITCH_1	CALL_8
0x4001378	          0x83f82f	                           cmp eax, 0x2f	      2705	multi.c	FUNCTION_41	SWITCH_1	CALL_8
0x400137b	            0x7709	                            ja 0x4001386	      2705	multi.c	FUNCTION_41	SWITCH_1	CALL_8
0x400137d	            0x89c0	                            mov eax, eax	      2705	multi.c	FUNCTION_41	SWITCH_1	CALL_8
0x400137f	      0x4803442410	             add rax, qword [rsp + 0x10]	      2705	multi.c	FUNCTION_41	SWITCH_1	CALL_8
0x4001384	            0xeb05	                           jmp 0x400138b	      2705	multi.c	FUNCTION_41	SWITCH_1	CALL_8
0x4001386	      0x488b442408	                mov rax, qword [rsp + 8]	      2705	multi.c	FUNCTION_41	SWITCH_1	CALL_8
0x400138b	          0x488b00	                    mov rax, qword [rax]	      2705	multi.c	FUNCTION_41	SWITCH_1	CALL_8
0x400138e	    0x488987c80100	            mov qword [rdi + 0x1c8], rax	      2705	multi.c	FUNCTION_41	SWITCH_1	CALL_8
0x4001395	      0xb800000000	                              mov eax, 0	      2674	multi.c	FUNCTION_41
0x400139a	      0xe953010000	                           jmp 0x40014f2	      2706	multi.c	FUNCTION_41	SWITCH_1
0x400139f	          0x8b0424	                    mov eax, dword [rsp]	      2708	multi.c	FUNCTION_41	SWITCH_1	CALL_9
0x40013a2	          0x83f82f	                           cmp eax, 0x2f	      2708	multi.c	FUNCTION_41	SWITCH_1	CALL_9
0x40013a5	            0x7709	                            ja 0x40013b0	      2708	multi.c	FUNCTION_41	SWITCH_1	CALL_9
0x40013a7	            0x89c0	                            mov eax, eax	      2708	multi.c	FUNCTION_41	SWITCH_1	CALL_9
0x40013a9	      0x4803442410	             add rax, qword [rsp + 0x10]	      2708	multi.c	FUNCTION_41	SWITCH_1	CALL_9
0x40013ae	            0xeb05	                           jmp 0x40013b5	      2708	multi.c	FUNCTION_41	SWITCH_1	CALL_9
0x40013b0	      0x488b442408	                mov rax, qword [rsp + 8]	      2708	multi.c	FUNCTION_41	SWITCH_1	CALL_9
0x40013b5	          0x488b00	                    mov rax, qword [rax]	      2708	multi.c	FUNCTION_41	SWITCH_1	CALL_9
0x40013b8	    0x488987500100	            mov qword [rdi + 0x150], rax	      2708	multi.c	FUNCTION_41	SWITCH_1	CALL_9
0x40013bf	      0xb800000000	                              mov eax, 0	      2674	multi.c	FUNCTION_41
0x40013c4	      0xe929010000	                           jmp 0x40014f2	      2709	multi.c	FUNCTION_41	SWITCH_1
0x40013c9	          0x8b0424	                    mov eax, dword [rsp]	      2711	multi.c	FUNCTION_41	SWITCH_1	CALL_10
0x40013cc	          0x83f82f	                           cmp eax, 0x2f	      2711	multi.c	FUNCTION_41	SWITCH_1	CALL_10
0x40013cf	            0x7709	                            ja 0x40013da	      2711	multi.c	FUNCTION_41	SWITCH_1	CALL_10
0x40013d1	            0x89c0	                            mov eax, eax	      2711	multi.c	FUNCTION_41	SWITCH_1	CALL_10
0x40013d3	      0x4803442410	             add rax, qword [rsp + 0x10]	      2711	multi.c	FUNCTION_41	SWITCH_1	CALL_10
0x40013d8	            0xeb05	                           jmp 0x40013df	      2711	multi.c	FUNCTION_41	SWITCH_1	CALL_10
0x40013da	      0x488b442408	                mov rax, qword [rsp + 8]	      2711	multi.c	FUNCTION_41	SWITCH_1	CALL_10
0x40013df	          0x488b00	                    mov rax, qword [rax]	      2711	multi.c	FUNCTION_41	SWITCH_1	CALL_10
0x40013e2	    0x488987580100	            mov qword [rdi + 0x158], rax	      2711	multi.c	FUNCTION_41	SWITCH_1	CALL_10
0x40013e9	      0xb800000000	                              mov eax, 0	      2674	multi.c	FUNCTION_41
0x40013ee	      0xe9ff000000	                           jmp 0x40014f2	      2712	multi.c	FUNCTION_41	SWITCH_1
0x40013f3	          0x8b0424	                    mov eax, dword [rsp]	      2714	multi.c	FUNCTION_41	SWITCH_1	CALL_11
0x40013f6	          0x83f82f	                           cmp eax, 0x2f	      2714	multi.c	FUNCTION_41	SWITCH_1	CALL_11
0x40013f9	            0x7709	                            ja 0x4001404	      2714	multi.c	FUNCTION_41	SWITCH_1	CALL_11
0x40013fb	            0x89c0	                            mov eax, eax	      2714	multi.c	FUNCTION_41	SWITCH_1	CALL_11
0x40013fd	      0x4803442410	             add rax, qword [rsp + 0x10]	      2714	multi.c	FUNCTION_41	SWITCH_1	CALL_11
0x4001402	            0xeb05	                           jmp 0x4001409	      2714	multi.c	FUNCTION_41	SWITCH_1	CALL_11
0x4001404	      0x488b442408	                mov rax, qword [rsp + 8]	      2714	multi.c	FUNCTION_41	SWITCH_1	CALL_11
0x4001409	          0x488b00	                    mov rax, qword [rax]	      2714	multi.c	FUNCTION_41	SWITCH_1	CALL_11
0x400140c	    0x488987680100	            mov qword [rdi + 0x168], rax	      2714	multi.c	FUNCTION_41	SWITCH_1	CALL_11
0x4001413	      0xb800000000	                              mov eax, 0	      2674	multi.c	FUNCTION_41
0x4001418	      0xe9d5000000	                           jmp 0x40014f2	      2715	multi.c	FUNCTION_41	SWITCH_1
0x400141d	          0x8b0424	                    mov eax, dword [rsp]	      2717	multi.c	FUNCTION_41	SWITCH_1	CALL_12
0x4001420	          0x83f82f	                           cmp eax, 0x2f	      2717	multi.c	FUNCTION_41	SWITCH_1	CALL_12
0x4001423	            0x7709	                            ja 0x400142e	      2717	multi.c	FUNCTION_41	SWITCH_1	CALL_12
0x4001425	            0x89c0	                            mov eax, eax	      2717	multi.c	FUNCTION_41	SWITCH_1	CALL_12
0x4001427	      0x4803442410	             add rax, qword [rsp + 0x10]	      2717	multi.c	FUNCTION_41	SWITCH_1	CALL_12
0x400142c	            0xeb05	                           jmp 0x4001433	      2717	multi.c	FUNCTION_41	SWITCH_1	CALL_12
0x400142e	      0x488b442408	                mov rax, qword [rsp + 8]	      2717	multi.c	FUNCTION_41	SWITCH_1	CALL_12
0x4001433	          0x488b00	                    mov rax, qword [rax]	      2717	multi.c	FUNCTION_41	SWITCH_1	CALL_12
0x4001436	    0x488987700100	            mov qword [rdi + 0x170], rax	      2717	multi.c	FUNCTION_41	SWITCH_1	CALL_12
0x400143d	      0xb800000000	                              mov eax, 0	      2674	multi.c	FUNCTION_41
0x4001442	      0xe9ab000000	                           jmp 0x40014f2	      2718	multi.c	FUNCTION_41	SWITCH_1
0x4001447	          0x8b0424	                    mov eax, dword [rsp]	      2720	multi.c	FUNCTION_41	SWITCH_1	CALL_13
0x400144a	          0x83f82f	                           cmp eax, 0x2f	      2720	multi.c	FUNCTION_41	SWITCH_1	CALL_13
0x400144d	            0x7709	                            ja 0x4001458	      2720	multi.c	FUNCTION_41	SWITCH_1	CALL_13
0x400144f	            0x89c0	                            mov eax, eax	      2720	multi.c	FUNCTION_41	SWITCH_1	CALL_13
0x4001451	      0x4803442410	             add rax, qword [rsp + 0x10]	      2720	multi.c	FUNCTION_41	SWITCH_1	CALL_13
0x4001456	            0xeb05	                           jmp 0x400145d	      2720	multi.c	FUNCTION_41	SWITCH_1	CALL_13
0x4001458	      0x488b442408	                mov rax, qword [rsp + 8]	      2720	multi.c	FUNCTION_41	SWITCH_1	CALL_13
0x400145d	          0x488b00	                    mov rax, qword [rax]	      2720	multi.c	FUNCTION_41	SWITCH_1	CALL_13
0x4001460	    0x488987780100	            mov qword [rdi + 0x178], rax	      2720	multi.c	FUNCTION_41	SWITCH_1	CALL_13
0x4001467	      0xb800000000	                              mov eax, 0	      2674	multi.c	FUNCTION_41
0x400146c	      0xe981000000	                           jmp 0x40014f2	      2721	multi.c	FUNCTION_41	SWITCH_1
0x4001471	    0x488db7800100	                  lea rsi, [rdi + 0x180]	      2723	multi.c	FUNCTION_41	SWITCH_1	CALL_15
0x4001478	          0x8b0424	                    mov eax, dword [rsp]	      2723	multi.c	FUNCTION_41	SWITCH_1	CALL_15
0x400147b	          0x83f82f	                           cmp eax, 0x2f	      2723	multi.c	FUNCTION_41	SWITCH_1	CALL_15
0x400147e	            0x7709	                            ja 0x4001489	      2723	multi.c	FUNCTION_41	SWITCH_1	CALL_15
0x4001480	            0x89c0	                            mov eax, eax	      2723	multi.c	FUNCTION_41	SWITCH_1	CALL_15
0x4001482	      0x4803442410	             add rax, qword [rsp + 0x10]	      2723	multi.c	FUNCTION_41	SWITCH_1	CALL_15
0x4001487	            0xeb05	                           jmp 0x400148e	      2723	multi.c	FUNCTION_41	SWITCH_1	CALL_15
0x4001489	      0x488b442408	                mov rax, qword [rsp + 8]	      2723	multi.c	FUNCTION_41	SWITCH_1	CALL_15
0x400148e	          0x488b38	                    mov rdi, qword [rax]	      2723	multi.c	FUNCTION_41	SWITCH_1	CALL_15
0x4001491	      0xe800000000	                          call 0x4001496	      2723	multi.c	FUNCTION_41	SWITCH_1	CALL_15
0x4001496	            0xeb5a	                           jmp 0x40014f2	      2725	multi.c	FUNCTION_41	SWITCH_1
0x4001498	    0x488db7a00100	                  lea rsi, [rdi + 0x1a0]	      2727	multi.c	FUNCTION_41	SWITCH_1	CALL_17
0x400149f	          0x8b0424	                    mov eax, dword [rsp]	      2727	multi.c	FUNCTION_41	SWITCH_1	CALL_17
0x40014a2	          0x83f82f	                           cmp eax, 0x2f	      2727	multi.c	FUNCTION_41	SWITCH_1	CALL_17
0x40014a5	            0x7709	                            ja 0x40014b0	      2727	multi.c	FUNCTION_41	SWITCH_1	CALL_17
0x40014a7	            0x89c0	                            mov eax, eax	      2727	multi.c	FUNCTION_41	SWITCH_1	CALL_17
0x40014a9	      0x4803442410	             add rax, qword [rsp + 0x10]	      2727	multi.c	FUNCTION_41	SWITCH_1	CALL_17
0x40014ae	            0xeb05	                           jmp 0x40014b5	      2727	multi.c	FUNCTION_41	SWITCH_1	CALL_17
0x40014b0	      0x488b442408	                mov rax, qword [rsp + 8]	      2727	multi.c	FUNCTION_41	SWITCH_1	CALL_17
0x40014b5	          0x488b38	                    mov rdi, qword [rax]	      2727	multi.c	FUNCTION_41	SWITCH_1	CALL_17
0x40014b8	      0xe800000000	                          call 0x40014bd	      2727	multi.c	FUNCTION_41	SWITCH_1	CALL_17
0x40014bd	            0xeb33	                           jmp 0x40014f2	      2729	multi.c	FUNCTION_41	SWITCH_1
0x40014bf	          0x8b0424	                    mov eax, dword [rsp]	      2731	multi.c	FUNCTION_41	SWITCH_1	CALL_18
0x40014c2	          0x83f82f	                           cmp eax, 0x2f	      2731	multi.c	FUNCTION_41	SWITCH_1	CALL_18
0x40014c5	            0x7709	                            ja 0x40014d0	      2731	multi.c	FUNCTION_41	SWITCH_1	CALL_18
0x40014c7	            0x89c0	                            mov eax, eax	      2731	multi.c	FUNCTION_41	SWITCH_1	CALL_18
0x40014c9	      0x4803442410	             add rax, qword [rsp + 0x10]	      2731	multi.c	FUNCTION_41	SWITCH_1	CALL_18
0x40014ce	            0xeb05	                           jmp 0x40014d5	      2731	multi.c	FUNCTION_41	SWITCH_1	CALL_18
0x40014d0	      0x488b442408	                mov rax, qword [rsp + 8]	      2731	multi.c	FUNCTION_41	SWITCH_1	CALL_18
0x40014d5	          0x488b00	                    mov rax, qword [rax]	      2731	multi.c	FUNCTION_41	SWITCH_1	CALL_18
0x40014d8	    0x488987600100	            mov qword [rdi + 0x160], rax	      2731	multi.c	FUNCTION_41	SWITCH_1	CALL_18
0x40014df	      0xb800000000	                              mov eax, 0	      2674	multi.c	FUNCTION_41
0x40014e4	            0xeb0c	                           jmp 0x40014f2	      2732	multi.c	FUNCTION_41	SWITCH_1
0x40014e6	      0xb806000000	                              mov eax, 6	      2734	multi.c	FUNCTION_41	SWITCH_1
0x40014eb	            0xeb05	                           jmp 0x40014f2	      2738	multi.c	FUNCTION_41
0x40014ed	      0xb801000000	                              mov eax, 1	      2678	multi.c	FUNCTION_41	IF_1
0x40014f2	      0x488b542418	            mov rdx, qword [rsp + 0x18] 	      2739	multi.c	FUNCTION_41
0x40014f7	    0x644833142528	                xor rdx, qword fs:[0x28]	      2739	multi.c	FUNCTION_41
0x4001500	            0x7405	                            je 0x4001507	      2739	multi.c	FUNCTION_41
0x4001502	      0xe800000000	                          call 0x4001507	      2739	multi.c	FUNCTION_41
0x4001507	        0x4883c458	                           add rsp, 0x58	      2739	multi.c	FUNCTION_41
0x400150b	              0xc3	                                     ret	      2739	multi.c	FUNCTION_41
Curl_multi_handle	ELSE,0:SWITCH,0:FOR,0:WHILE,0:CALL,12:DO,0:functions,0:IF,4	67
0x4000a02	            0x4155	                                push r13	       311	multi.c	FUNCTION_11
0x4000a04	            0x4154	                                push r12	       311	multi.c	FUNCTION_11
0x4000a06	              0x55	                                push rbp	       311	multi.c	FUNCTION_11
0x4000a07	              0x53	                                push rbx	       311	multi.c	FUNCTION_11
0x4000a08	        0x4883ec08	                              sub rsp, 8	       311	multi.c	FUNCTION_11
0x4000a0c	          0x4189fc	                           mov r12d, edi	       311	multi.c	FUNCTION_11
0x4000a0f	          0x4189f5	                           mov r13d, esi	       311	multi.c	FUNCTION_11
0x4000a12	      0xbee8010000	                          mov esi, 0x1e8	       312	multi.c	FUNCTION_11	CALL_1
0x4000a17	      0xbf01000000	                              mov edi, 1	       312	multi.c	FUNCTION_11	CALL_1
0x4000a1c	    0x488b05000000	            mov rax, qword [0x04000a23] 	       312	multi.c	FUNCTION_11	CALL_1
0x4000a23	            0xff10	                        call qword [rax]	       312	multi.c	FUNCTION_11	CALL_1
0x4000a25	          0x4885c0	                           test rax, rax	       314	multi.c	FUNCTION_11	IF_1
0x4000a28	     0xf84e2000000	                            je 0x4000b10	       314	multi.c	FUNCTION_11	IF_1
0x4000a2e	          0x4889c3	                            mov rbx, rax	       314	multi.c	FUNCTION_11	IF_1
0x4000a31	    0x48c7001eab0b	                mov qword [rax], 0xbab1e	       317	multi.c	FUNCTION_11
0x4000a38	    0x488da8800000	                   lea rbp, [rax + 0x80]	       319	multi.c	FUNCTION_11	IF_2	CALL_2
0x4000a3f	          0x4889ef	                            mov rdi, rbp	       319	multi.c	FUNCTION_11	IF_2	CALL_2
0x4000a42	      0xe800000000	                          call 0x4000a47	       319	multi.c	FUNCTION_11	IF_2	CALL_2
0x4000a47	            0x85c0	                           test eax, eax	       319	multi.c	FUNCTION_11	IF_2	CALL_2
0x4000a49	            0x7576	                           jne 0x4000ac1	       319	multi.c	FUNCTION_11	IF_2	CALL_2
0x4000a4b	    0x488dbbb80000	                   lea rdi, [rbx + 0xb8]	       322	multi.c	FUNCTION_11	IF_3	CALL_3
0x4000a52	    0x4c8d051df6ff	                lea r8, sym.sh_freeentry	       280	multi.c	FUNCTION_8	CALL_1
0x4000a59	    0x488d0d28f6ff	            lea rcx, sym.fd_key_compare 	       280	multi.c	FUNCTION_8	CALL_1
0x4000a60	    0x488d152cf6ff	                    lea rdx, sym.hash_fd	       280	multi.c	FUNCTION_8	CALL_1
0x4000a67	          0x4489e6	                           mov esi, r12d	       280	multi.c	FUNCTION_8	CALL_1
0x4000a6a	      0xe800000000	                          call 0x4000a6f	       280	multi.c	FUNCTION_8	CALL_1
0x4000a6f	            0x85c0	                           test eax, eax	       322	multi.c	FUNCTION_11	IF_3	CALL_3
0x4000a71	            0x754e	                           jne 0x4000ac1	       322	multi.c	FUNCTION_11	IF_3	CALL_3
0x4000a73	    0x488dbbf80000	                   lea rdi, [rbx + 0xf8]	       325	multi.c	FUNCTION_11	IF_4	CALL_4
0x4000a7a	          0x4489ee	                           mov esi, r13d	       325	multi.c	FUNCTION_11	IF_4	CALL_4
0x4000a7d	      0xe800000000	                          call 0x4000a82	       325	multi.c	FUNCTION_11	IF_4	CALL_4
0x4000a82	            0x85c0	                           test eax, eax	       325	multi.c	FUNCTION_11	IF_4	CALL_4
0x4000a84	            0x753b	                           jne 0x4000ac1	       325	multi.c	FUNCTION_11	IF_4	CALL_4
0x4000a86	        0x488d7b20	                   lea rdi, [rbx + 0x20]	       328	multi.c	FUNCTION_11	CALL_5
0x4000a8a	    0x488d3514f6ff	            lea rsi, sym.multi_freeamsg 	       328	multi.c	FUNCTION_11	CALL_5
0x4000a91	      0xe800000000	                          call 0x4000a96	       328	multi.c	FUNCTION_11	CALL_5
0x4000a96	        0x488d7b40	                   lea rdi, [rbx + 0x40]	       329	multi.c	FUNCTION_11	CALL_6
0x4000a9a	    0x488d3504f6ff	            lea rsi, sym.multi_freeamsg 	       329	multi.c	FUNCTION_11	CALL_6
0x4000aa1	      0xe800000000	                          call 0x4000aa6	       329	multi.c	FUNCTION_11	CALL_6
0x4000aa6	    0x48c783680100	              mov qword [rbx + 0x168], 5	       331	multi.c	FUNCTION_11
0x4000ab1	    0x48c783500100	mov qword [rbx + 0x150], 0xffffffffffffffff	       334	multi.c	FUNCTION_11
0x4000abc	          0x4889d8	                            mov rax, rbx	       335	multi.c	FUNCTION_11
0x4000abf	            0xeb54	                           jmp 0x4000b15	       335	multi.c	FUNCTION_11
0x4000ac1	    0x488dbbb80000	                   lea rdi, [rbx + 0xb8]	       339	multi.c	FUNCTION_11	CALL_7
0x4000ac8	      0xe800000000	                          call 0x4000acd	       339	multi.c	FUNCTION_11	CALL_7
0x4000acd	          0x4889ef	                            mov rdi, rbp	       340	multi.c	FUNCTION_11	CALL_8
0x4000ad0	      0xe800000000	                          call 0x4000ad5	       340	multi.c	FUNCTION_11	CALL_8
0x4000ad5	    0x488dbbf80000	                   lea rdi, [rbx + 0xf8]	       341	multi.c	FUNCTION_11	CALL_9
0x4000adc	      0xe800000000	                          call 0x4000ae1	       341	multi.c	FUNCTION_11	CALL_9
0x4000ae1	        0x488d7b20	                   lea rdi, [rbx + 0x20]	       342	multi.c	FUNCTION_11	CALL_10
0x4000ae5	      0xbe00000000	                              mov esi, 0	       342	multi.c	FUNCTION_11	CALL_10
0x4000aea	      0xe800000000	                          call 0x4000aef	       342	multi.c	FUNCTION_11	CALL_10
0x4000aef	        0x488d7b40	                   lea rdi, [rbx + 0x40]	       343	multi.c	FUNCTION_11	CALL_11
0x4000af3	      0xbe00000000	                              mov esi, 0	       343	multi.c	FUNCTION_11	CALL_11
0x4000af8	      0xe800000000	                          call 0x4000afd	       343	multi.c	FUNCTION_11	CALL_11
0x4000afd	          0x4889df	                            mov rdi, rbx	       345	multi.c	FUNCTION_11	CALL_12
0x4000b00	    0x488b05000000	            mov rax, qword [0x04000b07] 	       345	multi.c	FUNCTION_11	CALL_12
0x4000b07	            0xff10	                        call qword [rax]	       345	multi.c	FUNCTION_11	CALL_12
0x4000b09	      0xb800000000	                              mov eax, 0	       346	multi.c	FUNCTION_11
0x4000b0e	            0xeb05	                           jmp 0x4000b15	       346	multi.c	FUNCTION_11
0x4000b10	      0xb800000000	                              mov eax, 0	       315	multi.c	FUNCTION_11	IF_1
0x4000b15	        0x4883c408	                              add rsp, 8	       347	multi.c	FUNCTION_11
0x4000b19	              0x5b	                                 pop rbx	       347	multi.c	FUNCTION_11
0x4000b1a	              0x5d	                                 pop rbp	       347	multi.c	FUNCTION_11
0x4000b1b	            0x415c	                                 pop r12	       347	multi.c	FUNCTION_11
0x4000b1d	            0x415d	                                 pop r13	       347	multi.c	FUNCTION_11
0x4000b1f	              0xc3	                                     ret	       347	multi.c	FUNCTION_11
multi_socket	ELSE,3:SWITCH,0:FOR,0:WHILE,1:CALL,12:DO,1:functions,0:IF,14	163
0x40036e5	            0x4157	                                push r15	      2543	multi.c	FUNCTION_40
0x40036e7	            0x4156	                                push r14	      2543	multi.c	FUNCTION_40
0x40036e9	            0x4155	                                push r13	      2543	multi.c	FUNCTION_40
0x40036eb	            0x4154	                                push r12	      2543	multi.c	FUNCTION_40
0x40036ed	              0x55	                                push rbp	      2543	multi.c	FUNCTION_40
0x40036ee	              0x53	                                push rbx	      2543	multi.c	FUNCTION_40
0x40036ef	    0x4881ecd80000	                           sub rsp, 0xd8	      2543	multi.c	FUNCTION_40
0x40036f6	          0x4889fb	                            mov rbx, rdi	      2543	multi.c	FUNCTION_40
0x40036f9	          0x4189f6	                           mov r14d, esi	      2543	multi.c	FUNCTION_40
0x40036fc	            0x89d5	                            mov ebp, edx	      2543	multi.c	FUNCTION_40
0x40036fe	          0x4189cf	                           mov r15d, ecx	      2543	multi.c	FUNCTION_40
0x4003701	      0x4c89442408	                 mov qword [rsp + 8], r8	      2543	multi.c	FUNCTION_40
0x4003706	    0x64488b042528	                mov rax, qword fs:[0x28]	      2543	multi.c	FUNCTION_40
0x400370f	    0x48898424c800	             mov qword [rsp + 0xc8], rax	      2543	multi.c	FUNCTION_40
0x4003717	            0x31c0	                            xor eax, eax	      2543	multi.c	FUNCTION_40
0x4003719	      0xe800000000	                          call 0x400371e	      2547	multi.c	FUNCTION_40	CALL_1
0x400371e	          0x4584f6	                         test r14b, r14b	      2549	multi.c	FUNCTION_40	IF_1
0x4003721	            0x7442	                            je 0x4003765	      2549	multi.c	FUNCTION_40	IF_1
0x4003723	      0x488b742408	                mov rsi, qword [rsp + 8]	      2551	multi.c	FUNCTION_40	IF_1	CALL_2
0x4003728	          0x4889df	                            mov rdi, rbx	      2551	multi.c	FUNCTION_40	IF_1	CALL_2
0x400372b	      0xe800000000	                          call 0x4003730	      2551	multi.c	FUNCTION_40	IF_1	CALL_2
0x4003730	          0x4189c6	                           mov r14d, eax	      2551	multi.c	FUNCTION_40	IF_1	CALL_2
0x4003733	          0x83f801	                              cmp eax, 1	      2555	multi.c	FUNCTION_40	IF_1	IF_2
0x4003736	     0xf84ec010000	                            je 0x4003928	      2555	multi.c	FUNCTION_40	IF_1	IF_2
0x400373c	        0x488b6b08	                mov rbp, qword [rbx + 8]	      2556	multi.c	FUNCTION_40	IF_1	IF_2
0x4003740	          0x4885ed	                           test rbp, rbp	      2557	multi.c	FUNCTION_40	IF_1	IF_2	WHILE_1
0x4003743	     0xf84e6010000	                            je 0x400392f	      2557	multi.c	FUNCTION_40	IF_1	IF_2	WHILE_1
0x4003749	          0x4889ee	                            mov rsi, rbp	      2558	multi.c	FUNCTION_40	IF_1	IF_2	WHILE_1	CALL_3
0x400374c	          0x4889df	                            mov rdi, rbx	      2558	multi.c	FUNCTION_40	IF_1	IF_2	WHILE_1	CALL_3
0x400374f	      0xe8e4ccffff	                   call sym.singlesocket	      2558	multi.c	FUNCTION_40	IF_1	IF_2	WHILE_1	CALL_3
0x4003754	        0x488b6d00	                    mov rbp, qword [rbp]	      2559	multi.c	FUNCTION_40	IF_1	IF_2	WHILE_1
0x4003758	          0x4885ed	                           test rbp, rbp	      2557	multi.c	FUNCTION_40	IF_1	IF_2	WHILE_1
0x400375b	            0x75ec	                           jne 0x4003749	      2557	multi.c	FUNCTION_40	IF_1	IF_2	WHILE_1
0x400375d	          0x4489f0	                           mov eax, r14d	      2564	multi.c	FUNCTION_40	IF_1
0x4003760	      0xe9ca010000	                           jmp 0x400392f	      2564	multi.c	FUNCTION_40	IF_1
0x4003765	          0x4989c5	                            mov r13, rax	      2564	multi.c	FUNCTION_40	IF_1
0x4003768	          0x4989d4	                            mov r12, rdx	      2564	multi.c	FUNCTION_40	IF_1
0x400376b	          0x83fdff	             cmp ebp, 0xffffffffffffffff	      2566	multi.c	FUNCTION_40	IF_3
0x400376e	     0xf84f1000000	                            je 0x4003865	      2566	multi.c	FUNCTION_40	IF_3
0x4003774	    0x488dbbb80000	                   lea rdi, [rbx + 0xb8]	      2568	multi.c	FUNCTION_40	IF_3	CALL_4
0x400377b	            0x89ee	                            mov esi, ebp	      2568	multi.c	FUNCTION_40	IF_3	CALL_4
0x400377d	      0xe88eccffff	                    call sym.sh_getentry	      2568	multi.c	FUNCTION_40	IF_3	CALL_4
0x4003782	          0x4885c0	                           test rax, rax	      2570	multi.c	FUNCTION_40	IF_3	IF_4
0x4003785	     0xf84f8000000	                            je 0x4003883	      2570	multi.c	FUNCTION_40	IF_3	IF_4
0x400378b	          0x488b28	                    mov rbp, qword [rax]	      2580	multi.c	FUNCTION_40	IF_3	ELSE_1
0x400378e	    0x81bdd0520000	   cmp dword [rbp + 0x52d0], 0xc0dedbad 	      2582	multi.c	FUNCTION_40	IF_3	ELSE_1	IF_5
0x4003798	            0x740a	                            je 0x40037a4	      2582	multi.c	FUNCTION_40	IF_3	ELSE_1	IF_5
0x400379a	      0xb804000000	                              mov eax, 4	      2584	multi.c	FUNCTION_40	IF_3	ELSE_1	IF_5
0x400379f	      0xe98b010000	                           jmp 0x400392f	      2584	multi.c	FUNCTION_40	IF_3	ELSE_1	IF_5
0x40037a4	        0x488b4510	            mov rax, qword [rbp + 0x10] 	      2589	multi.c	FUNCTION_40	IF_3	ELSE_1	IF_6
0x40037a8	          0x4885c0	                           test rax, rax	      2589	multi.c	FUNCTION_40	IF_3	ELSE_1	IF_6
0x40037ab	            0x744c	                            je 0x40037f9	      2589	multi.c	FUNCTION_40	IF_3	ELSE_1	IF_6
0x40037ad	        0x41f6c702	                            test r15b, 2	      2590	multi.c	FUNCTION_40	IF_3	ELSE_1	IF_6	IF_7
0x40037b1	            0x7411	                            je 0x40037c4	      2590	multi.c	FUNCTION_40	IF_3	ELSE_1	IF_6	IF_7
0x40037b3	    0x488b90580400	           mov rdx, qword [rax + 0x458] 	      2591	multi.c	FUNCTION_40	IF_3	ELSE_1	IF_6	IF_7
0x40037ba	          0x4885d2	                           test rdx, rdx	      2590	multi.c	FUNCTION_40	IF_3	ELSE_1	IF_6	IF_7
0x40037bd	            0x7405	                            je 0x40037c4	      2590	multi.c	FUNCTION_40	IF_3	ELSE_1	IF_6	IF_7
0x40037bf	          0x488b2a	                    mov rbp, qword [rdx]	      2592	multi.c	FUNCTION_40	IF_3	ELSE_1	IF_6	IF_7
0x40037c2	            0xeb15	                           jmp 0x40037d9	      2592	multi.c	FUNCTION_40	IF_3	ELSE_1	IF_6	IF_7
0x40037c4	        0x41f6c701	                            test r15b, 1	      2593	multi.c	FUNCTION_40	IF_3	ELSE_1	IF_6	ELSE_2	IF_8
0x40037c8	            0x7418	                            je 0x40037e2	      2593	multi.c	FUNCTION_40	IF_3	ELSE_1	IF_6	ELSE_2	IF_8
0x40037ca	    0x488b90780400	           mov rdx, qword [rax + 0x478] 	      2594	multi.c	FUNCTION_40	IF_3	ELSE_1	IF_6	ELSE_2	IF_8
0x40037d1	          0x4885d2	                           test rdx, rdx	      2593	multi.c	FUNCTION_40	IF_3	ELSE_1	IF_6	ELSE_2	IF_8
0x40037d4	            0x740c	                            je 0x40037e2	      2593	multi.c	FUNCTION_40	IF_3	ELSE_1	IF_6	ELSE_2	IF_8
0x40037d6	          0x488b2a	                    mov rbp, qword [rdx]	      2595	multi.c	FUNCTION_40	IF_3	ELSE_1	IF_6	ELSE_2	IF_8
0x40037d9	        0x488b4510	            mov rax, qword [rbp + 0x10] 	      2598	multi.c	FUNCTION_40	IF_3	ELSE_1	IF_9
0x40037dd	          0x4885c0	                           test rax, rax	      2598	multi.c	FUNCTION_40	IF_3	ELSE_1	IF_9
0x40037e0	            0x7417	                            je 0x40037f9	      2598	multi.c	FUNCTION_40	IF_3	ELSE_1	IF_9
0x40037e2	    0x488b90e00300	           mov rdx, qword [rax + 0x3e0] 	      2599	multi.c	FUNCTION_40	IF_3	ELSE_1	IF_9
0x40037e9	    0xf68284000000	               test byte [rdx + 0x84], 8	      2598	multi.c	FUNCTION_40	IF_3	ELSE_1	IF_9
0x40037f0	            0x7507	                           jne 0x40037f9	      2598	multi.c	FUNCTION_40	IF_3	ELSE_1	IF_9
0x40037f2	    0x4489b8400700	           mov dword [rax + 0x740], r15d	      2601	multi.c	FUNCTION_40	IF_3	ELSE_1	IF_9
0x40037f9	      0x4c8d7c2420	                   lea r15, [rsp + 0x20]	      2603	multi.c	FUNCTION_40	IF_3	ELSE_1
0x40037fe	          0x4c89fe	                            mov rsi, r15	      2603	multi.c	FUNCTION_40	IF_3	ELSE_1
0x4003801	          0x4889ef	                            mov rdi, rbp	      2603	multi.c	FUNCTION_40	IF_3	ELSE_1
0x4003804	      0xe8d0cfffff	                 call sym.sigpipe_ignore	      2603	multi.c	FUNCTION_40	IF_3	ELSE_1
0x4003809	          0x4c89e2	                            mov rdx, r12	      2604	multi.c	FUNCTION_40	IF_3	ELSE_1	CALL_5
0x400380c	          0x4889e9	                            mov rcx, rbp	      2604	multi.c	FUNCTION_40	IF_3	ELSE_1	CALL_5
0x400380f	          0x4c89ee	                            mov rsi, r13	      2604	multi.c	FUNCTION_40	IF_3	ELSE_1	CALL_5
0x4003812	          0x4889df	                            mov rdi, rbx	      2604	multi.c	FUNCTION_40	IF_3	ELSE_1	CALL_5
0x4003815	      0xe8cae8ffff	                call sym.multi_runsingle	      2604	multi.c	FUNCTION_40	IF_3	ELSE_1	CALL_5
0x400381a	          0x4189c6	                           mov r14d, eax	      2604	multi.c	FUNCTION_40	IF_3	ELSE_1	CALL_5
0x400381d	          0x4c89ff	                            mov rdi, r15	      2605	multi.c	FUNCTION_40	IF_3	ELSE_1
0x4003820	      0xe876d0ffff	                call sym.sigpipe_restore	      2605	multi.c	FUNCTION_40	IF_3	ELSE_1
0x4003825	        0x488b4510	            mov rax, qword [rbp + 0x10] 	      2607	multi.c	FUNCTION_40	IF_3	ELSE_1	IF_10
0x4003829	          0x4885c0	                           test rax, rax	      2607	multi.c	FUNCTION_40	IF_3	ELSE_1	IF_10
0x400382c	            0x741a	                            je 0x4003848	      2607	multi.c	FUNCTION_40	IF_3	ELSE_1	IF_10
0x400382e	    0x488b90e00300	           mov rdx, qword [rax + 0x3e0] 	      2608	multi.c	FUNCTION_40	IF_3	ELSE_1	IF_10
0x4003835	    0xf68284000000	               test byte [rdx + 0x84], 8	      2607	multi.c	FUNCTION_40	IF_3	ELSE_1	IF_10
0x400383c	            0x750a	                           jne 0x4003848	      2607	multi.c	FUNCTION_40	IF_3	ELSE_1	IF_10
0x400383e	    0xc78040070000	              mov dword [rax + 0x740], 0	      2610	multi.c	FUNCTION_40	IF_3	ELSE_1	IF_10
0x4003848	          0x4585f6	                         test r14d, r14d	      2612	multi.c	FUNCTION_40	IF_3	ELSE_1	IF_11
0x400384b	            0x7f0b	                            jg 0x4003858	      2612	multi.c	FUNCTION_40	IF_3	ELSE_1	IF_11
0x400384d	          0x4889ee	                            mov rsi, rbp	      2615	multi.c	FUNCTION_40	IF_3	ELSE_1	CALL_6
0x4003850	          0x4889df	                            mov rdi, rbx	      2615	multi.c	FUNCTION_40	IF_3	ELSE_1	CALL_6
0x4003853	      0xe8e0cbffff	                   call sym.singlesocket	      2615	multi.c	FUNCTION_40	IF_3	ELSE_1	CALL_6
0x4003858	      0xe800000000	                          call 0x400385d	      2623	multi.c	FUNCTION_40	IF_3	ELSE_1	CALL_7
0x400385d	          0x4989c5	                            mov r13, rax	      2623	multi.c	FUNCTION_40	IF_3	ELSE_1	CALL_7
0x4003860	          0x4989d4	                            mov r12, rdx	      2623	multi.c	FUNCTION_40	IF_3	ELSE_1	CALL_7
0x4003863	            0xeb24	                           jmp 0x4003889	      2623	multi.c	FUNCTION_40	IF_3	ELSE_1	CALL_7
0x4003865	    0x48c783d00100	              mov qword [rbx + 0x1d0], 0	        90	string3.h	FUNCTION_67	CALL_6
0x4003870	    0x48c783d80100	              mov qword [rbx + 0x1d8], 0	        90	string3.h	FUNCTION_67	CALL_6
0x400387b	    0x41be00000000	                             mov r14d, 0	      2544	multi.c	FUNCTION_40
0x4003881	            0xeb06	                           jmp 0x4003889	      2544	multi.c	FUNCTION_40
0x4003883	    0x41be00000000	                             mov r14d, 0	      2544	multi.c	FUNCTION_40
0x4003889	      0x488d442418	                   lea rax, [rsp + 0x18]	      2658	multi.c	FUNCTION_40	DO_1	CALL_11
0x400388e	        0x48890424	                    mov qword [rsp], rax	      2658	multi.c	FUNCTION_40	DO_1	CALL_11
0x4003892	      0x4c8d7c2420	                   lea r15, [rsp + 0x20]	      2645	multi.c	FUNCTION_40	DO_1	IF_12
0x4003897	            0xeb3c	                           jmp 0x40038d5	      2645	multi.c	FUNCTION_40	DO_1	IF_12
0x4003899	          0x4885ed	                           test rbp, rbp	      2642	multi.c	FUNCTION_40	DO_1	IF_12
0x400389c	            0x7437	                            je 0x40038d5	      2642	multi.c	FUNCTION_40	DO_1	IF_12
0x400389e	          0x4c89fe	                            mov rsi, r15	      2645	multi.c	FUNCTION_40	DO_1	IF_12
0x40038a1	          0x4889ef	                            mov rdi, rbp	      2645	multi.c	FUNCTION_40	DO_1	IF_12
0x40038a4	      0xe830cfffff	                 call sym.sigpipe_ignore	      2645	multi.c	FUNCTION_40	DO_1	IF_12
0x40038a9	          0x4889e9	                            mov rcx, rbp	      2646	multi.c	FUNCTION_40	DO_1	IF_12	CALL_9
0x40038ac	          0x4c89ee	                            mov rsi, r13	      2646	multi.c	FUNCTION_40	DO_1	IF_12	CALL_9
0x40038af	          0x4c89e2	                            mov rdx, r12	      2646	multi.c	FUNCTION_40	DO_1	IF_12	CALL_9
0x40038b2	          0x4889df	                            mov rdi, rbx	      2646	multi.c	FUNCTION_40	DO_1	IF_12	CALL_9
0x40038b5	      0xe82ae8ffff	                call sym.multi_runsingle	      2646	multi.c	FUNCTION_40	DO_1	IF_12	CALL_9
0x40038ba	          0x4189c6	                           mov r14d, eax	      2646	multi.c	FUNCTION_40	DO_1	IF_12	CALL_9
0x40038bd	          0x4c89ff	                            mov rdi, r15	      2647	multi.c	FUNCTION_40	DO_1	IF_12
0x40038c0	      0xe8d6cfffff	                call sym.sigpipe_restore	      2647	multi.c	FUNCTION_40	DO_1	IF_12
0x40038c5	          0x4585f6	                         test r14d, r14d	      2649	multi.c	FUNCTION_40	DO_1	IF_12	IF_13
0x40038c8	            0x7f0b	                            jg 0x40038d5	      2649	multi.c	FUNCTION_40	DO_1	IF_12	IF_13
0x40038ca	          0x4889ee	                            mov rsi, rbp	      2652	multi.c	FUNCTION_40	DO_1	IF_12	CALL_10
0x40038cd	          0x4889df	                            mov rdi, rbx	      2652	multi.c	FUNCTION_40	DO_1	IF_12	CALL_10
0x40038d0	      0xe863cbffff	                   call sym.singlesocket	      2652	multi.c	FUNCTION_40	DO_1	IF_12	CALL_10
0x40038d5	    0x488b93b00000	            mov rdx, qword [rbx + 0xb0] 	      2658	multi.c	FUNCTION_40	DO_1	CALL_11
0x40038dc	        0x488b0c24	                    mov rcx, qword [rsp]	      2658	multi.c	FUNCTION_40	DO_1	CALL_11
0x40038e0	          0x4c89ef	                            mov rdi, r13	      2658	multi.c	FUNCTION_40	DO_1	CALL_11
0x40038e3	          0x4c89e6	                            mov rsi, r12	      2658	multi.c	FUNCTION_40	DO_1	CALL_11
0x40038e6	      0xe800000000	                          call 0x40038eb	      2658	multi.c	FUNCTION_40	DO_1	CALL_11
0x40038eb	    0x488983b00000	             mov qword [rbx + 0xb0], rax	      2658	multi.c	FUNCTION_40	DO_1	CALL_11
0x40038f2	      0x488b442418	            mov rax, qword [rsp + 0x18] 	      2659	multi.c	FUNCTION_40	DO_1	IF_14
0x40038f7	          0x4885c0	                           test rax, rax	      2659	multi.c	FUNCTION_40	DO_1	IF_14
0x40038fa	            0x741d	                            je 0x4003919	      2659	multi.c	FUNCTION_40	DO_1	IF_14
0x40038fc	        0x488b6830	            mov rbp, qword [rax + 0x30] 	      2660	multi.c	FUNCTION_40	DO_1	IF_14
0x4003900	          0x4889e9	                            mov rcx, rbp	      2661	multi.c	FUNCTION_40	DO_1	IF_14	CALL_12
0x4003903	          0x4889da	                            mov rdx, rbx	      2661	multi.c	FUNCTION_40	DO_1	IF_14	CALL_12
0x4003906	          0x4c89ef	                            mov rdi, r13	      2661	multi.c	FUNCTION_40	DO_1	IF_14	CALL_12
0x4003909	          0x4c89e6	                            mov rsi, r12	      2661	multi.c	FUNCTION_40	DO_1	IF_14	CALL_12
0x400390c	      0xe8eecfffff	               call sym.add_next_timeout	      2661	multi.c	FUNCTION_40	DO_1	IF_14	CALL_12
0x4003911	    0x48837c241800	               cmp qword [rsp + 0x18], 0	      2664	multi.c	FUNCTION_40	DO_1
0x4003917	            0x7580	                           jne 0x4003899	      2664	multi.c	FUNCTION_40	DO_1
0x4003919	          0x8b431c	            mov eax, dword [rbx + 0x1c] 	      2666	multi.c	FUNCTION_40
0x400391c	      0x488b4c2408	                mov rcx, qword [rsp + 8]	      2666	multi.c	FUNCTION_40
0x4003921	            0x8901	                    mov dword [rcx], eax	      2666	multi.c	FUNCTION_40
0x4003923	          0x4489f0	                           mov eax, r14d	      2667	multi.c	FUNCTION_40
0x4003926	            0xeb07	                           jmp 0x400392f	      2667	multi.c	FUNCTION_40
0x4003928	      0xb801000000	                              mov eax, 1	      2564	multi.c	FUNCTION_40	IF_1
0x400392d	            0xeb00	                           jmp 0x400392f	      2564	multi.c	FUNCTION_40	IF_1
0x400392f	    0x488b8c24c800	            mov rcx, qword [rsp + 0xc8] 	      2668	multi.c	FUNCTION_40
0x4003937	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      2668	multi.c	FUNCTION_40
0x4003940	            0x7405	                            je 0x4003947	      2668	multi.c	FUNCTION_40
0x4003942	      0xe800000000	                          call 0x4003947	      2668	multi.c	FUNCTION_40
0x4003947	    0x4881c4d80000	                           add rsp, 0xd8	      2668	multi.c	FUNCTION_40
0x400394e	              0x5b	                                 pop rbx	      2668	multi.c	FUNCTION_40
0x400394f	              0x5d	                                 pop rbp	      2668	multi.c	FUNCTION_40
0x4003950	            0x415c	                                 pop r12	      2668	multi.c	FUNCTION_40
0x4003952	            0x415d	                                 pop r13	      2668	multi.c	FUNCTION_40
0x4003954	            0x415e	                                 pop r14	      2668	multi.c	FUNCTION_40
0x4003956	            0x415f	                                 pop r15	      2668	multi.c	FUNCTION_40
0x4003958	              0xc3	                                     ret	      2668	multi.c	FUNCTION_40
Curl_multi_content_length_penalty_size	ELSE,0:SWITCH,0:FOR,0:WHILE,0:CALL,0:DO,0:functions,0:IF,0	6
0x4003a7f	          0x4885ff	                           test rdi, rdi	      3086	multi.c	FUNCTION_56
0x4003a82	            0x7408	                            je 0x4003a8c	      3086	multi.c	FUNCTION_56
0x4003a84	    0x488b87700100	           mov rax, qword [rdi + 0x170] 	      3086	multi.c	FUNCTION_56
0x4003a8b	              0xc3	                                     ret	      3086	multi.c	FUNCTION_56
0x4003a8c	      0xb800000000	                              mov eax, 0	      3086	multi.c	FUNCTION_56
0x4003a91	              0xc3	                                     ret	      3087	multi.c	FUNCTION_56
Curl_set_in_callback	ELSE,1:SWITCH,0:FOR,0:WHILE,0:CALL,0:DO,0:functions,0:IF,2	10
0x4003ab5	    0x488b87b00000	            mov rax, qword [rdi + 0xb0] 	      3124	multi.c	FUNCTION_61	IF_1
0x4003abc	          0x4885c0	                           test rax, rax	      3124	multi.c	FUNCTION_61	IF_1
0x4003abf	            0x7408	                            je 0x4003ac9	      3124	multi.c	FUNCTION_61	IF_1
0x4003ac1	    0x4088b0e00100	             mov byte [rax + 0x1e0], sil	      3125	multi.c	FUNCTION_61	IF_1
0x4003ac8	              0xc3	                                     ret	      3125	multi.c	FUNCTION_61	IF_1
0x4003ac9	    0x488b87a80000	            mov rax, qword [rdi + 0xa8] 	      3126	multi.c	FUNCTION_61	ELSE_1	IF_2
0x4003ad0	          0x4885c0	                           test rax, rax	      3126	multi.c	FUNCTION_61	ELSE_1	IF_2
0x4003ad3	            0x7407	                            je 0x4003adc	      3126	multi.c	FUNCTION_61	ELSE_1	IF_2
0x4003ad5	    0x4088b0e00100	             mov byte [rax + 0x1e0], sil	      3127	multi.c	FUNCTION_61	ELSE_1	IF_2
0x4003adc	            0xf3c3	                                     ret	      3127	multi.c	FUNCTION_61	ELSE_1	IF_2
sh_getentry	ELSE,0:SWITCH,0:FOR,0:WHILE,0:CALL,1:DO,0:functions,0:IF,1	11
0x4000410	        0x4883ec18	                           sub rsp, 0x18	       190	multi.c	FUNCTION_2
0x4000414	        0x8974240c	              mov dword [rsp + 0xc], esi	       190	multi.c	FUNCTION_2
0x4000418	          0x83feff	             cmp esi, 0xffffffffffffffff	       191	multi.c	FUNCTION_2	IF_1
0x400041b	            0x7411	                            je 0x400042e	       191	multi.c	FUNCTION_2	IF_1
0x400041d	      0x488d74240c	                    lea rsi, [rsp + 0xc]	       193	multi.c	FUNCTION_2	CALL_1
0x4000422	      0xba04000000	                              mov edx, 4	       193	multi.c	FUNCTION_2	CALL_1
0x4000427	      0xe800000000	                          call 0x400042c	       193	multi.c	FUNCTION_2	CALL_1
0x400042c	            0xeb05	                           jmp 0x4000433	       193	multi.c	FUNCTION_2	CALL_1
0x400042e	      0xb800000000	                              mov eax, 0	       194	multi.c	FUNCTION_2
0x4000433	        0x4883c418	                           add rsp, 0x18	       195	multi.c	FUNCTION_2
0x4000437	              0xc3	                                     ret	       195	multi.c	FUNCTION_2
do_complete	ELSE,0:SWITCH,0:FOR,0:WHILE,0:CALL,1:DO,0:functions,0:IF,0	14
0x40008c0	        0x4883ec08	                              sub rsp, 8	      1229	multi.c	FUNCTION_29
0x40008c4	          0x488b07	                    mov rax, qword [rdi]	      1230	multi.c	FUNCTION_29
0x40008c7	    0xc680e0010000	               mov byte [rax + 0x1e0], 0	      1230	multi.c	FUNCTION_29
0x40008ce	          0x488b17	                    mov rdx, qword [rdi]	      1231	multi.c	FUNCTION_29
0x40008d1	    0x8b87f8030000	           mov eax, dword [rdi + 0x3f8] 	      1231	multi.c	FUNCTION_29
0x40008d7	    0x3987fc030000	           cmp dword [rdi + 0x3fc], eax 	      1231	multi.c	FUNCTION_29
0x40008dd	     0xf4d87fc0300	         cmovge eax, dword [rdi + 0x3fc]	      1231	multi.c	FUNCTION_29
0x40008e4	          0x83c001	                              add eax, 1	      1231	multi.c	FUNCTION_29
0x40008e7	    0x8982b0010000	            mov dword [rdx + 0x1b0], eax	      1231	multi.c	FUNCTION_29
0x40008ed	      0xbe06000000	                              mov esi, 6	      1233	multi.c	FUNCTION_29	CALL_1
0x40008f2	          0x488b3f	                    mov rdi, qword [rdi]	      1233	multi.c	FUNCTION_29	CALL_1
0x40008f5	      0xe800000000	                          call 0x40008fa	      1233	multi.c	FUNCTION_29	CALL_1
0x40008fa	        0x4883c408	                              add rsp, 8	      1234	multi.c	FUNCTION_29
0x40008fe	              0xc3	                                     ret	      1234	multi.c	FUNCTION_29
Curl_expire_done	ELSE,0:SWITCH,0:FOR,0:WHILE,0:CALL,1:DO,0:functions,0:IF,0	4
0x4001dd4	        0x4883ec08	                              sub rsp, 8	      3008	multi.c	FUNCTION_51
0x4001dd8	      0xe85ae4ffff	               call sym.multi_deltimeout	      3010	multi.c	FUNCTION_51	CALL_1
0x4001ddd	        0x4883c408	                              add rsp, 8	      3011	multi.c	FUNCTION_51
0x4001de1	              0xc3	                                     ret	      3011	multi.c	FUNCTION_51
curl_multi_socket_all	ELSE,0:SWITCH,0:FOR,0:WHILE,0:CALL,2:DO,0:functions,0:IF,2	22
0x40039dc	      0xb808000000	                              mov eax, 8	      2773	multi.c	FUNCTION_44	IF_1
0x40039e1	    0x80bfe0010000	               cmp byte [rdi + 0x1e0], 0	      2772	multi.c	FUNCTION_44	IF_1
0x40039e8	            0x7536	                           jne 0x4003a20	      2772	multi.c	FUNCTION_44	IF_1
0x40039ea	              0x55	                                push rbp	      2770	multi.c	FUNCTION_44
0x40039eb	              0x53	                                push rbx	      2770	multi.c	FUNCTION_44
0x40039ec	        0x4883ec08	                              sub rsp, 8	      2770	multi.c	FUNCTION_44
0x40039f0	          0x4989f0	                             mov r8, rsi	      2770	multi.c	FUNCTION_44
0x40039f3	          0x4889fb	                            mov rbx, rdi	      2770	multi.c	FUNCTION_44
0x40039f6	      0xb900000000	                              mov ecx, 0	      2774	multi.c	FUNCTION_44	CALL_1
0x40039fb	      0xbaffffffff	                     mov edx, 0xffffffff	      2774	multi.c	FUNCTION_44	CALL_1
0x4003a00	      0xbe01000000	                              mov esi, 1	      2774	multi.c	FUNCTION_44	CALL_1
0x4003a05	      0xe8dbfcffff	                   call sym.multi_socket	      2774	multi.c	FUNCTION_44	CALL_1
0x4003a0a	            0x89c5	                            mov ebp, eax	      2774	multi.c	FUNCTION_44	CALL_1
0x4003a0c	            0x85c0	                           test eax, eax	      2775	multi.c	FUNCTION_44	IF_2
0x4003a0e	            0x7f0a	                            jg 0x4003a1a	      2775	multi.c	FUNCTION_44	IF_2
0x4003a10	          0x4889df	                            mov rdi, rbx	      2776	multi.c	FUNCTION_44	CALL_2
0x4003a13	      0xe832c7ffff	                   call sym.update_timer	      2776	multi.c	FUNCTION_44	CALL_2
0x4003a18	            0x89e8	                            mov eax, ebp	      2777	multi.c	FUNCTION_44
0x4003a1a	        0x4883c408	                              add rsp, 8	      2778	multi.c	FUNCTION_44
0x4003a1e	              0x5b	                                 pop rbx	      2778	multi.c	FUNCTION_44
0x4003a1f	              0x5d	                                 pop rbp	      2778	multi.c	FUNCTION_44
0x4003a20	            0xf3c3	                                     ret	      2778	multi.c	FUNCTION_44
Curl_multi_pipelining_server_bl	ELSE,0:SWITCH,0:FOR,0:WHILE,0:CALL,0:DO,0:functions,0:IF,0	2
0x4003aad	    0x488d87a00100	                  lea rax, [rdi + 0x1a0]	      3101	multi.c	FUNCTION_59
0x4003ab4	              0xc3	                                     ret	      3102	multi.c	FUNCTION_59
Curl_multi_add_perform	ELSE,0:SWITCH,0:FOR,0:WHILE,0:CALL,2:DO,0:functions,0:IF,2	25
0x4001947	      0xb808000000	                              mov eax, 8	      1150	multi.c	FUNCTION_27	IF_1
0x400194c	    0x80bfe0010000	               cmp byte [rdi + 0x1e0], 0	      1149	multi.c	FUNCTION_27	IF_1
0x4001953	            0x7542	                           jne 0x4001997	      1149	multi.c	FUNCTION_27	IF_1
0x4001955	            0x4154	                                push r12	      1146	multi.c	FUNCTION_27
0x4001957	              0x55	                                push rbp	      1146	multi.c	FUNCTION_27
0x4001958	              0x53	                                push rbx	      1146	multi.c	FUNCTION_27
0x4001959	          0x4889d5	                            mov rbp, rdx	      1146	multi.c	FUNCTION_27
0x400195c	          0x4889f3	                            mov rbx, rsi	      1146	multi.c	FUNCTION_27
0x400195f	      0xe800000000	                          call 0x4001964	      1152	multi.c	FUNCTION_27	CALL_1
0x4001964	          0x4189c4	                           mov r12d, eax	      1152	multi.c	FUNCTION_27	CALL_1
0x4001967	            0x85c0	                           test eax, eax	      1153	multi.c	FUNCTION_27	IF_2
0x4001969	            0x7528	                           jne 0x4001993	      1153	multi.c	FUNCTION_27	IF_2
0x400196b	      0xbe00000000	                              mov esi, 0	      1158	multi.c	FUNCTION_27	IF_2	CALL_2
0x4001970	          0x4889df	                            mov rdi, rbx	      1158	multi.c	FUNCTION_27	IF_2	CALL_2
0x4001973	      0xe800000000	                          call 0x4001978	      1158	multi.c	FUNCTION_27	IF_2	CALL_2
0x4001978	      0xbe0e000000	                            mov esi, 0xe	      1161	multi.c	FUNCTION_27	IF_2
0x400197d	          0x4889df	                            mov rdi, rbx	      1161	multi.c	FUNCTION_27	IF_2
0x4001980	      0xe8bbe6ffff	                         call sym.mstate	      1161	multi.c	FUNCTION_27	IF_2
0x4001985	        0x48896b10	             mov qword [rbx + 0x10], rbp	      1162	multi.c	FUNCTION_27	IF_2
0x4001989	    0x838bb4010000	               or dword [rbx + 0x1b4], 1	      1163	multi.c	FUNCTION_27	IF_2
0x4001990	          0x4489e0	                           mov eax, r12d	      1165	multi.c	FUNCTION_27
0x4001993	              0x5b	                                 pop rbx	      1166	multi.c	FUNCTION_27
0x4001994	              0x5d	                                 pop rbp	      1166	multi.c	FUNCTION_27
0x4001995	            0x415c	                                 pop r12	      1166	multi.c	FUNCTION_27
0x4001997	            0xf3c3	                                     ret	      1166	multi.c	FUNCTION_27
process_pending_handles	ELSE,0:SWITCH,0:FOR,0:WHILE,0:CALL,3:DO,0:functions,0:IF,1	23
0x4001999	            0x4154	                                push r12	      3105	multi.c	FUNCTION_60
0x400199b	              0x55	                                push rbp	      3105	multi.c	FUNCTION_60
0x400199c	              0x53	                                push rbx	      3105	multi.c	FUNCTION_60
0x400199d	        0x488b6f40	            mov rbp, qword [rdi + 0x40] 	      3106	multi.c	FUNCTION_60
0x40019a1	          0x4885ed	                           test rbp, rbp	      3107	multi.c	FUNCTION_60	IF_1
0x40019a4	            0x7437	                            je 0x40019dd	      3107	multi.c	FUNCTION_60	IF_1
0x40019a6	          0x4889fb	                            mov rbx, rdi	      3107	multi.c	FUNCTION_60	IF_1
0x40019a9	        0x4c8b6500	                    mov r12, qword [rbp]	      3108	multi.c	FUNCTION_60	IF_1
0x40019ad	      0xbe02000000	                              mov esi, 2	      3112	multi.c	FUNCTION_60	IF_1
0x40019b2	          0x4c89e7	                            mov rdi, r12	      3112	multi.c	FUNCTION_60	IF_1
0x40019b5	      0xe886e6ffff	                         call sym.mstate	      3112	multi.c	FUNCTION_60	IF_1
0x40019ba	        0x488d7b40	                   lea rdi, [rbx + 0x40]	      3115	multi.c	FUNCTION_60	IF_1	CALL_2
0x40019be	      0xba00000000	                              mov edx, 0	      3115	multi.c	FUNCTION_60	IF_1	CALL_2
0x40019c3	          0x4889ee	                            mov rsi, rbp	      3115	multi.c	FUNCTION_60	IF_1	CALL_2
0x40019c6	      0xe800000000	                          call 0x40019cb	      3115	multi.c	FUNCTION_60	IF_1	CALL_2
0x40019cb	      0xba06000000	                              mov edx, 6	      3118	multi.c	FUNCTION_60	IF_1	CALL_3
0x40019d0	      0xbe00000000	                              mov esi, 0	      3118	multi.c	FUNCTION_60	IF_1	CALL_3
0x40019d5	          0x4c89e7	                            mov rdi, r12	      3118	multi.c	FUNCTION_60	IF_1	CALL_3
0x40019d8	      0xe800000000	                          call 0x40019dd	      3118	multi.c	FUNCTION_60	IF_1	CALL_3
0x40019dd	              0x5b	                                 pop rbx	      3120	multi.c	FUNCTION_60
0x40019de	              0x5d	                                 pop rbp	      3120	multi.c	FUNCTION_60
0x40019df	            0x415c	                                 pop r12	      3120	multi.c	FUNCTION_60
0x40019e1	              0xc3	                                     ret	      3120	multi.c	FUNCTION_60
curl_multi_cleanup	ELSE,0:SWITCH,0:FOR,0:WHILE,1:CALL,12:DO,0:functions,0:IF,5	69
0x4001c8c	          0x4885ff	                           test rdi, rdi	      2212	multi.c	FUNCTION_34	IF_1
0x4001c8f	     0xf8433010000	                            je 0x4001dc8	      2212	multi.c	FUNCTION_34	IF_1
0x4001c95	      0xb801000000	                              mov eax, 1	      2263	multi.c	FUNCTION_34
0x4001c9a	    0x48813f1eab0b	                cmp qword [rdi], 0xbab1e	      2212	multi.c	FUNCTION_34	IF_1
0x4001ca1	     0xf852b010000	                           jne 0x4001dd2	      2212	multi.c	FUNCTION_34	IF_1
0x4001ca7	      0xb808000000	                              mov eax, 8	      2214	multi.c	FUNCTION_34	IF_1	IF_2
0x4001cac	    0x80bfe0010000	               cmp byte [rdi + 0x1e0], 0	      2213	multi.c	FUNCTION_34	IF_1	IF_2
0x4001cb3	     0xf8519010000	                           jne 0x4001dd2	      2213	multi.c	FUNCTION_34	IF_1	IF_2
0x4001cb9	            0x4154	                                push r12	      2208	multi.c	FUNCTION_34
0x4001cbb	              0x55	                                push rbp	      2208	multi.c	FUNCTION_34
0x4001cbc	              0x53	                                push rbx	      2208	multi.c	FUNCTION_34
0x4001cbd	          0x4989fc	                            mov r12, rdi	      2208	multi.c	FUNCTION_34
0x4001cc0	    0x48c707000000	                      mov qword [rdi], 0	      2216	multi.c	FUNCTION_34	IF_1
0x4001cc7	        0x488b5f08	                mov rbx, qword [rdi + 8]	      2219	multi.c	FUNCTION_34	IF_1
0x4001ccb	          0x4885db	                           test rbx, rbx	      2220	multi.c	FUNCTION_34	IF_1	WHILE_1
0x4001cce	            0x7471	                            je 0x4001d41	      2220	multi.c	FUNCTION_34	IF_1	WHILE_1
0x4001cd0	          0x488b2b	                    mov rbp, qword [rbx]	      2221	multi.c	FUNCTION_34	IF_1	WHILE_1
0x4001cd3	    0x80bb60510000	              cmp byte [rbx + 0x5160], 0	      2222	multi.c	FUNCTION_34	IF_1	WHILE_1	IF_3
0x4001cda	            0x751a	                           jne 0x4001cf6	      2222	multi.c	FUNCTION_34	IF_1	WHILE_1	IF_3
0x4001cdc	      0x48837b1000	               cmp qword [rbx + 0x10], 0	      2222	multi.c	FUNCTION_34	IF_1	WHILE_1	IF_3
0x4001ce1	            0x7413	                            je 0x4001cf6	      2222	multi.c	FUNCTION_34	IF_1	WHILE_1	IF_3
0x4001ce3	        0x488d7b10	                   lea rdi, [rbx + 0x10]	      2224	multi.c	FUNCTION_34	IF_1	WHILE_1	CALL_1
0x4001ce7	      0xba01000000	                              mov edx, 1	      2224	multi.c	FUNCTION_34	IF_1	WHILE_1	CALL_1
0x4001cec	      0xbe00000000	                              mov esi, 0	      2224	multi.c	FUNCTION_34	IF_1	WHILE_1	CALL_1
0x4001cf1	      0xe8ecfcffff	                     call sym.multi_done	      2224	multi.c	FUNCTION_34	IF_1	WHILE_1	CALL_1
0x4001cf6	    0x83bba0000000	               cmp dword [rbx + 0xa0], 2	      2225	multi.c	FUNCTION_34	IF_1	WHILE_1	IF_4
0x4001cfd	            0x7524	                           jne 0x4001d23	      2225	multi.c	FUNCTION_34	IF_1	WHILE_1	IF_4
0x4001cff	    0x488bb3980000	            mov rsi, qword [rbx + 0x98] 	      2227	multi.c	FUNCTION_34	IF_1	WHILE_1	IF_4	CALL_2
0x4001d06	          0x4889df	                            mov rdi, rbx	      2227	multi.c	FUNCTION_34	IF_1	WHILE_1	IF_4	CALL_2
0x4001d09	      0xe800000000	                          call 0x4001d0e	      2227	multi.c	FUNCTION_34	IF_1	WHILE_1	IF_4	CALL_2
0x4001d0e	    0x48c783980000	               mov qword [rbx + 0x98], 0	      2228	multi.c	FUNCTION_34	IF_1	WHILE_1	IF_4
0x4001d19	    0xc783a0000000	               mov dword [rbx + 0xa0], 0	      2229	multi.c	FUNCTION_34	IF_1	WHILE_1	IF_4
0x4001d23	    0x48c783e80c00	              mov qword [rbx + 0xce8], 0	      2233	multi.c	FUNCTION_34	IF_1	WHILE_1
0x4001d2e	    0x48c783a80000	               mov qword [rbx + 0xa8], 0	      2234	multi.c	FUNCTION_34	IF_1	WHILE_1
0x4001d39	          0x4889eb	                            mov rbx, rbp	      2241	multi.c	FUNCTION_34	IF_1	WHILE_1
0x4001d3c	          0x4885ed	                           test rbp, rbp	      2220	multi.c	FUNCTION_34	IF_1	WHILE_1
0x4001d3f	            0x758f	                           jne 0x4001cd0	      2220	multi.c	FUNCTION_34	IF_1	WHILE_1
0x4001d41	    0x498d9c24f800	                   lea rbx, [r12 + 0xf8]	      2245	multi.c	FUNCTION_34	IF_1	CALL_3
0x4001d49	          0x4889df	                            mov rdi, rbx	      2245	multi.c	FUNCTION_34	IF_1	CALL_3
0x4001d4c	      0xe800000000	                          call 0x4001d51	      2245	multi.c	FUNCTION_34	IF_1	CALL_3
0x4001d51	    0x498dbc24b800	                   lea rdi, [r12 + 0xb8]	      2247	multi.c	FUNCTION_34	IF_1	CALL_4
0x4001d59	      0xe800000000	                          call 0x4001d5e	      2247	multi.c	FUNCTION_34	IF_1	CALL_4
0x4001d5e	          0x4889df	                            mov rdi, rbx	      2248	multi.c	FUNCTION_34	IF_1	CALL_5
0x4001d61	      0xe800000000	                          call 0x4001d66	      2248	multi.c	FUNCTION_34	IF_1	CALL_5
0x4001d66	      0x498d7c2420	                   lea rdi, [r12 + 0x20]	      2249	multi.c	FUNCTION_34	IF_1	CALL_6
0x4001d6b	      0xbe00000000	                              mov esi, 0	      2249	multi.c	FUNCTION_34	IF_1	CALL_6
0x4001d70	      0xe800000000	                          call 0x4001d75	      2249	multi.c	FUNCTION_34	IF_1	CALL_6
0x4001d75	      0x498d7c2440	                   lea rdi, [r12 + 0x40]	      2250	multi.c	FUNCTION_34	IF_1	CALL_7
0x4001d7a	      0xbe00000000	                              mov esi, 0	      2250	multi.c	FUNCTION_34	IF_1	CALL_7
0x4001d7f	      0xe800000000	                          call 0x4001d84	      2250	multi.c	FUNCTION_34	IF_1	CALL_7
0x4001d84	    0x498dbc248000	                   lea rdi, [r12 + 0x80]	      2252	multi.c	FUNCTION_34	IF_1	CALL_8
0x4001d8c	      0xe800000000	                          call 0x4001d91	      2252	multi.c	FUNCTION_34	IF_1	CALL_8
0x4001d91	    0x498db4248001	                  lea rsi, [r12 + 0x180]	      2256	multi.c	FUNCTION_34	IF_1	CALL_10
0x4001d99	      0xbf00000000	                              mov edi, 0	      2256	multi.c	FUNCTION_34	IF_1	CALL_10
0x4001d9e	      0xe800000000	                          call 0x4001da3	      2256	multi.c	FUNCTION_34	IF_1	CALL_10
0x4001da3	    0x498db424a001	                  lea rsi, [r12 + 0x1a0]	      2257	multi.c	FUNCTION_34	IF_1	CALL_11
0x4001dab	      0xbf00000000	                              mov edi, 0	      2257	multi.c	FUNCTION_34	IF_1	CALL_11
0x4001db0	      0xe800000000	                          call 0x4001db5	      2257	multi.c	FUNCTION_34	IF_1	CALL_11
0x4001db5	          0x4c89e7	                            mov rdi, r12	      2259	multi.c	FUNCTION_34	IF_1	CALL_12
0x4001db8	    0x488b05000000	            mov rax, qword [0x04001dbf] 	      2259	multi.c	FUNCTION_34	IF_1	CALL_12
0x4001dbf	            0xff10	                        call qword [rax]	      2259	multi.c	FUNCTION_34	IF_1	CALL_12
0x4001dc1	      0xb800000000	                              mov eax, 0	      2261	multi.c	FUNCTION_34	IF_1
0x4001dc6	            0xeb06	                           jmp 0x4001dce	      2261	multi.c	FUNCTION_34	IF_1
0x4001dc8	      0xb801000000	                              mov eax, 1	      2263	multi.c	FUNCTION_34
0x4001dcd	              0xc3	                                     ret	      2263	multi.c	FUNCTION_34
0x4001dce	              0x5b	                                 pop rbx	      2264	multi.c	FUNCTION_34
0x4001dcf	              0x5d	                                 pop rbp	      2264	multi.c	FUNCTION_34
0x4001dd0	            0x415c	                                 pop r12	      2264	multi.c	FUNCTION_34
0x4001dd2	            0xf3c3	                                     ret	      2264	multi.c	FUNCTION_34
Curl_multi_connchanged	ELSE,0:SWITCH,0:FOR,0:WHILE,0:CALL,0:DO,0:functions,0:IF,0	2
0x4001019	    0xc687f0000000	                mov byte [rdi + 0xf0], 1	      1124	multi.c	FUNCTION_25
0x4001020	              0xc3	                                     ret	      1124	multi.c	FUNCTION_25
multi_freeamsg	ELSE,0:SWITCH,0:FOR,0:WHILE,0:CALL,0:DO,0:functions,0:IF,0	1
0x40000a5	            0xf3c3	                                     ret	       304	multi.c	FUNCTION_10
multi_getsock	ELSE,0:SWITCH,1:FOR,0:WHILE,0:CALL,7:DO,0:functions,0:IF,2	105
0x400027d	        0x4883ec08	                              sub rsp, 8	       848	multi.c	FUNCTION_22
0x4000281	      0xb800000000	                              mov eax, 0	       855	multi.c	FUNCTION_22	IF_1
0x4000286	    0x80bf01510000	              cmp byte [rdi + 0x5101], 0	       854	multi.c	FUNCTION_22	IF_1
0x400028d	     0xf8578010000	                           jne 0x400040b	       854	multi.c	FUNCTION_22	IF_1
0x4000293	        0x488b4f10	            mov rcx, qword [rdi + 0x10] 	       854	multi.c	FUNCTION_22	IF_1
0x4000297	          0x4885c9	                           test rcx, rcx	       854	multi.c	FUNCTION_22	IF_1
0x400029a	     0xf842c010000	                            je 0x40003cc	       854	multi.c	FUNCTION_22	IF_1
0x40002a0	          0x8b4748	            mov eax, dword [rdi + 0x48] 	       857	multi.c	FUNCTION_22	IF_2
0x40002a3	          0x83e803	                              sub eax, 3	       857	multi.c	FUNCTION_22	IF_2
0x40002a6	          0x83f80d	                            cmp eax, 0xd	       857	multi.c	FUNCTION_22	IF_2
0x40002a9	     0xf873f010000	                            ja 0x40003ee	       857	multi.c	FUNCTION_22	IF_2
0x40002af	          0x488939	                    mov qword [rcx], rdi	       860	multi.c	FUNCTION_22	IF_2
0x40002b2	          0x8b4748	            mov eax, dword [rdi + 0x48] 	       863	multi.c	FUNCTION_22	SWITCH_1
0x40002b5	          0x83e803	                              sub eax, 3	       863	multi.c	FUNCTION_22	SWITCH_1
0x40002b8	          0x83f80b	                            cmp eax, 0xb	       863	multi.c	FUNCTION_22	SWITCH_1
0x40002bb	     0xf8712010000	                            ja 0x40003d3	       863	multi.c	FUNCTION_22	SWITCH_1
0x40002c1	            0x89c0	                            mov eax, eax	       863	multi.c	FUNCTION_22	SWITCH_1
0x40002c3	    0x488d0d000000	                   lea rcx, [0x040002ca]	       863	multi.c	FUNCTION_22	SWITCH_1
0x40002ca	        0x48630481	         movsxd rax, dword [rcx + rax*4]	       863	multi.c	FUNCTION_22	SWITCH_1
0x40002ce	          0x4801c1	                            add rcx, rax	       863	multi.c	FUNCTION_22	SWITCH_1
0x40002d1	            0xffe1	                                 jmp rcx	       863	multi.c	FUNCTION_22	SWITCH_1
0x40002d3	        0x488b7f10	            mov rdi, qword [rdi + 0x10] 	       881	multi.c	FUNCTION_22	SWITCH_1	CALL_1
0x40002d7	      0xe800000000	                          call 0x40002dc	       881	multi.c	FUNCTION_22	SWITCH_1	CALL_1
0x40002dc	      0xe92a010000	                           jmp 0x400040b	       881	multi.c	FUNCTION_22	SWITCH_1	CALL_1
0x40002e1	        0x488b7f10	            mov rdi, qword [rdi + 0x10] 	       885	multi.c	FUNCTION_22	SWITCH_1	CALL_2
0x40002e5	      0xe800000000	                          call 0x40002ea	       885	multi.c	FUNCTION_22	SWITCH_1	CALL_2
0x40002ea	      0xe91c010000	                           jmp 0x400040b	       885	multi.c	FUNCTION_22	SWITCH_1	CALL_2
0x40002ef	        0x488b7f10	            mov rdi, qword [rdi + 0x10] 	       889	multi.c	FUNCTION_22	SWITCH_1	CALL_3
0x40002f3	      0xe800000000	                          call 0x40002f8	       889	multi.c	FUNCTION_22	SWITCH_1	CALL_3
0x40002f8	      0xe90e010000	                           jmp 0x400040b	       889	multi.c	FUNCTION_22	SWITCH_1	CALL_3
0x40002fd	      0xb800000000	                              mov eax, 0	       822	multi.c	FUNCTION_20	IF_1
0x4000302	            0x85d2	                           test edx, edx	       821	multi.c	FUNCTION_20	IF_1
0x4000304	     0xf8401010000	                            je 0x400040b	       821	multi.c	FUNCTION_20	IF_1
0x400030a	        0x488b4710	            mov rax, qword [rdi + 0x10] 	       892	multi.c	FUNCTION_22	SWITCH_1	CALL_4
0x400030e	    0x8b9058020000	           mov edx, dword [rax + 0x258] 	       824	multi.c	FUNCTION_20
0x4000314	            0x8916	                    mov dword [rsi], edx	       824	multi.c	FUNCTION_20
0x4000316	    0x4883b8580700	              cmp qword [rax + 0x758], 1	       831	multi.c	FUNCTION_20	CALL_2
0x400031e	            0x19c0	                            sbb eax, eax	       831	multi.c	FUNCTION_20	CALL_2
0x4000320	           0xfb7c0	                           movzx eax, ax	       831	multi.c	FUNCTION_20	CALL_2
0x4000323	          0x83c001	                              add eax, 1	       831	multi.c	FUNCTION_20	CALL_2
0x4000326	      0xe9e0000000	                           jmp 0x400040b	       831	multi.c	FUNCTION_20	CALL_2
0x400032b	      0xb800000000	                              mov eax, 0	       800	multi.c	FUNCTION_19	IF_1
0x4000330	            0x85d2	                           test edx, edx	       799	multi.c	FUNCTION_19	IF_1
0x4000332	     0xf84d3000000	                            je 0x400040b	       799	multi.c	FUNCTION_19	IF_1
0x4000338	        0x488b7f10	            mov rdi, qword [rdi + 0x10] 	       895	multi.c	FUNCTION_22	SWITCH_1	CALL_5
0x400033c	    0x83bf78010000	              cmp dword [rdi + 0x178], 2	       803	multi.c	FUNCTION_19	IF_2	CALL_1
0x4000343	            0x7509	                           jne 0x400034e	       803	multi.c	FUNCTION_19	IF_2	CALL_1
0x4000345	    0x80bfb9030000	               cmp byte [rdi + 0x3b9], 0	       803	multi.c	FUNCTION_19	IF_2	CALL_1
0x400034c	            0x7433	                            je 0x4000381	       803	multi.c	FUNCTION_19	IF_2	CALL_1
0x400034e	    0x8b8760020000	           mov eax, dword [rdi + 0x260] 	       808	multi.c	FUNCTION_19	FOR_1	IF_3
0x4000354	          0x83f8ff	             cmp eax, 0xffffffffffffffff	       808	multi.c	FUNCTION_19	FOR_1	IF_3
0x4000357	            0x740e	                            je 0x4000367	       808	multi.c	FUNCTION_19	FOR_1	IF_3
0x4000359	            0x8906	                    mov dword [rsi], eax	       809	multi.c	FUNCTION_19	FOR_1	IF_3
0x400035b	      0xb800000100	                        mov eax, 0x10000	       810	multi.c	FUNCTION_19	FOR_1	IF_3	CALL_3
0x4000360	      0xb901000000	                              mov ecx, 1	       810	multi.c	FUNCTION_19	FOR_1	IF_3	CALL_3
0x4000365	            0xeb0a	                           jmp 0x4000371	       810	multi.c	FUNCTION_19	FOR_1	IF_3	CALL_3
0x4000367	      0xb800000000	                              mov eax, 0	       808	multi.c	FUNCTION_19	FOR_1	IF_3
0x400036c	      0xb900000000	                              mov ecx, 0	       808	multi.c	FUNCTION_19	FOR_1	IF_3
0x4000371	    0x8b9764020000	           mov edx, dword [rdi + 0x264] 	       808	multi.c	FUNCTION_19	FOR_1	IF_3
0x4000377	          0x83faff	             cmp edx, 0xffffffffffffffff	       808	multi.c	FUNCTION_19	FOR_1	IF_3
0x400037a	            0x750f	                           jne 0x400038b	       808	multi.c	FUNCTION_19	FOR_1	IF_3
0x400037c	      0xe98a000000	                           jmp 0x400040b	       808	multi.c	FUNCTION_19	FOR_1	IF_3
0x4000381	      0xe800000000	                          call 0x4000386	       804	multi.c	FUNCTION_19	CALL_2
0x4000386	      0xe980000000	                           jmp 0x400040b	       804	multi.c	FUNCTION_19	CALL_2
0x400038b	          0x4863f9	                         movsxd rdi, ecx	       809	multi.c	FUNCTION_19	FOR_1	IF_3
0x400038e	          0x8914be	            mov dword [rsi + rdi*4], edx	       809	multi.c	FUNCTION_19	FOR_1	IF_3
0x4000391	          0x83c110	                           add ecx, 0x10	       810	multi.c	FUNCTION_19	FOR_1	IF_3	CALL_3
0x4000394	      0xba01000000	                              mov edx, 1	       810	multi.c	FUNCTION_19	FOR_1	IF_3	CALL_3
0x4000399	            0xd3e2	                             shl edx, cl	       810	multi.c	FUNCTION_19	FOR_1	IF_3	CALL_3
0x400039b	             0x9d0	                             or eax, edx	       810	multi.c	FUNCTION_19	FOR_1	IF_3	CALL_3
0x400039d	            0xeb6c	                           jmp 0x400040b	       810	multi.c	FUNCTION_19	FOR_1	IF_3	CALL_3
0x400039f	        0x488b7f10	            mov rdi, qword [rdi + 0x10] 	       898	multi.c	FUNCTION_22	SWITCH_1	CALL_6
0x40003a3	          0x4885ff	                           test rdi, rdi	       838	multi.c	FUNCTION_21	IF_1
0x40003a6	            0x7432	                            je 0x40003da	       838	multi.c	FUNCTION_21	IF_1
0x40003a8	    0x488b87e00300	           mov rax, qword [rdi + 0x3e0] 	       838	multi.c	FUNCTION_21	IF_1
0x40003af	        0x488b4850	            mov rcx, qword [rax + 0x50] 	       838	multi.c	FUNCTION_21	IF_1
0x40003b3	      0xb800000000	                              mov eax, 0	       840	multi.c	FUNCTION_21
0x40003b8	          0x4885c9	                           test rcx, rcx	       838	multi.c	FUNCTION_21	IF_1
0x40003bb	            0x744e	                            je 0x400040b	       838	multi.c	FUNCTION_21	IF_1
0x40003bd	            0xffd1	                                call rcx	       839	multi.c	FUNCTION_21	CALL_1
0x40003bf	            0xeb4a	                           jmp 0x400040b	       839	multi.c	FUNCTION_21	CALL_1
0x40003c1	        0x488b7f10	            mov rdi, qword [rdi + 0x10] 	       905	multi.c	FUNCTION_22	SWITCH_1	CALL_7
0x40003c5	      0xe800000000	                          call 0x40003ca	       905	multi.c	FUNCTION_22	SWITCH_1	CALL_7
0x40003ca	            0xeb3f	                           jmp 0x400040b	       905	multi.c	FUNCTION_22	SWITCH_1	CALL_7
0x40003cc	      0xb800000000	                              mov eax, 0	       855	multi.c	FUNCTION_22	IF_1
0x40003d1	            0xeb38	                           jmp 0x400040b	       855	multi.c	FUNCTION_22	IF_1
0x40003d3	      0xb800000000	                              mov eax, 0	       878	multi.c	FUNCTION_22	SWITCH_1
0x40003d8	            0xeb31	                           jmp 0x400040b	       878	multi.c	FUNCTION_22	SWITCH_1
0x40003da	      0xb800000000	                              mov eax, 0	       840	multi.c	FUNCTION_21
0x40003df	            0xeb2a	                           jmp 0x400040b	       840	multi.c	FUNCTION_21
0x40003e1	      0xb800000000	                              mov eax, 0	       878	multi.c	FUNCTION_22	SWITCH_1
0x40003e6	            0xeb23	                           jmp 0x400040b	       878	multi.c	FUNCTION_22	SWITCH_1
0x40003e8	        0x488b7f10	            mov rdi, qword [rdi + 0x10] 	       898	multi.c	FUNCTION_22	SWITCH_1	CALL_6
0x40003ec	            0xebba	                           jmp 0x40003a8	       898	multi.c	FUNCTION_22	SWITCH_1	CALL_6
0x40003ee	          0x8b4748	            mov eax, dword [rdi + 0x48] 	       863	multi.c	FUNCTION_22	SWITCH_1
0x40003f1	          0x83e803	                              sub eax, 3	       863	multi.c	FUNCTION_22	SWITCH_1
0x40003f4	          0x83f80b	                            cmp eax, 0xb	       863	multi.c	FUNCTION_22	SWITCH_1
0x40003f7	            0x77e8	                            ja 0x40003e1	       863	multi.c	FUNCTION_22	SWITCH_1
0x40003f9	            0x89c0	                            mov eax, eax	       863	multi.c	FUNCTION_22	SWITCH_1
0x40003fb	    0x488d0d000000	                   lea rcx, [0x04000402]	       863	multi.c	FUNCTION_22	SWITCH_1
0x4000402	        0x48630481	         movsxd rax, dword [rcx + rax*4]	       863	multi.c	FUNCTION_22	SWITCH_1
0x4000406	          0x4801c1	                            add rcx, rax	       863	multi.c	FUNCTION_22	SWITCH_1
0x4000409	            0xffe1	                                 jmp rcx	       863	multi.c	FUNCTION_22	SWITCH_1
0x400040b	        0x4883c408	                              add rsp, 8	       908	multi.c	FUNCTION_22
0x400040f	              0xc3	                                     ret	       908	multi.c	FUNCTION_22
curl_multi_assign	ELSE,0:SWITCH,0:FOR,0:WHILE,0:CALL,1:DO,0:functions,0:IF,2	15
0x4003a22	      0xb808000000	                              mov eax, 8	      3062	multi.c	FUNCTION_53	IF_1
0x4003a27	    0x80bfe0010000	               cmp byte [rdi + 0x1e0], 0	      3061	multi.c	FUNCTION_53	IF_1
0x4003a2e	            0x7527	                           jne 0x4003a57	      3061	multi.c	FUNCTION_53	IF_1
0x4003a30	              0x53	                                push rbx	      3058	multi.c	FUNCTION_53
0x4003a31	          0x4889d3	                            mov rbx, rdx	      3058	multi.c	FUNCTION_53
0x4003a34	    0x4881c7b80000	                           add rdi, 0xb8	      3064	multi.c	FUNCTION_53	CALL_1
0x4003a3b	      0xe8d0c9ffff	                    call sym.sh_getentry	      3064	multi.c	FUNCTION_53	CALL_1
0x4003a40	          0x4889c2	                            mov rdx, rax	      3064	multi.c	FUNCTION_53	CALL_1
0x4003a43	      0xb805000000	                              mov eax, 5	      3067	multi.c	FUNCTION_53	IF_2
0x4003a48	          0x4885d2	                           test rdx, rdx	      3066	multi.c	FUNCTION_53	IF_2
0x4003a4b	            0x7409	                            je 0x4003a56	      3066	multi.c	FUNCTION_53	IF_2
0x4003a4d	        0x48895a10	             mov qword [rdx + 0x10], rbx	      3069	multi.c	FUNCTION_53
0x4003a51	      0xb800000000	                              mov eax, 0	      3071	multi.c	FUNCTION_53
0x4003a56	              0x5b	                                 pop rbx	      3072	multi.c	FUNCTION_53
0x4003a57	            0xf3c3	                                     ret	      3072	multi.c	FUNCTION_53
update_timer	ELSE,0:SWITCH,0:FOR,0:WHILE,0:CALL,5:DO,0:functions,0:IF,5	51
0x400014a	              0x53	                                push rbx	      2837	multi.c	FUNCTION_47
0x400014b	        0x4883ec10	                           sub rsp, 0x10	      2837	multi.c	FUNCTION_47
0x400014f	    0x64488b042528	                mov rax, qword fs:[0x28]	      2837	multi.c	FUNCTION_47
0x4000158	      0x4889442408	                mov qword [rsp + 8], rax	      2837	multi.c	FUNCTION_47
0x400015d	            0x31c0	                            xor eax, eax	      2837	multi.c	FUNCTION_47
0x400015f	    0x4883bfc00100	              cmp qword [rdi + 0x1c0], 0	      2840	multi.c	FUNCTION_47	IF_1
0x4000167	     0xf84af000000	                            je 0x400021c	      2840	multi.c	FUNCTION_47	IF_1
0x400016d	          0x4889fb	                            mov rbx, rdi	      2840	multi.c	FUNCTION_47	IF_1
0x4000170	          0x4889e6	                            mov rsi, rsp	      2842	multi.c	FUNCTION_47	IF_2	CALL_1
0x4000173	      0xe82fffffff	                  call sym.multi_timeout	      2842	multi.c	FUNCTION_47	IF_2	CALL_1
0x4000178	            0x85c0	                           test eax, eax	      2842	multi.c	FUNCTION_47	IF_2	CALL_1
0x400017a	     0xf8597000000	                           jne 0x4000217	      2842	multi.c	FUNCTION_47	IF_2	CALL_1
0x4000180	        0x488b3424	                    mov rsi, qword [rsp]	      2845	multi.c	FUNCTION_47	IF_3
0x4000184	          0x4885f6	                           test rsi, rsi	      2845	multi.c	FUNCTION_47	IF_3
0x4000187	            0x7942	                           jns 0x40001cb	      2845	multi.c	FUNCTION_47	IF_3
0x4000189	    0x4883bbd00100	              cmp qword [rbx + 0x1d0], 0	      2847	multi.c	FUNCTION_47	IF_3	IF_4	CALL_2
0x4000191	            0x750a	                           jne 0x400019d	      2847	multi.c	FUNCTION_47	IF_3	IF_4	CALL_2
0x4000193	    0x8b83d8010000	           mov eax, dword [rbx + 0x1d8] 	      2847	multi.c	FUNCTION_47	IF_3	IF_4	CALL_2
0x4000199	            0x85c0	                           test eax, eax	      2847	multi.c	FUNCTION_47	IF_3	IF_4	CALL_2
0x400019b	            0x747f	                            je 0x400021c	      2847	multi.c	FUNCTION_47	IF_3	IF_4	CALL_2
0x400019d	    0x48c783d00100	              mov qword [rbx + 0x1d0], 0	      2848	multi.c	FUNCTION_47	IF_3	IF_4
0x40001a8	    0xc783d8010000	              mov dword [rbx + 0x1d8], 0	      2848	multi.c	FUNCTION_47	IF_3	IF_4
0x40001b2	    0x488b93c80100	           mov rdx, qword [rbx + 0x1c8] 	      2851	multi.c	FUNCTION_47	IF_3	IF_4	CALL_3
0x40001b9	    0x48c7c6ffffff	             mov rsi, 0xffffffffffffffff	      2851	multi.c	FUNCTION_47	IF_3	IF_4	CALL_3
0x40001c0	          0x4889df	                            mov rdi, rbx	      2851	multi.c	FUNCTION_47	IF_3	IF_4	CALL_3
0x40001c3	    0xff93c0010000	                call qword [rbx + 0x1c0]	      2851	multi.c	FUNCTION_47	IF_3	IF_4	CALL_3
0x40001c9	            0xeb51	                           jmp 0x400021c	      2851	multi.c	FUNCTION_47	IF_3	IF_4	CALL_3
0x40001cb	    0x488b93b00000	            mov rdx, qword [rbx + 0xb0] 	      2860	multi.c	FUNCTION_47	IF_5	CALL_4
0x40001d2	    0x488b83d00100	           mov rax, qword [rbx + 0x1d0] 	      2860	multi.c	FUNCTION_47	IF_5	CALL_4
0x40001d9	        0x48394220	            cmp qword [rdx + 0x20], rax 	      2860	multi.c	FUNCTION_47	IF_5	CALL_4
0x40001dd	            0x7510	                           jne 0x40001ef	      2860	multi.c	FUNCTION_47	IF_5	CALL_4
0x40001df	      0xb800000000	                              mov eax, 0	      2861	multi.c	FUNCTION_47	IF_5
0x40001e4	    0x8b8bd8010000	           mov ecx, dword [rbx + 0x1d8] 	      2860	multi.c	FUNCTION_47	IF_5	CALL_4
0x40001ea	          0x394a28	            cmp dword [rdx + 0x28], ecx 	      2860	multi.c	FUNCTION_47	IF_5	CALL_4
0x40001ed	            0x742d	                            je 0x400021c	      2860	multi.c	FUNCTION_47	IF_5	CALL_4
0x40001ef	        0x488b4220	            mov rax, qword [rdx + 0x20] 	      2863	multi.c	FUNCTION_47
0x40001f3	        0x488b5228	            mov rdx, qword [rdx + 0x28] 	      2863	multi.c	FUNCTION_47
0x40001f7	    0x488983d00100	            mov qword [rbx + 0x1d0], rax	      2863	multi.c	FUNCTION_47
0x40001fe	    0x488993d80100	            mov qword [rbx + 0x1d8], rdx	      2863	multi.c	FUNCTION_47
0x4000205	    0x488b93c80100	           mov rdx, qword [rbx + 0x1c8] 	      2865	multi.c	FUNCTION_47	CALL_5
0x400020c	          0x4889df	                            mov rdi, rbx	      2865	multi.c	FUNCTION_47	CALL_5
0x400020f	    0xff93c0010000	                call qword [rbx + 0x1c0]	      2865	multi.c	FUNCTION_47	CALL_5
0x4000215	            0xeb05	                           jmp 0x400021c	      2865	multi.c	FUNCTION_47	CALL_5
0x4000217	      0xb8ffffffff	                     mov eax, 0xffffffff	      2843	multi.c	FUNCTION_47	IF_2
0x400021c	      0x488b4c2408	                mov rcx, qword [rsp + 8]	      2866	multi.c	FUNCTION_47
0x4000221	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      2866	multi.c	FUNCTION_47
0x400022a	            0x7405	                            je 0x4000231	      2866	multi.c	FUNCTION_47
0x400022c	      0xe800000000	                          call 0x4000231	      2866	multi.c	FUNCTION_47
0x4000231	        0x4883c410	                           add rsp, 0x10	      2866	multi.c	FUNCTION_47
0x4000235	              0x5b	                                 pop rbx	      2866	multi.c	FUNCTION_47
0x4000236	              0xc3	                                     ret	      2866	multi.c	FUNCTION_47
sh_freeentry	ELSE,0:SWITCH,0:FOR,0:WHILE,0:CALL,1:DO,0:functions,0:IF,0	5
0x4000076	        0x4883ec08	                              sub rsp, 8	       239	multi.c	FUNCTION_5
0x400007a	    0x488b05000000	            mov rax, qword [0x04000081] 	       242	multi.c	FUNCTION_5	CALL_1
0x4000081	            0xff10	                        call qword [rax]	       242	multi.c	FUNCTION_5	CALL_1
0x4000083	        0x4883c408	                              add rsp, 8	       243	multi.c	FUNCTION_5
0x4000087	              0xc3	                                     ret	       243	multi.c	FUNCTION_5
singlesocket	ELSE,3:SWITCH,0:FOR,4:WHILE,0:CALL,14:DO,0:functions,0:IF,17	229
0x4000438	            0x4157	                                push r15	      2310	multi.c	FUNCTION_36
0x400043a	            0x4156	                                push r14	      2310	multi.c	FUNCTION_36
0x400043c	            0x4155	                                push r13	      2310	multi.c	FUNCTION_36
0x400043e	            0x4154	                                push r12	      2310	multi.c	FUNCTION_36
0x4000440	              0x55	                                push rbp	      2310	multi.c	FUNCTION_36
0x4000441	              0x53	                                push rbx	      2310	multi.c	FUNCTION_36
0x4000442	        0x4883ec68	                           sub rsp, 0x68	      2310	multi.c	FUNCTION_36
0x4000446	          0x4989ff	                            mov r15, rdi	      2310	multi.c	FUNCTION_36
0x4000449	          0x4989f4	                            mov r12, rsi	      2310	multi.c	FUNCTION_36
0x400044c	    0x64488b042528	                mov rax, qword fs:[0x28]	      2310	multi.c	FUNCTION_36
0x4000455	      0x4889442458	             mov qword [rsp + 0x58], rax	      2310	multi.c	FUNCTION_36
0x400045a	            0x31c0	                            xor eax, eax	      2310	multi.c	FUNCTION_36
0x400045c	    0xc7442440ffff	     mov dword [rsp + 0x40], 0xffffffff 	      2319	multi.c	FUNCTION_36	FOR_1
0x4000464	    0xc7442444ffff	     mov dword [rsp + 0x44], 0xffffffff 	      2319	multi.c	FUNCTION_36	FOR_1
0x400046c	    0xc7442448ffff	     mov dword [rsp + 0x48], 0xffffffff 	      2319	multi.c	FUNCTION_36	FOR_1
0x4000474	    0xc744244cffff	     mov dword [rsp + 0x4c], 0xffffffff 	      2319	multi.c	FUNCTION_36	FOR_1
0x400047c	    0xc7442450ffff	     mov dword [rsp + 0x50], 0xffffffff 	      2319	multi.c	FUNCTION_36	FOR_1
0x4000484	      0x488d742440	                   lea rsi, [rsp + 0x40]	      2323	multi.c	FUNCTION_36	CALL_1
0x4000489	      0xba05000000	                              mov edx, 5	      2323	multi.c	FUNCTION_36	CALL_1
0x400048e	          0x4c89e7	                            mov rdi, r12	      2323	multi.c	FUNCTION_36	CALL_1
0x4000491	      0xe8e7fdffff	                  call sym.multi_getsock	      2323	multi.c	FUNCTION_36	CALL_1
0x4000496	      0xa901000100	                       test eax, 0x10001	      2330	multi.c	FUNCTION_36	FOR_2
0x400049b	     0xf840b010000	                            je 0x40005ac	      2330	multi.c	FUNCTION_36	FOR_2
0x40004a1	          0x4189c6	                           mov r14d, eax	      2330	multi.c	FUNCTION_36	FOR_2
0x40004a4	      0xbd00000000	                              mov ebp, 0	      2330	multi.c	FUNCTION_36	FOR_2
0x40004a9	    0xc744240c0000	         mov dword [rsp + 0xc], 0x10000 	      2330	multi.c	FUNCTION_36	FOR_2
0x40004b1	      0xbb01000000	                              mov ebx, 1	      2330	multi.c	FUNCTION_36	FOR_2
0x40004b6	    0x498d87b80000	                   lea rax, [r15 + 0xb8]	      2338	multi.c	FUNCTION_36	FOR_2	CALL_4
0x40004bd	      0x4889442418	             mov qword [rsp + 0x18], rax	      2338	multi.c	FUNCTION_36	FOR_2	CALL_4
0x40004c2	      0x488d442438	                   lea rax, [rsp + 0x38]	       218	multi.c	FUNCTION_3	IF_3	CALL_3
0x40004c7	      0x4889442420	             mov qword [rsp + 0x20], rax	       218	multi.c	FUNCTION_3	IF_3	CALL_3
0x40004cc	        0x8b44ac40	    mov eax, dword [rsp + rbp*4 + 0x40] 	      2335	multi.c	FUNCTION_36	FOR_2
0x40004d0	        0x89442410	             mov dword [rsp + 0x10], eax	      2335	multi.c	FUNCTION_36	FOR_2
0x40004d4	            0x89c6	                            mov esi, eax	      2338	multi.c	FUNCTION_36	FOR_2	CALL_4
0x40004d6	      0x488b7c2418	            mov rdi, qword [rsp + 0x18] 	      2338	multi.c	FUNCTION_36	FOR_2	CALL_4
0x40004db	      0xe830ffffff	                    call sym.sh_getentry	      2338	multi.c	FUNCTION_36	FOR_2	CALL_4
0x40004e0	          0x4989c5	                            mov r13, rax	      2338	multi.c	FUNCTION_36	FOR_2	CALL_4
0x40004e3	          0x4485f3	                          test ebx, r14d	      2333	multi.c	FUNCTION_36	FOR_2
0x40004e6	           0xf95c3	                                setne bl	      2333	multi.c	FUNCTION_36	FOR_2
0x40004e9	           0xfb6db	                           movzx ebx, bl	      2333	multi.c	FUNCTION_36	FOR_2
0x40004ec	        0x8b54240c	              mov edx, dword [rsp + 0xc]	      2342	multi.c	FUNCTION_36	FOR_2	IF_2	CALL_6
0x40004f0	          0x4421f2	                           and edx, r14d	      2342	multi.c	FUNCTION_36	FOR_2	IF_2	CALL_6
0x40004f3	            0x89d8	                            mov eax, ebx	      2343	multi.c	FUNCTION_36	FOR_2	IF_2
0x40004f5	          0x83c802	                               or eax, 2	      2343	multi.c	FUNCTION_36	FOR_2	IF_2
0x40004f8	            0x85d2	                           test edx, edx	      2343	multi.c	FUNCTION_36	FOR_2	IF_2
0x40004fa	           0xf45d8	                         cmovne ebx, eax	      2343	multi.c	FUNCTION_36	FOR_2	IF_2
0x40004fd	          0x4d85ed	                           test r13, r13	      2345	multi.c	FUNCTION_36	FOR_2	IF_3
0x4000500	            0x740b	                            je 0x400050d	      2345	multi.c	FUNCTION_36	FOR_2	IF_3
0x4000502	        0x413b5d08	                cmp ebx, dword [r13 + 8]	      2347	multi.c	FUNCTION_36	FOR_2	IF_3	IF_4
0x4000506	            0x7578	                           jne 0x4000580	      2347	multi.c	FUNCTION_36	FOR_2	IF_3	IF_4
0x4000508	      0xe993000000	                           jmp 0x40005a0	      2347	multi.c	FUNCTION_36	FOR_2	IF_3	IF_4
0x400050d	        0x8b442410	            mov eax, dword [rsp + 0x10] 	      2347	multi.c	FUNCTION_36	FOR_2	IF_3	IF_4
0x4000511	        0x89442438	             mov dword [rsp + 0x38], eax	      2347	multi.c	FUNCTION_36	FOR_2	IF_3	IF_4
0x4000515	            0x89c6	                            mov esi, eax	       202	multi.c	FUNCTION_3	CALL_1
0x4000517	      0x488b7c2418	            mov rdi, qword [rsp + 0x18] 	       202	multi.c	FUNCTION_3	CALL_1
0x400051c	      0xe8effeffff	                    call sym.sh_getentry	       202	multi.c	FUNCTION_3	CALL_1
0x4000521	          0x4989c5	                            mov r13, rax	       202	multi.c	FUNCTION_3	CALL_1
0x4000524	          0x4885c0	                           test rax, rax	       205	multi.c	FUNCTION_3	IF_1
0x4000527	            0x7557	                           jne 0x4000580	       205	multi.c	FUNCTION_3	IF_1
0x4000529	      0xbe18000000	                           mov esi, 0x18	       210	multi.c	FUNCTION_3	CALL_2
0x400052e	      0xbf01000000	                              mov edi, 1	       210	multi.c	FUNCTION_3	CALL_2
0x4000533	    0x488b05000000	            mov rax, qword [0x0400053a] 	       210	multi.c	FUNCTION_3	CALL_2
0x400053a	            0xff10	                        call qword [rax]	       210	multi.c	FUNCTION_3	CALL_2
0x400053c	          0x4989c5	                            mov r13, rax	       210	multi.c	FUNCTION_3	CALL_2
0x400053f	          0x4885c0	                           test rax, rax	       211	multi.c	FUNCTION_3	IF_2
0x4000542	     0xf846d020000	                            je 0x40007b5	       211	multi.c	FUNCTION_3	IF_2
0x4000548	          0x4c8920	                    mov qword [rax], r12	       214	multi.c	FUNCTION_3
0x400054b	        0x8b442438	            mov eax, dword [rsp + 0x38] 	       215	multi.c	FUNCTION_3
0x400054f	        0x4189450c	              mov dword [r13 + 0xc], eax	       215	multi.c	FUNCTION_3
0x4000553	          0x4c89e9	                            mov rcx, r13	       218	multi.c	FUNCTION_3	IF_3	CALL_3
0x4000556	      0xba04000000	                              mov edx, 4	       218	multi.c	FUNCTION_3	IF_3	CALL_3
0x400055b	      0x488b742420	            mov rsi, qword [rsp + 0x20] 	       218	multi.c	FUNCTION_3	IF_3	CALL_3
0x4000560	      0x488b7c2418	            mov rdi, qword [rsp + 0x18] 	       218	multi.c	FUNCTION_3	IF_3	CALL_3
0x4000565	      0xe800000000	                          call 0x400056a	       218	multi.c	FUNCTION_3	IF_3	CALL_3
0x400056a	          0x4885c0	                           test rax, rax	       218	multi.c	FUNCTION_3	IF_3	CALL_3
0x400056d	            0x7511	                           jne 0x4000580	       218	multi.c	FUNCTION_3	IF_3	CALL_3
0x400056f	          0x4c89ef	                            mov rdi, r13	       219	multi.c	FUNCTION_3	IF_3	CALL_4
0x4000572	    0x488b05000000	            mov rax, qword [0x04000579] 	       219	multi.c	FUNCTION_3	IF_3	CALL_4
0x4000579	            0xff10	                        call qword [rax]	       219	multi.c	FUNCTION_3	IF_3	CALL_4
0x400057b	      0xe935020000	                           jmp 0x40007b5	       219	multi.c	FUNCTION_3	IF_3	CALL_4
0x4000580	        0x498b4760	            mov rax, qword [r15 + 0x60] 	      2360	multi.c	FUNCTION_36	FOR_2	IF_6
0x4000584	          0x4885c0	                           test rax, rax	      2360	multi.c	FUNCTION_36	FOR_2	IF_6
0x4000587	            0x7413	                            je 0x400059c	      2360	multi.c	FUNCTION_36	FOR_2	IF_6
0x4000589	        0x498b4f68	            mov rcx, qword [r15 + 0x68] 	      2361	multi.c	FUNCTION_36	FOR_2	IF_6	CALL_8
0x400058d	        0x4d8b4510	              mov r8, qword [r13 + 0x10]	      2361	multi.c	FUNCTION_36	FOR_2	IF_6	CALL_8
0x4000591	            0x89da	                            mov edx, ebx	      2361	multi.c	FUNCTION_36	FOR_2	IF_6	CALL_8
0x4000593	        0x8b742410	            mov esi, dword [rsp + 0x10] 	      2361	multi.c	FUNCTION_36	FOR_2	IF_6	CALL_8
0x4000597	          0x4c89e7	                            mov rdi, r12	      2361	multi.c	FUNCTION_36	FOR_2	IF_6	CALL_8
0x400059a	            0xffd0	                                call rax	      2361	multi.c	FUNCTION_36	FOR_2	IF_6	CALL_8
0x400059c	        0x41895d08	                mov dword [r13 + 8], ebx	      2367	multi.c	FUNCTION_36	FOR_2
0x40005a0	        0x448d6d01	                     lea r13d, [rbp + 1]	      2367	multi.c	FUNCTION_36	FOR_2
0x40005a4	        0x4883fd04	                              cmp rbp, 4	      2330	multi.c	FUNCTION_36	FOR_2
0x40005a8	            0x7518	                           jne 0x40005c2	      2330	multi.c	FUNCTION_36	FOR_2
0x40005aa	            0xeb06	                           jmp 0x40005b2	      2330	multi.c	FUNCTION_36	FOR_2
0x40005ac	    0x41bd00000000	                             mov r13d, 0	      2330	multi.c	FUNCTION_36	FOR_2
0x40005b2	    0x4183bc249400	               cmp dword [r12 + 0x94], 0	      2374	multi.c	FUNCTION_36	FOR_3
0x40005bb	            0x7f2e	                            jg 0x40005eb	      2374	multi.c	FUNCTION_36	FOR_3
0x40005bd	      0xe9ad010000	                           jmp 0x400076f	      2374	multi.c	FUNCTION_36	FOR_3
0x40005c2	      0xbb01000000	                              mov ebx, 1	      2331	multi.c	FUNCTION_36	FOR_2	CALL_3
0x40005c7	          0x4489e9	                           mov ecx, r13d	      2331	multi.c	FUNCTION_36	FOR_2	CALL_3
0x40005ca	            0xd3e3	                             shl ebx, cl	      2331	multi.c	FUNCTION_36	FOR_2	CALL_3
0x40005cc	          0x8d4d11	                   lea ecx, [rbp + 0x11]	      2331	multi.c	FUNCTION_36	FOR_2	CALL_3
0x40005cf	      0xb801000000	                              mov eax, 1	      2331	multi.c	FUNCTION_36	FOR_2	CALL_3
0x40005d4	            0xd3e0	                             shl eax, cl	      2331	multi.c	FUNCTION_36	FOR_2	CALL_3
0x40005d6	        0x8944240c	              mov dword [rsp + 0xc], eax	      2331	multi.c	FUNCTION_36	FOR_2	CALL_3
0x40005da	        0x4883c501	                              add rbp, 1	      2331	multi.c	FUNCTION_36	FOR_2	CALL_3
0x40005de	             0x9d8	                             or eax, ebx	      2330	multi.c	FUNCTION_36	FOR_2
0x40005e0	          0x4485f0	                          test eax, r14d	      2330	multi.c	FUNCTION_36	FOR_2
0x40005e3	     0xf85e3feffff	                           jne 0x40004cc	      2330	multi.c	FUNCTION_36	FOR_2
0x40005e9	            0xebc7	                           jmp 0x40005b2	      2330	multi.c	FUNCTION_36	FOR_2
0x40005eb	    0x498d84248000	                   lea rax, [r12 + 0x80]	      2330	multi.c	FUNCTION_36	FOR_2
0x40005f3	      0x4889442410	             mov qword [rsp + 0x10], rax	      2330	multi.c	FUNCTION_36	FOR_2
0x40005f8	        0x418d45ff	                      lea eax, [r13 - 1]	      2330	multi.c	FUNCTION_36	FOR_2
0x40005fc	      0x488d6c8440	          lea rbp, [rsp + rax*4 + 0x40] 	      2330	multi.c	FUNCTION_36	FOR_2
0x4000601	    0xc744240c0000	                mov dword [rsp + 0xc], 0	      2374	multi.c	FUNCTION_36	FOR_3
0x4000609	    0x498d87b80000	                   lea rax, [r15 + 0xb8]	      2385	multi.c	FUNCTION_36	FOR_3	CALL_9
0x4000610	      0x4889442418	             mov qword [rsp + 0x18], rax	      2385	multi.c	FUNCTION_36	FOR_3	CALL_9
0x4000615	      0x488d44243c	                   lea rax, [rsp + 0x3c]	       232	multi.c	FUNCTION_4	CALL_1
0x400061a	      0x4889442428	             mov qword [rsp + 0x28], rax	       232	multi.c	FUNCTION_4	CALL_1
0x400061f	      0x488b442410	            mov rax, qword [rsp + 0x10] 	      2376	multi.c	FUNCTION_36	FOR_3
0x4000624	            0x8b18	                    mov ebx, dword [rax]	      2376	multi.c	FUNCTION_36	FOR_3
0x4000626	          0x4585ed	                         test r13d, r13d	      2377	multi.c	FUNCTION_36	FOR_3	FOR_4
0x4000629	            0x7e28	                           jle 0x4000653	      2377	multi.c	FUNCTION_36	FOR_3	FOR_4
0x400062b	        0x3b5c2440	            cmp ebx, dword [rsp + 0x40] 	      2378	multi.c	FUNCTION_36	FOR_3	FOR_4	IF_7
0x400062f	            0x7416	                            je 0x4000647	      2378	multi.c	FUNCTION_36	FOR_3	FOR_4	IF_7
0x4000631	      0x488d442440	                   lea rax, [rsp + 0x40]	      2378	multi.c	FUNCTION_36	FOR_3	FOR_4	IF_7
0x4000636	            0xeb08	                           jmp 0x4000640	      2378	multi.c	FUNCTION_36	FOR_3	FOR_4	IF_7
0x4000638	        0x4883c004	                              add rax, 4	      2378	multi.c	FUNCTION_36	FOR_3	FOR_4	IF_7
0x400063c	            0x3b18	                    cmp ebx, dword [rax]	      2378	multi.c	FUNCTION_36	FOR_3	FOR_4	IF_7
0x400063e	            0x740e	                            je 0x400064e	      2378	multi.c	FUNCTION_36	FOR_3	FOR_4	IF_7
0x4000640	          0x4839c5	                            cmp rbp, rax	      2377	multi.c	FUNCTION_36	FOR_3	FOR_4
0x4000643	            0x75f3	                           jne 0x4000638	      2377	multi.c	FUNCTION_36	FOR_3	FOR_4
0x4000645	            0xeb0c	                           jmp 0x4000653	      2377	multi.c	FUNCTION_36	FOR_3	FOR_4
0x4000647	      0xbbffffffff	                     mov ebx, 0xffffffff	      2380	multi.c	FUNCTION_36	FOR_3	FOR_4	IF_7
0x400064c	            0xeb05	                           jmp 0x4000653	      2380	multi.c	FUNCTION_36	FOR_3	FOR_4	IF_7
0x400064e	      0xbbffffffff	                     mov ebx, 0xffffffff	      2380	multi.c	FUNCTION_36	FOR_3	FOR_4	IF_7
0x4000653	            0x89de	                            mov esi, ebx	      2385	multi.c	FUNCTION_36	FOR_3	CALL_9
0x4000655	      0x488b7c2418	            mov rdi, qword [rsp + 0x18] 	      2385	multi.c	FUNCTION_36	FOR_3	CALL_9
0x400065a	      0xe8b1fdffff	                    call sym.sh_getentry	      2385	multi.c	FUNCTION_36	FOR_3	CALL_9
0x400065f	      0x4889442420	             mov qword [rsp + 0x20], rax	      2385	multi.c	FUNCTION_36	FOR_3	CALL_9
0x4000664	          0x4885c0	                           test rax, rax	      2386	multi.c	FUNCTION_36	FOR_3	IF_8
0x4000667	     0xf84e5000000	                            je 0x4000752	      2386	multi.c	FUNCTION_36	FOR_3	IF_8
0x400066d	      0x4d8b742410	            mov r14, qword [r12 + 0x10] 	      2393	multi.c	FUNCTION_36	FOR_3	IF_8
0x4000672	          0x4d85f6	                           test r14, r14	      2394	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9
0x4000675	     0xf849d000000	                            je 0x4000718	      2394	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9
0x400067b	    0x4983be900400	              cmp qword [r14 + 0x490], 1	      2395	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9	IF_10
0x4000683	     0xf8609010000	                           jbe 0x4000792	      2395	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9	IF_10
0x4000689	          0x4c3b20	                    cmp r12, qword [rax]	      2402	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9	IF_10	IF_11
0x400068c	     0xf85c0000000	                           jne 0x4000752	      2402	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9	IF_10	IF_11
0x4000692	          0x4c89f6	                            mov rsi, r14	      2403	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9	IF_10	IF_11	IF_12	CALL_10
0x4000695	          0x4c89e7	                            mov rdi, r12	      2403	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9	IF_10	IF_11	IF_12	CALL_10
0x4000698	      0xe800000000	                          call 0x400069d	      2403	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9	IF_10	IF_11	IF_12	CALL_10
0x400069d	            0x84c0	                             test al, al	      2403	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9	IF_10	IF_11	IF_12	CALL_10
0x400069f	            0x741b	                            je 0x40006bc	      2403	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9	IF_10	IF_11	IF_12	CALL_10
0x40006a1	    0x498b86780400	           mov rax, qword [r14 + 0x478] 	      2404	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9	IF_10	IF_11	IF_12
0x40006a8	        0x488b4010	            mov rax, qword [rax + 0x10] 	      2404	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9	IF_10	IF_11	IF_12
0x40006ac	          0x488b00	                    mov rax, qword [rax]	      2404	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9	IF_10	IF_11	IF_12
0x40006af	      0x488b742420	            mov rsi, qword [rsp + 0x20] 	      2404	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9	IF_10	IF_11	IF_12
0x40006b4	          0x488906	                    mov qword [rsi], rax	      2404	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9	IF_10	IF_11	IF_12
0x40006b7	      0xe9e9000000	                           jmp 0x40007a5	      2404	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9	IF_10	IF_11	IF_12
0x40006bc	    0x498b86780400	           mov rax, qword [r14 + 0x478] 	      2406	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9	IF_10	IF_11	ELSE_2
0x40006c3	          0x488b00	                    mov rax, qword [rax]	      2406	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9	IF_10	IF_11	ELSE_2
0x40006c6	      0x488b742420	            mov rsi, qword [rsp + 0x20] 	      2406	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9	IF_10	IF_11	ELSE_2
0x40006cb	          0x488906	                    mov qword [rsi], rax	      2406	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9	IF_10	IF_11	ELSE_2
0x40006ce	      0xe9d2000000	                           jmp 0x40007a5	      2406	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9	IF_10	IF_11	ELSE_2
0x40006d3	      0x488b442420	            mov rax, qword [rsp + 0x20] 	      2416	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9	ELSE_2	IF_13	IF_14
0x40006d8	          0x4c3b20	                    cmp r12, qword [rax]	      2416	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9	ELSE_2	IF_13	IF_14
0x40006db	            0x7575	                           jne 0x4000752	      2416	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9	ELSE_2	IF_13	IF_14
0x40006dd	          0x4c89f6	                            mov rsi, r14	      2417	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9	ELSE_2	IF_13	IF_14	IF_15	CALL_11
0x40006e0	          0x4c89e7	                            mov rdi, r12	      2417	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9	ELSE_2	IF_13	IF_14	IF_15	CALL_11
0x40006e3	      0xe800000000	                          call 0x40006e8	      2417	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9	ELSE_2	IF_13	IF_14	IF_15	CALL_11
0x40006e8	            0x84c0	                             test al, al	      2417	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9	ELSE_2	IF_13	IF_14	IF_15	CALL_11
0x40006ea	            0x7418	                            je 0x4000704	      2417	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9	ELSE_2	IF_13	IF_14	IF_15	CALL_11
0x40006ec	    0x498b86580400	           mov rax, qword [r14 + 0x458] 	      2418	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9	ELSE_2	IF_13	IF_14	IF_15
0x40006f3	        0x488b4010	            mov rax, qword [rax + 0x10] 	      2418	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9	ELSE_2	IF_13	IF_14	IF_15
0x40006f7	          0x488b00	                    mov rax, qword [rax]	      2418	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9	ELSE_2	IF_13	IF_14	IF_15
0x40006fa	      0x488b742420	            mov rsi, qword [rsp + 0x20] 	      2418	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9	ELSE_2	IF_13	IF_14	IF_15
0x40006ff	          0x488906	                    mov qword [rsi], rax	      2418	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9	ELSE_2	IF_13	IF_14	IF_15
0x4000702	            0xeb4e	                           jmp 0x4000752	      2418	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9	ELSE_2	IF_13	IF_14	IF_15
0x4000704	    0x498b86580400	           mov rax, qword [r14 + 0x458] 	      2420	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9	ELSE_2	IF_13	IF_14	ELSE_3
0x400070b	          0x488b00	                    mov rax, qword [rax]	      2420	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9	ELSE_2	IF_13	IF_14	ELSE_3
0x400070e	      0x488b742420	            mov rsi, qword [rsp + 0x20] 	      2420	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9	ELSE_2	IF_13	IF_14	ELSE_3
0x4000713	          0x488906	                    mov qword [rsi], rax	      2420	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9	ELSE_2	IF_13	IF_14	ELSE_3
0x4000716	            0xeb3a	                           jmp 0x4000752	      2420	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9	ELSE_2	IF_13	IF_14	ELSE_3
0x4000718	        0x498b4760	            mov rax, qword [r15 + 0x60] 	      2431	multi.c	FUNCTION_36	FOR_3	IF_8	ELSE_3	IF_16	IF_17
0x400071c	          0x4885c0	                           test rax, rax	      2431	multi.c	FUNCTION_36	FOR_3	IF_8	ELSE_3	IF_16	IF_17
0x400071f	            0x7419	                            je 0x400073a	      2431	multi.c	FUNCTION_36	FOR_3	IF_8	ELSE_3	IF_16	IF_17
0x4000721	        0x498b4f68	            mov rcx, qword [r15 + 0x68] 	      2432	multi.c	FUNCTION_36	FOR_3	IF_8	ELSE_3	IF_16	IF_17	CALL_12
0x4000725	      0x488b7c2420	            mov rdi, qword [rsp + 0x20] 	      2432	multi.c	FUNCTION_36	FOR_3	IF_8	ELSE_3	IF_16	IF_17	CALL_12
0x400072a	        0x4c8b4710	              mov r8, qword [rdi + 0x10]	      2432	multi.c	FUNCTION_36	FOR_3	IF_8	ELSE_3	IF_16	IF_17	CALL_12
0x400072e	      0xba04000000	                              mov edx, 4	      2432	multi.c	FUNCTION_36	FOR_3	IF_8	ELSE_3	IF_16	IF_17	CALL_12
0x4000733	            0x89de	                            mov esi, ebx	      2432	multi.c	FUNCTION_36	FOR_3	IF_8	ELSE_3	IF_16	IF_17	CALL_12
0x4000735	          0x4c89e7	                            mov rdi, r12	      2432	multi.c	FUNCTION_36	FOR_3	IF_8	ELSE_3	IF_16	IF_17	CALL_12
0x4000738	            0xffd0	                                call rax	      2432	multi.c	FUNCTION_36	FOR_3	IF_8	ELSE_3	IF_16	IF_17	CALL_12
0x400073a	        0x895c243c	             mov dword [rsp + 0x3c], ebx	      2432	multi.c	FUNCTION_36	FOR_3	IF_8	ELSE_3	IF_16	IF_17	CALL_12
0x400073e	      0xba04000000	                              mov edx, 4	       232	multi.c	FUNCTION_4	CALL_1
0x4000743	      0x488b742428	            mov rsi, qword [rsp + 0x28] 	       232	multi.c	FUNCTION_4	CALL_1
0x4000748	      0x488b7c2418	            mov rdi, qword [rsp + 0x18] 	       232	multi.c	FUNCTION_4	CALL_1
0x400074d	      0xe800000000	                          call 0x4000752	       232	multi.c	FUNCTION_4	CALL_1
0x4000752	      0x8344240c01	                add dword [rsp + 0xc], 1	      2374	multi.c	FUNCTION_36	FOR_3
0x4000757	        0x8b44240c	              mov eax, dword [rsp + 0xc]	      2374	multi.c	FUNCTION_36	FOR_3
0x400075b	    0x488344241004	               add qword [rsp + 0x10], 4	      2374	multi.c	FUNCTION_36	FOR_3
0x4000761	    0x413984249400	            cmp dword [r12 + 0x94], eax 	      2374	multi.c	FUNCTION_36	FOR_3
0x4000769	     0xf8fb0feffff	                            jg 0x400061f	      2374	multi.c	FUNCTION_36	FOR_3
0x400076f	    0x498dbc248000	                   lea rdi, [r12 + 0x80]	        53	string3.h	FUNCTION_64	CALL_3
0x4000777	          0x4963d5	                        movsxd rdx, r13d	        53	string3.h	FUNCTION_64	CALL_3
0x400077a	        0x48c1e202	                              shl rdx, 2	        53	string3.h	FUNCTION_64	CALL_3
0x400077e	      0x488d742440	                   lea rsi, [rsp + 0x40]	        53	string3.h	FUNCTION_64	CALL_3
0x4000783	      0xe800000000	                          call 0x4000788	        53	string3.h	FUNCTION_64	CALL_3
0x4000788	    0x4589ac249400	            mov dword [r12 + 0x94], r13d	      2443	multi.c	FUNCTION_36
0x4000790	            0xeb23	                           jmp 0x40007b5	      2443	multi.c	FUNCTION_36
0x4000792	    0x4983be700400	              cmp qword [r14 + 0x470], 1	      2409	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9	ELSE_2	IF_13
0x400079a	     0xf8733ffffff	                            ja 0x40006d3	      2409	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9	ELSE_2	IF_13
0x40007a0	      0xe973ffffff	                           jmp 0x4000718	      2409	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9	ELSE_2	IF_13
0x40007a5	    0x4983be700400	              cmp qword [r14 + 0x470], 1	      2409	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9	ELSE_2	IF_13
0x40007ad	     0xf8720ffffff	                            ja 0x40006d3	      2409	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9	ELSE_2	IF_13
0x40007b3	            0xeb9d	                           jmp 0x4000752	      2409	multi.c	FUNCTION_36	FOR_3	IF_8	IF_9	ELSE_2	IF_13
0x40007b5	      0x488b442458	            mov rax, qword [rsp + 0x58] 	      2444	multi.c	FUNCTION_36
0x40007ba	    0x644833042528	                xor rax, qword fs:[0x28]	      2444	multi.c	FUNCTION_36
0x40007c3	            0x7405	                            je 0x40007ca	      2444	multi.c	FUNCTION_36
0x40007c5	      0xe800000000	                          call 0x40007ca	      2444	multi.c	FUNCTION_36
0x40007ca	        0x4883c468	                           add rsp, 0x68	      2444	multi.c	FUNCTION_36
0x40007ce	              0x5b	                                 pop rbx	      2444	multi.c	FUNCTION_36
0x40007cf	              0x5d	                                 pop rbp	      2444	multi.c	FUNCTION_36
0x40007d0	            0x415c	                                 pop r12	      2444	multi.c	FUNCTION_36
0x40007d2	            0x415d	                                 pop r13	      2444	multi.c	FUNCTION_36
0x40007d4	            0x415e	                                 pop r14	      2444	multi.c	FUNCTION_36
0x40007d6	            0x415f	                                 pop r15	      2444	multi.c	FUNCTION_36
0x40007d8	              0xc3	                                     ret	      2444	multi.c	FUNCTION_36
curl_multi_perform	ELSE,0:SWITCH,0:FOR,0:WHILE,1:CALL,5:DO,1:functions,0:IF,5	91
0x4003580	            0x4157	                                push r15	      2154	multi.c	FUNCTION_33
0x4003582	            0x4156	                                push r14	      2154	multi.c	FUNCTION_33
0x4003584	            0x4155	                                push r13	      2154	multi.c	FUNCTION_33
0x4003586	            0x4154	                                push r12	      2154	multi.c	FUNCTION_33
0x4003588	              0x55	                                push rbp	      2154	multi.c	FUNCTION_33
0x4003589	              0x53	                                push rbx	      2154	multi.c	FUNCTION_33
0x400358a	    0x4881ece80000	                           sub rsp, 0xe8	      2154	multi.c	FUNCTION_33
0x4003591	          0x4889fb	                            mov rbx, rdi	      2154	multi.c	FUNCTION_33
0x4003594	      0x4889742418	             mov qword [rsp + 0x18], rsi	      2154	multi.c	FUNCTION_33
0x4003599	    0x64488b042528	                mov rax, qword fs:[0x28]	      2154	multi.c	FUNCTION_33
0x40035a2	    0x48898424d800	             mov qword [rsp + 0xd8], rax	      2154	multi.c	FUNCTION_33
0x40035aa	            0x31c0	                            xor eax, eax	      2154	multi.c	FUNCTION_33
0x40035ac	      0xe800000000	                          call 0x40035b1	      2158	multi.c	FUNCTION_33	CALL_1
0x40035b1	      0x4889442408	                mov qword [rsp + 8], rax	      2158	multi.c	FUNCTION_33	CALL_1
0x40035b6	      0x4889542410	             mov qword [rsp + 0x10], rdx	      2158	multi.c	FUNCTION_33	CALL_1
0x40035bb	          0x4885db	                           test rbx, rbx	      2160	multi.c	FUNCTION_33	IF_1
0x40035be	     0xf84f2000000	                            je 0x40036b6	      2160	multi.c	FUNCTION_33	IF_1
0x40035c4	      0xb801000000	                              mov eax, 1	      2161	multi.c	FUNCTION_33	IF_1
0x40035c9	    0x48813b1eab0b	                cmp qword [rbx], 0xbab1e	      2160	multi.c	FUNCTION_33	IF_1
0x40035d0	     0xf85e5000000	                           jne 0x40036bb	      2160	multi.c	FUNCTION_33	IF_1
0x40035d6	      0xb808000000	                              mov eax, 8	      2164	multi.c	FUNCTION_33	IF_2
0x40035db	    0x80bbe0010000	               cmp byte [rbx + 0x1e0], 0	      2163	multi.c	FUNCTION_33	IF_2
0x40035e2	     0xf85d3000000	                           jne 0x40036bb	      2163	multi.c	FUNCTION_33	IF_2
0x40035e8	        0x488b6b08	                mov rbp, qword [rbx + 8]	      2166	multi.c	FUNCTION_33
0x40035ec	          0x4885ed	                           test rbp, rbp	      2167	multi.c	FUNCTION_33	WHILE_1
0x40035ef	            0x7451	                            je 0x4003642	      2167	multi.c	FUNCTION_33	WHILE_1
0x40035f1	    0x41bd00000000	                             mov r13d, 0	      2167	multi.c	FUNCTION_33	WHILE_1
0x40035f7	      0x4c8d742430	                   lea r14, [rsp + 0x30]	      2171	multi.c	FUNCTION_33	WHILE_1
0x40035fc	          0x4989d7	                            mov r15, rdx	      2172	multi.c	FUNCTION_33	WHILE_1	CALL_2
0x40035ff	      0x488b442408	                mov rax, qword [rsp + 8]	      2172	multi.c	FUNCTION_33	WHILE_1	CALL_2
0x4003604	        0x48890424	                    mov qword [rsp], rax	      2172	multi.c	FUNCTION_33	WHILE_1	CALL_2
0x4003608	          0x4c89f6	                            mov rsi, r14	      2171	multi.c	FUNCTION_33	WHILE_1
0x400360b	          0x4889ef	                            mov rdi, rbp	      2171	multi.c	FUNCTION_33	WHILE_1
0x400360e	      0xe8c6d1ffff	                 call sym.sigpipe_ignore	      2171	multi.c	FUNCTION_33	WHILE_1
0x4003613	          0x4889e9	                            mov rcx, rbp	      2172	multi.c	FUNCTION_33	WHILE_1	CALL_2
0x4003616	        0x488b3424	                    mov rsi, qword [rsp]	      2172	multi.c	FUNCTION_33	WHILE_1	CALL_2
0x400361a	          0x4c89fa	                            mov rdx, r15	      2172	multi.c	FUNCTION_33	WHILE_1	CALL_2
0x400361d	          0x4889df	                            mov rdi, rbx	      2172	multi.c	FUNCTION_33	WHILE_1	CALL_2
0x4003620	      0xe8bfeaffff	                call sym.multi_runsingle	      2172	multi.c	FUNCTION_33	WHILE_1	CALL_2
0x4003625	          0x4189c4	                           mov r12d, eax	      2172	multi.c	FUNCTION_33	WHILE_1	CALL_2
0x4003628	          0x4c89f7	                            mov rdi, r14	      2173	multi.c	FUNCTION_33	WHILE_1
0x400362b	      0xe86bd2ffff	                call sym.sigpipe_restore	      2173	multi.c	FUNCTION_33	WHILE_1
0x4003630	          0x4585e4	                         test r12d, r12d	      2175	multi.c	FUNCTION_33	WHILE_1	IF_3
0x4003633	        0x450f45ec	                       cmovne r13d, r12d	      2176	multi.c	FUNCTION_33	WHILE_1	IF_3
0x4003637	        0x488b6d00	                    mov rbp, qword [rbp]	      2178	multi.c	FUNCTION_33	WHILE_1
0x400363b	          0x4885ed	                           test rbp, rbp	      2167	multi.c	FUNCTION_33	WHILE_1
0x400363e	            0x75c8	                           jne 0x4003608	      2167	multi.c	FUNCTION_33	WHILE_1
0x4003640	            0xeb06	                           jmp 0x4003648	      2167	multi.c	FUNCTION_33	WHILE_1
0x4003642	    0x41bd00000000	                             mov r13d, 0	      2156	multi.c	FUNCTION_33
0x4003648	      0x488d6c2428	                   lea rbp, [rsp + 0x28]	      2192	multi.c	FUNCTION_33	DO_1	CALL_3
0x400364d	      0x4c8b642410	            mov r12, qword [rsp + 0x10] 	      2192	multi.c	FUNCTION_33	DO_1	CALL_3
0x4003652	      0x4c8b742408	                mov r14, qword [rsp + 8]	      2192	multi.c	FUNCTION_33	DO_1	CALL_3
0x4003657	    0x488b93b00000	            mov rdx, qword [rbx + 0xb0] 	      2192	multi.c	FUNCTION_33	DO_1	CALL_3
0x400365e	          0x4889e9	                            mov rcx, rbp	      2192	multi.c	FUNCTION_33	DO_1	CALL_3
0x4003661	          0x4c89f7	                            mov rdi, r14	      2192	multi.c	FUNCTION_33	DO_1	CALL_3
0x4003664	          0x4c89e6	                            mov rsi, r12	      2192	multi.c	FUNCTION_33	DO_1	CALL_3
0x4003667	      0xe800000000	                          call 0x400366c	      2192	multi.c	FUNCTION_33	DO_1	CALL_3
0x400366c	    0x488983b00000	             mov qword [rbx + 0xb0], rax	      2192	multi.c	FUNCTION_33	DO_1	CALL_3
0x4003673	      0x488b442428	            mov rax, qword [rsp + 0x28] 	      2193	multi.c	FUNCTION_33	DO_1	IF_4
0x4003678	          0x4885c0	                           test rax, rax	      2193	multi.c	FUNCTION_33	DO_1	IF_4
0x400367b	            0x741a	                            je 0x4003697	      2193	multi.c	FUNCTION_33	DO_1	IF_4
0x400367d	        0x488b4830	            mov rcx, qword [rax + 0x30] 	      2195	multi.c	FUNCTION_33	DO_1	CALL_4
0x4003681	          0x4889da	                            mov rdx, rbx	      2195	multi.c	FUNCTION_33	DO_1	CALL_4
0x4003684	          0x4c89f7	                            mov rdi, r14	      2195	multi.c	FUNCTION_33	DO_1	CALL_4
0x4003687	          0x4c89e6	                            mov rsi, r12	      2195	multi.c	FUNCTION_33	DO_1	CALL_4
0x400368a	      0xe870d2ffff	               call sym.add_next_timeout	      2195	multi.c	FUNCTION_33	DO_1	CALL_4
0x400368f	    0x48837c242800	               cmp qword [rsp + 0x28], 0	      2197	multi.c	FUNCTION_33	DO_1
0x4003695	            0x75c0	                           jne 0x4003657	      2197	multi.c	FUNCTION_33	DO_1
0x4003697	          0x8b431c	            mov eax, dword [rbx + 0x1c] 	      2199	multi.c	FUNCTION_33
0x400369a	      0x488b742418	            mov rsi, qword [rsp + 0x18] 	      2199	multi.c	FUNCTION_33
0x400369f	            0x8906	                    mov dword [rsi], eax	      2199	multi.c	FUNCTION_33
0x40036a1	          0x4489e8	                           mov eax, r13d	      2199	multi.c	FUNCTION_33
0x40036a4	          0x4585ed	                         test r13d, r13d	      2201	multi.c	FUNCTION_33	IF_5
0x40036a7	            0x7f12	                            jg 0x40036bb	      2201	multi.c	FUNCTION_33	IF_5
0x40036a9	          0x4889df	                            mov rdi, rbx	      2202	multi.c	FUNCTION_33	CALL_5
0x40036ac	      0xe899caffff	                   call sym.update_timer	      2202	multi.c	FUNCTION_33	CALL_5
0x40036b1	          0x4489e8	                           mov eax, r13d	      2202	multi.c	FUNCTION_33	CALL_5
0x40036b4	            0xeb05	                           jmp 0x40036bb	      2202	multi.c	FUNCTION_33	CALL_5
0x40036b6	      0xb801000000	                              mov eax, 1	      2161	multi.c	FUNCTION_33	IF_1
0x40036bb	    0x488b8c24d800	            mov rcx, qword [rsp + 0xd8] 	      2205	multi.c	FUNCTION_33
0x40036c3	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      2205	multi.c	FUNCTION_33
0x40036cc	            0x7405	                            je 0x40036d3	      2205	multi.c	FUNCTION_33
0x40036ce	      0xe800000000	                          call 0x40036d3	      2205	multi.c	FUNCTION_33
0x40036d3	    0x4881c4e80000	                           add rsp, 0xe8	      2205	multi.c	FUNCTION_33
0x40036da	              0x5b	                                 pop rbx	      2205	multi.c	FUNCTION_33
0x40036db	              0x5d	                                 pop rbp	      2205	multi.c	FUNCTION_33
0x40036dc	            0x415c	                                 pop r12	      2205	multi.c	FUNCTION_33
0x40036de	            0x415d	                                 pop r13	      2205	multi.c	FUNCTION_33
0x40036e0	            0x415e	                                 pop r14	      2205	multi.c	FUNCTION_33
0x40036e2	            0x415f	                                 pop r15	      2205	multi.c	FUNCTION_33
0x40036e4	              0xc3	                                     ret	      2205	multi.c	FUNCTION_33
curl_multi_socket	ELSE,0:SWITCH,0:FOR,0:WHILE,0:CALL,2:DO,0:functions,0:IF,2	22
0x4003959	      0xb808000000	                              mov eax, 8	      2749	multi.c	FUNCTION_42	IF_1
0x400395e	    0x80bfe0010000	               cmp byte [rdi + 0x1e0], 0	      2748	multi.c	FUNCTION_42	IF_1
0x4003965	            0x7533	                           jne 0x400399a	      2748	multi.c	FUNCTION_42	IF_1
0x4003967	              0x55	                                push rbp	      2746	multi.c	FUNCTION_42
0x4003968	              0x53	                                push rbx	      2746	multi.c	FUNCTION_42
0x4003969	        0x4883ec08	                              sub rsp, 8	      2746	multi.c	FUNCTION_42
0x400396d	          0x4989d0	                             mov r8, rdx	      2746	multi.c	FUNCTION_42
0x4003970	            0x89f2	                            mov edx, esi	      2746	multi.c	FUNCTION_42
0x4003972	          0x4889fb	                            mov rbx, rdi	      2746	multi.c	FUNCTION_42
0x4003975	      0xb900000000	                              mov ecx, 0	      2750	multi.c	FUNCTION_42	CALL_1
0x400397a	      0xbe00000000	                              mov esi, 0	      2750	multi.c	FUNCTION_42	CALL_1
0x400397f	      0xe861fdffff	                   call sym.multi_socket	      2750	multi.c	FUNCTION_42	CALL_1
0x4003984	            0x89c5	                            mov ebp, eax	      2750	multi.c	FUNCTION_42	CALL_1
0x4003986	            0x85c0	                           test eax, eax	      2751	multi.c	FUNCTION_42	IF_2
0x4003988	            0x7f0a	                            jg 0x4003994	      2751	multi.c	FUNCTION_42	IF_2
0x400398a	          0x4889df	                            mov rdi, rbx	      2752	multi.c	FUNCTION_42	CALL_2
0x400398d	      0xe8b8c7ffff	                   call sym.update_timer	      2752	multi.c	FUNCTION_42	CALL_2
0x4003992	            0x89e8	                            mov eax, ebp	      2753	multi.c	FUNCTION_42
0x4003994	        0x4883c408	                              add rsp, 8	      2754	multi.c	FUNCTION_42
0x4003998	              0x5b	                                 pop rbx	      2754	multi.c	FUNCTION_42
0x4003999	              0x5d	                                 pop rbp	      2754	multi.c	FUNCTION_42
0x400399a	            0xf3c3	                                     ret	      2754	multi.c	FUNCTION_42
curl_multi_fdset	ELSE,0:SWITCH,0:FOR,1:WHILE,1:CALL,7:DO,0:functions,0:IF,6	103
0x4000b61	            0x4157	                                push r15	       913	multi.c	FUNCTION_23
0x4000b63	            0x4156	                                push r14	       913	multi.c	FUNCTION_23
0x4000b65	            0x4155	                                push r13	       913	multi.c	FUNCTION_23
0x4000b67	            0x4154	                                push r12	       913	multi.c	FUNCTION_23
0x4000b69	              0x55	                                push rbp	       913	multi.c	FUNCTION_23
0x4000b6a	              0x53	                                push rbx	       913	multi.c	FUNCTION_23
0x4000b6b	        0x4883ec38	                           sub rsp, 0x38	       913	multi.c	FUNCTION_23
0x4000b6f	        0x48893424	                    mov qword [rsp], rsi	       913	multi.c	FUNCTION_23
0x4000b73	      0x4c89442408	                 mov qword [rsp + 8], r8	       913	multi.c	FUNCTION_23
0x4000b78	    0x64488b042528	                mov rax, qword fs:[0x28]	       913	multi.c	FUNCTION_23
0x4000b81	      0x4889442428	             mov qword [rsp + 0x28], rax	       913	multi.c	FUNCTION_23
0x4000b86	            0x31c0	                            xor eax, eax	       913	multi.c	FUNCTION_23
0x4000b88	          0x4885ff	                           test rdi, rdi	       924	multi.c	FUNCTION_23	IF_1
0x4000b8b	     0xf8419010000	                            je 0x4000caa	       924	multi.c	FUNCTION_23	IF_1
0x4000b91	          0x4989d7	                            mov r15, rdx	       924	multi.c	FUNCTION_23	IF_1
0x4000b94	      0xb801000000	                              mov eax, 1	       925	multi.c	FUNCTION_23	IF_1
0x4000b99	    0x48813f1eab0b	                cmp qword [rdi], 0xbab1e	       924	multi.c	FUNCTION_23	IF_1
0x4000ba0	     0xf8509010000	                           jne 0x4000caf	       924	multi.c	FUNCTION_23	IF_1
0x4000ba6	      0xb808000000	                              mov eax, 8	       928	multi.c	FUNCTION_23	IF_2
0x4000bab	    0x80bfe0010000	               cmp byte [rdi + 0x1e0], 0	       927	multi.c	FUNCTION_23	IF_2
0x4000bb2	     0xf85f7000000	                           jne 0x4000caf	       927	multi.c	FUNCTION_23	IF_2
0x4000bb8	        0x4c8b7708	                mov r14, qword [rdi + 8]	       930	multi.c	FUNCTION_23
0x4000bbc	      0xbdffffffff	                     mov ebp, 0xffffffff	       918	multi.c	FUNCTION_23
0x4000bc1	          0x4d85f6	                           test r14, r14	       931	multi.c	FUNCTION_23	WHILE_1
0x4000bc4	     0xf84d2000000	                            je 0x4000c9c	       931	multi.c	FUNCTION_23	WHILE_1
0x4000bca	      0x4c8d6c2410	                   lea r13, [rsp + 0x10]	       932	multi.c	FUNCTION_23	WHILE_1	CALL_1
0x4000bcf	      0xba05000000	                              mov edx, 5	       932	multi.c	FUNCTION_23	WHILE_1	CALL_1
0x4000bd4	          0x4c89ee	                            mov rsi, r13	       932	multi.c	FUNCTION_23	WHILE_1	CALL_1
0x4000bd7	          0x4c89f7	                            mov rdi, r14	       932	multi.c	FUNCTION_23	WHILE_1	CALL_1
0x4000bda	      0xe89ef6ffff	                  call sym.multi_getsock	       932	multi.c	FUNCTION_23	WHILE_1	CALL_1
0x4000bdf	          0x4189c4	                           mov r12d, eax	       932	multi.c	FUNCTION_23	WHILE_1	CALL_1
0x4000be2	      0xbb00000000	                              mov ebx, 0	       932	multi.c	FUNCTION_23	WHILE_1	CALL_1
0x4000be7	        0x410fa3dc	                            bt r12d, ebx	       937	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_3	CALL_3
0x4000beb	     0xf83d0000000	                           jae 0x4000cc1	       937	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_3	CALL_3
0x4000bf1	      0x418b7c9d00	            mov edi, dword [r13 + rbx*4]	       937	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_3	CALL_3
0x4000bf6	    0x81ffff030000	                          cmp edi, 0x3ff	       937	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_3	CALL_3
0x4000bfc	     0xf878e000000	                            ja 0x4000c90	       937	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_3	CALL_3
0x4000c02	          0x4863ff	                         movsxd rdi, edi	       938	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_3	CALL_4
0x4000c05	      0xe800000000	                          call 0x4000c0a	       938	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_3	CALL_4
0x4000c0a	      0x418b549d00	            mov edx, dword [r13 + rbx*4]	       938	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_3	CALL_4
0x4000c0f	            0x89d6	                            mov esi, edx	       938	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_3	CALL_4
0x4000c11	          0xc1fe1f	                           sar esi, 0x1f	       938	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_3	CALL_4
0x4000c14	          0xc1ee1a	                           shr esi, 0x1a	       938	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_3	CALL_4
0x4000c17	          0x8d0c32	                    lea ecx, [rdx + rsi]	       938	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_3	CALL_4
0x4000c1a	          0x83e13f	                           and ecx, 0x3f	       938	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_3	CALL_4
0x4000c1d	            0x29f1	                            sub ecx, esi	       938	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_3	CALL_4
0x4000c1f	      0xbe01000000	                              mov esi, 1	       938	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_3	CALL_4
0x4000c24	          0x48d3e6	                             shl rsi, cl	       938	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_3	CALL_4
0x4000c27	          0x4889f1	                            mov rcx, rsi	       938	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_3	CALL_4
0x4000c2a	        0x488b3424	                    mov rsi, qword [rsp]	       938	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_3	CALL_4
0x4000c2e	        0x48090cc6	             or qword [rsi + rax*8], rcx	       938	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_3	CALL_4
0x4000c32	          0x8d4310	                   lea eax, [rbx + 0x10]	       941	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_4	CALL_6
0x4000c35	        0x410fa3c4	                            bt r12d, eax	       941	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_4	CALL_6
0x4000c39	            0x733d	                           jae 0x4000c78	       941	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_4	CALL_6
0x4000c3b	            0xeb05	                           jmp 0x4000c42	       941	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_4	CALL_6
0x4000c3d	      0xbaffffffff	                     mov edx, 0xffffffff	       935	multi.c	FUNCTION_23	WHILE_1	FOR_1
0x4000c42	      0x418b7c9d00	            mov edi, dword [r13 + rbx*4]	       941	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_4	CALL_6
0x4000c47	    0x81ffff030000	                          cmp edi, 0x3ff	       941	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_4	CALL_6
0x4000c4d	            0x7729	                            ja 0x4000c78	       941	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_4	CALL_6
0x4000c4f	          0x4863ff	                         movsxd rdi, edi	       942	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_4	CALL_7
0x4000c52	      0xe800000000	                          call 0x4000c57	       942	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_4	CALL_7
0x4000c57	      0x418b549d00	            mov edx, dword [r13 + rbx*4]	       942	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_4	CALL_7
0x4000c5c	            0x89d6	                            mov esi, edx	       942	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_4	CALL_7
0x4000c5e	          0xc1fe1f	                           sar esi, 0x1f	       942	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_4	CALL_7
0x4000c61	          0xc1ee1a	                           shr esi, 0x1a	       942	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_4	CALL_7
0x4000c64	          0x8d0c32	                    lea ecx, [rdx + rsi]	       942	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_4	CALL_7
0x4000c67	          0x83e13f	                           and ecx, 0x3f	       942	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_4	CALL_7
0x4000c6a	            0x29f1	                            sub ecx, esi	       942	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_4	CALL_7
0x4000c6c	      0xbf01000000	                              mov edi, 1	       942	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_4	CALL_7
0x4000c71	          0x48d3e7	                             shl rdi, cl	       942	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_4	CALL_7
0x4000c74	        0x49093cc7	             or qword [r15 + rax*8], rdi	       942	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_4	CALL_7
0x4000c78	          0x83faff	             cmp edx, 0xffffffffffffffff	       945	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_5
0x4000c7b	            0x7413	                            je 0x4000c90	       945	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_5
0x4000c7d	            0x39d5	                            cmp ebp, edx	       945	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_5
0x4000c7f	           0xf4cea	                          cmovl ebp, edx	       945	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_5
0x4000c82	        0x4883c301	                              add rbx, 1	       945	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_5
0x4000c86	        0x4883fb05	                              cmp rbx, 5	       934	multi.c	FUNCTION_23	WHILE_1	FOR_1
0x4000c8a	     0xf8557ffffff	                           jne 0x4000be7	       934	multi.c	FUNCTION_23	WHILE_1	FOR_1
0x4000c90	          0x4d8b36	                    mov r14, qword [r14]	       952	multi.c	FUNCTION_23	WHILE_1
0x4000c93	          0x4d85f6	                           test r14, r14	       931	multi.c	FUNCTION_23	WHILE_1
0x4000c96	     0xf8533ffffff	                           jne 0x4000bcf	       931	multi.c	FUNCTION_23	WHILE_1
0x4000c9c	      0x488b442408	                mov rax, qword [rsp + 8]	       955	multi.c	FUNCTION_23
0x4000ca1	            0x8928	                    mov dword [rax], ebp	       955	multi.c	FUNCTION_23
0x4000ca3	      0xb800000000	                              mov eax, 0	       957	multi.c	FUNCTION_23
0x4000ca8	            0xeb05	                           jmp 0x4000caf	       957	multi.c	FUNCTION_23
0x4000caa	      0xb801000000	                              mov eax, 1	       925	multi.c	FUNCTION_23	IF_1
0x4000caf	      0x488b4c2428	            mov rcx, qword [rsp + 0x28] 	       958	multi.c	FUNCTION_23
0x4000cb4	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       958	multi.c	FUNCTION_23
0x4000cbd	            0x7416	                            je 0x4000cd5	       958	multi.c	FUNCTION_23
0x4000cbf	            0xeb0f	                           jmp 0x4000cd0	       958	multi.c	FUNCTION_23
0x4000cc1	          0x8d4310	                   lea eax, [rbx + 0x10]	       941	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_4	CALL_6
0x4000cc4	        0x410fa3c4	                            bt r12d, eax	       941	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_4	CALL_6
0x4000cc8	     0xf826fffffff	                            jb 0x4000c3d	       941	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_4	CALL_6
0x4000cce	            0xebc0	                           jmp 0x4000c90	       941	multi.c	FUNCTION_23	WHILE_1	FOR_1	IF_4	CALL_6
0x4000cd0	      0xe800000000	                          call 0x4000cd5	       958	multi.c	FUNCTION_23
0x4000cd5	        0x4883c438	                           add rsp, 0x38	       958	multi.c	FUNCTION_23
0x4000cd9	              0x5b	                                 pop rbx	       958	multi.c	FUNCTION_23
0x4000cda	              0x5d	                                 pop rbp	       958	multi.c	FUNCTION_23
0x4000cdb	            0x415c	                                 pop r12	       958	multi.c	FUNCTION_23
0x4000cdd	            0x415d	                                 pop r13	       958	multi.c	FUNCTION_23
0x4000cdf	            0x415e	                                 pop r14	       958	multi.c	FUNCTION_23
0x4000ce1	            0x415f	                                 pop r15	       958	multi.c	FUNCTION_23
0x4000ce3	              0xc3	                                     ret	       958	multi.c	FUNCTION_23
multi_runsingle	ELSE,40:SWITCH,1:FOR,0:WHILE,0:CALL,109:DO,1:functions,0:IF,99	1206
0x40020e4	            0x4157	                                push r15	      1304	multi.c	FUNCTION_32
0x40020e6	            0x4156	                                push r14	      1304	multi.c	FUNCTION_32
0x40020e8	            0x4155	                                push r13	      1304	multi.c	FUNCTION_32
0x40020ea	            0x4154	                                push r12	      1304	multi.c	FUNCTION_32
0x40020ec	              0x55	                                push rbp	      1304	multi.c	FUNCTION_32
0x40020ed	              0x53	                                push rbx	      1304	multi.c	FUNCTION_32
0x40020ee	        0x4883ec58	                           sub rsp, 0x58	      1304	multi.c	FUNCTION_32
0x40020f2	      0x4889742420	             mov qword [rsp + 0x20], rsi	      1304	multi.c	FUNCTION_32
0x40020f7	      0x4889542428	             mov qword [rsp + 0x28], rdx	      1304	multi.c	FUNCTION_32
0x40020fc	    0x64488b042528	                mov rax, qword fs:[0x28]	      1304	multi.c	FUNCTION_32
0x4002105	      0x4889442448	             mov qword [rsp + 0x48], rax	      1304	multi.c	FUNCTION_32
0x400210a	            0x31c0	                            xor eax, eax	      1304	multi.c	FUNCTION_32
0x400210c	      0xc644243700	                mov byte [rsp + 0x37], 0	      1308	multi.c	FUNCTION_32
0x4002111	      0xc644243800	                mov byte [rsp + 0x38], 0	      1309	multi.c	FUNCTION_32
0x4002116	      0xc644243900	                mov byte [rsp + 0x39], 0	      1310	multi.c	FUNCTION_32
0x400211b	      0xb802000000	                              mov eax, 2	      1320	multi.c	FUNCTION_32	IF_1
0x4002120	          0x4885c9	                           test rcx, rcx	      1319	multi.c	FUNCTION_32	IF_1	CALL_1
0x4002123	     0xf84cc120000	                            je 0x40033f5	      1319	multi.c	FUNCTION_32	IF_1	CALL_1
0x4002129	          0x4989fc	                            mov r12, rdi	      1319	multi.c	FUNCTION_32	IF_1	CALL_1
0x400212c	          0x4889cb	                            mov rbx, rcx	      1319	multi.c	FUNCTION_32	IF_1	CALL_1
0x400212f	    0x81b9d0520000	   cmp dword [rcx + 0x52d0], 0xc0dedbad 	      1319	multi.c	FUNCTION_32	IF_1	CALL_1
0x4002139	     0xf85b6120000	                           jne 0x40033f5	      1319	multi.c	FUNCTION_32	IF_1	CALL_1
0x400213f	    0x41bd00000000	                             mov r13d, 0	      1319	multi.c	FUNCTION_32	IF_1	CALL_1
0x4002145	      0x488d44243b	                   lea rax, [rsp + 0x3b]	      1905	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_79
0x400214a	      0x4889442408	                mov qword [rsp + 8], rax	      1905	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_79
0x400214f	      0x488d442439	                   lea rax, [rsp + 0x39]	      1905	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_79
0x4002154	      0x4889442410	             mov qword [rsp + 0x10], rax	      1905	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_79
0x4002159	      0x488d442440	                   lea rax, [rsp + 0x40]	      1922	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_73	CALL_82
0x400215e	        0x48890424	                    mov qword [rsp], rax	      1922	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_73	CALL_82
0x4002162	      0x4c8d7c243c	                   lea r15, [rsp + 0x3c]	      1292	multi.c	FUNCTION_31	CALL_1
0x4002167	    0x80bb01510000	              cmp byte [rbx + 0x5101], 0	      1330	multi.c	FUNCTION_32	DO_1	IF_2
0x400216e	            0x7455	                            je 0x40021c5	      1330	multi.c	FUNCTION_32	DO_1	IF_2
0x4002170	    0x488b8b185100	          mov rcx, qword [rbx + 0x5118] 	      1331	multi.c	FUNCTION_32	DO_1	IF_2	CALL_2
0x4002177	          0x4889da	                            mov rdx, rbx	      1331	multi.c	FUNCTION_32	DO_1	IF_2	CALL_2
0x400217a	    0x488d35000000	                   lea rsi, [0x04002181]	      1331	multi.c	FUNCTION_32	DO_1	IF_2	CALL_2
0x4002181	          0x4889df	                            mov rdi, rbx	      1331	multi.c	FUNCTION_32	DO_1	IF_2	CALL_2
0x4002184	      0xb800000000	                              mov eax, 0	      1331	multi.c	FUNCTION_32	DO_1	IF_2	CALL_2
0x4002189	      0xe800000000	                          call 0x400218e	      1331	multi.c	FUNCTION_32	DO_1	IF_2	CALL_2
0x400218e	      0xbd00000000	                              mov ebp, 0	      1326	multi.c	FUNCTION_32	DO_1
0x4002193	        0x837b4810	           cmp dword [rbx + 0x48], 0x10 	      1334	multi.c	FUNCTION_32	DO_1	IF_2	IF_3
0x4002197	            0x7718	                            ja 0x40021b1	      1334	multi.c	FUNCTION_32	DO_1	IF_2	IF_3
0x4002199	      0xbe02000000	                              mov esi, 2	      1336	multi.c	FUNCTION_32	DO_1	IF_2	IF_3
0x400219e	          0x4889df	                            mov rdi, rbx	      1336	multi.c	FUNCTION_32	DO_1	IF_2	IF_3
0x40021a1	      0xe89adeffff	                         call sym.mstate	      1336	multi.c	FUNCTION_32	DO_1	IF_2	IF_3
0x40021a6	    0x41bd00000000	                             mov r13d, 0	      1338	multi.c	FUNCTION_32	DO_1	IF_2	IF_3
0x40021ac	      0xbdffffffff	                     mov ebp, 0xffffffff	      1337	multi.c	FUNCTION_32	DO_1	IF_2	IF_3
0x40021b1	    0xc68301510000	              mov byte [rbx + 0x5101], 0	      1341	multi.c	FUNCTION_32	DO_1	IF_2
0x40021b8	    0x48c743100000	               mov qword [rbx + 0x10], 0	      1342	multi.c	FUNCTION_32	DO_1	IF_2
0x40021c0	      0xe90b120000	                           jmp 0x40033d0	      1343	multi.c	FUNCTION_32	DO_1	IF_2
0x40021c5	      0x48837b1000	               cmp qword [rbx + 0x10], 0	      1346	multi.c	FUNCTION_32	DO_1	IF_4
0x40021ca	            0x7529	                           jne 0x40021f5	      1346	multi.c	FUNCTION_32	DO_1	IF_4
0x40021cc	          0x8b5348	            mov edx, dword [rbx + 0x48] 	      1347	multi.c	FUNCTION_32	DO_1	IF_4
0x40021cf	          0x8d42fd	                      lea eax, [rdx - 3]	      1347	multi.c	FUNCTION_32	DO_1	IF_4
0x40021d2	          0x83f80c	                            cmp eax, 0xc	      1347	multi.c	FUNCTION_32	DO_1	IF_4
0x40021d5	            0x771e	                            ja 0x40021f5	      1347	multi.c	FUNCTION_32	DO_1	IF_4
0x40021d7	    0x488d35000000	                   lea rsi, [0x040021de]	      1352	multi.c	FUNCTION_32	DO_1	IF_4	CALL_3
0x40021de	          0x4889df	                            mov rdi, rbx	      1352	multi.c	FUNCTION_32	DO_1	IF_4	CALL_3
0x40021e1	      0xb800000000	                              mov eax, 0	      1352	multi.c	FUNCTION_32	DO_1	IF_4	CALL_3
0x40021e6	      0xe800000000	                          call 0x40021eb	      1352	multi.c	FUNCTION_32	DO_1	IF_4	CALL_3
0x40021eb	      0xb804000000	                              mov eax, 4	      1353	multi.c	FUNCTION_32	DO_1	IF_4
0x40021f0	      0xe900120000	                           jmp 0x40033f5	      1353	multi.c	FUNCTION_32	DO_1	IF_4
0x40021f5	    0x410fb68424f0	           movzx eax, byte [r12 + 0xf0] 	      1137	multi.c	FUNCTION_26
0x40021fe	    0x41c68424f000	                mov byte [r12 + 0xf0], 0	      1139	multi.c	FUNCTION_26	IF_1
0x4002207	            0x84c0	                             test al, al	      1356	multi.c	FUNCTION_32	DO_1	IF_5	CALL_4
0x4002209	            0x7408	                            je 0x4002213	      1356	multi.c	FUNCTION_32	DO_1	IF_5	CALL_4
0x400220b	          0x4c89e7	                            mov rdi, r12	      1358	multi.c	FUNCTION_32	DO_1	IF_5	CALL_7
0x400220e	      0xe886f7ffff	        call sym.process_pending_handles	      1358	multi.c	FUNCTION_32	DO_1	IF_5	CALL_7
0x4002213	        0x488b5310	            mov rdx, qword [rbx + 0x10] 	      1361	multi.c	FUNCTION_32	DO_1	IF_6
0x4002217	          0x4885d2	                           test rdx, rdx	      1361	multi.c	FUNCTION_32	DO_1	IF_6
0x400221a	     0xf8492010000	                            je 0x40023b2	      1361	multi.c	FUNCTION_32	DO_1	IF_6
0x4002220	          0x8b4348	            mov eax, dword [rbx + 0x48] 	      1361	multi.c	FUNCTION_32	DO_1	IF_6
0x4002223	          0x83e803	                              sub eax, 3	      1361	multi.c	FUNCTION_32	DO_1	IF_6
0x4002226	          0x83f80d	                            cmp eax, 0xd	      1361	multi.c	FUNCTION_32	DO_1	IF_6
0x4002229	            0x770e	                            ja 0x4002239	      1361	multi.c	FUNCTION_32	DO_1	IF_6
0x400222b	          0x48891a	                    mov qword [rdx], rbx	      1364	multi.c	FUNCTION_32	DO_1	IF_6
0x400222e	      0x48837b1000	               cmp qword [rbx + 0x10], 0	      1367	multi.c	FUNCTION_32	DO_1	IF_7
0x4002233	     0xf8479010000	                            je 0x40023b2	      1367	multi.c	FUNCTION_32	DO_1	IF_7
0x4002239	          0x8b4348	            mov eax, dword [rbx + 0x48] 	      1368	multi.c	FUNCTION_32	DO_1	IF_7
0x400223c	          0x8d50fe	                      lea edx, [rax - 2]	      1368	multi.c	FUNCTION_32	DO_1	IF_7
0x400223f	          0x83fa0e	                            cmp edx, 0xe	      1368	multi.c	FUNCTION_32	DO_1	IF_7
0x4002242	     0xf876a010000	                            ja 0x40023b2	      1368	multi.c	FUNCTION_32	DO_1	IF_7
0x4002248	          0x83f808	                              cmp eax, 8	      1372	multi.c	FUNCTION_32	DO_1	IF_7	CALL_8
0x400224b	           0xf96c2	                                setbe dl	      1372	multi.c	FUNCTION_32	DO_1	IF_7	CALL_8
0x400224e	           0xfb6d2	                           movzx edx, dl	      1372	multi.c	FUNCTION_32	DO_1	IF_7	CALL_8
0x4002251	      0x488d742420	                   lea rsi, [rsp + 0x20]	      1372	multi.c	FUNCTION_32	DO_1	IF_7	CALL_8
0x4002256	          0x4889df	                            mov rdi, rbx	      1372	multi.c	FUNCTION_32	DO_1	IF_7	CALL_8
0x4002259	      0xe800000000	                          call 0x400225e	      1372	multi.c	FUNCTION_32	DO_1	IF_7	CALL_8
0x400225e	          0x4885c0	                           test rax, rax	      1376	multi.c	FUNCTION_32	DO_1	IF_7	IF_8
0x4002261	     0xf894b010000	                           jns 0x40023b2	      1376	multi.c	FUNCTION_32	DO_1	IF_7	IF_8
0x4002267	          0x8b4348	            mov eax, dword [rbx + 0x48] 	      1378	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	IF_9
0x400226a	          0x83f803	                              cmp eax, 3	      1378	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	IF_9
0x400226d	            0x7539	                           jne 0x40022a8	      1378	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	IF_9
0x400226f	    0x488b93e80b00	           mov rdx, qword [rbx + 0xbe8] 	      1379	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	IF_9	CALL_9
0x4002276	    0x488b8bf00b00	           mov rcx, qword [rbx + 0xbf0] 	      1379	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	IF_9	CALL_9
0x400227d	      0x488b7c2420	            mov rdi, qword [rsp + 0x20] 	      1379	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	IF_9	CALL_9
0x4002282	      0x488b742428	            mov rsi, qword [rsp + 0x28] 	      1379	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	IF_9	CALL_9
0x4002287	      0xe800000000	                          call 0x400228c	      1379	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	IF_9	CALL_9
0x400228c	          0x4889c2	                            mov rdx, rax	      1379	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	IF_9	CALL_9
0x400228f	    0x488d35000000	                   lea rsi, [0x04002296]	      1379	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	IF_9	CALL_9
0x4002296	          0x4889df	                            mov rdi, rbx	      1379	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	IF_9	CALL_9
0x4002299	      0xb800000000	                              mov eax, 0	      1379	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	IF_9	CALL_9
0x400229e	      0xe800000000	                          call 0x40022a3	      1379	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	IF_9	CALL_9
0x40022a3	      0xe9cc000000	                           jmp 0x4002374	      1379	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	IF_9	CALL_9
0x40022a8	          0x83f804	                              cmp eax, 4	      1381	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	ELSE_1	IF_10
0x40022ab	            0x7539	                           jne 0x40022e6	      1381	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	ELSE_1	IF_10
0x40022ad	    0x488b93e80b00	           mov rdx, qword [rbx + 0xbe8] 	      1382	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	ELSE_1	IF_10	CALL_11
0x40022b4	    0x488b8bf00b00	           mov rcx, qword [rbx + 0xbf0] 	      1382	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	ELSE_1	IF_10	CALL_11
0x40022bb	      0x488b7c2420	            mov rdi, qword [rsp + 0x20] 	      1382	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	ELSE_1	IF_10	CALL_11
0x40022c0	      0x488b742428	            mov rsi, qword [rsp + 0x28] 	      1382	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	ELSE_1	IF_10	CALL_11
0x40022c5	      0xe800000000	                          call 0x40022ca	      1382	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	ELSE_1	IF_10	CALL_11
0x40022ca	          0x4889c2	                            mov rdx, rax	      1382	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	ELSE_1	IF_10	CALL_11
0x40022cd	    0x488d35000000	                   lea rsi, [0x040022d4]	      1382	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	ELSE_1	IF_10	CALL_11
0x40022d4	          0x4889df	                            mov rdi, rbx	      1382	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	ELSE_1	IF_10	CALL_11
0x40022d7	      0xb800000000	                              mov eax, 0	      1382	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	ELSE_1	IF_10	CALL_11
0x40022dc	      0xe800000000	                          call 0x40022e1	      1382	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	ELSE_1	IF_10	CALL_11
0x40022e1	      0xe98e000000	                           jmp 0x4002374	      1382	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	ELSE_1	IF_10	CALL_11
0x40022e6	    0x488babc00000	            mov rbp, qword [rbx + 0xc0] 	      1386	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	ELSE_2	IF_11
0x40022ed	        0x4883fdff	             cmp rbp, 0xffffffffffffffff	      1386	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	ELSE_2	IF_11
0x40022f1	            0x7443	                            je 0x4002336	      1386	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	ELSE_2	IF_11
0x40022f3	    0x4c8babe00000	            mov r13, qword [rbx + 0xe0] 	      1387	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	ELSE_2	IF_11	CALL_13
0x40022fa	    0x488b93e80b00	           mov rdx, qword [rbx + 0xbe8] 	      1387	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	ELSE_2	IF_11	CALL_13
0x4002301	    0x488b8bf00b00	           mov rcx, qword [rbx + 0xbf0] 	      1387	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	ELSE_2	IF_11	CALL_13
0x4002308	      0x488b7c2420	            mov rdi, qword [rsp + 0x20] 	      1387	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	ELSE_2	IF_11	CALL_13
0x400230d	      0x488b742428	            mov rsi, qword [rsp + 0x28] 	      1387	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	ELSE_2	IF_11	CALL_13
0x4002312	      0xe800000000	                          call 0x4002317	      1387	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	ELSE_2	IF_11	CALL_13
0x4002317	          0x4989e8	                             mov r8, rbp	      1387	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	ELSE_2	IF_11	CALL_13
0x400231a	          0x4c89e9	                            mov rcx, r13	      1387	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	ELSE_2	IF_11	CALL_13
0x400231d	          0x4889c2	                            mov rdx, rax	      1387	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	ELSE_2	IF_11	CALL_13
0x4002320	    0x488d35000000	                   lea rsi, [0x04002327]	      1387	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	ELSE_2	IF_11	CALL_13
0x4002327	          0x4889df	                            mov rdi, rbx	      1387	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	ELSE_2	IF_11	CALL_13
0x400232a	      0xb800000000	                              mov eax, 0	      1387	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	ELSE_2	IF_11	CALL_13
0x400232f	      0xe800000000	                          call 0x4002334	      1387	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	ELSE_2	IF_11	CALL_13
0x4002334	            0xeb3e	                           jmp 0x4002374	      1387	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	ELSE_2	IF_11	CALL_13
0x4002336	    0x488babe00000	            mov rbp, qword [rbx + 0xe0] 	      1394	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	ELSE_2	ELSE_3	CALL_15
0x400233d	    0x488b93e80b00	           mov rdx, qword [rbx + 0xbe8] 	      1394	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	ELSE_2	ELSE_3	CALL_15
0x4002344	    0x488b8bf00b00	           mov rcx, qword [rbx + 0xbf0] 	      1394	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	ELSE_2	ELSE_3	CALL_15
0x400234b	      0x488b7c2420	            mov rdi, qword [rsp + 0x20] 	      1394	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	ELSE_2	ELSE_3	CALL_15
0x4002350	      0x488b742428	            mov rsi, qword [rsp + 0x28] 	      1394	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	ELSE_2	ELSE_3	CALL_15
0x4002355	      0xe800000000	                          call 0x400235a	      1394	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	ELSE_2	ELSE_3	CALL_15
0x400235a	          0x4889e9	                            mov rcx, rbp	      1394	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	ELSE_2	ELSE_3	CALL_15
0x400235d	          0x4889c2	                            mov rdx, rax	      1394	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	ELSE_2	ELSE_3	CALL_15
0x4002360	    0x488d35000000	                   lea rsi, [0x04002367]	      1394	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	ELSE_2	ELSE_3	CALL_15
0x4002367	          0x4889df	                            mov rdi, rbx	      1394	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	ELSE_2	ELSE_3	CALL_15
0x400236a	      0xb800000000	                              mov eax, 0	      1394	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	ELSE_2	ELSE_3	CALL_15
0x400236f	      0xe800000000	                          call 0x4002374	      1394	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	ELSE_2	ELSE_3	CALL_15
0x4002374	    0x41be00000000	                             mov r14d, 0	      1325	multi.c	FUNCTION_32	DO_1
0x400237a	        0x837b4809	               cmp dword [rbx + 0x48], 9	      1402	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	IF_12
0x400237e	            0x7614	                           jbe 0x4002394	      1402	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	IF_12
0x4002380	        0x488b7b10	            mov rdi, qword [rbx + 0x10] 	      1403	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	IF_12	CALL_17
0x4002384	      0xbe02000000	                              mov esi, 2	      1403	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	IF_12	CALL_17
0x4002389	      0xe800000000	                          call 0x400238e	      1403	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	IF_12	CALL_17
0x400238e	    0x41be01000000	                             mov r14d, 1	      1404	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	IF_12
0x4002394	        0x488d7b10	                   lea rdi, [rbx + 0x10]	      1407	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	CALL_18
0x4002398	      0xba01000000	                              mov edx, 1	      1407	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	CALL_18
0x400239d	      0xbe1c000000	                           mov esi, 0x1c	      1407	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	CALL_18
0x40023a2	      0xe83bf6ffff	                     call sym.multi_done	      1407	multi.c	FUNCTION_32	DO_1	IF_7	IF_8	CALL_18
0x40023a7	    0x41bd1c000000	                          mov r13d, 0x1c	      1406	multi.c	FUNCTION_32	DO_1	IF_7	IF_8
0x40023ad	      0xe934110000	                           jmp 0x40034e6	      1409	multi.c	FUNCTION_32	DO_1	IF_7	IF_8
0x40023b2	        0x837b4812	           cmp dword [rbx + 0x48], 0x12 	      1413	multi.c	FUNCTION_32	DO_1	SWITCH_1
0x40023b6	     0xf8734100000	                            ja 0x40033f0	      1413	multi.c	FUNCTION_32	DO_1	SWITCH_1
0x40023bc	          0x8b5348	            mov edx, dword [rbx + 0x48] 	      1413	multi.c	FUNCTION_32	DO_1	SWITCH_1
0x40023bf	    0x488d05000000	                   lea rax, [0x040023c6]	      1413	multi.c	FUNCTION_32	DO_1	SWITCH_1
0x40023c6	        0x48631490	         movsxd rdx, dword [rax + rdx*4]	      1413	multi.c	FUNCTION_32	DO_1	SWITCH_1
0x40023ca	          0x4801d0	                            add rax, rdx	      1413	multi.c	FUNCTION_32	DO_1	SWITCH_1
0x40023cd	            0xffe0	                                 jmp rax	      1413	multi.c	FUNCTION_32	DO_1	SWITCH_1
0x40023cf	          0x4889df	                            mov rdi, rbx	      1416	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_19
0x40023d2	      0xe800000000	                          call 0x40023d7	      1416	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_19
0x40023d7	          0x4189c5	                           mov r13d, eax	      1416	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_19
0x40023da	    0x41be00000000	                             mov r14d, 0	      1325	multi.c	FUNCTION_32	DO_1
0x40023e0	            0x85c0	                           test eax, eax	      1418	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_13
0x40023e2	     0xf85fe100000	                           jne 0x40034e6	      1418	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_13
0x40023e8	      0xbe02000000	                              mov esi, 2	      1420	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_13
0x40023ed	          0x4889df	                            mov rdi, rbx	      1420	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_13
0x40023f0	      0xe84bdcffff	                         call sym.mstate	      1420	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_13
0x40023f5	      0xbe01000000	                              mov esi, 1	      1421	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_13	CALL_20
0x40023fa	          0x4889df	                            mov rdi, rbx	      1421	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_13	CALL_20
0x40023fd	      0xe800000000	                          call 0x4002402	      1421	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_13	CALL_20
0x4002402	      0xbdffffffff	                     mov ebp, 0xffffffff	      1422	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_13
0x4002407	      0xe9af100000	                           jmp 0x40034bb	      1422	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_13
0x400240c	      0xbe02000000	                              mov esi, 2	      1433	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_21
0x4002411	          0x4889df	                            mov rdi, rbx	      1433	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_21
0x4002414	      0xe800000000	                          call 0x4002419	      1433	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_21
0x4002419	      0x488d4c2437	                   lea rcx, [rsp + 0x37]	      1434	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_22
0x400241e	      0x488d542436	                   lea rdx, [rsp + 0x36]	      1434	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_22
0x4002423	        0x488d7310	                   lea rsi, [rbx + 0x10]	      1434	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_22
0x4002427	          0x4889df	                            mov rdi, rbx	      1434	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_22
0x400242a	      0xe800000000	                          call 0x400242f	      1434	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_22
0x400242f	          0x4189c5	                           mov r13d, eax	      1434	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_22
0x4002432	          0x83f859	                           cmp eax, 0x59	      1436	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_14
0x4002435	            0x752d	                           jne 0x4002464	      1436	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_14
0x4002437	      0xbe01000000	                              mov esi, 1	      1439	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_14
0x400243c	          0x4889df	                            mov rdi, rbx	      1439	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_14
0x400243f	      0xe8fcdbffff	                         call sym.mstate	      1439	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_14
0x4002444	        0x488d4b18	                   lea rcx, [rbx + 0x18]	      1442	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_14	CALL_23
0x4002448	      0x498b742448	            mov rsi, qword [r12 + 0x48] 	      1442	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_14	CALL_23
0x400244d	      0x498d7c2440	                   lea rdi, [r12 + 0x40]	      1442	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_14	CALL_23
0x4002452	          0x4889da	                            mov rdx, rbx	      1442	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_14	CALL_23
0x4002455	      0xe800000000	                          call 0x400245a	      1442	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_14	CALL_23
0x400245a	      0xbd00000000	                              mov ebp, 0	      1326	multi.c	FUNCTION_32	DO_1
0x400245f	      0xe957100000	                           jmp 0x40034bb	      1445	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_14
0x4002464	    0x41be00000000	                             mov r14d, 0	      1325	multi.c	FUNCTION_32	DO_1
0x400246a	            0x85c0	                           test eax, eax	      1448	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_15
0x400246c	     0xf8574100000	                           jne 0x40034e6	      1448	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_15
0x4002472	        0x488b7310	            mov rsi, qword [rbx + 0x10] 	      1450	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_15	CALL_24
0x4002476	          0x4889df	                            mov rdi, rbx	      1450	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_15	CALL_24
0x4002479	      0xe800000000	                          call 0x400247e	      1450	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_15	CALL_24
0x400247e	          0x4189c5	                           mov r13d, eax	      1450	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_15	CALL_24
0x4002481	            0x85c0	                           test eax, eax	      1451	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_15	IF_16
0x4002483	     0xf8547100000	                           jne 0x40034d0	      1451	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_15	IF_16
0x4002489	      0x807c243600	                cmp byte [rsp + 0x36], 0	      1454	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_15	ELSE_4	IF_17
0x400248e	            0x7417	                            je 0x40024a7	      1454	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_15	ELSE_4	IF_17
0x4002490	      0xbe03000000	                              mov esi, 3	      1456	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_15	ELSE_4	IF_17
0x4002495	          0x4889df	                            mov rdi, rbx	      1456	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_15	ELSE_4	IF_17
0x4002498	      0xe8a3dbffff	                         call sym.mstate	      1456	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_15	ELSE_4	IF_17
0x400249d	      0xbd00000000	                              mov ebp, 0	      1326	multi.c	FUNCTION_32	DO_1
0x40024a2	      0xe914100000	                           jmp 0x40034bb	      1326	multi.c	FUNCTION_32	DO_1
0x40024a7	      0x807c243700	                cmp byte [rsp + 0x37], 0	      1463	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_15	ELSE_4	ELSE_5	IF_18
0x40024ac	            0x7428	                            je 0x40024d6	      1463	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_15	ELSE_4	ELSE_5	IF_18
0x40024ae	      0xbe01000000	                              mov esi, 1	      1464	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_15	ELSE_4	ELSE_5	IF_18	CALL_25
0x40024b3	          0x4c89e7	                            mov rdi, r12	      1464	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_15	ELSE_4	ELSE_5	IF_18	CALL_25
0x40024b6	      0xe800000000	                          call 0x40024bb	      1464	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_15	ELSE_4	ELSE_5	IF_18	CALL_25
0x40024bb	            0x3c01	                               cmp al, 1	      1464	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_15	ELSE_4	ELSE_5	IF_18	CALL_25
0x40024bd	            0x19f6	                            sbb esi, esi	      1464	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_15	ELSE_4	ELSE_5	IF_18	CALL_25
0x40024bf	            0xf7d6	                                 not esi	      1464	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_15	ELSE_4	ELSE_5	IF_18	CALL_25
0x40024c1	          0x83c609	                              add esi, 9	      1464	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_15	ELSE_4	ELSE_5	IF_18	CALL_25
0x40024c4	          0x4889df	                            mov rdi, rbx	      1464	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_15	ELSE_4	ELSE_5	IF_18	CALL_25
0x40024c7	      0xe874dbffff	                         call sym.mstate	      1464	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_15	ELSE_4	ELSE_5	IF_18	CALL_25
0x40024cc	      0xbdffffffff	                     mov ebp, 0xffffffff	      1461	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_15	ELSE_4	ELSE_5
0x40024d1	      0xe9e50f0000	                           jmp 0x40034bb	      1461	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_15	ELSE_4	ELSE_5
0x40024d6	        0x488b7b10	            mov rdi, qword [rbx + 0x10] 	      1468	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_15	ELSE_4	ELSE_5	ELSE_6	IF_19	CALL_26
0x40024da	      0xe800000000	                          call 0x40024df	      1468	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_15	ELSE_4	ELSE_5	ELSE_6	IF_19	CALL_26
0x40024df	            0x84c0	                             test al, al	      1468	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_15	ELSE_4	ELSE_5	ELSE_6	IF_19	CALL_26
0x40024e1	            0x7417	                            je 0x40024fa	      1468	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_15	ELSE_4	ELSE_5	ELSE_6	IF_19	CALL_26
0x40024e3	      0xbe05000000	                              mov esi, 5	      1469	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_15	ELSE_4	ELSE_5	ELSE_6	IF_19
0x40024e8	          0x4889df	                            mov rdi, rbx	      1469	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_15	ELSE_4	ELSE_5	ELSE_6	IF_19
0x40024eb	      0xe850dbffff	                         call sym.mstate	      1469	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_15	ELSE_4	ELSE_5	ELSE_6	IF_19
0x40024f0	      0xbdffffffff	                     mov ebp, 0xffffffff	      1461	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_15	ELSE_4	ELSE_5
0x40024f5	      0xe9c10f0000	                           jmp 0x40034bb	      1461	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_15	ELSE_4	ELSE_5
0x40024fa	      0xbe04000000	                              mov esi, 4	      1472	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_15	ELSE_4	ELSE_5	ELSE_6	ELSE_7
0x40024ff	          0x4889df	                            mov rdi, rbx	      1472	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_15	ELSE_4	ELSE_5	ELSE_6	ELSE_7
0x4002502	      0xe839dbffff	                         call sym.mstate	      1472	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_15	ELSE_4	ELSE_5	ELSE_6	ELSE_7
0x4002507	      0xbdffffffff	                     mov ebp, 0xffffffff	      1461	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_15	ELSE_4	ELSE_5
0x400250c	      0xe9aa0f0000	                           jmp 0x40034bb	      1461	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_15	ELSE_4	ELSE_5
0x4002511	    0x48c744244000	               mov qword [rsp + 0x40], 0	      1482	multi.c	FUNCTION_32	DO_1	SWITCH_1
0x400251a	        0x488b6b10	            mov rbp, qword [rbx + 0x10] 	      1483	multi.c	FUNCTION_32	DO_1	SWITCH_1
0x400251e	    0x80bd9e030000	               cmp byte [rbp + 0x39e], 0	      1486	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_20
0x4002525	            0x7409	                            je 0x4002530	      1486	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_20
0x4002527	    0x4c8bad600100	           mov r13, qword [rbp + 0x160] 	      1487	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_20
0x400252e	            0xeb19	                           jmp 0x4002549	      1487	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_20
0x4002530	    0x80bd9b030000	               cmp byte [rbp + 0x39b], 0	      1488	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_8	IF_21
0x4002537	            0x7409	                            je 0x4002542	      1488	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_8	IF_21
0x4002539	    0x4c8bad000100	           mov r13, qword [rbp + 0x100] 	      1489	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_8	IF_21
0x4002540	            0xeb07	                           jmp 0x4002549	      1489	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_8	IF_21
0x4002542	    0x4c8badd80000	            mov r13, qword [rbp + 0xd8] 	      1491	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_9
0x4002549	    0x8b9590010000	           mov edx, dword [rbp + 0x190] 	      1494	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_27
0x400254f	          0x4c89ee	                            mov rsi, r13	      1494	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_27
0x4002552	          0x4889ef	                            mov rdi, rbp	      1494	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_27
0x4002555	      0xe800000000	                          call 0x400255a	      1494	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_27
0x400255a	      0x4889442440	             mov qword [rsp + 0x40], rax	      1494	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_27
0x400255f	          0x4885c0	                           test rax, rax	      1496	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_22
0x4002562	            0x7431	                            je 0x4002595	      1496	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_22
0x4002564	    0x488985280600	           mov qword [rbp + 0x628], rax 	      1498	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_22
0x400256b	    0xc68530060000	               mov byte [rbp + 0x630], 1	      1499	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_22
0x4002572	          0x4c89ea	                            mov rdx, r13	      1502	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_22	CALL_28
0x4002575	    0x488d35000000	                   lea rsi, [0x0400257c]	      1502	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_22	CALL_28
0x400257c	          0x4889df	                            mov rdi, rbx	      1502	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_22	CALL_28
0x400257f	      0xb800000000	                              mov eax, 0	      1502	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_22	CALL_28
0x4002584	      0xe800000000	                          call 0x4002589	      1502	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_22	CALL_28
0x4002589	    0x48837c244000	               cmp qword [rsp + 0x40], 0	      1505	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_23
0x400258f	     0xf85650f0000	                           jne 0x40034fa	      1505	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_23
0x4002595	        0x488b7b10	            mov rdi, qword [rbx + 0x10] 	      1506	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_29
0x4002599	        0x488b3424	                    mov rsi, qword [rsp]	      1506	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_29
0x400259d	      0xe800000000	                          call 0x40025a2	      1506	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_29
0x40025a2	          0x4189c5	                           mov r13d, eax	      1506	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_29
0x40025a5	          0x4889de	                            mov rsi, rbx	      1514	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_30
0x40025a8	          0x4c89e7	                            mov rdi, r12	      1514	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_30
0x40025ab	      0xe888deffff	                   call sym.singlesocket	      1514	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_30
0x40025b0	    0x48837c244000	               cmp qword [rsp + 0x40], 0	      1516	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_24
0x40025b6	            0x747a	                            je 0x4002632	      1516	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_24
0x40025b8	      0x488d742437	                   lea rsi, [rsp + 0x37]	      1519	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_24	CALL_31
0x40025bd	        0x488b7b10	            mov rdi, qword [rbx + 0x10] 	      1519	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_24	CALL_31
0x40025c1	      0xe800000000	                          call 0x40025c6	      1519	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_24	CALL_31
0x40025c6	          0x4189c5	                           mov r13d, eax	      1519	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_24	CALL_31
0x40025c9	            0x85c0	                           test eax, eax	      1521	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_24	IF_25
0x40025cb	            0x740a	                            je 0x40025d7	      1521	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_24	IF_25
0x40025cd	    0x48c743100000	               mov qword [rbx + 0x10], 0	      1524	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_24	IF_25
0x40025d5	            0xeb60	                           jmp 0x4002637	      1524	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_24	IF_25
0x40025d7	      0x807c243700	                cmp byte [rsp + 0x37], 0	      1528	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_24	ELSE_10	IF_26
0x40025dc	            0x7423	                            je 0x4002601	      1528	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_24	ELSE_10	IF_26
0x40025de	      0xbe01000000	                              mov esi, 1	      1529	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_24	ELSE_10	IF_26	CALL_32
0x40025e3	          0x4c89e7	                            mov rdi, r12	      1529	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_24	ELSE_10	IF_26	CALL_32
0x40025e6	      0xe800000000	                          call 0x40025eb	      1529	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_24	ELSE_10	IF_26	CALL_32
0x40025eb	            0x3c01	                               cmp al, 1	      1529	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_24	ELSE_10	IF_26	CALL_32
0x40025ed	            0x19f6	                            sbb esi, esi	      1529	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_24	ELSE_10	IF_26	CALL_32
0x40025ef	            0xf7d6	                                 not esi	      1529	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_24	ELSE_10	IF_26	CALL_32
0x40025f1	          0x83c609	                              add esi, 9	      1529	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_24	ELSE_10	IF_26	CALL_32
0x40025f4	          0x4889df	                            mov rdi, rbx	      1529	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_24	ELSE_10	IF_26	CALL_32
0x40025f7	      0xe844daffff	                         call sym.mstate	      1529	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_24	ELSE_10	IF_26	CALL_32
0x40025fc	      0xe90d0e0000	                           jmp 0x400340e	      1529	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_24	ELSE_10	IF_26	CALL_32
0x4002601	        0x488b7b10	            mov rdi, qword [rbx + 0x10] 	      1533	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_24	ELSE_10	ELSE_11	IF_27	CALL_33
0x4002605	      0xe800000000	                          call 0x400260a	      1533	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_24	ELSE_10	ELSE_11	IF_27	CALL_33
0x400260a	            0x84c0	                             test al, al	      1533	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_24	ELSE_10	ELSE_11	IF_27	CALL_33
0x400260c	            0x7412	                            je 0x4002620	      1533	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_24	ELSE_10	ELSE_11	IF_27	CALL_33
0x400260e	      0xbe05000000	                              mov esi, 5	      1534	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_24	ELSE_10	ELSE_11	IF_27
0x4002613	          0x4889df	                            mov rdi, rbx	      1534	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_24	ELSE_10	ELSE_11	IF_27
0x4002616	      0xe825daffff	                         call sym.mstate	      1534	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_24	ELSE_10	ELSE_11	IF_27
0x400261b	      0xe9ee0d0000	                           jmp 0x400340e	      1534	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_24	ELSE_10	ELSE_11	IF_27
0x4002620	      0xbe04000000	                              mov esi, 4	      1537	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_24	ELSE_10	ELSE_11	ELSE_12
0x4002625	          0x4889df	                            mov rdi, rbx	      1537	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_24	ELSE_10	ELSE_11	ELSE_12
0x4002628	      0xe813daffff	                         call sym.mstate	      1537	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_24	ELSE_10	ELSE_11	ELSE_12
0x400262d	      0xe9dc0d0000	                           jmp 0x400340e	      1537	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_24	ELSE_10	ELSE_11	ELSE_12
0x4002632	          0x4585ed	                         test r13d, r13d	      1542	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_28
0x4002635	            0x740b	                            je 0x4002642	      1542	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_28
0x4002637	    0x41be01000000	                             mov r14d, 1	      1544	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_28
0x400263d	      0xe9a40e0000	                           jmp 0x40034e6	      1544	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_28
0x4002642	      0xbd00000000	                              mov ebp, 0	      1326	multi.c	FUNCTION_32	DO_1
0x4002647	      0xe96f0e0000	                           jmp 0x40034bb	      1548	multi.c	FUNCTION_32	DO_1	SWITCH_1
0x400264c	      0x488d742437	                   lea rsi, [rsp + 0x37]	      1553	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_34
0x4002651	        0x488b7b10	            mov rdi, qword [rbx + 0x10] 	      1553	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_34
0x4002655	      0xe800000000	                          call 0x400265a	      1553	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_34
0x400265a	          0x4189c5	                           mov r13d, eax	      1553	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_34
0x400265d	        0x488b7b10	            mov rdi, qword [rbx + 0x10] 	      1555	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_29
0x4002661	    0x80bfb2030000	               cmp byte [rdi + 0x3b2], 0	      1555	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_29
0x4002668	            0x742a	                            je 0x4002694	      1555	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_29
0x400266a	        0x488d7b10	                   lea rdi, [rbx + 0x10]	      1559	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_29	CALL_35
0x400266e	      0xba00000000	                              mov edx, 0	      1559	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_29	CALL_35
0x4002673	      0xbe00000000	                              mov esi, 0	      1559	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_29	CALL_35
0x4002678	      0xe865f3ffff	                     call sym.multi_done	      1559	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_29	CALL_35
0x400267d	      0xbe02000000	                              mov esi, 2	      1560	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_29
0x4002682	          0x4889df	                            mov rdi, rbx	      1560	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_29
0x4002685	      0xe8b6d9ffff	                         call sym.mstate	      1560	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_29
0x400268a	      0xbdffffffff	                     mov ebp, 0xffffffff	      1556	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_29
0x400268f	      0xe9270e0000	                           jmp 0x40034bb	      1556	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_29
0x4002694	            0x85c0	                           test eax, eax	      1562	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_13	IF_30
0x4002696	     0xf853c0e0000	                           jne 0x40034d8	      1562	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_13	IF_30
0x400269c	    0x83bf78010000	              cmp dword [rdi + 0x178], 2	      1563	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_13	IF_30	IF_31
0x40026a3	            0x7512	                           jne 0x40026b7	      1563	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_13	IF_30	IF_31
0x40026a5	      0xbd00000000	                              mov ebp, 0	      1326	multi.c	FUNCTION_32	DO_1
0x40026aa	    0x80bfb9030000	               cmp byte [rdi + 0x3b9], 0	      1563	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_13	IF_30	IF_31
0x40026b1	     0xf84040e0000	                            je 0x40034bb	      1563	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_13	IF_30	IF_31
0x40026b7	      0xe800000000	                          call 0x40026bc	      1565	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_13	IF_30	IF_31	CALL_36
0x40026bc	      0xbd00000000	                              mov ebp, 0	      1326	multi.c	FUNCTION_32	DO_1
0x40026c1	            0x84c0	                             test al, al	      1564	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_13	IF_30	IF_31
0x40026c3	     0xf84f20d0000	                            je 0x40034bb	      1564	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_13	IF_30	IF_31
0x40026c9	      0xbe06000000	                              mov esi, 6	      1568	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_13	IF_30	IF_31
0x40026ce	          0x4889df	                            mov rdi, rbx	      1568	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_13	IF_30	IF_31
0x40026d1	      0xe86ad9ffff	                         call sym.mstate	      1568	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_13	IF_30	IF_31
0x40026d6	      0xbdffffffff	                     mov ebp, 0xffffffff	      1566	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_13	IF_30	IF_31
0x40026db	      0xe9db0d0000	                           jmp 0x40034bb	      1566	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_13	IF_30	IF_31
0x40026e0	      0x488d542435	                   lea rdx, [rsp + 0x35]	      1576	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_37
0x40026e5	        0x488b7b10	            mov rdi, qword [rbx + 0x10] 	      1576	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_37
0x40026e9	      0xbe00000000	                              mov esi, 0	      1576	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_37
0x40026ee	      0xe800000000	                          call 0x40026f3	      1576	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_37
0x40026f3	          0x4189c5	                           mov r13d, eax	      1576	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_37
0x40026f6	            0x85c0	                           test eax, eax	      1577	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_32
0x40026f8	            0x756d	                           jne 0x4002767	      1577	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_32
0x40026fa	      0x807c243500	                cmp byte [rsp + 0x35], 0	      1577	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_32
0x40026ff	            0x7466	                            je 0x4002767	      1577	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_32
0x4002701	        0x488b7b10	            mov rdi, qword [rbx + 0x10] 	      1579	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_32	IF_33
0x4002705	    0x83bf78010000	              cmp dword [rdi + 0x178], 2	      1579	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_32	IF_33
0x400270c	            0x7509	                           jne 0x4002717	      1579	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_32	IF_33
0x400270e	    0x80bfb9030000	               cmp byte [rdi + 0x3b9], 0	      1579	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_32	IF_33
0x4002715	            0x7409	                            je 0x4002720	      1579	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_32	IF_33
0x4002717	      0xe800000000	                          call 0x400271c	      1581	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_32	IF_33	CALL_38
0x400271c	            0x84c0	                             test al, al	      1580	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_32	IF_33
0x400271e	            0x741d	                            je 0x400273d	      1580	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_32	IF_33
0x4002720	      0xbe05000000	                              mov esi, 5	      1582	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_32	IF_33
0x4002725	          0x4889df	                            mov rdi, rbx	      1582	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_32	IF_33
0x4002728	      0xe813d9ffff	                         call sym.mstate	      1582	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_32	IF_33
0x400272d	    0x41be00000000	                             mov r14d, 0	      1325	multi.c	FUNCTION_32	DO_1
0x4002733	      0xbd00000000	                              mov ebp, 0	      1326	multi.c	FUNCTION_32	DO_1
0x4002738	      0xe93f0b0000	                           jmp 0x400327c	      1583	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_32	IF_33
0x400273d	        0x488b4310	            mov rax, qword [rbx + 0x10] 	      1587	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_32
0x4002741	    0x80b8a9030000	               cmp byte [rax + 0x3a9], 1	      1587	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_32
0x4002748	            0x19f6	                            sbb esi, esi	      1587	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_32
0x400274a	            0xf7d6	                                 not esi	      1587	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_32
0x400274c	          0x83c606	                              add esi, 6	      1587	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_32
0x400274f	          0x4889df	                            mov rdi, rbx	      1587	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_32
0x4002752	      0xe8e9d8ffff	                         call sym.mstate	      1587	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_32
0x4002757	    0x41be00000000	                             mov r14d, 0	      1325	multi.c	FUNCTION_32	DO_1
0x400275d	      0xbdffffffff	                     mov ebp, 0xffffffff	      1586	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_32
0x4002762	      0xe9150b0000	                           jmp 0x400327c	      1587	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_32
0x4002767	          0x4585ed	                         test r13d, r13d	      1591	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_14	IF_34
0x400276a	        0x410f95c6	                              setne r14b	      1591	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_14	IF_34
0x400276e	      0xbd00000000	                              mov ebp, 0	      1326	multi.c	FUNCTION_32	DO_1
0x4002773	      0xe9040b0000	                           jmp 0x400327c	      1326	multi.c	FUNCTION_32	DO_1
0x4002778	      0x488d742437	                   lea rsi, [rsp + 0x37]	      1600	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_39
0x400277d	        0x488b7b10	            mov rdi, qword [rbx + 0x10] 	      1600	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_39
0x4002781	      0xe800000000	                          call 0x4002786	      1600	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_39
0x4002786	          0x4189c5	                           mov r13d, eax	      1600	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_39
0x4002789	      0x807c243700	                cmp byte [rsp + 0x37], 0	      1601	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_35
0x400278e	            0x751d	                           jne 0x40027ad	      1601	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_35
0x4002790	      0xbe07000000	                              mov esi, 7	      1603	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_35
0x4002795	          0x4889df	                            mov rdi, rbx	      1603	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_35
0x4002798	      0xe8a3d8ffff	                         call sym.mstate	      1603	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_35
0x400279d	    0x41be00000000	                             mov r14d, 0	      1325	multi.c	FUNCTION_32	DO_1
0x40027a3	      0xbd00000000	                              mov ebp, 0	      1326	multi.c	FUNCTION_32	DO_1
0x40027a8	      0xe9cf0a0000	                           jmp 0x400327c	      1326	multi.c	FUNCTION_32	DO_1
0x40027ad	            0x85c0	                           test eax, eax	      1604	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_15	IF_36
0x40027af	            0x7528	                           jne 0x40027d9	      1604	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_15	IF_36
0x40027b1	      0xbe01000000	                              mov esi, 1	      1606	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_15	IF_36	CALL_40
0x40027b6	          0x4c89e7	                            mov rdi, r12	      1606	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_15	IF_36	CALL_40
0x40027b9	      0xe800000000	                          call 0x40027be	      1606	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_15	IF_36	CALL_40
0x40027be	            0x3c01	                               cmp al, 1	      1606	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_15	IF_36	CALL_40
0x40027c0	            0x19f6	                            sbb esi, esi	      1606	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_15	IF_36	CALL_40
0x40027c2	            0xf7d6	                                 not esi	      1606	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_15	IF_36	CALL_40
0x40027c4	          0x83c609	                              add esi, 9	      1606	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_15	IF_36	CALL_40
0x40027c7	          0x4889df	                            mov rdi, rbx	      1606	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_15	IF_36	CALL_40
0x40027ca	      0xe871d8ffff	                         call sym.mstate	      1606	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_15	IF_36	CALL_40
0x40027cf	      0xbdffffffff	                     mov ebp, 0xffffffff	      1608	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_15	IF_36
0x40027d4	      0xe9e20c0000	                           jmp 0x40034bb	      1608	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_15	IF_36
0x40027d9	          0x4889df	                            mov rdi, rbx	      1612	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_16	IF_37	CALL_41
0x40027dc	      0xe800000000	                          call 0x40027e1	      1612	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_16	IF_37	CALL_41
0x40027e1	        0x488d7b10	                   lea rdi, [rbx + 0x10]	      1613	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_16	IF_37	CALL_42
0x40027e5	      0xba01000000	                              mov edx, 1	      1613	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_16	IF_37	CALL_42
0x40027ea	          0x4489ee	                           mov esi, r13d	      1613	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_16	IF_37	CALL_42
0x40027ed	      0xe8f0f1ffff	                     call sym.multi_done	      1613	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_16	IF_37	CALL_42
0x40027f2	    0x41be01000000	                             mov r14d, 1	      1614	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_16	IF_37
0x40027f8	      0xe9e90c0000	                           jmp 0x40034e6	      1614	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_16	IF_37
0x40027fd	      0x488d742437	                   lea rsi, [rsp + 0x37]	      1620	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_43
0x4002802	        0x488b7b10	            mov rdi, qword [rbx + 0x10] 	      1620	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_43
0x4002806	      0xe800000000	                          call 0x400280b	      1620	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_43
0x400280b	          0x4189c5	                           mov r13d, eax	      1620	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_43
0x400280e	            0x85c0	                           test eax, eax	      1621	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_38
0x4002810	            0x7533	                           jne 0x4002845	      1621	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_38
0x4002812	      0x807c243700	                cmp byte [rsp + 0x37], 0	      1621	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_38
0x4002817	     0xf84210d0000	                            je 0x400353e	      1621	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_38
0x400281d	      0xbe01000000	                              mov esi, 1	      1623	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_38	CALL_44
0x4002822	          0x4c89e7	                            mov rdi, r12	      1623	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_38	CALL_44
0x4002825	      0xe800000000	                          call 0x400282a	      1623	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_38	CALL_44
0x400282a	            0x3c01	                               cmp al, 1	      1623	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_38	CALL_44
0x400282c	            0x19f6	                            sbb esi, esi	      1623	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_38	CALL_44
0x400282e	            0xf7d6	                                 not esi	      1623	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_38	CALL_44
0x4002830	          0x83c609	                              add esi, 9	      1623	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_38	CALL_44
0x4002833	          0x4889df	                            mov rdi, rbx	      1623	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_38	CALL_44
0x4002836	      0xe805d8ffff	                         call sym.mstate	      1623	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_38	CALL_44
0x400283b	      0xbdffffffff	                     mov ebp, 0xffffffff	      1625	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_38
0x4002840	      0xe9760c0000	                           jmp 0x40034bb	      1625	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_38
0x4002845	          0x4889df	                            mov rdi, rbx	      1629	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_17	IF_39	CALL_45
0x4002848	      0xe800000000	                          call 0x400284d	      1629	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_17	IF_39	CALL_45
0x400284d	        0x488d7b10	                   lea rdi, [rbx + 0x10]	      1630	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_17	IF_39	CALL_46
0x4002851	      0xba01000000	                              mov edx, 1	      1630	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_17	IF_39	CALL_46
0x4002856	          0x4489ee	                           mov esi, r13d	      1630	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_17	IF_39	CALL_46
0x4002859	      0xe884f1ffff	                     call sym.multi_done	      1630	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_17	IF_39	CALL_46
0x400285e	    0x41be01000000	                             mov r14d, 1	      1631	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_17	IF_39
0x4002864	      0xe97d0c0000	                           jmp 0x40034e6	      1631	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_17	IF_39
0x4002869	        0x488b7310	            mov rsi, qword [rbx + 0x10] 	      1637	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_40	CALL_47
0x400286d	          0x4889df	                            mov rdi, rbx	      1637	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_40	CALL_47
0x4002870	      0xe800000000	                          call 0x4002875	      1637	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_40	CALL_47
0x4002875	    0x41be00000000	                             mov r14d, 0	      1325	multi.c	FUNCTION_32	DO_1
0x400287b	      0xbd00000000	                              mov ebp, 0	      1326	multi.c	FUNCTION_32	DO_1
0x4002880	            0x84c0	                             test al, al	      1637	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_40	CALL_47
0x4002882	     0xf84f4090000	                            je 0x400327c	      1637	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_40	CALL_47
0x4002888	      0xbe09000000	                              mov esi, 9	      1639	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_40
0x400288d	          0x4889df	                            mov rdi, rbx	      1639	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_40
0x4002890	      0xe8abd7ffff	                         call sym.mstate	      1639	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_40
0x4002895	      0xbdffffffff	                     mov ebp, 0xffffffff	      1640	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_40
0x400289a	      0xe9dd090000	                           jmp 0x400327c	      1640	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_40
0x400289f	    0x80bb01080000	               cmp byte [rbx + 0x801], 0	      1645	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_41
0x40028a6	            0x7425	                            je 0x40028cd	      1645	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_41
0x40028a8	        0x488b7b10	            mov rdi, qword [rbx + 0x10] 	      1647	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_41	CALL_48
0x40028ac	      0xbe00000000	                              mov esi, 0	      1647	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_41	CALL_48
0x40028b1	      0xe800000000	                          call 0x40028b6	      1647	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_41	CALL_48
0x40028b6	      0xbe10000000	                           mov esi, 0x10	      1648	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_41
0x40028bb	          0x4889df	                            mov rdi, rbx	      1648	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_41
0x40028be	      0xe87dd7ffff	                         call sym.mstate	      1648	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_41
0x40028c3	      0xbdffffffff	                     mov ebp, 0xffffffff	      1650	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_41
0x40028c8	      0xe9ee0b0000	                           jmp 0x40034bb	      1650	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_41
0x40028cd	        0x488d4310	                   lea rax, [rbx + 0x10]	      1654	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	CALL_49
0x40028d1	      0x4889442418	             mov qword [rsp + 0x18], rax	      1654	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	CALL_49
0x40028d6	        0x488b6b10	            mov rbp, qword [rbx + 0x10] 	      1239	multi.c	FUNCTION_30
0x40028da	    0x488b85e00300	           mov rax, qword [rbp + 0x3e0] 	      1242	multi.c	FUNCTION_30	IF_1
0x40028e1	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1242	multi.c	FUNCTION_30	IF_1
0x40028e5	          0x4885c0	                           test rax, rax	      1242	multi.c	FUNCTION_30	IF_1
0x40028e8	     0xf842a0b0000	                            je 0x4003418	      1242	multi.c	FUNCTION_30	IF_1
0x40028ee	        0x4c8b7500	                    mov r14, qword [rbp]	      1240	multi.c	FUNCTION_30
0x40028f2	      0x488d742438	                   lea rsi, [rsp + 0x38]	      1244	multi.c	FUNCTION_30	IF_1	CALL_1
0x40028f7	          0x4889ef	                            mov rdi, rbp	      1244	multi.c	FUNCTION_30	IF_1	CALL_1
0x40028fa	            0xffd0	                                call rax	      1244	multi.c	FUNCTION_30	IF_1	CALL_1
0x40028fc	          0x4189c5	                           mov r13d, eax	      1244	multi.c	FUNCTION_30	IF_1	CALL_1
0x40028ff	          0x83f837	                           cmp eax, 0x37	      1247	multi.c	FUNCTION_30	IF_1	IF_2
0x4002902	     0xf850f0c0000	                           jne 0x4003517	      1247	multi.c	FUNCTION_30	IF_1	IF_2
0x4002908	    0x80bd9a030000	               cmp byte [rbp + 0x39a], 0	      1247	multi.c	FUNCTION_30	IF_1	IF_2
0x400290f	     0xf843d0c0000	                            je 0x4003552	      1247	multi.c	FUNCTION_30	IF_1	IF_2
0x4002915	    0x4983bea80000	               cmp qword [r14 + 0xa8], 0	      1253	multi.c	FUNCTION_30	IF_1	IF_2	IF_3
0x400291d	     0xf8585010000	                           jne 0x4002aa8	      1253	multi.c	FUNCTION_30	IF_1	IF_2	IF_3
0x4002923	        0x488b4310	            mov rax, qword [rbx + 0x10] 	      1171	multi.c	FUNCTION_28
0x4002927	      0x4889442440	             mov qword [rsp + 0x40], rax	      1171	multi.c	FUNCTION_28
0x400292c	          0x488b28	                    mov rbp, qword [rax]	      1172	multi.c	FUNCTION_28
0x400292f	    0x488d35000000	                   lea rsi, [0x04002936]	      1180	multi.c	FUNCTION_28	CALL_1
0x4002936	          0x4889ef	                            mov rdi, rbp	      1180	multi.c	FUNCTION_28	CALL_1
0x4002939	      0xb800000000	                              mov eax, 0	      1180	multi.c	FUNCTION_28	CALL_1
0x400293e	      0xe800000000	                          call 0x4002943	      1180	multi.c	FUNCTION_28	CALL_1
0x4002943	      0xbe01000000	                              mov esi, 1	      1182	multi.c	FUNCTION_28	CALL_2
0x4002948	      0x488b7c2440	            mov rdi, qword [rsp + 0x40] 	      1182	multi.c	FUNCTION_28	CALL_2
0x400294d	      0xe800000000	                          call 0x4002952	      1182	multi.c	FUNCTION_28	CALL_2
0x4002952	      0xba00000000	                              mov edx, 0	      1183	multi.c	FUNCTION_28	CALL_3
0x4002957	      0xbe00000000	                              mov esi, 0	      1183	multi.c	FUNCTION_28	CALL_3
0x400295c	        0x488b3c24	                    mov rdi, qword [rsp]	      1183	multi.c	FUNCTION_28	CALL_3
0x4002960	      0xe87df0ffff	                     call sym.multi_done	      1183	multi.c	FUNCTION_28	CALL_3
0x4002965	    0x48c743100000	               mov qword [rbx + 0x10], 0	      1187	multi.c	FUNCTION_28
0x400296d	            0x85c0	                           test eax, eax	      1194	multi.c	FUNCTION_28	IF_1
0x400296f	            0x7407	                            je 0x4002978	      1194	multi.c	FUNCTION_28	IF_1
0x4002971	            0x89c2	                            mov edx, eax	      1183	multi.c	FUNCTION_28	CALL_3
0x4002973	          0x83f837	                           cmp eax, 0x37	      1194	multi.c	FUNCTION_28	IF_1
0x4002976	            0x7557	                           jne 0x40029cf	      1194	multi.c	FUNCTION_28	IF_1
0x4002978	      0xc644243b01	                mov byte [rsp + 0x3b], 1	      1196	multi.c	FUNCTION_28	IF_1
0x400297d	      0x488d54243a	                   lea rdx, [rsp + 0x3a]	      1199	multi.c	FUNCTION_28	IF_1	CALL_4
0x4002982	      0x488b4c2408	                mov rcx, qword [rsp + 8]	      1199	multi.c	FUNCTION_28	IF_1	CALL_4
0x4002987	      0x488b742418	            mov rsi, qword [rsp + 0x18] 	      1199	multi.c	FUNCTION_28	IF_1	CALL_4
0x400298c	          0x4889ef	                            mov rdi, rbp	      1199	multi.c	FUNCTION_28	IF_1	CALL_4
0x400298f	      0xe800000000	                          call 0x4002994	      1199	multi.c	FUNCTION_28	IF_1	CALL_4
0x4002994	            0x85c0	                           test eax, eax	      1200	multi.c	FUNCTION_28	IF_1	IF_2
0x4002996	            0x7535	                           jne 0x40029cd	      1200	multi.c	FUNCTION_28	IF_1	IF_2
0x4002998	        0x488b7b10	            mov rdi, qword [rbx + 0x10] 	      1203	multi.c	FUNCTION_28	IF_1	IF_2
0x400299c	      0x48897c2440	             mov qword [rsp + 0x40], rdi	      1203	multi.c	FUNCTION_28	IF_1	IF_2
0x40029a1	      0x807c243a00	                cmp byte [rsp + 0x3a], 0	      1204	multi.c	FUNCTION_28	IF_1	IF_2	IF_3
0x40029a6	            0x7425	                            je 0x40029cd	      1204	multi.c	FUNCTION_28	IF_1	IF_2	IF_3
0x40029a8	      0xbe00000000	                              mov esi, 0	      1207	multi.c	FUNCTION_28	IF_1	IF_2	IF_3	CALL_5
0x40029ad	      0xe800000000	                          call 0x40029b2	      1207	multi.c	FUNCTION_28	IF_1	IF_2	IF_3	CALL_5
0x40029b2	            0x89c2	                            mov edx, eax	      1209	multi.c	FUNCTION_28	IF_1	IF_2	IF_3	IF_4
0x40029b4	            0x85c0	                           test eax, eax	      1208	multi.c	FUNCTION_28	IF_1	IF_2	IF_3	IF_4
0x40029b6	            0x7517	                           jne 0x40029cf	      1208	multi.c	FUNCTION_28	IF_1	IF_2	IF_3	IF_4
0x40029b8	      0x488b742408	                mov rsi, qword [rsp + 8]	      1212	multi.c	FUNCTION_28	IF_1	IF_2	IF_3	CALL_6
0x40029bd	      0x488b7c2440	            mov rdi, qword [rsp + 0x40] 	      1212	multi.c	FUNCTION_28	IF_1	IF_2	IF_3	CALL_6
0x40029c2	      0xe800000000	                          call 0x40029c7	      1212	multi.c	FUNCTION_28	IF_1	IF_2	IF_3	CALL_6
0x40029c7	            0x89c2	                            mov edx, eax	      1214	multi.c	FUNCTION_28	IF_1	IF_2	IF_3	IF_5
0x40029c9	            0x85c0	                           test eax, eax	      1213	multi.c	FUNCTION_28	IF_1	IF_2	IF_3	IF_5
0x40029cb	            0x7502	                           jne 0x40029cf	      1213	multi.c	FUNCTION_28	IF_1	IF_2	IF_3	IF_5
0x40029cd	            0x89c2	                            mov edx, eax	      1213	multi.c	FUNCTION_28	IF_1	IF_2	IF_3	IF_5
0x40029cf	            0x89d0	                            mov eax, edx	      1254	multi.c	FUNCTION_30	IF_1	IF_2	IF_3	CALL_2
0x40029d1	            0x85d2	                           test edx, edx	      1256	multi.c	FUNCTION_30	IF_1	IF_2	IF_3	IF_4
0x40029d3	     0xf85c6000000	                           jne 0x4002a9f	      1256	multi.c	FUNCTION_30	IF_1	IF_2	IF_3	IF_4
0x40029d9	        0x488b6b10	            mov rbp, qword [rbx + 0x10] 	      1258	multi.c	FUNCTION_30	IF_1	IF_2	IF_3	IF_4
0x40029dd	      0x488d742438	                   lea rsi, [rsp + 0x38]	      1260	multi.c	FUNCTION_30	IF_1	IF_2	IF_3	IF_4	CALL_3
0x40029e2	    0x488b85e00300	           mov rax, qword [rbp + 0x3e0] 	      1260	multi.c	FUNCTION_30	IF_1	IF_2	IF_3	IF_4	CALL_3
0x40029e9	          0x4889ef	                            mov rdi, rbp	      1260	multi.c	FUNCTION_30	IF_1	IF_2	IF_3	IF_4	CALL_3
0x40029ec	          0xff5010	                 call qword [rax + 0x10]	      1260	multi.c	FUNCTION_30	IF_1	IF_2	IF_3	IF_4	CALL_3
0x40029ef	            0x85c0	                           test eax, eax	      1267	multi.c	FUNCTION_30	IF_1	IF_5
0x40029f1	     0xf85a8000000	                           jne 0x4002a9f	      1267	multi.c	FUNCTION_30	IF_1	IF_5
0x40029f7	      0x807c243800	                cmp byte [rsp + 0x38], 0	      1267	multi.c	FUNCTION_30	IF_1	IF_5
0x40029fc	            0x740d	                            je 0x4002a0b	      1267	multi.c	FUNCTION_30	IF_1	IF_5
0x40029fe	          0x4889ef	                            mov rdi, rbp	      1269	multi.c	FUNCTION_30	IF_1	CALL_4
0x4002a01	      0xe8badeffff	                    call sym.do_complete	      1269	multi.c	FUNCTION_30	IF_1	CALL_4
0x4002a06	      0xe90d0a0000	                           jmp 0x4003418	      1269	multi.c	FUNCTION_30	IF_1	CALL_4
0x4002a0b	    0x80bbf9500000	              cmp byte [rbx + 0x50f9], 0	      1661	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	IF_42	IF_43	IF_44
0x4002a12	            0x7439	                            je 0x4002a4d	      1661	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	IF_42	IF_43	IF_44
0x4002a14	    0x8b8388510000	          mov eax, dword [rbx + 0x5188] 	      1663	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	IF_42	IF_43	IF_44	IF_45
0x4002a1a	          0x83e0fd	                     and eax, 0xfffffffd	      1663	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	IF_42	IF_43	IF_44	IF_45
0x4002a1d	          0x83f805	                              cmp eax, 5	      1663	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	IF_42	IF_43	IF_44	IF_45
0x4002a20	            0x752b	                           jne 0x4002a4d	      1663	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	IF_42	IF_43	IF_44	IF_45
0x4002a22	      0xba00000000	                              mov edx, 0	      1665	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	IF_42	IF_43	IF_44	IF_45	CALL_50
0x4002a27	      0xbe00000000	                              mov esi, 0	      1665	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	IF_42	IF_43	IF_44	IF_45	CALL_50
0x4002a2c	      0x488b7c2418	            mov rdi, qword [rsp + 0x18] 	      1665	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	IF_42	IF_43	IF_44	IF_45	CALL_50
0x4002a31	      0xe8acefffff	                     call sym.multi_done	      1665	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	IF_42	IF_43	IF_44	IF_45	CALL_50
0x4002a36	      0xbe10000000	                           mov esi, 0x10	      1666	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	IF_42	IF_43	IF_44	IF_45
0x4002a3b	          0x4889df	                            mov rdi, rbx	      1666	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	IF_42	IF_43	IF_44	IF_45
0x4002a3e	      0xe8fdd5ffff	                         call sym.mstate	      1666	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	IF_42	IF_43	IF_44	IF_45
0x4002a43	      0xbdffffffff	                     mov ebp, 0xffffffff	      1667	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	IF_42	IF_43	IF_44	IF_45
0x4002a48	      0xe96e0a0000	                           jmp 0x40034bb	      1668	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	IF_42	IF_43	IF_44	IF_45
0x4002a4d	      0xbe0a000000	                            mov esi, 0xa	      1673	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	IF_42	IF_43
0x4002a52	          0x4889df	                            mov rdi, rbx	      1673	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	IF_42	IF_43
0x4002a55	      0xe8e6d5ffff	                         call sym.mstate	      1673	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	IF_42	IF_43
0x4002a5a	      0xbd00000000	                              mov ebp, 0	      1674	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	IF_42	IF_43
0x4002a5f	      0xe9570a0000	                           jmp 0x40034bb	      1674	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	IF_42	IF_43
0x4002a64	        0x488b4310	            mov rax, qword [rbx + 0x10] 	      1678	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	IF_42	ELSE_19	IF_46
0x4002a68	    0x80b8a4030000	               cmp byte [rax + 0x3a4], 0	      1678	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	IF_42	ELSE_19	IF_46
0x4002a6f	            0x7417	                            je 0x4002a88	      1678	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	IF_42	ELSE_19	IF_46
0x4002a71	      0xbe0b000000	                            mov esi, 0xb	      1681	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	IF_42	ELSE_19	IF_46
0x4002a76	          0x4889df	                            mov rdi, rbx	      1681	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	IF_42	ELSE_19	IF_46
0x4002a79	      0xe8c2d5ffff	                         call sym.mstate	      1681	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	IF_42	ELSE_19	IF_46
0x4002a7e	      0xbd00000000	                              mov ebp, 0	      1682	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	IF_42	ELSE_19	IF_46
0x4002a83	      0xe9330a0000	                           jmp 0x40034bb	      1682	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	IF_42	ELSE_19	IF_46
0x4002a88	      0xbe0c000000	                            mov esi, 0xc	      1686	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	IF_42	ELSE_20
0x4002a8d	          0x4889df	                            mov rdi, rbx	      1686	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	IF_42	ELSE_20
0x4002a90	      0xe8abd5ffff	                         call sym.mstate	      1686	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	IF_42	ELSE_20
0x4002a95	      0xbdffffffff	                     mov ebp, 0xffffffff	      1687	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	IF_42	ELSE_20
0x4002a9a	      0xe91c0a0000	                           jmp 0x40034bb	      1687	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	IF_42	ELSE_20
0x4002a9f	          0x83f837	                           cmp eax, 0x37	      1690	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47
0x4002aa2	     0xf85ca000000	                           jne 0x4002b72	      1690	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47
0x4002aa8	        0x488b7b10	            mov rdi, qword [rbx + 0x10] 	      1691	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47
0x4002aac	    0x80bf9a030000	               cmp byte [rdi + 0x39a], 0	      1690	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47
0x4002ab3	     0xf84bc000000	                            je 0x4002b75	      1690	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47
0x4002ab9	    0x48c744244000	               mov qword [rsp + 0x40], 0	      1697	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47
0x4002ac2	        0x488b3424	                    mov rsi, qword [rsp]	      1702	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47	CALL_51
0x4002ac6	      0xe800000000	                          call 0x4002acb	      1702	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47	CALL_51
0x4002acb	            0x89c5	                            mov ebp, eax	      1702	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47	CALL_51
0x4002acd	            0x85c0	                           test eax, eax	      1703	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47	IF_48
0x4002acf	     0xf8553090000	                           jne 0x4003428	      1703	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47	IF_48
0x4002ad5	      0x488b6c2440	            mov rbp, qword [rsp + 0x40] 	      1709	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47	ELSE_22
0x4002ada	          0x4889df	                            mov rdi, rbx	      1711	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47	CALL_52
0x4002add	      0xe800000000	                          call 0x4002ae2	      1711	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47	CALL_52
0x4002ae2	      0xba00000000	                              mov edx, 0	      1712	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47	CALL_53
0x4002ae7	      0xbe37000000	                           mov esi, 0x37	      1712	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47	CALL_53
0x4002aec	      0x488b7c2418	            mov rdi, qword [rsp + 0x18] 	      1712	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47	CALL_53
0x4002af1	      0xe8eceeffff	                     call sym.multi_done	      1712	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47	CALL_53
0x4002af6	          0x4885ed	                           test rbp, rbp	      1716	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47	IF_49
0x4002af9	            0x743c	                            je 0x4002b37	      1716	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47	IF_49
0x4002afb	            0x85c0	                           test eax, eax	      1717	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47	IF_49	IF_50
0x4002afd	            0x7405	                            je 0x4002b04	      1717	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47	IF_49	IF_50
0x4002aff	          0x83f837	                           cmp eax, 0x37	      1717	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47	IF_49	IF_50
0x4002b02	            0x7540	                           jne 0x4002b44	      1717	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47	IF_49	IF_50
0x4002b04	      0xba02000000	                              mov edx, 2	      1719	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47	IF_49	IF_50	CALL_54
0x4002b09	      0x488b742440	            mov rsi, qword [rsp + 0x40] 	      1719	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47	IF_49	IF_50	CALL_54
0x4002b0e	          0x4889df	                            mov rdi, rbx	      1719	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47	IF_49	IF_50	CALL_54
0x4002b11	      0xe800000000	                          call 0x4002b16	      1719	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47	IF_49	IF_50	CALL_54
0x4002b16	          0x4189c5	                           mov r13d, eax	      1719	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47	IF_49	IF_50	CALL_54
0x4002b19	            0x85c0	                           test eax, eax	      1720	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47	IF_49	IF_50	IF_51
0x4002b1b	            0x7537	                           jne 0x4002b54	      1720	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47	IF_49	IF_50	IF_51
0x4002b1d	      0xbe02000000	                              mov esi, 2	      1721	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47	IF_49	IF_50	IF_51
0x4002b22	          0x4889df	                            mov rdi, rbx	      1721	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47	IF_49	IF_50	IF_51
0x4002b25	      0xe816d5ffff	                         call sym.mstate	      1721	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47	IF_49	IF_50	IF_51
0x4002b2a	    0x41be00000000	                             mov r14d, 0	      1325	multi.c	FUNCTION_32	DO_1
0x4002b30	      0xbdffffffff	                     mov ebp, 0xffffffff	      1722	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47	IF_49	IF_50	IF_51
0x4002b35	            0xeb28	                           jmp 0x4002b5f	      1722	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47	IF_49	IF_50	IF_51
0x4002b37	    0x41be01000000	                             mov r14d, 1	      1737	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47	ELSE_25
0x4002b3d	      0xbd00000000	                              mov ebp, 0	      1326	multi.c	FUNCTION_32	DO_1
0x4002b42	            0xeb1b	                           jmp 0x4002b5f	      1326	multi.c	FUNCTION_32	DO_1
0x4002b44	          0x4189c5	                           mov r13d, eax	      1712	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47	CALL_53
0x4002b47	    0x41be00000000	                             mov r14d, 0	      1325	multi.c	FUNCTION_32	DO_1
0x4002b4d	      0xbd00000000	                              mov ebp, 0	      1326	multi.c	FUNCTION_32	DO_1
0x4002b52	            0xeb0b	                           jmp 0x4002b5f	      1326	multi.c	FUNCTION_32	DO_1
0x4002b54	    0x41be00000000	                             mov r14d, 0	      1325	multi.c	FUNCTION_32	DO_1
0x4002b5a	      0xbd00000000	                              mov ebp, 0	      1326	multi.c	FUNCTION_32	DO_1
0x4002b5f	      0x488b7c2440	            mov rdi, qword [rsp + 0x40] 	      1739	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47	CALL_55
0x4002b64	    0x488b05000000	            mov rax, qword [0x04002b6b] 	      1739	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47	CALL_55
0x4002b6b	            0xff10	                        call qword [rax]	      1739	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47	CALL_55
0x4002b6d	      0xe90a070000	                           jmp 0x400327c	      1691	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47
0x4002b72	          0x4189c5	                           mov r13d, eax	      1691	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47
0x4002b75	          0x4889df	                            mov rdi, rbx	      1743	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_26	CALL_56
0x4002b78	      0xe800000000	                          call 0x4002b7d	      1743	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_26	CALL_56
0x4002b7d	    0x41be01000000	                             mov r14d, 1	      1746	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_26
0x4002b83	      0x48837b1000	               cmp qword [rbx + 0x10], 0	      1744	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_26	IF_52
0x4002b88	     0xf8458090000	                            je 0x40034e6	      1744	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_26	IF_52
0x4002b8e	      0xba00000000	                              mov edx, 0	      1745	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_26	CALL_57
0x4002b93	          0x4489ee	                           mov esi, r13d	      1745	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_26	CALL_57
0x4002b96	      0x488b7c2418	            mov rdi, qword [rsp + 0x18] 	      1745	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_26	CALL_57
0x4002b9b	      0xe842eeffff	                     call sym.multi_done	      1745	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_26	CALL_57
0x4002ba0	      0xe941090000	                           jmp 0x40034e6	      1745	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_26	CALL_57
0x4002ba5	      0x488d742438	                   lea rsi, [rsp + 0x38]	      1753	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_58
0x4002baa	        0x488b7b10	            mov rdi, qword [rbx + 0x10] 	      1753	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_58
0x4002bae	      0xe800000000	                          call 0x4002bb3	      1753	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_58
0x4002bb3	          0x4189c5	                           mov r13d, eax	      1753	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_58
0x4002bb6	            0x85c0	                           test eax, eax	      1755	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_53
0x4002bb8	            0x7534	                           jne 0x4002bee	      1755	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_53
0x4002bba	      0xbd00000000	                              mov ebp, 0	      1326	multi.c	FUNCTION_32	DO_1
0x4002bbf	      0x807c243800	                cmp byte [rsp + 0x38], 0	      1756	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_53	IF_54
0x4002bc4	     0xf84f1080000	                            je 0x40034bb	      1756	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_53	IF_54
0x4002bca	        0x488b4310	            mov rax, qword [rbx + 0x10] 	      1758	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_53	IF_54
0x4002bce	    0x80b8a4030000	               cmp byte [rax + 0x3a4], 1	      1758	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_53	IF_54
0x4002bd5	            0x19f6	                            sbb esi, esi	      1758	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_53	IF_54
0x4002bd7	            0xf7d6	                                 not esi	      1758	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_53	IF_54
0x4002bd9	          0x83c60c	                            add esi, 0xc	      1758	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_53	IF_54
0x4002bdc	          0x4889df	                            mov rdi, rbx	      1758	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_53	IF_54
0x4002bdf	      0xe85cd4ffff	                         call sym.mstate	      1758	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_53	IF_54
0x4002be4	      0xbdffffffff	                     mov ebp, 0xffffffff	      1761	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_53	IF_54
0x4002be9	      0xe9cd080000	                           jmp 0x40034bb	      1761	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_53	IF_54
0x4002bee	          0x4889df	                            mov rdi, rbx	      1766	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_27	CALL_59
0x4002bf1	      0xe800000000	                          call 0x4002bf6	      1766	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_27	CALL_59
0x4002bf6	        0x488d7b10	                   lea rdi, [rbx + 0x10]	      1767	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_27	CALL_60
0x4002bfa	      0xba00000000	                              mov edx, 0	      1767	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_27	CALL_60
0x4002bff	          0x4489ee	                           mov esi, r13d	      1767	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_27	CALL_60
0x4002c02	      0xe8dbedffff	                     call sym.multi_done	      1767	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_27	CALL_60
0x4002c07	    0x41be01000000	                             mov r14d, 1	      1768	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_27
0x4002c0d	      0xe9d4080000	                           jmp 0x40034e6	      1768	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_27
0x4002c12	        0x488b6b10	            mov rbp, qword [rbx + 0x10] 	      1776	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_61
0x4002c16	    0xc744243c0000	               mov dword [rsp + 0x3c], 0	      1289	multi.c	FUNCTION_31
0x4002c1e	    0x488b85e00300	           mov rax, qword [rbp + 0x3e0] 	      1291	multi.c	FUNCTION_31	IF_1
0x4002c25	        0x488b4020	            mov rax, qword [rax + 0x20] 	      1291	multi.c	FUNCTION_31	IF_1
0x4002c29	          0x4885c0	                           test rax, rax	      1291	multi.c	FUNCTION_31	IF_1
0x4002c2c	     0xf8443080000	                            je 0x4003475	      1291	multi.c	FUNCTION_31	IF_1
0x4002c32	          0x4c89fe	                            mov rsi, r15	      1292	multi.c	FUNCTION_31	CALL_1
0x4002c35	          0x4889ef	                            mov rdi, rbp	      1292	multi.c	FUNCTION_31	CALL_1
0x4002c38	            0xffd0	                                call rax	      1292	multi.c	FUNCTION_31	CALL_1
0x4002c3a	          0x4189c5	                           mov r13d, eax	      1292	multi.c	FUNCTION_31	CALL_1
0x4002c3d	            0x85c0	                           test eax, eax	      1294	multi.c	FUNCTION_31	IF_2
0x4002c3f	     0xf850f080000	                           jne 0x4003454	      1294	multi.c	FUNCTION_31	IF_2
0x4002c45	      0x837c243c01	               cmp dword [rsp + 0x3c], 1	      1294	multi.c	FUNCTION_31	IF_2
0x4002c4a	     0xf8507090000	                           jne 0x4003557	      1294	multi.c	FUNCTION_31	IF_2
0x4002c50	          0x4889ef	                            mov rdi, rbp	      1296	multi.c	FUNCTION_31	CALL_2
0x4002c53	      0xe868dcffff	                    call sym.do_complete	      1296	multi.c	FUNCTION_31	CALL_2
0x4002c58	      0xe918080000	                           jmp 0x4003475	      1296	multi.c	FUNCTION_31	CALL_2
0x4002c5d	          0x83f801	                              cmp eax, 1	      1784	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_55	IF_56
0x4002c60	        0x400f94c6	                                sete sil	      1784	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_55	IF_56
0x4002c64	        0x400fb6f6	                          movzx esi, sil	      1784	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_55	IF_56
0x4002c68	        0x8d74360a	              lea esi, [rsi + rsi + 0xa]	      1784	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_55	IF_56
0x4002c6c	            0xeb05	                           jmp 0x4002c73	      1784	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_55	IF_56
0x4002c6e	      0xbe0a000000	                            mov esi, 0xa	      1784	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_55	IF_56
0x4002c73	          0x4889df	                            mov rdi, rbx	      1784	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_55	IF_56
0x4002c76	      0xe8c5d3ffff	                         call sym.mstate	      1784	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_55	IF_56
0x4002c7b	      0xbdffffffff	                     mov ebp, 0xffffffff	      1787	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_55	IF_56
0x4002c80	      0xe936080000	                           jmp 0x40034bb	      1787	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_55	IF_56
0x4002c85	        0x488b7310	            mov rsi, qword [rbx + 0x10] 	      1803	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_64
0x4002c89	          0x4889df	                            mov rdi, rbx	      1803	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_64
0x4002c8c	      0xe800000000	                          call 0x4002c91	      1803	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_64
0x4002c91	        0x488b4310	            mov rax, qword [rbx + 0x10] 	      1805	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_57
0x4002c95	    0x80b8b5030000	               cmp byte [rax + 0x3b5], 0	      1805	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_57
0x4002c9c	            0x750a	                           jne 0x4002ca8	      1805	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_57
0x4002c9e	    0x4883b8700400	              cmp qword [rax + 0x470], 0	      1805	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_57
0x4002ca6	            0x7408	                            je 0x4002cb0	      1805	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_57
0x4002ca8	          0x4c89e7	                            mov rdi, r12	      1807	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_65
0x4002cab	      0xe8e9ecffff	        call sym.process_pending_handles	      1807	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_65
0x4002cb0	        0x488b4310	            mov rax, qword [rbx + 0x10] 	      1811	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_58
0x4002cb4	    0x4883b8f80300	cmp qword [rax + 0x3f8], 0xffffffffffffffff	      1811	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_58
0x4002cbc	            0x741d	                            je 0x4002cdb	      1811	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_58
0x4002cbe	      0xbe0d000000	                            mov esi, 0xd	      1813	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_58
0x4002cc3	          0x4889df	                            mov rdi, rbx	      1813	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_58
0x4002cc6	      0xe875d3ffff	                         call sym.mstate	      1813	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_58
0x4002ccb	    0x41be00000000	                             mov r14d, 0	      1325	multi.c	FUNCTION_32	DO_1
0x4002cd1	      0xbdffffffff	                     mov ebp, 0xffffffff	      1821	multi.c	FUNCTION_32	DO_1	SWITCH_1
0x4002cd6	      0xe9a1050000	                           jmp 0x400327c	      1821	multi.c	FUNCTION_32	DO_1	SWITCH_1
0x4002cdb	    0x80bbf9500000	              cmp byte [rbx + 0x50f9], 0	      1815	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_30	IF_59
0x4002ce2	            0x741a	                            je 0x4002cfe	      1815	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_30	IF_59
0x4002ce4	    0x488b80e00300	           mov rax, qword [rax + 0x3e0] 	      1816	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_30	IF_59
0x4002ceb	    0xf68085000000	           test byte [rax + 0x85], 0x10 	      1815	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_30	IF_59
0x4002cf2	            0x750a	                           jne 0x4002cfe	      1815	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_30	IF_59
0x4002cf4	    0xc78388510000	            mov dword [rbx + 0x5188], 7 	      1817	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_30	IF_59
0x4002cfe	      0xbe10000000	                           mov esi, 0x10	      1819	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_30
0x4002d03	          0x4889df	                            mov rdi, rbx	      1819	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_30
0x4002d06	      0xe835d3ffff	                         call sym.mstate	      1819	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_30
0x4002d0b	    0x41be00000000	                             mov r14d, 0	      1325	multi.c	FUNCTION_32	DO_1
0x4002d11	      0xbdffffffff	                     mov ebp, 0xffffffff	      1821	multi.c	FUNCTION_32	DO_1	SWITCH_1
0x4002d16	      0xe961050000	                           jmp 0x400327c	      1821	multi.c	FUNCTION_32	DO_1	SWITCH_1
0x4002d1b	        0x488b7310	            mov rsi, qword [rbx + 0x10] 	      1826	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_60	CALL_66
0x4002d1f	          0x4889df	                            mov rdi, rbx	      1826	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_60	CALL_66
0x4002d22	      0xe800000000	                          call 0x4002d27	      1826	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_60	CALL_66
0x4002d27	    0x41be00000000	                             mov r14d, 0	      1325	multi.c	FUNCTION_32	DO_1
0x4002d2d	      0xbd00000000	                              mov ebp, 0	      1326	multi.c	FUNCTION_32	DO_1
0x4002d32	            0x84c0	                             test al, al	      1826	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_60	CALL_66
0x4002d34	     0xf8442050000	                            je 0x400327c	      1826	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_60	CALL_66
0x4002d3a	      0xbe0e000000	                            mov esi, 0xe	      1828	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_60
0x4002d3f	          0x4889df	                            mov rdi, rbx	      1828	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_60
0x4002d42	      0xe8f9d2ffff	                         call sym.mstate	      1828	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_60
0x4002d47	      0xbdffffffff	                     mov ebp, 0xffffffff	      1829	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_60
0x4002d4c	      0xe92b050000	                           jmp 0x400327c	      1829	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_60
0x4002d51	        0x488b7b10	            mov rdi, qword [rbx + 0x10] 	      1835	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_61	CALL_67
0x4002d55	      0xe800000000	                          call 0x4002d5a	      1835	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_61	CALL_67
0x4002d5a	            0x85c0	                           test eax, eax	      1835	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_61	CALL_67
0x4002d5c	     0xf85c2070000	                           jne 0x4003524	      1835	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_61	CALL_67
0x4002d62	      0x488b742420	            mov rsi, qword [rsp + 0x20] 	      1838	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_68
0x4002d67	      0x488b542428	            mov rdx, qword [rsp + 0x28] 	      1838	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_68
0x4002d6c	          0x4889df	                            mov rdi, rbx	      1838	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_68
0x4002d6f	      0xe800000000	                          call 0x4002d74	      1838	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_68
0x4002d74	          0x4189c5	                           mov r13d, eax	      1838	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_68
0x4002d77	            0x85c0	                           test eax, eax	      1840	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62
0x4002d79	     0xf8561070000	                           jne 0x40034e0	      1840	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62
0x4002d7f	    0x488b93800300	           mov rdx, qword [rbx + 0x380] 	      1842	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	IF_63
0x4002d86	          0x4885d2	                           test rdx, rdx	      1842	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	IF_63
0x4002d89	     0xf8ef8060000	                           jle 0x4003487	      1842	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	IF_63
0x4002d8f	    0x488b8b200c00	           mov rcx, qword [rbx + 0xc20] 	      1843	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	IF_63
0x4002d96	    0x488bb3300c00	           mov rsi, qword [rbx + 0xc30] 	      1843	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	IF_63
0x4002d9d	    0x488bbb700b00	           mov rdi, qword [rbx + 0xb70] 	      1843	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	IF_63
0x4002da4	        0xff742428	                 push qword [rsp + 0x28]	      1843	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	IF_63
0x4002da8	        0xff742428	                 push qword [rsp + 0x28]	      1843	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	IF_63
0x4002dac	    0x4c8b83280c00	            mov r8, qword [rbx + 0xc28] 	      1843	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	IF_63
0x4002db3	      0xe800000000	                          call 0x4002db8	      1843	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	IF_63
0x4002db8	          0x4889c5	                            mov rbp, rax	      1843	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	IF_63
0x4002dbb	    0x488b93880300	           mov rdx, qword [rbx + 0x388] 	      1851	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	IF_64
0x4002dc2	        0x4883c410	                           add rsp, 0x10	      1851	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	IF_64
0x4002dc6	      0xb800000000	                              mov eax, 0	      1850	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62
0x4002dcb	          0x4885d2	                           test rdx, rdx	      1851	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	IF_64
0x4002dce	            0x7e2d	                           jle 0x4002dfd	      1851	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	IF_64
0x4002dd0	    0x488b8b380c00	           mov rcx, qword [rbx + 0xc38] 	      1852	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	IF_64
0x4002dd7	    0x488bb3480c00	           mov rsi, qword [rbx + 0xc48] 	      1852	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	IF_64
0x4002dde	    0x488bbb680b00	           mov rdi, qword [rbx + 0xb68] 	      1852	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	IF_64
0x4002de5	        0xff742428	                 push qword [rsp + 0x28]	      1852	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	IF_64
0x4002de9	        0xff742428	                 push qword [rsp + 0x28]	      1852	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	IF_64
0x4002ded	    0x4c8b83400c00	            mov r8, qword [rbx + 0xc40] 	      1852	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	IF_64
0x4002df4	      0xe800000000	                          call 0x4002df9	      1852	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	IF_64
0x4002df9	        0x4883c410	                           add rsp, 0x10	      1852	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	IF_64
0x4002dfd	          0x4885ed	                           test rbp, rbp	      1859	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	IF_65
0x4002e00	            0x752e	                           jne 0x4002e30	      1859	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	IF_65
0x4002e02	          0x4885c0	                           test rax, rax	      1859	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	IF_65
0x4002e05	            0x7529	                           jne 0x4002e30	      1859	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	IF_65
0x4002e07	      0xbe0e000000	                            mov esi, 0xe	      1860	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	IF_65
0x4002e0c	          0x4889df	                            mov rdi, rbx	      1860	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	IF_65
0x4002e0f	      0xe82cd2ffff	                         call sym.mstate	      1860	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	IF_65
0x4002e14	      0x488b742420	            mov rsi, qword [rsp + 0x20] 	      1861	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	IF_65	CALL_71
0x4002e19	      0x488b542428	            mov rdx, qword [rsp + 0x28] 	      1861	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	IF_65	CALL_71
0x4002e1e	          0x4889df	                            mov rdi, rbx	      1861	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	IF_65	CALL_71
0x4002e21	      0xe800000000	                          call 0x4002e26	      1861	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	IF_65	CALL_71
0x4002e26	      0xbd00000000	                              mov ebp, 0	      1326	multi.c	FUNCTION_32	DO_1
0x4002e2b	      0xe98b060000	                           jmp 0x40034bb	      1326	multi.c	FUNCTION_32	DO_1
0x4002e30	          0x4839e8	                            cmp rax, rbp	      1863	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	ELSE_32	IF_66
0x4002e33	            0x7f1a	                            jg 0x4002e4f	      1863	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	ELSE_32	IF_66
0x4002e35	      0xba09000000	                              mov edx, 9	      1864	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	ELSE_32	IF_66
0x4002e3a	          0x4889ee	                            mov rsi, rbp	      1864	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	ELSE_32	IF_66
0x4002e3d	          0x4889df	                            mov rdi, rbx	      1864	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	ELSE_32	IF_66
0x4002e40	      0xe800000000	                          call 0x4002e45	      1864	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	ELSE_32	IF_66
0x4002e45	      0xbd00000000	                              mov ebp, 0	      1326	multi.c	FUNCTION_32	DO_1
0x4002e4a	      0xe96c060000	                           jmp 0x40034bb	      1326	multi.c	FUNCTION_32	DO_1
0x4002e4f	      0xba09000000	                              mov edx, 9	      1866	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	CALL_73
0x4002e54	          0x4889c6	                            mov rsi, rax	      1866	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	CALL_73
0x4002e57	          0x4889df	                            mov rdi, rbx	      1866	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	CALL_73
0x4002e5a	      0xe800000000	                          call 0x4002e5f	      1866	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	CALL_73
0x4002e5f	      0xbd00000000	                              mov ebp, 0	      1326	multi.c	FUNCTION_32	DO_1
0x4002e64	      0xe952060000	                           jmp 0x40034bb	      1326	multi.c	FUNCTION_32	DO_1
0x4002e69	    0x48c744244000	               mov qword [rsp + 0x40], 0	      1872	multi.c	FUNCTION_32	DO_1	SWITCH_1
0x4002e72	      0xc644243b00	                mov byte [rsp + 0x3b], 0	      1874	multi.c	FUNCTION_32	DO_1	SWITCH_1
0x4002e77	    0x488b93800300	           mov rdx, qword [rbx + 0x380] 	      1878	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_67
0x4002e7e	          0x4885d2	                           test rdx, rdx	      1878	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_67
0x4002e81	     0xf8e1a060000	                           jle 0x40034a1	      1878	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_67
0x4002e87	    0x488b8b200c00	           mov rcx, qword [rbx + 0xc20] 	      1879	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_67	CALL_74
0x4002e8e	    0x488bb3300c00	           mov rsi, qword [rbx + 0xc30] 	      1879	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_67	CALL_74
0x4002e95	    0x488bbb700b00	           mov rdi, qword [rbx + 0xb70] 	      1879	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_67	CALL_74
0x4002e9c	        0xff742428	                 push qword [rsp + 0x28]	      1879	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_67	CALL_74
0x4002ea0	        0xff742428	                 push qword [rsp + 0x28]	      1879	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_67	CALL_74
0x4002ea4	    0x4c8b83280c00	            mov r8, qword [rbx + 0xc28] 	      1879	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_67	CALL_74
0x4002eab	      0xe800000000	                          call 0x4002eb0	      1879	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_67	CALL_74
0x4002eb0	          0x4889c5	                            mov rbp, rax	      1879	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_67	CALL_74
0x4002eb3	    0x488b93880300	           mov rdx, qword [rbx + 0x388] 	      1887	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_68
0x4002eba	        0x4883c410	                           add rsp, 0x10	      1887	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_68
0x4002ebe	    0x41be00000000	                             mov r14d, 0	      1886	multi.c	FUNCTION_32	DO_1	SWITCH_1
0x4002ec4	          0x4885d2	                           test rdx, rdx	      1887	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_68
0x4002ec7	            0x7e30	                           jle 0x4002ef9	      1887	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_68
0x4002ec9	    0x488b8b380c00	           mov rcx, qword [rbx + 0xc38] 	      1888	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_68	CALL_75
0x4002ed0	    0x488bb3480c00	           mov rsi, qword [rbx + 0xc48] 	      1888	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_68	CALL_75
0x4002ed7	    0x488bbb680b00	           mov rdi, qword [rbx + 0xb68] 	      1888	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_68	CALL_75
0x4002ede	        0xff742428	                 push qword [rsp + 0x28]	      1888	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_68	CALL_75
0x4002ee2	        0xff742428	                 push qword [rsp + 0x28]	      1888	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_68	CALL_75
0x4002ee6	    0x4c8b83400c00	            mov r8, qword [rbx + 0xc40] 	      1888	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_68	CALL_75
0x4002eed	      0xe800000000	                          call 0x4002ef2	      1888	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_68	CALL_75
0x4002ef2	          0x4989c6	                            mov r14, rax	      1888	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_68	CALL_75
0x4002ef5	        0x4883c410	                           add rsp, 0x10	      1888	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_68	CALL_75
0x4002ef9	          0x4885ed	                           test rbp, rbp	      1894	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_69
0x4002efc	            0x7505	                           jne 0x4002f03	      1894	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_69
0x4002efe	          0x4d85f6	                           test r14, r14	      1894	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_69
0x4002f01	            0x7464	                            je 0x4002f67	      1894	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_69
0x4002f03	      0x488b742420	            mov rsi, qword [rsp + 0x20] 	      1895	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_69	CALL_76
0x4002f08	      0x488b542428	            mov rdx, qword [rsp + 0x28] 	      1895	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_69	CALL_76
0x4002f0d	          0x4889df	                            mov rdi, rbx	      1895	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_69	CALL_76
0x4002f10	      0xe800000000	                          call 0x4002f15	      1895	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_69	CALL_76
0x4002f15	      0xbe0f000000	                            mov esi, 0xf	      1896	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_69
0x4002f1a	          0x4889df	                            mov rdi, rbx	      1896	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_69
0x4002f1d	      0xe81ed1ffff	                         call sym.mstate	      1896	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_69
0x4002f22	          0x4939ee	                            cmp r14, rbp	      1897	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_69	IF_70
0x4002f25	            0x7f20	                            jg 0x4002f47	      1897	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_69	IF_70
0x4002f27	      0xba09000000	                              mov edx, 9	      1898	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_69	CALL_77
0x4002f2c	          0x4889ee	                            mov rsi, rbp	      1898	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_69	CALL_77
0x4002f2f	          0x4889df	                            mov rdi, rbx	      1898	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_69	CALL_77
0x4002f32	      0xe800000000	                          call 0x4002f37	      1898	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_69	CALL_77
0x4002f37	    0x41be00000000	                             mov r14d, 0	      1325	multi.c	FUNCTION_32	DO_1
0x4002f3d	      0xbd00000000	                              mov ebp, 0	      1326	multi.c	FUNCTION_32	DO_1
0x4002f42	      0xe935030000	                           jmp 0x400327c	      1326	multi.c	FUNCTION_32	DO_1
0x4002f47	      0xba09000000	                              mov edx, 9	      1900	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_69	CALL_78
0x4002f4c	          0x4c89f6	                            mov rsi, r14	      1900	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_69	CALL_78
0x4002f4f	          0x4889df	                            mov rdi, rbx	      1900	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_69	CALL_78
0x4002f52	      0xe800000000	                          call 0x4002f57	      1900	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_69	CALL_78
0x4002f57	    0x41be00000000	                             mov r14d, 0	      1325	multi.c	FUNCTION_32	DO_1
0x4002f5d	      0xbd00000000	                              mov ebp, 0	      1326	multi.c	FUNCTION_32	DO_1
0x4002f62	      0xe915030000	                           jmp 0x400327c	      1326	multi.c	FUNCTION_32	DO_1
0x4002f67	        0x488b7b10	            mov rdi, qword [rbx + 0x10] 	      1905	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_79
0x4002f6b	      0x488b4c2408	                mov rcx, qword [rsp + 8]	      1905	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_79
0x4002f70	      0x488b542410	            mov rdx, qword [rsp + 0x10] 	      1905	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_79
0x4002f75	          0x4889de	                            mov rsi, rbx	      1905	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_79
0x4002f78	      0xe800000000	                          call 0x4002f7d	      1905	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_79
0x4002f7d	          0x4189c5	                           mov r13d, eax	      1905	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_79
0x4002f80	    0xf683b4010000	              test byte [rbx + 0x1b4], 1	      1909	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_71
0x4002f87	            0x7509	                           jne 0x4002f92	      1909	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_71
0x4002f89	        0x488b7b10	            mov rdi, qword [rbx + 0x10] 	      1911	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_80
0x4002f8d	      0xe800000000	                          call 0x4002f92	      1911	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_80
0x4002f92	    0xf683b4010000	              test byte [rbx + 0x1b4], 2	      1913	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_72
0x4002f99	            0x7509	                           jne 0x4002fa4	      1913	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_72
0x4002f9b	        0x488b7b10	            mov rdi, qword [rbx + 0x10] 	      1915	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_81
0x4002f9f	      0xe800000000	                          call 0x4002fa4	      1915	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_81
0x4002fa4	        0x4183fd38	                          cmp r13d, 0x38	      1917	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_73
0x4002fa8	            0x7407	                            je 0x4002fb1	      1917	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_73
0x4002faa	      0x807c243900	                cmp byte [rsp + 0x39], 0	      1917	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_73
0x4002faf	            0x7425	                            je 0x4002fd6	      1917	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_73
0x4002fb1	        0x488b7b10	            mov rdi, qword [rbx + 0x10] 	      1922	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_73	CALL_82
0x4002fb5	        0x488b3424	                    mov rsi, qword [rsp]	      1922	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_73	CALL_82
0x4002fb9	      0xe800000000	                          call 0x4002fbe	      1922	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_73	CALL_82
0x4002fbe	            0x85c0	                           test eax, eax	      1923	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_73	IF_74
0x4002fc0	            0x7514	                           jne 0x4002fd6	      1923	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_73	IF_74
0x4002fc2	    0x48837c244000	               cmp qword [rsp + 0x40], 0	      1926	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_73	IF_75
0x4002fc8	            0x740c	                            je 0x4002fd6	      1926	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_73	IF_75
0x4002fca	      0xc644243901	                mov byte [rsp + 0x39], 1	      1930	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_73	IF_75
0x4002fcf	      0xbd01000000	                              mov ebp, 1	      1930	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_73	IF_75
0x4002fd4	            0xeb62	                           jmp 0x4003038	      1930	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_73	IF_75
0x4002fd6	          0x4585ed	                         test r13d, r13d	      1934	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_76
0x4002fd9	            0x744d	                            je 0x4003028	      1934	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_76
0x4002fdb	        0x488b7b10	            mov rdi, qword [rbx + 0x10] 	      1943	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_76	IF_77
0x4002fdf	    0x488b87e00300	           mov rax, qword [rdi + 0x3e0] 	      1943	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_76	IF_77
0x4002fe6	    0xf68084000000	               test byte [rax + 0x84], 2	      1943	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_76	IF_77
0x4002fed	            0x7510	                           jne 0x4002fff	      1943	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_76	IF_77
0x4002fef	        0x4183fd5c	                          cmp r13d, 0x5c	      1943	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_76	IF_77
0x4002ff3	            0x740a	                            je 0x4002fff	      1943	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_76	IF_77
0x4002ff5	      0xbe02000000	                              mov esi, 2	      1945	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_76	CALL_83
0x4002ffa	      0xe800000000	                          call 0x4002fff	      1945	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_76	CALL_83
0x4002fff	          0x4889df	                            mov rdi, rbx	      1947	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_76	CALL_84
0x4003002	      0xe800000000	                          call 0x4003007	      1947	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_76	CALL_84
0x4003007	        0x488d7b10	                   lea rdi, [rbx + 0x10]	      1948	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_76	CALL_85
0x400300b	      0xba01000000	                              mov edx, 1	      1948	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_76	CALL_85
0x4003010	          0x4489ee	                           mov esi, r13d	      1948	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_76	CALL_85
0x4003013	      0xe8cae9ffff	                     call sym.multi_done	      1948	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_76	CALL_85
0x4003018	    0x41be00000000	                             mov r14d, 0	      1325	multi.c	FUNCTION_32	DO_1
0x400301e	      0xbd00000000	                              mov ebp, 0	      1326	multi.c	FUNCTION_32	DO_1
0x4003023	      0xe967010000	                           jmp 0x400318f	      1326	multi.c	FUNCTION_32	DO_1
0x4003028	      0x807c243900	                cmp byte [rsp + 0x39], 0	      1950	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78
0x400302d	     0xf844f010000	                            je 0x4003182	      1950	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78
0x4003033	      0xbd00000000	                              mov ebp, 0	      1950	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78
0x4003038	          0x4889df	                            mov rdi, rbx	      1954	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	CALL_86
0x400303b	      0xe800000000	                          call 0x4003040	      1954	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	CALL_86
0x4003040	        0x488b4310	            mov rax, qword [rbx + 0x10] 	      1957	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	CALL_87
0x4003044	    0x488db0780400	                  lea rsi, [rax + 0x478]	      1957	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	CALL_87
0x400304b	          0x4889df	                            mov rdi, rbx	      1957	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	CALL_87
0x400304e	      0xe800000000	                          call 0x4003053	      1957	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	CALL_87
0x4003053	        0x488b4310	            mov rax, qword [rbx + 0x10] 	      1960	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	IF_79
0x4003057	    0x488b80780400	           mov rax, qword [rax + 0x478] 	      1960	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	IF_79
0x400305e	          0x4885c0	                           test rax, rax	      1960	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	IF_79
0x4003061	            0x7412	                            je 0x4003075	      1960	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	IF_79
0x4003063	      0xba06000000	                              mov edx, 6	      1961	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	CALL_88
0x4003068	      0xbe00000000	                              mov esi, 0	      1961	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	CALL_88
0x400306d	          0x488b38	                    mov rdi, qword [rax]	      1961	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	CALL_88
0x4003070	      0xe800000000	                          call 0x4003075	      1961	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	CALL_88
0x4003075	    0x4883bbc80100	              cmp qword [rbx + 0x1c8], 0	      1965	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	IF_80
0x400307d	            0x7509	                           jne 0x4003088	      1965	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	IF_80
0x400307f	          0x4084ed	                           test bpl, bpl	      1965	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	IF_80
0x4003082	     0xf8493000000	                            je 0x400311b	      1965	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	IF_80
0x4003088	    0xc74424180200	               mov dword [rsp + 0x18], 2	      1975	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	IF_80	ELSE_36
0x4003090	          0x4084ed	                           test bpl, bpl	      1966	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	IF_80	IF_81
0x4003093	            0x752d	                           jne 0x40030c2	      1966	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	IF_80	IF_81
0x4003095	      0x488b7c2440	            mov rdi, qword [rsp + 0x40] 	      1969	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	IF_80	IF_81	CALL_89
0x400309a	    0x488b05000000	            mov rax, qword [0x040030a1] 	      1969	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	IF_80	IF_81	CALL_89
0x40030a1	            0xff10	                        call qword [rax]	      1969	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	IF_80	IF_81	CALL_89
0x40030a3	    0x488b83c80100	           mov rax, qword [rbx + 0x1c8] 	      1970	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	IF_80	IF_81
0x40030aa	      0x4889442440	             mov qword [rsp + 0x40], rax	      1970	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	IF_80	IF_81
0x40030af	    0x48c783c80100	              mov qword [rbx + 0x1c8], 0	      1971	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	IF_80	IF_81
0x40030ba	    0xc74424180300	               mov dword [rsp + 0x18], 3	      1972	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	IF_80	IF_81
0x40030c2	        0x488d7b10	                   lea rdi, [rbx + 0x10]	      1976	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	IF_80	CALL_90
0x40030c6	      0xba00000000	                              mov edx, 0	      1976	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	IF_80	CALL_90
0x40030cb	      0xbe00000000	                              mov esi, 0	      1976	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	IF_80	CALL_90
0x40030d0	      0xe80de9ffff	                     call sym.multi_done	      1976	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	IF_80	CALL_90
0x40030d5	          0x4189c5	                           mov r13d, eax	      1976	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	IF_80	CALL_90
0x40030d8	    0x41be00000000	                             mov r14d, 0	      1325	multi.c	FUNCTION_32	DO_1
0x40030de	      0xbd00000000	                              mov ebp, 0	      1326	multi.c	FUNCTION_32	DO_1
0x40030e3	            0x85c0	                           test eax, eax	      1977	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	IF_80	IF_82
0x40030e5	     0xf85a4000000	                           jne 0x400318f	      1977	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	IF_80	IF_82
0x40030eb	        0x8b542418	            mov edx, dword [rsp + 0x18] 	      1978	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	IF_80	IF_82	CALL_91
0x40030ef	      0x488b742440	            mov rsi, qword [rsp + 0x40] 	      1978	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	IF_80	IF_82	CALL_91
0x40030f4	          0x4889df	                            mov rdi, rbx	      1978	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	IF_80	IF_82	CALL_91
0x40030f7	      0xe800000000	                          call 0x40030fc	      1978	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	IF_80	IF_82	CALL_91
0x40030fc	          0x4189c5	                           mov r13d, eax	      1978	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	IF_80	IF_82	CALL_91
0x40030ff	            0x85c0	                           test eax, eax	      1979	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	IF_80	IF_82	IF_83
0x4003101	     0xf8588000000	                           jne 0x400318f	      1979	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	IF_80	IF_82	IF_83
0x4003107	      0xbe02000000	                              mov esi, 2	      1980	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	IF_80	IF_82	IF_83
0x400310c	          0x4889df	                            mov rdi, rbx	      1980	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	IF_80	IF_82	IF_83
0x400310f	      0xe82ccfffff	                         call sym.mstate	      1980	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	IF_80	IF_82	IF_83
0x4003114	      0xbdffffffff	                     mov ebp, 0xffffffff	      1981	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	IF_80	IF_82	IF_83
0x4003119	            0xeb74	                           jmp 0x400318f	      1981	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	IF_80	IF_82	IF_83
0x400311b	    0x4883bbc00100	              cmp qword [rbx + 0x1c0], 0	      1990	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	ELSE_37	IF_84
0x4003123	            0x743d	                            je 0x4003162	      1990	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	ELSE_37	IF_84
0x4003125	      0x488b7c2440	            mov rdi, qword [rsp + 0x40] 	      1991	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	ELSE_37	IF_84	CALL_92
0x400312a	    0x488b05000000	            mov rax, qword [0x04003131] 	      1991	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	ELSE_37	IF_84	CALL_92
0x4003131	            0xff10	                        call qword [rax]	      1991	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	ELSE_37	IF_84	CALL_92
0x4003133	    0x488bb3c00100	           mov rsi, qword [rbx + 0x1c0] 	      1992	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	ELSE_37	IF_84
0x400313a	      0x4889742440	             mov qword [rsp + 0x40], rsi	      1992	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	ELSE_37	IF_84
0x400313f	    0x48c783c00100	              mov qword [rbx + 0x1c0], 0	      1993	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	ELSE_37	IF_84
0x400314a	      0xba01000000	                              mov edx, 1	      1994	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	ELSE_37	IF_84	CALL_93
0x400314f	          0x4889df	                            mov rdi, rbx	      1994	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	ELSE_37	IF_84	CALL_93
0x4003152	      0xe800000000	                          call 0x4003157	      1994	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	ELSE_37	IF_84	CALL_93
0x4003157	          0x4189c5	                           mov r13d, eax	      1994	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	ELSE_37	IF_84	CALL_93
0x400315a	            0x85c0	                           test eax, eax	      1995	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	ELSE_37	IF_84	IF_85
0x400315c	        0x410f95c6	                              setne r14b	      1995	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	ELSE_37	IF_84	IF_85
0x4003160	            0xeb0c	                           jmp 0x400316e	      1995	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	ELSE_37	IF_84	IF_85
0x4003162	    0x41be00000000	                             mov r14d, 0	      1325	multi.c	FUNCTION_32	DO_1
0x4003168	    0x41bd00000000	                             mov r13d, 0	      1325	multi.c	FUNCTION_32	DO_1
0x400316e	      0xbe10000000	                           mov esi, 0x10	      1999	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	ELSE_37
0x4003173	          0x4889df	                            mov rdi, rbx	      1999	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	ELSE_37
0x4003176	      0xe8c5ceffff	                         call sym.mstate	      1999	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	ELSE_37
0x400317b	      0xbdffffffff	                     mov ebp, 0xffffffff	      2000	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	ELSE_37
0x4003180	            0xeb0d	                           jmp 0x400318f	      2000	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_35	IF_78	ELSE_37
0x4003182	       0xfb66c243b	           movzx ebp, byte [rsp + 0x3b] 	      2003	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_38	IF_86
0x4003187	            0xf7dd	                                 neg ebp	      1326	multi.c	FUNCTION_32	DO_1
0x4003189	    0x41be00000000	                             mov r14d, 0	      1325	multi.c	FUNCTION_32	DO_1
0x400318f	      0x488b7c2440	            mov rdi, qword [rsp + 0x40] 	      2006	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_94
0x4003194	    0x488b05000000	            mov rax, qword [0x0400319b] 	      2006	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_94
0x400319b	            0xff10	                        call qword [rax]	      2006	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_94
0x400319d	      0xe9da000000	                           jmp 0x400327c	      2007	multi.c	FUNCTION_32	DO_1	SWITCH_1
0x40031a2	        0x488b7310	            mov rsi, qword [rbx + 0x10] 	      2014	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_87
0x40031a6	          0x4885f6	                           test rsi, rsi	      2014	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_87
0x40031a9	            0x7455	                            je 0x4003200	      2014	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_87
0x40031ab	    0x4881c6780400	                          add rsi, 0x478	      2018	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_87	CALL_95
0x40031b2	          0x4889df	                            mov rdi, rbx	      2018	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_87	CALL_95
0x40031b5	      0xe800000000	                          call 0x40031ba	      2018	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_87	CALL_95
0x40031ba	        0x488b4310	            mov rax, qword [rbx + 0x10] 	      2020	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_87	IF_88
0x40031be	    0x80b8b5030000	               cmp byte [rax + 0x3b5], 0	      2020	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_87	IF_88
0x40031c5	            0x750a	                           jne 0x40031d1	      2020	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_87	IF_88
0x40031c7	    0x4883b8700400	              cmp qword [rax + 0x470], 0	      2020	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_87	IF_88
0x40031cf	            0x7408	                            je 0x40031d9	      2020	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_87	IF_88
0x40031d1	          0x4c89e7	                            mov rdi, r12	      2022	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_87	CALL_96
0x40031d4	      0xe8c0e7ffff	        call sym.process_pending_handles	      2022	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_87	CALL_96
0x40031d9	        0x488d7b10	                   lea rdi, [rbx + 0x10]	      2025	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_87	CALL_97
0x40031dd	      0xba00000000	                              mov edx, 0	      2025	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_87	CALL_97
0x40031e2	          0x4489ee	                           mov esi, r13d	      2025	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_87	CALL_97
0x40031e5	      0xe8f8e7ffff	                     call sym.multi_done	      2025	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_87	CALL_97
0x40031ea	          0x4585ed	                         test r13d, r13d	      2029	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_87	IF_89
0x40031ed	        0x440f44e8	                         cmove r13d, eax	      2029	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_87	IF_89
0x40031f1	      0x48837b1000	               cmp qword [rbx + 0x10], 0	      2037	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_87	IF_90
0x40031f6	            0x7408	                            je 0x4003200	      2037	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_87	IF_90
0x40031f8	    0x48c743100000	               mov qword [rbx + 0x10], 0	      2038	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_87	IF_90
0x4003200	    0x80bbf9500000	              cmp byte [rbx + 0x50f9], 0	      2041	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_91
0x4003207	            0x7423	                            je 0x400322c	      2041	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_91
0x4003209	    0x83bb88510000	            cmp dword [rbx + 0x5188], 7 	      2042	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_91	IF_92
0x4003210	            0x741a	                            je 0x400322c	      2042	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_91	IF_92
0x4003212	      0xbe00000000	                              mov esi, 0	      2045	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_91	IF_92
0x4003217	          0x4889df	                            mov rdi, rbx	      2045	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_91	IF_92
0x400321a	      0xe821ceffff	                         call sym.mstate	      2045	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_91	IF_92
0x400321f	    0x41be00000000	                             mov r14d, 0	      1325	multi.c	FUNCTION_32	DO_1
0x4003225	      0xbdffffffff	                     mov ebp, 0xffffffff	      2012	multi.c	FUNCTION_32	DO_1	SWITCH_1
0x400322a	            0xeb50	                           jmp 0x400327c	      2046	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_91	IF_92
0x400322c	      0xbe11000000	                           mov esi, 0x11	      2052	multi.c	FUNCTION_32	DO_1	SWITCH_1
0x4003231	          0x4889df	                            mov rdi, rbx	      2052	multi.c	FUNCTION_32	DO_1	SWITCH_1
0x4003234	      0xe807ceffff	                         call sym.mstate	      2052	multi.c	FUNCTION_32	DO_1	SWITCH_1
0x4003239	    0x41be00000000	                             mov r14d, 0	      1325	multi.c	FUNCTION_32	DO_1
0x400323f	      0xbdffffffff	                     mov ebp, 0xffffffff	      2012	multi.c	FUNCTION_32	DO_1	SWITCH_1
0x4003244	            0xeb36	                           jmp 0x400327c	      2053	multi.c	FUNCTION_32	DO_1	SWITCH_1
0x4003246	    0x48c743100000	               mov qword [rbx + 0x10], 0	      2063	multi.c	FUNCTION_32	DO_1	SWITCH_1
0x400324e	          0x4889df	                            mov rdi, rbx	      2065	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_98
0x4003251	      0xe800000000	                          call 0x4003256	      2065	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_98
0x4003256	    0x41be00000000	                             mov r14d, 0	      1325	multi.c	FUNCTION_32	DO_1
0x400325c	      0xbd00000000	                              mov ebp, 0	      1326	multi.c	FUNCTION_32	DO_1
0x4003261	            0xeb19	                           jmp 0x400327c	      2066	multi.c	FUNCTION_32	DO_1	SWITCH_1
0x4003263	        0x44896b4c	            mov dword [rbx + 0x4c], r13d	      2069	multi.c	FUNCTION_32	DO_1	SWITCH_1
0x4003267	      0xb800000000	                              mov eax, 0	      2070	multi.c	FUNCTION_32	DO_1	SWITCH_1
0x400326c	      0xe984010000	                           jmp 0x40033f5	      2070	multi.c	FUNCTION_32	DO_1	SWITCH_1
0x4003271	    0x41be00000000	                             mov r14d, 0	      1325	multi.c	FUNCTION_32	DO_1
0x4003277	      0xbd00000000	                              mov ebp, 0	      1326	multi.c	FUNCTION_32	DO_1
0x400327c	        0x837b4810	           cmp dword [rbx + 0x48], 0x10 	      2077	multi.c	FUNCTION_32	DO_1	IF_93
0x4003280	     0xf8703010000	                            ja 0x4003389	      2077	multi.c	FUNCTION_32	DO_1	IF_93
0x4003286	          0x4585ed	                         test r13d, r13d	      2078	multi.c	FUNCTION_32	DO_1	IF_93	IF_94
0x4003289	     0xf84ac000000	                            je 0x400333b	      2078	multi.c	FUNCTION_32	DO_1	IF_93	IF_94
0x400328f	            0xeb18	                           jmp 0x40032a9	      2078	multi.c	FUNCTION_32	DO_1	IF_93	IF_94
0x4003291	      0xbd00000000	                              mov ebp, 0	      2077	multi.c	FUNCTION_32	DO_1	IF_93
0x4003296	            0xeb11	                           jmp 0x40032a9	      2077	multi.c	FUNCTION_32	DO_1	IF_93
0x4003298	    0x41be00000000	                             mov r14d, 0	      1325	multi.c	FUNCTION_32	DO_1
0x400329e	    0x41bd2a000000	                          mov r13d, 0x2a	      1836	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_61
0x40032a4	      0xbd00000000	                              mov ebp, 0	      1326	multi.c	FUNCTION_32	DO_1
0x40032a9	    0xc68301510000	              mov byte [rbx + 0x5101], 0	      2087	multi.c	FUNCTION_32	DO_1	IF_93	IF_94
0x40032b0	          0x4c89e7	                            mov rdi, r12	      2090	multi.c	FUNCTION_32	DO_1	IF_93	IF_94	CALL_99
0x40032b3	      0xe8e1e6ffff	        call sym.process_pending_handles	      2090	multi.c	FUNCTION_32	DO_1	IF_93	IF_94	CALL_99
0x40032b8	        0x488b7b10	            mov rdi, qword [rbx + 0x10] 	      2092	multi.c	FUNCTION_32	DO_1	IF_93	IF_94	IF_95
0x40032bc	          0x4885ff	                           test rdi, rdi	      2092	multi.c	FUNCTION_32	DO_1	IF_93	IF_94	IF_95
0x40032bf	            0x7458	                            je 0x4003319	      2092	multi.c	FUNCTION_32	DO_1	IF_93	IF_94	IF_95
0x40032c1	      0xe800000000	                          call 0x40032c6	      2094	multi.c	FUNCTION_32	DO_1	IF_93	IF_94	IF_95	CALL_100
0x40032c6	        0x488b7b10	            mov rdi, qword [rbx + 0x10] 	      2095	multi.c	FUNCTION_32	DO_1	IF_93	IF_94	IF_95	CALL_101
0x40032ca	      0xe800000000	                          call 0x40032cf	      2095	multi.c	FUNCTION_32	DO_1	IF_93	IF_94	IF_95	CALL_101
0x40032cf	        0x488b4310	            mov rax, qword [rbx + 0x10] 	      2096	multi.c	FUNCTION_32	DO_1	IF_93	IF_94	IF_95	CALL_102
0x40032d3	    0x488db0580400	                  lea rsi, [rax + 0x458]	      2096	multi.c	FUNCTION_32	DO_1	IF_93	IF_94	IF_95	CALL_102
0x40032da	          0x4889df	                            mov rdi, rbx	      2096	multi.c	FUNCTION_32	DO_1	IF_93	IF_94	IF_95	CALL_102
0x40032dd	      0xe800000000	                          call 0x40032e2	      2096	multi.c	FUNCTION_32	DO_1	IF_93	IF_94	IF_95	CALL_102
0x40032e2	        0x488b4310	            mov rax, qword [rbx + 0x10] 	      2097	multi.c	FUNCTION_32	DO_1	IF_93	IF_94	IF_95	CALL_103
0x40032e6	    0x488db0780400	                  lea rsi, [rax + 0x478]	      2097	multi.c	FUNCTION_32	DO_1	IF_93	IF_94	IF_95	CALL_103
0x40032ed	          0x4889df	                            mov rdi, rbx	      2097	multi.c	FUNCTION_32	DO_1	IF_93	IF_94	IF_95	CALL_103
0x40032f0	      0xe800000000	                          call 0x40032f5	      2097	multi.c	FUNCTION_32	DO_1	IF_93	IF_94	IF_95	CALL_103
0x40032f5	          0x4584f6	                         test r14b, r14b	      2099	multi.c	FUNCTION_32	DO_1	IF_93	IF_94	IF_95	IF_96
0x40032f8	            0x742d	                            je 0x4003327	      2099	multi.c	FUNCTION_32	DO_1	IF_93	IF_94	IF_95	IF_96
0x40032fa	        0x4183fd1c	                          cmp r13d, 0x1c	      2103	multi.c	FUNCTION_32	DO_1	IF_93	IF_94	IF_95	IF_96	CALL_104
0x40032fe	        0x400f94c6	                                sete sil	      2103	multi.c	FUNCTION_32	DO_1	IF_93	IF_94	IF_95	IF_96	CALL_104
0x4003302	        0x400fb6f6	                          movzx esi, sil	      2103	multi.c	FUNCTION_32	DO_1	IF_93	IF_94	IF_95	IF_96	CALL_104
0x4003306	        0x488b7b10	            mov rdi, qword [rbx + 0x10] 	      2103	multi.c	FUNCTION_32	DO_1	IF_93	IF_94	IF_95	IF_96	CALL_104
0x400330a	      0xe800000000	                          call 0x400330f	      2103	multi.c	FUNCTION_32	DO_1	IF_93	IF_94	IF_95	IF_96	CALL_104
0x400330f	    0x48c743100000	               mov qword [rbx + 0x10], 0	      2108	multi.c	FUNCTION_32	DO_1	IF_93	IF_94	IF_95	IF_96
0x4003317	            0xeb0e	                           jmp 0x4003327	      2108	multi.c	FUNCTION_32	DO_1	IF_93	IF_94	IF_95	IF_96
0x4003319	        0x837b4802	               cmp dword [rbx + 0x48], 2	      2111	multi.c	FUNCTION_32	DO_1	IF_93	IF_94	ELSE_39	IF_97
0x400331d	            0x7508	                           jne 0x4003327	      2111	multi.c	FUNCTION_32	DO_1	IF_93	IF_94	ELSE_39	IF_97
0x400331f	          0x4889df	                            mov rdi, rbx	      2113	multi.c	FUNCTION_32	DO_1	IF_93	IF_94	ELSE_39	IF_97	CALL_105
0x4003322	      0xe800000000	                          call 0x4003327	      2113	multi.c	FUNCTION_32	DO_1	IF_93	IF_94	ELSE_39	IF_97	CALL_105
0x4003327	      0xbe11000000	                           mov esi, 0x11	      2116	multi.c	FUNCTION_32	DO_1	IF_93	IF_94
0x400332c	          0x4889df	                            mov rdi, rbx	      2116	multi.c	FUNCTION_32	DO_1	IF_93	IF_94
0x400332f	      0xe80ccdffff	                         call sym.mstate	      2116	multi.c	FUNCTION_32	DO_1	IF_93	IF_94
0x4003334	            0xeb53	                           jmp 0x4003389	      2116	multi.c	FUNCTION_32	DO_1	IF_93	IF_94
0x4003336	      0xbd00000000	                              mov ebp, 0	      1326	multi.c	FUNCTION_32	DO_1
0x400333b	        0x488b7b10	            mov rdi, qword [rbx + 0x10] 	      2119	multi.c	FUNCTION_32	DO_1	IF_93	ELSE_40	IF_98	CALL_106
0x400333f	          0x4885ff	                           test rdi, rdi	      2119	multi.c	FUNCTION_32	DO_1	IF_93	ELSE_40	IF_98	CALL_106
0x4003342	            0x743f	                            je 0x4003383	      2119	multi.c	FUNCTION_32	DO_1	IF_93	ELSE_40	IF_98	CALL_106
0x4003344	      0xe800000000	                          call 0x4003349	      2119	multi.c	FUNCTION_32	DO_1	IF_93	ELSE_40	IF_98	CALL_106
0x4003349	    0x41bd00000000	                             mov r13d, 0	      2119	multi.c	FUNCTION_32	DO_1	IF_93	ELSE_40	IF_98	CALL_106
0x400334f	            0x85c0	                           test eax, eax	      2119	multi.c	FUNCTION_32	DO_1	IF_93	ELSE_40	IF_98	CALL_106
0x4003351	            0x7436	                            je 0x4003389	      2119	multi.c	FUNCTION_32	DO_1	IF_93	ELSE_40	IF_98	CALL_106
0x4003353	        0x488b7b10	            mov rdi, qword [rbx + 0x10] 	      2123	multi.c	FUNCTION_32	DO_1	IF_93	ELSE_40	IF_98	CALL_107
0x4003357	      0xbe02000000	                              mov esi, 2	      2123	multi.c	FUNCTION_32	DO_1	IF_93	ELSE_40	IF_98	CALL_107
0x400335c	      0xe800000000	                          call 0x4003361	      2123	multi.c	FUNCTION_32	DO_1	IF_93	ELSE_40	IF_98	CALL_107
0x4003361	        0x837b4810	           cmp dword [rbx + 0x48], 0x10 	      2126	multi.c	FUNCTION_32	DO_1	IF_93	ELSE_40	IF_98
0x4003365	            0x19f6	                            sbb esi, esi	      2126	multi.c	FUNCTION_32	DO_1	IF_93	ELSE_40	IF_98
0x4003367	          0x83c611	                           add esi, 0x11	      2126	multi.c	FUNCTION_32	DO_1	IF_93	ELSE_40	IF_98
0x400336a	          0x4889df	                            mov rdi, rbx	      2126	multi.c	FUNCTION_32	DO_1	IF_93	ELSE_40	IF_98
0x400336d	      0xe8ceccffff	                         call sym.mstate	      2126	multi.c	FUNCTION_32	DO_1	IF_93	ELSE_40	IF_98
0x4003372	        0x837b4811	           cmp dword [rbx + 0x48], 0x11 	      2132	multi.c	FUNCTION_32	DO_1	IF_99
0x4003376	            0x7419	                            je 0x4003391	      2132	multi.c	FUNCTION_32	DO_1	IF_99
0x4003378	    0x41bd2a000000	                          mov r13d, 0x2a	      2122	multi.c	FUNCTION_32	DO_1	IF_93	ELSE_40	IF_98
0x400337e	      0xe9e4edffff	                           jmp 0x4002167	      2122	multi.c	FUNCTION_32	DO_1	IF_93	ELSE_40	IF_98
0x4003383	    0x41bd00000000	                             mov r13d, 0	      2122	multi.c	FUNCTION_32	DO_1	IF_93	ELSE_40	IF_98
0x4003389	        0x837b4811	           cmp dword [rbx + 0x48], 0x11 	      2132	multi.c	FUNCTION_32	DO_1	IF_99
0x400338d	            0x7541	                           jne 0x40033d0	      2132	multi.c	FUNCTION_32	DO_1	IF_99
0x400338f	            0xeb06	                           jmp 0x4003397	      2132	multi.c	FUNCTION_32	DO_1	IF_99
0x4003391	    0x41bd2a000000	                          mov r13d, 0x2a	      2122	multi.c	FUNCTION_32	DO_1	IF_93	ELSE_40	IF_98
0x4003397	        0x488d5350	                   lea rdx, [rbx + 0x50]	      2134	multi.c	FUNCTION_32	DO_1	IF_99
0x400339b	    0xc74368010000	               mov dword [rbx + 0x68], 1	      2136	multi.c	FUNCTION_32	DO_1	IF_99
0x40033a2	        0x48895b70	             mov qword [rbx + 0x70], rbx	      2137	multi.c	FUNCTION_32	DO_1	IF_99
0x40033a6	        0x44896b78	            mov dword [rbx + 0x78], r13d	      2138	multi.c	FUNCTION_32	DO_1	IF_99
0x40033aa	      0x498b742428	            mov rsi, qword [r12 + 0x28] 	       293	multi.c	FUNCTION_9	CALL_1
0x40033af	      0x498d7c2420	                   lea rdi, [r12 + 0x20]	       293	multi.c	FUNCTION_9	CALL_1
0x40033b4	          0x4889d1	                            mov rcx, rdx	       293	multi.c	FUNCTION_9	CALL_1
0x40033b7	      0xe800000000	                          call 0x40033bc	       293	multi.c	FUNCTION_9	CALL_1
0x40033bc	      0xbe12000000	                           mov esi, 0x12	      2142	multi.c	FUNCTION_32	DO_1	IF_99
0x40033c1	          0x4889df	                            mov rdi, rbx	      2142	multi.c	FUNCTION_32	DO_1	IF_99
0x40033c4	      0xe877ccffff	                         call sym.mstate	      2142	multi.c	FUNCTION_32	DO_1	IF_99
0x40033c9	      0xbd00000000	                              mov ebp, 0	      2140	multi.c	FUNCTION_32	DO_1	IF_99	CALL_108
0x40033ce	            0xeb09	                           jmp 0x40033d9	      2140	multi.c	FUNCTION_32	DO_1	IF_99	CALL_108
0x40033d0	          0x83fdff	             cmp ebp, 0xffffffffffffffff	      2144	multi.c	FUNCTION_32	CALL_109
0x40033d3	     0xf848eedffff	                            je 0x4002167	      2144	multi.c	FUNCTION_32	CALL_109
0x40033d9	    0x4180bc24f000	                cmp byte [r12 + 0xf0], 0	      2144	multi.c	FUNCTION_32	CALL_109
0x40033e2	     0xf857fedffff	                           jne 0x4002167	      2144	multi.c	FUNCTION_32	CALL_109
0x40033e8	        0x44896b4c	            mov dword [rbx + 0x4c], r13d	      2146	multi.c	FUNCTION_32
0x40033ec	            0x89e8	                            mov eax, ebp	      2149	multi.c	FUNCTION_32
0x40033ee	            0xeb05	                           jmp 0x40033f5	      2149	multi.c	FUNCTION_32
0x40033f0	      0xb804000000	                              mov eax, 4	      2073	multi.c	FUNCTION_32	DO_1	SWITCH_1
0x40033f5	      0x488b4c2448	            mov rcx, qword [rsp + 0x48] 	      2150	multi.c	FUNCTION_32
0x40033fa	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      2150	multi.c	FUNCTION_32
0x4003403	     0xf8468010000	                            je 0x4003571	      2150	multi.c	FUNCTION_32
0x4003409	      0xe95e010000	                           jmp 0x400356c	      2150	multi.c	FUNCTION_32
0x400340e	      0xbdffffffff	                     mov ebp, 0xffffffff	      1326	multi.c	FUNCTION_32	DO_1
0x4003413	      0xe9a3000000	                           jmp 0x40034bb	      1326	multi.c	FUNCTION_32	DO_1
0x4003418	      0x807c243800	                cmp byte [rsp + 0x38], 0	      1659	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	IF_42	IF_43
0x400341d	     0xf8541f6ffff	                           jne 0x4002a64	      1659	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	IF_42	IF_43
0x4003423	      0xe9e3f5ffff	                           jmp 0x4002a0b	      1659	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	IF_42	IF_43
0x4003428	          0x4889df	                            mov rdi, rbx	      1711	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47	CALL_52
0x400342b	      0xe800000000	                          call 0x4003430	      1711	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47	CALL_52
0x4003430	      0xba00000000	                              mov edx, 0	      1712	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47	CALL_53
0x4003435	            0x89ee	                            mov esi, ebp	      1712	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47	CALL_53
0x4003437	      0x488b7c2418	            mov rdi, qword [rsp + 0x18] 	      1712	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47	CALL_53
0x400343c	      0xe8a1e5ffff	                     call sym.multi_done	      1712	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47	CALL_53
0x4003441	          0x4189ed	                           mov r13d, ebp	      1705	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47	IF_48
0x4003444	    0x41be01000000	                             mov r14d, 1	      1737	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_18	ELSE_21	IF_47	ELSE_25
0x400344a	      0xbd00000000	                              mov ebp, 0	      1326	multi.c	FUNCTION_32	DO_1
0x400344f	      0xe90bf7ffff	                           jmp 0x4002b5f	      1326	multi.c	FUNCTION_32	DO_1
0x4003454	          0x4889df	                            mov rdi, rbx	      1795	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_29	CALL_62
0x4003457	      0xe800000000	                          call 0x400345c	      1795	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_29	CALL_62
0x400345c	        0x488d7b10	                   lea rdi, [rbx + 0x10]	      1796	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_29	CALL_63
0x4003460	      0xba00000000	                              mov edx, 0	      1796	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_29	CALL_63
0x4003465	          0x4489ee	                           mov esi, r13d	      1796	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_29	CALL_63
0x4003468	      0xe875e5ffff	                     call sym.multi_done	      1796	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_29	CALL_63
0x400346d	    0x41be01000000	                             mov r14d, 1	      1797	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_29
0x4003473	            0xeb71	                           jmp 0x40034e6	      1797	multi.c	FUNCTION_32	DO_1	SWITCH_1	ELSE_29
0x4003475	        0x8b44243c	            mov eax, dword [rsp + 0x3c] 	      1781	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_55	IF_56
0x4003479	      0xbd00000000	                              mov ebp, 0	      1791	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_55	ELSE_28
0x400347e	            0x85c0	                           test eax, eax	      1781	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_55	IF_56
0x4003480	            0x7439	                            je 0x40034bb	      1781	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_55	IF_56
0x4003482	      0xe9d6f7ffff	                           jmp 0x4002c5d	      1781	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_55	IF_56
0x4003487	    0x488b93880300	           mov rdx, qword [rbx + 0x388] 	      1851	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	IF_64
0x400348e	      0xbd00000000	                              mov ebp, 0	      1841	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62
0x4003493	          0x4885d2	                           test rdx, rdx	      1851	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	IF_64
0x4003496	     0xf8f34f9ffff	                            jg 0x4002dd0	      1851	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	IF_64
0x400349c	      0xe966f9ffff	                           jmp 0x4002e07	      1851	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_62	IF_64
0x40034a1	    0x488b93880300	           mov rdx, qword [rbx + 0x388] 	      1887	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_68
0x40034a8	      0xbd00000000	                              mov ebp, 0	      1877	multi.c	FUNCTION_32	DO_1	SWITCH_1
0x40034ad	          0x4885d2	                           test rdx, rdx	      1887	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_68
0x40034b0	     0xf8f13faffff	                            jg 0x4002ec9	      1887	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_68
0x40034b6	      0xe9acfaffff	                           jmp 0x4002f67	      1887	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_68
0x40034bb	    0x41bd00000000	                             mov r13d, 0	      2077	multi.c	FUNCTION_32	DO_1	IF_93
0x40034c1	        0x837b4810	           cmp dword [rbx + 0x48], 0x10 	      2077	multi.c	FUNCTION_32	DO_1	IF_93
0x40034c5	     0xf87befeffff	                            ja 0x4003389	      2077	multi.c	FUNCTION_32	DO_1	IF_93
0x40034cb	      0xe96bfeffff	                           jmp 0x400333b	      2077	multi.c	FUNCTION_32	DO_1	IF_93
0x40034d0	    0x41be01000000	                             mov r14d, 1	      1452	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_15	IF_16
0x40034d6	            0xeb0e	                           jmp 0x40034e6	      1452	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_15	IF_16
0x40034d8	    0x41be00000000	                             mov r14d, 0	      1325	multi.c	FUNCTION_32	DO_1
0x40034de	            0xeb06	                           jmp 0x40034e6	      1325	multi.c	FUNCTION_32	DO_1
0x40034e0	    0x41be00000000	                             mov r14d, 0	      1325	multi.c	FUNCTION_32	DO_1
0x40034e6	      0xbd00000000	                              mov ebp, 0	      2077	multi.c	FUNCTION_32	DO_1	IF_93
0x40034eb	        0x837b4810	           cmp dword [rbx + 0x48], 0x10 	      2077	multi.c	FUNCTION_32	DO_1	IF_93
0x40034ef	     0xf8794feffff	                            ja 0x4003389	      2077	multi.c	FUNCTION_32	DO_1	IF_93
0x40034f5	      0xe997fdffff	                           jmp 0x4003291	      2077	multi.c	FUNCTION_32	DO_1	IF_93
0x40034fa	          0x4889de	                            mov rsi, rbx	      1514	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_30
0x40034fd	          0x4c89e7	                            mov rdi, r12	      1514	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_30
0x4003500	      0xe833cfffff	                   call sym.singlesocket	      1514	multi.c	FUNCTION_32	DO_1	SWITCH_1	CALL_30
0x4003505	      0xbd00000000	                              mov ebp, 0	      1326	multi.c	FUNCTION_32	DO_1
0x400350a	    0x48837c244000	               cmp qword [rsp + 0x40], 0	      1516	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_24
0x4003510	            0x74a9	                            je 0x40034bb	      1516	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_24
0x4003512	      0xe9a1f0ffff	                           jmp 0x40025b8	      1516	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_24
0x4003517	            0x85c0	                           test eax, eax	      1267	multi.c	FUNCTION_30	IF_1	IF_5
0x4003519	     0xf84d8f4ffff	                            je 0x40029f7	      1267	multi.c	FUNCTION_30	IF_1	IF_5
0x400351f	      0xe951f6ffff	                           jmp 0x4002b75	      1267	multi.c	FUNCTION_30	IF_1	IF_5
0x4003524	        0x837b4810	           cmp dword [rbx + 0x48], 0x10 	      2077	multi.c	FUNCTION_32	DO_1	IF_93
0x4003528	     0xf866afdffff	                           jbe 0x4003298	      2077	multi.c	FUNCTION_32	DO_1	IF_93
0x400352e	    0x41bd2a000000	                          mov r13d, 0x2a	      1836	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_61
0x4003534	      0xbd00000000	                              mov ebp, 0	      1326	multi.c	FUNCTION_32	DO_1
0x4003539	      0xe94bfeffff	                           jmp 0x4003389	      1326	multi.c	FUNCTION_32	DO_1
0x400353e	      0xbd00000000	                              mov ebp, 0	      1326	multi.c	FUNCTION_32	DO_1
0x4003543	        0x837b4810	           cmp dword [rbx + 0x48], 0x10 	      2077	multi.c	FUNCTION_32	DO_1	IF_93
0x4003547	     0xf873cfeffff	                            ja 0x4003389	      2077	multi.c	FUNCTION_32	DO_1	IF_93
0x400354d	      0xe9e4fdffff	                           jmp 0x4003336	      2077	multi.c	FUNCTION_32	DO_1	IF_93
0x4003552	      0xe948f5ffff	                           jmp 0x4002a9f	      2077	multi.c	FUNCTION_32	DO_1	IF_93
0x4003557	      0xbd00000000	                              mov ebp, 0	      1791	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_55	ELSE_28
0x400355c	      0x837c243c00	               cmp dword [rsp + 0x3c], 0	      1781	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_55	IF_56
0x4003561	     0xf8454ffffff	                            je 0x40034bb	      1781	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_55	IF_56
0x4003567	      0xe902f7ffff	                           jmp 0x4002c6e	      1781	multi.c	FUNCTION_32	DO_1	SWITCH_1	IF_55	IF_56
0x400356c	      0xe800000000	                          call 0x4003571	      2150	multi.c	FUNCTION_32
0x4003571	        0x4883c458	                           add rsp, 0x58	      2150	multi.c	FUNCTION_32
0x4003575	              0x5b	                                 pop rbx	      2150	multi.c	FUNCTION_32
0x4003576	              0x5d	                                 pop rbp	      2150	multi.c	FUNCTION_32
0x4003577	            0x415c	                                 pop r12	      2150	multi.c	FUNCTION_32
0x4003579	            0x415d	                                 pop r13	      2150	multi.c	FUNCTION_32
0x400357b	            0x415e	                                 pop r14	      2150	multi.c	FUNCTION_32
0x400357d	            0x415f	                                 pop r15	      2150	multi.c	FUNCTION_32
0x400357f	              0xc3	                                     ret	      2150	multi.c	FUNCTION_32
