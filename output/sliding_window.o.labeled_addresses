check_offset_overflow	SWITCH,0:IF,2:functions,0:FOR,0:ELSE,0:DO,0:CALL,4:WHILE,0	32
0x184	              0x55	                                push rbp	        35	sliding_window.c	FUNCTION_4
0x185	          0x4889e5	                            mov rbp, rsp	        35	sliding_window.c	FUNCTION_4
0x188	        0x4883ec10	                           sub rsp, 0x10	        35	sliding_window.c	FUNCTION_4
0x18c	        0x48897df8	                mov qword [rbp - 8], rdi	        35	sliding_window.c	FUNCTION_4
0x190	        0x488975f0	             mov qword [rbp - 0x10], rsi	        35	sliding_window.c	FUNCTION_4
0x194	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        36	sliding_window.c	FUNCTION_4	IF_1	CALL_1
0x198	          0x4885c0	                           test rax, rax	        36	sliding_window.c	FUNCTION_4	IF_1	CALL_1
0x19b	            0x791d	                           jns 0x40001fa	        36	sliding_window.c	FUNCTION_4	IF_1	CALL_1
0x19d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        37	sliding_window.c	FUNCTION_4	IF_1	CALL_2
0x1a1	          0x4889c6	                            mov rsi, rax	        37	sliding_window.c	FUNCTION_4	IF_1	CALL_2
0x1a4	      0xbf00000000	                              mov edi, 0	        37	sliding_window.c	FUNCTION_4	IF_1	CALL_2
0x1a9	      0xb800000000	                              mov eax, 0	        37	sliding_window.c	FUNCTION_4	IF_1	CALL_2
0x1ae	      0xe800000000	                          call 0x40001f3	        37	sliding_window.c	FUNCTION_4	IF_1	CALL_2
0x1b3	      0xe848feffff	                    call sym.const_error	        37	sliding_window.c	FUNCTION_4	IF_1	CALL_2
0x1b8	            0xeb40	                           jmp 0x400023a	        37	sliding_window.c	FUNCTION_4	IF_1	CALL_2
0x1ba	    0x48b8ffffffff	         movabs rax, 0x7fffffffffffffff 	        39	sliding_window.c	FUNCTION_4	IF_2	CALL_3
0x1c4	        0x482b45f8	                sub rax, qword [rbp - 8]	        39	sliding_window.c	FUNCTION_4	IF_2	CALL_3
0x1c8	          0x4889c2	                            mov rdx, rax	        39	sliding_window.c	FUNCTION_4	IF_2	CALL_3
0x1cb	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        39	sliding_window.c	FUNCTION_4	IF_2	CALL_3
0x1cf	          0x4839c2	                            cmp rdx, rax	        39	sliding_window.c	FUNCTION_4	IF_2	CALL_3
0x1d2	            0x7d21	                           jge 0x4000235	        39	sliding_window.c	FUNCTION_4	IF_2	CALL_3
0x1d4	        0x488b45f8	                mov rax, qword [rbp - 8]	        40	sliding_window.c	FUNCTION_4	IF_2	CALL_4
0x1d8	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	        40	sliding_window.c	FUNCTION_4	IF_2	CALL_4
0x1dc	          0x4889c6	                            mov rsi, rax	        40	sliding_window.c	FUNCTION_4	IF_2	CALL_4
0x1df	      0xbf00000000	                              mov edi, 0	        40	sliding_window.c	FUNCTION_4	IF_2	CALL_4
0x1e4	      0xb800000000	                              mov eax, 0	        40	sliding_window.c	FUNCTION_4	IF_2	CALL_4
0x1e9	      0xe800000000	                          call 0x400022e	        40	sliding_window.c	FUNCTION_4	IF_2	CALL_4
0x1ee	      0xe80dfeffff	                    call sym.const_error	        40	sliding_window.c	FUNCTION_4	IF_2	CALL_4
0x1f3	            0xeb05	                           jmp 0x400023a	        40	sliding_window.c	FUNCTION_4	IF_2	CALL_4
0x1f5	      0xb800000000	                              mov eax, 0	        43	sliding_window.c	FUNCTION_4
0x1fa	              0xc9	                                   leave	        44	sliding_window.c	FUNCTION_4
0x1fb	              0xc3	                                     ret	        44	sliding_window.c	FUNCTION_4
const_error	SWITCH,0:IF,0:functions,0:FOR,0:ELSE,0:DO,0:CALL,0:WHILE,0	5
0x0	              0x55	                                push rbp	       447	git-compat-util.h	FUNCTION_11
0x1	          0x4889e5	                            mov rbp, rsp	       447	git-compat-util.h	FUNCTION_11
0x4	      0xb8ffffffff	                     mov eax, 0xffffffff	       448	git-compat-util.h	FUNCTION_11
0x9	              0x5d	                                 pop rbp	       449	git-compat-util.h	FUNCTION_11
0xa	              0xc3	                                     ret	       449	git-compat-util.h	FUNCTION_11
strbuf_setlen	SWITCH,0:IF,2:functions,0:FOR,0:ELSE,1:DO,0:CALL,2:WHILE,0	43
0xb	              0x55	                                push rbp	       161	strbuf.h	FUNCTION_35
0xc	          0x4889e5	                            mov rbp, rsp	       161	strbuf.h	FUNCTION_35
0xf	        0x4883ec10	                           sub rsp, 0x10	       161	strbuf.h	FUNCTION_35
0x13	        0x48897df8	                mov qword [rbp - 8], rdi	       161	strbuf.h	FUNCTION_35
0x17	        0x488975f0	             mov qword [rbp - 0x10], rsi	       161	strbuf.h	FUNCTION_35
0x1b	        0x488b45f8	                mov rax, qword [rbp - 8]	       162	strbuf.h	FUNCTION_35	IF_1
0x1f	          0x488b00	                    mov rax, qword [rax]	       162	strbuf.h	FUNCTION_35	IF_1
0x22	          0x4885c0	                           test rax, rax	       162	strbuf.h	FUNCTION_35	IF_1
0x25	            0x740d	                            je 0x4000074	       162	strbuf.h	FUNCTION_35	IF_1
0x27	        0x488b45f8	                mov rax, qword [rbp - 8]	       162	strbuf.h	FUNCTION_35	IF_1
0x2b	          0x488b00	                    mov rax, qword [rax]	       162	strbuf.h	FUNCTION_35	IF_1
0x2e	        0x4883e801	                              sub rax, 1	       162	strbuf.h	FUNCTION_35	IF_1
0x32	            0xeb05	                           jmp 0x4000079	       162	strbuf.h	FUNCTION_35	IF_1
0x34	      0xb800000000	                              mov eax, 0	       162	strbuf.h	FUNCTION_35	IF_1
0x39	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	       162	strbuf.h	FUNCTION_35	IF_1
0x3d	            0x730f	                           jae 0x400008e	       162	strbuf.h	FUNCTION_35	IF_1
0x3f	      0xbf00000000	                              mov edi, 0	       163	strbuf.h	FUNCTION_35	CALL_1
0x44	      0xb800000000	                              mov eax, 0	       163	strbuf.h	FUNCTION_35	CALL_1
0x49	      0xe800000000	                          call 0x400008e	       163	strbuf.h	FUNCTION_35	CALL_1
0x4e	        0x488b45f8	                mov rax, qword [rbp - 8]	       164	strbuf.h	FUNCTION_35
0x52	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       164	strbuf.h	FUNCTION_35
0x56	        0x48895008	                mov qword [rax + 8], rdx	       164	strbuf.h	FUNCTION_35
0x5a	        0x488b45f8	                mov rax, qword [rbp - 8]	       165	strbuf.h	FUNCTION_35	IF_2
0x5e	        0x488b4010	            mov rax, qword [rax + 0x10] 	       165	strbuf.h	FUNCTION_35	IF_2
0x62	    0x483d00000000	                              cmp rax, 0	       165	strbuf.h	FUNCTION_35	IF_2
0x68	            0x7414	                            je 0x40000be	       165	strbuf.h	FUNCTION_35	IF_2
0x6a	        0x488b45f8	                mov rax, qword [rbp - 8]	       166	strbuf.h	FUNCTION_35	IF_2
0x6e	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       166	strbuf.h	FUNCTION_35	IF_2
0x72	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       166	strbuf.h	FUNCTION_35	IF_2
0x76	          0x4801d0	                            add rax, rdx	       166	strbuf.h	FUNCTION_35	IF_2
0x79	          0xc60000	                       mov byte [rax], 0	       166	strbuf.h	FUNCTION_35	IF_2
0x7c	            0xeb24	                           jmp 0x40000e2	       169	strbuf.h	FUNCTION_35
0x7e	     0xfb605000000	           movzx eax, byte [0x040000c5] 	       168	strbuf.h	FUNCTION_35	CALL_2
0x85	            0x84c0	                             test al, al	       168	strbuf.h	FUNCTION_35	CALL_2
0x87	            0x7419	                            je 0x40000e2	       168	strbuf.h	FUNCTION_35	CALL_2
0x89	      0xb900000000	                              mov ecx, 0	       168	strbuf.h	FUNCTION_35	CALL_2
0x8e	      0xbaa8000000	                           mov edx, 0xa8	       168	strbuf.h	FUNCTION_35	CALL_2
0x93	      0xbe00000000	                              mov esi, 0	       168	strbuf.h	FUNCTION_35	CALL_2
0x98	      0xbf00000000	                              mov edi, 0	       168	strbuf.h	FUNCTION_35	CALL_2
0x9d	      0xe800000000	                          call 0x40000e2	       168	strbuf.h	FUNCTION_35	CALL_2
0xa2	              0x90	                                     nop	       169	strbuf.h	FUNCTION_35
0xa3	              0xc9	                                   leave	       169	strbuf.h	FUNCTION_35
0xa4	              0xc3	                                     ret	       169	strbuf.h	FUNCTION_35
move_window	SWITCH,0:IF,7:functions,0:FOR,0:ELSE,2:DO,0:CALL,11:WHILE,0	147
0x1fc	              0x55	                                push rbp	        47	sliding_window.c	FUNCTION_5
0x1fd	          0x4889e5	                            mov rbp, rsp	        47	sliding_window.c	FUNCTION_5
0x200	        0x4883ec30	                           sub rsp, 0x30	        47	sliding_window.c	FUNCTION_5
0x204	        0x48897de8	             mov qword [rbp - 0x18], rdi	        47	sliding_window.c	FUNCTION_5
0x208	        0x488975e0	             mov qword [rbp - 0x20], rsi	        47	sliding_window.c	FUNCTION_5
0x20c	        0x488955d8	             mov qword [rbp - 0x28], rdx	        47	sliding_window.c	FUNCTION_5
0x210	      0x48837de800	               cmp qword [rbp - 0x18], 0	        49	sliding_window.c	FUNCTION_5	CALL_1
0x215	            0x7519	                           jne 0x4000270	        49	sliding_window.c	FUNCTION_5	CALL_1
0x217	      0xb900000000	                              mov ecx, 0	        49	sliding_window.c	FUNCTION_5	CALL_1
0x21c	      0xba31000000	                           mov edx, 0x31	        49	sliding_window.c	FUNCTION_5	CALL_1
0x221	      0xbe00000000	                              mov esi, 0	        49	sliding_window.c	FUNCTION_5	CALL_1
0x226	      0xbf00000000	                              mov edi, 0	        49	sliding_window.c	FUNCTION_5	CALL_1
0x22b	      0xe800000000	                          call 0x4000270	        49	sliding_window.c	FUNCTION_5	CALL_1
0x230	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        50	sliding_window.c	FUNCTION_5	CALL_2
0x234	        0x488b5010	            mov rdx, qword [rax + 0x10] 	        50	sliding_window.c	FUNCTION_5	CALL_2
0x238	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        50	sliding_window.c	FUNCTION_5	CALL_2
0x23c	        0x488b4028	            mov rax, qword [rax + 0x28] 	        50	sliding_window.c	FUNCTION_5	CALL_2
0x240	          0x4839c2	                            cmp rdx, rax	        50	sliding_window.c	FUNCTION_5	CALL_2
0x243	            0x7619	                           jbe 0x400029e	        50	sliding_window.c	FUNCTION_5	CALL_2
0x245	      0xb900000000	                              mov ecx, 0	        50	sliding_window.c	FUNCTION_5	CALL_2
0x24a	      0xba32000000	                           mov edx, 0x32	        50	sliding_window.c	FUNCTION_5	CALL_2
0x24f	      0xbe00000000	                              mov esi, 0	        50	sliding_window.c	FUNCTION_5	CALL_2
0x254	      0xbf00000000	                              mov edi, 0	        50	sliding_window.c	FUNCTION_5	CALL_2
0x259	      0xe800000000	                          call 0x400029e	        50	sliding_window.c	FUNCTION_5	CALL_2
0x25e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        51	sliding_window.c	FUNCTION_5	CALL_4
0x262	        0x488b5028	            mov rdx, qword [rax + 0x28] 	        51	sliding_window.c	FUNCTION_5	CALL_4
0x266	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        51	sliding_window.c	FUNCTION_5	CALL_4
0x26a	        0x488b4008	                mov rax, qword [rax + 8]	        51	sliding_window.c	FUNCTION_5	CALL_4
0x26e	          0x4889d6	                            mov rsi, rdx	        51	sliding_window.c	FUNCTION_5	CALL_4
0x271	          0x4889c7	                            mov rdi, rax	        51	sliding_window.c	FUNCTION_5	CALL_4
0x274	      0xe80bffffff	          call sym.check_offset_overflow	        51	sliding_window.c	FUNCTION_5	CALL_4
0x279	            0x85c0	                           test eax, eax	        51	sliding_window.c	FUNCTION_5	CALL_4
0x27b	            0x7419	                            je 0x40002d6	        51	sliding_window.c	FUNCTION_5	CALL_4
0x27d	      0xb900000000	                              mov ecx, 0	        51	sliding_window.c	FUNCTION_5	CALL_4
0x282	      0xba33000000	                           mov edx, 0x33	        51	sliding_window.c	FUNCTION_5	CALL_4
0x287	      0xbe00000000	                              mov esi, 0	        51	sliding_window.c	FUNCTION_5	CALL_4
0x28c	      0xbf00000000	                              mov edi, 0	        51	sliding_window.c	FUNCTION_5	CALL_4
0x291	      0xe800000000	                          call 0x40002d6	        51	sliding_window.c	FUNCTION_5	CALL_4
0x296	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	        53	sliding_window.c	FUNCTION_5	IF_1	CALL_5
0x29a	        0x488b45e0	             mov rax, qword [rbp - 0x20]	        53	sliding_window.c	FUNCTION_5	IF_1	CALL_5
0x29e	          0x4889d6	                            mov rsi, rdx	        53	sliding_window.c	FUNCTION_5	IF_1	CALL_5
0x2a1	          0x4889c7	                            mov rdi, rax	        53	sliding_window.c	FUNCTION_5	IF_1	CALL_5
0x2a4	      0xe8dbfeffff	          call sym.check_offset_overflow	        53	sliding_window.c	FUNCTION_5	IF_1	CALL_5
0x2a9	            0x85c0	                           test eax, eax	        53	sliding_window.c	FUNCTION_5	IF_1	CALL_5
0x2ab	            0x740a	                            je 0x40002f7	        53	sliding_window.c	FUNCTION_5	IF_1	CALL_5
0x2ad	      0xb8ffffffff	                     mov eax, 0xffffffff	        54	sliding_window.c	FUNCTION_5	IF_1
0x2b2	      0xe96c010000	                           jmp 0x4000463	        54	sliding_window.c	FUNCTION_5	IF_1
0x2b7	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        55	sliding_window.c	FUNCTION_5	IF_2
0x2bb	        0x488b4008	                mov rax, qword [rax + 8]	        55	sliding_window.c	FUNCTION_5	IF_2
0x2bf	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	        55	sliding_window.c	FUNCTION_5	IF_2
0x2c3	            0x7f26	                            jg 0x400032b	        55	sliding_window.c	FUNCTION_5	IF_2
0x2c5	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	        55	sliding_window.c	FUNCTION_5	IF_2
0x2c9	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        55	sliding_window.c	FUNCTION_5	IF_2
0x2cd	          0x4801c2	                            add rdx, rax	        55	sliding_window.c	FUNCTION_5	IF_2
0x2d0	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        55	sliding_window.c	FUNCTION_5	IF_2
0x2d4	        0x488b4008	                mov rax, qword [rax + 8]	        55	sliding_window.c	FUNCTION_5	IF_2
0x2d8	          0x4889c1	                            mov rcx, rax	        55	sliding_window.c	FUNCTION_5	IF_2
0x2db	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        55	sliding_window.c	FUNCTION_5	IF_2
0x2df	        0x488b4010	            mov rax, qword [rax + 0x10] 	        55	sliding_window.c	FUNCTION_5	IF_2
0x2e3	          0x4801c8	                            add rax, rcx	        55	sliding_window.c	FUNCTION_5	IF_2
0x2e6	          0x4839c2	                            cmp rdx, rax	        55	sliding_window.c	FUNCTION_5	IF_2
0x2e9	            0x7319	                           jae 0x4000344	        55	sliding_window.c	FUNCTION_5	IF_2
0x2eb	      0xbf00000000	                              mov edi, 0	        56	sliding_window.c	FUNCTION_5	CALL_6
0x2f0	      0xb800000000	                              mov eax, 0	        56	sliding_window.c	FUNCTION_5	CALL_6
0x2f5	      0xe800000000	                          call 0x400033a	        56	sliding_window.c	FUNCTION_5	CALL_6
0x2fa	      0xe801fdffff	                    call sym.const_error	        56	sliding_window.c	FUNCTION_5	CALL_6
0x2ff	      0xe91f010000	                           jmp 0x4000463	        56	sliding_window.c	FUNCTION_5	CALL_6
0x304	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        57	sliding_window.c	FUNCTION_5	IF_3
0x308	        0x488b4018	            mov rax, qword [rax + 0x18] 	        57	sliding_window.c	FUNCTION_5	IF_3
0x30c	          0x4885c0	                           test rax, rax	        57	sliding_window.c	FUNCTION_5	IF_3
0x30f	            0x7831	                            js 0x4000382	        57	sliding_window.c	FUNCTION_5	IF_3
0x311	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        57	sliding_window.c	FUNCTION_5	IF_3
0x315	        0x488b4018	            mov rax, qword [rax + 0x18] 	        57	sliding_window.c	FUNCTION_5	IF_3
0x319	        0x488b4dd8	             mov rcx, qword [rbp - 0x28]	        57	sliding_window.c	FUNCTION_5	IF_3
0x31d	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	        57	sliding_window.c	FUNCTION_5	IF_3
0x321	          0x4801ca	                            add rdx, rcx	        57	sliding_window.c	FUNCTION_5	IF_3
0x324	          0x4839d0	                            cmp rax, rdx	        57	sliding_window.c	FUNCTION_5	IF_3
0x327	            0x7d19	                           jge 0x4000382	        57	sliding_window.c	FUNCTION_5	IF_3
0x329	      0xbf00000000	                              mov edi, 0	        58	sliding_window.c	FUNCTION_5	CALL_7
0x32e	      0xb800000000	                              mov eax, 0	        58	sliding_window.c	FUNCTION_5	CALL_7
0x333	      0xe800000000	                          call 0x4000378	        58	sliding_window.c	FUNCTION_5	CALL_7
0x338	      0xe8c3fcffff	                    call sym.const_error	        58	sliding_window.c	FUNCTION_5	CALL_7
0x33d	      0xe9e1000000	                           jmp 0x4000463	        58	sliding_window.c	FUNCTION_5	CALL_7
0x342	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        60	sliding_window.c	FUNCTION_5
0x346	        0x488b4008	                mov rax, qword [rax + 8]	        60	sliding_window.c	FUNCTION_5
0x34a	          0x4889c2	                            mov rdx, rax	        60	sliding_window.c	FUNCTION_5
0x34d	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        60	sliding_window.c	FUNCTION_5
0x351	        0x488b4028	            mov rax, qword [rax + 0x28] 	        60	sliding_window.c	FUNCTION_5
0x355	          0x4801d0	                            add rax, rdx	        60	sliding_window.c	FUNCTION_5
0x358	        0x488945f8	                mov qword [rbp - 8], rax	        60	sliding_window.c	FUNCTION_5
0x35c	        0x488b45e0	             mov rax, qword [rbp - 0x20]	        61	sliding_window.c	FUNCTION_5	IF_4
0x360	        0x483b45f8	                cmp rax, qword [rbp - 8]	        61	sliding_window.c	FUNCTION_5	IF_4
0x364	            0x7d2c	                           jge 0x40003d2	        61	sliding_window.c	FUNCTION_5	IF_4
0x366	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        63	sliding_window.c	FUNCTION_5	IF_4	CALL_8
0x36a	        0x488b4008	                mov rax, qword [rax + 8]	        63	sliding_window.c	FUNCTION_5	IF_4	CALL_8
0x36e	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	        63	sliding_window.c	FUNCTION_5	IF_4	CALL_8
0x372	          0x4829c2	                            sub rdx, rax	        63	sliding_window.c	FUNCTION_5	IF_4	CALL_8
0x375	          0x4889d0	                            mov rax, rdx	        63	sliding_window.c	FUNCTION_5	IF_4	CALL_8
0x378	          0x4889c2	                            mov rdx, rax	        63	sliding_window.c	FUNCTION_5	IF_4	CALL_8
0x37b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        63	sliding_window.c	FUNCTION_5	IF_4	CALL_8
0x37f	        0x4883c020	                           add rax, 0x20	        63	sliding_window.c	FUNCTION_5	IF_4	CALL_8
0x383	      0xbe00000000	                              mov esi, 0	        63	sliding_window.c	FUNCTION_5	IF_4	CALL_8
0x388	          0x4889c7	                            mov rdi, rax	        63	sliding_window.c	FUNCTION_5	IF_4	CALL_8
0x38b	      0xe800000000	                          call 0x40003d0	        63	sliding_window.c	FUNCTION_5	IF_4	CALL_8
0x390	            0xeb3d	                           jmp 0x400040f	        63	sliding_window.c	FUNCTION_5	IF_4	CALL_8
0x392	        0x488b45e0	             mov rax, qword [rbp - 0x20]	        66	sliding_window.c	FUNCTION_5	ELSE_1	IF_5	CALL_9
0x396	        0x482b45f8	                sub rax, qword [rbp - 8]	        66	sliding_window.c	FUNCTION_5	ELSE_1	IF_5	CALL_9
0x39a	          0x4889c2	                            mov rdx, rax	        66	sliding_window.c	FUNCTION_5	ELSE_1	IF_5	CALL_9
0x39d	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        66	sliding_window.c	FUNCTION_5	ELSE_1	IF_5	CALL_9
0x3a1	          0x488b00	                    mov rax, qword [rax]	        66	sliding_window.c	FUNCTION_5	ELSE_1	IF_5	CALL_9
0x3a4	          0x4889d6	                            mov rsi, rdx	        66	sliding_window.c	FUNCTION_5	ELSE_1	IF_5	CALL_9
0x3a7	          0x4889c7	                            mov rdi, rax	        66	sliding_window.c	FUNCTION_5	ELSE_1	IF_5	CALL_9
0x3aa	      0xe83efdffff	                  call sym.skip_or_whine	        66	sliding_window.c	FUNCTION_5	ELSE_1	IF_5	CALL_9
0x3af	            0x85c0	                           test eax, eax	        66	sliding_window.c	FUNCTION_5	ELSE_1	IF_5	CALL_9
0x3b1	            0x7407	                            je 0x40003fa	        66	sliding_window.c	FUNCTION_5	ELSE_1	IF_5	CALL_9
0x3b3	      0xb8ffffffff	                     mov eax, 0xffffffff	        67	sliding_window.c	FUNCTION_5	ELSE_1	IF_5
0x3b8	            0xeb69	                           jmp 0x4000463	        67	sliding_window.c	FUNCTION_5	ELSE_1	IF_5
0x3ba	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        68	sliding_window.c	FUNCTION_5	ELSE_1	CALL_10
0x3be	        0x4883c020	                           add rax, 0x20	        68	sliding_window.c	FUNCTION_5	ELSE_1	CALL_10
0x3c2	      0xbe00000000	                              mov esi, 0	        68	sliding_window.c	FUNCTION_5	ELSE_1	CALL_10
0x3c7	          0x4889c7	                            mov rdi, rax	        68	sliding_window.c	FUNCTION_5	ELSE_1	CALL_10
0x3ca	      0xe83cfcffff	                  call sym.strbuf_setlen	        68	sliding_window.c	FUNCTION_5	ELSE_1	CALL_10
0x3cf	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        71	sliding_window.c	FUNCTION_5	IF_6
0x3d3	        0x488b4028	            mov rax, qword [rax + 0x28] 	        71	sliding_window.c	FUNCTION_5	IF_6
0x3d7	        0x483b45d8	             cmp rax, qword [rbp - 0x28]	        71	sliding_window.c	FUNCTION_5	IF_6
0x3db	            0x7729	                            ja 0x4000446	        71	sliding_window.c	FUNCTION_5	IF_6
0x3dd	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        73	sliding_window.c	FUNCTION_5	ELSE_2	IF_7	CALL_11
0x3e1	        0x488d4820	                   lea rcx, [rax + 0x20]	        73	sliding_window.c	FUNCTION_5	ELSE_2	IF_7	CALL_11
0x3e5	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        73	sliding_window.c	FUNCTION_5	ELSE_2	IF_7	CALL_11
0x3e9	          0x488b00	                    mov rax, qword [rax]	        73	sliding_window.c	FUNCTION_5	ELSE_2	IF_7	CALL_11
0x3ec	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	        73	sliding_window.c	FUNCTION_5	ELSE_2	IF_7	CALL_11
0x3f0	          0x4889ce	                            mov rsi, rcx	        73	sliding_window.c	FUNCTION_5	ELSE_2	IF_7	CALL_11
0x3f3	          0x4889c7	                            mov rdi, rax	        73	sliding_window.c	FUNCTION_5	ELSE_2	IF_7	CALL_11
0x3f6	      0xe830fdffff	          call sym.read_to_fill_or_whine	        73	sliding_window.c	FUNCTION_5	ELSE_2	IF_7	CALL_11
0x3fb	            0x85c0	                           test eax, eax	        73	sliding_window.c	FUNCTION_5	ELSE_2	IF_7	CALL_11
0x3fd	            0x7407	                            je 0x4000446	        73	sliding_window.c	FUNCTION_5	ELSE_2	IF_7	CALL_11
0x3ff	      0xb8ffffffff	                     mov eax, 0xffffffff	        74	sliding_window.c	FUNCTION_5	ELSE_2	IF_7
0x404	            0xeb1d	                           jmp 0x4000463	        74	sliding_window.c	FUNCTION_5	ELSE_2	IF_7
0x406	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        76	sliding_window.c	FUNCTION_5
0x40a	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	        76	sliding_window.c	FUNCTION_5
0x40e	        0x48895008	                mov qword [rax + 8], rdx	        76	sliding_window.c	FUNCTION_5
0x412	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        77	sliding_window.c	FUNCTION_5
0x416	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	        77	sliding_window.c	FUNCTION_5
0x41a	        0x48895010	             mov qword [rax + 0x10], rdx	        77	sliding_window.c	FUNCTION_5
0x41e	      0xb800000000	                              mov eax, 0	        78	sliding_window.c	FUNCTION_5
0x423	              0xc9	                                   leave	        79	sliding_window.c	FUNCTION_5
0x424	              0xc3	                                     ret	        79	sliding_window.c	FUNCTION_5
skip_or_whine	SWITCH,0:IF,1:functions,0:FOR,0:ELSE,0:DO,0:CALL,2:WHILE,0	19
0xed	              0x55	                                push rbp	        19	sliding_window.c	FUNCTION_2
0xee	          0x4889e5	                            mov rbp, rsp	        19	sliding_window.c	FUNCTION_2
0xf1	        0x4883ec10	                           sub rsp, 0x10	        19	sliding_window.c	FUNCTION_2
0xf5	        0x48897df8	                mov qword [rbp - 8], rdi	        19	sliding_window.c	FUNCTION_2
0xf9	        0x488975f0	             mov qword [rbp - 0x10], rsi	        19	sliding_window.c	FUNCTION_2
0xfd	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	        20	sliding_window.c	FUNCTION_2	IF_1	CALL_1
0x101	        0x488b45f8	                mov rax, qword [rbp - 8]	        20	sliding_window.c	FUNCTION_2	IF_1	CALL_1
0x105	          0x4889d6	                            mov rsi, rdx	        20	sliding_window.c	FUNCTION_2	IF_1	CALL_1
0x108	          0x4889c7	                            mov rdi, rax	        20	sliding_window.c	FUNCTION_2	IF_1	CALL_1
0x10b	      0xe800000000	                          call 0x4000150	        20	sliding_window.c	FUNCTION_2	IF_1	CALL_1
0x110	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	        20	sliding_window.c	FUNCTION_2	IF_1	CALL_1
0x114	            0x740e	                            je 0x4000164	        20	sliding_window.c	FUNCTION_2	IF_1	CALL_1
0x116	        0x488b45f8	                mov rax, qword [rbp - 8]	        21	sliding_window.c	FUNCTION_2	CALL_2
0x11a	          0x4889c7	                            mov rdi, rax	        21	sliding_window.c	FUNCTION_2	CALL_2
0x11d	      0xe883ffffff	                    call sym.input_error	        21	sliding_window.c	FUNCTION_2	CALL_2
0x122	            0xeb05	                           jmp 0x4000169	        21	sliding_window.c	FUNCTION_2	CALL_2
0x124	      0xb800000000	                              mov eax, 0	        22	sliding_window.c	FUNCTION_2
0x129	              0xc9	                                   leave	        23	sliding_window.c	FUNCTION_2
0x12a	              0xc3	                                     ret	        23	sliding_window.c	FUNCTION_2
read_to_fill_or_whine	SWITCH,0:IF,1:functions,0:FOR,0:ELSE,0:DO,0:CALL,2:WHILE,0	26
0x12b	              0x55	                                push rbp	        27	sliding_window.c	FUNCTION_3
0x12c	          0x4889e5	                            mov rbp, rsp	        27	sliding_window.c	FUNCTION_3
0x12f	        0x4883ec20	                           sub rsp, 0x20	        27	sliding_window.c	FUNCTION_3
0x133	        0x48897df8	                mov qword [rbp - 8], rdi	        27	sliding_window.c	FUNCTION_3
0x137	        0x488975f0	             mov qword [rbp - 0x10], rsi	        27	sliding_window.c	FUNCTION_3
0x13b	        0x488955e8	             mov qword [rbp - 0x18], rdx	        27	sliding_window.c	FUNCTION_3
0x13f	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        28	sliding_window.c	FUNCTION_3	CALL_1
0x143	        0x488b4008	                mov rax, qword [rax + 8]	        28	sliding_window.c	FUNCTION_3	CALL_1
0x147	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	        28	sliding_window.c	FUNCTION_3	CALL_1
0x14b	          0x4829c2	                            sub rdx, rax	        28	sliding_window.c	FUNCTION_3	CALL_1
0x14e	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	        28	sliding_window.c	FUNCTION_3	CALL_1
0x152	        0x488b45f8	                mov rax, qword [rbp - 8]	        28	sliding_window.c	FUNCTION_3	CALL_1
0x156	          0x4889ce	                            mov rsi, rcx	        28	sliding_window.c	FUNCTION_3	CALL_1
0x159	          0x4889c7	                            mov rdi, rax	        28	sliding_window.c	FUNCTION_3	CALL_1
0x15c	      0xe800000000	                          call 0x40001a1	        28	sliding_window.c	FUNCTION_3	CALL_1
0x161	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        29	sliding_window.c	FUNCTION_3	IF_1
0x165	        0x488b4008	                mov rax, qword [rax + 8]	        29	sliding_window.c	FUNCTION_3	IF_1
0x169	        0x483b45e8	             cmp rax, qword [rbp - 0x18]	        29	sliding_window.c	FUNCTION_3	IF_1
0x16d	            0x740e	                            je 0x40001bd	        29	sliding_window.c	FUNCTION_3	IF_1
0x16f	        0x488b45f8	                mov rax, qword [rbp - 8]	        30	sliding_window.c	FUNCTION_3	CALL_2
0x173	          0x4889c7	                            mov rdi, rax	        30	sliding_window.c	FUNCTION_3	CALL_2
0x176	      0xe82affffff	                    call sym.input_error	        30	sliding_window.c	FUNCTION_3	CALL_2
0x17b	            0xeb05	                           jmp 0x40001c2	        30	sliding_window.c	FUNCTION_3	CALL_2
0x17d	      0xb800000000	                              mov eax, 0	        31	sliding_window.c	FUNCTION_3
0x182	              0xc9	                                   leave	        32	sliding_window.c	FUNCTION_3
0x183	              0xc3	                                     ret	        32	sliding_window.c	FUNCTION_3
input_error	SWITCH,0:IF,1:functions,0:FOR,0:ELSE,0:DO,0:CALL,3:WHILE,0	20
0xa5	              0x55	                                push rbp	        12	sliding_window.c	FUNCTION_1
0xa6	          0x4889e5	                            mov rbp, rsp	        12	sliding_window.c	FUNCTION_1
0xa9	        0x4883ec10	                           sub rsp, 0x10	        12	sliding_window.c	FUNCTION_1
0xad	        0x48897df8	                mov qword [rbp - 8], rdi	        12	sliding_window.c	FUNCTION_1
0xb1	        0x488b45f8	                mov rax, qword [rbp - 8]	        13	sliding_window.c	FUNCTION_1	IF_1	CALL_1
0xb5	          0x4889c7	                            mov rdi, rax	        13	sliding_window.c	FUNCTION_1	IF_1	CALL_1
0xb8	      0xe800000000	                          call 0x40000fd	        13	sliding_window.c	FUNCTION_1	IF_1	CALL_1
0xbd	            0x85c0	                           test eax, eax	        13	sliding_window.c	FUNCTION_1	IF_1	CALL_1
0xbf	            0x7516	                           jne 0x4000117	        13	sliding_window.c	FUNCTION_1	IF_1	CALL_1
0xc1	      0xbf00000000	                              mov edi, 0	        14	sliding_window.c	FUNCTION_1	CALL_2
0xc6	      0xb800000000	                              mov eax, 0	        14	sliding_window.c	FUNCTION_1	CALL_2
0xcb	      0xe800000000	                          call 0x4000110	        14	sliding_window.c	FUNCTION_1	CALL_2
0xd0	      0xe82bffffff	                    call sym.const_error	        14	sliding_window.c	FUNCTION_1	CALL_2
0xd5	            0xeb14	                           jmp 0x400012b	        14	sliding_window.c	FUNCTION_1	CALL_2
0xd7	      0xbf00000000	                              mov edi, 0	        15	sliding_window.c	FUNCTION_1	CALL_3
0xdc	      0xb800000000	                              mov eax, 0	        15	sliding_window.c	FUNCTION_1	CALL_3
0xe1	      0xe800000000	                          call 0x4000126	        15	sliding_window.c	FUNCTION_1	CALL_3
0xe6	      0xe815ffffff	                    call sym.const_error	        15	sliding_window.c	FUNCTION_1	CALL_3
0xeb	              0xc9	                                   leave	        16	sliding_window.c	FUNCTION_1
0xec	              0xc3	                                     ret	        16	sliding_window.c	FUNCTION_1
