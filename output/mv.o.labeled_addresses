st_add	CALL,2:FOR,0:DO,0:functions,0:IF,1:SWITCH,0:ELSE,0:WHILE,0	20
0x13	              0x55	                                push rbp	       784	git-compat-util.h	FUNCTION_14
0x14	          0x4889e5	                            mov rbp, rsp	       784	git-compat-util.h	FUNCTION_14
0x17	        0x4883ec10	                           sub rsp, 0x10	       784	git-compat-util.h	FUNCTION_14
0x1b	        0x48897df8	                mov qword [rbp - 8], rdi	       784	git-compat-util.h	FUNCTION_14
0x1f	        0x488975f0	             mov qword [rbp - 0x10], rsi	       784	git-compat-util.h	FUNCTION_14
0x23	        0x488b45f8	                mov rax, qword [rbp - 8]	       785	git-compat-util.h	FUNCTION_14	IF_1	CALL_1
0x27	          0x48f7d0	                                 not rax	       785	git-compat-util.h	FUNCTION_14	IF_1	CALL_1
0x2a	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	       785	git-compat-util.h	FUNCTION_14	IF_1	CALL_1
0x2e	            0x731a	                           jae 0x400008a	       785	git-compat-util.h	FUNCTION_14	IF_1	CALL_1
0x30	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       786	git-compat-util.h	FUNCTION_14	IF_1	CALL_2
0x34	        0x488b45f8	                mov rax, qword [rbp - 8]	       786	git-compat-util.h	FUNCTION_14	IF_1	CALL_2
0x38	          0x4889c6	                            mov rsi, rax	       786	git-compat-util.h	FUNCTION_14	IF_1	CALL_2
0x3b	      0xbf00000000	                              mov edi, 0	       786	git-compat-util.h	FUNCTION_14	IF_1	CALL_2
0x40	      0xb800000000	                              mov eax, 0	       786	git-compat-util.h	FUNCTION_14	IF_1	CALL_2
0x45	      0xe800000000	                          call 0x400008a	       786	git-compat-util.h	FUNCTION_14	IF_1	CALL_2
0x4a	        0x488b55f8	                mov rdx, qword [rbp - 8]	       788	git-compat-util.h	FUNCTION_14
0x4e	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       788	git-compat-util.h	FUNCTION_14
0x52	          0x4801d0	                            add rax, rdx	       788	git-compat-util.h	FUNCTION_14
0x55	              0xc9	                                   leave	       789	git-compat-util.h	FUNCTION_14
0x56	              0xc3	                                     ret	       789	git-compat-util.h	FUNCTION_14
git_is_dir_sep	CALL,0:FOR,0:DO,0:functions,0:IF,0:SWITCH,0:ELSE,0:WHILE,0	8
0x0	              0x55	                                push rbp	       363	git-compat-util.h	FUNCTION_3
0x1	          0x4889e5	                            mov rbp, rsp	       363	git-compat-util.h	FUNCTION_3
0x4	          0x897dfc	                mov dword [rbp - 4], edi	       363	git-compat-util.h	FUNCTION_3
0x7	        0x837dfc2f	               cmp dword [rbp - 4], 0x2f	       364	git-compat-util.h	FUNCTION_3
0xb	           0xf94c0	                                 sete al	       364	git-compat-util.h	FUNCTION_3
0xe	           0xfb6c0	                           movzx eax, al	       364	git-compat-util.h	FUNCTION_3
0x11	              0x5d	                                 pop rbp	       365	git-compat-util.h	FUNCTION_3
0x12	              0xc3	                                     ret	       365	git-compat-util.h	FUNCTION_3
cmd_mv	CALL,87:FOR,3:DO,0:functions,0:IF,33:SWITCH,0:ELSE,13:WHILE,0	785
0x5a6	              0x55	                                push rbp	       119	mv.c	FUNCTION_32
0x5a7	          0x4889e5	                            mov rbp, rsp	       119	mv.c	FUNCTION_32
0x5aa	              0x53	                                push rbx	       119	mv.c	FUNCTION_32
0x5ab	    0x4881ecc80200	                          sub rsp, 0x2c8	       119	mv.c	FUNCTION_32
0x5b2	    0x89bd4cfdffff	            mov dword [rbp - 0x2b4], edi	       119	mv.c	FUNCTION_32
0x5b8	    0x4889b540fdff	            mov qword [rbp - 0x2c0], rsi	       119	mv.c	FUNCTION_32
0x5bf	    0x48899538fdff	            mov qword [rbp - 0x2c8], rdx	       119	mv.c	FUNCTION_32
0x5c6	    0x64488b042528	                mov rax, qword fs:[0x28]	       119	mv.c	FUNCTION_32
0x5cf	        0x488945e8	             mov qword [rbp - 0x18], rax	       119	mv.c	FUNCTION_32
0x5d3	            0x31c0	                            xor eax, eax	       119	mv.c	FUNCTION_32
0x5d5	    0xc78574fdffff	              mov dword [rbp - 0x28c], 0	       120	mv.c	FUNCTION_32
0x5df	    0xc78554fdffff	              mov dword [rbp - 0x2ac], 0	       121	mv.c	FUNCTION_32
0x5e9	    0xc78558fdffff	              mov dword [rbp - 0x2a8], 0	       121	mv.c	FUNCTION_32
0x5f3	    0xc7855cfdffff	              mov dword [rbp - 0x2a4], 0	       121	mv.c	FUNCTION_32
0x5fd	    0xc78560fdffff	              mov dword [rbp - 0x2a0], 0	       121	mv.c	FUNCTION_32
0x607	    0x488d95a0feff	                  lea rdx, [rbp - 0x160]	       122	mv.c	FUNCTION_32
0x60e	      0xb800000000	                              mov eax, 0	       122	mv.c	FUNCTION_32
0x613	      0xb928000000	                           mov ecx, 0x28	       122	mv.c	FUNCTION_32
0x618	          0x4889d7	                            mov rdi, rdx	       122	mv.c	FUNCTION_32
0x61b	          0xf348ab	              rep stosq qword [rdi], rax	       122	mv.c	FUNCTION_32
0x61e	    0xc785a0feffff	              mov dword [rbp - 0x160], 6	       122	mv.c	FUNCTION_32
0x628	    0xc785a4feffff	          mov dword [rbp - 0x15c], 0x76 	       122	mv.c	FUNCTION_32
0x632	    0x48c785a8feff	              mov qword [rbp - 0x158], 0	       122	mv.c	FUNCTION_32
0x63d	    0x488d8554fdff	                  lea rax, [rbp - 0x2ac]	       122	mv.c	FUNCTION_32
0x644	    0x488985b0feff	            mov qword [rbp - 0x150], rax	       122	mv.c	FUNCTION_32
0x64b	    0x48c785c0feff	              mov qword [rbp - 0x140], 0	       122	mv.c	FUNCTION_32
0x656	    0xc785c8feffff	              mov dword [rbp - 0x138], 2	       122	mv.c	FUNCTION_32
0x660	    0xc785e0feffff	              mov dword [rbp - 0x120], 7	       122	mv.c	FUNCTION_32
0x66a	    0xc785e4feffff	          mov dword [rbp - 0x11c], 0x6e 	       122	mv.c	FUNCTION_32
0x674	    0x48c785e8feff	              mov qword [rbp - 0x118], 0	       122	mv.c	FUNCTION_32
0x67f	    0x488d8558fdff	                  lea rax, [rbp - 0x2a8]	       122	mv.c	FUNCTION_32
0x686	    0x488985f0feff	            mov qword [rbp - 0x110], rax	       122	mv.c	FUNCTION_32
0x68d	    0x48c78500ffff	              mov qword [rbp - 0x100], 0	       122	mv.c	FUNCTION_32
0x698	    0xc78508ffffff	               mov dword [rbp - 0xf8], 2	       122	mv.c	FUNCTION_32
0x6a2	    0x48c78518ffff	               mov qword [rbp - 0xe8], 1	       122	mv.c	FUNCTION_32
0x6ad	    0xc78520ffffff	               mov dword [rbp - 0xe0], 6	       122	mv.c	FUNCTION_32
0x6b7	    0xc78524ffffff	           mov dword [rbp - 0xdc], 0x66 	       122	mv.c	FUNCTION_32
0x6c1	    0x48c78528ffff	               mov qword [rbp - 0xd8], 0	       122	mv.c	FUNCTION_32
0x6cc	    0x488d855cfdff	                  lea rax, [rbp - 0x2a4]	       122	mv.c	FUNCTION_32
0x6d3	    0x48898530ffff	             mov qword [rbp - 0xd0], rax	       122	mv.c	FUNCTION_32
0x6da	    0x48c78540ffff	               mov qword [rbp - 0xc0], 0	       122	mv.c	FUNCTION_32
0x6e5	    0xc78548ffffff	          mov dword [rbp - 0xb8], 0x202 	       122	mv.c	FUNCTION_32
0x6ef	    0xc78560ffffff	               mov dword [rbp - 0xa0], 7	       122	mv.c	FUNCTION_32
0x6f9	    0xc78564ffffff	           mov dword [rbp - 0x9c], 0x6b 	       122	mv.c	FUNCTION_32
0x703	    0x488d8560fdff	                  lea rax, [rbp - 0x2a0]	       122	mv.c	FUNCTION_32
0x70a	    0x48898570ffff	             mov qword [rbp - 0x90], rax	       122	mv.c	FUNCTION_32
0x711	    0x48c745800000	               mov qword [rbp - 0x80], 0	       122	mv.c	FUNCTION_32
0x719	    0xc74588020000	               mov dword [rbp - 0x78], 2	       122	mv.c	FUNCTION_32
0x720	    0x48c745980100	               mov qword [rbp - 0x68], 1	       122	mv.c	FUNCTION_32
0x728	    0x48c785f0fdff	              mov qword [rbp - 0x210], 0	       133	mv.c	FUNCTION_32
0x733	    0xc785f8fdffff	              mov dword [rbp - 0x208], 0	       133	mv.c	FUNCTION_32
0x73d	    0xc785fcfdffff	              mov dword [rbp - 0x204], 0	       133	mv.c	FUNCTION_32
0x747	     0xfb68500feff	           movzx eax, byte [rbp - 0x200]	       133	mv.c	FUNCTION_32
0x74e	          0x83e0fe	                     and eax, 0xfffffffe	       133	mv.c	FUNCTION_32
0x751	    0x888500feffff	              mov byte [rbp - 0x200], al	       133	mv.c	FUNCTION_32
0x757	    0x48c78508feff	              mov qword [rbp - 0x1f8], 0	       133	mv.c	FUNCTION_32
0x762	      0xbe00000000	                              mov esi, 0	       135	mv.c	FUNCTION_32	CALL_10
0x767	      0xbf00000000	                              mov edi, 0	       135	mv.c	FUNCTION_32	CALL_10
0x76c	      0xe800000000	                          call 0x40007b1	       135	mv.c	FUNCTION_32	CALL_10
0x771	    0x488d8da0feff	                  lea rcx, [rbp - 0x160]	       137	mv.c	FUNCTION_32	CALL_11
0x778	    0x488b9538fdff	            mov rdx, qword [rbp - 0x2c8]	       137	mv.c	FUNCTION_32	CALL_11
0x77f	    0x488bb540fdff	            mov rsi, qword [rbp - 0x2c0]	       137	mv.c	FUNCTION_32	CALL_11
0x786	    0x8b854cfdffff	            mov eax, dword [rbp - 0x2b4]	       137	mv.c	FUNCTION_32	CALL_11
0x78c	    0x41b900000000	                              mov r9d, 0	       137	mv.c	FUNCTION_32	CALL_11
0x792	    0x41b800000000	                              mov r8d, 0	       137	mv.c	FUNCTION_32	CALL_11
0x798	            0x89c7	                            mov edi, eax	       137	mv.c	FUNCTION_32	CALL_11
0x79a	      0xe800000000	                          call 0x40007df	       137	mv.c	FUNCTION_32	CALL_11
0x79f	    0x89854cfdffff	            mov dword [rbp - 0x2b4], eax	       137	mv.c	FUNCTION_32	CALL_11
0x7a5	    0x83ad4cfdffff	              sub dword [rbp - 0x2b4], 1	       139	mv.c	FUNCTION_32	IF_1
0x7ac	    0x83bd4cfdffff	              cmp dword [rbp - 0x2b4], 0	       139	mv.c	FUNCTION_32	IF_1
0x7b3	            0x7f14	                            jg 0x4000809	       139	mv.c	FUNCTION_32	IF_1
0x7b5	    0x488d85a0feff	                  lea rax, [rbp - 0x160]	       140	mv.c	FUNCTION_32	CALL_12
0x7bc	          0x4889c6	                            mov rsi, rax	       140	mv.c	FUNCTION_32	CALL_12
0x7bf	      0xbf00000000	                              mov edi, 0	       140	mv.c	FUNCTION_32	CALL_12
0x7c4	      0xe800000000	                          call 0x4000809	       140	mv.c	FUNCTION_32	CALL_12
0x7c9	      0xbe01000000	                              mov esi, 1	       142	mv.c	FUNCTION_32	CALL_13
0x7ce	      0xbf00000000	                              mov edi, 0	       142	mv.c	FUNCTION_32	CALL_13
0x7d3	      0xe800000000	                          call 0x4000818	       142	mv.c	FUNCTION_32	CALL_13
0x7d8	      0xbf00000000	                              mov edi, 0	       143	mv.c	FUNCTION_32	IF_2	CALL_14
0x7dd	      0xe800000000	                          call 0x4000822	       143	mv.c	FUNCTION_32	IF_2	CALL_14
0x7e2	            0x85c0	                           test eax, eax	       143	mv.c	FUNCTION_32	IF_2	CALL_14
0x7e4	            0x7917	                           jns 0x400083d	       143	mv.c	FUNCTION_32	IF_2	CALL_14
0x7e6	      0xbf00000000	                              mov edi, 0	       144	mv.c	FUNCTION_32	CALL_16
0x7eb	      0xe8b9f8ffff	                               call sym.	       144	mv.c	FUNCTION_32	CALL_16
0x7f0	          0x4889c7	                            mov rdi, rax	       144	mv.c	FUNCTION_32	CALL_16
0x7f3	      0xb800000000	                              mov eax, 0	       144	mv.c	FUNCTION_32	CALL_16
0x7f8	      0xe800000000	                          call 0x400083d	       144	mv.c	FUNCTION_32	CALL_16
0x7fd	    0x8b954cfdffff	            mov edx, dword [rbp - 0x2b4]	       146	mv.c	FUNCTION_32	CALL_17
0x803	    0x488bb540fdff	            mov rsi, qword [rbp - 0x2c0]	       146	mv.c	FUNCTION_32	CALL_17
0x80a	    0x488b8538fdff	            mov rax, qword [rbp - 0x2c8]	       146	mv.c	FUNCTION_32	CALL_17
0x811	      0xb900000000	                              mov ecx, 0	       146	mv.c	FUNCTION_32	CALL_17
0x816	          0x4889c7	                            mov rdi, rax	       146	mv.c	FUNCTION_32	CALL_17
0x819	      0xe8b7f8ffff	       call sym.internal_prefix_pathspec	       146	mv.c	FUNCTION_32	CALL_17
0x81e	    0x48898598fdff	            mov qword [rbp - 0x268], rax	       146	mv.c	FUNCTION_32	CALL_17
0x825	    0x8b854cfdffff	            mov eax, dword [rbp - 0x2b4]	       147	mv.c	FUNCTION_32	CALL_18
0x82b	            0x4898	                                    cdqe	       147	mv.c	FUNCTION_32	CALL_18
0x82d	      0xbe04000000	                              mov esi, 4	       147	mv.c	FUNCTION_32	CALL_18
0x832	          0x4889c7	                            mov rdi, rax	       147	mv.c	FUNCTION_32	CALL_18
0x835	      0xe800000000	                          call 0x400087a	       147	mv.c	FUNCTION_32	CALL_18
0x83a	    0x488985b0fdff	            mov qword [rbp - 0x250], rax	       147	mv.c	FUNCTION_32	CALL_18
0x841	    0xc78570fdffff	              mov dword [rbp - 0x290], 2	       153	mv.c	FUNCTION_32
0x84b	    0x83bd4cfdffff	              cmp dword [rbp - 0x2b4], 1	       154	mv.c	FUNCTION_32	IF_3	CALL_20
0x852	            0x753a	                           jne 0x40008ce	       154	mv.c	FUNCTION_32	IF_3	CALL_20
0x854	    0x488b8540fdff	            mov rax, qword [rbp - 0x2c0]	       154	mv.c	FUNCTION_32	IF_3	CALL_20
0x85b	          0x488b00	                    mov rax, qword [rax]	       154	mv.c	FUNCTION_32	IF_3	CALL_20
0x85e	          0x4889c7	                            mov rdi, rax	       154	mv.c	FUNCTION_32	IF_3	CALL_20
0x861	      0xe800000000	                          call 0x40008a6	       154	mv.c	FUNCTION_32	IF_3	CALL_20
0x866	            0x85c0	                           test eax, eax	       154	mv.c	FUNCTION_32	IF_3	CALL_20
0x868	            0x7424	                            je 0x40008ce	       154	mv.c	FUNCTION_32	IF_3	CALL_20
0x86a	    0x488b8540fdff	            mov rax, qword [rbp - 0x2c0]	       154	mv.c	FUNCTION_32	IF_3	CALL_20
0x871	        0x4883c008	                              add rax, 8	       154	mv.c	FUNCTION_32	IF_3	CALL_20
0x875	          0x488b00	                    mov rax, qword [rax]	       154	mv.c	FUNCTION_32	IF_3	CALL_20
0x878	          0x4889c7	                            mov rdi, rax	       154	mv.c	FUNCTION_32	IF_3	CALL_20
0x87b	      0xe800000000	                          call 0x40008c0	       154	mv.c	FUNCTION_32	IF_3	CALL_20
0x880	            0x85c0	                           test eax, eax	       154	mv.c	FUNCTION_32	IF_3	CALL_20
0x882	            0x750a	                           jne 0x40008ce	       154	mv.c	FUNCTION_32	IF_3	CALL_20
0x884	    0xc78570fdffff	              mov dword [rbp - 0x290], 0	       155	mv.c	FUNCTION_32	IF_3
0x88e	    0x8b9570fdffff	            mov edx, dword [rbp - 0x290]	       156	mv.c	FUNCTION_32	CALL_21
0x894	    0x8b854cfdffff	            mov eax, dword [rbp - 0x2b4]	       156	mv.c	FUNCTION_32	CALL_21
0x89a	            0x4898	                                    cdqe	       156	mv.c	FUNCTION_32	CALL_21
0x89c	    0x488d0cc50000	                        lea rcx, [rax*8]	       156	mv.c	FUNCTION_32	CALL_21
0x8a4	    0x488b8540fdff	            mov rax, qword [rbp - 0x2c0]	       156	mv.c	FUNCTION_32	CALL_21
0x8ab	        0x488d3401	                    lea rsi, [rcx + rax]	       156	mv.c	FUNCTION_32	CALL_21
0x8af	    0x488b8538fdff	            mov rax, qword [rbp - 0x2c8]	       156	mv.c	FUNCTION_32	CALL_21
0x8b6	            0x89d1	                            mov ecx, edx	       156	mv.c	FUNCTION_32	CALL_21
0x8b8	      0xba01000000	                              mov edx, 1	       156	mv.c	FUNCTION_32	CALL_21
0x8bd	          0x4889c7	                            mov rdi, rax	       156	mv.c	FUNCTION_32	CALL_21
0x8c0	      0xe810f8ffff	       call sym.internal_prefix_pathspec	       156	mv.c	FUNCTION_32	CALL_21
0x8c5	    0x488985c8fdff	            mov qword [rbp - 0x238], rax	       156	mv.c	FUNCTION_32	CALL_21
0x8cc	    0x8b854cfdffff	            mov eax, dword [rbp - 0x2b4]	       157	mv.c	FUNCTION_32	CALL_22
0x8d2	            0x4898	                                    cdqe	       157	mv.c	FUNCTION_32	CALL_22
0x8d4	      0xbe08000000	                              mov esi, 8	       157	mv.c	FUNCTION_32	CALL_22
0x8d9	          0x4889c7	                            mov rdi, rax	       157	mv.c	FUNCTION_32	CALL_22
0x8dc	      0xe800000000	                          call 0x4000921	       157	mv.c	FUNCTION_32	CALL_22
0x8e1	    0x488985a8fdff	            mov qword [rbp - 0x258], rax	       157	mv.c	FUNCTION_32	CALL_22
0x8e8	    0x488b85c8fdff	            mov rax, qword [rbp - 0x238]	       159	mv.c	FUNCTION_32	IF_4
0x8ef	          0x488b00	                    mov rax, qword [rax]	       159	mv.c	FUNCTION_32	IF_4
0x8f2	           0xfb600	                   movzx eax, byte [rax]	       159	mv.c	FUNCTION_32	IF_4
0x8f5	            0x84c0	                             test al, al	       159	mv.c	FUNCTION_32	IF_4
0x8f7	            0x7530	                           jne 0x4000969	       159	mv.c	FUNCTION_32	IF_4
0x8f9	    0x488b85c8fdff	            mov rax, qword [rbp - 0x238]	       161	mv.c	FUNCTION_32	CALL_23
0x900	          0x488b00	                    mov rax, qword [rax]	       161	mv.c	FUNCTION_32	CALL_23
0x903	    0x8b954cfdffff	            mov edx, dword [rbp - 0x2b4]	       161	mv.c	FUNCTION_32	CALL_23
0x909	    0x488bb540fdff	            mov rsi, qword [rbp - 0x2c0]	       161	mv.c	FUNCTION_32	CALL_23
0x910	      0xb901000000	                              mov ecx, 1	       161	mv.c	FUNCTION_32	CALL_23
0x915	          0x4889c7	                            mov rdi, rax	       161	mv.c	FUNCTION_32	CALL_23
0x918	      0xe8b8f7ffff	       call sym.internal_prefix_pathspec	       161	mv.c	FUNCTION_32	CALL_23
0x91d	    0x488985a0fdff	            mov qword [rbp - 0x260], rax	       161	mv.c	FUNCTION_32	CALL_23
0x924	      0xe9b9000000	                           jmp 0x4000a22	       161	mv.c	FUNCTION_32	CALL_23
0x929	    0x488b85c8fdff	            mov rax, qword [rbp - 0x238]	       162	mv.c	FUNCTION_32	ELSE_1	IF_5	CALL_24
0x930	          0x488b00	                    mov rax, qword [rax]	       162	mv.c	FUNCTION_32	ELSE_1	IF_5	CALL_24
0x933	    0x488d9510feff	                  lea rdx, [rbp - 0x1f0]	       162	mv.c	FUNCTION_32	ELSE_1	IF_5	CALL_24
0x93a	          0x4889d6	                            mov rsi, rdx	       162	mv.c	FUNCTION_32	ELSE_1	IF_5	CALL_24
0x93d	          0x4889c7	                            mov rdi, rax	       162	mv.c	FUNCTION_32	ELSE_1	IF_5	CALL_24
0x940	      0xe800000000	                          call 0x4000985	       162	mv.c	FUNCTION_32	ELSE_1	IF_5	CALL_24
0x945	            0x85c0	                           test eax, eax	       162	mv.c	FUNCTION_32	ELSE_1	IF_5	CALL_24
0x947	            0x755e	                           jne 0x40009e7	       162	mv.c	FUNCTION_32	ELSE_1	IF_5	CALL_24
0x949	    0x8b8528feffff	            mov eax, dword [rbp - 0x1d8]	       163	mv.c	FUNCTION_32	ELSE_1	IF_5	CALL_25
0x94f	      0x2500f00000	                         and eax, 0xf000	       163	mv.c	FUNCTION_32	ELSE_1	IF_5	CALL_25
0x954	      0x3d00400000	                         cmp eax, 0x4000	       162	mv.c	FUNCTION_32	ELSE_1	IF_5	CALL_24
0x959	            0x754c	                           jne 0x40009e7	       162	mv.c	FUNCTION_32	ELSE_1	IF_5	CALL_24
0x95b	    0x488b85c8fdff	            mov rax, qword [rbp - 0x238]	       164	mv.c	FUNCTION_32	ELSE_1	IF_5	CALL_26
0x962	          0x488b00	                    mov rax, qword [rax]	       164	mv.c	FUNCTION_32	ELSE_1	IF_5	CALL_26
0x965	          0x4889c7	                            mov rdi, rax	       164	mv.c	FUNCTION_32	ELSE_1	IF_5	CALL_26
0x968	      0xe878f9ffff	                      call sym.add_slash	       164	mv.c	FUNCTION_32	ELSE_1	IF_5	CALL_26
0x96d	          0x4889c2	                            mov rdx, rax	       164	mv.c	FUNCTION_32	ELSE_1	IF_5	CALL_26
0x970	    0x488b85c8fdff	            mov rax, qword [rbp - 0x238]	       164	mv.c	FUNCTION_32	ELSE_1	IF_5	CALL_26
0x977	          0x488910	                    mov qword [rax], rdx	       164	mv.c	FUNCTION_32	ELSE_1	IF_5	CALL_26
0x97a	    0x488b85c8fdff	            mov rax, qword [rbp - 0x238]	       165	mv.c	FUNCTION_32	ELSE_1	IF_5	CALL_27
0x981	          0x488b00	                    mov rax, qword [rax]	       165	mv.c	FUNCTION_32	ELSE_1	IF_5	CALL_27
0x984	    0x8b954cfdffff	            mov edx, dword [rbp - 0x2b4]	       165	mv.c	FUNCTION_32	ELSE_1	IF_5	CALL_27
0x98a	    0x488bb540fdff	            mov rsi, qword [rbp - 0x2c0]	       165	mv.c	FUNCTION_32	ELSE_1	IF_5	CALL_27
0x991	      0xb901000000	                              mov ecx, 1	       165	mv.c	FUNCTION_32	ELSE_1	IF_5	CALL_27
0x996	          0x4889c7	                            mov rdi, rax	       165	mv.c	FUNCTION_32	ELSE_1	IF_5	CALL_27
0x999	      0xe837f7ffff	       call sym.internal_prefix_pathspec	       165	mv.c	FUNCTION_32	ELSE_1	IF_5	CALL_27
0x99e	    0x488985a0fdff	            mov qword [rbp - 0x260], rax	       165	mv.c	FUNCTION_32	ELSE_1	IF_5	CALL_27
0x9a5	            0xeb3b	                           jmp 0x4000a22	       165	mv.c	FUNCTION_32	ELSE_1	IF_5	CALL_27
0x9a7	    0x83bd4cfdffff	              cmp dword [rbp - 0x2b4], 1	       167	mv.c	FUNCTION_32	ELSE_2	IF_6
0x9ae	            0x7424	                            je 0x4000a14	       167	mv.c	FUNCTION_32	ELSE_2	IF_6
0x9b0	    0x488b85c8fdff	            mov rax, qword [rbp - 0x238]	       168	mv.c	FUNCTION_32	ELSE_2	CALL_29
0x9b7	          0x488b18	                    mov rbx, qword [rax]	       168	mv.c	FUNCTION_32	ELSE_2	CALL_29
0x9ba	      0xbf00000000	                              mov edi, 0	       168	mv.c	FUNCTION_32	ELSE_2	CALL_29
0x9bf	      0xe8e5f6ffff	                               call sym.	       168	mv.c	FUNCTION_32	ELSE_2	CALL_29
0x9c4	          0x4889de	                            mov rsi, rbx	       168	mv.c	FUNCTION_32	ELSE_2	CALL_29
0x9c7	          0x4889c7	                            mov rdi, rax	       168	mv.c	FUNCTION_32	ELSE_2	CALL_29
0x9ca	      0xb800000000	                              mov eax, 0	       168	mv.c	FUNCTION_32	ELSE_2	CALL_29
0x9cf	      0xe800000000	                          call 0x4000a14	       168	mv.c	FUNCTION_32	ELSE_2	CALL_29
0x9d4	    0x488b85c8fdff	            mov rax, qword [rbp - 0x238]	       169	mv.c	FUNCTION_32	ELSE_2
0x9db	    0x488985a0fdff	            mov qword [rbp - 0x260], rax	       169	mv.c	FUNCTION_32	ELSE_2
0x9e2	    0xc7856cfdffff	              mov dword [rbp - 0x294], 0	       173	mv.c	FUNCTION_32	FOR_1
0x9ec	      0xe924080000	                           jmp 0x4001255	       173	mv.c	FUNCTION_32	FOR_1
0x9f1	    0x8b856cfdffff	            mov eax, dword [rbp - 0x294]	       174	mv.c	FUNCTION_32	FOR_1
0x9f7	            0x4898	                                    cdqe	       174	mv.c	FUNCTION_32	FOR_1
0x9f9	    0x488d14c50000	                        lea rdx, [rax*8]	       174	mv.c	FUNCTION_32	FOR_1
0xa01	    0x488b8598fdff	            mov rax, qword [rbp - 0x268]	       174	mv.c	FUNCTION_32	FOR_1
0xa08	          0x4801d0	                            add rax, rdx	       174	mv.c	FUNCTION_32	FOR_1
0xa0b	          0x488b00	                    mov rax, qword [rax]	       174	mv.c	FUNCTION_32	FOR_1
0xa0e	    0x488985d0fdff	            mov qword [rbp - 0x230], rax	       174	mv.c	FUNCTION_32	FOR_1
0xa15	    0x8b856cfdffff	            mov eax, dword [rbp - 0x294]	       174	mv.c	FUNCTION_32	FOR_1
0xa1b	            0x4898	                                    cdqe	       174	mv.c	FUNCTION_32	FOR_1
0xa1d	    0x488d14c50000	                        lea rdx, [rax*8]	       174	mv.c	FUNCTION_32	FOR_1
0xa25	    0x488b85a0fdff	            mov rax, qword [rbp - 0x260]	       174	mv.c	FUNCTION_32	FOR_1
0xa2c	          0x4801d0	                            add rax, rdx	       174	mv.c	FUNCTION_32	FOR_1
0xa2f	          0x488b00	                    mov rax, qword [rax]	       174	mv.c	FUNCTION_32	FOR_1
0xa32	    0x488985b8fdff	            mov qword [rbp - 0x248], rax	       174	mv.c	FUNCTION_32	FOR_1
0xa39	    0x48c785c0fdff	              mov qword [rbp - 0x240], 0	       176	mv.c	FUNCTION_32	FOR_1
0xa44	    0x8b8558fdffff	            mov eax, dword [rbp - 0x2a8]	       178	mv.c	FUNCTION_32	FOR_1	IF_7
0xa4a	            0x85c0	                           test eax, eax	       178	mv.c	FUNCTION_32	FOR_1	IF_7
0xa4c	            0x742b	                            je 0x4000ab9	       178	mv.c	FUNCTION_32	FOR_1	IF_7
0xa4e	      0xbf00000000	                              mov edi, 0	       179	mv.c	FUNCTION_32	FOR_1	CALL_31
0xa53	      0xe851f6ffff	                               call sym.	       179	mv.c	FUNCTION_32	FOR_1	CALL_31
0xa58	          0x4889c1	                            mov rcx, rax	       179	mv.c	FUNCTION_32	FOR_1	CALL_31
0xa5b	    0x488b95b8fdff	            mov rdx, qword [rbp - 0x248]	       179	mv.c	FUNCTION_32	FOR_1	CALL_31
0xa62	    0x488b85d0fdff	            mov rax, qword [rbp - 0x230]	       179	mv.c	FUNCTION_32	FOR_1	CALL_31
0xa69	          0x4889c6	                            mov rsi, rax	       179	mv.c	FUNCTION_32	FOR_1	CALL_31
0xa6c	          0x4889cf	                            mov rdi, rcx	       179	mv.c	FUNCTION_32	FOR_1	CALL_31
0xa6f	      0xb800000000	                              mov eax, 0	       179	mv.c	FUNCTION_32	FOR_1	CALL_31
0xa74	      0xe800000000	                          call 0x4000ab9	       179	mv.c	FUNCTION_32	FOR_1	CALL_31
0xa79	    0x488b85d0fdff	            mov rax, qword [rbp - 0x230]	       181	mv.c	FUNCTION_32	FOR_1	CALL_32
0xa80	          0x4889c7	                            mov rdi, rax	       181	mv.c	FUNCTION_32	FOR_1	CALL_32
0xa83	      0xe800000000	                          call 0x4000ac8	       181	mv.c	FUNCTION_32	FOR_1	CALL_32
0xa88	    0x89857cfdffff	            mov dword [rbp - 0x284], eax	       181	mv.c	FUNCTION_32	FOR_1	CALL_32
0xa8e	    0x488d9510feff	                  lea rdx, [rbp - 0x1f0]	       182	mv.c	FUNCTION_32	FOR_1	IF_8	CALL_33
0xa95	    0x488b85d0fdff	            mov rax, qword [rbp - 0x230]	       182	mv.c	FUNCTION_32	FOR_1	IF_8	CALL_33
0xa9c	          0x4889d6	                            mov rsi, rdx	       182	mv.c	FUNCTION_32	FOR_1	IF_8	CALL_33
0xa9f	          0x4889c7	                            mov rdi, rax	       182	mv.c	FUNCTION_32	FOR_1	IF_8	CALL_33
0xaa2	      0xe800000000	                          call 0x4000ae7	       182	mv.c	FUNCTION_32	FOR_1	IF_8	CALL_33
0xaa7	            0x85c0	                           test eax, eax	       182	mv.c	FUNCTION_32	FOR_1	IF_8	CALL_33
0xaa9	            0x7916	                           jns 0x4000b01	       182	mv.c	FUNCTION_32	FOR_1	IF_8	CALL_33
0xaab	      0xbf00000000	                              mov edi, 0	       183	mv.c	FUNCTION_32	FOR_1	CALL_34
0xab0	      0xe8f4f5ffff	                               call sym.	       183	mv.c	FUNCTION_32	FOR_1	CALL_34
0xab5	    0x488985c0fdff	            mov qword [rbp - 0x240], rax	       183	mv.c	FUNCTION_32	FOR_1	CALL_34
0xabc	      0xe98a050000	                           jmp 0x400108b	       183	mv.c	FUNCTION_32	FOR_1	CALL_34
0xac1	    0x8b857cfdffff	            mov eax, dword [rbp - 0x284]	       184	mv.c	FUNCTION_32	FOR_1	ELSE_3	IF_9	CALL_35
0xac7	          0x4863d0	                         movsxd rdx, eax	       184	mv.c	FUNCTION_32	FOR_1	ELSE_3	IF_9	CALL_35
0xaca	    0x488b8db8fdff	            mov rcx, qword [rbp - 0x248]	       184	mv.c	FUNCTION_32	FOR_1	ELSE_3	IF_9	CALL_35
0xad1	    0x488b85d0fdff	            mov rax, qword [rbp - 0x230]	       184	mv.c	FUNCTION_32	FOR_1	ELSE_3	IF_9	CALL_35
0xad8	          0x4889ce	                            mov rsi, rcx	       184	mv.c	FUNCTION_32	FOR_1	ELSE_3	IF_9	CALL_35
0xadb	          0x4889c7	                            mov rdi, rax	       184	mv.c	FUNCTION_32	FOR_1	ELSE_3	IF_9	CALL_35
0xade	      0xe800000000	                          call 0x4000b23	       184	mv.c	FUNCTION_32	FOR_1	ELSE_3	IF_9	CALL_35
0xae3	            0x85c0	                           test eax, eax	       184	mv.c	FUNCTION_32	FOR_1	ELSE_3	IF_9	CALL_35
0xae5	            0x754a	                           jne 0x4000b71	       184	mv.c	FUNCTION_32	FOR_1	ELSE_3	IF_9	CALL_35
0xae7	    0x8b857cfdffff	            mov eax, dword [rbp - 0x284]	       185	mv.c	FUNCTION_32	FOR_1	ELSE_3	IF_9
0xaed	          0x4863d0	                         movsxd rdx, eax	       185	mv.c	FUNCTION_32	FOR_1	ELSE_3	IF_9
0xaf0	    0x488b85b8fdff	            mov rax, qword [rbp - 0x248]	       185	mv.c	FUNCTION_32	FOR_1	ELSE_3	IF_9
0xaf7	          0x4801d0	                            add rax, rdx	       185	mv.c	FUNCTION_32	FOR_1	ELSE_3	IF_9
0xafa	           0xfb600	                   movzx eax, byte [rax]	       185	mv.c	FUNCTION_32	FOR_1	ELSE_3	IF_9
0xafd	            0x84c0	                             test al, al	       184	mv.c	FUNCTION_32	FOR_1	ELSE_3	IF_9	CALL_35
0xaff	            0x741a	                            je 0x4000b5b	       184	mv.c	FUNCTION_32	FOR_1	ELSE_3	IF_9	CALL_35
0xb01	    0x8b857cfdffff	            mov eax, dword [rbp - 0x284]	       185	mv.c	FUNCTION_32	FOR_1	ELSE_3	IF_9
0xb07	          0x4863d0	                         movsxd rdx, eax	       185	mv.c	FUNCTION_32	FOR_1	ELSE_3	IF_9
0xb0a	    0x488b85b8fdff	            mov rax, qword [rbp - 0x248]	       185	mv.c	FUNCTION_32	FOR_1	ELSE_3	IF_9
0xb11	          0x4801d0	                            add rax, rdx	       185	mv.c	FUNCTION_32	FOR_1	ELSE_3	IF_9
0xb14	           0xfb600	                   movzx eax, byte [rax]	       185	mv.c	FUNCTION_32	FOR_1	ELSE_3	IF_9
0xb17	            0x3c2f	                            cmp al, 0x2f	       185	mv.c	FUNCTION_32	FOR_1	ELSE_3	IF_9
0xb19	            0x7516	                           jne 0x4000b71	       185	mv.c	FUNCTION_32	FOR_1	ELSE_3	IF_9
0xb1b	      0xbf00000000	                              mov edi, 0	       186	mv.c	FUNCTION_32	FOR_1	ELSE_3	IF_9	CALL_36
0xb20	      0xe884f5ffff	                               call sym.	       186	mv.c	FUNCTION_32	FOR_1	ELSE_3	IF_9	CALL_36
0xb25	    0x488985c0fdff	            mov qword [rbp - 0x240], rax	       186	mv.c	FUNCTION_32	FOR_1	ELSE_3	IF_9	CALL_36
0xb2c	      0xe91a050000	                           jmp 0x400108b	       186	mv.c	FUNCTION_32	FOR_1	ELSE_3	IF_9	CALL_36
0xb31	    0x8b8528feffff	            mov eax, dword [rbp - 0x1d8]	       187	mv.c	FUNCTION_32	FOR_1	ELSE_4	IF_10	CALL_37
0xb37	      0x2500f00000	                         and eax, 0xf000	       187	mv.c	FUNCTION_32	FOR_1	ELSE_4	IF_10	CALL_37
0xb3c	      0x3d00400000	                         cmp eax, 0x4000	       187	mv.c	FUNCTION_32	FOR_1	ELSE_4	IF_10	CALL_37
0xb41	           0xf94c0	                                 sete al	       187	mv.c	FUNCTION_32	FOR_1	ELSE_4	IF_10	CALL_37
0xb44	           0xfb6c0	                           movzx eax, al	       187	mv.c	FUNCTION_32	FOR_1	ELSE_4	IF_10	CALL_37
0xb47	    0x898580fdffff	            mov dword [rbp - 0x280], eax	       187	mv.c	FUNCTION_32	FOR_1	ELSE_4	IF_10	CALL_37
0xb4d	    0x83bd80fdffff	              cmp dword [rbp - 0x280], 0	       187	mv.c	FUNCTION_32	FOR_1	ELSE_4	IF_10	CALL_37
0xb54	            0x7433	                            je 0x4000bc9	       187	mv.c	FUNCTION_32	FOR_1	ELSE_4	IF_10	CALL_37
0xb56	    0x488d9510feff	                  lea rdx, [rbp - 0x1f0]	       188	mv.c	FUNCTION_32	FOR_1	ELSE_4	IF_10	CALL_38
0xb5d	    0x488b85b8fdff	            mov rax, qword [rbp - 0x248]	       188	mv.c	FUNCTION_32	FOR_1	ELSE_4	IF_10	CALL_38
0xb64	          0x4889d6	                            mov rsi, rdx	       188	mv.c	FUNCTION_32	FOR_1	ELSE_4	IF_10	CALL_38
0xb67	          0x4889c7	                            mov rdi, rax	       188	mv.c	FUNCTION_32	FOR_1	ELSE_4	IF_10	CALL_38
0xb6a	      0xe800000000	                          call 0x4000baf	       188	mv.c	FUNCTION_32	FOR_1	ELSE_4	IF_10	CALL_38
0xb6f	            0x85c0	                           test eax, eax	       188	mv.c	FUNCTION_32	FOR_1	ELSE_4	IF_10	CALL_38
0xb71	            0x7516	                           jne 0x4000bc9	       188	mv.c	FUNCTION_32	FOR_1	ELSE_4	IF_10	CALL_38
0xb73	      0xbf00000000	                              mov edi, 0	       189	mv.c	FUNCTION_32	FOR_1	ELSE_4	IF_10
0xb78	      0xe82cf5ffff	                               call sym.	       189	mv.c	FUNCTION_32	FOR_1	ELSE_4	IF_10
0xb7d	    0x488985c0fdff	            mov qword [rbp - 0x240], rax	       189	mv.c	FUNCTION_32	FOR_1	ELSE_4	IF_10
0xb84	      0xe9c2040000	                           jmp 0x400108b	       189	mv.c	FUNCTION_32	FOR_1	ELSE_4	IF_10
0xb89	    0x83bd80fdffff	              cmp dword [rbp - 0x280], 0	       190	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11
0xb90	     0xf8414030000	                            je 0x4000eea	       190	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11
0xb96	    0x8b957cfdffff	            mov edx, dword [rbp - 0x284]	       191	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	CALL_40
0xb9c	    0x488b85d0fdff	            mov rax, qword [rbp - 0x230]	       191	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	CALL_40
0xba3	          0x4889c6	                            mov rsi, rax	       191	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	CALL_40
0xba6	      0xbf00000000	                              mov edi, 0	       191	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	CALL_40
0xbab	      0xe800000000	                          call 0x4000bf0	       191	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	CALL_40
0xbb0	    0x898564fdffff	            mov dword [rbp - 0x29c], eax	       191	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	CALL_40
0xbb6	    0x8b8564fdffff	            mov eax, dword [rbp - 0x29c]	       193	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	IF_12
0xbbc	            0x85c0	                           test eax, eax	       193	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	IF_12
0xbbe	            0x7836	                            js 0x4000c36	       193	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	IF_12
0xbc0	    0x8b856cfdffff	            mov eax, dword [rbp - 0x294]	       194	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	IF_12	CALL_41
0xbc6	            0x4898	                                    cdqe	       194	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	IF_12	CALL_41
0xbc8	    0x488d14c50000	                        lea rdx, [rax*8]	       195	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	IF_12
0xbd0	    0x488b85a8fdff	            mov rax, qword [rbp - 0x258]	       194	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	IF_12	CALL_41
0xbd7	          0x4801c2	                            add rdx, rax	       194	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	IF_12	CALL_41
0xbda	    0x8b8d64fdffff	            mov ecx, dword [rbp - 0x29c]	       194	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	IF_12	CALL_41
0xbe0	    0x488b85d0fdff	            mov rax, qword [rbp - 0x230]	       194	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	IF_12	CALL_41
0xbe7	            0x89ce	                            mov esi, ecx	       194	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	IF_12	CALL_41
0xbe9	          0x4889c7	                            mov rdi, rax	       194	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	IF_12	CALL_41
0xbec	      0xe88af7ffff	         call sym.prepare_move_submodule	       194	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	IF_12	CALL_41
0xbf1	      0xe955040000	                           jmp 0x400108b	       194	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	IF_12	CALL_41
0xbf6	    0x488d8d68fdff	                  lea rcx, [rbp - 0x298]	       196	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_6	IF_13	CALL_42
0xbfd	    0x488d9564fdff	                  lea rdx, [rbp - 0x29c]	       196	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_6	IF_13	CALL_42
0xc04	    0x8bb57cfdffff	            mov esi, dword [rbp - 0x284]	       196	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_6	IF_13	CALL_42
0xc0a	    0x488b85d0fdff	            mov rax, qword [rbp - 0x230]	       196	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_6	IF_13	CALL_42
0xc11	          0x4889c7	                            mov rdi, rax	       196	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_6	IF_13	CALL_42
0xc14	      0xe892f8ffff	        call sym.index_range_of_same_dir	       196	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_6	IF_13	CALL_42
0xc19	            0x85c0	                           test eax, eax	       196	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_6	IF_13	CALL_42
0xc1b	            0x7f16	                            jg 0x4000c73	       196	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_6	IF_13	CALL_42
0xc1d	      0xbf00000000	                              mov edi, 0	       198	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_6	IF_13
0xc22	      0xe882f4ffff	                               call sym.	       198	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_6	IF_13
0xc27	    0x488985c0fdff	            mov qword [rbp - 0x240], rax	       198	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_6	IF_13
0xc2e	      0xe918040000	                           jmp 0x400108b	       198	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_6	IF_13
0xc33	    0x8b856cfdffff	            mov eax, dword [rbp - 0x294]	       202	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7
0xc39	            0x4898	                                    cdqe	       202	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7
0xc3b	    0x488d14850000	                        lea rdx, [rax*4]	       202	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7
0xc43	    0x488b85b0fdff	            mov rax, qword [rbp - 0x250]	       202	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7
0xc4a	          0x4801d0	                            add rax, rdx	       202	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7
0xc4d	    0xc70001000000	                      mov dword [rax], 1	       202	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7
0xc53	    0x8b9568fdffff	            mov edx, dword [rbp - 0x298]	       203	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7
0xc59	    0x8b854cfdffff	            mov eax, dword [rbp - 0x2b4]	       203	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7
0xc5f	             0x1c2	                            add edx, eax	       203	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7
0xc61	    0x8b8564fdffff	            mov eax, dword [rbp - 0x29c]	       203	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7
0xc67	            0x29c2	                            sub edx, eax	       203	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7
0xc69	            0x89d0	                            mov eax, edx	       203	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7
0xc6b	    0x898584fdffff	            mov dword [rbp - 0x27c], eax	       203	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7
0xc71	    0x8b8584fdffff	            mov eax, dword [rbp - 0x27c]	       204	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_44
0xc77	            0x4898	                                    cdqe	       204	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_44
0xc79	          0x4889c6	                            mov rsi, rax	       204	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_44
0xc7c	      0xbf08000000	                              mov edi, 8	       204	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_44
0xc81	      0xe8d1f3ffff	                        call sym.st_mult	       204	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_44
0xc86	          0x4889c2	                            mov rdx, rax	       204	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_44
0xc89	    0x488b8598fdff	            mov rax, qword [rbp - 0x268]	       204	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_44
0xc90	          0x4889d6	                            mov rsi, rdx	       204	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_44
0xc93	          0x4889c7	                            mov rdi, rax	       204	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_44
0xc96	      0xe800000000	                          call 0x4000cdb	       204	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_44
0xc9b	    0x48898598fdff	            mov qword [rbp - 0x268], rax	       204	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_44
0xca2	    0x8b8584fdffff	            mov eax, dword [rbp - 0x27c]	       205	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_45
0xca8	            0x4898	                                    cdqe	       205	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_45
0xcaa	          0x4889c6	                            mov rsi, rax	       205	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_45
0xcad	      0xbf08000000	                              mov edi, 8	       205	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_45
0xcb2	      0xe8a0f3ffff	                        call sym.st_mult	       205	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_45
0xcb7	          0x4889c2	                            mov rdx, rax	       205	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_45
0xcba	    0x488b85a0fdff	            mov rax, qword [rbp - 0x260]	       205	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_45
0xcc1	          0x4889d6	                            mov rsi, rdx	       205	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_45
0xcc4	          0x4889c7	                            mov rdi, rax	       205	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_45
0xcc7	      0xe800000000	                          call 0x4000d0c	       205	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_45
0xccc	    0x488985a0fdff	            mov qword [rbp - 0x260], rax	       205	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_45
0xcd3	    0x8b8584fdffff	            mov eax, dword [rbp - 0x27c]	       206	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_46
0xcd9	            0x4898	                                    cdqe	       206	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_46
0xcdb	          0x4889c6	                            mov rsi, rax	       206	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_46
0xcde	      0xbf04000000	                              mov edi, 4	       206	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_46
0xce3	      0xe86ff3ffff	                        call sym.st_mult	       206	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_46
0xce8	          0x4889c2	                            mov rdx, rax	       206	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_46
0xceb	    0x488b85b0fdff	            mov rax, qword [rbp - 0x250]	       206	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_46
0xcf2	          0x4889d6	                            mov rsi, rdx	       206	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_46
0xcf5	          0x4889c7	                            mov rdi, rax	       206	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_46
0xcf8	      0xe800000000	                          call 0x4000d3d	       206	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_46
0xcfd	    0x488985b0fdff	            mov qword [rbp - 0x250], rax	       206	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_46
0xd04	    0x8b8584fdffff	            mov eax, dword [rbp - 0x27c]	       207	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_47
0xd0a	            0x4898	                                    cdqe	       207	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_47
0xd0c	          0x4889c6	                            mov rsi, rax	       207	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_47
0xd0f	      0xbf08000000	                              mov edi, 8	       207	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_47
0xd14	      0xe83ef3ffff	                        call sym.st_mult	       207	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_47
0xd19	          0x4889c2	                            mov rdx, rax	       207	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_47
0xd1c	    0x488b85a8fdff	            mov rax, qword [rbp - 0x258]	       207	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_47
0xd23	          0x4889d6	                            mov rsi, rdx	       207	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_47
0xd26	          0x4889c7	                            mov rdi, rax	       207	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_47
0xd29	      0xe800000000	                          call 0x4000d6e	       207	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_47
0xd2e	    0x488985a8fdff	            mov qword [rbp - 0x258], rax	       207	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_47
0xd35	    0x488b85b8fdff	            mov rax, qword [rbp - 0x248]	       209	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_48
0xd3c	          0x4889c7	                            mov rdi, rax	       209	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_48
0xd3f	      0xe8a1f5ffff	                      call sym.add_slash	       209	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_48
0xd44	    0x488985b8fdff	            mov qword [rbp - 0x248], rax	       209	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_48
0xd4b	    0x488b85b8fdff	            mov rax, qword [rbp - 0x248]	       210	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_49
0xd52	          0x4889c7	                            mov rdi, rax	       210	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_49
0xd55	      0xe800000000	                          call 0x4000d9a	       210	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_49
0xd5a	    0x898588fdffff	            mov dword [rbp - 0x278], eax	       210	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	CALL_49
0xd60	    0xc78578fdffff	              mov dword [rbp - 0x288], 0	       212	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xd6a	      0xe904010000	                           jmp 0x4000eb3	       212	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xd6f	    0x488b05000000	            mov rax, qword [0x04000db6] 	       213	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xd76	    0x8b8d64fdffff	            mov ecx, dword [rbp - 0x29c]	       213	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xd7c	    0x8b9578fdffff	            mov edx, dword [rbp - 0x288]	       213	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xd82	             0x1ca	                            add edx, ecx	       213	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xd84	          0x4863d2	                         movsxd rdx, edx	       213	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xd87	        0x48c1e203	                              shl rdx, 3	       213	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xd8b	          0x4801d0	                            add rax, rdx	       213	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xd8e	          0x488b00	                    mov rax, qword [rax]	       213	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xd91	        0x4883c058	                           add rax, 0x58	       213	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xd95	    0x488985d8fdff	            mov qword [rbp - 0x228], rax	       213	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xd9c	    0x8b954cfdffff	            mov edx, dword [rbp - 0x2b4]	       214	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xda2	    0x8b8578fdffff	            mov eax, dword [rbp - 0x288]	       214	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xda8	             0x1d0	                            add eax, edx	       214	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xdaa	            0x4898	                                    cdqe	       214	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xdac	    0x488d14c50000	                        lea rdx, [rax*8]	       214	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xdb4	    0x488b8598fdff	            mov rax, qword [rbp - 0x268]	       214	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xdbb	          0x4801c2	                            add rdx, rax	       214	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xdbe	    0x488b85d8fdff	            mov rax, qword [rbp - 0x228]	       214	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xdc5	          0x488902	                    mov qword [rdx], rax	       214	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xdc8	    0x8b954cfdffff	            mov edx, dword [rbp - 0x2b4]	       215	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xdce	    0x8b8578fdffff	            mov eax, dword [rbp - 0x288]	       215	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xdd4	             0x1d0	                            add eax, edx	       215	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xdd6	            0x4898	                                    cdqe	       215	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xdd8	    0x488d14c50000	                        lea rdx, [rax*8]	       215	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xde0	    0x488b85a0fdff	            mov rax, qword [rbp - 0x260]	       215	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xde7	        0x488d1c02	                    lea rbx, [rdx + rax]	       215	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xdeb	    0x8b857cfdffff	            mov eax, dword [rbp - 0x284]	       216	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2	CALL_50
0xdf1	            0x4898	                                    cdqe	       216	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2	CALL_50
0xdf3	        0x488d5001	                      lea rdx, [rax + 1]	       216	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2	CALL_50
0xdf7	    0x488b85d8fdff	            mov rax, qword [rbp - 0x228]	       216	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2	CALL_50
0xdfe	          0x4801c2	                            add rdx, rax	       216	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2	CALL_50
0xe01	    0x8b8d88fdffff	            mov ecx, dword [rbp - 0x278]	       216	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2	CALL_50
0xe07	    0x488b85b8fdff	            mov rax, qword [rbp - 0x248]	       216	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2	CALL_50
0xe0e	            0x89ce	                            mov esi, ecx	       216	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2	CALL_50
0xe10	          0x4889c7	                            mov rdi, rax	       216	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2	CALL_50
0xe13	      0xe800000000	                          call 0x4000e58	       216	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2	CALL_50
0xe18	          0x488903	                    mov qword [rbx], rax	       215	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xe1b	    0x8b954cfdffff	            mov edx, dword [rbp - 0x2b4]	       217	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xe21	    0x8b8578fdffff	            mov eax, dword [rbp - 0x288]	       217	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xe27	             0x1d0	                            add eax, edx	       217	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xe29	            0x4898	                                    cdqe	       217	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xe2b	    0x488d14850000	                        lea rdx, [rax*4]	       217	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xe33	    0x488b85b0fdff	            mov rax, qword [rbp - 0x250]	       217	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xe3a	          0x4801d0	                            add rax, rdx	       217	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xe3d	    0xc70002000000	                      mov dword [rax], 2	       217	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xe43	    0x8b954cfdffff	            mov edx, dword [rbp - 0x2b4]	       218	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xe49	    0x8b8578fdffff	            mov eax, dword [rbp - 0x288]	       218	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xe4f	             0x1d0	                            add eax, edx	       218	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xe51	            0x4898	                                    cdqe	       218	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xe53	    0x488d14c50000	                        lea rdx, [rax*8]	       218	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xe5b	    0x488b85a8fdff	            mov rax, qword [rbp - 0x258]	       218	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xe62	          0x4801d0	                            add rax, rdx	       218	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xe65	    0x48c700000000	                      mov qword [rax], 0	       218	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xe6c	    0x838578fdffff	              add dword [rbp - 0x288], 1	       212	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xe73	    0x8b9568fdffff	            mov edx, dword [rbp - 0x298]	       212	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xe79	    0x8b8564fdffff	            mov eax, dword [rbp - 0x29c]	       212	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xe7f	            0x29c2	                            sub edx, eax	       212	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xe81	            0x89d0	                            mov eax, edx	       212	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xe83	    0x3b8578fdffff	            cmp eax, dword [rbp - 0x288]	       212	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xe89	     0xf8fe0feffff	                            jg 0x4000daf	       212	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7	FOR_2
0xe8f	    0x8b9568fdffff	            mov edx, dword [rbp - 0x298]	       220	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7
0xe95	    0x8b8564fdffff	            mov eax, dword [rbp - 0x29c]	       220	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7
0xe9b	            0x29c2	                            sub edx, eax	       220	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7
0xe9d	            0x89d0	                            mov eax, edx	       220	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7
0xe9f	     0x1854cfdffff	            add dword [rbp - 0x2b4], eax	       220	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7
0xea5	      0xe9a1010000	                           jmp 0x400108b	       220	mv.c	FUNCTION_32	FOR_1	ELSE_5	IF_11	ELSE_7
0xeaa	    0x8b957cfdffff	            mov edx, dword [rbp - 0x284]	       222	mv.c	FUNCTION_32	FOR_1	ELSE_8	IF_14	CALL_51
0xeb0	    0x488b85d0fdff	            mov rax, qword [rbp - 0x230]	       222	mv.c	FUNCTION_32	FOR_1	ELSE_8	IF_14	CALL_51
0xeb7	          0x4889c6	                            mov rsi, rax	       222	mv.c	FUNCTION_32	FOR_1	ELSE_8	IF_14	CALL_51
0xeba	      0xbf00000000	                              mov edi, 0	       222	mv.c	FUNCTION_32	FOR_1	ELSE_8	IF_14	CALL_51
0xebf	      0xe800000000	                          call 0x4000f04	       222	mv.c	FUNCTION_32	FOR_1	ELSE_8	IF_14	CALL_51
0xec4	            0x85c0	                           test eax, eax	       222	mv.c	FUNCTION_32	FOR_1	ELSE_8	IF_14	CALL_51
0xec6	            0x7916	                           jns 0x4000f1e	       222	mv.c	FUNCTION_32	FOR_1	ELSE_8	IF_14	CALL_51
0xec8	      0xbf00000000	                              mov edi, 0	       223	mv.c	FUNCTION_32	FOR_1	ELSE_8	IF_14
0xecd	      0xe8d7f1ffff	                               call sym.	       223	mv.c	FUNCTION_32	FOR_1	ELSE_8	IF_14
0xed2	    0x488985c0fdff	            mov qword [rbp - 0x240], rax	       223	mv.c	FUNCTION_32	FOR_1	ELSE_8	IF_14
0xed9	      0xe96d010000	                           jmp 0x400108b	       223	mv.c	FUNCTION_32	FOR_1	ELSE_8	IF_14
0xede	    0x488d9510feff	                  lea rdx, [rbp - 0x1f0]	       224	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	CALL_53
0xee5	    0x488b85b8fdff	            mov rax, qword [rbp - 0x248]	       224	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	CALL_53
0xeec	          0x4889d6	                            mov rsi, rdx	       224	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	CALL_53
0xeef	          0x4889c7	                            mov rdi, rax	       224	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	CALL_53
0xef2	      0xe800000000	                          call 0x4000f37	       224	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	CALL_53
0xef7	            0x85c0	                           test eax, eax	       224	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	CALL_53
0xef9	     0xf85c2000000	                           jne 0x4001001	       224	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	CALL_53
0xeff	    0x8b0500000000	            mov eax, dword [0x04000f45] 	       225	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	CALL_54
0xf05	            0x85c0	                           test eax, eax	       224	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	CALL_53
0xf07	            0x7421	                            je 0x4000f6a	       224	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	CALL_53
0xf09	    0x488b95b8fdff	            mov rdx, qword [rbp - 0x248]	       225	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	CALL_54
0xf10	    0x488b85d0fdff	            mov rax, qword [rbp - 0x230]	       225	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	CALL_54
0xf17	          0x4889d6	                            mov rsi, rdx	       225	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	CALL_54
0xf1a	          0x4889c7	                            mov rdi, rax	       225	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	CALL_54
0xf1d	      0xe800000000	                          call 0x4000f62	       225	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	CALL_54
0xf22	            0x85c0	                           test eax, eax	       225	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	CALL_54
0xf24	     0xf8497000000	                            je 0x4001001	       225	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	CALL_54
0xf2a	      0xbf00000000	                              mov edi, 0	       226	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	CALL_55
0xf2f	      0xe875f1ffff	                               call sym.	       226	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	CALL_55
0xf34	    0x488985c0fdff	            mov qword [rbp - 0x240], rax	       226	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	CALL_55
0xf3b	    0x8b855cfdffff	            mov eax, dword [rbp - 0x2a4]	       227	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	IF_16
0xf41	            0x85c0	                           test eax, eax	       227	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	IF_16
0xf43	     0xf8402010000	                            je 0x400108b	       227	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	IF_16
0xf49	    0x8b8528feffff	            mov eax, dword [rbp - 0x1d8]	       232	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	IF_16	IF_17	CALL_57
0xf4f	      0x2500f00000	                         and eax, 0xf000	       232	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	IF_16	IF_17	CALL_57
0xf54	      0x3d00800000	                         cmp eax, 0x8000	       232	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	IF_16	IF_17	CALL_57
0xf59	            0x7412	                            je 0x4000fad	       232	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	IF_16	IF_17	CALL_57
0xf5b	    0x8b8528feffff	            mov eax, dword [rbp - 0x1d8]	       232	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	IF_16	IF_17	CALL_57
0xf61	      0x2500f00000	                         and eax, 0xf000	       232	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	IF_16	IF_17	CALL_57
0xf66	      0x3d00a00000	                         cmp eax, 0xa000	       232	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	IF_16	IF_17	CALL_57
0xf6b	            0x753e	                           jne 0x4000feb	       232	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	IF_16	IF_17	CALL_57
0xf6d	    0x8b8554fdffff	            mov eax, dword [rbp - 0x2ac]	       233	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	IF_16	IF_17	IF_18
0xf73	            0x85c0	                           test eax, eax	       233	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	IF_16	IF_17	IF_18
0xf75	            0x7424	                            je 0x4000fdb	       233	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	IF_16	IF_17	IF_18
0xf77	      0xbf00000000	                              mov edi, 0	       234	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	IF_16	IF_17	CALL_59
0xf7c	      0xe828f1ffff	                               call sym.	       234	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	IF_16	IF_17	CALL_59
0xf81	          0x4889c2	                            mov rdx, rax	       234	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	IF_16	IF_17	CALL_59
0xf84	    0x488b85b8fdff	            mov rax, qword [rbp - 0x248]	       234	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	IF_16	IF_17	CALL_59
0xf8b	          0x4889c6	                            mov rsi, rax	       234	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	IF_16	IF_17	CALL_59
0xf8e	          0x4889d7	                            mov rdi, rdx	       234	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	IF_16	IF_17	CALL_59
0xf91	      0xb800000000	                              mov eax, 0	       234	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	IF_16	IF_17	CALL_59
0xf96	      0xe800000000	                          call 0x4000fdb	       234	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	IF_16	IF_17	CALL_59
0xf9b	    0x48c785c0fdff	              mov qword [rbp - 0x240], 0	       235	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	IF_16	IF_17
0xfa6	      0xe9a0000000	                           jmp 0x400108b	       227	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	IF_16
0xfab	      0xbf00000000	                              mov edi, 0	       237	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	IF_16	CALL_60
0xfb0	      0xe8f4f0ffff	                               call sym.	       237	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	IF_16	CALL_60
0xfb5	    0x488985c0fdff	            mov qword [rbp - 0x240], rax	       237	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	IF_16	CALL_60
0xfbc	      0xe98a000000	                           jmp 0x400108b	       227	mv.c	FUNCTION_32	FOR_1	ELSE_9	IF_15	IF_16
0xfc1	    0x488b95b8fdff	            mov rdx, qword [rbp - 0x248]	       239	mv.c	FUNCTION_32	FOR_1	ELSE_11	IF_19	CALL_61
0xfc8	    0x488d85f0fdff	                  lea rax, [rbp - 0x210]	       239	mv.c	FUNCTION_32	FOR_1	ELSE_11	IF_19	CALL_61
0xfcf	          0x4889d6	                            mov rsi, rdx	       239	mv.c	FUNCTION_32	FOR_1	ELSE_11	IF_19	CALL_61
0xfd2	          0x4889c7	                            mov rdi, rax	       239	mv.c	FUNCTION_32	FOR_1	ELSE_11	IF_19	CALL_61
0xfd5	      0xe800000000	                          call 0x400101a	       239	mv.c	FUNCTION_32	FOR_1	ELSE_11	IF_19	CALL_61
0xfda	            0x85c0	                           test eax, eax	       239	mv.c	FUNCTION_32	FOR_1	ELSE_11	IF_19	CALL_61
0xfdc	            0x7413	                            je 0x4001031	       239	mv.c	FUNCTION_32	FOR_1	ELSE_11	IF_19	CALL_61
0xfde	      0xbf00000000	                              mov edi, 0	       240	mv.c	FUNCTION_32	FOR_1	ELSE_11	IF_19
0xfe3	      0xe8c1f0ffff	                               call sym.	       240	mv.c	FUNCTION_32	FOR_1	ELSE_11	IF_19
0xfe8	    0x488985c0fdff	            mov qword [rbp - 0x240], rax	       240	mv.c	FUNCTION_32	FOR_1	ELSE_11	IF_19
0xfef	            0xeb5a	                           jmp 0x400108b	       240	mv.c	FUNCTION_32	FOR_1	ELSE_11	IF_19
0xff1	    0x488b85b8fdff	            mov rax, qword [rbp - 0x248]	       241	mv.c	FUNCTION_32	FOR_1	ELSE_12	IF_20	CALL_64
0xff8	          0x4889c7	                            mov rdi, rax	       241	mv.c	FUNCTION_32	FOR_1	ELSE_12	IF_20	CALL_64
0xffb	      0xe800000000	                          call 0x4001040	       241	mv.c	FUNCTION_32	FOR_1	ELSE_12	IF_20	CALL_64
0x1000	        0x488d50ff	                      lea rdx, [rax - 1]	       241	mv.c	FUNCTION_32	FOR_1	ELSE_12	IF_20	CALL_64
0x1004	    0x488b85b8fdff	            mov rax, qword [rbp - 0x248]	       241	mv.c	FUNCTION_32	FOR_1	ELSE_12	IF_20	CALL_64
0x100b	          0x4801d0	                            add rax, rdx	       241	mv.c	FUNCTION_32	FOR_1	ELSE_12	IF_20	CALL_64
0x100e	           0xfb600	                   movzx eax, byte [rax]	       241	mv.c	FUNCTION_32	FOR_1	ELSE_12	IF_20	CALL_64
0x1011	           0xfbec0	                           movsx eax, al	       241	mv.c	FUNCTION_32	FOR_1	ELSE_12	IF_20	CALL_64
0x1014	            0x89c7	                            mov edi, eax	       241	mv.c	FUNCTION_32	FOR_1	ELSE_12	IF_20	CALL_64
0x1016	      0xe8e5efffff	                 call sym.git_is_dir_sep	       241	mv.c	FUNCTION_32	FOR_1	ELSE_12	IF_20	CALL_64
0x101b	            0x85c0	                           test eax, eax	       241	mv.c	FUNCTION_32	FOR_1	ELSE_12	IF_20	CALL_64
0x101d	            0x7413	                            je 0x4001072	       241	mv.c	FUNCTION_32	FOR_1	ELSE_12	IF_20	CALL_64
0x101f	      0xbf00000000	                              mov edi, 0	       242	mv.c	FUNCTION_32	FOR_1	ELSE_12	IF_20
0x1024	      0xe880f0ffff	                               call sym.	       242	mv.c	FUNCTION_32	FOR_1	ELSE_12	IF_20
0x1029	    0x488985c0fdff	            mov qword [rbp - 0x240], rax	       242	mv.c	FUNCTION_32	FOR_1	ELSE_12	IF_20
0x1030	            0xeb19	                           jmp 0x400108b	       242	mv.c	FUNCTION_32	FOR_1	ELSE_12	IF_20
0x1032	    0x488b95b8fdff	            mov rdx, qword [rbp - 0x248]	       244	mv.c	FUNCTION_32	FOR_1	CALL_66
0x1039	    0x488d85f0fdff	                  lea rax, [rbp - 0x210]	       244	mv.c	FUNCTION_32	FOR_1	CALL_66
0x1040	          0x4889d6	                            mov rsi, rdx	       244	mv.c	FUNCTION_32	FOR_1	CALL_66
0x1043	          0x4889c7	                            mov rdi, rax	       244	mv.c	FUNCTION_32	FOR_1	CALL_66
0x1046	      0xe800000000	                          call 0x400108b	       244	mv.c	FUNCTION_32	FOR_1	CALL_66
0x104b	    0x4883bdc0fdff	              cmp qword [rbp - 0x240], 0	       246	mv.c	FUNCTION_32	FOR_1	IF_21
0x1053	     0xf84b4010000	                            je 0x400124d	       246	mv.c	FUNCTION_32	FOR_1	IF_21
0x1059	    0x8b8560fdffff	            mov eax, dword [rbp - 0x2a0]	       248	mv.c	FUNCTION_32	FOR_1	IF_22
0x105f	            0x85c0	                           test eax, eax	       248	mv.c	FUNCTION_32	FOR_1	IF_22
0x1061	            0x752f	                           jne 0x40010d2	       248	mv.c	FUNCTION_32	FOR_1	IF_22
0x1063	      0xbf00000000	                              mov edi, 0	       249	mv.c	FUNCTION_32	FOR_1	IF_22	CALL_68
0x1068	      0xe83cf0ffff	                               call sym.	       249	mv.c	FUNCTION_32	FOR_1	IF_22	CALL_68
0x106d	          0x4889c7	                            mov rdi, rax	       249	mv.c	FUNCTION_32	FOR_1	IF_22	CALL_68
0x1070	    0x488b8db8fdff	            mov rcx, qword [rbp - 0x248]	       249	mv.c	FUNCTION_32	FOR_1	IF_22	CALL_68
0x1077	    0x488b95d0fdff	            mov rdx, qword [rbp - 0x230]	       249	mv.c	FUNCTION_32	FOR_1	IF_22	CALL_68
0x107e	    0x488b85c0fdff	            mov rax, qword [rbp - 0x240]	       249	mv.c	FUNCTION_32	FOR_1	IF_22	CALL_68
0x1085	          0x4889c6	                            mov rsi, rax	       249	mv.c	FUNCTION_32	FOR_1	IF_22	CALL_68
0x1088	      0xb800000000	                              mov eax, 0	       249	mv.c	FUNCTION_32	FOR_1	IF_22	CALL_68
0x108d	      0xe800000000	                          call 0x40010d2	       249	mv.c	FUNCTION_32	FOR_1	IF_22	CALL_68
0x1092	    0x83ad4cfdffff	              sub dword [rbp - 0x2b4], 1	       251	mv.c	FUNCTION_32	FOR_1	IF_23
0x1099	    0x83bd4cfdffff	              cmp dword [rbp - 0x2b4], 0	       251	mv.c	FUNCTION_32	FOR_1	IF_23
0x10a0	     0xf8e68010000	                           jle 0x400124e	       251	mv.c	FUNCTION_32	FOR_1	IF_23
0x10a6	    0x8b854cfdffff	            mov eax, dword [rbp - 0x2b4]	       252	mv.c	FUNCTION_32	FOR_1	IF_23
0x10ac	    0x2b856cfdffff	            sub eax, dword [rbp - 0x294]	       252	mv.c	FUNCTION_32	FOR_1	IF_23
0x10b2	    0x89858cfdffff	            mov dword [rbp - 0x274], eax	       252	mv.c	FUNCTION_32	FOR_1	IF_23
0x10b8	    0x8b858cfdffff	            mov eax, dword [rbp - 0x274]	       253	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_69
0x10be	            0x4898	                                    cdqe	       253	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_69
0x10c0	    0x488d14c50000	                        lea rdx, [rax*8]	       253	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_69
0x10c8	    0x8b856cfdffff	            mov eax, dword [rbp - 0x294]	       253	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_69
0x10ce	            0x4898	                                    cdqe	       253	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_69
0x10d0	        0x4883c001	                              add rax, 1	       253	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_69
0x10d4	    0x488d0cc50000	                        lea rcx, [rax*8]	       253	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_69
0x10dc	    0x488b8598fdff	            mov rax, qword [rbp - 0x268]	       253	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_69
0x10e3	          0x4801c1	                            add rcx, rax	       253	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_69
0x10e6	    0x8b856cfdffff	            mov eax, dword [rbp - 0x294]	       253	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_69
0x10ec	            0x4898	                                    cdqe	       253	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_69
0x10ee	    0x488d34c50000	                        lea rsi, [rax*8]	       253	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_69
0x10f6	    0x488b8598fdff	            mov rax, qword [rbp - 0x268]	       253	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_69
0x10fd	          0x4801f0	                            add rax, rsi	       253	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_69
0x1100	          0x4889ce	                            mov rsi, rcx	       253	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_69
0x1103	          0x4889c7	                            mov rdi, rax	       253	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_69
0x1106	      0xe800000000	                          call 0x400114b	       253	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_69
0x110b	    0x8b858cfdffff	            mov eax, dword [rbp - 0x274]	       255	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_70
0x1111	            0x4898	                                    cdqe	       255	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_70
0x1113	    0x488d14c50000	                        lea rdx, [rax*8]	       255	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_70
0x111b	    0x8b856cfdffff	            mov eax, dword [rbp - 0x294]	       255	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_70
0x1121	            0x4898	                                    cdqe	       255	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_70
0x1123	        0x4883c001	                              add rax, 1	       255	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_70
0x1127	    0x488d0cc50000	                        lea rcx, [rax*8]	       255	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_70
0x112f	    0x488b85a0fdff	            mov rax, qword [rbp - 0x260]	       255	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_70
0x1136	          0x4801c1	                            add rcx, rax	       255	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_70
0x1139	    0x8b856cfdffff	            mov eax, dword [rbp - 0x294]	       255	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_70
0x113f	            0x4898	                                    cdqe	       255	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_70
0x1141	    0x488d34c50000	                        lea rsi, [rax*8]	       255	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_70
0x1149	    0x488b85a0fdff	            mov rax, qword [rbp - 0x260]	       255	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_70
0x1150	          0x4801f0	                            add rax, rsi	       255	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_70
0x1153	          0x4889ce	                            mov rsi, rcx	       255	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_70
0x1156	          0x4889c7	                            mov rdi, rax	       255	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_70
0x1159	      0xe800000000	                          call 0x400119e	       255	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_70
0x115e	    0x8b858cfdffff	            mov eax, dword [rbp - 0x274]	       257	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_71
0x1164	            0x4898	                                    cdqe	       257	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_71
0x1166	    0x488d14850000	                        lea rdx, [rax*4]	       257	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_71
0x116e	    0x8b856cfdffff	            mov eax, dword [rbp - 0x294]	       257	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_71
0x1174	            0x4898	                                    cdqe	       257	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_71
0x1176	        0x4883c001	                              add rax, 1	       257	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_71
0x117a	    0x488d0c850000	                        lea rcx, [rax*4]	       257	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_71
0x1182	    0x488b85b0fdff	            mov rax, qword [rbp - 0x250]	       257	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_71
0x1189	          0x4801c1	                            add rcx, rax	       257	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_71
0x118c	    0x8b856cfdffff	            mov eax, dword [rbp - 0x294]	       257	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_71
0x1192	            0x4898	                                    cdqe	       257	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_71
0x1194	    0x488d34850000	                        lea rsi, [rax*4]	       257	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_71
0x119c	    0x488b85b0fdff	            mov rax, qword [rbp - 0x250]	       257	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_71
0x11a3	          0x4801f0	                            add rax, rsi	       257	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_71
0x11a6	          0x4889ce	                            mov rsi, rcx	       257	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_71
0x11a9	          0x4889c7	                            mov rdi, rax	       257	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_71
0x11ac	      0xe800000000	                          call 0x40011f1	       257	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_71
0x11b1	    0x8b858cfdffff	            mov eax, dword [rbp - 0x274]	       259	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_72
0x11b7	            0x4898	                                    cdqe	       259	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_72
0x11b9	    0x488d14c50000	                        lea rdx, [rax*8]	       259	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_72
0x11c1	    0x8b856cfdffff	            mov eax, dword [rbp - 0x294]	       259	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_72
0x11c7	            0x4898	                                    cdqe	       259	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_72
0x11c9	        0x4883c001	                              add rax, 1	       259	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_72
0x11cd	    0x488d0cc50000	                        lea rcx, [rax*8]	       259	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_72
0x11d5	    0x488b85a8fdff	            mov rax, qword [rbp - 0x258]	       259	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_72
0x11dc	          0x4801c1	                            add rcx, rax	       259	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_72
0x11df	    0x8b856cfdffff	            mov eax, dword [rbp - 0x294]	       259	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_72
0x11e5	            0x4898	                                    cdqe	       259	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_72
0x11e7	    0x488d34c50000	                        lea rsi, [rax*8]	       259	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_72
0x11ef	    0x488b85a8fdff	            mov rax, qword [rbp - 0x258]	       259	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_72
0x11f6	          0x4801f0	                            add rax, rsi	       259	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_72
0x11f9	          0x4889ce	                            mov rsi, rcx	       259	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_72
0x11fc	          0x4889c7	                            mov rdi, rax	       259	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_72
0x11ff	      0xe800000000	                          call 0x4001244	       259	mv.c	FUNCTION_32	FOR_1	IF_23	CALL_72
0x1204	    0x83ad6cfdffff	              sub dword [rbp - 0x294], 1	       261	mv.c	FUNCTION_32	FOR_1	IF_23
0x120b	            0xeb01	                           jmp 0x400124e	       261	mv.c	FUNCTION_32	FOR_1	IF_23
0x120d	              0x90	                                     nop	       247	mv.c	FUNCTION_32	FOR_1	IF_21
0x120e	    0x83856cfdffff	              add dword [rbp - 0x294], 1	       173	mv.c	FUNCTION_32	FOR_1
0x1215	    0x8b856cfdffff	            mov eax, dword [rbp - 0x294]	       173	mv.c	FUNCTION_32	FOR_1
0x121b	    0x3b854cfdffff	            cmp eax, dword [rbp - 0x2b4]	       173	mv.c	FUNCTION_32	FOR_1
0x1221	     0xf8ccaf7ffff	                            jl 0x4000a31	       173	mv.c	FUNCTION_32	FOR_1
0x1227	    0xc7856cfdffff	              mov dword [rbp - 0x294], 0	       265	mv.c	FUNCTION_32	FOR_3
0x1231	      0xe92e020000	                           jmp 0x40014a4	       265	mv.c	FUNCTION_32	FOR_3
0x1236	    0x8b856cfdffff	            mov eax, dword [rbp - 0x294]	       266	mv.c	FUNCTION_32	FOR_3
0x123c	            0x4898	                                    cdqe	       266	mv.c	FUNCTION_32	FOR_3
0x123e	    0x488d14c50000	                        lea rdx, [rax*8]	       266	mv.c	FUNCTION_32	FOR_3
0x1246	    0x488b8598fdff	            mov rax, qword [rbp - 0x268]	       266	mv.c	FUNCTION_32	FOR_3
0x124d	          0x4801d0	                            add rax, rdx	       266	mv.c	FUNCTION_32	FOR_3
0x1250	          0x488b00	                    mov rax, qword [rax]	       266	mv.c	FUNCTION_32	FOR_3
0x1253	    0x488985e0fdff	            mov qword [rbp - 0x220], rax	       266	mv.c	FUNCTION_32	FOR_3
0x125a	    0x8b856cfdffff	            mov eax, dword [rbp - 0x294]	       266	mv.c	FUNCTION_32	FOR_3
0x1260	            0x4898	                                    cdqe	       266	mv.c	FUNCTION_32	FOR_3
0x1262	    0x488d14c50000	                        lea rdx, [rax*8]	       266	mv.c	FUNCTION_32	FOR_3
0x126a	    0x488b85a0fdff	            mov rax, qword [rbp - 0x260]	       266	mv.c	FUNCTION_32	FOR_3
0x1271	          0x4801d0	                            add rax, rdx	       266	mv.c	FUNCTION_32	FOR_3
0x1274	          0x488b00	                    mov rax, qword [rax]	       266	mv.c	FUNCTION_32	FOR_3
0x1277	    0x488985e8fdff	            mov qword [rbp - 0x218], rax	       266	mv.c	FUNCTION_32	FOR_3
0x127e	    0x8b856cfdffff	            mov eax, dword [rbp - 0x294]	       267	mv.c	FUNCTION_32	FOR_3
0x1284	            0x4898	                                    cdqe	       267	mv.c	FUNCTION_32	FOR_3
0x1286	    0x488d14850000	                        lea rdx, [rax*4]	       267	mv.c	FUNCTION_32	FOR_3
0x128e	    0x488b85b0fdff	            mov rax, qword [rbp - 0x250]	       267	mv.c	FUNCTION_32	FOR_3
0x1295	          0x4801d0	                            add rax, rdx	       267	mv.c	FUNCTION_32	FOR_3
0x1298	            0x8b00	                    mov eax, dword [rax]	       267	mv.c	FUNCTION_32	FOR_3
0x129a	    0x898590fdffff	            mov dword [rbp - 0x270], eax	       267	mv.c	FUNCTION_32	FOR_3
0x12a0	    0x8b8558fdffff	            mov eax, dword [rbp - 0x2a8]	       269	mv.c	FUNCTION_32	FOR_3	IF_24
0x12a6	            0x85c0	                           test eax, eax	       269	mv.c	FUNCTION_32	FOR_3	IF_24
0x12a8	            0x750a	                           jne 0x40012f4	       269	mv.c	FUNCTION_32	FOR_3	IF_24
0x12aa	    0x8b8554fdffff	            mov eax, dword [rbp - 0x2ac]	       269	mv.c	FUNCTION_32	FOR_3	IF_24
0x12b0	            0x85c0	                           test eax, eax	       269	mv.c	FUNCTION_32	FOR_3	IF_24
0x12b2	            0x742b	                            je 0x400131f	       269	mv.c	FUNCTION_32	FOR_3	IF_24
0x12b4	      0xbf00000000	                              mov edi, 0	       270	mv.c	FUNCTION_32	FOR_3	CALL_74
0x12b9	      0xe8ebedffff	                               call sym.	       270	mv.c	FUNCTION_32	FOR_3	CALL_74
0x12be	          0x4889c1	                            mov rcx, rax	       270	mv.c	FUNCTION_32	FOR_3	CALL_74
0x12c1	    0x488b95e8fdff	            mov rdx, qword [rbp - 0x218]	       270	mv.c	FUNCTION_32	FOR_3	CALL_74
0x12c8	    0x488b85e0fdff	            mov rax, qword [rbp - 0x220]	       270	mv.c	FUNCTION_32	FOR_3	CALL_74
0x12cf	          0x4889c6	                            mov rsi, rax	       270	mv.c	FUNCTION_32	FOR_3	CALL_74
0x12d2	          0x4889cf	                            mov rdi, rcx	       270	mv.c	FUNCTION_32	FOR_3	CALL_74
0x12d5	      0xb800000000	                              mov eax, 0	       270	mv.c	FUNCTION_32	FOR_3	CALL_74
0x12da	      0xe800000000	                          call 0x400131f	       270	mv.c	FUNCTION_32	FOR_3	CALL_74
0x12df	    0x8b8558fdffff	            mov eax, dword [rbp - 0x2a8]	       271	mv.c	FUNCTION_32	FOR_3	IF_25
0x12e5	            0x85c0	                           test eax, eax	       271	mv.c	FUNCTION_32	FOR_3	IF_25
0x12e7	     0xf8569010000	                           jne 0x4001496	       271	mv.c	FUNCTION_32	FOR_3	IF_25
0x12ed	    0x83bd90fdffff	              cmp dword [rbp - 0x270], 2	       273	mv.c	FUNCTION_32	FOR_3	IF_26	CALL_75
0x12f4	            0x744f	                            je 0x4001385	       273	mv.c	FUNCTION_32	FOR_3	IF_26	CALL_75
0x12f6	    0x488b95e8fdff	            mov rdx, qword [rbp - 0x218]	       273	mv.c	FUNCTION_32	FOR_3	IF_26	CALL_75
0x12fd	    0x488b85e0fdff	            mov rax, qword [rbp - 0x220]	       273	mv.c	FUNCTION_32	FOR_3	IF_26	CALL_75
0x1304	          0x4889d6	                            mov rsi, rdx	       273	mv.c	FUNCTION_32	FOR_3	IF_26	CALL_75
0x1307	          0x4889c7	                            mov rdi, rax	       273	mv.c	FUNCTION_32	FOR_3	IF_26	CALL_75
0x130a	      0xe800000000	                          call 0x400134f	       273	mv.c	FUNCTION_32	FOR_3	IF_26	CALL_75
0x130f	            0x85c0	                           test eax, eax	       273	mv.c	FUNCTION_32	FOR_3	IF_26	CALL_75
0x1311	            0x7932	                           jns 0x4001385	       273	mv.c	FUNCTION_32	FOR_3	IF_26	CALL_75
0x1313	    0x8b8560fdffff	            mov eax, dword [rbp - 0x2a0]	       274	mv.c	FUNCTION_32	FOR_3	IF_26	IF_27
0x1319	            0x85c0	                           test eax, eax	       274	mv.c	FUNCTION_32	FOR_3	IF_26	IF_27
0x131b	     0xf8538010000	                           jne 0x4001499	       274	mv.c	FUNCTION_32	FOR_3	IF_26	IF_27
0x1321	      0xbf00000000	                              mov edi, 0	       276	mv.c	FUNCTION_32	FOR_3	IF_26	CALL_77
0x1326	      0xe87eedffff	                               call sym.	       276	mv.c	FUNCTION_32	FOR_3	IF_26	CALL_77
0x132b	          0x4889c2	                            mov rdx, rax	       276	mv.c	FUNCTION_32	FOR_3	IF_26	CALL_77
0x132e	    0x488b85e0fdff	            mov rax, qword [rbp - 0x220]	       276	mv.c	FUNCTION_32	FOR_3	IF_26	CALL_77
0x1335	          0x4889c6	                            mov rsi, rax	       276	mv.c	FUNCTION_32	FOR_3	IF_26	CALL_77
0x1338	          0x4889d7	                            mov rdi, rdx	       276	mv.c	FUNCTION_32	FOR_3	IF_26	CALL_77
0x133b	      0xb800000000	                              mov eax, 0	       276	mv.c	FUNCTION_32	FOR_3	IF_26	CALL_77
0x1340	      0xe800000000	                          call 0x4001385	       276	mv.c	FUNCTION_32	FOR_3	IF_26	CALL_77
0x1345	    0x8b856cfdffff	            mov eax, dword [rbp - 0x294]	       278	mv.c	FUNCTION_32	FOR_3	IF_28
0x134b	            0x4898	                                    cdqe	       278	mv.c	FUNCTION_32	FOR_3	IF_28
0x134d	    0x488d14c50000	                        lea rdx, [rax*8]	       278	mv.c	FUNCTION_32	FOR_3	IF_28
0x1355	    0x488b85a8fdff	            mov rax, qword [rbp - 0x258]	       278	mv.c	FUNCTION_32	FOR_3	IF_28
0x135c	          0x4801d0	                            add rax, rdx	       278	mv.c	FUNCTION_32	FOR_3	IF_28
0x135f	          0x488b00	                    mov rax, qword [rax]	       278	mv.c	FUNCTION_32	FOR_3	IF_28
0x1362	          0x4885c0	                           test rax, rax	       278	mv.c	FUNCTION_32	FOR_3	IF_28
0x1365	            0x747e	                            je 0x4001425	       278	mv.c	FUNCTION_32	FOR_3	IF_28
0x1367	    0x488b95e8fdff	            mov rdx, qword [rbp - 0x218]	       279	mv.c	FUNCTION_32	FOR_3	IF_28	IF_29	CALL_78
0x136e	    0x488b85e0fdff	            mov rax, qword [rbp - 0x220]	       279	mv.c	FUNCTION_32	FOR_3	IF_28	IF_29	CALL_78
0x1375	          0x4889d6	                            mov rsi, rdx	       279	mv.c	FUNCTION_32	FOR_3	IF_28	IF_29	CALL_78
0x1378	          0x4889c7	                            mov rdi, rax	       279	mv.c	FUNCTION_32	FOR_3	IF_28	IF_29	CALL_78
0x137b	      0xe800000000	                          call 0x40013c0	       279	mv.c	FUNCTION_32	FOR_3	IF_28	IF_29	CALL_78
0x1380	            0x85c0	                           test eax, eax	       279	mv.c	FUNCTION_32	FOR_3	IF_28	IF_29	CALL_78
0x1382	            0x750a	                           jne 0x40013ce	       279	mv.c	FUNCTION_32	FOR_3	IF_28	IF_29	CALL_78
0x1384	    0xc78574fdffff	              mov dword [rbp - 0x28c], 1	       280	mv.c	FUNCTION_32	FOR_3	IF_28	IF_29
0x138e	    0x8b856cfdffff	            mov eax, dword [rbp - 0x294]	       281	mv.c	FUNCTION_32	FOR_3	IF_28	IF_30
0x1394	            0x4898	                                    cdqe	       281	mv.c	FUNCTION_32	FOR_3	IF_28	IF_30
0x1396	    0x488d14c50000	                        lea rdx, [rax*8]	       281	mv.c	FUNCTION_32	FOR_3	IF_28	IF_30
0x139e	    0x488b85a8fdff	            mov rax, qword [rbp - 0x258]	       281	mv.c	FUNCTION_32	FOR_3	IF_28	IF_30
0x13a5	          0x4801d0	                            add rax, rdx	       281	mv.c	FUNCTION_32	FOR_3	IF_28	IF_30
0x13a8	          0x488b00	                    mov rax, qword [rax]	       281	mv.c	FUNCTION_32	FOR_3	IF_28	IF_30
0x13ab	        0x4883f801	                              cmp rax, 1	       281	mv.c	FUNCTION_32	FOR_3	IF_28	IF_30
0x13af	            0x7434	                            je 0x4001425	       281	mv.c	FUNCTION_32	FOR_3	IF_28	IF_30
0x13b1	    0x8b856cfdffff	            mov eax, dword [rbp - 0x294]	       283	mv.c	FUNCTION_32	FOR_3	IF_28	IF_30
0x13b7	            0x4898	                                    cdqe	       283	mv.c	FUNCTION_32	FOR_3	IF_28	IF_30
0x13b9	    0x488d14c50000	                        lea rdx, [rax*8]	       283	mv.c	FUNCTION_32	FOR_3	IF_28	IF_30
0x13c1	    0x488b85a8fdff	            mov rax, qword [rbp - 0x258]	       283	mv.c	FUNCTION_32	FOR_3	IF_28	IF_30
0x13c8	          0x4801d0	                            add rax, rdx	       283	mv.c	FUNCTION_32	FOR_3	IF_28	IF_30
0x13cb	          0x488b08	                    mov rcx, qword [rax]	       282	mv.c	FUNCTION_32	FOR_3	IF_28	IF_30	CALL_79
0x13ce	    0x488b85e8fdff	            mov rax, qword [rbp - 0x218]	       282	mv.c	FUNCTION_32	FOR_3	IF_28	IF_30	CALL_79
0x13d5	      0xba01000000	                              mov edx, 1	       282	mv.c	FUNCTION_32	FOR_3	IF_28	IF_30	CALL_79
0x13da	          0x4889ce	                            mov rsi, rcx	       282	mv.c	FUNCTION_32	FOR_3	IF_28	IF_30	CALL_79
0x13dd	          0x4889c7	                            mov rdi, rax	       282	mv.c	FUNCTION_32	FOR_3	IF_28	IF_30	CALL_79
0x13e0	      0xe800000000	                          call 0x4001425	       282	mv.c	FUNCTION_32	FOR_3	IF_28	IF_30	CALL_79
0x13e5	    0x83bd90fdffff	              cmp dword [rbp - 0x270], 1	       287	mv.c	FUNCTION_32	FOR_3	IF_31
0x13ec	            0x746e	                            je 0x400149c	       287	mv.c	FUNCTION_32	FOR_3	IF_31
0x13ee	    0x488b85e0fdff	            mov rax, qword [rbp - 0x220]	       290	mv.c	FUNCTION_32	FOR_3	CALL_81
0x13f5	          0x4889c7	                            mov rdi, rax	       290	mv.c	FUNCTION_32	FOR_3	CALL_81
0x13f8	      0xe800000000	                          call 0x400143d	       290	mv.c	FUNCTION_32	FOR_3	CALL_81
0x13fd	            0x89c2	                            mov edx, eax	       290	mv.c	FUNCTION_32	FOR_3	CALL_81
0x13ff	    0x488b85e0fdff	            mov rax, qword [rbp - 0x220]	       290	mv.c	FUNCTION_32	FOR_3	CALL_81
0x1406	          0x4889c6	                            mov rsi, rax	       290	mv.c	FUNCTION_32	FOR_3	CALL_81
0x1409	      0xbf00000000	                              mov edi, 0	       290	mv.c	FUNCTION_32	FOR_3	CALL_81
0x140e	      0xe800000000	                          call 0x4001453	       290	mv.c	FUNCTION_32	FOR_3	CALL_81
0x1413	    0x898594fdffff	            mov dword [rbp - 0x26c], eax	       290	mv.c	FUNCTION_32	FOR_3	CALL_81
0x1419	    0x83bd94fdffff	              cmp dword [rbp - 0x26c], 0	       291	mv.c	FUNCTION_32	FOR_3	CALL_82
0x1420	            0x7919	                           jns 0x400147b	       291	mv.c	FUNCTION_32	FOR_3	CALL_82
0x1422	      0xb900000000	                              mov ecx, 0	       291	mv.c	FUNCTION_32	FOR_3	CALL_82
0x1427	      0xba23010000	                          mov edx, 0x123	       291	mv.c	FUNCTION_32	FOR_3	CALL_82
0x142c	      0xbe00000000	                              mov esi, 0	       291	mv.c	FUNCTION_32	FOR_3	CALL_82
0x1431	      0xbf00000000	                              mov edi, 0	       291	mv.c	FUNCTION_32	FOR_3	CALL_82
0x1436	      0xe800000000	                          call 0x400147b	       291	mv.c	FUNCTION_32	FOR_3	CALL_82
0x143b	    0x488b95e8fdff	            mov rdx, qword [rbp - 0x218]	       292	mv.c	FUNCTION_32	FOR_3	CALL_83
0x1442	    0x8b8594fdffff	            mov eax, dword [rbp - 0x26c]	       292	mv.c	FUNCTION_32	FOR_3	CALL_83
0x1448	            0x89c6	                            mov esi, eax	       292	mv.c	FUNCTION_32	FOR_3	CALL_83
0x144a	      0xbf00000000	                              mov edi, 0	       292	mv.c	FUNCTION_32	FOR_3	CALL_83
0x144f	      0xe800000000	                          call 0x4001494	       292	mv.c	FUNCTION_32	FOR_3	CALL_83
0x1454	            0xeb07	                           jmp 0x400149d	       292	mv.c	FUNCTION_32	FOR_3	CALL_83
0x1456	              0x90	                                     nop	       272	mv.c	FUNCTION_32	FOR_3	IF_25
0x1457	            0xeb04	                           jmp 0x400149d	       272	mv.c	FUNCTION_32	FOR_3	IF_25
0x1459	              0x90	                                     nop	       275	mv.c	FUNCTION_32	FOR_3	IF_26	IF_27
0x145a	            0xeb01	                           jmp 0x400149d	       275	mv.c	FUNCTION_32	FOR_3	IF_26	IF_27
0x145c	              0x90	                                     nop	       288	mv.c	FUNCTION_32	FOR_3	IF_31
0x145d	    0x83856cfdffff	              add dword [rbp - 0x294], 1	       265	mv.c	FUNCTION_32	FOR_3
0x1464	    0x8b856cfdffff	            mov eax, dword [rbp - 0x294]	       265	mv.c	FUNCTION_32	FOR_3
0x146a	    0x3b854cfdffff	            cmp eax, dword [rbp - 0x2b4]	       265	mv.c	FUNCTION_32	FOR_3
0x1470	     0xf8cc0fdffff	                            jl 0x4001276	       265	mv.c	FUNCTION_32	FOR_3
0x1476	    0x83bd74fdffff	              cmp dword [rbp - 0x28c], 0	       295	mv.c	FUNCTION_32	IF_32
0x147d	            0x740a	                            je 0x40014c9	       295	mv.c	FUNCTION_32	IF_32
0x147f	      0xbf00000000	                              mov edi, 0	       296	mv.c	FUNCTION_32	CALL_84
0x1484	      0xe800000000	                          call 0x40014c9	       296	mv.c	FUNCTION_32	CALL_84
0x1489	      0xba03000000	                              mov edx, 3	       298	mv.c	FUNCTION_32	IF_33	CALL_85
0x148e	      0xbe00000000	                              mov esi, 0	       298	mv.c	FUNCTION_32	IF_33	CALL_85
0x1493	      0xbf00000000	                              mov edi, 0	       298	mv.c	FUNCTION_32	IF_33	CALL_85
0x1498	      0xe800000000	                          call 0x40014dd	       298	mv.c	FUNCTION_32	IF_33	CALL_85
0x149d	            0x85c0	                           test eax, eax	       298	mv.c	FUNCTION_32	IF_33	CALL_85
0x149f	            0x7417	                            je 0x40014f8	       298	mv.c	FUNCTION_32	IF_33	CALL_85
0x14a1	      0xbf00000000	                              mov edi, 0	       300	mv.c	FUNCTION_32	CALL_87
0x14a6	      0xe8feebffff	                               call sym.	       300	mv.c	FUNCTION_32	CALL_87
0x14ab	          0x4889c7	                            mov rdi, rax	       300	mv.c	FUNCTION_32	CALL_87
0x14ae	      0xb800000000	                              mov eax, 0	       300	mv.c	FUNCTION_32	CALL_87
0x14b3	      0xe800000000	                          call 0x40014f8	       300	mv.c	FUNCTION_32	CALL_87
0x14b8	      0xb800000000	                              mov eax, 0	       302	mv.c	FUNCTION_32
0x14bd	        0x488b5de8	             mov rbx, qword [rbp - 0x18]	       303	mv.c	FUNCTION_32
0x14c1	    0x6448331c2528	                xor rbx, qword fs:[0x28]	       303	mv.c	FUNCTION_32
0x14ca	            0x7405	                            je 0x4001511	       303	mv.c	FUNCTION_32
0x14cc	      0xe800000000	                          call 0x4001511	       303	mv.c	FUNCTION_32
0x14d1	    0x4881c4c80200	                          add rsp, 0x2c8	       303	mv.c	FUNCTION_32
0x14d8	              0x5b	                                 pop rbx	       303	mv.c	FUNCTION_32
0x14d9	              0x5d	                                 pop rbp	       303	mv.c	FUNCTION_32
0x14da	              0xc3	                                     ret	       303	mv.c	FUNCTION_32
internal_prefix_pathspec	CALL,10:FOR,2:DO,0:functions,0:IF,1:SWITCH,0:ELSE,1:WHILE,1	148
0xd5	              0x55	                                push rbp	        27	mv.c	FUNCTION_28
0xd6	          0x4889e5	                            mov rbp, rsp	        27	mv.c	FUNCTION_28
0xd9	              0x53	                                push rbx	        27	mv.c	FUNCTION_28
0xda	        0x4883ec58	                           sub rsp, 0x58	        27	mv.c	FUNCTION_28
0xde	        0x48897db8	             mov qword [rbp - 0x48], rdi	        27	mv.c	FUNCTION_28
0xe2	        0x488975b0	             mov qword [rbp - 0x50], rsi	        27	mv.c	FUNCTION_28
0xe6	          0x8955ac	             mov dword [rbp - 0x54], edx	        27	mv.c	FUNCTION_28
0xe9	          0x894da8	             mov dword [rbp - 0x58], ecx	        27	mv.c	FUNCTION_28
0xec	      0x48837db800	               cmp qword [rbp - 0x48], 0	        30	mv.c	FUNCTION_28	CALL_1
0xf1	            0x740e	                            je 0x4000141	        30	mv.c	FUNCTION_28	CALL_1
0xf3	        0x488b45b8	             mov rax, qword [rbp - 0x48]	        30	mv.c	FUNCTION_28	CALL_1
0xf7	          0x4889c7	                            mov rdi, rax	        30	mv.c	FUNCTION_28	CALL_1
0xfa	      0xe800000000	                          call 0x400013f	        30	mv.c	FUNCTION_28	CALL_1
0xff	            0xeb05	                           jmp 0x4000146	        30	mv.c	FUNCTION_28	CALL_1
0x101	      0xb800000000	                              mov eax, 0	        30	mv.c	FUNCTION_28	CALL_1
0x106	          0x8945d0	             mov dword [rbp - 0x30], eax	        30	mv.c	FUNCTION_28	CALL_1
0x109	          0x8b45ac	             mov eax, dword [rbp - 0x54]	        31	mv.c	FUNCTION_28	CALL_2
0x10c	          0x83c001	                              add eax, 1	        31	mv.c	FUNCTION_28	CALL_2
0x10f	            0x4898	                                    cdqe	        31	mv.c	FUNCTION_28	CALL_2
0x111	          0x4889c6	                            mov rsi, rax	        31	mv.c	FUNCTION_28	CALL_2
0x114	      0xbf08000000	                              mov edi, 8	        31	mv.c	FUNCTION_28	CALL_2
0x119	      0xe839ffffff	                        call sym.st_mult	        31	mv.c	FUNCTION_28	CALL_2
0x11e	          0x4889c7	                            mov rdi, rax	        31	mv.c	FUNCTION_28	CALL_2
0x121	      0xe800000000	                          call 0x4000166	        31	mv.c	FUNCTION_28	CALL_2
0x126	        0x488945d8	             mov qword [rbp - 0x28], rax	        31	mv.c	FUNCTION_28	CALL_2
0x12a	    0xc745c8000000	               mov dword [rbp - 0x38], 0	        34	mv.c	FUNCTION_28	FOR_1
0x131	      0xe902010000	                           jmp 0x4000278	        34	mv.c	FUNCTION_28	FOR_1
0x136	          0x8b45c8	             mov eax, dword [rbp - 0x38]	        35	mv.c	FUNCTION_28	FOR_1	CALL_3
0x139	            0x4898	                                    cdqe	        35	mv.c	FUNCTION_28	FOR_1	CALL_3
0x13b	    0x488d14c50000	                        lea rdx, [rax*8]	        35	mv.c	FUNCTION_28	FOR_1	CALL_3
0x143	        0x488b45b0	             mov rax, qword [rbp - 0x50]	        35	mv.c	FUNCTION_28	FOR_1	CALL_3
0x147	          0x4801d0	                            add rax, rdx	        35	mv.c	FUNCTION_28	FOR_1	CALL_3
0x14a	          0x488b00	                    mov rax, qword [rax]	        35	mv.c	FUNCTION_28	FOR_1	CALL_3
0x14d	          0x4889c7	                            mov rdi, rax	        35	mv.c	FUNCTION_28	FOR_1	CALL_3
0x150	      0xe800000000	                          call 0x4000195	        35	mv.c	FUNCTION_28	FOR_1	CALL_3
0x155	          0x8945d4	             mov dword [rbp - 0x2c], eax	        35	mv.c	FUNCTION_28	FOR_1	CALL_3
0x158	          0x8b45d4	             mov eax, dword [rbp - 0x2c]	        36	mv.c	FUNCTION_28	FOR_1
0x15b	          0x8945cc	             mov dword [rbp - 0x34], eax	        36	mv.c	FUNCTION_28	FOR_1
0x15e	            0xeb04	                           jmp 0x40001a4	        38	mv.c	FUNCTION_28	FOR_1	WHILE_1
0x160	        0x836dcc01	               sub dword [rbp - 0x34], 1	        40	mv.c	FUNCTION_28	FOR_1	WHILE_1
0x164	          0x8b45a8	             mov eax, dword [rbp - 0x58]	        38	mv.c	FUNCTION_28	FOR_1	WHILE_1
0x167	          0x83e002	                              and eax, 2	        38	mv.c	FUNCTION_28	FOR_1	WHILE_1
0x16a	            0x85c0	                           test eax, eax	        38	mv.c	FUNCTION_28	FOR_1	WHILE_1
0x16c	            0x753b	                           jne 0x40001e9	        38	mv.c	FUNCTION_28	FOR_1	WHILE_1
0x16e	        0x837dcc00	               cmp dword [rbp - 0x34], 0	        38	mv.c	FUNCTION_28	FOR_1	WHILE_1
0x172	            0x7e35	                           jle 0x40001e9	        38	mv.c	FUNCTION_28	FOR_1	WHILE_1
0x174	          0x8b45c8	             mov eax, dword [rbp - 0x38]	        39	mv.c	FUNCTION_28	FOR_1	WHILE_1	CALL_4
0x177	            0x4898	                                    cdqe	        39	mv.c	FUNCTION_28	FOR_1	WHILE_1	CALL_4
0x179	    0x488d14c50000	                        lea rdx, [rax*8]	        39	mv.c	FUNCTION_28	FOR_1	WHILE_1	CALL_4
0x181	        0x488b45b0	             mov rax, qword [rbp - 0x50]	        39	mv.c	FUNCTION_28	FOR_1	WHILE_1	CALL_4
0x185	          0x4801d0	                            add rax, rdx	        39	mv.c	FUNCTION_28	FOR_1	WHILE_1	CALL_4
0x188	          0x488b00	                    mov rax, qword [rax]	        39	mv.c	FUNCTION_28	FOR_1	WHILE_1	CALL_4
0x18b	          0x8b55cc	             mov edx, dword [rbp - 0x34]	        39	mv.c	FUNCTION_28	FOR_1	WHILE_1	CALL_4
0x18e	          0x4863d2	                         movsxd rdx, edx	        39	mv.c	FUNCTION_28	FOR_1	WHILE_1	CALL_4
0x191	        0x4883ea01	                              sub rdx, 1	        39	mv.c	FUNCTION_28	FOR_1	WHILE_1	CALL_4
0x195	          0x4801d0	                            add rax, rdx	        39	mv.c	FUNCTION_28	FOR_1	WHILE_1	CALL_4
0x198	           0xfb600	                   movzx eax, byte [rax]	        39	mv.c	FUNCTION_28	FOR_1	WHILE_1	CALL_4
0x19b	           0xfbec0	                           movsx eax, al	        39	mv.c	FUNCTION_28	FOR_1	WHILE_1	CALL_4
0x19e	            0x89c7	                            mov edi, eax	        39	mv.c	FUNCTION_28	FOR_1	WHILE_1	CALL_4
0x1a0	      0xe85bfeffff	                 call sym.git_is_dir_sep	        39	mv.c	FUNCTION_28	FOR_1	WHILE_1	CALL_4
0x1a5	            0x85c0	                           test eax, eax	        39	mv.c	FUNCTION_28	FOR_1	WHILE_1	CALL_4
0x1a7	            0x75b7	                           jne 0x40001a0	        39	mv.c	FUNCTION_28	FOR_1	WHILE_1	CALL_4
0x1a9	          0x8b45cc	             mov eax, dword [rbp - 0x34]	        42	mv.c	FUNCTION_28	FOR_1	CALL_5
0x1ac	          0x4863d0	                         movsxd rdx, eax	        42	mv.c	FUNCTION_28	FOR_1	CALL_5
0x1af	          0x8b45c8	             mov eax, dword [rbp - 0x38]	        42	mv.c	FUNCTION_28	FOR_1	CALL_5
0x1b2	            0x4898	                                    cdqe	        42	mv.c	FUNCTION_28	FOR_1	CALL_5
0x1b4	    0x488d0cc50000	                        lea rcx, [rax*8]	        42	mv.c	FUNCTION_28	FOR_1	CALL_5
0x1bc	        0x488b45b0	             mov rax, qword [rbp - 0x50]	        42	mv.c	FUNCTION_28	FOR_1	CALL_5
0x1c0	          0x4801c8	                            add rax, rcx	        42	mv.c	FUNCTION_28	FOR_1	CALL_5
0x1c3	          0x488b00	                    mov rax, qword [rax]	        42	mv.c	FUNCTION_28	FOR_1	CALL_5
0x1c6	          0x4889d6	                            mov rsi, rdx	        42	mv.c	FUNCTION_28	FOR_1	CALL_5
0x1c9	          0x4889c7	                            mov rdi, rax	        42	mv.c	FUNCTION_28	FOR_1	CALL_5
0x1cc	      0xe800000000	                          call 0x4000211	        42	mv.c	FUNCTION_28	FOR_1	CALL_5
0x1d1	        0x488945e0	             mov qword [rbp - 0x20], rax	        42	mv.c	FUNCTION_28	FOR_1	CALL_5
0x1d5	          0x8b45a8	             mov eax, dword [rbp - 0x58]	        43	mv.c	FUNCTION_28	FOR_1	IF_1
0x1d8	          0x83e001	                              and eax, 1	        43	mv.c	FUNCTION_28	FOR_1	IF_1
0x1db	            0x85c0	                           test eax, eax	        43	mv.c	FUNCTION_28	FOR_1	IF_1
0x1dd	            0x743a	                            je 0x4000259	        43	mv.c	FUNCTION_28	FOR_1	IF_1
0x1df	          0x8b45c8	             mov eax, dword [rbp - 0x38]	        44	mv.c	FUNCTION_28	FOR_1	IF_1	CALL_7
0x1e2	            0x4898	                                    cdqe	        44	mv.c	FUNCTION_28	FOR_1	IF_1	CALL_7
0x1e4	    0x488d14c50000	                        lea rdx, [rax*8]	        44	mv.c	FUNCTION_28	FOR_1	IF_1	CALL_7
0x1ec	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        44	mv.c	FUNCTION_28	FOR_1	IF_1	CALL_7
0x1f0	        0x488d1c02	                    lea rbx, [rdx + rax]	        44	mv.c	FUNCTION_28	FOR_1	IF_1	CALL_7
0x1f4	        0x488b45e0	             mov rax, qword [rbp - 0x20]	        44	mv.c	FUNCTION_28	FOR_1	IF_1	CALL_7
0x1f8	          0x4889c7	                            mov rdi, rax	        44	mv.c	FUNCTION_28	FOR_1	IF_1	CALL_7
0x1fb	      0xe800000000	                          call 0x4000240	        44	mv.c	FUNCTION_28	FOR_1	IF_1	CALL_7
0x200	          0x4889c7	                            mov rdi, rax	        44	mv.c	FUNCTION_28	FOR_1	IF_1	CALL_7
0x203	      0xe800000000	                          call 0x4000248	        44	mv.c	FUNCTION_28	FOR_1	IF_1	CALL_7
0x208	          0x488903	                    mov qword [rbx], rax	        44	mv.c	FUNCTION_28	FOR_1	IF_1	CALL_7
0x20b	        0x488b45e0	             mov rax, qword [rbp - 0x20]	        45	mv.c	FUNCTION_28	FOR_1	IF_1	CALL_8
0x20f	          0x4889c7	                            mov rdi, rax	        45	mv.c	FUNCTION_28	FOR_1	IF_1	CALL_8
0x212	      0xe800000000	                          call 0x4000257	        45	mv.c	FUNCTION_28	FOR_1	IF_1	CALL_8
0x217	            0xeb1b	                           jmp 0x4000274	        45	mv.c	FUNCTION_28	FOR_1	IF_1	CALL_8
0x219	          0x8b45c8	             mov eax, dword [rbp - 0x38]	        47	mv.c	FUNCTION_28	FOR_1	ELSE_1
0x21c	            0x4898	                                    cdqe	        47	mv.c	FUNCTION_28	FOR_1	ELSE_1
0x21e	    0x488d14c50000	                        lea rdx, [rax*8]	        47	mv.c	FUNCTION_28	FOR_1	ELSE_1
0x226	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        47	mv.c	FUNCTION_28	FOR_1	ELSE_1
0x22a	          0x4801c2	                            add rdx, rax	        47	mv.c	FUNCTION_28	FOR_1	ELSE_1
0x22d	        0x488b45e0	             mov rax, qword [rbp - 0x20]	        47	mv.c	FUNCTION_28	FOR_1	ELSE_1
0x231	          0x488902	                    mov qword [rdx], rax	        47	mv.c	FUNCTION_28	FOR_1	ELSE_1
0x234	        0x8345c801	               add dword [rbp - 0x38], 1	        34	mv.c	FUNCTION_28	FOR_1
0x238	          0x8b45c8	             mov eax, dword [rbp - 0x38]	        34	mv.c	FUNCTION_28	FOR_1
0x23b	          0x3b45ac	             cmp eax, dword [rbp - 0x54]	        34	mv.c	FUNCTION_28	FOR_1
0x23e	     0xf8cf2feffff	                            jl 0x4000176	        34	mv.c	FUNCTION_28	FOR_1
0x244	          0x8b45ac	             mov eax, dword [rbp - 0x54]	        50	mv.c	FUNCTION_28
0x247	            0x4898	                                    cdqe	        50	mv.c	FUNCTION_28
0x249	    0x488d14c50000	                        lea rdx, [rax*8]	        50	mv.c	FUNCTION_28
0x251	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        50	mv.c	FUNCTION_28
0x255	          0x4801d0	                            add rax, rdx	        50	mv.c	FUNCTION_28
0x258	    0x48c700000000	                      mov qword [rax], 0	        50	mv.c	FUNCTION_28
0x25f	    0xc745c8000000	               mov dword [rbp - 0x38], 0	        53	mv.c	FUNCTION_28	FOR_2
0x266	            0xeb6a	                           jmp 0x4000312	        53	mv.c	FUNCTION_28	FOR_2
0x268	          0x8b45c8	             mov eax, dword [rbp - 0x38]	        54	mv.c	FUNCTION_28	FOR_2	CALL_9
0x26b	            0x4898	                                    cdqe	        54	mv.c	FUNCTION_28	FOR_2	CALL_9
0x26d	    0x488d14c50000	                        lea rdx, [rax*8]	        54	mv.c	FUNCTION_28	FOR_2	CALL_9
0x275	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        54	mv.c	FUNCTION_28	FOR_2	CALL_9
0x279	          0x4801d0	                            add rax, rdx	        54	mv.c	FUNCTION_28	FOR_2	CALL_9
0x27c	          0x488b10	                    mov rdx, qword [rax]	        54	mv.c	FUNCTION_28	FOR_2	CALL_9
0x27f	          0x8b4dd0	             mov ecx, dword [rbp - 0x30]	        54	mv.c	FUNCTION_28	FOR_2	CALL_9
0x282	        0x488b45b8	             mov rax, qword [rbp - 0x48]	        54	mv.c	FUNCTION_28	FOR_2	CALL_9
0x286	            0x89ce	                            mov esi, ecx	        54	mv.c	FUNCTION_28	FOR_2	CALL_9
0x288	          0x4889c7	                            mov rdi, rax	        54	mv.c	FUNCTION_28	FOR_2	CALL_9
0x28b	      0xe800000000	                          call 0x40002d0	        54	mv.c	FUNCTION_28	FOR_2	CALL_9
0x290	        0x488945e8	             mov qword [rbp - 0x18], rax	        54	mv.c	FUNCTION_28	FOR_2	CALL_9
0x294	          0x8b45c8	             mov eax, dword [rbp - 0x38]	        55	mv.c	FUNCTION_28	FOR_2	CALL_10
0x297	            0x4898	                                    cdqe	        55	mv.c	FUNCTION_28	FOR_2	CALL_10
0x299	    0x488d14c50000	                        lea rdx, [rax*8]	        55	mv.c	FUNCTION_28	FOR_2	CALL_10
0x2a1	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        55	mv.c	FUNCTION_28	FOR_2	CALL_10
0x2a5	          0x4801d0	                            add rax, rdx	        55	mv.c	FUNCTION_28	FOR_2	CALL_10
0x2a8	          0x488b00	                    mov rax, qword [rax]	        55	mv.c	FUNCTION_28	FOR_2	CALL_10
0x2ab	          0x4889c7	                            mov rdi, rax	        55	mv.c	FUNCTION_28	FOR_2	CALL_10
0x2ae	      0xe800000000	                          call 0x40002f3	        55	mv.c	FUNCTION_28	FOR_2	CALL_10
0x2b3	          0x8b45c8	             mov eax, dword [rbp - 0x38]	        56	mv.c	FUNCTION_28	FOR_2
0x2b6	            0x4898	                                    cdqe	        56	mv.c	FUNCTION_28	FOR_2
0x2b8	    0x488d14c50000	                        lea rdx, [rax*8]	        56	mv.c	FUNCTION_28	FOR_2
0x2c0	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        56	mv.c	FUNCTION_28	FOR_2
0x2c4	          0x4801c2	                            add rdx, rax	        56	mv.c	FUNCTION_28	FOR_2
0x2c7	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        56	mv.c	FUNCTION_28	FOR_2
0x2cb	          0x488902	                    mov qword [rdx], rax	        56	mv.c	FUNCTION_28	FOR_2
0x2ce	        0x8345c801	               add dword [rbp - 0x38], 1	        53	mv.c	FUNCTION_28	FOR_2
0x2d2	          0x8b45c8	             mov eax, dword [rbp - 0x38]	        53	mv.c	FUNCTION_28	FOR_2
0x2d5	          0x3b45ac	             cmp eax, dword [rbp - 0x54]	        53	mv.c	FUNCTION_28	FOR_2
0x2d8	            0x7c8e	                            jl 0x40002a8	        53	mv.c	FUNCTION_28	FOR_2
0x2da	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        59	mv.c	FUNCTION_28
0x2de	        0x4883c458	                           add rsp, 0x58	        60	mv.c	FUNCTION_28
0x2e2	              0x5b	                                 pop rbx	        60	mv.c	FUNCTION_28
0x2e3	              0x5d	                                 pop rbp	        60	mv.c	FUNCTION_28
0x2e4	              0xc3	                                     ret	        60	mv.c	FUNCTION_28
index_range_of_same_dir	CALL,6:FOR,1:DO,0:functions,0:IF,3:SWITCH,0:ELSE,0:WHILE,0	75
0x4ab	              0x55	                                push rbp	        97	mv.c	FUNCTION_31
0x4ac	          0x4889e5	                            mov rbp, rsp	        97	mv.c	FUNCTION_31
0x4af	        0x4883ec40	                           sub rsp, 0x40	        97	mv.c	FUNCTION_31
0x4b3	        0x48897dd8	             mov qword [rbp - 0x28], rdi	        97	mv.c	FUNCTION_31
0x4b7	          0x8975d4	             mov dword [rbp - 0x2c], esi	        97	mv.c	FUNCTION_31
0x4ba	        0x488955c8	             mov qword [rbp - 0x38], rdx	        97	mv.c	FUNCTION_31
0x4be	        0x48894dc0	             mov qword [rbp - 0x40], rcx	        97	mv.c	FUNCTION_31
0x4c2	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        98	mv.c	FUNCTION_31	CALL_1
0x4c6	          0x4889c7	                            mov rdi, rax	        98	mv.c	FUNCTION_31	CALL_1
0x4c9	      0xe817feffff	                      call sym.add_slash	        98	mv.c	FUNCTION_31	CALL_1
0x4ce	        0x488945f0	             mov qword [rbp - 0x10], rax	        98	mv.c	FUNCTION_31	CALL_1
0x4d2	          0x8b45d4	             mov eax, dword [rbp - 0x2c]	        99	mv.c	FUNCTION_31
0x4d5	          0x83c001	                              add eax, 1	        99	mv.c	FUNCTION_31
0x4d8	          0x8945e8	             mov dword [rbp - 0x18], eax	        99	mv.c	FUNCTION_31
0x4db	          0x8b55e8	             mov edx, dword [rbp - 0x18]	       101	mv.c	FUNCTION_31	CALL_2
0x4de	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       101	mv.c	FUNCTION_31	CALL_2
0x4e2	          0x4889c6	                            mov rsi, rax	       101	mv.c	FUNCTION_31	CALL_2
0x4e5	      0xbf00000000	                              mov edi, 0	       101	mv.c	FUNCTION_31	CALL_2
0x4ea	      0xe800000000	                          call 0x400052f	       101	mv.c	FUNCTION_31	CALL_2
0x4ef	          0x8945ec	             mov dword [rbp - 0x14], eax	       101	mv.c	FUNCTION_31	CALL_2
0x4f2	        0x837dec00	               cmp dword [rbp - 0x14], 0	       102	mv.c	FUNCTION_31	IF_1
0x4f6	            0x7823	                            js 0x400055b	       102	mv.c	FUNCTION_31	IF_1
0x4f8	      0xbf00000000	                              mov edi, 0	       103	mv.c	FUNCTION_31	CALL_4
0x4fd	      0xe8a7fbffff	                               call sym.	       103	mv.c	FUNCTION_31	CALL_4
0x502	          0x4889c1	                            mov rcx, rax	       103	mv.c	FUNCTION_31	CALL_4
0x505	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       103	mv.c	FUNCTION_31	CALL_4
0x509	          0x8b45e8	             mov eax, dword [rbp - 0x18]	       103	mv.c	FUNCTION_31	CALL_4
0x50c	            0x89c6	                            mov esi, eax	       103	mv.c	FUNCTION_31	CALL_4
0x50e	          0x4889cf	                            mov rdi, rcx	       103	mv.c	FUNCTION_31	CALL_4
0x511	      0xb800000000	                              mov eax, 0	       103	mv.c	FUNCTION_31	CALL_4
0x516	      0xe800000000	                          call 0x400055b	       103	mv.c	FUNCTION_31	CALL_4
0x51b	          0xf755ec	                  not dword [rbp - 0x14]	       105	mv.c	FUNCTION_31
0x51e	          0x8b45ec	             mov eax, dword [rbp - 0x14]	       106	mv.c	FUNCTION_31	FOR_1
0x521	          0x8945e4	             mov dword [rbp - 0x1c], eax	       106	mv.c	FUNCTION_31	FOR_1
0x524	            0xeb40	                           jmp 0x40005a6	       106	mv.c	FUNCTION_31	FOR_1
0x526	    0x488b05000000	            mov rax, qword [0x0400056d] 	       107	mv.c	FUNCTION_31	FOR_1
0x52d	          0x8b55e4	             mov edx, dword [rbp - 0x1c]	       107	mv.c	FUNCTION_31	FOR_1
0x530	          0x4863d2	                         movsxd rdx, edx	       107	mv.c	FUNCTION_31	FOR_1
0x533	        0x48c1e203	                              shl rdx, 3	       107	mv.c	FUNCTION_31	FOR_1
0x537	          0x4801d0	                            add rax, rdx	       107	mv.c	FUNCTION_31	FOR_1
0x53a	          0x488b00	                    mov rax, qword [rax]	       107	mv.c	FUNCTION_31	FOR_1
0x53d	        0x4883c058	                           add rax, 0x58	       107	mv.c	FUNCTION_31	FOR_1
0x541	        0x488945f8	                mov qword [rbp - 8], rax	       107	mv.c	FUNCTION_31	FOR_1
0x545	          0x8b45e8	             mov eax, dword [rbp - 0x18]	       108	mv.c	FUNCTION_31	FOR_1	IF_2	CALL_5
0x548	          0x4863d0	                         movsxd rdx, eax	       108	mv.c	FUNCTION_31	FOR_1	IF_2	CALL_5
0x54b	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	       108	mv.c	FUNCTION_31	FOR_1	IF_2	CALL_5
0x54f	        0x488b45f8	                mov rax, qword [rbp - 8]	       108	mv.c	FUNCTION_31	FOR_1	IF_2	CALL_5
0x553	          0x4889ce	                            mov rsi, rcx	       108	mv.c	FUNCTION_31	FOR_1	IF_2	CALL_5
0x556	          0x4889c7	                            mov rdi, rax	       108	mv.c	FUNCTION_31	FOR_1	IF_2	CALL_5
0x559	      0xe800000000	                          call 0x400059e	       108	mv.c	FUNCTION_31	FOR_1	IF_2	CALL_5
0x55e	            0x85c0	                           test eax, eax	       108	mv.c	FUNCTION_31	FOR_1	IF_2	CALL_5
0x560	            0x7513	                           jne 0x40005b5	       108	mv.c	FUNCTION_31	FOR_1	IF_2	CALL_5
0x562	        0x8345e401	               add dword [rbp - 0x1c], 1	       106	mv.c	FUNCTION_31	FOR_1
0x566	    0x8b1500000000	            mov edx, dword [0x040005ac] 	       106	mv.c	FUNCTION_31	FOR_1
0x56c	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	       106	mv.c	FUNCTION_31	FOR_1
0x56f	            0x39c2	                            cmp edx, eax	       106	mv.c	FUNCTION_31	FOR_1
0x571	            0x77b3	                            ja 0x4000566	       106	mv.c	FUNCTION_31	FOR_1
0x573	            0xeb01	                           jmp 0x40005b6	       106	mv.c	FUNCTION_31	FOR_1
0x575	              0x90	                                     nop	       109	mv.c	FUNCTION_31	FOR_1	IF_2
0x576	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       111	mv.c	FUNCTION_31	IF_3
0x57a	        0x483b45d8	             cmp rax, qword [rbp - 0x28]	       111	mv.c	FUNCTION_31	IF_3
0x57e	            0x740c	                            je 0x40005cc	       111	mv.c	FUNCTION_31	IF_3
0x580	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       112	mv.c	FUNCTION_31	CALL_6
0x584	          0x4889c7	                            mov rdi, rax	       112	mv.c	FUNCTION_31	CALL_6
0x587	      0xe800000000	                          call 0x40005cc	       112	mv.c	FUNCTION_31	CALL_6
0x58c	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       113	mv.c	FUNCTION_31
0x590	          0x8b55ec	             mov edx, dword [rbp - 0x14]	       113	mv.c	FUNCTION_31
0x593	            0x8910	                    mov dword [rax], edx	       113	mv.c	FUNCTION_31
0x595	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       114	mv.c	FUNCTION_31
0x599	          0x8b55e4	             mov edx, dword [rbp - 0x1c]	       114	mv.c	FUNCTION_31
0x59c	            0x8910	                    mov dword [rax], edx	       114	mv.c	FUNCTION_31
0x59e	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	       115	mv.c	FUNCTION_31
0x5a1	          0x2b45ec	             sub eax, dword [rbp - 0x14]	       115	mv.c	FUNCTION_31
0x5a4	              0xc9	                                   leave	       116	mv.c	FUNCTION_31
0x5a5	              0xc3	                                     ret	       116	mv.c	FUNCTION_31
_	CALL,2:FOR,0:DO,0:functions,0:IF,1:SWITCH,0:ELSE,0:WHILE,0	15
0xa9	              0x55	                                push rbp	        51	gettext.h	FUNCTION_35
0xaa	          0x4889e5	                            mov rbp, rsp	        51	gettext.h	FUNCTION_35
0xad	        0x4883ec10	                           sub rsp, 0x10	        51	gettext.h	FUNCTION_35
0xb1	        0x48897df8	                mov qword [rbp - 8], rdi	        51	gettext.h	FUNCTION_35
0xb5	        0x488b45f8	                mov rax, qword [rbp - 8]	        52	gettext.h	FUNCTION_35	IF_1
0xb9	           0xfb600	                   movzx eax, byte [rax]	        52	gettext.h	FUNCTION_35	IF_1
0xbc	            0x84c0	                             test al, al	        52	gettext.h	FUNCTION_35	IF_1
0xbe	            0x7507	                           jne 0x4000107	        52	gettext.h	FUNCTION_35	IF_1
0xc0	      0xb800000000	                              mov eax, 0	        53	gettext.h	FUNCTION_35	IF_1
0xc5	            0xeb0c	                           jmp 0x4000113	        53	gettext.h	FUNCTION_35	IF_1
0xc7	        0x488b45f8	                mov rax, qword [rbp - 8]	        54	gettext.h	FUNCTION_35	CALL_2
0xcb	          0x4889c7	                            mov rdi, rax	        54	gettext.h	FUNCTION_35	CALL_2
0xce	      0xe800000000	                          call 0x4000113	        54	gettext.h	FUNCTION_35	CALL_2
0xd3	              0xc9	                                   leave	        55	gettext.h	FUNCTION_35
0xd4	              0xc3	                                     ret	        55	gettext.h	FUNCTION_35
prepare_move_submodule	CALL,10:FOR,0:DO,0:functions,0:IF,3:SWITCH,0:ELSE,1:WHILE,0	76
0x37b	              0x55	                                push rbp	        80	mv.c	FUNCTION_30
0x37c	          0x4889e5	                            mov rbp, rsp	        80	mv.c	FUNCTION_30
0x37f	        0x4883ec40	                           sub rsp, 0x40	        80	mv.c	FUNCTION_30
0x383	        0x48897dd8	             mov qword [rbp - 0x28], rdi	        80	mv.c	FUNCTION_30
0x387	          0x8975d4	             mov dword [rbp - 0x2c], esi	        80	mv.c	FUNCTION_30
0x38a	        0x488955c8	             mov qword [rbp - 0x38], rdx	        80	mv.c	FUNCTION_30
0x38e	    0x64488b042528	                mov rax, qword fs:[0x28]	        80	mv.c	FUNCTION_30
0x397	        0x488945f8	                mov qword [rbp - 8], rax	        80	mv.c	FUNCTION_30
0x39b	            0x31c0	                            xor eax, eax	        80	mv.c	FUNCTION_30
0x39d	    0x48c745e00000	               mov qword [rbp - 0x20], 0	        81	mv.c	FUNCTION_30
0x3a5	    0x48c745e80000	               mov qword [rbp - 0x18], 0	        81	mv.c	FUNCTION_30
0x3ad	    0x48c745f00000	               mov qword [rbp - 0x10], 0	        81	mv.c	FUNCTION_30
0x3b5	    0x488b05000000	            mov rax, qword [0x040003fc] 	        82	mv.c	FUNCTION_30	IF_1	CALL_1
0x3bc	          0x8b55d4	             mov edx, dword [rbp - 0x2c]	        82	mv.c	FUNCTION_30	IF_1	CALL_1
0x3bf	          0x4863d2	                         movsxd rdx, edx	        82	mv.c	FUNCTION_30	IF_1	CALL_1
0x3c2	        0x48c1e203	                              shl rdx, 3	        82	mv.c	FUNCTION_30	IF_1	CALL_1
0x3c6	          0x4801d0	                            add rax, rdx	        82	mv.c	FUNCTION_30	IF_1	CALL_1
0x3c9	          0x488b00	                    mov rax, qword [rax]	        82	mv.c	FUNCTION_30	IF_1	CALL_1
0x3cc	          0x8b4034	            mov eax, dword [rax + 0x34] 	        82	mv.c	FUNCTION_30	IF_1	CALL_1
0x3cf	      0x2500f00000	                         and eax, 0xf000	        82	mv.c	FUNCTION_30	IF_1	CALL_1
0x3d4	      0x3d00e00000	                         cmp eax, 0xe000	        82	mv.c	FUNCTION_30	IF_1	CALL_1
0x3d9	            0x7421	                            je 0x400043c	        82	mv.c	FUNCTION_30	IF_1	CALL_1
0x3db	      0xbf00000000	                              mov edi, 0	        83	mv.c	FUNCTION_30	CALL_3
0x3e0	      0xe8c4fcffff	                               call sym.	        83	mv.c	FUNCTION_30	CALL_3
0x3e5	          0x4889c2	                            mov rdx, rax	        83	mv.c	FUNCTION_30	CALL_3
0x3e8	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        83	mv.c	FUNCTION_30	CALL_3
0x3ec	          0x4889c6	                            mov rsi, rax	        83	mv.c	FUNCTION_30	CALL_3
0x3ef	          0x4889d7	                            mov rdi, rdx	        83	mv.c	FUNCTION_30	CALL_3
0x3f2	      0xb800000000	                              mov eax, 0	        83	mv.c	FUNCTION_30	CALL_3
0x3f7	      0xe800000000	                          call 0x400043c	        83	mv.c	FUNCTION_30	CALL_3
0x3fc	      0xbf00000000	                              mov edi, 0	        84	mv.c	FUNCTION_30	IF_2	CALL_4
0x401	      0xe800000000	                          call 0x4000446	        84	mv.c	FUNCTION_30	IF_2	CALL_4
0x406	            0x85c0	                           test eax, eax	        84	mv.c	FUNCTION_30	IF_2	CALL_4
0x408	            0x7517	                           jne 0x4000461	        84	mv.c	FUNCTION_30	IF_2	CALL_4
0x40a	      0xbf00000000	                              mov edi, 0	        85	mv.c	FUNCTION_30	CALL_6
0x40f	      0xe895fcffff	                               call sym.	        85	mv.c	FUNCTION_30	CALL_6
0x414	          0x4889c7	                            mov rdi, rax	        85	mv.c	FUNCTION_30	CALL_6
0x417	      0xb800000000	                              mov eax, 0	        85	mv.c	FUNCTION_30	CALL_6
0x41c	      0xe800000000	                          call 0x4000461	        85	mv.c	FUNCTION_30	CALL_6
0x421	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	        86	mv.c	FUNCTION_30	CALL_7
0x425	        0x488d45e0	                   lea rax, [rbp - 0x20]	        86	mv.c	FUNCTION_30	CALL_7
0x429	      0xbe00000000	                              mov esi, 0	        86	mv.c	FUNCTION_30	CALL_7
0x42e	          0x4889c7	                            mov rdi, rax	        86	mv.c	FUNCTION_30	CALL_7
0x431	      0xb800000000	                              mov eax, 0	        86	mv.c	FUNCTION_30	CALL_7
0x436	      0xe800000000	                          call 0x400047b	        86	mv.c	FUNCTION_30	CALL_7
0x43b	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        87	mv.c	FUNCTION_30	CALL_8
0x43f	      0xbe00000000	                              mov esi, 0	        87	mv.c	FUNCTION_30	CALL_8
0x444	          0x4889c7	                            mov rdi, rax	        87	mv.c	FUNCTION_30	CALL_8
0x447	      0xe800000000	                          call 0x400048c	        87	mv.c	FUNCTION_30	CALL_8
0x44c	          0x4889c2	                            mov rdx, rax	        87	mv.c	FUNCTION_30	CALL_8
0x44f	        0x488b45c8	             mov rax, qword [rbp - 0x38]	        87	mv.c	FUNCTION_30	CALL_8
0x453	          0x488910	                    mov qword [rax], rdx	        87	mv.c	FUNCTION_30	CALL_8
0x456	        0x488b45c8	             mov rax, qword [rbp - 0x38]	        88	mv.c	FUNCTION_30	IF_3
0x45a	          0x488b00	                    mov rax, qword [rax]	        88	mv.c	FUNCTION_30	IF_3
0x45d	          0x4885c0	                           test rax, rax	        88	mv.c	FUNCTION_30	IF_3
0x460	            0x741b	                            je 0x40004bd	        88	mv.c	FUNCTION_30	IF_3
0x462	        0x488b45c8	             mov rax, qword [rbp - 0x38]	        89	mv.c	FUNCTION_30	CALL_9
0x466	          0x488b00	                    mov rax, qword [rax]	        89	mv.c	FUNCTION_30	CALL_9
0x469	          0x4889c7	                            mov rdi, rax	        89	mv.c	FUNCTION_30	CALL_9
0x46c	      0xe800000000	                          call 0x40004b1	        89	mv.c	FUNCTION_30	CALL_9
0x471	          0x4889c2	                            mov rdx, rax	        89	mv.c	FUNCTION_30	CALL_9
0x474	        0x488b45c8	             mov rax, qword [rbp - 0x38]	        89	mv.c	FUNCTION_30	CALL_9
0x478	          0x488910	                    mov qword [rax], rdx	        89	mv.c	FUNCTION_30	CALL_9
0x47b	            0xeb0b	                           jmp 0x40004c8	        89	mv.c	FUNCTION_30	CALL_9
0x47d	        0x488b45c8	             mov rax, qword [rbp - 0x38]	        91	mv.c	FUNCTION_30	ELSE_1
0x481	    0x48c700010000	                      mov qword [rax], 1	        91	mv.c	FUNCTION_30	ELSE_1
0x488	        0x488d45e0	                   lea rax, [rbp - 0x20]	        92	mv.c	FUNCTION_30	CALL_10
0x48c	          0x4889c7	                            mov rdi, rax	        92	mv.c	FUNCTION_30	CALL_10
0x48f	      0xe800000000	                          call 0x40004d4	        92	mv.c	FUNCTION_30	CALL_10
0x494	              0x90	                                     nop	        93	mv.c	FUNCTION_30
0x495	        0x488b45f8	                mov rax, qword [rbp - 8]	        93	mv.c	FUNCTION_30
0x499	    0x644833042528	                xor rax, qword fs:[0x28]	        93	mv.c	FUNCTION_30
0x4a2	            0x7405	                            je 0x40004e9	        93	mv.c	FUNCTION_30
0x4a4	      0xe800000000	                          call 0x40004e9	        93	mv.c	FUNCTION_30
0x4a9	              0xc9	                                   leave	        93	mv.c	FUNCTION_30
0x4aa	              0xc3	                                     ret	        93	mv.c	FUNCTION_30
st_mult	CALL,2:FOR,0:DO,0:functions,0:IF,1:SWITCH,0:ELSE,0:WHILE,0	22
0x57	              0x55	                                push rbp	       794	git-compat-util.h	FUNCTION_15
0x58	          0x4889e5	                            mov rbp, rsp	       794	git-compat-util.h	FUNCTION_15
0x5b	        0x4883ec10	                           sub rsp, 0x10	       794	git-compat-util.h	FUNCTION_15
0x5f	        0x48897df8	                mov qword [rbp - 8], rdi	       794	git-compat-util.h	FUNCTION_15
0x63	        0x488975f0	             mov qword [rbp - 0x10], rsi	       794	git-compat-util.h	FUNCTION_15
0x67	      0x48837df800	                  cmp qword [rbp - 8], 0	       795	git-compat-util.h	FUNCTION_15	IF_1	CALL_1
0x6c	            0x7430	                            je 0x40000de	       795	git-compat-util.h	FUNCTION_15	IF_1	CALL_1
0x6e	    0x48c7c0ffffff	             mov rax, 0xffffffffffffffff	       795	git-compat-util.h	FUNCTION_15	IF_1	CALL_1
0x75	      0xba00000000	                              mov edx, 0	       795	git-compat-util.h	FUNCTION_15	IF_1	CALL_1
0x7a	        0x48f775f8	                     div qword [rbp - 8]	       795	git-compat-util.h	FUNCTION_15	IF_1	CALL_1
0x7e	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	       795	git-compat-util.h	FUNCTION_15	IF_1	CALL_1
0x82	            0x731a	                           jae 0x40000de	       795	git-compat-util.h	FUNCTION_15	IF_1	CALL_1
0x84	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       796	git-compat-util.h	FUNCTION_15	IF_1	CALL_2
0x88	        0x488b45f8	                mov rax, qword [rbp - 8]	       796	git-compat-util.h	FUNCTION_15	IF_1	CALL_2
0x8c	          0x4889c6	                            mov rsi, rax	       796	git-compat-util.h	FUNCTION_15	IF_1	CALL_2
0x8f	      0xbf00000000	                              mov edi, 0	       796	git-compat-util.h	FUNCTION_15	IF_1	CALL_2
0x94	      0xb800000000	                              mov eax, 0	       796	git-compat-util.h	FUNCTION_15	IF_1	CALL_2
0x99	      0xe800000000	                          call 0x40000de	       796	git-compat-util.h	FUNCTION_15	IF_1	CALL_2
0x9e	        0x488b45f8	                mov rax, qword [rbp - 8]	       798	git-compat-util.h	FUNCTION_15
0xa2	      0x480faf45f0	            imul rax, qword [rbp - 0x10]	       798	git-compat-util.h	FUNCTION_15
0xa7	              0xc9	                                   leave	       799	git-compat-util.h	FUNCTION_15
0xa8	              0xc3	                                     ret	       799	git-compat-util.h	FUNCTION_15
add_slash	CALL,4:FOR,0:DO,0:functions,0:IF,1:SWITCH,0:ELSE,0:WHILE,0	43
0x2e5	              0x55	                                push rbp	        63	mv.c	FUNCTION_29
0x2e6	          0x4889e5	                            mov rbp, rsp	        63	mv.c	FUNCTION_29
0x2e9	        0x4883ec20	                           sub rsp, 0x20	        63	mv.c	FUNCTION_29
0x2ed	        0x48897de8	             mov qword [rbp - 0x18], rdi	        63	mv.c	FUNCTION_29
0x2f1	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        64	mv.c	FUNCTION_29	CALL_1
0x2f5	          0x4889c7	                            mov rdi, rax	        64	mv.c	FUNCTION_29	CALL_1
0x2f8	      0xe800000000	                          call 0x400033d	        64	mv.c	FUNCTION_29	CALL_1
0x2fd	        0x488945f0	             mov qword [rbp - 0x10], rax	        64	mv.c	FUNCTION_29	CALL_1
0x301	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        65	mv.c	FUNCTION_29	IF_1
0x305	        0x488d50ff	                      lea rdx, [rax - 1]	        65	mv.c	FUNCTION_29	IF_1
0x309	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        65	mv.c	FUNCTION_29	IF_1
0x30d	          0x4801d0	                            add rax, rdx	        65	mv.c	FUNCTION_29	IF_1
0x310	           0xfb600	                   movzx eax, byte [rax]	        65	mv.c	FUNCTION_29	IF_1
0x313	            0x3c2f	                            cmp al, 0x2f	        65	mv.c	FUNCTION_29	IF_1
0x315	            0x745e	                            je 0x40003b5	        65	mv.c	FUNCTION_29	IF_1
0x317	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        66	mv.c	FUNCTION_29	IF_1	CALL_3
0x31b	      0xbe02000000	                              mov esi, 2	        66	mv.c	FUNCTION_29	IF_1	CALL_3
0x320	          0x4889c7	                            mov rdi, rax	        66	mv.c	FUNCTION_29	IF_1	CALL_3
0x323	      0xe8ebfcffff	                         call sym.st_add	        66	mv.c	FUNCTION_29	IF_1	CALL_3
0x328	          0x4889c7	                            mov rdi, rax	        66	mv.c	FUNCTION_29	IF_1	CALL_3
0x32b	      0xe800000000	                          call 0x4000370	        66	mv.c	FUNCTION_29	IF_1	CALL_3
0x330	        0x488945f8	                mov qword [rbp - 8], rax	        66	mv.c	FUNCTION_29	IF_1	CALL_3
0x334	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	        67	mv.c	FUNCTION_29	IF_1	CALL_4
0x338	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	        67	mv.c	FUNCTION_29	IF_1	CALL_4
0x33c	        0x488b45f8	                mov rax, qword [rbp - 8]	        67	mv.c	FUNCTION_29	IF_1	CALL_4
0x340	          0x4889ce	                            mov rsi, rcx	        67	mv.c	FUNCTION_29	IF_1	CALL_4
0x343	          0x4889c7	                            mov rdi, rax	        67	mv.c	FUNCTION_29	IF_1	CALL_4
0x346	      0xe800000000	                          call 0x400038b	        67	mv.c	FUNCTION_29	IF_1	CALL_4
0x34b	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        68	mv.c	FUNCTION_29	IF_1
0x34f	        0x488d5001	                      lea rdx, [rax + 1]	        68	mv.c	FUNCTION_29	IF_1
0x353	        0x488955f0	             mov qword [rbp - 0x10], rdx	        68	mv.c	FUNCTION_29	IF_1
0x357	        0x488b55f8	                mov rdx, qword [rbp - 8]	        68	mv.c	FUNCTION_29	IF_1
0x35b	          0x4801d0	                            add rax, rdx	        68	mv.c	FUNCTION_29	IF_1
0x35e	          0xc6002f	                    mov byte [rax], 0x2f	        68	mv.c	FUNCTION_29	IF_1
0x361	        0x488b55f8	                mov rdx, qword [rbp - 8]	        69	mv.c	FUNCTION_29	IF_1
0x365	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        69	mv.c	FUNCTION_29	IF_1
0x369	          0x4801d0	                            add rax, rdx	        69	mv.c	FUNCTION_29	IF_1
0x36c	          0xc60000	                       mov byte [rax], 0	        69	mv.c	FUNCTION_29	IF_1
0x36f	        0x488b45f8	                mov rax, qword [rbp - 8]	        70	mv.c	FUNCTION_29	IF_1
0x373	            0xeb04	                           jmp 0x40003b9	        70	mv.c	FUNCTION_29	IF_1
0x375	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        72	mv.c	FUNCTION_29
0x379	              0xc9	                                   leave	        73	mv.c	FUNCTION_29
0x37a	              0xc3	                                     ret	        73	mv.c	FUNCTION_29
