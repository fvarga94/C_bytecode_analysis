crypt_set_cm_option	WHILE,0:ELSE,0:functions,0:IF,0:SWITCH,0:FOR,0:DO,0:CALL,2	17
0x4000193	              0x55	                                push rbp	       215	crypt.c	FUNCTION_7
0x4000194	              0x53	                                push rbx	       215	crypt.c	FUNCTION_7
0x4000195	        0x4883ec08	                              sub rsp, 8	       215	crypt.c	FUNCTION_7
0x4000199	          0x4889fd	                            mov rbp, rdi	       215	crypt.c	FUNCTION_7
0x400019c	            0x89f3	                            mov ebx, esi	       215	crypt.c	FUNCTION_7
0x400019e	    0x488bbf481700	          mov rdi, qword [rdi + 0x1748] 	       216	crypt.c	FUNCTION_7	CALL_1
0x40001a5	      0xe800000000	                          call 0x40001aa	       216	crypt.c	FUNCTION_7	CALL_1
0x40001aa	          0x4863f3	                         movsxd rsi, ebx	       217	crypt.c	FUNCTION_7	CALL_2
0x40001ad	        0x488d0476	                  lea rax, [rsi + rsi*2]	       217	crypt.c	FUNCTION_7	CALL_2
0x40001b1	        0x48c1e005	                              shl rax, 5	       217	crypt.c	FUNCTION_7	CALL_2
0x40001b5	    0x488bb8000000	                    mov rdi, qword [rax]	       217	crypt.c	FUNCTION_7	CALL_2
0x40001bc	      0xe800000000	                          call 0x40001c1	       217	crypt.c	FUNCTION_7	CALL_2
0x40001c1	    0x488985481700	          mov qword [rbp + 0x1748], rax 	       217	crypt.c	FUNCTION_7	CALL_2
0x40001c8	        0x4883c408	                              add rsp, 8	       218	crypt.c	FUNCTION_7
0x40001cc	              0x5b	                                 pop rbx	       218	crypt.c	FUNCTION_7
0x40001cd	              0x5d	                                 pop rbp	       218	crypt.c	FUNCTION_7
0x40001ce	              0xc3	                                     ret	       218	crypt.c	FUNCTION_7
crypt_get_method_nr	WHILE,0:ELSE,0:functions,0:IF,0:SWITCH,0:FOR,0:DO,0:CALL,1	7
0x4000141	        0x4883ec08	                              sub rsp, 8	       184	crypt.c	FUNCTION_4
0x4000145	    0x488bbf481700	          mov rdi, qword [rdi + 0x1748] 	       185	crypt.c	FUNCTION_4	CALL_1
0x400014c	          0x803f00	                       cmp byte [rdi], 0	       185	crypt.c	FUNCTION_4	CALL_1
0x400014f	    0x480f443d0000	           cmove rdi, qword [0x04000157]	       185	crypt.c	FUNCTION_4	CALL_1
0x4000157	      0xe800000000	                          call 0x400015c	       185	crypt.c	FUNCTION_4	CALL_1
0x400015c	        0x4883c408	                              add rsp, 8	       186	crypt.c	FUNCTION_4
0x4000160	              0xc3	                                     ret	       186	crypt.c	FUNCTION_4
crypt_decode	WHILE,0:ELSE,0:functions,0:IF,0:SWITCH,0:FOR,0:DO,0:CALL,1	7
0x4000605	        0x4883ec08	                              sub rsp, 8	       448	crypt.c	FUNCTION_17
0x4000609	          0x486307	                 movsxd rax, dword [rdi]	       449	crypt.c	FUNCTION_17	CALL_1
0x400060c	        0x488d0440	                  lea rax, [rax + rax*2]	       449	crypt.c	FUNCTION_17	CALL_1
0x4000610	        0x48c1e005	                              shl rax, 5	       449	crypt.c	FUNCTION_17	CALL_1
0x4000614	    0xff9000000000	                        call qword [rax]	       449	crypt.c	FUNCTION_17	CALL_1
0x400061a	        0x4883c408	                              add rsp, 8	       450	crypt.c	FUNCTION_17
0x400061e	              0xc3	                                     ret	       450	crypt.c	FUNCTION_17
crypt_decode_alloc	WHILE,0:ELSE,0:functions,0:IF,3:SWITCH,0:FOR,0:DO,0:CALL,3	43
0x400056c	            0x4156	                                push r14	       408	crypt.c	FUNCTION_15
0x400056e	            0x4155	                                push r13	       408	crypt.c	FUNCTION_15
0x4000570	            0x4154	                                push r12	       408	crypt.c	FUNCTION_15
0x4000572	              0x55	                                push rbp	       408	crypt.c	FUNCTION_15
0x4000573	              0x53	                                push rbx	       408	crypt.c	FUNCTION_15
0x4000574	          0x4889fb	                            mov rbx, rdi	       408	crypt.c	FUNCTION_15
0x4000577	          0x4989f6	                            mov r14, rsi	       408	crypt.c	FUNCTION_15
0x400057a	          0x4989d4	                            mov r12, rdx	       408	crypt.c	FUNCTION_15
0x400057d	          0x4989cd	                            mov r13, rcx	       408	crypt.c	FUNCTION_15
0x4000580	            0x8b2f	                    mov ebp, dword [rdi]	       409	crypt.c	FUNCTION_15
0x4000582	          0x4863c5	                         movsxd rax, ebp	       411	crypt.c	FUNCTION_15	IF_1
0x4000585	        0x488d0440	                  lea rax, [rax + rax*2]	       411	crypt.c	FUNCTION_15	IF_1
0x4000589	        0x48c1e005	                              shl rax, 5	       411	crypt.c	FUNCTION_15	IF_1
0x400058d	    0x488b80000000	                    mov rax, qword [rax]	       411	crypt.c	FUNCTION_15	IF_1
0x4000594	          0x4885c0	                           test rax, rax	       411	crypt.c	FUNCTION_15	IF_1
0x4000597	            0x7404	                            je 0x400059d	       411	crypt.c	FUNCTION_15	IF_1
0x4000599	            0xffd0	                                call rax	       413	crypt.c	FUNCTION_15	CALL_1
0x400059b	            0xeb45	                           jmp 0x40005e2	       413	crypt.c	FUNCTION_15	CALL_1
0x400059d	      0xb800000000	                              mov eax, 0	       417	crypt.c	FUNCTION_15	IF_2
0x40005a2	          0x4885d2	                           test rdx, rdx	       415	crypt.c	FUNCTION_15	IF_2
0x40005a5	            0x743b	                            je 0x40005e2	       415	crypt.c	FUNCTION_15	IF_2
0x40005a7	            0x89d7	                            mov edi, edx	       419	crypt.c	FUNCTION_15	CALL_2
0x40005a9	      0xe800000000	                          call 0x40005ae	       419	crypt.c	FUNCTION_15	CALL_2
0x40005ae	        0x49894500	                    mov qword [r13], rax	       419	crypt.c	FUNCTION_15	CALL_2
0x40005b2	          0x4885c0	                           test rax, rax	       420	crypt.c	FUNCTION_15	IF_3
0x40005b5	            0x7424	                            je 0x40005db	       420	crypt.c	FUNCTION_15	IF_3
0x40005b7	          0x4863ed	                         movsxd rbp, ebp	       422	crypt.c	FUNCTION_15	CALL_3
0x40005ba	      0x4c8d446d00	                   lea r8, [rbp + rbp*2]	       422	crypt.c	FUNCTION_15	CALL_3
0x40005bf	        0x49c1e005	                               shl r8, 5	       422	crypt.c	FUNCTION_15	CALL_3
0x40005c3	          0x4889c1	                            mov rcx, rax	       422	crypt.c	FUNCTION_15	CALL_3
0x40005c6	          0x4c89e2	                            mov rdx, r12	       422	crypt.c	FUNCTION_15	CALL_3
0x40005c9	          0x4c89f6	                            mov rsi, r14	       422	crypt.c	FUNCTION_15	CALL_3
0x40005cc	          0x4889df	                            mov rdi, rbx	       422	crypt.c	FUNCTION_15	CALL_3
0x40005cf	    0x41ff90000000	                         call qword [r8]	       422	crypt.c	FUNCTION_15	CALL_3
0x40005d6	          0x4c89e0	                            mov rax, r12	       423	crypt.c	FUNCTION_15
0x40005d9	            0xeb07	                           jmp 0x40005e2	       423	crypt.c	FUNCTION_15
0x40005db	    0x48c7c0ffffff	             mov rax, 0xffffffffffffffff	       421	crypt.c	FUNCTION_15	IF_3
0x40005e2	              0x5b	                                 pop rbx	       424	crypt.c	FUNCTION_15
0x40005e3	              0x5d	                                 pop rbp	       424	crypt.c	FUNCTION_15
0x40005e4	            0x415c	                                 pop r12	       424	crypt.c	FUNCTION_15
0x40005e6	            0x415d	                                 pop r13	       424	crypt.c	FUNCTION_15
0x40005e8	            0x415e	                                 pop r14	       424	crypt.c	FUNCTION_15
0x40005ea	              0xc3	                                     ret	       424	crypt.c	FUNCTION_15
crypt_create_from_header	WHILE,0:ELSE,0:functions,0:IF,2:SWITCH,0:FOR,0:DO,0:CALL,1	23
0x400026d	        0x4883ec08	                              sub rsp, 8	       263	crypt.c	FUNCTION_10
0x4000271	          0x4863c7	                         movsxd rax, edi	       266	crypt.c	FUNCTION_10
0x4000274	        0x4c8d0400	                     lea r8, [rax + rax]	       266	crypt.c	FUNCTION_10
0x4000278	        0x498d0c00	                     lea rcx, [r8 + rax]	       266	crypt.c	FUNCTION_10
0x400027c	        0x48c1e105	                              shl rcx, 5	       266	crypt.c	FUNCTION_10
0x4000280	    0x8b8900000000	                    mov ecx, dword [rcx]	       266	crypt.c	FUNCTION_10
0x4000286	          0x4c01c0	                             add rax, r8	       267	crypt.c	FUNCTION_10
0x4000289	        0x48c1e005	                              shl rax, 5	       267	crypt.c	FUNCTION_10
0x400028d	    0x448b88000000	                    mov r9d, dword [rax]	       267	crypt.c	FUNCTION_10
0x4000294	        0x488d420c	                    lea rax, [rdx + 0xc]	       270	crypt.c	FUNCTION_10	IF_1
0x4000298	            0x85c9	                           test ecx, ecx	       270	crypt.c	FUNCTION_10	IF_1
0x400029a	    0x41b800000000	                              mov r8d, 0	       270	crypt.c	FUNCTION_10	IF_1
0x40002a0	        0x490f4ec0	                          cmovle rax, r8	       270	crypt.c	FUNCTION_10	IF_1
0x40002a4	          0x4585c9	                           test r9d, r9d	       271	crypt.c	FUNCTION_10	IF_2
0x40002a7	            0x7e0a	                           jle 0x40002b3	       271	crypt.c	FUNCTION_10	IF_2
0x40002a9	          0x4c63c1	                          movsxd r8, ecx	       272	crypt.c	FUNCTION_10	IF_2
0x40002ac	      0x4e8d44020c	                lea r8, [rdx + r8 + 0xc]	       272	crypt.c	FUNCTION_10	IF_2
0x40002b1	            0xeb06	                           jmp 0x40002b9	       272	crypt.c	FUNCTION_10	IF_2
0x40002b3	    0x41b800000000	                              mov r8d, 0	       265	crypt.c	FUNCTION_10
0x40002b9	          0x4889c2	                            mov rdx, rax	       274	crypt.c	FUNCTION_10	CALL_1
0x40002bc	      0xe800000000	                          call 0x40002c1	       274	crypt.c	FUNCTION_10	CALL_1
0x40002c1	        0x4883c408	                              add rsp, 8	       275	crypt.c	FUNCTION_10
0x40002c5	              0xc3	                                     ret	       275	crypt.c	FUNCTION_10
crypt_create_from_file	WHILE,0:ELSE,0:functions,0:IF,4:SWITCH,0:FOR,0:DO,0:CALL,9	75
0x40002c6	            0x4156	                                push r14	       283	crypt.c	FUNCTION_11
0x40002c8	            0x4155	                                push r13	       283	crypt.c	FUNCTION_11
0x40002ca	            0x4154	                                push r12	       283	crypt.c	FUNCTION_11
0x40002cc	              0x55	                                push rbp	       283	crypt.c	FUNCTION_11
0x40002cd	              0x53	                                push rbx	       283	crypt.c	FUNCTION_11
0x40002ce	        0x4883ec20	                           sub rsp, 0x20	       283	crypt.c	FUNCTION_11
0x40002d2	          0x4989fc	                            mov r12, rdi	       283	crypt.c	FUNCTION_11
0x40002d5	          0x4989f5	                            mov r13, rsi	       283	crypt.c	FUNCTION_11
0x40002d8	    0x64488b042528	                mov rax, qword fs:[0x28]	       283	crypt.c	FUNCTION_11
0x40002e1	      0x4889442418	             mov qword [rsp + 0x18], rax	       283	crypt.c	FUNCTION_11
0x40002e6	            0x31c0	                            xor eax, eax	       283	crypt.c	FUNCTION_11
0x40002e8	          0x4889f9	                            mov rcx, rdi	       295	stdio2.h	FUNCTION_42	CALL_9
0x40002eb	      0xba01000000	                              mov edx, 1	       295	stdio2.h	FUNCTION_42	CALL_9
0x40002f0	      0xbe0c000000	                            mov esi, 0xc	       295	stdio2.h	FUNCTION_42	CALL_9
0x40002f5	          0x4889e7	                            mov rdi, rsp	       295	stdio2.h	FUNCTION_42	CALL_9
0x40002f8	      0xe800000000	                          call 0x40002fd	       295	stdio2.h	FUNCTION_42	CALL_9
0x40002fd	      0xba00000000	                              mov edx, 0	       291	crypt.c	FUNCTION_11	IF_1
0x4000302	        0x4883f801	                              cmp rax, 1	       290	crypt.c	FUNCTION_11	IF_1	CALL_1
0x4000306	     0xf8597000000	                           jne 0x40003a3	       290	crypt.c	FUNCTION_11	IF_1	CALL_1
0x400030c	      0xbe0c000000	                            mov esi, 0xc	       292	crypt.c	FUNCTION_11	CALL_2
0x4000311	          0x4889e7	                            mov rdi, rsp	       292	crypt.c	FUNCTION_11	CALL_2
0x4000314	      0xe800000000	                          call 0x4000319	       292	crypt.c	FUNCTION_11	CALL_2
0x4000319	          0x4189c6	                           mov r14d, eax	       292	crypt.c	FUNCTION_11	CALL_2
0x400031c	            0x85c0	                           test eax, eax	       293	crypt.c	FUNCTION_11	IF_2
0x400031e	            0x7877	                            js 0x4000397	       293	crypt.c	FUNCTION_11	IF_2
0x4000320	            0x89c7	                            mov edi, eax	       296	crypt.c	FUNCTION_11	CALL_3
0x4000322	      0xe800000000	                          call 0x4000327	       296	crypt.c	FUNCTION_11	CALL_3
0x4000327	            0x89c3	                            mov ebx, eax	       296	crypt.c	FUNCTION_11	CALL_3
0x4000329	            0x89c7	                            mov edi, eax	       297	crypt.c	FUNCTION_11	IF_3	CALL_4
0x400032b	      0xe800000000	                          call 0x4000330	       297	crypt.c	FUNCTION_11	IF_3	CALL_4
0x4000330	          0x4889c5	                            mov rbp, rax	       297	crypt.c	FUNCTION_11	IF_3	CALL_4
0x4000333	          0x4885c0	                           test rax, rax	       297	crypt.c	FUNCTION_11	IF_3	CALL_4
0x4000336	            0x7466	                            je 0x400039e	       297	crypt.c	FUNCTION_11	IF_3	CALL_4
0x4000338	      0xba0c000000	                            mov edx, 0xc	        59	string3.h	FUNCTION_46	CALL_3
0x400033d	          0x4889e6	                            mov rsi, rsp	        59	string3.h	FUNCTION_46	CALL_3
0x4000340	          0x4889c7	                            mov rdi, rax	        59	string3.h	FUNCTION_46	CALL_3
0x4000343	      0xe800000000	                          call 0x4000348	        59	string3.h	FUNCTION_46	CALL_3
0x4000348	          0x83fb0c	                            cmp ebx, 0xc	       300	crypt.c	FUNCTION_11	IF_4
0x400034b	            0x7e2c	                           jle 0x4000379	       300	crypt.c	FUNCTION_11	IF_4
0x400034d	          0x8d73f4	                    lea esi, [rbx - 0xc]	       295	stdio2.h	FUNCTION_42	CALL_9
0x4000350	          0x4863f6	                         movsxd rsi, esi	       295	stdio2.h	FUNCTION_42	CALL_9
0x4000353	        0x488d7d0c	                    lea rdi, [rbp + 0xc]	       295	stdio2.h	FUNCTION_42	CALL_9
0x4000357	          0x4c89e1	                            mov rcx, r12	       295	stdio2.h	FUNCTION_42	CALL_9
0x400035a	      0xba01000000	                              mov edx, 1	       295	stdio2.h	FUNCTION_42	CALL_9
0x400035f	      0xe800000000	                          call 0x4000364	       295	stdio2.h	FUNCTION_42	CALL_9
0x4000364	        0x4883f801	                              cmp rax, 1	       301	crypt.c	FUNCTION_11	IF_4	CALL_6
0x4000368	            0x740f	                            je 0x4000379	       301	crypt.c	FUNCTION_11	IF_4	CALL_6
0x400036a	          0x4889ef	                            mov rdi, rbp	       304	crypt.c	FUNCTION_11	IF_4	CALL_7
0x400036d	      0xe800000000	                          call 0x4000372	       304	crypt.c	FUNCTION_11	IF_4	CALL_7
0x4000372	      0xba00000000	                              mov edx, 0	       305	crypt.c	FUNCTION_11	IF_4
0x4000377	            0xeb2a	                           jmp 0x40003a3	       305	crypt.c	FUNCTION_11	IF_4
0x4000379	          0x4889ea	                            mov rdx, rbp	       308	crypt.c	FUNCTION_11	CALL_8
0x400037c	          0x4c89ee	                            mov rsi, r13	       308	crypt.c	FUNCTION_11	CALL_8
0x400037f	          0x4489f7	                           mov edi, r14d	       308	crypt.c	FUNCTION_11	CALL_8
0x4000382	      0xe800000000	                          call 0x4000387	       308	crypt.c	FUNCTION_11	CALL_8
0x4000387	          0x4889c3	                            mov rbx, rax	       308	crypt.c	FUNCTION_11	CALL_8
0x400038a	          0x4889ef	                            mov rdi, rbp	       309	crypt.c	FUNCTION_11	CALL_9
0x400038d	      0xe800000000	                          call 0x4000392	       309	crypt.c	FUNCTION_11	CALL_9
0x4000392	          0x4889da	                            mov rdx, rbx	       310	crypt.c	FUNCTION_11
0x4000395	            0xeb0c	                           jmp 0x40003a3	       310	crypt.c	FUNCTION_11
0x4000397	      0xba00000000	                              mov edx, 0	       294	crypt.c	FUNCTION_11	IF_2
0x400039c	            0xeb05	                           jmp 0x40003a3	       294	crypt.c	FUNCTION_11	IF_2
0x400039e	      0xba00000000	                              mov edx, 0	       298	crypt.c	FUNCTION_11	IF_3
0x40003a3	          0x4889d0	                            mov rax, rdx	       311	crypt.c	FUNCTION_11
0x40003a6	      0x488b4c2418	            mov rcx, qword [rsp + 0x18] 	       311	crypt.c	FUNCTION_11
0x40003ab	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       311	crypt.c	FUNCTION_11
0x40003b4	            0x7405	                            je 0x40003bb	       311	crypt.c	FUNCTION_11
0x40003b6	      0xe800000000	                          call 0x40003bb	       311	crypt.c	FUNCTION_11
0x40003bb	        0x4883c420	                           add rsp, 0x20	       311	crypt.c	FUNCTION_11
0x40003bf	              0x5b	                                 pop rbx	       311	crypt.c	FUNCTION_11
0x40003c0	              0x5d	                                 pop rbp	       311	crypt.c	FUNCTION_11
0x40003c1	            0x415c	                                 pop r12	       311	crypt.c	FUNCTION_11
0x40003c3	            0x415d	                                 pop r13	       311	crypt.c	FUNCTION_11
0x40003c5	            0x415e	                                 pop r14	       311	crypt.c	FUNCTION_11
0x40003c7	              0xc3	                                     ret	       311	crypt.c	FUNCTION_11
crypt_whole_undofile	WHILE,0:ELSE,0:functions,0:IF,0:SWITCH,0:FOR,0:DO,0:CALL,0	5
0x4000161	          0x4863ff	                         movsxd rdi, edi	       195	crypt.c	FUNCTION_5
0x4000164	        0x488d047f	                  lea rax, [rdi + rdi*2]	       195	crypt.c	FUNCTION_5
0x4000168	        0x48c1e005	                              shl rax, 5	       195	crypt.c	FUNCTION_5
0x400016c	    0x8b8000000000	                    mov eax, dword [rax]	       195	crypt.c	FUNCTION_5
0x4000172	              0xc3	                                     ret	       196	crypt.c	FUNCTION_5
crypt_create	WHILE,0:ELSE,0:functions,0:IF,0:SWITCH,0:FOR,0:DO,0:CALL,2	36
0x4000206	            0x4157	                                push r15	       245	crypt.c	FUNCTION_9
0x4000208	            0x4156	                                push r14	       245	crypt.c	FUNCTION_9
0x400020a	            0x4155	                                push r13	       245	crypt.c	FUNCTION_9
0x400020c	            0x4154	                                push r12	       245	crypt.c	FUNCTION_9
0x400020e	              0x55	                                push rbp	       245	crypt.c	FUNCTION_9
0x400020f	              0x53	                                push rbx	       245	crypt.c	FUNCTION_9
0x4000210	        0x4883ec18	                           sub rsp, 0x18	       245	crypt.c	FUNCTION_9
0x4000214	            0x89fb	                            mov ebx, edi	       245	crypt.c	FUNCTION_9
0x4000216	      0x4889742408	                mov qword [rsp + 8], rsi	       245	crypt.c	FUNCTION_9
0x400021b	          0x4989d4	                            mov r12, rdx	       245	crypt.c	FUNCTION_9
0x400021e	          0x4189cd	                           mov r13d, ecx	       245	crypt.c	FUNCTION_9
0x4000221	          0x4d89c6	                             mov r14, r8	       245	crypt.c	FUNCTION_9
0x4000224	          0x4589cf	                           mov r15d, r9d	       245	crypt.c	FUNCTION_9
0x4000227	      0xbf10000000	                           mov edi, 0x10	       246	crypt.c	FUNCTION_9	CALL_1
0x400022c	      0xe800000000	                          call 0x4000231	       246	crypt.c	FUNCTION_9	CALL_1
0x4000231	          0x4889c5	                            mov rbp, rax	       246	crypt.c	FUNCTION_9	CALL_1
0x4000234	            0x8918	                    mov dword [rax], ebx	       248	crypt.c	FUNCTION_9
0x4000236	          0x4863db	                         movsxd rbx, ebx	       249	crypt.c	FUNCTION_9	CALL_2
0x4000239	        0x488d045b	                  lea rax, [rbx + rbx*2]	       249	crypt.c	FUNCTION_9	CALL_2
0x400023d	        0x48c1e005	                              shl rax, 5	       249	crypt.c	FUNCTION_9	CALL_2
0x4000241	          0x4589f9	                           mov r9d, r15d	       249	crypt.c	FUNCTION_9	CALL_2
0x4000244	          0x4d89f0	                             mov r8, r14	       249	crypt.c	FUNCTION_9	CALL_2
0x4000247	          0x4489e9	                           mov ecx, r13d	       249	crypt.c	FUNCTION_9	CALL_2
0x400024a	          0x4c89e2	                            mov rdx, r12	       249	crypt.c	FUNCTION_9	CALL_2
0x400024d	      0x488b742408	                mov rsi, qword [rsp + 8]	       249	crypt.c	FUNCTION_9	CALL_2
0x4000252	          0x4889ef	                            mov rdi, rbp	       249	crypt.c	FUNCTION_9	CALL_2
0x4000255	    0xff9000000000	                        call qword [rax]	       249	crypt.c	FUNCTION_9	CALL_2
0x400025b	          0x4889e8	                            mov rax, rbp	       251	crypt.c	FUNCTION_9
0x400025e	        0x4883c418	                           add rsp, 0x18	       251	crypt.c	FUNCTION_9
0x4000262	              0x5b	                                 pop rbx	       251	crypt.c	FUNCTION_9
0x4000263	              0x5d	                                 pop rbp	       251	crypt.c	FUNCTION_9
0x4000264	            0x415c	                                 pop r12	       251	crypt.c	FUNCTION_9
0x4000266	            0x415d	                                 pop r13	       251	crypt.c	FUNCTION_9
0x4000268	            0x415e	                                 pop r14	       251	crypt.c	FUNCTION_9
0x400026a	            0x415f	                                 pop r15	       251	crypt.c	FUNCTION_9
0x400026c	              0xc3	                                     ret	       251	crypt.c	FUNCTION_9
crypt_encode_alloc	WHILE,0:ELSE,0:functions,0:IF,3:SWITCH,0:FOR,0:DO,0:CALL,3	43
0x40004ed	            0x4156	                                push r14	       380	crypt.c	FUNCTION_14
0x40004ef	            0x4155	                                push r13	       380	crypt.c	FUNCTION_14
0x40004f1	            0x4154	                                push r12	       380	crypt.c	FUNCTION_14
0x40004f3	              0x55	                                push rbp	       380	crypt.c	FUNCTION_14
0x40004f4	              0x53	                                push rbx	       380	crypt.c	FUNCTION_14
0x40004f5	          0x4889fb	                            mov rbx, rdi	       380	crypt.c	FUNCTION_14
0x40004f8	          0x4989f6	                            mov r14, rsi	       380	crypt.c	FUNCTION_14
0x40004fb	          0x4989d4	                            mov r12, rdx	       380	crypt.c	FUNCTION_14
0x40004fe	          0x4989cd	                            mov r13, rcx	       380	crypt.c	FUNCTION_14
0x4000501	            0x8b2f	                    mov ebp, dword [rdi]	       381	crypt.c	FUNCTION_14
0x4000503	          0x4863c5	                         movsxd rax, ebp	       383	crypt.c	FUNCTION_14	IF_1
0x4000506	        0x488d0440	                  lea rax, [rax + rax*2]	       383	crypt.c	FUNCTION_14	IF_1
0x400050a	        0x48c1e005	                              shl rax, 5	       383	crypt.c	FUNCTION_14	IF_1
0x400050e	    0x488b80000000	                    mov rax, qword [rax]	       383	crypt.c	FUNCTION_14	IF_1
0x4000515	          0x4885c0	                           test rax, rax	       383	crypt.c	FUNCTION_14	IF_1
0x4000518	            0x7404	                            je 0x400051e	       383	crypt.c	FUNCTION_14	IF_1
0x400051a	            0xffd0	                                call rax	       385	crypt.c	FUNCTION_14	CALL_1
0x400051c	            0xeb45	                           jmp 0x4000563	       385	crypt.c	FUNCTION_14	CALL_1
0x400051e	      0xb800000000	                              mov eax, 0	       388	crypt.c	FUNCTION_14	IF_2
0x4000523	          0x4885d2	                           test rdx, rdx	       386	crypt.c	FUNCTION_14	IF_2
0x4000526	            0x743b	                            je 0x4000563	       386	crypt.c	FUNCTION_14	IF_2
0x4000528	            0x89d7	                            mov edi, edx	       390	crypt.c	FUNCTION_14	CALL_2
0x400052a	      0xe800000000	                          call 0x400052f	       390	crypt.c	FUNCTION_14	CALL_2
0x400052f	        0x49894500	                    mov qword [r13], rax	       390	crypt.c	FUNCTION_14	CALL_2
0x4000533	          0x4885c0	                           test rax, rax	       391	crypt.c	FUNCTION_14	IF_3
0x4000536	            0x7424	                            je 0x400055c	       391	crypt.c	FUNCTION_14	IF_3
0x4000538	          0x4863ed	                         movsxd rbp, ebp	       393	crypt.c	FUNCTION_14	CALL_3
0x400053b	      0x4c8d446d00	                   lea r8, [rbp + rbp*2]	       393	crypt.c	FUNCTION_14	CALL_3
0x4000540	        0x49c1e005	                               shl r8, 5	       393	crypt.c	FUNCTION_14	CALL_3
0x4000544	          0x4889c1	                            mov rcx, rax	       393	crypt.c	FUNCTION_14	CALL_3
0x4000547	          0x4c89e2	                            mov rdx, r12	       393	crypt.c	FUNCTION_14	CALL_3
0x400054a	          0x4c89f6	                            mov rsi, r14	       393	crypt.c	FUNCTION_14	CALL_3
0x400054d	          0x4889df	                            mov rdi, rbx	       393	crypt.c	FUNCTION_14	CALL_3
0x4000550	    0x41ff90000000	                         call qword [r8]	       393	crypt.c	FUNCTION_14	CALL_3
0x4000557	          0x4c89e0	                            mov rax, r12	       394	crypt.c	FUNCTION_14
0x400055a	            0xeb07	                           jmp 0x4000563	       394	crypt.c	FUNCTION_14
0x400055c	    0x48c7c0ffffff	             mov rax, 0xffffffffffffffff	       392	crypt.c	FUNCTION_14	IF_3
0x4000563	              0x5b	                                 pop rbx	       395	crypt.c	FUNCTION_14
0x4000564	              0x5d	                                 pop rbp	       395	crypt.c	FUNCTION_14
0x4000565	            0x415c	                                 pop r12	       395	crypt.c	FUNCTION_14
0x4000567	            0x415d	                                 pop r13	       395	crypt.c	FUNCTION_14
0x4000569	            0x415e	                                 pop r14	       395	crypt.c	FUNCTION_14
0x400056b	              0xc3	                                     ret	       395	crypt.c	FUNCTION_14
crypt_get_header_len	WHILE,0:ELSE,0:functions,0:IF,0:SWITCH,0:FOR,0:DO,0:CALL,0	8
0x4000173	          0x4863ff	                         movsxd rdi, edi	       205	crypt.c	FUNCTION_6
0x4000176	        0x488d143f	                    lea rdx, [rdi + rdi]	       205	crypt.c	FUNCTION_6
0x400017a	        0x488d043a	                    lea rax, [rdx + rdi]	       205	crypt.c	FUNCTION_6
0x400017e	        0x48c1e005	                              shl rax, 5	       205	crypt.c	FUNCTION_6
0x4000182	    0x8b8800000000	                    mov ecx, dword [rax]	       204	crypt.c	FUNCTION_6
0x4000188	    0x8b8000000000	                    mov eax, dword [rax]	       204	crypt.c	FUNCTION_6
0x400018e	        0x8d44010c	              lea eax, [rcx + rax + 0xc]	       204	crypt.c	FUNCTION_6
0x4000192	              0xc3	                                     ret	       207	crypt.c	FUNCTION_6
crypt_get_key	WHILE,0:ELSE,0:functions,0:IF,5:SWITCH,0:FOR,1:DO,0:CALL,12	85
0x40006d1	            0x4156	                                push r14	       523	crypt.c	FUNCTION_23
0x40006d3	            0x4155	                                push r13	       523	crypt.c	FUNCTION_23
0x40006d5	            0x4154	                                push r12	       523	crypt.c	FUNCTION_23
0x40006d7	              0x55	                                push rbp	       523	crypt.c	FUNCTION_23
0x40006d8	              0x53	                                push rbx	       523	crypt.c	FUNCTION_23
0x40006d9	          0x4189fe	                           mov r14d, edi	       523	crypt.c	FUNCTION_23
0x40006dc	          0x4189f5	                           mov r13d, esi	       523	crypt.c	FUNCTION_23
0x40006df	      0xbb00000000	                              mov ebx, 0	       527	crypt.c	FUNCTION_23	FOR_1
0x40006e4	    0x41bc00000000	                             mov r12d, 0	       524	crypt.c	FUNCTION_23
0x40006ea	    0xc70500000000	               mov dword [0x040006f4], 1	       529	crypt.c	FUNCTION_23	FOR_1
0x40006f4	    0x8b0500000000	            mov eax, dword [0x040006fa] 	       530	crypt.c	FUNCTION_23	FOR_1
0x40006fa	    0x890500000000	            mov dword [0x04000700], eax 	       530	crypt.c	FUNCTION_23	FOR_1
0x4000700	            0x85db	                           test ebx, ebx	       531	crypt.c	FUNCTION_23	FOR_1	CALL_1
0x4000702	            0x7516	                           jne 0x400071a	       531	crypt.c	FUNCTION_23	FOR_1	CALL_1
0x4000704	      0xba05000000	                              mov edx, 5	       531	crypt.c	FUNCTION_23	FOR_1	CALL_1
0x4000709	      0xbe00000000	                              mov esi, 0	       531	crypt.c	FUNCTION_23	FOR_1	CALL_1
0x400070e	      0xbf00000000	                              mov edi, 0	       531	crypt.c	FUNCTION_23	FOR_1	CALL_1
0x4000713	      0xe800000000	                          call 0x4000718	       531	crypt.c	FUNCTION_23	FOR_1	CALL_1
0x4000718	            0xeb14	                           jmp 0x400072e	       531	crypt.c	FUNCTION_23	FOR_1	CALL_1
0x400071a	      0xba05000000	                              mov edx, 5	       531	crypt.c	FUNCTION_23	FOR_1	CALL_1
0x400071f	      0xbe00000000	                              mov esi, 0	       531	crypt.c	FUNCTION_23	FOR_1	CALL_1
0x4000724	      0xbf00000000	                              mov edi, 0	       531	crypt.c	FUNCTION_23	FOR_1	CALL_1
0x4000729	      0xe800000000	                          call 0x400072e	       531	crypt.c	FUNCTION_23	FOR_1	CALL_1
0x400072e	    0x41b800000000	                              mov r8d, 0	       531	crypt.c	FUNCTION_23	FOR_1	CALL_1
0x4000734	      0xb900000000	                              mov ecx, 0	       531	crypt.c	FUNCTION_23	FOR_1	CALL_1
0x4000739	      0xba00000000	                              mov edx, 0	       531	crypt.c	FUNCTION_23	FOR_1	CALL_1
0x400073e	          0x4889c6	                            mov rsi, rax	       531	crypt.c	FUNCTION_23	FOR_1	CALL_1
0x4000741	      0xbf00000000	                              mov edi, 0	       531	crypt.c	FUNCTION_23	FOR_1	CALL_1
0x4000746	      0xe800000000	                          call 0x400074b	       531	crypt.c	FUNCTION_23	FOR_1	CALL_1
0x400074b	          0x4889c5	                            mov rbp, rax	       531	crypt.c	FUNCTION_23	FOR_1	CALL_1
0x400074e	    0xc70500000000	               mov dword [0x04000758], 0	       535	crypt.c	FUNCTION_23	FOR_1
0x4000758	          0x4885c0	                           test rax, rax	       537	crypt.c	FUNCTION_23	FOR_1	IF_1
0x400075b	     0xf8494000000	                            je 0x40007f5	       537	crypt.c	FUNCTION_23	FOR_1	IF_1
0x4000761	          0x4439eb	                           cmp ebx, r13d	       540	crypt.c	FUNCTION_23	FOR_1	IF_2
0x4000764	     0xf8580000000	                           jne 0x40007ea	       540	crypt.c	FUNCTION_23	FOR_1	IF_2
0x400076a	          0x4d85e4	                           test r12, r12	       542	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_3	CALL_4
0x400076d	            0x7447	                            je 0x40007b6	       542	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_3	CALL_4
0x400076f	          0x4c89e6	                            mov rsi, r12	       542	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_3	CALL_4
0x4000772	          0x4889c7	                            mov rdi, rax	       542	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_3	CALL_4
0x4000775	      0xe800000000	                          call 0x400077a	       542	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_3	CALL_4
0x400077a	            0x85c0	                           test eax, eax	       542	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_3	CALL_4
0x400077c	            0x7438	                            je 0x40007b6	       542	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_3	CALL_4
0x400077e	      0xba05000000	                              mov edx, 5	       544	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_3	CALL_6
0x4000783	      0xbe00000000	                              mov esi, 0	       544	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_3	CALL_6
0x4000788	      0xbf00000000	                              mov edi, 0	       544	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_3	CALL_6
0x400078d	      0xe800000000	                          call 0x4000792	       544	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_3	CALL_6
0x4000792	          0x4889c7	                            mov rdi, rax	       544	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_3	CALL_6
0x4000795	      0xe800000000	                          call 0x400079a	       544	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_3	CALL_6
0x400079a	          0x4889ef	                            mov rdi, rbp	       545	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_3	CALL_7
0x400079d	      0xe800000000	                          call 0x40007a2	       545	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_3	CALL_7
0x40007a2	          0x4c89e7	                            mov rdi, r12	       546	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_3	CALL_8
0x40007a5	      0xe800000000	                          call 0x40007aa	       546	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_3	CALL_8
0x40007aa	      0xbbffffffff	                     mov ebx, 0xffffffff	       548	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_3
0x40007af	      0xbd00000000	                              mov ebp, 0	       547	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_3
0x40007b4	            0xeb34	                           jmp 0x40007ea	       549	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_3
0x40007b6	          0x4585f6	                         test r14d, r14d	       552	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_4
0x40007b9	            0x743a	                            je 0x40007f5	       552	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_4
0x40007bb	      0xb904000000	                              mov ecx, 4	       554	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_4	CALL_9
0x40007c0	          0x4889ea	                            mov rdx, rbp	       554	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_4	CALL_9
0x40007c3	      0xbe00000000	                              mov esi, 0	       554	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_4	CALL_9
0x40007c8	      0xbf00000000	                              mov edi, 0	       554	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_4	CALL_9
0x40007cd	      0xe800000000	                          call 0x40007d2	       554	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_4	CALL_9
0x40007d2	          0x4889ef	                            mov rdi, rbp	       555	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_4	CALL_10
0x40007d5	      0xe800000000	                          call 0x40007da	       555	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_4	CALL_10
0x40007da	    0x488b05000000	            mov rax, qword [0x040007e1] 	       556	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_4
0x40007e1	    0x488ba8101500	          mov rbp, qword [rax + 0x1510] 	       556	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_4
0x40007e8	            0xeb0b	                           jmp 0x40007f5	       556	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_4
0x40007ea	          0x83c301	                              add ebx, 1	       527	crypt.c	FUNCTION_23	FOR_1
0x40007ed	          0x4989ec	                            mov r12, rbp	       561	crypt.c	FUNCTION_23	FOR_1
0x40007f0	      0xe9f5feffff	                           jmp 0x40006ea	       561	crypt.c	FUNCTION_23	FOR_1
0x40007f5	    0x833d00000000	               cmp dword [0x040007fc], 0	       564	crypt.c	FUNCTION_23	IF_5
0x40007fc	            0x740a	                            je 0x4000808	       564	crypt.c	FUNCTION_23	IF_5
0x40007fe	      0xbf0a000000	                            mov edi, 0xa	       565	crypt.c	FUNCTION_23	CALL_11
0x4000803	      0xe800000000	                          call 0x4000808	       565	crypt.c	FUNCTION_23	CALL_11
0x4000808	    0xc70500000000	               mov dword [0x04000812], 0	       566	crypt.c	FUNCTION_23
0x4000812	    0xc70500000000	               mov dword [0x0400081c], 0	       567	crypt.c	FUNCTION_23
0x400081c	          0x4c89e7	                            mov rdi, r12	       569	crypt.c	FUNCTION_23	CALL_12
0x400081f	      0xe800000000	                          call 0x4000824	       569	crypt.c	FUNCTION_23	CALL_12
0x4000824	          0x4889e8	                            mov rax, rbp	       571	crypt.c	FUNCTION_23
0x4000827	              0x5b	                                 pop rbx	       571	crypt.c	FUNCTION_23
0x4000828	              0x5d	                                 pop rbp	       571	crypt.c	FUNCTION_23
0x4000829	            0x415c	                                 pop r12	       571	crypt.c	FUNCTION_23
0x400082b	            0x415d	                                 pop r13	       571	crypt.c	FUNCTION_23
0x400082d	            0x415e	                                 pop r14	       571	crypt.c	FUNCTION_23
0x400082f	              0xc3	                                     ret	       571	crypt.c	FUNCTION_23
crypt_free_key	WHILE,0:ELSE,0:functions,0:IF,1:SWITCH,0:FOR,1:DO,0:CALL,1	13
0x4000659	        0x4883ec08	                              sub rsp, 8	       482	crypt.c	FUNCTION_20
0x400065d	          0x4885ff	                           test rdi, rdi	       485	crypt.c	FUNCTION_20	IF_1
0x4000660	            0x7419	                            je 0x400067b	       485	crypt.c	FUNCTION_20	IF_1
0x4000662	          0x803f00	                       cmp byte [rdi], 0	       487	crypt.c	FUNCTION_20	IF_1	FOR_1
0x4000665	            0x740f	                            je 0x4000676	       487	crypt.c	FUNCTION_20	IF_1	FOR_1
0x4000667	          0x4889f8	                            mov rax, rdi	       487	crypt.c	FUNCTION_20	IF_1	FOR_1
0x400066a	          0xc60000	                       mov byte [rax], 0	       488	crypt.c	FUNCTION_20	IF_1	FOR_1
0x400066d	        0x4883c001	                              add rax, 1	       487	crypt.c	FUNCTION_20	IF_1	FOR_1
0x4000671	          0x803800	                       cmp byte [rax], 0	       487	crypt.c	FUNCTION_20	IF_1	FOR_1
0x4000674	            0x75f4	                           jne 0x400066a	       487	crypt.c	FUNCTION_20	IF_1	FOR_1
0x4000676	      0xe800000000	                          call 0x400067b	       489	crypt.c	FUNCTION_20	IF_1	CALL_1
0x400067b	        0x4883c408	                              add rsp, 8	       491	crypt.c	FUNCTION_20
0x400067f	              0xc3	                                     ret	       491	crypt.c	FUNCTION_20
crypt_self_test	WHILE,0:ELSE,0:functions,0:IF,1:SWITCH,0:FOR,0:DO,0:CALL,2	14
0x40001cf	        0x4883ec08	                              sub rsp, 8	       226	crypt.c	FUNCTION_8
0x40001d3	    0x488b3d000000	            mov rdi, qword [0x040001da] 	       227	crypt.c	FUNCTION_8	CALL_1
0x40001da	      0xe800000000	                          call 0x40001df	       227	crypt.c	FUNCTION_8	CALL_1
0x40001df	            0x4898	                                    cdqe	       229	crypt.c	FUNCTION_8	IF_1
0x40001e1	        0x488d0440	                  lea rax, [rax + rax*2]	       229	crypt.c	FUNCTION_8	IF_1
0x40001e5	        0x48c1e005	                              shl rax, 5	       229	crypt.c	FUNCTION_8	IF_1
0x40001e9	    0x488b90000000	                    mov rdx, qword [rax]	       229	crypt.c	FUNCTION_8	IF_1
0x40001f0	      0xb801000000	                              mov eax, 1	       230	crypt.c	FUNCTION_8	IF_1
0x40001f5	          0x4885d2	                           test rdx, rdx	       229	crypt.c	FUNCTION_8	IF_1
0x40001f8	            0x7407	                            je 0x4000201	       229	crypt.c	FUNCTION_8	IF_1
0x40001fa	      0xb800000000	                              mov eax, 0	       231	crypt.c	FUNCTION_8	CALL_2
0x40001ff	            0xffd2	                                call rdx	       231	crypt.c	FUNCTION_8	CALL_2
0x4000201	        0x4883c408	                              add rsp, 8	       232	crypt.c	FUNCTION_8
0x4000205	              0xc3	                                     ret	       232	crypt.c	FUNCTION_8
crypt_check_method	WHILE,0:ELSE,0:functions,0:IF,1:SWITCH,0:FOR,0:DO,0:CALL,2	12
0x4000680	          0x83ff01	                              cmp edi, 1	       499	crypt.c	FUNCTION_21	IF_1
0x4000683	            0x7f2e	                            jg 0x40006b3	       499	crypt.c	FUNCTION_21	IF_1
0x4000685	        0x4883ec08	                              sub rsp, 8	       498	crypt.c	FUNCTION_21
0x4000689	    0xc70500000000	               mov dword [0x04000693], 1	       501	crypt.c	FUNCTION_21	IF_1
0x4000693	      0xba05000000	                              mov edx, 5	       502	crypt.c	FUNCTION_21	IF_1	CALL_2
0x4000698	      0xbe00000000	                              mov esi, 0	       502	crypt.c	FUNCTION_21	IF_1	CALL_2
0x400069d	      0xbf00000000	                              mov edi, 0	       502	crypt.c	FUNCTION_21	IF_1	CALL_2
0x40006a2	      0xe800000000	                          call 0x40006a7	       502	crypt.c	FUNCTION_21	IF_1	CALL_2
0x40006a7	          0x4889c7	                            mov rdi, rax	       502	crypt.c	FUNCTION_21	IF_1	CALL_2
0x40006aa	      0xe800000000	                          call 0x40006af	       502	crypt.c	FUNCTION_21	IF_1	CALL_2
0x40006af	        0x4883c408	                              add rsp, 8	       504	crypt.c	FUNCTION_21
0x40006b3	            0xf3c3	                                     ret	       504	crypt.c	FUNCTION_21
crypt_method_nr_from_name	WHILE,0:ELSE,0:functions,0:IF,1:SWITCH,0:FOR,1:DO,0:CALL,1	22
0x4000040	            0x4154	                                push r12	       137	crypt.c	FUNCTION_1
0x4000042	              0x55	                                push rbp	       137	crypt.c	FUNCTION_1
0x4000043	              0x53	                                push rbx	       137	crypt.c	FUNCTION_1
0x4000044	          0x4989fc	                            mov r12, rdi	       137	crypt.c	FUNCTION_1
0x4000047	      0xbd00000000	                              mov ebp, 0	       137	crypt.c	FUNCTION_1
0x400004c	      0xbb00000000	                              mov ebx, 0	       140	crypt.c	FUNCTION_1	FOR_1
0x4000051	        0x488b7500	                    mov rsi, qword [rbp]	       141	crypt.c	FUNCTION_1	FOR_1	IF_1	CALL_1
0x4000055	          0x4c89e7	                            mov rdi, r12	       141	crypt.c	FUNCTION_1	FOR_1	IF_1	CALL_1
0x4000058	      0xe800000000	                          call 0x400005d	       141	crypt.c	FUNCTION_1	FOR_1	IF_1	CALL_1
0x400005d	            0x85c0	                           test eax, eax	       141	crypt.c	FUNCTION_1	FOR_1	IF_1	CALL_1
0x400005f	            0x7413	                            je 0x4000074	       141	crypt.c	FUNCTION_1	FOR_1	IF_1	CALL_1
0x4000061	          0x83c301	                              add ebx, 1	       140	crypt.c	FUNCTION_1	FOR_1
0x4000064	        0x4883c560	                           add rbp, 0x60	       140	crypt.c	FUNCTION_1	FOR_1
0x4000068	          0x83fb03	                              cmp ebx, 3	       140	crypt.c	FUNCTION_1	FOR_1
0x400006b	            0x75e4	                           jne 0x4000051	       140	crypt.c	FUNCTION_1	FOR_1
0x400006d	      0xb800000000	                              mov eax, 0	       143	crypt.c	FUNCTION_1
0x4000072	            0xeb02	                           jmp 0x4000076	       143	crypt.c	FUNCTION_1
0x4000074	            0x89d8	                            mov eax, ebx	       143	crypt.c	FUNCTION_1
0x4000076	              0x5b	                                 pop rbx	       144	crypt.c	FUNCTION_1
0x4000077	              0x5d	                                 pop rbp	       144	crypt.c	FUNCTION_1
0x4000078	            0x415c	                                 pop r12	       144	crypt.c	FUNCTION_1
0x400007a	              0xc3	                                     ret	       144	crypt.c	FUNCTION_1
crypt_free_state	WHILE,0:ELSE,0:functions,0:IF,0:SWITCH,0:FOR,0:DO,0:CALL,2	8
0x40004d6	              0x53	                                push rbx	       364	crypt.c	FUNCTION_13
0x40004d7	          0x4889fb	                            mov rbx, rdi	       364	crypt.c	FUNCTION_13
0x40004da	        0x488b7f08	                mov rdi, qword [rdi + 8]	       365	crypt.c	FUNCTION_13	CALL_1
0x40004de	      0xe800000000	                          call 0x40004e3	       365	crypt.c	FUNCTION_13	CALL_1
0x40004e3	          0x4889df	                            mov rdi, rbx	       366	crypt.c	FUNCTION_13	CALL_2
0x40004e6	      0xe800000000	                          call 0x40004eb	       366	crypt.c	FUNCTION_13	CALL_2
0x40004eb	              0x5b	                                 pop rbx	       367	crypt.c	FUNCTION_13
0x40004ec	              0xc3	                                     ret	       367	crypt.c	FUNCTION_13
crypt_method_nr_from_magic	WHILE,0:ELSE,0:functions,0:IF,3:SWITCH,0:FOR,1:DO,0:CALL,5	53
0x400007b	            0x4155	                                push r13	       153	crypt.c	FUNCTION_2
0x400007d	            0x4154	                                push r12	       153	crypt.c	FUNCTION_2
0x400007f	              0x55	                                push rbp	       153	crypt.c	FUNCTION_2
0x4000080	              0x53	                                push rbx	       153	crypt.c	FUNCTION_2
0x4000081	        0x4883ec08	                              sub rsp, 8	       153	crypt.c	FUNCTION_2
0x4000085	          0x83fe0b	                            cmp esi, 0xb	       156	crypt.c	FUNCTION_2	IF_1
0x4000088	     0xf8e88000000	                           jle 0x4000116	       156	crypt.c	FUNCTION_2	IF_1
0x400008e	          0x4189f4	                           mov r12d, esi	       156	crypt.c	FUNCTION_2	IF_1
0x4000091	          0x4889fd	                            mov rbp, rdi	       156	crypt.c	FUNCTION_2	IF_1
0x4000094	    0x41bd00000000	                             mov r13d, 0	       156	crypt.c	FUNCTION_2	IF_1
0x400009a	      0xbb00000000	                              mov ebx, 0	       156	crypt.c	FUNCTION_2	IF_1
0x400009f	        0x498b7508	                mov rsi, qword [r13 + 8]	       160	crypt.c	FUNCTION_2	FOR_1	IF_2	CALL_1
0x40000a3	      0xba0c000000	                            mov edx, 0xc	       160	crypt.c	FUNCTION_2	FOR_1	IF_2	CALL_1
0x40000a8	          0x4889ef	                            mov rdi, rbp	       160	crypt.c	FUNCTION_2	FOR_1	IF_2	CALL_1
0x40000ab	      0xe800000000	                          call 0x40000b0	       160	crypt.c	FUNCTION_2	FOR_1	IF_2	CALL_1
0x40000b0	            0x85c0	                           test eax, eax	       160	crypt.c	FUNCTION_2	FOR_1	IF_2	CALL_1
0x40000b2	            0x746e	                            je 0x4000122	       160	crypt.c	FUNCTION_2	FOR_1	IF_2	CALL_1
0x40000b4	          0x83c301	                              add ebx, 1	       159	crypt.c	FUNCTION_2	FOR_1
0x40000b7	        0x4983c560	                           add r13, 0x60	       159	crypt.c	FUNCTION_2	FOR_1
0x40000bb	          0x83fb03	                              cmp ebx, 3	       159	crypt.c	FUNCTION_2	FOR_1
0x40000be	            0x75df	                           jne 0x400009f	       159	crypt.c	FUNCTION_2	FOR_1
0x40000c0	      0xbf00000000	                              mov edi, 0	       163	crypt.c	FUNCTION_2	CALL_2
0x40000c5	      0xb800000000	                              mov eax, 0	       163	crypt.c	FUNCTION_2	CALL_2
0x40000ca	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	       163	crypt.c	FUNCTION_2	CALL_2
0x40000d1	            0xf2ae	              repne scasb al, byte [rdi]	       163	crypt.c	FUNCTION_2	CALL_2
0x40000d3	          0x48f7d1	                                 not rcx	       163	crypt.c	FUNCTION_2	CALL_2
0x40000d6	        0x4883e901	                              sub rcx, 1	       163	crypt.c	FUNCTION_2	CALL_2
0x40000da	          0x4139cc	                           cmp r12d, ecx	       164	crypt.c	FUNCTION_2	IF_3	CALL_3
0x40000dd	            0x7c3e	                            jl 0x400011d	       164	crypt.c	FUNCTION_2	IF_3	CALL_3
0x40000df	          0x4863d1	                         movsxd rdx, ecx	       164	crypt.c	FUNCTION_2	IF_3	CALL_3
0x40000e2	      0xbe00000000	                              mov esi, 0	       164	crypt.c	FUNCTION_2	IF_3	CALL_3
0x40000e7	          0x4889ef	                            mov rdi, rbp	       164	crypt.c	FUNCTION_2	IF_3	CALL_3
0x40000ea	      0xe800000000	                          call 0x40000ef	       164	crypt.c	FUNCTION_2	IF_3	CALL_3
0x40000ef	      0xbbffffffff	                     mov ebx, 0xffffffff	       167	crypt.c	FUNCTION_2
0x40000f4	            0x85c0	                           test eax, eax	       164	crypt.c	FUNCTION_2	IF_3	CALL_3
0x40000f6	            0x752a	                           jne 0x4000122	       164	crypt.c	FUNCTION_2	IF_3	CALL_3
0x40000f8	      0xba05000000	                              mov edx, 5	       165	crypt.c	FUNCTION_2	CALL_5
0x40000fd	      0xbe00000000	                              mov esi, 0	       165	crypt.c	FUNCTION_2	CALL_5
0x4000102	      0xbf00000000	                              mov edi, 0	       165	crypt.c	FUNCTION_2	CALL_5
0x4000107	      0xe800000000	                          call 0x400010c	       165	crypt.c	FUNCTION_2	CALL_5
0x400010c	          0x4889c7	                            mov rdi, rax	       165	crypt.c	FUNCTION_2	CALL_5
0x400010f	      0xe800000000	                          call 0x4000114	       165	crypt.c	FUNCTION_2	CALL_5
0x4000114	            0xeb0c	                           jmp 0x4000122	       165	crypt.c	FUNCTION_2	CALL_5
0x4000116	      0xbbffffffff	                     mov ebx, 0xffffffff	       157	crypt.c	FUNCTION_2	IF_1
0x400011b	            0xeb05	                           jmp 0x4000122	       157	crypt.c	FUNCTION_2	IF_1
0x400011d	      0xbbffffffff	                     mov ebx, 0xffffffff	       167	crypt.c	FUNCTION_2
0x4000122	            0x89d8	                            mov eax, ebx	       168	crypt.c	FUNCTION_2
0x4000124	        0x4883c408	                              add rsp, 8	       168	crypt.c	FUNCTION_2
0x4000128	              0x5b	                                 pop rbx	       168	crypt.c	FUNCTION_2
0x4000129	              0x5d	                                 pop rbp	       168	crypt.c	FUNCTION_2
0x400012a	            0x415c	                                 pop r12	       168	crypt.c	FUNCTION_2
0x400012c	            0x415d	                                 pop r13	       168	crypt.c	FUNCTION_2
0x400012e	              0xc3	                                     ret	       168	crypt.c	FUNCTION_2
crypt_encode_inplace	WHILE,0:ELSE,0:functions,0:IF,0:SWITCH,0:FOR,0:DO,0:CALL,1	8
0x400061f	        0x4883ec08	                              sub rsp, 8	       460	crypt.c	FUNCTION_18
0x4000623	          0x486307	                 movsxd rax, dword [rdi]	       461	crypt.c	FUNCTION_18	CALL_1
0x4000626	        0x488d0440	                  lea rax, [rax + rax*2]	       461	crypt.c	FUNCTION_18	CALL_1
0x400062a	        0x48c1e005	                              shl rax, 5	       461	crypt.c	FUNCTION_18	CALL_1
0x400062e	          0x4889f1	                            mov rcx, rsi	       461	crypt.c	FUNCTION_18	CALL_1
0x4000631	    0xff9000000000	                        call qword [rax]	       461	crypt.c	FUNCTION_18	CALL_1
0x4000637	        0x4883c408	                              add rsp, 8	       462	crypt.c	FUNCTION_18
0x400063b	              0xc3	                                     ret	       462	crypt.c	FUNCTION_18
crypt_works_inplace	WHILE,0:ELSE,0:functions,0:IF,0:SWITCH,0:FOR,0:DO,0:CALL,0	5
0x400012f	          0x486307	                 movsxd rax, dword [rdi]	       176	crypt.c	FUNCTION_3
0x4000132	        0x488d0440	                  lea rax, [rax + rax*2]	       176	crypt.c	FUNCTION_3
0x4000136	        0x48c1e005	                              shl rax, 5	       176	crypt.c	FUNCTION_3
0x400013a	    0x8b8000000000	                    mov eax, dword [rax]	       176	crypt.c	FUNCTION_3
0x4000140	              0xc3	                                     ret	       177	crypt.c	FUNCTION_3
crypt_append_msg	WHILE,0:ELSE,1:functions,0:IF,1:SWITCH,0:FOR,0:DO,0:CALL,6	34
0x4000830	              0x53	                                push rbx	       580	crypt.c	FUNCTION_24
0x4000831	          0x4889fb	                            mov rbx, rdi	       580	crypt.c	FUNCTION_24
0x4000834	      0xe800000000	                          call 0x4000839	       581	crypt.c	FUNCTION_24	IF_1	CALL_1
0x4000839	            0x85c0	                           test eax, eax	       581	crypt.c	FUNCTION_24	IF_1	CALL_1
0x400083b	            0x7525	                           jne 0x4000862	       581	crypt.c	FUNCTION_24	IF_1	CALL_1
0x400083d	      0xba05000000	                              mov edx, 5	       582	crypt.c	FUNCTION_24	CALL_3
0x4000842	      0xbe00000000	                              mov esi, 0	       582	crypt.c	FUNCTION_24	CALL_3
0x4000847	      0xbf00000000	                              mov edi, 0	       582	crypt.c	FUNCTION_24	CALL_3
0x400084c	      0xe800000000	                          call 0x4000851	       582	crypt.c	FUNCTION_24	CALL_3
0x4000851	          0x4889c6	                            mov rsi, rax	       148	string3.h	FUNCTION_55	CALL_3
0x4000854	    0x488b3d000000	            mov rdi, qword [0x0400085b] 	       148	string3.h	FUNCTION_55	CALL_3
0x400085b	      0xe800000000	                          call 0x4000860	       148	string3.h	FUNCTION_55	CALL_3
0x4000860	            0xeb62	                           jmp 0x40008c4	       148	string3.h	FUNCTION_55	CALL_3
0x4000862	    0x488b15000000	            mov rdx, qword [0x04000869] 	       585	crypt.c	FUNCTION_24	ELSE_1	CALL_4
0x4000869	      0xb800000000	                              mov eax, 0	       148	string3.h	FUNCTION_55	CALL_3
0x400086e	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	       148	string3.h	FUNCTION_55	CALL_3
0x4000875	          0x4889d7	                            mov rdi, rdx	       148	string3.h	FUNCTION_55	CALL_3
0x4000878	            0xf2ae	              repne scasb al, byte [rdi]	       148	string3.h	FUNCTION_55	CALL_3
0x400087a	          0x48f7d1	                                 not rcx	       148	string3.h	FUNCTION_55	CALL_3
0x400087d	    0x66c7440aff5b	         mov word [rdx + rcx - 1], 0x5b 	       148	string3.h	FUNCTION_55	CALL_3
0x4000884	    0x488bb3481700	          mov rsi, qword [rbx + 0x1748] 	       586	crypt.c	FUNCTION_24	ELSE_1	CALL_5
0x400088b	          0x803e00	                       cmp byte [rsi], 0	       586	crypt.c	FUNCTION_24	ELSE_1	CALL_5
0x400088e	    0x480f44350000	           cmove rsi, qword [0x04000896]	       586	crypt.c	FUNCTION_24	ELSE_1	CALL_5
0x4000896	    0x488b3d000000	            mov rdi, qword [0x0400089d] 	       148	string3.h	FUNCTION_55	CALL_3
0x400089d	      0xe800000000	                          call 0x40008a2	       148	string3.h	FUNCTION_55	CALL_3
0x40008a2	    0x488b15000000	            mov rdx, qword [0x040008a9] 	       587	crypt.c	FUNCTION_24	ELSE_1	CALL_6
0x40008a9	      0xb800000000	                              mov eax, 0	       148	string3.h	FUNCTION_55	CALL_3
0x40008ae	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	       148	string3.h	FUNCTION_55	CALL_3
0x40008b5	          0x4889d7	                            mov rdi, rdx	       148	string3.h	FUNCTION_55	CALL_3
0x40008b8	            0xf2ae	              repne scasb al, byte [rdi]	       148	string3.h	FUNCTION_55	CALL_3
0x40008ba	          0x48f7d1	                                 not rcx	       148	string3.h	FUNCTION_55	CALL_3
0x40008bd	    0x66c7440aff5d	         mov word [rdx + rcx - 1], 0x5d 	       148	string3.h	FUNCTION_55	CALL_3
0x40008c4	              0x5b	                                 pop rbx	       589	crypt.c	FUNCTION_24
0x40008c5	              0xc3	                                     ret	       589	crypt.c	FUNCTION_24
crypt_decode_inplace	WHILE,0:ELSE,0:functions,0:IF,0:SWITCH,0:FOR,0:DO,0:CALL,1	8
0x400063c	        0x4883ec08	                              sub rsp, 8	       472	crypt.c	FUNCTION_19
0x4000640	          0x486307	                 movsxd rax, dword [rdi]	       473	crypt.c	FUNCTION_19	CALL_1
0x4000643	        0x488d0440	                  lea rax, [rax + rax*2]	       473	crypt.c	FUNCTION_19	CALL_1
0x4000647	        0x48c1e005	                              shl rax, 5	       473	crypt.c	FUNCTION_19	CALL_1
0x400064b	          0x4889f1	                            mov rcx, rsi	       473	crypt.c	FUNCTION_19	CALL_1
0x400064e	    0xff9000000000	                        call qword [rax]	       473	crypt.c	FUNCTION_19	CALL_1
0x4000654	        0x4883c408	                              add rsp, 8	       474	crypt.c	FUNCTION_19
0x4000658	              0xc3	                                     ret	       474	crypt.c	FUNCTION_19
crypt_create_for_writing	WHILE,0:ELSE,0:functions,0:IF,5:SWITCH,0:FOR,0:DO,0:CALL,6	79
0x40003c8	            0x4157	                                push r15	       326	crypt.c	FUNCTION_12
0x40003ca	            0x4156	                                push r14	       326	crypt.c	FUNCTION_12
0x40003cc	            0x4155	                                push r13	       326	crypt.c	FUNCTION_12
0x40003ce	            0x4154	                                push r12	       326	crypt.c	FUNCTION_12
0x40003d0	              0x55	                                push rbp	       326	crypt.c	FUNCTION_12
0x40003d1	              0x53	                                push rbx	       326	crypt.c	FUNCTION_12
0x40003d2	        0x4883ec18	                           sub rsp, 0x18	       326	crypt.c	FUNCTION_12
0x40003d6	            0x89fb	                            mov ebx, edi	       326	crypt.c	FUNCTION_12
0x40003d8	      0x4889742408	                mov qword [rsp + 8], rsi	       326	crypt.c	FUNCTION_12
0x40003dd	          0x4989d6	                            mov r14, rdx	       326	crypt.c	FUNCTION_12
0x40003e0	          0x4989cc	                            mov r12, rcx	       326	crypt.c	FUNCTION_12
0x40003e3	      0xe800000000	                          call 0x40003e8	       327	crypt.c	FUNCTION_12	CALL_1
0x40003e8	          0x4863d3	                         movsxd rdx, ebx	       330	crypt.c	FUNCTION_12
0x40003eb	        0x488d3412	                    lea rsi, [rdx + rdx]	       330	crypt.c	FUNCTION_12
0x40003ef	        0x488d0c16	                    lea rcx, [rsi + rdx]	       330	crypt.c	FUNCTION_12
0x40003f3	        0x48c1e105	                              shl rcx, 5	       330	crypt.c	FUNCTION_12
0x40003f7	    0x8ba900000000	                    mov ebp, dword [rcx]	       330	crypt.c	FUNCTION_12
0x40003fd	    0x448ba9000000	                   mov r13d, dword [rcx]	       331	crypt.c	FUNCTION_12
0x4000404	        0x41890424	                    mov dword [r12], eax	       334	crypt.c	FUNCTION_12
0x4000408	            0x89c7	                            mov edi, eax	       335	crypt.c	FUNCTION_12	CALL_2
0x400040a	      0xe800000000	                          call 0x400040f	       335	crypt.c	FUNCTION_12	CALL_2
0x400040f	          0x498906	                    mov qword [r14], rax	       335	crypt.c	FUNCTION_12	CALL_2
0x4000412	          0x4885c0	                           test rax, rax	       336	crypt.c	FUNCTION_12	IF_1
0x4000415	     0xf84a7000000	                            je 0x40004c2	       336	crypt.c	FUNCTION_12	IF_1
0x400041b	          0x4863d3	                         movsxd rdx, ebx	       339	crypt.c	FUNCTION_12	CALL_3
0x400041e	        0x488d0c52	                  lea rcx, [rdx + rdx*2]	       339	crypt.c	FUNCTION_12	CALL_3
0x4000422	        0x48c1e105	                              shl rcx, 5	       339	crypt.c	FUNCTION_12	CALL_3
0x4000426	      0xba0c000000	                            mov edx, 0xc	        59	string3.h	FUNCTION_46	CALL_3
0x400042b	    0x488bb1000000	                    mov rsi, qword [rcx]	        59	string3.h	FUNCTION_46	CALL_3
0x4000432	          0x4889c7	                            mov rdi, rax	        59	string3.h	FUNCTION_46	CALL_3
0x4000435	      0xe800000000	                          call 0x400043a	        59	string3.h	FUNCTION_46	CALL_3
0x400043a	            0x85ed	                           test ebp, ebp	       340	crypt.c	FUNCTION_12	IF_2
0x400043c	            0x7f11	                            jg 0x400044f	       340	crypt.c	FUNCTION_12	IF_2
0x400043e	    0x41bf00000000	                             mov r15d, 0	       329	crypt.c	FUNCTION_12
0x4000444	    0x41bc00000000	                             mov r12d, 0	       328	crypt.c	FUNCTION_12
0x400044a	          0x4585ed	                         test r13d, r13d	       340	crypt.c	FUNCTION_12	IF_2
0x400044d	            0x7e37	                           jle 0x4000486	       340	crypt.c	FUNCTION_12	IF_2
0x400044f	    0x41bc00000000	                             mov r12d, 0	       328	crypt.c	FUNCTION_12
0x4000455	            0x85ed	                           test ebp, ebp	       342	crypt.c	FUNCTION_12	IF_2	IF_3
0x4000457	            0x7e07	                           jle 0x4000460	       342	crypt.c	FUNCTION_12	IF_2	IF_3
0x4000459	          0x498b06	                    mov rax, qword [r14]	       343	crypt.c	FUNCTION_12	IF_2	IF_3
0x400045c	        0x4c8d600c	                    lea r12, [rax + 0xc]	       343	crypt.c	FUNCTION_12	IF_2	IF_3
0x4000460	    0x41bf00000000	                             mov r15d, 0	       329	crypt.c	FUNCTION_12
0x4000466	          0x4585ed	                         test r13d, r13d	       344	crypt.c	FUNCTION_12	IF_2	IF_4
0x4000469	            0x7e0b	                           jle 0x4000476	       344	crypt.c	FUNCTION_12	IF_2	IF_4
0x400046b	          0x4863c5	                         movsxd rax, ebp	       345	crypt.c	FUNCTION_12	IF_2	IF_4
0x400046e	          0x498b16	                    mov rdx, qword [r14]	       345	crypt.c	FUNCTION_12	IF_2	IF_4
0x4000471	      0x4c8d7c020c	              lea r15, [rdx + rax + 0xc]	       345	crypt.c	FUNCTION_12	IF_2	IF_4
0x4000476	          0x4489e9	                           mov ecx, r13d	       350	crypt.c	FUNCTION_12	IF_2	CALL_4
0x4000479	          0x4c89fa	                            mov rdx, r15	       350	crypt.c	FUNCTION_12	IF_2	CALL_4
0x400047c	            0x89ee	                            mov esi, ebp	       350	crypt.c	FUNCTION_12	IF_2	CALL_4
0x400047e	          0x4c89e7	                            mov rdi, r12	       350	crypt.c	FUNCTION_12	IF_2	CALL_4
0x4000481	      0xe800000000	                          call 0x4000486	       350	crypt.c	FUNCTION_12	IF_2	CALL_4
0x4000486	          0x4589e9	                           mov r9d, r13d	       353	crypt.c	FUNCTION_12	CALL_5
0x4000489	          0x4d89f8	                             mov r8, r15	       353	crypt.c	FUNCTION_12	CALL_5
0x400048c	            0x89e9	                            mov ecx, ebp	       353	crypt.c	FUNCTION_12	CALL_5
0x400048e	          0x4c89e2	                            mov rdx, r12	       353	crypt.c	FUNCTION_12	CALL_5
0x4000491	      0x488b742408	                mov rsi, qword [rsp + 8]	       353	crypt.c	FUNCTION_12	CALL_5
0x4000496	            0x89df	                            mov edi, ebx	       353	crypt.c	FUNCTION_12	CALL_5
0x4000498	      0xe800000000	                          call 0x400049d	       353	crypt.c	FUNCTION_12	CALL_5
0x400049d	          0x4885c0	                           test rax, rax	       354	crypt.c	FUNCTION_12	IF_5
0x40004a0	            0x7525	                           jne 0x40004c7	       354	crypt.c	FUNCTION_12	IF_5
0x40004a2	          0x498b3e	                    mov rdi, qword [r14]	       355	crypt.c	FUNCTION_12	CALL_6
0x40004a5	      0xb800000000	                              mov eax, 0	       356	crypt.c	FUNCTION_12
0x40004aa	          0x4885ff	                           test rdi, rdi	       355	crypt.c	FUNCTION_12	CALL_6
0x40004ad	            0x7418	                            je 0x40004c7	       355	crypt.c	FUNCTION_12	CALL_6
0x40004af	      0xe800000000	                          call 0x40004b4	       355	crypt.c	FUNCTION_12	CALL_6
0x40004b4	    0x49c706000000	                      mov qword [r14], 0	       355	crypt.c	FUNCTION_12	CALL_6
0x40004bb	      0xb800000000	                              mov eax, 0	       356	crypt.c	FUNCTION_12
0x40004c0	            0xeb05	                           jmp 0x40004c7	       356	crypt.c	FUNCTION_12
0x40004c2	      0xb800000000	                              mov eax, 0	       337	crypt.c	FUNCTION_12	IF_1
0x40004c7	        0x4883c418	                           add rsp, 0x18	       357	crypt.c	FUNCTION_12
0x40004cb	              0x5b	                                 pop rbx	       357	crypt.c	FUNCTION_12
0x40004cc	              0x5d	                                 pop rbp	       357	crypt.c	FUNCTION_12
0x40004cd	            0x415c	                                 pop r12	       357	crypt.c	FUNCTION_12
0x40004cf	            0x415d	                                 pop r13	       357	crypt.c	FUNCTION_12
0x40004d1	            0x415e	                                 pop r14	       357	crypt.c	FUNCTION_12
0x40004d3	            0x415f	                                 pop r15	       357	crypt.c	FUNCTION_12
0x40004d5	              0xc3	                                     ret	       357	crypt.c	FUNCTION_12
crypt_encode	WHILE,0:ELSE,0:functions,0:IF,0:SWITCH,0:FOR,0:DO,0:CALL,1	7
0x40005eb	        0x4883ec08	                              sub rsp, 8	       435	crypt.c	FUNCTION_16
0x40005ef	          0x486307	                 movsxd rax, dword [rdi]	       436	crypt.c	FUNCTION_16	CALL_1
0x40005f2	        0x488d0440	                  lea rax, [rax + rax*2]	       436	crypt.c	FUNCTION_16	CALL_1
0x40005f6	        0x48c1e005	                              shl rax, 5	       436	crypt.c	FUNCTION_16	CALL_1
0x40005fa	    0xff9000000000	                        call qword [rax]	       436	crypt.c	FUNCTION_16	CALL_1
0x4000600	        0x4883c408	                              add rsp, 8	       437	crypt.c	FUNCTION_16
0x4000604	              0xc3	                                     ret	       437	crypt.c	FUNCTION_16
crypt_check_current_method	WHILE,0:ELSE,0:functions,0:IF,0:SWITCH,0:FOR,0:DO,0:CALL,2	7
0x40006b5	        0x4883ec08	                              sub rsp, 8	       508	crypt.c	FUNCTION_22
0x40006b9	    0x488b3d000000	            mov rdi, qword [0x040006c0] 	       509	crypt.c	FUNCTION_22	CALL_2
0x40006c0	      0xe800000000	                          call 0x40006c5	       509	crypt.c	FUNCTION_22	CALL_2
0x40006c5	            0x89c7	                            mov edi, eax	       509	crypt.c	FUNCTION_22	CALL_2
0x40006c7	      0xe800000000	                          call 0x40006cc	       509	crypt.c	FUNCTION_22	CALL_2
0x40006cc	        0x4883c408	                              add rsp, 8	       510	crypt.c	FUNCTION_22
0x40006d0	              0xc3	                                     ret	       510	crypt.c	FUNCTION_22
