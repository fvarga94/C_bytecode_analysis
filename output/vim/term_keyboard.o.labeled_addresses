vterm_keyboard_start_paste	IF,1:FOR,0:functions,0:SWITCH,0:CALL,1:WHILE,0:ELSE,0:DO,0	19
0x4be	              0x55	                                push rbp	       220	keyboard.c	ELSE_11	FUNCTION_3
0x4bf	          0x4889e5	                            mov rbp, rsp	       220	keyboard.c	ELSE_11	FUNCTION_3
0x4c2	        0x4883ec10	                           sub rsp, 0x10	       220	keyboard.c	ELSE_11	FUNCTION_3
0x4c6	        0x48897df8	                mov qword [rbp - 8], rdi	       220	keyboard.c	ELSE_11	FUNCTION_3
0x4ca	        0x488b45f8	                mov rax, qword [rbp - 8]	       221	keyboard.c	ELSE_11	FUNCTION_3	IF_1
0x4ce	    0x488b80180100	           mov rax, qword [rax + 0x118] 	       221	keyboard.c	ELSE_11	FUNCTION_3	IF_1
0x4d5	     0xfb680950000	           movzx eax, byte [rax + 0x95] 	       221	keyboard.c	ELSE_11	FUNCTION_3	IF_1
0x4dc	          0x83e020	                           and eax, 0x20	       221	keyboard.c	ELSE_11	FUNCTION_3	IF_1
0x4df	            0x84c0	                             test al, al	       221	keyboard.c	ELSE_11	FUNCTION_3	IF_1
0x4e1	            0x741b	                            je 0x400053e	       221	keyboard.c	ELSE_11	FUNCTION_3	IF_1
0x4e3	        0x488b45f8	                mov rax, qword [rbp - 8]	       222	keyboard.c	ELSE_11	FUNCTION_3	CALL_1
0x4e7	      0xba00000000	                              mov edx, 0	       222	keyboard.c	ELSE_11	FUNCTION_3	CALL_1
0x4ec	      0xbe9b000000	                           mov esi, 0x9b	       222	keyboard.c	ELSE_11	FUNCTION_3	CALL_1
0x4f1	          0x4889c7	                            mov rdi, rax	       222	keyboard.c	ELSE_11	FUNCTION_3	CALL_1
0x4f4	      0xb800000000	                              mov eax, 0	       222	keyboard.c	ELSE_11	FUNCTION_3	CALL_1
0x4f9	      0xe800000000	                          call 0x400053e	       222	keyboard.c	ELSE_11	FUNCTION_3	CALL_1
0x4fe	              0x90	                                     nop	       223	keyboard.c	ELSE_11	FUNCTION_3
0x4ff	              0xc9	                                   leave	       223	keyboard.c	ELSE_11	FUNCTION_3
0x500	              0xc3	                                     ret	       223	keyboard.c	ELSE_11	FUNCTION_3
vterm_keyboard_end_paste	IF,1:FOR,0:functions,0:SWITCH,0:CALL,1:WHILE,0:ELSE,0:DO,0	19
0x501	              0x55	                                push rbp	       226	keyboard.c	FUNCTION_4
0x502	          0x4889e5	                            mov rbp, rsp	       226	keyboard.c	FUNCTION_4
0x505	        0x4883ec10	                           sub rsp, 0x10	       226	keyboard.c	FUNCTION_4
0x509	        0x48897df8	                mov qword [rbp - 8], rdi	       226	keyboard.c	FUNCTION_4
0x50d	        0x488b45f8	                mov rax, qword [rbp - 8]	       227	keyboard.c	FUNCTION_4	IF_1
0x511	    0x488b80180100	           mov rax, qword [rax + 0x118] 	       227	keyboard.c	FUNCTION_4	IF_1
0x518	     0xfb680950000	           movzx eax, byte [rax + 0x95] 	       227	keyboard.c	FUNCTION_4	IF_1
0x51f	          0x83e020	                           and eax, 0x20	       227	keyboard.c	FUNCTION_4	IF_1
0x522	            0x84c0	                             test al, al	       227	keyboard.c	FUNCTION_4	IF_1
0x524	            0x741b	                            je 0x4000581	       227	keyboard.c	FUNCTION_4	IF_1
0x526	        0x488b45f8	                mov rax, qword [rbp - 8]	       228	keyboard.c	FUNCTION_4	CALL_1
0x52a	      0xba00000000	                              mov edx, 0	       228	keyboard.c	FUNCTION_4	CALL_1
0x52f	      0xbe9b000000	                           mov esi, 0x9b	       228	keyboard.c	FUNCTION_4	CALL_1
0x534	          0x4889c7	                            mov rdi, rax	       228	keyboard.c	FUNCTION_4	CALL_1
0x537	      0xb800000000	                              mov eax, 0	       228	keyboard.c	FUNCTION_4	CALL_1
0x53c	      0xe800000000	                          call 0x4000581	       228	keyboard.c	FUNCTION_4	CALL_1
0x541	              0x90	                                     nop	       229	keyboard.c	FUNCTION_4
0x542	              0xc9	                                   leave	       229	keyboard.c	FUNCTION_4
0x543	              0xc3	                                     ret	       229	keyboard.c	FUNCTION_4
vterm_keyboard_unichar	IF,4:FOR,0:functions,0:SWITCH,1:CALL,4:WHILE,0:ELSE,0:DO,0	108
0x0	              0x55	                                push rbp	         8	keyboard.c	FUNCTION_1
0x1	          0x4889e5	                            mov rbp, rsp	         8	keyboard.c	FUNCTION_1
0x4	        0x4883ec30	                           sub rsp, 0x30	         8	keyboard.c	FUNCTION_1
0x8	        0x48897dd8	             mov qword [rbp - 0x28], rdi	         8	keyboard.c	FUNCTION_1
0xc	          0x8975d4	             mov dword [rbp - 0x2c], esi	         8	keyboard.c	FUNCTION_1
0xf	          0x8955d0	             mov dword [rbp - 0x30], edx	         8	keyboard.c	FUNCTION_1
0x12	    0x64488b042528	                mov rax, qword fs:[0x28]	         8	keyboard.c	FUNCTION_1
0x1b	        0x488945f8	                mov qword [rbp - 8], rax	         8	keyboard.c	FUNCTION_1
0x1f	            0x31c0	                            xor eax, eax	         8	keyboard.c	FUNCTION_1
0x21	        0x837dd420	           cmp dword [rbp - 0x2c], 0x20 	        14	keyboard.c	FUNCTION_1	IF_1
0x25	            0x7404	                            je 0x400006b	        14	keyboard.c	FUNCTION_1	IF_1
0x27	        0x8365d0fe	      and dword [rbp - 0x30], 0xfffffffe	        15	keyboard.c	FUNCTION_1	IF_1
0x2b	        0x837dd000	               cmp dword [rbp - 0x30], 0	        17	keyboard.c	FUNCTION_1	IF_2
0x2f	            0x7534	                           jne 0x40000a5	        17	keyboard.c	FUNCTION_1	IF_2
0x31	          0x8b45d4	             mov eax, dword [rbp - 0x2c]	        20	keyboard.c	FUNCTION_1	IF_2	CALL_1
0x34	        0x488d55f0	                   lea rdx, [rbp - 0x10]	        20	keyboard.c	FUNCTION_1	IF_2	CALL_1
0x38	          0x4889d6	                            mov rsi, rdx	        20	keyboard.c	FUNCTION_1	IF_2	CALL_1
0x3b	          0x4889c7	                            mov rdi, rax	        20	keyboard.c	FUNCTION_1	IF_2	CALL_1
0x3e	      0xe800000000	                          call 0x4000083	        20	keyboard.c	FUNCTION_1	IF_2	CALL_1
0x43	          0x8945ec	             mov dword [rbp - 0x14], eax	        20	keyboard.c	FUNCTION_1	IF_2	CALL_1
0x46	          0x8b45ec	             mov eax, dword [rbp - 0x14]	        21	keyboard.c	FUNCTION_1	IF_2	CALL_2
0x49	          0x4863d0	                         movsxd rdx, eax	        21	keyboard.c	FUNCTION_1	IF_2	CALL_2
0x4c	        0x488d4df0	                   lea rcx, [rbp - 0x10]	        21	keyboard.c	FUNCTION_1	IF_2	CALL_2
0x50	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        21	keyboard.c	FUNCTION_1	IF_2	CALL_2
0x54	          0x4889ce	                            mov rsi, rcx	        21	keyboard.c	FUNCTION_1	IF_2	CALL_2
0x57	          0x4889c7	                            mov rdi, rax	        21	keyboard.c	FUNCTION_1	IF_2	CALL_2
0x5a	      0xe800000000	                          call 0x400009f	        21	keyboard.c	FUNCTION_1	IF_2	CALL_2
0x5f	              0x90	                                     nop	        22	keyboard.c	FUNCTION_1	IF_2
0x60	      0xe9e5000000	                           jmp 0x400018a	        22	keyboard.c	FUNCTION_1	IF_2
0x65	          0x8b45d4	             mov eax, dword [rbp - 0x2c]	        25	keyboard.c	FUNCTION_1	SWITCH_1
0x68	          0x83f85f	                           cmp eax, 0x5f	        25	keyboard.c	FUNCTION_1	SWITCH_1
0x6b	            0x7711	                            ja 0x40000be	        25	keyboard.c	FUNCTION_1	SWITCH_1
0x6d	          0x83f85c	                           cmp eax, 0x5c	        25	keyboard.c	FUNCTION_1	SWITCH_1
0x70	            0x7324	                           jae 0x40000d6	        25	keyboard.c	FUNCTION_1	SWITCH_1
0x72	          0x83f820	                           cmp eax, 0x20	        25	keyboard.c	FUNCTION_1	SWITCH_1
0x75	            0x7428	                            je 0x40000df	        25	keyboard.c	FUNCTION_1	SWITCH_1
0x77	          0x83f85b	                           cmp eax, 0x5b	        25	keyboard.c	FUNCTION_1	SWITCH_1
0x7a	            0x7411	                            je 0x40000cd	        25	keyboard.c	FUNCTION_1	SWITCH_1
0x7c	            0xeb34	                           jmp 0x40000f2	        25	keyboard.c	FUNCTION_1	SWITCH_1
0x7e	          0x83f869	                           cmp eax, 0x69	        25	keyboard.c	FUNCTION_1	SWITCH_1
0x81	            0x722f	                            jb 0x40000f2	        25	keyboard.c	FUNCTION_1	SWITCH_1
0x83	          0x83f86a	                           cmp eax, 0x6a	        25	keyboard.c	FUNCTION_1	SWITCH_1
0x86	            0x7605	                           jbe 0x40000cd	        25	keyboard.c	FUNCTION_1	SWITCH_1
0x88	          0x83f86d	                           cmp eax, 0x6d	        25	keyboard.c	FUNCTION_1	SWITCH_1
0x8b	            0x7525	                           jne 0x40000f2	        25	keyboard.c	FUNCTION_1	SWITCH_1
0x8d	    0xc745e8010000	               mov dword [rbp - 0x18], 1	        28	keyboard.c	FUNCTION_1	SWITCH_1
0x94	            0xeb37	                           jmp 0x400010d	        29	keyboard.c	FUNCTION_1	SWITCH_1
0x96	    0xc745e8000000	               mov dword [rbp - 0x18], 0	        32	keyboard.c	FUNCTION_1	SWITCH_1
0x9d	            0xeb2e	                           jmp 0x400010d	        33	keyboard.c	FUNCTION_1	SWITCH_1
0x9f	          0x8b45d0	             mov eax, dword [rbp - 0x30]	        36	keyboard.c	FUNCTION_1	SWITCH_1
0xa2	          0x83e001	                              and eax, 1	        36	keyboard.c	FUNCTION_1	SWITCH_1
0xa5	            0x85c0	                           test eax, eax	        36	keyboard.c	FUNCTION_1	SWITCH_1
0xa7	           0xf95c0	                                setne al	        36	keyboard.c	FUNCTION_1	SWITCH_1
0xaa	           0xfb6c0	                           movzx eax, al	        36	keyboard.c	FUNCTION_1	SWITCH_1
0xad	          0x8945e8	             mov dword [rbp - 0x18], eax	        36	keyboard.c	FUNCTION_1	SWITCH_1
0xb0	            0xeb1b	                           jmp 0x400010d	        37	keyboard.c	FUNCTION_1	SWITCH_1
0xb2	        0x837dd460	           cmp dword [rbp - 0x2c], 0x60 	        40	keyboard.c	FUNCTION_1	SWITCH_1
0xb6	            0x7606	                           jbe 0x40000fe	        40	keyboard.c	FUNCTION_1	SWITCH_1
0xb8	        0x837dd47a	           cmp dword [rbp - 0x2c], 0x7a 	        40	keyboard.c	FUNCTION_1	SWITCH_1
0xbc	            0x7607	                           jbe 0x4000105	        40	keyboard.c	FUNCTION_1	SWITCH_1
0xbe	      0xb801000000	                              mov eax, 1	        40	keyboard.c	FUNCTION_1	SWITCH_1
0xc3	            0xeb05	                           jmp 0x400010a	        40	keyboard.c	FUNCTION_1	SWITCH_1
0xc5	      0xb800000000	                              mov eax, 0	        40	keyboard.c	FUNCTION_1	SWITCH_1
0xca	          0x8945e8	             mov dword [rbp - 0x18], eax	        40	keyboard.c	FUNCTION_1	SWITCH_1
0xcd	        0x837de800	               cmp dword [rbp - 0x18], 0	        44	keyboard.c	FUNCTION_1	IF_3
0xd1	            0x7435	                            je 0x4000148	        44	keyboard.c	FUNCTION_1	IF_3
0xd3	          0x8b45d0	             mov eax, dword [rbp - 0x30]	        44	keyboard.c	FUNCTION_1	IF_3
0xd6	          0x83e0fd	                     and eax, 0xfffffffd	        44	keyboard.c	FUNCTION_1	IF_3
0xd9	            0x85c0	                           test eax, eax	        44	keyboard.c	FUNCTION_1	IF_3
0xdb	            0x742b	                            je 0x4000148	        44	keyboard.c	FUNCTION_1	IF_3
0xdd	          0x8b45d0	             mov eax, dword [rbp - 0x30]	        45	keyboard.c	FUNCTION_1	IF_3	CALL_3
0xe0	          0x8d4801	                      lea ecx, [rax + 1]	        45	keyboard.c	FUNCTION_1	IF_3	CALL_3
0xe3	          0x8b55d4	             mov edx, dword [rbp - 0x2c]	        45	keyboard.c	FUNCTION_1	IF_3	CALL_3
0xe6	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        45	keyboard.c	FUNCTION_1	IF_3	CALL_3
0xea	          0x4189c8	                            mov r8d, ecx	        45	keyboard.c	FUNCTION_1	IF_3	CALL_3
0xed	            0x89d1	                            mov ecx, edx	        45	keyboard.c	FUNCTION_1	IF_3	CALL_3
0xef	      0xba00000000	                              mov edx, 0	        45	keyboard.c	FUNCTION_1	IF_3	CALL_3
0xf4	      0xbe9b000000	                           mov esi, 0x9b	        45	keyboard.c	FUNCTION_1	IF_3	CALL_3
0xf9	          0x4889c7	                            mov rdi, rax	        45	keyboard.c	FUNCTION_1	IF_3	CALL_3
0xfc	      0xb800000000	                              mov eax, 0	        45	keyboard.c	FUNCTION_1	IF_3	CALL_3
0x101	      0xe800000000	                          call 0x4000146	        45	keyboard.c	FUNCTION_1	IF_3	CALL_3
0x106	            0xeb42	                           jmp 0x400018a	        46	keyboard.c	FUNCTION_1	IF_3
0x108	          0x8b45d0	             mov eax, dword [rbp - 0x30]	        49	keyboard.c	FUNCTION_1	IF_4
0x10b	          0x83e004	                              and eax, 4	        49	keyboard.c	FUNCTION_1	IF_4
0x10e	            0x85c0	                           test eax, eax	        49	keyboard.c	FUNCTION_1	IF_4
0x110	            0x7404	                            je 0x4000156	        49	keyboard.c	FUNCTION_1	IF_4
0x112	        0x8365d41f	            and dword [rbp - 0x2c], 0x1f	        50	keyboard.c	FUNCTION_1	IF_4
0x116	          0x8b45d0	             mov eax, dword [rbp - 0x30]	        52	keyboard.c	FUNCTION_1	CALL_4
0x119	          0x83e002	                              and eax, 2	        52	keyboard.c	FUNCTION_1	CALL_4
0x11c	            0x85c0	                           test eax, eax	        52	keyboard.c	FUNCTION_1	CALL_4
0x11e	            0x7407	                            je 0x4000167	        52	keyboard.c	FUNCTION_1	CALL_4
0x120	      0xbe00000000	                              mov esi, 0	        52	keyboard.c	FUNCTION_1	CALL_4
0x125	            0xeb05	                           jmp 0x400016c	        52	keyboard.c	FUNCTION_1	CALL_4
0x127	      0xbe00000000	                              mov esi, 0	        52	keyboard.c	FUNCTION_1	CALL_4
0x12c	          0x8b55d4	             mov edx, dword [rbp - 0x2c]	        52	keyboard.c	FUNCTION_1	CALL_4
0x12f	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        52	keyboard.c	FUNCTION_1	CALL_4
0x133	            0x89d1	                            mov ecx, edx	        52	keyboard.c	FUNCTION_1	CALL_4
0x135	          0x4889f2	                            mov rdx, rsi	        52	keyboard.c	FUNCTION_1	CALL_4
0x138	      0xbe00000000	                              mov esi, 0	        52	keyboard.c	FUNCTION_1	CALL_4
0x13d	          0x4889c7	                            mov rdi, rax	        52	keyboard.c	FUNCTION_1	CALL_4
0x140	      0xb800000000	                              mov eax, 0	        52	keyboard.c	FUNCTION_1	CALL_4
0x145	      0xe800000000	                          call 0x400018a	        52	keyboard.c	FUNCTION_1	CALL_4
0x14a	        0x488b45f8	                mov rax, qword [rbp - 8]	        53	keyboard.c	FUNCTION_1
0x14e	    0x644833042528	                xor rax, qword fs:[0x28]	        53	keyboard.c	FUNCTION_1
0x157	            0x7405	                            je 0x400019e	        53	keyboard.c	FUNCTION_1
0x159	      0xe800000000	                          call 0x400019e	        53	keyboard.c	FUNCTION_1
0x15e	              0xc9	                                   leave	        53	keyboard.c	FUNCTION_1
0x15f	              0xc3	                                     ret	        53	keyboard.c	FUNCTION_1
vterm_keyboard_key	IF,16:FOR,0:functions,0:SWITCH,1:CALL,10:WHILE,0:ELSE,11:DO,0	236
0x160	              0x55	                                push rbp	       131	keyboard.c	FUNCTION_2
0x161	          0x4889e5	                            mov rbp, rsp	       131	keyboard.c	FUNCTION_2
0x164	        0x4883ec20	                           sub rsp, 0x20	       131	keyboard.c	FUNCTION_2
0x168	        0x48897de8	             mov qword [rbp - 0x18], rdi	       131	keyboard.c	FUNCTION_2
0x16c	          0x8975e4	             mov dword [rbp - 0x1c], esi	       131	keyboard.c	FUNCTION_2
0x16f	          0x8955e0	             mov dword [rbp - 0x20], edx	       131	keyboard.c	FUNCTION_2
0x172	        0x837de400	               cmp dword [rbp - 0x1c], 0	       134	keyboard.c	FUNCTION_2	IF_1
0x176	     0xf8433030000	                            je 0x40004ef	       134	keyboard.c	FUNCTION_2	IF_1
0x17c	    0x817de4ff0000	           cmp dword [rbp - 0x1c], 0xff 	       137	keyboard.c	FUNCTION_2	IF_2
0x183	            0x7732	                            ja 0x40001f7	       137	keyboard.c	FUNCTION_2	IF_2
0x185	        0x837de40e	            cmp dword [rbp - 0x1c], 0xe 	       138	keyboard.c	FUNCTION_2	IF_2	IF_3
0x189	     0xf8723030000	                            ja 0x40004f2	       138	keyboard.c	FUNCTION_2	IF_2	IF_3
0x18f	          0x8b55e4	             mov edx, dword [rbp - 0x1c]	       140	keyboard.c	FUNCTION_2	IF_2
0x192	          0x4889d0	                            mov rax, rdx	       140	keyboard.c	FUNCTION_2	IF_2
0x195	          0x4801c0	                            add rax, rax	       140	keyboard.c	FUNCTION_2	IF_2
0x198	          0x4801d0	                            add rax, rdx	       140	keyboard.c	FUNCTION_2	IF_2
0x19b	        0x48c1e002	                              shl rax, 2	       140	keyboard.c	FUNCTION_2	IF_2
0x19f	    0x480500000000	                              add rax, 0	       140	keyboard.c	FUNCTION_2	IF_2
0x1a5	          0x488b10	                    mov rdx, qword [rax]	       140	keyboard.c	FUNCTION_2	IF_2
0x1a8	        0x488955f0	             mov qword [rbp - 0x10], rdx	       140	keyboard.c	FUNCTION_2	IF_2
0x1ac	          0x8b4008	                mov eax, dword [rax + 8]	       140	keyboard.c	FUNCTION_2	IF_2
0x1af	          0x8945f8	                mov dword [rbp - 8], eax	       140	keyboard.c	FUNCTION_2	IF_2
0x1b2	      0xe993000000	                           jmp 0x400028a	       140	keyboard.c	FUNCTION_2	IF_2
0x1b7	    0x817de4ff0000	           cmp dword [rbp - 0x1c], 0xff 	       142	keyboard.c	FUNCTION_2	ELSE_1	IF_4
0x1be	            0x7646	                           jbe 0x4000246	       142	keyboard.c	FUNCTION_2	ELSE_1	IF_4
0x1c0	    0x817de4ff0100	          cmp dword [rbp - 0x1c], 0x1ff 	       142	keyboard.c	FUNCTION_2	ELSE_1	IF_4
0x1c7	            0x773d	                            ja 0x4000246	       142	keyboard.c	FUNCTION_2	ELSE_1	IF_4
0x1c9	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	       143	keyboard.c	FUNCTION_2	ELSE_1	IF_4	IF_5
0x1cc	      0x2d00010000	                          sub eax, 0x100	       143	keyboard.c	FUNCTION_2	ELSE_1	IF_4	IF_5
0x1d1	          0x83f80c	                            cmp eax, 0xc	       143	keyboard.c	FUNCTION_2	ELSE_1	IF_4	IF_5
0x1d4	     0xf87db020000	                            ja 0x40004f5	       143	keyboard.c	FUNCTION_2	ELSE_1	IF_4	IF_5
0x1da	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	       145	keyboard.c	FUNCTION_2	ELSE_1	IF_4
0x1dd	      0x2d00010000	                          sub eax, 0x100	       145	keyboard.c	FUNCTION_2	ELSE_1	IF_4
0x1e2	            0x89c2	                            mov edx, eax	       145	keyboard.c	FUNCTION_2	ELSE_1	IF_4
0x1e4	          0x4889d0	                            mov rax, rdx	       145	keyboard.c	FUNCTION_2	ELSE_1	IF_4
0x1e7	          0x4801c0	                            add rax, rax	       145	keyboard.c	FUNCTION_2	ELSE_1	IF_4
0x1ea	          0x4801d0	                            add rax, rdx	       145	keyboard.c	FUNCTION_2	ELSE_1	IF_4
0x1ed	        0x48c1e002	                              shl rax, 2	       145	keyboard.c	FUNCTION_2	ELSE_1	IF_4
0x1f1	    0x480500000000	                              add rax, 0	       145	keyboard.c	FUNCTION_2	ELSE_1	IF_4
0x1f7	          0x488b10	                    mov rdx, qword [rax]	       145	keyboard.c	FUNCTION_2	ELSE_1	IF_4
0x1fa	        0x488955f0	             mov qword [rbp - 0x10], rdx	       145	keyboard.c	FUNCTION_2	ELSE_1	IF_4
0x1fe	          0x8b4008	                mov eax, dword [rax + 8]	       145	keyboard.c	FUNCTION_2	ELSE_1	IF_4
0x201	          0x8945f8	                mov dword [rbp - 8], eax	       145	keyboard.c	FUNCTION_2	ELSE_1	IF_4
0x204	            0xeb44	                           jmp 0x400028a	       145	keyboard.c	FUNCTION_2	ELSE_1	IF_4
0x206	    0x817de4ff0100	          cmp dword [rbp - 0x1c], 0x1ff 	       147	keyboard.c	FUNCTION_2	ELSE_2	IF_6
0x20d	            0x763b	                           jbe 0x400028a	       147	keyboard.c	FUNCTION_2	ELSE_2	IF_6
0x20f	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	       148	keyboard.c	FUNCTION_2	ELSE_2	IF_6	IF_7
0x212	      0x2d00020000	                          sub eax, 0x200	       148	keyboard.c	FUNCTION_2	ELSE_2	IF_6	IF_7
0x217	          0x83f811	                           cmp eax, 0x11	       148	keyboard.c	FUNCTION_2	ELSE_2	IF_6	IF_7
0x21a	     0xf8798020000	                            ja 0x40004f8	       148	keyboard.c	FUNCTION_2	ELSE_2	IF_6	IF_7
0x220	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	       150	keyboard.c	FUNCTION_2	ELSE_2	IF_6
0x223	      0x2d00020000	                          sub eax, 0x200	       150	keyboard.c	FUNCTION_2	ELSE_2	IF_6
0x228	            0x89c2	                            mov edx, eax	       150	keyboard.c	FUNCTION_2	ELSE_2	IF_6
0x22a	          0x4889d0	                            mov rax, rdx	       150	keyboard.c	FUNCTION_2	ELSE_2	IF_6
0x22d	          0x4801c0	                            add rax, rax	       150	keyboard.c	FUNCTION_2	ELSE_2	IF_6
0x230	          0x4801d0	                            add rax, rdx	       150	keyboard.c	FUNCTION_2	ELSE_2	IF_6
0x233	        0x48c1e002	                              shl rax, 2	       150	keyboard.c	FUNCTION_2	ELSE_2	IF_6
0x237	    0x480500000000	                              add rax, 0	       150	keyboard.c	FUNCTION_2	ELSE_2	IF_6
0x23d	          0x488b10	                    mov rdx, qword [rax]	       150	keyboard.c	FUNCTION_2	ELSE_2	IF_6
0x240	        0x488955f0	             mov qword [rbp - 0x10], rdx	       150	keyboard.c	FUNCTION_2	ELSE_2	IF_6
0x244	          0x8b4008	                mov eax, dword [rax + 8]	       150	keyboard.c	FUNCTION_2	ELSE_2	IF_6
0x247	          0x8945f8	                mov dword [rbp - 8], eax	       150	keyboard.c	FUNCTION_2	ELSE_2	IF_6
0x24a	          0x8b45f0	             mov eax, dword [rbp - 0x10]	       153	keyboard.c	FUNCTION_2	SWITCH_1
0x24d	          0x83f808	                              cmp eax, 8	       153	keyboard.c	FUNCTION_2	SWITCH_1
0x250	     0xf8766020000	                            ja 0x40004fc	       153	keyboard.c	FUNCTION_2	SWITCH_1
0x256	            0x89c0	                            mov eax, eax	       153	keyboard.c	FUNCTION_2	SWITCH_1
0x258	    0x488b04c50000	                  mov rax, qword [rax*8]	       153	keyboard.c	FUNCTION_2	SWITCH_1
0x260	            0xffe0	                                 jmp rax	       153	keyboard.c	FUNCTION_2	SWITCH_1
0x262	        0x837de001	               cmp dword [rbp - 0x20], 1	       159	keyboard.c	FUNCTION_2	SWITCH_1	IF_8
0x266	            0x7520	                           jne 0x40002c8	       159	keyboard.c	FUNCTION_2	SWITCH_1	IF_8
0x268	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       160	keyboard.c	FUNCTION_2	SWITCH_1	CALL_1
0x26c	      0xba00000000	                              mov edx, 0	       160	keyboard.c	FUNCTION_2	SWITCH_1	CALL_1
0x271	      0xbe9b000000	                           mov esi, 0x9b	       160	keyboard.c	FUNCTION_2	SWITCH_1	CALL_1
0x276	          0x4889c7	                            mov rdi, rax	       160	keyboard.c	FUNCTION_2	SWITCH_1	CALL_1
0x279	      0xb800000000	                              mov eax, 0	       160	keyboard.c	FUNCTION_2	SWITCH_1	CALL_1
0x27e	      0xe800000000	                          call 0x40002c3	       160	keyboard.c	FUNCTION_2	SWITCH_1	CALL_1
0x283	      0xe934020000	                           jmp 0x40004fc	       165	keyboard.c	FUNCTION_2	SWITCH_1
0x288	          0x8b45e0	             mov eax, dword [rbp - 0x20]	       161	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_3	IF_9
0x28b	          0x83e001	                              and eax, 1	       161	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_3	IF_9
0x28e	            0x85c0	                           test eax, eax	       161	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_3	IF_9
0x290	            0x745c	                            je 0x400032e	       161	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_3	IF_9
0x292	          0x8b45e0	             mov eax, dword [rbp - 0x20]	       162	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_3	IF_9
0x295	          0x8d5001	                      lea edx, [rax + 1]	       162	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_3	IF_9
0x298	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       162	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_3	IF_9
0x29c	            0x89d1	                            mov ecx, edx	       162	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_3	IF_9
0x29e	      0xba00000000	                              mov edx, 0	       162	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_3	IF_9
0x2a3	      0xbe9b000000	                           mov esi, 0x9b	       162	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_3	IF_9
0x2a8	          0x4889c7	                            mov rdi, rax	       162	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_3	IF_9
0x2ab	      0xb800000000	                              mov eax, 0	       162	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_3	IF_9
0x2b0	      0xe800000000	                          call 0x40002f5	       162	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_3	IF_9
0x2b5	      0xe902020000	                           jmp 0x40004fc	       165	keyboard.c	FUNCTION_2	SWITCH_1
0x2ba	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       169	keyboard.c	FUNCTION_2	SWITCH_1	IF_10
0x2be	    0x488b80180100	           mov rax, qword [rax + 0x118] 	       169	keyboard.c	FUNCTION_2	SWITCH_1	IF_10
0x2c5	     0xfb680940000	           movzx eax, byte [rax + 0x94] 	       169	keyboard.c	FUNCTION_2	SWITCH_1	IF_10
0x2cc	          0x83e010	                           and eax, 0x10	       169	keyboard.c	FUNCTION_2	SWITCH_1	IF_10
0x2cf	            0x84c0	                             test al, al	       169	keyboard.c	FUNCTION_2	SWITCH_1	IF_10
0x2d1	            0x741e	                            je 0x4000331	       169	keyboard.c	FUNCTION_2	SWITCH_1	IF_10
0x2d3	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       170	keyboard.c	FUNCTION_2	SWITCH_1	CALL_3
0x2d7	      0xbe00000000	                              mov esi, 0	       170	keyboard.c	FUNCTION_2	SWITCH_1	CALL_3
0x2dc	          0x4889c7	                            mov rdi, rax	       170	keyboard.c	FUNCTION_2	SWITCH_1	CALL_3
0x2df	      0xb800000000	                              mov eax, 0	       170	keyboard.c	FUNCTION_2	SWITCH_1	CALL_3
0x2e4	      0xe800000000	                          call 0x4000329	       170	keyboard.c	FUNCTION_2	SWITCH_1	CALL_3
0x2e9	      0xe9ce010000	                           jmp 0x40004fc	       173	keyboard.c	FUNCTION_2	SWITCH_1
0x2ee	              0x90	                                     nop	       164	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_4
0x2ef	            0xeb04	                           jmp 0x4000335	       164	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_4
0x2f1	              0x90	                                     nop	       172	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_5
0x2f2	            0xeb01	                           jmp 0x4000335	       172	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_5
0x2f4	              0x90	                                     nop	       215	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_11
0x2f5	          0x8b45e0	             mov eax, dword [rbp - 0x20]	       176	keyboard.c	FUNCTION_2	SWITCH_1	IF_11
0x2f8	          0x83e005	                              and eax, 5	       176	keyboard.c	FUNCTION_2	SWITCH_1	IF_11
0x2fb	            0x85c0	                           test eax, eax	       176	keyboard.c	FUNCTION_2	SWITCH_1	IF_11
0x2fd	            0x7432	                            je 0x4000371	       176	keyboard.c	FUNCTION_2	SWITCH_1	IF_11
0x2ff	          0x8b45e0	             mov eax, dword [rbp - 0x20]	       177	keyboard.c	FUNCTION_2	SWITCH_1	CALL_4
0x302	          0x8d4801	                      lea ecx, [rax + 1]	       177	keyboard.c	FUNCTION_2	SWITCH_1	CALL_4
0x305	         0xfb645f4	             movzx eax, byte [rbp - 0xc]	       177	keyboard.c	FUNCTION_2	SWITCH_1	CALL_4
0x309	           0xfbed0	                           movsx edx, al	       177	keyboard.c	FUNCTION_2	SWITCH_1	CALL_4
0x30c	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       177	keyboard.c	FUNCTION_2	SWITCH_1	CALL_4
0x310	          0x4189c8	                            mov r8d, ecx	       177	keyboard.c	FUNCTION_2	SWITCH_1	CALL_4
0x313	            0x89d1	                            mov ecx, edx	       177	keyboard.c	FUNCTION_2	SWITCH_1	CALL_4
0x315	      0xba00000000	                              mov edx, 0	       177	keyboard.c	FUNCTION_2	SWITCH_1	CALL_4
0x31a	      0xbe9b000000	                           mov esi, 0x9b	       177	keyboard.c	FUNCTION_2	SWITCH_1	CALL_4
0x31f	          0x4889c7	                            mov rdi, rax	       177	keyboard.c	FUNCTION_2	SWITCH_1	CALL_4
0x322	      0xb800000000	                              mov eax, 0	       177	keyboard.c	FUNCTION_2	SWITCH_1	CALL_4
0x327	      0xe800000000	                          call 0x400036c	       177	keyboard.c	FUNCTION_2	SWITCH_1	CALL_4
0x32c	      0xe98b010000	                           jmp 0x40004fc	       180	keyboard.c	FUNCTION_2	SWITCH_1
0x331	         0xfb645f4	             movzx eax, byte [rbp - 0xc]	       179	keyboard.c	FUNCTION_2	SWITCH_1	CALL_5
0x335	           0xfbed0	                           movsx edx, al	       179	keyboard.c	FUNCTION_2	SWITCH_1	CALL_5
0x338	          0x8b45e0	             mov eax, dword [rbp - 0x20]	       179	keyboard.c	FUNCTION_2	SWITCH_1	CALL_5
0x33b	          0x83e002	                              and eax, 2	       179	keyboard.c	FUNCTION_2	SWITCH_1	CALL_5
0x33e	            0x85c0	                           test eax, eax	       179	keyboard.c	FUNCTION_2	SWITCH_1	CALL_5
0x340	            0x7407	                            je 0x4000389	       179	keyboard.c	FUNCTION_2	SWITCH_1	CALL_5
0x342	      0xb900000000	                              mov ecx, 0	       179	keyboard.c	FUNCTION_2	SWITCH_1	CALL_5
0x347	            0xeb05	                           jmp 0x400038e	       179	keyboard.c	FUNCTION_2	SWITCH_1	CALL_5
0x349	      0xb900000000	                              mov ecx, 0	       179	keyboard.c	FUNCTION_2	SWITCH_1	CALL_5
0x34e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       179	keyboard.c	FUNCTION_2	SWITCH_1	CALL_5
0x352	          0x4889ce	                            mov rsi, rcx	       179	keyboard.c	FUNCTION_2	SWITCH_1	CALL_5
0x355	          0x4889c7	                            mov rdi, rax	       179	keyboard.c	FUNCTION_2	SWITCH_1	CALL_5
0x358	      0xb800000000	                              mov eax, 0	       179	keyboard.c	FUNCTION_2	SWITCH_1	CALL_5
0x35d	      0xe800000000	                          call 0x40003a2	       179	keyboard.c	FUNCTION_2	SWITCH_1	CALL_5
0x362	      0xe955010000	                           jmp 0x40004fc	       180	keyboard.c	FUNCTION_2	SWITCH_1
0x367	        0x837de000	               cmp dword [rbp - 0x20], 0	       183	keyboard.c	FUNCTION_2	SWITCH_1	IF_12
0x36b	            0x7529	                           jne 0x40003d6	       183	keyboard.c	FUNCTION_2	SWITCH_1	IF_12
0x36d	         0xfb645f4	             movzx eax, byte [rbp - 0xc]	       184	keyboard.c	FUNCTION_2	SWITCH_1	CALL_6
0x371	           0xfbed0	                           movsx edx, al	       184	keyboard.c	FUNCTION_2	SWITCH_1	CALL_6
0x374	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       184	keyboard.c	FUNCTION_2	SWITCH_1	CALL_6
0x378	            0x89d1	                            mov ecx, edx	       184	keyboard.c	FUNCTION_2	SWITCH_1	CALL_6
0x37a	      0xba00000000	                              mov edx, 0	       184	keyboard.c	FUNCTION_2	SWITCH_1	CALL_6
0x37f	      0xbe8f000000	                           mov esi, 0x8f	       184	keyboard.c	FUNCTION_2	SWITCH_1	CALL_6
0x384	          0x4889c7	                            mov rdi, rax	       184	keyboard.c	FUNCTION_2	SWITCH_1	CALL_6
0x387	      0xb800000000	                              mov eax, 0	       184	keyboard.c	FUNCTION_2	SWITCH_1	CALL_6
0x38c	      0xe800000000	                          call 0x40003d1	       184	keyboard.c	FUNCTION_2	SWITCH_1	CALL_6
0x391	      0xe926010000	                           jmp 0x40004fc	       187	keyboard.c	FUNCTION_2	SWITCH_1
0x396	              0x90	                                     nop	       186	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_7
0x397	            0xeb01	                           jmp 0x40003da	       186	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_7
0x399	              0x90	                                     nop	       207	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_10
0x39a	        0x837de000	               cmp dword [rbp - 0x20], 0	       190	keyboard.c	FUNCTION_2	SWITCH_1	IF_13
0x39e	            0x7529	                           jne 0x4000409	       190	keyboard.c	FUNCTION_2	SWITCH_1	IF_13
0x3a0	         0xfb645f4	             movzx eax, byte [rbp - 0xc]	       191	keyboard.c	FUNCTION_2	SWITCH_1	CALL_7
0x3a4	           0xfbed0	                           movsx edx, al	       191	keyboard.c	FUNCTION_2	SWITCH_1	CALL_7
0x3a7	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       191	keyboard.c	FUNCTION_2	SWITCH_1	CALL_7
0x3ab	            0x89d1	                            mov ecx, edx	       191	keyboard.c	FUNCTION_2	SWITCH_1	CALL_7
0x3ad	      0xba00000000	                              mov edx, 0	       191	keyboard.c	FUNCTION_2	SWITCH_1	CALL_7
0x3b2	      0xbe9b000000	                           mov esi, 0x9b	       191	keyboard.c	FUNCTION_2	SWITCH_1	CALL_7
0x3b7	          0x4889c7	                            mov rdi, rax	       191	keyboard.c	FUNCTION_2	SWITCH_1	CALL_7
0x3ba	      0xb800000000	                              mov eax, 0	       191	keyboard.c	FUNCTION_2	SWITCH_1	CALL_7
0x3bf	      0xe800000000	                          call 0x4000404	       191	keyboard.c	FUNCTION_2	SWITCH_1	CALL_7
0x3c4	      0xe9f3000000	                           jmp 0x40004fc	       194	keyboard.c	FUNCTION_2	SWITCH_1
0x3c9	         0xfb645f4	             movzx eax, byte [rbp - 0xc]	       193	keyboard.c	FUNCTION_2	SWITCH_1	CALL_8
0x3cd	           0xfbec8	                           movsx ecx, al	       193	keyboard.c	FUNCTION_2	SWITCH_1	CALL_8
0x3d0	          0x8b45e0	             mov eax, dword [rbp - 0x20]	       193	keyboard.c	FUNCTION_2	SWITCH_1	CALL_8
0x3d3	          0x8d5001	                      lea edx, [rax + 1]	       193	keyboard.c	FUNCTION_2	SWITCH_1	CALL_8
0x3d6	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       193	keyboard.c	FUNCTION_2	SWITCH_1	CALL_8
0x3da	          0x4189c8	                            mov r8d, ecx	       193	keyboard.c	FUNCTION_2	SWITCH_1	CALL_8
0x3dd	            0x89d1	                            mov ecx, edx	       193	keyboard.c	FUNCTION_2	SWITCH_1	CALL_8
0x3df	      0xba00000000	                              mov edx, 0	       193	keyboard.c	FUNCTION_2	SWITCH_1	CALL_8
0x3e4	      0xbe9b000000	                           mov esi, 0x9b	       193	keyboard.c	FUNCTION_2	SWITCH_1	CALL_8
0x3e9	          0x4889c7	                            mov rdi, rax	       193	keyboard.c	FUNCTION_2	SWITCH_1	CALL_8
0x3ec	      0xb800000000	                              mov eax, 0	       193	keyboard.c	FUNCTION_2	SWITCH_1	CALL_8
0x3f1	      0xe800000000	                          call 0x4000436	       193	keyboard.c	FUNCTION_2	SWITCH_1	CALL_8
0x3f6	      0xe9c1000000	                           jmp 0x40004fc	       194	keyboard.c	FUNCTION_2	SWITCH_1
0x3fb	        0x837de000	               cmp dword [rbp - 0x20], 0	       197	keyboard.c	FUNCTION_2	SWITCH_1	IF_14
0x3ff	            0x752f	                           jne 0x4000470	       197	keyboard.c	FUNCTION_2	SWITCH_1	IF_14
0x401	         0xfb645f4	             movzx eax, byte [rbp - 0xc]	       198	keyboard.c	FUNCTION_2	SWITCH_1	CALL_9
0x405	           0xfbec8	                           movsx ecx, al	       198	keyboard.c	FUNCTION_2	SWITCH_1	CALL_9
0x408	          0x8b55f8	                mov edx, dword [rbp - 8]	       198	keyboard.c	FUNCTION_2	SWITCH_1	CALL_9
0x40b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       198	keyboard.c	FUNCTION_2	SWITCH_1	CALL_9
0x40f	          0x4189c8	                            mov r8d, ecx	       198	keyboard.c	FUNCTION_2	SWITCH_1	CALL_9
0x412	            0x89d1	                            mov ecx, edx	       198	keyboard.c	FUNCTION_2	SWITCH_1	CALL_9
0x414	      0xba00000000	                              mov edx, 0	       198	keyboard.c	FUNCTION_2	SWITCH_1	CALL_9
0x419	      0xbe9b000000	                           mov esi, 0x9b	       198	keyboard.c	FUNCTION_2	SWITCH_1	CALL_9
0x41e	          0x4889c7	                            mov rdi, rax	       198	keyboard.c	FUNCTION_2	SWITCH_1	CALL_9
0x421	      0xb800000000	                              mov eax, 0	       198	keyboard.c	FUNCTION_2	SWITCH_1	CALL_9
0x426	      0xe800000000	                          call 0x400046b	       198	keyboard.c	FUNCTION_2	SWITCH_1	CALL_9
0x42b	      0xe98c000000	                           jmp 0x40004fc	       201	keyboard.c	FUNCTION_2	SWITCH_1
0x430	         0xfb645f4	             movzx eax, byte [rbp - 0xc]	       200	keyboard.c	FUNCTION_2	SWITCH_1	CALL_10
0x434	           0xfbec8	                           movsx ecx, al	       200	keyboard.c	FUNCTION_2	SWITCH_1	CALL_10
0x437	          0x8b45e0	             mov eax, dword [rbp - 0x20]	       200	keyboard.c	FUNCTION_2	SWITCH_1	CALL_10
0x43a	          0x8d7001	                      lea esi, [rax + 1]	       200	keyboard.c	FUNCTION_2	SWITCH_1	CALL_10
0x43d	          0x8b55f8	                mov edx, dword [rbp - 8]	       200	keyboard.c	FUNCTION_2	SWITCH_1	CALL_10
0x440	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       200	keyboard.c	FUNCTION_2	SWITCH_1	CALL_10
0x444	          0x4189c9	                            mov r9d, ecx	       200	keyboard.c	FUNCTION_2	SWITCH_1	CALL_10
0x447	          0x4189f0	                            mov r8d, esi	       200	keyboard.c	FUNCTION_2	SWITCH_1	CALL_10
0x44a	            0x89d1	                            mov ecx, edx	       200	keyboard.c	FUNCTION_2	SWITCH_1	CALL_10
0x44c	      0xba00000000	                              mov edx, 0	       200	keyboard.c	FUNCTION_2	SWITCH_1	CALL_10
0x451	      0xbe9b000000	                           mov esi, 0x9b	       200	keyboard.c	FUNCTION_2	SWITCH_1	CALL_10
0x456	          0x4889c7	                            mov rdi, rax	       200	keyboard.c	FUNCTION_2	SWITCH_1	CALL_10
0x459	      0xb800000000	                              mov eax, 0	       200	keyboard.c	FUNCTION_2	SWITCH_1	CALL_10
0x45e	      0xe800000000	                          call 0x40004a3	       200	keyboard.c	FUNCTION_2	SWITCH_1	CALL_10
0x463	            0xeb57	                           jmp 0x40004fc	       201	keyboard.c	FUNCTION_2	SWITCH_1
0x465	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       204	keyboard.c	FUNCTION_2	SWITCH_1	IF_15
0x469	    0x488b80180100	           mov rax, qword [rax + 0x118] 	       204	keyboard.c	FUNCTION_2	SWITCH_1	IF_15
0x470	     0xfb680940000	           movzx eax, byte [rax + 0x94] 	       204	keyboard.c	FUNCTION_2	SWITCH_1	IF_15
0x477	          0x83e002	                              and eax, 2	       204	keyboard.c	FUNCTION_2	SWITCH_1	IF_15
0x47a	            0x84c0	                             test al, al	       204	keyboard.c	FUNCTION_2	SWITCH_1	IF_15
0x47c	     0xf8417ffffff	                            je 0x40003d9	       204	keyboard.c	FUNCTION_2	SWITCH_1	IF_15
0x482	      0xe9e0feffff	                           jmp 0x40003a7	       205	keyboard.c	FUNCTION_2	SWITCH_1	IF_15
0x487	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       210	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_10	IF_16
0x48b	    0x488b80180100	           mov rax, qword [rax + 0x118] 	       210	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_10	IF_16
0x492	     0xfb680940000	           movzx eax, byte [rax + 0x94] 	       210	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_10	IF_16
0x499	          0x83e001	                              and eax, 1	       210	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_10	IF_16
0x49c	            0x84c0	                             test al, al	       210	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_10	IF_16
0x49e	     0xf8450feffff	                            je 0x4000334	       210	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_10	IF_16
0x4a4	          0x8b45f8	                mov eax, dword [rbp - 8]	       211	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_10	IF_16
0x4a7	          0x8845f4	                mov byte [rbp - 0xc], al	       211	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_10	IF_16
0x4aa	      0xe9b8feffff	                           jmp 0x40003a7	       212	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_10	IF_16
0x4af	              0x90	                                     nop	       135	keyboard.c	FUNCTION_2	IF_1
0x4b0	            0xeb0a	                           jmp 0x40004fc	       135	keyboard.c	FUNCTION_2	IF_1
0x4b2	              0x90	                                     nop	       139	keyboard.c	FUNCTION_2	IF_2	IF_3
0x4b3	            0xeb07	                           jmp 0x40004fc	       139	keyboard.c	FUNCTION_2	IF_2	IF_3
0x4b5	              0x90	                                     nop	       144	keyboard.c	FUNCTION_2	ELSE_1	IF_4	IF_5
0x4b6	            0xeb04	                           jmp 0x40004fc	       144	keyboard.c	FUNCTION_2	ELSE_1	IF_4	IF_5
0x4b8	              0x90	                                     nop	       149	keyboard.c	FUNCTION_2	ELSE_2	IF_6	IF_7
0x4b9	            0xeb01	                           jmp 0x40004fc	       149	keyboard.c	FUNCTION_2	ELSE_2	IF_6	IF_7
0x4bb	              0x90	                                     nop	       155	keyboard.c	FUNCTION_2	SWITCH_1
0x4bc	              0xc9	                                   leave	       217	keyboard.c	FUNCTION_2	ELSE_11
0x4bd	              0xc3	                                     ret	       217	keyboard.c	FUNCTION_2	ELSE_11
