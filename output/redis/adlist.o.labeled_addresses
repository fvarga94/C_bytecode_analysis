listJoin	IF,3:DO,0:FOR,0:WHILE,0:CALL,0:functions,0:ELSE,1:SWITCH,0	21
0x5a0	          0x488b06	                    mov rax, qword [rsi]	       348	adlist.c	FUNCTION_17	IF_1
0x5a3	        0x488b5708	                mov rdx, qword [rdi + 8]	       349	adlist.c	FUNCTION_17	IF_1
0x5a7	          0x4885c0	                           test rax, rax	       348	adlist.c	FUNCTION_17	IF_1
0x5aa	            0x7403	                            je 0x40005ef	       348	adlist.c	FUNCTION_17	IF_1
0x5ac	          0x488910	                    mov qword [rax], rdx	       349	adlist.c	FUNCTION_17	IF_1
0x5af	          0x4885d2	                           test rdx, rdx	       351	adlist.c	FUNCTION_17	IF_2
0x5b2	            0x7434	                            je 0x4000628	       351	adlist.c	FUNCTION_17	IF_2
0x5b4	        0x48894208	                mov qword [rdx + 8], rax	       352	adlist.c	FUNCTION_17	IF_2
0x5b8	        0x488b4608	                mov rax, qword [rsi + 8]	       356	adlist.c	FUNCTION_17	IF_3
0x5bc	          0x4885c0	                           test rax, rax	       356	adlist.c	FUNCTION_17	IF_3
0x5bf	            0x7404	                            je 0x4000605	       356	adlist.c	FUNCTION_17	IF_3
0x5c1	        0x48894708	                mov qword [rdi + 8], rax	       356	adlist.c	FUNCTION_17	IF_3
0x5c5	        0x488b4628	            mov rax, qword [rsi + 0x28] 	       357	adlist.c	FUNCTION_17
0x5c9	        0x48014728	            add qword [rdi + 0x28], rax 	       357	adlist.c	FUNCTION_17
0x5cd	    0x48c746080000	                  mov qword [rsi + 8], 0	       360	adlist.c	FUNCTION_17
0x5d5	    0x48c706000000	                      mov qword [rsi], 0	       360	adlist.c	FUNCTION_17
0x5dc	    0x48c746280000	               mov qword [rsi + 0x28], 0	       361	adlist.c	FUNCTION_17
0x5e4	              0xc3	                                     ret	       361	adlist.c	FUNCTION_17
0x5e5	           0xf1f00	                         nop dword [rax]	       361	adlist.c	FUNCTION_17
0x5e8	          0x488907	                    mov qword [rdi], rax	       354	adlist.c	FUNCTION_17	ELSE_1
0x5eb	            0xebcb	                           jmp 0x40005f8	       354	adlist.c	FUNCTION_17	ELSE_1
listEmpty	IF,1:DO,0:FOR,0:WHILE,1:CALL,2:functions,0:ELSE,0:SWITCH,0	31
0x50	            0x4155	                                push r13	        57	adlist.c	FUNCTION_2
0x52	            0x4154	                                push r12	        57	adlist.c	FUNCTION_2
0x54	          0x4989fd	                            mov r13, rdi	        57	adlist.c	FUNCTION_2
0x57	              0x55	                                push rbp	        57	adlist.c	FUNCTION_2
0x58	              0x53	                                push rbx	        57	adlist.c	FUNCTION_2
0x59	        0x4883ec08	                              sub rsp, 8	        57	adlist.c	FUNCTION_2
0x5d	        0x488b6f28	            mov rbp, qword [rdi + 0x28] 	        62	adlist.c	FUNCTION_2
0x61	          0x488b1f	                    mov rbx, qword [rdi]	        61	adlist.c	FUNCTION_2
0x64	          0x4885ed	                           test rbp, rbp	        63	adlist.c	FUNCTION_2	WHILE_1
0x67	            0x742b	                            je 0x40000d4	        63	adlist.c	FUNCTION_2	WHILE_1
0x69	     0xf1f80000000	                         nop dword [rax]	        63	adlist.c	FUNCTION_2	WHILE_1
0x70	        0x498b4518	            mov rax, qword [r13 + 0x18] 	        65	adlist.c	FUNCTION_2	WHILE_1	CALL_1
0x74	        0x4c8b6308	                mov r12, qword [rbx + 8]	        64	adlist.c	FUNCTION_2	WHILE_1
0x78	          0x4885c0	                           test rax, rax	        65	adlist.c	FUNCTION_2	WHILE_1	CALL_1
0x7b	            0x7406	                            je 0x40000c3	        65	adlist.c	FUNCTION_2	WHILE_1	CALL_1
0x7d	        0x488b7b10	            mov rdi, qword [rbx + 0x10] 	        65	adlist.c	FUNCTION_2	WHILE_1	CALL_1
0x81	            0xffd0	                                call rax	        65	adlist.c	FUNCTION_2	WHILE_1	CALL_1
0x83	          0x4889df	                            mov rdi, rbx	        66	adlist.c	FUNCTION_2	WHILE_1	CALL_2
0x86	          0x4c89e3	                            mov rbx, r12	        67	adlist.c	FUNCTION_2	WHILE_1
0x89	      0xe800000000	                          call 0x40000ce	        66	adlist.c	FUNCTION_2	WHILE_1	CALL_2
0x8e	        0x4883ed01	                              sub rbp, 1	        63	adlist.c	FUNCTION_2	WHILE_1
0x92	            0x75dc	                           jne 0x40000b0	        63	adlist.c	FUNCTION_2	WHILE_1
0x94	    0x49c745080000	                  mov qword [r13 + 8], 0	        69	adlist.c	FUNCTION_2
0x9c	    0x49c745000000	                      mov qword [r13], 0	        69	adlist.c	FUNCTION_2
0xa4	    0x49c745280000	               mov qword [r13 + 0x28], 0	        70	adlist.c	FUNCTION_2
0xac	        0x4883c408	                              add rsp, 8	        71	adlist.c	FUNCTION_2
0xb0	              0x5b	                                 pop rbx	        71	adlist.c	FUNCTION_2
0xb1	              0x5d	                                 pop rbp	        71	adlist.c	FUNCTION_2
0xb2	            0x415c	                                 pop r12	        71	adlist.c	FUNCTION_2
0xb4	            0x415d	                                 pop r13	        71	adlist.c	FUNCTION_2
0xb6	              0xc3	                                     ret	        71	adlist.c	FUNCTION_2
listIndex	IF,1:DO,0:FOR,0:WHILE,2:CALL,0:functions,0:ELSE,1:SWITCH,0	36
0x500	          0x4885f6	                           test rsi, rsi	       318	adlist.c	FUNCTION_15	IF_1
0x503	            0x7833	                            js 0x4000578	       318	adlist.c	FUNCTION_15	IF_1
0x505	          0x488b07	                    mov rax, qword [rdi]	       323	adlist.c	FUNCTION_15	ELSE_1
0x508	            0x7428	                            je 0x4000572	       324	adlist.c	FUNCTION_15	ELSE_1	WHILE_2
0x50a	          0x4885c0	                           test rax, rax	       324	adlist.c	FUNCTION_15	ELSE_1	WHILE_2
0x50d	            0x7423	                            je 0x4000572	       324	adlist.c	FUNCTION_15	ELSE_1	WHILE_2
0x50f	        0x4883ee01	                              sub rsi, 1	       324	adlist.c	FUNCTION_15	ELSE_1	WHILE_2
0x513	            0x31d2	                            xor edx, edx	       324	adlist.c	FUNCTION_15	ELSE_1	WHILE_2
0x515	            0xeb12	                           jmp 0x4000569	       324	adlist.c	FUNCTION_15	ELSE_1	WHILE_2
0x517	    0x660f1f840000	                    nop word [rax + rax]	       324	adlist.c	FUNCTION_15	ELSE_1	WHILE_2
0x520	        0x4883c201	                              add rdx, 1	       324	adlist.c	FUNCTION_15	ELSE_1	WHILE_2
0x524	          0x4885c0	                           test rax, rax	       324	adlist.c	FUNCTION_15	ELSE_1	WHILE_2
0x527	            0x7409	                            je 0x4000572	       324	adlist.c	FUNCTION_15	ELSE_1	WHILE_2
0x529	          0x4839d6	                            cmp rsi, rdx	       324	adlist.c	FUNCTION_15	ELSE_1	WHILE_2
0x52c	        0x488b4008	                mov rax, qword [rax + 8]	       324	adlist.c	FUNCTION_15	ELSE_1	WHILE_2
0x530	            0x75ee	                           jne 0x4000560	       324	adlist.c	FUNCTION_15	ELSE_1	WHILE_2
0x532	            0xf3c3	                                     ret	       327	adlist.c	FUNCTION_15
0x534	         0xf1f4000	                         nop dword [rax]	       327	adlist.c	FUNCTION_15
0x538	        0x4883f6ff	             xor rsi, 0xffffffffffffffff	       321	adlist.c	FUNCTION_15	IF_1	WHILE_1
0x53c	        0x488b4708	                mov rax, qword [rdi + 8]	       320	adlist.c	FUNCTION_15	IF_1
0x540	            0x74f0	                            je 0x4000572	       321	adlist.c	FUNCTION_15	IF_1	WHILE_1
0x542	          0x4885c0	                           test rax, rax	       321	adlist.c	FUNCTION_15	IF_1	WHILE_1
0x545	            0x74eb	                            je 0x4000572	       321	adlist.c	FUNCTION_15	IF_1	WHILE_1
0x547	        0x4883ee01	                              sub rsi, 1	       321	adlist.c	FUNCTION_15	IF_1	WHILE_1
0x54b	            0x31d2	                            xor edx, edx	       321	adlist.c	FUNCTION_15	IF_1	WHILE_1
0x54d	            0xeb0a	                           jmp 0x4000599	       321	adlist.c	FUNCTION_15	IF_1	WHILE_1
0x54f	              0x90	                                     nop	       321	adlist.c	FUNCTION_15	IF_1	WHILE_1
0x550	        0x4883c201	                              add rdx, 1	       321	adlist.c	FUNCTION_15	IF_1	WHILE_1
0x554	          0x4885c0	                           test rax, rax	       321	adlist.c	FUNCTION_15	IF_1	WHILE_1
0x557	            0x740f	                            je 0x40005a8	       321	adlist.c	FUNCTION_15	IF_1	WHILE_1
0x559	          0x4839d6	                            cmp rsi, rdx	       321	adlist.c	FUNCTION_15	IF_1	WHILE_1
0x55c	          0x488b00	                    mov rax, qword [rax]	       321	adlist.c	FUNCTION_15	IF_1	WHILE_1
0x55f	            0x75ef	                           jne 0x4000590	       321	adlist.c	FUNCTION_15	IF_1	WHILE_1
0x561	            0xebcf	                           jmp 0x4000572	       321	adlist.c	FUNCTION_15	IF_1	WHILE_1
0x563	       0xf1f440000	                   nop dword [rax + rax]	       321	adlist.c	FUNCTION_15	IF_1	WHILE_1
0x568	            0xf3c3	                                     ret	       321	adlist.c	FUNCTION_15	IF_1	WHILE_1
listSearchKey	IF,3:DO,0:FOR,0:WHILE,1:CALL,3:functions,0:ELSE,1:SWITCH,0	41
0x490	            0x4155	                                push r13	       291	adlist.c	FUNCTION_14
0x492	            0x4154	                                push r12	       291	adlist.c	FUNCTION_14
0x494	          0x4989f5	                            mov r13, rsi	       291	adlist.c	FUNCTION_14
0x497	              0x55	                                push rbp	       291	adlist.c	FUNCTION_14
0x498	              0x53	                                push rbx	       291	adlist.c	FUNCTION_14
0x499	          0x4989fc	                            mov r12, rdi	       291	adlist.c	FUNCTION_14
0x49c	        0x4883ec08	                              sub rsp, 8	       291	adlist.c	FUNCTION_14
0x4a0	          0x488b1f	                    mov rbx, qword [rdi]	       206	adlist.c	FUNCTION_10
0x4a3	          0x4885db	                           test rbx, rbx	       233	adlist.c	FUNCTION_12	IF_1
0x4a6	            0x751d	                           jne 0x4000505	       233	adlist.c	FUNCTION_12	IF_1
0x4a8	            0xeb46	                           jmp 0x4000530	       233	adlist.c	FUNCTION_12	IF_1
0x4aa	    0x660f1f440000	                    nop word [rax + rax]	       233	adlist.c	FUNCTION_12	IF_1
0x4b0	        0x488b7b10	            mov rdi, qword [rbx + 0x10] 	       298	adlist.c	FUNCTION_14	WHILE_1	IF_1	IF_2	CALL_3
0x4b4	          0x4c89ee	                            mov rsi, r13	       298	adlist.c	FUNCTION_14	WHILE_1	IF_1	IF_2	CALL_3
0x4b7	            0xffd0	                                call rax	       298	adlist.c	FUNCTION_14	WHILE_1	IF_1	IF_2	CALL_3
0x4b9	            0x85c0	                           test eax, eax	       298	adlist.c	FUNCTION_14	WHILE_1	IF_1	IF_2	CALL_3
0x4bb	            0x751c	                           jne 0x4000519	       298	adlist.c	FUNCTION_14	WHILE_1	IF_1	IF_2	CALL_3
0x4bd	          0x4885ed	                           test rbp, rbp	       233	adlist.c	FUNCTION_12	IF_1
0x4c0	          0x4889eb	                            mov rbx, rbp	       233	adlist.c	FUNCTION_12	IF_1
0x4c3	            0x742b	                            je 0x4000530	       233	adlist.c	FUNCTION_12	IF_1
0x4c5	      0x498b442420	            mov rax, qword [r12 + 0x20] 	       297	adlist.c	FUNCTION_14	WHILE_1	IF_1
0x4ca	        0x488b6b08	                mov rbp, qword [rbx + 8]	       235	adlist.c	FUNCTION_12	IF_1	IF_2
0x4ce	          0x4885c0	                           test rax, rax	       297	adlist.c	FUNCTION_14	WHILE_1	IF_1
0x4d1	            0x75dd	                           jne 0x40004f0	       297	adlist.c	FUNCTION_14	WHILE_1	IF_1
0x4d3	        0x4c396b10	            cmp qword [rbx + 0x10], r13 	       302	adlist.c	FUNCTION_14	WHILE_1	ELSE_1	IF_3
0x4d7	            0x75e4	                           jne 0x40004fd	       302	adlist.c	FUNCTION_14	WHILE_1	ELSE_1	IF_3
0x4d9	        0x4883c408	                              add rsp, 8	       308	adlist.c	FUNCTION_14
0x4dd	          0x4889d8	                            mov rax, rbx	       308	adlist.c	FUNCTION_14
0x4e0	              0x5b	                                 pop rbx	       308	adlist.c	FUNCTION_14
0x4e1	              0x5d	                                 pop rbp	       308	adlist.c	FUNCTION_14
0x4e2	            0x415c	                                 pop r12	       308	adlist.c	FUNCTION_14
0x4e4	            0x415d	                                 pop r13	       308	adlist.c	FUNCTION_14
0x4e6	              0xc3	                                     ret	       308	adlist.c	FUNCTION_14
0x4e7	    0x660f1f840000	                    nop word [rax + rax]	       308	adlist.c	FUNCTION_14
0x4f0	        0x4883c408	                              add rsp, 8	       308	adlist.c	FUNCTION_14
0x4f4	            0x31c0	                            xor eax, eax	       307	adlist.c	FUNCTION_14
0x4f6	              0x5b	                                 pop rbx	       308	adlist.c	FUNCTION_14
0x4f7	              0x5d	                                 pop rbp	       308	adlist.c	FUNCTION_14
0x4f8	            0x415c	                                 pop r12	       308	adlist.c	FUNCTION_14
0x4fa	            0x415d	                                 pop r13	       308	adlist.c	FUNCTION_14
0x4fc	              0xc3	                                     ret	       308	adlist.c	FUNCTION_14
listDelNode	IF,3:DO,0:FOR,0:WHILE,0:CALL,2:functions,0:ELSE,2:SWITCH,0	33
0x290	              0x55	                                push rbp	       168	adlist.c	FUNCTION_7
0x291	              0x53	                                push rbx	       168	adlist.c	FUNCTION_7
0x292	          0x4889fd	                            mov rbp, rdi	       168	adlist.c	FUNCTION_7
0x295	          0x4889f3	                            mov rbx, rsi	       168	adlist.c	FUNCTION_7
0x298	        0x4883ec08	                              sub rsp, 8	       168	adlist.c	FUNCTION_7
0x29c	          0x488b06	                    mov rax, qword [rsi]	       169	adlist.c	FUNCTION_7	IF_1
0x29f	        0x488b5608	                mov rdx, qword [rsi + 8]	       170	adlist.c	FUNCTION_7	IF_1
0x2a3	          0x4885c0	                           test rax, rax	       169	adlist.c	FUNCTION_7	IF_1
0x2a6	            0x7438	                            je 0x4000320	       169	adlist.c	FUNCTION_7	IF_1
0x2a8	        0x48895008	                mov qword [rax + 8], rdx	       170	adlist.c	FUNCTION_7	IF_1
0x2ac	        0x488b5608	                mov rdx, qword [rsi + 8]	       170	adlist.c	FUNCTION_7	IF_1
0x2b0	          0x4885d2	                           test rdx, rdx	       173	adlist.c	FUNCTION_7	IF_2
0x2b3	            0x743b	                            je 0x4000330	       173	adlist.c	FUNCTION_7	IF_2
0x2b5	          0x488902	                    mov qword [rdx], rax	       174	adlist.c	FUNCTION_7	IF_2
0x2b8	        0x488b4518	            mov rax, qword [rbp + 0x18] 	       177	adlist.c	FUNCTION_7	CALL_1
0x2bc	          0x4885c0	                           test rax, rax	       177	adlist.c	FUNCTION_7	CALL_1
0x2bf	            0x7406	                            je 0x4000307	       177	adlist.c	FUNCTION_7	CALL_1
0x2c1	        0x488b7b10	            mov rdi, qword [rbx + 0x10] 	       177	adlist.c	FUNCTION_7	CALL_1
0x2c5	            0xffd0	                                call rax	       177	adlist.c	FUNCTION_7	CALL_1
0x2c7	          0x4889df	                            mov rdi, rbx	       178	adlist.c	FUNCTION_7	CALL_2
0x2ca	      0xe800000000	                          call 0x400030f	       178	adlist.c	FUNCTION_7	CALL_2
0x2cf	      0x48836d2801	               sub qword [rbp + 0x28], 1	       179	adlist.c	FUNCTION_7
0x2d4	        0x4883c408	                              add rsp, 8	       180	adlist.c	FUNCTION_7
0x2d8	              0x5b	                                 pop rbx	       180	adlist.c	FUNCTION_7
0x2d9	              0x5d	                                 pop rbp	       180	adlist.c	FUNCTION_7
0x2da	              0xc3	                                     ret	       180	adlist.c	FUNCTION_7
0x2db	       0xf1f440000	                   nop dword [rax + rax]	       180	adlist.c	FUNCTION_7
0x2e0	          0x4885d2	                           test rdx, rdx	       173	adlist.c	FUNCTION_7	IF_2
0x2e3	          0x488917	                    mov qword [rdi], rdx	       172	adlist.c	FUNCTION_7	ELSE_1
0x2e6	            0x75cd	                           jne 0x40002f5	       173	adlist.c	FUNCTION_7	IF_2
0x2e8	     0xf1f84000000	                   nop dword [rax + rax]	       173	adlist.c	FUNCTION_7	IF_2
0x2f0	        0x48894508	                mov qword [rbp + 8], rax	       176	adlist.c	FUNCTION_7	ELSE_2
0x2f4	            0xebc2	                           jmp 0x40002f8	       176	adlist.c	FUNCTION_7	ELSE_2
listRotate	IF,1:DO,0:FOR,0:WHILE,0:CALL,1:functions,0:ELSE,0:SWITCH,0	12
0x570	      0x48837f2801	               cmp qword [rdi + 0x28], 1	       333	adlist.c	FUNCTION_16	CALL_1
0x575	            0x7627	                           jbe 0x40005de	       333	adlist.c	FUNCTION_16	CALL_1
0x577	        0x488b4708	                mov rax, qword [rdi + 8]	       331	adlist.c	FUNCTION_16
0x57b	          0x488b10	                    mov rdx, qword [rax]	       336	adlist.c	FUNCTION_16
0x57e	        0x48895708	                mov qword [rdi + 8], rdx	       336	adlist.c	FUNCTION_16
0x582	    0x48c742080000	                  mov qword [rdx + 8], 0	       337	adlist.c	FUNCTION_16
0x58a	          0x488b17	                    mov rdx, qword [rdi]	       339	adlist.c	FUNCTION_16
0x58d	          0x488902	                    mov qword [rdx], rax	       339	adlist.c	FUNCTION_16
0x590	    0x48c700000000	                      mov qword [rax], 0	       340	adlist.c	FUNCTION_16
0x597	        0x48895008	                mov qword [rax + 8], rdx	       341	adlist.c	FUNCTION_16
0x59b	          0x488907	                    mov qword [rdi], rax	       342	adlist.c	FUNCTION_16
0x59e	            0xf3c3	                                     ret	       342	adlist.c	FUNCTION_16
listInsertNode	IF,6:DO,0:FOR,0:WHILE,0:CALL,1:functions,0:ELSE,1:SWITCH,0	53
0x1e0	            0x4155	                                push r13	       134	adlist.c	FUNCTION_6
0x1e2	            0x4154	                                push r12	       134	adlist.c	FUNCTION_6
0x1e4	          0x4989d5	                            mov r13, rdx	       134	adlist.c	FUNCTION_6
0x1e7	              0x55	                                push rbp	       134	adlist.c	FUNCTION_6
0x1e8	              0x53	                                push rbx	       134	adlist.c	FUNCTION_6
0x1e9	          0x4889fb	                            mov rbx, rdi	       134	adlist.c	FUNCTION_6
0x1ec	      0xbf18000000	                           mov edi, 0x18	       137	adlist.c	FUNCTION_6	IF_1	CALL_1
0x1f1	          0x4889f5	                            mov rbp, rsi	       134	adlist.c	FUNCTION_6
0x1f4	          0x4189cc	                           mov r12d, ecx	       134	adlist.c	FUNCTION_6
0x1f7	        0x4883ec08	                              sub rsp, 8	       134	adlist.c	FUNCTION_6
0x1fb	      0xe800000000	                          call 0x4000240	       137	adlist.c	FUNCTION_6	IF_1	CALL_1
0x200	          0x4885c0	                           test rax, rax	       137	adlist.c	FUNCTION_6	IF_1	CALL_1
0x203	            0x747b	                            je 0x40002c0	       137	adlist.c	FUNCTION_6	IF_1	CALL_1
0x205	          0x4585e4	                         test r12d, r12d	       140	adlist.c	FUNCTION_6	IF_2
0x208	        0x4c896810	             mov qword [rax + 0x10], r13	       139	adlist.c	FUNCTION_6
0x20c	            0x7542	                           jne 0x4000290	       140	adlist.c	FUNCTION_6	IF_2
0x20e	          0x483b2b	                    cmp rbp, qword [rbx]	       149	adlist.c	FUNCTION_6	ELSE_1	IF_4
0x211	        0x488b5500	                    mov rdx, qword [rbp]	       148	adlist.c	FUNCTION_6	ELSE_1
0x215	        0x48896808	                mov qword [rax + 8], rbp	       147	adlist.c	FUNCTION_6	ELSE_1
0x219	          0x488910	                    mov qword [rax], rdx	       148	adlist.c	FUNCTION_6	ELSE_1
0x21c	            0x7452	                            je 0x40002b0	       149	adlist.c	FUNCTION_6	ELSE_1	IF_4
0x21e	          0x4885d2	                           test rdx, rdx	       153	adlist.c	FUNCTION_6	IF_5
0x221	            0x7404	                            je 0x4000267	       153	adlist.c	FUNCTION_6	IF_5
0x223	        0x48894208	                mov qword [rdx + 8], rax	       154	adlist.c	FUNCTION_6	IF_5
0x227	        0x488b5008	                mov rdx, qword [rax + 8]	       156	adlist.c	FUNCTION_6	IF_6
0x22b	          0x4885d2	                           test rdx, rdx	       156	adlist.c	FUNCTION_6	IF_6
0x22e	            0x7403	                            je 0x4000273	       156	adlist.c	FUNCTION_6	IF_6
0x230	          0x488902	                    mov qword [rdx], rax	       157	adlist.c	FUNCTION_6	IF_6
0x233	      0x4883432801	               add qword [rbx + 0x28], 1	       159	adlist.c	FUNCTION_6
0x238	          0x4889d8	                            mov rax, rbx	       160	adlist.c	FUNCTION_6
0x23b	        0x4883c408	                              add rsp, 8	       161	adlist.c	FUNCTION_6
0x23f	              0x5b	                                 pop rbx	       161	adlist.c	FUNCTION_6
0x240	              0x5d	                                 pop rbp	       161	adlist.c	FUNCTION_6
0x241	            0x415c	                                 pop r12	       161	adlist.c	FUNCTION_6
0x243	            0x415d	                                 pop r13	       161	adlist.c	FUNCTION_6
0x245	              0xc3	                                     ret	       161	adlist.c	FUNCTION_6
0x246	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       161	adlist.c	FUNCTION_6
0x250	        0x483b6b08	                cmp rbp, qword [rbx + 8]	       143	adlist.c	FUNCTION_6	IF_2	IF_3
0x254	        0x488b5508	                mov rdx, qword [rbp + 8]	       142	adlist.c	FUNCTION_6	IF_2
0x258	          0x488928	                    mov qword [rax], rbp	       141	adlist.c	FUNCTION_6	IF_2
0x25b	        0x48895008	                mov qword [rax + 8], rdx	       142	adlist.c	FUNCTION_6	IF_2
0x25f	            0x7417	                            je 0x40002b8	       143	adlist.c	FUNCTION_6	IF_2	IF_3
0x261	          0x4889ea	                            mov rdx, rbp	       134	adlist.c	FUNCTION_6
0x264	            0xebbd	                           jmp 0x4000263	       134	adlist.c	FUNCTION_6
0x266	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       134	adlist.c	FUNCTION_6
0x270	          0x488903	                    mov qword [rbx], rax	       150	adlist.c	FUNCTION_6	ELSE_1	IF_4
0x273	            0xeba9	                           jmp 0x400025e	       150	adlist.c	FUNCTION_6	ELSE_1	IF_4
0x275	           0xf1f00	                         nop dword [rax]	       150	adlist.c	FUNCTION_6	ELSE_1	IF_4
0x278	        0x48894308	                mov qword [rbx + 8], rax	       144	adlist.c	FUNCTION_6	IF_2	IF_3
0x27c	            0xebe3	                           jmp 0x40002a1	       144	adlist.c	FUNCTION_6	IF_2	IF_3
0x27e	            0x6690	                                     nop	       144	adlist.c	FUNCTION_6	IF_2	IF_3
0x280	            0x31c0	                            xor eax, eax	       138	adlist.c	FUNCTION_6	IF_1
0x282	            0xebb7	                           jmp 0x400027b	       138	adlist.c	FUNCTION_6	IF_1
listAddNodeTail	IF,2:DO,0:FOR,0:WHILE,0:CALL,1:functions,0:ELSE,1:SWITCH,0	33
0x160	              0x55	                                push rbp	       115	adlist.c	FUNCTION_5
0x161	              0x53	                                push rbx	       115	adlist.c	FUNCTION_5
0x162	          0x4889fb	                            mov rbx, rdi	       115	adlist.c	FUNCTION_5
0x165	      0xbf18000000	                           mov edi, 0x18	       118	adlist.c	FUNCTION_5	IF_1	CALL_1
0x16a	          0x4889f5	                            mov rbp, rsi	       115	adlist.c	FUNCTION_5
0x16d	        0x4883ec08	                              sub rsp, 8	       115	adlist.c	FUNCTION_5
0x171	      0xe800000000	                          call 0x40001b6	       118	adlist.c	FUNCTION_5	IF_1	CALL_1
0x176	          0x4885c0	                           test rax, rax	       118	adlist.c	FUNCTION_5	IF_1	CALL_1
0x179	            0x7455	                            je 0x4000210	       118	adlist.c	FUNCTION_5	IF_1	CALL_1
0x17b	        0x488b5328	            mov rdx, qword [rbx + 0x28] 	       121	adlist.c	FUNCTION_5	IF_2
0x17f	        0x48896810	             mov qword [rax + 0x10], rbp	       120	adlist.c	FUNCTION_5
0x183	          0x4885d2	                           test rdx, rdx	       121	adlist.c	FUNCTION_5	IF_2
0x186	            0x7430	                            je 0x40001f8	       121	adlist.c	FUNCTION_5	IF_2
0x188	        0x488b4b08	                mov rcx, qword [rbx + 8]	       125	adlist.c	FUNCTION_5	ELSE_1
0x18c	    0x48c740080000	                  mov qword [rax + 8], 0	       126	adlist.c	FUNCTION_5	ELSE_1
0x194	          0x488908	                    mov qword [rax], rcx	       125	adlist.c	FUNCTION_5	ELSE_1
0x197	        0x48894108	                mov qword [rcx + 8], rax	       127	adlist.c	FUNCTION_5	ELSE_1
0x19b	        0x48894308	                mov qword [rbx + 8], rax	       128	adlist.c	FUNCTION_5	ELSE_1
0x19f	        0x4883c201	                              add rdx, 1	       130	adlist.c	FUNCTION_5
0x1a3	          0x4889d8	                            mov rax, rbx	       131	adlist.c	FUNCTION_5
0x1a6	        0x48895328	             mov qword [rbx + 0x28], rdx	       130	adlist.c	FUNCTION_5
0x1aa	        0x4883c408	                              add rsp, 8	       132	adlist.c	FUNCTION_5
0x1ae	              0x5b	                                 pop rbx	       132	adlist.c	FUNCTION_5
0x1af	              0x5d	                                 pop rbp	       132	adlist.c	FUNCTION_5
0x1b0	              0xc3	                                     ret	       132	adlist.c	FUNCTION_5
0x1b1	     0xf1f80000000	                         nop dword [rax]	       132	adlist.c	FUNCTION_5
0x1b8	        0x48894308	                mov qword [rbx + 8], rax	       122	adlist.c	FUNCTION_5	IF_2
0x1bc	          0x488903	                    mov qword [rbx], rax	       122	adlist.c	FUNCTION_5	IF_2
0x1bf	    0x48c740080000	                  mov qword [rax + 8], 0	       123	adlist.c	FUNCTION_5	IF_2
0x1c7	    0x48c700000000	                      mov qword [rax], 0	       123	adlist.c	FUNCTION_5	IF_2
0x1ce	            0xebcf	                           jmp 0x40001df	       123	adlist.c	FUNCTION_5	IF_2
0x1d0	            0x31c0	                            xor eax, eax	       119	adlist.c	FUNCTION_5	IF_1
0x1d2	            0xebd6	                           jmp 0x40001ea	       119	adlist.c	FUNCTION_5	IF_1
listGetIterator	IF,2:DO,0:FOR,0:WHILE,0:CALL,1:functions,0:ELSE,1:SWITCH,0	25
0x300	              0x55	                                push rbp	       187	adlist.c	FUNCTION_8
0x301	              0x53	                                push rbx	       187	adlist.c	FUNCTION_8
0x302	          0x4889fd	                            mov rbp, rdi	       187	adlist.c	FUNCTION_8
0x305	      0xbf10000000	                           mov edi, 0x10	       190	adlist.c	FUNCTION_8	CALL_1
0x30a	            0x89f3	                            mov ebx, esi	       187	adlist.c	FUNCTION_8
0x30c	        0x4883ec08	                              sub rsp, 8	       187	adlist.c	FUNCTION_8
0x310	      0xe800000000	                          call 0x4000355	       190	adlist.c	FUNCTION_8	CALL_1
0x315	          0x4885c0	                           test rax, rax	       190	adlist.c	FUNCTION_8	CALL_1
0x318	            0x7426	                            je 0x4000380	       190	adlist.c	FUNCTION_8	CALL_1
0x31a	            0x85db	                           test ebx, ebx	       191	adlist.c	FUNCTION_8	IF_2
0x31c	            0x7412	                            je 0x4000370	       191	adlist.c	FUNCTION_8	IF_2
0x31e	        0x488b5508	                mov rdx, qword [rbp + 8]	       194	adlist.c	FUNCTION_8	ELSE_1
0x322	          0x488910	                    mov qword [rax], rdx	       194	adlist.c	FUNCTION_8	ELSE_1
0x325	          0x895808	                mov dword [rax + 8], ebx	       195	adlist.c	FUNCTION_8	ELSE_1
0x328	        0x4883c408	                              add rsp, 8	       197	adlist.c	FUNCTION_8	ELSE_1
0x32c	              0x5b	                                 pop rbx	       197	adlist.c	FUNCTION_8	ELSE_1
0x32d	              0x5d	                                 pop rbp	       197	adlist.c	FUNCTION_8	ELSE_1
0x32e	              0xc3	                                     ret	       197	adlist.c	FUNCTION_8	ELSE_1
0x32f	              0x90	                                     nop	       197	adlist.c	FUNCTION_8	ELSE_1
0x330	        0x488b5500	                    mov rdx, qword [rbp]	       192	adlist.c	FUNCTION_8	IF_2
0x334	          0x488910	                    mov qword [rax], rdx	       192	adlist.c	FUNCTION_8	IF_2
0x337	            0xebec	                           jmp 0x4000365	       192	adlist.c	FUNCTION_8	IF_2
0x339	     0xf1f80000000	                         nop dword [rax]	       192	adlist.c	FUNCTION_8	IF_2
0x340	            0x31c0	                            xor eax, eax	       190	adlist.c	FUNCTION_8	CALL_1
0x342	            0xebe4	                           jmp 0x4000368	       190	adlist.c	FUNCTION_8	CALL_1
listAddNodeHead	IF,2:DO,0:FOR,0:WHILE,0:CALL,1:functions,0:ELSE,1:SWITCH,0	34
0xe0	              0x55	                                push rbp	        89	adlist.c	FUNCTION_4
0xe1	              0x53	                                push rbx	        89	adlist.c	FUNCTION_4
0xe2	          0x4889fb	                            mov rbx, rdi	        89	adlist.c	FUNCTION_4
0xe5	      0xbf18000000	                           mov edi, 0x18	        92	adlist.c	FUNCTION_4	IF_1	CALL_1
0xea	          0x4889f5	                            mov rbp, rsi	        89	adlist.c	FUNCTION_4
0xed	        0x4883ec08	                              sub rsp, 8	        89	adlist.c	FUNCTION_4
0xf1	      0xe800000000	                          call 0x4000136	        92	adlist.c	FUNCTION_4	IF_1	CALL_1
0xf6	          0x4885c0	                           test rax, rax	        92	adlist.c	FUNCTION_4	IF_1	CALL_1
0xf9	            0x7455	                            je 0x4000190	        92	adlist.c	FUNCTION_4	IF_1	CALL_1
0xfb	        0x488b5328	            mov rdx, qword [rbx + 0x28] 	        95	adlist.c	FUNCTION_4	IF_2
0xff	        0x48896810	             mov qword [rax + 0x10], rbp	        94	adlist.c	FUNCTION_4
0x103	          0x4885d2	                           test rdx, rdx	        95	adlist.c	FUNCTION_4	IF_2
0x106	            0x7428	                            je 0x4000170	        95	adlist.c	FUNCTION_4	IF_2
0x108	          0x488b0b	                    mov rcx, qword [rbx]	       100	adlist.c	FUNCTION_4	ELSE_1
0x10b	    0x48c700000000	                      mov qword [rax], 0	        99	adlist.c	FUNCTION_4	ELSE_1
0x112	        0x48894808	                mov qword [rax + 8], rcx	       100	adlist.c	FUNCTION_4	ELSE_1
0x116	          0x488901	                    mov qword [rcx], rax	       101	adlist.c	FUNCTION_4	ELSE_1
0x119	          0x488903	                    mov qword [rbx], rax	       102	adlist.c	FUNCTION_4	ELSE_1
0x11c	        0x4883c201	                              add rdx, 1	       104	adlist.c	FUNCTION_4
0x120	          0x4889d8	                            mov rax, rbx	       105	adlist.c	FUNCTION_4
0x123	        0x48895328	             mov qword [rbx + 0x28], rdx	       104	adlist.c	FUNCTION_4
0x127	        0x4883c408	                              add rsp, 8	       106	adlist.c	FUNCTION_4
0x12b	              0x5b	                                 pop rbx	       106	adlist.c	FUNCTION_4
0x12c	              0x5d	                                 pop rbp	       106	adlist.c	FUNCTION_4
0x12d	              0xc3	                                     ret	       106	adlist.c	FUNCTION_4
0x12e	            0x6690	                                     nop	       106	adlist.c	FUNCTION_4
0x130	        0x48894308	                mov qword [rbx + 8], rax	        96	adlist.c	FUNCTION_4	IF_2
0x134	          0x488903	                    mov qword [rbx], rax	        96	adlist.c	FUNCTION_4	IF_2
0x137	    0x48c740080000	                  mov qword [rax + 8], 0	        97	adlist.c	FUNCTION_4	IF_2
0x13f	    0x48c700000000	                      mov qword [rax], 0	        97	adlist.c	FUNCTION_4	IF_2
0x146	            0xebd4	                           jmp 0x400015c	        97	adlist.c	FUNCTION_4	IF_2
0x148	     0xf1f84000000	                   nop dword [rax + rax]	        97	adlist.c	FUNCTION_4	IF_2
0x150	            0x31c0	                            xor eax, eax	        93	adlist.c	FUNCTION_4	IF_1
0x152	            0xebd3	                           jmp 0x4000167	        93	adlist.c	FUNCTION_4	IF_1
listReleaseIterator	IF,0:DO,0:FOR,0:WHILE,0:CALL,1:functions,0:ELSE,0:SWITCH,0	1
0x350	      0xe900000000	                           jmp 0x4000395	       201	adlist.c	ELSE_1	FUNCTION_9	CALL_1
listRewindTail	IF,0:DO,0:FOR,0:WHILE,0:CALL,0:functions,0:ELSE,0:SWITCH,0	4
0x370	        0x488b4708	                mov rax, qword [rdi + 8]	       211	adlist.c	FUNCTION_11
0x374	    0xc74608010000	                  mov dword [rsi + 8], 1	       212	adlist.c	FUNCTION_11
0x37b	          0x488906	                    mov qword [rsi], rax	       211	adlist.c	FUNCTION_11
0x37e	              0xc3	                                     ret	       212	adlist.c	FUNCTION_11
listDup	IF,4:DO,0:FOR,0:WHILE,1:CALL,7:functions,0:ELSE,1:SWITCH,0	68
0x3b0	              0x55	                                push rbp	       251	adlist.c	ELSE_1	FUNCTION_13
0x3b1	              0x53	                                push rbx	       251	adlist.c	ELSE_1	FUNCTION_13
0x3b2	          0x4889fb	                            mov rbx, rdi	       251	adlist.c	ELSE_1	FUNCTION_13
0x3b5	        0x4883ec18	                           sub rsp, 0x18	       251	adlist.c	ELSE_1	FUNCTION_13
0x3b9	      0xe800000000	                          call 0x40003fe	       256	adlist.c	ELSE_1	FUNCTION_13	IF_1	CALL_1
0x3be	          0x4885c0	                           test rax, rax	       256	adlist.c	ELSE_1	FUNCTION_13	IF_1	CALL_1
0x3c1	     0xf84ba000000	                            je 0x40004c1	       256	adlist.c	ELSE_1	FUNCTION_13	IF_1	CALL_1
0x3c7	        0x488b5310	            mov rdx, qword [rbx + 0x10] 	       258	adlist.c	ELSE_1	FUNCTION_13
0x3cb	          0x4889c5	                            mov rbp, rax	       258	adlist.c	ELSE_1	FUNCTION_13
0x3ce	        0x48895010	             mov qword [rax + 0x10], rdx	       258	adlist.c	ELSE_1	FUNCTION_13
0x3d2	        0x488b4318	            mov rax, qword [rbx + 0x18] 	       259	adlist.c	ELSE_1	FUNCTION_13
0x3d6	        0x48894518	            mov qword [rbp + 0x18], rax 	       259	adlist.c	ELSE_1	FUNCTION_13
0x3da	        0x488b4320	            mov rax, qword [rbx + 0x20] 	       260	adlist.c	ELSE_1	FUNCTION_13
0x3de	        0x48894520	            mov qword [rbp + 0x20], rax 	       260	adlist.c	ELSE_1	FUNCTION_13
0x3e2	          0x488b03	                    mov rax, qword [rbx]	       206	adlist.c	FUNCTION_10
0x3e5	          0x4885c0	                           test rax, rax	       233	adlist.c	FUNCTION_12	IF_1
0x3e8	            0x752d	                           jne 0x4000457	       233	adlist.c	FUNCTION_12	IF_1
0x3ea	            0xeb6c	                           jmp 0x4000498	       233	adlist.c	FUNCTION_12	IF_1
0x3ec	         0xf1f4000	                         nop dword [rax]	       233	adlist.c	FUNCTION_12	IF_1
0x3f0	        0x488b7810	            mov rdi, qword [rax + 0x10] 	       266	adlist.c	ELSE_1	FUNCTION_13	WHILE_1	IF_2	CALL_4
0x3f4	            0xffd2	                                call rdx	       266	adlist.c	ELSE_1	FUNCTION_13	WHILE_1	IF_2	CALL_4
0x3f6	          0x4885c0	                           test rax, rax	       267	adlist.c	ELSE_1	FUNCTION_13	WHILE_1	IF_2	IF_3
0x3f9	          0x4889c6	                            mov rsi, rax	       266	adlist.c	ELSE_1	FUNCTION_13	WHILE_1	IF_2	CALL_4
0x3fc	            0x746a	                            je 0x40004a8	       267	adlist.c	ELSE_1	FUNCTION_13	WHILE_1	IF_2	IF_3
0x3fe	          0x4889ef	                            mov rdi, rbp	       273	adlist.c	FUNCTION_13	WHILE_1	IF_4	CALL_6
0x401	      0xe800000000	                          call 0x4000446	       273	adlist.c	FUNCTION_13	WHILE_1	IF_4	CALL_6
0x406	          0x4885c0	                           test rax, rax	       273	adlist.c	FUNCTION_13	WHILE_1	IF_4	CALL_6
0x409	            0x7426	                            je 0x4000471	       273	adlist.c	FUNCTION_13	WHILE_1	IF_4	CALL_6
0x40b	          0x4885db	                           test rbx, rbx	       233	adlist.c	FUNCTION_12	IF_1
0x40e	            0x7448	                            je 0x4000498	       233	adlist.c	FUNCTION_12	IF_1
0x410	        0x488b5510	            mov rdx, qword [rbp + 0x10] 	       233	adlist.c	FUNCTION_12	IF_1
0x414	          0x4889d8	                            mov rax, rbx	       233	adlist.c	FUNCTION_12	IF_1
0x417	          0x4885d2	                           test rdx, rdx	       265	adlist.c	ELSE_1	FUNCTION_13	WHILE_1	IF_2
0x41a	        0x488b5808	                mov rbx, qword [rax + 8]	       235	adlist.c	FUNCTION_12	IF_1	IF_2
0x41e	            0x75d0	                           jne 0x4000430	       265	adlist.c	ELSE_1	FUNCTION_13	WHILE_1	IF_2
0x420	        0x488b7010	            mov rsi, qword [rax + 0x10] 	       272	adlist.c	FUNCTION_13	WHILE_1
0x424	          0x4889ef	                            mov rdi, rbp	       273	adlist.c	FUNCTION_13	WHILE_1	IF_4	CALL_6
0x427	      0xe800000000	                          call 0x400046c	       273	adlist.c	FUNCTION_13	WHILE_1	IF_4	CALL_6
0x42c	          0x4885c0	                           test rax, rax	       273	adlist.c	FUNCTION_13	WHILE_1	IF_4	CALL_6
0x42f	            0x75da	                           jne 0x400044b	       273	adlist.c	FUNCTION_13	WHILE_1	IF_4	CALL_6
0x431	          0x4889ef	                            mov rdi, rbp	        78	adlist.c	FUNCTION_3	CALL_1
0x434	      0x4889442408	                mov qword [rsp + 8], rax	        78	adlist.c	FUNCTION_3	CALL_1
0x439	      0xe800000000	                          call 0x400047e	        78	adlist.c	FUNCTION_3	CALL_1
0x43e	          0x4889ef	                            mov rdi, rbp	        79	adlist.c	FUNCTION_3	CALL_2
0x441	      0xe800000000	                          call 0x4000486	        79	adlist.c	FUNCTION_3	CALL_2
0x446	      0x488b442408	                mov rax, qword [rsp + 8]	       275	adlist.c	FUNCTION_13	WHILE_1	IF_4
0x44b	        0x4883c418	                           add rsp, 0x18	       279	adlist.c	FUNCTION_13	ELSE_1
0x44f	              0x5b	                                 pop rbx	       279	adlist.c	FUNCTION_13	ELSE_1
0x450	              0x5d	                                 pop rbp	       279	adlist.c	FUNCTION_13	ELSE_1
0x451	              0xc3	                                     ret	       279	adlist.c	FUNCTION_13	ELSE_1
0x452	    0x660f1f440000	                    nop word [rax + rax]	       279	adlist.c	FUNCTION_13	ELSE_1
0x458	          0x4889e8	                            mov rax, rbp	       233	adlist.c	FUNCTION_12	IF_1
0x45b	        0x4883c418	                           add rsp, 0x18	       279	adlist.c	FUNCTION_13	ELSE_1
0x45f	              0x5b	                                 pop rbx	       279	adlist.c	FUNCTION_13	ELSE_1
0x460	              0x5d	                                 pop rbp	       279	adlist.c	FUNCTION_13	ELSE_1
0x461	              0xc3	                                     ret	       279	adlist.c	FUNCTION_13	ELSE_1
0x462	    0x660f1f440000	                    nop word [rax + rax]	       279	adlist.c	FUNCTION_13	ELSE_1
0x468	          0x4889ef	                            mov rdi, rbp	        78	adlist.c	FUNCTION_3	CALL_1
0x46b	      0xe800000000	                          call 0x40004b0	        78	adlist.c	FUNCTION_3	CALL_1
0x470	          0x4889ef	                            mov rdi, rbp	        79	adlist.c	FUNCTION_3	CALL_2
0x473	      0xe800000000	                          call 0x40004b8	        79	adlist.c	FUNCTION_3	CALL_2
0x478	        0x4883c418	                           add rsp, 0x18	       279	adlist.c	FUNCTION_13	ELSE_1
0x47c	            0x31c0	                            xor eax, eax	       269	adlist.c	ELSE_1	FUNCTION_13	WHILE_1	IF_2	IF_3
0x47e	              0x5b	                                 pop rbx	       279	adlist.c	FUNCTION_13	ELSE_1
0x47f	              0x5d	                                 pop rbp	       279	adlist.c	FUNCTION_13	ELSE_1
0x480	              0xc3	                                     ret	       279	adlist.c	FUNCTION_13	ELSE_1
0x481	            0x31c0	                            xor eax, eax	       257	adlist.c	ELSE_1	FUNCTION_13	IF_1
0x483	            0xebd6	                           jmp 0x400049b	       257	adlist.c	ELSE_1	FUNCTION_13	IF_1
listCreate	IF,1:DO,0:FOR,0:WHILE,0:CALL,1:functions,0:ELSE,0:SWITCH,0	13
0x0	        0x4883ec08	                              sub rsp, 8	        42	adlist.c	FUNCTION_1
0x4	      0xbf30000000	                           mov edi, 0x30	        45	adlist.c	FUNCTION_1	IF_1	CALL_1
0x9	      0xe800000000	                          call 0x400004e	        45	adlist.c	FUNCTION_1	IF_1	CALL_1
0xe	          0x4885c0	                           test rax, rax	        45	adlist.c	FUNCTION_1	IF_1	CALL_1
0x11	            0x742f	                            je 0x4000082	        45	adlist.c	FUNCTION_1	IF_1	CALL_1
0x13	    0x48c740080000	                  mov qword [rax + 8], 0	        47	adlist.c	FUNCTION_1
0x1b	    0x48c700000000	                      mov qword [rax], 0	        47	adlist.c	FUNCTION_1
0x22	    0x48c740280000	               mov qword [rax + 0x28], 0	        48	adlist.c	FUNCTION_1
0x2a	    0x48c740100000	               mov qword [rax + 0x10], 0	        49	adlist.c	FUNCTION_1
0x32	    0x48c740180000	               mov qword [rax + 0x18], 0	        50	adlist.c	FUNCTION_1
0x3a	    0x48c740200000	               mov qword [rax + 0x20], 0	        51	adlist.c	FUNCTION_1
0x42	        0x4883c408	                              add rsp, 8	        53	adlist.c	FUNCTION_1
0x46	              0xc3	                                     ret	        53	adlist.c	FUNCTION_1
