match_func_rec	CALL,3:FOR,0:functions,0:IF,1:SWITCH,0:ELSE,0:DO,0:WHILE,0	47
0x3bc	              0x55	                                push rbp	       116	xemit.c	FUNCTION_5
0x3bd	          0x4889e5	                            mov rbp, rsp	       116	xemit.c	FUNCTION_5
0x3c0	        0x4883ec50	                           sub rsp, 0x50	       116	xemit.c	FUNCTION_5
0x3c4	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       116	xemit.c	FUNCTION_5
0x3c8	        0x488975d0	             mov qword [rbp - 0x30], rsi	       116	xemit.c	FUNCTION_5
0x3cc	        0x488955c8	             mov qword [rbp - 0x38], rdx	       116	xemit.c	FUNCTION_5
0x3d0	        0x48894dc0	             mov qword [rbp - 0x40], rcx	       116	xemit.c	FUNCTION_5
0x3d4	        0x4c8945b8	              mov qword [rbp - 0x48], r8	       116	xemit.c	FUNCTION_5
0x3d8	    0x64488b042528	                mov rax, qword fs:[0x28]	       116	xemit.c	FUNCTION_5
0x3e1	        0x488945f8	                mov qword [rbp - 8], rax	       116	xemit.c	FUNCTION_5
0x3e5	            0x31c0	                            xor eax, eax	       116	xemit.c	FUNCTION_5
0x3e7	        0x488d55e8	                   lea rdx, [rbp - 0x18]	       118	xemit.c	FUNCTION_5	CALL_1
0x3eb	        0x488b4dc8	             mov rcx, qword [rbp - 0x38]	       118	xemit.c	FUNCTION_5	CALL_1
0x3ef	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       118	xemit.c	FUNCTION_5	CALL_1
0x3f3	          0x4889ce	                            mov rsi, rcx	       118	xemit.c	FUNCTION_5	CALL_1
0x3f6	          0x4889c7	                            mov rdi, rax	       118	xemit.c	FUNCTION_5	CALL_1
0x3f9	      0xe802fcffff	                    call sym.xdl_get_rec	       118	xemit.c	FUNCTION_5	CALL_1
0x3fe	        0x488945f0	             mov qword [rbp - 0x10], rax	       118	xemit.c	FUNCTION_5	CALL_1
0x402	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       119	xemit.c	FUNCTION_5	IF_1
0x406	        0x488b4018	            mov rax, qword [rax + 0x18] 	       119	xemit.c	FUNCTION_5	IF_1
0x40a	          0x4885c0	                           test rax, rax	       119	xemit.c	FUNCTION_5	IF_1
0x40d	            0x7525	                           jne 0x4000474	       119	xemit.c	FUNCTION_5	IF_1
0x40f	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       120	xemit.c	FUNCTION_5	CALL_2
0x413	        0x488b7820	            mov rdi, qword [rax + 0x20] 	       120	xemit.c	FUNCTION_5	CALL_2
0x417	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       120	xemit.c	FUNCTION_5	CALL_2
0x41b	        0x488b4db8	             mov rcx, qword [rbp - 0x48]	       120	xemit.c	FUNCTION_5	CALL_2
0x41f	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	       120	xemit.c	FUNCTION_5	CALL_2
0x423	        0x488b75f0	             mov rsi, qword [rbp - 0x10]	       120	xemit.c	FUNCTION_5	CALL_2
0x427	          0x4989f8	                             mov r8, rdi	       120	xemit.c	FUNCTION_5	CALL_2
0x42a	          0x4889c7	                            mov rdi, rax	       120	xemit.c	FUNCTION_5	CALL_2
0x42d	      0xe8aefeffff	                         call sym.def_ff	       120	xemit.c	FUNCTION_5	CALL_2
0x432	            0xeb22	                           jmp 0x4000496	       120	xemit.c	FUNCTION_5	CALL_2
0x434	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       121	xemit.c	FUNCTION_5	CALL_3
0x438	        0x488b4018	            mov rax, qword [rax + 0x18] 	       121	xemit.c	FUNCTION_5	CALL_3
0x43c	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	       121	xemit.c	FUNCTION_5	CALL_3
0x440	        0x4c8b4220	              mov r8, qword [rdx + 0x20]	       121	xemit.c	FUNCTION_5	CALL_3
0x444	        0x488b7de8	             mov rdi, qword [rbp - 0x18]	       121	xemit.c	FUNCTION_5	CALL_3
0x448	        0x488b4db8	             mov rcx, qword [rbp - 0x48]	       121	xemit.c	FUNCTION_5	CALL_3
0x44c	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	       121	xemit.c	FUNCTION_5	CALL_3
0x450	        0x488b75f0	             mov rsi, qword [rbp - 0x10]	       121	xemit.c	FUNCTION_5	CALL_3
0x454	            0xffd0	                                call rax	       121	xemit.c	FUNCTION_5	CALL_3
0x456	        0x488b75f8	                mov rsi, qword [rbp - 8]	       122	xemit.c	FUNCTION_5
0x45a	    0x644833342528	                xor rsi, qword fs:[0x28]	       122	xemit.c	FUNCTION_5
0x463	            0x7405	                            je 0x40004aa	       122	xemit.c	FUNCTION_5
0x465	      0xe800000000	                          call 0x40004aa	       122	xemit.c	FUNCTION_5
0x46a	              0xc9	                                   leave	       122	xemit.c	FUNCTION_5
0x46b	              0xc3	                                     ret	       122	xemit.c	FUNCTION_5
xdl_emit_record	CALL,3:FOR,0:functions,0:IF,1:SWITCH,0:ELSE,0:DO,0:WHILE,0	40
0x4d	              0x55	                                push rbp	        33	xemit.c	FUNCTION_2
0x4e	          0x4889e5	                            mov rbp, rsp	        33	xemit.c	FUNCTION_2
0x51	        0x4883ec40	                           sub rsp, 0x40	        33	xemit.c	FUNCTION_2
0x55	        0x48897dd8	             mov qword [rbp - 0x28], rdi	        33	xemit.c	FUNCTION_2
0x59	        0x488975d0	             mov qword [rbp - 0x30], rsi	        33	xemit.c	FUNCTION_2
0x5d	        0x488955c8	             mov qword [rbp - 0x38], rdx	        33	xemit.c	FUNCTION_2
0x61	        0x48894dc0	             mov qword [rbp - 0x40], rcx	        33	xemit.c	FUNCTION_2
0x65	    0x64488b042528	                mov rax, qword fs:[0x28]	        33	xemit.c	FUNCTION_2
0x6e	        0x488945f8	                mov qword [rbp - 8], rax	        33	xemit.c	FUNCTION_2
0x72	            0x31c0	                            xor eax, eax	        33	xemit.c	FUNCTION_2
0x74	        0x488b45c8	             mov rax, qword [rbp - 0x38]	        34	xemit.c	FUNCTION_2	CALL_1
0x78	          0x4889c7	                            mov rdi, rax	        34	xemit.c	FUNCTION_2	CALL_1
0x7b	      0xe800000000	                          call 0x40000c0	        34	xemit.c	FUNCTION_2	CALL_1
0x80	        0x488945e8	             mov qword [rbp - 0x18], rax	        34	xemit.c	FUNCTION_2	CALL_1
0x84	        0x488d55e0	                   lea rdx, [rbp - 0x20]	        37	xemit.c	FUNCTION_2	CALL_2
0x88	        0x488b4dd0	             mov rcx, qword [rbp - 0x30]	        37	xemit.c	FUNCTION_2	CALL_2
0x8c	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        37	xemit.c	FUNCTION_2	CALL_2
0x90	          0x4889ce	                            mov rsi, rcx	        37	xemit.c	FUNCTION_2	CALL_2
0x93	          0x4889c7	                            mov rdi, rax	        37	xemit.c	FUNCTION_2	CALL_2
0x96	      0xe865ffffff	                    call sym.xdl_get_rec	        37	xemit.c	FUNCTION_2	CALL_2
0x9b	        0x488945f0	             mov qword [rbp - 0x10], rax	        37	xemit.c	FUNCTION_2	CALL_2
0x9f	        0x488b45e0	             mov rax, qword [rbp - 0x20]	        38	xemit.c	FUNCTION_2	IF_1	CALL_3
0xa3	        0x488b7dc0	             mov rdi, qword [rbp - 0x40]	        38	xemit.c	FUNCTION_2	IF_1	CALL_3
0xa7	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	        38	xemit.c	FUNCTION_2	IF_1	CALL_3
0xab	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	        38	xemit.c	FUNCTION_2	IF_1	CALL_3
0xaf	        0x488b75f0	             mov rsi, qword [rbp - 0x10]	        38	xemit.c	FUNCTION_2	IF_1	CALL_3
0xb3	          0x4989f8	                             mov r8, rdi	        38	xemit.c	FUNCTION_2	IF_1	CALL_3
0xb6	          0x4889c7	                            mov rdi, rax	        38	xemit.c	FUNCTION_2	IF_1	CALL_3
0xb9	      0xe800000000	                          call 0x40000fe	        38	xemit.c	FUNCTION_2	IF_1	CALL_3
0xbe	            0x85c0	                           test eax, eax	        38	xemit.c	FUNCTION_2	IF_1	CALL_3
0xc0	            0x7907	                           jns 0x4000109	        38	xemit.c	FUNCTION_2	IF_1	CALL_3
0xc2	      0xb8ffffffff	                     mov eax, 0xffffffff	        40	xemit.c	FUNCTION_2	IF_1
0xc7	            0xeb05	                           jmp 0x400010e	        40	xemit.c	FUNCTION_2	IF_1
0xc9	      0xb800000000	                              mov eax, 0	        43	xemit.c	FUNCTION_2
0xce	        0x488b75f8	                mov rsi, qword [rbp - 8]	        44	xemit.c	FUNCTION_2
0xd2	    0x644833342528	                xor rsi, qword fs:[0x28]	        44	xemit.c	FUNCTION_2
0xdb	            0x7405	                            je 0x4000122	        44	xemit.c	FUNCTION_2
0xdd	      0xe800000000	                          call 0x4000122	        44	xemit.c	FUNCTION_2
0xe2	              0xc9	                                   leave	        44	xemit.c	FUNCTION_2
0xe3	              0xc3	                                     ret	        44	xemit.c	FUNCTION_2
xdl_get_rec	CALL,0:FOR,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:WHILE,0	23
0x0	              0x55	                                push rbp	        25	xemit.c	FUNCTION_1
0x1	          0x4889e5	                            mov rbp, rsp	        25	xemit.c	FUNCTION_1
0x4	        0x48897df8	                mov qword [rbp - 8], rdi	        25	xemit.c	FUNCTION_1
0x8	        0x488975f0	             mov qword [rbp - 0x10], rsi	        25	xemit.c	FUNCTION_1
0xc	        0x488955e8	             mov qword [rbp - 0x18], rdx	        25	xemit.c	FUNCTION_1
0x10	        0x488b45f8	                mov rax, qword [rbp - 8]	        27	xemit.c	FUNCTION_1
0x14	        0x488b4060	            mov rax, qword [rax + 0x60] 	        27	xemit.c	FUNCTION_1
0x18	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	        27	xemit.c	FUNCTION_1
0x1c	        0x48c1e203	                              shl rdx, 3	        27	xemit.c	FUNCTION_1
0x20	          0x4801d0	                            add rax, rdx	        27	xemit.c	FUNCTION_1
0x23	          0x488b00	                    mov rax, qword [rax]	        27	xemit.c	FUNCTION_1
0x26	        0x488b5008	                mov rdx, qword [rax + 8]	        27	xemit.c	FUNCTION_1
0x2a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        27	xemit.c	FUNCTION_1
0x2e	          0x488910	                    mov qword [rax], rdx	        27	xemit.c	FUNCTION_1
0x31	        0x488b45f8	                mov rax, qword [rbp - 8]	        29	xemit.c	FUNCTION_1
0x35	        0x488b4060	            mov rax, qword [rax + 0x60] 	        29	xemit.c	FUNCTION_1
0x39	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	        29	xemit.c	FUNCTION_1
0x3d	        0x48c1e203	                              shl rdx, 3	        29	xemit.c	FUNCTION_1
0x41	          0x4801d0	                            add rax, rdx	        29	xemit.c	FUNCTION_1
0x44	          0x488b00	                    mov rax, qword [rax]	        29	xemit.c	FUNCTION_1
0x47	        0x488b4010	            mov rax, qword [rax + 0x10] 	        29	xemit.c	FUNCTION_1
0x4b	              0x5d	                                 pop rbp	        30	xemit.c	FUNCTION_1
0x4c	              0xc3	                                     ret	        30	xemit.c	FUNCTION_1
xdl_get_hunk	CALL,0:FOR,2:functions,0:IF,7:SWITCH,0:ELSE,4:DO,0:WHILE,0	142
0xe4	              0x55	                                push rbp	        53	xemit.c	FUNCTION_3
0xe5	          0x4889e5	                            mov rbp, rsp	        53	xemit.c	FUNCTION_3
0xe8	        0x48897db8	             mov qword [rbp - 0x48], rdi	        53	xemit.c	FUNCTION_3
0xec	        0x488975b0	             mov qword [rbp - 0x50], rsi	        53	xemit.c	FUNCTION_3
0xf0	        0x488b45b0	             mov rax, qword [rbp - 0x50]	        55	xemit.c	FUNCTION_3
0xf4	          0x488b00	                    mov rax, qword [rax]	        55	xemit.c	FUNCTION_3
0xf7	        0x488d1400	                    lea rdx, [rax + rax]	        55	xemit.c	FUNCTION_3
0xfb	        0x488b45b0	             mov rax, qword [rbp - 0x50]	        55	xemit.c	FUNCTION_3
0xff	        0x488b4008	                mov rax, qword [rax + 8]	        55	xemit.c	FUNCTION_3
0x103	          0x4801d0	                            add rax, rdx	        55	xemit.c	FUNCTION_3
0x106	        0x488945e8	             mov qword [rbp - 0x18], rax	        55	xemit.c	FUNCTION_3
0x10a	        0x488b45b0	             mov rax, qword [rbp - 0x50]	        56	xemit.c	FUNCTION_3
0x10e	          0x488b00	                    mov rax, qword [rax]	        56	xemit.c	FUNCTION_3
0x111	        0x488945f0	             mov qword [rbp - 0x10], rax	        56	xemit.c	FUNCTION_3
0x115	    0x48c745e00000	               mov qword [rbp - 0x20], 0	        57	xemit.c	FUNCTION_3
0x11d	        0x488b45b8	             mov rax, qword [rbp - 0x48]	        60	xemit.c	FUNCTION_3	FOR_1
0x121	          0x488b00	                    mov rax, qword [rax]	        60	xemit.c	FUNCTION_3	FOR_1
0x124	        0x488945d0	             mov qword [rbp - 0x30], rax	        60	xemit.c	FUNCTION_3	FOR_1
0x128	            0xeb4f	                           jmp 0x40001b9	        60	xemit.c	FUNCTION_3	FOR_1
0x12a	        0x488b45d0	             mov rax, qword [rbp - 0x30]	        61	xemit.c	FUNCTION_3	FOR_1
0x12e	          0x488b00	                    mov rax, qword [rax]	        61	xemit.c	FUNCTION_3	FOR_1
0x131	        0x488945c8	             mov qword [rbp - 0x38], rax	        61	xemit.c	FUNCTION_3	FOR_1
0x135	      0x48837dc800	               cmp qword [rbp - 0x38], 0	        63	xemit.c	FUNCTION_3	FOR_1	IF_1
0x13a	            0x7427	                            je 0x40001a3	        63	xemit.c	FUNCTION_3	FOR_1	IF_1
0x13c	        0x488b45c8	             mov rax, qword [rbp - 0x38]	        64	xemit.c	FUNCTION_3	FOR_1	IF_1
0x140	        0x488b5008	                mov rdx, qword [rax + 8]	        64	xemit.c	FUNCTION_3	FOR_1	IF_1
0x144	        0x488b45d0	             mov rax, qword [rbp - 0x30]	        64	xemit.c	FUNCTION_3	FOR_1	IF_1
0x148	        0x488b4808	                mov rcx, qword [rax + 8]	        64	xemit.c	FUNCTION_3	FOR_1	IF_1
0x14c	        0x488b45d0	             mov rax, qword [rbp - 0x30]	        64	xemit.c	FUNCTION_3	FOR_1	IF_1
0x150	        0x488b4018	            mov rax, qword [rax + 0x18] 	        64	xemit.c	FUNCTION_3	FOR_1	IF_1
0x154	          0x4801c8	                            add rax, rcx	        64	xemit.c	FUNCTION_3	FOR_1	IF_1
0x157	          0x4829c2	                            sub rdx, rax	        64	xemit.c	FUNCTION_3	FOR_1	IF_1
0x15a	          0x4889d0	                            mov rax, rdx	        64	xemit.c	FUNCTION_3	FOR_1	IF_1
0x15d	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	        63	xemit.c	FUNCTION_3	FOR_1	IF_1
0x161	            0x7c0b	                            jl 0x40001ae	        63	xemit.c	FUNCTION_3	FOR_1	IF_1
0x163	        0x488b45b8	             mov rax, qword [rbp - 0x48]	        65	xemit.c	FUNCTION_3	FOR_1	IF_1
0x167	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	        65	xemit.c	FUNCTION_3	FOR_1	IF_1
0x16b	          0x488910	                    mov qword [rax], rdx	        65	xemit.c	FUNCTION_3	FOR_1	IF_1
0x16e	        0x488b45d0	             mov rax, qword [rbp - 0x30]	        60	xemit.c	FUNCTION_3	FOR_1
0x172	          0x488b00	                    mov rax, qword [rax]	        60	xemit.c	FUNCTION_3	FOR_1
0x175	        0x488945d0	             mov qword [rbp - 0x30], rax	        60	xemit.c	FUNCTION_3	FOR_1
0x179	      0x48837dd000	               cmp qword [rbp - 0x30], 0	        60	xemit.c	FUNCTION_3	FOR_1
0x17e	            0x740b	                            je 0x40001cb	        60	xemit.c	FUNCTION_3	FOR_1
0x180	        0x488b45d0	             mov rax, qword [rbp - 0x30]	        60	xemit.c	FUNCTION_3	FOR_1
0x184	          0x8b4028	            mov eax, dword [rax + 0x28] 	        60	xemit.c	FUNCTION_3	FOR_1
0x187	            0x85c0	                           test eax, eax	        60	xemit.c	FUNCTION_3	FOR_1
0x189	            0x759f	                           jne 0x400016a	        60	xemit.c	FUNCTION_3	FOR_1
0x18b	        0x488b45b8	             mov rax, qword [rbp - 0x48]	        68	xemit.c	FUNCTION_3	IF_2
0x18f	          0x488b00	                    mov rax, qword [rax]	        68	xemit.c	FUNCTION_3	IF_2
0x192	          0x4885c0	                           test rax, rax	        68	xemit.c	FUNCTION_3	IF_2
0x195	            0x750a	                           jne 0x40001e1	        68	xemit.c	FUNCTION_3	IF_2
0x197	      0xb800000000	                              mov eax, 0	        69	xemit.c	FUNCTION_3	IF_2
0x19c	      0xe93d010000	                           jmp 0x400031e	        69	xemit.c	FUNCTION_3	IF_2
0x1a1	        0x488b45b8	             mov rax, qword [rbp - 0x48]	        71	xemit.c	FUNCTION_3
0x1a5	          0x488b00	                    mov rax, qword [rax]	        71	xemit.c	FUNCTION_3
0x1a8	        0x488945d8	             mov qword [rbp - 0x28], rax	        71	xemit.c	FUNCTION_3
0x1ac	        0x488b45b8	             mov rax, qword [rbp - 0x48]	        73	xemit.c	FUNCTION_3	FOR_2
0x1b0	          0x488b00	                    mov rax, qword [rax]	        73	xemit.c	FUNCTION_3	FOR_2
0x1b3	        0x488945d0	             mov qword [rbp - 0x30], rax	        73	xemit.c	FUNCTION_3	FOR_2
0x1b7	        0x488b45d0	             mov rax, qword [rbp - 0x30]	        73	xemit.c	FUNCTION_3	FOR_2
0x1bb	          0x488b00	                    mov rax, qword [rax]	        73	xemit.c	FUNCTION_3	FOR_2
0x1be	        0x488945c8	             mov qword [rbp - 0x38], rax	        73	xemit.c	FUNCTION_3	FOR_2
0x1c2	      0xe905010000	                           jmp 0x400030c	        73	xemit.c	FUNCTION_3	FOR_2
0x1c7	        0x488b45c8	             mov rax, qword [rbp - 0x38]	        74	xemit.c	FUNCTION_3	FOR_2
0x1cb	        0x488b5008	                mov rdx, qword [rax + 8]	        74	xemit.c	FUNCTION_3	FOR_2
0x1cf	        0x488b45d0	             mov rax, qword [rbp - 0x30]	        74	xemit.c	FUNCTION_3	FOR_2
0x1d3	        0x488b4808	                mov rcx, qword [rax + 8]	        74	xemit.c	FUNCTION_3	FOR_2
0x1d7	        0x488b45d0	             mov rax, qword [rbp - 0x30]	        74	xemit.c	FUNCTION_3	FOR_2
0x1db	        0x488b4018	            mov rax, qword [rax + 0x18] 	        74	xemit.c	FUNCTION_3	FOR_2
0x1df	          0x4801c8	                            add rax, rcx	        74	xemit.c	FUNCTION_3	FOR_2
0x1e2	          0x4829c2	                            sub rdx, rax	        74	xemit.c	FUNCTION_3	FOR_2
0x1e5	          0x4889d0	                            mov rax, rdx	        74	xemit.c	FUNCTION_3	FOR_2
0x1e8	        0x488945f8	                mov qword [rbp - 8], rax	        74	xemit.c	FUNCTION_3	FOR_2
0x1ec	        0x488b45f8	                mov rax, qword [rbp - 8]	        75	xemit.c	FUNCTION_3	FOR_2	IF_3
0x1f0	        0x483b45e8	             cmp rax, qword [rbp - 0x18]	        75	xemit.c	FUNCTION_3	FOR_2	IF_3
0x1f4	     0xf8fdf000000	                            jg 0x4000319	        75	xemit.c	FUNCTION_3	FOR_2	IF_3
0x1fa	        0x488b45f8	                mov rax, qword [rbp - 8]	        78	xemit.c	FUNCTION_3	FOR_2	IF_4
0x1fe	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	        78	xemit.c	FUNCTION_3	FOR_2	IF_4
0x202	            0x7d2a	                           jge 0x400026e	        78	xemit.c	FUNCTION_3	FOR_2	IF_4
0x204	        0x488b45c8	             mov rax, qword [rbp - 0x38]	        78	xemit.c	FUNCTION_3	FOR_2	IF_4
0x208	          0x8b4028	            mov eax, dword [rax + 0x28] 	        78	xemit.c	FUNCTION_3	FOR_2	IF_4
0x20b	            0x85c0	                           test eax, eax	        78	xemit.c	FUNCTION_3	FOR_2	IF_4
0x20d	            0x740a	                            je 0x4000259	        78	xemit.c	FUNCTION_3	FOR_2	IF_4
0x20f	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        78	xemit.c	FUNCTION_3	FOR_2	IF_4
0x213	        0x483b45d0	             cmp rax, qword [rbp - 0x30]	        78	xemit.c	FUNCTION_3	FOR_2	IF_4
0x217	            0x7515	                           jne 0x400026e	        78	xemit.c	FUNCTION_3	FOR_2	IF_4
0x219	        0x488b45c8	             mov rax, qword [rbp - 0x38]	        79	xemit.c	FUNCTION_3	FOR_2	IF_4
0x21d	        0x488945d8	             mov qword [rbp - 0x28], rax	        79	xemit.c	FUNCTION_3	FOR_2	IF_4
0x221	    0x48c745e00000	               mov qword [rbp - 0x20], 0	        80	xemit.c	FUNCTION_3	FOR_2	IF_4
0x229	      0xe98b000000	                           jmp 0x40002f9	        80	xemit.c	FUNCTION_3	FOR_2	IF_4
0x22e	        0x488b45f8	                mov rax, qword [rbp - 8]	        81	xemit.c	FUNCTION_3	FOR_2	ELSE_1	IF_5
0x232	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	        81	xemit.c	FUNCTION_3	FOR_2	ELSE_1	IF_5
0x236	            0x7d19	                           jge 0x4000291	        81	xemit.c	FUNCTION_3	FOR_2	ELSE_1	IF_5
0x238	        0x488b45c8	             mov rax, qword [rbp - 0x38]	        81	xemit.c	FUNCTION_3	FOR_2	ELSE_1	IF_5
0x23c	          0x8b4028	            mov eax, dword [rax + 0x28] 	        81	xemit.c	FUNCTION_3	FOR_2	ELSE_1	IF_5
0x23f	            0x85c0	                           test eax, eax	        81	xemit.c	FUNCTION_3	FOR_2	ELSE_1	IF_5
0x241	            0x740e	                            je 0x4000291	        81	xemit.c	FUNCTION_3	FOR_2	ELSE_1	IF_5
0x243	        0x488b45c8	             mov rax, qword [rbp - 0x38]	        82	xemit.c	FUNCTION_3	FOR_2	ELSE_1	IF_5
0x247	        0x488b4020	            mov rax, qword [rax + 0x20] 	        82	xemit.c	FUNCTION_3	FOR_2	ELSE_1	IF_5
0x24b	        0x480145e0	            add qword [rbp - 0x20], rax 	        82	xemit.c	FUNCTION_3	FOR_2	ELSE_1	IF_5
0x24f	            0xeb68	                           jmp 0x40002f9	        82	xemit.c	FUNCTION_3	FOR_2	ELSE_1	IF_5
0x251	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        83	xemit.c	FUNCTION_3	FOR_2	ELSE_2	IF_6
0x255	        0x483b45d0	             cmp rax, qword [rbp - 0x30]	        83	xemit.c	FUNCTION_3	FOR_2	ELSE_2	IF_6
0x259	            0x7435	                            je 0x40002d0	        83	xemit.c	FUNCTION_3	FOR_2	ELSE_2	IF_6
0x25b	        0x488b45c8	             mov rax, qword [rbp - 0x38]	        84	xemit.c	FUNCTION_3	FOR_2	ELSE_2	IF_6
0x25f	        0x488b4008	                mov rax, qword [rax + 8]	        84	xemit.c	FUNCTION_3	FOR_2	ELSE_2	IF_6
0x263	          0x4889c2	                            mov rdx, rax	        84	xemit.c	FUNCTION_3	FOR_2	ELSE_2	IF_6
0x266	        0x488b45e0	             mov rax, qword [rbp - 0x20]	        84	xemit.c	FUNCTION_3	FOR_2	ELSE_2	IF_6
0x26a	        0x488d0c02	                    lea rcx, [rdx + rax]	        84	xemit.c	FUNCTION_3	FOR_2	ELSE_2	IF_6
0x26e	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        84	xemit.c	FUNCTION_3	FOR_2	ELSE_2	IF_6
0x272	        0x488b5008	                mov rdx, qword [rax + 8]	        84	xemit.c	FUNCTION_3	FOR_2	ELSE_2	IF_6
0x276	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        84	xemit.c	FUNCTION_3	FOR_2	ELSE_2	IF_6
0x27a	        0x488b4018	            mov rax, qword [rax + 0x18] 	        84	xemit.c	FUNCTION_3	FOR_2	ELSE_2	IF_6
0x27e	          0x4801d0	                            add rax, rdx	        84	xemit.c	FUNCTION_3	FOR_2	ELSE_2	IF_6
0x281	          0x4829c1	                            sub rcx, rax	        84	xemit.c	FUNCTION_3	FOR_2	ELSE_2	IF_6
0x284	          0x4889ca	                            mov rdx, rcx	        84	xemit.c	FUNCTION_3	FOR_2	ELSE_2	IF_6
0x287	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        84	xemit.c	FUNCTION_3	FOR_2	ELSE_2	IF_6
0x28b	          0x4839c2	                            cmp rdx, rax	        83	xemit.c	FUNCTION_3	FOR_2	ELSE_2	IF_6
0x28e	            0x774a	                            ja 0x400031a	        83	xemit.c	FUNCTION_3	FOR_2	ELSE_2	IF_6
0x290	        0x488b45c8	             mov rax, qword [rbp - 0x38]	        86	xemit.c	FUNCTION_3	FOR_2	ELSE_3	IF_7
0x294	          0x8b4028	            mov eax, dword [rax + 0x28] 	        86	xemit.c	FUNCTION_3	FOR_2	ELSE_3	IF_7
0x297	            0x85c0	                           test eax, eax	        86	xemit.c	FUNCTION_3	FOR_2	ELSE_3	IF_7
0x299	            0x7512	                           jne 0x40002ed	        86	xemit.c	FUNCTION_3	FOR_2	ELSE_3	IF_7
0x29b	        0x488b45c8	             mov rax, qword [rbp - 0x38]	        87	xemit.c	FUNCTION_3	FOR_2	ELSE_3	IF_7
0x29f	        0x488945d8	             mov qword [rbp - 0x28], rax	        87	xemit.c	FUNCTION_3	FOR_2	ELSE_3	IF_7
0x2a3	    0x48c745e00000	               mov qword [rbp - 0x20], 0	        88	xemit.c	FUNCTION_3	FOR_2	ELSE_3	IF_7
0x2ab	            0xeb0c	                           jmp 0x40002f9	        88	xemit.c	FUNCTION_3	FOR_2	ELSE_3	IF_7
0x2ad	        0x488b45c8	             mov rax, qword [rbp - 0x38]	        90	xemit.c	FUNCTION_3	FOR_2	ELSE_4
0x2b1	        0x488b4020	            mov rax, qword [rax + 0x20] 	        90	xemit.c	FUNCTION_3	FOR_2	ELSE_4
0x2b5	        0x480145e0	            add qword [rbp - 0x20], rax 	        90	xemit.c	FUNCTION_3	FOR_2	ELSE_4
0x2b9	        0x488b45c8	             mov rax, qword [rbp - 0x38]	        73	xemit.c	FUNCTION_3	FOR_2
0x2bd	        0x488945d0	             mov qword [rbp - 0x30], rax	        73	xemit.c	FUNCTION_3	FOR_2
0x2c1	        0x488b45c8	             mov rax, qword [rbp - 0x38]	        73	xemit.c	FUNCTION_3	FOR_2
0x2c5	          0x488b00	                    mov rax, qword [rax]	        73	xemit.c	FUNCTION_3	FOR_2
0x2c8	        0x488945c8	             mov qword [rbp - 0x38], rax	        73	xemit.c	FUNCTION_3	FOR_2
0x2cc	      0x48837dc800	               cmp qword [rbp - 0x38], 0	        73	xemit.c	FUNCTION_3	FOR_2
0x2d1	     0xf85f0feffff	                           jne 0x4000207	        73	xemit.c	FUNCTION_3	FOR_2
0x2d7	            0xeb01	                           jmp 0x400031a	        73	xemit.c	FUNCTION_3	FOR_2
0x2d9	              0x90	                                     nop	        76	xemit.c	FUNCTION_3	FOR_2	IF_3
0x2da	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        94	xemit.c	FUNCTION_3
0x2de	              0x5d	                                 pop rbp	        95	xemit.c	FUNCTION_3
0x2df	              0xc3	                                     ret	        95	xemit.c	FUNCTION_3
def_ff	CALL,3:FOR,0:functions,0:IF,2:SWITCH,0:ELSE,0:DO,0:WHILE,1	65
0x2e0	              0x55	                                push rbp	        99	xemit.c	FUNCTION_4
0x2e1	          0x4889e5	                            mov rbp, rsp	        99	xemit.c	FUNCTION_4
0x2e4	        0x4883ec30	                           sub rsp, 0x30	        99	xemit.c	FUNCTION_4
0x2e8	        0x48897df8	                mov qword [rbp - 8], rdi	        99	xemit.c	FUNCTION_4
0x2ec	        0x488975f0	             mov qword [rbp - 0x10], rsi	        99	xemit.c	FUNCTION_4
0x2f0	        0x488955e8	             mov qword [rbp - 0x18], rdx	        99	xemit.c	FUNCTION_4
0x2f4	        0x48894de0	             mov qword [rbp - 0x20], rcx	        99	xemit.c	FUNCTION_4
0x2f8	        0x4c8945d8	              mov qword [rbp - 0x28], r8	        99	xemit.c	FUNCTION_4
0x2fc	      0x48837df000	               cmp qword [rbp - 0x10], 0	       100	xemit.c	FUNCTION_4	IF_1
0x301	     0xf8eac000000	                           jle 0x40003f3	       100	xemit.c	FUNCTION_4	IF_1
0x307	      0xe800000000	                          call 0x400034c	       101	xemit.c	FUNCTION_4	IF_1	CALL_1
0x30c	          0x488b10	                    mov rdx, qword [rax]	       101	xemit.c	FUNCTION_4	IF_1	CALL_1
0x30f	        0x488b45f8	                mov rax, qword [rbp - 8]	       101	xemit.c	FUNCTION_4	IF_1	CALL_1
0x313	           0xfb600	                   movzx eax, byte [rax]	       101	xemit.c	FUNCTION_4	IF_1	CALL_1
0x316	           0xfb6c0	                           movzx eax, al	       101	xemit.c	FUNCTION_4	IF_1	CALL_1
0x319	          0x4801c0	                            add rax, rax	       101	xemit.c	FUNCTION_4	IF_1	CALL_1
0x31c	          0x4801d0	                            add rax, rdx	       101	xemit.c	FUNCTION_4	IF_1	CALL_1
0x31f	           0xfb700	                   movzx eax, word [rax]	       101	xemit.c	FUNCTION_4	IF_1	CALL_1
0x322	           0xfb7c0	                           movzx eax, ax	       101	xemit.c	FUNCTION_4	IF_1	CALL_1
0x325	      0x2500040000	                          and eax, 0x400	       101	xemit.c	FUNCTION_4	IF_1	CALL_1
0x32a	            0x85c0	                           test eax, eax	       100	xemit.c	FUNCTION_4	IF_1
0x32c	            0x7516	                           jne 0x4000384	       100	xemit.c	FUNCTION_4	IF_1
0x32e	        0x488b45f8	                mov rax, qword [rbp - 8]	       102	xemit.c	FUNCTION_4	IF_1
0x332	           0xfb600	                   movzx eax, byte [rax]	       102	xemit.c	FUNCTION_4	IF_1
0x335	            0x3c5f	                            cmp al, 0x5f	       101	xemit.c	FUNCTION_4	IF_1	CALL_1
0x337	            0x740b	                            je 0x4000384	       101	xemit.c	FUNCTION_4	IF_1	CALL_1
0x339	        0x488b45f8	                mov rax, qword [rbp - 8]	       103	xemit.c	FUNCTION_4	IF_1
0x33d	           0xfb600	                   movzx eax, byte [rax]	       103	xemit.c	FUNCTION_4	IF_1
0x340	            0x3c24	                            cmp al, 0x24	       102	xemit.c	FUNCTION_4	IF_1
0x342	            0x756f	                           jne 0x40003f3	       102	xemit.c	FUNCTION_4	IF_1
0x344	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       104	xemit.c	FUNCTION_4	IF_1	IF_2
0x348	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	       104	xemit.c	FUNCTION_4	IF_1	IF_2
0x34c	            0x7e0f	                           jle 0x400039d	       104	xemit.c	FUNCTION_4	IF_1	IF_2
0x34e	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       105	xemit.c	FUNCTION_4	IF_1	IF_2
0x352	        0x488945f0	             mov qword [rbp - 0x10], rax	       105	xemit.c	FUNCTION_4	IF_1	IF_2
0x356	            0xeb05	                           jmp 0x400039d	       106	xemit.c	FUNCTION_4	IF_1	WHILE_1	CALL_2
0x358	      0x48836df001	               sub qword [rbp - 0x10], 1	       107	xemit.c	FUNCTION_4	IF_1	WHILE_1
0x35d	      0x48837df000	               cmp qword [rbp - 0x10], 0	       106	xemit.c	FUNCTION_4	IF_1	WHILE_1	CALL_2
0x362	            0x7e32	                           jle 0x40003d6	       106	xemit.c	FUNCTION_4	IF_1	WHILE_1	CALL_2
0x364	      0xe800000000	                          call 0x40003a9	       106	xemit.c	FUNCTION_4	IF_1	WHILE_1	CALL_2
0x369	          0x488b00	                    mov rax, qword [rax]	       106	xemit.c	FUNCTION_4	IF_1	WHILE_1	CALL_2
0x36c	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       106	xemit.c	FUNCTION_4	IF_1	WHILE_1	CALL_2
0x370	        0x488d4aff	                      lea rcx, [rdx - 1]	       106	xemit.c	FUNCTION_4	IF_1	WHILE_1	CALL_2
0x374	        0x488b55f8	                mov rdx, qword [rbp - 8]	       106	xemit.c	FUNCTION_4	IF_1	WHILE_1	CALL_2
0x378	          0x4801ca	                            add rdx, rcx	       106	xemit.c	FUNCTION_4	IF_1	WHILE_1	CALL_2
0x37b	           0xfb612	                   movzx edx, byte [rdx]	       106	xemit.c	FUNCTION_4	IF_1	WHILE_1	CALL_2
0x37e	           0xfb6d2	                           movzx edx, dl	       106	xemit.c	FUNCTION_4	IF_1	WHILE_1	CALL_2
0x381	          0x4801d2	                            add rdx, rdx	       106	xemit.c	FUNCTION_4	IF_1	WHILE_1	CALL_2
0x384	          0x4801d0	                            add rax, rdx	       106	xemit.c	FUNCTION_4	IF_1	WHILE_1	CALL_2
0x387	           0xfb700	                   movzx eax, word [rax]	       106	xemit.c	FUNCTION_4	IF_1	WHILE_1	CALL_2
0x38a	           0xfb7c0	                           movzx eax, ax	       106	xemit.c	FUNCTION_4	IF_1	WHILE_1	CALL_2
0x38d	      0x2500200000	                         and eax, 0x2000	       106	xemit.c	FUNCTION_4	IF_1	WHILE_1	CALL_2
0x392	            0x85c0	                           test eax, eax	       106	xemit.c	FUNCTION_4	IF_1	WHILE_1	CALL_2
0x394	            0x75c2	                           jne 0x4000398	       106	xemit.c	FUNCTION_4	IF_1	WHILE_1	CALL_2
0x396	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       108	xemit.c	FUNCTION_4	IF_1	CALL_3
0x39a	        0x488b4df8	                mov rcx, qword [rbp - 8]	       108	xemit.c	FUNCTION_4	IF_1	CALL_3
0x39e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       108	xemit.c	FUNCTION_4	IF_1	CALL_3
0x3a2	          0x4889ce	                            mov rsi, rcx	       108	xemit.c	FUNCTION_4	IF_1	CALL_3
0x3a5	          0x4889c7	                            mov rdi, rax	       108	xemit.c	FUNCTION_4	IF_1	CALL_3
0x3a8	      0xe800000000	                          call 0x40003ed	       108	xemit.c	FUNCTION_4	IF_1	CALL_3
0x3ad	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       109	xemit.c	FUNCTION_4	IF_1
0x3b1	            0xeb07	                           jmp 0x40003fa	       109	xemit.c	FUNCTION_4	IF_1
0x3b3	    0x48c7c0ffffff	             mov rax, 0xffffffffffffffff	       111	xemit.c	FUNCTION_4
0x3ba	              0xc9	                                   leave	       112	xemit.c	FUNCTION_4
0x3bb	              0xc3	                                     ret	       112	xemit.c	FUNCTION_4
is_func_rec	CALL,1:FOR,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:WHILE,0	25
0x46c	              0x55	                                push rbp	       125	xemit.c	FUNCTION_6
0x46d	          0x4889e5	                            mov rbp, rsp	       125	xemit.c	FUNCTION_6
0x470	        0x4883ec30	                           sub rsp, 0x30	       125	xemit.c	FUNCTION_6
0x474	        0x48897de8	             mov qword [rbp - 0x18], rdi	       125	xemit.c	FUNCTION_6
0x478	        0x488975e0	             mov qword [rbp - 0x20], rsi	       125	xemit.c	FUNCTION_6
0x47c	        0x488955d8	             mov qword [rbp - 0x28], rdx	       125	xemit.c	FUNCTION_6
0x480	    0x64488b042528	                mov rax, qword fs:[0x28]	       125	xemit.c	FUNCTION_6
0x489	        0x488945f8	                mov qword [rbp - 8], rax	       125	xemit.c	FUNCTION_6
0x48d	            0x31c0	                            xor eax, eax	       125	xemit.c	FUNCTION_6
0x48f	        0x488d4df7	                      lea rcx, [rbp - 9]	       127	xemit.c	FUNCTION_6	CALL_1
0x493	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       127	xemit.c	FUNCTION_6	CALL_1
0x497	        0x488b75e0	             mov rsi, qword [rbp - 0x20]	       127	xemit.c	FUNCTION_6	CALL_1
0x49b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       127	xemit.c	FUNCTION_6	CALL_1
0x49f	    0x41b801000000	                              mov r8d, 1	       127	xemit.c	FUNCTION_6	CALL_1
0x4a5	          0x4889c7	                            mov rdi, rax	       127	xemit.c	FUNCTION_6	CALL_1
0x4a8	      0xe80fffffff	                 call sym.match_func_rec	       127	xemit.c	FUNCTION_6	CALL_1
0x4ad	          0x48f7d0	                                 not rax	       127	xemit.c	FUNCTION_6	CALL_1
0x4b0	        0x48c1e83f	                           shr rax, 0x3f	       127	xemit.c	FUNCTION_6	CALL_1
0x4b4	           0xfb6c0	                           movzx eax, al	       127	xemit.c	FUNCTION_6	CALL_1
0x4b7	        0x488b7df8	                mov rdi, qword [rbp - 8]	       128	xemit.c	FUNCTION_6
0x4bb	    0x6448333c2528	                xor rdi, qword fs:[0x28]	       128	xemit.c	FUNCTION_6
0x4c4	            0x7405	                            je 0x400050b	       128	xemit.c	FUNCTION_6
0x4c6	      0xe800000000	                          call 0x400050b	       128	xemit.c	FUNCTION_6
0x4cb	              0xc9	                                   leave	       128	xemit.c	FUNCTION_6
0x4cc	              0xc3	                                     ret	       128	xemit.c	FUNCTION_6
xdl_emit_diff	CALL,20:FOR,7:functions,0:IF,19:SWITCH,0:ELSE,0:DO,0:WHILE,3	439
0x670	              0x55	                                push rbp	       168	xemit.c	FUNCTION_9
0x671	          0x4889e5	                            mov rbp, rsp	       168	xemit.c	FUNCTION_9
0x674	    0x4881ecf00000	                           sub rsp, 0xf0	       168	xemit.c	FUNCTION_9
0x67b	    0x4889bd28ffff	             mov qword [rbp - 0xd8], rdi	       168	xemit.c	FUNCTION_9
0x682	    0x4889b520ffff	             mov qword [rbp - 0xe0], rsi	       168	xemit.c	FUNCTION_9
0x689	    0x48899518ffff	             mov qword [rbp - 0xe8], rdx	       168	xemit.c	FUNCTION_9
0x690	    0x48898d10ffff	             mov qword [rbp - 0xf0], rcx	       168	xemit.c	FUNCTION_9
0x697	    0x64488b042528	                mov rax, qword fs:[0x28]	       168	xemit.c	FUNCTION_9
0x6a0	        0x488945f8	                mov qword [rbp - 8], rax	       168	xemit.c	FUNCTION_9
0x6a4	            0x31c0	                            xor eax, eax	       168	xemit.c	FUNCTION_9
0x6a6	    0x48c78568ffff	mov qword [rbp - 0x98], 0xffffffffffffffff	       171	xemit.c	FUNCTION_9
0x6b1	        0x488d55a0	                   lea rdx, [rbp - 0x60]	       172	xemit.c	FUNCTION_9
0x6b5	      0xb800000000	                              mov eax, 0	       172	xemit.c	FUNCTION_9
0x6ba	      0xb90b000000	                            mov ecx, 0xb	       172	xemit.c	FUNCTION_9
0x6bf	          0x4889d7	                            mov rdi, rdx	       172	xemit.c	FUNCTION_9
0x6c2	          0xf348ab	              rep stosq qword [rdi], rax	       172	xemit.c	FUNCTION_9
0x6c5	    0x488b8520ffff	             mov rax, qword [rbp - 0xe0]	       174	xemit.c	FUNCTION_9	FOR_1
0x6cc	    0x48898538ffff	             mov qword [rbp - 0xc8], rax	       174	xemit.c	FUNCTION_9	FOR_1
0x6d3	      0xe9c6070000	                           jmp 0x4000ede	       174	xemit.c	FUNCTION_9	FOR_1
0x6d8	    0x488b9510ffff	             mov rdx, qword [rbp - 0xf0]	       175	xemit.c	FUNCTION_9	FOR_1	CALL_1
0x6df	    0x488d8538ffff	                   lea rax, [rbp - 0xc8]	       175	xemit.c	FUNCTION_9	FOR_1	CALL_1
0x6e6	          0x4889d6	                            mov rsi, rdx	       175	xemit.c	FUNCTION_9	FOR_1	CALL_1
0x6e9	          0x4889c7	                            mov rdi, rax	       175	xemit.c	FUNCTION_9	FOR_1	CALL_1
0x6ec	      0xe800000000	                          call 0x4000731	       175	xemit.c	FUNCTION_9	FOR_1	CALL_1
0x6f1	    0x48898560ffff	             mov qword [rbp - 0xa0], rax	       175	xemit.c	FUNCTION_9	FOR_1	CALL_1
0x6f8	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       176	xemit.c	FUNCTION_9	FOR_1	IF_1
0x6ff	          0x4885c0	                           test rax, rax	       176	xemit.c	FUNCTION_9	FOR_1	IF_1
0x702	     0xf84a8070000	                            je 0x4000ef0	       176	xemit.c	FUNCTION_9	FOR_1	IF_1
0x708	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       179	xemit.c	FUNCTION_9	FOR_1	CALL_2
0x70f	        0x488b5008	                mov rdx, qword [rax + 8]	       179	xemit.c	FUNCTION_9	FOR_1	CALL_2
0x713	    0x488b8510ffff	             mov rax, qword [rbp - 0xf0]	       179	xemit.c	FUNCTION_9	FOR_1	CALL_2
0x71a	          0x488b00	                    mov rax, qword [rax]	       179	xemit.c	FUNCTION_9	FOR_1	CALL_2
0x71d	          0x4829c2	                            sub rdx, rax	       179	xemit.c	FUNCTION_9	FOR_1	CALL_2
0x720	          0x4889d0	                            mov rax, rdx	       179	xemit.c	FUNCTION_9	FOR_1	CALL_2
0x723	      0xba00000000	                              mov edx, 0	       179	xemit.c	FUNCTION_9	FOR_1	CALL_2
0x728	          0x4885c0	                           test rax, rax	       179	xemit.c	FUNCTION_9	FOR_1	CALL_2
0x72b	        0x480f48c2	                          cmovs rax, rdx	       179	xemit.c	FUNCTION_9	FOR_1	CALL_2
0x72f	    0x48898540ffff	             mov qword [rbp - 0xc0], rax	       179	xemit.c	FUNCTION_9	FOR_1	CALL_2
0x736	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       180	xemit.c	FUNCTION_9	FOR_1	CALL_3
0x73d	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       180	xemit.c	FUNCTION_9	FOR_1	CALL_3
0x741	    0x488b8510ffff	             mov rax, qword [rbp - 0xf0]	       180	xemit.c	FUNCTION_9	FOR_1	CALL_3
0x748	          0x488b00	                    mov rax, qword [rax]	       180	xemit.c	FUNCTION_9	FOR_1	CALL_3
0x74b	          0x4829c2	                            sub rdx, rax	       180	xemit.c	FUNCTION_9	FOR_1	CALL_3
0x74e	          0x4889d0	                            mov rax, rdx	       180	xemit.c	FUNCTION_9	FOR_1	CALL_3
0x751	      0xba00000000	                              mov edx, 0	       180	xemit.c	FUNCTION_9	FOR_1	CALL_3
0x756	          0x4885c0	                           test rax, rax	       180	xemit.c	FUNCTION_9	FOR_1	CALL_3
0x759	        0x480f48c2	                          cmovs rax, rdx	       180	xemit.c	FUNCTION_9	FOR_1	CALL_3
0x75d	    0x48898548ffff	             mov qword [rbp - 0xb8], rax	       180	xemit.c	FUNCTION_9	FOR_1	CALL_3
0x764	    0x488b8510ffff	             mov rax, qword [rbp - 0xf0]	       182	xemit.c	FUNCTION_9	FOR_1	IF_2
0x76b	        0x488b4010	            mov rax, qword [rax + 0x10] 	       182	xemit.c	FUNCTION_9	FOR_1	IF_2
0x76f	          0x83e004	                              and eax, 4	       182	xemit.c	FUNCTION_9	FOR_1	IF_2
0x772	          0x4885c0	                           test rax, rax	       182	xemit.c	FUNCTION_9	FOR_1	IF_2
0x775	     0xf846b010000	                            je 0x4000926	       182	xemit.c	FUNCTION_9	FOR_1	IF_2
0x77b	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       183	xemit.c	FUNCTION_9	FOR_1	IF_2
0x782	        0x488b4008	                mov rax, qword [rax + 8]	       183	xemit.c	FUNCTION_9	FOR_1	IF_2
0x786	    0x48898578ffff	             mov qword [rbp - 0x88], rax	       183	xemit.c	FUNCTION_9	FOR_1	IF_2
0x78d	    0x488b8528ffff	             mov rax, qword [rbp - 0xd8]	       186	xemit.c	FUNCTION_9	FOR_1	IF_2	IF_3
0x794	        0x488b4038	            mov rax, qword [rax + 0x38] 	       186	xemit.c	FUNCTION_9	FOR_1	IF_2	IF_3
0x798	    0x483b8578ffff	             cmp rax, qword [rbp - 0x88]	       186	xemit.c	FUNCTION_9	FOR_1	IF_2	IF_3
0x79f	            0x7f6d	                            jg 0x400084e	       186	xemit.c	FUNCTION_9	FOR_1	IF_2	IF_3
0x7a1	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       187	xemit.c	FUNCTION_9	FOR_1	IF_2	IF_3
0x7a8	        0x488b4010	            mov rax, qword [rax + 0x10] 	       187	xemit.c	FUNCTION_9	FOR_1	IF_2	IF_3
0x7ac	        0x48894580	             mov qword [rbp - 0x80], rax	       187	xemit.c	FUNCTION_9	FOR_1	IF_2	IF_3
0x7b0	            0xeb32	                           jmp 0x4000824	       193	xemit.c	FUNCTION_9	FOR_1	IF_2	IF_3	WHILE_1
0x7b2	    0x488b8528ffff	             mov rax, qword [rbp - 0xd8]	       194	xemit.c	FUNCTION_9	FOR_1	IF_2	IF_3	WHILE_1	IF_4	CALL_4
0x7b9	    0x488d88880000	                   lea rcx, [rax + 0x88]	       194	xemit.c	FUNCTION_9	FOR_1	IF_2	IF_3	WHILE_1	IF_4	CALL_4
0x7c0	        0x488b5580	             mov rdx, qword [rbp - 0x80]	       194	xemit.c	FUNCTION_9	FOR_1	IF_2	IF_3	WHILE_1	IF_4	CALL_4
0x7c4	    0x488b8510ffff	             mov rax, qword [rbp - 0xf0]	       194	xemit.c	FUNCTION_9	FOR_1	IF_2	IF_3	WHILE_1	IF_4	CALL_4
0x7cb	          0x4889c6	                            mov rsi, rax	       194	xemit.c	FUNCTION_9	FOR_1	IF_2	IF_3	WHILE_1	IF_4	CALL_4
0x7ce	          0x4889cf	                            mov rdi, rcx	       194	xemit.c	FUNCTION_9	FOR_1	IF_2	IF_3	WHILE_1	IF_4	CALL_4
0x7d1	      0xe896fcffff	                    call sym.is_func_rec	       194	xemit.c	FUNCTION_9	FOR_1	IF_2	IF_3	WHILE_1	IF_4	CALL_4
0x7d6	            0x85c0	                           test eax, eax	       194	xemit.c	FUNCTION_9	FOR_1	IF_2	IF_3	WHILE_1	IF_4	CALL_4
0x7d8	            0x7405	                            je 0x400081f	       194	xemit.c	FUNCTION_9	FOR_1	IF_2	IF_3	WHILE_1	IF_4	CALL_4
0x7da	      0xe907010000	                           jmp 0x4000926	       195	xemit.c	FUNCTION_9	FOR_1	IF_2	IF_3	WHILE_1	IF_4
0x7df	      0x4883458001	               add qword [rbp - 0x80], 1	       196	xemit.c	FUNCTION_9	FOR_1	IF_2	IF_3	WHILE_1
0x7e4	    0x488b8528ffff	             mov rax, qword [rbp - 0xd8]	       193	xemit.c	FUNCTION_9	FOR_1	IF_2	IF_3	WHILE_1
0x7eb	    0x488b80c00000	            mov rax, qword [rax + 0xc0] 	       193	xemit.c	FUNCTION_9	FOR_1	IF_2	IF_3	WHILE_1
0x7f2	        0x483b4580	             cmp rax, qword [rbp - 0x80]	       193	xemit.c	FUNCTION_9	FOR_1	IF_2	IF_3	WHILE_1
0x7f6	            0x7fba	                            jg 0x40007f2	       193	xemit.c	FUNCTION_9	FOR_1	IF_2	IF_3	WHILE_1
0x7f8	    0x488b8528ffff	             mov rax, qword [rbp - 0xd8]	       203	xemit.c	FUNCTION_9	FOR_1	IF_2	IF_3
0x7ff	        0x488b4038	            mov rax, qword [rax + 0x38] 	       203	xemit.c	FUNCTION_9	FOR_1	IF_2	IF_3
0x803	        0x4883e801	                              sub rax, 1	       203	xemit.c	FUNCTION_9	FOR_1	IF_2	IF_3
0x807	    0x48898578ffff	             mov qword [rbp - 0x88], rax	       203	xemit.c	FUNCTION_9	FOR_1	IF_2	IF_3
0x80e	    0x488b9578ffff	             mov rdx, qword [rbp - 0x88]	       206	xemit.c	FUNCTION_9	FOR_1	IF_2	CALL_5
0x815	    0x488bb510ffff	             mov rsi, qword [rbp - 0xf0]	       206	xemit.c	FUNCTION_9	FOR_1	IF_2	CALL_5
0x81c	    0x488b8528ffff	             mov rax, qword [rbp - 0xd8]	       206	xemit.c	FUNCTION_9	FOR_1	IF_2	CALL_5
0x823	    0x49c7c0ffffff	              mov r8, 0xffffffffffffffff	       206	xemit.c	FUNCTION_9	FOR_1	IF_2	CALL_5
0x82a	          0x4889d1	                            mov rcx, rdx	       206	xemit.c	FUNCTION_9	FOR_1	IF_2	CALL_5
0x82d	      0xba00000000	                              mov edx, 0	       206	xemit.c	FUNCTION_9	FOR_1	IF_2	CALL_5
0x832	          0x4889c7	                            mov rdi, rax	       206	xemit.c	FUNCTION_9	FOR_1	IF_2	CALL_5
0x835	      0xe893fcffff	                  call sym.get_func_line	       206	xemit.c	FUNCTION_9	FOR_1	IF_2	CALL_5
0x83a	    0x48898570ffff	             mov qword [rbp - 0x90], rax	       206	xemit.c	FUNCTION_9	FOR_1	IF_2	CALL_5
0x841	            0xeb08	                           jmp 0x400088b	       207	xemit.c	FUNCTION_9	FOR_1	IF_2	WHILE_2	CALL_6
0x843	    0x4883ad70ffff	               sub qword [rbp - 0x90], 1	       209	xemit.c	FUNCTION_9	FOR_1	IF_2	WHILE_2
0x84b	    0x4883bd70ffff	               cmp qword [rbp - 0x90], 0	       207	xemit.c	FUNCTION_9	FOR_1	IF_2	WHILE_2	CALL_6
0x853	            0x7e49	                           jle 0x40008de	       207	xemit.c	FUNCTION_9	FOR_1	IF_2	WHILE_2	CALL_6
0x855	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       207	xemit.c	FUNCTION_9	FOR_1	IF_2	WHILE_2	CALL_6
0x85c	        0x488d50ff	                      lea rdx, [rax - 1]	       207	xemit.c	FUNCTION_9	FOR_1	IF_2	WHILE_2	CALL_6
0x860	    0x488b8528ffff	             mov rax, qword [rbp - 0xd8]	       207	xemit.c	FUNCTION_9	FOR_1	IF_2	WHILE_2	CALL_6
0x867	          0x4889d6	                            mov rsi, rdx	       207	xemit.c	FUNCTION_9	FOR_1	IF_2	WHILE_2	CALL_6
0x86a	          0x4889c7	                            mov rdi, rax	       207	xemit.c	FUNCTION_9	FOR_1	IF_2	WHILE_2	CALL_6
0x86d	      0xe862fdffff	                   call sym.is_empty_rec	       207	xemit.c	FUNCTION_9	FOR_1	IF_2	WHILE_2	CALL_6
0x872	            0x85c0	                           test eax, eax	       207	xemit.c	FUNCTION_9	FOR_1	IF_2	WHILE_2	CALL_6
0x874	            0x7528	                           jne 0x40008de	       207	xemit.c	FUNCTION_9	FOR_1	IF_2	WHILE_2	CALL_6
0x876	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       208	xemit.c	FUNCTION_9	FOR_1	IF_2	WHILE_2	CALL_7
0x87d	        0x488d50ff	                      lea rdx, [rax - 1]	       208	xemit.c	FUNCTION_9	FOR_1	IF_2	WHILE_2	CALL_7
0x881	    0x488b8528ffff	             mov rax, qword [rbp - 0xd8]	       208	xemit.c	FUNCTION_9	FOR_1	IF_2	WHILE_2	CALL_7
0x888	    0x488b8d10ffff	             mov rcx, qword [rbp - 0xf0]	       208	xemit.c	FUNCTION_9	FOR_1	IF_2	WHILE_2	CALL_7
0x88f	          0x4889ce	                            mov rsi, rcx	       208	xemit.c	FUNCTION_9	FOR_1	IF_2	WHILE_2	CALL_7
0x892	          0x4889c7	                            mov rdi, rax	       208	xemit.c	FUNCTION_9	FOR_1	IF_2	WHILE_2	CALL_7
0x895	      0xe8d2fbffff	                    call sym.is_func_rec	       208	xemit.c	FUNCTION_9	FOR_1	IF_2	WHILE_2	CALL_7
0x89a	            0x85c0	                           test eax, eax	       207	xemit.c	FUNCTION_9	FOR_1	IF_2	WHILE_2	CALL_6
0x89c	            0x74a5	                            je 0x4000883	       207	xemit.c	FUNCTION_9	FOR_1	IF_2	WHILE_2	CALL_6
0x89e	    0x4883bd70ffff	               cmp qword [rbp - 0x90], 0	       210	xemit.c	FUNCTION_9	FOR_1	IF_2	IF_5
0x8a6	            0x790b	                           jns 0x40008f3	       210	xemit.c	FUNCTION_9	FOR_1	IF_2	IF_5
0x8a8	    0x48c78570ffff	               mov qword [rbp - 0x90], 0	       211	xemit.c	FUNCTION_9	FOR_1	IF_2	IF_5
0x8b3	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       212	xemit.c	FUNCTION_9	FOR_1	IF_2	IF_6
0x8ba	    0x483b8540ffff	             cmp rax, qword [rbp - 0xc0]	       212	xemit.c	FUNCTION_9	FOR_1	IF_2	IF_6
0x8c1	            0x7d23	                           jge 0x4000926	       212	xemit.c	FUNCTION_9	FOR_1	IF_2	IF_6
0x8c3	    0x488b8540ffff	             mov rax, qword [rbp - 0xc0]	       213	xemit.c	FUNCTION_9	FOR_1	IF_2	IF_6
0x8ca	    0x482b8570ffff	             sub rax, qword [rbp - 0x90]	       213	xemit.c	FUNCTION_9	FOR_1	IF_2	IF_6
0x8d1	    0x48298548ffff	             sub qword [rbp - 0xb8], rax	       213	xemit.c	FUNCTION_9	FOR_1	IF_2	IF_6
0x8d8	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       214	xemit.c	FUNCTION_9	FOR_1	IF_2	IF_6
0x8df	    0x48898540ffff	             mov qword [rbp - 0xc0], rax	       214	xemit.c	FUNCTION_9	FOR_1	IF_2	IF_6
0x8e6	    0x488b8510ffff	             mov rax, qword [rbp - 0xf0]	       219	xemit.c	FUNCTION_9	FOR_1
0x8ed	          0x488b00	                    mov rax, qword [rax]	       219	xemit.c	FUNCTION_9	FOR_1
0x8f0	        0x48894590	             mov qword [rbp - 0x70], rax	       219	xemit.c	FUNCTION_9	FOR_1
0x8f4	    0x488b8528ffff	             mov rax, qword [rbp - 0xd8]	       220	xemit.c	FUNCTION_9	FOR_1	CALL_8
0x8fb	        0x488b5038	            mov rdx, qword [rax + 0x38] 	       220	xemit.c	FUNCTION_9	FOR_1	CALL_8
0x8ff	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	       220	xemit.c	FUNCTION_9	FOR_1	CALL_8
0x906	        0x488b4808	                mov rcx, qword [rax + 8]	       220	xemit.c	FUNCTION_9	FOR_1	CALL_8
0x90a	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	       220	xemit.c	FUNCTION_9	FOR_1	CALL_8
0x911	        0x488b4018	            mov rax, qword [rax + 0x18] 	       220	xemit.c	FUNCTION_9	FOR_1	CALL_8
0x915	          0x4801c8	                            add rax, rcx	       220	xemit.c	FUNCTION_9	FOR_1	CALL_8
0x918	          0x4829c2	                            sub rdx, rax	       220	xemit.c	FUNCTION_9	FOR_1	CALL_8
0x91b	        0x488b4590	             mov rax, qword [rbp - 0x70]	       220	xemit.c	FUNCTION_9	FOR_1	CALL_8
0x91f	          0x4839c2	                            cmp rdx, rax	       220	xemit.c	FUNCTION_9	FOR_1	CALL_8
0x922	        0x480f4ec2	                         cmovle rax, rdx	       220	xemit.c	FUNCTION_9	FOR_1	CALL_8
0x926	        0x48894590	             mov qword [rbp - 0x70], rax	       220	xemit.c	FUNCTION_9	FOR_1	CALL_8
0x92a	    0x488b8528ffff	             mov rax, qword [rbp - 0xd8]	       221	xemit.c	FUNCTION_9	FOR_1	CALL_9
0x931	    0x488b90c00000	            mov rdx, qword [rax + 0xc0] 	       221	xemit.c	FUNCTION_9	FOR_1	CALL_9
0x938	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	       221	xemit.c	FUNCTION_9	FOR_1	CALL_9
0x93f	        0x488b4810	            mov rcx, qword [rax + 0x10] 	       221	xemit.c	FUNCTION_9	FOR_1	CALL_9
0x943	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	       221	xemit.c	FUNCTION_9	FOR_1	CALL_9
0x94a	        0x488b4020	            mov rax, qword [rax + 0x20] 	       221	xemit.c	FUNCTION_9	FOR_1	CALL_9
0x94e	          0x4801c8	                            add rax, rcx	       221	xemit.c	FUNCTION_9	FOR_1	CALL_9
0x951	          0x4829c2	                            sub rdx, rax	       221	xemit.c	FUNCTION_9	FOR_1	CALL_9
0x954	        0x488b4590	             mov rax, qword [rbp - 0x70]	       221	xemit.c	FUNCTION_9	FOR_1	CALL_9
0x958	          0x4839c2	                            cmp rdx, rax	       221	xemit.c	FUNCTION_9	FOR_1	CALL_9
0x95b	        0x480f4ec2	                         cmovle rax, rdx	       221	xemit.c	FUNCTION_9	FOR_1	CALL_9
0x95f	        0x48894590	             mov qword [rbp - 0x70], rax	       221	xemit.c	FUNCTION_9	FOR_1	CALL_9
0x963	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	       223	xemit.c	FUNCTION_9	FOR_1
0x96a	        0x488b5008	                mov rdx, qword [rax + 8]	       223	xemit.c	FUNCTION_9	FOR_1
0x96e	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	       223	xemit.c	FUNCTION_9	FOR_1
0x975	        0x488b4018	            mov rax, qword [rax + 0x18] 	       223	xemit.c	FUNCTION_9	FOR_1
0x979	          0x4801c2	                            add rdx, rax	       223	xemit.c	FUNCTION_9	FOR_1
0x97c	        0x488b4590	             mov rax, qword [rbp - 0x70]	       223	xemit.c	FUNCTION_9	FOR_1
0x980	          0x4801d0	                            add rax, rdx	       223	xemit.c	FUNCTION_9	FOR_1
0x983	    0x48898550ffff	             mov qword [rbp - 0xb0], rax	       223	xemit.c	FUNCTION_9	FOR_1
0x98a	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	       224	xemit.c	FUNCTION_9	FOR_1
0x991	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       224	xemit.c	FUNCTION_9	FOR_1
0x995	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	       224	xemit.c	FUNCTION_9	FOR_1
0x99c	        0x488b4020	            mov rax, qword [rax + 0x20] 	       224	xemit.c	FUNCTION_9	FOR_1
0x9a0	          0x4801c2	                            add rdx, rax	       224	xemit.c	FUNCTION_9	FOR_1
0x9a3	        0x488b4590	             mov rax, qword [rbp - 0x70]	       224	xemit.c	FUNCTION_9	FOR_1
0x9a7	          0x4801d0	                            add rax, rdx	       224	xemit.c	FUNCTION_9	FOR_1
0x9aa	    0x48898558ffff	             mov qword [rbp - 0xa8], rax	       224	xemit.c	FUNCTION_9	FOR_1
0x9b1	    0x488b8510ffff	             mov rax, qword [rbp - 0xf0]	       226	xemit.c	FUNCTION_9	FOR_1	IF_7
0x9b8	        0x488b4010	            mov rax, qword [rax + 0x10] 	       226	xemit.c	FUNCTION_9	FOR_1	IF_7
0x9bc	          0x83e004	                              and eax, 4	       226	xemit.c	FUNCTION_9	FOR_1	IF_7
0x9bf	          0x4885c0	                           test rax, rax	       226	xemit.c	FUNCTION_9	FOR_1	IF_7
0x9c2	     0xf8454010000	                            je 0x4000b5c	       226	xemit.c	FUNCTION_9	FOR_1	IF_7
0x9c8	    0x488b8528ffff	             mov rax, qword [rbp - 0xd8]	       227	xemit.c	FUNCTION_9	FOR_1	IF_7	CALL_10
0x9cf	        0x488b4838	            mov rcx, qword [rax + 0x38] 	       227	xemit.c	FUNCTION_9	FOR_1	IF_7	CALL_10
0x9d3	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	       228	xemit.c	FUNCTION_9	FOR_1	IF_7
0x9da	        0x488b5008	                mov rdx, qword [rax + 8]	       228	xemit.c	FUNCTION_9	FOR_1	IF_7
0x9de	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	       228	xemit.c	FUNCTION_9	FOR_1	IF_7
0x9e5	        0x488b4018	            mov rax, qword [rax + 0x18] 	       228	xemit.c	FUNCTION_9	FOR_1	IF_7
0x9e9	          0x4801c2	                            add rdx, rax	       227	xemit.c	FUNCTION_9	FOR_1	IF_7	CALL_10
0x9ec	    0x488bb510ffff	             mov rsi, qword [rbp - 0xf0]	       227	xemit.c	FUNCTION_9	FOR_1	IF_7	CALL_10
0x9f3	    0x488b8528ffff	             mov rax, qword [rbp - 0xd8]	       227	xemit.c	FUNCTION_9	FOR_1	IF_7	CALL_10
0x9fa	          0x4989c8	                             mov r8, rcx	       227	xemit.c	FUNCTION_9	FOR_1	IF_7	CALL_10
0x9fd	          0x4889d1	                            mov rcx, rdx	       227	xemit.c	FUNCTION_9	FOR_1	IF_7	CALL_10
0xa00	      0xba00000000	                              mov edx, 0	       227	xemit.c	FUNCTION_9	FOR_1	IF_7	CALL_10
0xa05	          0x4889c7	                            mov rdi, rax	       227	xemit.c	FUNCTION_9	FOR_1	IF_7	CALL_10
0xa08	      0xe8c0faffff	                  call sym.get_func_line	       227	xemit.c	FUNCTION_9	FOR_1	IF_7	CALL_10
0xa0d	        0x48894588	             mov qword [rbp - 0x78], rax	       227	xemit.c	FUNCTION_9	FOR_1	IF_7	CALL_10
0xa11	            0xeb05	                           jmp 0x4000a58	       230	xemit.c	FUNCTION_9	FOR_1	IF_7	WHILE_3	CALL_11
0xa13	      0x48836d8801	               sub qword [rbp - 0x78], 1	       231	xemit.c	FUNCTION_9	FOR_1	IF_7	WHILE_3
0xa18	      0x48837d8800	               cmp qword [rbp - 0x78], 0	       230	xemit.c	FUNCTION_9	FOR_1	IF_7	WHILE_3	CALL_11
0xa1d	            0x7e1e	                           jle 0x4000a7d	       230	xemit.c	FUNCTION_9	FOR_1	IF_7	WHILE_3	CALL_11
0xa1f	        0x488b4588	             mov rax, qword [rbp - 0x78]	       230	xemit.c	FUNCTION_9	FOR_1	IF_7	WHILE_3	CALL_11
0xa23	        0x488d50ff	                      lea rdx, [rax - 1]	       230	xemit.c	FUNCTION_9	FOR_1	IF_7	WHILE_3	CALL_11
0xa27	    0x488b8528ffff	             mov rax, qword [rbp - 0xd8]	       230	xemit.c	FUNCTION_9	FOR_1	IF_7	WHILE_3	CALL_11
0xa2e	          0x4889d6	                            mov rsi, rdx	       230	xemit.c	FUNCTION_9	FOR_1	IF_7	WHILE_3	CALL_11
0xa31	          0x4889c7	                            mov rdi, rax	       230	xemit.c	FUNCTION_9	FOR_1	IF_7	WHILE_3	CALL_11
0xa34	      0xe89bfbffff	                   call sym.is_empty_rec	       230	xemit.c	FUNCTION_9	FOR_1	IF_7	WHILE_3	CALL_11
0xa39	            0x85c0	                           test eax, eax	       230	xemit.c	FUNCTION_9	FOR_1	IF_7	WHILE_3	CALL_11
0xa3b	            0x75d6	                           jne 0x4000a53	       230	xemit.c	FUNCTION_9	FOR_1	IF_7	WHILE_3	CALL_11
0xa3d	      0x48837d8800	               cmp qword [rbp - 0x78], 0	       232	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_8
0xa42	            0x790f	                           jns 0x4000a93	       232	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_8
0xa44	    0x488b8528ffff	             mov rax, qword [rbp - 0xd8]	       233	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_8
0xa4b	        0x488b4038	            mov rax, qword [rax + 0x38] 	       233	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_8
0xa4f	        0x48894588	             mov qword [rbp - 0x78], rax	       233	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_8
0xa53	        0x488b4588	             mov rax, qword [rbp - 0x78]	       234	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_9
0xa57	    0x483b8550ffff	             cmp rax, qword [rbp - 0xb0]	       234	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_9
0xa5e	            0x7e1d	                           jle 0x4000abd	       234	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_9
0xa60	        0x488b4588	             mov rax, qword [rbp - 0x78]	       235	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_9
0xa64	    0x482b8550ffff	             sub rax, qword [rbp - 0xb0]	       235	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_9
0xa6b	    0x48018558ffff	            add qword [rbp - 0xa8], rax 	       235	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_9
0xa72	        0x488b4588	             mov rax, qword [rbp - 0x78]	       236	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_9
0xa76	    0x48898550ffff	             mov qword [rbp - 0xb0], rax	       236	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_9
0xa7d	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	       244	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_10
0xa84	          0x488b00	                    mov rax, qword [rax]	       244	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_10
0xa87	          0x4885c0	                           test rax, rax	       244	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_10
0xa8a	     0xf848c000000	                            je 0x4000b5c	       244	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_10
0xa90	    0x488b8528ffff	             mov rax, qword [rbp - 0xd8]	       245	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_10	CALL_12
0xa97	        0x488b4038	            mov rax, qword [rax + 0x38] 	       245	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_10	CALL_12
0xa9b	        0x488d50ff	                      lea rdx, [rax - 1]	       245	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_10	CALL_12
0xa9f	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	       245	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_10	CALL_12
0xaa6	          0x488b00	                    mov rax, qword [rax]	       245	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_10	CALL_12
0xaa9	        0x488b4008	                mov rax, qword [rax + 8]	       245	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_10	CALL_12
0xaad	          0x4839c2	                            cmp rdx, rax	       245	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_10	CALL_12
0xab0	        0x480f4ec2	                         cmovle rax, rdx	       245	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_10	CALL_12
0xab4	        0x48894598	             mov qword [rbp - 0x68], rax	       245	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_10	CALL_12
0xab8	    0x488b8510ffff	             mov rax, qword [rbp - 0xf0]	       247	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_10	IF_11
0xabf	          0x488b00	                    mov rax, qword [rax]	       247	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_10	IF_11
0xac2	        0x488b5598	             mov rdx, qword [rbp - 0x68]	       247	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_10	IF_11
0xac6	          0x4829c2	                            sub rdx, rax	       247	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_10	IF_11
0xac9	          0x4889d0	                            mov rax, rdx	       247	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_10	IF_11
0xacc	    0x483b8550ffff	             cmp rax, qword [rbp - 0xb0]	       247	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_10	IF_11
0xad3	            0x7e31	                           jle 0x4000b46	       247	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_10	IF_11
0xad5	    0x488b8d50ffff	             mov rcx, qword [rbp - 0xb0]	       248	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_10	IF_11	CALL_13
0xadc	        0x488b5598	             mov rdx, qword [rbp - 0x68]	       248	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_10	IF_11	CALL_13
0xae0	    0x488bb510ffff	             mov rsi, qword [rbp - 0xf0]	       248	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_10	IF_11	CALL_13
0xae7	    0x488b8528ffff	             mov rax, qword [rbp - 0xd8]	       248	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_10	IF_11	CALL_13
0xaee	          0x4989c8	                             mov r8, rcx	       248	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_10	IF_11	CALL_13
0xaf1	          0x4889d1	                            mov rcx, rdx	       248	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_10	IF_11	CALL_13
0xaf4	      0xba00000000	                              mov edx, 0	       248	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_10	IF_11	CALL_13
0xaf9	          0x4889c7	                            mov rdi, rax	       248	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_10	IF_11	CALL_13
0xafc	      0xe8ccf9ffff	                  call sym.get_func_line	       248	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_10	IF_11	CALL_13
0xb01	          0x4885c0	                           test rax, rax	       247	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_10	IF_11
0xb04	            0x7916	                           jns 0x4000b5c	       247	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_10	IF_11
0xb06	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	       249	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_10	IF_11
0xb0d	          0x488b00	                    mov rax, qword [rax]	       249	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_10	IF_11
0xb10	    0x48898560ffff	             mov qword [rbp - 0xa0], rax	       249	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_10	IF_11
0xb17	      0xe9cafdffff	                           jmp 0x4000926	       250	xemit.c	FUNCTION_9	FOR_1	IF_7	IF_10	IF_11
0xb1c	    0x488b8510ffff	             mov rax, qword [rbp - 0xf0]	       259	xemit.c	FUNCTION_9	FOR_1	IF_12
0xb23	        0x488b4010	            mov rax, qword [rax + 0x10] 	       259	xemit.c	FUNCTION_9	FOR_1	IF_12
0xb27	          0x83e001	                              and eax, 1	       259	xemit.c	FUNCTION_9	FOR_1	IF_12
0xb2a	          0x4885c0	                           test rax, rax	       259	xemit.c	FUNCTION_9	FOR_1	IF_12
0xb2d	            0x7441	                            je 0x4000bb0	       259	xemit.c	FUNCTION_9	FOR_1	IF_12
0xb2f	    0x488b8540ffff	             mov rax, qword [rbp - 0xc0]	       260	xemit.c	FUNCTION_9	FOR_1	IF_12	CALL_14
0xb36	        0x488d48ff	                      lea rcx, [rax - 1]	       260	xemit.c	FUNCTION_9	FOR_1	IF_12	CALL_14
0xb3a	    0x488bbd68ffff	             mov rdi, qword [rbp - 0x98]	       260	xemit.c	FUNCTION_9	FOR_1	IF_12	CALL_14
0xb41	        0x488d55a0	                   lea rdx, [rbp - 0x60]	       260	xemit.c	FUNCTION_9	FOR_1	IF_12	CALL_14
0xb45	    0x488bb510ffff	             mov rsi, qword [rbp - 0xf0]	       260	xemit.c	FUNCTION_9	FOR_1	IF_12	CALL_14
0xb4c	    0x488b8528ffff	             mov rax, qword [rbp - 0xd8]	       260	xemit.c	FUNCTION_9	FOR_1	IF_12	CALL_14
0xb53	          0x4989f8	                             mov r8, rdi	       260	xemit.c	FUNCTION_9	FOR_1	IF_12	CALL_14
0xb56	          0x4889c7	                            mov rdi, rax	       260	xemit.c	FUNCTION_9	FOR_1	IF_12	CALL_14
0xb59	      0xe86ff9ffff	                  call sym.get_func_line	       260	xemit.c	FUNCTION_9	FOR_1	IF_12	CALL_14
0xb5e	    0x488b8540ffff	             mov rax, qword [rbp - 0xc0]	       262	xemit.c	FUNCTION_9	FOR_1	IF_12
0xb65	        0x4883e801	                              sub rax, 1	       262	xemit.c	FUNCTION_9	FOR_1	IF_12
0xb69	    0x48898568ffff	             mov qword [rbp - 0x98], rax	       262	xemit.c	FUNCTION_9	FOR_1	IF_12
0xb70	        0x488b4da0	             mov rcx, qword [rbp - 0x60]	       264	xemit.c	FUNCTION_9	FOR_1	IF_13	CALL_15
0xb74	    0x488b8558ffff	             mov rax, qword [rbp - 0xa8]	       264	xemit.c	FUNCTION_9	FOR_1	IF_13	CALL_15
0xb7b	    0x482b8548ffff	             sub rax, qword [rbp - 0xb8]	       264	xemit.c	FUNCTION_9	FOR_1	IF_13	CALL_15
0xb82	          0x4889c2	                            mov rdx, rax	       264	xemit.c	FUNCTION_9	FOR_1	IF_13	CALL_15
0xb85	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       264	xemit.c	FUNCTION_9	FOR_1	IF_13	CALL_15
0xb8c	        0x488d7001	                      lea rsi, [rax + 1]	       264	xemit.c	FUNCTION_9	FOR_1	IF_13	CALL_15
0xb90	    0x488b8550ffff	             mov rax, qword [rbp - 0xb0]	       264	xemit.c	FUNCTION_9	FOR_1	IF_13	CALL_15
0xb97	    0x482b8540ffff	             sub rax, qword [rbp - 0xc0]	       264	xemit.c	FUNCTION_9	FOR_1	IF_13	CALL_15
0xb9e	    0x488bbd40ffff	             mov rdi, qword [rbp - 0xc0]	       264	xemit.c	FUNCTION_9	FOR_1	IF_13	CALL_15
0xba5	        0x4883c701	                              add rdi, 1	       264	xemit.c	FUNCTION_9	FOR_1	IF_13	CALL_15
0xba9	        0x4c8d45a0	                    lea r8, [rbp - 0x60]	       264	xemit.c	FUNCTION_9	FOR_1	IF_13	CALL_15
0xbad	        0x4983c008	                               add r8, 8	       264	xemit.c	FUNCTION_9	FOR_1	IF_13	CALL_15
0xbb1	        0x4883ec08	                              sub rsp, 8	       264	xemit.c	FUNCTION_9	FOR_1	IF_13	CALL_15
0xbb5	    0xffb518ffffff	                 push qword [rbp - 0xe8]	       264	xemit.c	FUNCTION_9	FOR_1	IF_13	CALL_15
0xbbb	          0x4989c9	                             mov r9, rcx	       264	xemit.c	FUNCTION_9	FOR_1	IF_13	CALL_15
0xbbe	          0x4889d1	                            mov rcx, rdx	       264	xemit.c	FUNCTION_9	FOR_1	IF_13	CALL_15
0xbc1	          0x4889f2	                            mov rdx, rsi	       264	xemit.c	FUNCTION_9	FOR_1	IF_13	CALL_15
0xbc4	          0x4889c6	                            mov rsi, rax	       264	xemit.c	FUNCTION_9	FOR_1	IF_13	CALL_15
0xbc7	      0xe800000000	                          call 0x4000c0c	       264	xemit.c	FUNCTION_9	FOR_1	IF_13	CALL_15
0xbcc	        0x4883c410	                           add rsp, 0x10	       264	xemit.c	FUNCTION_9	FOR_1	IF_13	CALL_15
0xbd0	            0x85c0	                           test eax, eax	       264	xemit.c	FUNCTION_9	FOR_1	IF_13	CALL_15
0xbd2	            0x794c	                           jns 0x4000c60	       264	xemit.c	FUNCTION_9	FOR_1	IF_13	CALL_15
0xbd4	      0xb8ffffffff	                     mov eax, 0xffffffff	       266	xemit.c	FUNCTION_9	FOR_1	IF_13
0xbd9	      0xe9d8020000	                           jmp 0x4000ef6	       266	xemit.c	FUNCTION_9	FOR_1	IF_13
0xbde	    0x488b8528ffff	             mov rax, qword [rbp - 0xd8]	       272	xemit.c	FUNCTION_9	FOR_1	FOR_2	IF_14	CALL_16
0xbe5	    0x488db8880000	                   lea rdi, [rax + 0x88]	       272	xemit.c	FUNCTION_9	FOR_1	FOR_2	IF_14	CALL_16
0xbec	    0x488b9518ffff	             mov rdx, qword [rbp - 0xe8]	       272	xemit.c	FUNCTION_9	FOR_1	FOR_2	IF_14	CALL_16
0xbf3	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       272	xemit.c	FUNCTION_9	FOR_1	FOR_2	IF_14	CALL_16
0xbfa	          0x4889d1	                            mov rcx, rdx	       272	xemit.c	FUNCTION_9	FOR_1	FOR_2	IF_14	CALL_16
0xbfd	      0xba00000000	                              mov edx, 0	       272	xemit.c	FUNCTION_9	FOR_1	FOR_2	IF_14	CALL_16
0xc02	          0x4889c6	                            mov rsi, rax	       272	xemit.c	FUNCTION_9	FOR_1	FOR_2	IF_14	CALL_16
0xc05	      0xe843f4ffff	                call sym.xdl_emit_record	       272	xemit.c	FUNCTION_9	FOR_1	FOR_2	IF_14	CALL_16
0xc0a	            0x85c0	                           test eax, eax	       272	xemit.c	FUNCTION_9	FOR_1	FOR_2	IF_14	CALL_16
0xc0c	            0x790a	                           jns 0x4000c58	       272	xemit.c	FUNCTION_9	FOR_1	FOR_2	IF_14	CALL_16
0xc0e	      0xb8ffffffff	                     mov eax, 0xffffffff	       273	xemit.c	FUNCTION_9	FOR_1	FOR_2	IF_14
0xc13	      0xe99e020000	                           jmp 0x4000ef6	       273	xemit.c	FUNCTION_9	FOR_1	FOR_2	IF_14
0xc18	    0x48838548ffff	               add qword [rbp - 0xb8], 1	       271	xemit.c	FUNCTION_9	FOR_1	FOR_2
0xc20	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       271	xemit.c	FUNCTION_9	FOR_1	FOR_2
0xc27	        0x488b4010	            mov rax, qword [rax + 0x10] 	       271	xemit.c	FUNCTION_9	FOR_1	FOR_2
0xc2b	    0x483b8548ffff	             cmp rax, qword [rbp - 0xb8]	       271	xemit.c	FUNCTION_9	FOR_1	FOR_2
0xc32	            0x7faa	                            jg 0x4000c1e	       271	xemit.c	FUNCTION_9	FOR_1	FOR_2
0xc34	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       275	xemit.c	FUNCTION_9	FOR_1	FOR_3
0xc3b	        0x488b4008	                mov rax, qword [rax + 8]	       275	xemit.c	FUNCTION_9	FOR_1	FOR_3
0xc3f	    0x48898540ffff	             mov qword [rbp - 0xc0], rax	       275	xemit.c	FUNCTION_9	FOR_1	FOR_3
0xc46	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       275	xemit.c	FUNCTION_9	FOR_1	FOR_3
0xc4d	        0x488b4010	            mov rax, qword [rax + 0x10] 	       275	xemit.c	FUNCTION_9	FOR_1	FOR_3
0xc51	    0x48898548ffff	             mov qword [rbp - 0xb8], rax	       275	xemit.c	FUNCTION_9	FOR_1	FOR_3
0xc58	            0xeb4a	                           jmp 0x4000ce4	       279	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_4
0xc5a	    0x488b8528ffff	             mov rax, qword [rbp - 0xd8]	       280	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_4	IF_15	CALL_17
0xc61	    0x488db8880000	                   lea rdi, [rax + 0x88]	       280	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_4	IF_15	CALL_17
0xc68	    0x488b9518ffff	             mov rdx, qword [rbp - 0xe8]	       280	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_4	IF_15	CALL_17
0xc6f	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       280	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_4	IF_15	CALL_17
0xc76	          0x4889d1	                            mov rcx, rdx	       280	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_4	IF_15	CALL_17
0xc79	      0xba00000000	                              mov edx, 0	       280	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_4	IF_15	CALL_17
0xc7e	          0x4889c6	                            mov rsi, rax	       280	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_4	IF_15	CALL_17
0xc81	      0xe8c7f3ffff	                call sym.xdl_emit_record	       280	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_4	IF_15	CALL_17
0xc86	            0x85c0	                           test eax, eax	       280	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_4	IF_15	CALL_17
0xc88	            0x790a	                           jns 0x4000cd4	       280	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_4	IF_15	CALL_17
0xc8a	      0xb8ffffffff	                     mov eax, 0xffffffff	       281	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_4	IF_15
0xc8f	      0xe922020000	                           jmp 0x4000ef6	       281	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_4	IF_15
0xc94	    0x48838540ffff	               add qword [rbp - 0xc0], 1	       279	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_4
0xc9c	    0x48838548ffff	               add qword [rbp - 0xb8], 1	       279	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_4
0xca4	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       279	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_4
0xcab	        0x488b4008	                mov rax, qword [rax + 8]	       279	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_4
0xcaf	    0x483b8540ffff	             cmp rax, qword [rbp - 0xc0]	       279	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_4
0xcb6	            0x7e14	                           jle 0x4000d0c	       279	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_4
0xcb8	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       279	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_4
0xcbf	        0x488b4010	            mov rax, qword [rax + 0x10] 	       279	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_4
0xcc3	    0x483b8548ffff	             cmp rax, qword [rbp - 0xb8]	       279	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_4
0xcca	            0x7f8e	                            jg 0x4000c9a	       279	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_4
0xccc	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       286	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_5
0xcd3	        0x488b4008	                mov rax, qword [rax + 8]	       286	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_5
0xcd7	    0x48898540ffff	             mov qword [rbp - 0xc0], rax	       286	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_5
0xcde	            0xeb3b	                           jmp 0x4000d5b	       286	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_5
0xce0	    0x488b8528ffff	             mov rax, qword [rbp - 0xd8]	       287	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_5	IF_16	CALL_18
0xce7	    0x488b9518ffff	             mov rdx, qword [rbp - 0xe8]	       287	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_5	IF_16	CALL_18
0xcee	    0x488bb540ffff	             mov rsi, qword [rbp - 0xc0]	       287	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_5	IF_16	CALL_18
0xcf5	          0x4889d1	                            mov rcx, rdx	       287	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_5	IF_16	CALL_18
0xcf8	      0xba00000000	                              mov edx, 0	       287	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_5	IF_16	CALL_18
0xcfd	          0x4889c7	                            mov rdi, rax	       287	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_5	IF_16	CALL_18
0xd00	      0xe848f3ffff	                call sym.xdl_emit_record	       287	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_5	IF_16	CALL_18
0xd05	            0x85c0	                           test eax, eax	       287	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_5	IF_16	CALL_18
0xd07	            0x790a	                           jns 0x4000d53	       287	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_5	IF_16	CALL_18
0xd09	      0xb8ffffffff	                     mov eax, 0xffffffff	       288	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_5	IF_16
0xd0e	      0xe9a3010000	                           jmp 0x4000ef6	       288	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_5	IF_16
0xd13	    0x48838540ffff	               add qword [rbp - 0xc0], 1	       286	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_5
0xd1b	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       286	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_5
0xd22	        0x488b5008	                mov rdx, qword [rax + 8]	       286	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_5
0xd26	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       286	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_5
0xd2d	        0x488b4018	            mov rax, qword [rax + 0x18] 	       286	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_5
0xd31	          0x4801d0	                            add rax, rdx	       286	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_5
0xd34	    0x483b8540ffff	             cmp rax, qword [rbp - 0xc0]	       286	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_5
0xd3b	            0x7fa3	                            jg 0x4000d20	       286	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_5
0xd3d	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       293	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_6
0xd44	        0x488b4010	            mov rax, qword [rax + 0x10] 	       293	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_6
0xd48	    0x48898548ffff	             mov qword [rbp - 0xb8], rax	       293	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_6
0xd4f	            0xeb42	                           jmp 0x4000dd3	       293	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_6
0xd51	    0x488b8528ffff	             mov rax, qword [rbp - 0xd8]	       294	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_6	IF_17	CALL_19
0xd58	    0x488db8880000	                   lea rdi, [rax + 0x88]	       294	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_6	IF_17	CALL_19
0xd5f	    0x488b9518ffff	             mov rdx, qword [rbp - 0xe8]	       294	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_6	IF_17	CALL_19
0xd66	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       294	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_6	IF_17	CALL_19
0xd6d	          0x4889d1	                            mov rcx, rdx	       294	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_6	IF_17	CALL_19
0xd70	      0xba00000000	                              mov edx, 0	       294	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_6	IF_17	CALL_19
0xd75	          0x4889c6	                            mov rsi, rax	       294	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_6	IF_17	CALL_19
0xd78	      0xe8d0f2ffff	                call sym.xdl_emit_record	       294	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_6	IF_17	CALL_19
0xd7d	            0x85c0	                           test eax, eax	       294	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_6	IF_17	CALL_19
0xd7f	            0x790a	                           jns 0x4000dcb	       294	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_6	IF_17	CALL_19
0xd81	      0xb8ffffffff	                     mov eax, 0xffffffff	       295	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_6	IF_17
0xd86	      0xe92b010000	                           jmp 0x4000ef6	       295	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_6	IF_17
0xd8b	    0x48838548ffff	               add qword [rbp - 0xb8], 1	       293	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_6
0xd93	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       293	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_6
0xd9a	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       293	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_6
0xd9e	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       293	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_6
0xda5	        0x488b4020	            mov rax, qword [rax + 0x20] 	       293	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_6
0xda9	          0x4801d0	                            add rax, rdx	       293	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_6
0xdac	    0x483b8548ffff	             cmp rax, qword [rbp - 0xb8]	       293	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_6
0xdb3	            0x7f9c	                            jg 0x4000d91	       293	xemit.c	FUNCTION_9	FOR_1	FOR_3	FOR_6
0xdb5	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       297	xemit.c	FUNCTION_9	FOR_1	FOR_3	IF_18
0xdbc	    0x483b8560ffff	             cmp rax, qword [rbp - 0xa0]	       297	xemit.c	FUNCTION_9	FOR_1	FOR_3	IF_18
0xdc3	            0x7456	                            je 0x4000e5b	       297	xemit.c	FUNCTION_9	FOR_1	FOR_3	IF_18
0xdc5	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       299	xemit.c	FUNCTION_9	FOR_1	FOR_3
0xdcc	        0x488b5008	                mov rdx, qword [rax + 8]	       299	xemit.c	FUNCTION_9	FOR_1	FOR_3
0xdd0	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       299	xemit.c	FUNCTION_9	FOR_1	FOR_3
0xdd7	        0x488b4018	            mov rax, qword [rax + 0x18] 	       299	xemit.c	FUNCTION_9	FOR_1	FOR_3
0xddb	          0x4801d0	                            add rax, rdx	       299	xemit.c	FUNCTION_9	FOR_1	FOR_3
0xdde	    0x48898540ffff	             mov qword [rbp - 0xc0], rax	       299	xemit.c	FUNCTION_9	FOR_1	FOR_3
0xde5	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       300	xemit.c	FUNCTION_9	FOR_1	FOR_3
0xdec	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       300	xemit.c	FUNCTION_9	FOR_1	FOR_3
0xdf0	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       300	xemit.c	FUNCTION_9	FOR_1	FOR_3
0xdf7	        0x488b4020	            mov rax, qword [rax + 0x20] 	       300	xemit.c	FUNCTION_9	FOR_1	FOR_3
0xdfb	          0x4801d0	                            add rax, rdx	       300	xemit.c	FUNCTION_9	FOR_1	FOR_3
0xdfe	    0x48898548ffff	             mov qword [rbp - 0xb8], rax	       300	xemit.c	FUNCTION_9	FOR_1	FOR_3
0xe05	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       275	xemit.c	FUNCTION_9	FOR_1	FOR_3
0xe0c	          0x488b00	                    mov rax, qword [rax]	       275	xemit.c	FUNCTION_9	FOR_1	FOR_3
0xe0f	    0x48898538ffff	             mov qword [rbp - 0xc8], rax	       275	xemit.c	FUNCTION_9	FOR_1	FOR_3
0xe16	      0xe93dfeffff	                           jmp 0x4000c98	       301	xemit.c	FUNCTION_9	FOR_1	FOR_3
0xe1b	              0x90	                                     nop	       298	xemit.c	FUNCTION_9	FOR_1	FOR_3	IF_18
0xe1c	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	       306	xemit.c	FUNCTION_9	FOR_1	FOR_7
0xe23	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       306	xemit.c	FUNCTION_9	FOR_1	FOR_7
0xe27	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	       306	xemit.c	FUNCTION_9	FOR_1	FOR_7
0xe2e	        0x488b4020	            mov rax, qword [rax + 0x20] 	       306	xemit.c	FUNCTION_9	FOR_1	FOR_7
0xe32	          0x4801d0	                            add rax, rdx	       306	xemit.c	FUNCTION_9	FOR_1	FOR_7
0xe35	    0x48898548ffff	             mov qword [rbp - 0xb8], rax	       306	xemit.c	FUNCTION_9	FOR_1	FOR_7
0xe3c	            0xeb3f	                           jmp 0x4000ebd	       306	xemit.c	FUNCTION_9	FOR_1	FOR_7
0xe3e	    0x488b8528ffff	             mov rax, qword [rbp - 0xd8]	       307	xemit.c	FUNCTION_9	FOR_1	FOR_7	IF_19	CALL_20
0xe45	    0x488db8880000	                   lea rdi, [rax + 0x88]	       307	xemit.c	FUNCTION_9	FOR_1	FOR_7	IF_19	CALL_20
0xe4c	    0x488b9518ffff	             mov rdx, qword [rbp - 0xe8]	       307	xemit.c	FUNCTION_9	FOR_1	FOR_7	IF_19	CALL_20
0xe53	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       307	xemit.c	FUNCTION_9	FOR_1	FOR_7	IF_19	CALL_20
0xe5a	          0x4889d1	                            mov rcx, rdx	       307	xemit.c	FUNCTION_9	FOR_1	FOR_7	IF_19	CALL_20
0xe5d	      0xba00000000	                              mov edx, 0	       307	xemit.c	FUNCTION_9	FOR_1	FOR_7	IF_19	CALL_20
0xe62	          0x4889c6	                            mov rsi, rax	       307	xemit.c	FUNCTION_9	FOR_1	FOR_7	IF_19	CALL_20
0xe65	      0xe8e3f1ffff	                call sym.xdl_emit_record	       307	xemit.c	FUNCTION_9	FOR_1	FOR_7	IF_19	CALL_20
0xe6a	            0x85c0	                           test eax, eax	       307	xemit.c	FUNCTION_9	FOR_1	FOR_7	IF_19	CALL_20
0xe6c	            0x7907	                           jns 0x4000eb5	       307	xemit.c	FUNCTION_9	FOR_1	FOR_7	IF_19	CALL_20
0xe6e	      0xb8ffffffff	                     mov eax, 0xffffffff	       308	xemit.c	FUNCTION_9	FOR_1	FOR_7	IF_19
0xe73	            0xeb41	                           jmp 0x4000ef6	       308	xemit.c	FUNCTION_9	FOR_1	FOR_7	IF_19
0xe75	    0x48838548ffff	               add qword [rbp - 0xb8], 1	       306	xemit.c	FUNCTION_9	FOR_1	FOR_7
0xe7d	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       306	xemit.c	FUNCTION_9	FOR_1	FOR_7
0xe84	    0x483b8558ffff	             cmp rax, qword [rbp - 0xa8]	       306	xemit.c	FUNCTION_9	FOR_1	FOR_7
0xe8b	            0x7cb1	                            jl 0x4000e7e	       306	xemit.c	FUNCTION_9	FOR_1	FOR_7
0xe8d	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	       174	xemit.c	FUNCTION_9	FOR_1
0xe94	          0x488b00	                    mov rax, qword [rax]	       174	xemit.c	FUNCTION_9	FOR_1
0xe97	    0x48898538ffff	             mov qword [rbp - 0xc8], rax	       174	xemit.c	FUNCTION_9	FOR_1
0xe9e	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       174	xemit.c	FUNCTION_9	FOR_1
0xea5	          0x4885c0	                           test rax, rax	       174	xemit.c	FUNCTION_9	FOR_1
0xea8	     0xf852af8ffff	                           jne 0x4000718	       174	xemit.c	FUNCTION_9	FOR_1
0xeae	            0xeb01	                           jmp 0x4000ef1	       174	xemit.c	FUNCTION_9	FOR_1
0xeb0	              0x90	                                     nop	       177	xemit.c	FUNCTION_9	FOR_1	IF_1
0xeb1	      0xb800000000	                              mov eax, 0	       311	xemit.c	FUNCTION_9
0xeb6	        0x488b75f8	                mov rsi, qword [rbp - 8]	       312	xemit.c	FUNCTION_9
0xeba	    0x644833342528	                xor rsi, qword fs:[0x28]	       312	xemit.c	FUNCTION_9
0xec3	            0x7405	                            je 0x4000f0a	       312	xemit.c	FUNCTION_9
0xec5	      0xe800000000	                          call 0x4000f0a	       312	xemit.c	FUNCTION_9
0xeca	              0xc9	                                   leave	       312	xemit.c	FUNCTION_9
0xecb	              0xc3	                                     ret	       312	xemit.c	FUNCTION_9
is_empty_rec	CALL,2:FOR,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:WHILE,1	43
0x5d4	              0x55	                                push rbp	       156	xemit.c	FUNCTION_8
0x5d5	          0x4889e5	                            mov rbp, rsp	       156	xemit.c	FUNCTION_8
0x5d8	        0x4883ec30	                           sub rsp, 0x30	       156	xemit.c	FUNCTION_8
0x5dc	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       156	xemit.c	FUNCTION_8
0x5e0	        0x488975d0	             mov qword [rbp - 0x30], rsi	       156	xemit.c	FUNCTION_8
0x5e4	    0x64488b042528	                mov rax, qword fs:[0x28]	       156	xemit.c	FUNCTION_8
0x5ed	        0x488945f8	                mov qword [rbp - 8], rax	       156	xemit.c	FUNCTION_8
0x5f1	            0x31c0	                            xor eax, eax	       156	xemit.c	FUNCTION_8
0x5f3	        0x488d55e8	                   lea rdx, [rbp - 0x18]	       158	xemit.c	FUNCTION_8	CALL_1
0x5f7	        0x488b4dd0	             mov rcx, qword [rbp - 0x30]	       158	xemit.c	FUNCTION_8	CALL_1
0x5fb	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       158	xemit.c	FUNCTION_8	CALL_1
0x5ff	          0x4889ce	                            mov rsi, rcx	       158	xemit.c	FUNCTION_8	CALL_1
0x602	          0x4889c7	                            mov rdi, rax	       158	xemit.c	FUNCTION_8	CALL_1
0x605	      0xe8f6f9ffff	                    call sym.xdl_get_rec	       158	xemit.c	FUNCTION_8	CALL_1
0x60a	        0x488945f0	             mov qword [rbp - 0x10], rax	       158	xemit.c	FUNCTION_8	CALL_1
0x60e	            0xeb11	                           jmp 0x4000661	       160	xemit.c	FUNCTION_8	WHILE_1	CALL_2
0x610	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       161	xemit.c	FUNCTION_8	WHILE_1
0x614	        0x4883c001	                              add rax, 1	       161	xemit.c	FUNCTION_8	WHILE_1
0x618	        0x488945e8	             mov qword [rbp - 0x18], rax	       161	xemit.c	FUNCTION_8	WHILE_1
0x61c	      0x48836df001	               sub qword [rbp - 0x10], 1	       162	xemit.c	FUNCTION_8	WHILE_1
0x621	      0x48837df000	               cmp qword [rbp - 0x10], 0	       160	xemit.c	FUNCTION_8	WHILE_1	CALL_2
0x626	            0x7e27	                           jle 0x400068f	       160	xemit.c	FUNCTION_8	WHILE_1	CALL_2
0x628	      0xe800000000	                          call 0x400066d	       160	xemit.c	FUNCTION_8	WHILE_1	CALL_2
0x62d	          0x488b10	                    mov rdx, qword [rax]	       160	xemit.c	FUNCTION_8	WHILE_1	CALL_2
0x630	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       160	xemit.c	FUNCTION_8	WHILE_1	CALL_2
0x634	           0xfb600	                   movzx eax, byte [rax]	       160	xemit.c	FUNCTION_8	WHILE_1	CALL_2
0x637	           0xfb6c0	                           movzx eax, al	       160	xemit.c	FUNCTION_8	WHILE_1	CALL_2
0x63a	          0x4801c0	                            add rax, rax	       160	xemit.c	FUNCTION_8	WHILE_1	CALL_2
0x63d	          0x4801d0	                            add rax, rdx	       160	xemit.c	FUNCTION_8	WHILE_1	CALL_2
0x640	           0xfb700	                   movzx eax, word [rax]	       160	xemit.c	FUNCTION_8	WHILE_1	CALL_2
0x643	           0xfb7c0	                           movzx eax, ax	       160	xemit.c	FUNCTION_8	WHILE_1	CALL_2
0x646	      0x2500200000	                         and eax, 0x2000	       160	xemit.c	FUNCTION_8	WHILE_1	CALL_2
0x64b	            0x85c0	                           test eax, eax	       160	xemit.c	FUNCTION_8	WHILE_1	CALL_2
0x64d	            0x75c1	                           jne 0x4000650	       160	xemit.c	FUNCTION_8	WHILE_1	CALL_2
0x64f	      0x48837df000	               cmp qword [rbp - 0x10], 0	       164	xemit.c	FUNCTION_8
0x654	           0xf94c0	                                 sete al	       164	xemit.c	FUNCTION_8
0x657	           0xfb6c0	                           movzx eax, al	       164	xemit.c	FUNCTION_8
0x65a	        0x488b4df8	                mov rcx, qword [rbp - 8]	       165	xemit.c	FUNCTION_8
0x65e	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       165	xemit.c	FUNCTION_8
0x667	            0x7405	                            je 0x40006ae	       165	xemit.c	FUNCTION_8
0x669	      0xe800000000	                          call 0x40006ae	       165	xemit.c	FUNCTION_8
0x66e	              0xc9	                                   leave	       165	xemit.c	FUNCTION_8
0x66f	              0xc3	                                     ret	       165	xemit.c	FUNCTION_8
get_func_line	CALL,1:FOR,1:functions,0:IF,2:SWITCH,0:ELSE,0:DO,0:WHILE,0	70
0x4cd	              0x55	                                push rbp	       137	xemit.c	FUNCTION_7
0x4ce	          0x4889e5	                            mov rbp, rsp	       137	xemit.c	FUNCTION_7
0x4d1	        0x4883ec70	                           sub rsp, 0x70	       137	xemit.c	FUNCTION_7
0x4d5	        0x48897db8	             mov qword [rbp - 0x48], rdi	       137	xemit.c	FUNCTION_7
0x4d9	        0x488975b0	             mov qword [rbp - 0x50], rsi	       137	xemit.c	FUNCTION_7
0x4dd	        0x488955a8	             mov qword [rbp - 0x58], rdx	       137	xemit.c	FUNCTION_7
0x4e1	        0x48894da0	             mov qword [rbp - 0x60], rcx	       137	xemit.c	FUNCTION_7
0x4e5	        0x4c894598	              mov qword [rbp - 0x68], r8	       137	xemit.c	FUNCTION_7
0x4e9	    0x64488b042528	                mov rax, qword fs:[0x28]	       137	xemit.c	FUNCTION_7
0x4f2	        0x488945f8	                mov qword [rbp - 8], rax	       137	xemit.c	FUNCTION_7
0x4f6	            0x31c0	                            xor eax, eax	       137	xemit.c	FUNCTION_7
0x4f8	        0x488b45a0	             mov rax, qword [rbp - 0x60]	       138	xemit.c	FUNCTION_7
0x4fc	        0x483b4598	             cmp rax, qword [rbp - 0x68]	       138	xemit.c	FUNCTION_7
0x500	            0x7e09	                           jle 0x400054b	       138	xemit.c	FUNCTION_7
0x502	    0x48c7c0ffffff	             mov rax, 0xffffffffffffffff	       138	xemit.c	FUNCTION_7
0x509	            0xeb05	                           jmp 0x4000550	       138	xemit.c	FUNCTION_7
0x50b	      0xb801000000	                              mov eax, 1	       138	xemit.c	FUNCTION_7
0x510	        0x488945d0	             mov qword [rbp - 0x30], rax	       138	xemit.c	FUNCTION_7
0x514	      0x48837da800	               cmp qword [rbp - 0x58], 0	       141	xemit.c	FUNCTION_7
0x519	            0x740a	                            je 0x4000565	       141	xemit.c	FUNCTION_7
0x51b	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       141	xemit.c	FUNCTION_7
0x51f	        0x4883c008	                              add rax, 8	       141	xemit.c	FUNCTION_7
0x523	            0xeb04	                           jmp 0x4000569	       141	xemit.c	FUNCTION_7
0x525	        0x488d45f7	                      lea rax, [rbp - 9]	       141	xemit.c	FUNCTION_7
0x529	        0x488945d8	             mov qword [rbp - 0x28], rax	       141	xemit.c	FUNCTION_7
0x52d	      0x48837da800	               cmp qword [rbp - 0x58], 0	       142	xemit.c	FUNCTION_7
0x532	            0x7407	                            je 0x400057b	       142	xemit.c	FUNCTION_7
0x534	      0xb850000000	                           mov eax, 0x50	       142	xemit.c	FUNCTION_7
0x539	            0xeb05	                           jmp 0x4000580	       142	xemit.c	FUNCTION_7
0x53b	      0xb801000000	                              mov eax, 1	       142	xemit.c	FUNCTION_7
0x540	        0x488945e0	             mov qword [rbp - 0x20], rax	       142	xemit.c	FUNCTION_7
0x544	        0x488b45a0	             mov rax, qword [rbp - 0x60]	       144	xemit.c	FUNCTION_7	FOR_1
0x548	        0x488945c8	             mov qword [rbp - 0x38], rax	       144	xemit.c	FUNCTION_7	FOR_1
0x54c	            0xeb4a	                           jmp 0x40005d8	       144	xemit.c	FUNCTION_7	FOR_1
0x54e	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       145	xemit.c	FUNCTION_7	FOR_1	CALL_1
0x552	        0x488b7de0	             mov rdi, qword [rbp - 0x20]	       145	xemit.c	FUNCTION_7	FOR_1	CALL_1
0x556	        0x488b4dd8	             mov rcx, qword [rbp - 0x28]	       145	xemit.c	FUNCTION_7	FOR_1	CALL_1
0x55a	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	       145	xemit.c	FUNCTION_7	FOR_1	CALL_1
0x55e	        0x488b75b0	             mov rsi, qword [rbp - 0x50]	       145	xemit.c	FUNCTION_7	FOR_1	CALL_1
0x562	          0x4989f8	                             mov r8, rdi	       145	xemit.c	FUNCTION_7	FOR_1	CALL_1
0x565	          0x4889c7	                            mov rdi, rax	       145	xemit.c	FUNCTION_7	FOR_1	CALL_1
0x568	      0xe84ffeffff	                 call sym.match_func_rec	       145	xemit.c	FUNCTION_7	FOR_1	CALL_1
0x56d	        0x488945e8	             mov qword [rbp - 0x18], rax	       145	xemit.c	FUNCTION_7	FOR_1	CALL_1
0x571	      0x48837de800	               cmp qword [rbp - 0x18], 0	       146	xemit.c	FUNCTION_7	FOR_1	IF_1
0x576	            0x7818	                            js 0x40005d0	       146	xemit.c	FUNCTION_7	FOR_1	IF_1
0x578	      0x48837da800	               cmp qword [rbp - 0x58], 0	       147	xemit.c	FUNCTION_7	FOR_1	IF_1	IF_2
0x57d	            0x740b	                            je 0x40005ca	       147	xemit.c	FUNCTION_7	FOR_1	IF_1	IF_2
0x57f	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       148	xemit.c	FUNCTION_7	FOR_1	IF_1	IF_2
0x583	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       148	xemit.c	FUNCTION_7	FOR_1	IF_1	IF_2
0x587	          0x488910	                    mov qword [rax], rdx	       148	xemit.c	FUNCTION_7	FOR_1	IF_1	IF_2
0x58a	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       149	xemit.c	FUNCTION_7	FOR_1	IF_1
0x58e	            0xeb2e	                           jmp 0x40005fe	       149	xemit.c	FUNCTION_7	FOR_1	IF_1
0x590	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       144	xemit.c	FUNCTION_7	FOR_1
0x594	        0x480145c8	            add qword [rbp - 0x38], rax 	       144	xemit.c	FUNCTION_7	FOR_1
0x598	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       144	xemit.c	FUNCTION_7	FOR_1
0x59c	        0x483b4598	             cmp rax, qword [rbp - 0x68]	       144	xemit.c	FUNCTION_7	FOR_1
0x5a0	            0x7415	                            je 0x40005f7	       144	xemit.c	FUNCTION_7	FOR_1
0x5a2	      0x48837dc800	               cmp qword [rbp - 0x38], 0	       144	xemit.c	FUNCTION_7	FOR_1
0x5a7	            0x780e	                            js 0x40005f7	       144	xemit.c	FUNCTION_7	FOR_1
0x5a9	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       144	xemit.c	FUNCTION_7	FOR_1
0x5ad	        0x488b4038	            mov rax, qword [rax + 0x38] 	       144	xemit.c	FUNCTION_7	FOR_1
0x5b1	        0x483b45c8	             cmp rax, qword [rbp - 0x38]	       144	xemit.c	FUNCTION_7	FOR_1
0x5b5	            0x7f97	                            jg 0x400058e	       144	xemit.c	FUNCTION_7	FOR_1
0x5b7	    0x48c7c0ffffff	             mov rax, 0xffffffffffffffff	       152	xemit.c	FUNCTION_7
0x5be	        0x488b4df8	                mov rcx, qword [rbp - 8]	       153	xemit.c	FUNCTION_7
0x5c2	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       153	xemit.c	FUNCTION_7
0x5cb	            0x7405	                            je 0x4000612	       153	xemit.c	FUNCTION_7
0x5cd	      0xe800000000	                          call 0x4000612	       153	xemit.c	FUNCTION_7
0x5d2	              0xc9	                                   leave	       153	xemit.c	FUNCTION_7
0x5d3	              0xc3	                                     ret	       153	xemit.c	FUNCTION_7
