rect_clip	FOR,0:functions,0:ELSE,0:IF,6:CALL,0:WHILE,0:SWITCH,0:DO,0	67
0x8b	              0x55	                                push rbp	        19	rect.h	FUNCTION_105
0x8c	          0x4889e5	                            mov rbp, rsp	        19	rect.h	FUNCTION_105
0x8f	        0x48897df8	                mov qword [rbp - 8], rdi	        19	rect.h	FUNCTION_105
0x93	        0x488975f0	             mov qword [rbp - 0x10], rsi	        19	rect.h	FUNCTION_105
0x97	        0x488b45f8	                mov rax, qword [rbp - 8]	        20	rect.h	FUNCTION_105	IF_1
0x9b	            0x8b10	                    mov edx, dword [rax]	        20	rect.h	FUNCTION_105	IF_1
0x9d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        20	rect.h	FUNCTION_105	IF_1
0xa1	            0x8b00	                    mov eax, dword [rax]	        20	rect.h	FUNCTION_105	IF_1
0xa3	            0x39c2	                            cmp edx, eax	        20	rect.h	FUNCTION_105	IF_1
0xa5	            0x7d0c	                           jge 0x40000f3	        20	rect.h	FUNCTION_105	IF_1
0xa7	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        20	rect.h	FUNCTION_105	IF_1
0xab	            0x8b10	                    mov edx, dword [rax]	        20	rect.h	FUNCTION_105	IF_1
0xad	        0x488b45f8	                mov rax, qword [rbp - 8]	        20	rect.h	FUNCTION_105	IF_1
0xb1	            0x8910	                    mov dword [rax], edx	        20	rect.h	FUNCTION_105	IF_1
0xb3	        0x488b45f8	                mov rax, qword [rbp - 8]	        21	rect.h	FUNCTION_105	IF_2
0xb7	          0x8b5008	                mov edx, dword [rax + 8]	        21	rect.h	FUNCTION_105	IF_2
0xba	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        21	rect.h	FUNCTION_105	IF_2
0xbe	          0x8b4008	                mov eax, dword [rax + 8]	        21	rect.h	FUNCTION_105	IF_2
0xc1	            0x39c2	                            cmp edx, eax	        21	rect.h	FUNCTION_105	IF_2
0xc3	            0x7d0e	                           jge 0x4000113	        21	rect.h	FUNCTION_105	IF_2
0xc5	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        21	rect.h	FUNCTION_105	IF_2
0xc9	          0x8b5008	                mov edx, dword [rax + 8]	        21	rect.h	FUNCTION_105	IF_2
0xcc	        0x488b45f8	                mov rax, qword [rbp - 8]	        21	rect.h	FUNCTION_105	IF_2
0xd0	          0x895008	                mov dword [rax + 8], edx	        21	rect.h	FUNCTION_105	IF_2
0xd3	        0x488b45f8	                mov rax, qword [rbp - 8]	        22	rect.h	FUNCTION_105	IF_3
0xd7	          0x8b5004	                mov edx, dword [rax + 4]	        22	rect.h	FUNCTION_105	IF_3
0xda	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        22	rect.h	FUNCTION_105	IF_3
0xde	          0x8b4004	                mov eax, dword [rax + 4]	        22	rect.h	FUNCTION_105	IF_3
0xe1	            0x39c2	                            cmp edx, eax	        22	rect.h	FUNCTION_105	IF_3
0xe3	            0x7e0e	                           jle 0x4000133	        22	rect.h	FUNCTION_105	IF_3
0xe5	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        22	rect.h	FUNCTION_105	IF_3
0xe9	          0x8b5004	                mov edx, dword [rax + 4]	        22	rect.h	FUNCTION_105	IF_3
0xec	        0x488b45f8	                mov rax, qword [rbp - 8]	        22	rect.h	FUNCTION_105	IF_3
0xf0	          0x895004	                mov dword [rax + 4], edx	        22	rect.h	FUNCTION_105	IF_3
0xf3	        0x488b45f8	                mov rax, qword [rbp - 8]	        23	rect.h	FUNCTION_105	IF_4
0xf7	          0x8b500c	              mov edx, dword [rax + 0xc]	        23	rect.h	FUNCTION_105	IF_4
0xfa	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        23	rect.h	FUNCTION_105	IF_4
0xfe	          0x8b400c	              mov eax, dword [rax + 0xc]	        23	rect.h	FUNCTION_105	IF_4
0x101	            0x39c2	                            cmp edx, eax	        23	rect.h	FUNCTION_105	IF_4
0x103	            0x7e0e	                           jle 0x4000153	        23	rect.h	FUNCTION_105	IF_4
0x105	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        23	rect.h	FUNCTION_105	IF_4
0x109	          0x8b500c	              mov edx, dword [rax + 0xc]	        23	rect.h	FUNCTION_105	IF_4
0x10c	        0x488b45f8	                mov rax, qword [rbp - 8]	        23	rect.h	FUNCTION_105	IF_4
0x110	          0x89500c	              mov dword [rax + 0xc], edx	        23	rect.h	FUNCTION_105	IF_4
0x113	        0x488b45f8	                mov rax, qword [rbp - 8]	        25	rect.h	FUNCTION_105	IF_5
0x117	          0x8b5004	                mov edx, dword [rax + 4]	        25	rect.h	FUNCTION_105	IF_5
0x11a	        0x488b45f8	                mov rax, qword [rbp - 8]	        25	rect.h	FUNCTION_105	IF_5
0x11e	            0x8b00	                    mov eax, dword [rax]	        25	rect.h	FUNCTION_105	IF_5
0x120	            0x39c2	                            cmp edx, eax	        25	rect.h	FUNCTION_105	IF_5
0x122	            0x7d0d	                           jge 0x4000171	        25	rect.h	FUNCTION_105	IF_5
0x124	        0x488b45f8	                mov rax, qword [rbp - 8]	        25	rect.h	FUNCTION_105	IF_5
0x128	            0x8b10	                    mov edx, dword [rax]	        25	rect.h	FUNCTION_105	IF_5
0x12a	        0x488b45f8	                mov rax, qword [rbp - 8]	        25	rect.h	FUNCTION_105	IF_5
0x12e	          0x895004	                mov dword [rax + 4], edx	        25	rect.h	FUNCTION_105	IF_5
0x131	        0x488b45f8	                mov rax, qword [rbp - 8]	        26	rect.h	FUNCTION_105	IF_6
0x135	          0x8b500c	              mov edx, dword [rax + 0xc]	        26	rect.h	FUNCTION_105	IF_6
0x138	        0x488b45f8	                mov rax, qword [rbp - 8]	        26	rect.h	FUNCTION_105	IF_6
0x13c	          0x8b4008	                mov eax, dword [rax + 8]	        26	rect.h	FUNCTION_105	IF_6
0x13f	            0x39c2	                            cmp edx, eax	        26	rect.h	FUNCTION_105	IF_6
0x141	            0x7d0e	                           jge 0x4000191	        26	rect.h	FUNCTION_105	IF_6
0x143	        0x488b45f8	                mov rax, qword [rbp - 8]	        26	rect.h	FUNCTION_105	IF_6
0x147	          0x8b5008	                mov edx, dword [rax + 8]	        26	rect.h	FUNCTION_105	IF_6
0x14a	        0x488b45f8	                mov rax, qword [rbp - 8]	        26	rect.h	FUNCTION_105	IF_6
0x14e	          0x89500c	              mov dword [rax + 0xc], edx	        26	rect.h	FUNCTION_105	IF_6
0x151	              0x90	                                     nop	        27	rect.h	FUNCTION_105
0x152	              0x5d	                                 pop rbp	        27	rect.h	FUNCTION_105
0x153	              0xc3	                                     ret	        27	rect.h	FUNCTION_105
rect_contains	FOR,0:functions,0:ELSE,0:IF,4:CALL,0:WHILE,0:SWITCH,0:DO,0	39
0x1b4	              0x55	                                push rbp	        40	rect.h	FUNCTION_107
0x1b5	          0x4889e5	                            mov rbp, rsp	        40	rect.h	FUNCTION_107
0x1b8	        0x48897df8	                mov qword [rbp - 8], rdi	        40	rect.h	FUNCTION_107
0x1bc	        0x488975f0	             mov qword [rbp - 0x10], rsi	        40	rect.h	FUNCTION_107
0x1c0	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        41	rect.h	FUNCTION_107	IF_1
0x1c4	            0x8b10	                    mov edx, dword [rax]	        41	rect.h	FUNCTION_107	IF_1
0x1c6	        0x488b45f8	                mov rax, qword [rbp - 8]	        41	rect.h	FUNCTION_107	IF_1
0x1ca	            0x8b00	                    mov eax, dword [rax]	        41	rect.h	FUNCTION_107	IF_1
0x1cc	            0x39c2	                            cmp edx, eax	        41	rect.h	FUNCTION_107	IF_1
0x1ce	            0x7d07	                           jge 0x4000217	        41	rect.h	FUNCTION_107	IF_1
0x1d0	      0xb800000000	                              mov eax, 0	        41	rect.h	FUNCTION_107	IF_1
0x1d5	            0xeb50	                           jmp 0x4000267	        41	rect.h	FUNCTION_107	IF_1
0x1d7	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        42	rect.h	FUNCTION_107	IF_2
0x1db	          0x8b5008	                mov edx, dword [rax + 8]	        42	rect.h	FUNCTION_107	IF_2
0x1de	        0x488b45f8	                mov rax, qword [rbp - 8]	        42	rect.h	FUNCTION_107	IF_2
0x1e2	          0x8b4008	                mov eax, dword [rax + 8]	        42	rect.h	FUNCTION_107	IF_2
0x1e5	            0x39c2	                            cmp edx, eax	        42	rect.h	FUNCTION_107	IF_2
0x1e7	            0x7d07	                           jge 0x4000230	        42	rect.h	FUNCTION_107	IF_2
0x1e9	      0xb800000000	                              mov eax, 0	        42	rect.h	FUNCTION_107	IF_2
0x1ee	            0xeb37	                           jmp 0x4000267	        42	rect.h	FUNCTION_107	IF_2
0x1f0	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        43	rect.h	FUNCTION_107	IF_3
0x1f4	          0x8b5004	                mov edx, dword [rax + 4]	        43	rect.h	FUNCTION_107	IF_3
0x1f7	        0x488b45f8	                mov rax, qword [rbp - 8]	        43	rect.h	FUNCTION_107	IF_3
0x1fb	          0x8b4004	                mov eax, dword [rax + 4]	        43	rect.h	FUNCTION_107	IF_3
0x1fe	            0x39c2	                            cmp edx, eax	        43	rect.h	FUNCTION_107	IF_3
0x200	            0x7e07	                           jle 0x4000249	        43	rect.h	FUNCTION_107	IF_3
0x202	      0xb800000000	                              mov eax, 0	        43	rect.h	FUNCTION_107	IF_3
0x207	            0xeb1e	                           jmp 0x4000267	        43	rect.h	FUNCTION_107	IF_3
0x209	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        44	rect.h	FUNCTION_107	IF_4
0x20d	          0x8b500c	              mov edx, dword [rax + 0xc]	        44	rect.h	FUNCTION_107	IF_4
0x210	        0x488b45f8	                mov rax, qword [rbp - 8]	        44	rect.h	FUNCTION_107	IF_4
0x214	          0x8b400c	              mov eax, dword [rax + 0xc]	        44	rect.h	FUNCTION_107	IF_4
0x217	            0x39c2	                            cmp edx, eax	        44	rect.h	FUNCTION_107	IF_4
0x219	            0x7e07	                           jle 0x4000262	        44	rect.h	FUNCTION_107	IF_4
0x21b	      0xb800000000	                              mov eax, 0	        44	rect.h	FUNCTION_107	IF_4
0x220	            0xeb05	                           jmp 0x4000267	        44	rect.h	FUNCTION_107	IF_4
0x222	      0xb801000000	                              mov eax, 1	        45	rect.h	FUNCTION_107
0x227	              0x5d	                                 pop rbp	        46	rect.h	FUNCTION_107
0x228	              0xc3	                                     ret	        46	rect.h	FUNCTION_107
rect_intersects	FOR,0:functions,0:ELSE,0:IF,2:CALL,0:WHILE,0:SWITCH,0:DO,0	35
0x229	              0x55	                                push rbp	        50	rect.h	FUNCTION_108
0x22a	          0x4889e5	                            mov rbp, rsp	        50	rect.h	FUNCTION_108
0x22d	        0x48897df8	                mov qword [rbp - 8], rdi	        50	rect.h	FUNCTION_108
0x231	        0x488975f0	             mov qword [rbp - 0x10], rsi	        50	rect.h	FUNCTION_108
0x235	        0x488b45f8	                mov rax, qword [rbp - 8]	        51	rect.h	FUNCTION_108	IF_1
0x239	            0x8b10	                    mov edx, dword [rax]	        51	rect.h	FUNCTION_108	IF_1
0x23b	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        51	rect.h	FUNCTION_108	IF_1
0x23f	          0x8b4004	                mov eax, dword [rax + 4]	        51	rect.h	FUNCTION_108	IF_1
0x242	            0x39c2	                            cmp edx, eax	        51	rect.h	FUNCTION_108	IF_1
0x244	            0x7f11	                            jg 0x4000297	        51	rect.h	FUNCTION_108	IF_1
0x246	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        51	rect.h	FUNCTION_108	IF_1
0x24a	            0x8b10	                    mov edx, dword [rax]	        51	rect.h	FUNCTION_108	IF_1
0x24c	        0x488b45f8	                mov rax, qword [rbp - 8]	        51	rect.h	FUNCTION_108	IF_1
0x250	          0x8b4004	                mov eax, dword [rax + 4]	        51	rect.h	FUNCTION_108	IF_1
0x253	            0x39c2	                            cmp edx, eax	        51	rect.h	FUNCTION_108	IF_1
0x255	            0x7e07	                           jle 0x400029e	        51	rect.h	FUNCTION_108	IF_1
0x257	      0xb800000000	                              mov eax, 0	        52	rect.h	FUNCTION_108	IF_1
0x25c	            0xeb30	                           jmp 0x40002ce	        52	rect.h	FUNCTION_108	IF_1
0x25e	        0x488b45f8	                mov rax, qword [rbp - 8]	        53	rect.h	FUNCTION_108	IF_2
0x262	          0x8b5008	                mov edx, dword [rax + 8]	        53	rect.h	FUNCTION_108	IF_2
0x265	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        53	rect.h	FUNCTION_108	IF_2
0x269	          0x8b400c	              mov eax, dword [rax + 0xc]	        53	rect.h	FUNCTION_108	IF_2
0x26c	            0x39c2	                            cmp edx, eax	        53	rect.h	FUNCTION_108	IF_2
0x26e	            0x7f12	                            jg 0x40002c2	        53	rect.h	FUNCTION_108	IF_2
0x270	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        53	rect.h	FUNCTION_108	IF_2
0x274	          0x8b5008	                mov edx, dword [rax + 8]	        53	rect.h	FUNCTION_108	IF_2
0x277	        0x488b45f8	                mov rax, qword [rbp - 8]	        53	rect.h	FUNCTION_108	IF_2
0x27b	          0x8b400c	              mov eax, dword [rax + 0xc]	        53	rect.h	FUNCTION_108	IF_2
0x27e	            0x39c2	                            cmp edx, eax	        53	rect.h	FUNCTION_108	IF_2
0x280	            0x7e07	                           jle 0x40002c9	        53	rect.h	FUNCTION_108	IF_2
0x282	      0xb800000000	                              mov eax, 0	        54	rect.h	FUNCTION_108	IF_2
0x287	            0xeb05	                           jmp 0x40002ce	        54	rect.h	FUNCTION_108	IF_2
0x289	      0xb801000000	                              mov eax, 1	        55	rect.h	FUNCTION_108
0x28e	              0x5d	                                 pop rbp	        56	rect.h	FUNCTION_108
0x28f	              0xc3	                                     ret	        56	rect.h	FUNCTION_108
rect_equal	FOR,0:functions,0:ELSE,0:IF,0:CALL,0:WHILE,0:SWITCH,0:DO,0	33
0x154	              0x55	                                push rbp	        31	rect.h	FUNCTION_106
0x155	          0x4889e5	                            mov rbp, rsp	        31	rect.h	FUNCTION_106
0x158	        0x48897df8	                mov qword [rbp - 8], rdi	        31	rect.h	FUNCTION_106
0x15c	        0x488975f0	             mov qword [rbp - 0x10], rsi	        31	rect.h	FUNCTION_106
0x160	        0x488b45f8	                mov rax, qword [rbp - 8]	        32	rect.h	FUNCTION_106
0x164	            0x8b10	                    mov edx, dword [rax]	        32	rect.h	FUNCTION_106
0x166	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        32	rect.h	FUNCTION_106
0x16a	            0x8b00	                    mov eax, dword [rax]	        32	rect.h	FUNCTION_106
0x16c	            0x39c2	                            cmp edx, eax	        34	rect.h	FUNCTION_106
0x16e	            0x753d	                           jne 0x40001ed	        34	rect.h	FUNCTION_106
0x170	        0x488b45f8	                mov rax, qword [rbp - 8]	        33	rect.h	FUNCTION_106
0x174	          0x8b5008	                mov edx, dword [rax + 8]	        33	rect.h	FUNCTION_106
0x177	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        33	rect.h	FUNCTION_106
0x17b	          0x8b4008	                mov eax, dword [rax + 8]	        33	rect.h	FUNCTION_106
0x17e	            0x39c2	                            cmp edx, eax	        32	rect.h	FUNCTION_106
0x180	            0x752b	                           jne 0x40001ed	        32	rect.h	FUNCTION_106
0x182	        0x488b45f8	                mov rax, qword [rbp - 8]	        34	rect.h	FUNCTION_106
0x186	          0x8b5004	                mov edx, dword [rax + 4]	        34	rect.h	FUNCTION_106
0x189	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        34	rect.h	FUNCTION_106
0x18d	          0x8b4004	                mov eax, dword [rax + 4]	        34	rect.h	FUNCTION_106
0x190	            0x39c2	                            cmp edx, eax	        33	rect.h	FUNCTION_106
0x192	            0x7519	                           jne 0x40001ed	        33	rect.h	FUNCTION_106
0x194	        0x488b45f8	                mov rax, qword [rbp - 8]	        35	rect.h	FUNCTION_106
0x198	          0x8b500c	              mov edx, dword [rax + 0xc]	        35	rect.h	FUNCTION_106
0x19b	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        35	rect.h	FUNCTION_106
0x19f	          0x8b400c	              mov eax, dword [rax + 0xc]	        35	rect.h	FUNCTION_106
0x1a2	            0x39c2	                            cmp edx, eax	        34	rect.h	FUNCTION_106
0x1a4	            0x7507	                           jne 0x40001ed	        34	rect.h	FUNCTION_106
0x1a6	      0xb801000000	                              mov eax, 1	        34	rect.h	FUNCTION_106
0x1ab	            0xeb05	                           jmp 0x40001f2	        34	rect.h	FUNCTION_106
0x1ad	      0xb800000000	                              mov eax, 0	        34	rect.h	FUNCTION_106
0x1b2	              0x5d	                                 pop rbp	        36	rect.h	FUNCTION_106
0x1b3	              0xc3	                                     ret	        36	rect.h	FUNCTION_106
rect_expand	FOR,0:functions,0:ELSE,0:IF,4:CALL,0:WHILE,0:SWITCH,0:DO,0	47
0x0	              0x55	                                push rbp	        10	rect.h	FUNCTION_104
0x1	          0x4889e5	                            mov rbp, rsp	        10	rect.h	FUNCTION_104
0x4	        0x48897df8	                mov qword [rbp - 8], rdi	        10	rect.h	FUNCTION_104
0x8	        0x488975f0	             mov qword [rbp - 0x10], rsi	        10	rect.h	FUNCTION_104
0xc	        0x488b45f8	                mov rax, qword [rbp - 8]	        11	rect.h	FUNCTION_104	IF_1
0x10	            0x8b10	                    mov edx, dword [rax]	        11	rect.h	FUNCTION_104	IF_1
0x12	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        11	rect.h	FUNCTION_104	IF_1
0x16	            0x8b00	                    mov eax, dword [rax]	        11	rect.h	FUNCTION_104	IF_1
0x18	            0x39c2	                            cmp edx, eax	        11	rect.h	FUNCTION_104	IF_1
0x1a	            0x7e0c	                           jle 0x4000068	        11	rect.h	FUNCTION_104	IF_1
0x1c	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        11	rect.h	FUNCTION_104	IF_1
0x20	            0x8b10	                    mov edx, dword [rax]	        11	rect.h	FUNCTION_104	IF_1
0x22	        0x488b45f8	                mov rax, qword [rbp - 8]	        11	rect.h	FUNCTION_104	IF_1
0x26	            0x8910	                    mov dword [rax], edx	        11	rect.h	FUNCTION_104	IF_1
0x28	        0x488b45f8	                mov rax, qword [rbp - 8]	        12	rect.h	FUNCTION_104	IF_2
0x2c	          0x8b5008	                mov edx, dword [rax + 8]	        12	rect.h	FUNCTION_104	IF_2
0x2f	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        12	rect.h	FUNCTION_104	IF_2
0x33	          0x8b4008	                mov eax, dword [rax + 8]	        12	rect.h	FUNCTION_104	IF_2
0x36	            0x39c2	                            cmp edx, eax	        12	rect.h	FUNCTION_104	IF_2
0x38	            0x7e0e	                           jle 0x4000088	        12	rect.h	FUNCTION_104	IF_2
0x3a	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        12	rect.h	FUNCTION_104	IF_2
0x3e	          0x8b5008	                mov edx, dword [rax + 8]	        12	rect.h	FUNCTION_104	IF_2
0x41	        0x488b45f8	                mov rax, qword [rbp - 8]	        12	rect.h	FUNCTION_104	IF_2
0x45	          0x895008	                mov dword [rax + 8], edx	        12	rect.h	FUNCTION_104	IF_2
0x48	        0x488b45f8	                mov rax, qword [rbp - 8]	        13	rect.h	FUNCTION_104	IF_3
0x4c	          0x8b5004	                mov edx, dword [rax + 4]	        13	rect.h	FUNCTION_104	IF_3
0x4f	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        13	rect.h	FUNCTION_104	IF_3
0x53	          0x8b4004	                mov eax, dword [rax + 4]	        13	rect.h	FUNCTION_104	IF_3
0x56	            0x39c2	                            cmp edx, eax	        13	rect.h	FUNCTION_104	IF_3
0x58	            0x7d0e	                           jge 0x40000a8	        13	rect.h	FUNCTION_104	IF_3
0x5a	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        13	rect.h	FUNCTION_104	IF_3
0x5e	          0x8b5004	                mov edx, dword [rax + 4]	        13	rect.h	FUNCTION_104	IF_3
0x61	        0x488b45f8	                mov rax, qword [rbp - 8]	        13	rect.h	FUNCTION_104	IF_3
0x65	          0x895004	                mov dword [rax + 4], edx	        13	rect.h	FUNCTION_104	IF_3
0x68	        0x488b45f8	                mov rax, qword [rbp - 8]	        14	rect.h	FUNCTION_104	IF_4
0x6c	          0x8b500c	              mov edx, dword [rax + 0xc]	        14	rect.h	FUNCTION_104	IF_4
0x6f	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        14	rect.h	FUNCTION_104	IF_4
0x73	          0x8b400c	              mov eax, dword [rax + 0xc]	        14	rect.h	FUNCTION_104	IF_4
0x76	            0x39c2	                            cmp edx, eax	        14	rect.h	FUNCTION_104	IF_4
0x78	            0x7d0e	                           jge 0x40000c8	        14	rect.h	FUNCTION_104	IF_4
0x7a	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        14	rect.h	FUNCTION_104	IF_4
0x7e	          0x8b500c	              mov edx, dword [rax + 0xc]	        14	rect.h	FUNCTION_104	IF_4
0x81	        0x488b45f8	                mov rax, qword [rbp - 8]	        14	rect.h	FUNCTION_104	IF_4
0x85	          0x89500c	              mov dword [rax + 0xc], edx	        14	rect.h	FUNCTION_104	IF_4
0x88	              0x90	                                     nop	        15	rect.h	FUNCTION_104
0x89	              0x5d	                                 pop rbp	        15	rect.h	FUNCTION_104
0x8a	              0xc3	                                     ret	        15	rect.h	FUNCTION_104
