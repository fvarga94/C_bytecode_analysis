Curl_ssl_random	WHILE,0:SWITCH,0:ELSE,0:DO,0:FOR,0:IF,0:functions,0:CALL,1	3
0x4001590	    0x488b05000000	            mov rax, qword [0x04001597] 	       737	vtls.c	FUNCTION_33	CALL_1
0x4001597	        0x488b4050	            mov rax, qword [rax + 0x50] 	       737	vtls.c	FUNCTION_33	CALL_1
0x400159b	            0xffe0	                                 jmp rax	       737	vtls.c	FUNCTION_33	CALL_1
Curl_ssl_cert_status_request	WHILE,0:SWITCH,0:ELSE,0:DO,0:FOR,0:IF,0:functions,0:CALL,1	3
0x4001a40	    0x488b05000000	            mov rax, qword [0x04001a47] 	       971	vtls.c	FUNCTION_37	CALL_1
0x4001a47	        0x488b4058	            mov rax, qword [rax + 0x58] 	       971	vtls.c	FUNCTION_37	CALL_1
0x4001a4b	            0xffe0	                                 jmp rax	       971	vtls.c	FUNCTION_37	CALL_1
Curl_ssl_close_all	WHILE,0:SWITCH,0:ELSE,0:DO,0:FOR,1:IF,1:functions,0:CALL,3	34
0x40011c0	            0x4154	                                push r12	       497	vtls.c	FUNCTION_17
0x40011c2	          0x4989fc	                            mov r12, rdi	       497	vtls.c	FUNCTION_17
0x40011c5	              0x55	                                push rbp	       497	vtls.c	FUNCTION_17
0x40011c6	              0x53	                                push rbx	       497	vtls.c	FUNCTION_17
0x40011c7	    0x488bbf504d00	          mov rdi, qword [rdi + 0x4d50] 	       500	vtls.c	FUNCTION_17	IF_1
0x40011ce	          0x4885ff	                           test rdi, rdi	       500	vtls.c	FUNCTION_17	IF_1
0x40011d1	            0x745f	                            je 0x4001232	       500	vtls.c	FUNCTION_17	IF_1
0x40011d3	    0x498b8424b800	            mov rax, qword [r12 + 0xb8] 	       500	vtls.c	FUNCTION_17	IF_1
0x40011db	          0x4885c0	                           test rax, rax	       500	vtls.c	FUNCTION_17	IF_1
0x40011de	            0x7405	                            je 0x40011e5	       500	vtls.c	FUNCTION_17	IF_1
0x40011e0	          0xf60010	                   test byte [rax], 0x10	       500	vtls.c	FUNCTION_17	IF_1
0x40011e3	            0x754d	                           jne 0x4001232	       500	vtls.c	FUNCTION_17	IF_1
0x40011e5	    0x4983bc247807	              cmp qword [r12 + 0x778], 0	       501	vtls.c	FUNCTION_17	IF_1	FOR_1
0x40011ee	            0x742d	                            je 0x400121d	       501	vtls.c	FUNCTION_17	IF_1	FOR_1
0x40011f0	            0x31ed	                            xor ebp, ebp	       501	vtls.c	FUNCTION_17	IF_1	FOR_1
0x40011f2	            0x31db	                            xor ebx, ebx	       501	vtls.c	FUNCTION_17	IF_1	FOR_1
0x40011f4	         0xf1f4000	                         nop dword [rax]	       501	vtls.c	FUNCTION_17	IF_1	FOR_1
0x40011f8	          0x4801ef	                            add rdi, rbp	       503	vtls.c	FUNCTION_17	IF_1	CALL_1
0x40011fb	        0x4883c301	                              add rbx, 1	       501	vtls.c	FUNCTION_17	IF_1	FOR_1
0x40011ff	    0x4881c5880000	                           add rbp, 0x88	       501	vtls.c	FUNCTION_17	IF_1	FOR_1
0x4001206	      0xe800000000	                          call 0x400120b	       503	vtls.c	FUNCTION_17	IF_1	CALL_1
0x400120b	    0x49399c247807	           cmp qword [r12 + 0x778], rbx 	       501	vtls.c	FUNCTION_17	IF_1	FOR_1
0x4001213	    0x498bbc24504d	          mov rdi, qword [r12 + 0x4d50] 	       501	vtls.c	FUNCTION_17	IF_1	FOR_1
0x400121b	            0x77db	                            ja 0x40011f8	       501	vtls.c	FUNCTION_17	IF_1	FOR_1
0x400121d	    0x488b05000000	            mov rax, qword [0x04001224] 	       506	vtls.c	FUNCTION_17	IF_1	CALL_2
0x4001224	            0xff10	                        call qword [rax]	       506	vtls.c	FUNCTION_17	IF_1	CALL_2
0x4001226	    0x49c78424504d	            mov qword [r12 + 0x4d50], 0 	       506	vtls.c	FUNCTION_17	IF_1	CALL_2
0x4001232	    0x488b05000000	            mov rax, qword [0x04001239] 	       509	vtls.c	FUNCTION_17	CALL_3
0x4001239	          0x4c89e7	                            mov rdi, r12	       509	vtls.c	FUNCTION_17	CALL_3
0x400123c	              0x5b	                                 pop rbx	       510	vtls.c	FUNCTION_17
0x400123d	              0x5d	                                 pop rbp	       510	vtls.c	FUNCTION_17
0x400123e	            0x415c	                                 pop r12	       510	vtls.c	FUNCTION_17
0x4001240	    0x488b80800000	            mov rax, qword [rax + 0x80] 	       509	vtls.c	FUNCTION_17	CALL_3
0x4001247	            0xffe0	                                 jmp rax	       509	vtls.c	FUNCTION_17	CALL_3
Curl_ssl_close	WHILE,0:SWITCH,0:ELSE,0:DO,0:FOR,0:IF,0:functions,0:CALL,2	2
0x4001290	    0x488b05000000	            mov rax, qword [0x04001297] 	       552	vtls.c	FUNCTION_20	CALL_2
0x4001297	          0xff6078	                  jmp qword [rax + 0x78]	       552	vtls.c	FUNCTION_20	CALL_2
Curl_ssl_tls13_ciphersuites	WHILE,0:SWITCH,0:ELSE,0:DO,0:FOR,0:IF,0:functions,0:CALL,0	5
0x4001a60	    0x488b05000000	            mov rax, qword [0x04001a67] 	       987	vtls.c	FUNCTION_39
0x4001a67	          0x8b4010	            mov eax, dword [rax + 0x10] 	       987	vtls.c	FUNCTION_39
0x4001a6a	          0xc1e805	                              shr eax, 5	       987	vtls.c	FUNCTION_39
0x4001a6d	          0x83e001	                              and eax, 1	       987	vtls.c	FUNCTION_39
0x4001a70	              0xc3	                                     ret	       988	vtls.c	FUNCTION_39
Curl_ssl_backend	WHILE,0:SWITCH,0:ELSE,0:DO,0:FOR,0:IF,0:functions,0:CALL,1	15
0x40009a0	    0x488b05000000	            mov rax, qword [0x040009a7] 	      1272	vtls.c	FUNCTION_61	IF_1
0x40009a7	    0x488d15000000	                   lea rdx, [0x040009ae]	      1272	vtls.c	FUNCTION_61	IF_1
0x40009ae	          0x4839d0	                            cmp rax, rdx	      1272	vtls.c	FUNCTION_61	IF_1
0x40009b1	            0x740d	                            je 0x40009c0	      1272	vtls.c	FUNCTION_61	IF_1
0x40009b3	            0x8b00	                    mov eax, dword [rax]	       144	vtls.c	FUNCTION_4
0x40009b5	              0xc3	                                     ret	       148	vtls.c	FUNCTION_4
0x40009b6	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       148	vtls.c	FUNCTION_4
0x40009c0	    0x48833d000000	               cmp qword [0x040009c8], 0	      1280	vtls.c	FUNCTION_61	IF_3
0x40009c8	            0x74e9	                            je 0x40009b3	      1280	vtls.c	FUNCTION_61	IF_3
0x40009ca	        0x4883ec08	                              sub rsp, 8	       141	vtls.c	FUNCTION_4
0x40009ce	      0xe8cdf9ffff	           call sym.multissl_init.part.1	       141	vtls.c	FUNCTION_4
0x40009d3	    0x488b05000000	            mov rax, qword [0x040009da] 	       141	vtls.c	FUNCTION_4
0x40009da	            0x8b00	                    mov eax, dword [rax]	       144	vtls.c	FUNCTION_4
0x40009dc	        0x4883c408	                              add rsp, 8	       148	vtls.c	FUNCTION_4
0x40009e0	              0xc3	                                     ret	       148	vtls.c	FUNCTION_4
Curl_none_data_pending	WHILE,0:SWITCH,0:ELSE,0:DO,0:FOR,0:IF,0:functions,0:CALL,0	2
0x4000090	            0x31c0	                            xor eax, eax	      1042	vtls.c	FUNCTION_47
0x4000092	              0xc3	                                     ret	      1042	vtls.c	FUNCTION_47
Curl_ssl_false_start	WHILE,0:SWITCH,0:ELSE,0:DO,0:FOR,0:IF,0:functions,0:CALL,1	3
0x4001a50	    0x488b05000000	            mov rax, qword [0x04001a57] 	       979	vtls.c	FUNCTION_38	CALL_1
0x4001a57	    0x488b80a80000	            mov rax, qword [rax + 0xa8] 	       979	vtls.c	FUNCTION_38	CALL_1
0x4001a5e	            0xffe0	                                 jmp rax	       979	vtls.c	FUNCTION_38	CALL_1
Curl_ssl_push_certinfo	WHILE,0:SWITCH,0:ELSE,0:DO,0:FOR,0:IF,0:functions,0:CALL,2	22
0x4001550	            0x4155	                                push r13	       727	vtls.c	FUNCTION_32
0x4001552	            0x4154	                                push r12	       727	vtls.c	FUNCTION_32
0x4001554	          0x4989d5	                            mov r13, rdx	       727	vtls.c	FUNCTION_32
0x4001557	              0x55	                                push rbp	       727	vtls.c	FUNCTION_32
0x4001558	              0x53	                                push rbx	       727	vtls.c	FUNCTION_32
0x4001559	          0x4889fd	                            mov rbp, rdi	       727	vtls.c	FUNCTION_32
0x400155c	          0x4889cf	                            mov rdi, rcx	       728	vtls.c	FUNCTION_32	CALL_1
0x400155f	          0x4189f4	                           mov r12d, esi	       727	vtls.c	FUNCTION_32
0x4001562	          0x4889cb	                            mov rbx, rcx	       727	vtls.c	FUNCTION_32
0x4001565	        0x4883ec08	                              sub rsp, 8	       727	vtls.c	FUNCTION_32
0x4001569	      0xe800000000	                          call 0x400156e	       728	vtls.c	FUNCTION_32	CALL_1
0x400156e	        0x4883c408	                              add rsp, 8	       731	vtls.c	FUNCTION_32
0x4001572	          0x4889d9	                            mov rcx, rbx	       730	vtls.c	FUNCTION_32	CALL_2
0x4001575	          0x4c89ea	                            mov rdx, r13	       730	vtls.c	FUNCTION_32	CALL_2
0x4001578	              0x5b	                                 pop rbx	       731	vtls.c	FUNCTION_32
0x4001579	          0x4489e6	                           mov esi, r12d	       730	vtls.c	FUNCTION_32	CALL_2
0x400157c	          0x4889ef	                            mov rdi, rbp	       730	vtls.c	FUNCTION_32	CALL_2
0x400157f	          0x4989c0	                             mov r8, rax	       728	vtls.c	FUNCTION_32	CALL_1
0x4001582	              0x5d	                                 pop rbp	       731	vtls.c	FUNCTION_32
0x4001583	            0x415c	                                 pop r12	       731	vtls.c	FUNCTION_32
0x4001585	            0x415d	                                 pop r13	       731	vtls.c	FUNCTION_32
0x4001587	      0xe9d4feffff	      jmp sym.Curl_ssl_push_certinfo_len	       730	vtls.c	FUNCTION_32	CALL_2
curl_global_sslset	WHILE,0:SWITCH,0:ELSE,0:DO,0:FOR,0:IF,0:functions,0:CALL,0	73
0x4001a90	          0x4885d2	                           test rdx, rdx	      1309	vtls.c	FUNCTION_62	IF_1
0x4001a93	            0x4156	                                push r14	      1306	vtls.c	FUNCTION_62
0x4001a95	            0x4155	                                push r13	      1306	vtls.c	FUNCTION_62
0x4001a97	            0x4154	                                push r12	      1306	vtls.c	FUNCTION_62
0x4001a99	              0x55	                                push rbp	      1306	vtls.c	FUNCTION_62
0x4001a9a	              0x53	                                push rbx	      1306	vtls.c	FUNCTION_62
0x4001a9b	            0x740a	                            je 0x4001aa7	      1309	vtls.c	FUNCTION_62	IF_1
0x4001a9d	    0x488d05000000	                   lea rax, [0x04001aa4]	      1310	vtls.c	FUNCTION_62	IF_1
0x4001aa4	          0x488902	                    mov qword [rdx], rax	      1310	vtls.c	FUNCTION_62	IF_1
0x4001aa7	    0x488b15000000	            mov rdx, qword [0x04001aae] 	      1312	vtls.c	FUNCTION_62	IF_2
0x4001aae	    0x4c8d25000000	                   lea r12, [0x04001ab5]	      1312	vtls.c	FUNCTION_62	IF_2
0x4001ab5	          0x4c39e2	                            cmp rdx, r12	      1312	vtls.c	FUNCTION_62	IF_2
0x4001ab8	            0x7436	                            je 0x4001af0	      1312	vtls.c	FUNCTION_62	IF_2
0x4001aba	            0x393a	                    cmp dword [rdx], edi	      1313	vtls.c	FUNCTION_62	IF_2
0x4001abc	      0xb802000000	                              mov eax, 2	      1313	vtls.c	FUNCTION_62	IF_2
0x4001ac1	            0x741d	                            je 0x4001ae0	      1313	vtls.c	FUNCTION_62	IF_2
0x4001ac3	              0x5b	                                 pop rbx	      1324	vtls.c	FUNCTION_62
0x4001ac4	              0x5d	                                 pop rbp	      1324	vtls.c	FUNCTION_62
0x4001ac5	            0x415c	                                 pop r12	      1324	vtls.c	FUNCTION_62
0x4001ac7	            0x415d	                                 pop r13	      1324	vtls.c	FUNCTION_62
0x4001ac9	            0x415e	                                 pop r14	      1324	vtls.c	FUNCTION_62
0x4001acb	              0xc3	                                     ret	      1324	vtls.c	FUNCTION_62
0x4001acc	         0xf1f4000	                         nop dword [rax]	      1324	vtls.c	FUNCTION_62
0x4001ad0	    0x4c3925000000	            cmp qword [0x04001ad7], r12 	      1272	vtls.c	FUNCTION_61	IF_1
0x4001ad7	            0x7507	                           jne 0x4001ae0	      1272	vtls.c	FUNCTION_61	IF_1
0x4001ad9	    0x488905000000	            mov qword [0x04001ae0], rax 	      1276	vtls.c	FUNCTION_61	IF_2
0x4001ae0	              0x5b	                                 pop rbx	      1324	vtls.c	FUNCTION_62
0x4001ae1	            0x31c0	                            xor eax, eax	      1319	vtls.c	FUNCTION_62	FOR_1	IF_3
0x4001ae3	              0x5d	                                 pop rbp	      1324	vtls.c	FUNCTION_62
0x4001ae4	            0x415c	                                 pop r12	      1324	vtls.c	FUNCTION_62
0x4001ae6	            0x415d	                                 pop r13	      1324	vtls.c	FUNCTION_62
0x4001ae8	            0x415e	                                 pop r14	      1324	vtls.c	FUNCTION_62
0x4001aea	              0xc3	                                     ret	      1324	vtls.c	FUNCTION_62
0x4001aeb	       0xf1f440000	                   nop dword [rax + rax]	      1324	vtls.c	FUNCTION_62
0x4001af0	    0x488b05000000	            mov rax, qword [0x04001af7] 	      1315	vtls.c	FUNCTION_62	FOR_1
0x4001af7	          0x4885c0	                           test rax, rax	      1315	vtls.c	FUNCTION_62	FOR_1
0x4001afa	            0x7445	                            je 0x4001b41	      1315	vtls.c	FUNCTION_62	FOR_1
0x4001afc	            0x3b38	                    cmp edi, dword [rax]	      1316	vtls.c	FUNCTION_62	FOR_1	IF_3
0x4001afe	            0x74d9	                            je 0x4001ad9	      1316	vtls.c	FUNCTION_62	FOR_1	IF_3
0x4001b00	          0x4889f5	                            mov rbp, rsi	      1316	vtls.c	FUNCTION_62	FOR_1	IF_3
0x4001b03	          0x4189fd	                           mov r13d, edi	      1316	vtls.c	FUNCTION_62	FOR_1	IF_3
0x4001b06	            0x31db	                            xor ebx, ebx	      1316	vtls.c	FUNCTION_62	FOR_1	IF_3
0x4001b08	            0xeb0f	                           jmp 0x4001b19	      1316	vtls.c	FUNCTION_62	FOR_1	IF_3
0x4001b0a	    0x660f1f440000	                    nop word [rax + rax]	      1316	vtls.c	FUNCTION_62	FOR_1	IF_3
0x4001b10	        0x4883c301	                              add rbx, 1	      1316	vtls.c	FUNCTION_62	FOR_1	IF_3
0x4001b14	          0x443b28	                   cmp r13d, dword [rax]	      1316	vtls.c	FUNCTION_62	FOR_1	IF_3
0x4001b17	            0x74b7	                            je 0x4001ad0	      1316	vtls.c	FUNCTION_62	FOR_1	IF_3
0x4001b19	          0x4885ed	                           test rbp, rbp	      1316	vtls.c	FUNCTION_62	FOR_1	IF_3
0x4001b1c	          0x4c63f3	                         movsxd r14, ebx	      1316	vtls.c	FUNCTION_62	FOR_1	IF_3
0x4001b1f	            0x7410	                            je 0x4001b31	      1316	vtls.c	FUNCTION_62	FOR_1	IF_3
0x4001b21	        0x488b7808	                mov rdi, qword [rax + 8]	      1317	vtls.c	FUNCTION_62	FOR_1	IF_3	CALL_1
0x4001b25	          0x4889ee	                            mov rsi, rbp	      1317	vtls.c	FUNCTION_62	FOR_1	IF_3	CALL_1
0x4001b28	      0xe800000000	                          call 0x4001b2d	      1317	vtls.c	FUNCTION_62	FOR_1	IF_3	CALL_1
0x4001b2d	            0x85c0	                           test eax, eax	      1317	vtls.c	FUNCTION_62	FOR_1	IF_3	CALL_1
0x4001b2f	            0x751f	                           jne 0x4001b50	      1317	vtls.c	FUNCTION_62	FOR_1	IF_3	CALL_1
0x4001b31	    0x488d05000000	                   lea rax, [0x04001b38]	      1315	vtls.c	FUNCTION_62	FOR_1
0x4001b38	        0x488b04d8	            mov rax, qword [rax + rbx*8]	      1315	vtls.c	FUNCTION_62	FOR_1
0x4001b3c	          0x4885c0	                           test rax, rax	      1315	vtls.c	FUNCTION_62	FOR_1
0x4001b3f	            0x75cf	                           jne 0x4001b10	      1315	vtls.c	FUNCTION_62	FOR_1
0x4001b41	      0xb801000000	                              mov eax, 1	      1323	vtls.c	FUNCTION_62
0x4001b46	      0xe978ffffff	                           jmp 0x4001ac3	      1323	vtls.c	FUNCTION_62
0x4001b4b	       0xf1f440000	                   nop dword [rax + rax]	      1323	vtls.c	FUNCTION_62
0x4001b50	    0x4c3925000000	            cmp qword [0x04001b57], r12 	      1272	vtls.c	FUNCTION_61	IF_1
0x4001b57	            0x7587	                           jne 0x4001ae0	      1272	vtls.c	FUNCTION_61	IF_1
0x4001b59	    0x488d05000000	                   lea rax, [0x04001b60]	      1318	vtls.c	FUNCTION_62	FOR_1	IF_3	CALL_2
0x4001b60	        0x4a8b04f0	            mov rax, qword [rax + r14*8]	      1318	vtls.c	FUNCTION_62	FOR_1	IF_3	CALL_2
0x4001b64	          0x4885c0	                           test rax, rax	      1275	vtls.c	FUNCTION_61	IF_2
0x4001b67	     0xf856cffffff	                           jne 0x4001ad9	      1275	vtls.c	FUNCTION_61	IF_2
0x4001b6d	    0x48833d000000	               cmp qword [0x04001b75], 0	      1280	vtls.c	FUNCTION_61	IF_3
0x4001b75	     0xf8465ffffff	                            je 0x4001ae0	      1280	vtls.c	FUNCTION_61	IF_3
0x4001b7b	      0xe820e8ffff	           call sym.multissl_init.part.1	      1280	vtls.c	FUNCTION_61	IF_3
0x4001b80	            0x31c0	                            xor eax, eax	      1319	vtls.c	FUNCTION_62	FOR_1	IF_3
0x4001b82	      0xe93cffffff	                           jmp 0x4001ac3	      1319	vtls.c	FUNCTION_62	FOR_1	IF_3
Curl_none_shutdown	WHILE,0:SWITCH,0:ELSE,0:DO,0:FOR,0:IF,0:functions,0:CALL,0	2
0x4000050	            0x31c0	                            xor eax, eax	      1008	vtls.c	FUNCTION_42
0x4000052	              0xc3	                                     ret	      1008	vtls.c	FUNCTION_42
Curl_ssl_addsessionid	WHILE,0:SWITCH,0:ELSE,4:DO,0:FOR,1:IF,8:functions,0:CALL,12	154
0x4000f00	            0x4157	                                push r15	       411	vtls.c	FUNCTION_16
0x4000f02	            0x4156	                                push r14	       411	vtls.c	FUNCTION_16
0x4000f04	          0x4989fe	                            mov r14, rdi	       411	vtls.c	FUNCTION_16
0x4000f07	            0x4155	                                push r13	       411	vtls.c	FUNCTION_16
0x4000f09	            0x4154	                                push r12	       411	vtls.c	FUNCTION_16
0x4000f0b	              0x55	                                push rbp	       411	vtls.c	FUNCTION_16
0x4000f0c	              0x53	                                push rbx	       411	vtls.c	FUNCTION_16
0x4000f0d	        0x4883ec38	                           sub rsp, 0x38	       411	vtls.c	FUNCTION_16
0x4000f11	          0x488b2f	                    mov rbp, qword [rdi]	       413	vtls.c	FUNCTION_16
0x4000f14	    0x83bf78010000	              cmp dword [rdi + 0x178], 2	       420	vtls.c	FUNCTION_16	CALL_1
0x4000f1b	      0x4889742418	             mov qword [rsp + 0x18], rsi	       411	vtls.c	FUNCTION_16
0x4000f20	      0x4889542420	             mov qword [rsp + 0x20], rdx	       411	vtls.c	FUNCTION_16
0x4000f25	    0x4c8ba5504d00	          mov r12, qword [rbp + 0x4d50] 	       414	vtls.c	FUNCTION_16
0x4000f2c	      0x4d8b7c2428	            mov r15, qword [r12 + 0x28] 	       415	vtls.c	FUNCTION_16
0x4000f31	     0xf84f9010000	                            je 0x4001130	       420	vtls.c	FUNCTION_16	CALL_1
0x4000f37	    0x4c8b2d000000	            mov r13, qword [0x04000f3e] 	       427	vtls.c	FUNCTION_16	CALL_4
0x4000f3e	    0x498d86f80200	                  lea rax, [r14 + 0x2f8]	       422	vtls.c	FUNCTION_16
0x4000f45	    0x498bbed80000	            mov rdi, qword [r14 + 0xd8] 	       427	vtls.c	FUNCTION_16	CALL_4
0x4000f4c	    0xc744240c0000	                mov dword [rsp + 0xc], 0	       427	vtls.c	FUNCTION_16	CALL_4
0x4000f54	        0x48890424	                    mov qword [rsp], rax	       422	vtls.c	FUNCTION_16
0x4000f58	        0x498b4500	                    mov rax, qword [r13]	       427	vtls.c	FUNCTION_16	CALL_4
0x4000f5c	            0xffd0	                                call rax	       427	vtls.c	FUNCTION_16	CALL_4
0x4000f5e	          0x4885c0	                           test rax, rax	       428	vtls.c	FUNCTION_16	IF_1
0x4000f61	          0x4889c3	                            mov rbx, rax	       427	vtls.c	FUNCTION_16	CALL_4
0x4000f64	      0xba1b000000	                           mov edx, 0x1b	       429	vtls.c	FUNCTION_16	IF_1
0x4000f69	     0xf847c010000	                            je 0x40010eb	       428	vtls.c	FUNCTION_16	IF_1
0x4000f6f	    0x4180be9b0300	               cmp byte [r14 + 0x39b], 0	       431	vtls.c	FUNCTION_16	IF_2
0x4000f77	    0x48c744241000	               mov qword [rsp + 0x10], 0	       439	vtls.c	FUNCTION_16	ELSE_1
0x4000f80	     0xf85ea010000	                           jne 0x4001170	       431	vtls.c	FUNCTION_16	IF_2
0x4000f86	    0x4180be9c0300	               cmp byte [r14 + 0x39c], 0	       441	vtls.c	FUNCTION_16	IF_4
0x4000f8e	    0x41bdffffffff	                    mov r13d, 0xffffffff	       444	vtls.c	FUNCTION_16	ELSE_2
0x4000f94	     0xf8566010000	                           jne 0x4001100	       441	vtls.c	FUNCTION_16	IF_4
0x4000f9a	    0x4c8b95b80000	            mov r10, qword [rbp + 0xb8] 	       450	vtls.c	FUNCTION_16	ELSE_2	IF_5
0x4000fa1	          0x4d85d2	                           test r10, r10	       450	vtls.c	FUNCTION_16	ELSE_2	IF_5
0x4000fa4	            0x740a	                            je 0x4000fb0	       450	vtls.c	FUNCTION_16	ELSE_2	IF_5
0x4000fa6	        0x41f60210	                   test byte [r10], 0x10	       450	vtls.c	FUNCTION_16	ELSE_2	IF_5
0x4000faa	     0xf8560010000	                           jne 0x4001110	       450	vtls.c	FUNCTION_16	ELSE_2	IF_5
0x4000fb0	    0x4c8d95584d00	                 lea r10, [rbp + 0x4d58]	       454	vtls.c	FUNCTION_16	ELSE_3
0x4000fb7	    0x488bbd780700	           mov rdi, qword [rbp + 0x778] 	       458	vtls.c	FUNCTION_16	FOR_1
0x4000fbe	        0x4883ff01	                              cmp rdi, 1	       458	vtls.c	FUNCTION_16	FOR_1
0x4000fc2	            0x7668	                           jbe 0x400102c	       458	vtls.c	FUNCTION_16	FOR_1
0x4000fc4	    0x4c8b9d504d00	          mov r11, qword [rbp + 0x4d50] 	       459	vtls.c	FUNCTION_16	FOR_1
0x4000fcb	    0x4983bba00000	               cmp qword [r11 + 0xa0], 0	       458	vtls.c	FUNCTION_16	FOR_1
0x4000fd3	    0x498d8b880000	                   lea rcx, [r11 + 0x88]	       459	vtls.c	FUNCTION_16	FOR_1
0x4000fda	     0xf84c8010000	                            je 0x40011a8	       458	vtls.c	FUNCTION_16	FOR_1
0x4000fe0	    0x498d83100100	                  lea rax, [r11 + 0x110]	       458	vtls.c	FUNCTION_16	FOR_1
0x4000fe7	      0xba01000000	                              mov edx, 1	       458	vtls.c	FUNCTION_16	FOR_1
0x4000fec	            0xeb12	                           jmp 0x4001000	       458	vtls.c	FUNCTION_16	FOR_1
0x4000fee	            0x6690	                                     nop	       458	vtls.c	FUNCTION_16	FOR_1
0x4000ff0	          0x4889c1	                            mov rcx, rax	       459	vtls.c	FUNCTION_16	FOR_1
0x4000ff3	    0x480588000000	                           add rax, 0x88	       459	vtls.c	FUNCTION_16	FOR_1
0x4000ff9	      0x4883789000	               cmp qword [rax - 0x70], 0	       458	vtls.c	FUNCTION_16	FOR_1
0x4000ffe	            0x7440	                            je 0x4001040	       458	vtls.c	FUNCTION_16	FOR_1
0x4001000	        0x488b7128	            mov rsi, qword [rcx + 0x28] 	       460	vtls.c	FUNCTION_16	FOR_1	IF_6
0x4001004	          0x4c39fe	                            cmp rsi, r15	       460	vtls.c	FUNCTION_16	FOR_1	IF_6
0x4001007	            0x7d06	                           jge 0x400100f	       460	vtls.c	FUNCTION_16	FOR_1	IF_6
0x4001009	          0x4989f7	                            mov r15, rsi	       460	vtls.c	FUNCTION_16	FOR_1	IF_6
0x400100c	          0x4989cc	                            mov r12, rcx	       460	vtls.c	FUNCTION_16	FOR_1	IF_6
0x400100f	        0x4883c201	                              add rdx, 1	       459	vtls.c	FUNCTION_16	FOR_1
0x4001013	          0x4839fa	                            cmp rdx, rdi	       458	vtls.c	FUNCTION_16	FOR_1
0x4001016	            0x75d8	                           jne 0x4000ff0	       458	vtls.c	FUNCTION_16	FOR_1
0x4001018	          0x4c89e7	                            mov rdi, r12	       467	vtls.c	FUNCTION_16	CALL_7
0x400101b	      0x4c89542428	             mov qword [rsp + 0x28], r10	       467	vtls.c	FUNCTION_16	CALL_7
0x4001020	      0xe800000000	                          call 0x4001025	       467	vtls.c	FUNCTION_16	CALL_7
0x4001025	      0x4c8b542428	            mov r10, qword [rsp + 0x28] 	       467	vtls.c	FUNCTION_16	CALL_7
0x400102a	            0xeb23	                           jmp 0x400104f	       467	vtls.c	FUNCTION_16	CALL_7
0x400102c	            0x74ea	                            je 0x4001018	       465	vtls.c	FUNCTION_16	IF_7
0x400102e	    0x4c8b9d504d00	          mov r11, qword [rbp + 0x4d50] 	       465	vtls.c	FUNCTION_16	IF_7
0x4001035	      0xba01000000	                              mov edx, 1	       458	vtls.c	FUNCTION_16	FOR_1
0x400103a	    0x660f1f440000	                    nop word [rax + rax]	       458	vtls.c	FUNCTION_16	FOR_1
0x4001040	          0x4889d0	                            mov rax, rdx	       469	vtls.c	FUNCTION_16	ELSE_4
0x4001043	        0x48c1e007	                              shl rax, 7	       469	vtls.c	FUNCTION_16	ELSE_4
0x4001047	        0x4c8d04d0	                   lea r8, [rax + rdx*8]	       469	vtls.c	FUNCTION_16	ELSE_4
0x400104b	        0x4f8d2403	                     lea r12, [r11 + r8]	       469	vtls.c	FUNCTION_16	ELSE_4
0x400104f	      0x488b442418	            mov rax, qword [rsp + 0x18] 	       472	vtls.c	FUNCTION_16
0x4001054	    0x4c8b3d000000	            mov r15, qword [0x0400105b] 	       476	vtls.c	FUNCTION_16	CALL_8
0x400105b	        0x498b3c24	                    mov rdi, qword [r12]	       476	vtls.c	FUNCTION_16	CALL_8
0x400105f	      0x4989442418	             mov qword [r12 + 0x18], rax	       472	vtls.c	FUNCTION_16
0x4001064	      0x488b442420	            mov rax, qword [rsp + 0x20] 	       473	vtls.c	FUNCTION_16
0x4001069	      0x4989442420	             mov qword [r12 + 0x20], rax	       473	vtls.c	FUNCTION_16
0x400106e	          0x498b02	                    mov rax, qword [r10]	       474	vtls.c	FUNCTION_16
0x4001071	      0x4989442428	             mov qword [r12 + 0x28], rax	       474	vtls.c	FUNCTION_16
0x4001076	          0x41ff17	                        call qword [r15]	       476	vtls.c	FUNCTION_16	CALL_8
0x4001079	      0x498b7c2408	                mov rdi, qword [r12 + 8]	       477	vtls.c	FUNCTION_16	CALL_9
0x400107e	          0x41ff17	                        call qword [r15]	       477	vtls.c	FUNCTION_16	CALL_9
0x4001081	      0x488b442410	            mov rax, qword [rsp + 0x10] 	       479	vtls.c	FUNCTION_16
0x4001086	        0x49891c24	                    mov qword [r12], rbx	       478	vtls.c	FUNCTION_16
0x400108a	      0x45896c2434	            mov dword [r12 + 0x34], r13d	       480	vtls.c	FUNCTION_16
0x400108f	      0x4989442408	                mov qword [r12 + 8], rax	       479	vtls.c	FUNCTION_16
0x4001094	        0x8b44240c	              mov eax, dword [rsp + 0xc]	       482	vtls.c	FUNCTION_16
0x4001098	            0x85c0	                           test eax, eax	       482	vtls.c	FUNCTION_16
0x400109a	     0xf8480000000	                            je 0x4001120	       482	vtls.c	FUNCTION_16
0x40010a0	    0x418b86900100	           mov eax, dword [r14 + 0x190] 	       482	vtls.c	FUNCTION_16
0x40010a7	      0x4189442430	             mov dword [r12 + 0x30], eax	       482	vtls.c	FUNCTION_16
0x40010ac	    0x498b86e00300	           mov rax, qword [r14 + 0x3e0] 	       483	vtls.c	FUNCTION_16
0x40010b3	      0x498d742438	                   lea rsi, [r12 + 0x38]	       485	vtls.c	FUNCTION_16	IF_8	CALL_10
0x40010b8	        0x488b3c24	                    mov rdi, qword [rsp]	       485	vtls.c	FUNCTION_16	IF_8	CALL_10
0x40010bc	          0x488b00	                    mov rax, qword [rax]	       483	vtls.c	FUNCTION_16
0x40010bf	      0x4989442410	             mov qword [r12 + 0x10], rax	       483	vtls.c	FUNCTION_16
0x40010c4	      0xe800000000	                          call 0x40010c9	       485	vtls.c	FUNCTION_16	IF_8	CALL_10
0x40010c9	            0x31d2	                            xor edx, edx	       492	vtls.c	FUNCTION_16
0x40010cb	            0x84c0	                             test al, al	       485	vtls.c	FUNCTION_16	IF_8	CALL_10
0x40010cd	            0x751c	                           jne 0x40010eb	       485	vtls.c	FUNCTION_16	IF_8	CALL_10
0x40010cf	          0x4889df	                            mov rdi, rbx	       487	vtls.c	FUNCTION_16	IF_8	CALL_11
0x40010d2	    0x49c744241800	               mov qword [r12 + 0x18], 0	       486	vtls.c	FUNCTION_16	IF_8
0x40010db	          0x41ff17	                        call qword [r15]	       487	vtls.c	FUNCTION_16	IF_8	CALL_11
0x40010de	      0x488b7c2410	            mov rdi, qword [rsp + 0x10] 	       488	vtls.c	FUNCTION_16	IF_8	CALL_12
0x40010e3	          0x41ff17	                        call qword [r15]	       488	vtls.c	FUNCTION_16	IF_8	CALL_12
0x40010e6	      0xba1b000000	                           mov edx, 0x1b	       489	vtls.c	FUNCTION_16	IF_8
0x40010eb	        0x4883c438	                           add rsp, 0x38	       493	vtls.c	FUNCTION_16
0x40010ef	            0x89d0	                            mov eax, edx	       493	vtls.c	FUNCTION_16
0x40010f1	              0x5b	                                 pop rbx	       493	vtls.c	FUNCTION_16
0x40010f2	              0x5d	                                 pop rbp	       493	vtls.c	FUNCTION_16
0x40010f3	            0x415c	                                 pop r12	       493	vtls.c	FUNCTION_16
0x40010f5	            0x415d	                                 pop r13	       493	vtls.c	FUNCTION_16
0x40010f7	            0x415e	                                 pop r14	       493	vtls.c	FUNCTION_16
0x40010f9	            0x415f	                                 pop r15	       493	vtls.c	FUNCTION_16
0x40010fb	              0xc3	                                     ret	       493	vtls.c	FUNCTION_16
0x40010fc	         0xf1f4000	                         nop dword [rax]	       493	vtls.c	FUNCTION_16
0x4001100	    0x458bae9c0100	          mov r13d, dword [r14 + 0x19c] 	       442	vtls.c	FUNCTION_16	IF_4
0x4001107	      0xe98efeffff	                           jmp 0x4000f9a	       442	vtls.c	FUNCTION_16	IF_4
0x400110c	         0xf1f4000	                         nop dword [rax]	       442	vtls.c	FUNCTION_16	IF_4
0x4001110	    0x4981c2c00000	                           add r10, 0xc0	       451	vtls.c	FUNCTION_16	ELSE_2	IF_5
0x4001117	      0xe99bfeffff	                           jmp 0x4000fb7	       451	vtls.c	FUNCTION_16	ELSE_2	IF_5
0x400111c	         0xf1f4000	                         nop dword [rax]	       451	vtls.c	FUNCTION_16	ELSE_2	IF_5
0x4001120	    0x418b86980100	           mov eax, dword [r14 + 0x198] 	       482	vtls.c	FUNCTION_16
0x4001127	      0xe97bffffff	                           jmp 0x40010a7	       482	vtls.c	FUNCTION_16
0x400112c	         0xf1f4000	                         nop dword [rax]	       482	vtls.c	FUNCTION_16
0x4001130	          0x4863c9	                         movsxd rcx, ecx	       420	vtls.c	FUNCTION_16	CALL_1
0x4001133	    0x80bc0fb90300	         cmp byte [rdi + rcx + 0x3b9], 0	       420	vtls.c	FUNCTION_16	CALL_1
0x400113b	     0xf85f6fdffff	                           jne 0x4000f37	       420	vtls.c	FUNCTION_16	CALL_1
0x4001141	    0x4c8b2d000000	            mov r13, qword [0x04001148] 	       427	vtls.c	FUNCTION_16	CALL_4
0x4001148	    0x488d87480300	                  lea rax, [rdi + 0x348]	       422	vtls.c	FUNCTION_16
0x400114f	    0xc744240c0100	                mov dword [rsp + 0xc], 1	       420	vtls.c	FUNCTION_16	CALL_1
0x4001157	    0x488bbf600100	           mov rdi, qword [rdi + 0x160] 	       427	vtls.c	FUNCTION_16	CALL_4
0x400115e	        0x48890424	                    mov qword [rsp], rax	       422	vtls.c	FUNCTION_16
0x4001162	        0x498b4500	                    mov rax, qword [r13]	       427	vtls.c	FUNCTION_16	CALL_4
0x4001166	      0xe9f1fdffff	                           jmp 0x4000f5c	       427	vtls.c	FUNCTION_16	CALL_4
0x400116b	       0xf1f440000	                   nop dword [rax + rax]	       427	vtls.c	FUNCTION_16	CALL_4
0x4001170	        0x89542428	             mov dword [rsp + 0x28], edx	       427	vtls.c	FUNCTION_16	CALL_4
0x4001174	    0x498bbe000100	           mov rdi, qword [r14 + 0x100] 	       432	vtls.c	FUNCTION_16	IF_2	CALL_5
0x400117b	        0x41ff5500	                        call qword [r13]	       432	vtls.c	FUNCTION_16	IF_2	CALL_5
0x400117f	          0x4885c0	                           test rax, rax	       433	vtls.c	FUNCTION_16	IF_2	IF_3
0x4001182	      0x4889442410	             mov qword [rsp + 0x10], rax	       432	vtls.c	FUNCTION_16	IF_2	CALL_5
0x4001187	        0x8b542428	            mov edx, dword [rsp + 0x28] 	       433	vtls.c	FUNCTION_16	IF_2	IF_3
0x400118b	     0xf85f5fdffff	                           jne 0x4000f86	       433	vtls.c	FUNCTION_16	IF_2	IF_3
0x4001191	    0x488b05000000	            mov rax, qword [0x04001198] 	       434	vtls.c	FUNCTION_16	IF_2	IF_3	CALL_6
0x4001198	          0x891424	                    mov dword [rsp], edx	       434	vtls.c	FUNCTION_16	IF_2	IF_3	CALL_6
0x400119b	          0x4889df	                            mov rdi, rbx	       434	vtls.c	FUNCTION_16	IF_2	IF_3	CALL_6
0x400119e	            0xff10	                        call qword [rax]	       434	vtls.c	FUNCTION_16	IF_2	IF_3	CALL_6
0x40011a0	          0x8b1424	                    mov edx, dword [rsp]	       435	vtls.c	FUNCTION_16	IF_2	IF_3
0x40011a3	      0xe943ffffff	                           jmp 0x40010eb	       435	vtls.c	FUNCTION_16	IF_2	IF_3
0x40011a8	      0xba01000000	                              mov edx, 1	       458	vtls.c	FUNCTION_16	FOR_1
0x40011ad	      0xe98efeffff	                           jmp 0x4001040	       458	vtls.c	FUNCTION_16	FOR_1
Curl_ssl_delsessionid	WHILE,0:SWITCH,0:ELSE,0:DO,0:FOR,1:IF,1:functions,0:CALL,1	21
0x4000ea0	          0x488b07	                    mov rax, qword [rdi]	       389	vtls.c	FUNCTION_15
0x4000ea3	    0x488b88780700	           mov rcx, qword [rax + 0x778] 	       391	vtls.c	FUNCTION_15	FOR_1
0x4000eaa	          0x4885c9	                           test rcx, rcx	       391	vtls.c	FUNCTION_15	FOR_1
0x4000ead	            0x7439	                            je 0x4000ee8	       391	vtls.c	FUNCTION_15	FOR_1
0x4000eaf	    0x488bb8504d00	          mov rdi, qword [rax + 0x4d50] 	       392	vtls.c	FUNCTION_15	FOR_1
0x4000eb6	            0x31d2	                            xor edx, edx	       394	vtls.c	FUNCTION_15	FOR_1	IF_1
0x4000eb8	        0x483b7718	            cmp rsi, qword [rdi + 0x18] 	       394	vtls.c	FUNCTION_15	FOR_1	IF_1
0x4000ebc	    0x488d87880000	                   lea rax, [rdi + 0x88]	       394	vtls.c	FUNCTION_15	FOR_1	IF_1
0x4000ec3	            0x751a	                           jne 0x4000edf	       394	vtls.c	FUNCTION_15	FOR_1	IF_1
0x4000ec5	            0xeb29	                           jmp 0x4000ef0	       394	vtls.c	FUNCTION_15	FOR_1	IF_1
0x4000ec7	    0x660f1f840000	                    nop word [rax + rax]	       394	vtls.c	FUNCTION_15	FOR_1	IF_1
0x4000ed0	          0x4889c7	                            mov rdi, rax	       392	vtls.c	FUNCTION_15	FOR_1
0x4000ed3	    0x480588000000	                           add rax, 0x88	       392	vtls.c	FUNCTION_15	FOR_1
0x4000ed9	        0x48397090	            cmp qword [rax - 0x70], rsi 	       394	vtls.c	FUNCTION_15	FOR_1	IF_1
0x4000edd	            0x7411	                            je 0x4000ef0	       394	vtls.c	FUNCTION_15	FOR_1	IF_1
0x4000edf	        0x4883c201	                              add rdx, 1	       391	vtls.c	FUNCTION_15	FOR_1
0x4000ee3	          0x4839ca	                            cmp rdx, rcx	       391	vtls.c	FUNCTION_15	FOR_1
0x4000ee6	            0x75e8	                           jne 0x4000ed0	       391	vtls.c	FUNCTION_15	FOR_1
0x4000ee8	            0xf3c3	                                     ret	       391	vtls.c	FUNCTION_15	FOR_1
0x4000eea	    0x660f1f440000	                    nop word [rax + rax]	       391	vtls.c	FUNCTION_15	FOR_1
0x4000ef0	      0xe93bffffff	           jmp sym.Curl_ssl_kill_session	       395	vtls.c	FUNCTION_15	FOR_1	IF_1	CALL_1
Curl_ssl_sessionid_lock	WHILE,0:SWITCH,0:ELSE,0:DO,0:FOR,0:IF,1:functions,0:CALL,1	11
0x4000b70	          0x488b3f	                    mov rdi, qword [rdi]	       283	vtls.c	FUNCTION_11	IF_1
0x4000b73	    0x488b87b80000	            mov rax, qword [rdi + 0xb8] 	       283	vtls.c	FUNCTION_11	IF_1
0x4000b7a	          0x4885c0	                           test rax, rax	       283	vtls.c	FUNCTION_11	IF_1
0x4000b7d	            0x7405	                            je 0x4000b84	       283	vtls.c	FUNCTION_11	IF_1
0x4000b7f	          0xf60010	                   test byte [rax], 0x10	       283	vtls.c	FUNCTION_11	IF_1
0x4000b82	            0x750c	                           jne 0x4000b90	       283	vtls.c	FUNCTION_11	IF_1
0x4000b84	            0xf3c3	                                     ret	       283	vtls.c	FUNCTION_11	IF_1
0x4000b86	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       283	vtls.c	FUNCTION_11	IF_1
0x4000b90	      0xba02000000	                              mov edx, 2	       284	vtls.c	FUNCTION_11	IF_1	CALL_1
0x4000b95	      0xbe04000000	                              mov esi, 4	       284	vtls.c	FUNCTION_11	IF_1	CALL_1
0x4000b9a	      0xe900000000	                           jmp 0x4000b9f	       284	vtls.c	FUNCTION_11	IF_1	CALL_1
ssl_prefs_check	WHILE,0:SWITCH,1:ELSE,0:DO,0:FOR,0:IF,2:functions,0:CALL,2	31
0x4000200	        0x4883ec08	                              sub rsp, 8	       183	vtls.c	FUNCTION_7
0x4000204	    0x488b8fe80500	           mov rcx, qword [rdi + 0x5e8] 	       185	vtls.c	FUNCTION_7
0x400020b	        0x4883f907	                              cmp rcx, 7	       186	vtls.c	FUNCTION_7	IF_1
0x400020f	            0x774f	                            ja 0x4000260	       186	vtls.c	FUNCTION_7	IF_1
0x4000211	    0x488b87f00500	           mov rax, qword [rdi + 0x5f0] 	       191	vtls.c	FUNCTION_7	SWITCH_1
0x4000218	          0x4885c0	                           test rax, rax	       191	vtls.c	FUNCTION_7	SWITCH_1
0x400021b	            0x7433	                            je 0x4000250	       191	vtls.c	FUNCTION_7	SWITCH_1
0x400021d	    0x483d00000100	                        cmp rax, 0x10000	       191	vtls.c	FUNCTION_7	SWITCH_1
0x4000223	            0x742b	                            je 0x4000250	       191	vtls.c	FUNCTION_7	SWITCH_1
0x4000225	        0x48c1f810	                           sar rax, 0x10	       197	vtls.c	FUNCTION_7	SWITCH_1	IF_2
0x4000229	          0x4889c2	                            mov rdx, rax	       197	vtls.c	FUNCTION_7	SWITCH_1	IF_2
0x400022c	      0xb801000000	                              mov eax, 1	       203	vtls.c	FUNCTION_7
0x4000231	          0x4839d1	                            cmp rcx, rdx	       197	vtls.c	FUNCTION_7	SWITCH_1	IF_2
0x4000234	            0x7e10	                           jle 0x4000246	       197	vtls.c	FUNCTION_7	SWITCH_1	IF_2
0x4000236	    0x488d35000000	                   lea rsi, [0x0400023d]	       198	vtls.c	FUNCTION_7	SWITCH_1	IF_2	CALL_2
0x400023d	            0x31c0	                            xor eax, eax	       198	vtls.c	FUNCTION_7	SWITCH_1	IF_2	CALL_2
0x400023f	      0xe800000000	                          call 0x4000244	       198	vtls.c	FUNCTION_7	SWITCH_1	IF_2	CALL_2
0x4000244	            0x31c0	                            xor eax, eax	       199	vtls.c	FUNCTION_7	SWITCH_1	IF_2
0x4000246	        0x4883c408	                              add rsp, 8	       204	vtls.c	FUNCTION_7
0x400024a	              0xc3	                                     ret	       204	vtls.c	FUNCTION_7
0x400024b	       0xf1f440000	                   nop dword [rax + rax]	       204	vtls.c	FUNCTION_7
0x4000250	      0xb801000000	                              mov eax, 1	       203	vtls.c	FUNCTION_7
0x4000255	        0x4883c408	                              add rsp, 8	       204	vtls.c	FUNCTION_7
0x4000259	              0xc3	                                     ret	       204	vtls.c	FUNCTION_7
0x400025a	    0x660f1f440000	                    nop word [rax + rax]	       204	vtls.c	FUNCTION_7
0x4000260	    0x488d35000000	                   lea rsi, [0x04000267]	       187	vtls.c	FUNCTION_7	IF_1	CALL_1
0x4000267	            0x31c0	                            xor eax, eax	       187	vtls.c	FUNCTION_7	IF_1	CALL_1
0x4000269	      0xe800000000	                          call 0x400026e	       187	vtls.c	FUNCTION_7	IF_1	CALL_1
0x400026e	            0x31c0	                            xor eax, eax	       188	vtls.c	FUNCTION_7	IF_1
0x4000270	        0x4883c408	                              add rsp, 8	       204	vtls.c	FUNCTION_7
0x4000274	              0xc3	                                     ret	       204	vtls.c	FUNCTION_7
Curl_none_init	WHILE,0:SWITCH,0:ELSE,0:DO,0:FOR,0:IF,0:functions,0:CALL,0	2
0x4001a80	      0xb801000000	                              mov eax, 1	       997	vtls.c	FUNCTION_40
0x4001a85	              0xc3	                                     ret	       997	vtls.c	FUNCTION_40
Curl_ssl_check_cxn	WHILE,0:SWITCH,0:ELSE,0:DO,0:FOR,0:IF,0:functions,0:CALL,1	3
0x40013c0	    0x488b05000000	            mov rax, qword [0x040013c7] 	       633	vtls.c	FUNCTION_27	CALL_1
0x40013c7	        0x488b4038	            mov rax, qword [rax + 0x38] 	       633	vtls.c	FUNCTION_27	CALL_1
0x40013cb	            0xffe0	                                 jmp rax	       633	vtls.c	FUNCTION_27	CALL_1
Curl_none_set_engine_default	WHILE,0:SWITCH,0:ELSE,0:DO,0:FOR,0:IF,0:functions,0:CALL,0	2
0x40000b0	      0xb804000000	                              mov eax, 4	      1061	vtls.c	FUNCTION_50
0x40000b5	              0xc3	                                     ret	      1061	vtls.c	FUNCTION_50
Curl_none_md5sum	WHILE,0:SWITCH,0:ELSE,0:DO,0:FOR,0:IF,0:functions,0:CALL,0	30
0x4000280	            0x4155	                                push r13	      1077	vtls.c	FUNCTION_53
0x4000282	            0x4154	                                push r12	      1077	vtls.c	FUNCTION_53
0x4000284	          0x4989fc	                            mov r12, rdi	      1077	vtls.c	FUNCTION_53
0x4000287	              0x55	                                push rbp	      1077	vtls.c	FUNCTION_53
0x4000288	              0x53	                                push rbx	      1077	vtls.c	FUNCTION_53
0x4000289	          0x4989f5	                            mov r13, rsi	      1077	vtls.c	FUNCTION_53
0x400028c	          0x4889d5	                            mov rbp, rdx	      1077	vtls.c	FUNCTION_53
0x400028f	        0x4883ec08	                              sub rsp, 8	      1077	vtls.c	FUNCTION_53
0x4000293	    0x488b3d000000	            mov rdi, qword [0x0400029a] 	      1082	vtls.c	FUNCTION_53	CALL_1
0x400029a	      0xe800000000	                          call 0x400029f	      1082	vtls.c	FUNCTION_53	CALL_1
0x400029f	          0x4889c3	                            mov rbx, rax	      1082	vtls.c	FUNCTION_53	CALL_1
0x40002a2	      0xb81b000000	                           mov eax, 0x1b	      1082	vtls.c	FUNCTION_53	CALL_1
0x40002a7	          0x4885db	                           test rbx, rbx	      1083	vtls.c	FUNCTION_53	IF_1
0x40002aa	            0x7422	                            je 0x40002ce	      1083	vtls.c	FUNCTION_53	IF_1
0x40002ac	          0x4c89ef	                            mov rdi, r13	      1085	vtls.c	FUNCTION_53	CALL_3
0x40002af	      0xe800000000	                          call 0x40002b4	      1085	vtls.c	FUNCTION_53	CALL_3
0x40002b4	          0x4c89e6	                            mov rsi, r12	      1085	vtls.c	FUNCTION_53	CALL_3
0x40002b7	            0x89c2	                            mov edx, eax	      1085	vtls.c	FUNCTION_53	CALL_3
0x40002b9	          0x4889df	                            mov rdi, rbx	      1085	vtls.c	FUNCTION_53	CALL_3
0x40002bc	      0xe800000000	                          call 0x40002c1	      1085	vtls.c	FUNCTION_53	CALL_3
0x40002c1	          0x4889ee	                            mov rsi, rbp	      1086	vtls.c	FUNCTION_53	CALL_4
0x40002c4	          0x4889df	                            mov rdi, rbx	      1086	vtls.c	FUNCTION_53	CALL_4
0x40002c7	      0xe800000000	                          call 0x40002cc	      1086	vtls.c	FUNCTION_53	CALL_4
0x40002cc	            0x31c0	                            xor eax, eax	      1087	vtls.c	FUNCTION_53
0x40002ce	        0x4883c408	                              add rsp, 8	      1088	vtls.c	FUNCTION_53
0x40002d2	              0x5b	                                 pop rbx	      1088	vtls.c	FUNCTION_53
0x40002d3	              0x5d	                                 pop rbp	      1088	vtls.c	FUNCTION_53
0x40002d4	            0x415c	                                 pop r12	      1088	vtls.c	FUNCTION_53
0x40002d6	            0x415d	                                 pop r13	      1088	vtls.c	FUNCTION_53
0x40002d8	              0xc3	                                     ret	      1088	vtls.c	FUNCTION_53
Curl_ssl_connect	WHILE,0:SWITCH,0:ELSE,0:DO,0:FOR,0:IF,4:functions,0:CALL,4	40
0x4000a50	            0x4154	                                push r12	       232	vtls.c	FUNCTION_9
0x4000a52	              0x55	                                push rbp	       232	vtls.c	FUNCTION_9
0x4000a53	          0x4c63e6	                         movsxd r12, esi	       232	vtls.c	FUNCTION_9
0x4000a56	              0x53	                                push rbx	       232	vtls.c	FUNCTION_9
0x4000a57	          0x4c89e5	                            mov rbp, r12	       232	vtls.c	FUNCTION_9
0x4000a5a	          0x4889fb	                            mov rbx, rdi	       232	vtls.c	FUNCTION_9
0x4000a5d	        0x4883ec10	                           sub rsp, 0x10	       232	vtls.c	FUNCTION_9
0x4000a61	    0x4280bc27b903	         cmp byte [rdi + r12 + 0x3b9], 0	       235	vtls.c	FUNCTION_9	IF_1
0x4000a6a	            0x740c	                            je 0x4000a78	       235	vtls.c	FUNCTION_9	IF_1
0x4000a6c	          0x4489e6	                           mov esi, r12d	       236	vtls.c	FUNCTION_9	IF_1	CALL_1
0x4000a6f	      0xe86cf8ffff	         call sym.ssl_connect_init_proxy	       236	vtls.c	FUNCTION_9	IF_1	CALL_1
0x4000a74	            0x85c0	                           test eax, eax	       237	vtls.c	FUNCTION_9	IF_1	IF_2
0x4000a76	            0x7511	                           jne 0x4000a89	       237	vtls.c	FUNCTION_9	IF_1	IF_2
0x4000a78	          0x488b3b	                    mov rdi, qword [rbx]	       241	vtls.c	FUNCTION_9	IF_3	CALL_2
0x4000a7b	      0xe880f7ffff	                call sym.ssl_prefs_check	       241	vtls.c	FUNCTION_9	IF_3	CALL_2
0x4000a80	            0x84c0	                             test al, al	       241	vtls.c	FUNCTION_9	IF_3	CALL_2
0x4000a82	            0x7514	                           jne 0x4000a98	       241	vtls.c	FUNCTION_9	IF_3	CALL_2
0x4000a84	      0xb823000000	                           mov eax, 0x23	       242	vtls.c	FUNCTION_9	IF_3
0x4000a89	        0x4883c410	                           add rsp, 0x10	       254	vtls.c	FUNCTION_9
0x4000a8d	              0x5b	                                 pop rbx	       254	vtls.c	FUNCTION_9
0x4000a8e	              0x5d	                                 pop rbp	       254	vtls.c	FUNCTION_9
0x4000a8f	            0x415c	                                 pop r12	       254	vtls.c	FUNCTION_9
0x4000a91	              0xc3	                                     ret	       254	vtls.c	FUNCTION_9
0x4000a92	    0x660f1f440000	                    nop word [rax + rax]	       254	vtls.c	FUNCTION_9
0x4000a98	        0x4b8d0464	                  lea rax, [r12 + r12*2]	       245	vtls.c	FUNCTION_9
0x4000a9c	            0x89ee	                            mov esi, ebp	       248	vtls.c	FUNCTION_9	CALL_3
0x4000a9e	          0x4889df	                            mov rdi, rbx	       248	vtls.c	FUNCTION_9	CALL_3
0x4000aa1	        0x488d04c3	                  lea rax, [rbx + rax*8]	       245	vtls.c	FUNCTION_9
0x4000aa5	    0xc68090020000	               mov byte [rax + 0x290], 1	       245	vtls.c	FUNCTION_9
0x4000aac	    0xc78094020000	              mov dword [rax + 0x294], 1	       246	vtls.c	FUNCTION_9
0x4000ab6	    0x488b05000000	            mov rax, qword [0x04000abd] 	       248	vtls.c	FUNCTION_9	CALL_3
0x4000abd	          0xff5060	                 call qword [rax + 0x60]	       248	vtls.c	FUNCTION_9	CALL_3
0x4000ac0	            0x85c0	                           test eax, eax	       250	vtls.c	FUNCTION_9	IF_4
0x4000ac2	            0x75c5	                           jne 0x4000a89	       250	vtls.c	FUNCTION_9	IF_4
0x4000ac4	          0x488b3b	                    mov rdi, qword [rbx]	       251	vtls.c	FUNCTION_9	CALL_4
0x4000ac7	      0xbe05000000	                              mov esi, 5	       251	vtls.c	FUNCTION_9	CALL_4
0x4000acc	        0x8944240c	              mov dword [rsp + 0xc], eax	       251	vtls.c	FUNCTION_9	CALL_4
0x4000ad0	      0xe800000000	                          call 0x4000ad5	       251	vtls.c	FUNCTION_9	CALL_4
0x4000ad5	        0x8b44240c	              mov eax, dword [rsp + 0xc]	       251	vtls.c	FUNCTION_9	CALL_4
0x4000ad9	            0xebae	                           jmp 0x4000a89	       251	vtls.c	FUNCTION_9	CALL_4
Curl_multissl_get_internals	WHILE,0:SWITCH,0:ELSE,0:DO,0:FOR,0:IF,1:functions,0:CALL,2	23
0x4000450	    0x488d05000000	                   lea rax, [0x04000457]	      1272	vtls.c	FUNCTION_61	IF_1
0x4000457	    0x483905000000	            cmp qword [0x0400045e], rax 	      1272	vtls.c	FUNCTION_61	IF_1
0x400045e	            0x7408	                            je 0x4000468	      1272	vtls.c	FUNCTION_61	IF_1
0x4000460	            0x31c0	                            xor eax, eax	      1131	vtls.c	FUNCTION_58
0x4000462	              0xc3	                                     ret	      1131	vtls.c	FUNCTION_58
0x4000463	       0xf1f440000	                   nop dword [rax + rax]	      1131	vtls.c	FUNCTION_58
0x4000468	    0x48833d000000	               cmp qword [0x04000470], 0	      1280	vtls.c	FUNCTION_61	IF_3
0x4000470	            0x74ee	                            je 0x4000460	      1280	vtls.c	FUNCTION_61	IF_3
0x4000472	        0x4883ec18	                           sub rsp, 0x18	      1127	vtls.c	FUNCTION_58
0x4000476	        0x8974240c	              mov dword [rsp + 0xc], esi	      1127	vtls.c	FUNCTION_58
0x400047a	        0x48893c24	                    mov qword [rsp], rdi	      1127	vtls.c	FUNCTION_58
0x400047e	      0xe81dffffff	           call sym.multissl_init.part.1	      1127	vtls.c	FUNCTION_58
0x4000483	            0x85c0	                           test eax, eax	      1128	vtls.c	FUNCTION_58	IF_1	CALL_1
0x4000485	            0x7519	                           jne 0x40004a0	      1128	vtls.c	FUNCTION_58	IF_1	CALL_1
0x4000487	    0x488b05000000	            mov rax, qword [0x0400048e] 	      1130	vtls.c	FUNCTION_58	CALL_2
0x400048e	        0x8b74240c	              mov esi, dword [rsp + 0xc]	      1130	vtls.c	FUNCTION_58	CALL_2
0x4000492	        0x488b3c24	                    mov rdi, qword [rsp]	      1130	vtls.c	FUNCTION_58	CALL_2
0x4000496	        0x488b4070	            mov rax, qword [rax + 0x70] 	      1130	vtls.c	FUNCTION_58	CALL_2
0x400049a	        0x4883c418	                           add rsp, 0x18	      1131	vtls.c	FUNCTION_58
0x400049e	            0xffe0	                                 jmp rax	      1130	vtls.c	FUNCTION_58	CALL_2
0x40004a0	            0x31c0	                            xor eax, eax	      1131	vtls.c	FUNCTION_58
0x40004a2	        0x4883c418	                           add rsp, 0x18	      1131	vtls.c	FUNCTION_58
0x40004a6	              0xc3	                                     ret	      1131	vtls.c	FUNCTION_58
Curl_ssl_init_certinfo	WHILE,0:SWITCH,0:ELSE,0:DO,0:FOR,0:IF,1:functions,0:CALL,2	26
0x4001400	              0x55	                                push rbp	       661	vtls.c	FUNCTION_30
0x4001401	              0x53	                                push rbx	       661	vtls.c	FUNCTION_30
0x4001402	            0x89f5	                            mov ebp, esi	       661	vtls.c	FUNCTION_30
0x4001404	          0x4889fb	                            mov rbx, rdi	       661	vtls.c	FUNCTION_30
0x4001407	        0x4883ec08	                              sub rsp, 8	       661	vtls.c	FUNCTION_30
0x400140b	    0x8b87b0520000	          mov eax, dword [rdi + 0x52b0] 	       647	vtls.c	FUNCTION_29	IF_1
0x4001411	            0x85c0	                           test eax, eax	       647	vtls.c	FUNCTION_29	IF_1
0x4001413	            0x753b	                           jne 0x4001450	       647	vtls.c	FUNCTION_29	IF_1
0x4001415	    0x488b05000000	            mov rax, qword [0x0400141c] 	       669	vtls.c	FUNCTION_30	CALL_2
0x400141c	          0x4863fd	                         movsxd rdi, ebp	       669	vtls.c	FUNCTION_30	CALL_2
0x400141f	      0xbe08000000	                              mov esi, 8	       669	vtls.c	FUNCTION_30	CALL_2
0x4001424	            0xff10	                        call qword [rax]	       669	vtls.c	FUNCTION_30	CALL_2
0x4001426	          0x4885c0	                           test rax, rax	       670	vtls.c	FUNCTION_30	IF_1
0x4001429	      0xba1b000000	                           mov edx, 0x1b	       671	vtls.c	FUNCTION_30	IF_1
0x400142e	            0x740f	                            je 0x400143f	       670	vtls.c	FUNCTION_30	IF_1
0x4001430	    0x89abb0520000	          mov dword [rbx + 0x52b0], ebp 	       673	vtls.c	FUNCTION_30
0x4001436	    0x488983b85200	          mov qword [rbx + 0x52b8], rax 	       674	vtls.c	FUNCTION_30
0x400143d	            0x31d2	                            xor edx, edx	       676	vtls.c	FUNCTION_30
0x400143f	        0x4883c408	                              add rsp, 8	       677	vtls.c	FUNCTION_30
0x4001443	            0x89d0	                            mov eax, edx	       677	vtls.c	FUNCTION_30
0x4001445	              0x5b	                                 pop rbx	       677	vtls.c	FUNCTION_30
0x4001446	              0x5d	                                 pop rbp	       677	vtls.c	FUNCTION_30
0x4001447	              0xc3	                                     ret	       677	vtls.c	FUNCTION_30
0x4001448	     0xf1f84000000	                   nop dword [rax + rax]	       677	vtls.c	FUNCTION_30
0x4001450	      0xe8dbf1ffff	  call sym.Curl_ssl_free_certinfo.part.7	       677	vtls.c	FUNCTION_30
0x4001455	            0xebbe	                           jmp 0x4001415	       677	vtls.c	FUNCTION_30
Curl_ssl_set_engine	WHILE,0:SWITCH,0:ELSE,0:DO,0:FOR,0:IF,0:functions,0:CALL,1	3
0x4001320	    0x488b05000000	            mov rax, qword [0x04001327] 	       573	vtls.c	FUNCTION_22	CALL_1
0x4001327	    0x488b80900000	            mov rax, qword [rax + 0x90] 	       573	vtls.c	FUNCTION_22	CALL_1
0x400132e	            0xffe0	                                 jmp rax	       573	vtls.c	FUNCTION_22	CALL_1
Curl_ssl_initsessions	WHILE,0:SWITCH,0:ELSE,0:DO,0:FOR,0:IF,2:functions,0:CALL,1	26
0x4001350	            0x31c0	                            xor eax, eax	       599	vtls.c	FUNCTION_25	IF_1
0x4001352	    0x4883bf504d00	             cmp qword [rdi + 0x4d50], 0	       597	vtls.c	FUNCTION_25	IF_1
0x400135a	            0x7404	                            je 0x4001360	       597	vtls.c	FUNCTION_25	IF_1
0x400135c	              0xc3	                                     ret	       610	vtls.c	FUNCTION_25
0x400135d	           0xf1f00	                         nop dword [rax]	       610	vtls.c	FUNCTION_25
0x4001360	              0x55	                                push rbp	       594	vtls.c	FUNCTION_25
0x4001361	              0x53	                                push rbx	       594	vtls.c	FUNCTION_25
0x4001362	          0x4889f5	                            mov rbp, rsi	       594	vtls.c	FUNCTION_25
0x4001365	          0x4889fb	                            mov rbx, rdi	       594	vtls.c	FUNCTION_25
0x4001368	      0xbe88000000	                           mov esi, 0x88	       601	vtls.c	FUNCTION_25	CALL_1
0x400136d	          0x4889ef	                            mov rdi, rbp	       601	vtls.c	FUNCTION_25	CALL_1
0x4001370	        0x4883ec08	                              sub rsp, 8	       594	vtls.c	FUNCTION_25
0x4001374	    0x488b05000000	            mov rax, qword [0x0400137b] 	       601	vtls.c	FUNCTION_25	CALL_1
0x400137b	            0xff10	                        call qword [rax]	       601	vtls.c	FUNCTION_25	CALL_1
0x400137d	          0x4889c2	                            mov rdx, rax	       601	vtls.c	FUNCTION_25	CALL_1
0x4001380	      0xb81b000000	                           mov eax, 0x1b	       603	vtls.c	FUNCTION_25	IF_2
0x4001385	          0x4885d2	                           test rdx, rdx	       602	vtls.c	FUNCTION_25	IF_2
0x4001388	            0x741b	                            je 0x40013a5	       602	vtls.c	FUNCTION_25	IF_2
0x400138a	    0x4889ab780700	            mov qword [rbx + 0x778], rbp	       606	vtls.c	FUNCTION_25
0x4001391	    0x488993504d00	          mov qword [rbx + 0x4d50], rdx 	       607	vtls.c	FUNCTION_25
0x4001398	            0x31c0	                            xor eax, eax	       609	vtls.c	FUNCTION_25
0x400139a	    0x48c783584d00	            mov qword [rbx + 0x4d58], 1 	       608	vtls.c	FUNCTION_25
0x40013a5	        0x4883c408	                              add rsp, 8	       610	vtls.c	FUNCTION_25
0x40013a9	              0x5b	                                 pop rbx	       610	vtls.c	FUNCTION_25
0x40013aa	              0x5d	                                 pop rbp	       610	vtls.c	FUNCTION_25
0x40013ab	              0xc3	                                     ret	       610	vtls.c	FUNCTION_25
Curl_none_random	WHILE,0:SWITCH,0:ELSE,0:DO,0:FOR,0:IF,0:functions,0:CALL,0	2
0x4000070	      0xb804000000	                              mov eax, 4	      1024	vtls.c	FUNCTION_44
0x4000075	              0xc3	                                     ret	      1024	vtls.c	FUNCTION_44
Curl_ssl_data_pending	WHILE,0:SWITCH,0:ELSE,0:DO,0:FOR,0:IF,0:functions,0:CALL,1	3
0x40013d0	    0x488b05000000	            mov rax, qword [0x040013d7] 	       639	vtls.c	FUNCTION_28	CALL_1
0x40013d7	        0x488b4048	            mov rax, qword [rax + 0x48] 	       639	vtls.c	FUNCTION_28	CALL_1
0x40013db	            0xffe0	                                 jmp rax	       639	vtls.c	FUNCTION_28	CALL_1
Curl_ssl_kill_session	WHILE,0:SWITCH,0:ELSE,0:DO,0:FOR,0:IF,1:functions,0:CALL,4	24
0x4000e30	              0x55	                                push rbp	       366	vtls.c	FUNCTION_14
0x4000e31	              0x53	                                push rbx	       366	vtls.c	FUNCTION_14
0x4000e32	          0x4889fb	                            mov rbx, rdi	       366	vtls.c	FUNCTION_14
0x4000e35	        0x4883ec08	                              sub rsp, 8	       366	vtls.c	FUNCTION_14
0x4000e39	        0x488b7f18	            mov rdi, qword [rdi + 0x18] 	       367	vtls.c	FUNCTION_14	IF_1
0x4000e3d	          0x4885ff	                           test rdi, rdi	       367	vtls.c	FUNCTION_14	IF_1
0x4000e40	            0x7449	                            je 0x4000e8b	       367	vtls.c	FUNCTION_14	IF_1
0x4000e42	    0x488b05000000	            mov rax, qword [0x04000e49] 	       371	vtls.c	FUNCTION_14	IF_1	CALL_1
0x4000e49	    0xff9088000000	                 call qword [rax + 0x88]	       371	vtls.c	FUNCTION_14	IF_1	CALL_1
0x4000e4f	        0x488d7b38	                   lea rdi, [rbx + 0x38]	       376	vtls.c	FUNCTION_14	IF_1	CALL_2
0x4000e53	    0x48c743180000	               mov qword [rbx + 0x18], 0	       373	vtls.c	FUNCTION_14	IF_1
0x4000e5b	    0x48c743280000	               mov qword [rbx + 0x28], 0	       374	vtls.c	FUNCTION_14	IF_1
0x4000e63	      0xe800000000	                          call 0x4000e68	       376	vtls.c	FUNCTION_14	IF_1	CALL_2
0x4000e68	    0x488b2d000000	            mov rbp, qword [0x04000e6f] 	       378	vtls.c	FUNCTION_14	IF_1	CALL_3
0x4000e6f	          0x488b3b	                    mov rdi, qword [rbx]	       378	vtls.c	FUNCTION_14	IF_1	CALL_3
0x4000e72	          0xff5500	                        call qword [rbp]	       378	vtls.c	FUNCTION_14	IF_1	CALL_3
0x4000e75	    0x48c703000000	                      mov qword [rbx], 0	       378	vtls.c	FUNCTION_14	IF_1	CALL_3
0x4000e7c	        0x488b7b08	                mov rdi, qword [rbx + 8]	       379	vtls.c	FUNCTION_14	IF_1	CALL_4
0x4000e80	          0xff5500	                        call qword [rbp]	       379	vtls.c	FUNCTION_14	IF_1	CALL_4
0x4000e83	    0x48c743080000	                  mov qword [rbx + 8], 0	       379	vtls.c	FUNCTION_14	IF_1	CALL_4
0x4000e8b	        0x4883c408	                              add rsp, 8	       381	vtls.c	FUNCTION_14
0x4000e8f	              0x5b	                                 pop rbx	       381	vtls.c	FUNCTION_14
0x4000e90	              0x5d	                                 pop rbp	       381	vtls.c	FUNCTION_14
0x4000e91	              0xc3	                                     ret	       381	vtls.c	FUNCTION_14
Curl_none_cleanup	WHILE,0:SWITCH,0:ELSE,0:DO,0:FOR,0:IF,0:functions,0:CALL,0	1
0x4000040	            0xf3c3	                                     ret	      1000	vtls.c	FUNCTION_41
Curl_ssl_shutdown	WHILE,0:SWITCH,0:ELSE,0:DO,0:FOR,0:IF,1:functions,0:CALL,1	32
0x40012a0	              0x55	                                push rbp	       556	vtls.c	FUNCTION_21
0x40012a1	              0x53	                                push rbx	       556	vtls.c	FUNCTION_21
0x40012a2	          0x4863de	                         movsxd rbx, esi	       556	vtls.c	FUNCTION_21
0x40012a5	          0x4889fd	                            mov rbp, rdi	       556	vtls.c	FUNCTION_21
0x40012a8	            0x89de	                            mov esi, ebx	       557	vtls.c	FUNCTION_21	IF_1	CALL_1
0x40012aa	        0x4883ec08	                              sub rsp, 8	       556	vtls.c	FUNCTION_21
0x40012ae	    0x488b05000000	            mov rax, qword [0x040012b5] 	       557	vtls.c	FUNCTION_21	IF_1	CALL_1
0x40012b5	          0xff5040	                 call qword [rax + 0x40]	       557	vtls.c	FUNCTION_21	IF_1	CALL_1
0x40012b8	            0x85c0	                           test eax, eax	       557	vtls.c	FUNCTION_21	IF_1	CALL_1
0x40012ba	      0xba50000000	                           mov edx, 0x50	       557	vtls.c	FUNCTION_21	IF_1	CALL_1
0x40012bf	            0x740f	                            je 0x40012d0	       557	vtls.c	FUNCTION_21	IF_1	CALL_1
0x40012c1	        0x4883c408	                              add rsp, 8	       567	vtls.c	FUNCTION_21
0x40012c5	            0x89d0	                            mov eax, edx	       567	vtls.c	FUNCTION_21
0x40012c7	              0x5b	                                 pop rbx	       567	vtls.c	FUNCTION_21
0x40012c8	              0x5d	                                 pop rbp	       567	vtls.c	FUNCTION_21
0x40012c9	              0xc3	                                     ret	       567	vtls.c	FUNCTION_21
0x40012ca	    0x660f1f440000	                    nop word [rax + rax]	       567	vtls.c	FUNCTION_21
0x40012d0	        0x488d045b	                  lea rax, [rbx + rbx*2]	       560	vtls.c	FUNCTION_21
0x40012d4	    0x488b15000000	            mov rdx, qword [0x040012db] 	       563	vtls.c	FUNCTION_21
0x40012db	      0x488d44c500	                  lea rax, [rbp + rax*8]	       560	vtls.c	FUNCTION_21
0x40012e0	    0xc68090020000	               mov byte [rax + 0x290], 0	       560	vtls.c	FUNCTION_21
0x40012e7	    0xc78094020000	              mov dword [rax + 0x294], 0	       561	vtls.c	FUNCTION_21
0x40012f1	      0x488d44dd00	                  lea rax, [rbp + rbx*8]	       561	vtls.c	FUNCTION_21
0x40012f6	    0x488990700200	            mov qword [rax + 0x270], rdx	       563	vtls.c	FUNCTION_21
0x40012fd	    0x488b15000000	            mov rdx, qword [0x04001304] 	       564	vtls.c	FUNCTION_21
0x4001304	    0x488990800200	            mov qword [rax + 0x280], rdx	       564	vtls.c	FUNCTION_21
0x400130b	        0x4883c408	                              add rsp, 8	       567	vtls.c	FUNCTION_21
0x400130f	            0x31d2	                            xor edx, edx	       566	vtls.c	FUNCTION_21
0x4001311	            0x89d0	                            mov eax, edx	       567	vtls.c	FUNCTION_21
0x4001313	              0x5b	                                 pop rbx	       567	vtls.c	FUNCTION_21
0x4001314	              0x5d	                                 pop rbp	       567	vtls.c	FUNCTION_21
0x4001315	              0xc3	                                     ret	       567	vtls.c	FUNCTION_21
Curl_none_check_cxn	WHILE,0:SWITCH,0:ELSE,0:DO,0:FOR,0:IF,0:functions,0:CALL,0	2
0x4000060	      0xb8ffffffff	                     mov eax, 0xffffffff	      1014	vtls.c	FUNCTION_43
0x4000065	              0xc3	                                     ret	      1014	vtls.c	FUNCTION_43
Curl_free_primary_ssl_config	WHILE,0:SWITCH,0:ELSE,0:DO,0:FOR,0:IF,0:functions,0:CALL,6	27
0x4000920	              0x55	                                push rbp	       127	vtls.c	FUNCTION_3
0x4000921	              0x53	                                push rbx	       127	vtls.c	FUNCTION_3
0x4000922	          0x4889fb	                            mov rbx, rdi	       127	vtls.c	FUNCTION_3
0x4000925	        0x4883ec08	                              sub rsp, 8	       127	vtls.c	FUNCTION_3
0x4000929	    0x488b2d000000	            mov rbp, qword [0x04000930] 	       128	vtls.c	FUNCTION_3	CALL_1
0x4000930	        0x488b7f18	            mov rdi, qword [rdi + 0x18] 	       128	vtls.c	FUNCTION_3	CALL_1
0x4000934	          0xff5500	                        call qword [rbp]	       128	vtls.c	FUNCTION_3	CALL_1
0x4000937	        0x488b7b20	            mov rdi, qword [rbx + 0x20] 	       129	vtls.c	FUNCTION_3	CALL_2
0x400093b	    0x48c743180000	               mov qword [rbx + 0x18], 0	       128	vtls.c	FUNCTION_3	CALL_1
0x4000943	          0xff5500	                        call qword [rbp]	       129	vtls.c	FUNCTION_3	CALL_2
0x4000946	        0x488b7b28	            mov rdi, qword [rbx + 0x28] 	       130	vtls.c	FUNCTION_3	CALL_3
0x400094a	    0x48c743200000	               mov qword [rbx + 0x20], 0	       129	vtls.c	FUNCTION_3	CALL_2
0x4000952	          0xff5500	                        call qword [rbp]	       130	vtls.c	FUNCTION_3	CALL_3
0x4000955	        0x488b7b30	            mov rdi, qword [rbx + 0x30] 	       131	vtls.c	FUNCTION_3	CALL_4
0x4000959	    0x48c743280000	               mov qword [rbx + 0x28], 0	       130	vtls.c	FUNCTION_3	CALL_3
0x4000961	          0xff5500	                        call qword [rbp]	       131	vtls.c	FUNCTION_3	CALL_4
0x4000964	        0x488b7b38	            mov rdi, qword [rbx + 0x38] 	       132	vtls.c	FUNCTION_3	CALL_5
0x4000968	    0x48c743300000	               mov qword [rbx + 0x30], 0	       131	vtls.c	FUNCTION_3	CALL_4
0x4000970	          0xff5500	                        call qword [rbp]	       132	vtls.c	FUNCTION_3	CALL_5
0x4000973	    0x48c743380000	               mov qword [rbx + 0x38], 0	       132	vtls.c	FUNCTION_3	CALL_5
0x400097b	        0x488b7b40	            mov rdi, qword [rbx + 0x40] 	       133	vtls.c	FUNCTION_3	CALL_6
0x400097f	          0xff5500	                        call qword [rbp]	       133	vtls.c	FUNCTION_3	CALL_6
0x4000982	    0x48c743400000	               mov qword [rbx + 0x40], 0	       133	vtls.c	FUNCTION_3	CALL_6
0x400098a	        0x4883c408	                              add rsp, 8	       134	vtls.c	FUNCTION_3
0x400098e	              0x5b	                                 pop rbx	       134	vtls.c	FUNCTION_3
0x400098f	              0x5d	                                 pop rbp	       134	vtls.c	FUNCTION_3
0x4000990	              0xc3	                                     ret	       134	vtls.c	FUNCTION_3
Curl_ssl_engines_list	WHILE,0:SWITCH,0:ELSE,0:DO,0:FOR,0:IF,0:functions,0:CALL,1	3
0x4001340	    0x488b05000000	            mov rax, qword [0x04001347] 	       586	vtls.c	FUNCTION_24	CALL_1
0x4001347	    0x488b80a00000	            mov rax, qword [rax + 0xa0] 	       586	vtls.c	FUNCTION_24	CALL_1
0x400134e	            0xffe0	                                 jmp rax	       586	vtls.c	FUNCTION_24	CALL_1
Curl_ssl_getsessionid	WHILE,0:SWITCH,0:ELSE,1:DO,0:FOR,1:IF,5:functions,0:CALL,8	141
0x4000bd0	            0x4157	                                push r15	       305	vtls.c	FUNCTION_13
0x4000bd2	            0x4156	                                push r14	       305	vtls.c	FUNCTION_13
0x4000bd4	            0x4155	                                push r13	       305	vtls.c	FUNCTION_13
0x4000bd6	            0x4154	                                push r12	       305	vtls.c	FUNCTION_13
0x4000bd8	              0x55	                                push rbp	       305	vtls.c	FUNCTION_13
0x4000bd9	              0x53	                                push rbx	       305	vtls.c	FUNCTION_13
0x4000bda	        0x4883ec38	                           sub rsp, 0x38	       305	vtls.c	FUNCTION_13
0x4000bde	    0x8b8778010000	           mov eax, dword [rdi + 0x178] 	       312	vtls.c	FUNCTION_13	CALL_1
0x4000be4	          0x4c8b2f	                    mov r13, qword [rdi]	       307	vtls.c	FUNCTION_13
0x4000be7	          0x83f802	                              cmp eax, 2	       312	vtls.c	FUNCTION_13	CALL_1
0x4000bea	     0xf84d0010000	                            je 0x4000dc0	       312	vtls.c	FUNCTION_13	CALL_1
0x4000bf0	    0x488d8ff80200	                  lea rcx, [rdi + 0x2f8]	       314	vtls.c	FUNCTION_13
0x4000bf7	          0x83f802	                              cmp eax, 2	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x4000bfa	    0x488bafd80000	            mov rbp, qword [rdi + 0xd8] 	       316	vtls.c	FUNCTION_13
0x4000c01	      0x48894c2410	             mov qword [rsp + 0x10], rcx	       314	vtls.c	FUNCTION_13
0x4000c06	    0x8b8f98010000	           mov ecx, dword [rdi + 0x198] 	       318	vtls.c	FUNCTION_13
0x4000c0c	    0x48c706000000	                      mov qword [rsi], 0	       319	vtls.c	FUNCTION_13
0x4000c13	        0x894c2408	                mov dword [rsp + 8], ecx	       318	vtls.c	FUNCTION_13
0x4000c17	     0xf84d8010000	                            je 0x4000df5	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x4000c1d	    0x450fb6a5fb05	         movzx r12d, byte [r13 + 0x5fb] 	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x4000c25	        0x4183f401	                             xor r12d, 1	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x4000c29	          0x4584e4	                         test r12b, r12b	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x4000c2c	     0xf8546010000	                           jne 0x4000d78	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x4000c32	    0x498b85b80000	            mov rax, qword [r13 + 0xb8] 	       328	vtls.c	FUNCTION_13	IF_2
0x4000c39	          0x4885c0	                           test rax, rax	       328	vtls.c	FUNCTION_13	IF_2
0x4000c3c	            0x7409	                            je 0x4000c47	       328	vtls.c	FUNCTION_13	IF_2
0x4000c3e	          0xf60010	                   test byte [rax], 0x10	       328	vtls.c	FUNCTION_13	IF_2
0x4000c41	     0xf8549010000	                           jne 0x4000d90	       328	vtls.c	FUNCTION_13	IF_2
0x4000c47	    0x498d85584d00	                 lea rax, [r13 + 0x4d58]	       331	vtls.c	FUNCTION_13	ELSE_1
0x4000c4e	      0x4889442418	             mov qword [rsp + 0x18], rax	       331	vtls.c	FUNCTION_13	ELSE_1
0x4000c53	    0x4983bd780700	              cmp qword [r13 + 0x778], 0	       333	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000c5b	     0xf8417010000	                            je 0x4000d78	       333	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000c61	      0x4889542428	             mov qword [rsp + 0x28], rdx	       333	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000c66	      0x4889742420	             mov qword [rsp + 0x20], rsi	       333	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000c6b	          0x4889fb	                            mov rbx, rdi	       333	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000c6e	          0x4531f6	                          xor r14d, r14d	       333	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000c71	            0xeb1e	                           jmp 0x4000c91	       333	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000c73	       0xf1f440000	                   nop dword [rax + rax]	       333	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000c78	      0x49837f0800	                  cmp qword [r15 + 8], 0	       339	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000c7d	            0x745f	                            je 0x4000cde	       339	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000c7f	              0x90	                                     nop	       339	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000c80	        0x4983c601	                              add r14, 1	       333	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000c84	    0x4d39b5780700	           cmp qword [r13 + 0x778], r14 	       333	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000c8b	     0xf86e7000000	                           jbe 0x4000d78	       333	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000c91	          0x4c89f0	                            mov rax, r14	       334	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000c94	        0x48c1e007	                              shl rax, 7	       334	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000c98	        0x4a8d14f0	                  lea rdx, [rax + r14*8]	       334	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000c9c	    0x490395504d00	           add rdx, qword [r13 + 0x4d50]	       334	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000ca3	      0x48837a1800	               cmp qword [rdx + 0x18], 0	       335	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_3
0x4000ca8	          0x4989d7	                            mov r15, rdx	       334	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000cab	            0x74d3	                            je 0x4000c80	       335	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_3
0x4000cad	          0x488b32	                    mov rsi, qword [rdx]	       338	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_5
0x4000cb0	          0x4889ef	                            mov rdi, rbp	       338	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_5
0x4000cb3	      0xe800000000	                          call 0x4000cb8	       338	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_5
0x4000cb8	            0x85c0	                           test eax, eax	       338	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_5
0x4000cba	            0x74c4	                            je 0x4000c80	       338	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_5
0x4000cbc	    0x80bb9b030000	               cmp byte [rbx + 0x39b], 0	       338	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_5
0x4000cc3	            0x74b3	                            je 0x4000c78	       338	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_5
0x4000cc5	        0x498b7708	                mov rsi, qword [r15 + 8]	       340	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000cc9	          0x4885f6	                           test rsi, rsi	       340	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000ccc	            0x74b2	                            je 0x4000c80	       340	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000cce	    0x488bbb000100	           mov rdi, qword [rbx + 0x100] 	       341	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_6
0x4000cd5	      0xe800000000	                          call 0x4000cda	       341	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_6
0x4000cda	            0x85c0	                           test eax, eax	       340	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000cdc	            0x74a2	                            je 0x4000c80	       340	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000cde	    0x80bb9c030000	               cmp byte [rbx + 0x39c], 0	       341	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_6
0x4000ce5	     0xf84b5000000	                            je 0x4000da0	       341	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_6
0x4000ceb	        0x418b4734	            mov eax, dword [r15 + 0x34] 	       343	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000cef	          0x83f8ff	             cmp eax, 0xffffffffffffffff	       343	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000cf2	            0x748c	                            je 0x4000c80	       343	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000cf4	    0x3b839c010000	           cmp eax, dword [rbx + 0x19c] 	       343	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000cfa	            0x7584	                           jne 0x4000c80	       343	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000cfc	        0x8b442408	                mov eax, dword [rsp + 8]	       344	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000d00	        0x41394730	            cmp dword [r15 + 0x30], eax 	       344	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000d04	     0xf8576ffffff	                           jne 0x4000c80	       344	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000d0a	    0x488b83e00300	           mov rax, qword [rbx + 0x3e0] 	       346	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_7
0x4000d11	        0x498b7710	            mov rsi, qword [r15 + 0x10] 	       346	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_7
0x4000d15	          0x488b38	                    mov rdi, qword [rax]	       346	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_7
0x4000d18	      0xe800000000	                          call 0x4000d1d	       346	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_7
0x4000d1d	            0x85c0	                           test eax, eax	       345	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000d1f	     0xf845bffffff	                            je 0x4000c80	       345	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000d25	      0x488b7c2410	            mov rdi, qword [rsp + 0x10] 	       347	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_8
0x4000d2a	        0x498d7738	                   lea rsi, [r15 + 0x38]	       347	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_8
0x4000d2e	      0xe800000000	                          call 0x4000d33	       347	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_8
0x4000d33	            0x84c0	                             test al, al	       346	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_7
0x4000d35	     0xf8445ffffff	                            je 0x4000c80	       346	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_7
0x4000d3b	      0x488b4c2418	            mov rcx, qword [rsp + 0x18] 	       349	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000d40	          0x488b01	                    mov rax, qword [rcx]	       349	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000d43	      0x4889442408	                mov qword [rsp + 8], rax	       349	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000d48	        0x4883c001	                              add rax, 1	       349	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000d4c	          0x488901	                    mov qword [rcx], rax	       349	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000d4f	        0x49894728	             mov qword [r15 + 0x28], rax	       350	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000d53	      0x488b4c2420	            mov rcx, qword [rsp + 0x20] 	       351	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000d58	        0x498b4718	            mov rax, qword [r15 + 0x18] 	       351	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000d5c	          0x488901	                    mov qword [rcx], rax	       351	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000d5f	      0x488b4c2428	            mov rcx, qword [rsp + 0x28] 	       352	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	IF_5
0x4000d64	          0x4885c9	                           test rcx, rcx	       352	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	IF_5
0x4000d67	            0x7415	                            je 0x4000d7e	       352	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	IF_5
0x4000d69	        0x498b4720	            mov rax, qword [r15 + 0x20] 	       353	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	IF_5
0x4000d6d	          0x488901	                    mov qword [rcx], rax	       353	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	IF_5
0x4000d70	            0xeb0c	                           jmp 0x4000d7e	       353	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	IF_5
0x4000d72	    0x660f1f440000	                    nop word [rax + rax]	       353	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	IF_5
0x4000d78	    0x41bc01000000	                             mov r12d, 1	       325	vtls.c	FUNCTION_13	IF_1
0x4000d7e	        0x4883c438	                           add rsp, 0x38	       360	vtls.c	FUNCTION_13
0x4000d82	          0x4489e0	                           mov eax, r12d	       360	vtls.c	FUNCTION_13
0x4000d85	              0x5b	                                 pop rbx	       360	vtls.c	FUNCTION_13
0x4000d86	              0x5d	                                 pop rbp	       360	vtls.c	FUNCTION_13
0x4000d87	            0x415c	                                 pop r12	       360	vtls.c	FUNCTION_13
0x4000d89	            0x415d	                                 pop r13	       360	vtls.c	FUNCTION_13
0x4000d8b	            0x415e	                                 pop r14	       360	vtls.c	FUNCTION_13
0x4000d8d	            0x415f	                                 pop r15	       360	vtls.c	FUNCTION_13
0x4000d8f	              0xc3	                                     ret	       360	vtls.c	FUNCTION_13
0x4000d90	    0x4805c0000000	                           add rax, 0xc0	       329	vtls.c	FUNCTION_13	IF_2
0x4000d96	      0x4889442418	             mov qword [rsp + 0x18], rax	       329	vtls.c	FUNCTION_13	IF_2
0x4000d9b	      0xe9b3feffff	                           jmp 0x4000c53	       329	vtls.c	FUNCTION_13	IF_2
0x4000da0	      0x41837f34ff	cmp dword [r15 + 0x34], 0xffffffffffffffff	       342	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000da5	     0xf85d5feffff	                           jne 0x4000c80	       342	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000dab	        0x8b442408	                mov eax, dword [rsp + 8]	       344	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000daf	        0x41394730	            cmp dword [r15 + 0x30], eax 	       344	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000db3	     0xf85c7feffff	                           jne 0x4000c80	       344	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000db9	      0xe94cffffff	                           jmp 0x4000d0a	       344	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000dbe	            0x6690	                                     nop	       344	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000dc0	          0x4863c9	                         movsxd rcx, ecx	       312	vtls.c	FUNCTION_13	CALL_1
0x4000dc3	    0x80bc0fb90300	         cmp byte [rdi + rcx + 0x3b9], 0	       312	vtls.c	FUNCTION_13	CALL_1
0x4000dcb	     0xf851ffeffff	                           jne 0x4000bf0	       312	vtls.c	FUNCTION_13	CALL_1
0x4000dd1	    0x488d87480300	                  lea rax, [rdi + 0x348]	       314	vtls.c	FUNCTION_13
0x4000dd8	    0x488baf600100	           mov rbp, qword [rdi + 0x160] 	       316	vtls.c	FUNCTION_13
0x4000ddf	      0x4889442410	             mov qword [rsp + 0x10], rax	       314	vtls.c	FUNCTION_13
0x4000de4	    0x8b8790010000	           mov eax, dword [rdi + 0x190] 	       318	vtls.c	FUNCTION_13
0x4000dea	    0x48c706000000	                      mov qword [rsi], 0	       319	vtls.c	FUNCTION_13
0x4000df1	        0x89442408	                mov dword [rsp + 8], eax	       318	vtls.c	FUNCTION_13
0x4000df5	            0x31c0	                            xor eax, eax	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x4000df7	    0x83bf5c020000	cmp dword [rdi + 0x25c], 0xffffffffffffffff	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x4000dfe	           0xf95c0	                                setne al	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x4000e01	        0x488d0c00	                    lea rcx, [rax + rax]	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x4000e05	          0x4801c8	                            add rax, rcx	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x4000e08	    0x83bcc7c40200	     cmp dword [rdi + rax*8 + 0x2c4], 2 	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x4000e10	     0xf8407feffff	                            je 0x4000c1d	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x4000e16	    0x450fb6a5c306	         movzx r12d, byte [r13 + 0x6c3] 	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x4000e1e	        0x4183f401	                             xor r12d, 1	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x4000e22	      0xe902feffff	                           jmp 0x4000c29	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
Curl_ssl_set_engine_default	WHILE,0:SWITCH,0:ELSE,0:DO,0:FOR,0:IF,0:functions,0:CALL,1	3
0x4001330	    0x488b05000000	            mov rax, qword [0x04001337] 	       580	vtls.c	FUNCTION_23	CALL_1
0x4001337	    0x488b80980000	            mov rax, qword [rax + 0x98] 	       580	vtls.c	FUNCTION_23	CALL_1
0x400133e	            0xffe0	                                 jmp rax	       580	vtls.c	FUNCTION_23	CALL_1
Curl_ssl_md5sum	WHILE,0:SWITCH,0:ELSE,0:DO,0:FOR,0:IF,0:functions,0:CALL,1	3
0x4001a30	    0x488b05000000	            mov rax, qword [0x04001a37] 	       962	vtls.c	FUNCTION_36	CALL_1
0x4001a37	    0x488b80b00000	            mov rax, qword [rax + 0xb0] 	       962	vtls.c	FUNCTION_36	CALL_1
0x4001a3e	            0xffe0	                                 jmp rax	       962	vtls.c	FUNCTION_36	CALL_1
Curl_none_engines_list	WHILE,0:SWITCH,0:ELSE,0:DO,0:FOR,0:IF,0:functions,0:CALL,0	2
0x40000c0	            0x31c0	                            xor eax, eax	      1067	vtls.c	FUNCTION_51
0x40000c2	              0xc3	                                     ret	      1067	vtls.c	FUNCTION_51
Curl_ssl_cleanup	WHILE,0:SWITCH,0:ELSE,0:DO,0:FOR,0:IF,1:functions,0:CALL,1	10
0x4000a20	    0x803d00000000	                cmp byte [0x04000a27], 0	       175	vtls.c	FUNCTION_6	IF_1
0x4000a27	            0x7507	                           jne 0x4000a30	       175	vtls.c	FUNCTION_6	IF_1
0x4000a29	              0xc3	                                     ret	       180	vtls.c	FUNCTION_6
0x4000a2a	    0x660f1f440000	                    nop word [rax + rax]	       180	vtls.c	FUNCTION_6
0x4000a30	        0x4883ec08	                              sub rsp, 8	       174	vtls.c	FUNCTION_6
0x4000a34	    0x488b05000000	            mov rax, qword [0x04000a3b] 	       177	vtls.c	FUNCTION_6	IF_1	CALL_1
0x4000a3b	          0xff5028	                 call qword [rax + 0x28]	       177	vtls.c	FUNCTION_6	IF_1	CALL_1
0x4000a3e	    0xc60500000000	                mov byte [0x04000a45], 0	       178	vtls.c	FUNCTION_6	IF_1
0x4000a45	        0x4883c408	                              add rsp, 8	       180	vtls.c	FUNCTION_6
0x4000a49	              0xc3	                                     ret	       180	vtls.c	FUNCTION_6
Curl_ssl_connect_nonblocking	WHILE,0:SWITCH,0:ELSE,0:DO,0:FOR,0:IF,4:functions,0:CALL,4	44
0x4000ae0	            0x4155	                                push r13	       259	vtls.c	FUNCTION_10
0x4000ae2	            0x4154	                                push r12	       259	vtls.c	FUNCTION_10
0x4000ae4	          0x4c63e6	                         movsxd r12, esi	       259	vtls.c	FUNCTION_10
0x4000ae7	              0x55	                                push rbp	       259	vtls.c	FUNCTION_10
0x4000ae8	              0x53	                                push rbx	       259	vtls.c	FUNCTION_10
0x4000ae9	          0x4c89e5	                            mov rbp, r12	       259	vtls.c	FUNCTION_10
0x4000aec	          0x4889fb	                            mov rbx, rdi	       259	vtls.c	FUNCTION_10
0x4000aef	          0x4989d5	                            mov r13, rdx	       259	vtls.c	FUNCTION_10
0x4000af2	        0x4883ec18	                           sub rsp, 0x18	       259	vtls.c	FUNCTION_10
0x4000af6	    0x4280bc27b903	         cmp byte [rdi + r12 + 0x3b9], 0	       261	vtls.c	FUNCTION_10	IF_1
0x4000aff	            0x740c	                            je 0x4000b0d	       261	vtls.c	FUNCTION_10	IF_1
0x4000b01	          0x4489e6	                           mov esi, r12d	       262	vtls.c	FUNCTION_10	IF_1	CALL_1
0x4000b04	      0xe8d7f7ffff	         call sym.ssl_connect_init_proxy	       262	vtls.c	FUNCTION_10	IF_1	CALL_1
0x4000b09	            0x85c0	                           test eax, eax	       263	vtls.c	FUNCTION_10	IF_1	IF_2
0x4000b0b	            0x7511	                           jne 0x4000b1e	       263	vtls.c	FUNCTION_10	IF_1	IF_2
0x4000b0d	          0x488b3b	                    mov rdi, qword [rbx]	       267	vtls.c	FUNCTION_10	IF_3	CALL_2
0x4000b10	      0xe8ebf6ffff	                call sym.ssl_prefs_check	       267	vtls.c	FUNCTION_10	IF_3	CALL_2
0x4000b15	            0x84c0	                             test al, al	       267	vtls.c	FUNCTION_10	IF_3	CALL_2
0x4000b17	            0x7517	                           jne 0x4000b30	       267	vtls.c	FUNCTION_10	IF_3	CALL_2
0x4000b19	      0xb823000000	                           mov eax, 0x23	       268	vtls.c	FUNCTION_10	IF_3
0x4000b1e	        0x4883c418	                           add rsp, 0x18	       276	vtls.c	FUNCTION_10
0x4000b22	              0x5b	                                 pop rbx	       276	vtls.c	FUNCTION_10
0x4000b23	              0x5d	                                 pop rbp	       276	vtls.c	FUNCTION_10
0x4000b24	            0x415c	                                 pop r12	       276	vtls.c	FUNCTION_10
0x4000b26	            0x415d	                                 pop r13	       276	vtls.c	FUNCTION_10
0x4000b28	              0xc3	                                     ret	       276	vtls.c	FUNCTION_10
0x4000b29	     0xf1f80000000	                         nop dword [rax]	       276	vtls.c	FUNCTION_10
0x4000b30	        0x4b8d0464	                  lea rax, [r12 + r12*2]	       271	vtls.c	FUNCTION_10
0x4000b34	          0x4c89ea	                            mov rdx, r13	       272	vtls.c	FUNCTION_10	CALL_3
0x4000b37	            0x89ee	                            mov esi, ebp	       272	vtls.c	FUNCTION_10	CALL_3
0x4000b39	          0x4889df	                            mov rdi, rbx	       272	vtls.c	FUNCTION_10	CALL_3
0x4000b3c	    0xc684c3900200	       mov byte [rbx + rax*8 + 0x290], 1	       271	vtls.c	FUNCTION_10
0x4000b44	    0x488b05000000	            mov rax, qword [0x04000b4b] 	       272	vtls.c	FUNCTION_10	CALL_3
0x4000b4b	          0xff5068	                 call qword [rax + 0x68]	       272	vtls.c	FUNCTION_10	CALL_3
0x4000b4e	            0x85c0	                           test eax, eax	       273	vtls.c	FUNCTION_10	IF_4
0x4000b50	            0x75cc	                           jne 0x4000b1e	       273	vtls.c	FUNCTION_10	IF_4
0x4000b52	      0x41807d0000	                       cmp byte [r13], 0	       273	vtls.c	FUNCTION_10	IF_4
0x4000b57	            0x74c5	                            je 0x4000b1e	       273	vtls.c	FUNCTION_10	IF_4
0x4000b59	          0x488b3b	                    mov rdi, qword [rbx]	       274	vtls.c	FUNCTION_10	CALL_4
0x4000b5c	      0xbe05000000	                              mov esi, 5	       274	vtls.c	FUNCTION_10	CALL_4
0x4000b61	        0x8944240c	              mov dword [rsp + 0xc], eax	       274	vtls.c	FUNCTION_10	CALL_4
0x4000b65	      0xe800000000	                          call 0x4000b6a	       274	vtls.c	FUNCTION_10	CALL_4
0x4000b6a	        0x8b44240c	              mov eax, dword [rsp + 0xc]	       274	vtls.c	FUNCTION_10	CALL_4
0x4000b6e	            0xebae	                           jmp 0x4000b1e	       274	vtls.c	FUNCTION_10	CALL_4
Curl_ssl_version	WHILE,0:SWITCH,0:ELSE,0:DO,0:FOR,0:IF,0:functions,0:CALL,2	3
0x40013b0	    0x488b05000000	            mov rax, qword [0x040013b7] 	       619	vtls.c	FUNCTION_26	CALL_2
0x40013b7	        0x488b4030	            mov rax, qword [rax + 0x30] 	       619	vtls.c	FUNCTION_26	CALL_2
0x40013bb	            0xffe0	                                 jmp rax	       619	vtls.c	FUNCTION_26	CALL_2
Curl_pin_peer_pubkey	WHILE,0:SWITCH,0:ELSE,0:DO,2:FOR,0:IF,22:functions,0:CALL,29	286
0x40015a0	            0x4157	                                push r15	       805	vtls.c	FUNCTION_35
0x40015a2	            0x4156	                                push r14	       805	vtls.c	FUNCTION_35
0x40015a4	            0x4155	                                push r13	       805	vtls.c	FUNCTION_35
0x40015a6	            0x4154	                                push r12	       805	vtls.c	FUNCTION_35
0x40015a8	              0x55	                                push rbp	       805	vtls.c	FUNCTION_35
0x40015a9	              0x53	                                push rbx	       805	vtls.c	FUNCTION_35
0x40015aa	        0x4883ec38	                           sub rsp, 0x38	       805	vtls.c	FUNCTION_35
0x40015ae	    0x64488b042528	                mov rax, qword fs:[0x28]	       805	vtls.c	FUNCTION_35
0x40015b7	      0x4889442428	             mov qword [rsp + 0x28], rax	       805	vtls.c	FUNCTION_35
0x40015bc	            0x31c0	                            xor eax, eax	       805	vtls.c	FUNCTION_35
0x40015be	          0x4885f6	                           test rsi, rsi	       818	vtls.c	FUNCTION_35	IF_1
0x40015c1	    0x48c744241000	               mov qword [rsp + 0x10], 0	       807	vtls.c	FUNCTION_35
0x40015ca	     0xf84c0010000	                            je 0x4001790	       818	vtls.c	FUNCTION_35	IF_1
0x40015d0	          0x4885d2	                           test rdx, rdx	       820	vtls.c	FUNCTION_35	IF_2
0x40015d3	          0x4889d5	                            mov rbp, rdx	       820	vtls.c	FUNCTION_35	IF_2
0x40015d6	            0x7408	                            je 0x40015e0	       820	vtls.c	FUNCTION_35	IF_2
0x40015d8	          0x4885c9	                           test rcx, rcx	       820	vtls.c	FUNCTION_35	IF_2
0x40015db	          0x4989ce	                            mov r14, rcx	       820	vtls.c	FUNCTION_35	IF_2
0x40015de	            0x7530	                           jne 0x4001610	       820	vtls.c	FUNCTION_35	IF_2
0x40015e0	      0xb85a000000	                           mov eax, 0x5a	       821	vtls.c	FUNCTION_35	IF_2
0x40015e5	      0x488b4c2428	            mov rcx, qword [rsp + 0x28] 	       954	vtls.c	FUNCTION_35
0x40015ea	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       954	vtls.c	FUNCTION_35
0x40015f3	     0xf85fa020000	                           jne 0x40018f3	       954	vtls.c	FUNCTION_35
0x40015f9	        0x4883c438	                           add rsp, 0x38	       954	vtls.c	FUNCTION_35
0x40015fd	              0x5b	                                 pop rbx	       954	vtls.c	FUNCTION_35
0x40015fe	              0x5d	                                 pop rbp	       954	vtls.c	FUNCTION_35
0x40015ff	            0x415c	                                 pop r12	       954	vtls.c	FUNCTION_35
0x4001601	            0x415d	                                 pop r13	       954	vtls.c	FUNCTION_35
0x4001603	            0x415e	                                 pop r14	       954	vtls.c	FUNCTION_35
0x4001605	            0x415f	                                 pop r15	       954	vtls.c	FUNCTION_35
0x4001607	              0xc3	                                     ret	       954	vtls.c	FUNCTION_35
0x4001608	     0xf1f84000000	                   nop dword [rax + rax]	       954	vtls.c	FUNCTION_35
0x4001610	          0x4989ff	                            mov r15, rdi	       954	vtls.c	FUNCTION_35
0x4001613	    0x488d3d000000	                   lea rdi, [0x0400161a]	       824	vtls.c	FUNCTION_35	IF_3	CALL_1
0x400161a	      0xb908000000	                              mov ecx, 8	       824	vtls.c	FUNCTION_35	IF_3	CALL_1
0x400161f	          0x4889f3	                            mov rbx, rsi	       824	vtls.c	FUNCTION_35	IF_3	CALL_1
0x4001622	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	       824	vtls.c	FUNCTION_35	IF_3	CALL_1
0x4001624	     0xf8576010000	                           jne 0x40017a0	       824	vtls.c	FUNCTION_35	IF_3	CALL_1
0x400162a	    0x488b05000000	            mov rax, qword [0x04001631] 	       825	vtls.c	FUNCTION_35	IF_3	IF_4
0x4001631	    0x4883b8b80000	               cmp qword [rax + 0xb8], 0	       825	vtls.c	FUNCTION_35	IF_3	IF_4
0x4001639	            0x74a5	                            je 0x40015e0	       825	vtls.c	FUNCTION_35	IF_3	IF_4
0x400163b	    0x488b05000000	            mov rax, qword [0x04001642] 	       831	vtls.c	FUNCTION_35	IF_3	CALL_2
0x4001642	      0xbf20000000	                           mov edi, 0x20	       831	vtls.c	FUNCTION_35	IF_3	CALL_2
0x4001647	            0xff10	                        call qword [rax]	       831	vtls.c	FUNCTION_35	IF_3	CALL_2
0x4001649	          0x4989c5	                            mov r13, rax	       831	vtls.c	FUNCTION_35	IF_3	CALL_2
0x400164c	      0xb81b000000	                           mov eax, 0x1b	       833	vtls.c	FUNCTION_35	IF_3	IF_5
0x4001651	          0x4d85ed	                           test r13, r13	       832	vtls.c	FUNCTION_35	IF_3	IF_5
0x4001654	            0x748f	                            je 0x40015e5	       832	vtls.c	FUNCTION_35	IF_3	IF_5
0x4001656	    0x488b05000000	            mov rax, qword [0x0400165d] 	       834	vtls.c	FUNCTION_35	IF_3	CALL_3
0x400165d	      0xb920000000	                           mov ecx, 0x20	       834	vtls.c	FUNCTION_35	IF_3	CALL_3
0x4001662	          0x4c89ea	                            mov rdx, r13	       834	vtls.c	FUNCTION_35	IF_3	CALL_3
0x4001665	          0x4c89f6	                            mov rsi, r14	       834	vtls.c	FUNCTION_35	IF_3	CALL_3
0x4001668	          0x4889ef	                            mov rdi, rbp	       834	vtls.c	FUNCTION_35	IF_3	CALL_3
0x400166b	    0xff90b8000000	                 call qword [rax + 0xb8]	       834	vtls.c	FUNCTION_35	IF_3	CALL_3
0x4001671	            0x85c0	                           test eax, eax	       837	vtls.c	FUNCTION_35	IF_3	IF_6
0x4001673	     0xf856cffffff	                           jne 0x40015e5	       837	vtls.c	FUNCTION_35	IF_3	IF_6
0x4001679	      0x488d4c2420	                   lea rcx, [rsp + 0x20]	       840	vtls.c	FUNCTION_35	IF_3	CALL_4
0x400167e	      0x4c8d442418	                    lea r8, [rsp + 0x18]	       840	vtls.c	FUNCTION_35	IF_3	CALL_4
0x4001683	      0xba20000000	                           mov edx, 0x20	       840	vtls.c	FUNCTION_35	IF_3	CALL_4
0x4001688	          0x4c89ee	                            mov rsi, r13	       840	vtls.c	FUNCTION_35	IF_3	CALL_4
0x400168b	          0x4c89ff	                            mov rdi, r15	       840	vtls.c	FUNCTION_35	IF_3	CALL_4
0x400168e	      0xe800000000	                          call 0x4001693	       840	vtls.c	FUNCTION_35	IF_3	CALL_4
0x4001693	    0x4c8b25000000	            mov r12, qword [0x0400169a] 	       843	vtls.c	FUNCTION_35	IF_3	CALL_5
0x400169a	            0x89c5	                            mov ebp, eax	       840	vtls.c	FUNCTION_35	IF_3	CALL_4
0x400169c	          0x4c89ef	                            mov rdi, r13	       843	vtls.c	FUNCTION_35	IF_3	CALL_5
0x400169f	        0x41ff1424	                        call qword [r12]	       843	vtls.c	FUNCTION_35	IF_3	CALL_5
0x40016a3	            0x85ed	                           test ebp, ebp	       845	vtls.c	FUNCTION_35	IF_3	IF_7
0x40016a5	            0x89e8	                            mov eax, ebp	       845	vtls.c	FUNCTION_35	IF_3	IF_7
0x40016a7	     0xf8538ffffff	                           jne 0x40015e5	       845	vtls.c	FUNCTION_35	IF_3	IF_7
0x40016ad	      0x488b542420	            mov rdx, qword [rsp + 0x20] 	       848	vtls.c	FUNCTION_35	IF_3	CALL_6
0x40016b2	    0x488d35000000	                   lea rsi, [0x040016b9]	       848	vtls.c	FUNCTION_35	IF_3	CALL_6
0x40016b9	          0x4c89ff	                            mov rdi, r15	       848	vtls.c	FUNCTION_35	IF_3	CALL_6
0x40016bc	      0xe800000000	                          call 0x40016c1	       848	vtls.c	FUNCTION_35	IF_3	CALL_6
0x40016c1	          0x4889df	                            mov rdi, rbx	       851	vtls.c	FUNCTION_35	IF_3	CALL_7
0x40016c4	      0xe800000000	                          call 0x40016c9	       851	vtls.c	FUNCTION_35	IF_3	CALL_7
0x40016c9	        0x4c8d7001	                      lea r14, [rax + 1]	       851	vtls.c	FUNCTION_35	IF_3	CALL_7
0x40016cd	    0x488b05000000	            mov rax, qword [0x040016d4] 	       852	vtls.c	FUNCTION_35	IF_3	CALL_8
0x40016d4	          0x4c89f7	                            mov rdi, r14	       852	vtls.c	FUNCTION_35	IF_3	CALL_8
0x40016d7	            0xff10	                        call qword [rax]	       852	vtls.c	FUNCTION_35	IF_3	CALL_8
0x40016d9	          0x4885c0	                           test rax, rax	       853	vtls.c	FUNCTION_35	IF_3	IF_8
0x40016dc	          0x4889c5	                            mov rbp, rax	       852	vtls.c	FUNCTION_35	IF_3	CALL_8
0x40016df	     0xf84fb010000	                            je 0x40018e0	       853	vtls.c	FUNCTION_35	IF_3	IF_8
0x40016e5	          0x4889de	                            mov rsi, rbx	        53	string3.h	FUNCTION_64	CALL_3
0x40016e8	          0x4c89f2	                            mov rdx, r14	        53	string3.h	FUNCTION_64	CALL_3
0x40016eb	          0x4889c7	                            mov rdi, rax	        53	string3.h	FUNCTION_64	CALL_3
0x40016ee	      0xe800000000	                          call 0x40016f3	        53	string3.h	FUNCTION_64	CALL_3
0x40016f3	          0x4889eb	                            mov rbx, rbp	        53	string3.h	FUNCTION_64	CALL_3
0x40016f6	            0xeb28	                           jmp 0x4001720	        53	string3.h	FUNCTION_64	CALL_3
0x40016f8	     0xf1f84000000	                   nop dword [rax + rax]	        53	string3.h	FUNCTION_64	CALL_3
0x4001700	    0x488d35000000	                   lea rsi, [0x04001707]	       882	vtls.c	FUNCTION_35	IF_3	DO_1	IF_11	CALL_14
0x4001707	      0x41c645003b	                    mov byte [r13], 0x3b	       881	vtls.c	FUNCTION_35	IF_3	DO_1	IF_11
0x400170c	          0x4c89ef	                            mov rdi, r13	       882	vtls.c	FUNCTION_35	IF_3	DO_1	IF_11	CALL_14
0x400170f	      0xe800000000	                          call 0x4001714	       882	vtls.c	FUNCTION_35	IF_3	DO_1	IF_11	CALL_14
0x4001714	          0x4885c0	                           test rax, rax	       884	vtls.c	FUNCTION_35	IF_3	DO_1
0x4001717	          0x4889c3	                            mov rbx, rax	       882	vtls.c	FUNCTION_35	IF_3	DO_1	IF_11	CALL_14
0x400171a	     0xf84f8020000	                            je 0x4001a18	       884	vtls.c	FUNCTION_35	IF_3	DO_1
0x4001720	    0x488d35000000	                   lea rsi, [0x04001727]	       861	vtls.c	FUNCTION_35	IF_3	DO_1	CALL_11
0x4001727	          0x4889df	                            mov rdi, rbx	       861	vtls.c	FUNCTION_35	IF_3	DO_1	CALL_11
0x400172a	      0xe800000000	                          call 0x400172f	       861	vtls.c	FUNCTION_35	IF_3	DO_1	CALL_11
0x400172f	          0x4885c0	                           test rax, rax	       866	vtls.c	FUNCTION_35	IF_3	DO_1	IF_9
0x4001732	          0x4989c5	                            mov r13, rax	       861	vtls.c	FUNCTION_35	IF_3	DO_1	CALL_11
0x4001735	     0xf84cd000000	                            je 0x4001808	       866	vtls.c	FUNCTION_35	IF_3	DO_1	IF_9
0x400173b	        0x4883c308	                              add rbx, 8	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x400173f	          0xc60000	                       mov byte [rax], 0	       867	vtls.c	FUNCTION_35	IF_3	DO_1	IF_9
0x4001742	          0x4889df	                            mov rdi, rbx	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x4001745	      0xe800000000	                          call 0x400174a	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x400174a	      0x4839442418	            cmp qword [rsp + 0x18], rax 	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x400174f	            0x75af	                           jne 0x4001700	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x4001751	      0x4c8b742420	            mov r14, qword [rsp + 0x20] 	       871	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_13
0x4001756	          0x4889c2	                            mov rdx, rax	       871	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_13
0x4001759	          0x4889de	                            mov rsi, rbx	       871	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_13
0x400175c	          0x4c89f7	                            mov rdi, r14	       871	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_13
0x400175f	      0xe800000000	                          call 0x4001764	       871	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_13
0x4001764	            0x85c0	                           test eax, eax	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x4001766	            0x7598	                           jne 0x4001700	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x4001768	            0x31db	                            xor ebx, ebx	       872	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10
0x400176a	    0x660f1f440000	                    nop word [rax + rax]	       872	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10
0x4001770	          0x4c89f7	                            mov rdi, r14	       885	vtls.c	FUNCTION_35	IF_3	CALL_15
0x4001773	        0x41ff1424	                        call qword [r12]	       885	vtls.c	FUNCTION_35	IF_3	CALL_15
0x4001777	    0x48c744242000	               mov qword [rsp + 0x20], 0	       885	vtls.c	FUNCTION_35	IF_3	CALL_15
0x4001780	          0x4889ef	                            mov rdi, rbp	       886	vtls.c	FUNCTION_35	IF_3	CALL_16
0x4001783	        0x41ff1424	                        call qword [r12]	       886	vtls.c	FUNCTION_35	IF_3	CALL_16
0x4001787	            0x89d8	                            mov eax, ebx	       887	vtls.c	FUNCTION_35	IF_3
0x4001789	      0xe957feffff	                           jmp 0x40015e5	       887	vtls.c	FUNCTION_35	IF_3
0x400178e	            0x6690	                                     nop	       887	vtls.c	FUNCTION_35	IF_3
0x4001790	            0x31c0	                            xor eax, eax	       819	vtls.c	FUNCTION_35	IF_1
0x4001792	      0xe94efeffff	                           jmp 0x40015e5	       819	vtls.c	FUNCTION_35	IF_1
0x4001797	    0x660f1f840000	                    nop word [rax + rax]	       819	vtls.c	FUNCTION_35	IF_1
0x40017a0	    0x488d35000000	                   lea rsi, [0x040017a7]	       890	vtls.c	FUNCTION_35	CALL_17
0x40017a7	          0x4889df	                            mov rdi, rbx	       890	vtls.c	FUNCTION_35	CALL_17
0x40017aa	      0xe800000000	                          call 0x40017af	       890	vtls.c	FUNCTION_35	CALL_17
0x40017af	          0x4885c0	                           test rax, rax	       891	vtls.c	FUNCTION_35	IF_12
0x40017b2	          0x4989c5	                            mov r13, rax	       890	vtls.c	FUNCTION_35	CALL_17
0x40017b5	     0xf8425feffff	                            je 0x40015e0	       891	vtls.c	FUNCTION_35	IF_12
0x40017bb	            0x31f6	                            xor esi, esi	       896	vtls.c	FUNCTION_35	DO_2	IF_13	CALL_18
0x40017bd	      0xba02000000	                              mov edx, 2	       896	vtls.c	FUNCTION_35	DO_2	IF_13	CALL_18
0x40017c2	          0x4889c7	                            mov rdi, rax	       896	vtls.c	FUNCTION_35	DO_2	IF_13	CALL_18
0x40017c5	      0xe800000000	                          call 0x40017ca	       896	vtls.c	FUNCTION_35	DO_2	IF_13	CALL_18
0x40017ca	            0x85c0	                           test eax, eax	       896	vtls.c	FUNCTION_35	DO_2	IF_13	CALL_18
0x40017cc	            0x746a	                            je 0x4001838	       896	vtls.c	FUNCTION_35	DO_2	IF_13	CALL_18
0x40017ce	    0x4c8b25000000	            mov r12, qword [0x040017d5] 	       896	vtls.c	FUNCTION_35	DO_2	IF_13	CALL_18
0x40017d5	      0xbb5a000000	                           mov ebx, 0x5a	       811	vtls.c	FUNCTION_35
0x40017da	          0x4531ff	                          xor r15d, r15d	       807	vtls.c	FUNCTION_35
0x40017dd	          0x4c89ff	                            mov rdi, r15	       949	vtls.c	FUNCTION_35	CALL_27
0x40017e0	        0x41ff1424	                        call qword [r12]	       949	vtls.c	FUNCTION_35	CALL_27
0x40017e4	      0x488b7c2410	            mov rdi, qword [rsp + 0x10] 	       950	vtls.c	FUNCTION_35	CALL_28
0x40017e9	        0x41ff1424	                        call qword [r12]	       950	vtls.c	FUNCTION_35	CALL_28
0x40017ed	          0x4c89ef	                            mov rdi, r13	       951	vtls.c	FUNCTION_35	CALL_29
0x40017f0	    0x48c744241000	               mov qword [rsp + 0x10], 0	       950	vtls.c	FUNCTION_35	CALL_28
0x40017f9	      0xe800000000	                          call 0x40017fe	       951	vtls.c	FUNCTION_35	CALL_29
0x40017fe	            0x89d8	                            mov eax, ebx	       953	vtls.c	FUNCTION_35
0x4001800	      0xe9e0fdffff	                           jmp 0x40015e5	       953	vtls.c	FUNCTION_35
0x4001805	           0xf1f00	                         nop dword [rax]	       953	vtls.c	FUNCTION_35
0x4001808	        0x4883c308	                              add rbx, 8	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x400180c	          0x4889df	                            mov rdi, rbx	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x400180f	      0xe800000000	                          call 0x4001814	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x4001814	      0x483b442418	            cmp rax, qword [rsp + 0x18] 	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x4001819	      0x4c8b6c2420	            mov r13, qword [rsp + 0x20] 	       871	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_13
0x400181e	     0xf8496000000	                            je 0x40018ba	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x4001824	          0x4d89ee	                            mov r14, r13	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x4001827	      0xbb5a000000	                           mov ebx, 0x5a	       811	vtls.c	FUNCTION_35
0x400182c	      0xe93fffffff	                           jmp 0x4001770	       811	vtls.c	FUNCTION_35
0x4001831	     0xf1f80000000	                         nop dword [rax]	       811	vtls.c	FUNCTION_35
0x4001838	          0x4c89ef	                            mov rdi, r13	       898	vtls.c	FUNCTION_35	DO_2	CALL_19
0x400183b	      0xe800000000	                          call 0x4001840	       898	vtls.c	FUNCTION_35	DO_2	CALL_19
0x4001840	            0x31d2	                            xor edx, edx	       899	vtls.c	FUNCTION_35	DO_2	IF_14	CALL_20
0x4001842	            0x31f6	                            xor esi, esi	       899	vtls.c	FUNCTION_35	DO_2	IF_14	CALL_20
0x4001844	          0x4c89ef	                            mov rdi, r13	       899	vtls.c	FUNCTION_35	DO_2	IF_14	CALL_20
0x4001847	          0x4889c3	                            mov rbx, rax	       898	vtls.c	FUNCTION_35	DO_2	CALL_19
0x400184a	      0xe800000000	                          call 0x400184f	       899	vtls.c	FUNCTION_35	DO_2	IF_14	CALL_20
0x400184f	            0x85c0	                           test eax, eax	       899	vtls.c	FUNCTION_35	DO_2	IF_14	CALL_20
0x4001851	     0xf8577ffffff	                           jne 0x40017ce	       899	vtls.c	FUNCTION_35	DO_2	IF_14	CALL_20
0x4001857	    0x4881fb000010	                       cmp rbx, 0x100000	       901	vtls.c	FUNCTION_35	DO_2	IF_15
0x400185e	     0xf876affffff	                            ja 0x40017ce	       901	vtls.c	FUNCTION_35	DO_2	IF_15
0x4001864	          0x4889df	                            mov rdi, rbx	       908	vtls.c	FUNCTION_35	DO_2	CALL_21
0x4001867	      0xe800000000	                          call 0x400186c	       908	vtls.c	FUNCTION_35	DO_2	CALL_21
0x400186c	          0x4939c6	                            cmp r14, rax	       909	vtls.c	FUNCTION_35	DO_2	IF_16
0x400186f	          0x4889c3	                            mov rbx, rax	       908	vtls.c	FUNCTION_35	DO_2	CALL_21
0x4001872	     0xf8756ffffff	                            ja 0x40017ce	       909	vtls.c	FUNCTION_35	DO_2	IF_16
0x4001878	        0x488d7801	                      lea rdi, [rax + 1]	       916	vtls.c	FUNCTION_35	DO_2	CALL_22
0x400187c	    0x488b05000000	            mov rax, qword [0x04001883] 	       916	vtls.c	FUNCTION_35	DO_2	CALL_22
0x4001883	            0xff10	                        call qword [rax]	       916	vtls.c	FUNCTION_35	DO_2	CALL_22
0x4001885	          0x4885c0	                           test rax, rax	       917	vtls.c	FUNCTION_35	DO_2	IF_17
0x4001888	          0x4989c7	                            mov r15, rax	       916	vtls.c	FUNCTION_35	DO_2	CALL_22
0x400188b	     0xf843dffffff	                            je 0x40017ce	       917	vtls.c	FUNCTION_35	DO_2	IF_17
0x4001891	          0x4c89e9	                            mov rcx, r13	       295	stdio2.h	FUNCTION_90	CALL_9
0x4001894	      0xba01000000	                              mov edx, 1	       295	stdio2.h	FUNCTION_90	CALL_9
0x4001899	          0x4889de	                            mov rsi, rbx	       295	stdio2.h	FUNCTION_90	CALL_9
0x400189c	          0x4889c7	                            mov rdi, rax	       295	stdio2.h	FUNCTION_90	CALL_9
0x400189f	      0xe800000000	                          call 0x40018a4	       295	stdio2.h	FUNCTION_90	CALL_9
0x40018a4	          0x83e801	                              sub eax, 1	       921	vtls.c	FUNCTION_35	DO_2	IF_18	CALL_23
0x40018a7	            0x744f	                            je 0x40018f8	       921	vtls.c	FUNCTION_35	DO_2	IF_18	CALL_23
0x40018a9	      0xbb5a000000	                           mov ebx, 0x5a	       811	vtls.c	FUNCTION_35
0x40018ae	    0x4c8b25000000	            mov r12, qword [0x040018b5] 	       811	vtls.c	FUNCTION_35
0x40018b5	      0xe923ffffff	                           jmp 0x40017dd	       811	vtls.c	FUNCTION_35
0x40018ba	          0x4889c2	                            mov rdx, rax	       871	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_13
0x40018bd	          0x4889de	                            mov rsi, rbx	       871	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_13
0x40018c0	          0x4c89ef	                            mov rdi, r13	       871	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_13
0x40018c3	      0xe800000000	                          call 0x40018c8	       871	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_13
0x40018c8	            0x85c0	                           test eax, eax	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x40018ca	          0x4d89ee	                            mov r14, r13	       871	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_13
0x40018cd	     0xf8551ffffff	                           jne 0x4001824	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x40018d3	      0xe990feffff	                           jmp 0x4001768	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x40018d8	     0xf1f84000000	                   nop dword [rax + rax]	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x40018e0	      0x488b7c2420	            mov rdi, qword [rsp + 0x20] 	       854	vtls.c	FUNCTION_35	IF_3	IF_8	CALL_9
0x40018e5	        0x41ff1424	                        call qword [r12]	       854	vtls.c	FUNCTION_35	IF_3	IF_8	CALL_9
0x40018e9	      0xb81b000000	                           mov eax, 0x1b	       855	vtls.c	FUNCTION_35	IF_3	IF_8
0x40018ee	      0xe9f2fcffff	                           jmp 0x40015e5	       855	vtls.c	FUNCTION_35	IF_3	IF_8
0x40018f3	      0xe800000000	                          call 0x40018f8	       954	vtls.c	FUNCTION_35
0x40018f8	          0x4939de	                            cmp r14, rbx	       925	vtls.c	FUNCTION_35	DO_2	IF_19
0x40018fb	            0x7520	                           jne 0x400191d	       925	vtls.c	FUNCTION_35	DO_2	IF_19
0x40018fd	          0x4c89f2	                            mov rdx, r14	       926	vtls.c	FUNCTION_35	DO_2	IF_19	IF_20	CALL_24
0x4001900	          0x4c89fe	                            mov rsi, r15	       926	vtls.c	FUNCTION_35	DO_2	IF_19	IF_20	CALL_24
0x4001903	          0x4889ef	                            mov rdi, rbp	       926	vtls.c	FUNCTION_35	DO_2	IF_19	IF_20	CALL_24
0x4001906	      0xe800000000	                          call 0x400190b	       926	vtls.c	FUNCTION_35	DO_2	IF_19	IF_20	CALL_24
0x400190b	            0x85c0	                           test eax, eax	       926	vtls.c	FUNCTION_35	DO_2	IF_19	IF_20	CALL_24
0x400190d	            0x759a	                           jne 0x40018a9	       926	vtls.c	FUNCTION_35	DO_2	IF_19	IF_20	CALL_24
0x400190f	            0x31db	                            xor ebx, ebx	       927	vtls.c	FUNCTION_35	DO_2	IF_19	IF_20
0x4001911	    0x4c8b25000000	            mov r12, qword [0x04001918] 	       927	vtls.c	FUNCTION_35	DO_2	IF_19	IF_20
0x4001918	      0xe9c0feffff	                           jmp 0x40017dd	       927	vtls.c	FUNCTION_35	DO_2	IF_19	IF_20
0x400191d	    0x488d35000000	                   lea rsi, [0x04001924]	       755	vtls.c	FUNCTION_34	CALL_1
0x4001924	      0x41c6041f00	                 mov byte [r15 + rbx], 0	       935	vtls.c	FUNCTION_35	DO_2
0x4001929	          0x4c89ff	                            mov rdi, r15	       755	vtls.c	FUNCTION_34	CALL_1
0x400192c	      0xe800000000	                          call 0x4001931	       755	vtls.c	FUNCTION_34	CALL_1
0x4001931	          0x4885c0	                           test rax, rax	       756	vtls.c	FUNCTION_34	IF_2
0x4001934	     0xf846fffffff	                            je 0x40018a9	       756	vtls.c	FUNCTION_34	IF_2
0x400193a	          0x4889c3	                            mov rbx, rax	       761	vtls.c	FUNCTION_34	IF_3
0x400193d	          0x4c29fb	                            sub rbx, r15	       761	vtls.c	FUNCTION_34	IF_3
0x4001940	            0x740a	                            je 0x400194c	       761	vtls.c	FUNCTION_34	IF_3
0x4001942	        0x8078ff0a	                 cmp byte [rax - 1], 0xa	       761	vtls.c	FUNCTION_34	IF_3
0x4001946	     0xf855dffffff	                           jne 0x40018a9	       761	vtls.c	FUNCTION_34	IF_3
0x400194c	        0x4883c31a	                           add rbx, 0x1a	       765	vtls.c	FUNCTION_34
0x4001950	    0x488d35000000	                   lea rsi, [0x04001957]	       768	vtls.c	FUNCTION_34	CALL_2
0x4001957	        0x498d3c1f	                    lea rdi, [r15 + rbx]	       768	vtls.c	FUNCTION_34	CALL_2
0x400195b	      0xe800000000	                          call 0x4001960	       768	vtls.c	FUNCTION_34	CALL_2
0x4001960	          0x4885c0	                           test rax, rax	       769	vtls.c	FUNCTION_34	IF_4
0x4001963	     0xf8440ffffff	                            je 0x40018a9	       769	vtls.c	FUNCTION_34	IF_4
0x4001969	          0x4c29f8	                            sub rax, r15	       772	vtls.c	FUNCTION_34
0x400196c	          0x4989c4	                            mov r12, rax	       772	vtls.c	FUNCTION_34
0x400196f	          0x4829d8	                            sub rax, rbx	       774	vtls.c	FUNCTION_34	CALL_3
0x4001972	        0x488d7801	                      lea rdi, [rax + 1]	       774	vtls.c	FUNCTION_34	CALL_3
0x4001976	    0x488b05000000	            mov rax, qword [0x0400197d] 	       774	vtls.c	FUNCTION_34	CALL_3
0x400197d	            0xff10	                        call qword [rax]	       774	vtls.c	FUNCTION_34	CALL_3
0x400197f	          0x4885c0	                           test rax, rax	       775	vtls.c	FUNCTION_34	IF_5
0x4001982	          0x4889c1	                            mov rcx, rax	       774	vtls.c	FUNCTION_34	CALL_3
0x4001985	     0xf841effffff	                            je 0x40018a9	       775	vtls.c	FUNCTION_34	IF_5
0x400198b	            0x31c0	                            xor eax, eax	       775	vtls.c	FUNCTION_34	IF_5
0x400198d	            0xeb1d	                           jmp 0x40019ac	       775	vtls.c	FUNCTION_34	IF_5
0x400198f	      0x410fb6341f	             movzx esi, byte [r15 + rbx]	       784	vtls.c	FUNCTION_34	WHILE_1	IF_6
0x4001994	        0x4080fe0a	                            cmp sil, 0xa	       784	vtls.c	FUNCTION_34	WHILE_1	IF_6
0x4001998	            0x740e	                            je 0x40019a8	       784	vtls.c	FUNCTION_34	WHILE_1	IF_6
0x400199a	        0x4080fe0d	                            cmp sil, 0xd	       784	vtls.c	FUNCTION_34	WHILE_1	IF_6
0x400199e	            0x7408	                            je 0x40019a8	       784	vtls.c	FUNCTION_34	WHILE_1	IF_6
0x40019a0	        0x40883401	               mov byte [rcx + rax], sil	       785	vtls.c	FUNCTION_34	WHILE_1	IF_6
0x40019a4	        0x4883c001	                              add rax, 1	       785	vtls.c	FUNCTION_34	WHILE_1	IF_6
0x40019a8	        0x4883c301	                              add rbx, 1	       786	vtls.c	FUNCTION_34	WHILE_1
0x40019ac	          0x4939dc	                            cmp r12, rbx	       783	vtls.c	FUNCTION_34	WHILE_1
0x40019af	            0x77de	                            ja 0x400198f	       783	vtls.c	FUNCTION_34	WHILE_1
0x40019b1	      0x488d542420	                   lea rdx, [rsp + 0x20]	       791	vtls.c	FUNCTION_34	CALL_4
0x40019b6	      0x488d742410	                   lea rsi, [rsp + 0x10]	       791	vtls.c	FUNCTION_34	CALL_4
0x40019bb	          0x4889cf	                            mov rdi, rcx	       791	vtls.c	FUNCTION_34	CALL_4
0x40019be	        0xc6040100	                 mov byte [rcx + rax], 0	       789	vtls.c	FUNCTION_34
0x40019c2	      0x48894c2408	                mov qword [rsp + 8], rcx	       791	vtls.c	FUNCTION_34	CALL_4
0x40019c7	      0xe800000000	                          call 0x40019cc	       791	vtls.c	FUNCTION_34	CALL_4
0x40019cc	      0x488b4c2408	                mov rcx, qword [rsp + 8]	       793	vtls.c	FUNCTION_34	CALL_5
0x40019d1	    0x4c8b25000000	            mov r12, qword [0x040019d8] 	       793	vtls.c	FUNCTION_34	CALL_5
0x40019d8	            0x89c3	                            mov ebx, eax	       791	vtls.c	FUNCTION_34	CALL_4
0x40019da	          0x4889cf	                            mov rdi, rcx	       793	vtls.c	FUNCTION_34	CALL_5
0x40019dd	        0x41ff1424	                        call qword [r12]	       793	vtls.c	FUNCTION_34	CALL_5
0x40019e1	            0x85db	                           test ebx, ebx	       938	vtls.c	FUNCTION_35	DO_2	IF_21
0x40019e3	      0xbb5a000000	                           mov ebx, 0x5a	       811	vtls.c	FUNCTION_35
0x40019e8	     0xf85effdffff	                           jne 0x40017dd	       938	vtls.c	FUNCTION_35	DO_2	IF_21
0x40019ee	      0x4c3b742420	            cmp r14, qword [rsp + 0x20] 	       945	vtls.c	FUNCTION_35	DO_2	IF_22	CALL_26
0x40019f3	     0xf85e4fdffff	                           jne 0x40017dd	       945	vtls.c	FUNCTION_35	DO_2	IF_22	CALL_26
0x40019f9	      0x488b742410	            mov rsi, qword [rsp + 0x10] 	       945	vtls.c	FUNCTION_35	DO_2	IF_22	CALL_26
0x40019fe	          0x4c89f2	                            mov rdx, r14	       945	vtls.c	FUNCTION_35	DO_2	IF_22	CALL_26
0x4001a01	          0x4889ef	                            mov rdi, rbp	       945	vtls.c	FUNCTION_35	DO_2	IF_22	CALL_26
0x4001a04	      0xe800000000	                          call 0x4001a09	       945	vtls.c	FUNCTION_35	DO_2	IF_22	CALL_26
0x4001a09	          0x83f801	                              cmp eax, 1	       811	vtls.c	FUNCTION_35
0x4001a0c	            0x19db	                            sbb ebx, ebx	       811	vtls.c	FUNCTION_35
0x4001a0e	            0xf7d3	                                 not ebx	       811	vtls.c	FUNCTION_35
0x4001a10	          0x83e35a	                           and ebx, 0x5a	       811	vtls.c	FUNCTION_35
0x4001a13	      0xe9c5fdffff	                           jmp 0x40017dd	       811	vtls.c	FUNCTION_35
0x4001a18	      0x4c8b742420	            mov r14, qword [rsp + 0x20] 	       811	vtls.c	FUNCTION_35
0x4001a1d	      0xbb5a000000	                           mov ebx, 0x5a	       811	vtls.c	FUNCTION_35
0x4001a22	      0xe949fdffff	                           jmp 0x4001770	       811	vtls.c	FUNCTION_35
Curl_none_set_engine	WHILE,0:SWITCH,0:ELSE,0:DO,0:FOR,0:IF,0:functions,0:CALL,0	2
0x40000a0	      0xb804000000	                              mov eax, 4	      1055	vtls.c	FUNCTION_49
0x40000a5	              0xc3	                                     ret	      1055	vtls.c	FUNCTION_49
Curl_ssl_sessionid_unlock	WHILE,0:SWITCH,0:ELSE,0:DO,0:FOR,0:IF,1:functions,0:CALL,1	10
0x4000ba0	          0x488b3f	                    mov rdi, qword [rdi]	       293	vtls.c	FUNCTION_12	IF_1
0x4000ba3	    0x488b87b80000	            mov rax, qword [rdi + 0xb8] 	       293	vtls.c	FUNCTION_12	IF_1
0x4000baa	          0x4885c0	                           test rax, rax	       293	vtls.c	FUNCTION_12	IF_1
0x4000bad	            0x7405	                            je 0x4000bb4	       293	vtls.c	FUNCTION_12	IF_1
0x4000baf	          0xf60010	                   test byte [rax], 0x10	       293	vtls.c	FUNCTION_12	IF_1
0x4000bb2	            0x750c	                           jne 0x4000bc0	       293	vtls.c	FUNCTION_12	IF_1
0x4000bb4	            0xf3c3	                                     ret	       293	vtls.c	FUNCTION_12	IF_1
0x4000bb6	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       293	vtls.c	FUNCTION_12	IF_1
0x4000bc0	      0xbe04000000	                              mov esi, 4	       294	vtls.c	FUNCTION_12	CALL_1
0x4000bc5	      0xe900000000	                           jmp 0x4000bca	       294	vtls.c	FUNCTION_12	CALL_1
Curl_multissl_version	WHILE,0:SWITCH,0:ELSE,1:DO,0:FOR,1:IF,5:functions,0:CALL,3	79
0x40000e0	            0x4157	                                push r15	      1229	vtls.c	FUNCTION_60
0x40000e2	            0x4156	                                push r14	      1229	vtls.c	FUNCTION_60
0x40000e4	    0x488d15000000	                   lea rdx, [0x040000eb]	      1235	vtls.c	FUNCTION_60
0x40000eb	            0x4155	                                push r13	      1229	vtls.c	FUNCTION_60
0x40000ed	            0x4154	                                push r12	      1229	vtls.c	FUNCTION_60
0x40000ef	          0x4989f5	                            mov r13, rsi	      1229	vtls.c	FUNCTION_60
0x40000f2	              0x55	                                push rbp	      1229	vtls.c	FUNCTION_60
0x40000f3	              0x53	                                push rbx	      1229	vtls.c	FUNCTION_60
0x40000f4	          0x4889fd	                            mov rbp, rdi	      1229	vtls.c	FUNCTION_60
0x40000f7	        0x4883ec08	                              sub rsp, 8	      1229	vtls.c	FUNCTION_60
0x40000fb	    0x488b05000000	            mov rax, qword [0x04000102] 	      1235	vtls.c	FUNCTION_60
0x4000102	    0x488b1d000000	            mov rbx, qword [0x04000109] 	      1235	vtls.c	FUNCTION_60
0x4000109	          0x4839d0	                            cmp rax, rdx	      1235	vtls.c	FUNCTION_60
0x400010c	    0x480f44050000	           cmove rax, qword [0x04000114]	      1235	vtls.c	FUNCTION_60
0x4000114	    0x483b05000000	            cmp rax, qword [0x0400011b] 	      1237	vtls.c	FUNCTION_60	IF_1
0x400011b	     0xf848f000000	                            je 0x40001b0	      1237	vtls.c	FUNCTION_60	IF_1
0x4000121	    0x488b15000000	            mov rdx, qword [0x04000128] 	      1243	vtls.c	FUNCTION_60	IF_1	FOR_1
0x4000128	            0x31db	                            xor ebx, ebx	      1243	vtls.c	FUNCTION_60	IF_1	FOR_1
0x400012a	    0x488905000000	            mov qword [0x04000131], rax 	      1241	vtls.c	FUNCTION_60	IF_1
0x4000131	    0x488d0d000000	                   lea rcx, [0x04000138]	      1238	vtls.c	FUNCTION_60	IF_1
0x4000138	          0x4885d2	                           test rdx, rdx	      1243	vtls.c	FUNCTION_60	IF_1	FOR_1
0x400013b	            0x7469	                            je 0x40001a6	      1243	vtls.c	FUNCTION_60	IF_1	FOR_1
0x400013d	          0x4839c2	                            cmp rdx, rax	      1246	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_3
0x4000140	    0x488d1d000000	                   lea rbx, [0x04000147]	      1246	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_3
0x4000147	    0x4c8d3d000000	                   lea r15, [0x0400014e]	      1246	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_3
0x400014e	          0x4989cc	                            mov r12, rcx	      1243	vtls.c	FUNCTION_60	IF_1	FOR_1
0x4000151	          0x4889ce	                            mov rsi, rcx	      1243	vtls.c	FUNCTION_60	IF_1	FOR_1
0x4000154	            0x7443	                            je 0x4000199	      1246	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_3
0x4000156	        0x4c8d7601	                      lea r14, [rsi + 1]	      1247	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_3
0x400015a	          0xc60628	                    mov byte [rsi], 0x28	      1247	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_3
0x400015d	          0x4889de	                            mov rsi, rbx	      1248	vtls.c	FUNCTION_60	IF_1	FOR_1	CALL_1
0x4000160	          0x4c89f7	                            mov rdi, r14	      1248	vtls.c	FUNCTION_60	IF_1	FOR_1	CALL_1
0x4000163	          0x4c29f6	                            sub rsi, r14	      1248	vtls.c	FUNCTION_60	IF_1	FOR_1	CALL_1
0x4000166	          0xff5230	                 call qword [rdx + 0x30]	      1248	vtls.c	FUNCTION_60	IF_1	FOR_1	CALL_1
0x4000169	        0x498d3c06	                    lea rdi, [r14 + rax]	      1248	vtls.c	FUNCTION_60	IF_1	FOR_1	CALL_1
0x400016d	    0x488b05000000	            mov rax, qword [0x04000174] 	      1249	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_4
0x4000174	          0x493907	                    cmp qword [r15], rax	      1249	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_4
0x4000177	            0x747f	                            je 0x40001f8	      1249	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_4
0x4000179	        0x488d4f01	                      lea rcx, [rdi + 1]	      1250	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_4
0x400017d	          0xc60729	                    mov byte [rdi], 0x29	      1250	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_4
0x4000180	        0x498b5708	                mov rdx, qword [r15 + 8]	      1243	vtls.c	FUNCTION_60	IF_1	FOR_1
0x4000184	          0x4885d2	                           test rdx, rdx	      1243	vtls.c	FUNCTION_60	IF_1	FOR_1
0x4000187	            0x7417	                            je 0x40001a0	      1243	vtls.c	FUNCTION_60	IF_1	FOR_1
0x4000189	        0x4983c708	                              add r15, 8	      1243	vtls.c	FUNCTION_60	IF_1	FOR_1
0x400018d	          0x4839c2	                            cmp rdx, rax	      1246	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_3
0x4000190	        0x488d7101	                      lea rsi, [rcx + 1]	      1245	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_2
0x4000194	          0xc60120	                    mov byte [rcx], 0x20	      1245	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_2
0x4000197	            0x75bd	                           jne 0x4000156	      1246	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_3
0x4000199	          0x4989f6	                            mov r14, rsi	      1246	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_3
0x400019c	            0xebbf	                           jmp 0x400015d	      1246	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_3
0x400019e	            0x6690	                                     nop	      1246	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_3
0x40001a0	          0x4889cb	                            mov rbx, rcx	      1246	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_3
0x40001a3	          0x4c29e3	                            sub rbx, r12	      1246	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_3
0x40001a6	          0xc60100	                       mov byte [rcx], 0	      1252	vtls.c	FUNCTION_60	IF_1
0x40001a9	    0x48891d000000	            mov qword [0x040001b0], rbx 	      1253	vtls.c	FUNCTION_60	IF_1
0x40001b0	          0x4c39eb	                            cmp rbx, r13	      1256	vtls.c	FUNCTION_60	IF_5
0x40001b3	            0x772b	                            ja 0x40001e0	      1256	vtls.c	FUNCTION_60	IF_5
0x40001b5	        0x498d55ff	                      lea rdx, [r13 - 1]	      1259	vtls.c	FUNCTION_60	ELSE_1	CALL_3
0x40001b9	    0x488d35000000	                   lea rsi, [0x040001c0]	        53	string3.h	FUNCTION_64	CALL_3
0x40001c0	          0x4889ef	                            mov rdi, rbp	        53	string3.h	FUNCTION_64	CALL_3
0x40001c3	      0xe800000000	                          call 0x40001c8	        53	string3.h	FUNCTION_64	CALL_3
0x40001c8	    0x42c6442dff00	             mov byte [rbp + r13 - 1], 0	      1260	vtls.c	FUNCTION_60	ELSE_1
0x40001ce	        0x4883c408	                              add rsp, 8	      1264	vtls.c	FUNCTION_60
0x40001d2	          0x4889d8	                            mov rax, rbx	      1264	vtls.c	FUNCTION_60
0x40001d5	              0x5b	                                 pop rbx	      1264	vtls.c	FUNCTION_60
0x40001d6	              0x5d	                                 pop rbp	      1264	vtls.c	FUNCTION_60
0x40001d7	            0x415c	                                 pop r12	      1264	vtls.c	FUNCTION_60
0x40001d9	            0x415d	                                 pop r13	      1264	vtls.c	FUNCTION_60
0x40001db	            0x415e	                                 pop r14	      1264	vtls.c	FUNCTION_60
0x40001dd	            0x415f	                                 pop r15	      1264	vtls.c	FUNCTION_60
0x40001df	              0xc3	                                     ret	      1264	vtls.c	FUNCTION_60
0x40001e0	        0x488d5301	                      lea rdx, [rbx + 1]	        53	string3.h	FUNCTION_64	CALL_3
0x40001e4	    0x488d35000000	                   lea rsi, [0x040001eb]	        53	string3.h	FUNCTION_64	CALL_3
0x40001eb	          0x4889ef	                            mov rdi, rbp	        53	string3.h	FUNCTION_64	CALL_3
0x40001ee	      0xe800000000	                          call 0x40001f3	        53	string3.h	FUNCTION_64	CALL_3
0x40001f3	            0xebd9	                           jmp 0x40001ce	        53	string3.h	FUNCTION_64	CALL_3
0x40001f5	           0xf1f00	                         nop dword [rax]	        53	string3.h	FUNCTION_64	CALL_3
0x40001f8	          0x4889f9	                            mov rcx, rdi	      1248	vtls.c	FUNCTION_60	IF_1	FOR_1	CALL_1
0x40001fb	            0xeb83	                           jmp 0x4000180	      1248	vtls.c	FUNCTION_60	IF_1	FOR_1	CALL_1
Curl_ssl_init	WHILE,0:SWITCH,0:ELSE,0:DO,0:FOR,0:IF,1:functions,0:CALL,1	9
0x40009f0	    0x803d00000000	                cmp byte [0x040009f7], 0	       164	vtls.c	FUNCTION_5	IF_1
0x40009f7	            0x7407	                            je 0x4000a00	       164	vtls.c	FUNCTION_5	IF_1
0x40009f9	      0xb801000000	                              mov eax, 1	       169	vtls.c	FUNCTION_5
0x40009fe	              0xc3	                                     ret	       169	vtls.c	FUNCTION_5
0x40009ff	              0x90	                                     nop	       169	vtls.c	FUNCTION_5
0x4000a00	    0x488b05000000	            mov rax, qword [0x04000a07] 	       168	vtls.c	FUNCTION_5	CALL_1
0x4000a07	    0xc60500000000	                mov byte [0x04000a0e], 1	       166	vtls.c	FUNCTION_5
0x4000a0e	        0x488b4020	            mov rax, qword [rax + 0x20] 	       168	vtls.c	FUNCTION_5	CALL_1
0x4000a12	            0xffe0	                                 jmp rax	       168	vtls.c	FUNCTION_5	CALL_1
Curl_clone_primary_ssl_config	WHILE,0:SWITCH,0:ELSE,0:DO,0:FOR,0:IF,0:functions,0:CALL,0	104
0x4000780	              0x55	                                push rbp	       108	vtls.c	FUNCTION_2
0x4000781	              0x53	                                push rbx	       108	vtls.c	FUNCTION_2
0x4000782	          0x4889fb	                            mov rbx, rdi	       108	vtls.c	FUNCTION_2
0x4000785	          0x4889f5	                            mov rbp, rsi	       108	vtls.c	FUNCTION_2
0x4000788	        0x4883ec08	                              sub rsp, 8	       108	vtls.c	FUNCTION_2
0x400078c	          0x488b07	                    mov rax, qword [rdi]	       109	vtls.c	FUNCTION_2
0x400078f	          0x488906	                    mov qword [rsi], rax	       109	vtls.c	FUNCTION_2
0x4000792	        0x488b4708	                mov rax, qword [rdi + 8]	       110	vtls.c	FUNCTION_2
0x4000796	        0x48894608	                mov qword [rsi + 8], rax	       110	vtls.c	FUNCTION_2
0x400079a	         0xfb64710	           movzx eax, byte [rdi + 0x10] 	       111	vtls.c	FUNCTION_2
0x400079e	          0x884610	               mov byte [rsi + 0x10], al	       111	vtls.c	FUNCTION_2
0x40007a1	         0xfb64711	           movzx eax, byte [rdi + 0x11] 	       112	vtls.c	FUNCTION_2
0x40007a5	          0x884611	               mov byte [rsi + 0x11], al	       112	vtls.c	FUNCTION_2
0x40007a8	         0xfb64712	           movzx eax, byte [rdi + 0x12] 	       113	vtls.c	FUNCTION_2
0x40007ac	          0x884612	               mov byte [rsi + 0x12], al	       113	vtls.c	FUNCTION_2
0x40007af	         0xfb64713	           movzx eax, byte [rdi + 0x13] 	       114	vtls.c	FUNCTION_2
0x40007b3	        0x488b7f18	            mov rdi, qword [rdi + 0x18] 	       116	vtls.c	FUNCTION_2
0x40007b7	          0x4885ff	                           test rdi, rdi	       116	vtls.c	FUNCTION_2
0x40007ba	          0x884613	               mov byte [rsi + 0x13], al	       114	vtls.c	FUNCTION_2
0x40007bd	     0xf84e5000000	                            je 0x40008a8	       116	vtls.c	FUNCTION_2
0x40007c3	    0x488b05000000	            mov rax, qword [0x040007ca] 	       116	vtls.c	FUNCTION_2
0x40007ca	            0xff10	                        call qword [rax]	       116	vtls.c	FUNCTION_2
0x40007cc	          0x4885c0	                           test rax, rax	       116	vtls.c	FUNCTION_2
0x40007cf	        0x48894518	            mov qword [rbp + 0x18], rax 	       116	vtls.c	FUNCTION_2
0x40007d3	     0xf84bf000000	                            je 0x4000898	       116	vtls.c	FUNCTION_2
0x40007d9	        0x488b7b20	            mov rdi, qword [rbx + 0x20] 	       117	vtls.c	FUNCTION_2
0x40007dd	          0x4885ff	                           test rdi, rdi	       117	vtls.c	FUNCTION_2
0x40007e0	     0xf84d7000000	                            je 0x40008bd	       117	vtls.c	FUNCTION_2
0x40007e6	    0x488b05000000	            mov rax, qword [0x040007ed] 	       117	vtls.c	FUNCTION_2
0x40007ed	            0xff10	                        call qword [rax]	       117	vtls.c	FUNCTION_2
0x40007ef	          0x4885c0	                           test rax, rax	       117	vtls.c	FUNCTION_2
0x40007f2	        0x48894520	            mov qword [rbp + 0x20], rax 	       117	vtls.c	FUNCTION_2
0x40007f6	     0xf849c000000	                            je 0x4000898	       117	vtls.c	FUNCTION_2
0x40007fc	        0x488b7b28	            mov rdi, qword [rbx + 0x28] 	       118	vtls.c	FUNCTION_2
0x4000800	          0x4885ff	                           test rdi, rdi	       118	vtls.c	FUNCTION_2
0x4000803	     0xf84c9000000	                            je 0x40008d2	       118	vtls.c	FUNCTION_2
0x4000809	    0x488b05000000	            mov rax, qword [0x04000810] 	       118	vtls.c	FUNCTION_2
0x4000810	            0xff10	                        call qword [rax]	       118	vtls.c	FUNCTION_2
0x4000812	          0x4885c0	                           test rax, rax	       118	vtls.c	FUNCTION_2
0x4000815	        0x48894528	            mov qword [rbp + 0x28], rax 	       118	vtls.c	FUNCTION_2
0x4000819	            0x747d	                            je 0x4000898	       118	vtls.c	FUNCTION_2
0x400081b	        0x488b7b30	            mov rdi, qword [rbx + 0x30] 	       119	vtls.c	FUNCTION_2
0x400081f	          0x4885ff	                           test rdi, rdi	       119	vtls.c	FUNCTION_2
0x4000822	     0xf84bf000000	                            je 0x40008e7	       119	vtls.c	FUNCTION_2
0x4000828	    0x488b05000000	            mov rax, qword [0x0400082f] 	       119	vtls.c	FUNCTION_2
0x400082f	            0xff10	                        call qword [rax]	       119	vtls.c	FUNCTION_2
0x4000831	          0x4885c0	                           test rax, rax	       119	vtls.c	FUNCTION_2
0x4000834	        0x48894530	            mov qword [rbp + 0x30], rax 	       119	vtls.c	FUNCTION_2
0x4000838	            0x745e	                            je 0x4000898	       119	vtls.c	FUNCTION_2
0x400083a	        0x488b7b38	            mov rdi, qword [rbx + 0x38] 	       120	vtls.c	FUNCTION_2
0x400083e	          0x4885ff	                           test rdi, rdi	       120	vtls.c	FUNCTION_2
0x4000841	     0xf84b5000000	                            je 0x40008fc	       120	vtls.c	FUNCTION_2
0x4000847	    0x488b05000000	            mov rax, qword [0x0400084e] 	       120	vtls.c	FUNCTION_2
0x400084e	            0xff10	                        call qword [rax]	       120	vtls.c	FUNCTION_2
0x4000850	          0x4885c0	                           test rax, rax	       120	vtls.c	FUNCTION_2
0x4000853	        0x48894538	            mov qword [rbp + 0x38], rax 	       120	vtls.c	FUNCTION_2
0x4000857	            0x743f	                            je 0x4000898	       120	vtls.c	FUNCTION_2
0x4000859	        0x488b7b40	            mov rdi, qword [rbx + 0x40] 	       121	vtls.c	FUNCTION_2
0x400085d	          0x4885ff	                           test rdi, rdi	       121	vtls.c	FUNCTION_2
0x4000860	            0x741e	                            je 0x4000880	       121	vtls.c	FUNCTION_2
0x4000862	    0x488b05000000	            mov rax, qword [0x04000869] 	       121	vtls.c	FUNCTION_2
0x4000869	            0xff10	                        call qword [rax]	       121	vtls.c	FUNCTION_2
0x400086b	          0x4885c0	                           test rax, rax	       121	vtls.c	FUNCTION_2
0x400086e	        0x48894540	            mov qword [rbp + 0x40], rax 	       121	vtls.c	FUNCTION_2
0x4000872	           0xf95c0	                                setne al	       121	vtls.c	FUNCTION_2
0x4000875	        0x4883c408	                              add rsp, 8	       124	vtls.c	FUNCTION_2
0x4000879	              0x5b	                                 pop rbx	       124	vtls.c	FUNCTION_2
0x400087a	              0x5d	                                 pop rbp	       124	vtls.c	FUNCTION_2
0x400087b	              0xc3	                                     ret	       124	vtls.c	FUNCTION_2
0x400087c	         0xf1f4000	                         nop dword [rax]	       124	vtls.c	FUNCTION_2
0x4000880	    0x48c745400000	               mov qword [rbp + 0x40], 0	       121	vtls.c	FUNCTION_2
0x4000888	        0x4883c408	                              add rsp, 8	       124	vtls.c	FUNCTION_2
0x400088c	      0xb801000000	                              mov eax, 1	       123	vtls.c	FUNCTION_2
0x4000891	              0x5b	                                 pop rbx	       124	vtls.c	FUNCTION_2
0x4000892	              0x5d	                                 pop rbp	       124	vtls.c	FUNCTION_2
0x4000893	              0xc3	                                     ret	       124	vtls.c	FUNCTION_2
0x4000894	         0xf1f4000	                         nop dword [rax]	       124	vtls.c	FUNCTION_2
0x4000898	        0x4883c408	                              add rsp, 8	       124	vtls.c	FUNCTION_2
0x400089c	            0x31c0	                            xor eax, eax	       116	vtls.c	FUNCTION_2
0x400089e	              0x5b	                                 pop rbx	       124	vtls.c	FUNCTION_2
0x400089f	              0x5d	                                 pop rbp	       124	vtls.c	FUNCTION_2
0x40008a0	              0xc3	                                     ret	       124	vtls.c	FUNCTION_2
0x40008a1	     0xf1f80000000	                         nop dword [rax]	       124	vtls.c	FUNCTION_2
0x40008a8	        0x488b7b20	            mov rdi, qword [rbx + 0x20] 	       117	vtls.c	FUNCTION_2
0x40008ac	    0x48c746180000	               mov qword [rsi + 0x18], 0	       116	vtls.c	FUNCTION_2
0x40008b4	          0x4885ff	                           test rdi, rdi	       117	vtls.c	FUNCTION_2
0x40008b7	     0xf8529ffffff	                           jne 0x40007e6	       117	vtls.c	FUNCTION_2
0x40008bd	        0x488b7b28	            mov rdi, qword [rbx + 0x28] 	       118	vtls.c	FUNCTION_2
0x40008c1	    0x48c745200000	               mov qword [rbp + 0x20], 0	       117	vtls.c	FUNCTION_2
0x40008c9	          0x4885ff	                           test rdi, rdi	       118	vtls.c	FUNCTION_2
0x40008cc	     0xf8537ffffff	                           jne 0x4000809	       118	vtls.c	FUNCTION_2
0x40008d2	        0x488b7b30	            mov rdi, qword [rbx + 0x30] 	       119	vtls.c	FUNCTION_2
0x40008d6	    0x48c745280000	               mov qword [rbp + 0x28], 0	       118	vtls.c	FUNCTION_2
0x40008de	          0x4885ff	                           test rdi, rdi	       119	vtls.c	FUNCTION_2
0x40008e1	     0xf8541ffffff	                           jne 0x4000828	       119	vtls.c	FUNCTION_2
0x40008e7	        0x488b7b38	            mov rdi, qword [rbx + 0x38] 	       120	vtls.c	FUNCTION_2
0x40008eb	    0x48c745300000	               mov qword [rbp + 0x30], 0	       119	vtls.c	FUNCTION_2
0x40008f3	          0x4885ff	                           test rdi, rdi	       120	vtls.c	FUNCTION_2
0x40008f6	     0xf854bffffff	                           jne 0x4000847	       120	vtls.c	FUNCTION_2
0x40008fc	        0x488b7b40	            mov rdi, qword [rbx + 0x40] 	       121	vtls.c	FUNCTION_2
0x4000900	    0x48c745380000	               mov qword [rbp + 0x38], 0	       120	vtls.c	FUNCTION_2
0x4000908	          0x4885ff	                           test rdi, rdi	       121	vtls.c	FUNCTION_2
0x400090b	     0xf8551ffffff	                           jne 0x4000862	       121	vtls.c	FUNCTION_2
0x4000911	      0xe96affffff	                           jmp 0x4000880	       121	vtls.c	FUNCTION_2
Curl_ssl_push_certinfo_len	WHILE,0:SWITCH,0:ELSE,0:DO,0:FOR,0:IF,2:functions,0:CALL,6	66
0x4001460	            0x4157	                                push r15	       687	vtls.c	FUNCTION_31
0x4001462	            0x4156	                                push r14	       687	vtls.c	FUNCTION_31
0x4001464	          0x4989fe	                            mov r14, rdi	       687	vtls.c	FUNCTION_31
0x4001467	            0x4155	                                push r13	       687	vtls.c	FUNCTION_31
0x4001469	            0x4154	                                push r12	       687	vtls.c	FUNCTION_31
0x400146b	          0x4889d7	                            mov rdi, rdx	       692	vtls.c	FUNCTION_31	CALL_1
0x400146e	              0x55	                                push rbp	       687	vtls.c	FUNCTION_31
0x400146f	              0x53	                                push rbx	       687	vtls.c	FUNCTION_31
0x4001470	          0x4d89c4	                             mov r12, r8	       687	vtls.c	FUNCTION_31
0x4001473	        0x4883ec28	                           sub rsp, 0x28	       687	vtls.c	FUNCTION_31
0x4001477	        0x89742408	                mov dword [rsp + 8], esi	       687	vtls.c	FUNCTION_31
0x400147b	      0x48894c2410	             mov qword [rsp + 0x10], rcx	       687	vtls.c	FUNCTION_31
0x4001480	      0x4889542418	             mov qword [rsp + 0x18], rdx	       692	vtls.c	FUNCTION_31	CALL_1
0x4001485	      0xe800000000	                          call 0x400148a	       692	vtls.c	FUNCTION_31	CALL_1
0x400148a	        0x4a8d2c20	                    lea rbp, [rax + r12]	       693	vtls.c	FUNCTION_31
0x400148e	          0x4989c5	                            mov r13, rax	       692	vtls.c	FUNCTION_31	CALL_1
0x4001491	    0x488b05000000	            mov rax, qword [0x04001498] 	       695	vtls.c	FUNCTION_31	CALL_2
0x4001498	        0x488d5d02	                      lea rbx, [rbp + 2]	       693	vtls.c	FUNCTION_31
0x400149c	          0x4889df	                            mov rdi, rbx	       695	vtls.c	FUNCTION_31	CALL_2
0x400149f	            0xff10	                        call qword [rax]	       695	vtls.c	FUNCTION_31	CALL_2
0x40014a1	          0x4989c7	                            mov r15, rax	       695	vtls.c	FUNCTION_31	CALL_2
0x40014a4	      0xb81b000000	                           mov eax, 0x1b	       695	vtls.c	FUNCTION_31	CALL_2
0x40014a9	          0x4d85ff	                           test r15, r15	       696	vtls.c	FUNCTION_31	IF_1
0x40014ac	            0x7460	                            je 0x400150e	       696	vtls.c	FUNCTION_31	IF_1
0x40014ae	      0x488b542418	            mov rdx, qword [rsp + 0x18] 	       700	vtls.c	FUNCTION_31
0x40014b3	          0x4889de	                            mov rsi, rbx	       700	vtls.c	FUNCTION_31
0x40014b6	          0x4c89ff	                            mov rdi, r15	       700	vtls.c	FUNCTION_31
0x40014b9	            0x31c0	                            xor eax, eax	       700	vtls.c	FUNCTION_31
0x40014bb	          0x4889d1	                            mov rcx, rdx	       700	vtls.c	FUNCTION_31
0x40014be	    0x488d15000000	                   lea rdx, [0x040014c5]	       700	vtls.c	FUNCTION_31
0x40014c5	      0xe800000000	                          call 0x40014ca	       700	vtls.c	FUNCTION_31
0x40014ca	      0x488b742410	            mov rsi, qword [rsp + 0x10] 	        53	string3.h	FUNCTION_64	CALL_3
0x40014cf	      0x4b8d7c2f01	                lea rdi, [r15 + r13 + 1]	        53	string3.h	FUNCTION_64	CALL_3
0x40014d4	          0x4c89e2	                            mov rdx, r12	        53	string3.h	FUNCTION_64	CALL_3
0x40014d7	      0xe800000000	                          call 0x40014dc	        53	string3.h	FUNCTION_64	CALL_3
0x40014dc	      0x48635c2408	            movsxd rbx, dword [rsp + 8] 	       708	vtls.c	FUNCTION_31	CALL_4
0x40014e1	    0x41c6442f0100	             mov byte [r15 + rbp + 1], 0	       706	vtls.c	FUNCTION_31
0x40014e7	          0x4c89fe	                            mov rsi, r15	       708	vtls.c	FUNCTION_31	CALL_4
0x40014ea	    0x498b86b85200	          mov rax, qword [r14 + 0x52b8] 	       708	vtls.c	FUNCTION_31	CALL_4
0x40014f1	        0x488b3cd8	            mov rdi, qword [rax + rbx*8]	       708	vtls.c	FUNCTION_31	CALL_4
0x40014f5	      0xe800000000	                          call 0x40014fa	       708	vtls.c	FUNCTION_31	CALL_4
0x40014fa	            0x31d2	                            xor edx, edx	       691	vtls.c	FUNCTION_31
0x40014fc	          0x4885c0	                           test rax, rax	       709	vtls.c	FUNCTION_31	IF_2
0x40014ff	            0x741f	                            je 0x4001520	       709	vtls.c	FUNCTION_31	IF_2
0x4001501	    0x498b8eb85200	          mov rcx, qword [r14 + 0x52b8] 	       715	vtls.c	FUNCTION_31
0x4001508	        0x488904d9	            mov qword [rcx + rbx*8], rax	       715	vtls.c	FUNCTION_31
0x400150c	            0x89d0	                            mov eax, edx	       716	vtls.c	FUNCTION_31
0x400150e	        0x4883c428	                           add rsp, 0x28	       717	vtls.c	FUNCTION_31
0x4001512	              0x5b	                                 pop rbx	       717	vtls.c	FUNCTION_31
0x4001513	              0x5d	                                 pop rbp	       717	vtls.c	FUNCTION_31
0x4001514	            0x415c	                                 pop r12	       717	vtls.c	FUNCTION_31
0x4001516	            0x415d	                                 pop r13	       717	vtls.c	FUNCTION_31
0x4001518	            0x415e	                                 pop r14	       717	vtls.c	FUNCTION_31
0x400151a	            0x415f	                                 pop r15	       717	vtls.c	FUNCTION_31
0x400151c	              0xc3	                                     ret	       717	vtls.c	FUNCTION_31
0x400151d	           0xf1f00	                         nop dword [rax]	       717	vtls.c	FUNCTION_31
0x4001520	    0x488b15000000	            mov rdx, qword [0x04001527] 	       710	vtls.c	FUNCTION_31	IF_2	CALL_5
0x4001527	      0x4889442408	                mov qword [rsp + 8], rax	       710	vtls.c	FUNCTION_31	IF_2	CALL_5
0x400152c	          0x4c89ff	                            mov rdi, r15	       710	vtls.c	FUNCTION_31	IF_2	CALL_5
0x400152f	            0xff12	                        call qword [rdx]	       710	vtls.c	FUNCTION_31	IF_2	CALL_5
0x4001531	    0x498b96b85200	          mov rdx, qword [r14 + 0x52b8] 	       711	vtls.c	FUNCTION_31	IF_2	CALL_6
0x4001538	        0x488b3cda	            mov rdi, qword [rdx + rbx*8]	       711	vtls.c	FUNCTION_31	IF_2	CALL_6
0x400153c	      0xe800000000	                          call 0x4001541	       711	vtls.c	FUNCTION_31	IF_2	CALL_6
0x4001541	      0xba1b000000	                           mov edx, 0x1b	       712	vtls.c	FUNCTION_31	IF_2
0x4001546	      0x488b442408	                mov rax, qword [rsp + 8]	       712	vtls.c	FUNCTION_31	IF_2
0x400154b	            0xebb4	                           jmp 0x4001501	       712	vtls.c	FUNCTION_31	IF_2
Curl_ssl_getsock	WHILE,0:SWITCH,0:ELSE,0:DO,0:FOR,0:IF,0:functions,0:CALL,0	19
0x4001250	            0x31c0	                            xor eax, eax	       521	vtls.c	FUNCTION_18	IF_1
0x4001252	            0x85d2	                           test edx, edx	       520	vtls.c	FUNCTION_18	IF_1
0x4001254	            0x7410	                            je 0x4001266	       520	vtls.c	FUNCTION_18	IF_1
0x4001256	    0x8b9798020000	           mov edx, dword [rdi + 0x298] 	       523	vtls.c	FUNCTION_18	IF_2
0x400125c	          0x83fa03	                              cmp edx, 3	       523	vtls.c	FUNCTION_18	IF_2
0x400125f	            0x740f	                            je 0x4001270	       523	vtls.c	FUNCTION_18	IF_2
0x4001261	          0x83fa02	                              cmp edx, 2	       528	vtls.c	FUNCTION_18	IF_3
0x4001264	            0x741a	                            je 0x4001280	       528	vtls.c	FUNCTION_18	IF_3
0x4001266	            0xf3c3	                                     ret	       535	vtls.c	FUNCTION_18
0x4001268	     0xf1f84000000	                   nop dword [rax + rax]	       535	vtls.c	FUNCTION_18
0x4001270	    0x8b8758020000	           mov eax, dword [rdi + 0x258] 	       525	vtls.c	FUNCTION_18	IF_2
0x4001276	            0x8906	                    mov dword [rsi], eax	       525	vtls.c	FUNCTION_18	IF_2
0x4001278	      0xb800000100	                        mov eax, 0x10000	       526	vtls.c	FUNCTION_18	IF_2	CALL_1
0x400127d	              0xc3	                                     ret	       526	vtls.c	FUNCTION_18	IF_2	CALL_1
0x400127e	            0x6690	                                     nop	       526	vtls.c	FUNCTION_18	IF_2	CALL_1
0x4001280	    0x8b8758020000	           mov eax, dword [rdi + 0x258] 	       530	vtls.c	FUNCTION_18	IF_3
0x4001286	            0x8906	                    mov dword [rsi], eax	       530	vtls.c	FUNCTION_18	IF_3
0x4001288	      0xb801000000	                              mov eax, 1	       531	vtls.c	FUNCTION_18	IF_3	CALL_2
0x400128d	              0xc3	                                     ret	       535	vtls.c	FUNCTION_18
