parse_coff_type	ELSE,5:CALL,16:WHILE,0:DO,0:functions,0:SWITCH,0:FOR,1:IF,8	405
0x4000326	            0x4157	                                push r15	       145	rdcoff.c	FUNCTION_2
0x4000328	            0x4156	                                push r14	       145	rdcoff.c	FUNCTION_2
0x400032a	            0x4155	                                push r13	       145	rdcoff.c	FUNCTION_2
0x400032c	            0x4154	                                push r12	       145	rdcoff.c	FUNCTION_2
0x400032e	              0x55	                                push rbp	       145	rdcoff.c	FUNCTION_2
0x400032f	              0x53	                                push rbx	       145	rdcoff.c	FUNCTION_2
0x4000330	        0x4883ec68	                           sub rsp, 0x68	       145	rdcoff.c	FUNCTION_2
0x4000334	          0x4889fd	                            mov rbp, rdi	       145	rdcoff.c	FUNCTION_2
0x4000337	          0x4989f5	                            mov r13, rsi	       145	rdcoff.c	FUNCTION_2
0x400033a	          0x4989d4	                            mov r12, rdx	       145	rdcoff.c	FUNCTION_2
0x400033d	          0x4989ce	                            mov r14, rcx	       145	rdcoff.c	FUNCTION_2
0x4000340	          0x4589c7	                           mov r15d, r8d	       145	rdcoff.c	FUNCTION_2
0x4000343	          0x4c89ca	                             mov rdx, r9	       145	rdcoff.c	FUNCTION_2
0x4000346	    0x488b9c24a800	            mov rbx, qword [rsp + 0xa8] 	       145	rdcoff.c	FUNCTION_2
0x400034e	    0x64488b042528	                mov rax, qword fs:[0x28]	       145	rdcoff.c	FUNCTION_2
0x4000357	      0x4889442458	             mov qword [rsp + 0x58], rax	       145	rdcoff.c	FUNCTION_2
0x400035c	            0x31c0	                            xor eax, eax	       145	rdcoff.c	FUNCTION_2
0x400035e	    0x488b87f80000	            mov rax, qword [rdi + 0xf8] 	       148	rdcoff.c	FUNCTION_2	IF_1
0x4000365	          0x8b7038	            mov esi, dword [rax + 0x38] 	       148	rdcoff.c	FUNCTION_2	IF_1
0x4000368	            0x89f1	                            mov ecx, esi	       148	rdcoff.c	FUNCTION_2	IF_1
0x400036a	            0xf7d1	                                 not ecx	       148	rdcoff.c	FUNCTION_2	IF_1
0x400036c	          0x4485c1	                           test ecx, r8d	       148	rdcoff.c	FUNCTION_2	IF_1
0x400036f	     0xf848e010000	                            je 0x4000503	       148	rdcoff.c	FUNCTION_2	IF_1
0x4000375	          0x8b4844	            mov ecx, dword [rax + 0x44] 	       152	rdcoff.c	FUNCTION_2	IF_1	CALL_1
0x4000378	          0x4489c7	                            mov edi, r8d	       152	rdcoff.c	FUNCTION_2	IF_1	CALL_1
0x400037b	            0xd3ff	                             sar edi, cl	       152	rdcoff.c	FUNCTION_2	IF_1	CALL_1
0x400037d	          0x4131f8	                            xor r8d, edi	       152	rdcoff.c	FUNCTION_2	IF_1	CALL_1
0x4000380	          0x4421c6	                            and esi, r8d	       152	rdcoff.c	FUNCTION_2	IF_1	CALL_1
0x4000383	            0x31fe	                            xor esi, edi	       152	rdcoff.c	FUNCTION_2	IF_1	CALL_1
0x4000385	          0x4189f0	                            mov r8d, esi	       152	rdcoff.c	FUNCTION_2	IF_1	CALL_1
0x4000388	          0x4489ff	                           mov edi, r15d	       154	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_2
0x400038b	          0x237840	             and edi, dword [rax + 0x40]	       154	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_2
0x400038e	          0x8b483c	            mov ecx, dword [rax + 0x3c] 	       154	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_2
0x4000391	      0xb801000000	                              mov eax, 1	       154	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_2
0x4000396	          0x48d3e0	                             shl rax, cl	       154	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_2
0x4000399	          0x4839c7	                            cmp rdi, rax	       154	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_2
0x400039c	            0x752e	                           jne 0x40003cc	       154	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_2
0x400039e	              0x53	                                push rbx	       156	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_3
0x400039f	    0x8b8424a80000	            mov eax, dword [rsp + 0xa8] 	       156	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_3
0x40003a6	              0x50	                                push rax	       156	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_3
0x40003a7	          0x4c89f1	                            mov rcx, r14	       156	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_3
0x40003aa	          0x4c89e2	                            mov rdx, r12	       156	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_3
0x40003ad	          0x4c89ee	                            mov rsi, r13	       156	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_3
0x40003b0	          0x4889ef	                            mov rdi, rbp	       156	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_3
0x40003b3	      0xe86effffff	                call sym.parse_coff_type	       156	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_3
0x40003b8	          0x4889c6	                            mov rsi, rax	       158	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_4
0x40003bb	          0x4889df	                            mov rdi, rbx	       158	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_4
0x40003be	      0xe800000000	                          call 0x40003c3	       158	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_4
0x40003c3	        0x4883c410	                           add rsp, 0x10	       158	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_4
0x40003c7	      0xe956050000	                           jmp 0x4000922	       158	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_4
0x40003cc	      0xb802000000	                              mov eax, 2	       160	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_5
0x40003d1	          0x48d3e0	                             shl rax, cl	       160	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_5
0x40003d4	          0x4839c7	                            cmp rdi, rax	       160	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_5
0x40003d7	            0x7538	                           jne 0x4000411	       160	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_5
0x40003d9	              0x53	                                push rbx	       162	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_6
0x40003da	    0x8b8424a80000	            mov eax, dword [rsp + 0xa8] 	       162	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_6
0x40003e1	              0x50	                                push rax	       162	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_6
0x40003e2	          0x4c89f1	                            mov rcx, r14	       162	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_6
0x40003e5	          0x4c89e2	                            mov rdx, r12	       162	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_6
0x40003e8	          0x4c89ee	                            mov rsi, r13	       162	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_6
0x40003eb	          0x4889ef	                            mov rdi, rbp	       162	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_6
0x40003ee	      0xe833ffffff	                call sym.parse_coff_type	       162	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_6
0x40003f3	      0xb900000000	                              mov ecx, 0	       164	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_7
0x40003f8	      0xba00000000	                              mov edx, 0	       164	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_7
0x40003fd	          0x4889c6	                            mov rsi, rax	       164	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_7
0x4000400	          0x4889df	                            mov rdi, rbx	       164	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_7
0x4000403	      0xe800000000	                          call 0x4000408	       164	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_7
0x4000408	        0x4883c410	                           add rsp, 0x10	       164	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_7
0x400040c	      0xe911050000	                           jmp 0x4000922	       164	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_7
0x4000411	      0xb803000000	                              mov eax, 3	       167	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_8
0x4000416	          0x48d3e0	                             shl rax, cl	       167	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_8
0x4000419	          0x4839c7	                            cmp rdi, rax	       167	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_8
0x400041c	     0xf85b3000000	                           jne 0x40004d5	       167	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_8
0x4000422	          0x4d85c9	                             test r9, r9	       171	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	IF_5
0x4000425	            0x7436	                            je 0x400045d	       171	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	IF_5
0x4000427	        0x498d4110	                    lea rax, [r9 + 0x10]	       183	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3
0x400042b	      0x410fb74910	            movzx ecx, word [r9 + 0x10] 	       184	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3
0x4000430	        0x440fb7f9	                          movzx r15d, cx	       184	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3
0x4000434	          0x6685c9	                             test cx, cx	       185	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x4000437	            0x741d	                            je 0x4000456	       185	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x4000439	      0xb900000000	                              mov ecx, 0	       185	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x400043e	         0xfb77802	               movzx edi, word [rax + 2]	       186	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x4000442	          0x668938	                      mov word [rax], di	       186	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x4000445	          0x83c101	                              add ecx, 1	       185	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x4000448	        0x4883c002	                              add rax, 2	       185	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x400044c	          0x6685ff	                             test di, di	       185	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x400044f	            0x7405	                            je 0x4000456	       185	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x4000451	          0x83f902	                              cmp ecx, 2	       185	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x4000454	            0x7ee8	                           jle 0x400043e	       185	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x4000456	      0x66c7000000	                       mov word [rax], 0	       187	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3
0x400045b	            0xeb06	                           jmp 0x4000463	       187	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3
0x400045d	    0x41bf00000000	                             mov r15d, 0	       172	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	IF_5
0x4000463	              0x53	                                push rbx	       190	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_9
0x4000464	            0x6a00	                                  push 0	       190	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_9
0x4000466	          0x4989d1	                             mov r9, rdx	       190	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_9
0x4000469	          0x4c89f1	                            mov rcx, r14	       190	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_9
0x400046c	          0x4c89e2	                            mov rdx, r12	       190	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_9
0x400046f	          0x4c89ee	                            mov rsi, r13	       190	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_9
0x4000472	          0x4889ef	                            mov rdi, rbp	       190	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_9
0x4000475	      0xe8acfeffff	                call sym.parse_coff_type	       190	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_9
0x400047a	          0x4889c5	                            mov rbp, rax	       190	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_9
0x400047d	        0x4183ef01	                             sub r15d, 1	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x4000481	          0x4d63ff	                        movsxd r15, r15d	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x4000484	      0x498b542428	            mov rdx, qword [r12 + 0x28] 	       249	rdcoff.c	FUNCTION_3	IF_1
0x4000489	        0x4883c410	                           add rsp, 0x10	       249	rdcoff.c	FUNCTION_3	IF_1
0x400048d	          0x4885d2	                           test rdx, rdx	       249	rdcoff.c	FUNCTION_3	IF_1
0x4000490	            0x7525	                           jne 0x40004b7	       249	rdcoff.c	FUNCTION_3	IF_1
0x4000492	      0xbe04000000	                              mov esi, 4	       279	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_5
0x4000497	          0x4889df	                            mov rdi, rbx	       279	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_5
0x400049a	      0xe800000000	                          call 0x400049f	       279	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_5
0x400049f	          0x4889c2	                            mov rdx, rax	       365	rdcoff.c	FUNCTION_3	CALL_23
0x40004a2	      0xbe00000000	                              mov esi, 0	       365	rdcoff.c	FUNCTION_3	CALL_23
0x40004a7	          0x4889df	                            mov rdi, rbx	       365	rdcoff.c	FUNCTION_3	CALL_23
0x40004aa	      0xe800000000	                          call 0x40004af	       365	rdcoff.c	FUNCTION_3	CALL_23
0x40004af	      0x4989442428	             mov qword [r12 + 0x28], rax	       370	rdcoff.c	FUNCTION_3	IF_6
0x40004b4	          0x4889c2	                            mov rdx, rax	       372	rdcoff.c	FUNCTION_3
0x40004b7	    0x41b900000000	                              mov r9d, 0	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x40004bd	          0x4d89f8	                             mov r8, r15	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x40004c0	      0xb900000000	                              mov ecx, 0	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x40004c5	          0x4889ee	                            mov rsi, rbp	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x40004c8	          0x4889df	                            mov rdi, rbx	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x40004cb	      0xe800000000	                          call 0x40004d0	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x40004d0	      0xe94d040000	                           jmp 0x4000922	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x40004d5	      0xba05000000	                              mov edx, 5	       202	rdcoff.c	FUNCTION_2	IF_1	ELSE_4	CALL_13
0x40004da	      0xbe00000000	                              mov esi, 0	       202	rdcoff.c	FUNCTION_2	IF_1	ELSE_4	CALL_13
0x40004df	      0xbf00000000	                              mov edi, 0	       202	rdcoff.c	FUNCTION_2	IF_1	ELSE_4	CALL_13
0x40004e4	      0xe800000000	                          call 0x40004e9	       202	rdcoff.c	FUNCTION_2	IF_1	ELSE_4	CALL_13
0x40004e9	          0x4489fe	                           mov esi, r15d	       202	rdcoff.c	FUNCTION_2	IF_1	ELSE_4	CALL_13
0x40004ec	          0x4889c7	                            mov rdi, rax	       202	rdcoff.c	FUNCTION_2	IF_1	ELSE_4	CALL_13
0x40004ef	      0xb800000000	                              mov eax, 0	       202	rdcoff.c	FUNCTION_2	IF_1	ELSE_4	CALL_13
0x40004f4	      0xe800000000	                          call 0x40004f9	       202	rdcoff.c	FUNCTION_2	IF_1	ELSE_4	CALL_13
0x40004f9	      0xb800000000	                              mov eax, 0	       203	rdcoff.c	FUNCTION_2	IF_1	ELSE_4
0x40004fe	      0xe91f040000	                           jmp 0x4000922	       203	rdcoff.c	FUNCTION_2	IF_1	ELSE_4
0x4000503	          0x4d85c9	                             test r9, r9	       209	rdcoff.c	FUNCTION_2	IF_6
0x4000506	            0x7431	                            je 0x4000539	       209	rdcoff.c	FUNCTION_2	IF_6
0x4000508	          0x498b31	                     mov rsi, qword [r9]	       209	rdcoff.c	FUNCTION_2	IF_6
0x400050b	          0x4885f6	                           test rsi, rsi	       209	rdcoff.c	FUNCTION_2	IF_6
0x400050e	            0x7e29	                           jle 0x4000539	       209	rdcoff.c	FUNCTION_2	IF_6
0x4000510	          0x4c89e7	                            mov rdi, r12	       215	rdcoff.c	FUNCTION_2	IF_6	CALL_14
0x4000513	      0xe828fbffff	                  call sym.coff_get_slot	       215	rdcoff.c	FUNCTION_2	IF_6	CALL_14
0x4000518	          0x4889c6	                            mov rsi, rax	       215	rdcoff.c	FUNCTION_2	IF_6	CALL_14
0x400051b	          0x488b00	                    mov rax, qword [rax]	       216	rdcoff.c	FUNCTION_2	IF_6	IF_7
0x400051e	          0x4885c0	                           test rax, rax	       216	rdcoff.c	FUNCTION_2	IF_6	IF_7
0x4000521	     0xf85fb030000	                           jne 0x4000922	       216	rdcoff.c	FUNCTION_2	IF_6	IF_7
0x4000527	      0xba00000000	                              mov edx, 0	       219	rdcoff.c	FUNCTION_2	IF_6	CALL_15
0x400052c	          0x4889df	                            mov rdi, rbx	       219	rdcoff.c	FUNCTION_2	IF_6	CALL_15
0x400052f	      0xe800000000	                          call 0x4000534	       219	rdcoff.c	FUNCTION_2	IF_6	CALL_15
0x4000534	      0xe9e9030000	                           jmp 0x4000922	       219	rdcoff.c	FUNCTION_2	IF_6	CALL_15
0x4000539	    0x83bc24a00000	               cmp dword [rsp + 0xa0], 0	       229	rdcoff.c	FUNCTION_2	IF_8
0x4000541	      0xb800000000	                              mov eax, 0	       229	rdcoff.c	FUNCTION_2	IF_8
0x4000546	        0x480f44d0	                          cmove rdx, rax	       229	rdcoff.c	FUNCTION_2	IF_8
0x400054a	        0x4183ff10	                          cmp r15d, 0x10	       247	rdcoff.c	FUNCTION_3	IF_1
0x400054e	            0x7711	                            ja 0x4000561	       247	rdcoff.c	FUNCTION_3	IF_1
0x4000550	          0x4963c7	                        movsxd rax, r15d	       249	rdcoff.c	FUNCTION_3	IF_1
0x4000553	      0x498b44c408	       mov rax, qword [r12 + rax*8 + 8] 	       249	rdcoff.c	FUNCTION_3	IF_1
0x4000558	          0x4885c0	                           test rax, rax	       249	rdcoff.c	FUNCTION_3	IF_1
0x400055b	     0xf85c1030000	                           jne 0x4000922	       249	rdcoff.c	FUNCTION_3	IF_1
0x4000561	        0x4183ff10	                          cmp r15d, 0x10	       255	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000565	            0x770a	                            ja 0x4000571	       255	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000567	          0x4489f8	                           mov eax, r15d	       255	rdcoff.c	FUNCTION_3	SWITCH_1
0x400056a	    0xff24c5000000	                       jmp qword [rax*8]	       255	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000571	          0x4889df	                            mov rdi, rbx	       258	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_1
0x4000574	      0xe800000000	                          call 0x4000579	       258	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_1
0x4000579	          0x4889c2	                            mov rdx, rax	       258	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_1
0x400057c	      0xe990030000	                           jmp 0x4000911	       258	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_1
0x4000581	          0x4889df	                            mov rdi, rbx	       263	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_2
0x4000584	      0xe800000000	                          call 0x4000589	       263	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_2
0x4000589	      0xbe00000000	                              mov esi, 0	       264	rdcoff.c	FUNCTION_3	SWITCH_1
0x400058e	      0xe9a1030000	                           jmp 0x4000934	       264	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000593	      0xba00000000	                              mov edx, 0	       268	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_3
0x4000598	      0xbe01000000	                              mov esi, 1	       268	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_3
0x400059d	          0x4889df	                            mov rdi, rbx	       268	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_3
0x40005a0	      0xe800000000	                          call 0x40005a5	       268	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_3
0x40005a5	      0xbe00000000	                              mov esi, 0	       269	rdcoff.c	FUNCTION_3	SWITCH_1
0x40005aa	      0xe985030000	                           jmp 0x4000934	       269	rdcoff.c	FUNCTION_3	SWITCH_1
0x40005af	      0xba00000000	                              mov edx, 0	       273	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_4
0x40005b4	      0xbe02000000	                              mov esi, 2	       273	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_4
0x40005b9	          0x4889df	                            mov rdi, rbx	       273	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_4
0x40005bc	      0xe800000000	                          call 0x40005c1	       273	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_4
0x40005c1	      0xbe00000000	                              mov esi, 0	       274	rdcoff.c	FUNCTION_3	SWITCH_1
0x40005c6	      0xe969030000	                           jmp 0x4000934	       274	rdcoff.c	FUNCTION_3	SWITCH_1
0x40005cb	      0xba00000000	                              mov edx, 0	       279	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_5
0x40005d0	      0xbe04000000	                              mov esi, 4	       279	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_5
0x40005d5	          0x4889df	                            mov rdi, rbx	       279	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_5
0x40005d8	      0xe800000000	                          call 0x40005dd	       279	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_5
0x40005dd	      0xbe00000000	                              mov esi, 0	       280	rdcoff.c	FUNCTION_3	SWITCH_1
0x40005e2	      0xe94d030000	                           jmp 0x4000934	       280	rdcoff.c	FUNCTION_3	SWITCH_1
0x40005e7	      0xba00000000	                              mov edx, 0	       284	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_6
0x40005ec	      0xbe04000000	                              mov esi, 4	       284	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_6
0x40005f1	          0x4889df	                            mov rdi, rbx	       284	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_6
0x40005f4	      0xe800000000	                          call 0x40005f9	       284	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_6
0x40005f9	      0xbe00000000	                              mov esi, 0	       285	rdcoff.c	FUNCTION_3	SWITCH_1
0x40005fe	      0xe931030000	                           jmp 0x4000934	       285	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000603	      0xbe04000000	                              mov esi, 4	       289	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_7
0x4000608	          0x4889df	                            mov rdi, rbx	       289	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_7
0x400060b	      0xe800000000	                          call 0x4000610	       289	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_7
0x4000610	      0xbe00000000	                              mov esi, 0	       290	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000615	      0xe91a030000	                           jmp 0x4000934	       290	rdcoff.c	FUNCTION_3	SWITCH_1
0x400061a	      0xbe08000000	                              mov esi, 8	       294	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_8
0x400061f	          0x4889df	                            mov rdi, rbx	       294	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_8
0x4000622	      0xe800000000	                          call 0x4000627	       294	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_8
0x4000627	      0xbe00000000	                              mov esi, 0	       295	rdcoff.c	FUNCTION_3	SWITCH_1
0x400062c	      0xe903030000	                           jmp 0x4000934	       295	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000631	      0xbe0c000000	                            mov esi, 0xc	       299	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_9
0x4000636	          0x4889df	                            mov rdi, rbx	       299	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_9
0x4000639	      0xe800000000	                          call 0x400063e	       299	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_9
0x400063e	      0xbe00000000	                              mov esi, 0	       300	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000643	      0xe9ec020000	                           jmp 0x4000934	       300	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000648	      0xba01000000	                              mov edx, 1	       304	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_10
0x400064d	      0xbe01000000	                              mov esi, 1	       304	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_10
0x4000652	          0x4889df	                            mov rdi, rbx	       304	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_10
0x4000655	      0xe800000000	                          call 0x400065a	       304	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_10
0x400065a	      0xbe00000000	                              mov esi, 0	       305	rdcoff.c	FUNCTION_3	SWITCH_1
0x400065f	      0xe9d0020000	                           jmp 0x4000934	       305	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000664	      0xba01000000	                              mov edx, 1	       309	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_11
0x4000669	      0xbe02000000	                              mov esi, 2	       309	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_11
0x400066e	          0x4889df	                            mov rdi, rbx	       309	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_11
0x4000671	      0xe800000000	                          call 0x4000676	       309	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_11
0x4000676	      0xbe00000000	                              mov esi, 0	       310	rdcoff.c	FUNCTION_3	SWITCH_1
0x400067b	      0xe9b4020000	                           jmp 0x4000934	       310	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000680	      0xba01000000	                              mov edx, 1	       314	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_12
0x4000685	      0xbe04000000	                              mov esi, 4	       314	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_12
0x400068a	          0x4889df	                            mov rdi, rbx	       314	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_12
0x400068d	      0xe800000000	                          call 0x4000692	       314	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_12
0x4000692	      0xbe00000000	                              mov esi, 0	       315	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000697	      0xe998020000	                           jmp 0x4000934	       315	rdcoff.c	FUNCTION_3	SWITCH_1
0x400069c	      0xba01000000	                              mov edx, 1	       319	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_13
0x40006a1	      0xbe04000000	                              mov esi, 4	       319	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_13
0x40006a6	          0x4889df	                            mov rdi, rbx	       319	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_13
0x40006a9	      0xe800000000	                          call 0x40006ae	       319	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_13
0x40006ae	      0xbe00000000	                              mov esi, 0	       320	rdcoff.c	FUNCTION_3	SWITCH_1
0x40006b3	      0xe97c020000	                           jmp 0x4000934	       320	rdcoff.c	FUNCTION_3	SWITCH_1
0x40006b8	          0x4885d2	                           test rdx, rdx	       324	rdcoff.c	FUNCTION_3	SWITCH_1	IF_2
0x40006bb	            0x7517	                           jne 0x40006d4	       324	rdcoff.c	FUNCTION_3	SWITCH_1	IF_2
0x40006bd	      0xb900000000	                              mov ecx, 0	       325	rdcoff.c	FUNCTION_3	SWITCH_1	IF_2	CALL_14
0x40006c2	      0xbe01000000	                              mov esi, 1	       325	rdcoff.c	FUNCTION_3	SWITCH_1	IF_2	CALL_14
0x40006c7	          0x4889df	                            mov rdi, rbx	       325	rdcoff.c	FUNCTION_3	SWITCH_1	IF_2	CALL_14
0x40006ca	      0xe800000000	                          call 0x40006cf	       325	rdcoff.c	FUNCTION_3	SWITCH_1	IF_2	CALL_14
0x40006cf	          0x4889c3	                            mov rbx, rax	       325	rdcoff.c	FUNCTION_3	SWITCH_1	IF_2	CALL_14
0x40006d2	            0xeb1c	                           jmp 0x40006f0	       325	rdcoff.c	FUNCTION_3	SWITCH_1	IF_2	CALL_14
0x40006d4	          0x4989d9	                             mov r9, rbx	       328	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_1	CALL_15
0x40006d7	          0x4989d0	                             mov r8, rdx	       328	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_1	CALL_15
0x40006da	      0xb908000000	                              mov ecx, 8	       328	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_1	CALL_15
0x40006df	          0x4c89e2	                            mov rdx, r12	       328	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_1	CALL_15
0x40006e2	          0x4c89ee	                            mov rsi, r13	       328	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_1	CALL_15
0x40006e5	          0x4889ef	                            mov rdi, rbp	       328	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_1	CALL_15
0x40006e8	      0xe870020000	         call sym.parse_coff_struct_type	       328	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_1	CALL_15
0x40006ed	          0x4889c3	                            mov rbx, rax	       328	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_1	CALL_15
0x40006f0	          0x4c89f6	                            mov rsi, r14	       331	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_16
0x40006f3	          0x4c89e7	                            mov rdi, r12	       331	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_16
0x40006f6	      0xe845f9ffff	                  call sym.coff_get_slot	       331	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_16
0x40006fb	          0x488918	                    mov qword [rax], rbx	       332	rdcoff.c	FUNCTION_3	SWITCH_1
0x40006fe	      0xe941020000	                           jmp 0x4000944	       332	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000703	          0x4885d2	                           test rdx, rdx	       338	rdcoff.c	FUNCTION_3	SWITCH_1	IF_3
0x4000706	            0x7517	                           jne 0x400071f	       338	rdcoff.c	FUNCTION_3	SWITCH_1	IF_3
0x4000708	      0xb900000000	                              mov ecx, 0	       339	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_17
0x400070d	      0xbe00000000	                              mov esi, 0	       339	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_17
0x4000712	          0x4889df	                            mov rdi, rbx	       339	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_17
0x4000715	      0xe800000000	                          call 0x400071a	       339	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_17
0x400071a	          0x4889c3	                            mov rbx, rax	       339	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_17
0x400071d	            0xeb1c	                           jmp 0x400073b	       339	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_17
0x400071f	          0x4989d9	                             mov r9, rbx	       341	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_2	CALL_18
0x4000722	          0x4989d0	                             mov r8, rdx	       341	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_2	CALL_18
0x4000725	      0xb909000000	                              mov ecx, 9	       341	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_2	CALL_18
0x400072a	          0x4c89e2	                            mov rdx, r12	       341	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_2	CALL_18
0x400072d	          0x4c89ee	                            mov rsi, r13	       341	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_2	CALL_18
0x4000730	          0x4889ef	                            mov rdi, rbp	       341	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_2	CALL_18
0x4000733	      0xe825020000	         call sym.parse_coff_struct_type	       341	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_2	CALL_18
0x4000738	          0x4889c3	                            mov rbx, rax	       341	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_2	CALL_18
0x400073b	          0x4c89f6	                            mov rsi, r14	       344	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_19
0x400073e	          0x4c89e7	                            mov rdi, r12	       344	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_19
0x4000741	      0xe8faf8ffff	                  call sym.coff_get_slot	       344	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_19
0x4000746	          0x488918	                    mov qword [rax], rbx	       345	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000749	      0xe9f6010000	                           jmp 0x4000944	       345	rdcoff.c	FUNCTION_3	SWITCH_1
0x400074e	          0x4885d2	                           test rdx, rdx	       351	rdcoff.c	FUNCTION_3	SWITCH_1	IF_4
0x4000751	            0x7515	                           jne 0x4000768	       351	rdcoff.c	FUNCTION_3	SWITCH_1	IF_4
0x4000753	      0xbe00000000	                              mov esi, 0	       352	rdcoff.c	FUNCTION_3	SWITCH_1	IF_4	CALL_20
0x4000758	          0x4889df	                            mov rdi, rbx	       352	rdcoff.c	FUNCTION_3	SWITCH_1	IF_4	CALL_20
0x400075b	      0xe800000000	                          call 0x4000760	       352	rdcoff.c	FUNCTION_3	SWITCH_1	IF_4	CALL_20
0x4000760	          0x4889c3	                            mov rbx, rax	       352	rdcoff.c	FUNCTION_3	SWITCH_1	IF_4	CALL_20
0x4000763	      0xe999010000	                           jmp 0x4000901	       352	rdcoff.c	FUNCTION_3	SWITCH_1	IF_4	CALL_20
0x4000768	        0x488b4218	            mov rax, qword [rdx + 0x18] 	       496	rdcoff.c	FUNCTION_5
0x400076c	          0x4989c7	                            mov r15, rax	       496	rdcoff.c	FUNCTION_5
0x400076f	      0x4889442408	                mov qword [rsp + 8], rax	       496	rdcoff.c	FUNCTION_5
0x4000774	      0xbf50000000	                           mov edi, 0x50	       499	rdcoff.c	FUNCTION_5	CALL_1
0x4000779	      0xe800000000	                          call 0x400077e	       499	rdcoff.c	FUNCTION_5	CALL_1
0x400077e	      0x4889442418	             mov qword [rsp + 0x18], rax	       499	rdcoff.c	FUNCTION_5	CALL_1
0x4000783	      0xbf50000000	                           mov edi, 0x50	       500	rdcoff.c	FUNCTION_5	CALL_2
0x4000788	      0xe800000000	                          call 0x400078d	       500	rdcoff.c	FUNCTION_5	CALL_2
0x400078d	      0x4889442410	             mov qword [rsp + 0x10], rax	       500	rdcoff.c	FUNCTION_5	CALL_2
0x4000792	        0x4d3b7d18	            cmp r15, qword [r13 + 0x18] 	       505	rdcoff.c	FUNCTION_5	WHILE_1
0x4000796	     0xf8e31010000	                           jle 0x40008cd	       505	rdcoff.c	FUNCTION_5	WHILE_1
0x400079c	        0x498b4510	            mov rax, qword [r13 + 0x10] 	       506	rdcoff.c	FUNCTION_5	WHILE_1
0x40007a0	        0x49394508	                cmp qword [r13 + 8], rax	       506	rdcoff.c	FUNCTION_5	WHILE_1
0x40007a4	     0xf8e2d010000	                           jle 0x40008d7	       506	rdcoff.c	FUNCTION_5	WHILE_1
0x40007aa	    0xc74424200a00	             mov dword [rsp + 0x20], 0xa	       506	rdcoff.c	FUNCTION_5	WHILE_1
0x40007b2	    0xc74424040000	                  mov dword [rsp + 4], 0	       506	rdcoff.c	FUNCTION_5	WHILE_1
0x40007ba	        0x498b5500	                    mov rdx, qword [r13]	       511	rdcoff.c	FUNCTION_5	WHILE_1
0x40007be	        0x4c8b3cc2	            mov r15, qword [rdx + rax*8]	       511	rdcoff.c	FUNCTION_5	WHILE_1
0x40007c2	      0x488d542430	                   lea rdx, [rsp + 0x30]	       513	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_3
0x40007c7	          0x4c89fe	                            mov rsi, r15	       513	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_3
0x40007ca	          0x4889ef	                            mov rdi, rbp	       513	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_3
0x40007cd	      0xe800000000	                          call 0x40007d2	       513	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_3
0x40007d2	            0x85c0	                           test eax, eax	       513	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_3
0x40007d4	            0x753d	                           jne 0x4000813	       513	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_3
0x40007d6	      0xe800000000	                          call 0x40007db	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x40007db	            0x89c7	                            mov edi, eax	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x40007dd	      0xe800000000	                          call 0x40007e2	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x40007e2	          0x4889c3	                            mov rbx, rax	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x40007e5	      0xba05000000	                              mov edx, 5	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x40007ea	      0xbe00000000	                              mov esi, 0	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x40007ef	      0xbf00000000	                              mov edi, 0	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x40007f4	      0xe800000000	                          call 0x40007f9	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x40007f9	          0x4889de	                            mov rsi, rbx	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x40007fc	          0x4889c7	                            mov rdi, rax	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x40007ff	      0xb800000000	                              mov eax, 0	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x4000804	      0xe800000000	                          call 0x4000809	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x4000809	      0xbb00000000	                              mov ebx, 0	       517	rdcoff.c	FUNCTION_5	WHILE_1	IF_1
0x400080e	      0xe9ee000000	                           jmp 0x4000901	       517	rdcoff.c	FUNCTION_5	WHILE_1	IF_1
0x4000813	      0x4983451001	               add qword [r13 + 0x10], 1	       520	rdcoff.c	FUNCTION_5	WHILE_1
0x4000818	       0xfb6442451	           movzx eax, byte [rsp + 0x51] 	       521	rdcoff.c	FUNCTION_5	WHILE_1
0x400081d	        0x488d4001	                      lea rax, [rax + 1]	       521	rdcoff.c	FUNCTION_5	WHILE_1
0x4000821	        0x49014518	            add qword [r13 + 0x18], rax 	       521	rdcoff.c	FUNCTION_5	WHILE_1
0x4000825	       0xfb6442450	           movzx eax, byte [rsp + 0x50] 	       523	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1
0x400082a	            0x3c10	                            cmp al, 0x10	       523	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1
0x400082c	            0x740a	                            je 0x4000838	       523	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1
0x400082e	            0x3c66	                            cmp al, 0x66	       523	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1
0x4000830	     0xf84a9000000	                            je 0x40008df	       523	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1
0x4000836	            0xeb7a	                           jmp 0x40008b2	       523	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1
0x4000838	        0x8b442404	                mov eax, dword [rsp + 4]	       526	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x400083c	          0x83c001	                              add eax, 1	       526	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x400083f	        0x89442424	             mov dword [rsp + 0x24], eax	       526	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x4000843	        0x39442420	            cmp dword [rsp + 0x20], eax 	       526	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x4000847	            0x7f3a	                            jg 0x4000883	       526	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x4000849	      0x834424200a	             add dword [rsp + 0x20], 0xa	       528	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x400084e	        0x8b442420	            mov eax, dword [rsp + 0x20] 	       528	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x4000852	            0x4898	                                    cdqe	       530	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2	CALL_8
0x4000854	        0x48c1e003	                              shl rax, 3	       530	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2	CALL_8
0x4000858	      0x4889442428	             mov qword [rsp + 0x28], rax	       529	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x400085d	          0x4889c6	                            mov rsi, rax	       529	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x4000860	      0x488b7c2418	            mov rdi, qword [rsp + 0x18] 	       529	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x4000865	      0xe800000000	                          call 0x400086a	       529	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x400086a	      0x4889442418	             mov qword [rsp + 0x18], rax	       529	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x400086f	      0x488b742428	            mov rsi, qword [rsp + 0x28] 	       531	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x4000874	      0x488b7c2410	            mov rdi, qword [rsp + 0x10] 	       531	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x4000879	      0xe800000000	                          call 0x400087e	       531	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x400087e	      0x4889442410	             mov qword [rsp + 0x10], rax	       531	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x4000883	      0x4863542404	            movsxd rdx, dword [rsp + 4] 	       535	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_10
0x4000888	        0x498b4708	                mov rax, qword [r15 + 8]	       535	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_10
0x400088c	      0x488b742418	            mov rsi, qword [rsp + 0x18] 	       535	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_10
0x4000891	        0x488904d6	            mov qword [rsi + rdx*8], rax	       535	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_10
0x4000895	        0x498b4f20	            mov rcx, qword [r15 + 0x20] 	       536	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_11
0x4000899	        0x498b4710	            mov rax, qword [r15 + 0x10] 	       536	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_11
0x400089d	        0x48034128	             add rax, qword [rcx + 0x28]	       536	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_11
0x40008a1	      0x488b742410	            mov rsi, qword [rsp + 0x10] 	       536	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_11
0x40008a6	        0x488904d6	            mov qword [rsi + rdx*8], rax	       536	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_11
0x40008aa	        0x8b442424	            mov eax, dword [rsp + 0x24] 	       537	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1
0x40008ae	        0x89442404	                mov dword [rsp + 4], eax	       537	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1
0x40008b2	      0x488b442408	                mov rax, qword [rsp + 8]	       505	rdcoff.c	FUNCTION_5	WHILE_1
0x40008b7	        0x493b4518	            cmp rax, qword [r13 + 0x18] 	       505	rdcoff.c	FUNCTION_5	WHILE_1
0x40008bb	            0x7e22	                           jle 0x40008df	       505	rdcoff.c	FUNCTION_5	WHILE_1
0x40008bd	        0x498b4510	            mov rax, qword [r13 + 0x10] 	       506	rdcoff.c	FUNCTION_5	WHILE_1
0x40008c1	        0x493b4508	                cmp rax, qword [r13 + 8]	       506	rdcoff.c	FUNCTION_5	WHILE_1
0x40008c5	     0xf8ceffeffff	                            jl 0x40007ba	       506	rdcoff.c	FUNCTION_5	WHILE_1
0x40008cb	            0xeb12	                           jmp 0x40008df	       506	rdcoff.c	FUNCTION_5	WHILE_1
0x40008cd	    0xc74424040000	                  mov dword [rsp + 4], 0	       501	rdcoff.c	FUNCTION_5
0x40008d5	            0xeb08	                           jmp 0x40008df	       501	rdcoff.c	FUNCTION_5
0x40008d7	    0xc74424040000	                  mov dword [rsp + 4], 0	       501	rdcoff.c	FUNCTION_5
0x40008df	      0x4863442404	            movsxd rax, dword [rsp + 4] 	       546	rdcoff.c	FUNCTION_5
0x40008e4	      0x488b742418	            mov rsi, qword [rsp + 0x18] 	       546	rdcoff.c	FUNCTION_5
0x40008e9	    0x48c704c60000	              mov qword [rsi + rax*8], 0	       546	rdcoff.c	FUNCTION_5
0x40008f1	      0x488b542410	            mov rdx, qword [rsp + 0x10] 	       548	rdcoff.c	FUNCTION_5	CALL_12
0x40008f6	          0x4889df	                            mov rdi, rbx	       548	rdcoff.c	FUNCTION_5	CALL_12
0x40008f9	      0xe800000000	                          call 0x40008fe	       548	rdcoff.c	FUNCTION_5	CALL_12
0x40008fe	          0x4889c3	                            mov rbx, rax	       548	rdcoff.c	FUNCTION_5	CALL_12
0x4000901	          0x4c89f6	                            mov rsi, r14	       357	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_22
0x4000904	          0x4c89e7	                            mov rdi, r12	       357	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_22
0x4000907	      0xe834f7ffff	                  call sym.coff_get_slot	       357	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_22
0x400090c	          0x488918	                    mov qword [rax], rbx	       358	rdcoff.c	FUNCTION_3	SWITCH_1
0x400090f	            0xeb33	                           jmp 0x4000944	       358	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000911	          0x4889d0	                            mov rax, rdx	       369	rdcoff.c	FUNCTION_3	IF_6
0x4000914	        0x4183ff10	                          cmp r15d, 0x10	       369	rdcoff.c	FUNCTION_3	IF_6
0x4000918	            0x7708	                            ja 0x4000922	       369	rdcoff.c	FUNCTION_3	IF_6
0x400091a	          0x4d63ff	                        movsxd r15, r15d	       370	rdcoff.c	FUNCTION_3	IF_6
0x400091d	      0x4b8954fc08	        mov qword [r12 + r15*8 + 8], rdx	       370	rdcoff.c	FUNCTION_3	IF_6
0x4000922	      0x488b5c2458	            mov rbx, qword [rsp + 0x58] 	       233	rdcoff.c	FUNCTION_2
0x4000927	    0x6448331c2528	                xor rbx, qword fs:[0x28]	       233	rdcoff.c	FUNCTION_2
0x4000930	            0x741c	                            je 0x400094e	       233	rdcoff.c	FUNCTION_2
0x4000932	            0xeb15	                           jmp 0x4000949	       233	rdcoff.c	FUNCTION_2
0x4000934	          0x4889c2	                            mov rdx, rax	       365	rdcoff.c	FUNCTION_3	CALL_23
0x4000937	          0x4889df	                            mov rdi, rbx	       365	rdcoff.c	FUNCTION_3	CALL_23
0x400093a	      0xe800000000	                          call 0x400093f	       365	rdcoff.c	FUNCTION_3	CALL_23
0x400093f	          0x4889c2	                            mov rdx, rax	       365	rdcoff.c	FUNCTION_3	CALL_23
0x4000942	            0xebcd	                           jmp 0x4000911	       365	rdcoff.c	FUNCTION_3	CALL_23
0x4000944	          0x4889d8	                            mov rax, rbx	       370	rdcoff.c	FUNCTION_3	IF_6
0x4000947	            0xebd9	                           jmp 0x4000922	       370	rdcoff.c	FUNCTION_3	IF_6
0x4000949	      0xe800000000	                          call 0x400094e	       233	rdcoff.c	FUNCTION_2
0x400094e	        0x4883c468	                           add rsp, 0x68	       233	rdcoff.c	FUNCTION_2
0x4000952	              0x5b	                                 pop rbx	       233	rdcoff.c	FUNCTION_2
0x4000953	              0x5d	                                 pop rbp	       233	rdcoff.c	FUNCTION_2
0x4000954	            0x415c	                                 pop r12	       233	rdcoff.c	FUNCTION_2
0x4000956	            0x415d	                                 pop r13	       233	rdcoff.c	FUNCTION_2
0x4000958	            0x415e	                                 pop r14	       233	rdcoff.c	FUNCTION_2
0x400095a	            0x415f	                                 pop r15	       233	rdcoff.c	FUNCTION_2
0x400095c	              0xc3	                                     ret	       233	rdcoff.c	FUNCTION_2
parse_coff_struct_type	ELSE,1:CALL,18:WHILE,1:DO,0:functions,0:SWITCH,1:FOR,0:IF,6	181
0x400095d	            0x4157	                                push r15	       381	rdcoff.c	FUNCTION_4
0x400095f	            0x4156	                                push r14	       381	rdcoff.c	FUNCTION_4
0x4000961	            0x4155	                                push r13	       381	rdcoff.c	FUNCTION_4
0x4000963	            0x4154	                                push r12	       381	rdcoff.c	FUNCTION_4
0x4000965	              0x55	                                push rbp	       381	rdcoff.c	FUNCTION_4
0x4000966	              0x53	                                push rbx	       381	rdcoff.c	FUNCTION_4
0x4000967	    0x4881eca80000	                           sub rsp, 0xa8	       381	rdcoff.c	FUNCTION_4
0x400096e	          0x4989fe	                            mov r14, rdi	       381	rdcoff.c	FUNCTION_4
0x4000971	          0x4889f3	                            mov rbx, rsi	       381	rdcoff.c	FUNCTION_4
0x4000974	      0x4889542428	             mov qword [rsp + 0x28], rdx	       381	rdcoff.c	FUNCTION_4
0x4000979	        0x894c2434	             mov dword [rsp + 0x34], ecx	       381	rdcoff.c	FUNCTION_4
0x400097d	      0x4c89442438	              mov qword [rsp + 0x38], r8	       381	rdcoff.c	FUNCTION_4
0x4000982	          0x4d89cf	                             mov r15, r9	       381	rdcoff.c	FUNCTION_4
0x4000985	    0x64488b3c2528	                mov rdi, qword fs:[0x28]	       381	rdcoff.c	FUNCTION_4
0x400098e	    0x4889bc249800	             mov qword [rsp + 0x98], rdi	       381	rdcoff.c	FUNCTION_4
0x4000996	            0x31ff	                            xor edi, edi	       381	rdcoff.c	FUNCTION_4
0x4000998	        0x498b4018	              mov rax, qword [r8 + 0x18]	       388	rdcoff.c	FUNCTION_4
0x400099c	          0x4889c5	                            mov rbp, rax	       388	rdcoff.c	FUNCTION_4
0x400099f	      0x4889442420	             mov qword [rsp + 0x20], rax	       388	rdcoff.c	FUNCTION_4
0x40009a4	      0xbf50000000	                           mov edi, 0x50	       391	rdcoff.c	FUNCTION_4	CALL_1
0x40009a9	      0xe800000000	                          call 0x40009ae	       391	rdcoff.c	FUNCTION_4	CALL_1
0x40009ae	      0x4889442418	             mov qword [rsp + 0x18], rax	       391	rdcoff.c	FUNCTION_4	CALL_1
0x40009b3	        0x483b6b18	            cmp rbp, qword [rbx + 0x18] 	       396	rdcoff.c	FUNCTION_4	WHILE_1
0x40009b7	     0xf8ff6010000	                            jg 0x4000bb3	       396	rdcoff.c	FUNCTION_4	WHILE_1
0x40009bd	    0xc744240c0000	                mov dword [rsp + 0xc], 0	       392	rdcoff.c	FUNCTION_4
0x40009c5	      0xe914020000	                           jmp 0x4000bde	       392	rdcoff.c	FUNCTION_4
0x40009ca	    0xc744240c0000	                mov dword [rsp + 0xc], 0	       397	rdcoff.c	FUNCTION_4	WHILE_1
0x40009d2	    0xc74424300a00	             mov dword [rsp + 0x30], 0xa	       397	rdcoff.c	FUNCTION_4	WHILE_1
0x40009da	            0xeb05	                           jmp 0x40009e1	       397	rdcoff.c	FUNCTION_4	WHILE_1
0x40009dc	      0x448964240c	             mov dword [rsp + 0xc], r12d	       463	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	IF_6
0x40009e1	          0x488b13	                    mov rdx, qword [rbx]	       406	rdcoff.c	FUNCTION_4	WHILE_1
0x40009e4	        0x488b2cc2	            mov rbp, qword [rdx + rax*8]	       406	rdcoff.c	FUNCTION_4	WHILE_1
0x40009e8	      0x488d542440	                   lea rdx, [rsp + 0x40]	       408	rdcoff.c	FUNCTION_4	WHILE_1	IF_1	CALL_2
0x40009ed	          0x4889ee	                            mov rsi, rbp	       408	rdcoff.c	FUNCTION_4	WHILE_1	IF_1	CALL_2
0x40009f0	          0x4c89f7	                            mov rdi, r14	       408	rdcoff.c	FUNCTION_4	WHILE_1	IF_1	CALL_2
0x40009f3	      0xe800000000	                          call 0x40009f8	       408	rdcoff.c	FUNCTION_4	WHILE_1	IF_1	CALL_2
0x40009f8	            0x85c0	                           test eax, eax	       408	rdcoff.c	FUNCTION_4	WHILE_1	IF_1	CALL_2
0x40009fa	            0x7538	                           jne 0x4000a34	       408	rdcoff.c	FUNCTION_4	WHILE_1	IF_1	CALL_2
0x40009fc	      0xe800000000	                          call 0x4000a01	       410	rdcoff.c	FUNCTION_4	WHILE_1	IF_1	CALL_4
0x4000a01	            0x89c7	                            mov edi, eax	       410	rdcoff.c	FUNCTION_4	WHILE_1	IF_1	CALL_4
0x4000a03	      0xe800000000	                          call 0x4000a08	       410	rdcoff.c	FUNCTION_4	WHILE_1	IF_1	CALL_4
0x4000a08	          0x4889c3	                            mov rbx, rax	       410	rdcoff.c	FUNCTION_4	WHILE_1	IF_1	CALL_4
0x4000a0b	      0xba05000000	                              mov edx, 5	       410	rdcoff.c	FUNCTION_4	WHILE_1	IF_1	CALL_4
0x4000a10	      0xbe00000000	                              mov esi, 0	       410	rdcoff.c	FUNCTION_4	WHILE_1	IF_1	CALL_4
0x4000a15	      0xbf00000000	                              mov edi, 0	       410	rdcoff.c	FUNCTION_4	WHILE_1	IF_1	CALL_4
0x4000a1a	      0xe800000000	                          call 0x4000a1f	       410	rdcoff.c	FUNCTION_4	WHILE_1	IF_1	CALL_4
0x4000a1f	          0x4889de	                            mov rsi, rbx	       410	rdcoff.c	FUNCTION_4	WHILE_1	IF_1	CALL_4
0x4000a22	          0x4889c7	                            mov rdi, rax	       410	rdcoff.c	FUNCTION_4	WHILE_1	IF_1	CALL_4
0x4000a25	      0xb800000000	                              mov eax, 0	       410	rdcoff.c	FUNCTION_4	WHILE_1	IF_1	CALL_4
0x4000a2a	      0xe800000000	                          call 0x4000a2f	       410	rdcoff.c	FUNCTION_4	WHILE_1	IF_1	CALL_4
0x4000a2f	      0xe978010000	                           jmp 0x4000bac	       412	rdcoff.c	FUNCTION_4	WHILE_1	IF_1
0x4000a34	        0x4c8b6318	            mov r12, qword [rbx + 0x18] 	       415	rdcoff.c	FUNCTION_4	WHILE_1
0x4000a38	      0x4883431001	               add qword [rbx + 0x10], 1	       417	rdcoff.c	FUNCTION_4	WHILE_1
0x4000a3d	       0xfb6442461	           movzx eax, byte [rsp + 0x61] 	       418	rdcoff.c	FUNCTION_4	WHILE_1
0x4000a42	           0xfb6d0	                           movzx edx, al	       418	rdcoff.c	FUNCTION_4	WHILE_1
0x4000a45	      0x498d541401	                lea rdx, [r12 + rdx + 1]	       418	rdcoff.c	FUNCTION_4	WHILE_1
0x4000a4a	        0x48895318	             mov qword [rbx + 0x18], rdx	       418	rdcoff.c	FUNCTION_4	WHILE_1
0x4000a4e	    0x41b900000000	                              mov r9d, 0	       421	rdcoff.c	FUNCTION_4	WHILE_1	IF_2
0x4000a54	            0x84c0	                             test al, al	       420	rdcoff.c	FUNCTION_4	WHILE_1	IF_2
0x4000a56	            0x7456	                            je 0x4000aae	       420	rdcoff.c	FUNCTION_4	WHILE_1	IF_2
0x4000a58	      0x488d4c2470	                   lea rcx, [rsp + 0x70]	       424	rdcoff.c	FUNCTION_4	WHILE_1	ELSE_1	IF_3	CALL_7
0x4000a5d	      0xba00000000	                              mov edx, 0	       424	rdcoff.c	FUNCTION_4	WHILE_1	ELSE_1	IF_3	CALL_7
0x4000a62	          0x4889ee	                            mov rsi, rbp	       424	rdcoff.c	FUNCTION_4	WHILE_1	ELSE_1	IF_3	CALL_7
0x4000a65	          0x4c89f7	                            mov rdi, r14	       424	rdcoff.c	FUNCTION_4	WHILE_1	ELSE_1	IF_3	CALL_7
0x4000a68	      0xe800000000	                          call 0x4000a6d	       424	rdcoff.c	FUNCTION_4	WHILE_1	ELSE_1	IF_3	CALL_7
0x4000a6d	            0x85c0	                           test eax, eax	       424	rdcoff.c	FUNCTION_4	WHILE_1	ELSE_1	IF_3	CALL_7
0x4000a6f	            0x7538	                           jne 0x4000aa9	       424	rdcoff.c	FUNCTION_4	WHILE_1	ELSE_1	IF_3	CALL_7
0x4000a71	      0xe800000000	                          call 0x4000a76	       426	rdcoff.c	FUNCTION_4	WHILE_1	ELSE_1	IF_3	CALL_9
0x4000a76	            0x89c7	                            mov edi, eax	       426	rdcoff.c	FUNCTION_4	WHILE_1	ELSE_1	IF_3	CALL_9
0x4000a78	      0xe800000000	                          call 0x4000a7d	       426	rdcoff.c	FUNCTION_4	WHILE_1	ELSE_1	IF_3	CALL_9
0x4000a7d	          0x4889c3	                            mov rbx, rax	       426	rdcoff.c	FUNCTION_4	WHILE_1	ELSE_1	IF_3	CALL_9
0x4000a80	      0xba05000000	                              mov edx, 5	       426	rdcoff.c	FUNCTION_4	WHILE_1	ELSE_1	IF_3	CALL_9
0x4000a85	      0xbe00000000	                              mov esi, 0	       426	rdcoff.c	FUNCTION_4	WHILE_1	ELSE_1	IF_3	CALL_9
0x4000a8a	      0xbf00000000	                              mov edi, 0	       426	rdcoff.c	FUNCTION_4	WHILE_1	ELSE_1	IF_3	CALL_9
0x4000a8f	      0xe800000000	                          call 0x4000a94	       426	rdcoff.c	FUNCTION_4	WHILE_1	ELSE_1	IF_3	CALL_9
0x4000a94	          0x4889de	                            mov rsi, rbx	       426	rdcoff.c	FUNCTION_4	WHILE_1	ELSE_1	IF_3	CALL_9
0x4000a97	          0x4889c7	                            mov rdi, rax	       426	rdcoff.c	FUNCTION_4	WHILE_1	ELSE_1	IF_3	CALL_9
0x4000a9a	      0xb800000000	                              mov eax, 0	       426	rdcoff.c	FUNCTION_4	WHILE_1	ELSE_1	IF_3	CALL_9
0x4000a9f	      0xe800000000	                          call 0x4000aa4	       426	rdcoff.c	FUNCTION_4	WHILE_1	ELSE_1	IF_3	CALL_9
0x4000aa4	      0xe903010000	                           jmp 0x4000bac	       428	rdcoff.c	FUNCTION_4	WHILE_1	ELSE_1	IF_3
0x4000aa9	      0x4c8d4c2470	                    lea r9, [rsp + 0x70]	       430	rdcoff.c	FUNCTION_4	WHILE_1	ELSE_1
0x4000aae	       0xfb6442460	           movzx eax, byte [rsp + 0x60] 	       433	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1
0x4000ab3	            0x3c0b	                             cmp al, 0xb	       433	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1
0x4000ab5	            0x7418	                            je 0x4000acf	       433	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1
0x4000ab7	            0x3c0b	                             cmp al, 0xb	       433	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1
0x4000ab9	            0x7706	                            ja 0x4000ac1	       433	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1
0x4000abb	            0x3c08	                               cmp al, 8	       433	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1
0x4000abd	            0x7410	                            je 0x4000acf	       433	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1
0x4000abf	            0xeb48	                           jmp 0x4000b09	       433	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1
0x4000ac1	            0x3c12	                            cmp al, 0x12	       433	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1
0x4000ac3	            0x7429	                            je 0x4000aee	       433	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1
0x4000ac5	            0x3c66	                            cmp al, 0x66	       433	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1
0x4000ac7	     0xf8411010000	                            je 0x4000bde	       433	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1
0x4000acd	            0xeb3a	                           jmp 0x4000b09	       433	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1
0x4000acf	        0x488b5520	            mov rdx, qword [rbp + 0x20] 	       437	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1	CALL_12
0x4000ad3	        0x488b4510	            mov rax, qword [rbp + 0x10] 	       437	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1	CALL_12
0x4000ad7	        0x48034228	             add rax, qword [rdx + 0x28]	       437	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1	CALL_12
0x4000adb	    0x4c8d2cc50000	                        lea r13, [rax*8]	       437	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1	CALL_12
0x4000ae3	    0x48c744241000	               mov qword [rsp + 0x10], 0	       438	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1
0x4000aec	            0xeb2a	                           jmp 0x4000b18	       439	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1
0x4000aee	        0x488b5520	            mov rdx, qword [rbp + 0x20] 	       442	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1	CALL_13
0x4000af2	        0x488b4510	            mov rax, qword [rbp + 0x10] 	       442	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1	CALL_13
0x4000af6	        0x48034228	             add rax, qword [rdx + 0x28]	       442	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1	CALL_13
0x4000afa	          0x4989c5	                            mov r13, rax	       442	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1	CALL_13
0x4000afd	       0xfb744247a	           movzx eax, word [rsp + 0x7a] 	       443	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1
0x4000b02	      0x4889442410	             mov qword [rsp + 0x10], rax	       443	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1
0x4000b07	            0xeb0f	                           jmp 0x4000b18	       444	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1
0x4000b09	    0x48c744241000	               mov qword [rsp + 0x10], 0	       404	rdcoff.c	FUNCTION_4	WHILE_1
0x4000b12	    0x41bd00000000	                             mov r13d, 0	       404	rdcoff.c	FUNCTION_4	WHILE_1
0x4000b18	            0x4157	                                push r15	       456	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	CALL_14
0x4000b1a	            0x6a01	                                  push 1	       456	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	CALL_14
0x4000b1c	    0x440fb744246e	           movzx r8d, word [rsp + 0x6e] 	       456	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	CALL_14
0x4000b22	          0x4c89e1	                            mov rcx, r12	       456	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	CALL_14
0x4000b25	      0x488b542438	            mov rdx, qword [rsp + 0x38] 	       456	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	CALL_14
0x4000b2a	          0x4889de	                            mov rsi, rbx	       456	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	CALL_14
0x4000b2d	          0x4c89f7	                            mov rdi, r14	       456	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	CALL_14
0x4000b30	      0xe8f1f7ffff	                call sym.parse_coff_type	       456	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	CALL_14
0x4000b35	        0x488b7508	                mov rsi, qword [rbp + 8]	       458	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	CALL_16
0x4000b39	    0x41b900000000	                              mov r9d, 0	       458	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	CALL_16
0x4000b3f	      0x4c8b442420	              mov r8, qword [rsp + 0x20]	       458	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	CALL_16
0x4000b44	          0x4c89e9	                            mov rcx, r13	       458	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	CALL_16
0x4000b47	          0x4889c2	                            mov rdx, rax	       458	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	CALL_16
0x4000b4a	          0x4c89ff	                            mov rdi, r15	       458	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	CALL_16
0x4000b4d	      0xe800000000	                          call 0x4000b52	       458	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	CALL_16
0x4000b52	          0x4889c5	                            mov rbp, rax	       458	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	CALL_16
0x4000b55	        0x4883c410	                           add rsp, 0x10	       460	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	IF_5
0x4000b59	          0x4885c0	                           test rax, rax	       460	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	IF_5
0x4000b5c	            0x744e	                            je 0x4000bac	       460	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	IF_5
0x4000b5e	        0x8b44240c	              mov eax, dword [rsp + 0xc]	       463	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	IF_6
0x4000b62	        0x448d6001	                     lea r12d, [rax + 1]	       463	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	IF_6
0x4000b66	      0x443b642430	           cmp r12d, dword [rsp + 0x30] 	       463	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	IF_6
0x4000b6b	            0x7c1f	                            jl 0x4000b8c	       463	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	IF_6
0x4000b6d	      0x834424300a	             add dword [rsp + 0x30], 0xa	       465	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	IF_6
0x4000b72	        0x8b442430	            mov eax, dword [rsp + 0x30] 	       465	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	IF_6
0x4000b76	          0x4863f0	                         movsxd rsi, eax	       466	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	IF_6
0x4000b79	        0x48c1e603	                              shl rsi, 3	       466	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	IF_6
0x4000b7d	      0x488b7c2418	            mov rdi, qword [rsp + 0x18] 	       466	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	IF_6
0x4000b82	      0xe800000000	                          call 0x4000b87	       466	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	IF_6
0x4000b87	      0x4889442418	             mov qword [rsp + 0x18], rax	       466	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	IF_6
0x4000b8c	      0x486344240c	          movsxd rax, dword [rsp + 0xc] 	       470	rdcoff.c	FUNCTION_4	WHILE_1	IF_4
0x4000b91	      0x488b4c2418	            mov rcx, qword [rsp + 0x18] 	       470	rdcoff.c	FUNCTION_4	WHILE_1	IF_4
0x4000b96	        0x48892cc1	            mov qword [rcx + rax*8], rbp	       470	rdcoff.c	FUNCTION_4	WHILE_1	IF_4
0x4000b9a	      0x488b442420	            mov rax, qword [rsp + 0x20] 	       396	rdcoff.c	FUNCTION_4	WHILE_1
0x4000b9f	        0x483b4318	            cmp rax, qword [rbx + 0x18] 	       396	rdcoff.c	FUNCTION_4	WHILE_1
0x4000ba3	            0x7f26	                            jg 0x4000bcb	       396	rdcoff.c	FUNCTION_4	WHILE_1
0x4000ba5	      0x448964240c	             mov dword [rsp + 0xc], r12d	       463	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	IF_6
0x4000baa	            0xeb32	                           jmp 0x4000bde	       463	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	IF_6
0x4000bac	      0xb800000000	                              mov eax, 0	       412	rdcoff.c	FUNCTION_4	WHILE_1	IF_1
0x4000bb1	            0xeb5e	                           jmp 0x4000c11	       412	rdcoff.c	FUNCTION_4	WHILE_1	IF_1
0x4000bb3	        0x488b4310	            mov rax, qword [rbx + 0x10] 	       397	rdcoff.c	FUNCTION_4	WHILE_1
0x4000bb7	        0x483b4308	                cmp rax, qword [rbx + 8]	       397	rdcoff.c	FUNCTION_4	WHILE_1
0x4000bbb	     0xf8c09feffff	                            jl 0x40009ca	       397	rdcoff.c	FUNCTION_4	WHILE_1
0x4000bc1	    0xc744240c0000	                mov dword [rsp + 0xc], 0	       392	rdcoff.c	FUNCTION_4
0x4000bc9	            0xeb13	                           jmp 0x4000bde	       392	rdcoff.c	FUNCTION_4
0x4000bcb	        0x488b4310	            mov rax, qword [rbx + 0x10] 	       397	rdcoff.c	FUNCTION_4	WHILE_1
0x4000bcf	        0x483b4308	                cmp rax, qword [rbx + 8]	       397	rdcoff.c	FUNCTION_4	WHILE_1
0x4000bd3	     0xf8c03feffff	                            jl 0x40009dc	       397	rdcoff.c	FUNCTION_4	WHILE_1
0x4000bd9	      0x448964240c	             mov dword [rsp + 0xc], r12d	       463	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	IF_6
0x4000bde	      0x486344240c	          movsxd rax, dword [rsp + 0xc] 	       475	rdcoff.c	FUNCTION_4
0x4000be3	      0x488b7c2418	            mov rdi, qword [rsp + 0x18] 	       475	rdcoff.c	FUNCTION_4
0x4000be8	    0x48c704c70000	              mov qword [rdi + rax*8], 0	       475	rdcoff.c	FUNCTION_4
0x4000bf0	      0x488b442438	            mov rax, qword [rsp + 0x38] 	       477	rdcoff.c	FUNCTION_4	CALL_18
0x4000bf5	         0xfb7500a	            movzx edx, word [rax + 0xa] 	       477	rdcoff.c	FUNCTION_4	CALL_18
0x4000bf9	      0x837c243408	               cmp dword [rsp + 0x34], 8	       477	rdcoff.c	FUNCTION_4	CALL_18
0x4000bfe	        0x400f94c6	                                sete sil	       477	rdcoff.c	FUNCTION_4	CALL_18
0x4000c02	        0x400fb6f6	                          movzx esi, sil	       477	rdcoff.c	FUNCTION_4	CALL_18
0x4000c06	          0x4889f9	                            mov rcx, rdi	       477	rdcoff.c	FUNCTION_4	CALL_18
0x4000c09	          0x4c89ff	                            mov rdi, r15	       477	rdcoff.c	FUNCTION_4	CALL_18
0x4000c0c	      0xe800000000	                          call 0x4000c11	       477	rdcoff.c	FUNCTION_4	CALL_18
0x4000c11	    0x488bbc249800	            mov rdi, qword [rsp + 0x98] 	       480	rdcoff.c	FUNCTION_4
0x4000c19	    0x6448333c2528	                xor rdi, qword fs:[0x28]	       480	rdcoff.c	FUNCTION_4
0x4000c22	            0x7405	                            je 0x4000c29	       480	rdcoff.c	FUNCTION_4
0x4000c24	      0xe800000000	                          call 0x4000c29	       480	rdcoff.c	FUNCTION_4
0x4000c29	    0x4881c4a80000	                           add rsp, 0xa8	       480	rdcoff.c	FUNCTION_4
0x4000c30	              0x5b	                                 pop rbx	       480	rdcoff.c	FUNCTION_4
0x4000c31	              0x5d	                                 pop rbp	       480	rdcoff.c	FUNCTION_4
0x4000c32	            0x415c	                                 pop r12	       480	rdcoff.c	FUNCTION_4
0x4000c34	            0x415d	                                 pop r13	       480	rdcoff.c	FUNCTION_4
0x4000c36	            0x415e	                                 pop r14	       480	rdcoff.c	FUNCTION_4
0x4000c38	            0x415f	                                 pop r15	       480	rdcoff.c	FUNCTION_4
0x4000c3a	              0xc3	                                     ret	       480	rdcoff.c	FUNCTION_4
parse_coff_symbol	ELSE,0:CALL,23:WHILE,0:DO,0:functions,0:SWITCH,1:FOR,0:IF,8	139
0x4000136	            0x4154	                                push r12	       558	rdcoff.c	FUNCTION_6
0x4000138	              0x55	                                push rbp	       558	rdcoff.c	FUNCTION_6
0x4000139	              0x53	                                push rbx	       558	rdcoff.c	FUNCTION_6
0x400013a	          0x4889f3	                            mov rbx, rsi	       558	rdcoff.c	FUNCTION_6
0x400013d	          0x4889cd	                            mov rbp, rcx	       558	rdcoff.c	FUNCTION_6
0x4000140	      0x410fb64020	            movzx eax, byte [r8 + 0x20] 	       559	rdcoff.c	FUNCTION_6	SWITCH_1
0x4000145	            0x3c0a	                             cmp al, 0xa	       559	rdcoff.c	FUNCTION_6	SWITCH_1
0x4000147	     0xf849c010000	                            je 0x40002e9	       559	rdcoff.c	FUNCTION_6	SWITCH_1
0x400014d	            0x3c0a	                             cmp al, 0xa	       559	rdcoff.c	FUNCTION_6	SWITCH_1
0x400014f	            0x772e	                            ja 0x400017f	       559	rdcoff.c	FUNCTION_6	SWITCH_1
0x4000151	            0x3c03	                               cmp al, 3	       559	rdcoff.c	FUNCTION_6	SWITCH_1
0x4000153	     0xf84b6000000	                            je 0x400020f	       559	rdcoff.c	FUNCTION_6	SWITCH_1
0x4000159	            0x3c03	                               cmp al, 3	       559	rdcoff.c	FUNCTION_6	SWITCH_1
0x400015b	            0x770d	                            ja 0x400016a	       559	rdcoff.c	FUNCTION_6	SWITCH_1
0x400015d	            0x3c01	                               cmp al, 1	       559	rdcoff.c	FUNCTION_6	SWITCH_1
0x400015f	            0x7450	                            je 0x40001b1	       559	rdcoff.c	FUNCTION_6	SWITCH_1
0x4000161	            0x3c02	                               cmp al, 2	       559	rdcoff.c	FUNCTION_6	SWITCH_1
0x4000163	            0x747b	                            je 0x40001e0	       559	rdcoff.c	FUNCTION_6	SWITCH_1
0x4000165	      0xe9b2010000	                           jmp 0x400031c	       559	rdcoff.c	FUNCTION_6	SWITCH_1
0x400016a	            0x3c04	                               cmp al, 4	       559	rdcoff.c	FUNCTION_6	SWITCH_1
0x400016c	     0xf84d1000000	                            je 0x4000243	       559	rdcoff.c	FUNCTION_6	SWITCH_1
0x4000172	            0x3c09	                               cmp al, 9	       559	rdcoff.c	FUNCTION_6	SWITCH_1
0x4000174	     0xf84f8000000	                            je 0x4000272	       559	rdcoff.c	FUNCTION_6	SWITCH_1
0x400017a	      0xe99d010000	                           jmp 0x400031c	       559	rdcoff.c	FUNCTION_6	SWITCH_1
0x400017f	            0x3c0f	                             cmp al, 0xf	       559	rdcoff.c	FUNCTION_6	SWITCH_1
0x4000181	     0xf8462010000	                            je 0x40002e9	       559	rdcoff.c	FUNCTION_6	SWITCH_1
0x4000187	            0x3c0f	                             cmp al, 0xf	       559	rdcoff.c	FUNCTION_6	SWITCH_1
0x4000189	            0x7715	                            ja 0x40001a0	       559	rdcoff.c	FUNCTION_6	SWITCH_1
0x400018b	            0x3c0c	                             cmp al, 0xc	       559	rdcoff.c	FUNCTION_6	SWITCH_1
0x400018d	     0xf8456010000	                            je 0x40002e9	       559	rdcoff.c	FUNCTION_6	SWITCH_1
0x4000193	            0x3c0d	                             cmp al, 0xd	       559	rdcoff.c	FUNCTION_6	SWITCH_1
0x4000195	     0xf8432010000	                            je 0x40002cd	       559	rdcoff.c	FUNCTION_6	SWITCH_1
0x400019b	      0xe97c010000	                           jmp 0x400031c	       559	rdcoff.c	FUNCTION_6	SWITCH_1
0x40001a0	            0x3c11	                            cmp al, 0x11	       559	rdcoff.c	FUNCTION_6	SWITCH_1
0x40001a2	     0xf84f9000000	                            je 0x40002a1	       559	rdcoff.c	FUNCTION_6	SWITCH_1
0x40001a8	            0x3c7f	                            cmp al, 0x7f	       559	rdcoff.c	FUNCTION_6	SWITCH_1
0x40001aa	            0x7434	                            je 0x40001e0	       559	rdcoff.c	FUNCTION_6	SWITCH_1
0x40001ac	      0xe96b010000	                           jmp 0x400031c	       559	rdcoff.c	FUNCTION_6	SWITCH_1
0x40001b1	        0x488b4220	            mov rax, qword [rdx + 0x20] 	       566	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1	CALL_3
0x40001b5	        0x4c8b4210	              mov r8, qword [rdx + 0x10]	       565	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1	CALL_2
0x40001b9	        0x488b7208	                mov rsi, qword [rdx + 8]	       565	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1	CALL_2
0x40001bd	        0x4c034028	              add r8, qword [rax + 0x28]	       565	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1	CALL_2
0x40001c1	      0xb904000000	                              mov ecx, 4	       565	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1	CALL_2
0x40001c6	      0x488b542420	            mov rdx, qword [rsp + 0x20] 	       565	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1	CALL_2
0x40001cb	          0x4c89cf	                             mov rdi, r9	       565	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1	CALL_2
0x40001ce	      0xe800000000	                          call 0x40001d3	       565	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1	CALL_2
0x40001d3	            0x85c0	                           test eax, eax	       567	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1
0x40001d5	           0xf95c0	                                setne al	       567	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1
0x40001d8	           0xfb6c0	                           movzx eax, al	       567	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1
0x40001db	      0xe941010000	                           jmp 0x4000321	       567	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1
0x40001e0	        0x488b4220	            mov rax, qword [rdx + 0x20] 	       573	rdcoff.c	FUNCTION_6	SWITCH_1	IF_2	CALL_6
0x40001e4	        0x4c8b4210	              mov r8, qword [rdx + 0x10]	       572	rdcoff.c	FUNCTION_6	SWITCH_1	IF_2	CALL_5
0x40001e8	        0x488b7208	                mov rsi, qword [rdx + 8]	       572	rdcoff.c	FUNCTION_6	SWITCH_1	IF_2	CALL_5
0x40001ec	        0x4c034028	              add r8, qword [rax + 0x28]	       572	rdcoff.c	FUNCTION_6	SWITCH_1	IF_2	CALL_5
0x40001f0	      0xb901000000	                              mov ecx, 1	       572	rdcoff.c	FUNCTION_6	SWITCH_1	IF_2	CALL_5
0x40001f5	      0x488b542420	            mov rdx, qword [rsp + 0x20] 	       572	rdcoff.c	FUNCTION_6	SWITCH_1	IF_2	CALL_5
0x40001fa	          0x4c89cf	                             mov rdi, r9	       572	rdcoff.c	FUNCTION_6	SWITCH_1	IF_2	CALL_5
0x40001fd	      0xe800000000	                          call 0x4000202	       572	rdcoff.c	FUNCTION_6	SWITCH_1	IF_2	CALL_5
0x4000202	            0x85c0	                           test eax, eax	       567	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1
0x4000204	           0xf95c0	                                setne al	       567	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1
0x4000207	           0xfb6c0	                           movzx eax, al	       567	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1
0x400020a	      0xe912010000	                           jmp 0x4000321	       567	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1
0x400020f	        0x488b4220	            mov rax, qword [rdx + 0x20] 	       582	rdcoff.c	FUNCTION_6	SWITCH_1	IF_3	CALL_9
0x4000213	        0x4c8b4210	              mov r8, qword [rdx + 0x10]	       578	rdcoff.c	FUNCTION_6	SWITCH_1	IF_3	CALL_8
0x4000217	      0x837c242801	               cmp dword [rsp + 0x28], 1	       578	rdcoff.c	FUNCTION_6	SWITCH_1	IF_3	CALL_8
0x400021c	            0x19c9	                            sbb ecx, ecx	       578	rdcoff.c	FUNCTION_6	SWITCH_1	IF_3	CALL_8
0x400021e	          0x83c103	                              add ecx, 3	       578	rdcoff.c	FUNCTION_6	SWITCH_1	IF_3	CALL_8
0x4000221	        0x488b7208	                mov rsi, qword [rdx + 8]	       578	rdcoff.c	FUNCTION_6	SWITCH_1	IF_3	CALL_8
0x4000225	        0x4c034028	              add r8, qword [rax + 0x28]	       578	rdcoff.c	FUNCTION_6	SWITCH_1	IF_3	CALL_8
0x4000229	      0x488b542420	            mov rdx, qword [rsp + 0x20] 	       578	rdcoff.c	FUNCTION_6	SWITCH_1	IF_3	CALL_8
0x400022e	          0x4c89cf	                             mov rdi, r9	       578	rdcoff.c	FUNCTION_6	SWITCH_1	IF_3	CALL_8
0x4000231	      0xe800000000	                          call 0x4000236	       578	rdcoff.c	FUNCTION_6	SWITCH_1	IF_3	CALL_8
0x4000236	            0x85c0	                           test eax, eax	       567	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1
0x4000238	           0xf95c0	                                setne al	       567	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1
0x400023b	           0xfb6c0	                           movzx eax, al	       567	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1
0x400023e	      0xe9de000000	                           jmp 0x4000321	       567	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1
0x4000243	        0x488b4220	            mov rax, qword [rdx + 0x20] 	       589	rdcoff.c	FUNCTION_6	SWITCH_1	IF_4	CALL_12
0x4000247	        0x4c8b4210	              mov r8, qword [rdx + 0x10]	       588	rdcoff.c	FUNCTION_6	SWITCH_1	IF_4	CALL_11
0x400024b	        0x488b7208	                mov rsi, qword [rdx + 8]	       588	rdcoff.c	FUNCTION_6	SWITCH_1	IF_4	CALL_11
0x400024f	        0x4c034028	              add r8, qword [rax + 0x28]	       588	rdcoff.c	FUNCTION_6	SWITCH_1	IF_4	CALL_11
0x4000253	      0xb905000000	                              mov ecx, 5	       588	rdcoff.c	FUNCTION_6	SWITCH_1	IF_4	CALL_11
0x4000258	      0x488b542420	            mov rdx, qword [rsp + 0x20] 	       588	rdcoff.c	FUNCTION_6	SWITCH_1	IF_4	CALL_11
0x400025d	          0x4c89cf	                             mov rdi, r9	       588	rdcoff.c	FUNCTION_6	SWITCH_1	IF_4	CALL_11
0x4000260	      0xe800000000	                          call 0x4000265	       588	rdcoff.c	FUNCTION_6	SWITCH_1	IF_4	CALL_11
0x4000265	            0x85c0	                           test eax, eax	       567	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1
0x4000267	           0xf95c0	                                setne al	       567	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1
0x400026a	           0xfb6c0	                           movzx eax, al	       567	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1
0x400026d	      0xe9af000000	                           jmp 0x4000321	       567	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1
0x4000272	        0x488b4220	            mov rax, qword [rdx + 0x20] 	       598	rdcoff.c	FUNCTION_6	SWITCH_1	IF_5	CALL_15
0x4000276	        0x4c8b4210	              mov r8, qword [rdx + 0x10]	       597	rdcoff.c	FUNCTION_6	SWITCH_1	IF_5	CALL_14
0x400027a	        0x488b7208	                mov rsi, qword [rdx + 8]	       597	rdcoff.c	FUNCTION_6	SWITCH_1	IF_5	CALL_14
0x400027e	        0x4c034028	              add r8, qword [rax + 0x28]	       597	rdcoff.c	FUNCTION_6	SWITCH_1	IF_5	CALL_14
0x4000282	      0xb901000000	                              mov ecx, 1	       597	rdcoff.c	FUNCTION_6	SWITCH_1	IF_5	CALL_14
0x4000287	      0x488b542420	            mov rdx, qword [rsp + 0x20] 	       597	rdcoff.c	FUNCTION_6	SWITCH_1	IF_5	CALL_14
0x400028c	          0x4c89cf	                             mov rdi, r9	       597	rdcoff.c	FUNCTION_6	SWITCH_1	IF_5	CALL_14
0x400028f	      0xe800000000	                          call 0x4000294	       597	rdcoff.c	FUNCTION_6	SWITCH_1	IF_5	CALL_14
0x4000294	            0x85c0	                           test eax, eax	       567	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1
0x4000296	           0xf95c0	                                setne al	       567	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1
0x4000299	           0xfb6c0	                           movzx eax, al	       567	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1
0x400029c	      0xe980000000	                           jmp 0x4000321	       567	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1
0x40002a1	        0x488b4220	            mov rax, qword [rdx + 0x20] 	       605	rdcoff.c	FUNCTION_6	SWITCH_1	IF_6	CALL_18
0x40002a5	        0x4c8b4210	              mov r8, qword [rdx + 0x10]	       604	rdcoff.c	FUNCTION_6	SWITCH_1	IF_6	CALL_17
0x40002a9	        0x488b7208	                mov rsi, qword [rdx + 8]	       604	rdcoff.c	FUNCTION_6	SWITCH_1	IF_6	CALL_17
0x40002ad	        0x4c034028	              add r8, qword [rax + 0x28]	       604	rdcoff.c	FUNCTION_6	SWITCH_1	IF_6	CALL_17
0x40002b1	      0xb902000000	                              mov ecx, 2	       604	rdcoff.c	FUNCTION_6	SWITCH_1	IF_6	CALL_17
0x40002b6	      0x488b542420	            mov rdx, qword [rsp + 0x20] 	       604	rdcoff.c	FUNCTION_6	SWITCH_1	IF_6	CALL_17
0x40002bb	          0x4c89cf	                             mov rdi, r9	       604	rdcoff.c	FUNCTION_6	SWITCH_1	IF_6	CALL_17
0x40002be	      0xe800000000	                          call 0x40002c3	       604	rdcoff.c	FUNCTION_6	SWITCH_1	IF_6	CALL_17
0x40002c3	            0x85c0	                           test eax, eax	       567	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1
0x40002c5	           0xf95c0	                                setne al	       567	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1
0x40002c8	           0xfb6c0	                           movzx eax, al	       567	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1
0x40002cb	            0xeb54	                           jmp 0x4000321	       567	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1
0x40002cd	        0x488b7208	                mov rsi, qword [rdx + 8]	       610	rdcoff.c	FUNCTION_6	SWITCH_1	CALL_20
0x40002d1	      0x488b542420	            mov rdx, qword [rsp + 0x20] 	       610	rdcoff.c	FUNCTION_6	SWITCH_1	CALL_20
0x40002d6	          0x4c89cf	                             mov rdi, r9	       610	rdcoff.c	FUNCTION_6	SWITCH_1	CALL_20
0x40002d9	      0xe800000000	                          call 0x40002de	       610	rdcoff.c	FUNCTION_6	SWITCH_1	CALL_20
0x40002de	          0x4885c0	                           test rax, rax	       567	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1
0x40002e1	           0xf95c0	                                setne al	       567	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1
0x40002e4	           0xfb6c0	                           movzx eax, al	       567	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1
0x40002e7	            0xeb38	                           jmp 0x4000321	       567	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1
0x40002e9	        0x488b7208	                mov rsi, qword [rdx + 8]	       621	rdcoff.c	FUNCTION_6	SWITCH_1	CALL_22
0x40002ed	      0x488b542420	            mov rdx, qword [rsp + 0x20] 	       621	rdcoff.c	FUNCTION_6	SWITCH_1	CALL_22
0x40002f2	          0x4c89cf	                             mov rdi, r9	       621	rdcoff.c	FUNCTION_6	SWITCH_1	CALL_22
0x40002f5	      0xe800000000	                          call 0x40002fa	       621	rdcoff.c	FUNCTION_6	SWITCH_1	CALL_22
0x40002fa	          0x4989c4	                            mov r12, rax	       621	rdcoff.c	FUNCTION_6	SWITCH_1	CALL_22
0x40002fd	      0xb800000000	                              mov eax, 0	       623	rdcoff.c	FUNCTION_6	SWITCH_1	IF_8
0x4000302	          0x4d85e4	                           test r12, r12	       622	rdcoff.c	FUNCTION_6	SWITCH_1	IF_8
0x4000305	            0x741a	                            je 0x4000321	       622	rdcoff.c	FUNCTION_6	SWITCH_1	IF_8
0x4000307	          0x4889ee	                            mov rsi, rbp	       627	rdcoff.c	FUNCTION_6	SWITCH_1	CALL_23
0x400030a	          0x4889df	                            mov rdi, rbx	       627	rdcoff.c	FUNCTION_6	SWITCH_1	CALL_23
0x400030d	      0xe82efdffff	                  call sym.coff_get_slot	       627	rdcoff.c	FUNCTION_6	SWITCH_1	CALL_23
0x4000312	          0x4c8920	                    mov qword [rax], r12	       628	rdcoff.c	FUNCTION_6	SWITCH_1
0x4000315	      0xb801000000	                              mov eax, 1	       636	rdcoff.c	FUNCTION_6
0x400031a	            0xeb05	                           jmp 0x4000321	       630	rdcoff.c	FUNCTION_6	SWITCH_1
0x400031c	      0xb801000000	                              mov eax, 1	       636	rdcoff.c	FUNCTION_6
0x4000321	              0x5b	                                 pop rbx	       637	rdcoff.c	FUNCTION_6
0x4000322	              0x5d	                                 pop rbp	       637	rdcoff.c	FUNCTION_6
0x4000323	            0x415c	                                 pop r12	       637	rdcoff.c	FUNCTION_6
0x4000325	              0xc3	                                     ret	       637	rdcoff.c	FUNCTION_6
coff_get_slot	ELSE,0:CALL,6:WHILE,1:DO,0:functions,0:SWITCH,0:FOR,0:IF,3	65
0x4000040	            0x4155	                                push r13	       108	rdcoff.c	FUNCTION_1
0x4000042	            0x4154	                                push r12	       108	rdcoff.c	FUNCTION_1
0x4000044	              0x55	                                push rbp	       108	rdcoff.c	FUNCTION_1
0x4000045	              0x53	                                push rbx	       108	rdcoff.c	FUNCTION_1
0x4000046	        0x4883ec08	                              sub rsp, 8	       108	rdcoff.c	FUNCTION_1
0x400004a	          0x4989f4	                            mov r12, rsi	       108	rdcoff.c	FUNCTION_1
0x400004d	    0x4881fe8f3e00	                         cmp rsi, 0x3e8f	       115	rdcoff.c	FUNCTION_1	IF_1
0x4000054	            0x7f14	                            jg 0x400006a	       115	rdcoff.c	FUNCTION_1	IF_1
0x4000056	          0x4889fb	                            mov rbx, rdi	       115	rdcoff.c	FUNCTION_1	IF_1
0x4000059	          0x4889f5	                            mov rbp, rsi	       118	rdcoff.c	FUNCTION_1	WHILE_1
0x400005c	    0x41bd00000000	                             mov r13d, 0	        90	string3.h	FUNCTION_12	CALL_6
0x4000062	        0x4883fe0f	                            cmp rsi, 0xf	       118	rdcoff.c	FUNCTION_1	WHILE_1
0x4000066	            0x7f26	                            jg 0x400008e	       118	rdcoff.c	FUNCTION_1	WHILE_1
0x4000068	            0xeb76	                           jmp 0x40000e0	       118	rdcoff.c	FUNCTION_1	WHILE_1
0x400006a	      0xba05000000	                              mov edx, 5	       116	rdcoff.c	FUNCTION_1	CALL_2
0x400006f	      0xbe00000000	                              mov esi, 0	       116	rdcoff.c	FUNCTION_1	CALL_2
0x4000074	      0xbf00000000	                              mov edi, 0	       116	rdcoff.c	FUNCTION_1	CALL_2
0x4000079	      0xe800000000	                          call 0x400007e	       116	rdcoff.c	FUNCTION_1	CALL_2
0x400007e	          0x4c89e6	                            mov rsi, r12	       116	rdcoff.c	FUNCTION_1	CALL_2
0x4000081	          0x4889c7	                            mov rdi, rax	       116	rdcoff.c	FUNCTION_1	CALL_2
0x4000084	      0xb800000000	                              mov eax, 0	       116	rdcoff.c	FUNCTION_1	CALL_2
0x4000089	      0xe800000000	                          call 0x400008e	       116	rdcoff.c	FUNCTION_1	CALL_2
0x400008e	        0x48833b00	                      cmp qword [rbx], 0	       120	rdcoff.c	FUNCTION_1	WHILE_1	IF_2
0x4000092	            0x753b	                           jne 0x40000cf	       120	rdcoff.c	FUNCTION_1	WHILE_1	IF_2
0x4000094	      0xbf88000000	                           mov edi, 0x88	       122	rdcoff.c	FUNCTION_1	WHILE_1	IF_2	CALL_3
0x4000099	      0xe800000000	                          call 0x400009e	       122	rdcoff.c	FUNCTION_1	WHILE_1	IF_2	CALL_3
0x400009e	          0x488903	                    mov qword [rbx], rax	       122	rdcoff.c	FUNCTION_1	WHILE_1	IF_2	CALL_3
0x40000a1	    0x48c700000000	                      mov qword [rax], 0	        90	string3.h	FUNCTION_12	CALL_6
0x40000a8	    0x48c780800000	               mov qword [rax + 0x80], 0	        90	string3.h	FUNCTION_12	CALL_6
0x40000b3	        0x488d7808	                      lea rdi, [rax + 8]	        90	string3.h	FUNCTION_12	CALL_6
0x40000b7	        0x4883e7f8	             and rdi, 0xfffffffffffffff8	        90	string3.h	FUNCTION_12	CALL_6
0x40000bb	          0x4829f8	                            sub rax, rdi	        90	string3.h	FUNCTION_12	CALL_6
0x40000be	    0x8d8888000000	                   lea ecx, [rax + 0x88]	        90	string3.h	FUNCTION_12	CALL_6
0x40000c4	          0xc1e903	                              shr ecx, 3	        90	string3.h	FUNCTION_12	CALL_6
0x40000c7	            0x89c9	                            mov ecx, ecx	        90	string3.h	FUNCTION_12	CALL_6
0x40000c9	          0x4c89e8	                            mov rax, r13	        90	string3.h	FUNCTION_12	CALL_6
0x40000cc	          0xf348ab	              rep stosq qword [rdi], rax	        90	string3.h	FUNCTION_12	CALL_6
0x40000cf	          0x488b1b	                    mov rbx, qword [rbx]	       125	rdcoff.c	FUNCTION_1	WHILE_1
0x40000d2	        0x4883ed10	                           sub rbp, 0x10	       126	rdcoff.c	FUNCTION_1	WHILE_1
0x40000d6	        0x4883fd0f	                            cmp rbp, 0xf	       118	rdcoff.c	FUNCTION_1	WHILE_1
0x40000da	            0x7fb2	                            jg 0x400008e	       118	rdcoff.c	FUNCTION_1	WHILE_1
0x40000dc	        0x4183e40f	                           and r12d, 0xf	       118	rdcoff.c	FUNCTION_1	WHILE_1
0x40000e0	        0x48833b00	                      cmp qword [rbx], 0	       129	rdcoff.c	FUNCTION_1	IF_3
0x40000e4	            0x753d	                           jne 0x4000123	       129	rdcoff.c	FUNCTION_1	IF_3
0x40000e6	      0xbf88000000	                           mov edi, 0x88	       131	rdcoff.c	FUNCTION_1	IF_3	CALL_5
0x40000eb	      0xe800000000	                          call 0x40000f0	       131	rdcoff.c	FUNCTION_1	IF_3	CALL_5
0x40000f0	          0x488903	                    mov qword [rbx], rax	       131	rdcoff.c	FUNCTION_1	IF_3	CALL_5
0x40000f3	    0x48c700000000	                      mov qword [rax], 0	        90	string3.h	FUNCTION_12	CALL_6
0x40000fa	    0x48c780800000	               mov qword [rax + 0x80], 0	        90	string3.h	FUNCTION_12	CALL_6
0x4000105	        0x488d7808	                      lea rdi, [rax + 8]	        90	string3.h	FUNCTION_12	CALL_6
0x4000109	        0x4883e7f8	             and rdi, 0xfffffffffffffff8	        90	string3.h	FUNCTION_12	CALL_6
0x400010d	          0x4829f8	                            sub rax, rdi	        90	string3.h	FUNCTION_12	CALL_6
0x4000110	    0x8d8888000000	                   lea ecx, [rax + 0x88]	        90	string3.h	FUNCTION_12	CALL_6
0x4000116	          0xc1e903	                              shr ecx, 3	        90	string3.h	FUNCTION_12	CALL_6
0x4000119	            0x89c9	                            mov ecx, ecx	        90	string3.h	FUNCTION_12	CALL_6
0x400011b	      0xb800000000	                              mov eax, 0	        90	string3.h	FUNCTION_12	CALL_6
0x4000120	          0xf348ab	              rep stosq qword [rdi], rax	        90	string3.h	FUNCTION_12	CALL_6
0x4000123	          0x488b03	                    mov rax, qword [rbx]	       135	rdcoff.c	FUNCTION_1
0x4000126	      0x4a8d44e008	              lea rax, [rax + r12*8 + 8]	       135	rdcoff.c	FUNCTION_1
0x400012b	        0x4883c408	                              add rsp, 8	       136	rdcoff.c	FUNCTION_1
0x400012f	              0x5b	                                 pop rbx	       136	rdcoff.c	FUNCTION_1
0x4000130	              0x5d	                                 pop rbp	       136	rdcoff.c	FUNCTION_1
0x4000131	            0x415c	                                 pop r12	       136	rdcoff.c	FUNCTION_1
0x4000133	            0x415d	                                 pop r13	       136	rdcoff.c	FUNCTION_1
0x4000135	              0xc3	                                     ret	       136	rdcoff.c	FUNCTION_1
parse_coff	ELSE,5:CALL,43:WHILE,2:DO,0:functions,0:SWITCH,1:FOR,1:IF,28	397
0x4000c3b	            0x4157	                                push r15	       660	rdcoff.c	FUNCTION_8
0x4000c3d	            0x4156	                                push r14	       660	rdcoff.c	FUNCTION_8
0x4000c3f	            0x4155	                                push r13	       660	rdcoff.c	FUNCTION_8
0x4000c41	            0x4154	                                push r12	       660	rdcoff.c	FUNCTION_8
0x4000c43	              0x55	                                push rbp	       660	rdcoff.c	FUNCTION_8
0x4000c44	              0x53	                                push rbx	       660	rdcoff.c	FUNCTION_8
0x4000c45	    0x4881ec680100	                          sub rsp, 0x168	       660	rdcoff.c	FUNCTION_8
0x4000c4c	          0x4989fc	                            mov r12, rdi	       660	rdcoff.c	FUNCTION_8
0x4000c4f	          0x4989f7	                            mov r15, rsi	       660	rdcoff.c	FUNCTION_8
0x4000c52	      0x4889542410	             mov qword [rsp + 0x10], rdx	       660	rdcoff.c	FUNCTION_8
0x4000c57	          0x4989ce	                            mov r14, rcx	       660	rdcoff.c	FUNCTION_8
0x4000c5a	    0x64488b0c2528	                mov rcx, qword fs:[0x28]	       660	rdcoff.c	FUNCTION_8
0x4000c63	    0x48898c245801	            mov qword [rsp + 0x158], rcx	       660	rdcoff.c	FUNCTION_8
0x4000c6b	            0x31c9	                            xor ecx, ecx	       660	rdcoff.c	FUNCTION_8
0x4000c6d	      0x4889742440	             mov qword [rsp + 0x40], rsi	       673	rdcoff.c	FUNCTION_8
0x4000c72	      0x4889542448	             mov qword [rsp + 0x48], rdx	       674	rdcoff.c	FUNCTION_8
0x4000c77	    0x48c744245000	               mov qword [rsp + 0x50], 0	       675	rdcoff.c	FUNCTION_8
0x4000c80	    0x48c744245800	               mov qword [rsp + 0x58], 0	       676	rdcoff.c	FUNCTION_8
0x4000c89	    0x48c78424c000	               mov qword [rsp + 0xc0], 0	       678	rdcoff.c	FUNCTION_8
0x4000c95	    0x488d8424c800	                   lea rax, [rsp + 0xc8]	       678	rdcoff.c	FUNCTION_8
0x4000c9d	    0x488d94245001	                  lea rdx, [rsp + 0x150]	       678	rdcoff.c	FUNCTION_8
0x4000ca5	    0x48c700000000	                      mov qword [rax], 0	       680	rdcoff.c	FUNCTION_8	FOR_1
0x4000cac	        0x4883c008	                              add rax, 8	       680	rdcoff.c	FUNCTION_8	FOR_1
0x4000cb0	          0x4839c2	                            cmp rdx, rax	       679	rdcoff.c	FUNCTION_8	FOR_1
0x4000cb3	            0x75f0	                           jne 0x4000ca5	       679	rdcoff.c	FUNCTION_8	FOR_1
0x4000cb5	    0x48837c241000	               cmp qword [rsp + 0x10], 0	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4000cbb	     0xf8e38060000	                           jle 0x40012f9	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4000cc1	      0xb800000000	                              mov eax, 0	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4000cc6	    0xc744241c0000	               mov dword [rsp + 0x1c], 0	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4000cce	    0x48c744242800	               mov qword [rsp + 0x28], 0	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4000cd7	    0x48c744243000	               mov qword [rsp + 0x30], 0	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4000ce0	    0xc744243c0000	               mov dword [rsp + 0x3c], 0	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4000ce8	    0xc74424380000	               mov dword [rsp + 0x38], 0	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4000cf0	    0x48c744242000	               mov qword [rsp + 0x20], 0	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4000cf9	    0x48c7442408ff	 mov qword [rsp + 8], 0xffffffffffffffff	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4000d02	        0x498b1cc7	            mov rbx, qword [r15 + rax*8]	       699	rdcoff.c	FUNCTION_8	WHILE_1
0x4000d06	      0x488d542460	                   lea rdx, [rsp + 0x60]	       701	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_1
0x4000d0b	          0x4889de	                            mov rsi, rbx	       701	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_1
0x4000d0e	          0x4c89e7	                            mov rdi, r12	       701	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_1
0x4000d11	      0xe800000000	                          call 0x4000d16	       701	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_1
0x4000d16	            0x85c0	                           test eax, eax	       701	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_1
0x4000d18	            0x7538	                           jne 0x4000d52	       701	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_1
0x4000d1a	      0xe800000000	                          call 0x4000d1f	       703	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_3
0x4000d1f	            0x89c7	                            mov edi, eax	       703	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_3
0x4000d21	      0xe800000000	                          call 0x4000d26	       703	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_3
0x4000d26	          0x4889c3	                            mov rbx, rax	       703	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_3
0x4000d29	      0xba05000000	                              mov edx, 5	       703	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_3
0x4000d2e	      0xbe00000000	                              mov esi, 0	       703	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_3
0x4000d33	      0xbf00000000	                              mov edi, 0	       703	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_3
0x4000d38	      0xe800000000	                          call 0x4000d3d	       703	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_3
0x4000d3d	          0x4889de	                            mov rsi, rbx	       703	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_3
0x4000d40	          0x4889c7	                            mov rdi, rax	       703	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_3
0x4000d43	      0xb800000000	                              mov eax, 0	       703	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_3
0x4000d48	      0xe800000000	                          call 0x4000d4d	       703	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_3
0x4000d4d	      0xe9a0050000	                           jmp 0x40012f2	       705	rdcoff.c	FUNCTION_8	WHILE_1	IF_1
0x4000d52	        0x4c8b6b08	                mov r13, qword [rbx + 8]	       708	rdcoff.c	FUNCTION_8	WHILE_1	CALL_6
0x4000d56	      0x488b6c2458	            mov rbp, qword [rsp + 0x58] 	       710	rdcoff.c	FUNCTION_8	WHILE_1
0x4000d5b	    0x488344245001	               add qword [rsp + 0x50], 1	       712	rdcoff.c	FUNCTION_8	WHILE_1
0x4000d61	     0xfb684248100	           movzx eax, byte [rsp + 0x81] 	       713	rdcoff.c	FUNCTION_8	WHILE_1
0x4000d69	           0xfb6d0	                           movzx edx, al	       713	rdcoff.c	FUNCTION_8	WHILE_1
0x4000d6c	      0x488d541501	                lea rdx, [rbp + rdx + 1]	       713	rdcoff.c	FUNCTION_8	WHILE_1
0x4000d71	      0x4889542458	             mov qword [rsp + 0x58], rdx	       713	rdcoff.c	FUNCTION_8	WHILE_1
0x4000d76	    0x48c704240000	                      mov qword [rsp], 0	       718	rdcoff.c	FUNCTION_8	WHILE_1	IF_2
0x4000d7e	            0x84c0	                             test al, al	       717	rdcoff.c	FUNCTION_8	WHILE_1	IF_2
0x4000d80	            0x7460	                            je 0x4000de2	       717	rdcoff.c	FUNCTION_8	WHILE_1	IF_2
0x4000d82	    0x488d8c249000	                   lea rcx, [rsp + 0x90]	       721	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_7
0x4000d8a	      0xba00000000	                              mov edx, 0	       721	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_7
0x4000d8f	          0x4889de	                            mov rsi, rbx	       721	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_7
0x4000d92	          0x4c89e7	                            mov rdi, r12	       721	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_7
0x4000d95	      0xe800000000	                          call 0x4000d9a	       721	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_7
0x4000d9a	            0x85c0	                           test eax, eax	       721	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_7
0x4000d9c	            0x7538	                           jne 0x4000dd6	       721	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_7
0x4000d9e	      0xe800000000	                          call 0x4000da3	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x4000da3	            0x89c7	                            mov edi, eax	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x4000da5	      0xe800000000	                          call 0x4000daa	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x4000daa	          0x4889c3	                            mov rbx, rax	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x4000dad	      0xba05000000	                              mov edx, 5	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x4000db2	      0xbe00000000	                              mov esi, 0	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x4000db7	      0xbf00000000	                              mov edi, 0	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x4000dbc	      0xe800000000	                          call 0x4000dc1	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x4000dc1	          0x4889de	                            mov rsi, rbx	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x4000dc4	          0x4889c7	                            mov rdi, rax	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x4000dc7	      0xb800000000	                              mov eax, 0	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x4000dcc	      0xe800000000	                          call 0x4000dd1	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x4000dd1	      0xe91c050000	                           jmp 0x40012f2	       725	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3
0x4000dd6	    0x488d84249000	                   lea rax, [rsp + 0x90]	       727	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1
0x4000dde	        0x48890424	                    mov qword [rsp], rax	       727	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1
0x4000de2	      0x483b6c2408	                cmp rbp, qword [rsp + 8]	       730	rdcoff.c	FUNCTION_8	WHILE_1	IF_4
0x4000de7	            0x7523	                           jne 0x4000e0c	       730	rdcoff.c	FUNCTION_8	WHILE_1	IF_4
0x4000de9	    0x80bc24800000	            cmp byte [rsp + 0x80], 0x67 	       730	rdcoff.c	FUNCTION_8	WHILE_1	IF_4
0x4000df1	     0xf8486000000	                            je 0x4000e7d	       730	rdcoff.c	FUNCTION_8	WHILE_1	IF_4
0x4000df7	      0xbe00000000	                              mov esi, 0	       734	rdcoff.c	FUNCTION_8	WHILE_1	IF_4	IF_5	CALL_12
0x4000dfc	          0x4c89f7	                            mov rdi, r14	       734	rdcoff.c	FUNCTION_8	WHILE_1	IF_4	IF_5	CALL_12
0x4000dff	      0xe800000000	                          call 0x4000e04	       734	rdcoff.c	FUNCTION_8	WHILE_1	IF_4	IF_5	CALL_12
0x4000e04	            0x85c0	                           test eax, eax	       734	rdcoff.c	FUNCTION_8	WHILE_1	IF_4	IF_5	CALL_12
0x4000e06	     0xf84e6040000	                            je 0x40012f2	       734	rdcoff.c	FUNCTION_8	WHILE_1	IF_4	IF_5	CALL_12
0x4000e0c	     0xfb684248000	           movzx eax, byte [rsp + 0x80] 	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000e14	            0x3c64	                            cmp al, 0x64	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000e16	     0xf8483030000	                            je 0x400119f	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000e1c	            0x3c64	                            cmp al, 0x64	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000e1e	            0x772e	                            ja 0x4000e4e	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000e20	            0x3c05	                               cmp al, 5	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000e22	     0xf84b3040000	                            je 0x40012db	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000e28	            0x3c05	                               cmp al, 5	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000e2a	            0x770d	                            ja 0x4000e39	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000e2c	            0x3c02	                               cmp al, 2	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000e2e	            0x747b	                            je 0x4000eab	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000e30	            0x3c03	                               cmp al, 3	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000e32	            0x746b	                            je 0x4000e9f	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000e34	      0xe9f0030000	                           jmp 0x4001229	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000e39	            0x3c07	                               cmp al, 7	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000e3b	     0xf849a040000	                            je 0x40012db	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000e41	            0x3c0e	                             cmp al, 0xe	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000e43	     0xf85e0030000	                           jne 0x4001229	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000e49	      0xe98d040000	                           jmp 0x40012db	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000e4e	            0x3c6a	                            cmp al, 0x6a	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000e50	            0x771a	                            ja 0x4000e6c	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000e52	            0x3c68	                            cmp al, 0x68	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000e54	     0xf8381040000	                           jae 0x40012db	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000e5a	            0x3c65	                            cmp al, 0x65	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000e5c	     0xf8433010000	                            je 0x4000f95	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000e62	            0x3c67	                            cmp al, 0x67	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000e64	     0xf85bf030000	                           jne 0x4001229	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000e6a	            0xeb11	                           jmp 0x4000e7d	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000e6c	            0x3c7f	                            cmp al, 0x7f	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000e6e	            0x743b	                            je 0x4000eab	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000e70	            0x3cff	                            cmp al, 0xff	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000e72	     0xf85b1030000	                           jne 0x4001229	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000e78	      0xe95e040000	                           jmp 0x40012db	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000e7d	      0x488b442470	            mov rax, qword [rsp + 0x70] 	       751	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000e82	      0x4889442408	                mov qword [rsp + 8], rax	       751	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000e87	          0x4c89ee	                            mov rsi, r13	       752	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_6	CALL_13
0x4000e8a	          0x4c89f7	                            mov rdi, r14	       752	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_6	CALL_13
0x4000e8d	      0xe800000000	                          call 0x4000e92	       752	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_6	CALL_13
0x4000e92	            0x85c0	                           test eax, eax	       752	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_6	CALL_13
0x4000e94	     0xf8541040000	                           jne 0x40012db	       752	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_6	CALL_13
0x4000e9a	      0xe953040000	                           jmp 0x40012f2	       752	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_6	CALL_13
0x4000e9f	    0x66837c247e00	                cmp word [rsp + 0x7e], 0	       759	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_7
0x4000ea5	     0xf8430040000	                            je 0x40012db	       759	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_7
0x4000eab	    0x440fb744247e	           movzx r8d, word [rsp + 0x7e] 	       764	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_14
0x4000eb1	    0x498b9424f800	            mov rdx, qword [r12 + 0xf8] 	       764	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_14
0x4000eb9	          0x4489c6	                            mov esi, r8d	       764	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_14
0x4000ebc	        0x66237240	               and si, word [rdx + 0x40]	       764	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_14
0x4000ec0	           0xfb7f6	                           movzx esi, si	       764	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_14
0x4000ec3	          0x8b4a3c	            mov ecx, dword [rdx + 0x3c] 	       764	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_14
0x4000ec6	      0xba02000000	                              mov edx, 2	       764	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_14
0x4000ecb	          0x48d3e2	                             shl rdx, cl	       764	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_14
0x4000ece	          0x4839d6	                            cmp rsi, rdx	       764	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_14
0x4000ed1	            0x755b	                           jne 0x4000f2e	       764	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_14
0x4000ed3	           0xfb6c0	                           movzx eax, al	       767	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8
0x4000ed6	        0x89442438	             mov dword [rsp + 0x38], eax	       767	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8
0x4000eda	        0x410fb7c0	                          movzx eax, r8w	       768	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8
0x4000ede	        0x8944243c	             mov dword [rsp + 0x3c], eax	       768	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8
0x4000ee2	    0x48c744243000	               mov qword [rsp + 0x30], 0	       772	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	ELSE_2
0x4000eeb	    0x80bc24810000	                cmp byte [rsp + 0x81], 0	       769	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	IF_9
0x4000ef3	            0x7419	                            je 0x4000f0e	       769	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	IF_9
0x4000ef5	        0x488b4320	            mov rax, qword [rbx + 0x20] 	       770	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_15
0x4000ef9	        0x488b7310	            mov rsi, qword [rbx + 0x10] 	       770	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_15
0x4000efd	        0x48037028	             add rsi, qword [rax + 0x28]	       770	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_15
0x4000f01	    0x4803b4249800	             add rsi, qword [rsp + 0x98]	       770	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_15
0x4000f09	      0x4889742430	             mov qword [rsp + 0x30], rsi	       770	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_15
0x4000f0e	      0x498b442408	                mov rax, qword [r12 + 8]	       773	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_16
0x4000f13	          0x4889de	                            mov rsi, rbx	       773	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_16
0x4000f16	          0x4c89e7	                            mov rdi, r12	       773	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_16
0x4000f19	    0xff9030020000	                call qword [rax + 0x230]	       773	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_16
0x4000f1f	      0x4889442428	             mov qword [rsp + 0x28], rax	       773	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_16
0x4000f24	      0x4c896c2420	             mov qword [rsp + 0x20], r13	       766	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8
0x4000f29	      0xe9ad030000	                           jmp 0x40012db	       774	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8
0x4000f2e	            0x4156	                                push r14	       776	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_17
0x4000f30	            0x6a01	                                  push 1	       776	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_17
0x4000f32	      0x4c8b4c2410	              mov r9, qword [rsp + 0x10]	       776	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_17
0x4000f37	        0x450fb7c0	                          movzx r8d, r8w	       776	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_17
0x4000f3b	          0x4889e9	                            mov rcx, rbp	       776	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_17
0x4000f3e	    0x488d9424d000	                   lea rdx, [rsp + 0xd0]	       776	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_17
0x4000f46	      0x488d742450	                   lea rsi, [rsp + 0x50]	       776	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_17
0x4000f4b	          0x4c89e7	                            mov rdi, r12	       776	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_17
0x4000f4e	      0xe8d3f3ffff	                call sym.parse_coff_type	       776	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_17
0x4000f53	        0x4883c410	                           add rsp, 0x10	       778	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_10
0x4000f57	          0x4885c0	                           test rax, rax	       778	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_10
0x4000f5a	     0xf8492030000	                            je 0x40012f2	       778	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_10
0x4000f60	        0x8b7c241c	            mov edi, dword [rsp + 0x1c] 	       780	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_11	CALL_18
0x4000f64	              0x57	                                push rdi	       780	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_11	CALL_18
0x4000f65	              0x50	                                push rax	       780	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_11	CALL_18
0x4000f66	          0x4d89f1	                             mov r9, r14	       780	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_11	CALL_18
0x4000f69	      0x4c8d442470	                    lea r8, [rsp + 0x70]	       780	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_11	CALL_18
0x4000f6e	          0x4889e9	                            mov rcx, rbp	       780	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_11	CALL_18
0x4000f71	          0x4889da	                            mov rdx, rbx	       780	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_11	CALL_18
0x4000f74	    0x488db424d000	                   lea rsi, [rsp + 0xd0]	       780	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_11	CALL_18
0x4000f7c	          0x4c89e7	                            mov rdi, r12	       780	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_11	CALL_18
0x4000f7f	      0xe8b2f1ffff	              call sym.parse_coff_symbol	       780	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_11	CALL_18
0x4000f84	        0x4883c410	                           add rsp, 0x10	       780	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_11	CALL_18
0x4000f88	            0x85c0	                           test eax, eax	       780	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_11	CALL_18
0x4000f8a	     0xf854b030000	                           jne 0x40012db	       780	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_11	CALL_18
0x4000f90	      0xe95d030000	                           jmp 0x40012f2	       780	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_11	CALL_18
0x4000f95	      0x41807d002e	                    cmp byte [r13], 0x2e	       786	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_19
0x4000f9a	     0xf853b030000	                           jne 0x40012db	       786	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_19
0x4000fa0	      0x410fb64501	               movzx eax, byte [r13 + 1]	       786	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_19
0x4000fa5	            0x3c62	                            cmp al, 0x62	       786	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_19
0x4000fa7	     0xf8566010000	                           jne 0x4001113	       786	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_19
0x4000fad	      0x41807d0266	                cmp byte [r13 + 2], 0x66	       786	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_19
0x4000fb2	     0xf8523030000	                           jne 0x40012db	       786	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_19
0x4000fb8	      0x41807d0300	                   cmp byte [r13 + 3], 0	       786	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_19
0x4000fbd	     0xf8518030000	                           jne 0x40012db	       786	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_19
0x4000fc3	    0x48837c242000	               cmp qword [rsp + 0x20], 0	       788	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_13
0x4000fc9	            0x7529	                           jne 0x4000ff4	       788	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_13
0x4000fcb	      0xba05000000	                              mov edx, 5	       790	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_13	CALL_21
0x4000fd0	      0xbe00000000	                              mov esi, 0	       790	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_13	CALL_21
0x4000fd5	      0xbf00000000	                              mov edi, 0	       790	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_13	CALL_21
0x4000fda	      0xe800000000	                          call 0x4000fdf	       790	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_13	CALL_21
0x4000fdf	          0x4889ee	                            mov rsi, rbp	       790	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_13	CALL_21
0x4000fe2	          0x4889c7	                            mov rdi, rax	       790	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_13	CALL_21
0x4000fe5	      0xb800000000	                              mov eax, 0	       790	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_13	CALL_21
0x4000fea	      0xe800000000	                          call 0x4000fef	       790	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_13	CALL_21
0x4000fef	      0xe9fe020000	                           jmp 0x40012f2	       792	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_13
0x4000ff4	    0x498b9424f800	            mov rdx, qword [r12 + 0xf8] 	       796	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_23
0x4000ffc	          0x8b4a44	            mov ecx, dword [rdx + 0x44] 	       796	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_23
0x4000fff	      0x448b44243c	            mov r8d, dword [rsp + 0x3c] 	       796	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_23
0x4001004	          0x4489c0	                            mov eax, r8d	       796	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_23
0x4001007	            0xd3f8	                             sar eax, cl	       796	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_23
0x4001009	          0x4131c0	                            xor r8d, eax	       795	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_22
0x400100c	        0x44234238	             and r8d, dword [rdx + 0x38]	       795	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_22
0x4001010	            0x4156	                                push r14	       795	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_22
0x4001012	            0x6a00	                                  push 0	       795	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_22
0x4001014	      0x4c8b4c2410	              mov r9, qword [rsp + 0x10]	       795	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_22
0x4001019	          0x4131c0	                            xor r8d, eax	       795	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_22
0x400101c	          0x4889e9	                            mov rcx, rbp	       795	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_22
0x400101f	    0x488d9424d000	                   lea rdx, [rsp + 0xd0]	       795	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_22
0x4001027	      0x488d742450	                   lea rsi, [rsp + 0x50]	       795	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_22
0x400102c	          0x4c89e7	                            mov rdi, r12	       795	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_22
0x400102f	      0xe8f2f2ffff	                call sym.parse_coff_type	       795	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_22
0x4001034	        0x4883c410	                           add rsp, 0x10	       797	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_14
0x4001038	          0x4885c0	                           test rax, rax	       797	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_14
0x400103b	     0xf84b1020000	                            je 0x40012f2	       797	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_14
0x4001041	        0x488b5320	            mov rdx, qword [rbx + 0x20] 	       802	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15	CALL_26
0x4001045	        0x4c8b4310	              mov r8, qword [rbx + 0x10]	       800	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15	CALL_24
0x4001049	        0x4c034228	              add r8, qword [rdx + 0x28]	       800	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15	CALL_24
0x400104d	        0x8b7c2438	            mov edi, dword [rsp + 0x38] 	       644	rdcoff.c	FUNCTION_7	SWITCH_1
0x4001051	          0x83ff02	                              cmp edi, 2	       644	rdcoff.c	FUNCTION_7	SWITCH_1
0x4001054	            0x740a	                            je 0x4001060	       644	rdcoff.c	FUNCTION_7	SWITCH_1
0x4001056	      0xb900000000	                              mov ecx, 0	       652	rdcoff.c	FUNCTION_7
0x400105b	          0x83ff7f	                           cmp edi, 0x7f	       644	rdcoff.c	FUNCTION_7	SWITCH_1
0x400105e	            0x7505	                           jne 0x4001065	       644	rdcoff.c	FUNCTION_7	SWITCH_1
0x4001060	      0xb901000000	                              mov ecx, 1	       648	rdcoff.c	FUNCTION_7	SWITCH_1
0x4001065	          0x4889c2	                            mov rdx, rax	       800	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15	CALL_24
0x4001068	      0x488b742420	            mov rsi, qword [rsp + 0x20] 	       800	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15	CALL_24
0x400106d	          0x4c89f7	                            mov rdi, r14	       800	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15	CALL_24
0x4001070	      0xe800000000	                          call 0x4001075	       800	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15	CALL_24
0x4001075	            0x85c0	                           test eax, eax	       800	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15	CALL_24
0x4001077	     0xf8475020000	                            je 0x40012f2	       800	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15	CALL_24
0x400107d	    0x48837c242800	               cmp qword [rsp + 0x28], 0	       805	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16
0x4001083	     0xf8405020000	                            je 0x400128e	       805	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16
0x4001089	      0xbd00000000	                              mov ebp, 0	       811	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	IF_17
0x400108e	    0x80bc24810000	                cmp byte [rsp + 0x81], 0	       810	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	IF_17
0x4001096	            0x740b	                            je 0x40010a3	       810	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	IF_17
0x4001098	     0xfb7ac249800	           movzx ebp, word [rsp + 0x98] 	       813	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	ELSE_3
0x40010a0	          0x83ed01	                              sub ebp, 1	       813	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	ELSE_3
0x40010a3	        0x488b4320	            mov rax, qword [rbx + 0x20] 	       815	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	CALL_28
0x40010a7	        0x4c8b6828	            mov r13, qword [rax + 0x28] 	       815	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	CALL_28
0x40010ab	      0x488b442428	            mov rax, qword [rsp + 0x28] 	       817	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16
0x40010b0	        0x488d5810	                   lea rbx, [rax + 0x10]	       817	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16
0x40010b4	          0x8b4010	            mov eax, dword [rax + 0x10] 	       819	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2
0x40010b7	            0x85c0	                           test eax, eax	       819	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2
0x40010b9	     0xf84f2010000	                            je 0x40012b1	       819	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2
0x40010bf	          0x4c89ea	                            mov rdx, r13	       821	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2	IF_18	CALL_29
0x40010c2	        0x48035308	                add rdx, qword [rbx + 8]	       821	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2	IF_18	CALL_29
0x40010c6	        0x8d740500	                    lea esi, [rbp + rax]	       821	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2	IF_18	CALL_29
0x40010ca	          0x4c89f7	                            mov rdi, r14	       821	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2	IF_18	CALL_29
0x40010cd	      0xe800000000	                          call 0x40010d2	       821	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2	IF_18	CALL_29
0x40010d2	            0x85c0	                           test eax, eax	       821	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2	IF_18	CALL_29
0x40010d4	     0xf8418020000	                            je 0x40012f2	       821	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2	IF_18	CALL_29
0x40010da	        0x4883c310	                           add rbx, 0x10	       825	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2
0x40010de	            0x8b03	                    mov eax, dword [rbx]	       819	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2
0x40010e0	            0x85c0	                           test eax, eax	       819	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2
0x40010e2	            0x75db	                           jne 0x40010bf	       819	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2
0x40010e4	    0xc744241c0100	               mov dword [rsp + 0x1c], 1	       834	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12
0x40010ec	    0x48c744242800	               mov qword [rsp + 0x28], 0	       830	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12
0x40010f5	    0xc744243c0000	               mov dword [rsp + 0x3c], 0	       832	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12
0x40010fd	    0xc74424380000	               mov dword [rsp + 0x38], 0	       831	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12
0x4001105	    0x48c744242000	               mov qword [rsp + 0x20], 0	       829	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12
0x400110e	      0xe9c8010000	                           jmp 0x40012db	       829	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12
0x4001113	            0x3c65	                            cmp al, 0x65	       836	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	CALL_30
0x4001115	     0xf85c0010000	                           jne 0x40012db	       836	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	CALL_30
0x400111b	      0x41807d0266	                cmp byte [r13 + 2], 0x66	       836	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	CALL_30
0x4001120	     0xf85b5010000	                           jne 0x40012db	       836	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	CALL_30
0x4001126	      0x41807d0300	                   cmp byte [r13 + 3], 0	       836	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	CALL_30
0x400112b	     0xf85aa010000	                           jne 0x40012db	       836	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	CALL_30
0x4001131	      0x837c241c00	               cmp dword [rsp + 0x1c], 0	       838	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20
0x4001136	            0x7529	                           jne 0x4001161	       838	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20
0x4001138	      0xba05000000	                              mov edx, 5	       840	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20	CALL_32
0x400113d	      0xbe00000000	                              mov esi, 0	       840	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20	CALL_32
0x4001142	      0xbf00000000	                              mov edi, 0	       840	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20	CALL_32
0x4001147	      0xe800000000	                          call 0x400114c	       840	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20	CALL_32
0x400114c	          0x4889ee	                            mov rsi, rbp	       840	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20	CALL_32
0x400114f	          0x4889c7	                            mov rdi, rax	       840	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20	CALL_32
0x4001152	      0xb800000000	                              mov eax, 0	       840	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20	CALL_32
0x4001157	      0xe800000000	                          call 0x400115c	       840	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20	CALL_32
0x400115c	      0xe991010000	                           jmp 0x40012f2	       841	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20
0x4001161	        0x488b4320	            mov rax, qword [rbx + 0x20] 	       844	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_21	CALL_33
0x4001165	        0x488b7310	            mov rsi, qword [rbx + 0x10] 	       844	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_21	CALL_33
0x4001169	        0x48037028	             add rsi, qword [rax + 0x28]	       844	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_21	CALL_33
0x400116d	      0x488b442430	            mov rax, qword [rsp + 0x30] 	       846	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_22	CALL_35
0x4001172	          0x4839c6	                            cmp rsi, rax	       846	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_22	CALL_35
0x4001175	        0x480f42f0	                          cmovb rsi, rax	       846	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_22	CALL_35
0x4001179	          0x4c89f7	                            mov rdi, r14	       846	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_22	CALL_35
0x400117c	      0xe800000000	                          call 0x4001181	       846	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_22	CALL_35
0x4001181	            0x85c0	                           test eax, eax	       846	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_22	CALL_35
0x4001183	     0xf8469010000	                            je 0x40012f2	       846	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_22	CALL_35
0x4001189	    0xc744241c0000	               mov dword [rsp + 0x1c], 0	       850	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19
0x4001191	    0x48c744243000	               mov qword [rsp + 0x30], 0	       849	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19
0x400119a	      0xe93c010000	                           jmp 0x40012db	       849	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19
0x400119f	      0x41807d002e	                    cmp byte [r13], 0x2e	       855	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	CALL_36
0x40011a4	     0xf8531010000	                           jne 0x40012db	       855	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	CALL_36
0x40011aa	      0x410fb64501	               movzx eax, byte [r13 + 1]	       855	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	CALL_36
0x40011af	            0x3c62	                            cmp al, 0x62	       855	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	CALL_36
0x40011b1	            0x7537	                           jne 0x40011ea	       855	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	CALL_36
0x40011b3	      0x41807d0262	                cmp byte [r13 + 2], 0x62	       855	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	CALL_36
0x40011b8	     0xf851d010000	                           jne 0x40012db	       855	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	CALL_36
0x40011be	      0x41807d0300	                   cmp byte [r13 + 3], 0	       855	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	CALL_36
0x40011c3	     0xf8512010000	                           jne 0x40012db	       855	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	CALL_36
0x40011c9	        0x488b4320	            mov rax, qword [rbx + 0x20] 	       857	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	IF_24	CALL_38
0x40011cd	        0x488b7310	            mov rsi, qword [rbx + 0x10] 	       857	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	IF_24	CALL_38
0x40011d1	        0x48037028	             add rsi, qword [rax + 0x28]	       857	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	IF_24	CALL_38
0x40011d5	          0x4c89f7	                            mov rdi, r14	       857	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	IF_24	CALL_38
0x40011d8	      0xe800000000	                          call 0x40011dd	       857	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	IF_24	CALL_38
0x40011dd	            0x85c0	                           test eax, eax	       857	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	IF_24	CALL_38
0x40011df	     0xf85f6000000	                           jne 0x40012db	       857	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	IF_24	CALL_38
0x40011e5	      0xe908010000	                           jmp 0x40012f2	       857	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	IF_24	CALL_38
0x40011ea	            0x3c65	                            cmp al, 0x65	       860	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	CALL_39
0x40011ec	     0xf85e9000000	                           jne 0x40012db	       860	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	CALL_39
0x40011f2	      0x41807d0262	                cmp byte [r13 + 2], 0x62	       860	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	CALL_39
0x40011f7	     0xf85de000000	                           jne 0x40012db	       860	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	CALL_39
0x40011fd	      0x41807d0300	                   cmp byte [r13 + 3], 0	       860	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	CALL_39
0x4001202	     0xf85d3000000	                           jne 0x40012db	       860	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	CALL_39
0x4001208	        0x488b4320	            mov rax, qword [rbx + 0x20] 	       862	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	IF_26	CALL_41
0x400120c	        0x488b7310	            mov rsi, qword [rbx + 0x10] 	       862	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	IF_26	CALL_41
0x4001210	        0x48037028	             add rsi, qword [rax + 0x28]	       862	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	IF_26	CALL_41
0x4001214	          0x4c89f7	                            mov rdi, r14	       862	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	IF_26	CALL_41
0x4001217	      0xe800000000	                          call 0x400121c	       862	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	IF_26	CALL_41
0x400121c	            0x85c0	                           test eax, eax	       862	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	IF_26	CALL_41
0x400121e	     0xf85b7000000	                           jne 0x40012db	       862	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	IF_26	CALL_41
0x4001224	      0xe9c9000000	                           jmp 0x40012f2	       862	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	IF_26	CALL_41
0x4001229	            0x4156	                                push r14	       868	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_42
0x400122b	            0x6a01	                                  push 1	       868	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_42
0x400122d	      0x4c8b4c2410	              mov r9, qword [rsp + 0x10]	       868	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_42
0x4001232	    0x440fb784248e	           movzx r8d, word [rsp + 0x8e] 	       868	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_42
0x400123b	          0x4889e9	                            mov rcx, rbp	       868	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_42
0x400123e	    0x488d9424d000	                   lea rdx, [rsp + 0xd0]	       868	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_42
0x4001246	      0x488d742450	                   lea rsi, [rsp + 0x50]	       868	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_42
0x400124b	          0x4c89e7	                            mov rdi, r12	       868	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_42
0x400124e	      0xe8d3f0ffff	                call sym.parse_coff_type	       868	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_42
0x4001253	        0x4883c410	                           add rsp, 0x10	       870	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_27
0x4001257	          0x4885c0	                           test rax, rax	       870	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_27
0x400125a	     0xf8492000000	                            je 0x40012f2	       870	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_27
0x4001260	        0x8b7c241c	            mov edi, dword [rsp + 0x1c] 	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4001264	              0x57	                                push rdi	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4001265	              0x50	                                push rax	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4001266	          0x4d89f1	                             mov r9, r14	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4001269	      0x4c8d442470	                    lea r8, [rsp + 0x70]	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x400126e	          0x4889e9	                            mov rcx, rbp	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4001271	          0x4889da	                            mov rdx, rbx	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4001274	    0x488db424d000	                   lea rsi, [rsp + 0xd0]	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x400127c	          0x4c89e7	                            mov rdi, r12	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x400127f	      0xe8b2eeffff	              call sym.parse_coff_symbol	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4001284	        0x4883c410	                           add rsp, 0x10	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4001288	            0x85c0	                           test eax, eax	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x400128a	            0x754f	                           jne 0x40012db	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x400128c	            0xeb64	                           jmp 0x40012f2	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x400128e	    0xc744241c0100	               mov dword [rsp + 0x1c], 1	       834	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12
0x4001296	    0xc744243c0000	               mov dword [rsp + 0x3c], 0	       832	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12
0x400129e	    0xc74424380000	               mov dword [rsp + 0x38], 0	       831	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12
0x40012a6	    0x48c744242000	               mov qword [rsp + 0x20], 0	       829	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12
0x40012af	            0xeb2a	                           jmp 0x40012db	       829	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12
0x40012b1	    0xc744241c0100	               mov dword [rsp + 0x1c], 1	       834	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12
0x40012b9	    0x48c744242800	               mov qword [rsp + 0x28], 0	       830	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12
0x40012c2	    0xc744243c0000	               mov dword [rsp + 0x3c], 0	       832	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12
0x40012ca	    0xc74424380000	               mov dword [rsp + 0x38], 0	       831	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12
0x40012d2	    0x48c744242000	               mov qword [rsp + 0x20], 0	       829	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12
0x40012db	      0x488b442450	            mov rax, qword [rsp + 0x50] 	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x40012e0	      0x4839442410	            cmp qword [rsp + 0x10], rax 	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x40012e5	     0xf8f17faffff	                            jg 0x4000d02	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x40012eb	      0xb801000000	                              mov eax, 1	       879	rdcoff.c	FUNCTION_8
0x40012f0	            0xeb0c	                           jmp 0x40012fe	       879	rdcoff.c	FUNCTION_8
0x40012f2	      0xb800000000	                              mov eax, 0	       705	rdcoff.c	FUNCTION_8	WHILE_1	IF_1
0x40012f7	            0xeb05	                           jmp 0x40012fe	       705	rdcoff.c	FUNCTION_8	WHILE_1	IF_1
0x40012f9	      0xb801000000	                              mov eax, 1	       879	rdcoff.c	FUNCTION_8
0x40012fe	    0x488b8c245801	           mov rcx, qword [rsp + 0x158] 	       880	rdcoff.c	FUNCTION_8
0x4001306	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       880	rdcoff.c	FUNCTION_8
0x400130f	            0x7405	                            je 0x4001316	       880	rdcoff.c	FUNCTION_8
0x4001311	      0xe800000000	                          call 0x4001316	       880	rdcoff.c	FUNCTION_8
0x4001316	    0x4881c4680100	                          add rsp, 0x168	       880	rdcoff.c	FUNCTION_8
0x400131d	              0x5b	                                 pop rbx	       880	rdcoff.c	FUNCTION_8
0x400131e	              0x5d	                                 pop rbp	       880	rdcoff.c	FUNCTION_8
0x400131f	            0x415c	                                 pop r12	       880	rdcoff.c	FUNCTION_8
0x4001321	            0x415d	                                 pop r13	       880	rdcoff.c	FUNCTION_8
0x4001323	            0x415e	                                 pop r14	       880	rdcoff.c	FUNCTION_8
0x4001325	            0x415f	                                 pop r15	       880	rdcoff.c	FUNCTION_8
0x4001327	              0xc3	                                     ret	       880	rdcoff.c	FUNCTION_8
