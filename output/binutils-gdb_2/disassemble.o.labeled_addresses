disassembler_options_cmp	DO,1:functions,0:FOR,0:SWITCH,0:ELSE,0:WHILE,0:CALL,0:IF,3	26
0x40001b2	        0x4883c601	                              add rsi, 1	       704	disassemble.c	FUNCTION_5
0x40001b6	      0xb900000000	                              mov ecx, 0	       714	disassemble.c	FUNCTION_5	DO_1	IF_2
0x40001bb	        0x4883c701	                              add rdi, 1	       709	disassemble.c	FUNCTION_5	DO_1
0x40001bf	         0xfb647ff	               movzx eax, byte [rdi - 1]	       709	disassemble.c	FUNCTION_5	DO_1
0x40001c3	            0x3c2c	                            cmp al, 0x2c	       710	disassemble.c	FUNCTION_5	DO_1	IF_1
0x40001c5	            0x7425	                            je 0x40001ec	       710	disassemble.c	FUNCTION_5	DO_1	IF_1
0x40001c7	         0xfb656ff	               movzx edx, byte [rsi - 1]	       712	disassemble.c	FUNCTION_5	DO_1
0x40001cb	          0x80fa2c	                            cmp dl, 0x2c	       713	disassemble.c	FUNCTION_5	DO_1	IF_2
0x40001ce	           0xf44d1	                          cmove edx, ecx	       714	disassemble.c	FUNCTION_5	DO_1	IF_2
0x40001d1	            0x84c0	                             test al, al	       715	disassemble.c	FUNCTION_5	DO_1	IF_3
0x40001d3	            0x7506	                           jne 0x40001db	       715	disassemble.c	FUNCTION_5	DO_1	IF_3
0x40001d5	           0xfb6c2	                           movzx eax, dl	       716	disassemble.c	FUNCTION_5	DO_1	IF_3
0x40001d8	            0xf7d8	                                 neg eax	       716	disassemble.c	FUNCTION_5	DO_1	IF_3
0x40001da	              0xc3	                                     ret	       716	disassemble.c	FUNCTION_5	DO_1	IF_3
0x40001db	        0x4883c601	                              add rsi, 1	       716	disassemble.c	FUNCTION_5	DO_1	IF_3
0x40001df	            0x38c2	                              cmp dl, al	       718	disassemble.c	FUNCTION_5
0x40001e1	            0x74d8	                            je 0x40001bb	       718	disassemble.c	FUNCTION_5
0x40001e3	           0xfb6c0	                           movzx eax, al	       720	disassemble.c	FUNCTION_5
0x40001e6	           0xfb6d2	                           movzx edx, dl	       720	disassemble.c	FUNCTION_5
0x40001e9	            0x29d0	                            sub eax, edx	       720	disassemble.c	FUNCTION_5
0x40001eb	              0xc3	                                     ret	       720	disassemble.c	FUNCTION_5
0x40001ec	         0xfb656ff	               movzx edx, byte [rsi - 1]	       712	disassemble.c	FUNCTION_5	DO_1
0x40001f0	          0x80fa2c	                            cmp dl, 0x2c	       713	disassemble.c	FUNCTION_5	DO_1	IF_2
0x40001f3	      0xb800000000	                              mov eax, 0	       714	disassemble.c	FUNCTION_5	DO_1	IF_2
0x40001f8	           0xf44d0	                          cmove edx, eax	       714	disassemble.c	FUNCTION_5	DO_1	IF_2
0x40001fb	            0xebd8	                           jmp 0x40001d5	       714	disassemble.c	FUNCTION_5	DO_1	IF_2
disassembler	DO,0:functions,0:FOR,0:SWITCH,1:ELSE,8:WHILE,0:CALL,3:IF,8	6
0x4000040	          0x83ef08	                              sub edi, 8	       115	disassemble.c	FUNCTION_1	SWITCH_1
0x4000043	          0x83ff03	                              cmp edi, 3	       115	disassemble.c	FUNCTION_1	SWITCH_1
0x4000046	      0xba00000000	                              mov edx, 0	       533	disassemble.c	FUNCTION_1	ELSE_8
0x400004b	      0xb800000000	                              mov eax, 0	       533	disassemble.c	FUNCTION_1	ELSE_8
0x4000050	        0x480f47c2	                          cmova rax, rdx	       533	disassemble.c	FUNCTION_1	ELSE_8
0x4000054	              0xc3	                                     ret	       534	disassemble.c	FUNCTION_1	ELSE_8
disassembler_usage	DO,0:functions,0:FOR,0:SWITCH,0:ELSE,0:WHILE,0:CALL,10:IF,0	4
0x4000055	        0x4883ec08	                              sub rsp, 8	       538	disassemble.c	ELSE_8	FUNCTION_2
0x4000059	      0xe800000000	                          call 0x400005e	       561	disassemble.c	ELSE_8	FUNCTION_2	CALL_8
0x400005e	        0x4883c408	                              add rsp, 8	       571	disassemble.c	ELSE_8	FUNCTION_2
0x4000062	              0xc3	                                     ret	       571	disassemble.c	ELSE_8	FUNCTION_2
remove_whitespace_and_extra_commas	DO,0:functions,0:FOR,3:SWITCH,0:ELSE,0:WHILE,1:CALL,6:IF,5	105
0x4000065	          0x4885ff	                           test rdi, rdi	       667	disassemble.c	FUNCTION_4	IF_1
0x4000068	     0xf842d010000	                            je 0x400019b	       667	disassemble.c	FUNCTION_4	IF_1
0x400006e	          0x4889fe	                            mov rsi, rdi	       667	disassemble.c	FUNCTION_4	IF_1
0x4000071	      0xb800000000	                              mov eax, 0	       671	disassemble.c	FUNCTION_4	FOR_1	CALL_1
0x4000076	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	       671	disassemble.c	FUNCTION_4	FOR_1	CALL_1
0x400007d	            0xf2ae	              repne scasb al, byte [rdi]	       671	disassemble.c	FUNCTION_4	FOR_1	CALL_1
0x400007f	          0x48f7d1	                                 not rcx	       671	disassemble.c	FUNCTION_4	FOR_1	CALL_1
0x4000082	        0x4883e901	                              sub rcx, 1	       671	disassemble.c	FUNCTION_4	FOR_1	CALL_1
0x4000086	            0x743e	                            je 0x40000c6	       671	disassemble.c	FUNCTION_4	FOR_1	CALL_1
0x4000088	        0x488d41ff	                      lea rax, [rcx - 1]	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x400008c	        0x488d3c06	                    lea rdi, [rsi + rax]	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x4000090	           0xfb617	                   movzx edx, byte [rdi]	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x4000093	        0x440fb6c2	                           movzx r8d, dl	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x4000097	    0x43f684000000	               test byte [r8 + r8], 0x40	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x40000a0	            0x7505	                           jne 0x40000a7	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x40000a2	          0x80fa2c	                            cmp dl, 0x2c	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x40000a5	            0x751f	                           jne 0x40000c6	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x40000a7	          0x4829cf	                            sub rdi, rcx	       675	disassemble.c	FUNCTION_4	FOR_1
0x40000aa	            0xeb2a	                           jmp 0x40000d6	       675	disassemble.c	FUNCTION_4	FOR_1
0x40000ac	        0x4883e801	                              sub rax, 1	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x40000b0	         0xfb61406	             movzx edx, byte [rsi + rax]	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x40000b4	           0xfb6ca	                           movzx ecx, dl	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x40000b7	    0xf68409000000	            test byte [rcx + rcx], 0x40 	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x40000bf	            0x7515	                           jne 0x40000d6	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x40000c1	          0x80fa2c	                            cmp dl, 0x2c	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x40000c4	            0x7410	                            je 0x40000d6	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x40000c6	           0xfb606	                   movzx eax, byte [rsi]	       679	disassemble.c	FUNCTION_4	FOR_2
0x40000c9	          0x4889f2	                            mov rdx, rsi	       679	disassemble.c	FUNCTION_4	FOR_2
0x40000cc	            0x84c0	                             test al, al	       679	disassemble.c	FUNCTION_4	FOR_2
0x40000ce	            0x7512	                           jne 0x40000e2	       679	disassemble.c	FUNCTION_4	FOR_2
0x40000d0	      0xb800000000	                              mov eax, 0	       696	disassemble.c	FUNCTION_4	CALL_6
0x40000d5	              0xc3	                                     ret	       696	disassemble.c	FUNCTION_4	CALL_6
0x40000d6	      0xc644070100	             mov byte [rdi + rax + 1], 0	       675	disassemble.c	FUNCTION_4	FOR_1
0x40000db	          0x4885c0	                           test rax, rax	       671	disassemble.c	FUNCTION_4	FOR_1	CALL_1
0x40000de	            0x75cc	                           jne 0x40000ac	       671	disassemble.c	FUNCTION_4	FOR_1	CALL_1
0x40000e0	            0xebe4	                           jmp 0x40000c6	       671	disassemble.c	FUNCTION_4	FOR_1	CALL_1
0x40000e2	           0xfb6c0	                           movzx eax, al	       680	disassemble.c	FUNCTION_4	FOR_2	IF_3	CALL_3
0x40000e5	    0xf68400000000	            test byte [rax + rax], 0x40 	       680	disassemble.c	FUNCTION_4	FOR_2	IF_3	CALL_3
0x40000ed	            0x7403	                            je 0x40000f2	       680	disassemble.c	FUNCTION_4	FOR_2	IF_3	CALL_3
0x40000ef	          0xc6022c	                    mov byte [rdx], 0x2c	       681	disassemble.c	FUNCTION_4	FOR_2	IF_3
0x40000f2	        0x4883c201	                              add rdx, 1	       679	disassemble.c	FUNCTION_4	FOR_2
0x40000f6	           0xfb602	                   movzx eax, byte [rdx]	       679	disassemble.c	FUNCTION_4	FOR_2
0x40000f9	            0x84c0	                             test al, al	       679	disassemble.c	FUNCTION_4	FOR_2
0x40000fb	            0x75e5	                           jne 0x40000e2	       679	disassemble.c	FUNCTION_4	FOR_2
0x40000fd	           0xfb616	                   movzx edx, byte [rsi]	       684	disassemble.c	FUNCTION_4	FOR_3
0x4000100	            0x84d2	                             test dl, dl	       684	disassemble.c	FUNCTION_4	FOR_3
0x4000102	     0xf8499000000	                            je 0x40001a1	       684	disassemble.c	FUNCTION_4	FOR_3
0x4000108	            0x4155	                                push r13	       663	disassemble.c	FUNCTION_4
0x400010a	            0x4154	                                push r12	       663	disassemble.c	FUNCTION_4
0x400010c	              0x55	                                push rbp	       663	disassemble.c	FUNCTION_4
0x400010d	              0x53	                                push rbx	       663	disassemble.c	FUNCTION_4
0x400010e	        0x4883ec08	                              sub rsp, 8	       663	disassemble.c	FUNCTION_4
0x4000112	          0x4889f5	                            mov rbp, rsi	       663	disassemble.c	FUNCTION_4
0x4000115	          0x4889f3	                            mov rbx, rsi	       684	disassemble.c	FUNCTION_4	FOR_3
0x4000118	    0x49c7c4ffffff	             mov r12, 0xffffffffffffffff	       690	disassemble.c	FUNCTION_4	FOR_3	IF_4	CALL_4
0x400011f	            0xeb03	                           jmp 0x4000124	       690	disassemble.c	FUNCTION_4	FOR_3	IF_4	CALL_4
0x4000121	          0x4889cb	                            mov rbx, rcx	       684	disassemble.c	FUNCTION_4	FOR_3
0x4000124	          0x80fa2c	                            cmp dl, 0x2c	       685	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x4000127	            0x7557	                           jne 0x4000180	       685	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x4000129	         0xfb64301	               movzx eax, byte [rbx + 1]	       685	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x400012d	          0x4839dd	                            cmp rbp, rbx	       685	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x4000130	            0x7404	                            je 0x4000136	       685	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x4000132	            0x3c2c	                            cmp al, 0x2c	       685	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x4000134	            0x754a	                           jne 0x4000180	       685	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x4000136	        0x488d5301	                      lea rdx, [rbx + 1]	       687	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x400013a	            0x3c2c	                            cmp al, 0x2c	       688	disassemble.c	FUNCTION_4	FOR_3	IF_4	WHILE_1
0x400013c	            0x750e	                           jne 0x400014c	       688	disassemble.c	FUNCTION_4	FOR_3	IF_4	WHILE_1
0x400013e	          0x4889d6	                            mov rsi, rdx	       688	disassemble.c	FUNCTION_4	FOR_3	IF_4	WHILE_1
0x4000141	        0x4883c601	                              add rsi, 1	       689	disassemble.c	FUNCTION_4	FOR_3	IF_4	WHILE_1
0x4000145	          0x803e2c	                    cmp byte [rsi], 0x2c	       688	disassemble.c	FUNCTION_4	FOR_3	IF_4	WHILE_1
0x4000148	            0x74f7	                            je 0x4000141	       688	disassemble.c	FUNCTION_4	FOR_3	IF_4	WHILE_1
0x400014a	            0xeb03	                           jmp 0x400014f	       688	disassemble.c	FUNCTION_4	FOR_3	IF_4	WHILE_1
0x400014c	          0x4889d6	                            mov rsi, rdx	       687	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x400014f	      0xb800000000	                              mov eax, 0	       690	disassemble.c	FUNCTION_4	FOR_3	IF_4	CALL_4
0x4000154	          0x4c89e1	                            mov rcx, r12	       690	disassemble.c	FUNCTION_4	FOR_3	IF_4	CALL_4
0x4000157	          0x4889f7	                            mov rdi, rsi	       690	disassemble.c	FUNCTION_4	FOR_3	IF_4	CALL_4
0x400015a	            0xf2ae	              repne scasb al, byte [rdi]	       690	disassemble.c	FUNCTION_4	FOR_3	IF_4	CALL_4
0x400015c	          0x4889c8	                            mov rax, rcx	       690	disassemble.c	FUNCTION_4	FOR_3	IF_4	CALL_4
0x400015f	          0x48f7d0	                                 not rax	       690	disassemble.c	FUNCTION_4	FOR_3	IF_4	CALL_4
0x4000162	        0x4c8d68ff	                      lea r13, [rax - 1]	       690	disassemble.c	FUNCTION_4	FOR_3	IF_4	CALL_4
0x4000166	          0x4839dd	                            cmp rbp, rbx	       692	disassemble.c	FUNCTION_4	FOR_3	IF_4	IF_5
0x4000169	          0x4889d3	                            mov rbx, rdx	       692	disassemble.c	FUNCTION_4	FOR_3	IF_4	IF_5
0x400016c	        0x480f44dd	                          cmove rbx, rbp	       692	disassemble.c	FUNCTION_4	FOR_3	IF_4	IF_5
0x4000170	          0x4c89ea	                            mov rdx, r13	        59	string3.h	FUNCTION_7	CALL_3
0x4000173	          0x4889df	                            mov rdi, rbx	        59	string3.h	FUNCTION_7	CALL_3
0x4000176	      0xe800000000	                          call 0x400017b	        59	string3.h	FUNCTION_7	CALL_3
0x400017b	      0x42c6042b00	                 mov byte [rbx + r13], 0	       694	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x4000180	        0x488d4b01	                      lea rcx, [rbx + 1]	       684	disassemble.c	FUNCTION_4	FOR_3
0x4000184	         0xfb65301	               movzx edx, byte [rbx + 1]	       684	disassemble.c	FUNCTION_4	FOR_3
0x4000188	            0x84d2	                             test dl, dl	       684	disassemble.c	FUNCTION_4	FOR_3
0x400018a	            0x7595	                           jne 0x4000121	       684	disassemble.c	FUNCTION_4	FOR_3
0x400018c	        0x807d0000	                       cmp byte [rbp], 0	       696	disassemble.c	FUNCTION_4	CALL_6
0x4000190	      0xb800000000	                              mov eax, 0	       696	disassemble.c	FUNCTION_4	CALL_6
0x4000195	        0x480f45c5	                         cmovne rax, rbp	       696	disassemble.c	FUNCTION_4	CALL_6
0x4000199	            0xeb0c	                           jmp 0x40001a7	       696	disassemble.c	FUNCTION_4	CALL_6
0x400019b	      0xb800000000	                              mov eax, 0	       668	disassemble.c	FUNCTION_4	IF_1
0x40001a0	              0xc3	                                     ret	       668	disassemble.c	FUNCTION_4	IF_1
0x40001a1	      0xb800000000	                              mov eax, 0	       696	disassemble.c	FUNCTION_4	CALL_6
0x40001a6	              0xc3	                                     ret	       696	disassemble.c	FUNCTION_4	CALL_6
0x40001a7	        0x4883c408	                              add rsp, 8	       697	disassemble.c	FUNCTION_4
0x40001ab	              0x5b	                                 pop rbx	       697	disassemble.c	FUNCTION_4
0x40001ac	              0x5d	                                 pop rbp	       697	disassemble.c	FUNCTION_4
0x40001ad	            0x415c	                                 pop r12	       697	disassemble.c	FUNCTION_4
0x40001af	            0x415d	                                 pop r13	       697	disassemble.c	FUNCTION_4
0x40001b1	              0xc3	                                     ret	       697	disassemble.c	FUNCTION_4
disassemble_init_for_target	DO,0:functions,0:FOR,0:SWITCH,1:ELSE,1:WHILE,0:CALL,6:IF,3	1
0x4000063	            0xf3c3	                                     ret	       575	disassemble.c	FUNCTION_3
