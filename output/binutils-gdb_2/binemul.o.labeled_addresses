ar_emul_default_usage	DO,0:SWITCH,0:FOR,0:ELSE,0:WHILE,0:functions,0:IF,0:CALL,2	22
0x400005e	              0x53	                                push rbx	        35	binemul.c	FUNCTION_2
0x400005f	          0x4889fb	                            mov rbx, rdi	        35	binemul.c	FUNCTION_2
0x4000062	      0xba05000000	                              mov edx, 5	        36	binemul.c	FUNCTION_2	CALL_1
0x4000067	      0xbe00000000	                              mov esi, 0	        36	binemul.c	FUNCTION_2	CALL_1
0x400006c	      0xbf00000000	                              mov edi, 0	        36	binemul.c	FUNCTION_2	CALL_1
0x4000071	      0xe800000000	                          call 0x4000076	        36	binemul.c	FUNCTION_2	CALL_1
0x4000076	          0x4889c2	                            mov rdx, rax	        97	stdio2.h	CALL_9
0x4000079	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_9
0x400007e	          0x4889df	                            mov rdi, rbx	        97	stdio2.h	CALL_9
0x4000081	      0xb800000000	                              mov eax, 0	        97	stdio2.h	CALL_9
0x4000086	      0xe800000000	                          call 0x400008b	        97	stdio2.h	CALL_9
0x400008b	      0xba05000000	                              mov edx, 5	        38	binemul.c	FUNCTION_2	CALL_2
0x4000090	      0xbe00000000	                              mov esi, 0	        38	binemul.c	FUNCTION_2	CALL_2
0x4000095	      0xbf00000000	                              mov edi, 0	        38	binemul.c	FUNCTION_2	CALL_2
0x400009a	      0xe800000000	                          call 0x400009f	        38	binemul.c	FUNCTION_2	CALL_2
0x400009f	          0x4889c2	                            mov rdx, rax	        97	stdio2.h	CALL_9
0x40000a2	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_9
0x40000a7	          0x4889df	                            mov rdi, rbx	        97	stdio2.h	CALL_9
0x40000aa	      0xb800000000	                              mov eax, 0	        97	stdio2.h	CALL_9
0x40000af	      0xe800000000	                          call 0x40000b4	        97	stdio2.h	CALL_9
0x40000b4	              0x5b	                                 pop rbx	        39	binemul.c	FUNCTION_2
0x40000b5	              0xc3	                                     ret	        39	binemul.c	FUNCTION_2
ar_emul_default_parse_arg	DO,0:SWITCH,0:FOR,0:ELSE,0:WHILE,0:functions,0:IF,0:CALL,0	2
0x40002a8	      0xb800000000	                              mov eax, 0	       148	binemul.c	FUNCTION_10
0x40002ad	              0xc3	                                     ret	       148	binemul.c	FUNCTION_10
ar_emul_default_append	DO,0:SWITCH,0:FOR,0:ELSE,0:WHILE,0:functions,0:IF,0:CALL,3	28
0x40001b4	            0x4155	                                push r13	        99	binemul.c	FUNCTION_6
0x40001b6	            0x4154	                                push r12	        99	binemul.c	FUNCTION_6
0x40001b8	              0x55	                                push rbp	        99	binemul.c	FUNCTION_6
0x40001b9	              0x53	                                push rbx	        99	binemul.c	FUNCTION_6
0x40001ba	        0x4883ec08	                              sub rsp, 8	        99	binemul.c	FUNCTION_6
0x40001be	          0x4889fd	                            mov rbp, rdi	        99	binemul.c	FUNCTION_6
0x40001c1	          0x4889f3	                            mov rbx, rsi	        99	binemul.c	FUNCTION_6
0x40001c4	          0x4189cc	                           mov r12d, ecx	        99	binemul.c	FUNCTION_6
0x40001c7	          0x4589c5	                           mov r13d, r8d	        99	binemul.c	FUNCTION_6
0x40001ca	          0x4889d6	                            mov rsi, rdx	       102	binemul.c	FUNCTION_6	CALL_1
0x40001cd	          0x4889df	                            mov rdi, rbx	       102	binemul.c	FUNCTION_6	CALL_1
0x40001d0	      0xe800000000	                          call 0x40001d5	       102	binemul.c	FUNCTION_6	CALL_1
0x40001d5	          0x4885c0	                           test rax, rax	       103	binemul.c	FUNCTION_6	CALL_2
0x40001d8	            0x7508	                           jne 0x40001e2	       103	binemul.c	FUNCTION_6	CALL_2
0x40001da	          0x4889df	                            mov rdi, rbx	       103	binemul.c	FUNCTION_6	CALL_2
0x40001dd	      0xe800000000	                          call 0x40001e2	       103	binemul.c	FUNCTION_6	CALL_2
0x40001e2	    0x41b800000000	                              mov r8d, 0	       104	binemul.c	FUNCTION_6	CALL_3
0x40001e8	          0x4489e9	                           mov ecx, r13d	       104	binemul.c	FUNCTION_6	CALL_3
0x40001eb	          0x4489e2	                           mov edx, r12d	       104	binemul.c	FUNCTION_6	CALL_3
0x40001ee	          0x4889c6	                            mov rsi, rax	       104	binemul.c	FUNCTION_6	CALL_3
0x40001f1	          0x4889ef	                            mov rdi, rbp	       104	binemul.c	FUNCTION_6	CALL_3
0x40001f4	      0xe800000000	                          call 0x40001f9	       104	binemul.c	FUNCTION_6	CALL_3
0x40001f9	        0x4883c408	                              add rsp, 8	       105	binemul.c	FUNCTION_6
0x40001fd	              0x5b	                                 pop rbx	       105	binemul.c	FUNCTION_6
0x40001fe	              0x5d	                                 pop rbp	       105	binemul.c	FUNCTION_6
0x40001ff	            0x415c	                                 pop r12	       105	binemul.c	FUNCTION_6
0x4000201	            0x415d	                                 pop r13	       105	binemul.c	FUNCTION_6
0x4000203	              0xc3	                                     ret	       105	binemul.c	FUNCTION_6
any_ok	DO,0:SWITCH,0:FOR,0:ELSE,0:WHILE,0:functions,0:IF,0:CALL,0	2
0x4000040	      0xb801000000	                              mov eax, 1	        56	binemul.c	FUNCTION_4
0x4000045	              0xc3	                                     ret	        56	binemul.c	FUNCTION_4
ar_emul_append	DO,0:SWITCH,0:FOR,0:ELSE,0:WHILE,0:functions,0:IF,1:CALL,1	8
0x40000b6	    0x4c8b0d000000	              mov r9, qword [0x040000bd]	        45	binemul.c	FUNCTION_3	IF_1
0x40000bd	      0xb800000000	                              mov eax, 0	        49	binemul.c	FUNCTION_3
0x40000c2	          0x4d85c9	                             test r9, r9	        45	binemul.c	FUNCTION_3	IF_1
0x40000c5	            0x740b	                            je 0x40000d2	        45	binemul.c	FUNCTION_3	IF_1
0x40000c7	        0x4883ec08	                              sub rsp, 8	        44	binemul.c	FUNCTION_3
0x40000cb	          0x41ffd1	                                 call r9	        46	binemul.c	FUNCTION_3	IF_1	CALL_1
0x40000ce	        0x4883c408	                              add rsp, 8	        50	binemul.c	FUNCTION_3
0x40000d2	            0xf3c3	                                     ret	        50	binemul.c	FUNCTION_3
ar_emul_parse_arg	DO,0:SWITCH,0:FOR,0:ELSE,0:WHILE,0:functions,0:IF,1:CALL,1	8
0x400028b	    0x488b15000000	            mov rdx, qword [0x04000292] 	       138	binemul.c	FUNCTION_9	IF_1
0x4000292	      0xb800000000	                              mov eax, 0	       141	binemul.c	FUNCTION_9
0x4000297	          0x4885d2	                           test rdx, rdx	       138	binemul.c	FUNCTION_9	IF_1
0x400029a	            0x740a	                            je 0x40002a6	       138	binemul.c	FUNCTION_9	IF_1
0x400029c	        0x4883ec08	                              sub rsp, 8	       137	binemul.c	FUNCTION_9
0x40002a0	            0xffd2	                                call rdx	       139	binemul.c	FUNCTION_9	CALL_1
0x40002a2	        0x4883c408	                              add rsp, 8	       142	binemul.c	FUNCTION_9
0x40002a6	            0xf3c3	                                     ret	       142	binemul.c	FUNCTION_9
do_ar_emul_append	DO,0:SWITCH,0:FOR,1:ELSE,0:WHILE,0:functions,0:IF,3:CALL,7	69
0x40000d4	            0x4157	                                push r15	        62	binemul.c	FUNCTION_5
0x40000d6	            0x4156	                                push r14	        62	binemul.c	FUNCTION_5
0x40000d8	            0x4155	                                push r13	        62	binemul.c	FUNCTION_5
0x40000da	            0x4154	                                push r12	        62	binemul.c	FUNCTION_5
0x40000dc	              0x55	                                push rbp	        62	binemul.c	FUNCTION_5
0x40000dd	              0x53	                                push rbx	        62	binemul.c	FUNCTION_5
0x40000de	        0x4883ec08	                              sub rsp, 8	        62	binemul.c	FUNCTION_5
0x40000e2	          0x4889fb	                            mov rbx, rdi	        62	binemul.c	FUNCTION_5
0x40000e5	          0x4989f4	                            mov r12, rsi	        62	binemul.c	FUNCTION_5
0x40000e8	          0x4189d6	                           mov r14d, edx	        62	binemul.c	FUNCTION_5
0x40000eb	          0x4d89c7	                             mov r15, r8	        62	binemul.c	FUNCTION_5
0x40000ee	            0x85c9	                           test ecx, ecx	        65	binemul.c	FUNCTION_5	IF_1	CALL_2
0x40000f0	            0x7472	                            je 0x4000164	        65	binemul.c	FUNCTION_5	IF_1	CALL_2
0x40000f2	      0xbe02000000	                              mov esi, 2	        65	binemul.c	FUNCTION_5	IF_1	CALL_2
0x40000f7	          0x4c89e7	                            mov rdi, r12	        65	binemul.c	FUNCTION_5	IF_1	CALL_2
0x40000fa	      0xe800000000	                          call 0x40000ff	        65	binemul.c	FUNCTION_5	IF_1	CALL_2
0x40000ff	            0x85c0	                           test eax, eax	        65	binemul.c	FUNCTION_5	IF_1	CALL_2
0x4000101	            0x7461	                            je 0x4000164	        65	binemul.c	FUNCTION_5	IF_1	CALL_2
0x4000103	      0xbe00000000	                              mov esi, 0	        70	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_3
0x4000108	          0x4c89e7	                            mov rdi, r12	        70	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_3
0x400010b	      0xe800000000	                          call 0x4000110	        70	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_3
0x4000110	          0x4889c5	                            mov rbp, rax	        70	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_3
0x4000113	          0x4885c0	                           test rax, rax	        70	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_3
0x4000116	     0xf8484000000	                            je 0x40001a0	        70	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_3
0x400011c	    0x41bd00000000	                             mov r13d, 0	        70	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_3
0x4000122	          0x4d89f8	                             mov r8, r15	        74	binemul.c	FUNCTION_5	IF_1	FOR_1	IF_2	CALL_5
0x4000125	      0xb901000000	                              mov ecx, 1	        74	binemul.c	FUNCTION_5	IF_1	FOR_1	IF_2	CALL_5
0x400012a	          0x4489f2	                           mov edx, r14d	        74	binemul.c	FUNCTION_5	IF_1	FOR_1	IF_2	CALL_5
0x400012d	          0x4889ee	                            mov rsi, rbp	        74	binemul.c	FUNCTION_5	IF_1	FOR_1	IF_2	CALL_5
0x4000130	          0x4889df	                            mov rdi, rbx	        74	binemul.c	FUNCTION_5	IF_1	FOR_1	IF_2	CALL_5
0x4000133	      0xe800000000	                          call 0x4000138	        74	binemul.c	FUNCTION_5	IF_1	FOR_1	IF_2	CALL_5
0x4000138	            0x85c0	                           test eax, eax	        74	binemul.c	FUNCTION_5	IF_1	FOR_1	IF_2	CALL_5
0x400013a	            0x7410	                            je 0x400014c	        74	binemul.c	FUNCTION_5	IF_1	FOR_1	IF_2	CALL_5
0x400013c	          0x488b1b	                    mov rbx, qword [rbx]	        77	binemul.c	FUNCTION_5	IF_1	FOR_1	IF_2
0x400013f	    0x4881c3d80000	                           add rbx, 0xd8	        77	binemul.c	FUNCTION_5	IF_1	FOR_1	IF_2
0x4000146	    0x41bd01000000	                             mov r13d, 1	        76	binemul.c	FUNCTION_5	IF_1	FOR_1	IF_2
0x400014c	          0x4889ee	                            mov rsi, rbp	        72	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_4
0x400014f	          0x4c89e7	                            mov rdi, r12	        72	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_4
0x4000152	      0xe800000000	                          call 0x4000157	        72	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_4
0x4000157	          0x4889c5	                            mov rbp, rax	        72	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_4
0x400015a	          0x4885c0	                           test rax, rax	        70	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_3
0x400015d	            0x75c3	                           jne 0x4000122	        70	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_3
0x400015f	          0x4489e8	                           mov eax, r13d	        70	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_3
0x4000162	            0xeb41	                           jmp 0x40001a5	        70	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_3
0x4000164	          0x4c89e7	                            mov rdi, r12	        84	binemul.c	FUNCTION_5	IF_3	CALL_6
0x4000167	          0x41ffd7	                                call r15	        84	binemul.c	FUNCTION_5	IF_3	CALL_6
0x400016a	            0x85c0	                           test eax, eax	        84	binemul.c	FUNCTION_5	IF_3	CALL_6
0x400016c	            0x7437	                            je 0x40001a5	        84	binemul.c	FUNCTION_5	IF_3	CALL_6
0x400016e	          0x4585f6	                         test r14d, r14d	        87	binemul.c	FUNCTION_5	CALL_7
0x4000171	            0x7418	                            je 0x400018b	        87	binemul.c	FUNCTION_5	CALL_7
0x4000173	        0x498b1424	                    mov rdx, qword [r12]	       104	stdio2.h	CALL_12
0x4000177	      0xbe00000000	                              mov esi, 0	       104	stdio2.h	CALL_12
0x400017c	      0xbf01000000	                              mov edi, 1	       104	stdio2.h	CALL_12
0x4000181	      0xb800000000	                              mov eax, 0	       104	stdio2.h	CALL_12
0x4000186	      0xe800000000	                          call 0x400018b	       104	stdio2.h	CALL_12
0x400018b	          0x488b03	                    mov rax, qword [rbx]	        89	binemul.c	FUNCTION_5
0x400018e	    0x49898424d800	             mov qword [r12 + 0xd8], rax	        89	binemul.c	FUNCTION_5
0x4000196	          0x4c8923	                    mov qword [rbx], r12	        90	binemul.c	FUNCTION_5
0x4000199	      0xb801000000	                              mov eax, 1	        92	binemul.c	FUNCTION_5
0x400019e	            0xeb05	                           jmp 0x40001a5	        92	binemul.c	FUNCTION_5
0x40001a0	      0xb800000000	                              mov eax, 0	        68	binemul.c	FUNCTION_5	IF_1
0x40001a5	        0x4883c408	                              add rsp, 8	        93	binemul.c	FUNCTION_5
0x40001a9	              0x5b	                                 pop rbx	        93	binemul.c	FUNCTION_5
0x40001aa	              0x5d	                                 pop rbp	        93	binemul.c	FUNCTION_5
0x40001ab	            0x415c	                                 pop r12	        93	binemul.c	FUNCTION_5
0x40001ad	            0x415d	                                 pop r13	        93	binemul.c	FUNCTION_5
0x40001af	            0x415e	                                 pop r14	        93	binemul.c	FUNCTION_5
0x40001b1	            0x415f	                                 pop r15	        93	binemul.c	FUNCTION_5
0x40001b3	              0xc3	                                     ret	        93	binemul.c	FUNCTION_5
ar_emul_default_replace	DO,0:SWITCH,0:FOR,0:ELSE,0:WHILE,0:functions,0:IF,0:CALL,3	33
0x4000222	            0x4155	                                push r13	       121	binemul.c	FUNCTION_8
0x4000224	            0x4154	                                push r12	       121	binemul.c	FUNCTION_8
0x4000226	              0x55	                                push rbp	       121	binemul.c	FUNCTION_8
0x4000227	              0x53	                                push rbx	       121	binemul.c	FUNCTION_8
0x4000228	        0x4883ec08	                              sub rsp, 8	       121	binemul.c	FUNCTION_8
0x400022c	          0x4889fd	                            mov rbp, rdi	       121	binemul.c	FUNCTION_8
0x400022f	          0x4989f4	                            mov r12, rsi	       121	binemul.c	FUNCTION_8
0x4000232	          0x4189cd	                           mov r13d, ecx	       121	binemul.c	FUNCTION_8
0x4000235	          0x4889d6	                            mov rsi, rdx	       124	binemul.c	FUNCTION_8	CALL_1
0x4000238	          0x4c89e7	                            mov rdi, r12	       124	binemul.c	FUNCTION_8	CALL_1
0x400023b	      0xe800000000	                          call 0x4000240	       124	binemul.c	FUNCTION_8	CALL_1
0x4000240	          0x4885c0	                           test rax, rax	       125	binemul.c	FUNCTION_8	CALL_2
0x4000243	            0x7508	                           jne 0x400024d	       125	binemul.c	FUNCTION_8	CALL_2
0x4000245	          0x4c89e7	                            mov rdi, r12	       125	binemul.c	FUNCTION_8	CALL_2
0x4000248	      0xe800000000	                          call 0x400024d	       125	binemul.c	FUNCTION_8	CALL_2
0x400024d	          0x4889c3	                            mov rbx, rax	       125	binemul.c	FUNCTION_8	CALL_2
0x4000250	          0x4585ed	                         test r13d, r13d	       127	binemul.c	FUNCTION_8	CALL_3
0x4000253	            0x7417	                            je 0x400026c	       127	binemul.c	FUNCTION_8	CALL_3
0x4000255	          0x4c89e2	                            mov rdx, r12	       104	stdio2.h	CALL_12
0x4000258	      0xbe00000000	                              mov esi, 0	       104	stdio2.h	CALL_12
0x400025d	      0xbf01000000	                              mov edi, 1	       104	stdio2.h	CALL_12
0x4000262	      0xb800000000	                              mov eax, 0	       104	stdio2.h	CALL_12
0x4000267	      0xe800000000	                          call 0x400026c	       104	stdio2.h	CALL_12
0x400026c	        0x488b4500	                    mov rax, qword [rbp]	       129	binemul.c	FUNCTION_8
0x4000270	    0x488983d80000	             mov qword [rbx + 0xd8], rax	       129	binemul.c	FUNCTION_8
0x4000277	        0x48895d00	                    mov qword [rbp], rbx	       130	binemul.c	FUNCTION_8
0x400027b	      0xb801000000	                              mov eax, 1	       133	binemul.c	FUNCTION_8
0x4000280	        0x4883c408	                              add rsp, 8	       133	binemul.c	FUNCTION_8
0x4000284	              0x5b	                                 pop rbx	       133	binemul.c	FUNCTION_8
0x4000285	              0x5d	                                 pop rbp	       133	binemul.c	FUNCTION_8
0x4000286	            0x415c	                                 pop r12	       133	binemul.c	FUNCTION_8
0x4000288	            0x415d	                                 pop r13	       133	binemul.c	FUNCTION_8
0x400028a	              0xc3	                                     ret	       133	binemul.c	FUNCTION_8
ar_emul_usage	DO,0:SWITCH,0:FOR,0:ELSE,0:WHILE,0:functions,0:IF,1:CALL,1	7
0x4000046	    0x488b05000000	            mov rax, qword [0x0400004d] 	        29	binemul.c	FUNCTION_1	IF_1
0x400004d	          0x4885c0	                           test rax, rax	        29	binemul.c	FUNCTION_1	IF_1
0x4000050	            0x740a	                            je 0x400005c	        29	binemul.c	FUNCTION_1	IF_1
0x4000052	        0x4883ec08	                              sub rsp, 8	        28	binemul.c	FUNCTION_1
0x4000056	            0xffd0	                                call rax	        30	binemul.c	FUNCTION_1	CALL_1
0x4000058	        0x4883c408	                              add rsp, 8	        31	binemul.c	FUNCTION_1
0x400005c	            0xf3c3	                                     ret	        31	binemul.c	FUNCTION_1
ar_emul_replace	DO,0:SWITCH,0:FOR,0:ELSE,0:WHILE,0:functions,0:IF,1:CALL,1	8
0x4000204	    0x4c8b05000000	              mov r8, qword [0x0400020b]	       111	binemul.c	FUNCTION_7	IF_1
0x400020b	      0xb800000000	                              mov eax, 0	       115	binemul.c	FUNCTION_7
0x4000210	          0x4d85c0	                             test r8, r8	       111	binemul.c	FUNCTION_7	IF_1
0x4000213	            0x740b	                            je 0x4000220	       111	binemul.c	FUNCTION_7	IF_1
0x4000215	        0x4883ec08	                              sub rsp, 8	       110	binemul.c	FUNCTION_7
0x4000219	          0x41ffd0	                                 call r8	       112	binemul.c	FUNCTION_7	IF_1	CALL_1
0x400021c	        0x4883c408	                              add rsp, 8	       116	binemul.c	FUNCTION_7
0x4000220	            0xf3c3	                                     ret	       116	binemul.c	FUNCTION_7
