_obstack_newchunk	CALL,5:SWITCH,0:WHILE,0:IF,5:DO,0:FOR,0:functions,0:ELSE,0	67
0x4000165	            0x4156	                                push r14	       189	obstack.c	FUNCTION_6
0x4000167	            0x4155	                                push r13	       189	obstack.c	FUNCTION_6
0x4000169	            0x4154	                                push r12	       189	obstack.c	FUNCTION_6
0x400016b	              0x55	                                push rbp	       189	obstack.c	FUNCTION_6
0x400016c	              0x53	                                push rbx	       189	obstack.c	FUNCTION_6
0x400016d	          0x4889fb	                            mov rbx, rdi	       189	obstack.c	FUNCTION_6
0x4000170	        0x4c8b6f08	                mov r13, qword [rdi + 8]	       190	obstack.c	FUNCTION_6
0x4000174	        0x488b6f18	            mov rbp, qword [rdi + 0x18] 	       192	obstack.c	FUNCTION_6
0x4000178	        0x482b6f10	             sub rbp, qword [rdi + 0x10]	       192	obstack.c	FUNCTION_6
0x400017c	          0x4801ee	                            add rsi, rbp	       196	obstack.c	FUNCTION_6
0x400017f	          0x4889f0	                            mov rax, rsi	       197	obstack.c	FUNCTION_6
0x4000182	        0x48034730	             add rax, qword [rdi + 0x30]	       197	obstack.c	FUNCTION_6
0x4000186	          0x4889ea	                            mov rdx, rbp	       198	obstack.c	FUNCTION_6
0x4000189	        0x48c1ea03	                              shr rdx, 3	       198	obstack.c	FUNCTION_6
0x400018d	      0x488d541064	            lea rdx, [rax + rdx + 0x64] 	       198	obstack.c	FUNCTION_6
0x4000192	          0x483907	                    cmp qword [rdi], rax	       198	obstack.c	FUNCTION_6
0x4000195	          0x4989c4	                            mov r12, rax	       198	obstack.c	FUNCTION_6
0x4000198	        0x4c0f4327	                 cmovae r12, qword [rdi]	       198	obstack.c	FUNCTION_6
0x400019c	          0x4939d4	                            cmp r12, rdx	       198	obstack.c	FUNCTION_6
0x400019f	        0x4c0f42e2	                          cmovb r12, rdx	       198	obstack.c	FUNCTION_6
0x40001a3	          0x4839f5	                            cmp rbp, rsi	       205	obstack.c	FUNCTION_6	IF_3
0x40001a6	            0x7715	                            ja 0x40001bd	       205	obstack.c	FUNCTION_6	IF_3
0x40001a8	          0x4839c6	                            cmp rsi, rax	       205	obstack.c	FUNCTION_6	IF_3
0x40001ab	            0x7710	                            ja 0x40001bd	       205	obstack.c	FUNCTION_6	IF_3
0x40001ad	          0x4c89e6	                            mov rsi, r12	       206	obstack.c	FUNCTION_6	CALL_1
0x40001b0	      0xe88bfeffff	                  call sym.call_chunkfun	       206	obstack.c	FUNCTION_6	CALL_1
0x40001b5	          0x4989c6	                            mov r14, rax	       206	obstack.c	FUNCTION_6	CALL_1
0x40001b8	          0x4885c0	                           test rax, rax	       207	obstack.c	FUNCTION_6	IF_4
0x40001bb	            0x750c	                           jne 0x40001c9	       207	obstack.c	FUNCTION_6	IF_4
0x40001bd	    0xff1500000000	                 call qword [0x040001c3]	       208	obstack.c	FUNCTION_6	IF_4
0x40001c3	    0x41be00000000	                             mov r14d, 0	       208	obstack.c	FUNCTION_6	IF_4
0x40001c9	        0x4c897308	                mov qword [rbx + 8], r14	       209	obstack.c	FUNCTION_6
0x40001cd	        0x4d896e08	                mov qword [r14 + 8], r13	       210	obstack.c	FUNCTION_6
0x40001d1	        0x4b8d3426	                    lea rsi, [r14 + r12]	       211	obstack.c	FUNCTION_6
0x40001d5	        0x48897320	             mov qword [rbx + 0x20], rsi	       211	obstack.c	FUNCTION_6
0x40001d9	          0x498936	                    mov qword [r14], rsi	       211	obstack.c	FUNCTION_6
0x40001dc	        0x488b4330	            mov rax, qword [rbx + 0x30] 	       215	obstack.c	FUNCTION_6	CALL_2
0x40001e0	      0x4d8d640610	            lea r12, [r14 + rax + 0x10] 	       214	obstack.c	FUNCTION_6
0x40001e5	          0x48f7d0	                                 not rax	       214	obstack.c	FUNCTION_6
0x40001e8	          0x4921c4	                            and r12, rax	       214	obstack.c	FUNCTION_6
0x40001eb	        0x488b7310	            mov rsi, qword [rbx + 0x10] 	        53	string3.h	FUNCTION_11	CALL_3
0x40001ef	          0x4889ea	                            mov rdx, rbp	        53	string3.h	FUNCTION_11	CALL_3
0x40001f2	          0x4c89e7	                            mov rdi, r12	        53	string3.h	FUNCTION_11	CALL_3
0x40001f5	      0xe800000000	                          call 0x40001fa	        53	string3.h	FUNCTION_11	CALL_3
0x40001fa	        0xf6435002	               test byte [rbx + 0x50], 2	       223	obstack.c	FUNCTION_6	IF_5
0x40001fe	            0x7528	                           jne 0x4000228	       223	obstack.c	FUNCTION_6	IF_5
0x4000200	        0x488b4330	            mov rax, qword [rbx + 0x30] 	       225	obstack.c	FUNCTION_6	IF_5	CALL_4
0x4000204	      0x498d540510	            lea rdx, [r13 + rax + 0x10] 	       224	obstack.c	FUNCTION_6	IF_5
0x4000209	          0x48f7d0	                                 not rax	       224	obstack.c	FUNCTION_6	IF_5
0x400020c	          0x4821d0	                            and rax, rdx	       224	obstack.c	FUNCTION_6	IF_5
0x400020f	        0x48394310	            cmp qword [rbx + 0x10], rax 	       224	obstack.c	FUNCTION_6	IF_5
0x4000213	            0x7513	                           jne 0x4000228	       224	obstack.c	FUNCTION_6	IF_5
0x4000215	        0x498b4508	                mov rax, qword [r13 + 8]	       228	obstack.c	FUNCTION_6	IF_5
0x4000219	        0x49894608	                mov qword [r14 + 8], rax	       228	obstack.c	FUNCTION_6	IF_5
0x400021d	          0x4c89ee	                            mov rsi, r13	       229	obstack.c	FUNCTION_6	IF_5	CALL_5
0x4000220	          0x4889df	                            mov rdi, rbx	       229	obstack.c	FUNCTION_6	IF_5	CALL_5
0x4000223	      0xe839feffff	                   call sym.call_freefun	       229	obstack.c	FUNCTION_6	IF_5	CALL_5
0x4000228	        0x4c896310	             mov qword [rbx + 0x10], r12	       232	obstack.c	FUNCTION_6
0x400022c	          0x4c01e5	                            add rbp, r12	       233	obstack.c	FUNCTION_6
0x400022f	        0x48896b18	             mov qword [rbx + 0x18], rbp	       233	obstack.c	FUNCTION_6
0x4000233	        0x806350fd	             and byte [rbx + 0x50], 0xfd	       235	obstack.c	FUNCTION_6
0x4000237	              0x5b	                                 pop rbx	       236	obstack.c	FUNCTION_6
0x4000238	              0x5d	                                 pop rbp	       236	obstack.c	FUNCTION_6
0x4000239	            0x415c	                                 pop r12	       236	obstack.c	FUNCTION_6
0x400023b	            0x415d	                                 pop r13	       236	obstack.c	FUNCTION_6
0x400023d	            0x415e	                                 pop r14	       236	obstack.c	FUNCTION_6
0x400023f	              0xc3	                                     ret	       236	obstack.c	FUNCTION_6
_obstack_begin	CALL,1:SWITCH,0:WHILE,0:IF,0:DO,0:FOR,0:functions,0:ELSE,0	7
0x400012d	        0x4883ec08	                              sub rsp, 8	       160	obstack.c	FUNCTION_4
0x4000131	        0x48894f38	             mov qword [rdi + 0x38], rcx	       161	obstack.c	FUNCTION_4
0x4000135	        0x4c894740	              mov qword [rdi + 0x40], r8	       162	obstack.c	FUNCTION_4
0x4000139	        0x806750fe	             and byte [rdi + 0x50], 0xfe	       163	obstack.c	FUNCTION_4
0x400013d	      0xe840ffffff	          call sym._obstack_begin_worker	       164	obstack.c	FUNCTION_4	CALL_1
0x4000142	        0x4883c408	                              add rsp, 8	       165	obstack.c	FUNCTION_4
0x4000146	              0xc3	                                     ret	       165	obstack.c	FUNCTION_4
call_freefun	CALL,2:SWITCH,0:WHILE,0:IF,1:DO,0:FOR,0:functions,0:ELSE,1	11
0x4000061	        0x4883ec08	                              sub rsp, 8	        99	obstack.c	FUNCTION_2
0x4000065	          0x4889f8	                            mov rax, rdi	        99	obstack.c	FUNCTION_2
0x4000068	        0xf6475001	               test byte [rdi + 0x50], 1	       100	obstack.c	FUNCTION_2	IF_1
0x400006c	            0x7409	                            je 0x4000077	       100	obstack.c	FUNCTION_2	IF_1
0x400006e	        0x488b7f48	            mov rdi, qword [rdi + 0x48] 	       101	obstack.c	FUNCTION_2	CALL_1
0x4000072	          0xff5040	                 call qword [rax + 0x40]	       101	obstack.c	FUNCTION_2	CALL_1
0x4000075	            0xeb06	                           jmp 0x400007d	       101	obstack.c	FUNCTION_2	CALL_1
0x4000077	          0x4889f7	                            mov rdi, rsi	       103	obstack.c	FUNCTION_2	CALL_2
0x400007a	          0xff5040	                 call qword [rax + 0x40]	       103	obstack.c	FUNCTION_2	CALL_2
0x400007d	        0x4883c408	                              add rsp, 8	       104	obstack.c	FUNCTION_2
0x4000081	              0xc3	                                     ret	       104	obstack.c	FUNCTION_2
_obstack_begin_1	CALL,1:SWITCH,0:WHILE,0:IF,0:DO,0:FOR,0:functions,0:ELSE,0	8
0x4000147	        0x4883ec08	                              sub rsp, 8	       173	obstack.c	FUNCTION_5
0x400014b	        0x48894f38	             mov qword [rdi + 0x38], rcx	       174	obstack.c	FUNCTION_5
0x400014f	        0x4c894740	              mov qword [rdi + 0x40], r8	       175	obstack.c	FUNCTION_5
0x4000153	        0x4c894f48	              mov qword [rdi + 0x48], r9	       176	obstack.c	FUNCTION_5
0x4000157	        0x804f5001	                 or byte [rdi + 0x50], 1	       177	obstack.c	FUNCTION_5
0x400015b	      0xe822ffffff	          call sym._obstack_begin_worker	       178	obstack.c	FUNCTION_5	CALL_1
0x4000160	        0x4883c408	                              add rsp, 8	       179	obstack.c	FUNCTION_5
0x4000164	              0xc3	                                     ret	       179	obstack.c	FUNCTION_5
_obstack_memory_used	CALL,0:SWITCH,0:WHILE,0:IF,0:DO,0:FOR,1:functions,0:ELSE,0	13
0x40002c8	        0x488b5708	                mov rdx, qword [rdi + 8]	       303	obstack.c	FUNCTION_9	FOR_1
0x40002cc	          0x4885d2	                           test rdx, rdx	       303	obstack.c	FUNCTION_9	FOR_1
0x40002cf	            0x7419	                            je 0x40002ea	       303	obstack.c	FUNCTION_9	FOR_1
0x40002d1	      0xb800000000	                              mov eax, 0	       303	obstack.c	FUNCTION_9	FOR_1
0x40002d6	          0x488b0a	                    mov rcx, qword [rdx]	       305	obstack.c	FUNCTION_9	FOR_1
0x40002d9	          0x4829d1	                            sub rcx, rdx	       305	obstack.c	FUNCTION_9	FOR_1
0x40002dc	          0x4801c8	                            add rax, rcx	       305	obstack.c	FUNCTION_9	FOR_1
0x40002df	        0x488b5208	                mov rdx, qword [rdx + 8]	       303	obstack.c	FUNCTION_9	FOR_1
0x40002e3	          0x4885d2	                           test rdx, rdx	       303	obstack.c	FUNCTION_9	FOR_1
0x40002e6	            0x75ee	                           jne 0x40002d6	       303	obstack.c	FUNCTION_9	FOR_1
0x40002e8	            0xf3c3	                                     ret	       303	obstack.c	FUNCTION_9	FOR_1
0x40002ea	      0xb800000000	                              mov eax, 0	       301	obstack.c	FUNCTION_9
0x40002ef	              0xc3	                                     ret	       308	obstack.c	FUNCTION_9
print_and_abort	CALL,2:SWITCH,0:WHILE,0:IF,0:DO,0:FOR,0:functions,0:ELSE,0	9
0x40000ff	        0x4883ec08	                              sub rsp, 8	       354	obstack.c	FUNCTION_10
0x4000103	      0xb900000000	                              mov ecx, 0	        97	stdio2.h	CALL_13
0x4000108	      0xba00000000	                              mov edx, 0	        97	stdio2.h	CALL_13
0x400010d	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_13
0x4000112	    0x488b3d000000	            mov rdi, qword [0x04000119] 	        97	stdio2.h	CALL_13
0x4000119	      0xb800000000	                              mov eax, 0	        97	stdio2.h	CALL_13
0x400011e	      0xe800000000	                          call 0x4000123	        97	stdio2.h	CALL_13
0x4000123	      0xbf01000000	                              mov edi, 1	       365	obstack.c	FUNCTION_10	CALL_2
0x4000128	      0xe800000000	                 call sym._obstack_begin	       365	obstack.c	FUNCTION_10	CALL_2
_obstack_free	CALL,2:SWITCH,0:WHILE,1:IF,2:DO,0:FOR,0:functions,0:ELSE,1	35
0x4000268	            0x4154	                                push r12	       269	obstack.c	FUNCTION_8
0x400026a	              0x55	                                push rbp	       269	obstack.c	FUNCTION_8
0x400026b	              0x53	                                push rbx	       269	obstack.c	FUNCTION_8
0x400026c	          0x4889fb	                            mov rbx, rdi	       269	obstack.c	FUNCTION_8
0x400026f	          0x4989f4	                            mov r12, rsi	       269	obstack.c	FUNCTION_8
0x4000272	        0x488b7708	                mov rsi, qword [rdi + 8]	       273	obstack.c	FUNCTION_8
0x4000276	          0x4885f6	                           test rsi, rsi	       277	obstack.c	FUNCTION_8	WHILE_1
0x4000279	            0x751a	                           jne 0x4000295	       277	obstack.c	FUNCTION_8	WHILE_1
0x400027b	            0xeb3c	                           jmp 0x40002b9	       277	obstack.c	FUNCTION_8	WHILE_1
0x400027d	        0x488b6e08	                mov rbp, qword [rsi + 8]	       279	obstack.c	FUNCTION_8	WHILE_1
0x4000281	          0x4889df	                            mov rdi, rbx	       280	obstack.c	FUNCTION_8	WHILE_1	CALL_1
0x4000284	      0xe8d8fdffff	                   call sym.call_freefun	       280	obstack.c	FUNCTION_8	WHILE_1	CALL_1
0x4000289	        0x804b5002	                 or byte [rbx + 0x50], 2	       284	obstack.c	FUNCTION_8	WHILE_1
0x400028d	          0x4885ed	                           test rbp, rbp	       277	obstack.c	FUNCTION_8	WHILE_1
0x4000290	            0x7427	                            je 0x40002b9	       277	obstack.c	FUNCTION_8	WHILE_1
0x4000292	          0x4889ee	                            mov rsi, rbp	       281	obstack.c	FUNCTION_8	WHILE_1
0x4000295	          0x4939f4	                            cmp r12, rsi	       277	obstack.c	FUNCTION_8	WHILE_1
0x4000298	            0x76e3	                           jbe 0x400027d	       277	obstack.c	FUNCTION_8	WHILE_1
0x400029a	          0x4c3b26	                    cmp r12, qword [rsi]	       277	obstack.c	FUNCTION_8	WHILE_1
0x400029d	            0x77de	                            ja 0x400027d	       277	obstack.c	FUNCTION_8	WHILE_1
0x400029f	          0x4885f6	                           test rsi, rsi	       286	obstack.c	FUNCTION_8	IF_1
0x40002a2	            0x7415	                            je 0x40002b9	       286	obstack.c	FUNCTION_8	IF_1
0x40002a4	        0x4c896318	             mov qword [rbx + 0x18], r12	       288	obstack.c	FUNCTION_8	IF_1
0x40002a8	        0x4c896310	             mov qword [rbx + 0x10], r12	       288	obstack.c	FUNCTION_8	IF_1
0x40002ac	          0x488b06	                    mov rax, qword [rsi]	       289	obstack.c	FUNCTION_8	IF_1
0x40002af	        0x48894320	             mov qword [rbx + 0x20], rax	       289	obstack.c	FUNCTION_8	IF_1
0x40002b3	        0x48897308	                mov qword [rbx + 8], rsi	       290	obstack.c	FUNCTION_8	IF_1
0x40002b7	            0xeb0a	                           jmp 0x40002c3	       290	obstack.c	FUNCTION_8	IF_1
0x40002b9	          0x4d85e4	                           test r12, r12	       292	obstack.c	FUNCTION_8	ELSE_1	IF_2
0x40002bc	            0x7405	                            je 0x40002c3	       292	obstack.c	FUNCTION_8	ELSE_1	IF_2
0x40002be	      0xe800000000	                          call 0x40002c3	       294	obstack.c	FUNCTION_8	ELSE_1	IF_2
0x40002c3	              0x5b	                                 pop rbx	       295	obstack.c	FUNCTION_8
0x40002c4	              0x5d	                                 pop rbp	       295	obstack.c	FUNCTION_8
0x40002c5	            0x415c	                                 pop r12	       295	obstack.c	FUNCTION_8
0x40002c7	              0xc3	                                     ret	       295	obstack.c	FUNCTION_8
_obstack_begin_worker	CALL,2:SWITCH,0:WHILE,0:IF,3:DO,0:FOR,0:functions,0:ELSE,0	36
0x4000082	            0x4154	                                push r12	       116	obstack.c	FUNCTION_3
0x4000084	              0x55	                                push rbp	       116	obstack.c	FUNCTION_3
0x4000085	              0x53	                                push rbx	       116	obstack.c	FUNCTION_3
0x4000086	          0x4889fd	                            mov rbp, rdi	       116	obstack.c	FUNCTION_3
0x4000089	          0x4889d3	                            mov rbx, rdx	       116	obstack.c	FUNCTION_3
0x400008c	          0x4885d2	                           test rdx, rdx	       120	obstack.c	FUNCTION_3	IF_1
0x400008f	      0xb810000000	                           mov eax, 0x10	       120	obstack.c	FUNCTION_3	IF_1
0x4000094	        0x480f44d8	                          cmove rbx, rax	       120	obstack.c	FUNCTION_3	IF_1
0x4000098	          0x4885f6	                           test rsi, rsi	       135	obstack.c	FUNCTION_3	IF_2
0x400009b	      0xb8e00f0000	                          mov eax, 0xfe0	       135	obstack.c	FUNCTION_3	IF_2
0x40000a0	        0x480f44f0	                          cmove rsi, rax	       135	obstack.c	FUNCTION_3	IF_2
0x40000a4	          0x488937	                    mov qword [rdi], rsi	       138	obstack.c	FUNCTION_3
0x40000a7	        0x488d43ff	                      lea rax, [rbx - 1]	       139	obstack.c	FUNCTION_3
0x40000ab	        0x48894730	             mov qword [rdi + 0x30], rax	       139	obstack.c	FUNCTION_3
0x40000af	      0xe88cffffff	                  call sym.call_chunkfun	       141	obstack.c	FUNCTION_3	CALL_1
0x40000b4	          0x4989c4	                            mov r12, rax	       141	obstack.c	FUNCTION_3	CALL_1
0x40000b7	          0x4885c0	                           test rax, rax	       142	obstack.c	FUNCTION_3	IF_3
0x40000ba	            0x7506	                           jne 0x40000c2	       142	obstack.c	FUNCTION_3	IF_3
0x40000bc	    0xff1500000000	                 call qword [0x040000c2]	       143	obstack.c	FUNCTION_3	IF_3
0x40000c2	        0x4c896508	                mov qword [rbp + 8], r12	       144	obstack.c	FUNCTION_3
0x40000c6	      0x498d441c0f	              lea rax, [r12 + rbx + 0xf]	       145	obstack.c	FUNCTION_3	CALL_2
0x40000cb	          0x48f7db	                                 neg rbx	       145	obstack.c	FUNCTION_3	CALL_2
0x40000ce	          0x4821c3	                            and rbx, rax	       145	obstack.c	FUNCTION_3	CALL_2
0x40000d1	        0x48895d10	            mov qword [rbp + 0x10], rbx 	       145	obstack.c	FUNCTION_3	CALL_2
0x40000d5	        0x48895d18	            mov qword [rbp + 0x18], rbx 	       145	obstack.c	FUNCTION_3	CALL_2
0x40000d9	          0x4c89e0	                            mov rax, r12	       147	obstack.c	FUNCTION_3
0x40000dc	        0x48034500	                    add rax, qword [rbp]	       147	obstack.c	FUNCTION_3
0x40000e0	        0x49890424	                    mov qword [r12], rax	       147	obstack.c	FUNCTION_3
0x40000e4	        0x48894520	            mov qword [rbp + 0x20], rax 	       147	obstack.c	FUNCTION_3
0x40000e8	    0x49c744240800	                  mov qword [r12 + 8], 0	       148	obstack.c	FUNCTION_3
0x40000f1	        0x806550f9	             and byte [rbp + 0x50], 0xf9	       151	obstack.c	FUNCTION_3
0x40000f5	      0xb801000000	                              mov eax, 1	       153	obstack.c	FUNCTION_3
0x40000fa	              0x5b	                                 pop rbx	       153	obstack.c	FUNCTION_3
0x40000fb	              0x5d	                                 pop rbp	       153	obstack.c	FUNCTION_3
0x40000fc	            0x415c	                                 pop r12	       153	obstack.c	FUNCTION_3
0x40000fe	              0xc3	                                     ret	       153	obstack.c	FUNCTION_3
call_chunkfun	CALL,2:SWITCH,0:WHILE,0:IF,1:DO,0:FOR,0:functions,0:ELSE,1	11
0x4000040	        0x4883ec08	                              sub rsp, 8	        90	obstack.c	FUNCTION_1
0x4000044	          0x4889f8	                            mov rax, rdi	        90	obstack.c	FUNCTION_1
0x4000047	        0xf6475001	               test byte [rdi + 0x50], 1	        91	obstack.c	FUNCTION_1	IF_1
0x400004b	            0x7409	                            je 0x4000056	        91	obstack.c	FUNCTION_1	IF_1
0x400004d	        0x488b7f48	            mov rdi, qword [rdi + 0x48] 	        92	obstack.c	FUNCTION_1	CALL_1
0x4000051	          0xff5038	                 call qword [rax + 0x38]	        92	obstack.c	FUNCTION_1	CALL_1
0x4000054	            0xeb06	                           jmp 0x400005c	        92	obstack.c	FUNCTION_1	CALL_1
0x4000056	          0x4889f7	                            mov rdi, rsi	        94	obstack.c	FUNCTION_1	CALL_2
0x4000059	          0xff5038	                 call qword [rax + 0x38]	        94	obstack.c	FUNCTION_1	CALL_2
0x400005c	        0x4883c408	                              add rsp, 8	        95	obstack.c	FUNCTION_1
0x4000060	              0xc3	                                     ret	        95	obstack.c	FUNCTION_1
_obstack_allocated_p	CALL,0:SWITCH,0:WHILE,1:IF,0:DO,0:FOR,0:functions,0:ELSE,0	15
0x4000240	        0x488b4708	                mov rax, qword [rdi + 8]	       252	obstack.c	FUNCTION_7
0x4000244	          0x4885c0	                           test rax, rax	       256	obstack.c	FUNCTION_7	WHILE_1
0x4000247	            0x750b	                           jne 0x4000254	       256	obstack.c	FUNCTION_7	WHILE_1
0x4000249	            0xeb13	                           jmp 0x400025e	       256	obstack.c	FUNCTION_7	WHILE_1
0x400024b	        0x488b4008	                mov rax, qword [rax + 8]	       258	obstack.c	FUNCTION_7	WHILE_1
0x400024f	          0x4885c0	                           test rax, rax	       256	obstack.c	FUNCTION_7	WHILE_1
0x4000252	            0x740a	                            je 0x400025e	       256	obstack.c	FUNCTION_7	WHILE_1
0x4000254	          0x4839c6	                            cmp rsi, rax	       256	obstack.c	FUNCTION_7	WHILE_1
0x4000257	            0x76f2	                           jbe 0x400024b	       256	obstack.c	FUNCTION_7	WHILE_1
0x4000259	          0x483b30	                    cmp rsi, qword [rax]	       256	obstack.c	FUNCTION_7	WHILE_1
0x400025c	            0x77ed	                            ja 0x400024b	       256	obstack.c	FUNCTION_7	WHILE_1
0x400025e	          0x4885c0	                           test rax, rax	       261	obstack.c	FUNCTION_7
0x4000261	           0xf95c0	                                setne al	       261	obstack.c	FUNCTION_7
0x4000264	           0xfb6c0	                           movzx eax, al	       261	obstack.c	FUNCTION_7
0x4000267	              0xc3	                                     ret	       262	obstack.c	FUNCTION_7
