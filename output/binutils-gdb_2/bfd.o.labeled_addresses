bfd_scan_vma	WHILE,1:FOR,0:functions,0:DO,0:IF,13:ELSE,3:CALL,6:SWITCH,0	4
0x400129f	        0x4883ec08	                              sub rsp, 8	      1665	bfd.c	FUNCTION_26
0x40012a3	      0xe800000000	                          call 0x40012a8	      1673	bfd.c	FUNCTION_26	CALL_1
0x40012a8	        0x4883c408	                              add rsp, 8	      1732	bfd.c	FUNCTION_26
0x40012ac	              0xc3	                                     ret	      1732	bfd.c	FUNCTION_26
bfd_update_compression_header	WHILE,0:FOR,0:functions,0:DO,0:IF,4:ELSE,3:CALL,14:SWITCH,0	71
0x40017dc	            0x4154	                                push r12	      2313	bfd.c	FUNCTION_39
0x40017de	              0x55	                                push rbp	      2313	bfd.c	FUNCTION_39
0x40017df	              0x53	                                push rbx	      2313	bfd.c	FUNCTION_39
0x40017e0	          0x8b4744	            mov eax, dword [rdi + 0x44] 	      2314	bfd.c	FUNCTION_39	IF_1
0x40017e3	          0xc1e805	                              shr eax, 5	      2314	bfd.c	FUNCTION_39	IF_1
0x40017e6	      0x25ffff0f00	                        and eax, 0xfffff	      2314	bfd.c	FUNCTION_39	IF_1
0x40017eb	          0xf6c440	                           test ah, 0x40	      2314	bfd.c	FUNCTION_39	IF_1
0x40017ee	     0xf84ef000000	                            je 0x40018e3	      2314	bfd.c	FUNCTION_39	IF_1
0x40017f4	          0x4889fb	                            mov rbx, rdi	      2314	bfd.c	FUNCTION_39	IF_1
0x40017f7	          0x4889f5	                            mov rbp, rsi	      2314	bfd.c	FUNCTION_39	IF_1
0x40017fa	          0x4989d4	                            mov r12, rdx	      2314	bfd.c	FUNCTION_39	IF_1
0x40017fd	        0x488b5708	                mov rdx, qword [rdi + 8]	      2316	bfd.c	FUNCTION_39	IF_1	IF_2	CALL_1
0x4001801	        0x837a0805	                  cmp dword [rdx + 8], 5	      2316	bfd.c	FUNCTION_39	IF_1	IF_2	CALL_1
0x4001805	     0xf85ec000000	                           jne 0x40018f7	      2316	bfd.c	FUNCTION_39	IF_1	IF_2	CALL_1
0x400180b	      0xa900000200	                       test eax, 0x20000	      2318	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3
0x4001810	     0xf84a7000000	                            je 0x40018bd	      2318	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3
0x4001816	    0x488b92680300	           mov rdx, qword [rdx + 0x368] 	      2320	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3
0x400181d	    0x498b8424e000	            mov rax, qword [r12 + 0xe0] 	      2324	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	CALL_3
0x4001825	    0x488148080008	               or qword [rax + 8], 0x800	      2324	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	CALL_3
0x400182d	    0x488b82000300	           mov rax, qword [rdx + 0x300] 	      2326	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4
0x4001834	        0x80780c01	                 cmp byte [rax + 0xc], 1	      2326	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4
0x4001838	            0x753b	                           jne 0x4001875	      2326	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4
0x400183a	        0x488b4708	                mov rax, qword [rdi + 8]	      2330	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_4
0x400183e	      0xbf01000000	                              mov edi, 1	      2330	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_4
0x4001843	          0xff5048	                 call qword [rax + 0x48]	      2330	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_4
0x4001846	        0x488d7504	                      lea rsi, [rbp + 4]	      2331	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_5
0x400184a	      0x498b7c2438	            mov rdi, qword [r12 + 0x38] 	      2331	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_5
0x400184f	        0x488b4308	                mov rax, qword [rbx + 8]	      2331	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_5
0x4001853	          0xff5048	                 call qword [rax + 0x48]	      2331	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_5
0x4001856	        0x488d7508	                      lea rsi, [rbp + 8]	      2332	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_6
0x400185a	      0x418b4c2470	            mov ecx, dword [r12 + 0x70] 	      2332	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_6
0x400185f	      0xbf01000000	                              mov edi, 1	      2332	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_6
0x4001864	            0xd3e7	                             shl edi, cl	      2332	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_6
0x4001866	          0x4863ff	                         movsxd rdi, edi	      2332	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_6
0x4001869	        0x488b4308	                mov rax, qword [rbx + 8]	      2332	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_6
0x400186d	          0xff5048	                 call qword [rax + 0x48]	      2332	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_6
0x4001870	      0xe982000000	                           jmp 0x40018f7	      2332	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_6
0x4001875	        0x488b4708	                mov rax, qword [rdi + 8]	      2339	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_7
0x4001879	      0xbf01000000	                              mov edi, 1	      2339	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_7
0x400187e	          0xff5048	                 call qword [rax + 0x48]	      2339	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_7
0x4001881	        0x488d7504	                      lea rsi, [rbp + 4]	      2340	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_8
0x4001885	        0x488b4308	                mov rax, qword [rbx + 8]	      2340	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_8
0x4001889	      0xbf00000000	                              mov edi, 0	      2340	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_8
0x400188e	          0xff5048	                 call qword [rax + 0x48]	      2340	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_8
0x4001891	        0x488d7508	                      lea rsi, [rbp + 8]	      2341	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_9
0x4001895	      0x498b7c2438	            mov rdi, qword [r12 + 0x38] 	      2341	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_9
0x400189a	        0x488b4308	                mov rax, qword [rbx + 8]	      2341	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_9
0x400189e	          0xff5030	                 call qword [rax + 0x30]	      2341	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_9
0x40018a1	        0x488d7510	                   lea rsi, [rbp + 0x10]	      2342	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_10
0x40018a5	      0x418b4c2470	            mov ecx, dword [r12 + 0x70] 	      2342	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_10
0x40018aa	      0xbf01000000	                              mov edi, 1	      2342	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_10
0x40018af	            0xd3e7	                             shl edi, cl	      2342	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_10
0x40018b1	          0x4863ff	                         movsxd rdi, edi	      2342	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_10
0x40018b4	        0x488b4308	                mov rax, qword [rbx + 8]	      2342	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_10
0x40018b8	          0xff5030	                 call qword [rax + 0x30]	      2342	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_10
0x40018bb	            0xeb3a	                           jmp 0x40018f7	      2342	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_10
0x40018bd	    0x498b8424e000	            mov rax, qword [r12 + 0xe0] 	      2349	bfd.c	FUNCTION_39	IF_1	IF_2	ELSE_2	CALL_11
0x40018c5	    0x48816008fff7	 and qword [rax + 8], 0xfffffffffffff7ff	      2349	bfd.c	FUNCTION_39	IF_1	IF_2	ELSE_2	CALL_11
0x40018cd	    0xc7065a4c4942	            mov dword [rsi], 0x42494c5a 	        53	string3.h	FUNCTION_44	CALL_3
0x40018d3	        0x488d7604	                      lea rsi, [rsi + 4]	      2355	bfd.c	FUNCTION_39	IF_1	IF_2	ELSE_2	CALL_13
0x40018d7	      0x498b7c2438	            mov rdi, qword [r12 + 0x38] 	      2355	bfd.c	FUNCTION_39	IF_1	IF_2	ELSE_2	CALL_13
0x40018dc	      0xe800000000	                          call 0x40018e1	      2355	bfd.c	FUNCTION_39	IF_1	IF_2	ELSE_2	CALL_13
0x40018e1	            0xeb14	                           jmp 0x40018f7	      2355	bfd.c	FUNCTION_39	IF_1	IF_2	ELSE_2	CALL_13
0x40018e3	      0xba00000000	                              mov edx, 0	      2360	bfd.c	FUNCTION_39	CALL_14
0x40018e8	      0xbe38090000	                          mov esi, 0x938	      2360	bfd.c	FUNCTION_39	CALL_14
0x40018ed	      0xbf00000000	                              mov edi, 0	      2360	bfd.c	FUNCTION_39	CALL_14
0x40018f2	      0xe800000000	                          call 0x40018f7	      2360	bfd.c	FUNCTION_39	CALL_14
0x40018f7	              0x5b	                                 pop rbx	      2361	bfd.c	FUNCTION_39
0x40018f8	              0x5d	                                 pop rbp	      2361	bfd.c	FUNCTION_39
0x40018f9	            0x415c	                                 pop r12	      2361	bfd.c	FUNCTION_39
0x40018fb	              0xc3	                                     ret	      2361	bfd.c	FUNCTION_39
bfd_set_gp_size	WHILE,0:FOR,0:functions,0:DO,0:IF,3:ELSE,1:CALL,2:SWITCH,0	16
0x40011c6	         0xfb64744	           movzx eax, byte [rdi + 0x44] 	      1597	bfd.c	FUNCTION_23	IF_1
0x40011ca	          0x83e007	                              and eax, 7	      1597	bfd.c	FUNCTION_23	IF_1
0x40011cd	            0x3c01	                               cmp al, 1	      1597	bfd.c	FUNCTION_23	IF_1
0x40011cf	            0x7529	                           jne 0x40011fa	      1597	bfd.c	FUNCTION_23	IF_1
0x40011d1	        0x488b4708	                mov rax, qword [rdi + 8]	      1600	bfd.c	FUNCTION_23	IF_2
0x40011d5	          0x8b4008	                mov eax, dword [rax + 8]	      1600	bfd.c	FUNCTION_23	IF_2
0x40011d8	          0x83f803	                              cmp eax, 3	      1600	bfd.c	FUNCTION_23	IF_2
0x40011db	            0x750b	                           jne 0x40011e8	      1600	bfd.c	FUNCTION_23	IF_2
0x40011dd	    0x488b87f80000	            mov rax, qword [rdi + 0xf8] 	      1601	bfd.c	FUNCTION_23	CALL_1
0x40011e4	          0x897028	             mov dword [rax + 0x28], esi	      1601	bfd.c	FUNCTION_23	CALL_1
0x40011e7	              0xc3	                                     ret	      1601	bfd.c	FUNCTION_23	CALL_1
0x40011e8	          0x83f805	                              cmp eax, 5	      1602	bfd.c	FUNCTION_23	ELSE_1	IF_3
0x40011eb	            0x750d	                           jne 0x40011fa	      1602	bfd.c	FUNCTION_23	ELSE_1	IF_3
0x40011ed	    0x488b87f80000	            mov rax, qword [rdi + 0xf8] 	      1603	bfd.c	FUNCTION_23	ELSE_1	IF_3
0x40011f4	    0x89b0f8020000	            mov dword [rax + 0x2f8], esi	      1603	bfd.c	FUNCTION_23	ELSE_1	IF_3
0x40011fa	            0xf3c3	                                     ret	      1603	bfd.c	FUNCTION_23	ELSE_1	IF_3
error_handler_internal	WHILE,0:FOR,2:functions,0:DO,0:IF,1:ELSE,1:CALL,12:SWITCH,1	715
0x40004e8	            0x4157	                                push r15	      1092	bfd.c	FUNCTION_8
0x40004ea	            0x4156	                                push r14	      1092	bfd.c	FUNCTION_8
0x40004ec	            0x4155	                                push r13	      1092	bfd.c	FUNCTION_8
0x40004ee	            0x4154	                                push r12	      1092	bfd.c	FUNCTION_8
0x40004f0	              0x55	                                push rbp	      1092	bfd.c	FUNCTION_8
0x40004f1	              0x53	                                push rbx	      1092	bfd.c	FUNCTION_8
0x40004f2	    0x4881ec380100	                          sub rsp, 0x138	      1092	bfd.c	FUNCTION_8
0x40004f9	        0x48893c24	                    mov qword [rsp], rdi	      1092	bfd.c	FUNCTION_8
0x40004fd	          0x4989f7	                            mov r15, rsi	      1092	bfd.c	FUNCTION_8
0x4000500	    0x64488b042528	                mov rax, qword fs:[0x28]	      1092	bfd.c	FUNCTION_8
0x4000509	    0x488984242801	            mov qword [rsp + 0x128], rax	      1092	bfd.c	FUNCTION_8
0x4000511	            0x31c0	                            xor eax, eax	      1092	bfd.c	FUNCTION_8
0x4000513	      0x4c8d6c2410	                   lea r13, [rsp + 0x10]	      1092	bfd.c	FUNCTION_8
0x4000518	    0x498d95900000	                   lea rdx, [r13 + 0x90]	      1092	bfd.c	FUNCTION_8
0x400051f	          0x4c89e8	                            mov rax, r13	      1092	bfd.c	FUNCTION_8
0x4000522	    0xc70000000000	                      mov dword [rax], 0	      1097	bfd.c	FUNCTION_8	FOR_1
0x4000528	        0x4883c010	                           add rax, 0x10	      1097	bfd.c	FUNCTION_8	FOR_1
0x400052c	          0x4839d0	                            cmp rax, rdx	      1096	bfd.c	FUNCTION_8	FOR_1
0x400052f	            0x75f1	                           jne 0x4000522	      1096	bfd.c	FUNCTION_8	FOR_1
0x4000531	        0x488b0424	                    mov rax, qword [rsp]	      1096	bfd.c	FUNCTION_8	FOR_1
0x4000535	    0x41be00000000	                             mov r14d, 0	      1096	bfd.c	FUNCTION_8	FOR_1
0x400053b	      0xe9a7020000	                           jmp 0x40007e7	      1096	bfd.c	FUNCTION_8	FOR_1
0x4000540	          0x80fa25	                            cmp dl, 0x25	       918	bfd.c	FUNCTION_7	WHILE_1	IF_1
0x4000543	            0x741b	                            je 0x4000560	       918	bfd.c	FUNCTION_7	WHILE_1	IF_1
0x4000545	      0xbe25000000	                           mov esi, 0x25	       920	bfd.c	FUNCTION_7	WHILE_1	IF_1	CALL_1
0x400054a	          0x4889c7	                            mov rdi, rax	       920	bfd.c	FUNCTION_7	WHILE_1	IF_1	CALL_1
0x400054d	      0xe800000000	                          call 0x4000552	       920	bfd.c	FUNCTION_7	WHILE_1	IF_1	CALL_1
0x4000552	          0x4885c0	                           test rax, rax	       921	bfd.c	FUNCTION_7	WHILE_1	IF_1	IF_2
0x4000555	     0xf858c020000	                           jne 0x40007e7	       921	bfd.c	FUNCTION_7	WHILE_1	IF_1	IF_2
0x400055b	      0xe992020000	                           jmp 0x40007f2	       921	bfd.c	FUNCTION_7	WHILE_1	IF_1	IF_2
0x4000560	         0xfb65001	               movzx edx, byte [rax + 1]	       924	bfd.c	FUNCTION_7	WHILE_1	ELSE_1	IF_3
0x4000564	          0x80fa25	                            cmp dl, 0x25	       924	bfd.c	FUNCTION_7	WHILE_1	ELSE_1	IF_3
0x4000567	            0x7509	                           jne 0x4000572	       924	bfd.c	FUNCTION_7	WHILE_1	ELSE_1	IF_3
0x4000569	        0x4883c002	                              add rax, 2	       925	bfd.c	FUNCTION_7	WHILE_1	ELSE_1	IF_3
0x400056d	      0xe975020000	                           jmp 0x40007e7	       925	bfd.c	FUNCTION_7	WHILE_1	ELSE_1	IF_3
0x4000572	        0x488d5801	                      lea rbx, [rax + 1]	       932	bfd.c	FUNCTION_7	WHILE_1	ELSE_2
0x4000576	    0xc7442408ffff	        mov dword [rsp + 8], 0xffffffff 	       935	bfd.c	FUNCTION_7	WHILE_1	ELSE_2
0x400057e	          0x80fa30	                            cmp dl, 0x30	       936	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4	CALL_2
0x4000581	            0x7427	                            je 0x40005aa	       936	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4	CALL_2
0x4000583	           0xfbeca	                           movsx ecx, dl	       936	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4	CALL_2
0x4000586	           0xfb6d2	                           movzx edx, dl	       936	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4	CALL_2
0x4000589	    0xf68412000000	                test byte [rdx + rdx], 4	       936	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4	CALL_2
0x4000591	            0x7417	                            je 0x40005aa	       936	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4	CALL_2
0x4000593	        0x80780224	                cmp byte [rax + 2], 0x24	       936	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4	CALL_2
0x4000597	            0x7511	                           jne 0x40005aa	       936	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4	CALL_2
0x4000599	          0x83e931	                           sub ecx, 0x31	       938	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4
0x400059c	        0x894c2408	                mov dword [rsp + 8], ecx	       938	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4
0x40005a0	        0x488d5803	                      lea rbx, [rax + 3]	       939	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4
0x40005a4	            0xeb04	                           jmp 0x40005aa	       939	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4
0x40005a6	        0x4883c301	                              add rbx, 1	       944	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_2
0x40005aa	        0x440fb623	                  movzx r12d, byte [rbx]	       943	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_2	CALL_3
0x40005ae	        0x410fbeec	                         movsx ebp, r12b	       943	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_2	CALL_3
0x40005b2	            0x89ee	                            mov esi, ebp	       943	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_2	CALL_3
0x40005b4	      0xbf00000000	                              mov edi, 0	       943	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_2	CALL_3
0x40005b9	      0xe800000000	                          call 0x40005be	       943	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_2	CALL_3
0x40005be	          0x4885c0	                           test rax, rax	       943	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_2	CALL_3
0x40005c1	            0x75e3	                           jne 0x40005a6	       943	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_2	CALL_3
0x40005c3	        0x4180fc2a	                          cmp r12b, 0x2a	       946	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5
0x40005c7	            0x7410	                            je 0x40005d9	       946	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5
0x40005c9	        0x400fb6ed	                          movzx ebp, bpl	       964	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	ELSE_3	WHILE_3	CALL_6
0x40005cd	    0xf6842d000000	                test byte [rbp + rbp], 4	       964	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	ELSE_3	WHILE_3	CALL_6
0x40005d5	            0x755f	                           jne 0x4000636	       964	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	ELSE_3	WHILE_3	CALL_6
0x40005d7	            0xeb6e	                           jmp 0x4000647	       964	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	ELSE_3	WHILE_3	CALL_6
0x40005d9	        0x488d4b01	                      lea rcx, [rbx + 1]	       950	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5
0x40005dd	         0xfb65301	               movzx edx, byte [rbx + 1]	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x40005e1	          0x4489f0	                           mov eax, r14d	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x40005e4	          0x80fa30	                            cmp dl, 0x30	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x40005e7	            0x741d	                            je 0x4000606	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x40005e9	           0xfbef2	                           movsx esi, dl	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x40005ec	           0xfb6d2	                           movzx edx, dl	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x40005ef	    0xf68412000000	                test byte [rdx + rdx], 4	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x40005f7	            0x740d	                            je 0x4000606	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x40005f9	        0x807b0224	                cmp byte [rbx + 2], 0x24	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x40005fd	            0x7507	                           jne 0x4000606	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x40005ff	          0x8d46cf	                   lea eax, [rsi - 0x31]	       954	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6
0x4000602	        0x488d4b03	                      lea rcx, [rbx + 3]	       955	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6
0x4000606	          0x83f808	                              cmp eax, 8	       957	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_7
0x4000609	            0x7614	                           jbe 0x400061f	       957	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_7
0x400060b	      0xba00000000	                              mov edx, 0	       958	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	CALL_5
0x4000610	      0xbebe030000	                          mov esi, 0x3be	       958	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	CALL_5
0x4000615	      0xbf00000000	                              mov edi, 0	       958	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	CALL_5
0x400061a	      0xe800000000	                          call 0x400061f	       958	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	CALL_5
0x400061f	            0x89c0	                            mov eax, eax	       959	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5
0x4000621	        0x48c1e004	                              shl rax, 4	       959	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5
0x4000625	    0xc74404100100	         mov dword [rsp + rax + 0x10], 1	       959	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5
0x400062d	        0x4183c601	                             add r14d, 1	       960	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5
0x4000631	          0x4889cb	                            mov rbx, rcx	       960	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5
0x4000634	            0xeb11	                           jmp 0x4000647	       960	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5
0x4000636	        0x4883c301	                              add rbx, 1	       965	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	ELSE_3	WHILE_3
0x400063a	           0xfb603	                   movzx eax, byte [rbx]	       964	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	ELSE_3	WHILE_3	CALL_6
0x400063d	    0xf68400000000	                test byte [rax + rax], 4	       964	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	ELSE_3	WHILE_3	CALL_6
0x4000645	            0x75ef	                           jne 0x4000636	       964	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	ELSE_3	WHILE_3	CALL_6
0x4000647	          0x803b2e	                    cmp byte [rbx], 0x2e	       968	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8
0x400064a	            0x7576	                           jne 0x40006c2	       968	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8
0x400064c	         0xfb64301	               movzx eax, byte [rbx + 1]	       971	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x4000650	            0x3c2a	                            cmp al, 0x2a	       971	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x4000652	            0x7413	                            je 0x4000667	       971	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x4000654	        0x4883c301	                              add rbx, 1	       970	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8
0x4000658	           0xfb6c0	                           movzx eax, al	       989	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	ELSE_4	WHILE_4	CALL_9
0x400065b	    0xf68400000000	                test byte [rax + rax], 4	       989	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	ELSE_4	WHILE_4	CALL_9
0x4000663	            0x756d	                           jne 0x40006d2	       989	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	ELSE_4	WHILE_4	CALL_9
0x4000665	            0xeb5b	                           jmp 0x40006c2	       989	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	ELSE_4	WHILE_4	CALL_9
0x4000667	        0x488d4b02	                      lea rcx, [rbx + 2]	       975	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x400066b	         0xfb65302	               movzx edx, byte [rbx + 2]	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x400066f	          0x4489f0	                           mov eax, r14d	       976	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x4000672	          0x80fa30	                            cmp dl, 0x30	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x4000675	            0x741d	                            je 0x4000694	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x4000677	           0xfbef2	                           movsx esi, dl	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x400067a	           0xfb6d2	                           movzx edx, dl	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x400067d	    0xf68412000000	                test byte [rdx + rdx], 4	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x4000685	            0x740d	                            je 0x4000694	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x4000687	        0x807b0324	                cmp byte [rbx + 3], 0x24	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x400068b	            0x7507	                           jne 0x4000694	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x400068d	          0x8d46cf	                   lea eax, [rsi - 0x31]	       979	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10
0x4000690	        0x488d4b04	                      lea rcx, [rbx + 4]	       980	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10
0x4000694	          0x83f808	                              cmp eax, 8	       982	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_11
0x4000697	            0x7614	                           jbe 0x40006ad	       982	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_11
0x4000699	      0xba00000000	                              mov edx, 0	       983	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	CALL_8
0x400069e	      0xbed7030000	                          mov esi, 0x3d7	       983	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	CALL_8
0x40006a3	      0xbf00000000	                              mov edi, 0	       983	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	CALL_8
0x40006a8	      0xe800000000	                          call 0x40006ad	       983	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	CALL_8
0x40006ad	            0x89c0	                            mov eax, eax	       984	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x40006af	        0x48c1e004	                              shl rax, 4	       984	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x40006b3	    0xc74404100100	         mov dword [rsp + rax + 0x10], 1	       984	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x40006bb	        0x4183c601	                             add r14d, 1	       985	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x40006bf	          0x4889cb	                            mov rbx, rcx	       985	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x40006c2	    0xc744240c0000	                mov dword [rsp + 0xc], 0	      1003	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x40006ca	    0x41bc00000000	                             mov r12d, 0	      1003	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x40006d0	            0xeb53	                           jmp 0x4000725	      1003	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x40006d2	        0x4883c301	                              add rbx, 1	       990	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	ELSE_4	WHILE_4
0x40006d6	           0xfb603	                   movzx eax, byte [rbx]	       989	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	ELSE_4	WHILE_4	CALL_9
0x40006d9	    0xf68400000000	                test byte [rax + rax], 4	       989	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	ELSE_4	WHILE_4	CALL_9
0x40006e1	            0x75ef	                           jne 0x40006d2	       989	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	ELSE_4	WHILE_4	CALL_9
0x40006e3	            0xebdd	                           jmp 0x40006c2	       989	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	ELSE_4	WHILE_4	CALL_9
0x40006e5	        0x4080fd68	                           cmp bpl, 0x68	       994	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x40006e9	            0x742e	                            je 0x4000719	       994	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x40006eb	        0x4080fd6c	                           cmp bpl, 0x6c	       994	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x40006ef	            0x740e	                            je 0x40006ff	       994	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x40006f1	        0x4080fd4c	                           cmp bpl, 0x4c	       994	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x40006f5	            0x750e	                           jne 0x4000705	       994	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x40006f7	    0x41bc02000000	                             mov r12d, 2	      1003	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x40006fd	            0xeb22	                           jmp 0x4000721	      1003	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x40006ff	        0x4183c401	                             add r12d, 1	      1000	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x4000703	            0xeb1c	                           jmp 0x4000721	      1000	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x4000705	      0xba00000000	                              mov edx, 0	      1006	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1	CALL_11
0x400070a	      0xbeee030000	                          mov esi, 0x3ee	      1006	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1	CALL_11
0x400070f	      0xbf00000000	                              mov edi, 0	      1006	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1	CALL_11
0x4000714	      0xe800000000	                          call 0x4000719	      1006	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1	CALL_11
0x4000719	    0xc744240c0100	                mov dword [rsp + 0xc], 1	       997	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x4000721	        0x4883c301	                              add rbx, 1	      1008	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5
0x4000725	           0xfb62b	                   movzx ebp, byte [rbx]	       992	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	CALL_10
0x4000728	        0x400fbef5	                          movsx esi, bpl	       992	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	CALL_10
0x400072c	      0xbf00000000	                              mov edi, 0	       992	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	CALL_10
0x4000731	      0xe800000000	                          call 0x4000736	       992	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	CALL_10
0x4000736	          0x4885c0	                           test rax, rax	       992	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	CALL_10
0x4000739	            0x75aa	                           jne 0x40006e5	       992	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	CALL_10
0x400073b	        0x488d4301	                      lea rax, [rbx + 1]	      1011	bfd.c	FUNCTION_7	WHILE_1	ELSE_2
0x400073f	        0x8b4c2408	                mov ecx, dword [rsp + 8]	      1013	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_12
0x4000743	            0x85c9	                           test ecx, ecx	      1013	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_12
0x4000745	        0x410f48ce	                         cmovs ecx, r14d	      1013	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_12
0x4000749	        0x894c2408	                mov dword [rsp + 8], ecx	      1013	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_12
0x400074d	          0x83ed45	                           sub ebp, 0x45	      1016	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2
0x4000750	        0x4080fd33	                           cmp bpl, 0x33	      1016	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2
0x4000754	            0x774d	                            ja 0x40007a3	      1016	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2
0x4000756	        0x400fb6ed	                          movzx ebp, bpl	      1016	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2
0x400075a	    0xff24ed000000	                       jmp qword [rbp*8]	      1016	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2
0x4000761	      0xb901000000	                              mov ecx, 1	      1027	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_13
0x4000766	      0x837c240c00	                cmp dword [rsp + 0xc], 0	      1026	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_13
0x400076b	            0x754f	                           jne 0x40007bc	      1026	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_13
0x400076d	          0x4585e4	                         test r12d, r12d	      1030	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	ELSE_5	SWITCH_3
0x4000770	            0x744a	                            je 0x40007bc	      1030	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	ELSE_5	SWITCH_3
0x4000772	        0x4183fc01	                             cmp r12d, 1	      1041	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	ELSE_5	SWITCH_3
0x4000776	           0xf95c1	                                setne cl	      1041	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	ELSE_5	SWITCH_3
0x4000779	           0xfb6c9	                           movzx ecx, cl	      1041	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	ELSE_5	SWITCH_3
0x400077c	          0x83c102	                              add ecx, 2	      1041	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	ELSE_5	SWITCH_3
0x400077f	            0xeb3b	                           jmp 0x40007bc	      1041	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	ELSE_5	SWITCH_3
0x4000781	        0x4183fc01	                             cmp r12d, 1	      1061	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	ELSE_6
0x4000785	            0x19c9	                            sbb ecx, ecx	      1061	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	ELSE_6
0x4000787	          0x83c105	                              add ecx, 5	      1061	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	ELSE_6
0x400078a	            0xeb30	                           jmp 0x40007bc	      1061	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	ELSE_6
0x400078c	         0xfb64b01	               movzx ecx, byte [rbx + 1]	      1072	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_15
0x4000790	          0x8d51bf	                   lea edx, [rcx - 0x41]	      1072	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_15
0x4000793	      0xb906000000	                              mov ecx, 6	      1074	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2
0x4000798	          0x80fa01	                               cmp dl, 1	      1072	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_15
0x400079b	            0x771f	                            ja 0x40007bc	      1072	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_15
0x400079d	        0x488d4302	                      lea rax, [rbx + 2]	      1073	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_15
0x40007a1	            0xeb19	                           jmp 0x40007bc	      1073	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_15
0x40007a3	      0xba00000000	                              mov edx, 0	      1077	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	CALL_12
0x40007a8	      0xbe35040000	                          mov esi, 0x435	      1077	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	CALL_12
0x40007ad	      0xbf00000000	                              mov edi, 0	      1077	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	CALL_12
0x40007b2	      0xe800000000	                          call 0x40007b7	      1077	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	CALL_12
0x40007b7	      0xb906000000	                              mov ecx, 6	      1069	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2
0x40007bc	      0x837c240808	                  cmp dword [rsp + 8], 8	      1080	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_16
0x40007c1	            0x7614	                           jbe 0x40007d7	      1080	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_16
0x40007c3	      0xba00000000	                              mov edx, 0	      1081	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	CALL_13
0x40007c8	      0xbe39040000	                          mov esi, 0x439	      1081	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	CALL_13
0x40007cd	      0xbf00000000	                              mov edi, 0	      1081	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	CALL_13
0x40007d2	      0xe800000000	                          call 0x40007d7	      1081	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	CALL_13
0x40007d7	        0x8b542408	                mov edx, dword [rsp + 8]	      1082	bfd.c	FUNCTION_7	WHILE_1	ELSE_2
0x40007db	        0x48c1e204	                              shl rdx, 4	      1082	bfd.c	FUNCTION_7	WHILE_1	ELSE_2
0x40007df	        0x894c1410	       mov dword [rsp + rdx + 0x10], ecx	      1082	bfd.c	FUNCTION_7	WHILE_1	ELSE_2
0x40007e3	        0x4183c601	                             add r14d, 1	      1083	bfd.c	FUNCTION_7	WHILE_1	ELSE_2
0x40007e7	           0xfb610	                   movzx edx, byte [rax]	       916	bfd.c	FUNCTION_7	WHILE_1
0x40007ea	            0x84d2	                             test dl, dl	       916	bfd.c	FUNCTION_7	WHILE_1
0x40007ec	     0xf854efdffff	                           jne 0x4000540	       916	bfd.c	FUNCTION_7	WHILE_1
0x40007f2	          0x4585f6	                         test r14d, r14d	      1100	bfd.c	FUNCTION_8	FOR_2
0x40007f5	     0xf8446010000	                            je 0x4000941	      1100	bfd.c	FUNCTION_8	FOR_2
0x40007fb	        0x418d46ff	                      lea eax, [r14 - 1]	      1100	bfd.c	FUNCTION_8	FOR_2
0x40007ff	        0x4883c001	                              add rax, 1	      1100	bfd.c	FUNCTION_8	FOR_2
0x4000803	        0x48c1e004	                              shl rax, 4	      1100	bfd.c	FUNCTION_8	FOR_2
0x4000807	      0x488d4c0410	            lea rcx, [rsp + rax + 0x10] 	      1100	bfd.c	FUNCTION_8	FOR_2
0x400080c	          0x4c89ea	                            mov rdx, r13	      1100	bfd.c	FUNCTION_8	FOR_2
0x400080f	      0x41837d0006	                      cmp dword [r13], 6	      1102	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x4000814	     0xf8706010000	                            ja 0x4000920	      1102	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x400081a	        0x418b4500	                    mov eax, dword [r13]	      1102	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x400081e	    0xff24c5000000	                       jmp qword [rax*8]	      1102	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x4000825	          0x418b07	                    mov eax, dword [r15]	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4000828	          0x83f82f	                           cmp eax, 0x2f	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x400082b	            0x770e	                            ja 0x400083b	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x400082d	            0x89c6	                            mov esi, eax	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x400082f	        0x49037710	             add rsi, qword [r15 + 0x10]	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4000833	          0x83c008	                              add eax, 8	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4000836	          0x418907	                    mov dword [r15], eax	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4000839	            0xeb0c	                           jmp 0x4000847	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x400083b	        0x498b7708	                mov rsi, qword [r15 + 8]	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x400083f	        0x488d4608	                      lea rax, [rsi + 8]	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4000843	        0x49894708	                mov qword [r15 + 8], rax	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4000847	            0x8b06	                    mov eax, dword [rsi]	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4000849	            0x8902	                    mov dword [rdx], eax	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x400084b	      0xe9e4000000	                           jmp 0x4000934	      1106	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x4000850	          0x418b07	                    mov eax, dword [r15]	      1108	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_3
0x4000853	          0x83f82f	                           cmp eax, 0x2f	      1108	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_3
0x4000856	            0x770e	                            ja 0x4000866	      1108	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_3
0x4000858	            0x89c6	                            mov esi, eax	      1108	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_3
0x400085a	        0x49037710	             add rsi, qword [r15 + 0x10]	      1108	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_3
0x400085e	          0x83c008	                              add eax, 8	      1108	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_3
0x4000861	          0x418907	                    mov dword [r15], eax	      1108	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_3
0x4000864	            0xeb0c	                           jmp 0x4000872	      1108	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_3
0x4000866	        0x498b7708	                mov rsi, qword [r15 + 8]	      1108	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_3
0x400086a	        0x488d4608	                      lea rax, [rsi + 8]	      1108	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_3
0x400086e	        0x49894708	                mov qword [r15 + 8], rax	      1108	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_3
0x4000872	          0x488b06	                    mov rax, qword [rsi]	      1108	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_3
0x4000875	          0x488902	                    mov qword [rdx], rax	      1108	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_3
0x4000878	      0xe9b7000000	                           jmp 0x4000934	      1109	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x400087d	          0x418b07	                    mov eax, dword [r15]	      1111	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_4
0x4000880	          0x83f82f	                           cmp eax, 0x2f	      1111	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_4
0x4000883	            0x770e	                            ja 0x4000893	      1111	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_4
0x4000885	            0x89c6	                            mov esi, eax	      1111	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_4
0x4000887	        0x49037710	             add rsi, qword [r15 + 0x10]	      1111	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_4
0x400088b	          0x83c008	                              add eax, 8	      1111	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_4
0x400088e	          0x418907	                    mov dword [r15], eax	      1111	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_4
0x4000891	            0xeb0c	                           jmp 0x400089f	      1111	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_4
0x4000893	        0x498b7708	                mov rsi, qword [r15 + 8]	      1111	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_4
0x4000897	        0x488d4608	                      lea rax, [rsi + 8]	      1111	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_4
0x400089b	        0x49894708	                mov qword [r15 + 8], rax	      1111	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_4
0x400089f	          0x488b06	                    mov rax, qword [rsi]	      1111	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_4
0x40008a2	          0x488902	                    mov qword [rdx], rax	      1111	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_4
0x40008a5	      0xe98a000000	                           jmp 0x4000934	      1112	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x40008aa	        0x418b4704	                mov eax, dword [r15 + 4]	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x40008ae	      0x3daf000000	                           cmp eax, 0xaf	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x40008b3	            0x770f	                            ja 0x40008c4	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x40008b5	            0x89c6	                            mov esi, eax	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x40008b7	        0x49037710	             add rsi, qword [r15 + 0x10]	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x40008bb	          0x83c010	                           add eax, 0x10	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x40008be	        0x41894704	                mov dword [r15 + 4], eax	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x40008c2	            0xeb0c	                           jmp 0x40008d0	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x40008c4	        0x498b7708	                mov rsi, qword [r15 + 8]	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x40008c8	        0x488d4608	                      lea rax, [rsi + 8]	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x40008cc	        0x49894708	                mov qword [r15 + 8], rax	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x40008d0	        0xf20f1006	                 movsd xmm0, qword [rsi]	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x40008d4	        0xf20f1102	                 movsd qword [rdx], xmm0	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x40008d8	            0xeb5a	                           jmp 0x4000934	      1115	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x40008da	        0x498b4708	                mov rax, qword [r15 + 8]	      1117	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_6
0x40008de	        0x4883c00f	                            add rax, 0xf	      1117	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_6
0x40008e2	        0x4883e0f0	             and rax, 0xfffffffffffffff0	      1117	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_6
0x40008e6	        0x488d7010	                   lea rsi, [rax + 0x10]	      1117	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_6
0x40008ea	        0x49897708	                mov qword [r15 + 8], rsi	      1117	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_6
0x40008ee	            0xdb28	                         fld xword [rax]	      1117	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_6
0x40008f0	        0x41db7d00	                        fstp xword [r13]	      1117	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_6
0x40008f4	            0xeb3e	                           jmp 0x4000934	      1118	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x40008f6	          0x418b07	                    mov eax, dword [r15]	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x40008f9	          0x83f82f	                           cmp eax, 0x2f	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x40008fc	            0x770e	                            ja 0x400090c	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x40008fe	            0x89c6	                            mov esi, eax	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x4000900	        0x49037710	             add rsi, qword [r15 + 0x10]	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x4000904	          0x83c008	                              add eax, 8	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x4000907	          0x418907	                    mov dword [r15], eax	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x400090a	            0xeb0c	                           jmp 0x4000918	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x400090c	        0x498b7708	                mov rsi, qword [r15 + 8]	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x4000910	        0x488d4608	                      lea rax, [rsi + 8]	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x4000914	        0x49894708	                mov qword [r15 + 8], rax	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x4000918	          0x488b06	                    mov rax, qword [rsi]	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x400091b	          0x488902	                    mov qword [rdx], rax	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x400091e	            0xeb14	                           jmp 0x4000934	      1121	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x4000920	      0xba00000000	                              mov edx, 0	      1123	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_8
0x4000925	      0xbe63040000	                          mov esi, 0x463	      1123	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_8
0x400092a	      0xbf00000000	                              mov edi, 0	      1123	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_8
0x400092f	      0xe800000000	                          call 0x4000934	      1123	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_8
0x4000934	        0x4983c510	                           add r13, 0x10	      1123	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_8
0x4000938	          0x4939cd	                            cmp r13, rcx	      1100	bfd.c	FUNCTION_8	FOR_2
0x400093b	     0xf85cbfeffff	                           jne 0x400080c	      1100	bfd.c	FUNCTION_8	FOR_2
0x4000941	    0x488b3d000000	            mov rdi, qword [0x04000948] 	      1128	bfd.c	FUNCTION_8	CALL_9
0x4000948	      0xe800000000	                          call 0x400094d	      1128	bfd.c	FUNCTION_8	CALL_9
0x400094d	    0x488b0d000000	            mov rcx, qword [0x04000954] 	      1130	bfd.c	FUNCTION_8	IF_1
0x4000954	          0x4885c9	                           test rcx, rcx	      1130	bfd.c	FUNCTION_8	IF_1
0x4000957	            0x741d	                            je 0x4000976	      1130	bfd.c	FUNCTION_8	IF_1
0x4000959	      0xba00000000	                              mov edx, 0	        97	stdio2.h	CALL_34
0x400095e	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_34
0x4000963	    0x488b3d000000	            mov rdi, qword [0x0400096a] 	        97	stdio2.h	CALL_34
0x400096a	      0xb800000000	                              mov eax, 0	        97	stdio2.h	CALL_34
0x400096f	      0xe800000000	                          call 0x4000974	        97	stdio2.h	CALL_34
0x4000974	            0xeb1b	                           jmp 0x4000991	        97	stdio2.h	CALL_34
0x4000976	    0x488b0d000000	            mov rcx, qword [0x0400097d] 	        97	stdio2.h	CALL_34
0x400097d	      0xba05000000	                              mov edx, 5	        97	stdio2.h	CALL_34
0x4000982	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_34
0x4000987	      0xbf00000000	                              mov edi, 0	        97	stdio2.h	CALL_34
0x400098c	      0xe800000000	                          call 0x4000991	        97	stdio2.h	CALL_34
0x4000991	    0x4c8b2d000000	            mov r13, qword [0x04000998] 	      1135	bfd.c	FUNCTION_8	CALL_10
0x4000998	    0x41be00000000	                             mov r14d, 0	       661	bfd.c	FUNCTION_6
0x400099e	      0xe9ef050000	                           jmp 0x4000f92	       661	bfd.c	FUNCTION_6
0x40009a3	            0x3c25	                            cmp al, 0x25	       667	bfd.c	FUNCTION_6	WHILE_1	IF_1
0x40009a5	            0x745f	                            je 0x4000a06	       667	bfd.c	FUNCTION_6	WHILE_1	IF_1
0x40009a7	      0xbe25000000	                           mov esi, 0x25	       670	bfd.c	FUNCTION_6	WHILE_1	IF_1	CALL_1
0x40009ac	        0x488b1c24	                    mov rbx, qword [rsp]	       670	bfd.c	FUNCTION_6	WHILE_1	IF_1	CALL_1
0x40009b0	          0x4889df	                            mov rdi, rbx	       670	bfd.c	FUNCTION_6	WHILE_1	IF_1	CALL_1
0x40009b3	      0xe800000000	                          call 0x40009b8	       670	bfd.c	FUNCTION_6	WHILE_1	IF_1	CALL_1
0x40009b8	          0x4885c0	                           test rax, rax	       671	bfd.c	FUNCTION_6	WHILE_1	IF_1	IF_2
0x40009bb	            0x7422	                            je 0x40009df	       671	bfd.c	FUNCTION_6	WHILE_1	IF_1	IF_2
0x40009bd	          0x4829d8	                            sub rax, rbx	        97	stdio2.h	CALL_34
0x40009c0	          0x4889c1	                            mov rcx, rax	        97	stdio2.h	CALL_34
0x40009c3	          0x4989d8	                             mov r8, rbx	        97	stdio2.h	CALL_34
0x40009c6	      0xba00000000	                              mov edx, 0	        97	stdio2.h	CALL_34
0x40009cb	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_34
0x40009d0	          0x4c89ef	                            mov rdi, r13	        97	stdio2.h	CALL_34
0x40009d3	      0xb800000000	                              mov eax, 0	        97	stdio2.h	CALL_34
0x40009d8	      0xe800000000	                          call 0x40009dd	        97	stdio2.h	CALL_34
0x40009dd	            0xeb1b	                           jmp 0x40009fa	        97	stdio2.h	CALL_34
0x40009df	        0x488b0c24	                    mov rcx, qword [rsp]	        97	stdio2.h	CALL_34
0x40009e3	      0xba00000000	                              mov edx, 0	        97	stdio2.h	CALL_34
0x40009e8	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_34
0x40009ed	          0x4c89ef	                            mov rdi, r13	        97	stdio2.h	CALL_34
0x40009f0	      0xb800000000	                              mov eax, 0	        97	stdio2.h	CALL_34
0x40009f5	      0xe800000000	                          call 0x40009fa	        97	stdio2.h	CALL_34
0x40009fa	          0x4863d0	                         movsxd rdx, eax	       675	bfd.c	FUNCTION_6	WHILE_1	IF_1
0x40009fd	        0x48011424	                    add qword [rsp], rdx	       675	bfd.c	FUNCTION_6	WHILE_1	IF_1
0x4000a01	      0xe987050000	                           jmp 0x4000f8d	       675	bfd.c	FUNCTION_6	WHILE_1	IF_1
0x4000a06	        0x488b0424	                    mov rax, qword [rsp]	       677	bfd.c	FUNCTION_6	WHILE_1	ELSE_2	IF_3
0x4000a0a	         0xfb64001	               movzx eax, byte [rax + 1]	       677	bfd.c	FUNCTION_6	WHILE_1	ELSE_2	IF_3
0x4000a0e	            0x3c25	                            cmp al, 0x25	       677	bfd.c	FUNCTION_6	WHILE_1	ELSE_2	IF_3
0x4000a10	            0x7517	                           jne 0x4000a29	       677	bfd.c	FUNCTION_6	WHILE_1	ELSE_2	IF_3
0x4000a12	          0x4c89ee	                            mov rsi, r13	       679	bfd.c	FUNCTION_6	WHILE_1	ELSE_2	IF_3	CALL_2
0x4000a15	      0xbf25000000	                           mov edi, 0x25	       679	bfd.c	FUNCTION_6	WHILE_1	ELSE_2	IF_3	CALL_2
0x4000a1a	      0xe800000000	                          call 0x4000a1f	       679	bfd.c	FUNCTION_6	WHILE_1	ELSE_2	IF_3	CALL_2
0x4000a1f	      0x4883042402	                      add qword [rsp], 2	       681	bfd.c	FUNCTION_6	WHILE_1	ELSE_2	IF_3
0x4000a24	      0xe969050000	                           jmp 0x4000f92	       681	bfd.c	FUNCTION_6	WHILE_1	ELSE_2	IF_3
0x4000a29	        0x488b0c24	                    mov rcx, qword [rsp]	       691	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x4000a2d	        0x488d5901	                      lea rbx, [rcx + 1]	       691	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x4000a31	    0xc68424a00000	            mov byte [rsp + 0xa0], 0x25 	       691	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x4000a39	    0xc7442408ffff	        mov dword [rsp + 8], 0xffffffff 	       694	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x4000a41	            0x3c30	                            cmp al, 0x30	       695	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4	CALL_3
0x4000a43	            0x7421	                            je 0x4000a66	       695	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4	CALL_3
0x4000a45	           0xfbed0	                           movsx edx, al	       695	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4	CALL_3
0x4000a48	           0xfb6c0	                           movzx eax, al	       695	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4	CALL_3
0x4000a4b	    0xf68400000000	                test byte [rax + rax], 4	       695	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4	CALL_3
0x4000a53	            0x7411	                            je 0x4000a66	       695	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4	CALL_3
0x4000a55	        0x80790224	                cmp byte [rcx + 2], 0x24	       695	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4	CALL_3
0x4000a59	            0x750b	                           jne 0x4000a66	       695	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4	CALL_3
0x4000a5b	          0x8d42cf	                   lea eax, [rdx - 0x31]	       697	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4
0x4000a5e	        0x89442408	                mov dword [rsp + 8], eax	       697	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4
0x4000a62	        0x488d5b02	                      lea rbx, [rbx + 2]	       698	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4
0x4000a66	    0x488dac24a100	                   lea rbp, [rsp + 0xa1]	       694	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x4000a6e	            0xeb0c	                           jmp 0x4000a7c	       694	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x4000a70	        0x4883c501	                              add rbp, 1	       703	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2
0x4000a74	        0x4883c301	                              add rbx, 1	       703	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2
0x4000a78	        0x448865ff	                mov byte [rbp - 1], r12b	       703	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2
0x4000a7c	        0x440fb623	                  movzx r12d, byte [rbx]	       702	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2	CALL_4
0x4000a80	        0x450fbefc	                        movsx r15d, r12b	       702	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2	CALL_4
0x4000a84	          0x4489fe	                           mov esi, r15d	       702	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2	CALL_4
0x4000a87	      0xbf00000000	                              mov edi, 0	       702	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2	CALL_4
0x4000a8c	      0xe800000000	                          call 0x4000a91	       702	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2	CALL_4
0x4000a91	          0x4885c0	                           test rax, rax	       702	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2	CALL_4
0x4000a94	            0x75da	                           jne 0x4000a70	       702	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2	CALL_4
0x4000a96	        0x4180fc2a	                          cmp r12b, 0x2a	       705	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5
0x4000a9a	            0x7414	                            je 0x4000ab0	       705	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5
0x4000a9c	        0x450fb6ff	                        movzx r15d, r15b	       723	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3	CALL_7
0x4000aa0	    0x43f6843f0000	                test byte [r15 + r15], 4	       723	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3	CALL_7
0x4000aa9	            0x7574	                           jne 0x4000b1f	       723	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3	CALL_7
0x4000aab	      0xe98d000000	                           jmp 0x4000b3d	       723	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3	CALL_7
0x4000ab0	        0x4c8d6301	                      lea r12, [rbx + 1]	       710	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5
0x4000ab4	         0xfb65301	               movzx edx, byte [rbx + 1]	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_5
0x4000ab8	          0x4489f0	                           mov eax, r14d	       711	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5
0x4000abb	          0x80fa30	                            cmp dl, 0x30	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_5
0x4000abe	            0x741d	                            je 0x4000add	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_5
0x4000ac0	           0xfbeca	                           movsx ecx, dl	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_5
0x4000ac3	           0xfb6d2	                           movzx edx, dl	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_5
0x4000ac6	    0xf68412000000	                test byte [rdx + rdx], 4	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_5
0x4000ace	            0x740d	                            je 0x4000add	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_5
0x4000ad0	        0x807b0224	                cmp byte [rbx + 2], 0x24	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_5
0x4000ad4	            0x7507	                           jne 0x4000add	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_5
0x4000ad6	          0x8d41cf	                   lea eax, [rcx - 0x31]	       714	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6
0x4000ad9	        0x4c8d6303	                      lea r12, [rbx + 3]	       715	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6
0x4000add	        0x4183c601	                             add r14d, 1	       718	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5
0x4000ae1	            0x89c0	                            mov eax, eax	       717	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	CALL_6
0x4000ae3	        0x48c1e004	                              shl rax, 4	       717	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	CALL_6
0x4000ae7	        0x8b540410	      mov edx, dword [rsp + rax + 0x10] 	        33	stdio2.h	FUNCTION_56	CALL_1
0x4000aeb	          0xc1fa1f	                           sar edx, 0x1f	        33	stdio2.h	FUNCTION_56	CALL_1
0x4000aee	          0x4189d0	                            mov r8d, edx	        33	stdio2.h	FUNCTION_56	CALL_1
0x4000af1	      0x4433440410	       xor r8d, dword [rsp + rax + 0x10]	        33	stdio2.h	FUNCTION_56	CALL_1
0x4000af6	          0x4129d0	                            sub r8d, edx	        33	stdio2.h	FUNCTION_56	CALL_1
0x4000af9	      0xb900000000	                              mov ecx, 0	        33	stdio2.h	FUNCTION_56	CALL_1
0x4000afe	      0xba7f000000	                           mov edx, 0x7f	        33	stdio2.h	FUNCTION_56	CALL_1
0x4000b03	      0xbe01000000	                              mov esi, 1	        33	stdio2.h	FUNCTION_56	CALL_1
0x4000b08	          0x4889ef	                            mov rdi, rbp	        33	stdio2.h	FUNCTION_56	CALL_1
0x4000b0b	      0xb800000000	                              mov eax, 0	        33	stdio2.h	FUNCTION_56	CALL_1
0x4000b10	      0xe800000000	                          call 0x4000b15	        33	stdio2.h	FUNCTION_56	CALL_1
0x4000b15	            0x4898	                                    cdqe	       719	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5
0x4000b17	          0x4801c5	                            add rbp, rax	       719	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5
0x4000b1a	          0x4c89e3	                            mov rbx, r12	       719	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5
0x4000b1d	            0xeb1e	                           jmp 0x4000b3d	       719	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5
0x4000b1f	        0x4883c501	                              add rbp, 1	       724	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3
0x4000b23	        0x4883c301	                              add rbx, 1	       724	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3
0x4000b27	        0x448865ff	                mov byte [rbp - 1], r12b	       724	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3
0x4000b2b	        0x440fb623	                  movzx r12d, byte [rbx]	       723	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3	CALL_7
0x4000b2f	        0x410fb6c4	                         movzx eax, r12b	       723	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3	CALL_7
0x4000b33	    0xf68400000000	                test byte [rax + rax], 4	       723	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3	CALL_7
0x4000b3b	            0x75e2	                           jne 0x4000b1f	       723	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3	CALL_7
0x4000b3d	          0x803b2e	                    cmp byte [rbx], 0x2e	       727	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7
0x4000b40	     0xf8599000000	                           jne 0x4000bdf	       727	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7
0x4000b46	        0x4c8d6501	                      lea r12, [rbp + 1]	       730	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7
0x4000b4a	        0xc645002e	                    mov byte [rbp], 0x2e	       730	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7
0x4000b4e	         0xfb64301	               movzx eax, byte [rbx + 1]	       731	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8
0x4000b52	            0x3c2a	                            cmp al, 0x2a	       731	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8
0x4000b54	            0x7419	                            je 0x4000b6f	       731	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8
0x4000b56	        0x4883c301	                              add rbx, 1	       730	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7
0x4000b5a	           0xfb6d0	                           movzx edx, al	       749	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4	CALL_10
0x4000b5d	          0x4c89e5	                            mov rbp, r12	       749	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4	CALL_10
0x4000b60	    0xf68412000000	                test byte [rdx + rdx], 4	       749	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4	CALL_10
0x4000b68	            0x7475	                            je 0x4000bdf	       749	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4	CALL_10
0x4000b6a	      0xe980000000	                           jmp 0x4000bef	       749	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4	CALL_10
0x4000b6f	        0x4c8d7b02	                      lea r15, [rbx + 2]	       736	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8
0x4000b73	         0xfb65302	               movzx edx, byte [rbx + 2]	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_8
0x4000b77	          0x4489f0	                           mov eax, r14d	       737	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8
0x4000b7a	          0x80fa30	                            cmp dl, 0x30	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_8
0x4000b7d	            0x741d	                            je 0x4000b9c	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_8
0x4000b7f	           0xfbeca	                           movsx ecx, dl	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_8
0x4000b82	           0xfb6d2	                           movzx edx, dl	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_8
0x4000b85	    0xf68412000000	                test byte [rdx + rdx], 4	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_8
0x4000b8d	            0x740d	                            je 0x4000b9c	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_8
0x4000b8f	        0x807b0324	                cmp byte [rbx + 3], 0x24	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_8
0x4000b93	            0x7507	                           jne 0x4000b9c	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_8
0x4000b95	          0x8d41cf	                   lea eax, [rcx - 0x31]	       740	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9
0x4000b98	        0x4c8d7b04	                      lea r15, [rbx + 4]	       741	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9
0x4000b9c	        0x4183c601	                             add r14d, 1	       744	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8
0x4000ba0	            0x89c0	                            mov eax, eax	       743	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	CALL_9
0x4000ba2	        0x48c1e004	                              shl rax, 4	       743	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	CALL_9
0x4000ba6	        0x8b540410	      mov edx, dword [rsp + rax + 0x10] 	        33	stdio2.h	FUNCTION_56	CALL_1
0x4000baa	          0xc1fa1f	                           sar edx, 0x1f	        33	stdio2.h	FUNCTION_56	CALL_1
0x4000bad	          0x4189d0	                            mov r8d, edx	        33	stdio2.h	FUNCTION_56	CALL_1
0x4000bb0	      0x4433440410	       xor r8d, dword [rsp + rax + 0x10]	        33	stdio2.h	FUNCTION_56	CALL_1
0x4000bb5	          0x4129d0	                            sub r8d, edx	        33	stdio2.h	FUNCTION_56	CALL_1
0x4000bb8	      0xb900000000	                              mov ecx, 0	        33	stdio2.h	FUNCTION_56	CALL_1
0x4000bbd	    0x48c7c2ffffff	             mov rdx, 0xffffffffffffffff	        33	stdio2.h	FUNCTION_56	CALL_1
0x4000bc4	      0xbe01000000	                              mov esi, 1	        33	stdio2.h	FUNCTION_56	CALL_1
0x4000bc9	          0x4c89e7	                            mov rdi, r12	        33	stdio2.h	FUNCTION_56	CALL_1
0x4000bcc	      0xb800000000	                              mov eax, 0	        33	stdio2.h	FUNCTION_56	CALL_1
0x4000bd1	      0xe800000000	                          call 0x4000bd6	        33	stdio2.h	FUNCTION_56	CALL_1
0x4000bd6	          0x4863e8	                         movsxd rbp, eax	       745	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8
0x4000bd9	          0x4c01e5	                            add rbp, r12	       745	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8
0x4000bdc	          0x4c89fb	                            mov rbx, r15	       745	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8
0x4000bdf	    0xc744240c0000	                mov dword [rsp + 0xc], 0	       763	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000be7	    0x41bf00000000	                             mov r15d, 0	       763	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000bed	            0xeb6a	                           jmp 0x4000c59	       763	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000bef	        0x4983c401	                              add r12, 1	       750	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4
0x4000bf3	        0x4883c301	                              add rbx, 1	       750	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4
0x4000bf7	      0x41884424ff	                  mov byte [r12 - 1], al	       750	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4
0x4000bfc	           0xfb603	                   movzx eax, byte [rbx]	       749	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4	CALL_10
0x4000bff	           0xfb6d0	                           movzx edx, al	       749	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4	CALL_10
0x4000c02	    0xf68412000000	                test byte [rdx + rdx], 4	       749	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4	CALL_10
0x4000c0a	            0x75e3	                           jne 0x4000bef	       749	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4	CALL_10
0x4000c0c	          0x4c89e5	                            mov rbp, r12	       750	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4
0x4000c0f	            0xebce	                           jmp 0x4000bdf	       750	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4
0x4000c11	        0x4180fc68	                          cmp r12b, 0x68	       754	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000c15	            0x742e	                            je 0x4000c45	       754	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000c17	        0x4180fc6c	                          cmp r12b, 0x6c	       754	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000c1b	            0x740e	                            je 0x4000c2b	       754	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000c1d	        0x4180fc4c	                          cmp r12b, 0x4c	       754	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000c21	            0x750e	                           jne 0x4000c31	       754	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000c23	    0x41bf02000000	                             mov r15d, 2	       763	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000c29	            0xeb22	                           jmp 0x4000c4d	       763	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000c2b	        0x4183c701	                             add r15d, 1	       760	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000c2f	            0xeb1c	                           jmp 0x4000c4d	       760	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000c31	      0xba00000000	                              mov edx, 0	       766	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1	CALL_12
0x4000c36	      0xbefe020000	                          mov esi, 0x2fe	       766	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1	CALL_12
0x4000c3b	      0xbf00000000	                              mov edi, 0	       766	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1	CALL_12
0x4000c40	      0xe800000000	                          call 0x4000c45	       766	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1	CALL_12
0x4000c45	    0xc744240c0100	                mov dword [rsp + 0xc], 1	       757	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000c4d	        0x4883c501	                              add rbp, 1	       768	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5
0x4000c51	        0x4883c301	                              add rbx, 1	       768	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5
0x4000c55	        0x448865ff	                mov byte [rbp - 1], r12b	       768	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5
0x4000c59	        0x440fb623	                  movzx r12d, byte [rbx]	       752	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	CALL_11
0x4000c5d	        0x410fbef4	                         movsx esi, r12b	       752	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	CALL_11
0x4000c61	      0xbf00000000	                              mov edi, 0	       752	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	CALL_11
0x4000c66	      0xe800000000	                          call 0x4000c6b	       752	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	CALL_11
0x4000c6b	          0x4885c0	                           test rax, rax	       752	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	CALL_11
0x4000c6e	            0x75a1	                           jne 0x4000c11	       752	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	CALL_11
0x4000c70	        0x488d4301	                      lea rax, [rbx + 1]	       772	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x4000c74	        0x48890424	                    mov qword [rsp], rax	       772	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x4000c78	        0x44886500	                    mov byte [rbp], r12b	       772	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x4000c7c	        0xc6450100	                   mov byte [rbp + 1], 0	       773	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x4000c80	        0x8b442408	                mov eax, dword [rsp + 8]	       775	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_10
0x4000c84	            0x85c0	                           test eax, eax	       775	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_10
0x4000c86	        0x410f48c6	                         cmovs eax, r14d	       775	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_10
0x4000c8a	        0x89442408	                mov dword [rsp + 8], eax	       775	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_10
0x4000c8e	        0x4183ec45	                          sub r12d, 0x45	       777	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x4000c92	        0x4180fc33	                          cmp r12b, 0x33	       777	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x4000c96	     0xf87d9020000	                            ja 0x4000f75	       777	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x4000c9c	        0x450fb6e4	                        movzx r12d, r12b	       777	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x4000ca0	    0x42ff24e50000	                       jmp qword [r12*8]	       777	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x4000ca8	      0x837c240c00	                cmp dword [rsp + 0xc], 0	       790	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_11
0x4000cad	            0x742b	                            je 0x4000cda	       790	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_11
0x4000caf	        0x8b442408	                mov eax, dword [rsp + 8]	       791	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_11
0x4000cb3	        0x48c1e004	                              shl rax, 4	       791	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_11
0x4000cb7	        0x8b4c0410	      mov ecx, dword [rsp + rax + 0x10] 	        97	stdio2.h	CALL_34
0x4000cbb	    0x488d9424a000	                   lea rdx, [rsp + 0xa0]	        97	stdio2.h	CALL_34
0x4000cc3	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_34
0x4000cc8	          0x4c89ef	                            mov rdi, r13	        97	stdio2.h	CALL_34
0x4000ccb	      0xb800000000	                              mov eax, 0	        97	stdio2.h	CALL_34
0x4000cd0	      0xe800000000	                          call 0x4000cd5	        97	stdio2.h	CALL_34
0x4000cd5	      0xe9af020000	                           jmp 0x4000f89	        97	stdio2.h	CALL_34
0x4000cda	          0x4585ff	                         test r15d, r15d	       794	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x4000cdd	            0x7408	                            je 0x4000ce7	       794	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x4000cdf	        0x4183ff01	                             cmp r15d, 1	       794	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x4000ce3	            0x742d	                            je 0x4000d12	       794	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x4000ce5	            0xeb57	                           jmp 0x4000d3e	       794	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x4000ce7	        0x8b442408	                mov eax, dword [rsp + 8]	       797	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x4000ceb	        0x48c1e004	                              shl rax, 4	       797	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x4000cef	        0x8b4c0410	      mov ecx, dword [rsp + rax + 0x10] 	        97	stdio2.h	CALL_34
0x4000cf3	    0x488d9424a000	                   lea rdx, [rsp + 0xa0]	        97	stdio2.h	CALL_34
0x4000cfb	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_34
0x4000d00	          0x4c89ef	                            mov rdi, r13	        97	stdio2.h	CALL_34
0x4000d03	      0xb800000000	                              mov eax, 0	        97	stdio2.h	CALL_34
0x4000d08	      0xe800000000	                          call 0x4000d0d	        97	stdio2.h	CALL_34
0x4000d0d	      0xe977020000	                           jmp 0x4000f89	        97	stdio2.h	CALL_34
0x4000d12	        0x8b442408	                mov eax, dword [rsp + 8]	       800	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x4000d16	        0x48c1e004	                              shl rax, 4	       800	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x4000d1a	      0x488b4c0410	      mov rcx, qword [rsp + rax + 0x10] 	        97	stdio2.h	CALL_34
0x4000d1f	    0x488d9424a000	                   lea rdx, [rsp + 0xa0]	        97	stdio2.h	CALL_34
0x4000d27	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_34
0x4000d2c	          0x4c89ef	                            mov rdi, r13	        97	stdio2.h	CALL_34
0x4000d2f	      0xb800000000	                              mov eax, 0	        97	stdio2.h	CALL_34
0x4000d34	      0xe800000000	                          call 0x4000d39	        97	stdio2.h	CALL_34
0x4000d39	      0xe94b020000	                           jmp 0x4000f89	        97	stdio2.h	CALL_34
0x4000d3e	        0x8b442408	                mov eax, dword [rsp + 8]	       812	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x4000d42	        0x48c1e004	                              shl rax, 4	       812	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x4000d46	      0x488b4c0410	      mov rcx, qword [rsp + rax + 0x10] 	        97	stdio2.h	CALL_34
0x4000d4b	    0x488d9424a000	                   lea rdx, [rsp + 0xa0]	        97	stdio2.h	CALL_34
0x4000d53	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_34
0x4000d58	          0x4c89ef	                            mov rdi, r13	        97	stdio2.h	CALL_34
0x4000d5b	      0xb800000000	                              mov eax, 0	        97	stdio2.h	CALL_34
0x4000d60	      0xe800000000	                          call 0x4000d65	        97	stdio2.h	CALL_34
0x4000d65	      0xe91f020000	                           jmp 0x4000f89	        97	stdio2.h	CALL_34
0x4000d6a	          0x4585ff	                         test r15d, r15d	       828	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_12
0x4000d6d	            0x752d	                           jne 0x4000d9c	       828	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_12
0x4000d6f	        0x8b442408	                mov eax, dword [rsp + 8]	       829	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_12
0x4000d73	        0x48c1e004	                              shl rax, 4	       829	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_12
0x4000d77	    0xf20f10440410	   movsd xmm0, qword [rsp + rax + 0x10] 	        97	stdio2.h	CALL_34
0x4000d7d	    0x488d9424a000	                   lea rdx, [rsp + 0xa0]	        97	stdio2.h	CALL_34
0x4000d85	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_34
0x4000d8a	          0x4c89ef	                            mov rdi, r13	        97	stdio2.h	CALL_34
0x4000d8d	      0xb801000000	                              mov eax, 1	        97	stdio2.h	CALL_34
0x4000d92	      0xe800000000	                          call 0x4000d97	        97	stdio2.h	CALL_34
0x4000d97	      0xe9ed010000	                           jmp 0x4000f89	        97	stdio2.h	CALL_34
0x4000d9c	        0x8b442408	                mov eax, dword [rsp + 8]	       833	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_7
0x4000da0	        0x48c1e004	                              shl rax, 4	       833	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_7
0x4000da4	        0xff740418	           push qword [rsp + rax + 0x18]	        97	stdio2.h	CALL_34
0x4000da8	        0xff740418	           push qword [rsp + rax + 0x18]	        97	stdio2.h	CALL_34
0x4000dac	    0x488d9424b000	                   lea rdx, [rsp + 0xb0]	        97	stdio2.h	CALL_34
0x4000db4	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_34
0x4000db9	          0x4c89ef	                            mov rdi, r13	        97	stdio2.h	CALL_34
0x4000dbc	      0xb800000000	                              mov eax, 0	        97	stdio2.h	CALL_34
0x4000dc1	      0xe800000000	                          call 0x4000dc6	        97	stdio2.h	CALL_34
0x4000dc6	        0x4883c410	                           add rsp, 0x10	        97	stdio2.h	CALL_34
0x4000dca	      0xe9ba010000	                           jmp 0x4000f89	        97	stdio2.h	CALL_34
0x4000dcf	        0x8b442408	                mov eax, dword [rsp + 8]	       842	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x4000dd3	        0x48c1e004	                              shl rax, 4	       842	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x4000dd7	      0x488b4c0410	      mov rcx, qword [rsp + rax + 0x10] 	        97	stdio2.h	CALL_34
0x4000ddc	    0x488d9424a000	                   lea rdx, [rsp + 0xa0]	        97	stdio2.h	CALL_34
0x4000de4	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_34
0x4000de9	          0x4c89ef	                            mov rdi, r13	        97	stdio2.h	CALL_34
0x4000dec	      0xb800000000	                              mov eax, 0	        97	stdio2.h	CALL_34
0x4000df1	      0xe800000000	                          call 0x4000df6	        97	stdio2.h	CALL_34
0x4000df6	      0xe98e010000	                           jmp 0x4000f89	        97	stdio2.h	CALL_34
0x4000dfb	         0xfb64301	               movzx eax, byte [rbx + 1]	       845	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13
0x4000dff	            0x3c41	                            cmp al, 0x41	       845	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13
0x4000e01	     0xf85c6000000	                           jne 0x4000ecd	       845	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13
0x4000e07	        0x488d4302	                      lea rax, [rbx + 2]	       852	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13
0x4000e0b	        0x48890424	                    mov qword [rsp], rax	       852	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13
0x4000e0f	        0x8b442408	                mov eax, dword [rsp + 8]	       853	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13
0x4000e13	        0x48c1e004	                              shl rax, 4	       853	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13
0x4000e17	      0x488b440410	      mov rax, qword [rsp + rax + 0x10] 	       853	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13
0x4000e1c	          0x4885c0	                           test rax, rax	       854	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_14
0x4000e1f	            0x7514	                           jne 0x4000e35	       854	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_14
0x4000e21	      0xba00000000	                              mov edx, 0	       857	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	CALL_13
0x4000e26	      0xbe59030000	                          mov esi, 0x359	       857	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	CALL_13
0x4000e2b	      0xbf00000000	                              mov edi, 0	       857	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	CALL_13
0x4000e30	      0xe800000000	                          call 0x4000e35	       857	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	CALL_13
0x4000e35	    0x488b90f00000	            mov rdx, qword [rax + 0xf0] 	       858	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13
0x4000e3c	          0x4885d2	                           test rdx, rdx	       859	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15
0x4000e3f	            0x746d	                            je 0x4000eae	       859	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15
0x4000e41	        0x488b5208	                mov rdx, qword [rdx + 8]	       860	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15	CALL_14
0x4000e45	          0x8b5208	                mov edx, dword [rdx + 8]	       860	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15	CALL_14
0x4000e48	          0x83fa05	                              cmp edx, 5	       860	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15	CALL_14
0x4000e4b	            0x7520	                           jne 0x4000e6d	       860	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15	CALL_14
0x4000e4d	    0x488b90e00000	            mov rdx, qword [rax + 0xe0] 	       861	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15	CALL_15
0x4000e54	    0x4883bac00000	               cmp qword [rdx + 0xc0], 0	       861	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15	CALL_15
0x4000e5c	            0x7450	                            je 0x4000eae	       861	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15	CALL_15
0x4000e5e	        0xf6402302	               test byte [rax + 0x23], 2	       862	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15
0x4000e62	            0x754a	                           jne 0x4000eae	       862	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15
0x4000e64	    0x4c8b82b00000	              mov r8, qword [rdx + 0xb0]	       863	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	CALL_16
0x4000e6b	            0xeb1d	                           jmp 0x4000e8a	       863	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	CALL_16
0x4000e6d	          0x83fa02	                              cmp edx, 2	       865	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_17
0x4000e70	            0x753c	                           jne 0x4000eae	       865	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_17
0x4000e72	    0x488b90e00000	            mov rdx, qword [rax + 0xe0] 	       866	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_18
0x4000e79	          0x4885d2	                           test rdx, rdx	       866	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_18
0x4000e7c	            0x7430	                            je 0x4000eae	       866	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_18
0x4000e7e	        0x488b5240	            mov rdx, qword [rdx + 0x40] 	       866	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_18
0x4000e82	          0x4885d2	                           test rdx, rdx	       866	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_18
0x4000e85	            0x7427	                            je 0x4000eae	       866	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_18
0x4000e87	          0x4c8b02	                     mov r8, qword [rdx]	       868	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16
0x4000e8a	          0x4d85c0	                             test r8, r8	       869	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_17
0x4000e8d	            0x741f	                            je 0x4000eae	       869	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_17
0x4000e8f	          0x488b08	                    mov rcx, qword [rax]	        97	stdio2.h	CALL_34
0x4000e92	      0xba00000000	                              mov edx, 0	        97	stdio2.h	CALL_34
0x4000e97	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_34
0x4000e9c	          0x4c89ef	                            mov rdi, r13	        97	stdio2.h	CALL_34
0x4000e9f	      0xb800000000	                              mov eax, 0	        97	stdio2.h	CALL_34
0x4000ea4	      0xe800000000	                          call 0x4000ea9	        97	stdio2.h	CALL_34
0x4000ea9	      0xe9db000000	                           jmp 0x4000f89	        97	stdio2.h	CALL_34
0x4000eae	          0x488b08	                    mov rcx, qword [rax]	        97	stdio2.h	CALL_34
0x4000eb1	      0xba00000000	                              mov edx, 0	        97	stdio2.h	CALL_34
0x4000eb6	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_34
0x4000ebb	          0x4c89ef	                            mov rdi, r13	        97	stdio2.h	CALL_34
0x4000ebe	      0xb800000000	                              mov eax, 0	        97	stdio2.h	CALL_34
0x4000ec3	      0xe800000000	                          call 0x4000ec8	        97	stdio2.h	CALL_34
0x4000ec8	      0xe9bc000000	                           jmp 0x4000f89	        97	stdio2.h	CALL_34
0x4000ecd	            0x3c42	                            cmp al, 0x42	       874	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18
0x4000ecf	            0x757b	                           jne 0x4000f4c	       874	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18
0x4000ed1	        0x488d4302	                      lea rax, [rbx + 2]	       878	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18
0x4000ed5	        0x48890424	                    mov qword [rsp], rax	       878	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18
0x4000ed9	        0x8b442408	                mov eax, dword [rsp + 8]	       879	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18
0x4000edd	        0x48c1e004	                              shl rax, 4	       879	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18
0x4000ee1	      0x488b440410	      mov rax, qword [rsp + rax + 0x10] 	       879	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18
0x4000ee6	          0x4885c0	                           test rax, rax	       880	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	IF_19
0x4000ee9	            0x7514	                           jne 0x4000eff	       880	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	IF_19
0x4000eeb	      0xba00000000	                              mov edx, 0	       883	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	CALL_19
0x4000ef0	      0xbe73030000	                          mov esi, 0x373	       883	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	CALL_19
0x4000ef5	      0xbf00000000	                              mov edi, 0	       883	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	CALL_19
0x4000efa	      0xe800000000	                          call 0x4000eff	       883	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	CALL_19
0x4000eff	    0x488b90d00000	            mov rdx, qword [rax + 0xd0] 	       884	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	ELSE_11	IF_20
0x4000f06	          0x4885d2	                           test rdx, rdx	       884	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	ELSE_11	IF_20
0x4000f09	            0x7425	                            je 0x4000f30	       884	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	ELSE_11	IF_20
0x4000f0b	        0xf6424801	               test byte [rdx + 0x48], 1	       885	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	ELSE_11	IF_20	CALL_20
0x4000f0f	            0x751f	                           jne 0x4000f30	       885	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	ELSE_11	IF_20	CALL_20
0x4000f11	          0x4c8b00	                     mov r8, qword [rax]	        97	stdio2.h	CALL_34
0x4000f14	          0x488b0a	                    mov rcx, qword [rdx]	        97	stdio2.h	CALL_34
0x4000f17	      0xba00000000	                              mov edx, 0	        97	stdio2.h	CALL_34
0x4000f1c	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_34
0x4000f21	          0x4c89ef	                            mov rdi, r13	        97	stdio2.h	CALL_34
0x4000f24	      0xb800000000	                              mov eax, 0	        97	stdio2.h	CALL_34
0x4000f29	      0xe800000000	                          call 0x4000f2e	        97	stdio2.h	CALL_34
0x4000f2e	            0xeb59	                           jmp 0x4000f89	        97	stdio2.h	CALL_34
0x4000f30	          0x488b08	                    mov rcx, qword [rax]	        97	stdio2.h	CALL_34
0x4000f33	      0xba00000000	                              mov edx, 0	        97	stdio2.h	CALL_34
0x4000f38	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_34
0x4000f3d	          0x4c89ef	                            mov rdi, r13	        97	stdio2.h	CALL_34
0x4000f40	      0xb800000000	                              mov eax, 0	        97	stdio2.h	CALL_34
0x4000f45	      0xe800000000	                          call 0x4000f4a	        97	stdio2.h	CALL_34
0x4000f4a	            0xeb3d	                           jmp 0x4000f89	        97	stdio2.h	CALL_34
0x4000f4c	        0x8b442408	                mov eax, dword [rsp + 8]	       893	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_13
0x4000f50	        0x48c1e004	                              shl rax, 4	       893	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_13
0x4000f54	      0x488b4c0410	      mov rcx, qword [rsp + rax + 0x10] 	        97	stdio2.h	CALL_34
0x4000f59	    0x488d9424a000	                   lea rdx, [rsp + 0xa0]	        97	stdio2.h	CALL_34
0x4000f61	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_34
0x4000f66	          0x4c89ef	                            mov rdi, r13	        97	stdio2.h	CALL_34
0x4000f69	      0xb800000000	                              mov eax, 0	        97	stdio2.h	CALL_34
0x4000f6e	      0xe800000000	                          call 0x4000f73	        97	stdio2.h	CALL_34
0x4000f73	            0xeb14	                           jmp 0x4000f89	        97	stdio2.h	CALL_34
0x4000f75	      0xba00000000	                              mov edx, 0	       896	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	CALL_21
0x4000f7a	      0xbe80030000	                          mov esi, 0x380	       896	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	CALL_21
0x4000f7f	      0xbf00000000	                              mov edi, 0	       896	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	CALL_21
0x4000f84	      0xe800000000	                          call 0x4000f89	       896	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	CALL_21
0x4000f89	        0x4183c601	                             add r14d, 1	       898	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x4000f8d	          0x83f8ff	             cmp eax, 0xffffffffffffffff	       900	bfd.c	FUNCTION_6	WHILE_1	IF_21
0x4000f90	            0x740f	                            je 0x4000fa1	       900	bfd.c	FUNCTION_6	WHILE_1	IF_21
0x4000f92	        0x488b0424	                    mov rax, qword [rsp]	       663	bfd.c	FUNCTION_6	WHILE_1
0x4000f96	           0xfb600	                   movzx eax, byte [rax]	       663	bfd.c	FUNCTION_6	WHILE_1
0x4000f99	            0x84c0	                             test al, al	       663	bfd.c	FUNCTION_6	WHILE_1
0x4000f9b	     0xf8502faffff	                           jne 0x40009a3	       663	bfd.c	FUNCTION_6	WHILE_1
0x4000fa1	    0x488b35000000	            mov rsi, qword [0x04000fa8] 	      1139	bfd.c	FUNCTION_8	CALL_11
0x4000fa8	      0xbf0a000000	                            mov edi, 0xa	      1139	bfd.c	FUNCTION_8	CALL_11
0x4000fad	      0xe800000000	                          call 0x4000fb2	      1139	bfd.c	FUNCTION_8	CALL_11
0x4000fb2	    0x488b3d000000	            mov rdi, qword [0x04000fb9] 	      1140	bfd.c	FUNCTION_8	CALL_12
0x4000fb9	      0xe800000000	                          call 0x4000fbe	      1140	bfd.c	FUNCTION_8	CALL_12
0x4000fbe	    0x488b84242801	           mov rax, qword [rsp + 0x128] 	      1141	bfd.c	FUNCTION_8
0x4000fc6	    0x644833042528	                xor rax, qword fs:[0x28]	      1141	bfd.c	FUNCTION_8
0x4000fcf	            0x7405	                            je 0x4000fd6	      1141	bfd.c	FUNCTION_8
0x4000fd1	      0xe800000000	                          call 0x4000fd6	      1141	bfd.c	FUNCTION_8
0x4000fd6	    0x4881c4380100	                          add rsp, 0x138	      1141	bfd.c	FUNCTION_8
0x4000fdd	              0x5b	                                 pop rbx	      1141	bfd.c	FUNCTION_8
0x4000fde	              0x5d	                                 pop rbp	      1141	bfd.c	FUNCTION_8
0x4000fdf	            0x415c	                                 pop r12	      1141	bfd.c	FUNCTION_8
0x4000fe1	            0x415d	                                 pop r13	      1141	bfd.c	FUNCTION_8
0x4000fe3	            0x415e	                                 pop r14	      1141	bfd.c	FUNCTION_8
0x4000fe5	            0x415f	                                 pop r15	      1141	bfd.c	FUNCTION_8
0x4000fe7	              0xc3	                                     ret	      1141	bfd.c	FUNCTION_8
bfd_sprintf_vma	WHILE,0:FOR,0:functions,0:DO,0:IF,1:ELSE,0:CALL,2:SWITCH,0	27
0x40013e1	              0x55	                                push rbp	      1994	bfd.c	FUNCTION_30
0x40013e2	              0x53	                                push rbx	      1994	bfd.c	FUNCTION_30
0x40013e3	        0x4883ec08	                              sub rsp, 8	      1994	bfd.c	FUNCTION_30
0x40013e7	          0x4889f3	                            mov rbx, rsi	      1994	bfd.c	FUNCTION_30
0x40013ea	          0x4889d5	                            mov rbp, rdx	      1994	bfd.c	FUNCTION_30
0x40013ed	      0xe882ecffff	                        call sym.is32bit	      1996	bfd.c	FUNCTION_30	IF_1	CALL_1
0x40013f2	            0x85c0	                           test eax, eax	      1996	bfd.c	FUNCTION_30	IF_1	CALL_1
0x40013f4	            0x7423	                            je 0x4001419	      1996	bfd.c	FUNCTION_30	IF_1	CALL_1
0x40013f6	          0x4189e8	                            mov r8d, ebp	        33	stdio2.h	FUNCTION_56	CALL_1
0x40013f9	      0xb900000000	                              mov ecx, 0	        33	stdio2.h	FUNCTION_56	CALL_1
0x40013fe	    0x48c7c2ffffff	             mov rdx, 0xffffffffffffffff	        33	stdio2.h	FUNCTION_56	CALL_1
0x4001405	      0xbe01000000	                              mov esi, 1	        33	stdio2.h	FUNCTION_56	CALL_1
0x400140a	          0x4889df	                            mov rdi, rbx	        33	stdio2.h	FUNCTION_56	CALL_1
0x400140d	      0xb800000000	                              mov eax, 0	        33	stdio2.h	FUNCTION_56	CALL_1
0x4001412	      0xe800000000	                          call 0x4001417	        33	stdio2.h	FUNCTION_56	CALL_1
0x4001417	            0xeb21	                           jmp 0x400143a	        33	stdio2.h	FUNCTION_56	CALL_1
0x4001419	          0x4989e8	                             mov r8, rbp	        33	stdio2.h	FUNCTION_56	CALL_1
0x400141c	      0xb900000000	                              mov ecx, 0	        33	stdio2.h	FUNCTION_56	CALL_1
0x4001421	    0x48c7c2ffffff	             mov rdx, 0xffffffffffffffff	        33	stdio2.h	FUNCTION_56	CALL_1
0x4001428	      0xbe01000000	                              mov esi, 1	        33	stdio2.h	FUNCTION_56	CALL_1
0x400142d	          0x4889df	                            mov rdi, rbx	        33	stdio2.h	FUNCTION_56	CALL_1
0x4001430	      0xb800000000	                              mov eax, 0	        33	stdio2.h	FUNCTION_56	CALL_1
0x4001435	      0xe800000000	                          call 0x400143a	        33	stdio2.h	FUNCTION_56	CALL_1
0x400143a	        0x4883c408	                              add rsp, 8	      2003	bfd.c	FUNCTION_30
0x400143e	              0x5b	                                 pop rbx	      2003	bfd.c	FUNCTION_30
0x400143f	              0x5d	                                 pop rbp	      2003	bfd.c	FUNCTION_30
0x4001440	              0xc3	                                     ret	      2003	bfd.c	FUNCTION_30
bfd_assert	WHILE,0:FOR,0:functions,0:DO,0:IF,0:ELSE,0:CALL,1:SWITCH,0	19
0x40003b9	            0x4154	                                push r12	      1426	bfd.c	FUNCTION_17
0x40003bb	              0x55	                                push rbp	      1426	bfd.c	FUNCTION_17
0x40003bc	              0x53	                                push rbx	      1426	bfd.c	FUNCTION_17
0x40003bd	          0x4889fd	                            mov rbp, rdi	      1426	bfd.c	FUNCTION_17
0x40003c0	          0x4189f4	                           mov r12d, esi	      1426	bfd.c	FUNCTION_17
0x40003c3	    0x488b1d000000	            mov rbx, qword [0x040003ca] 	      1428	bfd.c	FUNCTION_17	CALL_1
0x40003ca	      0xba05000000	                              mov edx, 5	      1428	bfd.c	FUNCTION_17	CALL_1
0x40003cf	      0xbe00000000	                              mov esi, 0	      1428	bfd.c	FUNCTION_17	CALL_1
0x40003d4	      0xbf00000000	                              mov edi, 0	      1428	bfd.c	FUNCTION_17	CALL_1
0x40003d9	      0xe800000000	                          call 0x40003de	      1428	bfd.c	FUNCTION_17	CALL_1
0x40003de	          0x4489e1	                           mov ecx, r12d	      1428	bfd.c	FUNCTION_17	CALL_1
0x40003e1	          0x4889ea	                            mov rdx, rbp	      1428	bfd.c	FUNCTION_17	CALL_1
0x40003e4	      0xbe00000000	                              mov esi, 0	      1428	bfd.c	FUNCTION_17	CALL_1
0x40003e9	          0x4889c7	                            mov rdi, rax	      1428	bfd.c	FUNCTION_17	CALL_1
0x40003ec	            0xffd3	                                call rbx	      1428	bfd.c	FUNCTION_17	CALL_1
0x40003ee	              0x5b	                                 pop rbx	      1430	bfd.c	FUNCTION_17
0x40003ef	              0x5d	                                 pop rbp	      1430	bfd.c	FUNCTION_17
0x40003f0	            0x415c	                                 pop r12	      1430	bfd.c	FUNCTION_17
0x40003f2	              0xc3	                                     ret	      1430	bfd.c	FUNCTION_17
bfd_get_gp_size	WHILE,0:FOR,0:functions,0:DO,0:IF,3:ELSE,1:CALL,2:SWITCH,0	18
0x4001185	         0xfb65744	           movzx edx, byte [rdi + 0x44] 	      1570	bfd.c	FUNCTION_22	IF_1
0x4001189	          0x83e207	                              and edx, 7	      1570	bfd.c	FUNCTION_22	IF_1
0x400118c	      0xb800000000	                              mov eax, 0	      1577	bfd.c	FUNCTION_22
0x4001191	          0x80fa01	                               cmp dl, 1	      1570	bfd.c	FUNCTION_22	IF_1
0x4001194	            0x752e	                           jne 0x40011c4	      1570	bfd.c	FUNCTION_22	IF_1
0x4001196	        0x488b4708	                mov rax, qword [rdi + 8]	      1572	bfd.c	FUNCTION_22	IF_1	IF_2
0x400119a	          0x8b5008	                mov edx, dword [rax + 8]	      1572	bfd.c	FUNCTION_22	IF_1	IF_2
0x400119d	          0x83fa03	                              cmp edx, 3	      1572	bfd.c	FUNCTION_22	IF_1	IF_2
0x40011a0	            0x750b	                           jne 0x40011ad	      1572	bfd.c	FUNCTION_22	IF_1	IF_2
0x40011a2	    0x488b87f80000	            mov rax, qword [rdi + 0xf8] 	      1573	bfd.c	FUNCTION_22	IF_1	CALL_1
0x40011a9	          0x8b4028	            mov eax, dword [rax + 0x28] 	      1573	bfd.c	FUNCTION_22	IF_1	CALL_1
0x40011ac	              0xc3	                                     ret	      1573	bfd.c	FUNCTION_22	IF_1	CALL_1
0x40011ad	      0xb800000000	                              mov eax, 0	      1577	bfd.c	FUNCTION_22
0x40011b2	          0x83fa05	                              cmp edx, 5	      1574	bfd.c	FUNCTION_22	IF_1	ELSE_1	IF_3
0x40011b5	            0x750d	                           jne 0x40011c4	      1574	bfd.c	FUNCTION_22	IF_1	ELSE_1	IF_3
0x40011b7	    0x488b87f80000	            mov rax, qword [rdi + 0xf8] 	      1575	bfd.c	FUNCTION_22	IF_1	ELSE_1	IF_3
0x40011be	    0x8b80f8020000	           mov eax, dword [rax + 0x2f8] 	      1575	bfd.c	FUNCTION_22	IF_1	ELSE_1	IF_3
0x40011c4	            0xf3c3	                                     ret	      1578	bfd.c	FUNCTION_22
bfd_demangle	WHILE,1:FOR,0:functions,0:DO,0:IF,10:ELSE,0:CALL,16:SWITCH,0	152
0x40015c7	            0x4157	                                push r15	      2219	bfd.c	FUNCTION_38
0x40015c9	            0x4156	                                push r14	      2219	bfd.c	FUNCTION_38
0x40015cb	            0x4155	                                push r13	      2219	bfd.c	FUNCTION_38
0x40015cd	            0x4154	                                push r12	      2219	bfd.c	FUNCTION_38
0x40015cf	              0x55	                                push rbp	      2219	bfd.c	FUNCTION_38
0x40015d0	              0x53	                                push rbx	      2219	bfd.c	FUNCTION_38
0x40015d1	        0x4883ec18	                           sub rsp, 0x18	      2219	bfd.c	FUNCTION_38
0x40015d5	          0x4889f3	                            mov rbx, rsi	      2219	bfd.c	FUNCTION_38
0x40015d8	          0x891424	                    mov dword [rsp], edx	      2219	bfd.c	FUNCTION_38
0x40015db	          0x4885ff	                           test rdi, rdi	      2227	bfd.c	FUNCTION_38	CALL_1
0x40015de	            0x741e	                            je 0x40015fe	      2227	bfd.c	FUNCTION_38	CALL_1
0x40015e0	           0xfb606	                   movzx eax, byte [rsi]	      2226	bfd.c	FUNCTION_38
0x40015e3	            0x84c0	                             test al, al	      2226	bfd.c	FUNCTION_38
0x40015e5	            0x7440	                            je 0x4001627	      2226	bfd.c	FUNCTION_38
0x40015e7	        0x488b5708	                mov rdx, qword [rdi + 8]	      2227	bfd.c	FUNCTION_38	CALL_1
0x40015eb	          0x3a421c	               cmp al, byte [rdx + 0x1c]	      2227	bfd.c	FUNCTION_38	CALL_1
0x40015ee	     0xf84ac010000	                            je 0x40017a0	      2227	bfd.c	FUNCTION_38	CALL_1
0x40015f4	    0xc74424080000	                  mov dword [rsp + 8], 0	      2227	bfd.c	FUNCTION_38	CALL_1
0x40015fc	            0xeb08	                           jmp 0x4001606	      2227	bfd.c	FUNCTION_38	CALL_1
0x40015fe	    0xc74424080000	                  mov dword [rsp + 8], 0	      2227	bfd.c	FUNCTION_38	CALL_1
0x4001606	           0xfb603	                   movzx eax, byte [rbx]	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4001609	            0x3c2e	                            cmp al, 0x2e	      2236	bfd.c	FUNCTION_38	WHILE_1
0x400160b	            0x7404	                            je 0x4001611	      2236	bfd.c	FUNCTION_38	WHILE_1
0x400160d	            0x3c24	                            cmp al, 0x24	      2236	bfd.c	FUNCTION_38	WHILE_1
0x400160f	            0x7523	                           jne 0x4001634	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4001611	          0x4989dc	                            mov r12, rbx	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4001614	        0x4983c401	                              add r12, 1	      2237	bfd.c	FUNCTION_38	WHILE_1
0x4001618	      0x410fb60424	                   movzx eax, byte [r12]	      2236	bfd.c	FUNCTION_38	WHILE_1
0x400161d	            0x3c2e	                            cmp al, 0x2e	      2236	bfd.c	FUNCTION_38	WHILE_1
0x400161f	            0x74f3	                            je 0x4001614	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4001621	            0x3c24	                            cmp al, 0x24	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4001623	            0x74ef	                            je 0x4001614	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4001625	            0xeb10	                           jmp 0x4001637	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4001627	          0x4989f4	                            mov r12, rsi	      2236	bfd.c	FUNCTION_38	WHILE_1
0x400162a	    0xc74424080000	                  mov dword [rsp + 8], 0	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4001632	            0xeb03	                           jmp 0x4001637	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4001634	          0x4989dc	                            mov r12, rbx	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4001637	          0x4d89e7	                            mov r15, r12	      2238	bfd.c	FUNCTION_38
0x400163a	          0x4929df	                            sub r15, rbx	      2238	bfd.c	FUNCTION_38
0x400163d	      0xbe40000000	                           mov esi, 0x40	      2242	bfd.c	FUNCTION_38	CALL_2
0x4001642	          0x4c89e7	                            mov rdi, r12	      2242	bfd.c	FUNCTION_38	CALL_2
0x4001645	      0xe800000000	                          call 0x400164a	      2242	bfd.c	FUNCTION_38	CALL_2
0x400164a	          0x4889c5	                            mov rbp, rax	      2242	bfd.c	FUNCTION_38	CALL_2
0x400164d	          0x4885c0	                           test rax, rax	      2243	bfd.c	FUNCTION_38	IF_2
0x4001650	     0xf845b010000	                            je 0x40017b1	      2243	bfd.c	FUNCTION_38	IF_2
0x4001656	          0x4989c6	                            mov r14, rax	      2245	bfd.c	FUNCTION_38	IF_2	CALL_3
0x4001659	          0x4d29e6	                            sub r14, r12	      2245	bfd.c	FUNCTION_38	IF_2	CALL_3
0x400165c	        0x498d7e01	                      lea rdi, [r14 + 1]	      2245	bfd.c	FUNCTION_38	IF_2	CALL_3
0x4001660	      0xe800000000	                          call 0x4001665	      2245	bfd.c	FUNCTION_38	IF_2	CALL_3
0x4001665	          0x4989c5	                            mov r13, rax	      2245	bfd.c	FUNCTION_38	IF_2	CALL_3
0x4001668	          0x4885c0	                           test rax, rax	      2246	bfd.c	FUNCTION_38	IF_2	IF_3
0x400166b	     0xf8421010000	                            je 0x4001792	      2246	bfd.c	FUNCTION_38	IF_2	IF_3
0x4001671	          0x4c89f2	                            mov rdx, r14	        53	string3.h	FUNCTION_44	CALL_3
0x4001674	          0x4c89e6	                            mov rsi, r12	        53	string3.h	FUNCTION_44	CALL_3
0x4001677	          0x4889c7	                            mov rdi, rax	        53	string3.h	FUNCTION_44	CALL_3
0x400167a	      0xe800000000	                          call 0x400167f	        53	string3.h	FUNCTION_44	CALL_3
0x400167f	    0x43c644350000	                 mov byte [r13 + r14], 0	      2249	bfd.c	FUNCTION_38	IF_2
0x4001685	          0x8b3424	                    mov esi, dword [rsp]	      2253	bfd.c	FUNCTION_38	CALL_5
0x4001688	          0x4c89ef	                            mov rdi, r13	      2253	bfd.c	FUNCTION_38	CALL_5
0x400168b	      0xe800000000	                          call 0x4001690	      2253	bfd.c	FUNCTION_38	CALL_5
0x4001690	          0x4989c6	                            mov r14, rax	      2253	bfd.c	FUNCTION_38	CALL_5
0x4001693	          0x4c89ef	                            mov rdi, r13	      2256	bfd.c	FUNCTION_38	CALL_6
0x4001696	      0xe800000000	                          call 0x400169b	      2256	bfd.c	FUNCTION_38	CALL_6
0x400169b	          0x4d85f6	                           test r14, r14	      2258	bfd.c	FUNCTION_38	IF_5
0x400169e	            0x755a	                           jne 0x40016fa	      2258	bfd.c	FUNCTION_38	IF_5
0x40016a0	      0xb800000000	                              mov eax, 0	      2269	bfd.c	FUNCTION_38	IF_5
0x40016a5	      0x837c240800	                  cmp dword [rsp + 8], 0	      2260	bfd.c	FUNCTION_38	IF_5	IF_6
0x40016aa	     0xf841d010000	                            je 0x40017cd	      2260	bfd.c	FUNCTION_38	IF_5	IF_6
0x40016b0	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	      2262	bfd.c	FUNCTION_38	IF_5	IF_6	CALL_7
0x40016b7	          0x4889df	                            mov rdi, rbx	      2262	bfd.c	FUNCTION_38	IF_5	IF_6	CALL_7
0x40016ba	            0xf2ae	              repne scasb al, byte [rdi]	      2262	bfd.c	FUNCTION_38	IF_5	IF_6	CALL_7
0x40016bc	          0x48f7d1	                                 not rcx	      2262	bfd.c	FUNCTION_38	IF_5	IF_6	CALL_7
0x40016bf	          0x4889cd	                            mov rbp, rcx	      2262	bfd.c	FUNCTION_38	IF_5	IF_6	CALL_7
0x40016c2	          0x4889cf	                            mov rdi, rcx	      2263	bfd.c	FUNCTION_38	IF_5	IF_6	CALL_8
0x40016c5	      0xe800000000	                          call 0x40016ca	      2263	bfd.c	FUNCTION_38	IF_5	IF_6	CALL_8
0x40016ca	          0x4989c4	                            mov r12, rax	      2263	bfd.c	FUNCTION_38	IF_5	IF_6	CALL_8
0x40016cd	          0x4885c0	                           test rax, rax	      2264	bfd.c	FUNCTION_38	IF_5	IF_6	IF_7
0x40016d0	     0xf84c3000000	                            je 0x4001799	      2264	bfd.c	FUNCTION_38	IF_5	IF_6	IF_7
0x40016d6	          0x4889ea	                            mov rdx, rbp	        53	string3.h	FUNCTION_44	CALL_3
0x40016d9	          0x4889de	                            mov rsi, rbx	        53	string3.h	FUNCTION_44	CALL_3
0x40016dc	          0x4889c7	                            mov rdi, rax	        53	string3.h	FUNCTION_44	CALL_3
0x40016df	      0xe800000000	                          call 0x40016e4	        53	string3.h	FUNCTION_44	CALL_3
0x40016e4	          0x4c89e0	                            mov rax, r12	      2267	bfd.c	FUNCTION_38	IF_5	IF_6
0x40016e7	      0xe9e1000000	                           jmp 0x40017cd	      2267	bfd.c	FUNCTION_38	IF_5	IF_6
0x40016ec	          0x4d85ff	                           test r15, r15	      2273	bfd.c	FUNCTION_38	IF_8
0x40016ef	            0x7509	                           jne 0x40016fa	      2273	bfd.c	FUNCTION_38	IF_8
0x40016f1	          0x4885ed	                           test rbp, rbp	      2273	bfd.c	FUNCTION_38	IF_8
0x40016f4	     0xf84a1000000	                            je 0x400179b	      2273	bfd.c	FUNCTION_38	IF_8
0x40016fa	      0xb800000000	                              mov eax, 0	      2279	bfd.c	FUNCTION_38	IF_8	CALL_10
0x40016ff	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	      2279	bfd.c	FUNCTION_38	IF_8	CALL_10
0x4001706	          0x4c89f7	                            mov rdi, r14	      2279	bfd.c	FUNCTION_38	IF_8	CALL_10
0x4001709	            0xf2ae	              repne scasb al, byte [rdi]	      2279	bfd.c	FUNCTION_38	IF_8	CALL_10
0x400170b	          0x48f7d1	                                 not rcx	      2279	bfd.c	FUNCTION_38	IF_8	CALL_10
0x400170e	        0x4c8d69ff	                      lea r13, [rcx - 1]	      2279	bfd.c	FUNCTION_38	IF_8	CALL_10
0x4001712	        0x4b8d042e	                    lea rax, [r14 + r13]	      2281	bfd.c	FUNCTION_38	IF_8	IF_9
0x4001716	          0x4885ed	                           test rbp, rbp	      2281	bfd.c	FUNCTION_38	IF_8	IF_9
0x4001719	        0x480f44e8	                          cmove rbp, rax	      2281	bfd.c	FUNCTION_38	IF_8	IF_9
0x400171d	      0xb800000000	                              mov eax, 0	      2282	bfd.c	FUNCTION_38	IF_8	CALL_11
0x4001722	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	      2282	bfd.c	FUNCTION_38	IF_8	CALL_11
0x4001729	          0x4889ef	                            mov rdi, rbp	      2282	bfd.c	FUNCTION_38	IF_8	CALL_11
0x400172c	            0xf2ae	              repne scasb al, byte [rdi]	      2282	bfd.c	FUNCTION_38	IF_8	CALL_11
0x400172e	          0x48f7d1	                                 not rcx	      2282	bfd.c	FUNCTION_38	IF_8	CALL_11
0x4001731	        0x4b8d042f	                    lea rax, [r15 + r13]	      2283	bfd.c	FUNCTION_38	IF_8	CALL_12
0x4001735	      0x48894c2408	                mov qword [rsp + 8], rcx	      2283	bfd.c	FUNCTION_38	IF_8	CALL_12
0x400173a	          0x4889cf	                            mov rdi, rcx	      2283	bfd.c	FUNCTION_38	IF_8	CALL_12
0x400173d	        0x48890424	                    mov qword [rsp], rax	      2283	bfd.c	FUNCTION_38	IF_8	CALL_12
0x4001741	          0x4801c7	                            add rdi, rax	      2283	bfd.c	FUNCTION_38	IF_8	CALL_12
0x4001744	      0xe800000000	                          call 0x4001749	      2283	bfd.c	FUNCTION_38	IF_8	CALL_12
0x4001749	          0x4989c4	                            mov r12, rax	      2283	bfd.c	FUNCTION_38	IF_8	CALL_12
0x400174c	          0x4885c0	                           test rax, rax	      2284	bfd.c	FUNCTION_38	IF_8	IF_10
0x400174f	            0x7434	                            je 0x4001785	      2284	bfd.c	FUNCTION_38	IF_8	IF_10
0x4001751	          0x4c89fa	                            mov rdx, r15	        53	string3.h	FUNCTION_44	CALL_3
0x4001754	          0x4889de	                            mov rsi, rbx	        53	string3.h	FUNCTION_44	CALL_3
0x4001757	          0x4889c7	                            mov rdi, rax	        53	string3.h	FUNCTION_44	CALL_3
0x400175a	      0xe800000000	                          call 0x400175f	        53	string3.h	FUNCTION_44	CALL_3
0x400175f	        0x4b8d3c3c	                    lea rdi, [r12 + r15]	        53	string3.h	FUNCTION_44	CALL_3
0x4001763	          0x4c89ea	                            mov rdx, r13	        53	string3.h	FUNCTION_44	CALL_3
0x4001766	          0x4c89f6	                            mov rsi, r14	        53	string3.h	FUNCTION_44	CALL_3
0x4001769	      0xe800000000	                          call 0x400176e	        53	string3.h	FUNCTION_44	CALL_3
0x400176e	        0x488b0424	                    mov rax, qword [rsp]	        53	string3.h	FUNCTION_44	CALL_3
0x4001772	          0x4c01e0	                            add rax, r12	        53	string3.h	FUNCTION_44	CALL_3
0x4001775	          0x4889c7	                            mov rdi, rax	        53	string3.h	FUNCTION_44	CALL_3
0x4001778	      0x488b542408	                mov rdx, qword [rsp + 8]	        53	string3.h	FUNCTION_44	CALL_3
0x400177d	          0x4889ee	                            mov rsi, rbp	        53	string3.h	FUNCTION_44	CALL_3
0x4001780	      0xe800000000	                          call 0x4001785	        53	string3.h	FUNCTION_44	CALL_3
0x4001785	          0x4c89f7	                            mov rdi, r14	      2290	bfd.c	FUNCTION_38	IF_8	CALL_16
0x4001788	      0xe800000000	                          call 0x400178d	      2290	bfd.c	FUNCTION_38	IF_8	CALL_16
0x400178d	          0x4c89e0	                            mov rax, r12	      2291	bfd.c	FUNCTION_38	IF_8
0x4001790	            0xeb3b	                           jmp 0x40017cd	      2291	bfd.c	FUNCTION_38	IF_8
0x4001792	      0xb800000000	                              mov eax, 0	      2247	bfd.c	FUNCTION_38	IF_2	IF_3
0x4001797	            0xeb34	                           jmp 0x40017cd	      2247	bfd.c	FUNCTION_38	IF_2	IF_3
0x4001799	            0xeb32	                           jmp 0x40017cd	      2247	bfd.c	FUNCTION_38	IF_2	IF_3
0x400179b	          0x4c89f0	                            mov rax, r14	      2253	bfd.c	FUNCTION_38	CALL_5
0x400179e	            0xeb2d	                           jmp 0x40017cd	      2253	bfd.c	FUNCTION_38	CALL_5
0x40017a0	        0x4883c301	                              add rbx, 1	      2229	bfd.c	FUNCTION_38	IF_1
0x40017a4	    0xc74424080100	                  mov dword [rsp + 8], 1	      2227	bfd.c	FUNCTION_38	CALL_1
0x40017ac	      0xe955feffff	                           jmp 0x4001606	      2227	bfd.c	FUNCTION_38	CALL_1
0x40017b1	          0x8b3424	                    mov esi, dword [rsp]	      2253	bfd.c	FUNCTION_38	CALL_5
0x40017b4	          0x4c89e7	                            mov rdi, r12	      2253	bfd.c	FUNCTION_38	CALL_5
0x40017b7	      0xe800000000	                          call 0x40017bc	      2253	bfd.c	FUNCTION_38	CALL_5
0x40017bc	          0x4989c6	                            mov r14, rax	      2253	bfd.c	FUNCTION_38	CALL_5
0x40017bf	          0x4885c0	                           test rax, rax	      2258	bfd.c	FUNCTION_38	IF_5
0x40017c2	     0xf8524ffffff	                           jne 0x40016ec	      2258	bfd.c	FUNCTION_38	IF_5
0x40017c8	      0xe9d3feffff	                           jmp 0x40016a0	      2258	bfd.c	FUNCTION_38	IF_5
0x40017cd	        0x4883c418	                           add rsp, 0x18	      2295	bfd.c	FUNCTION_38
0x40017d1	              0x5b	                                 pop rbx	      2295	bfd.c	FUNCTION_38
0x40017d2	              0x5d	                                 pop rbp	      2295	bfd.c	FUNCTION_38
0x40017d3	            0x415c	                                 pop r12	      2295	bfd.c	FUNCTION_38
0x40017d5	            0x415d	                                 pop r13	      2295	bfd.c	FUNCTION_38
0x40017d7	            0x415e	                                 pop r14	      2295	bfd.c	FUNCTION_38
0x40017d9	            0x415f	                                 pop r15	      2295	bfd.c	FUNCTION_38
0x40017db	              0xc3	                                     ret	      2295	bfd.c	FUNCTION_38
_bfd_set_gp_value	WHILE,0:FOR,0:functions,0:DO,0:IF,4:ELSE,1:CALL,3:SWITCH,0	23
0x400124a	          0x4885ff	                           test rdi, rdi	      1631	bfd.c	FUNCTION_25	IF_1
0x400124d	            0x7518	                           jne 0x4001267	      1631	bfd.c	FUNCTION_25	IF_1
0x400124f	        0x4883ec08	                              sub rsp, 8	      1630	bfd.c	FUNCTION_25
0x4001253	      0xba00000000	                              mov edx, 0	      1632	bfd.c	FUNCTION_25	CALL_1
0x4001258	      0xbe60060000	                          mov esi, 0x660	      1632	bfd.c	FUNCTION_25	CALL_1
0x400125d	      0xbf00000000	                              mov edi, 0	      1632	bfd.c	FUNCTION_25	CALL_1
0x4001262	      0xe800000000	                          call 0x4001267	      1632	bfd.c	FUNCTION_25	CALL_1
0x4001267	         0xfb64744	           movzx eax, byte [rdi + 0x44] 	      1633	bfd.c	FUNCTION_25	IF_2
0x400126b	          0x83e007	                              and eax, 7	      1633	bfd.c	FUNCTION_25	IF_2
0x400126e	            0x3c01	                               cmp al, 1	      1633	bfd.c	FUNCTION_25	IF_2
0x4001270	            0x752b	                           jne 0x400129d	      1633	bfd.c	FUNCTION_25	IF_2
0x4001272	        0x488b4708	                mov rax, qword [rdi + 8]	      1636	bfd.c	FUNCTION_25	IF_3
0x4001276	          0x8b4008	                mov eax, dword [rax + 8]	      1636	bfd.c	FUNCTION_25	IF_3
0x4001279	          0x83f803	                              cmp eax, 3	      1636	bfd.c	FUNCTION_25	IF_3
0x400127c	            0x750c	                           jne 0x400128a	      1636	bfd.c	FUNCTION_25	IF_3
0x400127e	    0x488b87f80000	            mov rax, qword [rdi + 0xf8] 	      1637	bfd.c	FUNCTION_25	CALL_2
0x4001285	        0x48897020	             mov qword [rax + 0x20], rsi	      1637	bfd.c	FUNCTION_25	CALL_2
0x4001289	              0xc3	                                     ret	      1637	bfd.c	FUNCTION_25	CALL_2
0x400128a	          0x83f805	                              cmp eax, 5	      1638	bfd.c	FUNCTION_25	ELSE_1	IF_4
0x400128d	            0x750e	                           jne 0x400129d	      1638	bfd.c	FUNCTION_25	ELSE_1	IF_4
0x400128f	    0x488b87f80000	            mov rax, qword [rdi + 0xf8] 	      1639	bfd.c	FUNCTION_25	ELSE_1	IF_4
0x4001296	    0x4889b0f00200	            mov qword [rax + 0x2f0], rsi	      1639	bfd.c	FUNCTION_25	ELSE_1	IF_4
0x400129d	            0xf3c3	                                     ret	      1639	bfd.c	FUNCTION_25	ELSE_1	IF_4
bfd_emul_set_maxpagesize	WHILE,0:FOR,0:functions,0:DO,0:IF,1:ELSE,0:CALL,2:SWITCH,0	13
0x4001539	              0x53	                                push rbx	      2132	bfd.c	FUNCTION_35
0x400153a	          0x4889f3	                            mov rbx, rsi	      2132	bfd.c	FUNCTION_35
0x400153d	      0xbe00000000	                              mov esi, 0	      2135	bfd.c	FUNCTION_35	CALL_1
0x4001542	      0xe800000000	                          call 0x4001547	      2135	bfd.c	FUNCTION_35	CALL_1
0x4001547	          0x4885c0	                           test rax, rax	      2136	bfd.c	FUNCTION_35	IF_1
0x400154a	            0x7413	                            je 0x400155f	      2136	bfd.c	FUNCTION_35	IF_1
0x400154c	          0x4889c1	                            mov rcx, rax	      2137	bfd.c	FUNCTION_35	IF_1	CALL_2
0x400154f	      0xba10000000	                           mov edx, 0x10	      2137	bfd.c	FUNCTION_35	IF_1	CALL_2
0x4001554	          0x4889de	                            mov rsi, rbx	      2137	bfd.c	FUNCTION_35	IF_1	CALL_2
0x4001557	          0x4889c7	                            mov rdi, rax	      2137	bfd.c	FUNCTION_35	IF_1	CALL_2
0x400155a	      0xe8e1eaffff	           call sym.bfd_elf_set_pagesize	      2137	bfd.c	FUNCTION_35	IF_1	CALL_2
0x400155f	              0x5b	                                 pop rbx	      2140	bfd.c	FUNCTION_35
0x4001560	              0xc3	                                     ret	      2140	bfd.c	FUNCTION_35
bfd_canonicalize_reloc	WHILE,0:FOR,0:functions,0:DO,0:IF,1:ELSE,0:CALL,2:SWITCH,0	12
0x4000319	         0xfb64744	           movzx eax, byte [rdi + 0x44] 	      1352	bfd.c	FUNCTION_15	IF_1
0x400031d	          0x83e007	                              and eax, 7	      1352	bfd.c	FUNCTION_15	IF_1
0x4000320	            0x3c01	                               cmp al, 1	      1352	bfd.c	FUNCTION_15	IF_1
0x4000322	            0x7412	                            je 0x4000336	      1352	bfd.c	FUNCTION_15	IF_1
0x4000324	    0xc70500000000	               mov dword [0x0400032e], 5	       506	bfd.c	FUNCTION_2
0x400032e	    0x48c7c0ffffff	             mov rax, 0xffffffffffffffff	      1355	bfd.c	FUNCTION_15	IF_1
0x4000335	              0xc3	                                     ret	      1360	bfd.c	FUNCTION_15
0x4000336	        0x4883ec08	                              sub rsp, 8	      1351	bfd.c	FUNCTION_15
0x400033a	        0x488b4708	                mov rax, qword [rdi + 8]	      1358	bfd.c	FUNCTION_15	CALL_2
0x400033e	    0xff9070020000	                call qword [rax + 0x270]	      1358	bfd.c	FUNCTION_15	CALL_2
0x4000344	        0x4883c408	                              add rsp, 8	      1360	bfd.c	FUNCTION_15
0x4000348	              0xc3	                                     ret	      1360	bfd.c	FUNCTION_15
bfd_get_arch_size	WHILE,0:FOR,0:functions,0:DO,0:IF,1:ELSE,0:CALL,2:SWITCH,0	15
0x4000fe8	        0x488b4708	                mov rax, qword [rdi + 8]	      1473	bfd.c	FUNCTION_19	IF_1
0x4000fec	        0x83780805	                  cmp dword [rax + 8], 5	      1473	bfd.c	FUNCTION_19	IF_1
0x4000ff0	            0x7513	                           jne 0x4001005	      1473	bfd.c	FUNCTION_19	IF_1
0x4000ff2	    0x488b80680300	           mov rax, qword [rax + 0x368] 	      1474	bfd.c	FUNCTION_19	CALL_1
0x4000ff9	    0x488b80000300	           mov rax, qword [rax + 0x300] 	      1474	bfd.c	FUNCTION_19	CALL_1
0x4001000	         0xfb6400a	            movzx eax, byte [rax + 0xa] 	      1474	bfd.c	FUNCTION_19	CALL_1
0x4001004	              0xc3	                                     ret	      1477	bfd.c	FUNCTION_19
0x4001005	        0x4883ec08	                              sub rsp, 8	      1472	bfd.c	FUNCTION_19
0x4001009	      0xe800000000	                          call 0x400100e	      1476	bfd.c	FUNCTION_19	CALL_2
0x400100e	          0x83f821	                           cmp eax, 0x21	      1476	bfd.c	FUNCTION_19	CALL_2
0x4001011	            0x19c0	                            sbb eax, eax	      1476	bfd.c	FUNCTION_19	CALL_2
0x4001013	          0x83e0e0	                     and eax, 0xffffffe0	      1476	bfd.c	FUNCTION_19	CALL_2
0x4001016	          0x83c040	                           add eax, 0x40	      1476	bfd.c	FUNCTION_19	CALL_2
0x4001019	        0x4883c408	                              add rsp, 8	      1477	bfd.c	FUNCTION_19
0x400101d	              0xc3	                                     ret	      1477	bfd.c	FUNCTION_19
bfd_set_error_program_name	WHILE,0:FOR,0:functions,0:DO,0:IF,0:ELSE,0:CALL,0:SWITCH,0	2
0x40002d2	    0x48893d000000	            mov qword [0x040002d9], rdi 	      1220	bfd.c	FUNCTION_11
0x40002d9	              0xc3	                                     ret	      1220	bfd.c	FUNCTION_11
bfd_set_start_address	WHILE,0:FOR,0:functions,0:DO,0:IF,0:ELSE,0:CALL,0:SWITCH,0	3
0x4001178	    0x4889b7a80000	             mov qword [rdi + 0xa8], rsi	      1550	bfd.c	FUNCTION_21
0x400117f	      0xb801000000	                              mov eax, 1	      1552	bfd.c	FUNCTION_21
0x4001184	              0xc3	                                     ret	      1552	bfd.c	FUNCTION_21
is32bit	WHILE,0:FOR,0:functions,0:DO,0:IF,1:ELSE,0:CALL,3:SWITCH,0	16
0x4000074	        0x488b4708	                mov rax, qword [rdi + 8]	      1978	bfd.c	FUNCTION_29	IF_1	CALL_1
0x4000078	        0x83780805	                  cmp dword [rax + 8], 5	      1978	bfd.c	FUNCTION_29	IF_1	CALL_1
0x400007c	            0x7519	                           jne 0x4000097	      1978	bfd.c	FUNCTION_29	IF_1	CALL_1
0x400007e	    0x488b80680300	           mov rax, qword [rax + 0x368] 	      1981	bfd.c	FUNCTION_29	IF_1
0x4000085	    0x488b80000300	           mov rax, qword [rax + 0x300] 	      1981	bfd.c	FUNCTION_29	IF_1
0x400008c	        0x80780c01	                 cmp byte [rax + 0xc], 1	      1981	bfd.c	FUNCTION_29	IF_1
0x4000090	           0xf94c0	                                 sete al	      1981	bfd.c	FUNCTION_29	IF_1
0x4000093	           0xfb6c0	                           movzx eax, al	      1981	bfd.c	FUNCTION_29	IF_1
0x4000096	              0xc3	                                     ret	      1986	bfd.c	FUNCTION_29
0x4000097	        0x4883ec08	                              sub rsp, 8	      1977	bfd.c	FUNCTION_29
0x400009b	      0xe800000000	                          call 0x40000a0	      1985	bfd.c	FUNCTION_29	CALL_3
0x40000a0	          0x83f820	                           cmp eax, 0x20	      1985	bfd.c	FUNCTION_29	CALL_3
0x40000a3	           0xf96c0	                                setbe al	      1985	bfd.c	FUNCTION_29	CALL_3
0x40000a6	           0xfb6c0	                           movzx eax, al	      1985	bfd.c	FUNCTION_29	CALL_3
0x40000a9	        0x4883c408	                              add rsp, 8	      1986	bfd.c	FUNCTION_29
0x40000ad	              0xc3	                                     ret	      1986	bfd.c	FUNCTION_29
bfd_set_input_error	WHILE,0:FOR,0:functions,0:DO,0:IF,1:ELSE,0:CALL,1:SWITCH,0	11
0x40004b2	    0xc70500000000	           mov dword [0x040004bc], 0x14 	       530	bfd.c	FUNCTION_3
0x40004bc	    0x48893d000000	            mov qword [0x040004c3], rdi 	       531	bfd.c	FUNCTION_3
0x40004c3	    0x893500000000	            mov dword [0x040004c9], esi 	       532	bfd.c	FUNCTION_3
0x40004c9	          0x83fe13	                           cmp esi, 0x13	       533	bfd.c	FUNCTION_3	IF_1
0x40004cc	            0x7618	                           jbe 0x40004e6	       533	bfd.c	FUNCTION_3	IF_1
0x40004ce	        0x4883ec08	                              sub rsp, 8	       527	bfd.c	FUNCTION_3
0x40004d2	      0xba00000000	                              mov edx, 0	       534	bfd.c	FUNCTION_3	CALL_1
0x40004d7	      0xbe16020000	                          mov esi, 0x216	       534	bfd.c	FUNCTION_3	CALL_1
0x40004dc	      0xbf00000000	                              mov edi, 0	       534	bfd.c	FUNCTION_3	CALL_1
0x40004e1	      0xe800000000	                          call 0x40004e6	       534	bfd.c	FUNCTION_3	CALL_1
0x40004e6	            0xf3c3	                                     ret	       534	bfd.c	FUNCTION_3	CALL_1
_bfd_get_gp_value	WHILE,0:FOR,0:functions,0:DO,0:IF,4:ELSE,1:CALL,2:SWITCH,0	22
0x40011fc	          0x4885ff	                           test rdi, rdi	      1613	bfd.c	FUNCTION_24	IF_1
0x40011ff	            0x7442	                            je 0x4001243	      1613	bfd.c	FUNCTION_24	IF_1
0x4001201	         0xfb65744	           movzx edx, byte [rdi + 0x44] 	      1615	bfd.c	FUNCTION_24	IF_2
0x4001205	          0x83e207	                              and edx, 7	      1615	bfd.c	FUNCTION_24	IF_2
0x4001208	      0xb800000000	                              mov eax, 0	      1616	bfd.c	FUNCTION_24	IF_2
0x400120d	          0x80fa01	                               cmp dl, 1	      1615	bfd.c	FUNCTION_24	IF_2
0x4001210	            0x7536	                           jne 0x4001248	      1615	bfd.c	FUNCTION_24	IF_2
0x4001212	        0x488b4708	                mov rax, qword [rdi + 8]	      1618	bfd.c	FUNCTION_24	IF_3
0x4001216	          0x8b5008	                mov edx, dword [rax + 8]	      1618	bfd.c	FUNCTION_24	IF_3
0x4001219	          0x83fa03	                              cmp edx, 3	      1618	bfd.c	FUNCTION_24	IF_3
0x400121c	            0x750c	                           jne 0x400122a	      1618	bfd.c	FUNCTION_24	IF_3
0x400121e	    0x488b87f80000	            mov rax, qword [rdi + 0xf8] 	      1619	bfd.c	FUNCTION_24	CALL_1
0x4001225	        0x488b4020	            mov rax, qword [rax + 0x20] 	      1619	bfd.c	FUNCTION_24	CALL_1
0x4001229	              0xc3	                                     ret	      1619	bfd.c	FUNCTION_24	CALL_1
0x400122a	      0xb800000000	                              mov eax, 0	      1623	bfd.c	FUNCTION_24
0x400122f	          0x83fa05	                              cmp edx, 5	      1620	bfd.c	FUNCTION_24	ELSE_1	IF_4
0x4001232	            0x7514	                           jne 0x4001248	      1620	bfd.c	FUNCTION_24	ELSE_1	IF_4
0x4001234	    0x488b87f80000	            mov rax, qword [rdi + 0xf8] 	      1621	bfd.c	FUNCTION_24	ELSE_1	IF_4
0x400123b	    0x488b80f00200	           mov rax, qword [rax + 0x2f0] 	      1621	bfd.c	FUNCTION_24	ELSE_1	IF_4
0x4001242	              0xc3	                                     ret	      1621	bfd.c	FUNCTION_24	ELSE_1	IF_4
0x4001243	      0xb800000000	                              mov eax, 0	      1614	bfd.c	FUNCTION_24	IF_1
0x4001248	            0xf3c3	                                     ret	      1624	bfd.c	FUNCTION_24
bfd_set_file_flags	WHILE,0:FOR,0:functions,0:DO,0:IF,3:ELSE,0:CALL,6:SWITCH,0	30
0x4000349	         0xfb64744	           movzx eax, byte [rdi + 0x44] 	      1402	bfd.c	FUNCTION_16	IF_1
0x400034d	            0x89c2	                            mov edx, eax	      1402	bfd.c	FUNCTION_16	IF_1
0x400034f	          0x83e207	                              and edx, 7	      1402	bfd.c	FUNCTION_16	IF_1
0x4000352	          0x80fa01	                               cmp dl, 1	      1402	bfd.c	FUNCTION_16	IF_1
0x4000355	            0x7410	                            je 0x4000367	      1402	bfd.c	FUNCTION_16	IF_1
0x4000357	    0xc70500000000	               mov dword [0x04000361], 3	       506	bfd.c	FUNCTION_2
0x4000361	      0xb800000000	                              mov eax, 0	      1405	bfd.c	FUNCTION_16	IF_1
0x4000366	              0xc3	                                     ret	      1405	bfd.c	FUNCTION_16	IF_1
0x4000367	          0x83e008	                              and eax, 8	      1408	bfd.c	FUNCTION_16	IF_2	CALL_2
0x400036a	            0x3c08	                               cmp al, 8	      1408	bfd.c	FUNCTION_16	IF_2	CALL_2
0x400036c	            0x7510	                           jne 0x400037e	      1408	bfd.c	FUNCTION_16	IF_2	CALL_2
0x400036e	    0xc70500000000	               mov dword [0x04000378], 5	       506	bfd.c	FUNCTION_2
0x4000378	      0xb800000000	                              mov eax, 0	      1411	bfd.c	FUNCTION_16	IF_2
0x400037d	              0xc3	                                     ret	      1411	bfd.c	FUNCTION_16	IF_2
0x400037e	            0x89f0	                            mov eax, esi	      1414	bfd.c	FUNCTION_16	CALL_4
0x4000380	      0x25ffff0f00	                        and eax, 0xfffff	      1414	bfd.c	FUNCTION_16	CALL_4
0x4000385	          0xc1e005	                              shl eax, 5	      1414	bfd.c	FUNCTION_16	CALL_4
0x4000388	          0x8b5744	            mov edx, dword [rdi + 0x44] 	      1414	bfd.c	FUNCTION_16	CALL_4
0x400038b	    0x81e21f0000fe	                     and edx, 0xfe00001f	      1414	bfd.c	FUNCTION_16	CALL_4
0x4000391	             0x9d0	                             or eax, edx	      1414	bfd.c	FUNCTION_16	CALL_4
0x4000393	          0x894744	             mov dword [rdi + 0x44], eax	      1414	bfd.c	FUNCTION_16	CALL_4
0x4000396	        0x488b4708	                mov rax, qword [rdi + 8]	      1415	bfd.c	FUNCTION_16	IF_3	CALL_5
0x400039a	            0x89f2	                            mov edx, esi	      1415	bfd.c	FUNCTION_16	IF_3	CALL_5
0x400039c	          0x235014	             and edx, dword [rax + 0x14]	      1415	bfd.c	FUNCTION_16	IF_3	CALL_5
0x400039f	      0xb801000000	                              mov eax, 1	      1421	bfd.c	FUNCTION_16
0x40003a4	            0x39d6	                            cmp esi, edx	      1415	bfd.c	FUNCTION_16	IF_3	CALL_5
0x40003a6	            0x740f	                            je 0x40003b7	      1415	bfd.c	FUNCTION_16	IF_3	CALL_5
0x40003a8	    0xc70500000000	               mov dword [0x040003b2], 5	       506	bfd.c	FUNCTION_2
0x40003b2	      0xb800000000	                              mov eax, 0	      1418	bfd.c	FUNCTION_16	IF_3
0x40003b7	            0xf3c3	                                     ret	      1422	bfd.c	FUNCTION_16
bfd_record_phdr	WHILE,0:FOR,1:functions,0:DO,0:IF,3:ELSE,0:CALL,4:SWITCH,0	78
0x40012db	        0x4c8b5708	                mov r10, qword [rdi + 8]	      1945	bfd.c	FUNCTION_28	IF_1	CALL_1
0x40012df	      0xb801000000	                              mov eax, 1	      1946	bfd.c	FUNCTION_28	IF_1
0x40012e4	      0x41837a0805	                  cmp dword [r10 + 8], 5	      1945	bfd.c	FUNCTION_28	IF_1	CALL_1
0x40012e9	     0xf85f0000000	                           jne 0x40013df	      1945	bfd.c	FUNCTION_28	IF_1	CALL_1
0x40012ef	            0x4157	                                push r15	      1941	bfd.c	FUNCTION_28
0x40012f1	            0x4156	                                push r14	      1941	bfd.c	FUNCTION_28
0x40012f3	            0x4155	                                push r13	      1941	bfd.c	FUNCTION_28
0x40012f5	            0x4154	                                push r12	      1941	bfd.c	FUNCTION_28
0x40012f7	              0x55	                                push rbp	      1941	bfd.c	FUNCTION_28
0x40012f8	              0x53	                                push rbx	      1941	bfd.c	FUNCTION_28
0x40012f9	        0x4883ec18	                           sub rsp, 0x18	      1941	bfd.c	FUNCTION_28
0x40012fd	          0x4d89cc	                             mov r12, r9	      1941	bfd.c	FUNCTION_28
0x4001300	      0x448944240c	              mov dword [rsp + 0xc], r8d	      1941	bfd.c	FUNCTION_28
0x4001305	          0x4189cd	                           mov r13d, ecx	      1941	bfd.c	FUNCTION_28
0x4001308	        0x89542408	                mov dword [rsp + 8], edx	      1941	bfd.c	FUNCTION_28
0x400130c	          0x4989f6	                            mov r14, rsi	      1941	bfd.c	FUNCTION_28
0x400130f	          0x4889fb	                            mov rbx, rdi	      1941	bfd.c	FUNCTION_28
0x4001312	      0x448b7c2460	           mov r15d, dword [rsp + 0x60] 	      1949	bfd.c	FUNCTION_28
0x4001317	        0x49c1e703	                              shl r15, 3	      1949	bfd.c	FUNCTION_28
0x400131b	        0x498d7748	                   lea rsi, [r15 + 0x48]	      1950	bfd.c	FUNCTION_28	CALL_2
0x400131f	      0xe800000000	                          call 0x4001324	      1950	bfd.c	FUNCTION_28	CALL_2
0x4001324	          0x4889c5	                            mov rbp, rax	      1950	bfd.c	FUNCTION_28	CALL_2
0x4001327	          0x4885c0	                           test rax, rax	      1951	bfd.c	FUNCTION_28	IF_2
0x400132a	     0xf849c000000	                            je 0x40013cc	      1951	bfd.c	FUNCTION_28	IF_2
0x4001330	        0x4c897008	                mov qword [rax + 8], r14	      1954	bfd.c	FUNCTION_28
0x4001334	          0x4489e8	                           mov eax, r13d	      1955	bfd.c	FUNCTION_28
0x4001337	        0x48894510	            mov qword [rbp + 0x10], rax 	      1955	bfd.c	FUNCTION_28
0x400133b	        0x4c896518	            mov qword [rbp + 0x18], r12 	      1956	bfd.c	FUNCTION_28
0x400133f	       0xfb6542408	               movzx edx, byte [rsp + 8]	      1957	bfd.c	FUNCTION_28
0x4001344	          0x83e201	                              and edx, 1	      1957	bfd.c	FUNCTION_28
0x4001347	         0xfb64540	           movzx eax, byte [rbp + 0x40] 	      1957	bfd.c	FUNCTION_28
0x400134b	          0x83e0fc	                     and eax, 0xfffffffc	      1957	bfd.c	FUNCTION_28
0x400134e	    0x440fb644240c	            movzx r8d, byte [rsp + 0xc] 	      1958	bfd.c	FUNCTION_28
0x4001354	        0x4183e001	                              and r8d, 1	      1958	bfd.c	FUNCTION_28
0x4001358	          0x4501c0	                            add r8d, r8d	      1958	bfd.c	FUNCTION_28
0x400135b	             0x9d0	                             or eax, edx	      1958	bfd.c	FUNCTION_28
0x400135d	          0x4409c0	                             or eax, r8d	      1958	bfd.c	FUNCTION_28
0x4001360	       0xfb64c2450	           movzx ecx, byte [rsp + 0x50] 	      1959	bfd.c	FUNCTION_28
0x4001365	          0x83e101	                              and ecx, 1	      1959	bfd.c	FUNCTION_28
0x4001368	          0xc1e104	                              shl ecx, 4	      1959	bfd.c	FUNCTION_28
0x400136b	          0x83e0cf	                     and eax, 0xffffffcf	      1959	bfd.c	FUNCTION_28
0x400136e	       0xfb6542458	           movzx edx, byte [rsp + 0x58] 	      1960	bfd.c	FUNCTION_28
0x4001373	          0x83e201	                              and edx, 1	      1960	bfd.c	FUNCTION_28
0x4001376	          0xc1e205	                              shl edx, 5	      1960	bfd.c	FUNCTION_28
0x4001379	             0x9c8	                             or eax, ecx	      1960	bfd.c	FUNCTION_28
0x400137b	             0x9d0	                             or eax, edx	      1960	bfd.c	FUNCTION_28
0x400137d	          0x884540	               mov byte [rbp + 0x40], al	      1960	bfd.c	FUNCTION_28
0x4001380	        0x8b442460	            mov eax, dword [rsp + 0x60] 	      1961	bfd.c	FUNCTION_28
0x4001384	          0x894544	            mov dword [rbp + 0x44], eax 	      1961	bfd.c	FUNCTION_28
0x4001387	            0x85c0	                           test eax, eax	      1962	bfd.c	FUNCTION_28	IF_3
0x4001389	            0x7411	                            je 0x400139c	      1962	bfd.c	FUNCTION_28	IF_3
0x400138b	        0x488d7d48	                   lea rdi, [rbp + 0x48]	        53	string3.h	FUNCTION_44	CALL_3
0x400138f	          0x4c89fa	                            mov rdx, r15	        53	string3.h	FUNCTION_44	CALL_3
0x4001392	      0x488b742468	            mov rsi, qword [rsp + 0x68] 	        53	string3.h	FUNCTION_44	CALL_3
0x4001397	      0xe800000000	                          call 0x400139c	        53	string3.h	FUNCTION_44	CALL_3
0x400139c	    0x488b83f80000	            mov rax, qword [rbx + 0xf8] 	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
0x40013a3	    0x488b80980c00	           mov rax, qword [rax + 0xc98] 	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
0x40013aa	          0x488b10	                    mov rdx, qword [rax]	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
0x40013ad	          0x4885d2	                           test rdx, rdx	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
0x40013b0	            0x7508	                           jne 0x40013ba	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
0x40013b2	          0x4889c2	                            mov rdx, rax	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
0x40013b5	            0xeb0b	                           jmp 0x40013c2	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
0x40013b7	          0x4889c2	                            mov rdx, rax	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
0x40013ba	          0x488b02	                    mov rax, qword [rdx]	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
0x40013bd	          0x4885c0	                           test rax, rax	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
0x40013c0	            0x75f5	                           jne 0x40013b7	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
0x40013c2	          0x48892a	                    mov qword [rdx], rbp	      1967	bfd.c	FUNCTION_28
0x40013c5	      0xb801000000	                              mov eax, 1	      1969	bfd.c	FUNCTION_28
0x40013ca	            0xeb05	                           jmp 0x40013d1	      1969	bfd.c	FUNCTION_28
0x40013cc	      0xb800000000	                              mov eax, 0	      1952	bfd.c	FUNCTION_28	IF_2
0x40013d1	        0x4883c418	                           add rsp, 0x18	      1970	bfd.c	FUNCTION_28
0x40013d5	              0x5b	                                 pop rbx	      1970	bfd.c	FUNCTION_28
0x40013d6	              0x5d	                                 pop rbp	      1970	bfd.c	FUNCTION_28
0x40013d7	            0x415c	                                 pop r12	      1970	bfd.c	FUNCTION_28
0x40013d9	            0x415d	                                 pop r13	      1970	bfd.c	FUNCTION_28
0x40013db	            0x415e	                                 pop r14	      1970	bfd.c	FUNCTION_28
0x40013dd	            0x415f	                                 pop r15	      1970	bfd.c	FUNCTION_28
0x40013df	            0xf3c3	                                     ret	      1970	bfd.c	FUNCTION_28
bfd_set_assert_handler	WHILE,0:FOR,0:functions,0:DO,0:IF,0:ELSE,0:CALL,0:SWITCH,0	3
0x40002da	    0x488b05000000	            mov rax, qword [0x040002e1] 	      1283	bfd.c	FUNCTION_13
0x40002e1	    0x48893d000000	            mov qword [0x040002e8], rdi 	      1284	bfd.c	FUNCTION_13
0x40002e8	              0xc3	                                     ret	      1286	bfd.c	FUNCTION_13
bfd_get_sign_extend_vma	WHILE,0:FOR,0:functions,0:DO,0:IF,3:ELSE,0:CALL,14:SWITCH,0	94
0x400101e	        0x488b4708	                mov rax, qword [rdi + 8]	      1505	bfd.c	FUNCTION_20	IF_1	CALL_1
0x4001022	        0x83780805	                  cmp dword [rax + 8], 5	      1505	bfd.c	FUNCTION_20	IF_1	CALL_1
0x4001026	            0x7512	                           jne 0x400103a	      1505	bfd.c	FUNCTION_20	IF_1	CALL_1
0x4001028	    0x488b80680300	           mov rax, qword [rax + 0x368] 	      1506	bfd.c	FUNCTION_20	CALL_2
0x400102f	     0xfb680890300	          movzx eax, byte [rax + 0x389] 	      1506	bfd.c	FUNCTION_20	CALL_2
0x4001036	          0x83e001	                              and eax, 1	      1506	bfd.c	FUNCTION_20	CALL_2
0x4001039	              0xc3	                                     ret	      1506	bfd.c	FUNCTION_20	CALL_2
0x400103a	          0x488b10	                    mov rdx, qword [rax]	      1508	bfd.c	FUNCTION_20	CALL_3
0x400103d	      0xbf00000000	                              mov edi, 0	      1515	bfd.c	FUNCTION_20	IF_2	CALL_4
0x4001042	      0xb909000000	                              mov ecx, 9	      1515	bfd.c	FUNCTION_20	IF_2	CALL_4
0x4001047	          0x4889d6	                            mov rsi, rdx	      1515	bfd.c	FUNCTION_20	IF_2	CALL_4
0x400104a	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	      1515	bfd.c	FUNCTION_20	IF_2	CALL_4
0x400104c	        0x400f97c6	                                seta sil	      1515	bfd.c	FUNCTION_20	IF_2	CALL_4
0x4001050	           0xf92c1	                                 setb cl	      1515	bfd.c	FUNCTION_20	IF_2	CALL_4
0x4001053	      0xb801000000	                              mov eax, 1	      1524	bfd.c	FUNCTION_20	IF_2
0x4001058	          0x4038ce	                             cmp sil, cl	      1515	bfd.c	FUNCTION_20	IF_2	CALL_4
0x400105b	     0xf8415010000	                            je 0x4001176	      1515	bfd.c	FUNCTION_20	IF_2	CALL_4
0x4001061	      0xbf00000000	                              mov edi, 0	      1516	bfd.c	FUNCTION_20	IF_2	CALL_5
0x4001066	      0xb908000000	                              mov ecx, 8	      1516	bfd.c	FUNCTION_20	IF_2	CALL_5
0x400106b	          0x4889d6	                            mov rsi, rdx	      1516	bfd.c	FUNCTION_20	IF_2	CALL_5
0x400106e	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	      1516	bfd.c	FUNCTION_20	IF_2	CALL_5
0x4001070	        0x400f97c6	                                seta sil	      1516	bfd.c	FUNCTION_20	IF_2	CALL_5
0x4001074	           0xf92c1	                                 setb cl	      1516	bfd.c	FUNCTION_20	IF_2	CALL_5
0x4001077	          0x4038ce	                             cmp sil, cl	      1516	bfd.c	FUNCTION_20	IF_2	CALL_5
0x400107a	     0xf84f6000000	                            je 0x4001176	      1516	bfd.c	FUNCTION_20	IF_2	CALL_5
0x4001080	      0xbf00000000	                              mov edi, 0	      1517	bfd.c	FUNCTION_20	IF_2	CALL_6
0x4001085	      0xb909000000	                              mov ecx, 9	      1517	bfd.c	FUNCTION_20	IF_2	CALL_6
0x400108a	          0x4889d6	                            mov rsi, rdx	      1517	bfd.c	FUNCTION_20	IF_2	CALL_6
0x400108d	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	      1517	bfd.c	FUNCTION_20	IF_2	CALL_6
0x400108f	        0x400f97c6	                                seta sil	      1517	bfd.c	FUNCTION_20	IF_2	CALL_6
0x4001093	           0xf92c1	                                 setb cl	      1517	bfd.c	FUNCTION_20	IF_2	CALL_6
0x4001096	          0x4038ce	                             cmp sil, cl	      1517	bfd.c	FUNCTION_20	IF_2	CALL_6
0x4001099	     0xf84d7000000	                            je 0x4001176	      1517	bfd.c	FUNCTION_20	IF_2	CALL_6
0x400109f	      0xbf00000000	                              mov edi, 0	      1518	bfd.c	FUNCTION_20	IF_2	CALL_7
0x40010a4	      0xb90a000000	                            mov ecx, 0xa	      1518	bfd.c	FUNCTION_20	IF_2	CALL_7
0x40010a9	          0x4889d6	                            mov rsi, rdx	      1518	bfd.c	FUNCTION_20	IF_2	CALL_7
0x40010ac	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	      1518	bfd.c	FUNCTION_20	IF_2	CALL_7
0x40010ae	        0x400f97c6	                                seta sil	      1518	bfd.c	FUNCTION_20	IF_2	CALL_7
0x40010b2	           0xf92c1	                                 setb cl	      1518	bfd.c	FUNCTION_20	IF_2	CALL_7
0x40010b5	          0x4038ce	                             cmp sil, cl	      1518	bfd.c	FUNCTION_20	IF_2	CALL_7
0x40010b8	     0xf84b8000000	                            je 0x4001176	      1518	bfd.c	FUNCTION_20	IF_2	CALL_7
0x40010be	      0xbf00000000	                              mov edi, 0	      1519	bfd.c	FUNCTION_20	IF_2	CALL_8
0x40010c3	      0xb90b000000	                            mov ecx, 0xb	      1519	bfd.c	FUNCTION_20	IF_2	CALL_8
0x40010c8	          0x4889d6	                            mov rsi, rdx	      1519	bfd.c	FUNCTION_20	IF_2	CALL_8
0x40010cb	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	      1519	bfd.c	FUNCTION_20	IF_2	CALL_8
0x40010cd	        0x400f97c6	                                seta sil	      1519	bfd.c	FUNCTION_20	IF_2	CALL_8
0x40010d1	           0xf92c1	                                 setb cl	      1519	bfd.c	FUNCTION_20	IF_2	CALL_8
0x40010d4	          0x4038ce	                             cmp sil, cl	      1519	bfd.c	FUNCTION_20	IF_2	CALL_8
0x40010d7	     0xf8499000000	                            je 0x4001176	      1519	bfd.c	FUNCTION_20	IF_2	CALL_8
0x40010dd	      0xbf00000000	                              mov edi, 0	      1520	bfd.c	FUNCTION_20	IF_2	CALL_9
0x40010e2	      0xb914000000	                           mov ecx, 0x14	      1520	bfd.c	FUNCTION_20	IF_2	CALL_9
0x40010e7	          0x4889d6	                            mov rsi, rdx	      1520	bfd.c	FUNCTION_20	IF_2	CALL_9
0x40010ea	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	      1520	bfd.c	FUNCTION_20	IF_2	CALL_9
0x40010ec	        0x400f97c6	                                seta sil	      1520	bfd.c	FUNCTION_20	IF_2	CALL_9
0x40010f0	           0xf92c1	                                 setb cl	      1520	bfd.c	FUNCTION_20	IF_2	CALL_9
0x40010f3	          0x4038ce	                             cmp sil, cl	      1520	bfd.c	FUNCTION_20	IF_2	CALL_9
0x40010f6	            0x747e	                            je 0x4001176	      1520	bfd.c	FUNCTION_20	IF_2	CALL_9
0x40010f8	      0xbf00000000	                              mov edi, 0	      1521	bfd.c	FUNCTION_20	IF_2	CALL_10
0x40010fd	      0xb915000000	                           mov ecx, 0x15	      1521	bfd.c	FUNCTION_20	IF_2	CALL_10
0x4001102	          0x4889d6	                            mov rsi, rdx	      1521	bfd.c	FUNCTION_20	IF_2	CALL_10
0x4001105	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	      1521	bfd.c	FUNCTION_20	IF_2	CALL_10
0x4001107	        0x400f97c6	                                seta sil	      1521	bfd.c	FUNCTION_20	IF_2	CALL_10
0x400110b	           0xf92c1	                                 setb cl	      1521	bfd.c	FUNCTION_20	IF_2	CALL_10
0x400110e	          0x4038ce	                             cmp sil, cl	      1521	bfd.c	FUNCTION_20	IF_2	CALL_10
0x4001111	            0x7463	                            je 0x4001176	      1521	bfd.c	FUNCTION_20	IF_2	CALL_10
0x4001113	      0xbf00000000	                              mov edi, 0	      1522	bfd.c	FUNCTION_20	IF_2	CALL_11
0x4001118	      0xb90f000000	                            mov ecx, 0xf	      1522	bfd.c	FUNCTION_20	IF_2	CALL_11
0x400111d	          0x4889d6	                            mov rsi, rdx	      1522	bfd.c	FUNCTION_20	IF_2	CALL_11
0x4001120	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	      1522	bfd.c	FUNCTION_20	IF_2	CALL_11
0x4001122	        0x400f97c6	                                seta sil	      1522	bfd.c	FUNCTION_20	IF_2	CALL_11
0x4001126	           0xf92c1	                                 setb cl	      1522	bfd.c	FUNCTION_20	IF_2	CALL_11
0x4001129	          0x4038ce	                             cmp sil, cl	      1522	bfd.c	FUNCTION_20	IF_2	CALL_11
0x400112c	            0x7448	                            je 0x4001176	      1522	bfd.c	FUNCTION_20	IF_2	CALL_11
0x400112e	      0xbf00000000	                              mov edi, 0	      1523	bfd.c	FUNCTION_20	IF_2	CALL_12
0x4001133	      0xb912000000	                           mov ecx, 0x12	      1523	bfd.c	FUNCTION_20	IF_2	CALL_12
0x4001138	          0x4889d6	                            mov rsi, rdx	      1523	bfd.c	FUNCTION_20	IF_2	CALL_12
0x400113b	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	      1523	bfd.c	FUNCTION_20	IF_2	CALL_12
0x400113d	        0x400f97c6	                                seta sil	      1523	bfd.c	FUNCTION_20	IF_2	CALL_12
0x4001141	           0xf92c1	                                 setb cl	      1523	bfd.c	FUNCTION_20	IF_2	CALL_12
0x4001144	          0x4038ce	                             cmp sil, cl	      1523	bfd.c	FUNCTION_20	IF_2	CALL_12
0x4001147	            0x742d	                            je 0x4001176	      1523	bfd.c	FUNCTION_20	IF_2	CALL_12
0x4001149	      0xbf00000000	                              mov edi, 0	      1526	bfd.c	FUNCTION_20	IF_3	CALL_13
0x400114e	      0xb906000000	                              mov ecx, 6	      1526	bfd.c	FUNCTION_20	IF_3	CALL_13
0x4001153	          0x4889d6	                            mov rsi, rdx	      1526	bfd.c	FUNCTION_20	IF_3	CALL_13
0x4001156	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	      1526	bfd.c	FUNCTION_20	IF_3	CALL_13
0x4001158	           0xf97c0	                                 seta al	      1526	bfd.c	FUNCTION_20	IF_3	CALL_13
0x400115b	           0xf92c2	                                 setb dl	      1526	bfd.c	FUNCTION_20	IF_3	CALL_13
0x400115e	            0x29d0	                            sub eax, edx	      1526	bfd.c	FUNCTION_20	IF_3	CALL_13
0x4001160	           0xfbec0	                           movsx eax, al	      1526	bfd.c	FUNCTION_20	IF_3	CALL_13
0x4001163	            0x85c0	                           test eax, eax	      1526	bfd.c	FUNCTION_20	IF_3	CALL_13
0x4001165	            0x740f	                            je 0x4001176	      1526	bfd.c	FUNCTION_20	IF_3	CALL_13
0x4001167	    0xc70500000000	               mov dword [0x04001171], 3	       506	bfd.c	FUNCTION_2
0x4001171	      0xb8ffffffff	                     mov eax, 0xffffffff	      1530	bfd.c	FUNCTION_20
0x4001176	            0xf3c3	                                     ret	      1531	bfd.c	FUNCTION_20
bfd_fprintf_vma	WHILE,0:FOR,0:functions,0:DO,0:IF,1:ELSE,0:CALL,2:SWITCH,0	25
0x4001441	              0x55	                                push rbp	      2007	bfd.c	FUNCTION_31
0x4001442	              0x53	                                push rbx	      2007	bfd.c	FUNCTION_31
0x4001443	        0x4883ec08	                              sub rsp, 8	      2007	bfd.c	FUNCTION_31
0x4001447	          0x4889f5	                            mov rbp, rsi	      2007	bfd.c	FUNCTION_31
0x400144a	          0x4889d3	                            mov rbx, rdx	      2007	bfd.c	FUNCTION_31
0x400144d	      0xe822ecffff	                        call sym.is32bit	      2009	bfd.c	FUNCTION_31	IF_1	CALL_1
0x4001452	            0x85c0	                           test eax, eax	      2009	bfd.c	FUNCTION_31	IF_1	CALL_1
0x4001454	            0x741b	                            je 0x4001471	      2009	bfd.c	FUNCTION_31	IF_1	CALL_1
0x4001456	            0x89d9	                            mov ecx, ebx	        97	stdio2.h	CALL_34
0x4001458	      0xba00000000	                              mov edx, 0	        97	stdio2.h	CALL_34
0x400145d	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_34
0x4001462	          0x4889ef	                            mov rdi, rbp	        97	stdio2.h	CALL_34
0x4001465	      0xb800000000	                              mov eax, 0	        97	stdio2.h	CALL_34
0x400146a	      0xe800000000	                          call 0x400146f	        97	stdio2.h	CALL_34
0x400146f	            0xeb1a	                           jmp 0x400148b	        97	stdio2.h	CALL_34
0x4001471	          0x4889d9	                            mov rcx, rbx	        97	stdio2.h	CALL_34
0x4001474	      0xba00000000	                              mov edx, 0	        97	stdio2.h	CALL_34
0x4001479	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_34
0x400147e	          0x4889ef	                            mov rdi, rbp	        97	stdio2.h	CALL_34
0x4001481	      0xb800000000	                              mov eax, 0	        97	stdio2.h	CALL_34
0x4001486	      0xe800000000	                          call 0x400148b	        97	stdio2.h	CALL_34
0x400148b	        0x4883c408	                              add rsp, 8	      2016	bfd.c	FUNCTION_31
0x400148f	              0x5b	                                 pop rbx	      2016	bfd.c	FUNCTION_31
0x4001490	              0x5d	                                 pop rbp	      2016	bfd.c	FUNCTION_31
0x4001491	              0xc3	                                     ret	      2016	bfd.c	FUNCTION_31
bfd_emul_set_commonpagesize	WHILE,0:FOR,0:functions,0:DO,0:IF,1:ELSE,0:CALL,2:SWITCH,0	13
0x400159f	              0x53	                                push rbx	      2192	bfd.c	ELSE_1	FUNCTION_37
0x40015a0	          0x4889f3	                            mov rbx, rsi	      2192	bfd.c	ELSE_1	FUNCTION_37
0x40015a3	      0xbe00000000	                              mov esi, 0	      2195	bfd.c	ELSE_1	FUNCTION_37	CALL_1
0x40015a8	      0xe800000000	                          call 0x40015ad	      2195	bfd.c	ELSE_1	FUNCTION_37	CALL_1
0x40015ad	          0x4885c0	                           test rax, rax	      2196	bfd.c	ELSE_1	FUNCTION_37	IF_1
0x40015b0	            0x7413	                            je 0x40015c5	      2196	bfd.c	ELSE_1	FUNCTION_37	IF_1
0x40015b2	          0x4889c1	                            mov rcx, rax	      2197	bfd.c	ELSE_1	FUNCTION_37	IF_1	CALL_2
0x40015b5	      0xba20000000	                           mov edx, 0x20	      2197	bfd.c	ELSE_1	FUNCTION_37	IF_1	CALL_2
0x40015ba	          0x4889de	                            mov rsi, rbx	      2197	bfd.c	ELSE_1	FUNCTION_37	IF_1	CALL_2
0x40015bd	          0x4889c7	                            mov rdi, rax	      2197	bfd.c	ELSE_1	FUNCTION_37	IF_1	CALL_2
0x40015c0	      0xe87beaffff	           call sym.bfd_elf_set_pagesize	      2197	bfd.c	ELSE_1	FUNCTION_37	IF_1	CALL_2
0x40015c5	              0x5b	                                 pop rbx	      2200	bfd.c	ELSE_1	FUNCTION_37
0x40015c6	              0xc3	                                     ret	      2200	bfd.c	ELSE_1	FUNCTION_37
bfd_set_error_handler	WHILE,0:FOR,0:functions,0:DO,0:IF,0:ELSE,0:CALL,0:SWITCH,0	3
0x40002c3	    0x488b05000000	            mov rax, qword [0x040002ca] 	      1198	bfd.c	FUNCTION_10
0x40002ca	    0x48893d000000	            mov qword [0x040002d1], rdi 	      1199	bfd.c	FUNCTION_10
0x40002d1	              0xc3	                                     ret	      1201	bfd.c	FUNCTION_10
bfd_get_reloc_upper_bound	WHILE,0:FOR,0:functions,0:DO,0:IF,1:ELSE,0:CALL,2:SWITCH,0	12
0x40002e9	         0xfb64744	           movzx eax, byte [rdi + 0x44] 	      1316	bfd.c	FUNCTION_14	IF_1
0x40002ed	          0x83e007	                              and eax, 7	      1316	bfd.c	FUNCTION_14	IF_1
0x40002f0	            0x3c01	                               cmp al, 1	      1316	bfd.c	FUNCTION_14	IF_1
0x40002f2	            0x7412	                            je 0x4000306	      1316	bfd.c	FUNCTION_14	IF_1
0x40002f4	    0xc70500000000	               mov dword [0x040002fe], 5	       506	bfd.c	FUNCTION_2
0x40002fe	    0x48c7c0ffffff	             mov rax, 0xffffffffffffffff	      1319	bfd.c	FUNCTION_14	IF_1
0x4000305	              0xc3	                                     ret	      1323	bfd.c	FUNCTION_14
0x4000306	        0x4883ec08	                              sub rsp, 8	      1315	bfd.c	FUNCTION_14
0x400030a	        0x488b4708	                mov rax, qword [rdi + 8]	      1322	bfd.c	FUNCTION_14	CALL_2
0x400030e	    0xff9068020000	                call qword [rax + 0x268]	      1322	bfd.c	FUNCTION_14	CALL_2
0x4000314	        0x4883c408	                              add rsp, 8	      1323	bfd.c	FUNCTION_14
0x4000318	              0xc3	                                     ret	      1323	bfd.c	FUNCTION_14
bfd_alt_mach_code	WHILE,0:FOR,0:functions,0:DO,0:IF,3:ELSE,0:CALL,5:SWITCH,1	30
0x4001492	        0x488b5708	                mov rdx, qword [rdi + 8]	      2037	bfd.c	FUNCTION_32	IF_1	CALL_1
0x4001496	      0xb800000000	                              mov eax, 0	      2068	bfd.c	FUNCTION_32
0x400149b	        0x837a0805	                  cmp dword [rdx + 8], 5	      2037	bfd.c	FUNCTION_32	IF_1	CALL_1
0x400149f	            0x755e	                           jne 0x40014ff	      2037	bfd.c	FUNCTION_32	IF_1	CALL_1
0x40014a1	          0x83fe01	                              cmp esi, 1	      2041	bfd.c	FUNCTION_32	IF_1	SWITCH_1
0x40014a4	            0x741a	                            je 0x40014c0	      2041	bfd.c	FUNCTION_32	IF_1	SWITCH_1
0x40014a6	          0x83fe02	                              cmp esi, 2	      2041	bfd.c	FUNCTION_32	IF_1	SWITCH_1
0x40014a9	            0x742d	                            je 0x40014d8	      2041	bfd.c	FUNCTION_32	IF_1	SWITCH_1
0x40014ab	      0xb800000000	                              mov eax, 0	      2060	bfd.c	FUNCTION_32	IF_1	SWITCH_1
0x40014b0	            0x85f6	                           test esi, esi	      2041	bfd.c	FUNCTION_32	IF_1	SWITCH_1
0x40014b2	            0x754b	                           jne 0x40014ff	      2041	bfd.c	FUNCTION_32	IF_1	SWITCH_1
0x40014b4	    0x488b82680300	           mov rax, qword [rdx + 0x368] 	      2044	bfd.c	FUNCTION_32	IF_1	SWITCH_1	CALL_2
0x40014bb	          0x8b5008	                mov edx, dword [rax + 8]	      2044	bfd.c	FUNCTION_32	IF_1	SWITCH_1	CALL_2
0x40014be	            0xeb2e	                           jmp 0x40014ee	      2045	bfd.c	FUNCTION_32	IF_1	SWITCH_1
0x40014c0	    0x488b82680300	           mov rax, qword [rdx + 0x368] 	      2048	bfd.c	FUNCTION_32	IF_1	SWITCH_1	CALL_3
0x40014c7	    0x8b90f8020000	           mov edx, dword [rax + 0x2f8] 	      2048	bfd.c	FUNCTION_32	IF_1	SWITCH_1	CALL_3
0x40014cd	      0xb800000000	                              mov eax, 0	      2050	bfd.c	FUNCTION_32	IF_1	SWITCH_1	IF_2
0x40014d2	            0x85d2	                           test edx, edx	      2049	bfd.c	FUNCTION_32	IF_1	SWITCH_1	IF_2
0x40014d4	            0x7518	                           jne 0x40014ee	      2049	bfd.c	FUNCTION_32	IF_1	SWITCH_1	IF_2
0x40014d6	            0xf3c3	                                     ret	      2049	bfd.c	FUNCTION_32	IF_1	SWITCH_1	IF_2
0x40014d8	    0x488b82680300	           mov rax, qword [rdx + 0x368] 	      2054	bfd.c	FUNCTION_32	IF_1	SWITCH_1	CALL_4
0x40014df	    0x8b90fc020000	           mov edx, dword [rax + 0x2fc] 	      2054	bfd.c	FUNCTION_32	IF_1	SWITCH_1	CALL_4
0x40014e5	      0xb800000000	                              mov eax, 0	      2056	bfd.c	FUNCTION_32	IF_1	SWITCH_1	IF_3
0x40014ea	            0x85d2	                           test edx, edx	      2055	bfd.c	FUNCTION_32	IF_1	SWITCH_1	IF_3
0x40014ec	            0x7411	                            je 0x40014ff	      2055	bfd.c	FUNCTION_32	IF_1	SWITCH_1	IF_3
0x40014ee	    0x488b87f80000	            mov rax, qword [rdi + 0xf8] 	      2063	bfd.c	FUNCTION_32	IF_1	CALL_5
0x40014f5	        0x6689503a	               mov word [rax + 0x3a], dx	      2063	bfd.c	FUNCTION_32	IF_1	CALL_5
0x40014f9	      0xb801000000	                              mov eax, 1	      2065	bfd.c	FUNCTION_32	IF_1
0x40014fe	              0xc3	                                     ret	      2065	bfd.c	FUNCTION_32	IF_1
0x40014ff	            0xf3c3	                                     ret	      2069	bfd.c	FUNCTION_32
bfd_convert_section_contents	WHILE,0:FOR,0:functions,0:DO,0:IF,9:ELSE,3:CALL,23:SWITCH,0	138
0x4001a98	      0xb801000000	                              mov eax, 1	      2527	bfd.c	FUNCTION_43	IF_1
0x4001a9d	        0xf6474610	           test byte [rdi + 0x46], 0x10 	      2526	bfd.c	FUNCTION_43	IF_1
0x4001aa1	     0xf850b020000	                           jne 0x4001cb2	      2526	bfd.c	FUNCTION_43	IF_1
0x4001aa7	            0x4157	                                push r15	      2519	bfd.c	FUNCTION_43
0x4001aa9	            0x4156	                                push r14	      2519	bfd.c	FUNCTION_43
0x4001aab	            0x4155	                                push r13	      2519	bfd.c	FUNCTION_43
0x4001aad	            0x4154	                                push r12	      2519	bfd.c	FUNCTION_43
0x4001aaf	              0x55	                                push rbp	      2519	bfd.c	FUNCTION_43
0x4001ab0	              0x53	                                push rbx	      2519	bfd.c	FUNCTION_43
0x4001ab1	        0x4883ec38	                           sub rsp, 0x38	      2519	bfd.c	FUNCTION_43
0x4001ab5	        0x4c8b6708	                mov r12, qword [rdi + 8]	      2530	bfd.c	FUNCTION_43	IF_2	CALL_1
0x4001ab9	    0x41837c240805	                  cmp dword [r12 + 8], 5	      2530	bfd.c	FUNCTION_43	IF_2	CALL_1
0x4001abf	     0xf85df010000	                           jne 0x4001ca4	      2530	bfd.c	FUNCTION_43	IF_2	CALL_1
0x4001ac5	        0x4c8b4a08	                 mov r9, qword [rdx + 8]	      2531	bfd.c	FUNCTION_43	IF_2	CALL_2
0x4001ac9	      0x4183790805	                   cmp dword [r9 + 8], 5	      2531	bfd.c	FUNCTION_43	IF_2	CALL_2
0x4001ace	     0xf85d0010000	                           jne 0x4001ca4	      2531	bfd.c	FUNCTION_43	IF_2	CALL_2
0x4001ad4	    0x498b84246803	           mov rax, qword [r12 + 0x368] 	      2535	bfd.c	FUNCTION_43	IF_3	CALL_3
0x4001adc	    0x4c8b90000300	           mov r10, qword [rax + 0x300] 	      2535	bfd.c	FUNCTION_43	IF_3	CALL_3
0x4001ae3	    0x498b81680300	            mov rax, qword [r9 + 0x368] 	      2536	bfd.c	FUNCTION_43	IF_3	CALL_4
0x4001aea	    0x488b80000300	           mov rax, qword [rax + 0x300] 	      2536	bfd.c	FUNCTION_43	IF_3	CALL_4
0x4001af1	         0xfb6400c	            movzx eax, byte [rax + 0xc] 	      2535	bfd.c	FUNCTION_43	IF_3	CALL_3
0x4001af5	        0x4138420c	                cmp byte [r10 + 0xc], al	      2535	bfd.c	FUNCTION_43	IF_3	CALL_3
0x4001af9	     0xf8449010000	                            je 0x4001c48	      2535	bfd.c	FUNCTION_43	IF_3	CALL_3
0x4001aff	      0x4c89442410	              mov qword [rsp + 0x10], r8	      2535	bfd.c	FUNCTION_43	IF_3	CALL_3
0x4001b04	          0x4989cd	                            mov r13, rcx	      2535	bfd.c	FUNCTION_43	IF_3	CALL_3
0x4001b07	          0x4889d5	                            mov rbp, rdx	      2535	bfd.c	FUNCTION_43	IF_3	CALL_3
0x4001b0a	      0x4889742408	                mov qword [rsp + 8], rsi	      2535	bfd.c	FUNCTION_43	IF_3	CALL_3
0x4001b0f	          0x4889fb	                            mov rbx, rdi	      2535	bfd.c	FUNCTION_43	IF_3	CALL_3
0x4001b12	      0xe800000000	                          call 0x4001b17	      2540	bfd.c	FUNCTION_43	CALL_5
0x4001b17	          0x4c63f0	                         movsxd r14, eax	      2540	bfd.c	FUNCTION_43	CALL_5
0x4001b1a	      0xb801000000	                              mov eax, 1	      2542	bfd.c	FUNCTION_43	IF_4
0x4001b1f	          0x4d85f6	                           test r14, r14	      2541	bfd.c	FUNCTION_43	IF_4
0x4001b22	     0xf847c010000	                            je 0x4001ca4	      2541	bfd.c	FUNCTION_43	IF_4
0x4001b28	        0x4d8b7d00	                    mov r15, qword [r13]	      2544	bfd.c	FUNCTION_43
0x4001b2c	        0x4983fe0c	                            cmp r14, 0xc	      2549	bfd.c	FUNCTION_43	IF_5
0x4001b30	            0x7553	                           jne 0x4001b85	      2549	bfd.c	FUNCTION_43	IF_5
0x4001b32	          0x4c89ff	                            mov rdi, r15	      2552	bfd.c	FUNCTION_43	IF_5	CALL_6
0x4001b35	      0x41ff542438	                 call qword [r12 + 0x38]	      2552	bfd.c	FUNCTION_43	IF_5	CALL_6
0x4001b3a	        0x498d7f04	                      lea rdi, [r15 + 4]	      2553	bfd.c	FUNCTION_43	IF_5	CALL_7
0x4001b3e	        0x488b4308	                mov rax, qword [rbx + 8]	      2553	bfd.c	FUNCTION_43	IF_5	CALL_7
0x4001b42	          0xff5038	                 call qword [rax + 0x38]	      2553	bfd.c	FUNCTION_43	IF_5	CALL_7
0x4001b45	      0x4889442418	             mov qword [rsp + 0x18], rax	      2553	bfd.c	FUNCTION_43	IF_5	CALL_7
0x4001b4a	        0x498d7f08	                      lea rdi, [r15 + 8]	      2554	bfd.c	FUNCTION_43	IF_5	CALL_8
0x4001b4e	        0x488b4308	                mov rax, qword [rbx + 8]	      2554	bfd.c	FUNCTION_43	IF_5	CALL_8
0x4001b52	          0xff5038	                 call qword [rax + 0x38]	      2554	bfd.c	FUNCTION_43	IF_5	CALL_8
0x4001b55	      0x4889442420	             mov qword [rsp + 0x20], rax	      2554	bfd.c	FUNCTION_43	IF_5	CALL_8
0x4001b5a	      0x488b442408	                mov rax, qword [rsp + 8]	      2571	bfd.c	FUNCTION_43	CALL_12
0x4001b5f	        0x4c8b6038	            mov r12, qword [rax + 0x38] 	      2571	bfd.c	FUNCTION_43	CALL_12
0x4001b63	      0x498d5c24f4	                    lea rbx, [r12 - 0xc]	      2571	bfd.c	FUNCTION_43	CALL_12
0x4001b68	        0x4983c40c	                            add r12, 0xc	      2571	bfd.c	FUNCTION_43	CALL_12
0x4001b6c	          0x4c89e7	                            mov rdi, r12	      2574	bfd.c	FUNCTION_43	IF_6	CALL_13
0x4001b6f	      0xe800000000	                          call 0x4001b74	      2574	bfd.c	FUNCTION_43	IF_6	CALL_13
0x4001b74	          0x4989c7	                            mov r15, rax	      2574	bfd.c	FUNCTION_43	IF_6	CALL_13
0x4001b77	          0x4885c0	                           test rax, rax	      2575	bfd.c	FUNCTION_43	IF_6	IF_7
0x4001b7a	     0xf85d6000000	                           jne 0x4001c56	      2575	bfd.c	FUNCTION_43	IF_6	IF_7
0x4001b80	      0xe9ca000000	                           jmp 0x4001c4f	      2575	bfd.c	FUNCTION_43	IF_6	IF_7
0x4001b85	          0x4c89ff	                            mov rdi, r15	      2563	bfd.c	FUNCTION_43	ELSE_1	CALL_9
0x4001b88	      0x41ff542438	                 call qword [r12 + 0x38]	      2563	bfd.c	FUNCTION_43	ELSE_1	CALL_9
0x4001b8d	        0x498d4708	                      lea rax, [r15 + 8]	      2564	bfd.c	FUNCTION_43	ELSE_1	CALL_10
0x4001b91	          0x4889c1	                            mov rcx, rax	      2564	bfd.c	FUNCTION_43	ELSE_1	CALL_10
0x4001b94	        0x488b4308	                mov rax, qword [rbx + 8]	      2564	bfd.c	FUNCTION_43	ELSE_1	CALL_10
0x4001b98	      0x48894c2428	             mov qword [rsp + 0x28], rcx	      2564	bfd.c	FUNCTION_43	ELSE_1	CALL_10
0x4001b9d	          0x4889cf	                            mov rdi, rcx	      2564	bfd.c	FUNCTION_43	ELSE_1	CALL_10
0x4001ba0	          0xff5020	                 call qword [rax + 0x20]	      2564	bfd.c	FUNCTION_43	ELSE_1	CALL_10
0x4001ba3	      0x4889442418	             mov qword [rsp + 0x18], rax	      2564	bfd.c	FUNCTION_43	ELSE_1	CALL_10
0x4001ba8	        0x498d7f10	                   lea rdi, [r15 + 0x10]	      2565	bfd.c	FUNCTION_43	ELSE_1	CALL_11
0x4001bac	        0x488b4308	                mov rax, qword [rbx + 8]	      2565	bfd.c	FUNCTION_43	ELSE_1	CALL_11
0x4001bb0	          0xff5020	                 call qword [rax + 0x20]	      2565	bfd.c	FUNCTION_43	ELSE_1	CALL_11
0x4001bb3	      0x4889442420	             mov qword [rsp + 0x20], rax	      2565	bfd.c	FUNCTION_43	ELSE_1	CALL_11
0x4001bb8	      0x488b5c2408	                mov rbx, qword [rsp + 8]	      2571	bfd.c	FUNCTION_43	CALL_12
0x4001bbd	        0x488b5b38	            mov rbx, qword [rbx + 0x38] 	      2571	bfd.c	FUNCTION_43	CALL_12
0x4001bc1	          0x4c29f3	                            sub rbx, r14	      2571	bfd.c	FUNCTION_43	CALL_12
0x4001bc4	        0x4c8d630c	                    lea r12, [rbx + 0xc]	      2571	bfd.c	FUNCTION_43	CALL_12
0x4001bc8	        0x488b4508	                mov rax, qword [rbp + 8]	      2583	bfd.c	FUNCTION_43	IF_8	CALL_14
0x4001bcc	          0x4c89fe	                            mov rsi, r15	      2583	bfd.c	FUNCTION_43	IF_8	CALL_14
0x4001bcf	      0xbf01000000	                              mov edi, 1	      2583	bfd.c	FUNCTION_43	IF_8	CALL_14
0x4001bd4	          0xff5048	                 call qword [rax + 0x48]	      2583	bfd.c	FUNCTION_43	IF_8	CALL_14
0x4001bd7	        0x498d7704	                      lea rsi, [r15 + 4]	      2584	bfd.c	FUNCTION_43	IF_8	CALL_15
0x4001bdb	        0x488b4508	                mov rax, qword [rbp + 8]	      2584	bfd.c	FUNCTION_43	IF_8	CALL_15
0x4001bdf	      0x488b7c2418	            mov rdi, qword [rsp + 0x18] 	      2584	bfd.c	FUNCTION_43	IF_8	CALL_15
0x4001be4	          0xff5048	                 call qword [rax + 0x48]	      2584	bfd.c	FUNCTION_43	IF_8	CALL_15
0x4001be7	        0x488b4508	                mov rax, qword [rbp + 8]	      2585	bfd.c	FUNCTION_43	IF_8	CALL_16
0x4001beb	      0x488b742428	            mov rsi, qword [rsp + 0x28] 	      2585	bfd.c	FUNCTION_43	IF_8	CALL_16
0x4001bf0	      0x488b7c2420	            mov rdi, qword [rsp + 0x20] 	      2585	bfd.c	FUNCTION_43	IF_8	CALL_16
0x4001bf5	          0xff5048	                 call qword [rax + 0x48]	      2585	bfd.c	FUNCTION_43	IF_8	CALL_16
0x4001bf8	      0xb801000000	                              mov eax, 1	      2568	bfd.c	FUNCTION_43	ELSE_1
0x4001bfd	      0xbf0c000000	                            mov edi, 0xc	      2567	bfd.c	FUNCTION_43	ELSE_1
0x4001c02	            0x85c0	                           test eax, eax	      2597	bfd.c	FUNCTION_43	IF_9
0x4001c04	            0x7414	                            je 0x4001c1a	      2597	bfd.c	FUNCTION_43	IF_9
0x4001c06	          0x4c89f6	                            mov rsi, r14	        59	string3.h	FUNCTION_45	CALL_3
0x4001c09	        0x49037500	                    add rsi, qword [r13]	        59	string3.h	FUNCTION_45	CALL_3
0x4001c0d	          0x4c01ff	                            add rdi, r15	        59	string3.h	FUNCTION_45	CALL_3
0x4001c10	          0x4889da	                            mov rdx, rbx	        59	string3.h	FUNCTION_45	CALL_3
0x4001c13	      0xe800000000	                          call 0x4001c18	        59	string3.h	FUNCTION_45	CALL_3
0x4001c18	            0xeb1f	                           jmp 0x4001c39	        59	string3.h	FUNCTION_45	CALL_3
0x4001c1a	          0x4c01ff	                            add rdi, r15	        53	string3.h	FUNCTION_44	CALL_3
0x4001c1d	          0x4c89f6	                            mov rsi, r14	        53	string3.h	FUNCTION_44	CALL_3
0x4001c20	        0x49037500	                    add rsi, qword [r13]	        53	string3.h	FUNCTION_44	CALL_3
0x4001c24	          0x4889da	                            mov rdx, rbx	        53	string3.h	FUNCTION_44	CALL_3
0x4001c27	      0xe800000000	                          call 0x4001c2c	        53	string3.h	FUNCTION_44	CALL_3
0x4001c2c	        0x498b7d00	                    mov rdi, qword [r13]	      2602	bfd.c	FUNCTION_43	ELSE_3	CALL_23
0x4001c30	      0xe800000000	                          call 0x4001c35	      2602	bfd.c	FUNCTION_43	ELSE_3	CALL_23
0x4001c35	        0x4d897d00	                    mov qword [r13], r15	      2603	bfd.c	FUNCTION_43	ELSE_3
0x4001c39	      0x488b442410	            mov rax, qword [rsp + 0x10] 	      2606	bfd.c	FUNCTION_43
0x4001c3e	          0x4c8920	                    mov qword [rax], r12	      2606	bfd.c	FUNCTION_43
0x4001c41	      0xb801000000	                              mov eax, 1	      2607	bfd.c	FUNCTION_43
0x4001c46	            0xeb5c	                           jmp 0x4001ca4	      2607	bfd.c	FUNCTION_43
0x4001c48	      0xb801000000	                              mov eax, 1	      2537	bfd.c	FUNCTION_43	IF_3
0x4001c4d	            0xeb55	                           jmp 0x4001ca4	      2537	bfd.c	FUNCTION_43	IF_3
0x4001c4f	      0xb800000000	                              mov eax, 0	      2576	bfd.c	FUNCTION_43	IF_6	IF_7
0x4001c54	            0xeb4e	                           jmp 0x4001ca4	      2576	bfd.c	FUNCTION_43	IF_6	IF_7
0x4001c56	        0x488b4508	                mov rax, qword [rbp + 8]	      2590	bfd.c	FUNCTION_43	ELSE_2	CALL_17
0x4001c5a	          0x4c89fe	                            mov rsi, r15	      2590	bfd.c	FUNCTION_43	ELSE_2	CALL_17
0x4001c5d	      0xbf01000000	                              mov edi, 1	      2590	bfd.c	FUNCTION_43	ELSE_2	CALL_17
0x4001c62	          0xff5048	                 call qword [rax + 0x48]	      2590	bfd.c	FUNCTION_43	ELSE_2	CALL_17
0x4001c65	        0x498d7704	                      lea rsi, [r15 + 4]	      2591	bfd.c	FUNCTION_43	ELSE_2	CALL_18
0x4001c69	        0x488b4508	                mov rax, qword [rbp + 8]	      2591	bfd.c	FUNCTION_43	ELSE_2	CALL_18
0x4001c6d	      0xbf00000000	                              mov edi, 0	      2591	bfd.c	FUNCTION_43	ELSE_2	CALL_18
0x4001c72	          0xff5048	                 call qword [rax + 0x48]	      2591	bfd.c	FUNCTION_43	ELSE_2	CALL_18
0x4001c75	        0x498d7708	                      lea rsi, [r15 + 8]	      2592	bfd.c	FUNCTION_43	ELSE_2	CALL_19
0x4001c79	        0x488b4508	                mov rax, qword [rbp + 8]	      2592	bfd.c	FUNCTION_43	ELSE_2	CALL_19
0x4001c7d	      0x488b7c2418	            mov rdi, qword [rsp + 0x18] 	      2592	bfd.c	FUNCTION_43	ELSE_2	CALL_19
0x4001c82	          0xff5030	                 call qword [rax + 0x30]	      2592	bfd.c	FUNCTION_43	ELSE_2	CALL_19
0x4001c85	        0x498d7710	                   lea rsi, [r15 + 0x10]	      2593	bfd.c	FUNCTION_43	ELSE_2	CALL_20
0x4001c89	        0x488b4508	                mov rax, qword [rbp + 8]	      2593	bfd.c	FUNCTION_43	ELSE_2	CALL_20
0x4001c8d	      0x488b7c2420	            mov rdi, qword [rsp + 0x20] 	      2593	bfd.c	FUNCTION_43	ELSE_2	CALL_20
0x4001c92	          0xff5030	                 call qword [rax + 0x30]	      2593	bfd.c	FUNCTION_43	ELSE_2	CALL_20
0x4001c95	      0xb800000000	                              mov eax, 0	      2558	bfd.c	FUNCTION_43	IF_5
0x4001c9a	      0xbf18000000	                           mov edi, 0x18	      2556	bfd.c	FUNCTION_43	IF_5
0x4001c9f	      0xe95effffff	                           jmp 0x4001c02	      2556	bfd.c	FUNCTION_43	IF_5
0x4001ca4	        0x4883c438	                           add rsp, 0x38	      2608	bfd.c	FUNCTION_43
0x4001ca8	              0x5b	                                 pop rbx	      2608	bfd.c	FUNCTION_43
0x4001ca9	              0x5d	                                 pop rbp	      2608	bfd.c	FUNCTION_43
0x4001caa	            0x415c	                                 pop r12	      2608	bfd.c	FUNCTION_43
0x4001cac	            0x415d	                                 pop r13	      2608	bfd.c	FUNCTION_43
0x4001cae	            0x415e	                                 pop r14	      2608	bfd.c	FUNCTION_43
0x4001cb0	            0x415f	                                 pop r15	      2608	bfd.c	FUNCTION_43
0x4001cb2	            0xf3c3	                                     ret	      2608	bfd.c	FUNCTION_43
bfd_emul_get_commonpagesize	WHILE,0:FOR,0:functions,0:DO,0:IF,2:ELSE,1:CALL,2:SWITCH,0	20
0x4001561	              0x53	                                push rbx	      2159	bfd.c	FUNCTION_36
0x4001562	            0x89f3	                            mov ebx, esi	      2159	bfd.c	FUNCTION_36
0x4001564	      0xbe00000000	                              mov esi, 0	      2162	bfd.c	FUNCTION_36	CALL_1
0x4001569	      0xe800000000	                          call 0x400156e	      2162	bfd.c	FUNCTION_36	CALL_1
0x400156e	          0x4885c0	                           test rax, rax	      2163	bfd.c	FUNCTION_36	IF_1
0x4001571	            0x7425	                            je 0x4001598	      2163	bfd.c	FUNCTION_36	IF_1
0x4001573	          0x4889c2	                            mov rdx, rax	      2163	bfd.c	FUNCTION_36	IF_1
0x4001576	      0xb800000000	                              mov eax, 0	      2174	bfd.c	FUNCTION_36	ELSE_1
0x400157b	        0x837a0805	                  cmp dword [rdx + 8], 5	      2164	bfd.c	FUNCTION_36	IF_1
0x400157f	            0x751c	                           jne 0x400159d	      2164	bfd.c	FUNCTION_36	IF_1
0x4001581	    0x488b82680300	           mov rax, qword [rdx + 0x368] 	      2168	bfd.c	FUNCTION_36	IF_1	CALL_2
0x4001588	            0x85db	                           test ebx, ebx	      2169	bfd.c	FUNCTION_36	IF_1	IF_2
0x400158a	            0x7406	                            je 0x4001592	      2169	bfd.c	FUNCTION_36	IF_1	IF_2
0x400158c	        0x488b4028	            mov rax, qword [rax + 0x28] 	      2170	bfd.c	FUNCTION_36	IF_1	IF_2
0x4001590	            0xeb0b	                           jmp 0x400159d	      2170	bfd.c	FUNCTION_36	IF_1	IF_2
0x4001592	        0x488b4020	            mov rax, qword [rax + 0x20] 	      2172	bfd.c	FUNCTION_36	IF_1	ELSE_1
0x4001596	            0xeb05	                           jmp 0x400159d	      2172	bfd.c	FUNCTION_36	IF_1	ELSE_1
0x4001598	      0xb800000000	                              mov eax, 0	      2174	bfd.c	FUNCTION_36	ELSE_1
0x400159d	              0x5b	                                 pop rbx	      2175	bfd.c	FUNCTION_36	ELSE_1
0x400159e	              0xc3	                                     ret	      2175	bfd.c	FUNCTION_36	ELSE_1
bfd_get_compression_header_size	WHILE,0:FOR,0:functions,0:DO,0:IF,5:ELSE,2:CALL,3:SWITCH,0	20
0x40019d8	        0x488b5708	                mov rdx, qword [rdi + 8]	      2433	bfd.c	FUNCTION_41	IF_1	CALL_1
0x40019dc	      0xb800000000	                              mov eax, 0	      2449	bfd.c	FUNCTION_41
0x40019e1	        0x837a0805	                  cmp dword [rdx + 8], 5	      2433	bfd.c	FUNCTION_41	IF_1	CALL_1
0x40019e5	            0x753e	                           jne 0x4001a25	      2433	bfd.c	FUNCTION_41	IF_1	CALL_1
0x40019e7	          0x4885f6	                           test rsi, rsi	      2435	bfd.c	FUNCTION_41	IF_1	IF_2
0x40019ea	            0x7508	                           jne 0x40019f4	      2435	bfd.c	FUNCTION_41	IF_1	IF_2
0x40019ec	        0xf6474640	           test byte [rdi + 0x46], 0x40 	      2437	bfd.c	FUNCTION_41	IF_1	IF_2	IF_3
0x40019f0	            0x7514	                           jne 0x4001a06	      2437	bfd.c	FUNCTION_41	IF_1	IF_2	IF_3
0x40019f2	            0xf3c3	                                     ret	      2437	bfd.c	FUNCTION_41	IF_1	IF_2	IF_3
0x40019f4	    0x488b8ee00000	            mov rcx, qword [rsi + 0xe0] 	      2440	bfd.c	FUNCTION_41	IF_1	ELSE_1	IF_4	CALL_2
0x40019fb	      0xb800000000	                              mov eax, 0	      2441	bfd.c	FUNCTION_41	IF_1	ELSE_1	IF_4
0x4001a00	        0xf6410908	                  test byte [rcx + 9], 8	      2440	bfd.c	FUNCTION_41	IF_1	ELSE_1	IF_4	CALL_2
0x4001a04	            0x741f	                            je 0x4001a25	      2440	bfd.c	FUNCTION_41	IF_1	ELSE_1	IF_4	CALL_2
0x4001a06	    0x488b82680300	           mov rax, qword [rdx + 0x368] 	      2443	bfd.c	FUNCTION_41	IF_1	IF_5	CALL_3
0x4001a0d	    0x488b80000300	           mov rax, qword [rax + 0x300] 	      2443	bfd.c	FUNCTION_41	IF_1	IF_5	CALL_3
0x4001a14	        0x80780c01	                 cmp byte [rax + 0xc], 1	      2446	bfd.c	FUNCTION_41	IF_1	ELSE_2
0x4001a18	      0xba18000000	                           mov edx, 0x18	      2446	bfd.c	FUNCTION_41	IF_1	ELSE_2
0x4001a1d	      0xb80c000000	                            mov eax, 0xc	      2446	bfd.c	FUNCTION_41	IF_1	ELSE_2
0x4001a22	           0xf45c2	                         cmovne eax, edx	      2446	bfd.c	FUNCTION_41	IF_1	ELSE_2
0x4001a25	            0xf3c3	                                     ret	      2450	bfd.c	FUNCTION_41
bfd_convert_section_size	WHILE,0:FOR,0:functions,0:DO,0:IF,5:ELSE,1:CALL,5:SWITCH,0	32
0x4001a27	          0x4889c8	                            mov rax, rcx	      2473	bfd.c	FUNCTION_42	IF_1
0x4001a2a	        0xf6474610	           test byte [rdi + 0x46], 0x10 	      2472	bfd.c	FUNCTION_42	IF_1
0x4001a2e	            0x7566	                           jne 0x4001a96	      2472	bfd.c	FUNCTION_42	IF_1
0x4001a30	        0x4c8b4708	                 mov r8, qword [rdi + 8]	      2476	bfd.c	FUNCTION_42	IF_2	CALL_1
0x4001a34	      0x4183780805	                   cmp dword [r8 + 8], 5	      2476	bfd.c	FUNCTION_42	IF_2	CALL_1
0x4001a39	            0x755b	                           jne 0x4001a96	      2476	bfd.c	FUNCTION_42	IF_2	CALL_1
0x4001a3b	        0x488b5208	                mov rdx, qword [rdx + 8]	      2477	bfd.c	FUNCTION_42	IF_2	CALL_2
0x4001a3f	        0x837a0805	                  cmp dword [rdx + 8], 5	      2477	bfd.c	FUNCTION_42	IF_2	CALL_2
0x4001a43	            0x7551	                           jne 0x4001a96	      2477	bfd.c	FUNCTION_42	IF_2	CALL_2
0x4001a45	    0x498b80680300	            mov rax, qword [r8 + 0x368] 	      2481	bfd.c	FUNCTION_42	IF_3	CALL_3
0x4001a4c	    0x4c8b80000300	            mov r8, qword [rax + 0x300] 	      2481	bfd.c	FUNCTION_42	IF_3	CALL_3
0x4001a53	    0x488b82680300	           mov rax, qword [rdx + 0x368] 	      2482	bfd.c	FUNCTION_42	IF_3	CALL_4
0x4001a5a	    0x488b80000300	           mov rax, qword [rax + 0x300] 	      2482	bfd.c	FUNCTION_42	IF_3	CALL_4
0x4001a61	         0xfb6400c	            movzx eax, byte [rax + 0xc] 	      2481	bfd.c	FUNCTION_42	IF_3	CALL_3
0x4001a65	        0x4138400c	                 cmp byte [r8 + 0xc], al	      2481	bfd.c	FUNCTION_42	IF_3	CALL_3
0x4001a69	            0x7426	                            je 0x4001a91	      2481	bfd.c	FUNCTION_42	IF_3	CALL_3
0x4001a6b	              0x53	                                push rbx	      2468	bfd.c	FUNCTION_42
0x4001a6c	          0x4889cb	                            mov rbx, rcx	      2468	bfd.c	FUNCTION_42
0x4001a6f	      0xe800000000	                          call 0x4001a74	      2486	bfd.c	FUNCTION_42	CALL_5
0x4001a74	          0x4863d0	                         movsxd rdx, eax	      2486	bfd.c	FUNCTION_42	CALL_5
0x4001a77	          0x4889d8	                            mov rax, rbx	      2488	bfd.c	FUNCTION_42	IF_4
0x4001a7a	          0x4885d2	                           test rdx, rdx	      2487	bfd.c	FUNCTION_42	IF_4
0x4001a7d	            0x7416	                            je 0x4001a95	      2487	bfd.c	FUNCTION_42	IF_4
0x4001a7f	        0x488d430c	                    lea rax, [rbx + 0xc]	      2492	bfd.c	FUNCTION_42	IF_5
0x4001a83	        0x488d4bf4	                    lea rcx, [rbx - 0xc]	      2492	bfd.c	FUNCTION_42	IF_5
0x4001a87	        0x4883fa0c	                            cmp rdx, 0xc	      2492	bfd.c	FUNCTION_42	IF_5
0x4001a8b	        0x480f45c1	                         cmovne rax, rcx	      2492	bfd.c	FUNCTION_42	IF_5
0x4001a8f	            0xeb04	                           jmp 0x4001a95	      2492	bfd.c	FUNCTION_42	IF_5
0x4001a91	          0x4889c8	                            mov rax, rcx	      2483	bfd.c	FUNCTION_42	IF_3
0x4001a94	              0xc3	                                     ret	      2483	bfd.c	FUNCTION_42	IF_3
0x4001a95	              0x5b	                                 pop rbx	      2497	bfd.c	FUNCTION_42
0x4001a96	            0xf3c3	                                     ret	      2497	bfd.c	FUNCTION_42
bfd_check_compression_header	WHILE,0:FOR,0:functions,0:DO,0:IF,3:ELSE,1:CALL,9:SWITCH,0	65
0x40018fc	        0x4c8b4708	                 mov r8, qword [rdi + 8]	      2386	bfd.c	FUNCTION_40	IF_1	CALL_1
0x4001900	      0xb800000000	                              mov eax, 0	      2413	bfd.c	FUNCTION_40
0x4001905	      0x4183780805	                   cmp dword [r8 + 8], 5	      2386	bfd.c	FUNCTION_40	IF_1	CALL_1
0x400190a	     0xf85c6000000	                           jne 0x40019d6	      2386	bfd.c	FUNCTION_40	IF_1	CALL_1
0x4001910	    0x4c8b8ae00000	              mov r9, qword [rdx + 0xe0]	      2387	bfd.c	FUNCTION_40	IF_1	CALL_2
0x4001917	      0x41f6410908	                   test byte [r9 + 9], 8	      2387	bfd.c	FUNCTION_40	IF_1	CALL_2
0x400191c	     0xf84b4000000	                            je 0x40019d6	      2387	bfd.c	FUNCTION_40	IF_1	CALL_2
0x4001922	            0x4157	                                push r15	      2385	bfd.c	FUNCTION_40
0x4001924	            0x4156	                                push r14	      2385	bfd.c	FUNCTION_40
0x4001926	            0x4155	                                push r13	      2385	bfd.c	FUNCTION_40
0x4001928	            0x4154	                                push r12	      2385	bfd.c	FUNCTION_40
0x400192a	              0x55	                                push rbp	      2385	bfd.c	FUNCTION_40
0x400192b	              0x53	                                push rbx	      2385	bfd.c	FUNCTION_40
0x400192c	        0x4883ec08	                              sub rsp, 8	      2385	bfd.c	FUNCTION_40
0x4001930	          0x4989cc	                            mov r12, rcx	      2385	bfd.c	FUNCTION_40
0x4001933	          0x4889d5	                            mov rbp, rdx	      2385	bfd.c	FUNCTION_40
0x4001936	          0x4989f7	                            mov r15, rsi	      2385	bfd.c	FUNCTION_40
0x4001939	          0x4889fb	                            mov rbx, rdi	      2385	bfd.c	FUNCTION_40
0x400193c	    0x498b80680300	            mov rax, qword [r8 + 0x368] 	      2391	bfd.c	FUNCTION_40	IF_1	IF_2
0x4001943	    0x488b80000300	           mov rax, qword [rax + 0x300] 	      2391	bfd.c	FUNCTION_40	IF_1	IF_2
0x400194a	        0x80780c01	                 cmp byte [rax + 0xc], 1	      2391	bfd.c	FUNCTION_40	IF_1	IF_2
0x400194e	            0x7528	                           jne 0x4001978	      2391	bfd.c	FUNCTION_40	IF_1	IF_2
0x4001950	          0x4889f7	                            mov rdi, rsi	      2394	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_4
0x4001953	        0x41ff5038	                  call qword [r8 + 0x38]	      2394	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_4
0x4001957	          0x4189c5	                           mov r13d, eax	      2394	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_4
0x400195a	        0x498d7f04	                      lea rdi, [r15 + 4]	      2395	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_5
0x400195e	        0x488b4308	                mov rax, qword [rbx + 8]	      2395	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_5
0x4001962	          0xff5038	                 call qword [rax + 0x38]	      2395	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_5
0x4001965	          0x4989c6	                            mov r14, rax	      2395	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_5
0x4001968	        0x498d7f08	                      lea rdi, [r15 + 8]	      2396	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_6
0x400196c	        0x488b4308	                mov rax, qword [rbx + 8]	      2396	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_6
0x4001970	          0xff5038	                 call qword [rax + 0x38]	      2396	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_6
0x4001973	          0x4889c2	                            mov rdx, rax	      2396	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_6
0x4001976	            0xeb26	                           jmp 0x400199e	      2396	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_6
0x4001978	          0x4889f7	                            mov rdi, rsi	      2401	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_7
0x400197b	        0x41ff5038	                  call qword [r8 + 0x38]	      2401	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_7
0x400197f	          0x4189c5	                           mov r13d, eax	      2401	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_7
0x4001982	        0x498d7f08	                      lea rdi, [r15 + 8]	      2402	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_8
0x4001986	        0x488b4308	                mov rax, qword [rbx + 8]	      2402	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_8
0x400198a	          0xff5020	                 call qword [rax + 0x20]	      2402	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_8
0x400198d	          0x4989c6	                            mov r14, rax	      2402	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_8
0x4001990	        0x498d7f10	                   lea rdi, [r15 + 0x10]	      2403	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_9
0x4001994	        0x488b4308	                mov rax, qword [rbx + 8]	      2403	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_9
0x4001998	          0xff5020	                 call qword [rax + 0x20]	      2403	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_9
0x400199b	          0x4889c2	                            mov rdx, rax	      2403	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_9
0x400199e	      0xb800000000	                              mov eax, 0	      2413	bfd.c	FUNCTION_40
0x40019a3	        0x4183fd01	                             cmp r13d, 1	      2405	bfd.c	FUNCTION_40	IF_1	IF_3
0x40019a7	            0x751f	                           jne 0x40019c8	      2405	bfd.c	FUNCTION_40	IF_1	IF_3
0x40019a9	          0x8b4d70	            mov ecx, dword [rbp + 0x70] 	      2406	bfd.c	FUNCTION_40	IF_1	IF_3
0x40019ac	      0xb801000000	                              mov eax, 1	      2406	bfd.c	FUNCTION_40	IF_1	IF_3
0x40019b1	            0x89c3	                            mov ebx, eax	      2406	bfd.c	FUNCTION_40	IF_1	IF_3
0x40019b3	            0xd3e3	                             shl ebx, cl	      2406	bfd.c	FUNCTION_40	IF_1	IF_3
0x40019b5	      0xb800000000	                              mov eax, 0	      2413	bfd.c	FUNCTION_40
0x40019ba	          0x4839da	                            cmp rdx, rbx	      2406	bfd.c	FUNCTION_40	IF_1	IF_3
0x40019bd	            0x7509	                           jne 0x40019c8	      2406	bfd.c	FUNCTION_40	IF_1	IF_3
0x40019bf	        0x4d893424	                    mov qword [r12], r14	      2408	bfd.c	FUNCTION_40	IF_1	IF_3
0x40019c3	      0xb801000000	                              mov eax, 1	      2409	bfd.c	FUNCTION_40	IF_1	IF_3
0x40019c8	        0x4883c408	                              add rsp, 8	      2414	bfd.c	FUNCTION_40
0x40019cc	              0x5b	                                 pop rbx	      2414	bfd.c	FUNCTION_40
0x40019cd	              0x5d	                                 pop rbp	      2414	bfd.c	FUNCTION_40
0x40019ce	            0x415c	                                 pop r12	      2414	bfd.c	FUNCTION_40
0x40019d0	            0x415d	                                 pop r13	      2414	bfd.c	FUNCTION_40
0x40019d2	            0x415e	                                 pop r14	      2414	bfd.c	FUNCTION_40
0x40019d4	            0x415f	                                 pop r15	      2414	bfd.c	FUNCTION_40
0x40019d6	            0xf3c3	                                     ret	      2414	bfd.c	FUNCTION_40
_bfd_default_assert_handler	WHILE,0:FOR,0:functions,0:DO,0:IF,0:ELSE,0:CALL,1:SWITCH,0	5
0x40002b0	        0x4883ec08	                              sub rsp, 8	      1256	bfd.c	FUNCTION_12
0x40002b4	      0xb800000000	                              mov eax, 0	      1257	bfd.c	FUNCTION_12	CALL_1
0x40002b9	      0xe800000000	                          call 0x40002be	      1257	bfd.c	FUNCTION_12	CALL_1
0x40002be	        0x4883c408	                              add rsp, 8	      1258	bfd.c	FUNCTION_12
0x40002c2	              0xc3	                                     ret	      1258	bfd.c	FUNCTION_12
bfd_get_relocated_section_contents	WHILE,0:FOR,0:functions,0:DO,0:IF,2:ELSE,1:CALL,0:SWITCH,0	12
0x40012ad	        0x4883ec08	                              sub rsp, 8	      1909	bfd.c	FUNCTION_27
0x40012b1	          0x4889f8	                            mov rax, rdi	      1921	bfd.c	FUNCTION_27	ELSE_1
0x40012b4	        0x837a0801	                  cmp dword [rdx + 8], 1	      1914	bfd.c	FUNCTION_27	IF_1
0x40012b8	            0x7512	                           jne 0x40012cc	      1914	bfd.c	FUNCTION_27	IF_1
0x40012ba	        0x488b4220	            mov rax, qword [rdx + 0x20] 	      1916	bfd.c	FUNCTION_27	IF_1
0x40012be	    0x488b80f00000	            mov rax, qword [rax + 0xf0] 	      1916	bfd.c	FUNCTION_27	IF_1
0x40012c5	          0x4885c0	                           test rax, rax	      1918	bfd.c	FUNCTION_27	IF_1	IF_2
0x40012c8	        0x480f44c7	                          cmove rax, rdi	      1918	bfd.c	FUNCTION_27	IF_1	IF_2
0x40012cc	        0x488b4008	                mov rax, qword [rax + 8]	      1923	bfd.c	FUNCTION_27
0x40012d0	    0xff90a8020000	                call qword [rax + 0x2a8]	      1925	bfd.c	FUNCTION_27
0x40012d6	        0x4883c408	                              add rsp, 8	      1926	bfd.c	FUNCTION_27
0x40012da	              0xc3	                                     ret	      1926	bfd.c	FUNCTION_27
bfd_elf_set_pagesize	WHILE,0:FOR,0:functions,0:DO,0:IF,2:ELSE,0:CALL,2:SWITCH,0	14
0x4000040	        0x837f0805	                  cmp dword [rdi + 8], 5	      2103	bfd.c	FUNCTION_34	IF_1
0x4000044	            0x750e	                           jne 0x4000054	      2103	bfd.c	FUNCTION_34	IF_1
0x4000046	          0x4863c2	                         movsxd rax, edx	      2108	bfd.c	FUNCTION_34	IF_1
0x4000049	    0x4c8b87680300	            mov r8, qword [rdi + 0x368] 	      2108	bfd.c	FUNCTION_34	IF_1
0x4000050	        0x49893400	               mov qword [r8 + rax], rsi	      2108	bfd.c	FUNCTION_34	IF_1
0x4000054	    0x488bbf600300	           mov rdi, qword [rdi + 0x360] 	      2111	bfd.c	FUNCTION_34	IF_2
0x400005b	          0x4839cf	                            cmp rdi, rcx	      2112	bfd.c	FUNCTION_34	IF_2
0x400005e	            0x7412	                            je 0x4000072	      2112	bfd.c	FUNCTION_34	IF_2
0x4000060	          0x4885ff	                           test rdi, rdi	      2112	bfd.c	FUNCTION_34	IF_2
0x4000063	            0x740d	                            je 0x4000072	      2112	bfd.c	FUNCTION_34	IF_2
0x4000065	        0x4883ec08	                              sub rsp, 8	      2102	bfd.c	FUNCTION_34
0x4000069	      0xe8d2ffffff	           call sym.bfd_elf_set_pagesize	      2113	bfd.c	FUNCTION_34	IF_2	CALL_2
0x400006e	        0x4883c408	                              add rsp, 8	      2115	bfd.c	FUNCTION_34
0x4000072	            0xf3c3	                                     ret	      2115	bfd.c	FUNCTION_34
bfd_emul_get_maxpagesize	WHILE,0:FOR,0:functions,0:DO,0:IF,1:ELSE,0:CALL,2:SWITCH,0	15
0x4001501	        0x4883ec08	                              sub rsp, 8	      2088	bfd.c	FUNCTION_33
0x4001505	      0xbe00000000	                              mov esi, 0	      2091	bfd.c	FUNCTION_33	CALL_1
0x400150a	      0xe800000000	                          call 0x400150f	      2091	bfd.c	FUNCTION_33	CALL_1
0x400150f	          0x4885c0	                           test rax, rax	      2092	bfd.c	FUNCTION_33	IF_1
0x4001512	            0x741b	                            je 0x400152f	      2092	bfd.c	FUNCTION_33	IF_1
0x4001514	          0x4889c2	                            mov rdx, rax	      2092	bfd.c	FUNCTION_33	IF_1
0x4001517	      0xb800000000	                              mov eax, 0	      2096	bfd.c	FUNCTION_33
0x400151c	        0x837a0805	                  cmp dword [rdx + 8], 5	      2093	bfd.c	FUNCTION_33	IF_1
0x4001520	            0x7512	                           jne 0x4001534	      2093	bfd.c	FUNCTION_33	IF_1
0x4001522	    0x488b82680300	           mov rax, qword [rdx + 0x368] 	      2094	bfd.c	FUNCTION_33	CALL_2
0x4001529	        0x488b4010	            mov rax, qword [rax + 0x10] 	      2094	bfd.c	FUNCTION_33	CALL_2
0x400152d	            0xeb05	                           jmp 0x4001534	      2094	bfd.c	FUNCTION_33	CALL_2
0x400152f	      0xb800000000	                              mov eax, 0	      2096	bfd.c	FUNCTION_33
0x4001534	        0x4883c408	                              add rsp, 8	      2097	bfd.c	FUNCTION_33
0x4001538	              0xc3	                                     ret	      2097	bfd.c	FUNCTION_33
bfd_errmsg	WHILE,0:FOR,0:functions,0:DO,0:IF,4:ELSE,0:CALL,4:SWITCH,0	52
0x40000b5	              0x55	                                push rbp	       551	bfd.c	FUNCTION_4
0x40000b6	              0x53	                                push rbx	       551	bfd.c	FUNCTION_4
0x40000b7	        0x4883ec18	                           sub rsp, 0x18	       551	bfd.c	FUNCTION_4
0x40000bb	    0x64488b042528	                mov rax, qword fs:[0x28]	       551	bfd.c	FUNCTION_4
0x40000c4	      0x4889442408	                mov qword [rsp + 8], rax	       551	bfd.c	FUNCTION_4
0x40000c9	            0x31c0	                            xor eax, eax	       551	bfd.c	FUNCTION_4
0x40000cb	          0x83ff14	                           cmp edi, 0x14	       555	bfd.c	FUNCTION_4	IF_1
0x40000ce	            0x7557	                           jne 0x4000127	       555	bfd.c	FUNCTION_4	IF_1
0x40000d0	    0x8b3d00000000	            mov edi, dword [0x040000d6] 	       558	bfd.c	FUNCTION_4	IF_1	CALL_1
0x40000d6	      0xe800000000	                          call 0x40000db	       558	bfd.c	FUNCTION_4	IF_1	CALL_1
0x40000db	          0x4889c3	                            mov rbx, rax	       558	bfd.c	FUNCTION_4	IF_1	CALL_1
0x40000de	    0x488b05000000	            mov rax, qword [0x040000e5] 	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x40000e5	          0x488b28	                    mov rbp, qword [rax]	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x40000e8	      0xba05000000	                              mov edx, 5	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x40000ed	      0xbe00000000	                              mov esi, 0	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x40000f2	      0xbf00000000	                              mov edi, 0	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x40000f7	      0xe800000000	                          call 0x40000fc	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x40000fc	          0x4989d8	                             mov r8, rbx	       178	stdio2.h	FUNCTION_63	CALL_1
0x40000ff	          0x4889e9	                            mov rcx, rbp	       178	stdio2.h	FUNCTION_63	CALL_1
0x4000102	          0x4889c2	                            mov rdx, rax	       178	stdio2.h	FUNCTION_63	CALL_1
0x4000105	      0xbe01000000	                              mov esi, 1	       178	stdio2.h	FUNCTION_63	CALL_1
0x400010a	          0x4889e7	                            mov rdi, rsp	       178	stdio2.h	FUNCTION_63	CALL_1
0x400010d	      0xb800000000	                              mov eax, 0	       178	stdio2.h	FUNCTION_63	CALL_1
0x4000112	      0xe800000000	                          call 0x4000117	       178	stdio2.h	FUNCTION_63	CALL_1
0x4000117	          0x83f8ff	             cmp eax, 0xffffffffffffffff	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x400011a	            0x7406	                            je 0x4000122	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x400011c	        0x488b0424	                    mov rax, qword [rsp]	       562	bfd.c	FUNCTION_4	IF_1	IF_2
0x4000120	            0xeb3c	                           jmp 0x400015e	       562	bfd.c	FUNCTION_4	IF_1	IF_2
0x4000122	          0x4889d8	                            mov rax, rbx	       565	bfd.c	FUNCTION_4	IF_1
0x4000125	            0xeb37	                           jmp 0x400015e	       565	bfd.c	FUNCTION_4	IF_1
0x4000127	          0x83ff01	                              cmp edi, 1	       568	bfd.c	FUNCTION_4	IF_3
0x400012a	            0x750e	                           jne 0x400013a	       568	bfd.c	FUNCTION_4	IF_3
0x400012c	      0xe800000000	                          call 0x4000131	       569	bfd.c	FUNCTION_4	CALL_3
0x4000131	            0x8b38	                    mov edi, dword [rax]	       569	bfd.c	FUNCTION_4	CALL_3
0x4000133	      0xe800000000	                          call 0x4000138	       569	bfd.c	FUNCTION_4	CALL_3
0x4000138	            0xeb24	                           jmp 0x400015e	       569	bfd.c	FUNCTION_4	CALL_3
0x400013a	          0x83ff15	                           cmp edi, 0x15	       574	bfd.c	FUNCTION_4	CALL_4
0x400013d	      0xb815000000	                           mov eax, 0x15	       574	bfd.c	FUNCTION_4	CALL_4
0x4000142	           0xf47f8	                          cmova edi, eax	       574	bfd.c	FUNCTION_4	CALL_4
0x4000145	            0x89ff	                            mov edi, edi	       574	bfd.c	FUNCTION_4	CALL_4
0x4000147	    0x488b34fd0000	                  mov rsi, qword [rdi*8]	       574	bfd.c	FUNCTION_4	CALL_4
0x400014f	      0xba05000000	                              mov edx, 5	       574	bfd.c	FUNCTION_4	CALL_4
0x4000154	      0xbf00000000	                              mov edi, 0	       574	bfd.c	FUNCTION_4	CALL_4
0x4000159	      0xe800000000	                          call 0x400015e	       574	bfd.c	FUNCTION_4	CALL_4
0x400015e	      0x488b4c2408	                mov rcx, qword [rsp + 8]	       575	bfd.c	FUNCTION_4
0x4000163	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       575	bfd.c	FUNCTION_4
0x400016c	            0x7405	                            je 0x4000173	       575	bfd.c	FUNCTION_4
0x400016e	      0xe800000000	                          call 0x4000173	       575	bfd.c	FUNCTION_4
0x4000173	        0x4883c418	                           add rsp, 0x18	       575	bfd.c	FUNCTION_4
0x4000177	              0x5b	                                 pop rbx	       575	bfd.c	FUNCTION_4
0x4000178	              0x5d	                                 pop rbp	       575	bfd.c	FUNCTION_4
0x4000179	              0xc3	                                     ret	       575	bfd.c	FUNCTION_4
_bfd_abort	WHILE,0:FOR,0:functions,0:DO,0:IF,1:ELSE,1:CALL,7:SWITCH,0	39
0x40003f3	            0x4154	                                push r12	      1437	bfd.c	FUNCTION_18
0x40003f5	              0x55	                                push rbp	      1437	bfd.c	FUNCTION_18
0x40003f6	              0x53	                                push rbx	      1437	bfd.c	FUNCTION_18
0x40003f7	          0x4889fd	                            mov rbp, rdi	      1437	bfd.c	FUNCTION_18
0x40003fa	          0x4189f4	                           mov r12d, esi	      1437	bfd.c	FUNCTION_18
0x40003fd	          0x4885d2	                           test rdx, rdx	      1438	bfd.c	FUNCTION_18	IF_1
0x4000400	            0x7434	                            je 0x4000436	      1438	bfd.c	FUNCTION_18	IF_1
0x4000402	          0x4889d3	                            mov rbx, rdx	      1438	bfd.c	FUNCTION_18	IF_1
0x4000405	      0xba05000000	                              mov edx, 5	      1441	bfd.c	FUNCTION_18	IF_1	CALL_2
0x400040a	      0xbe00000000	                              mov esi, 0	      1441	bfd.c	FUNCTION_18	IF_1	CALL_2
0x400040f	      0xbf00000000	                              mov edi, 0	      1441	bfd.c	FUNCTION_18	IF_1	CALL_2
0x4000414	      0xe800000000	                          call 0x4000419	      1441	bfd.c	FUNCTION_18	IF_1	CALL_2
0x4000419	          0x4989d8	                             mov r8, rbx	      1439	bfd.c	FUNCTION_18	IF_1	CALL_1
0x400041c	          0x4489e1	                           mov ecx, r12d	      1439	bfd.c	FUNCTION_18	IF_1	CALL_1
0x400041f	          0x4889ea	                            mov rdx, rbp	      1439	bfd.c	FUNCTION_18	IF_1	CALL_1
0x4000422	      0xbe00000000	                              mov esi, 0	      1439	bfd.c	FUNCTION_18	IF_1	CALL_1
0x4000427	          0x4889c7	                            mov rdi, rax	      1439	bfd.c	FUNCTION_18	IF_1	CALL_1
0x400042a	      0xb800000000	                              mov eax, 0	      1439	bfd.c	FUNCTION_18	IF_1	CALL_1
0x400042f	      0xe800000000	                          call 0x4000434	      1439	bfd.c	FUNCTION_18	IF_1	CALL_1
0x4000434	            0xeb2c	                           jmp 0x4000462	      1439	bfd.c	FUNCTION_18	IF_1	CALL_1
0x4000436	      0xba05000000	                              mov edx, 5	      1446	bfd.c	FUNCTION_18	ELSE_1	CALL_4
0x400043b	      0xbe00000000	                              mov esi, 0	      1446	bfd.c	FUNCTION_18	ELSE_1	CALL_4
0x4000440	      0xbf00000000	                              mov edi, 0	      1446	bfd.c	FUNCTION_18	ELSE_1	CALL_4
0x4000445	      0xe800000000	                          call 0x400044a	      1446	bfd.c	FUNCTION_18	ELSE_1	CALL_4
0x400044a	          0x4489e1	                           mov ecx, r12d	      1444	bfd.c	FUNCTION_18	ELSE_1	CALL_3
0x400044d	          0x4889ea	                            mov rdx, rbp	      1444	bfd.c	FUNCTION_18	ELSE_1	CALL_3
0x4000450	      0xbe00000000	                              mov esi, 0	      1444	bfd.c	FUNCTION_18	ELSE_1	CALL_3
0x4000455	          0x4889c7	                            mov rdi, rax	      1444	bfd.c	FUNCTION_18	ELSE_1	CALL_3
0x4000458	      0xb800000000	                              mov eax, 0	      1444	bfd.c	FUNCTION_18	ELSE_1	CALL_3
0x400045d	      0xe800000000	                          call 0x4000462	      1444	bfd.c	FUNCTION_18	ELSE_1	CALL_3
0x4000462	      0xba05000000	                              mov edx, 5	      1448	bfd.c	FUNCTION_18	CALL_6
0x4000467	      0xbe00000000	                              mov esi, 0	      1448	bfd.c	FUNCTION_18	CALL_6
0x400046c	      0xbf00000000	                              mov edi, 0	      1448	bfd.c	FUNCTION_18	CALL_6
0x4000471	      0xe800000000	                          call 0x4000476	      1448	bfd.c	FUNCTION_18	CALL_6
0x4000476	          0x4889c7	                            mov rdi, rax	      1448	bfd.c	FUNCTION_18	CALL_6
0x4000479	      0xb800000000	                              mov eax, 0	      1448	bfd.c	FUNCTION_18	CALL_6
0x400047e	      0xe800000000	                          call 0x4000483	      1448	bfd.c	FUNCTION_18	CALL_6
0x4000483	      0xbf01000000	                              mov edi, 1	      1449	bfd.c	FUNCTION_18	CALL_7
0x4000488	      0xe800000000	                  call sym.bfd_set_error	      1449	bfd.c	FUNCTION_18	CALL_7
bfd_perror	WHILE,0:FOR,0:functions,0:DO,0:IF,1:ELSE,1:CALL,6:SWITCH,0	30
0x400017a	              0x53	                                push rbx	       594	bfd.c	FUNCTION_5
0x400017b	          0x4889fb	                            mov rbx, rdi	       594	bfd.c	FUNCTION_5
0x400017e	    0x488b3d000000	            mov rdi, qword [0x04000185] 	       595	bfd.c	FUNCTION_5	CALL_1
0x4000185	      0xe800000000	                          call 0x400018a	       595	bfd.c	FUNCTION_5	CALL_1
0x400018a	          0x4885db	                           test rbx, rbx	       596	bfd.c	FUNCTION_5	IF_1
0x400018d	            0x7405	                            je 0x4000194	       596	bfd.c	FUNCTION_5	IF_1
0x400018f	          0x803b00	                       cmp byte [rbx], 0	       596	bfd.c	FUNCTION_5	IF_1
0x4000192	            0x752b	                           jne 0x40001bf	       596	bfd.c	FUNCTION_5	IF_1
0x4000194	    0x8b3d00000000	            mov edi, dword [0x0400019a] 	       597	bfd.c	FUNCTION_5	CALL_3
0x400019a	      0xe800000000	                          call 0x400019f	       597	bfd.c	FUNCTION_5	CALL_3
0x400019f	          0x4889c1	                            mov rcx, rax	        97	stdio2.h	CALL_34
0x40001a2	      0xba00000000	                              mov edx, 0	        97	stdio2.h	CALL_34
0x40001a7	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_34
0x40001ac	    0x488b3d000000	            mov rdi, qword [0x040001b3] 	        97	stdio2.h	CALL_34
0x40001b3	      0xb800000000	                              mov eax, 0	        97	stdio2.h	CALL_34
0x40001b8	      0xe800000000	                          call 0x40001bd	        97	stdio2.h	CALL_34
0x40001bd	            0xeb2c	                           jmp 0x40001eb	        97	stdio2.h	CALL_34
0x40001bf	    0x8b3d00000000	            mov edi, dword [0x040001c5] 	       599	bfd.c	FUNCTION_5	CALL_5
0x40001c5	      0xe800000000	                          call 0x40001ca	       599	bfd.c	FUNCTION_5	CALL_5
0x40001ca	          0x4989c0	                             mov r8, rax	       599	bfd.c	FUNCTION_5	CALL_5
0x40001cd	          0x4889d9	                            mov rcx, rbx	        97	stdio2.h	CALL_34
0x40001d0	      0xba00000000	                              mov edx, 0	        97	stdio2.h	CALL_34
0x40001d5	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_34
0x40001da	    0x488b3d000000	            mov rdi, qword [0x040001e1] 	        97	stdio2.h	CALL_34
0x40001e1	      0xb800000000	                              mov eax, 0	        97	stdio2.h	CALL_34
0x40001e6	      0xe800000000	                          call 0x40001eb	        97	stdio2.h	CALL_34
0x40001eb	    0x488b3d000000	            mov rdi, qword [0x040001f2] 	       600	bfd.c	FUNCTION_5	CALL_6
0x40001f2	      0xe800000000	                          call 0x40001f7	       600	bfd.c	FUNCTION_5	CALL_6
0x40001f7	              0x5b	                                 pop rbx	       601	bfd.c	FUNCTION_5
0x40001f8	              0xc3	                                     ret	       601	bfd.c	FUNCTION_5
_bfd_error_handler	WHILE,0:FOR,0:functions,0:DO,0:IF,0:ELSE,0:CALL,3:SWITCH,0	33
0x40001f9	    0x4881ecd80000	                           sub rsp, 0xd8	      1173	bfd.c	FUNCTION_9
0x4000200	      0x4889742428	             mov qword [rsp + 0x28], rsi	      1173	bfd.c	FUNCTION_9
0x4000205	      0x4889542430	             mov qword [rsp + 0x30], rdx	      1173	bfd.c	FUNCTION_9
0x400020a	      0x48894c2438	             mov qword [rsp + 0x38], rcx	      1173	bfd.c	FUNCTION_9
0x400020f	      0x4c89442440	              mov qword [rsp + 0x40], r8	      1173	bfd.c	FUNCTION_9
0x4000214	      0x4c894c2448	              mov qword [rsp + 0x48], r9	      1173	bfd.c	FUNCTION_9
0x4000219	            0x84c0	                             test al, al	      1173	bfd.c	FUNCTION_9
0x400021b	            0x7437	                            je 0x4000254	      1173	bfd.c	FUNCTION_9
0x400021d	       0xf29442450	       movaps xmmword [rsp + 0x50], xmm0	      1173	bfd.c	FUNCTION_9
0x4000222	       0xf294c2460	       movaps xmmword [rsp + 0x60], xmm1	      1173	bfd.c	FUNCTION_9
0x4000227	       0xf29542470	       movaps xmmword [rsp + 0x70], xmm2	      1173	bfd.c	FUNCTION_9
0x400022c	     0xf299c248000	       movaps xmmword [rsp + 0x80], xmm3	      1173	bfd.c	FUNCTION_9
0x4000234	     0xf29a4249000	       movaps xmmword [rsp + 0x90], xmm4	      1173	bfd.c	FUNCTION_9
0x400023c	     0xf29ac24a000	       movaps xmmword [rsp + 0xa0], xmm5	      1173	bfd.c	FUNCTION_9
0x4000244	     0xf29b424b000	       movaps xmmword [rsp + 0xb0], xmm6	      1173	bfd.c	FUNCTION_9
0x400024c	     0xf29bc24c000	       movaps xmmword [rsp + 0xc0], xmm7	      1173	bfd.c	FUNCTION_9
0x4000254	    0x64488b042528	                mov rax, qword fs:[0x28]	      1173	bfd.c	FUNCTION_9
0x400025d	      0x4889442418	             mov qword [rsp + 0x18], rax	      1173	bfd.c	FUNCTION_9
0x4000262	            0x31c0	                            xor eax, eax	      1173	bfd.c	FUNCTION_9
0x4000264	    0xc70424080000	                      mov dword [rsp], 8	      1176	bfd.c	FUNCTION_9	CALL_1
0x400026b	    0xc74424043000	               mov dword [rsp + 4], 0x30	      1176	bfd.c	FUNCTION_9	CALL_1
0x4000273	    0x488d8424e000	                   lea rax, [rsp + 0xe0]	      1176	bfd.c	FUNCTION_9	CALL_1
0x400027b	      0x4889442408	                mov qword [rsp + 8], rax	      1176	bfd.c	FUNCTION_9	CALL_1
0x4000280	      0x488d442420	                   lea rax, [rsp + 0x20]	      1176	bfd.c	FUNCTION_9	CALL_1
0x4000285	      0x4889442410	             mov qword [rsp + 0x10], rax	      1176	bfd.c	FUNCTION_9	CALL_1
0x400028a	          0x4889e6	                            mov rsi, rsp	      1177	bfd.c	FUNCTION_9	CALL_2
0x400028d	    0xff1500000000	                 call qword [0x04000293]	      1177	bfd.c	FUNCTION_9	CALL_2
0x4000293	      0x488b442418	            mov rax, qword [rsp + 0x18] 	      1179	bfd.c	FUNCTION_9
0x4000298	    0x644833042528	                xor rax, qword fs:[0x28]	      1179	bfd.c	FUNCTION_9
0x40002a1	            0x7405	                            je 0x40002a8	      1179	bfd.c	FUNCTION_9
0x40002a3	      0xe800000000	                          call 0x40002a8	      1179	bfd.c	FUNCTION_9
0x40002a8	    0x4881c4d80000	                           add rsp, 0xd8	      1179	bfd.c	FUNCTION_9
0x40002af	              0xc3	                                     ret	      1179	bfd.c	FUNCTION_9
