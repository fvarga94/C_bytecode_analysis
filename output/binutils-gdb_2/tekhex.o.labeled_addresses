move_section_contents	CALL,2:DO,0:WHILE,0:FOR,1:functions,0:SWITCH,0:ELSE,2:IF,4	86
0x40002dd	            0x4157	                                push r15	       632	tekhex.c	FUNCTION_12
0x40002df	            0x4156	                                push r14	       632	tekhex.c	FUNCTION_12
0x40002e1	            0x4155	                                push r13	       632	tekhex.c	FUNCTION_12
0x40002e3	            0x4154	                                push r12	       632	tekhex.c	FUNCTION_12
0x40002e5	              0x55	                                push rbp	       632	tekhex.c	FUNCTION_12
0x40002e6	              0x53	                                push rbx	       632	tekhex.c	FUNCTION_12
0x40002e7	        0x4883ec18	                           sub rsp, 0x18	       632	tekhex.c	FUNCTION_12
0x40002eb	      0x48897c2408	                mov qword [rsp + 8], rdi	       632	tekhex.c	FUNCTION_12
0x40002f0	          0x4889f5	                            mov rbp, rsi	       632	tekhex.c	FUNCTION_12
0x40002f3	          0x4889d3	                            mov rbx, rdx	       632	tekhex.c	FUNCTION_12
0x40002f6	          0x4d89c5	                             mov r13, r8	       632	tekhex.c	FUNCTION_12
0x40002f9	          0x4589cf	                           mov r15d, r9d	       632	tekhex.c	FUNCTION_12
0x40002fc	          0x4885c9	                           test rcx, rcx	       638	tekhex.c	FUNCTION_12	CALL_1
0x40002ff	            0x740f	                            je 0x4000310	       638	tekhex.c	FUNCTION_12	CALL_1
0x4000301	      0xbe7e020000	                          mov esi, 0x27e	       638	tekhex.c	FUNCTION_12	CALL_1
0x4000306	      0xbf00000000	                              mov edi, 0	       638	tekhex.c	FUNCTION_12	CALL_1
0x400030b	      0xe800000000	                          call 0x4000310	       638	tekhex.c	FUNCTION_12	CALL_1
0x4000310	        0x488b4d28	            mov rcx, qword [rbp + 0x28] 	       639	tekhex.c	FUNCTION_12	FOR_1
0x4000314	          0x4d85ed	                           test r13, r13	       639	tekhex.c	FUNCTION_12	FOR_1
0x4000317	     0xf84d1000000	                            je 0x40003ee	       639	tekhex.c	FUNCTION_12	FOR_1
0x400031d	          0x4889dd	                            mov rbp, rbx	       639	tekhex.c	FUNCTION_12	FOR_1
0x4000320	      0xb800000000	                              mov eax, 0	       639	tekhex.c	FUNCTION_12	FOR_1
0x4000325	      0xba01000000	                              mov edx, 1	       639	tekhex.c	FUNCTION_12	FOR_1
0x400032a	          0x4829d9	                            sub rcx, rbx	       639	tekhex.c	FUNCTION_12	FOR_1
0x400032d	        0x48890c24	                    mov qword [rsp], rcx	       639	tekhex.c	FUNCTION_12	FOR_1
0x4000331	        0x488b0c24	                    mov rcx, qword [rsp]	       639	tekhex.c	FUNCTION_12	FOR_1
0x4000335	      0x488d5c0d00	                    lea rbx, [rbp + rcx]	       639	tekhex.c	FUNCTION_12	FOR_1
0x400033a	          0x4989dc	                            mov r12, rbx	       642	tekhex.c	FUNCTION_12	FOR_1
0x400033d	    0x4981e400e0ff	             and r12, 0xffffffffffffe000	       642	tekhex.c	FUNCTION_12	FOR_1
0x4000344	    0x81e3ff1f0000	                         and ebx, 0x1fff	       643	tekhex.c	FUNCTION_12	FOR_1
0x400034a	          0x4585ff	                         test r15d, r15d	       644	tekhex.c	FUNCTION_12	FOR_1
0x400034d	     0xf858b000000	                           jne 0x40003de	       644	tekhex.c	FUNCTION_12	FOR_1
0x4000353	        0x807d0000	                       cmp byte [rbp], 0	       644	tekhex.c	FUNCTION_12	FOR_1
0x4000357	            0x7475	                            je 0x40003ce	       644	tekhex.c	FUNCTION_12	FOR_1
0x4000359	          0x4939d4	                            cmp r12, rdx	       646	tekhex.c	FUNCTION_12	FOR_1	IF_1
0x400035c	            0x750d	                           jne 0x400036b	       646	tekhex.c	FUNCTION_12	FOR_1	IF_1
0x400035e	          0x4885c0	                           test rax, rax	       646	tekhex.c	FUNCTION_12	FOR_1	IF_1
0x4000361	            0x7545	                           jne 0x40003a8	       646	tekhex.c	FUNCTION_12	FOR_1	IF_1
0x4000363	    0x41be01000000	                             mov r14d, 1	       644	tekhex.c	FUNCTION_12	FOR_1
0x4000369	            0xeb06	                           jmp 0x4000371	       644	tekhex.c	FUNCTION_12	FOR_1
0x400036b	    0x41be01000000	                             mov r14d, 1	       644	tekhex.c	FUNCTION_12	FOR_1
0x4000371	          0x4489f2	                           mov edx, r14d	       649	tekhex.c	FUNCTION_12	FOR_1	IF_1	CALL_2
0x4000374	          0x4c89e6	                            mov rsi, r12	       649	tekhex.c	FUNCTION_12	FOR_1	IF_1	CALL_2
0x4000377	      0x488b7c2408	                mov rdi, qword [rsp + 8]	       649	tekhex.c	FUNCTION_12	FOR_1	IF_1	CALL_2
0x400037c	      0xe8d6feffff	                     call sym.find_chunk	       649	tekhex.c	FUNCTION_12	FOR_1	IF_1	CALL_2
0x4000381	          0x4585ff	                         test r15d, r15d	       653	tekhex.c	FUNCTION_12	FOR_1	IF_2
0x4000384	            0x741a	                            je 0x40003a0	       653	tekhex.c	FUNCTION_12	FOR_1	IF_2
0x4000386	          0x4885c0	                           test rax, rax	       655	tekhex.c	FUNCTION_12	FOR_1	IF_2	IF_3
0x4000389	            0x740c	                            je 0x4000397	       655	tekhex.c	FUNCTION_12	FOR_1	IF_2	IF_3
0x400038b	         0xfb61418	             movzx edx, byte [rax + rbx]	       656	tekhex.c	FUNCTION_12	FOR_1	IF_2	IF_3
0x400038f	          0x885500	                      mov byte [rbp], dl	       656	tekhex.c	FUNCTION_12	FOR_1	IF_2	IF_3
0x4000392	          0x4c89e2	                            mov rdx, r12	       656	tekhex.c	FUNCTION_12	FOR_1	IF_2	IF_3
0x4000395	            0xeb27	                           jmp 0x40003be	       656	tekhex.c	FUNCTION_12	FOR_1	IF_2	IF_3
0x4000397	        0xc6450000	                       mov byte [rbp], 0	       658	tekhex.c	FUNCTION_12	FOR_1	IF_2	ELSE_1
0x400039b	          0x4c89e2	                            mov rdx, r12	       658	tekhex.c	FUNCTION_12	FOR_1	IF_2	ELSE_1
0x400039e	            0xeb1e	                           jmp 0x40003be	       658	tekhex.c	FUNCTION_12	FOR_1	IF_2	ELSE_1
0x40003a0	          0x4c89e2	                            mov rdx, r12	       658	tekhex.c	FUNCTION_12	FOR_1	IF_2	ELSE_1
0x40003a3	          0x4585f6	                         test r14d, r14d	       660	tekhex.c	FUNCTION_12	FOR_1	ELSE_1	ELSE_2	IF_4
0x40003a6	            0x7416	                            je 0x40003be	       660	tekhex.c	FUNCTION_12	FOR_1	ELSE_1	ELSE_2	IF_4
0x40003a8	         0xfb65500	                   movzx edx, byte [rbp]	       662	tekhex.c	FUNCTION_12	FOR_1	ELSE_1	ELSE_2	IF_4
0x40003ac	          0x881418	                mov byte [rax + rbx], dl	       662	tekhex.c	FUNCTION_12	FOR_1	ELSE_1	ELSE_2	IF_4
0x40003af	        0x48c1eb05	                              shr rbx, 5	       663	tekhex.c	FUNCTION_12	FOR_1	ELSE_1	ELSE_2	IF_4
0x40003b3	    0xc68418002000	       mov byte [rax + rbx + 0x2000], 1 	       663	tekhex.c	FUNCTION_12	FOR_1	ELSE_1	ELSE_2	IF_4
0x40003bb	          0x4c89e2	                            mov rdx, r12	       663	tekhex.c	FUNCTION_12	FOR_1	ELSE_1	ELSE_2	IF_4
0x40003be	        0x4883c501	                              add rbp, 1	       666	tekhex.c	FUNCTION_12	FOR_1
0x40003c2	        0x4983ed01	                              sub r13, 1	       639	tekhex.c	FUNCTION_12	FOR_1
0x40003c6	     0xf8565ffffff	                           jne 0x4000331	       639	tekhex.c	FUNCTION_12	FOR_1
0x40003cc	            0xeb20	                           jmp 0x40003ee	       639	tekhex.c	FUNCTION_12	FOR_1
0x40003ce	    0x41be00000000	                             mov r14d, 0	       646	tekhex.c	FUNCTION_12	FOR_1	IF_1
0x40003d4	          0x4939d4	                            cmp r12, rdx	       646	tekhex.c	FUNCTION_12	FOR_1	IF_1
0x40003d7	            0x7598	                           jne 0x4000371	       646	tekhex.c	FUNCTION_12	FOR_1	IF_1
0x40003d9	          0x4989d4	                            mov r12, rdx	       646	tekhex.c	FUNCTION_12	FOR_1	IF_1
0x40003dc	            0xeba3	                           jmp 0x4000381	       646	tekhex.c	FUNCTION_12	FOR_1	IF_1
0x40003de	    0x41be00000000	                             mov r14d, 0	       646	tekhex.c	FUNCTION_12	FOR_1	IF_1
0x40003e4	          0x4939d4	                            cmp r12, rdx	       646	tekhex.c	FUNCTION_12	FOR_1	IF_1
0x40003e7	            0x7588	                           jne 0x4000371	       646	tekhex.c	FUNCTION_12	FOR_1	IF_1
0x40003e9	          0x4989d4	                            mov r12, rdx	       646	tekhex.c	FUNCTION_12	FOR_1	IF_1
0x40003ec	            0xeb98	                           jmp 0x4000386	       646	tekhex.c	FUNCTION_12	FOR_1	IF_1
0x40003ee	        0x4883c418	                           add rsp, 0x18	       668	tekhex.c	FUNCTION_12
0x40003f2	              0x5b	                                 pop rbx	       668	tekhex.c	FUNCTION_12
0x40003f3	              0x5d	                                 pop rbp	       668	tekhex.c	FUNCTION_12
0x40003f4	            0x415c	                                 pop r12	       668	tekhex.c	FUNCTION_12
0x40003f6	            0x415d	                                 pop r13	       668	tekhex.c	FUNCTION_12
0x40003f8	            0x415e	                                 pop r14	       668	tekhex.c	FUNCTION_12
0x40003fa	            0x415f	                                 pop r15	       668	tekhex.c	FUNCTION_12
0x40003fc	              0xc3	                                     ret	       668	tekhex.c	FUNCTION_12
tekhex_make_empty_symbol	CALL,1:DO,0:WHILE,0:FOR,0:functions,0:SWITCH,0:ELSE,0:IF,1	10
0x4000447	              0x53	                                push rbx	       914	tekhex.c	FUNCTION_21
0x4000448	          0x4889fb	                            mov rbx, rdi	       914	tekhex.c	FUNCTION_21
0x400044b	      0xbe38000000	                           mov esi, 0x38	       916	tekhex.c	FUNCTION_21	CALL_1
0x4000450	      0xe800000000	                          call 0x4000455	       916	tekhex.c	FUNCTION_21	CALL_1
0x4000455	          0x4885c0	                           test rax, rax	       919	tekhex.c	FUNCTION_21	IF_1
0x4000458	            0x740b	                            je 0x4000465	       919	tekhex.c	FUNCTION_21	IF_1
0x400045a	          0x488918	                    mov qword [rax], rbx	       921	tekhex.c	FUNCTION_21
0x400045d	    0x48c740300000	               mov qword [rax + 0x30], 0	       922	tekhex.c	FUNCTION_21
0x4000465	              0x5b	                                 pop rbx	       924	tekhex.c	FUNCTION_21
0x4000466	              0xc3	                                     ret	       924	tekhex.c	FUNCTION_21
writevalue	CALL,0:DO,0:WHILE,1:FOR,1:functions,0:SWITCH,0:ELSE,0:IF,1	43
0x40001bd	          0x4c8b07	                     mov r8, qword [rdi]	       718	tekhex.c	FUNCTION_16
0x40001c0	    0xf7c6000000f0	                    test esi, 0xf0000000	       724	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x40001c6	            0x7575	                           jne 0x400023d	       724	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x40001c8	      0xb807000000	                              mov eax, 7	       724	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x40001cd	      0xb918000000	                           mov ecx, 0x18	       724	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x40001d2	          0x4889f2	                            mov rdx, rsi	       724	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x40001d5	          0x48d3ea	                             shr rdx, cl	       724	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x40001d8	          0xf6c20f	                            test dl, 0xf	       724	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x40001db	            0x7447	                            je 0x4000224	       724	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x40001dd	        0x4d8d5001	                       lea r10, [r8 + 1]	       726	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x40001e1	          0x8d5030	                   lea edx, [rax + 0x30]	       726	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x40001e4	          0x418810	                       mov byte [r8], dl	       726	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x40001e7	            0x85c0	                           test eax, eax	       727	tekhex.c	FUNCTION_16	FOR_1	IF_1	WHILE_1
0x40001e9	            0x7435	                            je 0x4000220	       727	tekhex.c	FUNCTION_16	FOR_1	IF_1	WHILE_1
0x40001eb	          0x8d50ff	                      lea edx, [rax - 1]	       727	tekhex.c	FUNCTION_16	FOR_1	IF_1	WHILE_1
0x40001ee	      0x4d8d4c1201	                 lea r9, [r10 + rdx + 1]	       727	tekhex.c	FUNCTION_16	FOR_1	IF_1	WHILE_1
0x40001f3	          0x4c89d2	                            mov rdx, r10	       722	tekhex.c	FUNCTION_16	FOR_1
0x40001f6	        0x4883c201	                              add rdx, 1	       729	tekhex.c	FUNCTION_16	FOR_1	IF_1	WHILE_1
0x40001fa	          0x4989f0	                             mov r8, rsi	       729	tekhex.c	FUNCTION_16	FOR_1	IF_1	WHILE_1
0x40001fd	          0x49d3e8	                              shr r8, cl	       729	tekhex.c	FUNCTION_16	FOR_1	IF_1	WHILE_1
0x4000200	        0x4183e00f	                            and r8d, 0xf	       729	tekhex.c	FUNCTION_16	FOR_1	IF_1	WHILE_1
0x4000204	    0x450fb6800000	                    movzx r8d, byte [r8]	       729	tekhex.c	FUNCTION_16	FOR_1	IF_1	WHILE_1
0x400020c	        0x448842ff	                 mov byte [rdx - 1], r8b	       729	tekhex.c	FUNCTION_16	FOR_1	IF_1	WHILE_1
0x4000210	          0x83e904	                              sub ecx, 4	       730	tekhex.c	FUNCTION_16	FOR_1	IF_1	WHILE_1
0x4000213	          0x4c39ca	                             cmp rdx, r9	       727	tekhex.c	FUNCTION_16	FOR_1	IF_1	WHILE_1
0x4000216	            0x75de	                           jne 0x40001f6	       727	tekhex.c	FUNCTION_16	FOR_1	IF_1	WHILE_1
0x4000218	          0x8d40ff	                      lea eax, [rax - 1]	       727	tekhex.c	FUNCTION_16	FOR_1	IF_1	WHILE_1
0x400021b	      0x4d8d540201	                lea r10, [r10 + rax + 1]	       727	tekhex.c	FUNCTION_16	FOR_1	IF_1	WHILE_1
0x4000220	          0x4c8917	                    mov qword [rdi], r10	       733	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x4000223	              0xc3	                                     ret	       734	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x4000224	          0x83e801	                              sub eax, 1	       722	tekhex.c	FUNCTION_16	FOR_1
0x4000227	          0x83e904	                              sub ecx, 4	       722	tekhex.c	FUNCTION_16	FOR_1
0x400022a	            0x75a6	                           jne 0x40001d2	       722	tekhex.c	FUNCTION_16	FOR_1
0x400022c	        0x41c60031	                     mov byte [r8], 0x31	       738	tekhex.c	FUNCTION_16
0x4000230	      0x41c6400130	                 mov byte [r8 + 1], 0x30	       739	tekhex.c	FUNCTION_16
0x4000235	        0x4983c002	                               add r8, 2	       739	tekhex.c	FUNCTION_16
0x4000239	          0x4c8907	                     mov qword [rdi], r8	       739	tekhex.c	FUNCTION_16
0x400023c	              0xc3	                                     ret	       739	tekhex.c	FUNCTION_16
0x400023d	        0x4d8d5001	                       lea r10, [r8 + 1]	       726	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x4000241	        0x41c60038	                     mov byte [r8], 0x38	       726	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x4000245	      0xb91c000000	                           mov ecx, 0x1c	       722	tekhex.c	FUNCTION_16	FOR_1
0x400024a	      0xb808000000	                              mov eax, 8	       722	tekhex.c	FUNCTION_16	FOR_1
0x400024f	            0xeb9a	                           jmp 0x40001eb	       722	tekhex.c	FUNCTION_16	FOR_1
find_chunk	CALL,1:DO,0:WHILE,1:FOR,0:functions,0:SWITCH,0:ELSE,0:IF,2	35
0x4000257	              0x55	                                push rbp	       320	tekhex.c	FUNCTION_4
0x4000258	              0x53	                                push rbx	       320	tekhex.c	FUNCTION_4
0x4000259	        0x4883ec08	                              sub rsp, 8	       320	tekhex.c	FUNCTION_4
0x400025d	    0x488b87f80000	            mov rax, qword [rdi + 0xf8] 	       321	tekhex.c	FUNCTION_4
0x4000264	        0x488b4018	            mov rax, qword [rax + 0x18] 	       321	tekhex.c	FUNCTION_4
0x4000268	    0x4881e600e0ff	             and rsi, 0xffffffffffffe000	       323	tekhex.c	FUNCTION_4
0x400026f	          0x4889f3	                            mov rbx, rsi	       323	tekhex.c	FUNCTION_4
0x4000272	          0x4885c0	                           test rax, rax	       324	tekhex.c	FUNCTION_4	WHILE_1
0x4000275	            0x7420	                            je 0x4000297	       324	tekhex.c	FUNCTION_4	WHILE_1
0x4000277	    0x483bb0002100	          cmp rsi, qword [rax + 0x2100] 	       324	tekhex.c	FUNCTION_4	WHILE_1
0x400027e	            0x7456	                            je 0x40002d6	       324	tekhex.c	FUNCTION_4	WHILE_1
0x4000280	    0x488b80082100	          mov rax, qword [rax + 0x2108] 	       325	tekhex.c	FUNCTION_4	WHILE_1
0x4000287	          0x4885c0	                           test rax, rax	       324	tekhex.c	FUNCTION_4	WHILE_1
0x400028a	            0x740b	                            je 0x4000297	       324	tekhex.c	FUNCTION_4	WHILE_1
0x400028c	    0x483b98002100	          cmp rbx, qword [rax + 0x2100] 	       324	tekhex.c	FUNCTION_4	WHILE_1
0x4000293	            0x75eb	                           jne 0x4000280	       324	tekhex.c	FUNCTION_4	WHILE_1
0x4000295	            0xeb3f	                           jmp 0x40002d6	       324	tekhex.c	FUNCTION_4	WHILE_1
0x4000297	      0xb800000000	                              mov eax, 0	       324	tekhex.c	FUNCTION_4	WHILE_1
0x400029c	            0x85d2	                           test edx, edx	       327	tekhex.c	FUNCTION_4	IF_1
0x400029e	            0x7436	                            je 0x40002d6	       327	tekhex.c	FUNCTION_4	IF_1
0x40002a0	          0x4889fd	                            mov rbp, rdi	       327	tekhex.c	FUNCTION_4	IF_1
0x40002a3	      0xbe10210000	                         mov esi, 0x2110	       330	tekhex.c	FUNCTION_4	IF_1
0x40002a8	      0xe800000000	                          call 0x40002ad	       330	tekhex.c	FUNCTION_4	IF_1
0x40002ad	          0x4885c0	                           test rax, rax	       333	tekhex.c	FUNCTION_4	IF_1	IF_2
0x40002b0	            0x7424	                            je 0x40002d6	       333	tekhex.c	FUNCTION_4	IF_1	IF_2
0x40002b2	    0x488b95f80000	            mov rdx, qword [rbp + 0xf8] 	       336	tekhex.c	FUNCTION_4	IF_1
0x40002b9	        0x488b5218	            mov rdx, qword [rdx + 0x18] 	       336	tekhex.c	FUNCTION_4	IF_1
0x40002bd	    0x488990082100	          mov qword [rax + 0x2108], rdx 	       336	tekhex.c	FUNCTION_4	IF_1
0x40002c4	    0x488998002100	          mov qword [rax + 0x2100], rbx 	       337	tekhex.c	FUNCTION_4	IF_1
0x40002cb	    0x488b95f80000	            mov rdx, qword [rbp + 0xf8] 	       338	tekhex.c	FUNCTION_4	IF_1
0x40002d2	        0x48894218	             mov qword [rdx + 0x18], rax	       338	tekhex.c	FUNCTION_4	IF_1
0x40002d6	        0x4883c408	                              add rsp, 8	       341	tekhex.c	FUNCTION_4
0x40002da	              0x5b	                                 pop rbx	       341	tekhex.c	FUNCTION_4
0x40002db	              0x5d	                                 pop rbp	       341	tekhex.c	FUNCTION_4
0x40002dc	              0xc3	                                     ret	       341	tekhex.c	FUNCTION_4
first_phase	CALL,18:DO,0:WHILE,2:FOR,0:functions,0:SWITCH,2:ELSE,5:IF,25	276
0x4000cad	            0x4157	                                push r15	       361	tekhex.c	FUNCTION_6
0x4000caf	            0x4156	                                push r14	       361	tekhex.c	FUNCTION_6
0x4000cb1	            0x4155	                                push r13	       361	tekhex.c	FUNCTION_6
0x4000cb3	            0x4154	                                push r12	       361	tekhex.c	FUNCTION_6
0x4000cb5	              0x55	                                push rbp	       361	tekhex.c	FUNCTION_6
0x4000cb6	              0x53	                                push rbx	       361	tekhex.c	FUNCTION_6
0x4000cb7	        0x4883ec48	                           sub rsp, 0x48	       361	tekhex.c	FUNCTION_6
0x4000cbb	          0x4889fd	                            mov rbp, rdi	       361	tekhex.c	FUNCTION_6
0x4000cbe	      0x4889542408	                mov qword [rsp + 8], rdx	       361	tekhex.c	FUNCTION_6
0x4000cc3	          0x4889cb	                            mov rbx, rcx	       361	tekhex.c	FUNCTION_6
0x4000cc6	    0x64488b042528	                mov rax, qword fs:[0x28]	       361	tekhex.c	FUNCTION_6
0x4000ccf	      0x4889442438	             mov qword [rsp + 0x38], rax	       361	tekhex.c	FUNCTION_6
0x4000cd4	            0x31c0	                            xor eax, eax	       361	tekhex.c	FUNCTION_6
0x4000cd6	          0x83fe33	                           cmp esi, 0x33	       367	tekhex.c	FUNCTION_6	SWITCH_1
0x4000cd9	     0xf84da000000	                            je 0x4000db9	       367	tekhex.c	FUNCTION_6	SWITCH_1
0x4000cdf	      0xb801000000	                              mov eax, 1	       505	tekhex.c	FUNCTION_6
0x4000ce4	          0x83fe36	                           cmp esi, 0x36	       367	tekhex.c	FUNCTION_6	SWITCH_1
0x4000ce7	     0xf85df030000	                           jne 0x40010cc	       367	tekhex.c	FUNCTION_6	SWITCH_1
0x4000ced	          0x4889ca	                            mov rdx, rcx	       374	tekhex.c	FUNCTION_6	SWITCH_1	IF_1	CALL_1
0x4000cf0	      0x488d742418	                   lea rsi, [rsp + 0x18]	       374	tekhex.c	FUNCTION_6	SWITCH_1	IF_1	CALL_1
0x4000cf5	      0x488d7c2408	                      lea rdi, [rsp + 8]	       374	tekhex.c	FUNCTION_6	SWITCH_1	IF_1	CALL_1
0x4000cfa	      0xe841f3ffff	                       call sym.getvalue	       374	tekhex.c	FUNCTION_6	SWITCH_1	IF_1	CALL_1
0x4000cff	            0x85c0	                           test eax, eax	       374	tekhex.c	FUNCTION_6	SWITCH_1	IF_1	CALL_1
0x4000d01	     0xf84c5030000	                            je 0x40010cc	       374	tekhex.c	FUNCTION_6	SWITCH_1	IF_1	CALL_1
0x4000d07	      0x488b542408	                mov rdx, qword [rsp + 8]	       377	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x4000d0c	           0xfb602	                   movzx eax, byte [rdx]	       377	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x4000d0f	            0x84c0	                             test al, al	       377	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x4000d11	     0xf8484000000	                            je 0x4000d9b	       377	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x4000d17	        0x4883eb01	                              sub rbx, 1	       377	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x4000d1b	          0x4839da	                            cmp rdx, rbx	       377	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x4000d1e	     0xf8381000000	                           jae 0x4000da5	       377	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x4000d24	           0xfb6c0	                           movzx eax, al	       379	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1	CALL_2
0x4000d27	     0xfb680000000	                   movzx eax, byte [rax]	       379	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1	CALL_2
0x4000d2e	          0xc1e004	                              shl eax, 4	       379	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1	CALL_2
0x4000d31	         0xfb65201	               movzx edx, byte [rdx + 1]	       379	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1	CALL_2
0x4000d35	     0xfb692000000	                   movzx edx, byte [rdx]	       379	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1	CALL_2
0x4000d3c	             0x1d0	                            add eax, edx	       346	tekhex.c	FUNCTION_5	IF_1
0x4000d3e	          0x4189c4	                           mov r12d, eax	       346	tekhex.c	FUNCTION_5	IF_1
0x4000d41	            0x742d	                            je 0x4000d70	       346	tekhex.c	FUNCTION_5	IF_1
0x4000d43	      0x4c8b6c2418	            mov r13, qword [rsp + 0x18] 	       379	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1	CALL_2
0x4000d48	      0xba01000000	                              mov edx, 1	       349	tekhex.c	FUNCTION_5	IF_1	CALL_1
0x4000d4d	          0x4c89ee	                            mov rsi, r13	       349	tekhex.c	FUNCTION_5	IF_1	CALL_1
0x4000d50	          0x4889ef	                            mov rdi, rbp	       349	tekhex.c	FUNCTION_5	IF_1	CALL_1
0x4000d53	      0xe8fff4ffff	                     call sym.find_chunk	       349	tekhex.c	FUNCTION_5	IF_1	CALL_1
0x4000d58	    0x4181e5ff1f00	                        and r13d, 0x1fff	       351	tekhex.c	FUNCTION_5	IF_1
0x4000d5f	        0x46882428	              mov byte [rax + r13], r12b	       351	tekhex.c	FUNCTION_5	IF_1
0x4000d63	        0x49c1ed05	                              shr r13, 5	       352	tekhex.c	FUNCTION_5	IF_1
0x4000d67	    0x42c684280020	       mov byte [rax + r13 + 0x2000], 1 	       352	tekhex.c	FUNCTION_5	IF_1
0x4000d70	      0x488b442408	                mov rax, qword [rsp + 8]	       380	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x4000d75	        0x488d5002	                      lea rdx, [rax + 2]	       380	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x4000d79	      0x4889542408	                mov qword [rsp + 8], rdx	       380	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x4000d7e	    0x488344241801	               add qword [rsp + 0x18], 1	       381	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x4000d84	         0xfb64002	               movzx eax, byte [rax + 2]	       377	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x4000d88	            0x84c0	                             test al, al	       377	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x4000d8a	            0x7423	                            je 0x4000daf	       377	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x4000d8c	          0x4839da	                            cmp rdx, rbx	       377	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x4000d8f	            0x7293	                            jb 0x4000d24	       377	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x4000d91	      0xb801000000	                              mov eax, 1	       383	tekhex.c	FUNCTION_6	SWITCH_1
0x4000d96	      0xe931030000	                           jmp 0x40010cc	       383	tekhex.c	FUNCTION_6	SWITCH_1
0x4000d9b	      0xb801000000	                              mov eax, 1	       383	tekhex.c	FUNCTION_6	SWITCH_1
0x4000da0	      0xe927030000	                           jmp 0x40010cc	       383	tekhex.c	FUNCTION_6	SWITCH_1
0x4000da5	      0xb801000000	                              mov eax, 1	       383	tekhex.c	FUNCTION_6	SWITCH_1
0x4000daa	      0xe91d030000	                           jmp 0x40010cc	       383	tekhex.c	FUNCTION_6	SWITCH_1
0x4000daf	      0xb801000000	                              mov eax, 1	       383	tekhex.c	FUNCTION_6	SWITCH_1
0x4000db4	      0xe913030000	                           jmp 0x40010cc	       383	tekhex.c	FUNCTION_6	SWITCH_1
0x4000db9	      0x488d542414	                   lea rdx, [rsp + 0x14]	       388	tekhex.c	FUNCTION_6	SWITCH_1	IF_2	CALL_3
0x4000dbe	      0x488d742408	                      lea rsi, [rsp + 8]	       388	tekhex.c	FUNCTION_6	SWITCH_1	IF_2	CALL_3
0x4000dc3	      0x488d7c2420	                   lea rdi, [rsp + 0x20]	       388	tekhex.c	FUNCTION_6	SWITCH_1	IF_2	CALL_3
0x4000dc8	      0xe82bf3ffff	                         call sym.getsym	       388	tekhex.c	FUNCTION_6	SWITCH_1	IF_2	CALL_3
0x4000dcd	            0x85c0	                           test eax, eax	       388	tekhex.c	FUNCTION_6	SWITCH_1	IF_2	CALL_3
0x4000dcf	     0xf84f7020000	                            je 0x40010cc	       388	tekhex.c	FUNCTION_6	SWITCH_1	IF_2	CALL_3
0x4000dd5	      0x488d742420	                   lea rsi, [rsp + 0x20]	       390	tekhex.c	FUNCTION_6	SWITCH_1	CALL_4
0x4000dda	          0x4889ef	                            mov rdi, rbp	       390	tekhex.c	FUNCTION_6	SWITCH_1	CALL_4
0x4000ddd	      0xe800000000	                          call 0x4000de2	       390	tekhex.c	FUNCTION_6	SWITCH_1	CALL_4
0x4000de2	          0x4989c5	                            mov r13, rax	       390	tekhex.c	FUNCTION_6	SWITCH_1	CALL_4
0x4000de5	          0x4885c0	                           test rax, rax	       391	tekhex.c	FUNCTION_6	SWITCH_1	IF_3
0x4000de8	            0x754c	                           jne 0x4000e36	       391	tekhex.c	FUNCTION_6	SWITCH_1	IF_3
0x4000dea	        0x8b742414	            mov esi, dword [rsp + 0x14] 	       393	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	CALL_5
0x4000dee	        0x4883c601	                              add rsi, 1	       393	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	CALL_5
0x4000df2	          0x4889ef	                            mov rdi, rbp	       393	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	CALL_5
0x4000df5	      0xe800000000	                          call 0x4000dfa	       393	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	CALL_5
0x4000dfa	          0x4989c4	                            mov r12, rax	       393	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	CALL_5
0x4000dfd	      0xb800000000	                              mov eax, 0	       396	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	IF_4
0x4000e02	          0x4d85e4	                           test r12, r12	       395	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	IF_4
0x4000e05	     0xf84c1020000	                            je 0x40010cc	       395	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	IF_4
0x4000e0b	        0x8b442414	            mov eax, dword [rsp + 0x14] 	        53	string3.h	FUNCTION_41	CALL_3
0x4000e0f	          0x8d5001	                      lea edx, [rax + 1]	        53	string3.h	FUNCTION_41	CALL_3
0x4000e12	      0x488d742420	                   lea rsi, [rsp + 0x20]	        53	string3.h	FUNCTION_41	CALL_3
0x4000e17	          0x4c89e7	                            mov rdi, r12	        53	string3.h	FUNCTION_41	CALL_3
0x4000e1a	      0xe800000000	                          call 0x4000e1f	        53	string3.h	FUNCTION_41	CALL_3
0x4000e1f	          0x4c89e6	                            mov rsi, r12	       398	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	CALL_7
0x4000e22	          0x4889ef	                            mov rdi, rbp	       398	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	CALL_7
0x4000e25	      0xe800000000	                          call 0x4000e2a	       398	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	CALL_7
0x4000e2a	          0x4989c5	                            mov r13, rax	       398	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	CALL_7
0x4000e2d	          0x4885c0	                           test rax, rax	       399	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	IF_5
0x4000e30	     0xf8460020000	                            je 0x4001096	       399	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	IF_5
0x4000e36	    0x41bf00000000	                             mov r15d, 0	       402	tekhex.c	FUNCTION_6	SWITCH_1
0x4000e3c	      0xe939020000	                           jmp 0x400107a	       403	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2
0x4000e41	          0x83e830	                           sub eax, 0x30	       405	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000e44	            0x3c08	                               cmp al, 8	       405	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000e46	     0xf8751020000	                            ja 0x400109d	       405	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000e4c	           0xfb6c0	                           movzx eax, al	       405	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000e4f	    0xff24c5000000	                       jmp qword [rax*8]	       405	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000e56	        0x4883c201	                              add rdx, 1	       408	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000e5a	      0x4889542408	                mov qword [rsp + 8], rdx	       408	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000e5f	        0x498d7528	                   lea rsi, [r13 + 0x28]	       409	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_6	CALL_8
0x4000e63	          0x4889da	                            mov rdx, rbx	       409	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_6	CALL_8
0x4000e66	      0x488d7c2408	                      lea rdi, [rsp + 8]	       409	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_6	CALL_8
0x4000e6b	      0xe8d0f1ffff	                       call sym.getvalue	       409	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_6	CALL_8
0x4000e70	            0x85c0	                           test eax, eax	       409	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_6	CALL_8
0x4000e72	     0xf8454020000	                            je 0x40010cc	       409	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_6	CALL_8
0x4000e78	          0x4889da	                            mov rdx, rbx	       411	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_7	CALL_9
0x4000e7b	      0x488d742418	                   lea rsi, [rsp + 0x18]	       411	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_7	CALL_9
0x4000e80	      0x488d7c2408	                      lea rdi, [rsp + 8]	       411	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_7	CALL_9
0x4000e85	      0xe8b6f1ffff	                       call sym.getvalue	       411	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_7	CALL_9
0x4000e8a	            0x85c0	                           test eax, eax	       411	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_7	CALL_9
0x4000e8c	     0xf843a020000	                            je 0x40010cc	       411	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_7	CALL_9
0x4000e92	        0x498b5528	            mov rdx, qword [r13 + 0x28] 	       413	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_8
0x4000e96	      0x488b442418	            mov rax, qword [rsp + 0x18] 	       413	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_8
0x4000e9b	          0x4839c2	                            cmp rdx, rax	       413	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_8
0x4000e9e	            0x760f	                           jbe 0x4000eaf	       413	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_8
0x4000ea0	      0x4889542418	             mov qword [rsp + 0x18], rdx	       414	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_8
0x4000ea5	    0x49c745380000	               mov qword [r13 + 0x38], 0	       415	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000ead	            0xeb12	                           jmp 0x4000ec1	       415	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000eaf	          0x4829d0	                            sub rax, rdx	       415	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000eb2	        0x49894538	             mov qword [r13 + 0x38], rax	       415	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000eb6	      0xa900000080	                    test eax, 0x80000000	       418	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_9
0x4000ebb	     0xf85e3010000	                           jne 0x40010a4	       418	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_9
0x4000ec1	    0x41c745200301	          mov dword [r13 + 0x20], 0x103 	       420	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000ec9	      0xe9ac010000	                           jmp 0x400107a	       421	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000ece	      0xbe38000000	                           mov esi, 0x38	       432	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000ed3	          0x4889ef	                            mov rdi, rbp	       432	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000ed6	      0xe800000000	                          call 0x4000edb	       432	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000edb	          0x4989c4	                            mov r12, rax	       432	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000ede	      0x488b442408	                mov rax, qword [rsp + 8]	       434	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000ee3	        0x440fb630	                  movzx r14d, byte [rax]	       434	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000ee7	          0x4d85e4	                           test r12, r12	       436	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_10
0x4000eea	     0xf84bb010000	                            je 0x40010ab	       436	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_10
0x4000ef0	        0x49892c24	                    mov qword [r12], rbp	       438	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000ef4	    0x488344240801	                  add qword [rsp + 8], 1	       439	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000efa	    0x8385b8000000	               add dword [rbp + 0xb8], 1	       440	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000f01	    0x814d44000200	            or dword [rbp + 0x44], 0x200	       441	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000f08	    0x488b85f80000	            mov rax, qword [rbp + 0xf8] 	       442	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000f0f	        0x488b4010	            mov rax, qword [rax + 0x10] 	       442	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000f13	      0x4989442430	             mov qword [r12 + 0x30], rax	       442	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000f18	    0x488b85f80000	            mov rax, qword [rbp + 0xf8] 	       443	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000f1f	        0x4c896010	             mov qword [rax + 0x10], r12	       443	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000f23	          0x4889d9	                            mov rcx, rbx	       444	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_11	CALL_11
0x4000f26	      0x488d542414	                   lea rdx, [rsp + 0x14]	       444	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_11	CALL_11
0x4000f2b	      0x488d742408	                      lea rsi, [rsp + 8]	       444	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_11	CALL_11
0x4000f30	      0x488d7c2420	                   lea rdi, [rsp + 0x20]	       444	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_11	CALL_11
0x4000f35	      0xe8bef1ffff	                         call sym.getsym	       444	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_11	CALL_11
0x4000f3a	            0x85c0	                           test eax, eax	       444	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_11	CALL_11
0x4000f3c	     0xf848a010000	                            je 0x40010cc	       444	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_11	CALL_11
0x4000f42	        0x8b742414	            mov esi, dword [rsp + 0x14] 	       447	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	CALL_12
0x4000f46	        0x4883c601	                              add rsi, 1	       447	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	CALL_12
0x4000f4a	          0x4889ef	                            mov rdi, rbp	       447	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	CALL_12
0x4000f4d	      0xe800000000	                          call 0x4000f52	       447	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	CALL_12
0x4000f52	      0x4989442408	                mov qword [r12 + 8], rax	       446	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000f57	          0x4885c0	                           test rax, rax	       448	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_12
0x4000f5a	     0xf8452010000	                            je 0x40010b2	       448	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_12
0x4000f60	        0x8b542414	            mov edx, dword [rsp + 0x14] 	        53	string3.h	FUNCTION_41	CALL_3
0x4000f64	          0x8d5201	                      lea edx, [rdx + 1]	        53	string3.h	FUNCTION_41	CALL_3
0x4000f67	      0x488d742420	                   lea rsi, [rsp + 0x20]	        53	string3.h	FUNCTION_41	CALL_3
0x4000f6c	          0x4889c7	                            mov rdi, rax	        53	string3.h	FUNCTION_41	CALL_3
0x4000f6f	      0xe800000000	                          call 0x4000f74	        53	string3.h	FUNCTION_41	CALL_3
0x4000f74	      0x4d896c2420	             mov qword [r12 + 0x20], r13	       451	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000f79	        0x4180fe34	                          cmp r14b, 0x34	       453	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_13
0x4000f7d	           0xf9ec0	                                setle al	       453	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_13
0x4000f80	           0xfb6c0	                           movzx eax, al	       453	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_13
0x4000f83	          0x83c001	                              add eax, 1	       453	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_13
0x4000f86	      0x4189442418	             mov dword [r12 + 0x18], eax	       453	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_13
0x4000f8b	          0x4489f0	                           mov eax, r14d	       456	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_14
0x4000f8e	          0x83e0fb	                     and eax, 0xfffffffb	       456	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_14
0x4000f91	            0x3c32	                            cmp al, 0x32	       456	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_14
0x4000f93	            0x750e	                           jne 0x4000fa3	       456	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_14
0x4000f95	    0x49c744242000	               mov qword [r12 + 0x20], 0	       457	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_14
0x4000f9e	      0xe9b3000000	                           jmp 0x4001056	       457	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_14
0x4000fa3	            0x3c33	                            cmp al, 0x33	       458	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15
0x4000fa5	            0x7557	                           jne 0x4000ffe	       458	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15
0x4000fa7	        0x418b4520	            mov eax, dword [r13 + 0x20] 	       460	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	IF_16
0x4000fab	            0xa820	                           test al, 0x20	       460	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	IF_16
0x4000fad	            0x750c	                           jne 0x4000fbb	       460	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	IF_16
0x4000faf	          0x83c810	                            or eax, 0x10	       461	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	IF_16
0x4000fb2	        0x41894520	             mov dword [r13 + 0x20], eax	       461	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	IF_16
0x4000fb6	      0xe99b000000	                           jmp 0x4001056	       461	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	IF_16
0x4000fbb	          0x4d85ff	                           test r15, r15	       464	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	IF_17
0x4000fbe	            0x7537	                           jne 0x4000ff7	       464	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	IF_17
0x4000fc0	          0x4c89ee	                            mov rsi, r13	       466	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	CALL_14
0x4000fc3	      0xbf00000000	                              mov edi, 0	       466	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	CALL_14
0x4000fc8	      0xe800000000	                          call 0x4000fcd	       466	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	CALL_14
0x4000fcd	          0x4989c7	                            mov r15, rax	       466	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	CALL_14
0x4000fd0	          0x4885c0	                           test rax, rax	       467	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	IF_18
0x4000fd3	            0x7522	                           jne 0x4000ff7	       467	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	IF_18
0x4000fd5	        0x418b5520	            mov edx, dword [r13 + 0x20] 	       468	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	IF_18	CALL_15
0x4000fd9	          0x83e2cf	                     and edx, 0xffffffcf	       468	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	IF_18	CALL_15
0x4000fdc	          0x83ca10	                            or edx, 0x10	       468	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	IF_18	CALL_15
0x4000fdf	        0x498b7500	                    mov rsi, qword [r13]	       468	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	IF_18	CALL_15
0x4000fe3	          0x4889ef	                            mov rdi, rbp	       468	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	IF_18	CALL_15
0x4000fe6	      0xe800000000	                          call 0x4000feb	       468	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	IF_18	CALL_15
0x4000feb	          0x4989c7	                            mov r15, rax	       468	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	IF_18	CALL_15
0x4000fee	          0x4885c0	                           test rax, rax	       471	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	IF_19
0x4000ff1	     0xf84c2000000	                            je 0x40010b9	       471	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	IF_19
0x4000ff7	      0x4d897c2420	             mov qword [r12 + 0x20], r15	       473	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3
0x4000ffc	            0xeb58	                           jmp 0x4001056	       473	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3
0x4000ffe	        0x4183ee34	                          sub r14d, 0x34	       476	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20
0x4001002	        0x41f6c6fb	                         test r14b, 0xfb	       476	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20
0x4001006	            0x754e	                           jne 0x4001056	       476	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20
0x4001008	        0x418b4520	            mov eax, dword [r13 + 0x20] 	       478	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	IF_21
0x400100c	            0xa810	                           test al, 0x10	       478	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	IF_21
0x400100e	            0x7509	                           jne 0x4001019	       478	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	IF_21
0x4001010	          0x83c820	                            or eax, 0x20	       479	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	IF_21
0x4001013	        0x41894520	             mov dword [r13 + 0x20], eax	       479	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	IF_21
0x4001017	            0xeb3d	                           jmp 0x4001056	       479	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	IF_21
0x4001019	          0x4d85ff	                           test r15, r15	       482	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_22
0x400101c	            0x7533	                           jne 0x4001051	       482	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_22
0x400101e	          0x4c89ee	                            mov rsi, r13	       484	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	CALL_16
0x4001021	      0xbf00000000	                              mov edi, 0	       484	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	CALL_16
0x4001026	      0xe800000000	                          call 0x400102b	       484	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	CALL_16
0x400102b	          0x4989c7	                            mov r15, rax	       484	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	CALL_16
0x400102e	          0x4885c0	                           test rax, rax	       485	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_23
0x4001031	            0x751e	                           jne 0x4001051	       485	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_23
0x4001033	        0x418b5520	            mov edx, dword [r13 + 0x20] 	       486	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_23	CALL_17
0x4001037	          0x83e2cf	                     and edx, 0xffffffcf	       486	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_23	CALL_17
0x400103a	          0x83ca20	                            or edx, 0x20	       486	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_23	CALL_17
0x400103d	        0x498b7500	                    mov rsi, qword [r13]	       486	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_23	CALL_17
0x4001041	          0x4889ef	                            mov rdi, rbp	       486	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_23	CALL_17
0x4001044	      0xe800000000	                          call 0x4001049	       486	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_23	CALL_17
0x4001049	          0x4989c7	                            mov r15, rax	       486	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_23	CALL_17
0x400104c	          0x4885c0	                           test rax, rax	       489	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_24
0x400104f	            0x746f	                            je 0x40010c0	       489	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_24
0x4001051	      0x4d897c2420	             mov qword [r12 + 0x20], r15	       491	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5
0x4001056	          0x4889da	                            mov rdx, rbx	       494	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_25	CALL_18
0x4001059	      0x488d742418	                   lea rsi, [rsp + 0x18]	       494	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_25	CALL_18
0x400105e	      0x488d7c2408	                      lea rdi, [rsp + 8]	       494	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_25	CALL_18
0x4001063	      0xe8d8efffff	                       call sym.getvalue	       494	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_25	CALL_18
0x4001068	            0x85c0	                           test eax, eax	       494	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_25	CALL_18
0x400106a	            0x7460	                            je 0x40010cc	       494	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_25	CALL_18
0x400106c	      0x488b442418	            mov rax, qword [rsp + 0x18] 	       496	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4001071	        0x492b4528	             sub rax, qword [r13 + 0x28]	       496	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4001075	      0x4989442410	             mov qword [r12 + 0x10], rax	       496	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x400107a	      0x488b542408	                mov rdx, qword [rsp + 8]	       403	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2
0x400107f	          0x4839d3	                            cmp rbx, rdx	       403	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2
0x4001082	            0x7643	                           jbe 0x40010c7	       403	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2
0x4001084	           0xfb602	                   movzx eax, byte [rdx]	       403	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2
0x4001087	            0x84c0	                             test al, al	       403	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2
0x4001089	     0xf85b2fdffff	                           jne 0x4000e41	       403	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2
0x400108f	      0xb801000000	                              mov eax, 1	       505	tekhex.c	FUNCTION_6
0x4001094	            0xeb36	                           jmp 0x40010cc	       505	tekhex.c	FUNCTION_6
0x4001096	      0xb800000000	                              mov eax, 0	       400	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	IF_5
0x400109b	            0xeb2f	                           jmp 0x40010cc	       400	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	IF_5
0x400109d	      0xb800000000	                              mov eax, 0	       500	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40010a2	            0xeb28	                           jmp 0x40010cc	       500	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40010a4	      0xb800000000	                              mov eax, 0	       419	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_9
0x40010a9	            0xeb21	                           jmp 0x40010cc	       419	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_9
0x40010ab	      0xb800000000	                              mov eax, 0	       437	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_10
0x40010b0	            0xeb1a	                           jmp 0x40010cc	       437	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_10
0x40010b2	      0xb800000000	                              mov eax, 0	       449	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_12
0x40010b7	            0xeb13	                           jmp 0x40010cc	       449	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_12
0x40010b9	      0xb800000000	                              mov eax, 0	       472	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	IF_19
0x40010be	            0xeb0c	                           jmp 0x40010cc	       472	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	IF_19
0x40010c0	      0xb800000000	                              mov eax, 0	       490	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_24
0x40010c5	            0xeb05	                           jmp 0x40010cc	       490	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_24
0x40010c7	      0xb801000000	                              mov eax, 1	       505	tekhex.c	FUNCTION_6
0x40010cc	      0x488b4c2438	            mov rcx, qword [rsp + 0x38] 	       506	tekhex.c	FUNCTION_6
0x40010d1	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       506	tekhex.c	FUNCTION_6
0x40010da	            0x7405	                            je 0x40010e1	       506	tekhex.c	FUNCTION_6
0x40010dc	      0xe800000000	                          call 0x40010e1	       506	tekhex.c	FUNCTION_6
0x40010e1	        0x4883c448	                           add rsp, 0x48	       506	tekhex.c	FUNCTION_6
0x40010e5	              0x5b	                                 pop rbx	       506	tekhex.c	FUNCTION_6
0x40010e6	              0x5d	                                 pop rbp	       506	tekhex.c	FUNCTION_6
0x40010e7	            0x415c	                                 pop r12	       506	tekhex.c	FUNCTION_6
0x40010e9	            0x415d	                                 pop r13	       506	tekhex.c	FUNCTION_6
0x40010eb	            0x415e	                                 pop r14	       506	tekhex.c	FUNCTION_6
0x40010ed	            0x415f	                                 pop r15	       506	tekhex.c	FUNCTION_6
0x40010ef	              0xc3	                                     ret	       506	tekhex.c	FUNCTION_6
tekhex_get_symbol_info	CALL,1:DO,0:WHILE,0:FOR,0:functions,0:SWITCH,0:ELSE,0:IF,0	6
0x4000480	        0x4883ec08	                              sub rsp, 8	       930	tekhex.c	FUNCTION_22
0x4000484	          0x4889f7	                            mov rdi, rsi	       930	tekhex.c	FUNCTION_22
0x4000487	          0x4889d6	                            mov rsi, rdx	       931	tekhex.c	FUNCTION_22	CALL_1
0x400048a	      0xe800000000	                          call 0x400048f	       931	tekhex.c	FUNCTION_22	CALL_1
0x400048f	        0x4883c408	                              add rsp, 8	       932	tekhex.c	FUNCTION_22
0x4000493	              0xc3	                                     ret	       932	tekhex.c	FUNCTION_22
tekhex_set_arch_mach	CALL,1:DO,0:WHILE,0:FOR,0:functions,0:SWITCH,0:ELSE,0:IF,0	11
0x4000467	              0x53	                                push rbx	       690	tekhex.c	FUNCTION_14
0x4000468	            0x89f3	                            mov ebx, esi	       690	tekhex.c	FUNCTION_14
0x400046a	      0xe800000000	                          call 0x400046f	       692	tekhex.c	FUNCTION_14	CALL_1
0x400046f	            0x85db	                           test ebx, ebx	       692	tekhex.c	FUNCTION_14	CALL_1
0x4000471	           0xf94c2	                                 sete dl	       692	tekhex.c	FUNCTION_14	CALL_1
0x4000474	            0x85c0	                           test eax, eax	       692	tekhex.c	FUNCTION_14	CALL_1
0x4000476	           0xf95c0	                                setne al	       692	tekhex.c	FUNCTION_14	CALL_1
0x4000479	             0x9d0	                             or eax, edx	       692	tekhex.c	FUNCTION_14	CALL_1
0x400047b	           0xfb6c0	                           movzx eax, al	       692	tekhex.c	FUNCTION_14	CALL_1
0x400047e	              0x5b	                                 pop rbx	       694	tekhex.c	FUNCTION_14
0x400047f	              0xc3	                                     ret	       694	tekhex.c	FUNCTION_14
getvalue	CALL,2:DO,0:WHILE,1:FOR,0:functions,0:SWITCH,0:ELSE,0:IF,4	54
0x4000040	          0x488b0f	                    mov rcx, qword [rdi]	       272	tekhex.c	FUNCTION_2
0x4000043	      0xb800000000	                              mov eax, 0	       277	tekhex.c	FUNCTION_2	IF_1
0x4000048	          0x4839d1	                            cmp rcx, rdx	       276	tekhex.c	FUNCTION_2	IF_1
0x400004b	     0xf83a5000000	                           jae 0x40000f6	       276	tekhex.c	FUNCTION_2	IF_1
0x4000051	           0xfb601	                   movzx eax, byte [rcx]	       279	tekhex.c	FUNCTION_2	IF_2
0x4000054	     0xfb680000000	                   movzx eax, byte [rax]	       279	tekhex.c	FUNCTION_2	IF_2
0x400005b	            0x3c63	                            cmp al, 0x63	       279	tekhex.c	FUNCTION_2	IF_2
0x400005d	     0xf8482000000	                            je 0x40000e5	       279	tekhex.c	FUNCTION_2	IF_2
0x4000063	        0x4c8d4101	                       lea r8, [rcx + 1]	       282	tekhex.c	FUNCTION_2	CALL_1
0x4000067	           0xfb6c0	                           movzx eax, al	       282	tekhex.c	FUNCTION_2	CALL_1
0x400006a	            0x85c0	                           test eax, eax	       284	tekhex.c	FUNCTION_2	IF_3
0x400006c	    0x41b910000000	                           mov r9d, 0x10	       284	tekhex.c	FUNCTION_2	IF_3
0x4000072	        0x410f44c1	                          cmove eax, r9d	       284	tekhex.c	FUNCTION_2	IF_3
0x4000076	        0x448d50ff	                     lea r10d, [rax - 1]	       285	tekhex.c	FUNCTION_2	WHILE_1
0x400007a	          0x4c39c2	                             cmp rdx, r8	       285	tekhex.c	FUNCTION_2	WHILE_1
0x400007d	            0x764d	                           jbe 0x40000cc	       285	tekhex.c	FUNCTION_2	WHILE_1
0x400007f	            0x85c0	                           test eax, eax	       285	tekhex.c	FUNCTION_2	WHILE_1
0x4000081	            0x7449	                            je 0x40000cc	       285	tekhex.c	FUNCTION_2	WHILE_1
0x4000083	         0xfb64101	               movzx eax, byte [rcx + 1]	       287	tekhex.c	FUNCTION_2	WHILE_1	IF_4
0x4000087	     0xfb680000000	                   movzx eax, byte [rax]	       287	tekhex.c	FUNCTION_2	WHILE_1	IF_4
0x400008e	            0x3c63	                            cmp al, 0x63	       287	tekhex.c	FUNCTION_2	WHILE_1	IF_4
0x4000090	            0x7459	                            je 0x40000eb	       287	tekhex.c	FUNCTION_2	WHILE_1	IF_4
0x4000092	      0xb900000000	                              mov ecx, 0	       287	tekhex.c	FUNCTION_2	WHILE_1	IF_4
0x4000097	            0xeb12	                           jmp 0x40000ab	       287	tekhex.c	FUNCTION_2	WHILE_1	IF_4
0x4000099	        0x410fb600	                    movzx eax, byte [r8]	       287	tekhex.c	FUNCTION_2	WHILE_1	IF_4
0x400009d	     0xfb680000000	                   movzx eax, byte [rax]	       287	tekhex.c	FUNCTION_2	WHILE_1	IF_4
0x40000a4	          0x4589ca	                           mov r10d, r9d	       285	tekhex.c	FUNCTION_2	WHILE_1
0x40000a7	            0x3c63	                            cmp al, 0x63	       287	tekhex.c	FUNCTION_2	WHILE_1	IF_4
0x40000a9	            0x7446	                            je 0x40000f1	       287	tekhex.c	FUNCTION_2	WHILE_1	IF_4
0x40000ab	        0x48c1e104	                              shl rcx, 4	       289	tekhex.c	FUNCTION_2	WHILE_1	CALL_2
0x40000af	          0x4989c9	                             mov r9, rcx	       289	tekhex.c	FUNCTION_2	WHILE_1	CALL_2
0x40000b2	        0x4983c001	                               add r8, 1	       289	tekhex.c	FUNCTION_2	WHILE_1	CALL_2
0x40000b6	           0xfb6c8	                           movzx ecx, al	       289	tekhex.c	FUNCTION_2	WHILE_1	CALL_2
0x40000b9	          0x4c09c9	                              or rcx, r9	       289	tekhex.c	FUNCTION_2	WHILE_1	CALL_2
0x40000bc	        0x458d4aff	                      lea r9d, [r10 - 1]	       285	tekhex.c	FUNCTION_2	WHILE_1
0x40000c0	          0x4585d2	                         test r10d, r10d	       285	tekhex.c	FUNCTION_2	WHILE_1
0x40000c3	            0x740f	                            je 0x40000d4	       285	tekhex.c	FUNCTION_2	WHILE_1
0x40000c5	          0x4c39c2	                             cmp rdx, r8	       285	tekhex.c	FUNCTION_2	WHILE_1
0x40000c8	            0x77cf	                            ja 0x4000099	       285	tekhex.c	FUNCTION_2	WHILE_1
0x40000ca	            0xeb08	                           jmp 0x40000d4	       285	tekhex.c	FUNCTION_2	WHILE_1
0x40000cc	          0x4589d1	                           mov r9d, r10d	       285	tekhex.c	FUNCTION_2	WHILE_1
0x40000cf	      0xb900000000	                              mov ecx, 0	       285	tekhex.c	FUNCTION_2	WHILE_1
0x40000d4	          0x4c8907	                     mov qword [rdi], r8	       292	tekhex.c	FUNCTION_2
0x40000d7	          0x48890e	                    mov qword [rsi], rcx	       293	tekhex.c	FUNCTION_2
0x40000da	        0x4183f9ff	             cmp r9d, 0xffffffffffffffff	       294	tekhex.c	FUNCTION_2
0x40000de	           0xf94c0	                                 sete al	       294	tekhex.c	FUNCTION_2
0x40000e1	           0xfb6c0	                           movzx eax, al	       294	tekhex.c	FUNCTION_2
0x40000e4	              0xc3	                                     ret	       294	tekhex.c	FUNCTION_2
0x40000e5	      0xb800000000	                              mov eax, 0	       280	tekhex.c	FUNCTION_2	IF_2
0x40000ea	              0xc3	                                     ret	       280	tekhex.c	FUNCTION_2	IF_2
0x40000eb	      0xb800000000	                              mov eax, 0	       288	tekhex.c	FUNCTION_2	WHILE_1	IF_4
0x40000f0	              0xc3	                                     ret	       288	tekhex.c	FUNCTION_2	WHILE_1	IF_4
0x40000f1	      0xb800000000	                              mov eax, 0	       288	tekhex.c	FUNCTION_2	WHILE_1	IF_4
0x40000f6	            0xf3c3	                                     ret	       295	tekhex.c	FUNCTION_2
tekhex_get_section_contents	CALL,1:DO,0:WHILE,0:FOR,0:functions,0:SWITCH,0:ELSE,0:IF,1	9
0x4000422	      0xb800000000	                              mov eax, 0	       683	tekhex.c	FUNCTION_13
0x4000427	        0xf6462003	               test byte [rsi + 0x20], 3	       677	tekhex.c	FUNCTION_13	IF_1
0x400042b	            0x7418	                            je 0x4000445	       677	tekhex.c	FUNCTION_13	IF_1
0x400042d	        0x4883ec08	                              sub rsp, 8	       676	tekhex.c	FUNCTION_13
0x4000431	    0x41b901000000	                              mov r9d, 1	       679	tekhex.c	FUNCTION_13	IF_1	CALL_1
0x4000437	      0xe8a1feffff	          call sym.move_section_contents	       679	tekhex.c	FUNCTION_13	IF_1	CALL_1
0x400043c	      0xb801000000	                              mov eax, 1	       680	tekhex.c	FUNCTION_13	IF_1
0x4000441	        0x4883c408	                              add rsp, 8	       684	tekhex.c	FUNCTION_13
0x4000445	            0xf3c3	                                     ret	       684	tekhex.c	FUNCTION_13
tekhex_canonicalize_symtab	CALL,2:DO,0:WHILE,1:FOR,0:functions,0:SWITCH,0:ELSE,0:IF,0	15
0x4000176	    0x488b87f80000	            mov rax, qword [rdi + 0xf8] 	       564	tekhex.c	FUNCTION_8
0x400017d	        0x488b4010	            mov rax, qword [rax + 0x10] 	       564	tekhex.c	FUNCTION_8
0x4000181	    0x8b97b8000000	            mov edx, dword [rdi + 0xb8] 	       565	tekhex.c	FUNCTION_8	CALL_1
0x4000187	            0x89d1	                            mov ecx, edx	       567	tekhex.c	FUNCTION_8
0x4000189	    0x48c704ce0000	              mov qword [rsi + rcx*8], 0	       567	tekhex.c	FUNCTION_8
0x4000191	          0x4885c0	                           test rax, rax	       568	tekhex.c	FUNCTION_8	WHILE_1
0x4000194	            0x7412	                            je 0x40001a8	       568	tekhex.c	FUNCTION_8	WHILE_1
0x4000196	          0x83ea01	                              sub edx, 1	       570	tekhex.c	FUNCTION_8	WHILE_1
0x4000199	            0x89d1	                            mov ecx, edx	       570	tekhex.c	FUNCTION_8	WHILE_1
0x400019b	        0x488904ce	            mov qword [rsi + rcx*8], rax	       570	tekhex.c	FUNCTION_8	WHILE_1
0x400019f	        0x488b4030	            mov rax, qword [rax + 0x30] 	       571	tekhex.c	FUNCTION_8	WHILE_1
0x40001a3	          0x4885c0	                           test rax, rax	       568	tekhex.c	FUNCTION_8	WHILE_1
0x40001a6	            0x75ee	                           jne 0x4000196	       568	tekhex.c	FUNCTION_8	WHILE_1
0x40001a8	    0x8b87b8000000	            mov eax, dword [rdi + 0xb8] 	       574	tekhex.c	FUNCTION_8	CALL_2
0x40001ae	              0xc3	                                     ret	       575	tekhex.c	FUNCTION_8
tekhex_sizeof_headers	CALL,0:DO,0:WHILE,0:FOR,0:functions,0:SWITCH,0:ELSE,0:IF,0	2
0x4000251	      0xb800000000	                              mov eax, 0	       910	tekhex.c	FUNCTION_20
0x4000256	              0xc3	                                     ret	       910	tekhex.c	FUNCTION_20
writesym	CALL,1:DO,0:WHILE,1:FOR,0:functions,0:SWITCH,0:ELSE,2:IF,2	43
0x40006a7	          0x4989f8	                             mov r8, rdi	       745	tekhex.c	FUNCTION_17
0x40006aa	          0x488b17	                    mov rdx, qword [rdi]	       746	tekhex.c	FUNCTION_17
0x40006ad	          0x4885f6	                           test rsi, rsi	       747	tekhex.c	FUNCTION_17	CALL_1
0x40006b0	            0x7433	                            je 0x40006e5	       747	tekhex.c	FUNCTION_17	CALL_1
0x40006b2	      0xb800000000	                              mov eax, 0	       747	tekhex.c	FUNCTION_17	CALL_1
0x40006b7	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	       747	tekhex.c	FUNCTION_17	CALL_1
0x40006be	          0x4889f7	                            mov rdi, rsi	       747	tekhex.c	FUNCTION_17	CALL_1
0x40006c1	            0xf2ae	              repne scasb al, byte [rdi]	       747	tekhex.c	FUNCTION_17	CALL_1
0x40006c3	          0x48f7d1	                                 not rcx	       747	tekhex.c	FUNCTION_17	CALL_1
0x40006c6	        0x4883e901	                              sub rcx, 1	       747	tekhex.c	FUNCTION_17	CALL_1
0x40006ca	          0x4189c9	                            mov r9d, ecx	       747	tekhex.c	FUNCTION_17	CALL_1
0x40006cd	          0x83f90f	                            cmp ecx, 0xf	       749	tekhex.c	FUNCTION_17	IF_1
0x40006d0	            0x7e0f	                           jle 0x40006e1	       749	tekhex.c	FUNCTION_17	IF_1
0x40006d2	        0x488d7a01	                      lea rdi, [rdx + 1]	       751	tekhex.c	FUNCTION_17	IF_1
0x40006d6	          0xc60230	                    mov byte [rdx], 0x30	       751	tekhex.c	FUNCTION_17	IF_1
0x40006d9	    0x41b910000000	                           mov r9d, 0x10	       752	tekhex.c	FUNCTION_17	IF_1
0x40006df	            0xeb46	                           jmp 0x4000727	       752	tekhex.c	FUNCTION_17	IF_1
0x40006e1	            0x85c9	                           test ecx, ecx	       756	tekhex.c	FUNCTION_17	ELSE_1	IF_2
0x40006e3	            0x7514	                           jne 0x40006f9	       756	tekhex.c	FUNCTION_17	ELSE_1	IF_2
0x40006e5	        0x488d7a01	                      lea rdi, [rdx + 1]	       758	tekhex.c	FUNCTION_17	ELSE_1	IF_2
0x40006e9	          0xc60231	                    mov byte [rdx], 0x31	       758	tekhex.c	FUNCTION_17	ELSE_1	IF_2
0x40006ec	    0x41b901000000	                              mov r9d, 1	       760	tekhex.c	FUNCTION_17	ELSE_1	IF_2
0x40006f2	      0xbe00000000	                              mov esi, 0	       759	tekhex.c	FUNCTION_17	ELSE_1	IF_2
0x40006f7	            0xeb2e	                           jmp 0x4000727	       759	tekhex.c	FUNCTION_17	ELSE_1	IF_2
0x40006f9	        0x488d7a01	                      lea rdi, [rdx + 1]	       763	tekhex.c	FUNCTION_17	ELSE_1	ELSE_2
0x40006fd	          0x4863c9	                         movsxd rcx, ecx	       763	tekhex.c	FUNCTION_17	ELSE_1	ELSE_2
0x4000700	     0xfb681000000	                   movzx eax, byte [rcx]	       763	tekhex.c	FUNCTION_17	ELSE_1	ELSE_2
0x4000707	            0x8802	                      mov byte [rdx], al	       763	tekhex.c	FUNCTION_17	ELSE_1	ELSE_2
0x4000709	            0xeb1c	                           jmp 0x4000727	       763	tekhex.c	FUNCTION_17	ELSE_1	ELSE_2
0x400070b	         0xfb61406	             movzx edx, byte [rsi + rax]	       767	tekhex.c	FUNCTION_17	WHILE_1
0x400070f	          0x881407	                mov byte [rdi + rax], dl	       767	tekhex.c	FUNCTION_17	WHILE_1
0x4000712	        0x4883c001	                              add rax, 1	       767	tekhex.c	FUNCTION_17	WHILE_1
0x4000716	          0x4839c8	                            cmp rax, rcx	       766	tekhex.c	FUNCTION_17	WHILE_1
0x4000719	            0x75f0	                           jne 0x400070b	       766	tekhex.c	FUNCTION_17	WHILE_1
0x400071b	          0x4589c9	                            mov r9d, r9d	       769	tekhex.c	FUNCTION_17
0x400071e	      0x4a8d440f01	                 lea rax, [rdi + r9 + 1]	       769	tekhex.c	FUNCTION_17
0x4000723	          0x498900	                     mov qword [r8], rax	       769	tekhex.c	FUNCTION_17
0x4000726	              0xc3	                                     ret	       770	tekhex.c	FUNCTION_17
0x4000727	        0x4183e901	                              sub r9d, 1	       766	tekhex.c	FUNCTION_17	WHILE_1
0x400072b	          0x4489c9	                            mov ecx, r9d	       766	tekhex.c	FUNCTION_17	WHILE_1
0x400072e	        0x4883c101	                              add rcx, 1	       766	tekhex.c	FUNCTION_17	WHILE_1
0x4000732	      0xb800000000	                              mov eax, 0	       766	tekhex.c	FUNCTION_17	WHILE_1
0x4000737	            0xebd2	                           jmp 0x400070b	       766	tekhex.c	FUNCTION_17	WHILE_1
pass_over	CALL,7:DO,0:WHILE,2:FOR,0:functions,0:SWITCH,0:ELSE,0:IF,7	97
0x4000a6b	            0x4157	                                push r15	       513	tekhex.c	FUNCTION_7
0x4000a6d	            0x4156	                                push r14	       513	tekhex.c	FUNCTION_7
0x4000a6f	            0x4155	                                push r13	       513	tekhex.c	FUNCTION_7
0x4000a71	            0x4154	                                push r12	       513	tekhex.c	FUNCTION_7
0x4000a73	              0x55	                                push rbp	       513	tekhex.c	FUNCTION_7
0x4000a74	              0x53	                                push rbx	       513	tekhex.c	FUNCTION_7
0x4000a75	    0x4881ec180100	                          sub rsp, 0x118	       513	tekhex.c	FUNCTION_7
0x4000a7c	          0x4889fb	                            mov rbx, rdi	       513	tekhex.c	FUNCTION_7
0x4000a7f	          0x4889f5	                            mov rbp, rsi	       513	tekhex.c	FUNCTION_7
0x4000a82	    0x64488b042528	                mov rax, qword fs:[0x28]	       513	tekhex.c	FUNCTION_7
0x4000a8b	    0x488984240801	            mov qword [rsp + 0x108], rax	       513	tekhex.c	FUNCTION_7
0x4000a93	            0x31c0	                            xor eax, eax	       513	tekhex.c	FUNCTION_7
0x4000a95	      0xba00000000	                              mov edx, 0	       518	tekhex.c	FUNCTION_7	IF_1	CALL_2
0x4000a9a	      0xbe00000000	                              mov esi, 0	       518	tekhex.c	FUNCTION_7	IF_1	CALL_2
0x4000a9f	      0xe800000000	                          call 0x4000aa4	       518	tekhex.c	FUNCTION_7	IF_1	CALL_2
0x4000aa4	          0x4189c4	                           mov r12d, eax	       518	tekhex.c	FUNCTION_7	IF_1	CALL_2
0x4000aa7	            0x85c0	                           test eax, eax	       518	tekhex.c	FUNCTION_7	IF_1	CALL_2
0x4000aa9	     0xf85ed000000	                           jne 0x4000b9c	       518	tekhex.c	FUNCTION_7	IF_1	CALL_2
0x4000aaf	          0x4889da	                            mov rdx, rbx	       527	tekhex.c	FUNCTION_7	WHILE_1	CALL_3
0x4000ab2	      0xbe01000000	                              mov esi, 1	       527	tekhex.c	FUNCTION_7	WHILE_1	CALL_3
0x4000ab7	          0x4889e7	                            mov rdi, rsp	       527	tekhex.c	FUNCTION_7	WHILE_1	CALL_3
0x4000aba	      0xe800000000	                          call 0x4000abf	       527	tekhex.c	FUNCTION_7	WHILE_1	CALL_3
0x4000abf	        0x803c2425	                    cmp byte [rsp], 0x25	       528	tekhex.c	FUNCTION_7	WHILE_1	WHILE_2
0x4000ac3	            0x7406	                            je 0x4000acb	       528	tekhex.c	FUNCTION_7	WHILE_1	WHILE_2
0x4000ac5	        0x4883f801	                              cmp rax, 1	       528	tekhex.c	FUNCTION_7	WHILE_1	WHILE_2
0x4000ac9	            0x740c	                            je 0x4000ad7	       528	tekhex.c	FUNCTION_7	WHILE_1	WHILE_2
0x4000acb	        0x4883f801	                              cmp rax, 1	       527	tekhex.c	FUNCTION_7	WHILE_1	CALL_3
0x4000acf	           0xf95c0	                                setne al	       527	tekhex.c	FUNCTION_7	WHILE_1	CALL_3
0x4000ad2	           0xfb6c0	                           movzx eax, al	       527	tekhex.c	FUNCTION_7	WHILE_1	CALL_3
0x4000ad5	            0xeb26	                           jmp 0x4000afd	       527	tekhex.c	FUNCTION_7	WHILE_1	CALL_3
0x4000ad7	          0x4889da	                            mov rdx, rbx	       529	tekhex.c	FUNCTION_7	WHILE_1	CALL_4
0x4000ada	      0xbe01000000	                              mov esi, 1	       529	tekhex.c	FUNCTION_7	WHILE_1	CALL_4
0x4000adf	          0x4889e7	                            mov rdi, rsp	       529	tekhex.c	FUNCTION_7	WHILE_1	CALL_4
0x4000ae2	      0xe800000000	                          call 0x4000ae7	       529	tekhex.c	FUNCTION_7	WHILE_1	CALL_4
0x4000ae7	        0x803c2425	                    cmp byte [rsp], 0x25	       528	tekhex.c	FUNCTION_7	WHILE_1	WHILE_2
0x4000aeb	            0x7406	                            je 0x4000af3	       528	tekhex.c	FUNCTION_7	WHILE_1	WHILE_2
0x4000aed	        0x4883f801	                              cmp rax, 1	       528	tekhex.c	FUNCTION_7	WHILE_1	WHILE_2
0x4000af1	            0x74e4	                            je 0x4000ad7	       528	tekhex.c	FUNCTION_7	WHILE_1	WHILE_2
0x4000af3	        0x4883f801	                              cmp rax, 1	       529	tekhex.c	FUNCTION_7	WHILE_1	CALL_4
0x4000af7	           0xf95c0	                                setne al	       529	tekhex.c	FUNCTION_7	WHILE_1	CALL_4
0x4000afa	           0xfb6c0	                           movzx eax, al	       529	tekhex.c	FUNCTION_7	WHILE_1	CALL_4
0x4000afd	            0x85c0	                           test eax, eax	       531	tekhex.c	FUNCTION_7	WHILE_1	IF_2
0x4000aff	     0xf858f000000	                           jne 0x4000b94	       531	tekhex.c	FUNCTION_7	WHILE_1	IF_2
0x4000b05	          0x4889da	                            mov rdx, rbx	       535	tekhex.c	FUNCTION_7	WHILE_1	IF_3	CALL_5
0x4000b08	      0xbe05000000	                              mov esi, 5	       535	tekhex.c	FUNCTION_7	WHILE_1	IF_3	CALL_5
0x4000b0d	          0x4889e7	                            mov rdi, rsp	       535	tekhex.c	FUNCTION_7	WHILE_1	IF_3	CALL_5
0x4000b10	      0xe800000000	                          call 0x4000b15	       535	tekhex.c	FUNCTION_7	WHILE_1	IF_3	CALL_5
0x4000b15	        0x4883f805	                              cmp rax, 5	       535	tekhex.c	FUNCTION_7	WHILE_1	IF_3	CALL_5
0x4000b19	     0xf8583000000	                           jne 0x4000ba2	       535	tekhex.c	FUNCTION_7	WHILE_1	IF_3	CALL_5
0x4000b1f	    0x440fb66c2402	              movzx r13d, byte [rsp + 2]	       538	tekhex.c	FUNCTION_7	WHILE_1
0x4000b25	         0xfb60424	                   movzx eax, byte [rsp]	       540	tekhex.c	FUNCTION_7	WHILE_1	IF_4
0x4000b29	     0xfb680000000	                   movzx eax, byte [rax]	       540	tekhex.c	FUNCTION_7	WHILE_1	IF_4
0x4000b30	            0x3c63	                            cmp al, 0x63	       540	tekhex.c	FUNCTION_7	WHILE_1	IF_4
0x4000b32	            0x7460	                            je 0x4000b94	       540	tekhex.c	FUNCTION_7	WHILE_1	IF_4
0x4000b34	       0xfb6542401	               movzx edx, byte [rsp + 1]	       540	tekhex.c	FUNCTION_7	WHILE_1	IF_4
0x4000b39	     0xfb692000000	                   movzx edx, byte [rdx]	       540	tekhex.c	FUNCTION_7	WHILE_1	IF_4
0x4000b40	          0x80fa63	                            cmp dl, 0x63	       540	tekhex.c	FUNCTION_7	WHILE_1	IF_4
0x4000b43	            0x744f	                            je 0x4000b94	       540	tekhex.c	FUNCTION_7	WHILE_1	IF_4
0x4000b45	           0xfb6d2	                           movzx edx, dl	       544	tekhex.c	FUNCTION_7	WHILE_1
0x4000b48	           0xfb6c0	                           movzx eax, al	       544	tekhex.c	FUNCTION_7	WHILE_1
0x4000b4b	          0xc1e004	                              shl eax, 4	       544	tekhex.c	FUNCTION_7	WHILE_1
0x4000b4e	      0x448d7402fb	               lea r14d, [rdx + rax - 5]	       544	tekhex.c	FUNCTION_7	WHILE_1
0x4000b53	    0x4181fefe0000	                          cmp r14d, 0xfe	       546	tekhex.c	FUNCTION_7	WHILE_1	IF_5
0x4000b5a	            0x7746	                            ja 0x4000ba2	       546	tekhex.c	FUNCTION_7	WHILE_1	IF_5
0x4000b5c	          0x4589f7	                          mov r15d, r14d	       549	tekhex.c	FUNCTION_7	WHILE_1	IF_6	CALL_6
0x4000b5f	          0x4889da	                            mov rdx, rbx	       549	tekhex.c	FUNCTION_7	WHILE_1	IF_6	CALL_6
0x4000b62	          0x4c89fe	                            mov rsi, r15	       549	tekhex.c	FUNCTION_7	WHILE_1	IF_6	CALL_6
0x4000b65	          0x4889e7	                            mov rdi, rsp	       549	tekhex.c	FUNCTION_7	WHILE_1	IF_6	CALL_6
0x4000b68	      0xe800000000	                          call 0x4000b6d	       549	tekhex.c	FUNCTION_7	WHILE_1	IF_6	CALL_6
0x4000b6d	          0x4939c7	                            cmp r15, rax	       549	tekhex.c	FUNCTION_7	WHILE_1	IF_6	CALL_6
0x4000b70	            0x7530	                           jne 0x4000ba2	       549	tekhex.c	FUNCTION_7	WHILE_1	IF_6	CALL_6
0x4000b72	          0x4589f6	                          mov r14d, r14d	       553	tekhex.c	FUNCTION_7	WHILE_1
0x4000b75	      0x42c6043400	                 mov byte [rsp + r14], 0	       553	tekhex.c	FUNCTION_7	WHILE_1
0x4000b7a	        0x4a8d0c3c	                    lea rcx, [rsp + r15]	       554	tekhex.c	FUNCTION_7	WHILE_1	IF_7	CALL_7
0x4000b7e	        0x410fbef5	                         movsx esi, r13b	       554	tekhex.c	FUNCTION_7	WHILE_1	IF_7	CALL_7
0x4000b82	          0x4889e2	                            mov rdx, rsp	       554	tekhex.c	FUNCTION_7	WHILE_1	IF_7	CALL_7
0x4000b85	          0x4889df	                            mov rdi, rbx	       554	tekhex.c	FUNCTION_7	WHILE_1	IF_7	CALL_7
0x4000b88	            0xffd5	                                call rbp	       554	tekhex.c	FUNCTION_7	WHILE_1	IF_7	CALL_7
0x4000b8a	            0x85c0	                           test eax, eax	       554	tekhex.c	FUNCTION_7	WHILE_1	IF_7	CALL_7
0x4000b8c	     0xf851dffffff	                           jne 0x4000aaf	       554	tekhex.c	FUNCTION_7	WHILE_1	IF_7	CALL_7
0x4000b92	            0xeb0e	                           jmp 0x4000ba2	       554	tekhex.c	FUNCTION_7	WHILE_1	IF_7	CALL_7
0x4000b94	    0x41bc01000000	                             mov r12d, 1	       558	tekhex.c	FUNCTION_7
0x4000b9a	            0xeb06	                           jmp 0x4000ba2	       558	tekhex.c	FUNCTION_7
0x4000b9c	    0x41bc00000000	                             mov r12d, 0	       519	tekhex.c	FUNCTION_7	IF_1
0x4000ba2	          0x4489e0	                           mov eax, r12d	       559	tekhex.c	FUNCTION_7
0x4000ba5	    0x488b8c240801	           mov rcx, qword [rsp + 0x108] 	       559	tekhex.c	FUNCTION_7
0x4000bad	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       559	tekhex.c	FUNCTION_7
0x4000bb6	            0x7405	                            je 0x4000bbd	       559	tekhex.c	FUNCTION_7
0x4000bb8	      0xe800000000	                          call 0x4000bbd	       559	tekhex.c	FUNCTION_7
0x4000bbd	    0x4881c4180100	                          add rsp, 0x118	       559	tekhex.c	FUNCTION_7
0x4000bc4	              0x5b	                                 pop rbx	       559	tekhex.c	FUNCTION_7
0x4000bc5	              0x5d	                                 pop rbp	       559	tekhex.c	FUNCTION_7
0x4000bc6	            0x415c	                                 pop r12	       559	tekhex.c	FUNCTION_7
0x4000bc8	            0x415d	                                 pop r13	       559	tekhex.c	FUNCTION_7
0x4000bca	            0x415e	                                 pop r14	       559	tekhex.c	FUNCTION_7
0x4000bcc	            0x415f	                                 pop r15	       559	tekhex.c	FUNCTION_7
0x4000bce	              0xc3	                                     ret	       559	tekhex.c	FUNCTION_7
tekhex_mkobject	CALL,1:DO,0:WHILE,0:FOR,0:functions,0:SWITCH,0:ELSE,0:IF,1	16
0x4000a25	              0x53	                                push rbx	       586	tekhex.c	FUNCTION_10
0x4000a26	          0x4889fb	                            mov rbx, rdi	       586	tekhex.c	FUNCTION_10
0x4000a29	      0xbe20000000	                           mov esi, 0x20	       589	tekhex.c	FUNCTION_10	CALL_1
0x4000a2e	      0xe800000000	                          call 0x4000a33	       589	tekhex.c	FUNCTION_10	CALL_1
0x4000a33	          0x4885c0	                           test rax, rax	       590	tekhex.c	FUNCTION_10	IF_1
0x4000a36	            0x742c	                            je 0x4000a64	       590	tekhex.c	FUNCTION_10	IF_1
0x4000a38	    0x488983f80000	             mov qword [rbx + 0xf8], rax	       592	tekhex.c	FUNCTION_10
0x4000a3f	    0xc74008010000	                  mov dword [rax + 8], 1	       593	tekhex.c	FUNCTION_10
0x4000a46	    0x48c700000000	                      mov qword [rax], 0	       594	tekhex.c	FUNCTION_10
0x4000a4d	    0x48c740100000	               mov qword [rax + 0x10], 0	       595	tekhex.c	FUNCTION_10
0x4000a55	    0x48c740180000	               mov qword [rax + 0x18], 0	       596	tekhex.c	FUNCTION_10
0x4000a5d	      0xb801000000	                              mov eax, 1	       597	tekhex.c	FUNCTION_10
0x4000a62	            0xeb05	                           jmp 0x4000a69	       597	tekhex.c	FUNCTION_10
0x4000a64	      0xb800000000	                              mov eax, 0	       591	tekhex.c	FUNCTION_10	IF_1
0x4000a69	              0x5b	                                 pop rbx	       598	tekhex.c	FUNCTION_10
0x4000a6a	              0xc3	                                     ret	       598	tekhex.c	FUNCTION_10
tekhex_set_section_contents	CALL,1:DO,0:WHILE,0:FOR,0:functions,0:SWITCH,0:ELSE,0:IF,1	9
0x40003fd	      0xb800000000	                              mov eax, 0	       712	tekhex.c	FUNCTION_15
0x4000402	        0xf6462003	               test byte [rsi + 0x20], 3	       705	tekhex.c	FUNCTION_15	IF_1
0x4000406	            0x7418	                            je 0x4000420	       705	tekhex.c	FUNCTION_15	IF_1
0x4000408	        0x4883ec08	                              sub rsp, 8	       704	tekhex.c	FUNCTION_15
0x400040c	    0x41b900000000	                              mov r9d, 0	       707	tekhex.c	FUNCTION_15	IF_1	CALL_1
0x4000412	      0xe8c6feffff	          call sym.move_section_contents	       707	tekhex.c	FUNCTION_15	IF_1	CALL_1
0x4000417	      0xb801000000	                              mov eax, 1	       709	tekhex.c	FUNCTION_15	IF_1
0x400041c	        0x4883c408	                              add rsp, 8	       713	tekhex.c	FUNCTION_15
0x4000420	            0xf3c3	                                     ret	       713	tekhex.c	FUNCTION_15
out	CALL,4:DO,0:WHILE,0:FOR,1:functions,0:SWITCH,0:ELSE,0:IF,2	85
0x40004e3	            0x4155	                                push r13	       774	tekhex.c	FUNCTION_18
0x40004e5	            0x4154	                                push r12	       774	tekhex.c	FUNCTION_18
0x40004e7	              0x55	                                push rbp	       774	tekhex.c	FUNCTION_18
0x40004e8	              0x53	                                push rbx	       774	tekhex.c	FUNCTION_18
0x40004e9	        0x4883ec18	                           sub rsp, 0x18	       774	tekhex.c	FUNCTION_18
0x40004ed	          0x4989fd	                            mov r13, rdi	       774	tekhex.c	FUNCTION_18
0x40004f0	          0x4989d4	                            mov r12, rdx	       774	tekhex.c	FUNCTION_18
0x40004f3	          0x4889cb	                            mov rbx, rcx	       774	tekhex.c	FUNCTION_18
0x40004f6	    0x64488b042528	                mov rax, qword fs:[0x28]	       774	tekhex.c	FUNCTION_18
0x40004ff	      0x4889442408	                mov qword [rsp + 8], rax	       774	tekhex.c	FUNCTION_18
0x4000504	            0x31c0	                            xor eax, eax	       774	tekhex.c	FUNCTION_18
0x4000506	        0xc6042425	                    mov byte [rsp], 0x25	       780	tekhex.c	FUNCTION_18
0x400050a	          0x4889cd	                            mov rbp, rcx	       781	tekhex.c	FUNCTION_18
0x400050d	          0x4829d5	                            sub rbp, rdx	       781	tekhex.c	FUNCTION_18
0x4000510	        0x488d4505	                      lea rax, [rbp + 5]	       781	tekhex.c	FUNCTION_18
0x4000514	          0x4889c2	                            mov rdx, rax	       781	tekhex.c	FUNCTION_18
0x4000517	          0x83e20f	                            and edx, 0xf	       781	tekhex.c	FUNCTION_18
0x400051a	     0xfb6ba000000	                   movzx edi, byte [rdx]	       781	tekhex.c	FUNCTION_18
0x4000521	      0x40887c2402	                 mov byte [rsp + 2], dil	       781	tekhex.c	FUNCTION_18
0x4000526	        0x48c1f804	                              sar rax, 4	       781	tekhex.c	FUNCTION_18
0x400052a	          0x83e00f	                            and eax, 0xf	       781	tekhex.c	FUNCTION_18
0x400052d	    0x440fb6800000	                   movzx r8d, byte [rax]	       781	tekhex.c	FUNCTION_18
0x4000535	      0x4488442401	                 mov byte [rsp + 1], r8b	       781	tekhex.c	FUNCTION_18
0x400053a	      0x4088742403	                 mov byte [rsp + 3], sil	       782	tekhex.c	FUNCTION_18
0x400053f	          0x4c39e1	                            cmp rcx, r12	       784	tekhex.c	FUNCTION_18	FOR_1
0x4000542	            0x761f	                           jbe 0x4000563	       784	tekhex.c	FUNCTION_18	FOR_1
0x4000544	          0x4c89e0	                            mov rax, r12	       784	tekhex.c	FUNCTION_18	FOR_1
0x4000547	      0xba00000000	                              mov edx, 0	       784	tekhex.c	FUNCTION_18	FOR_1
0x400054c	           0xfb608	                   movzx ecx, byte [rax]	       785	tekhex.c	FUNCTION_18	FOR_1
0x400054f	     0xfbe89000000	                   movsx ecx, byte [rcx]	       785	tekhex.c	FUNCTION_18	FOR_1
0x4000556	             0x1ca	                            add edx, ecx	       785	tekhex.c	FUNCTION_18	FOR_1
0x4000558	        0x4883c001	                              add rax, 1	       784	tekhex.c	FUNCTION_18	FOR_1
0x400055c	          0x4839c3	                            cmp rbx, rax	       784	tekhex.c	FUNCTION_18	FOR_1
0x400055f	            0x75eb	                           jne 0x400054c	       784	tekhex.c	FUNCTION_18	FOR_1
0x4000561	            0xeb05	                           jmp 0x4000568	       784	tekhex.c	FUNCTION_18	FOR_1
0x4000563	      0xba00000000	                              mov edx, 0	       775	tekhex.c	FUNCTION_18
0x4000568	        0x450fb6c0	                          movzx r8d, r8b	       787	tekhex.c	FUNCTION_18
0x400056c	    0x410fbe800000	                    movsx eax, byte [r8]	       787	tekhex.c	FUNCTION_18
0x4000574	             0x1c2	                            add edx, eax	       787	tekhex.c	FUNCTION_18
0x4000576	        0x400fb6ff	                          movzx edi, dil	       788	tekhex.c	FUNCTION_18
0x400057a	     0xfbe87000000	                   movsx eax, byte [rdi]	       788	tekhex.c	FUNCTION_18
0x4000581	             0x1c2	                            add edx, eax	       788	tekhex.c	FUNCTION_18
0x4000583	        0x400fb6f6	                          movzx esi, sil	       789	tekhex.c	FUNCTION_18
0x4000587	     0xfbe86000000	                   movsx eax, byte [rsi]	       789	tekhex.c	FUNCTION_18
0x400058e	             0x1c2	                            add edx, eax	       789	tekhex.c	FUNCTION_18
0x4000590	            0x89d0	                            mov eax, edx	       790	tekhex.c	FUNCTION_18
0x4000592	          0x83e00f	                            and eax, 0xf	       790	tekhex.c	FUNCTION_18
0x4000595	     0xfb680000000	                   movzx eax, byte [rax]	       790	tekhex.c	FUNCTION_18
0x400059c	        0x88442405	                  mov byte [rsp + 5], al	       790	tekhex.c	FUNCTION_18
0x40005a0	          0xc1fa04	                              sar edx, 4	       790	tekhex.c	FUNCTION_18
0x40005a3	          0x83e20f	                            and edx, 0xf	       790	tekhex.c	FUNCTION_18
0x40005a6	     0xfb682000000	                   movzx eax, byte [rdx]	       790	tekhex.c	FUNCTION_18
0x40005ad	        0x88442404	                  mov byte [rsp + 4], al	       790	tekhex.c	FUNCTION_18
0x40005b1	          0x4c89ea	                            mov rdx, r13	       791	tekhex.c	FUNCTION_18	IF_1	CALL_1
0x40005b4	      0xbe06000000	                              mov esi, 6	       791	tekhex.c	FUNCTION_18	IF_1	CALL_1
0x40005b9	          0x4889e7	                            mov rdi, rsp	       791	tekhex.c	FUNCTION_18	IF_1	CALL_1
0x40005bc	      0xe800000000	                          call 0x40005c1	       791	tekhex.c	FUNCTION_18	IF_1	CALL_1
0x40005c1	        0x4883f806	                              cmp rax, 6	       791	tekhex.c	FUNCTION_18	IF_1	CALL_1
0x40005c5	            0x7414	                            je 0x40005db	       791	tekhex.c	FUNCTION_18	IF_1	CALL_1
0x40005c7	      0xba00000000	                              mov edx, 0	       792	tekhex.c	FUNCTION_18	CALL_2
0x40005cc	      0xbe18030000	                          mov esi, 0x318	       792	tekhex.c	FUNCTION_18	CALL_2
0x40005d1	      0xbf00000000	                              mov edi, 0	       792	tekhex.c	FUNCTION_18	CALL_2
0x40005d6	      0xe800000000	                          call 0x40005db	       792	tekhex.c	FUNCTION_18	CALL_2
0x40005db	          0xc6030a	                     mov byte [rbx], 0xa	       793	tekhex.c	FUNCTION_18
0x40005de	        0x4883c501	                              add rbp, 1	       794	tekhex.c	FUNCTION_18
0x40005e2	          0x4c89ea	                            mov rdx, r13	       795	tekhex.c	FUNCTION_18	IF_2	CALL_3
0x40005e5	          0x4889ee	                            mov rsi, rbp	       795	tekhex.c	FUNCTION_18	IF_2	CALL_3
0x40005e8	          0x4c89e7	                            mov rdi, r12	       795	tekhex.c	FUNCTION_18	IF_2	CALL_3
0x40005eb	      0xe800000000	                          call 0x40005f0	       795	tekhex.c	FUNCTION_18	IF_2	CALL_3
0x40005f0	          0x4839c5	                            cmp rbp, rax	       795	tekhex.c	FUNCTION_18	IF_2	CALL_3
0x40005f3	            0x7414	                            je 0x4000609	       795	tekhex.c	FUNCTION_18	IF_2	CALL_3
0x40005f5	      0xba00000000	                              mov edx, 0	       796	tekhex.c	FUNCTION_18	CALL_4
0x40005fa	      0xbe1c030000	                          mov esi, 0x31c	       796	tekhex.c	FUNCTION_18	CALL_4
0x40005ff	      0xbf00000000	                              mov edi, 0	       796	tekhex.c	FUNCTION_18	CALL_4
0x4000604	      0xe800000000	                          call 0x4000609	       796	tekhex.c	FUNCTION_18	CALL_4
0x4000609	      0x488b442408	                mov rax, qword [rsp + 8]	       797	tekhex.c	FUNCTION_18
0x400060e	    0x644833042528	                xor rax, qword fs:[0x28]	       797	tekhex.c	FUNCTION_18
0x4000617	            0x7405	                            je 0x400061e	       797	tekhex.c	FUNCTION_18
0x4000619	      0xe800000000	                          call 0x400061e	       797	tekhex.c	FUNCTION_18
0x400061e	        0x4883c418	                           add rsp, 0x18	       797	tekhex.c	FUNCTION_18
0x4000622	              0x5b	                                 pop rbx	       797	tekhex.c	FUNCTION_18
0x4000623	              0x5d	                                 pop rbp	       797	tekhex.c	FUNCTION_18
0x4000624	            0x415c	                                 pop r12	       797	tekhex.c	FUNCTION_18
0x4000626	            0x415d	                                 pop r13	       797	tekhex.c	FUNCTION_18
0x4000628	              0xc3	                                     ret	       797	tekhex.c	FUNCTION_18
tekhex_get_symtab_upper_bound	CALL,0:DO,0:WHILE,0:FOR,0:functions,0:SWITCH,0:ELSE,0:IF,0	4
0x40001af	    0x8b87b8000000	            mov eax, dword [rdi + 0xb8] 	       580	tekhex.c	FUNCTION_9
0x40001b5	          0x8d4001	                      lea eax, [rax + 1]	       580	tekhex.c	FUNCTION_9
0x40001b8	        0x48c1e003	                              shl rax, 3	       580	tekhex.c	FUNCTION_9
0x40001bc	              0xc3	                                     ret	       582	tekhex.c	FUNCTION_9
tekhex_init	CALL,1:DO,0:WHILE,0:FOR,3:functions,0:SWITCH,0:ELSE,0:IF,1	29
0x4000629	    0x833d00000000	               cmp dword [0x04000630], 0	       210	tekhex.c	FUNCTION_1	IF_1
0x4000630	            0x7573	                           jne 0x40006a5	       210	tekhex.c	FUNCTION_1	IF_1
0x4000632	        0x4883ec08	                              sub rsp, 8	       205	tekhex.c	FUNCTION_1
0x4000636	    0xc70500000000	               mov dword [0x04000640], 1	       212	tekhex.c	FUNCTION_1	IF_1
0x4000640	      0xe800000000	                          call 0x4000645	       213	tekhex.c	FUNCTION_1	IF_1	CALL_1
0x4000645	      0xb800000000	                              mov eax, 0	       213	tekhex.c	FUNCTION_1	IF_1	CALL_1
0x400064a	    0x888000000000	                      mov byte [rax], al	       216	tekhex.c	FUNCTION_1	IF_1	FOR_1
0x4000650	        0x4883c001	                              add rax, 1	       216	tekhex.c	FUNCTION_1	IF_1	FOR_1
0x4000654	        0x4883f80a	                            cmp rax, 0xa	       215	tekhex.c	FUNCTION_1	IF_1	FOR_1
0x4000658	            0x75f0	                           jne 0x400064a	       215	tekhex.c	FUNCTION_1	IF_1	FOR_1
0x400065a	      0xba00000000	                              mov edx, 0	       215	tekhex.c	FUNCTION_1	IF_1	FOR_1
0x400065f	            0x8802	                      mov byte [rdx], al	       219	tekhex.c	FUNCTION_1	IF_1	FOR_2
0x4000661	          0x83c001	                              add eax, 1	       219	tekhex.c	FUNCTION_1	IF_1	FOR_2
0x4000664	        0x4883c201	                              add rdx, 1	       219	tekhex.c	FUNCTION_1	IF_1	FOR_2
0x4000668	          0x83f824	                           cmp eax, 0x24	       218	tekhex.c	FUNCTION_1	IF_1	FOR_2
0x400066b	            0x75f2	                           jne 0x400065f	       218	tekhex.c	FUNCTION_1	IF_1	FOR_2
0x400066d	    0xc60500000000	            mov byte [0x04000674], 0x24 	       221	tekhex.c	FUNCTION_1	IF_1
0x4000674	    0xc60500000000	            mov byte [0x0400067b], 0x25 	       222	tekhex.c	FUNCTION_1	IF_1
0x400067b	    0xc60500000000	            mov byte [0x04000682], 0x26 	       223	tekhex.c	FUNCTION_1	IF_1
0x4000682	    0xc60500000000	            mov byte [0x04000689], 0x27 	       224	tekhex.c	FUNCTION_1	IF_1
0x4000689	      0xba00000000	                              mov edx, 0	       224	tekhex.c	FUNCTION_1	IF_1
0x400068e	      0xb828000000	                           mov eax, 0x28	       224	tekhex.c	FUNCTION_1	IF_1
0x4000693	            0x8802	                      mov byte [rdx], al	       226	tekhex.c	FUNCTION_1	IF_1	FOR_3
0x4000695	          0x83c001	                              add eax, 1	       226	tekhex.c	FUNCTION_1	IF_1	FOR_3
0x4000698	        0x4883c201	                              add rdx, 1	       226	tekhex.c	FUNCTION_1	IF_1	FOR_3
0x400069c	          0x83f842	                           cmp eax, 0x42	       225	tekhex.c	FUNCTION_1	IF_1	FOR_3
0x400069f	            0x75f2	                           jne 0x4000693	       225	tekhex.c	FUNCTION_1	IF_1	FOR_3
0x40006a1	        0x4883c408	                              add rsp, 8	       228	tekhex.c	FUNCTION_1
0x40006a5	            0xf3c3	                                     ret	       228	tekhex.c	FUNCTION_1
tekhex_object_p	CALL,5:DO,0:WHILE,0:FOR,0:functions,0:SWITCH,0:ELSE,0:IF,3	56
0x4000bcf	              0x53	                                push rbx	       605	tekhex.c	FUNCTION_11
0x4000bd0	        0x4883ec10	                           sub rsp, 0x10	       605	tekhex.c	FUNCTION_11
0x4000bd4	          0x4889fb	                            mov rbx, rdi	       605	tekhex.c	FUNCTION_11
0x4000bd7	    0x64488b042528	                mov rax, qword fs:[0x28]	       605	tekhex.c	FUNCTION_11
0x4000be0	      0x4889442408	                mov qword [rsp + 8], rax	       605	tekhex.c	FUNCTION_11
0x4000be5	            0x31c0	                            xor eax, eax	       605	tekhex.c	FUNCTION_11
0x4000be7	      0xe83dfaffff	                    call sym.tekhex_init	       608	tekhex.c	FUNCTION_11	CALL_1
0x4000bec	      0xba00000000	                              mov edx, 0	       610	tekhex.c	FUNCTION_11	IF_1	CALL_2
0x4000bf1	      0xbe00000000	                              mov esi, 0	       610	tekhex.c	FUNCTION_11	IF_1	CALL_2
0x4000bf6	          0x4889df	                            mov rdi, rbx	       610	tekhex.c	FUNCTION_11	IF_1	CALL_2
0x4000bf9	      0xe800000000	                          call 0x4000bfe	       610	tekhex.c	FUNCTION_11	IF_1	CALL_2
0x4000bfe	      0xba00000000	                              mov edx, 0	       612	tekhex.c	FUNCTION_11	IF_1
0x4000c03	            0x85c0	                           test eax, eax	       610	tekhex.c	FUNCTION_11	IF_1	CALL_2
0x4000c05	     0xf8584000000	                           jne 0x4000c8f	       610	tekhex.c	FUNCTION_11	IF_1	CALL_2
0x4000c0b	          0x4889da	                            mov rdx, rbx	       611	tekhex.c	FUNCTION_11	IF_1	CALL_3
0x4000c0e	      0xbe04000000	                              mov esi, 4	       611	tekhex.c	FUNCTION_11	IF_1	CALL_3
0x4000c13	          0x4889e7	                            mov rdi, rsp	       611	tekhex.c	FUNCTION_11	IF_1	CALL_3
0x4000c16	      0xe800000000	                          call 0x4000c1b	       611	tekhex.c	FUNCTION_11	IF_1	CALL_3
0x4000c1b	      0xba00000000	                              mov edx, 0	       612	tekhex.c	FUNCTION_11	IF_1
0x4000c20	        0x4883f804	                              cmp rax, 4	       611	tekhex.c	FUNCTION_11	IF_1	CALL_3
0x4000c24	            0x7569	                           jne 0x4000c8f	       611	tekhex.c	FUNCTION_11	IF_1	CALL_3
0x4000c26	        0x803c2425	                    cmp byte [rsp], 0x25	       614	tekhex.c	FUNCTION_11	IF_2
0x4000c2a	            0x7563	                           jne 0x4000c8f	       614	tekhex.c	FUNCTION_11	IF_2
0x4000c2c	       0xfb6442401	               movzx eax, byte [rsp + 1]	       614	tekhex.c	FUNCTION_11	IF_2
0x4000c31	    0x80b800000000	                    cmp byte [rax], 0x63	       614	tekhex.c	FUNCTION_11	IF_2
0x4000c38	            0x743b	                            je 0x4000c75	       614	tekhex.c	FUNCTION_11	IF_2
0x4000c3a	       0xfb6442402	               movzx eax, byte [rsp + 2]	       614	tekhex.c	FUNCTION_11	IF_2
0x4000c3f	    0x80b800000000	                    cmp byte [rax], 0x63	       614	tekhex.c	FUNCTION_11	IF_2
0x4000c46	            0x7434	                            je 0x4000c7c	       614	tekhex.c	FUNCTION_11	IF_2
0x4000c48	       0xfb6442403	               movzx eax, byte [rsp + 3]	       614	tekhex.c	FUNCTION_11	IF_2
0x4000c4d	    0x80b800000000	                    cmp byte [rax], 0x63	       614	tekhex.c	FUNCTION_11	IF_2
0x4000c54	            0x742d	                            je 0x4000c83	       614	tekhex.c	FUNCTION_11	IF_2
0x4000c56	          0x4889df	                            mov rdi, rbx	       617	tekhex.c	FUNCTION_11	CALL_4
0x4000c59	      0xe8c7fdffff	                call sym.tekhex_mkobject	       617	tekhex.c	FUNCTION_11	CALL_4
0x4000c5e	      0xbe00000000	                              mov esi, 0	       619	tekhex.c	FUNCTION_11	IF_3	CALL_5
0x4000c63	          0x4889df	                            mov rdi, rbx	       619	tekhex.c	FUNCTION_11	IF_3	CALL_5
0x4000c66	      0xe800feffff	                      call sym.pass_over	       619	tekhex.c	FUNCTION_11	IF_3	CALL_5
0x4000c6b	            0x85c0	                           test eax, eax	       619	tekhex.c	FUNCTION_11	IF_3	CALL_5
0x4000c6d	            0x741b	                            je 0x4000c8a	       619	tekhex.c	FUNCTION_11	IF_3	CALL_5
0x4000c6f	        0x488b5308	                mov rdx, qword [rbx + 8]	       622	tekhex.c	FUNCTION_11
0x4000c73	            0xeb1a	                           jmp 0x4000c8f	       622	tekhex.c	FUNCTION_11
0x4000c75	      0xba00000000	                              mov edx, 0	       615	tekhex.c	FUNCTION_11	IF_2
0x4000c7a	            0xeb13	                           jmp 0x4000c8f	       615	tekhex.c	FUNCTION_11	IF_2
0x4000c7c	      0xba00000000	                              mov edx, 0	       615	tekhex.c	FUNCTION_11	IF_2
0x4000c81	            0xeb0c	                           jmp 0x4000c8f	       615	tekhex.c	FUNCTION_11	IF_2
0x4000c83	      0xba00000000	                              mov edx, 0	       615	tekhex.c	FUNCTION_11	IF_2
0x4000c88	            0xeb05	                           jmp 0x4000c8f	       615	tekhex.c	FUNCTION_11	IF_2
0x4000c8a	      0xba00000000	                              mov edx, 0	       620	tekhex.c	FUNCTION_11	IF_3
0x4000c8f	          0x4889d0	                            mov rax, rdx	       623	tekhex.c	FUNCTION_11
0x4000c92	      0x488b4c2408	                mov rcx, qword [rsp + 8]	       623	tekhex.c	FUNCTION_11
0x4000c97	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       623	tekhex.c	FUNCTION_11
0x4000ca0	            0x7405	                            je 0x4000ca7	       623	tekhex.c	FUNCTION_11
0x4000ca2	      0xe800000000	                          call 0x4000ca7	       623	tekhex.c	FUNCTION_11
0x4000ca7	        0x4883c410	                           add rsp, 0x10	       623	tekhex.c	FUNCTION_11
0x4000cab	              0x5b	                                 pop rbx	       623	tekhex.c	FUNCTION_11
0x4000cac	              0xc3	                                     ret	       623	tekhex.c	FUNCTION_11
tekhex_print_symbol	CALL,1:DO,0:WHILE,0:FOR,0:functions,0:SWITCH,1:ELSE,0:IF,0	27
0x4000494	            0x4154	                                push r12	       939	tekhex.c	FUNCTION_23
0x4000496	              0x55	                                push rbp	       939	tekhex.c	FUNCTION_23
0x4000497	              0x53	                                push rbx	       939	tekhex.c	FUNCTION_23
0x4000498	          0x4889f5	                            mov rbp, rsi	       939	tekhex.c	FUNCTION_23
0x400049b	          0x4889d3	                            mov rbx, rdx	       939	tekhex.c	FUNCTION_23
0x400049e	            0x85c9	                           test ecx, ecx	       942	tekhex.c	FUNCTION_23	SWITCH_1
0x40004a0	            0x7407	                            je 0x40004a9	       942	tekhex.c	FUNCTION_23	SWITCH_1
0x40004a2	          0x83f902	                              cmp ecx, 2	       942	tekhex.c	FUNCTION_23	SWITCH_1
0x40004a5	            0x740d	                            je 0x40004b4	       942	tekhex.c	FUNCTION_23	SWITCH_1
0x40004a7	            0xeb35	                           jmp 0x40004de	       942	tekhex.c	FUNCTION_23	SWITCH_1
0x40004a9	        0x488b7a08	                mov rdi, qword [rdx + 8]	        97	stdio2.h	CALL_18
0x40004ad	      0xe800000000	                          call 0x40004b2	        97	stdio2.h	CALL_18
0x40004b2	            0xeb2a	                           jmp 0x40004de	        97	stdio2.h	CALL_18
0x40004b4	        0x488b4220	            mov rax, qword [rdx + 0x20] 	       952	tekhex.c	FUNCTION_23	SWITCH_1
0x40004b8	          0x4c8b20	                    mov r12, qword [rax]	       952	tekhex.c	FUNCTION_23	SWITCH_1
0x40004bb	      0xe800000000	                          call 0x40004c0	       954	tekhex.c	FUNCTION_23	SWITCH_1	CALL_1
0x40004c0	        0x4c8b4308	                 mov r8, qword [rbx + 8]	        97	stdio2.h	CALL_18
0x40004c4	          0x4c89e1	                            mov rcx, r12	        97	stdio2.h	CALL_18
0x40004c7	      0xba00000000	                              mov edx, 0	        97	stdio2.h	CALL_18
0x40004cc	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_18
0x40004d1	          0x4889ef	                            mov rdi, rbp	        97	stdio2.h	CALL_18
0x40004d4	      0xb800000000	                              mov eax, 0	        97	stdio2.h	CALL_18
0x40004d9	      0xe800000000	                          call 0x40004de	        97	stdio2.h	CALL_18
0x40004de	              0x5b	                                 pop rbx	       960	tekhex.c	FUNCTION_23
0x40004df	              0x5d	                                 pop rbp	       960	tekhex.c	FUNCTION_23
0x40004e0	            0x415c	                                 pop r12	       960	tekhex.c	FUNCTION_23
0x40004e2	              0xc3	                                     ret	       960	tekhex.c	FUNCTION_23
getsym	CALL,1:DO,0:WHILE,0:FOR,1:functions,0:SWITCH,0:ELSE,0:IF,2	37
0x40000f8	          0x4c8b1e	                    mov r11, qword [rsi]	       300	tekhex.c	FUNCTION_3
0x40000fb	        0x410fb603	                   movzx eax, byte [r11]	       304	tekhex.c	FUNCTION_3	IF_1
0x40000ff	    0x440fb6900000	                  movzx r10d, byte [rax]	       304	tekhex.c	FUNCTION_3	IF_1
0x4000107	        0x4180fa63	                          cmp r10b, 0x63	       304	tekhex.c	FUNCTION_3	IF_1
0x400010b	            0x745c	                            je 0x4000169	       304	tekhex.c	FUNCTION_3	IF_1
0x400010d	        0x4983c301	                              add r11, 1	       307	tekhex.c	FUNCTION_3	CALL_1
0x4000111	        0x450fb6d2	                        movzx r10d, r10b	       307	tekhex.c	FUNCTION_3	CALL_1
0x4000115	          0x4585d2	                         test r10d, r10d	       309	tekhex.c	FUNCTION_3	IF_2
0x4000118	      0xb810000000	                           mov eax, 0x10	       309	tekhex.c	FUNCTION_3	IF_2
0x400011d	        0x440f44d0	                         cmove r10d, eax	       309	tekhex.c	FUNCTION_3	IF_2
0x4000121	          0x4d89d9	                             mov r9, r11	       310	tekhex.c	FUNCTION_3	FOR_1
0x4000124	    0x41b800000000	                              mov r8d, 0	       310	tekhex.c	FUNCTION_3	FOR_1
0x400012a	      0xb800000000	                              mov eax, 0	       310	tekhex.c	FUNCTION_3	FOR_1
0x400012f	          0x4939cb	                            cmp r11, rcx	       310	tekhex.c	FUNCTION_3	FOR_1
0x4000132	            0x733b	                           jae 0x400016f	       310	tekhex.c	FUNCTION_3	FOR_1
0x4000134	        0x450fb609	                    movzx r9d, byte [r9]	       311	tekhex.c	FUNCTION_3	FOR_1
0x4000138	        0x46880c07	                mov byte [rdi + r8], r9b	       311	tekhex.c	FUNCTION_3	FOR_1
0x400013c	          0x83c001	                              add eax, 1	       310	tekhex.c	FUNCTION_3	FOR_1
0x400013f	          0x4439d0	                           cmp eax, r10d	       310	tekhex.c	FUNCTION_3	FOR_1
0x4000142	            0x730c	                           jae 0x4000150	       310	tekhex.c	FUNCTION_3	FOR_1
0x4000144	          0x4189c0	                            mov r8d, eax	       310	tekhex.c	FUNCTION_3	FOR_1
0x4000147	        0x4f8d0c03	                      lea r9, [r11 + r8]	       310	tekhex.c	FUNCTION_3	FOR_1
0x400014b	          0x4939c9	                             cmp r9, rcx	       310	tekhex.c	FUNCTION_3	FOR_1
0x400014e	            0x72e4	                            jb 0x4000134	       310	tekhex.c	FUNCTION_3	FOR_1
0x4000150	            0x89c1	                            mov ecx, eax	       312	tekhex.c	FUNCTION_3
0x4000152	        0xc6040f00	                 mov byte [rdi + rcx], 0	       312	tekhex.c	FUNCTION_3
0x4000156	          0x4901cb	                            add r11, rcx	       313	tekhex.c	FUNCTION_3
0x4000159	          0x4c891e	                    mov qword [rsi], r11	       313	tekhex.c	FUNCTION_3
0x400015c	          0x448912	                   mov dword [rdx], r10d	       314	tekhex.c	FUNCTION_3
0x400015f	          0x4439d0	                           cmp eax, r10d	       315	tekhex.c	FUNCTION_3
0x4000162	           0xf94c0	                                 sete al	       315	tekhex.c	FUNCTION_3
0x4000165	           0xfb6c0	                           movzx eax, al	       315	tekhex.c	FUNCTION_3
0x4000168	              0xc3	                                     ret	       315	tekhex.c	FUNCTION_3
0x4000169	      0xb800000000	                              mov eax, 0	       305	tekhex.c	FUNCTION_3	IF_1
0x400016e	              0xc3	                                     ret	       305	tekhex.c	FUNCTION_3	IF_1
0x400016f	      0xb800000000	                              mov eax, 0	       310	tekhex.c	FUNCTION_3	FOR_1
0x4000174	            0xebda	                           jmp 0x4000150	       310	tekhex.c	FUNCTION_3	FOR_1
tekhex_write_object_contents	CALL,15:DO,0:WHILE,0:FOR,5:functions,0:SWITCH,1:ELSE,0:IF,4	183
0x4000739	            0x4156	                                push r14	       801	tekhex.c	FUNCTION_19
0x400073b	            0x4155	                                push r13	       801	tekhex.c	FUNCTION_19
0x400073d	            0x4154	                                push r12	       801	tekhex.c	FUNCTION_19
0x400073f	              0x55	                                push rbp	       801	tekhex.c	FUNCTION_19
0x4000740	              0x53	                                push rbx	       801	tekhex.c	FUNCTION_19
0x4000741	        0x4883c480	             add rsp, 0xffffffffffffff80	       801	tekhex.c	FUNCTION_19
0x4000745	          0x4989fd	                            mov r13, rdi	       801	tekhex.c	FUNCTION_19
0x4000748	    0x64488b042528	                mov rax, qword fs:[0x28]	       801	tekhex.c	FUNCTION_19
0x4000751	      0x4889442478	             mov qword [rsp + 0x78], rax	       801	tekhex.c	FUNCTION_19
0x4000756	            0x31c0	                            xor eax, eax	       801	tekhex.c	FUNCTION_19
0x4000758	      0xe8ccfeffff	                    call sym.tekhex_init	       807	tekhex.c	FUNCTION_19	CALL_1
0x400075d	    0x498b85f80000	            mov rax, qword [r13 + 0xf8] 	       810	tekhex.c	FUNCTION_19	FOR_1
0x4000764	        0x488b5818	            mov rbx, qword [rax + 0x18] 	       810	tekhex.c	FUNCTION_19	FOR_1
0x4000768	      0x4c8d642410	                   lea r12, [rsp + 0x10]	       822	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1
0x400076d	          0x4885db	                           test rbx, rbx	       810	tekhex.c	FUNCTION_19	FOR_1
0x4000770	     0xf85ae000000	                           jne 0x4000824	       810	tekhex.c	FUNCTION_19	FOR_1
0x4000776	      0xe9b3000000	                           jmp 0x400082e	       810	tekhex.c	FUNCTION_19	FOR_1
0x400077b	          0x8d451f	                   lea eax, [rbp + 0x1f]	       820	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1
0x400077e	            0x85ed	                           test ebp, ebp	       820	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1
0x4000780	           0xf49c5	                         cmovns eax, ebp	       820	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1
0x4000783	          0xc1f805	                              sar eax, 5	       820	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1
0x4000786	            0x4898	                                    cdqe	       820	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1
0x4000788	    0x80bc03002000	        cmp byte [rbx + rax + 0x2000], 0	       820	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1
0x4000790	            0x7475	                            je 0x4000807	       820	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1
0x4000792	      0x4c89642408	                mov qword [rsp + 8], r12	       822	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1
0x4000797	          0x4889ee	                            mov rsi, rbp	       824	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	CALL_2
0x400079a	    0x4803b3002100	           add rsi, qword [rbx + 0x2100]	       824	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	CALL_2
0x40007a1	      0x488d7c2408	                      lea rdi, [rsp + 8]	       824	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	CALL_2
0x40007a6	      0xe812faffff	                     call sym.writevalue	       824	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	CALL_2
0x40007ab	            0x89ea	                            mov edx, ebp	       824	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	CALL_2
0x40007ad	          0x8d7520	                   lea esi, [rbp + 0x20]	       824	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	CALL_2
0x40007b0	          0x4863ca	                         movsxd rcx, edx	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x40007b3	         0xfb6040b	             movzx eax, byte [rbx + rcx]	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x40007b7	          0x83e00f	                            and eax, 0xf	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x40007ba	     0xfb6b8000000	                   movzx edi, byte [rax]	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x40007c1	      0x488b442408	                mov rax, qword [rsp + 8]	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x40007c6	        0x40887801	                 mov byte [rax + 1], dil	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x40007ca	         0xfb6040b	             movzx eax, byte [rbx + rcx]	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x40007ce	          0xc0e804	                               shr al, 4	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x40007d1	          0x83e00f	                            and eax, 0xf	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x40007d4	     0xfb688000000	                   movzx ecx, byte [rax]	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x40007db	      0x488b442408	                mov rax, qword [rsp + 8]	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x40007e0	            0x8808	                      mov byte [rax], cl	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x40007e2	      0x488b442408	                mov rax, qword [rsp + 8]	       828	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x40007e7	        0x488d4802	                      lea rcx, [rax + 2]	       828	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x40007eb	      0x48894c2408	                mov qword [rsp + 8], rcx	       828	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x40007f0	          0x83c201	                              add edx, 1	       828	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x40007f3	            0x39f2	                            cmp edx, esi	       825	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x40007f5	            0x75b9	                           jne 0x40007b0	       825	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x40007f7	          0x4c89e2	                            mov rdx, r12	       830	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	CALL_3
0x40007fa	      0xbe36000000	                           mov esi, 0x36	       830	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	CALL_3
0x40007ff	          0x4c89ef	                            mov rdi, r13	       830	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	CALL_3
0x4000802	      0xe8dcfcffff	                            call sym.out	       830	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	CALL_3
0x4000807	        0x4883c520	                           add rbp, 0x20	       830	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	CALL_3
0x400080b	    0x4881fd002000	                         cmp rbp, 0x2000	       818	tekhex.c	FUNCTION_19	FOR_1	FOR_2
0x4000812	     0xf8563ffffff	                           jne 0x400077b	       818	tekhex.c	FUNCTION_19	FOR_1	FOR_2
0x4000818	    0x488b9b082100	          mov rbx, qword [rbx + 0x2108] 	       812	tekhex.c	FUNCTION_19	FOR_1
0x400081f	          0x4885db	                           test rbx, rbx	       810	tekhex.c	FUNCTION_19	FOR_1
0x4000822	            0x740a	                            je 0x400082e	       810	tekhex.c	FUNCTION_19	FOR_1
0x4000824	      0xbd00000000	                              mov ebp, 0	       801	tekhex.c	FUNCTION_19
0x4000829	      0xe94dffffff	                           jmp 0x400077b	       801	tekhex.c	FUNCTION_19
0x400082e	    0x498b9d900000	            mov rbx, qword [r13 + 0x90] 	       836	tekhex.c	FUNCTION_19	FOR_4
0x4000835	          0x4885db	                           test rbx, rbx	       836	tekhex.c	FUNCTION_19	FOR_4
0x4000838	            0x7466	                            je 0x40008a0	       836	tekhex.c	FUNCTION_19	FOR_4
0x400083a	      0x488d6c2410	                   lea rbp, [rsp + 0x10]	       838	tekhex.c	FUNCTION_19	FOR_4
0x400083f	      0x48896c2408	                mov qword [rsp + 8], rbp	       838	tekhex.c	FUNCTION_19	FOR_4
0x4000844	          0x488b33	                    mov rsi, qword [rbx]	       840	tekhex.c	FUNCTION_19	FOR_4	CALL_4
0x4000847	      0x488d7c2408	                      lea rdi, [rsp + 8]	       840	tekhex.c	FUNCTION_19	FOR_4	CALL_4
0x400084c	      0xe856feffff	                       call sym.writesym	       840	tekhex.c	FUNCTION_19	FOR_4	CALL_4
0x4000851	      0x488b442408	                mov rax, qword [rsp + 8]	       841	tekhex.c	FUNCTION_19	FOR_4
0x4000856	        0x488d5001	                      lea rdx, [rax + 1]	       841	tekhex.c	FUNCTION_19	FOR_4
0x400085a	      0x4889542408	                mov qword [rsp + 8], rdx	       841	tekhex.c	FUNCTION_19	FOR_4
0x400085f	          0xc60031	                    mov byte [rax], 0x31	       841	tekhex.c	FUNCTION_19	FOR_4
0x4000862	        0x488b7328	            mov rsi, qword [rbx + 0x28] 	       842	tekhex.c	FUNCTION_19	FOR_4	CALL_5
0x4000866	      0x488d7c2408	                      lea rdi, [rsp + 8]	       842	tekhex.c	FUNCTION_19	FOR_4	CALL_5
0x400086b	      0xe84df9ffff	                     call sym.writevalue	       842	tekhex.c	FUNCTION_19	FOR_4	CALL_5
0x4000870	        0x488b7338	            mov rsi, qword [rbx + 0x38] 	       843	tekhex.c	FUNCTION_19	FOR_4	CALL_6
0x4000874	        0x48037328	             add rsi, qword [rbx + 0x28]	       843	tekhex.c	FUNCTION_19	FOR_4	CALL_6
0x4000878	      0x488d7c2408	                      lea rdi, [rsp + 8]	       843	tekhex.c	FUNCTION_19	FOR_4	CALL_6
0x400087d	      0xe83bf9ffff	                     call sym.writevalue	       843	tekhex.c	FUNCTION_19	FOR_4	CALL_6
0x4000882	      0x488b4c2408	                mov rcx, qword [rsp + 8]	       844	tekhex.c	FUNCTION_19	FOR_4	CALL_7
0x4000887	          0x4889ea	                            mov rdx, rbp	       844	tekhex.c	FUNCTION_19	FOR_4	CALL_7
0x400088a	      0xbe33000000	                           mov esi, 0x33	       844	tekhex.c	FUNCTION_19	FOR_4	CALL_7
0x400088f	          0x4c89ef	                            mov rdi, r13	       844	tekhex.c	FUNCTION_19	FOR_4	CALL_7
0x4000892	      0xe84cfcffff	                            call sym.out	       844	tekhex.c	FUNCTION_19	FOR_4	CALL_7
0x4000897	        0x488b5b10	            mov rbx, qword [rbx + 0x10] 	       836	tekhex.c	FUNCTION_19	FOR_4
0x400089b	          0x4885db	                           test rbx, rbx	       836	tekhex.c	FUNCTION_19	FOR_4
0x400089e	            0x759f	                           jne 0x400083f	       836	tekhex.c	FUNCTION_19	FOR_4
0x40008a0	    0x498badb00000	            mov rbp, qword [r13 + 0xb0] 	       848	tekhex.c	FUNCTION_19	IF_2
0x40008a7	          0x4885ed	                           test rbp, rbp	       848	tekhex.c	FUNCTION_19	IF_2
0x40008aa	     0xf8422010000	                            je 0x40009d2	       848	tekhex.c	FUNCTION_19	IF_2
0x40008b0	        0x488b7d00	                    mov rdi, qword [rbp]	       850	tekhex.c	FUNCTION_19	IF_2	FOR_5
0x40008b4	          0x4885ff	                           test rdi, rdi	       850	tekhex.c	FUNCTION_19	IF_2	FOR_5
0x40008b7	     0xf8415010000	                            je 0x40009d2	       850	tekhex.c	FUNCTION_19	IF_2	FOR_5
0x40008bd	      0x4c8d742410	                   lea r14, [rsp + 0x10]	       858	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3
0x40008c2	      0xe800000000	                          call 0x40008c7	       852	tekhex.c	FUNCTION_19	IF_2	FOR_5	CALL_8
0x40008c7	            0x89c3	                            mov ebx, eax	       852	tekhex.c	FUNCTION_19	IF_2	FOR_5	CALL_8
0x40008c9	          0x83f83f	                           cmp eax, 0x3f	       854	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3
0x40008cc	     0xf84ef000000	                            je 0x40009c1	       854	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3
0x40008d2	        0x4c8b6500	                    mov r12, qword [rbp]	       857	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3
0x40008d6	      0x4c89742408	                mov qword [rsp + 8], r14	       858	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3
0x40008db	      0x498b442420	            mov rax, qword [r12 + 0x20] 	       860	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_9
0x40008e0	          0x488b30	                    mov rsi, qword [rax]	       860	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_9
0x40008e3	      0x488d7c2408	                      lea rdi, [rsp + 8]	       860	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_9
0x40008e8	      0xe8bafdffff	                       call sym.writesym	       860	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_9
0x40008ed	          0x83eb41	                           sub ebx, 0x41	       862	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x40008f0	          0x83fb33	                           cmp ebx, 0x33	       862	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x40008f3	     0xf878c000000	                            ja 0x4000985	       862	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x40008f9	            0x89db	                            mov ebx, ebx	       862	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x40008fb	    0xff24dd000000	                       jmp qword [rbx*8]	       862	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000902	      0x488b442408	                mov rax, qword [rsp + 8]	       865	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000907	        0x488d5001	                      lea rdx, [rax + 1]	       865	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x400090b	      0x4889542408	                mov qword [rsp + 8], rdx	       865	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000910	          0xc60032	                    mov byte [rax], 0x32	       865	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000913	            0xeb70	                           jmp 0x4000985	       866	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000915	      0x488b442408	                mov rax, qword [rsp + 8]	       868	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x400091a	        0x488d5001	                      lea rdx, [rax + 1]	       868	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x400091e	      0x4889542408	                mov qword [rsp + 8], rdx	       868	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000923	          0xc60036	                    mov byte [rax], 0x36	       868	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000926	            0xeb5d	                           jmp 0x4000985	       869	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000928	      0x488b442408	                mov rax, qword [rsp + 8]	       873	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x400092d	        0x488d5001	                      lea rdx, [rax + 1]	       873	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000931	      0x4889542408	                mov qword [rsp + 8], rdx	       873	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000936	          0xc60034	                    mov byte [rax], 0x34	       873	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000939	            0xeb4a	                           jmp 0x4000985	       874	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x400093b	      0x488b442408	                mov rax, qword [rsp + 8]	       878	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000940	        0x488d5001	                      lea rdx, [rax + 1]	       878	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000944	      0x4889542408	                mov qword [rsp + 8], rdx	       878	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000949	          0xc60038	                    mov byte [rax], 0x38	       878	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x400094c	            0xeb37	                           jmp 0x4000985	       879	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x400094e	      0x488b442408	                mov rax, qword [rsp + 8]	       881	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000953	        0x488d5001	                      lea rdx, [rax + 1]	       881	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000957	      0x4889542408	                mov qword [rsp + 8], rdx	       881	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x400095c	          0xc60033	                    mov byte [rax], 0x33	       881	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x400095f	            0xeb24	                           jmp 0x4000985	       882	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000961	      0x488b442408	                mov rax, qword [rsp + 8]	       884	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000966	        0x488d5001	                      lea rdx, [rax + 1]	       884	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x400096a	      0x4889542408	                mov qword [rsp + 8], rdx	       884	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x400096f	          0xc60037	                    mov byte [rax], 0x37	       884	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000972	            0xeb11	                           jmp 0x4000985	       885	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000974	      0xbf03000000	                              mov edi, 3	       888	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1	CALL_10
0x4000979	      0xe800000000	                          call 0x400097e	       888	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1	CALL_10
0x400097e	      0xb800000000	                              mov eax, 0	       889	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000983	            0xeb7e	                           jmp 0x4000a03	       889	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000985	      0x498b742408	                mov rsi, qword [r12 + 8]	       892	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_11
0x400098a	      0x488d7c2408	                      lea rdi, [rsp + 8]	       892	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_11
0x400098f	      0xe813fdffff	                       call sym.writesym	       892	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_11
0x4000994	      0x498b442420	            mov rax, qword [r12 + 0x20] 	       893	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_12
0x4000999	      0x498b742410	            mov rsi, qword [r12 + 0x10] 	       893	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_12
0x400099e	        0x48037028	             add rsi, qword [rax + 0x28]	       893	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_12
0x40009a2	      0x488d7c2408	                      lea rdi, [rsp + 8]	       893	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_12
0x40009a7	      0xe811f8ffff	                     call sym.writevalue	       893	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_12
0x40009ac	      0x488b4c2408	                mov rcx, qword [rsp + 8]	       894	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_13
0x40009b1	          0x4c89f2	                            mov rdx, r14	       894	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_13
0x40009b4	      0xbe33000000	                           mov esi, 0x33	       894	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_13
0x40009b9	          0x4c89ef	                            mov rdi, r13	       894	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_13
0x40009bc	      0xe822fbffff	                            call sym.out	       894	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_13
0x40009c1	        0x4883c508	                              add rbp, 8	       850	tekhex.c	FUNCTION_19	IF_2	FOR_5
0x40009c5	        0x488b7d00	                    mov rdi, qword [rbp]	       850	tekhex.c	FUNCTION_19	IF_2	FOR_5
0x40009c9	          0x4885ff	                           test rdi, rdi	       850	tekhex.c	FUNCTION_19	IF_2	FOR_5
0x40009cc	     0xf85f0feffff	                           jne 0x40008c2	       850	tekhex.c	FUNCTION_19	IF_2	FOR_5
0x40009d2	          0x4c89ea	                            mov rdx, r13	       900	tekhex.c	FUNCTION_19	IF_4	CALL_14
0x40009d5	      0xbe09000000	                              mov esi, 9	       900	tekhex.c	FUNCTION_19	IF_4	CALL_14
0x40009da	      0xbf00000000	                              mov edi, 0	       900	tekhex.c	FUNCTION_19	IF_4	CALL_14
0x40009df	      0xe800000000	                          call 0x40009e4	       900	tekhex.c	FUNCTION_19	IF_4	CALL_14
0x40009e4	        0x4883f809	                              cmp rax, 9	       900	tekhex.c	FUNCTION_19	IF_4	CALL_14
0x40009e8	            0x7414	                            je 0x40009fe	       900	tekhex.c	FUNCTION_19	IF_4	CALL_14
0x40009ea	      0xba00000000	                              mov edx, 0	       901	tekhex.c	FUNCTION_19	CALL_15
0x40009ef	      0xbe85030000	                          mov esi, 0x385	       901	tekhex.c	FUNCTION_19	CALL_15
0x40009f4	      0xbf00000000	                              mov edi, 0	       901	tekhex.c	FUNCTION_19	CALL_15
0x40009f9	      0xe800000000	                          call 0x40009fe	       901	tekhex.c	FUNCTION_19	CALL_15
0x40009fe	      0xb801000000	                              mov eax, 1	       902	tekhex.c	FUNCTION_19
0x4000a03	      0x488b742478	            mov rsi, qword [rsp + 0x78] 	       903	tekhex.c	FUNCTION_19
0x4000a08	    0x644833342528	                xor rsi, qword fs:[0x28]	       903	tekhex.c	FUNCTION_19
0x4000a11	            0x7405	                            je 0x4000a18	       903	tekhex.c	FUNCTION_19
0x4000a13	      0xe800000000	                          call 0x4000a18	       903	tekhex.c	FUNCTION_19
0x4000a18	        0x4883ec80	             sub rsp, 0xffffffffffffff80	       903	tekhex.c	FUNCTION_19
0x4000a1c	              0x5b	                                 pop rbx	       903	tekhex.c	FUNCTION_19
0x4000a1d	              0x5d	                                 pop rbp	       903	tekhex.c	FUNCTION_19
0x4000a1e	            0x415c	                                 pop r12	       903	tekhex.c	FUNCTION_19
0x4000a20	            0x415d	                                 pop r13	       903	tekhex.c	FUNCTION_19
0x4000a22	            0x415e	                                 pop r14	       903	tekhex.c	FUNCTION_19
0x4000a24	              0xc3	                                     ret	       903	tekhex.c	FUNCTION_19
