countargv	SWITCH,0:WHILE,0:functions,0:ELSE,0:CALL,0:DO,0:FOR,1:IF,1	14
0x4000767	          0x4885ff	                           test rdi, rdi	       501	argv.c	FUNCTION_8	IF_1
0x400076a	            0x741a	                            je 0x4000786	       501	argv.c	FUNCTION_8	IF_1
0x400076c	        0x48833f00	                      cmp qword [rdi], 0	       503	argv.c	FUNCTION_8	FOR_1
0x4000770	            0x741a	                            je 0x400078c	       503	argv.c	FUNCTION_8	FOR_1
0x4000772	      0xb800000000	                              mov eax, 0	       503	argv.c	FUNCTION_8	FOR_1
0x4000777	          0x83c001	                              add eax, 1	       503	argv.c	FUNCTION_8	FOR_1
0x400077a	          0x4863d0	                         movsxd rdx, eax	       503	argv.c	FUNCTION_8	FOR_1
0x400077d	      0x48833cd700	              cmp qword [rdi + rdx*8], 0	       503	argv.c	FUNCTION_8	FOR_1
0x4000782	            0x75f3	                           jne 0x4000777	       503	argv.c	FUNCTION_8	FOR_1
0x4000784	            0xf3c3	                                     ret	       503	argv.c	FUNCTION_8	FOR_1
0x4000786	      0xb800000000	                              mov eax, 0	       502	argv.c	FUNCTION_8	IF_1
0x400078b	              0xc3	                                     ret	       502	argv.c	FUNCTION_8	IF_1
0x400078c	      0xb800000000	                              mov eax, 0	       503	argv.c	FUNCTION_8	FOR_1
0x4000791	              0xc3	                                     ret	       506	argv.c	FUNCTION_8
writeargv	SWITCH,0:WHILE,2:functions,0:ELSE,0:CALL,4:DO,0:FOR,0:IF,5	66
0x4000323	          0x4885f6	                           test rsi, rsi	       304	argv.c	FUNCTION_6	IF_1
0x4000326	     0xf849b000000	                            je 0x40003c7	       304	argv.c	FUNCTION_6	IF_1
0x400032c	            0x4156	                                push r14	       301	argv.c	FUNCTION_6
0x400032e	            0x4155	                                push r13	       301	argv.c	FUNCTION_6
0x4000330	            0x4154	                                push r12	       301	argv.c	FUNCTION_6
0x4000332	              0x55	                                push rbp	       301	argv.c	FUNCTION_6
0x4000333	              0x53	                                push rbx	       301	argv.c	FUNCTION_6
0x4000334	          0x4989fe	                            mov r14, rdi	       301	argv.c	FUNCTION_6
0x4000337	          0x4989f4	                            mov r12, rsi	       301	argv.c	FUNCTION_6
0x400033a	          0x488b1f	                    mov rbx, qword [rdi]	       307	argv.c	FUNCTION_6	WHILE_1
0x400033d	    0x49bd21000000	          movabs r13, 0x400000000000021 	       315	argv.c	FUNCTION_6	WHILE_1	WHILE_2	IF_2	CALL_1
0x4000347	      0xb800000000	                              mov eax, 0	       302	argv.c	FUNCTION_6
0x400034c	          0x4885db	                           test rbx, rbx	       307	argv.c	FUNCTION_6	WHILE_1
0x400034f	     0xf8492000000	                            je 0x40003e7	       307	argv.c	FUNCTION_6	WHILE_1
0x4000355	            0xeb67	                           jmp 0x40003be	       307	argv.c	FUNCTION_6	WHILE_1
0x4000357	           0xfbee8	                           movsx ebp, al	       315	argv.c	FUNCTION_6	WHILE_1	WHILE_2	IF_2	CALL_1
0x400035a	           0xfb6d0	                           movzx edx, al	       315	argv.c	FUNCTION_6	WHILE_1	WHILE_2	IF_2	CALL_1
0x400035d	    0xf68412000000	            test byte [rdx + rdx], 0x40 	       315	argv.c	FUNCTION_6	WHILE_1	WHILE_2	IF_2	CALL_1
0x4000365	            0x750d	                           jne 0x4000374	       315	argv.c	FUNCTION_6	WHILE_1	WHILE_2	IF_2	CALL_1
0x4000367	          0x83e822	                           sub eax, 0x22	       315	argv.c	FUNCTION_6	WHILE_1	WHILE_2	IF_2	CALL_1
0x400036a	            0x3c3a	                            cmp al, 0x3a	       315	argv.c	FUNCTION_6	WHILE_1	WHILE_2	IF_2	CALL_1
0x400036c	            0x7718	                            ja 0x4000386	       315	argv.c	FUNCTION_6	WHILE_1	WHILE_2	IF_2	CALL_1
0x400036e	        0x490fa3c5	                             bt r13, rax	       315	argv.c	FUNCTION_6	WHILE_1	WHILE_2	IF_2	CALL_1
0x4000372	            0x7312	                           jae 0x4000386	       315	argv.c	FUNCTION_6	WHILE_1	WHILE_2	IF_2	CALL_1
0x4000374	          0x4c89e6	                            mov rsi, r12	       316	argv.c	FUNCTION_6	WHILE_1	WHILE_2	IF_2	IF_3	CALL_2
0x4000377	      0xbf5c000000	                           mov edi, 0x5c	       316	argv.c	FUNCTION_6	WHILE_1	WHILE_2	IF_2	IF_3	CALL_2
0x400037c	      0xe800000000	                          call 0x4000381	       316	argv.c	FUNCTION_6	WHILE_1	WHILE_2	IF_2	IF_3	CALL_2
0x4000381	          0x83f8ff	             cmp eax, 0xffffffffffffffff	       316	argv.c	FUNCTION_6	WHILE_1	WHILE_2	IF_2	IF_3	CALL_2
0x4000384	            0x7447	                            je 0x40003cd	       316	argv.c	FUNCTION_6	WHILE_1	WHILE_2	IF_2	IF_3	CALL_2
0x4000386	          0x4c89e6	                            mov rsi, r12	       322	argv.c	FUNCTION_6	WHILE_1	WHILE_2	IF_4	CALL_3
0x4000389	            0x89ef	                            mov edi, ebp	       322	argv.c	FUNCTION_6	WHILE_1	WHILE_2	IF_4	CALL_3
0x400038b	      0xe800000000	                          call 0x4000390	       322	argv.c	FUNCTION_6	WHILE_1	WHILE_2	IF_4	CALL_3
0x4000390	          0x83f8ff	             cmp eax, 0xffffffffffffffff	       322	argv.c	FUNCTION_6	WHILE_1	WHILE_2	IF_4	CALL_3
0x4000393	            0x743f	                            je 0x40003d4	       322	argv.c	FUNCTION_6	WHILE_1	WHILE_2	IF_4	CALL_3
0x4000395	        0x4883c301	                              add rbx, 1	       327	argv.c	FUNCTION_6	WHILE_1	WHILE_2
0x4000399	           0xfb603	                   movzx eax, byte [rbx]	       311	argv.c	FUNCTION_6	WHILE_1	WHILE_2
0x400039c	            0x84c0	                             test al, al	       311	argv.c	FUNCTION_6	WHILE_1	WHILE_2
0x400039e	            0x75b7	                           jne 0x4000357	       311	argv.c	FUNCTION_6	WHILE_1	WHILE_2
0x40003a0	          0x4c89e6	                            mov rsi, r12	       330	argv.c	FUNCTION_6	WHILE_1	IF_5	CALL_4
0x40003a3	      0xbf0a000000	                            mov edi, 0xa	       330	argv.c	FUNCTION_6	WHILE_1	IF_5	CALL_4
0x40003a8	      0xe800000000	                          call 0x40003ad	       330	argv.c	FUNCTION_6	WHILE_1	IF_5	CALL_4
0x40003ad	          0x83f8ff	             cmp eax, 0xffffffffffffffff	       330	argv.c	FUNCTION_6	WHILE_1	IF_5	CALL_4
0x40003b0	            0x7429	                            je 0x40003db	       330	argv.c	FUNCTION_6	WHILE_1	IF_5	CALL_4
0x40003b2	        0x4983c608	                              add r14, 8	       335	argv.c	FUNCTION_6	WHILE_1
0x40003b6	          0x498b1e	                    mov rbx, qword [r14]	       307	argv.c	FUNCTION_6	WHILE_1
0x40003b9	          0x4885db	                           test rbx, rbx	       307	argv.c	FUNCTION_6	WHILE_1
0x40003bc	            0x7424	                            je 0x40003e2	       307	argv.c	FUNCTION_6	WHILE_1
0x40003be	           0xfb603	                   movzx eax, byte [rbx]	       311	argv.c	FUNCTION_6	WHILE_1	WHILE_2
0x40003c1	            0x84c0	                             test al, al	       311	argv.c	FUNCTION_6	WHILE_1	WHILE_2
0x40003c3	            0x7592	                           jne 0x4000357	       311	argv.c	FUNCTION_6	WHILE_1	WHILE_2
0x40003c5	            0xebd9	                           jmp 0x40003a0	       311	argv.c	FUNCTION_6	WHILE_1	WHILE_2
0x40003c7	      0xb801000000	                              mov eax, 1	       305	argv.c	FUNCTION_6	IF_1
0x40003cc	              0xc3	                                     ret	       340	argv.c	FUNCTION_6
0x40003cd	      0xb801000000	                              mov eax, 1	       318	argv.c	FUNCTION_6	WHILE_1	WHILE_2	IF_2	IF_3
0x40003d2	            0xeb13	                           jmp 0x40003e7	       318	argv.c	FUNCTION_6	WHILE_1	WHILE_2	IF_2	IF_3
0x40003d4	      0xb801000000	                              mov eax, 1	       324	argv.c	FUNCTION_6	WHILE_1	WHILE_2	IF_4
0x40003d9	            0xeb0c	                           jmp 0x40003e7	       324	argv.c	FUNCTION_6	WHILE_1	WHILE_2	IF_4
0x40003db	      0xb801000000	                              mov eax, 1	       332	argv.c	FUNCTION_6	WHILE_1	IF_5
0x40003e0	            0xeb05	                           jmp 0x40003e7	       332	argv.c	FUNCTION_6	WHILE_1	IF_5
0x40003e2	      0xb800000000	                              mov eax, 0	       302	argv.c	FUNCTION_6
0x40003e7	              0x5b	                                 pop rbx	       340	argv.c	FUNCTION_6
0x40003e8	              0x5d	                                 pop rbp	       340	argv.c	FUNCTION_6
0x40003e9	            0x415c	                                 pop r12	       340	argv.c	FUNCTION_6
0x40003eb	            0x415d	                                 pop r13	       340	argv.c	FUNCTION_6
0x40003ed	            0x415e	                                 pop r14	       340	argv.c	FUNCTION_6
0x40003ef	              0xc3	                                     ret	       340	argv.c	FUNCTION_6
freeargv	SWITCH,0:WHILE,0:functions,0:ELSE,0:CALL,2:DO,0:FOR,1:IF,1	21
0x40000e6	          0x4885ff	                           test rdi, rdi	       108	argv.c	FUNCTION_2	IF_1
0x40000e9	            0x7433	                            je 0x400011e	       108	argv.c	FUNCTION_2	IF_1
0x40000eb	              0x55	                                push rbp	       105	argv.c	FUNCTION_2
0x40000ec	              0x53	                                push rbx	       105	argv.c	FUNCTION_2
0x40000ed	        0x4883ec08	                              sub rsp, 8	       105	argv.c	FUNCTION_2
0x40000f1	          0x4889fd	                            mov rbp, rdi	       105	argv.c	FUNCTION_2
0x40000f4	          0x488b3f	                    mov rdi, qword [rdi]	       110	argv.c	FUNCTION_2	IF_1	FOR_1
0x40000f7	          0x4885ff	                           test rdi, rdi	       110	argv.c	FUNCTION_2	IF_1	FOR_1
0x40000fa	            0x7414	                            je 0x4000110	       110	argv.c	FUNCTION_2	IF_1	FOR_1
0x40000fc	          0x4889eb	                            mov rbx, rbp	       110	argv.c	FUNCTION_2	IF_1	FOR_1
0x40000ff	      0xe800000000	                          call 0x4000104	       112	argv.c	FUNCTION_2	IF_1	FOR_1	CALL_1
0x4000104	        0x4883c308	                              add rbx, 8	       110	argv.c	FUNCTION_2	IF_1	FOR_1
0x4000108	          0x488b3b	                    mov rdi, qword [rbx]	       110	argv.c	FUNCTION_2	IF_1	FOR_1
0x400010b	          0x4885ff	                           test rdi, rdi	       110	argv.c	FUNCTION_2	IF_1	FOR_1
0x400010e	            0x75ef	                           jne 0x40000ff	       110	argv.c	FUNCTION_2	IF_1	FOR_1
0x4000110	          0x4889ef	                            mov rdi, rbp	       114	argv.c	FUNCTION_2	IF_1	CALL_2
0x4000113	      0xe800000000	                          call 0x4000118	       114	argv.c	FUNCTION_2	IF_1	CALL_2
0x4000118	        0x4883c408	                              add rsp, 8	       116	argv.c	FUNCTION_2
0x400011c	              0x5b	                                 pop rbx	       116	argv.c	FUNCTION_2
0x400011d	              0x5d	                                 pop rbp	       116	argv.c	FUNCTION_2
0x400011e	            0xf3c3	                                     ret	       116	argv.c	FUNCTION_2
dupargv	SWITCH,0:WHILE,0:functions,0:ELSE,0:CALL,2:DO,0:FOR,2:IF,1	48
0x4000040	            0x4155	                                push r13	        73	argv.c	FUNCTION_1
0x4000042	            0x4154	                                push r12	        73	argv.c	FUNCTION_1
0x4000044	              0x55	                                push rbp	        73	argv.c	FUNCTION_1
0x4000045	              0x53	                                push rbx	        73	argv.c	FUNCTION_1
0x4000046	        0x4883ec08	                              sub rsp, 8	        73	argv.c	FUNCTION_1
0x400004a	          0x4885ff	                           test rdi, rdi	        77	argv.c	FUNCTION_1	IF_1
0x400004d	     0xf8483000000	                            je 0x40000d6	        77	argv.c	FUNCTION_1	IF_1
0x4000053	        0x48833f00	                      cmp qword [rdi], 0	        81	argv.c	FUNCTION_1	FOR_1
0x4000057	            0x7414	                            je 0x400006d	        81	argv.c	FUNCTION_1	FOR_1
0x4000059	      0xb800000000	                              mov eax, 0	        81	argv.c	FUNCTION_1	FOR_1
0x400005e	          0x83c001	                              add eax, 1	        81	argv.c	FUNCTION_1	FOR_1
0x4000061	          0x4863d0	                         movsxd rdx, eax	        81	argv.c	FUNCTION_1	FOR_1
0x4000064	      0x48833cd700	              cmp qword [rdi + rdx*8], 0	        81	argv.c	FUNCTION_1	FOR_1
0x4000069	            0x75f3	                           jne 0x400005e	        81	argv.c	FUNCTION_1	FOR_1
0x400006b	            0xeb05	                           jmp 0x4000072	        81	argv.c	FUNCTION_1	FOR_1
0x400006d	      0xb800000000	                              mov eax, 0	        81	argv.c	FUNCTION_1	FOR_1
0x4000072	          0x4889fd	                            mov rbp, rdi	        81	argv.c	FUNCTION_1	FOR_1
0x4000075	          0x8d7801	                      lea edi, [rax + 1]	        82	argv.c	FUNCTION_1	CALL_1
0x4000078	          0x4863ff	                         movsxd rdi, edi	        82	argv.c	FUNCTION_1	CALL_1
0x400007b	        0x48c1e703	                              shl rdi, 3	        82	argv.c	FUNCTION_1	CALL_1
0x400007f	      0xe800000000	                          call 0x4000084	        82	argv.c	FUNCTION_1	CALL_1
0x4000084	          0x4989c5	                            mov r13, rax	        82	argv.c	FUNCTION_1	CALL_1
0x4000087	        0x488b7d00	                    mov rdi, qword [rbp]	        85	argv.c	FUNCTION_1	FOR_2
0x400008b	          0x4885ff	                           test rdi, rdi	        85	argv.c	FUNCTION_1	FOR_2
0x400008e	            0x7433	                            je 0x40000c3	        85	argv.c	FUNCTION_1	FOR_2
0x4000090	      0xba00000000	                              mov edx, 0	        85	argv.c	FUNCTION_1	FOR_2
0x4000095	    0x41bc00000000	                             mov r12d, 0	        85	argv.c	FUNCTION_1	FOR_2
0x400009b	      0x498d5c1500	                    lea rbx, [r13 + rdx]	        86	argv.c	FUNCTION_1	CALL_2
0x40000a0	      0xe800000000	                          call 0x40000a5	        86	argv.c	FUNCTION_1	CALL_2
0x40000a5	          0x488903	                    mov qword [rbx], rax	        86	argv.c	FUNCTION_1	CALL_2
0x40000a8	        0x4183c401	                             add r12d, 1	        85	argv.c	FUNCTION_1	FOR_2
0x40000ac	          0x4963c4	                        movsxd rax, r12d	        85	argv.c	FUNCTION_1	FOR_2
0x40000af	    0x488d14c50000	                        lea rdx, [rax*8]	        85	argv.c	FUNCTION_1	FOR_2
0x40000b7	      0x488b7cc500	            mov rdi, qword [rbp + rax*8]	        85	argv.c	FUNCTION_1	FOR_2
0x40000bc	          0x4885ff	                           test rdi, rdi	        85	argv.c	FUNCTION_1	FOR_2
0x40000bf	            0x75da	                           jne 0x400009b	        85	argv.c	FUNCTION_1	FOR_2
0x40000c1	            0xeb05	                           jmp 0x40000c8	        85	argv.c	FUNCTION_1	FOR_2
0x40000c3	      0xba00000000	                              mov edx, 0	        85	argv.c	FUNCTION_1	FOR_2
0x40000c8	    0x49c744150000	                mov qword [r13 + rdx], 0	        87	argv.c	FUNCTION_1
0x40000d1	          0x4c89e8	                            mov rax, r13	        88	argv.c	FUNCTION_1
0x40000d4	            0xeb05	                           jmp 0x40000db	        88	argv.c	FUNCTION_1
0x40000d6	      0xb800000000	                              mov eax, 0	        78	argv.c	FUNCTION_1	IF_1
0x40000db	        0x4883c408	                              add rsp, 8	        89	argv.c	FUNCTION_1
0x40000df	              0x5b	                                 pop rbx	        89	argv.c	FUNCTION_1
0x40000e0	              0x5d	                                 pop rbp	        89	argv.c	FUNCTION_1
0x40000e1	            0x415c	                                 pop r12	        89	argv.c	FUNCTION_1
0x40000e3	            0x415d	                                 pop r13	        89	argv.c	FUNCTION_1
0x40000e5	              0xc3	                                     ret	        89	argv.c	FUNCTION_1
buildargv	SWITCH,0:WHILE,1:functions,0:ELSE,10:CALL,9:DO,1:FOR,0:IF,12	142
0x4000120	            0x4157	                                push r15	       177	argv.c	FUNCTION_5
0x4000122	            0x4156	                                push r14	       177	argv.c	FUNCTION_5
0x4000124	            0x4155	                                push r13	       177	argv.c	FUNCTION_5
0x4000126	            0x4154	                                push r12	       177	argv.c	FUNCTION_5
0x4000128	              0x55	                                push rbp	       177	argv.c	FUNCTION_5
0x4000129	              0x53	                                push rbx	       177	argv.c	FUNCTION_5
0x400012a	        0x4883ec28	                           sub rsp, 0x28	       177	argv.c	FUNCTION_5
0x400012e	          0x4885ff	                           test rdi, rdi	       188	argv.c	FUNCTION_5	IF_1
0x4000131	     0xf84d4010000	                            je 0x400030b	       188	argv.c	FUNCTION_5	IF_1
0x4000137	          0x4889fb	                            mov rbx, rdi	       188	argv.c	FUNCTION_5	IF_1
0x400013a	      0xb800000000	                              mov eax, 0	       190	argv.c	FUNCTION_5	IF_1	CALL_2
0x400013f	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	       190	argv.c	FUNCTION_5	IF_1	CALL_2
0x4000146	            0xf2ae	              repne scasb al, byte [rdi]	       190	argv.c	FUNCTION_5	IF_1	CALL_2
0x4000148	          0x4889cf	                            mov rdi, rcx	       190	argv.c	FUNCTION_5	IF_1	CALL_2
0x400014b	          0x48f7d7	                                 not rdi	       190	argv.c	FUNCTION_5	IF_1	CALL_2
0x400014e	      0xe800000000	                          call 0x4000153	       190	argv.c	FUNCTION_5	IF_1	CALL_2
0x4000153	      0x4889442410	             mov qword [rsp + 0x10], rax	       190	argv.c	FUNCTION_5	IF_1	CALL_2
0x4000158	    0x41bf00000000	                             mov r15d, 0	       185	argv.c	FUNCTION_5
0x400015e	    0xc744240c0000	                mov dword [rsp + 0xc], 0	       184	argv.c	FUNCTION_5
0x4000166	    0xc74424080000	                  mov dword [rsp + 8], 0	       183	argv.c	FUNCTION_5
0x400016e	      0xbd00000000	                              mov ebp, 0	       182	argv.c	FUNCTION_5
0x4000173	    0x41bd00000000	                             mov r13d, 0	       181	argv.c	FUNCTION_5
0x4000179	    0x41bc00000000	                             mov r12d, 0	       180	argv.c	FUNCTION_5
0x400017f	           0xfb603	                   movzx eax, byte [rbx]	       121	argv.c	FUNCTION_3	WHILE_1	CALL_1
0x4000182	    0xf68400000000	            test byte [rax + rax], 0x40 	       121	argv.c	FUNCTION_3	WHILE_1	CALL_1
0x400018a	            0x7411	                            je 0x400019d	       121	argv.c	FUNCTION_3	WHILE_1	CALL_1
0x400018c	        0x4883c301	                              add rbx, 1	       123	argv.c	FUNCTION_3	WHILE_1
0x4000190	           0xfb603	                   movzx eax, byte [rbx]	       121	argv.c	FUNCTION_3	WHILE_1	CALL_1
0x4000193	    0xf68400000000	            test byte [rax + rax], 0x40 	       121	argv.c	FUNCTION_3	WHILE_1	CALL_1
0x400019b	            0x75ef	                           jne 0x400018c	       121	argv.c	FUNCTION_3	WHILE_1	CALL_1
0x400019d	        0x8b44240c	              mov eax, dword [rsp + 0xc]	       198	argv.c	FUNCTION_5	IF_1	DO_1	IF_2
0x40001a1	            0x85c0	                           test eax, eax	       198	argv.c	FUNCTION_5	IF_1	DO_1	IF_2
0x40001a3	            0x7409	                            je 0x40001ae	       198	argv.c	FUNCTION_5	IF_1	DO_1	IF_2
0x40001a5	          0x83e801	                              sub eax, 1	       198	argv.c	FUNCTION_5	IF_1	DO_1	IF_2
0x40001a8	        0x39442408	                cmp dword [rsp + 8], eax	       198	argv.c	FUNCTION_5	IF_1	DO_1	IF_2
0x40001ac	            0x7c43	                            jl 0x40001f1	       198	argv.c	FUNCTION_5	IF_1	DO_1	IF_2
0x40001ae	          0x4d85ff	                           test r15, r15	       201	argv.c	FUNCTION_5	IF_1	DO_1	IF_2	IF_3
0x40001b1	            0x7517	                           jne 0x40001ca	       201	argv.c	FUNCTION_5	IF_1	DO_1	IF_2	IF_3
0x40001b3	      0xbf40000000	                           mov edi, 0x40	       204	argv.c	FUNCTION_5	IF_1	DO_1	IF_2	IF_3	CALL_4
0x40001b8	      0xe800000000	                          call 0x40001bd	       204	argv.c	FUNCTION_5	IF_1	DO_1	IF_2	IF_3	CALL_4
0x40001bd	          0x4989c7	                            mov r15, rax	       204	argv.c	FUNCTION_5	IF_1	DO_1	IF_2	IF_3	CALL_4
0x40001c0	    0xc744240c0800	                mov dword [rsp + 0xc], 8	       203	argv.c	FUNCTION_5	IF_1	DO_1	IF_2	IF_3
0x40001c8	            0xeb1a	                           jmp 0x40001e4	       203	argv.c	FUNCTION_5	IF_1	DO_1	IF_2	IF_3
0x40001ca	        0xd164240c	                shl dword [rsp + 0xc], 1	       208	argv.c	FUNCTION_5	IF_1	DO_1	IF_2	ELSE_1
0x40001ce	        0x8b44240c	              mov eax, dword [rsp + 0xc]	       208	argv.c	FUNCTION_5	IF_1	DO_1	IF_2	ELSE_1
0x40001d2	          0x4863f0	                         movsxd rsi, eax	       209	argv.c	FUNCTION_5	IF_1	DO_1	IF_2	ELSE_1	CALL_5
0x40001d5	        0x48c1e603	                              shl rsi, 3	       209	argv.c	FUNCTION_5	IF_1	DO_1	IF_2	ELSE_1	CALL_5
0x40001d9	          0x4c89ff	                            mov rdi, r15	       209	argv.c	FUNCTION_5	IF_1	DO_1	IF_2	ELSE_1	CALL_5
0x40001dc	      0xe800000000	                          call 0x40001e1	       209	argv.c	FUNCTION_5	IF_1	DO_1	IF_2	ELSE_1	CALL_5
0x40001e1	          0x4989c7	                            mov r15, rax	       209	argv.c	FUNCTION_5	IF_1	DO_1	IF_2	ELSE_1	CALL_5
0x40001e4	      0x4863442408	            movsxd rax, dword [rsp + 8] 	       212	argv.c	FUNCTION_5	IF_1	DO_1	IF_2
0x40001e9	    0x49c704c70000	              mov qword [r15 + rax*8], 0	       212	argv.c	FUNCTION_5	IF_1	DO_1	IF_2
0x40001f1	           0xfb603	                   movzx eax, byte [rbx]	       216	argv.c	FUNCTION_5	IF_1	DO_1
0x40001f4	            0x84c0	                             test al, al	       216	argv.c	FUNCTION_5	IF_1	DO_1
0x40001f6	     0xf849d000000	                            je 0x4000299	       216	argv.c	FUNCTION_5	IF_1	DO_1
0x40001fc	      0x488b542410	            mov rdx, qword [rsp + 0x10] 	       216	argv.c	FUNCTION_5	IF_1	DO_1
0x4000201	           0xfb6c8	                           movzx ecx, al	       218	argv.c	FUNCTION_5	IF_1	DO_1	IF_4	CALL_6
0x4000204	    0xf68409000000	            test byte [rcx + rcx], 0x40 	       218	argv.c	FUNCTION_5	IF_1	DO_1	IF_4	CALL_6
0x400020c	            0x740e	                            je 0x400021c	       218	argv.c	FUNCTION_5	IF_1	DO_1	IF_4	CALL_6
0x400020e	          0x4489e1	                           mov ecx, r12d	       218	argv.c	FUNCTION_5	IF_1	DO_1	IF_4	CALL_6
0x4000211	          0x4409e9	                            or ecx, r13d	       218	argv.c	FUNCTION_5	IF_1	DO_1	IF_4	CALL_6
0x4000214	             0x9e9	                             or ecx, ebp	       218	argv.c	FUNCTION_5	IF_1	DO_1	IF_4	CALL_6
0x4000216	     0xf8482000000	                            je 0x400029e	       218	argv.c	FUNCTION_5	IF_1	DO_1	IF_4	CALL_6
0x400021c	            0x85ed	                           test ebp, ebp	       224	argv.c	FUNCTION_5	IF_1	DO_1	ELSE_2	IF_5
0x400021e	            0x740d	                            je 0x400022d	       224	argv.c	FUNCTION_5	IF_1	DO_1	ELSE_2	IF_5
0x4000220	            0x8802	                      mov byte [rdx], al	       227	argv.c	FUNCTION_5	IF_1	DO_1	ELSE_2	IF_5
0x4000222	        0x488d5201	                      lea rdx, [rdx + 1]	       227	argv.c	FUNCTION_5	IF_1	DO_1	ELSE_2	IF_5
0x4000226	      0xbd00000000	                              mov ebp, 0	       226	argv.c	FUNCTION_5	IF_1	DO_1	ELSE_2	IF_5
0x400022b	            0xeb5b	                           jmp 0x4000288	       226	argv.c	FUNCTION_5	IF_1	DO_1	ELSE_2	IF_5
0x400022d	            0x3c5c	                            cmp al, 0x5c	       229	argv.c	FUNCTION_5	IF_1	DO_1	ELSE_2	ELSE_3	IF_6
0x400022f	            0x7432	                            je 0x4000263	       229	argv.c	FUNCTION_5	IF_1	DO_1	ELSE_2	ELSE_3	IF_6
0x4000231	          0x4585e4	                         test r12d, r12d	       233	argv.c	FUNCTION_5	IF_1	DO_1	ELSE_2	ELSE_4	IF_7
0x4000234	            0x740c	                            je 0x4000242	       233	argv.c	FUNCTION_5	IF_1	DO_1	ELSE_2	ELSE_4	IF_7
0x4000236	            0x3c27	                            cmp al, 0x27	       235	argv.c	FUNCTION_5	IF_1	DO_1	ELSE_2	ELSE_4	IF_7	IF_8
0x4000238	            0x7430	                            je 0x400026a	       235	argv.c	FUNCTION_5	IF_1	DO_1	ELSE_2	ELSE_4	IF_7	IF_8
0x400023a	            0x8802	                      mov byte [rdx], al	       241	argv.c	FUNCTION_5	IF_1	DO_1	ELSE_2	ELSE_4	IF_7	ELSE_5
0x400023c	        0x488d5201	                      lea rdx, [rdx + 1]	       241	argv.c	FUNCTION_5	IF_1	DO_1	ELSE_2	ELSE_4	IF_7	ELSE_5
0x4000240	            0xeb46	                           jmp 0x4000288	       241	argv.c	FUNCTION_5	IF_1	DO_1	ELSE_2	ELSE_4	IF_7	ELSE_5
0x4000242	          0x4585ed	                         test r13d, r13d	       244	argv.c	FUNCTION_5	IF_1	DO_1	ELSE_2	ELSE_6	IF_9
0x4000245	            0x740c	                            je 0x4000253	       244	argv.c	FUNCTION_5	IF_1	DO_1	ELSE_2	ELSE_6	IF_9
0x4000247	            0x3c22	                            cmp al, 0x22	       246	argv.c	FUNCTION_5	IF_1	DO_1	ELSE_2	ELSE_6	IF_9	IF_10
0x4000249	            0x7427	                            je 0x4000272	       246	argv.c	FUNCTION_5	IF_1	DO_1	ELSE_2	ELSE_6	IF_9	IF_10
0x400024b	            0x8802	                      mov byte [rdx], al	       252	argv.c	FUNCTION_5	IF_1	DO_1	ELSE_2	ELSE_6	IF_9	ELSE_7
0x400024d	        0x488d5201	                      lea rdx, [rdx + 1]	       252	argv.c	FUNCTION_5	IF_1	DO_1	ELSE_2	ELSE_6	IF_9	ELSE_7
0x4000251	            0xeb35	                           jmp 0x4000288	       252	argv.c	FUNCTION_5	IF_1	DO_1	ELSE_2	ELSE_6	IF_9	ELSE_7
0x4000253	            0x3c27	                            cmp al, 0x27	       257	argv.c	FUNCTION_5	IF_1	DO_1	ELSE_2	ELSE_8	IF_11
0x4000255	            0x7423	                            je 0x400027a	       257	argv.c	FUNCTION_5	IF_1	DO_1	ELSE_2	ELSE_8	IF_11
0x4000257	            0x3c22	                            cmp al, 0x22	       261	argv.c	FUNCTION_5	IF_1	DO_1	ELSE_2	ELSE_8	ELSE_9	IF_12
0x4000259	            0x7427	                            je 0x4000282	       261	argv.c	FUNCTION_5	IF_1	DO_1	ELSE_2	ELSE_8	ELSE_9	IF_12
0x400025b	            0x8802	                      mov byte [rdx], al	       267	argv.c	FUNCTION_5	IF_1	DO_1	ELSE_2	ELSE_8	ELSE_10
0x400025d	        0x488d5201	                      lea rdx, [rdx + 1]	       267	argv.c	FUNCTION_5	IF_1	DO_1	ELSE_2	ELSE_8	ELSE_10
0x4000261	            0xeb25	                           jmp 0x4000288	       267	argv.c	FUNCTION_5	IF_1	DO_1	ELSE_2	ELSE_8	ELSE_10
0x4000263	      0xbd01000000	                              mov ebp, 1	       231	argv.c	FUNCTION_5	IF_1	DO_1	ELSE_2	ELSE_3	IF_6
0x4000268	            0xeb1e	                           jmp 0x4000288	       231	argv.c	FUNCTION_5	IF_1	DO_1	ELSE_2	ELSE_3	IF_6
0x400026a	    0x41bc00000000	                             mov r12d, 0	       237	argv.c	FUNCTION_5	IF_1	DO_1	ELSE_2	ELSE_4	IF_7	IF_8
0x4000270	            0xeb16	                           jmp 0x4000288	       237	argv.c	FUNCTION_5	IF_1	DO_1	ELSE_2	ELSE_4	IF_7	IF_8
0x4000272	    0x41bd00000000	                             mov r13d, 0	       248	argv.c	FUNCTION_5	IF_1	DO_1	ELSE_2	ELSE_6	IF_9	IF_10
0x4000278	            0xeb0e	                           jmp 0x4000288	       248	argv.c	FUNCTION_5	IF_1	DO_1	ELSE_2	ELSE_6	IF_9	IF_10
0x400027a	    0x41bc01000000	                             mov r12d, 1	       259	argv.c	FUNCTION_5	IF_1	DO_1	ELSE_2	ELSE_8	IF_11
0x4000280	            0xeb06	                           jmp 0x4000288	       259	argv.c	FUNCTION_5	IF_1	DO_1	ELSE_2	ELSE_8	IF_11
0x4000282	    0x41bd01000000	                             mov r13d, 1	       263	argv.c	FUNCTION_5	IF_1	DO_1	ELSE_2	ELSE_8	ELSE_9	IF_12
0x4000288	        0x4883c301	                              add rbx, 1	       270	argv.c	FUNCTION_5	IF_1	DO_1	ELSE_2
0x400028c	           0xfb603	                   movzx eax, byte [rbx]	       216	argv.c	FUNCTION_5	IF_1	DO_1
0x400028f	            0x84c0	                             test al, al	       216	argv.c	FUNCTION_5	IF_1	DO_1
0x4000291	     0xf856affffff	                           jne 0x4000201	       216	argv.c	FUNCTION_5	IF_1	DO_1
0x4000297	            0xeb05	                           jmp 0x400029e	       216	argv.c	FUNCTION_5	IF_1	DO_1
0x4000299	      0x488b542410	            mov rdx, qword [rsp + 0x10] 	       215	argv.c	FUNCTION_5	IF_1	DO_1
0x400029e	          0xc60200	                       mov byte [rdx], 0	       273	argv.c	FUNCTION_5	IF_1	DO_1
0x40002a1	      0x4c63742408	            movsxd r14, dword [rsp + 8] 	       274	argv.c	FUNCTION_5	IF_1	DO_1	CALL_7
0x40002a6	        0x49c1e603	                              shl r14, 3	       274	argv.c	FUNCTION_5	IF_1	DO_1	CALL_7
0x40002aa	        0x4b8d3c37	                    lea rdi, [r15 + r14]	       274	argv.c	FUNCTION_5	IF_1	DO_1	CALL_7
0x40002ae	      0x48897c2418	             mov qword [rsp + 0x18], rdi	       274	argv.c	FUNCTION_5	IF_1	DO_1	CALL_7
0x40002b3	      0x488b7c2410	            mov rdi, qword [rsp + 0x10] 	       274	argv.c	FUNCTION_5	IF_1	DO_1	CALL_7
0x40002b8	      0xe800000000	                          call 0x40002bd	       274	argv.c	FUNCTION_5	IF_1	DO_1	CALL_7
0x40002bd	      0x488b7c2418	            mov rdi, qword [rsp + 0x18] 	       274	argv.c	FUNCTION_5	IF_1	DO_1	CALL_7
0x40002c2	          0x488907	                    mov qword [rdi], rax	       274	argv.c	FUNCTION_5	IF_1	DO_1	CALL_7
0x40002c5	      0x8344240801	                  add dword [rsp + 8], 1	       275	argv.c	FUNCTION_5	IF_1	DO_1
0x40002ca	    0x4bc744370800	            mov qword [r15 + r14 + 8], 0	       276	argv.c	FUNCTION_5	IF_1	DO_1
0x40002d3	           0xfb603	                   movzx eax, byte [rbx]	       121	argv.c	FUNCTION_3	WHILE_1	CALL_1
0x40002d6	           0xfb6d0	                           movzx edx, al	       121	argv.c	FUNCTION_3	WHILE_1	CALL_1
0x40002d9	    0xf68412000000	            test byte [rdx + rdx], 0x40 	       121	argv.c	FUNCTION_3	WHILE_1	CALL_1
0x40002e1	            0x7414	                            je 0x40002f7	       121	argv.c	FUNCTION_3	WHILE_1	CALL_1
0x40002e3	        0x4883c301	                              add rbx, 1	       123	argv.c	FUNCTION_3	WHILE_1
0x40002e7	           0xfb603	                   movzx eax, byte [rbx]	       121	argv.c	FUNCTION_3	WHILE_1	CALL_1
0x40002ea	           0xfb6d0	                           movzx edx, al	       121	argv.c	FUNCTION_3	WHILE_1	CALL_1
0x40002ed	    0xf68412000000	            test byte [rdx + rdx], 0x40 	       121	argv.c	FUNCTION_3	WHILE_1	CALL_1
0x40002f5	            0x75ec	                           jne 0x40002e3	       121	argv.c	FUNCTION_3	WHILE_1	CALL_1
0x40002f7	            0x84c0	                             test al, al	       280	argv.c	FUNCTION_5	IF_1	WHILE_1
0x40002f9	     0xf8580feffff	                           jne 0x400017f	       280	argv.c	FUNCTION_5	IF_1	WHILE_1
0x40002ff	      0x488b7c2410	            mov rdi, qword [rsp + 0x10] 	       282	argv.c	FUNCTION_5	IF_1	CALL_9
0x4000304	      0xe800000000	                          call 0x4000309	       282	argv.c	FUNCTION_5	IF_1	CALL_9
0x4000309	            0xeb06	                           jmp 0x4000311	       282	argv.c	FUNCTION_5	IF_1	CALL_9
0x400030b	    0x41bf00000000	                             mov r15d, 0	       185	argv.c	FUNCTION_5
0x4000311	          0x4c89f8	                            mov rax, r15	       285	argv.c	FUNCTION_5
0x4000314	        0x4883c428	                           add rsp, 0x28	       285	argv.c	FUNCTION_5
0x4000318	              0x5b	                                 pop rbx	       285	argv.c	FUNCTION_5
0x4000319	              0x5d	                                 pop rbp	       285	argv.c	FUNCTION_5
0x400031a	            0x415c	                                 pop r12	       285	argv.c	FUNCTION_5
0x400031c	            0x415d	                                 pop r13	       285	argv.c	FUNCTION_5
0x400031e	            0x415e	                                 pop r14	       285	argv.c	FUNCTION_5
0x4000320	            0x415f	                                 pop r15	       285	argv.c	FUNCTION_5
0x4000322	              0xc3	                                     ret	       285	argv.c	FUNCTION_5
