adler32_combine	ELSE,0:DO,0:functions,0:FOR,0:CALL,1:WHILE,0:SWITCH,0:IF,0	2
0x400060b	      0xe830faffff	                          call 0x4000040	       177	adler32.c	FUNCTION_2	CALL_1
0x4000610	            0xf3c3	                                     ret	       178	adler32.c	FUNCTION_2
adler32_combine_	ELSE,0:DO,0:functions,0:FOR,0:CALL,0:WHILE,0:SWITCH,0:IF,5	67
0x4000040	          0x4889d1	                            mov rcx, rdx	       147	adler32.c	FUNCTION_1
0x4000043	      0xb8ffffffff	                     mov eax, 0xffffffff	       154	adler32.c	FUNCTION_1	IF_1
0x4000048	          0x4885d2	                           test rdx, rdx	       153	adler32.c	FUNCTION_1	IF_1
0x400004b	     0xf88f8000000	                            js 0x4000149	       153	adler32.c	FUNCTION_1	IF_1
0x4000051	        0x440fb7c7	                           movzx r8d, di	       159	adler32.c	FUNCTION_1
0x4000055	    0x48bae7e29786	          movabs rdx, 0x800780708697e2e7	       160	adler32.c	FUNCTION_1
0x400005f	          0x4889c8	                            mov rax, rcx	       160	adler32.c	FUNCTION_1
0x4000062	          0x48f7ea	                                imul rdx	       160	adler32.c	FUNCTION_1
0x4000065	          0x4801ca	                            add rdx, rcx	       160	adler32.c	FUNCTION_1
0x4000068	        0x48c1fa0f	                            sar rdx, 0xf	       160	adler32.c	FUNCTION_1
0x400006c	          0x4889c8	                            mov rax, rcx	       160	adler32.c	FUNCTION_1
0x400006f	        0x48c1f83f	                           sar rax, 0x3f	       160	adler32.c	FUNCTION_1
0x4000073	          0x4829c2	                            sub rdx, rax	       160	adler32.c	FUNCTION_1
0x4000076	          0x4989d1	                             mov r9, rdx	       160	adler32.c	FUNCTION_1
0x4000079	        0x49c1e104	                               shl r9, 4	       160	adler32.c	FUNCTION_1
0x400007d	          0x4889d0	                            mov rax, rdx	       160	adler32.c	FUNCTION_1
0x4000080	        0x48c1e010	                           shl rax, 0x10	       160	adler32.c	FUNCTION_1
0x4000084	          0x4c29c8	                             sub rax, r9	       160	adler32.c	FUNCTION_1
0x4000087	          0x4801c2	                            add rdx, rax	       160	adler32.c	FUNCTION_1
0x400008a	            0x89c8	                            mov eax, ecx	       160	adler32.c	FUNCTION_1
0x400008c	            0x29d0	                            sub eax, edx	       160	adler32.c	FUNCTION_1
0x400008e	          0x4d89c2	                             mov r10, r8	       160	adler32.c	FUNCTION_1
0x4000091	        0x4c0fafd0	                           imul r10, rax	       160	adler32.c	FUNCTION_1
0x4000095	        0x440fb7ce	                           movzx r9d, si	       162	adler32.c	FUNCTION_1
0x4000099	          0x4d01c1	                              add r9, r8	       162	adler32.c	FUNCTION_1
0x400009c	    0x4d8d81f0ff00	                   lea r8, [r9 + 0xfff0]	       162	adler32.c	FUNCTION_1
0x40000a3	        0x48c1ef10	                           shr rdi, 0x10	       163	adler32.c	FUNCTION_1
0x40000a7	           0xfb7ff	                           movzx edi, di	       163	adler32.c	FUNCTION_1
0x40000aa	        0x48c1ee10	                           shr rsi, 0x10	       163	adler32.c	FUNCTION_1
0x40000ae	           0xfb7f6	                           movzx esi, si	       163	adler32.c	FUNCTION_1
0x40000b1	          0x4801f7	                            add rdi, rsi	       163	adler32.c	FUNCTION_1
0x40000b4	          0x4829c7	                            sub rdi, rax	       163	adler32.c	FUNCTION_1
0x40000b7	          0x4889fe	                            mov rsi, rdi	       163	adler32.c	FUNCTION_1
0x40000ba	    0x48bacdc52f0d	             movabs rdx, 0xf00e10d2fc5cd	       163	adler32.c	FUNCTION_1
0x40000c4	          0x4c89d0	                            mov rax, r10	       163	adler32.c	FUNCTION_1
0x40000c7	          0x48f7e2	                                 mul rdx	       163	adler32.c	FUNCTION_1
0x40000ca	          0x4c89d1	                            mov rcx, r10	       163	adler32.c	FUNCTION_1
0x40000cd	          0x4829d1	                            sub rcx, rdx	       163	adler32.c	FUNCTION_1
0x40000d0	          0x48d1e9	                              shr rcx, 1	       163	adler32.c	FUNCTION_1
0x40000d3	          0x4801ca	                            add rdx, rcx	       163	adler32.c	FUNCTION_1
0x40000d6	        0x48c1ea0f	                            shr rdx, 0xf	       163	adler32.c	FUNCTION_1
0x40000da	          0x4889d1	                            mov rcx, rdx	       163	adler32.c	FUNCTION_1
0x40000dd	        0x48c1e104	                              shl rcx, 4	       163	adler32.c	FUNCTION_1
0x40000e1	          0x4889d0	                            mov rax, rdx	       163	adler32.c	FUNCTION_1
0x40000e4	        0x48c1e010	                           shl rax, 0x10	       163	adler32.c	FUNCTION_1
0x40000e8	          0x4829c8	                            sub rax, rcx	       163	adler32.c	FUNCTION_1
0x40000eb	          0x4801c2	                            add rdx, rax	       163	adler32.c	FUNCTION_1
0x40000ee	          0x4c89d1	                            mov rcx, r10	       163	adler32.c	FUNCTION_1
0x40000f1	          0x4829d1	                            sub rcx, rdx	       163	adler32.c	FUNCTION_1
0x40000f4	          0x4801ce	                            add rsi, rcx	       163	adler32.c	FUNCTION_1
0x40000f7	    0x488d96f1ff00	                 lea rdx, [rsi + 0xfff1]	       163	adler32.c	FUNCTION_1
0x40000fe	    0x4981f8f0ff00	                          cmp r8, 0xfff0	       164	adler32.c	FUNCTION_1	IF_2
0x4000105	            0x7614	                           jbe 0x400011b	       164	adler32.c	FUNCTION_1	IF_2
0x4000107	        0x4d8d41ff	                        lea r8, [r9 - 1]	       164	adler32.c	FUNCTION_1	IF_2
0x400010b	    0x4981f8f0ff00	                          cmp r8, 0xfff0	       165	adler32.c	FUNCTION_1	IF_3
0x4000112	            0x7607	                           jbe 0x400011b	       165	adler32.c	FUNCTION_1	IF_3
0x4000114	    0x4d8d810e00ff	                   lea r8, [r9 - 0xfff2]	       165	adler32.c	FUNCTION_1	IF_3
0x400011b	    0x4881eef1ff00	                         sub rsi, 0xfff1	       166	adler32.c	FUNCTION_1	IF_4
0x4000122	    0x4881fae2ff01	                        cmp rdx, 0x1ffe2	       166	adler32.c	FUNCTION_1	IF_4
0x4000129	        0x480f43d6	                         cmovae rdx, rsi	       166	adler32.c	FUNCTION_1	IF_4
0x400012d	    0x488d820f00ff	                 lea rax, [rdx - 0xfff1]	       167	adler32.c	FUNCTION_1	IF_5
0x4000134	    0x4881faf1ff00	                         cmp rdx, 0xfff1	       167	adler32.c	FUNCTION_1	IF_5
0x400013b	        0x480f43d0	                         cmovae rdx, rax	       167	adler32.c	FUNCTION_1	IF_5
0x400013f	        0x48c1e210	                           shl rdx, 0x10	       168	adler32.c	FUNCTION_1
0x4000143	          0x4889d0	                            mov rax, rdx	       168	adler32.c	FUNCTION_1
0x4000146	          0x4c09c0	                              or rax, r8	       168	adler32.c	FUNCTION_1
0x4000149	            0xf3c3	                                     ret	       169	adler32.c	FUNCTION_1
adler32_combine64	ELSE,0:DO,0:functions,0:FOR,0:CALL,1:WHILE,0:SWITCH,0:IF,0	2
0x4000612	      0xe829faffff	                          call 0x4000040	       185	adler32.c	FUNCTION_3	CALL_1
0x4000617	            0xf3c3	                                     ret	       186	adler32.c	FUNCTION_3
