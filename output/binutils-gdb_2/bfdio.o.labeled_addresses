bfd_bwrite	WHILE,0:CALL,2:ELSE,1:FOR,0:functions,0:SWITCH,0:IF,3:DO,0	29
0x4000375	            0x4154	                                push r12	       207	bfdio.c	FUNCTION_6
0x4000377	              0x55	                                push rbp	       207	bfdio.c	FUNCTION_6
0x4000378	              0x53	                                push rbx	       207	bfdio.c	FUNCTION_6
0x4000379	          0x4989f4	                            mov r12, rsi	       207	bfdio.c	FUNCTION_6
0x400037c	          0x4889d5	                            mov rbp, rdx	       207	bfdio.c	FUNCTION_6
0x400037f	        0x488b4218	            mov rax, qword [rdx + 0x18] 	       210	bfdio.c	FUNCTION_6	IF_1
0x4000383	          0x4885c0	                           test rax, rax	       210	bfdio.c	FUNCTION_6	IF_1
0x4000386	            0x7417	                            je 0x400039f	       210	bfdio.c	FUNCTION_6	IF_1
0x4000388	          0x4889f2	                            mov rdx, rsi	       211	bfdio.c	FUNCTION_6	CALL_1
0x400038b	          0x4889fe	                            mov rsi, rdi	       211	bfdio.c	FUNCTION_6	CALL_1
0x400038e	          0x4889ef	                            mov rdi, rbp	       211	bfdio.c	FUNCTION_6	CALL_1
0x4000391	          0xff5008	                    call qword [rax + 8]	       211	bfdio.c	FUNCTION_6	CALL_1
0x4000394	          0x4889c3	                            mov rbx, rax	       211	bfdio.c	FUNCTION_6	CALL_1
0x4000397	        0x4883f8ff	             cmp rax, 0xffffffffffffffff	       215	bfdio.c	FUNCTION_6	IF_2
0x400039b	            0x7507	                           jne 0x40003a4	       215	bfdio.c	FUNCTION_6	IF_2
0x400039d	            0xeb09	                           jmp 0x40003a8	       215	bfdio.c	FUNCTION_6	IF_2
0x400039f	      0xbb00000000	                              mov ebx, 0	       213	bfdio.c	FUNCTION_6	ELSE_1
0x40003a4	        0x48015d30	            add qword [rbp + 0x30], rbx 	       216	bfdio.c	FUNCTION_6	IF_2
0x40003a8	          0x4939dc	                            cmp r12, rbx	       217	bfdio.c	FUNCTION_6	IF_3
0x40003ab	            0x7415	                            je 0x40003c2	       217	bfdio.c	FUNCTION_6	IF_3
0x40003ad	      0xe800000000	                          call 0x40003b2	       220	bfdio.c	FUNCTION_6	IF_3
0x40003b2	    0xc7001c000000	                   mov dword [rax], 0x1c	       220	bfdio.c	FUNCTION_6	IF_3
0x40003b8	      0xbf01000000	                              mov edi, 1	       222	bfdio.c	FUNCTION_6	IF_3	CALL_2
0x40003bd	      0xe800000000	                          call 0x40003c2	       222	bfdio.c	FUNCTION_6	IF_3	CALL_2
0x40003c2	          0x4889d8	                            mov rax, rbx	       225	bfdio.c	FUNCTION_6
0x40003c5	              0x5b	                                 pop rbx	       225	bfdio.c	FUNCTION_6
0x40003c6	              0x5d	                                 pop rbp	       225	bfdio.c	FUNCTION_6
0x40003c7	            0x415c	                                 pop r12	       225	bfdio.c	FUNCTION_6
0x40003c9	              0xc3	                                     ret	       225	bfdio.c	FUNCTION_6
memory_bstat	WHILE,0:CALL,1:ELSE,0:FOR,0:functions,0:SWITCH,0:IF,0:DO,0	16
0x4000053	        0x488b5710	            mov rdx, qword [rdi + 0x10] 	       624	bfdio.c	FUNCTION_21
0x4000057	    0x48c706000000	                      mov qword [rsi], 0	        90	string3.h	FUNCTION_26	CALL_6
0x400005e	    0x48c786880000	               mov qword [rsi + 0x88], 0	        90	string3.h	FUNCTION_26	CALL_6
0x4000069	        0x488d7e08	                      lea rdi, [rsi + 8]	        90	string3.h	FUNCTION_26	CALL_6
0x400006d	        0x4883e7f8	             and rdi, 0xfffffffffffffff8	        90	string3.h	FUNCTION_26	CALL_6
0x4000071	          0x4889f1	                            mov rcx, rsi	        90	string3.h	FUNCTION_26	CALL_6
0x4000074	          0x4829f9	                            sub rcx, rdi	        90	string3.h	FUNCTION_26	CALL_6
0x4000077	    0x81c190000000	                           add ecx, 0x90	        90	string3.h	FUNCTION_26	CALL_6
0x400007d	          0xc1e903	                              shr ecx, 3	        90	string3.h	FUNCTION_26	CALL_6
0x4000080	            0x89c9	                            mov ecx, ecx	        90	string3.h	FUNCTION_26	CALL_6
0x4000082	      0xb800000000	                              mov eax, 0	        90	string3.h	FUNCTION_26	CALL_6
0x4000087	          0xf348ab	              rep stosq qword [rdi], rax	        90	string3.h	FUNCTION_26	CALL_6
0x400008a	          0x488b02	                    mov rax, qword [rdx]	       627	bfdio.c	FUNCTION_21
0x400008d	        0x48894630	             mov qword [rsi + 0x30], rax	       627	bfdio.c	FUNCTION_21
0x4000091	      0xb800000000	                              mov eax, 0	       630	bfdio.c	FUNCTION_21
0x4000096	              0xc3	                                     ret	       630	bfdio.c	FUNCTION_21
memory_bread	WHILE,0:CALL,2:ELSE,1:FOR,0:functions,0:SWITCH,0:IF,2:DO,0	33
0x400019e	            0x4155	                                push r13	       495	bfdio.c	FUNCTION_15
0x40001a0	            0x4154	                                push r12	       495	bfdio.c	FUNCTION_15
0x40001a2	              0x55	                                push rbp	       495	bfdio.c	FUNCTION_15
0x40001a3	              0x53	                                push rbx	       495	bfdio.c	FUNCTION_15
0x40001a4	        0x4883ec08	                              sub rsp, 8	       495	bfdio.c	FUNCTION_15
0x40001a8	          0x4989fd	                            mov r13, rdi	       495	bfdio.c	FUNCTION_15
0x40001ab	          0x4889f5	                            mov rbp, rsi	       495	bfdio.c	FUNCTION_15
0x40001ae	        0x4c8b6710	            mov r12, qword [rdi + 0x10] 	       499	bfdio.c	FUNCTION_15
0x40001b2	          0x4889d3	                            mov rbx, rdx	       500	bfdio.c	FUNCTION_15
0x40001b5	        0x488b4f30	            mov rcx, qword [rdi + 0x30] 	       501	bfdio.c	FUNCTION_15	IF_1
0x40001b9	        0x498b0424	                    mov rax, qword [r12]	       501	bfdio.c	FUNCTION_15	IF_1
0x40001bd	          0x4801ca	                            add rdx, rcx	       501	bfdio.c	FUNCTION_15	IF_1
0x40001c0	          0x4839c2	                            cmp rdx, rax	       501	bfdio.c	FUNCTION_15	IF_1
0x40001c3	            0x761c	                           jbe 0x40001e1	       501	bfdio.c	FUNCTION_15	IF_1
0x40001c5	          0x4889c3	                            mov rbx, rax	       506	bfdio.c	FUNCTION_15	IF_1	ELSE_1
0x40001c8	          0x4829cb	                            sub rbx, rcx	       506	bfdio.c	FUNCTION_15	IF_1	ELSE_1
0x40001cb	          0x4839c1	                            cmp rcx, rax	       506	bfdio.c	FUNCTION_15	IF_1	ELSE_1
0x40001ce	      0xb800000000	                              mov eax, 0	       506	bfdio.c	FUNCTION_15	IF_1	ELSE_1
0x40001d3	        0x480f47d8	                          cmova rbx, rax	       506	bfdio.c	FUNCTION_15	IF_1	ELSE_1
0x40001d7	      0xbf12000000	                           mov edi, 0x12	       507	bfdio.c	FUNCTION_15	IF_1	CALL_1
0x40001dc	      0xe800000000	                          call 0x40001e1	       507	bfdio.c	FUNCTION_15	IF_1	CALL_1
0x40001e1	        0x498b7530	            mov rsi, qword [r13 + 0x30] 	        53	string3.h	FUNCTION_23	CALL_3
0x40001e5	      0x4903742408	                add rsi, qword [r12 + 8]	        53	string3.h	FUNCTION_23	CALL_3
0x40001ea	          0x4889da	                            mov rdx, rbx	        53	string3.h	FUNCTION_23	CALL_3
0x40001ed	          0x4889ef	                            mov rdi, rbp	        53	string3.h	FUNCTION_23	CALL_3
0x40001f0	      0xe800000000	                          call 0x40001f5	        53	string3.h	FUNCTION_23	CALL_3
0x40001f5	          0x4889d8	                            mov rax, rbx	       511	bfdio.c	FUNCTION_15
0x40001f8	        0x4883c408	                              add rsp, 8	       511	bfdio.c	FUNCTION_15
0x40001fc	              0x5b	                                 pop rbx	       511	bfdio.c	FUNCTION_15
0x40001fd	              0x5d	                                 pop rbp	       511	bfdio.c	FUNCTION_15
0x40001fe	            0x415c	                                 pop r12	       511	bfdio.c	FUNCTION_15
0x4000200	            0x415d	                                 pop r13	       511	bfdio.c	FUNCTION_15
0x4000202	              0xc3	                                     ret	       511	bfdio.c	FUNCTION_15
bfd_mmap	WHILE,0:CALL,1:ELSE,0:FOR,0:functions,0:SWITCH,0:IF,1:DO,0	10
0x4000689	        0x4c8b5718	            mov r10, qword [rdi + 0x18] 	       484	bfdio.c	FUNCTION_14	IF_1
0x400068d	    0x48c7c0ffffff	             mov rax, 0xffffffffffffffff	       485	bfdio.c	FUNCTION_14	IF_1
0x4000694	          0x4d85d2	                           test r10, r10	       484	bfdio.c	FUNCTION_14	IF_1
0x4000697	            0x7414	                            je 0x40006ad	       484	bfdio.c	FUNCTION_14	IF_1
0x4000699	        0x4883ec08	                              sub rsp, 8	       481	bfdio.c	FUNCTION_14
0x400069d	        0xff742418	                 push qword [rsp + 0x18]	       487	bfdio.c	FUNCTION_14	CALL_1
0x40006a1	        0xff742418	                 push qword [rsp + 0x18]	       487	bfdio.c	FUNCTION_14	CALL_1
0x40006a5	        0x41ff5238	                 call qword [r10 + 0x38]	       487	bfdio.c	FUNCTION_14	CALL_1
0x40006a9	        0x4883c418	                           add rsp, 0x18	       489	bfdio.c	FUNCTION_14
0x40006ad	            0xf3c3	                                     ret	       489	bfdio.c	FUNCTION_14
bfd_flush	WHILE,0:CALL,1:ELSE,0:FOR,0:functions,0:SWITCH,0:IF,1:DO,0	8
0x4000416	        0x488b5718	            mov rdx, qword [rdi + 0x18] 	       254	bfdio.c	ELSE_1	FUNCTION_8	IF_1
0x400041a	      0xb800000000	                              mov eax, 0	       256	bfdio.c	ELSE_1	FUNCTION_8
0x400041f	          0x4885d2	                           test rdx, rdx	       254	bfdio.c	ELSE_1	FUNCTION_8	IF_1
0x4000422	            0x740b	                            je 0x400042f	       254	bfdio.c	ELSE_1	FUNCTION_8	IF_1
0x4000424	        0x4883ec08	                              sub rsp, 8	       253	bfdio.c	ELSE_1	FUNCTION_8
0x4000428	          0xff5228	                 call qword [rdx + 0x28]	       255	bfdio.c	ELSE_1	FUNCTION_8	CALL_1
0x400042b	        0x4883c408	                              add rsp, 8	       257	bfdio.c	ELSE_1	FUNCTION_8
0x400042f	            0xf3c3	                                     ret	       257	bfdio.c	ELSE_1	FUNCTION_8
bfd_tell	WHILE,1:CALL,2:ELSE,1:FOR,0:functions,0:SWITCH,0:IF,1:DO,0	24
0x40003ca	              0x53	                                push rbx	       229	bfdio.c	FUNCTION_7
0x40003cb	          0x4889fb	                            mov rbx, rdi	       229	bfdio.c	FUNCTION_7
0x40003ce	        0x488b5718	            mov rdx, qword [rdi + 0x18] 	       232	bfdio.c	FUNCTION_7	IF_1
0x40003d2	      0xb800000000	                              mov eax, 0	       245	bfdio.c	FUNCTION_7	ELSE_1
0x40003d7	          0x4885d2	                           test rdx, rdx	       232	bfdio.c	FUNCTION_7	IF_1
0x40003da	            0x7434	                            je 0x4000410	       232	bfdio.c	FUNCTION_7	IF_1
0x40003dc	          0xff5210	                 call qword [rdx + 0x10]	       235	bfdio.c	FUNCTION_7	IF_1	CALL_1
0x40003df	    0x488b8bd00000	            mov rcx, qword [rbx + 0xd0] 	       237	bfdio.c	FUNCTION_7	IF_1	WHILE_1
0x40003e6	          0x4885c9	                           test rcx, rcx	       237	bfdio.c	FUNCTION_7	IF_1	WHILE_1
0x40003e9	            0x7425	                            je 0x4000410	       237	bfdio.c	FUNCTION_7	IF_1	WHILE_1
0x40003eb	        0xf6414801	               test byte [rcx + 0x48], 1	       238	bfdio.c	FUNCTION_7	IF_1	WHILE_1	CALL_2
0x40003ef	            0x751f	                           jne 0x4000410	       238	bfdio.c	FUNCTION_7	IF_1	WHILE_1	CALL_2
0x40003f1	          0x4889de	                            mov rsi, rbx	       238	bfdio.c	FUNCTION_7	IF_1	WHILE_1	CALL_2
0x40003f4	        0x482b4658	             sub rax, qword [rsi + 0x58]	       240	bfdio.c	FUNCTION_7	IF_1	WHILE_1
0x40003f8	    0x488b91d00000	            mov rdx, qword [rcx + 0xd0] 	       237	bfdio.c	FUNCTION_7	IF_1	WHILE_1
0x40003ff	          0x4885d2	                           test rdx, rdx	       237	bfdio.c	FUNCTION_7	IF_1	WHILE_1
0x4000402	            0x740c	                            je 0x4000410	       237	bfdio.c	FUNCTION_7	IF_1	WHILE_1
0x4000404	          0x4889ce	                            mov rsi, rcx	       237	bfdio.c	FUNCTION_7	IF_1	WHILE_1
0x4000407	          0x4889d1	                            mov rcx, rdx	       237	bfdio.c	FUNCTION_7	IF_1	WHILE_1
0x400040a	        0xf6424801	               test byte [rdx + 0x48], 1	       238	bfdio.c	FUNCTION_7	IF_1	WHILE_1	CALL_2
0x400040e	            0x74e4	                            je 0x40003f4	       238	bfdio.c	FUNCTION_7	IF_1	WHILE_1	CALL_2
0x4000410	        0x48894330	             mov qword [rbx + 0x30], rax	       247	bfdio.c	FUNCTION_7	ELSE_1
0x4000414	              0x5b	                                 pop rbx	       249	bfdio.c	FUNCTION_7	ELSE_1
0x4000415	              0xc3	                                     ret	       249	bfdio.c	FUNCTION_7	ELSE_1
memory_bwrite	WHILE,0:CALL,3:ELSE,0:FOR,0:functions,0:SWITCH,0:IF,4:DO,0	49
0x4000203	            0x4156	                                push r14	       515	bfdio.c	FUNCTION_16
0x4000205	            0x4155	                                push r13	       515	bfdio.c	FUNCTION_16
0x4000207	            0x4154	                                push r12	       515	bfdio.c	FUNCTION_16
0x4000209	              0x55	                                push rbp	       515	bfdio.c	FUNCTION_16
0x400020a	              0x53	                                push rbx	       515	bfdio.c	FUNCTION_16
0x400020b	          0x4989fd	                            mov r13, rdi	       515	bfdio.c	FUNCTION_16
0x400020e	          0x4989f6	                            mov r14, rsi	       515	bfdio.c	FUNCTION_16
0x4000211	          0x4889d5	                            mov rbp, rdx	       515	bfdio.c	FUNCTION_16
0x4000214	        0x4c8b6710	            mov r12, qword [rdi + 0x10] 	       516	bfdio.c	FUNCTION_16
0x4000218	          0x4889d3	                            mov rbx, rdx	       518	bfdio.c	FUNCTION_16	IF_1
0x400021b	        0x48035f30	             add rbx, qword [rdi + 0x30]	       518	bfdio.c	FUNCTION_16	IF_1
0x400021f	        0x498b0424	                    mov rax, qword [r12]	       518	bfdio.c	FUNCTION_16	IF_1
0x4000223	          0x4839c3	                            cmp rbx, rax	       518	bfdio.c	FUNCTION_16	IF_1
0x4000226	            0x7656	                           jbe 0x400027e	       518	bfdio.c	FUNCTION_16	IF_1
0x4000228	        0x49891c24	                    mov qword [r12], rbx	       523	bfdio.c	FUNCTION_16	IF_1
0x400022c	        0x4883c37f	                           add rbx, 0x7f	       525	bfdio.c	FUNCTION_16	IF_1
0x4000230	        0x4883e380	             and rbx, 0xffffffffffffff80	       525	bfdio.c	FUNCTION_16	IF_1
0x4000234	        0x4883c07f	                           add rax, 0x7f	       526	bfdio.c	FUNCTION_16	IF_1	IF_2
0x4000238	        0x4883e080	             and rax, 0xffffffffffffff80	       526	bfdio.c	FUNCTION_16	IF_1	IF_2
0x400023c	          0x4839d8	                            cmp rax, rbx	       526	bfdio.c	FUNCTION_16	IF_1	IF_2
0x400023f	            0x733d	                           jae 0x400027e	       526	bfdio.c	FUNCTION_16	IF_1	IF_2
0x4000241	      0x498b7c2408	                mov rdi, qword [r12 + 8]	       528	bfdio.c	FUNCTION_16	IF_1	IF_2	CALL_1
0x4000246	          0x4889de	                            mov rsi, rbx	       528	bfdio.c	FUNCTION_16	IF_1	IF_2	CALL_1
0x4000249	      0xe800000000	                          call 0x400024e	       528	bfdio.c	FUNCTION_16	IF_1	IF_2	CALL_1
0x400024e	      0x4989442408	                mov qword [r12 + 8], rax	       528	bfdio.c	FUNCTION_16	IF_1	IF_2	CALL_1
0x4000253	          0x4885c0	                           test rax, rax	       529	bfdio.c	FUNCTION_16	IF_1	IF_2	IF_3
0x4000256	            0x750a	                           jne 0x4000262	       529	bfdio.c	FUNCTION_16	IF_1	IF_2	IF_3
0x4000258	    0x49c704240000	                      mov qword [r12], 0	       531	bfdio.c	FUNCTION_16	IF_1	IF_2	IF_3
0x4000260	            0xeb33	                           jmp 0x4000295	       532	bfdio.c	FUNCTION_16	IF_1	IF_2	IF_3
0x4000262	        0x498b3c24	                    mov rdi, qword [r12]	       534	bfdio.c	FUNCTION_16	IF_1	IF_2	IF_4
0x4000266	          0x4839fb	                            cmp rbx, rdi	       534	bfdio.c	FUNCTION_16	IF_1	IF_2	IF_4
0x4000269	            0x7613	                           jbe 0x400027e	       534	bfdio.c	FUNCTION_16	IF_1	IF_2	IF_4
0x400026b	          0x4889da	                            mov rdx, rbx	        90	string3.h	FUNCTION_26	CALL_6
0x400026e	          0x4829fa	                            sub rdx, rdi	        90	string3.h	FUNCTION_26	CALL_6
0x4000271	          0x4801c7	                            add rdi, rax	        90	string3.h	FUNCTION_26	CALL_6
0x4000274	      0xbe00000000	                              mov esi, 0	        90	string3.h	FUNCTION_26	CALL_6
0x4000279	      0xe800000000	                          call 0x400027e	        90	string3.h	FUNCTION_26	CALL_6
0x400027e	        0x498b7d30	            mov rdi, qword [r13 + 0x30] 	        53	string3.h	FUNCTION_23	CALL_3
0x4000282	      0x49037c2408	                add rdi, qword [r12 + 8]	        53	string3.h	FUNCTION_23	CALL_3
0x4000287	          0x4889ea	                            mov rdx, rbp	        53	string3.h	FUNCTION_23	CALL_3
0x400028a	          0x4c89f6	                            mov rsi, r14	        53	string3.h	FUNCTION_23	CALL_3
0x400028d	      0xe800000000	                          call 0x4000292	        53	string3.h	FUNCTION_23	CALL_3
0x4000292	          0x4889e8	                            mov rax, rbp	       539	bfdio.c	FUNCTION_16
0x4000295	              0x5b	                                 pop rbx	       540	bfdio.c	FUNCTION_16
0x4000296	              0x5d	                                 pop rbp	       540	bfdio.c	FUNCTION_16
0x4000297	            0x415c	                                 pop r12	       540	bfdio.c	FUNCTION_16
0x4000299	            0x415d	                                 pop r13	       540	bfdio.c	FUNCTION_16
0x400029b	            0x415e	                                 pop r14	       540	bfdio.c	FUNCTION_16
0x400029d	              0xc3	                                     ret	       540	bfdio.c	FUNCTION_16
bfd_bread	WHILE,0:CALL,2:ELSE,1:FOR,0:functions,0:SWITCH,0:IF,5:DO,0	32
0x4000311	              0x53	                                push rbx	       178	bfdio.c	FUNCTION_5
0x4000312	          0x4889d3	                            mov rbx, rdx	       178	bfdio.c	FUNCTION_5
0x4000315	    0x488b82c80000	            mov rax, qword [rdx + 0xc8] 	       183	bfdio.c	FUNCTION_5	IF_1
0x400031c	          0x4885c0	                           test rax, rax	       183	bfdio.c	FUNCTION_5	IF_1
0x400031f	            0x7421	                            je 0x4000342	       183	bfdio.c	FUNCTION_5	IF_1
0x4000321	        0x488b4808	                mov rcx, qword [rax + 8]	       185	bfdio.c	FUNCTION_5	IF_1	CALL_1
0x4000325	        0x488b5230	            mov rdx, qword [rdx + 0x30] 	       187	bfdio.c	FUNCTION_5	IF_1	IF_2
0x4000329	        0x488d0416	                    lea rax, [rsi + rdx]	       187	bfdio.c	FUNCTION_5	IF_1	IF_2
0x400032d	          0x4839c1	                            cmp rcx, rax	       187	bfdio.c	FUNCTION_5	IF_1	IF_2
0x4000330	            0x7310	                           jae 0x4000342	       187	bfdio.c	FUNCTION_5	IF_1	IF_2
0x4000332	      0xb800000000	                              mov eax, 0	       190	bfdio.c	FUNCTION_5	IF_1	IF_2	IF_3
0x4000337	          0x4839d1	                            cmp rcx, rdx	       189	bfdio.c	FUNCTION_5	IF_1	IF_2	IF_3
0x400033a	            0x7637	                           jbe 0x4000373	       189	bfdio.c	FUNCTION_5	IF_1	IF_2	IF_3
0x400033c	          0x4829d1	                            sub rcx, rdx	       191	bfdio.c	FUNCTION_5	IF_1	IF_2
0x400033f	          0x4889ce	                            mov rsi, rcx	       191	bfdio.c	FUNCTION_5	IF_1	IF_2
0x4000342	        0x488b4318	            mov rax, qword [rbx + 0x18] 	       195	bfdio.c	FUNCTION_5	IF_4
0x4000346	          0x4885c0	                           test rax, rax	       195	bfdio.c	FUNCTION_5	IF_4
0x4000349	            0x741c	                            je 0x4000367	       195	bfdio.c	FUNCTION_5	IF_4
0x400034b	          0x4889f2	                            mov rdx, rsi	       196	bfdio.c	FUNCTION_5	CALL_2
0x400034e	          0x4889fe	                            mov rsi, rdi	       196	bfdio.c	FUNCTION_5	CALL_2
0x4000351	          0x4889df	                            mov rdi, rbx	       196	bfdio.c	FUNCTION_5	CALL_2
0x4000354	            0xff10	                        call qword [rax]	       196	bfdio.c	FUNCTION_5	CALL_2
0x4000356	          0x4889c2	                            mov rdx, rax	       196	bfdio.c	FUNCTION_5	CALL_2
0x4000359	    0x48c7c0ffffff	             mov rax, 0xffffffffffffffff	       202	bfdio.c	FUNCTION_5
0x4000360	          0x4839c2	                            cmp rdx, rax	       199	bfdio.c	FUNCTION_5	IF_5
0x4000363	            0x7507	                           jne 0x400036c	       199	bfdio.c	FUNCTION_5	IF_5
0x4000365	            0xeb0c	                           jmp 0x4000373	       199	bfdio.c	FUNCTION_5	IF_5
0x4000367	      0xba00000000	                              mov edx, 0	       198	bfdio.c	FUNCTION_5	ELSE_1
0x400036c	        0x48015330	            add qword [rbx + 0x30], rdx 	       200	bfdio.c	FUNCTION_5	IF_5
0x4000370	          0x4889d0	                            mov rax, rdx	       200	bfdio.c	FUNCTION_5	IF_5
0x4000373	              0x5b	                                 pop rbx	       203	bfdio.c	FUNCTION_5
0x4000374	              0xc3	                                     ret	       203	bfdio.c	FUNCTION_5
bfd_stat	WHILE,0:CALL,2:ELSE,1:FOR,0:functions,0:SWITCH,0:IF,2:DO,0	15
0x4000431	              0x53	                                push rbx	       263	bfdio.c	FUNCTION_9
0x4000432	        0x488b4718	            mov rax, qword [rdi + 0x18] 	       266	bfdio.c	FUNCTION_9	IF_1
0x4000436	          0x4885c0	                           test rax, rax	       266	bfdio.c	FUNCTION_9	IF_1
0x4000439	            0x740b	                            je 0x4000446	       266	bfdio.c	FUNCTION_9	IF_1
0x400043b	          0xff5030	                 call qword [rax + 0x30]	       267	bfdio.c	FUNCTION_9	CALL_1
0x400043e	            0x89c3	                            mov ebx, eax	       267	bfdio.c	FUNCTION_9	CALL_1
0x4000440	            0x85c0	                           test eax, eax	       271	bfdio.c	FUNCTION_9	IF_2
0x4000442	            0x7911	                           jns 0x4000455	       271	bfdio.c	FUNCTION_9	IF_2
0x4000444	            0xeb05	                           jmp 0x400044b	       271	bfdio.c	FUNCTION_9	IF_2
0x4000446	      0xbbffffffff	                     mov ebx, 0xffffffff	       269	bfdio.c	FUNCTION_9	ELSE_1
0x400044b	      0xbf01000000	                              mov edi, 1	       272	bfdio.c	FUNCTION_9	CALL_2
0x4000450	      0xe800000000	                          call 0x4000455	       272	bfdio.c	FUNCTION_9	CALL_2
0x4000455	            0x89d8	                            mov eax, ebx	       274	bfdio.c	FUNCTION_9
0x4000457	              0x5b	                                 pop rbx	       274	bfdio.c	FUNCTION_9
0x4000458	              0xc3	                                     ret	       274	bfdio.c	FUNCTION_9
_bfd_real_fopen	WHILE,0:CALL,13:ELSE,1:FOR,1:functions,0:SWITCH,0:IF,1:DO,0	28
0x40002ba	              0x55	                                push rbp	        86	bfdio.c	FUNCTION_4
0x40002bb	              0x53	                                push rbx	        86	bfdio.c	FUNCTION_4
0x40002bc	        0x4883ec08	                              sub rsp, 8	        86	bfdio.c	FUNCTION_4
0x40002c0	      0xe800000000	                          call 0x40002c5	       120	bfdio.c	FUNCTION_4	CALL_11
0x40002c5	          0x4889c3	                            mov rbx, rax	       120	bfdio.c	FUNCTION_4	CALL_11
0x40002c8	          0x4885c0	                           test rax, rax	        73	bfdio.c	FUNCTION_3	IF_1
0x40002cb	            0x743a	                            je 0x4000307	        73	bfdio.c	FUNCTION_3	IF_1
0x40002cd	          0x4889c7	                            mov rdi, rax	        75	bfdio.c	FUNCTION_3	IF_1	CALL_1
0x40002d0	      0xe800000000	                          call 0x40002d5	        75	bfdio.c	FUNCTION_3	IF_1	CALL_1
0x40002d5	            0x89c5	                            mov ebp, eax	        75	bfdio.c	FUNCTION_3	IF_1	CALL_1
0x40002d7	      0xba00000000	                              mov edx, 0	        76	bfdio.c	FUNCTION_3	IF_1	CALL_2
0x40002dc	      0xbe01000000	                              mov esi, 1	        76	bfdio.c	FUNCTION_3	IF_1	CALL_2
0x40002e1	            0x89c7	                            mov edi, eax	        76	bfdio.c	FUNCTION_3	IF_1	CALL_2
0x40002e3	      0xb800000000	                              mov eax, 0	        76	bfdio.c	FUNCTION_3	IF_1	CALL_2
0x40002e8	      0xe800000000	                          call 0x40002ed	        76	bfdio.c	FUNCTION_3	IF_1	CALL_2
0x40002ed	            0x85c0	                           test eax, eax	        77	bfdio.c	FUNCTION_3	IF_1	IF_2
0x40002ef	            0x7816	                            js 0x4000307	        77	bfdio.c	FUNCTION_3	IF_1	IF_2
0x40002f1	          0x83c801	                               or eax, 1	        78	bfdio.c	FUNCTION_3	IF_1	CALL_3
0x40002f4	            0x89c2	                            mov edx, eax	        78	bfdio.c	FUNCTION_3	IF_1	CALL_3
0x40002f6	      0xbe02000000	                              mov esi, 2	        78	bfdio.c	FUNCTION_3	IF_1	CALL_3
0x40002fb	            0x89ef	                            mov edi, ebp	        78	bfdio.c	FUNCTION_3	IF_1	CALL_3
0x40002fd	      0xb800000000	                              mov eax, 0	        78	bfdio.c	FUNCTION_3	IF_1	CALL_3
0x4000302	      0xe800000000	                          call 0x4000307	        78	bfdio.c	FUNCTION_3	IF_1	CALL_3
0x4000307	          0x4889d8	                            mov rax, rbx	       125	bfdio.c	FUNCTION_4
0x400030a	        0x4883c408	                              add rsp, 8	       125	bfdio.c	FUNCTION_4
0x400030e	              0x5b	                                 pop rbx	       125	bfdio.c	FUNCTION_4
0x400030f	              0x5d	                                 pop rbp	       125	bfdio.c	FUNCTION_4
0x4000310	              0xc3	                                     ret	       125	bfdio.c	FUNCTION_4
memory_bmmap	WHILE,0:CALL,0:ELSE,0:FOR,0:functions,0:SWITCH,0:IF,0:DO,0	2
0x400004b	    0x48c7c0ffffff	             mov rax, 0xffffffffffffffff	       640	bfdio.c	FUNCTION_22
0x4000052	              0xc3	                                     ret	       640	bfdio.c	FUNCTION_22
bfd_seek	WHILE,1:CALL,7:ELSE,5:FOR,0:functions,0:SWITCH,0:IF,8:DO,0	95
0x4000459	            0x4155	                                push r13	       281	bfdio.c	FUNCTION_10
0x400045b	            0x4154	                                push r12	       281	bfdio.c	FUNCTION_10
0x400045d	              0x55	                                push rbp	       281	bfdio.c	FUNCTION_10
0x400045e	              0x53	                                push rbx	       281	bfdio.c	FUNCTION_10
0x400045f	        0x4883ec08	                              sub rsp, 8	       281	bfdio.c	FUNCTION_10
0x4000463	          0x4889fd	                            mov rbp, rdi	       281	bfdio.c	FUNCTION_10
0x4000466	          0x4989f4	                            mov r12, rsi	       281	bfdio.c	FUNCTION_10
0x4000469	            0x89d3	                            mov ebx, edx	       281	bfdio.c	FUNCTION_10
0x400046b	          0x83fa01	                              cmp edx, 1	       288	bfdio.c	FUNCTION_10	CALL_1
0x400046e	            0x760f	                           jbe 0x400047f	       288	bfdio.c	FUNCTION_10	CALL_1
0x4000470	      0xbe20010000	                          mov esi, 0x120	       288	bfdio.c	FUNCTION_10	CALL_1
0x4000475	      0xbf00000000	                              mov edi, 0	       288	bfdio.c	FUNCTION_10	CALL_1
0x400047a	      0xe800000000	                          call 0x400047f	       288	bfdio.c	FUNCTION_10	CALL_1
0x400047f	          0x83fb01	                              cmp ebx, 1	       290	bfdio.c	FUNCTION_10	IF_1
0x4000482	            0x750e	                           jne 0x4000492	       290	bfdio.c	FUNCTION_10	IF_1
0x4000484	      0xb800000000	                              mov eax, 0	       291	bfdio.c	FUNCTION_10	IF_1
0x4000489	          0x4d85e4	                           test r12, r12	       290	bfdio.c	FUNCTION_10	IF_1
0x400048c	     0xf84ee000000	                            je 0x4000580	       290	bfdio.c	FUNCTION_10	IF_1
0x4000492	    0x488b95d00000	            mov rdx, qword [rbp + 0xd0] 	       293	bfdio.c	FUNCTION_10	IF_2	CALL_2
0x4000499	          0x4885d2	                           test rdx, rdx	       293	bfdio.c	FUNCTION_10	IF_2	CALL_2
0x400049c	            0x740a	                            je 0x40004a8	       293	bfdio.c	FUNCTION_10	IF_2	CALL_2
0x400049e	        0xf6424801	               test byte [rdx + 0x48], 1	       293	bfdio.c	FUNCTION_10	IF_2	CALL_2
0x40004a2	     0xf84c5000000	                            je 0x400056d	       293	bfdio.c	FUNCTION_10	IF_2	CALL_2
0x40004a8	            0x85db	                           test ebx, ebx	       295	bfdio.c	FUNCTION_10	IF_2	IF_3
0x40004aa	            0x7539	                           jne 0x40004e5	       295	bfdio.c	FUNCTION_10	IF_2	IF_3
0x40004ac	        0x4c396530	            cmp qword [rbp + 0x30], r12 	       295	bfdio.c	FUNCTION_10	IF_2	IF_3
0x40004b0	     0xf84b0000000	                            je 0x4000566	       295	bfdio.c	FUNCTION_10	IF_2	IF_3
0x40004b6	          0x4885d2	                           test rdx, rdx	       318	bfdio.c	FUNCTION_10	IF_4	WHILE_1
0x40004b9	            0x742f	                            je 0x40004ea	       318	bfdio.c	FUNCTION_10	IF_4	WHILE_1
0x40004bb	        0xf6424801	               test byte [rdx + 0x48], 1	       319	bfdio.c	FUNCTION_10	IF_4	WHILE_1	CALL_3
0x40004bf	            0x752e	                           jne 0x40004ef	       319	bfdio.c	FUNCTION_10	IF_4	WHILE_1	CALL_3
0x40004c1	          0x4889e9	                            mov rcx, rbp	       319	bfdio.c	FUNCTION_10	IF_4	WHILE_1	CALL_3
0x40004c4	          0x4c89e6	                            mov rsi, r12	       319	bfdio.c	FUNCTION_10	IF_4	WHILE_1	CALL_3
0x40004c7	        0x48037158	             add rsi, qword [rcx + 0x58]	       321	bfdio.c	FUNCTION_10	IF_4	WHILE_1
0x40004cb	    0x488b82d00000	            mov rax, qword [rdx + 0xd0] 	       318	bfdio.c	FUNCTION_10	IF_4	WHILE_1
0x40004d2	          0x4885c0	                           test rax, rax	       318	bfdio.c	FUNCTION_10	IF_4	WHILE_1
0x40004d5	            0x741b	                            je 0x40004f2	       318	bfdio.c	FUNCTION_10	IF_4	WHILE_1
0x40004d7	          0x4889d1	                            mov rcx, rdx	       318	bfdio.c	FUNCTION_10	IF_4	WHILE_1
0x40004da	          0x4889c2	                            mov rdx, rax	       318	bfdio.c	FUNCTION_10	IF_4	WHILE_1
0x40004dd	        0xf6404801	               test byte [rax + 0x48], 1	       319	bfdio.c	FUNCTION_10	IF_4	WHILE_1	CALL_3
0x40004e1	            0x74e4	                            je 0x40004c7	       319	bfdio.c	FUNCTION_10	IF_4	WHILE_1	CALL_3
0x40004e3	            0xeb0d	                           jmp 0x40004f2	       319	bfdio.c	FUNCTION_10	IF_4	WHILE_1	CALL_3
0x40004e5	          0x4c89e6	                            mov rsi, r12	       313	bfdio.c	FUNCTION_10
0x40004e8	            0xeb08	                           jmp 0x40004f2	       313	bfdio.c	FUNCTION_10
0x40004ea	          0x4c89e6	                            mov rsi, r12	       318	bfdio.c	FUNCTION_10	IF_4	WHILE_1
0x40004ed	            0xeb03	                           jmp 0x40004f2	       318	bfdio.c	FUNCTION_10	IF_4	WHILE_1
0x40004ef	          0x4c89e6	                            mov rsi, r12	       319	bfdio.c	FUNCTION_10	IF_4	WHILE_1	CALL_3
0x40004f2	        0x488b4518	            mov rax, qword [rbp + 0x18] 	       326	bfdio.c	FUNCTION_10	IF_5
0x40004f6	          0x4885c0	                           test rax, rax	       326	bfdio.c	FUNCTION_10	IF_5
0x40004f9	            0x7411	                            je 0x400050c	       326	bfdio.c	FUNCTION_10	IF_5
0x40004fb	            0x89da	                            mov edx, ebx	       327	bfdio.c	FUNCTION_10	CALL_4
0x40004fd	          0x4889ef	                            mov rdi, rbp	       327	bfdio.c	FUNCTION_10	CALL_4
0x4000500	          0xff5018	                 call qword [rax + 0x18]	       327	bfdio.c	FUNCTION_10	CALL_4
0x4000503	          0x4189c5	                           mov r13d, eax	       327	bfdio.c	FUNCTION_10	CALL_4
0x4000506	            0x85c0	                           test eax, eax	       331	bfdio.c	FUNCTION_10	ELSE_2	IF_6
0x4000508	            0x7442	                            je 0x400054c	       331	bfdio.c	FUNCTION_10	ELSE_2	IF_6
0x400050a	            0xeb06	                           jmp 0x4000512	       331	bfdio.c	FUNCTION_10	ELSE_2	IF_6
0x400050c	    0x41bdffffffff	                    mov r13d, 0xffffffff	       329	bfdio.c	FUNCTION_10	ELSE_2
0x4000512	      0xe800000000	                          call 0x4000517	       333	bfdio.c	FUNCTION_10	ELSE_2	IF_6
0x4000517	          0x4889c3	                            mov rbx, rax	       333	bfdio.c	FUNCTION_10	ELSE_2	IF_6
0x400051a	          0x448b20	                   mov r12d, dword [rax]	       333	bfdio.c	FUNCTION_10	ELSE_2	IF_6
0x400051d	          0x4889ef	                            mov rdi, rbp	       336	bfdio.c	FUNCTION_10	ELSE_2	IF_6	CALL_5
0x4000520	      0xe800000000	                          call 0x4000525	       336	bfdio.c	FUNCTION_10	ELSE_2	IF_6	CALL_5
0x4000525	        0x4183fc16	                          cmp r12d, 0x16	       340	bfdio.c	FUNCTION_10	ELSE_2	IF_6	IF_7
0x4000529	            0x750f	                           jne 0x400053a	       340	bfdio.c	FUNCTION_10	ELSE_2	IF_6	IF_7
0x400052b	      0xbf12000000	                           mov edi, 0x12	       341	bfdio.c	FUNCTION_10	ELSE_2	IF_6	CALL_6
0x4000530	      0xe800000000	                          call 0x4000535	       341	bfdio.c	FUNCTION_10	ELSE_2	IF_6	CALL_6
0x4000535	          0x4489e8	                           mov eax, r13d	       341	bfdio.c	FUNCTION_10	ELSE_2	IF_6	CALL_6
0x4000538	            0xeb46	                           jmp 0x4000580	       341	bfdio.c	FUNCTION_10	ELSE_2	IF_6	CALL_6
0x400053a	      0xbf01000000	                              mov edi, 1	       344	bfdio.c	FUNCTION_10	ELSE_2	IF_6	ELSE_3	CALL_7
0x400053f	      0xe800000000	                          call 0x4000544	       344	bfdio.c	FUNCTION_10	ELSE_2	IF_6	ELSE_3	CALL_7
0x4000544	          0x448923	                   mov dword [rbx], r12d	       345	bfdio.c	FUNCTION_10	ELSE_2	IF_6	ELSE_3
0x4000547	          0x4489e8	                           mov eax, r13d	       345	bfdio.c	FUNCTION_10	ELSE_2	IF_6	ELSE_3
0x400054a	            0xeb34	                           jmp 0x4000580	       345	bfdio.c	FUNCTION_10	ELSE_2	IF_6	ELSE_3
0x400054c	            0x85db	                           test ebx, ebx	       351	bfdio.c	FUNCTION_10	ELSE_4	IF_8
0x400054e	            0x750b	                           jne 0x400055b	       351	bfdio.c	FUNCTION_10	ELSE_4	IF_8
0x4000550	        0x4c896530	            mov qword [rbp + 0x30], r12 	       352	bfdio.c	FUNCTION_10	ELSE_4	IF_8
0x4000554	      0xb800000000	                              mov eax, 0	       356	bfdio.c	FUNCTION_10	ELSE_5
0x4000559	            0xeb25	                           jmp 0x4000580	       356	bfdio.c	FUNCTION_10	ELSE_5
0x400055b	        0x4c016530	            add qword [rbp + 0x30], r12 	       354	bfdio.c	FUNCTION_10	ELSE_4	ELSE_5
0x400055f	      0xb800000000	                              mov eax, 0	       356	bfdio.c	FUNCTION_10	ELSE_5
0x4000564	            0xeb1a	                           jmp 0x4000580	       356	bfdio.c	FUNCTION_10	ELSE_5
0x4000566	      0xb800000000	                              mov eax, 0	       296	bfdio.c	FUNCTION_10	IF_2	IF_3
0x400056b	            0xeb13	                           jmp 0x4000580	       296	bfdio.c	FUNCTION_10	IF_2	IF_3
0x400056d	          0x4889e9	                            mov rcx, rbp	       314	bfdio.c	FUNCTION_10	IF_4
0x4000570	          0x4c89e6	                            mov rsi, r12	       314	bfdio.c	FUNCTION_10	IF_4
0x4000573	            0x85db	                           test ebx, ebx	       314	bfdio.c	FUNCTION_10	IF_4
0x4000575	     0xf844cffffff	                            je 0x40004c7	       314	bfdio.c	FUNCTION_10	IF_4
0x400057b	      0xe972ffffff	                           jmp 0x40004f2	       314	bfdio.c	FUNCTION_10	IF_4
0x4000580	        0x4883c408	                              add rsp, 8	       357	bfdio.c	FUNCTION_10	ELSE_5
0x4000584	              0x5b	                                 pop rbx	       357	bfdio.c	FUNCTION_10	ELSE_5
0x4000585	              0x5d	                                 pop rbp	       357	bfdio.c	FUNCTION_10	ELSE_5
0x4000586	            0x415c	                                 pop r12	       357	bfdio.c	FUNCTION_10	ELSE_5
0x4000588	            0x415d	                                 pop r13	       357	bfdio.c	FUNCTION_10	ELSE_5
0x400058a	              0xc3	                                     ret	       357	bfdio.c	FUNCTION_10	ELSE_5
memory_bflush	WHILE,0:CALL,0:ELSE,0:FOR,0:functions,0:SWITCH,0:IF,0:DO,0	2
0x4000045	      0xb800000000	                              mov eax, 0	       619	bfdio.c	FUNCTION_20
0x400004a	              0xc3	                                     ret	       619	bfdio.c	FUNCTION_20
bfd_get_mtime	WHILE,0:CALL,1:ELSE,0:FOR,0:functions,0:SWITCH,0:IF,3:DO,0	29
0x400058b	              0x53	                                push rbx	       374	bfdio.c	ELSE_5	FUNCTION_11
0x400058c	    0x4881eca00000	                           sub rsp, 0xa0	       374	bfdio.c	ELSE_5	FUNCTION_11
0x4000593	          0x4889fb	                            mov rbx, rdi	       374	bfdio.c	ELSE_5	FUNCTION_11
0x4000596	    0x64488b042528	                mov rax, qword fs:[0x28]	       374	bfdio.c	ELSE_5	FUNCTION_11
0x400059f	    0x488984249800	             mov qword [rsp + 0x98], rax	       374	bfdio.c	ELSE_5	FUNCTION_11
0x40005a7	            0x31c0	                            xor eax, eax	       374	bfdio.c	ELSE_5	FUNCTION_11
0x40005a9	        0xf6474710	           test byte [rdi + 0x47], 0x10 	       377	bfdio.c	ELSE_5	FUNCTION_11	IF_1
0x40005ad	            0x7406	                            je 0x40005b5	       377	bfdio.c	ELSE_5	FUNCTION_11	IF_1
0x40005af	        0x488b4738	            mov rax, qword [rdi + 0x38] 	       378	bfdio.c	ELSE_5	FUNCTION_11	IF_1
0x40005b3	            0xeb28	                           jmp 0x40005dd	       378	bfdio.c	ELSE_5	FUNCTION_11	IF_1
0x40005b5	        0x488b5718	            mov rdx, qword [rdi + 0x18] 	       380	bfdio.c	ELSE_5	FUNCTION_11	IF_2
0x40005b9	      0xb800000000	                              mov eax, 0	       381	bfdio.c	ELSE_5	FUNCTION_11	IF_2
0x40005be	          0x4885d2	                           test rdx, rdx	       380	bfdio.c	ELSE_5	FUNCTION_11	IF_2
0x40005c1	            0x741a	                            je 0x40005dd	       380	bfdio.c	ELSE_5	FUNCTION_11	IF_2
0x40005c3	          0x4889e6	                            mov rsi, rsp	       383	bfdio.c	ELSE_5	FUNCTION_11	IF_3	CALL_1
0x40005c6	          0xff5230	                 call qword [rdx + 0x30]	       383	bfdio.c	ELSE_5	FUNCTION_11	IF_3	CALL_1
0x40005c9	            0x89c2	                            mov edx, eax	       383	bfdio.c	ELSE_5	FUNCTION_11	IF_3	CALL_1
0x40005cb	      0xb800000000	                              mov eax, 0	       384	bfdio.c	ELSE_5	FUNCTION_11	IF_3
0x40005d0	            0x85d2	                           test edx, edx	       383	bfdio.c	ELSE_5	FUNCTION_11	IF_3	CALL_1
0x40005d2	            0x7509	                           jne 0x40005dd	       383	bfdio.c	ELSE_5	FUNCTION_11	IF_3	CALL_1
0x40005d4	      0x488b442458	            mov rax, qword [rsp + 0x58] 	       386	bfdio.c	ELSE_5	FUNCTION_11
0x40005d9	        0x48894338	             mov qword [rbx + 0x38], rax	       386	bfdio.c	ELSE_5	FUNCTION_11
0x40005dd	    0x488b8c249800	            mov rcx, qword [rsp + 0x98] 	       388	bfdio.c	ELSE_5	FUNCTION_11
0x40005e5	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       388	bfdio.c	ELSE_5	FUNCTION_11
0x40005ee	            0x7405	                            je 0x40005f5	       388	bfdio.c	ELSE_5	FUNCTION_11
0x40005f0	      0xe800000000	                          call 0x40005f5	       388	bfdio.c	ELSE_5	FUNCTION_11
0x40005f5	    0x4881c4a00000	                           add rsp, 0xa0	       388	bfdio.c	ELSE_5	FUNCTION_11
0x40005fc	              0x5b	                                 pop rbx	       388	bfdio.c	ELSE_5	FUNCTION_11
0x40005fd	              0xc3	                                     ret	       388	bfdio.c	ELSE_5	FUNCTION_11
_bfd_real_fseek	WHILE,0:CALL,3:ELSE,0:FOR,0:functions,0:SWITCH,0:IF,0:DO,0	4
0x40002ac	        0x4883ec08	                              sub rsp, 8	        57	bfdio.c	FUNCTION_2
0x40002b0	      0xe800000000	                          call 0x40002b5	        59	bfdio.c	FUNCTION_2	CALL_1
0x40002b5	        0x4883c408	                              add rsp, 8	        65	bfdio.c	FUNCTION_2
0x40002b9	              0xc3	                                     ret	        65	bfdio.c	FUNCTION_2
_bfd_real_ftell	WHILE,0:CALL,3:ELSE,0:FOR,0:functions,0:SWITCH,0:IF,0:DO,0	4
0x400029e	        0x4883ec08	                              sub rsp, 8	        45	bfdio.c	FUNCTION_1
0x40002a2	      0xe800000000	                          call 0x40002a7	        47	bfdio.c	FUNCTION_1	CALL_1
0x40002a7	        0x4883c408	                              add rsp, 8	        53	bfdio.c	FUNCTION_1
0x40002ab	              0xc3	                                     ret	        53	bfdio.c	FUNCTION_1
memory_bseek	WHILE,0:CALL,3:ELSE,2:FOR,0:functions,0:SWITCH,0:IF,6:DO,0	55
0x40000ce	            0x4154	                                push r12	       550	bfdio.c	FUNCTION_18
0x40000d0	              0x55	                                push rbp	       550	bfdio.c	FUNCTION_18
0x40000d1	              0x53	                                push rbx	       550	bfdio.c	FUNCTION_18
0x40000d2	        0x488b6f10	            mov rbp, qword [rdi + 0x10] 	       554	bfdio.c	FUNCTION_18
0x40000d6	            0x85d2	                           test edx, edx	       556	bfdio.c	FUNCTION_18	IF_1
0x40000d8	            0x7404	                            je 0x40000de	       556	bfdio.c	FUNCTION_18	IF_1
0x40000da	        0x48037730	             add rsi, qword [rdi + 0x30]	       559	bfdio.c	FUNCTION_18	ELSE_1
0x40000de	          0x4885f6	                           test rsi, rsi	       561	bfdio.c	FUNCTION_18	ELSE_1	IF_2
0x40000e1	            0x791d	                           jns 0x4000100	       561	bfdio.c	FUNCTION_18	ELSE_1	IF_2
0x40000e3	    0x48c747300000	               mov qword [rdi + 0x30], 0	       563	bfdio.c	FUNCTION_18	ELSE_1	IF_2
0x40000eb	      0xe800000000	                          call 0x40000f0	       564	bfdio.c	FUNCTION_18	ELSE_1	IF_2
0x40000f0	    0xc70016000000	                   mov dword [rax], 0x16	       564	bfdio.c	FUNCTION_18	ELSE_1	IF_2
0x40000f6	      0xb8ffffffff	                     mov eax, 0xffffffff	       565	bfdio.c	FUNCTION_18	ELSE_1	IF_2
0x40000fb	      0xe999000000	                           jmp 0x4000199	       565	bfdio.c	FUNCTION_18	ELSE_1	IF_2
0x4000100	        0x488b4d00	                    mov rcx, qword [rbp]	       568	bfdio.c	FUNCTION_18	IF_3
0x4000104	      0xb800000000	                              mov eax, 0	       599	bfdio.c	FUNCTION_18
0x4000109	          0x4839f1	                            cmp rcx, rsi	       568	bfdio.c	FUNCTION_18	IF_3
0x400010c	     0xf8387000000	                           jae 0x4000199	       568	bfdio.c	FUNCTION_18	IF_3
0x4000112	        0xf6474410	           test byte [rdi + 0x44], 0x10 	       570	bfdio.c	FUNCTION_18	IF_3	IF_4
0x4000116	            0x7463	                            je 0x400017b	       570	bfdio.c	FUNCTION_18	IF_3	IF_4
0x4000118	        0x4c8d617f	                   lea r12, [rcx + 0x7f]	       575	bfdio.c	FUNCTION_18	IF_3	IF_4
0x400011c	        0x4983e480	             and r12, 0xffffffffffffff80	       575	bfdio.c	FUNCTION_18	IF_3	IF_4
0x4000120	        0x48897500	                    mov qword [rbp], rsi	       576	bfdio.c	FUNCTION_18	IF_3	IF_4
0x4000124	        0x488d5e7f	                   lea rbx, [rsi + 0x7f]	       578	bfdio.c	FUNCTION_18	IF_3	IF_4
0x4000128	        0x4883e380	             and rbx, 0xffffffffffffff80	       578	bfdio.c	FUNCTION_18	IF_3	IF_4
0x400012c	          0x4939dc	                            cmp r12, rbx	       579	bfdio.c	FUNCTION_18	IF_3	IF_4	IF_5
0x400012f	            0x7368	                           jae 0x4000199	       579	bfdio.c	FUNCTION_18	IF_3	IF_4	IF_5
0x4000131	        0x488b7d08	                mov rdi, qword [rbp + 8]	       581	bfdio.c	FUNCTION_18	IF_3	IF_4	IF_5	CALL_1
0x4000135	          0x4889de	                            mov rsi, rbx	       581	bfdio.c	FUNCTION_18	IF_3	IF_4	IF_5	CALL_1
0x4000138	      0xe800000000	                          call 0x400013d	       581	bfdio.c	FUNCTION_18	IF_3	IF_4	IF_5	CALL_1
0x400013d	        0x48894508	                mov qword [rbp + 8], rax	       581	bfdio.c	FUNCTION_18	IF_3	IF_4	IF_5	CALL_1
0x4000141	          0x4885c0	                           test rax, rax	       582	bfdio.c	FUNCTION_18	IF_3	IF_4	IF_5	IF_6
0x4000144	            0x751a	                           jne 0x4000160	       582	bfdio.c	FUNCTION_18	IF_3	IF_4	IF_5	IF_6
0x4000146	      0xe800000000	                          call 0x400014b	       584	bfdio.c	FUNCTION_18	IF_3	IF_4	IF_5	IF_6
0x400014b	    0xc70016000000	                   mov dword [rax], 0x16	       584	bfdio.c	FUNCTION_18	IF_3	IF_4	IF_5	IF_6
0x4000151	    0x48c745000000	                      mov qword [rbp], 0	       585	bfdio.c	FUNCTION_18	IF_3	IF_4	IF_5	IF_6
0x4000159	      0xb8ffffffff	                     mov eax, 0xffffffff	       586	bfdio.c	FUNCTION_18	IF_3	IF_4	IF_5	IF_6
0x400015e	            0xeb39	                           jmp 0x4000199	       586	bfdio.c	FUNCTION_18	IF_3	IF_4	IF_5	IF_6
0x4000160	          0x4c29e3	                            sub rbx, r12	        90	string3.h	FUNCTION_26	CALL_6
0x4000163	          0x4889da	                            mov rdx, rbx	        90	string3.h	FUNCTION_26	CALL_6
0x4000166	        0x4a8d3c20	                    lea rdi, [rax + r12]	        90	string3.h	FUNCTION_26	CALL_6
0x400016a	      0xbe00000000	                              mov esi, 0	        90	string3.h	FUNCTION_26	CALL_6
0x400016f	      0xe800000000	                          call 0x4000174	        90	string3.h	FUNCTION_26	CALL_6
0x4000174	      0xb800000000	                              mov eax, 0	       599	bfdio.c	FUNCTION_18
0x4000179	            0xeb1e	                           jmp 0x4000199	       599	bfdio.c	FUNCTION_18
0x400017b	        0x48894f30	             mov qword [rdi + 0x30], rcx	       593	bfdio.c	FUNCTION_18	IF_3	ELSE_2
0x400017f	      0xe800000000	                          call 0x4000184	       594	bfdio.c	FUNCTION_18	IF_3	ELSE_2
0x4000184	    0xc70016000000	                   mov dword [rax], 0x16	       594	bfdio.c	FUNCTION_18	IF_3	ELSE_2
0x400018a	      0xbf12000000	                           mov edi, 0x12	       595	bfdio.c	FUNCTION_18	IF_3	ELSE_2	CALL_3
0x400018f	      0xe800000000	                          call 0x4000194	       595	bfdio.c	FUNCTION_18	IF_3	ELSE_2	CALL_3
0x4000194	      0xb8ffffffff	                     mov eax, 0xffffffff	       596	bfdio.c	FUNCTION_18	IF_3	ELSE_2
0x4000199	              0x5b	                                 pop rbx	       600	bfdio.c	FUNCTION_18
0x400019a	              0x5d	                                 pop rbp	       600	bfdio.c	FUNCTION_18
0x400019b	            0x415c	                                 pop r12	       600	bfdio.c	FUNCTION_18
0x400019d	              0xc3	                                     ret	       600	bfdio.c	FUNCTION_18
memory_bclose	WHILE,0:CALL,2:ELSE,0:FOR,0:functions,0:SWITCH,0:IF,1:DO,0	17
0x4000097	              0x55	                                push rbp	       604	bfdio.c	FUNCTION_19
0x4000098	              0x53	                                push rbx	       604	bfdio.c	FUNCTION_19
0x4000099	        0x4883ec08	                              sub rsp, 8	       604	bfdio.c	FUNCTION_19
0x400009d	          0x4889fb	                            mov rbx, rdi	       604	bfdio.c	FUNCTION_19
0x40000a0	        0x488b6f10	            mov rbp, qword [rdi + 0x10] 	       605	bfdio.c	FUNCTION_19
0x40000a4	        0x488b7d08	                mov rdi, qword [rbp + 8]	       607	bfdio.c	FUNCTION_19	IF_1
0x40000a8	          0x4885ff	                           test rdi, rdi	       607	bfdio.c	FUNCTION_19	IF_1
0x40000ab	            0x7405	                            je 0x40000b2	       607	bfdio.c	FUNCTION_19	IF_1
0x40000ad	      0xe800000000	                          call 0x40000b2	       608	bfdio.c	FUNCTION_19	CALL_1
0x40000b2	          0x4889ef	                            mov rdi, rbp	       609	bfdio.c	FUNCTION_19	CALL_2
0x40000b5	      0xe800000000	                          call 0x40000ba	       609	bfdio.c	FUNCTION_19	CALL_2
0x40000ba	    0x48c743100000	               mov qword [rbx + 0x10], 0	       610	bfdio.c	FUNCTION_19
0x40000c2	      0xb800000000	                              mov eax, 0	       613	bfdio.c	FUNCTION_19
0x40000c7	        0x4883c408	                              add rsp, 8	       613	bfdio.c	FUNCTION_19
0x40000cb	              0x5b	                                 pop rbx	       613	bfdio.c	FUNCTION_19
0x40000cc	              0x5d	                                 pop rbp	       613	bfdio.c	FUNCTION_19
0x40000cd	              0xc3	                                     ret	       613	bfdio.c	FUNCTION_19
bfd_get_file_size	WHILE,0:CALL,3:ELSE,0:FOR,0:functions,0:SWITCH,0:IF,1:DO,0	12
0x400065c	        0x4883ec08	                              sub rsp, 8	       453	bfdio.c	FUNCTION_13
0x4000660	    0x488b87d00000	            mov rax, qword [rdi + 0xd0] 	       454	bfdio.c	FUNCTION_13	IF_1
0x4000667	          0x4885c0	                           test rax, rax	       454	bfdio.c	FUNCTION_13	IF_1
0x400066a	            0x7413	                            je 0x400067f	       454	bfdio.c	FUNCTION_13	IF_1
0x400066c	        0xf6404801	               test byte [rax + 0x48], 1	       455	bfdio.c	FUNCTION_13	IF_1	CALL_1
0x4000670	            0x750d	                           jne 0x400067f	       455	bfdio.c	FUNCTION_13	IF_1	CALL_1
0x4000672	    0x488b87c80000	            mov rax, qword [rdi + 0xc8] 	       456	bfdio.c	FUNCTION_13	CALL_2
0x4000679	        0x488b4008	                mov rax, qword [rax + 8]	       456	bfdio.c	FUNCTION_13	CALL_2
0x400067d	            0xeb05	                           jmp 0x4000684	       456	bfdio.c	FUNCTION_13	CALL_2
0x400067f	      0xe800000000	                          call 0x4000684	       458	bfdio.c	FUNCTION_13	CALL_3
0x4000684	        0x4883c408	                              add rsp, 8	       459	bfdio.c	FUNCTION_13
0x4000688	              0xc3	                                     ret	       459	bfdio.c	FUNCTION_13
memory_btell	WHILE,0:CALL,0:ELSE,0:FOR,0:functions,0:SWITCH,0:IF,0:DO,0	2
0x4000040	        0x488b4730	            mov rax, qword [rdi + 0x30] 	       545	bfdio.c	FUNCTION_17
0x4000044	              0xc3	                                     ret	       546	bfdio.c	FUNCTION_17
bfd_get_size	WHILE,0:CALL,1:ELSE,0:FOR,0:functions,0:SWITCH,0:IF,2:DO,0	20
0x40005fe	    0x4881eca80000	                           sub rsp, 0xa8	       425	bfdio.c	FUNCTION_12
0x4000605	    0x64488b042528	                mov rax, qword fs:[0x28]	       425	bfdio.c	FUNCTION_12
0x400060e	    0x488984249800	             mov qword [rsp + 0x98], rax	       425	bfdio.c	FUNCTION_12
0x4000616	            0x31c0	                            xor eax, eax	       425	bfdio.c	FUNCTION_12
0x4000618	        0x488b4718	            mov rax, qword [rdi + 0x18] 	       428	bfdio.c	FUNCTION_12	IF_1
0x400061c	      0xba00000000	                              mov edx, 0	       429	bfdio.c	FUNCTION_12	IF_1
0x4000621	          0x4885c0	                           test rax, rax	       428	bfdio.c	FUNCTION_12	IF_1
0x4000624	            0x7413	                            je 0x4000639	       428	bfdio.c	FUNCTION_12	IF_1
0x4000626	          0x4889e6	                            mov rsi, rsp	       431	bfdio.c	FUNCTION_12	IF_2	CALL_1
0x4000629	          0xff5030	                 call qword [rax + 0x30]	       431	bfdio.c	FUNCTION_12	IF_2	CALL_1
0x400062c	      0xba00000000	                              mov edx, 0	       432	bfdio.c	FUNCTION_12	IF_2
0x4000631	            0x85c0	                           test eax, eax	       434	bfdio.c	FUNCTION_12
0x4000633	    0x480f44542430	           cmove rdx, qword [rsp + 0x30]	       434	bfdio.c	FUNCTION_12
0x4000639	          0x4889d0	                            mov rax, rdx	       435	bfdio.c	FUNCTION_12
0x400063c	    0x488b8c249800	            mov rcx, qword [rsp + 0x98] 	       435	bfdio.c	FUNCTION_12
0x4000644	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       435	bfdio.c	FUNCTION_12
0x400064d	            0x7405	                            je 0x4000654	       435	bfdio.c	FUNCTION_12
0x400064f	      0xe800000000	                          call 0x4000654	       435	bfdio.c	FUNCTION_12
0x4000654	    0x4881c4a80000	                           add rsp, 0xa8	       435	bfdio.c	FUNCTION_12
0x400065b	              0xc3	                                     ret	       435	bfdio.c	FUNCTION_12
