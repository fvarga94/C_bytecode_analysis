vterm_keyboard_key	IF,16:functions,0:DO,0:FOR,0:ELSE,11:CALL,10:WHILE,0:SWITCH,1	122
0x4000130	            0x85f6	                           test esi, esi	       134	keyboard.c	FUNCTION_2	IF_1
0x4000132	            0x7458	                            je 0x400018c	       134	keyboard.c	FUNCTION_2	IF_1
0x4000134	    0x81feff000000	                           cmp esi, 0xff	       137	keyboard.c	FUNCTION_2	IF_2
0x400013a	            0x7734	                            ja 0x4000170	       137	keyboard.c	FUNCTION_2	IF_2
0x400013c	          0x83fe0e	                            cmp esi, 0xe	       138	keyboard.c	FUNCTION_2	IF_2	IF_3
0x400013f	            0x774b	                            ja 0x400018c	       138	keyboard.c	FUNCTION_2	IF_2	IF_3
0x4000141	            0x89f6	                            mov esi, esi	       140	keyboard.c	FUNCTION_2	IF_2
0x4000143	        0x488d0476	                  lea rax, [rsi + rsi*2]	       140	keyboard.c	FUNCTION_2	IF_2
0x4000147	        0x48c1e002	                              shl rax, 2	       140	keyboard.c	FUNCTION_2	IF_2
0x400014b	    0x488d88000000	                          lea rcx, [rax]	       140	keyboard.c	FUNCTION_2	IF_2
0x4000152	    0x8b8000000000	                    mov eax, dword [rax]	       140	keyboard.c	FUNCTION_2	IF_2
0x4000158	      0x440fbe4104	               movsx r8d, byte [rcx + 4]	       140	keyboard.c	FUNCTION_2	IF_2
0x400015d	          0x8b4908	                mov ecx, dword [rcx + 8]	       140	keyboard.c	FUNCTION_2	IF_2
0x4000160	          0x83f808	                              cmp eax, 8	       153	keyboard.c	FUNCTION_2	SWITCH_1
0x4000163	            0x7727	                            ja 0x400018c	       153	keyboard.c	FUNCTION_2	SWITCH_1
0x4000165	    0xff24c5000000	                       jmp qword [rax*8]	       153	keyboard.c	FUNCTION_2	SWITCH_1
0x400016c	         0xf1f4000	                         nop dword [rax]	       153	keyboard.c	FUNCTION_2	SWITCH_1
0x4000170	    0x8d8600ffffff	                  lea eax, [rsi - 0x100]	       142	keyboard.c	FUNCTION_2	ELSE_1	IF_4
0x4000176	      0x3dff000000	                           cmp eax, 0xff	       142	keyboard.c	FUNCTION_2	ELSE_1	IF_4
0x400017b	            0x7613	                           jbe 0x4000190	       142	keyboard.c	FUNCTION_2	ELSE_1	IF_4
0x400017d	    0x81ee00020000	                          sub esi, 0x200	       148	keyboard.c	FUNCTION_2	ELSE_2	IF_6	IF_7
0x4000183	          0x83fe11	                           cmp esi, 0x11	       148	keyboard.c	FUNCTION_2	ELSE_2	IF_6	IF_7
0x4000186	     0xf86b4000000	                           jbe 0x4000240	       148	keyboard.c	FUNCTION_2	ELSE_2	IF_6	IF_7
0x400018c	            0xf3c3	                                     ret	       148	keyboard.c	FUNCTION_2	ELSE_2	IF_6	IF_7
0x400018e	            0x6690	                                     nop	       148	keyboard.c	FUNCTION_2	ELSE_2	IF_6	IF_7
0x4000190	          0x83f80c	                            cmp eax, 0xc	       143	keyboard.c	FUNCTION_2	ELSE_1	IF_4	IF_5
0x4000193	            0x77f7	                            ja 0x400018c	       143	keyboard.c	FUNCTION_2	ELSE_1	IF_4	IF_5
0x4000195	        0x488d0440	                  lea rax, [rax + rax*2]	       145	keyboard.c	FUNCTION_2	ELSE_1	IF_4
0x4000199	        0x48c1e002	                              shl rax, 2	       145	keyboard.c	FUNCTION_2	ELSE_1	IF_4
0x400019d	    0x488d88000000	                          lea rcx, [rax]	       145	keyboard.c	FUNCTION_2	ELSE_1	IF_4
0x40001a4	    0x8b8000000000	                    mov eax, dword [rax]	       145	keyboard.c	FUNCTION_2	ELSE_1	IF_4
0x40001aa	      0x440fbe4104	               movsx r8d, byte [rcx + 4]	       145	keyboard.c	FUNCTION_2	ELSE_1	IF_4
0x40001af	          0x8b4908	                mov ecx, dword [rcx + 8]	       145	keyboard.c	FUNCTION_2	ELSE_1	IF_4
0x40001b2	            0xebac	                           jmp 0x4000160	       145	keyboard.c	FUNCTION_2	ELSE_1	IF_4
0x40001b4	         0xf1f4000	                         nop dword [rax]	       145	keyboard.c	FUNCTION_2	ELSE_1	IF_4
0x40001b8	          0xf6c205	                              test dl, 5	       176	keyboard.c	FUNCTION_2	SWITCH_1	IF_11
0x40001bb	     0xf852f010000	                           jne 0x40002f0	       176	keyboard.c	FUNCTION_2	SWITCH_1	IF_11
0x40001c1	          0x83e202	                              and edx, 2	       179	keyboard.c	FUNCTION_2	SWITCH_1	CALL_5
0x40001c4	      0xb800000000	                              mov eax, 0	       179	keyboard.c	FUNCTION_2	SWITCH_1	CALL_5
0x40001c9	      0xbe00000000	                              mov esi, 0	       179	keyboard.c	FUNCTION_2	SWITCH_1	CALL_5
0x40001ce	        0x480f45f0	                         cmovne rsi, rax	       179	keyboard.c	FUNCTION_2	SWITCH_1	CALL_5
0x40001d2	          0x4489c2	                            mov edx, r8d	       179	keyboard.c	FUNCTION_2	SWITCH_1	CALL_5
0x40001d5	            0x31c0	                            xor eax, eax	       179	keyboard.c	FUNCTION_2	SWITCH_1	CALL_5
0x40001d7	      0xe900000000	                           jmp 0x40001dc	       179	keyboard.c	FUNCTION_2	SWITCH_1	CALL_5
0x40001dc	         0xf1f4000	                         nop dword [rax]	       179	keyboard.c	FUNCTION_2	SWITCH_1	CALL_5
0x40001e0	    0x488b87180100	           mov rax, qword [rdi + 0x118] 	       210	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_10	IF_16
0x40001e7	    0xf68094000000	               test byte [rax + 0x94], 1	       210	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_10	IF_16
0x40001ee	            0x74c8	                            je 0x40001b8	       210	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_10	IF_16
0x40001f0	        0x440fbec1	                           movsx r8d, cl	       211	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_10	IF_16
0x40001f4	            0x85d2	                           test edx, edx	       183	keyboard.c	FUNCTION_2	SWITCH_1	IF_12
0x40001f6	     0xf84dc000000	                            je 0x40002d8	       183	keyboard.c	FUNCTION_2	SWITCH_1	IF_12
0x40001fc	          0x8d4a01	                      lea ecx, [rdx + 1]	       193	keyboard.c	FUNCTION_2	SWITCH_1	CALL_8
0x40001ff	      0xbe9b000000	                           mov esi, 0x9b	       193	keyboard.c	FUNCTION_2	SWITCH_1	CALL_8
0x4000204	      0xba00000000	                              mov edx, 0	       193	keyboard.c	FUNCTION_2	SWITCH_1	CALL_8
0x4000209	            0x31c0	                            xor eax, eax	       193	keyboard.c	FUNCTION_2	SWITCH_1	CALL_8
0x400020b	      0xe900000000	                           jmp 0x4000210	       193	keyboard.c	FUNCTION_2	SWITCH_1	CALL_8
0x4000210	    0x488b87180100	           mov rax, qword [rdi + 0x118] 	       204	keyboard.c	FUNCTION_2	SWITCH_1	IF_15
0x4000217	    0xf68094000000	               test byte [rax + 0x94], 2	       204	keyboard.c	FUNCTION_2	SWITCH_1	IF_15
0x400021e	            0x75d4	                           jne 0x40001f4	       204	keyboard.c	FUNCTION_2	SWITCH_1	IF_15
0x4000220	            0x85d2	                           test edx, edx	       190	keyboard.c	FUNCTION_2	SWITCH_1	IF_13
0x4000222	            0x75d8	                           jne 0x40001fc	       190	keyboard.c	FUNCTION_2	SWITCH_1	IF_13
0x4000224	        0x410fbec8	                          movsx ecx, r8b	       191	keyboard.c	FUNCTION_2	SWITCH_1	CALL_7
0x4000228	      0xba00000000	                              mov edx, 0	       191	keyboard.c	FUNCTION_2	SWITCH_1	CALL_7
0x400022d	      0xbe9b000000	                           mov esi, 0x9b	       191	keyboard.c	FUNCTION_2	SWITCH_1	CALL_7
0x4000232	            0x31c0	                            xor eax, eax	       191	keyboard.c	FUNCTION_2	SWITCH_1	CALL_7
0x4000234	      0xe900000000	                           jmp 0x4000239	       191	keyboard.c	FUNCTION_2	SWITCH_1	CALL_7
0x4000239	     0xf1f80000000	                         nop dword [rax]	       191	keyboard.c	FUNCTION_2	SWITCH_1	CALL_7
0x4000240	        0x488d0476	                  lea rax, [rsi + rsi*2]	       150	keyboard.c	FUNCTION_2	ELSE_2	IF_6
0x4000244	        0x48c1e002	                              shl rax, 2	       150	keyboard.c	FUNCTION_2	ELSE_2	IF_6
0x4000248	    0x488d88000000	                          lea rcx, [rax]	       150	keyboard.c	FUNCTION_2	ELSE_2	IF_6
0x400024f	    0x8b8000000000	                    mov eax, dword [rax]	       150	keyboard.c	FUNCTION_2	ELSE_2	IF_6
0x4000255	      0x440fbe4104	               movsx r8d, byte [rcx + 4]	       150	keyboard.c	FUNCTION_2	ELSE_2	IF_6
0x400025a	          0x8b4908	                mov ecx, dword [rcx + 8]	       150	keyboard.c	FUNCTION_2	ELSE_2	IF_6
0x400025d	      0xe9fefeffff	                           jmp 0x4000160	       150	keyboard.c	FUNCTION_2	ELSE_2	IF_6
0x4000262	    0x660f1f440000	                    nop word [rax + rax]	       150	keyboard.c	FUNCTION_2	ELSE_2	IF_6
0x4000268	            0x85d2	                           test edx, edx	       197	keyboard.c	FUNCTION_2	SWITCH_1	IF_14
0x400026a	     0xf85a0000000	                           jne 0x4000310	       197	keyboard.c	FUNCTION_2	SWITCH_1	IF_14
0x4000270	      0xba00000000	                              mov edx, 0	       198	keyboard.c	FUNCTION_2	SWITCH_1	CALL_9
0x4000275	      0xbe9b000000	                           mov esi, 0x9b	       198	keyboard.c	FUNCTION_2	SWITCH_1	CALL_9
0x400027a	            0x31c0	                            xor eax, eax	       198	keyboard.c	FUNCTION_2	SWITCH_1	CALL_9
0x400027c	      0xe900000000	                           jmp 0x4000281	       198	keyboard.c	FUNCTION_2	SWITCH_1	CALL_9
0x4000281	     0xf1f80000000	                         nop dword [rax]	       198	keyboard.c	FUNCTION_2	SWITCH_1	CALL_9
0x4000288	    0x488b87180100	           mov rax, qword [rdi + 0x118] 	       169	keyboard.c	FUNCTION_2	SWITCH_1	IF_10
0x400028f	    0xf68094000000	           test byte [rax + 0x94], 0x10 	       169	keyboard.c	FUNCTION_2	SWITCH_1	IF_10
0x4000296	     0xf841cffffff	                            je 0x40001b8	       169	keyboard.c	FUNCTION_2	SWITCH_1	IF_10
0x400029c	      0xbe00000000	                              mov esi, 0	       170	keyboard.c	FUNCTION_2	SWITCH_1	CALL_3
0x40002a1	            0x31c0	                            xor eax, eax	       170	keyboard.c	FUNCTION_2	SWITCH_1	CALL_3
0x40002a3	      0xe900000000	                           jmp 0x40002a8	       170	keyboard.c	FUNCTION_2	SWITCH_1	CALL_3
0x40002a8	     0xf1f84000000	                   nop dword [rax + rax]	       170	keyboard.c	FUNCTION_2	SWITCH_1	CALL_3
0x40002b0	          0x83fa01	                              cmp edx, 1	       159	keyboard.c	FUNCTION_2	SWITCH_1	IF_8
0x40002b3	            0x7474	                            je 0x4000329	       159	keyboard.c	FUNCTION_2	SWITCH_1	IF_8
0x40002b5	          0xf6c201	                              test dl, 1	       161	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_3	IF_9
0x40002b8	     0xf84fafeffff	                            je 0x40001b8	       161	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_3	IF_9
0x40002be	          0x8d4a01	                      lea ecx, [rdx + 1]	       162	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_3	IF_9
0x40002c1	      0xbe9b000000	                           mov esi, 0x9b	       162	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_3	IF_9
0x40002c6	      0xba00000000	                              mov edx, 0	       162	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_3	IF_9
0x40002cb	            0x31c0	                            xor eax, eax	       162	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_3	IF_9
0x40002cd	      0xe900000000	                           jmp 0x40002d2	       162	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_3	IF_9
0x40002d2	    0x660f1f440000	                    nop word [rax + rax]	       162	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_3	IF_9
0x40002d8	        0x410fbec8	                          movsx ecx, r8b	       184	keyboard.c	FUNCTION_2	SWITCH_1	CALL_6
0x40002dc	      0xba00000000	                              mov edx, 0	       184	keyboard.c	FUNCTION_2	SWITCH_1	CALL_6
0x40002e1	      0xbe8f000000	                           mov esi, 0x8f	       184	keyboard.c	FUNCTION_2	SWITCH_1	CALL_6
0x40002e6	            0x31c0	                            xor eax, eax	       184	keyboard.c	FUNCTION_2	SWITCH_1	CALL_6
0x40002e8	      0xe900000000	                           jmp 0x40002ed	       184	keyboard.c	FUNCTION_2	SWITCH_1	CALL_6
0x40002ed	           0xf1f00	                         nop dword [rax]	       184	keyboard.c	FUNCTION_2	SWITCH_1	CALL_6
0x40002f0	        0x410fbec8	                          movsx ecx, r8b	       177	keyboard.c	FUNCTION_2	SWITCH_1	CALL_4
0x40002f4	        0x448d4201	                      lea r8d, [rdx + 1]	       177	keyboard.c	FUNCTION_2	SWITCH_1	CALL_4
0x40002f8	      0xbe9b000000	                           mov esi, 0x9b	       177	keyboard.c	FUNCTION_2	SWITCH_1	CALL_4
0x40002fd	      0xba00000000	                              mov edx, 0	       177	keyboard.c	FUNCTION_2	SWITCH_1	CALL_4
0x4000302	            0x31c0	                            xor eax, eax	       177	keyboard.c	FUNCTION_2	SWITCH_1	CALL_4
0x4000304	      0xe900000000	                           jmp 0x4000309	       177	keyboard.c	FUNCTION_2	SWITCH_1	CALL_4
0x4000309	     0xf1f80000000	                         nop dword [rax]	       177	keyboard.c	FUNCTION_2	SWITCH_1	CALL_4
0x4000310	        0x450fbec8	                          movsx r9d, r8b	       200	keyboard.c	FUNCTION_2	SWITCH_1	CALL_10
0x4000314	        0x448d4201	                      lea r8d, [rdx + 1]	       200	keyboard.c	FUNCTION_2	SWITCH_1	CALL_10
0x4000318	      0xbe9b000000	                           mov esi, 0x9b	       200	keyboard.c	FUNCTION_2	SWITCH_1	CALL_10
0x400031d	      0xba00000000	                              mov edx, 0	       200	keyboard.c	FUNCTION_2	SWITCH_1	CALL_10
0x4000322	            0x31c0	                            xor eax, eax	       200	keyboard.c	FUNCTION_2	SWITCH_1	CALL_10
0x4000324	      0xe900000000	                           jmp 0x4000329	       200	keyboard.c	FUNCTION_2	SWITCH_1	CALL_10
0x4000329	      0xba00000000	                              mov edx, 0	       160	keyboard.c	FUNCTION_2	SWITCH_1	CALL_1
0x400032e	      0xbe9b000000	                           mov esi, 0x9b	       160	keyboard.c	FUNCTION_2	SWITCH_1	CALL_1
0x4000333	            0x31c0	                            xor eax, eax	       160	keyboard.c	FUNCTION_2	SWITCH_1	CALL_1
0x4000335	      0xe900000000	                           jmp 0x400033a	       160	keyboard.c	FUNCTION_2	SWITCH_1	CALL_1
vterm_keyboard_unichar	IF,4:functions,0:DO,0:FOR,0:ELSE,0:CALL,4:WHILE,0:SWITCH,1	65
0x4000040	              0x53	                                push rbx	         8	keyboard.c	FUNCTION_1
0x4000041	          0x4889fb	                            mov rbx, rdi	         8	keyboard.c	FUNCTION_1
0x4000044	        0x4883ec10	                           sub rsp, 0x10	         8	keyboard.c	FUNCTION_1
0x4000048	    0x64488b042528	                mov rax, qword fs:[0x28]	         8	keyboard.c	FUNCTION_1
0x4000051	      0x4889442408	                mov qword [rsp + 8], rax	         8	keyboard.c	FUNCTION_1
0x4000056	            0x31c0	                            xor eax, eax	         8	keyboard.c	FUNCTION_1
0x4000058	          0x83fe20	                           cmp esi, 0x20	        14	keyboard.c	FUNCTION_1	IF_1
0x400005b	     0xf849f000000	                            je 0x4000100	        14	keyboard.c	FUNCTION_1	IF_1
0x4000061	          0x83e2fe	                     and edx, 0xfffffffe	        17	keyboard.c	FUNCTION_1	IF_2
0x4000064	     0xf849f000000	                            je 0x4000109	        17	keyboard.c	FUNCTION_1	IF_2
0x400006a	          0x8d46a5	                   lea eax, [rsi - 0x5b]	        25	keyboard.c	FUNCTION_1	SWITCH_1
0x400006d	          0x83f812	                           cmp eax, 0x12	        25	keyboard.c	FUNCTION_1	SWITCH_1
0x4000070	            0x770e	                            ja 0x4000080	        25	keyboard.c	FUNCTION_1	SWITCH_1
0x4000072	    0xff24c5000000	                       jmp qword [rax*8]	        25	keyboard.c	FUNCTION_1	SWITCH_1
0x4000079	     0xf1f80000000	                         nop dword [rax]	        25	keyboard.c	FUNCTION_1	SWITCH_1
0x4000080	          0x8d469f	                   lea eax, [rsi - 0x61]	        40	keyboard.c	FUNCTION_1	SWITCH_1
0x4000083	          0x83f819	                           cmp eax, 0x19	        40	keyboard.c	FUNCTION_1	SWITCH_1
0x4000086	           0xf97c0	                                 seta al	        40	keyboard.c	FUNCTION_1	SWITCH_1
0x4000089	           0xfb6c0	                           movzx eax, al	        40	keyboard.c	FUNCTION_1	SWITCH_1
0x400008c	            0x85c0	                           test eax, eax	        44	keyboard.c	FUNCTION_1	IF_3
0x400008e	            0x7548	                           jne 0x40000d8	        44	keyboard.c	FUNCTION_1	IF_3
0x4000090	            0x89f0	                            mov eax, esi	        50	keyboard.c	FUNCTION_1	IF_4
0x4000092	          0x83e01f	                           and eax, 0x1f	        50	keyboard.c	FUNCTION_1	IF_4
0x4000095	          0xf6c204	                              test dl, 4	        50	keyboard.c	FUNCTION_1	IF_4
0x4000098	           0xf45f0	                         cmovne esi, eax	        50	keyboard.c	FUNCTION_1	IF_4
0x400009b	          0x83e202	                              and edx, 2	        52	keyboard.c	FUNCTION_1	CALL_4
0x400009e	      0xb800000000	                              mov eax, 0	        52	keyboard.c	FUNCTION_1	CALL_4
0x40000a3	      0xba00000000	                              mov edx, 0	        52	keyboard.c	FUNCTION_1	CALL_4
0x40000a8	        0x480f45d0	                         cmovne rdx, rax	        52	keyboard.c	FUNCTION_1	CALL_4
0x40000ac	            0x89f1	                            mov ecx, esi	        52	keyboard.c	FUNCTION_1	CALL_4
0x40000ae	          0x4889df	                            mov rdi, rbx	        52	keyboard.c	FUNCTION_1	CALL_4
0x40000b1	      0xbe00000000	                              mov esi, 0	        52	keyboard.c	FUNCTION_1	CALL_4
0x40000b6	            0x31c0	                            xor eax, eax	        52	keyboard.c	FUNCTION_1	CALL_4
0x40000b8	      0xe800000000	                          call 0x40000bd	        52	keyboard.c	FUNCTION_1	CALL_4
0x40000bd	      0x488b442408	                mov rax, qword [rsp + 8]	        53	keyboard.c	FUNCTION_1
0x40000c2	    0x644833042528	                xor rax, qword fs:[0x28]	        53	keyboard.c	FUNCTION_1
0x40000cb	            0x7556	                           jne 0x4000123	        53	keyboard.c	FUNCTION_1
0x40000cd	        0x4883c410	                           add rsp, 0x10	        53	keyboard.c	FUNCTION_1
0x40000d1	              0x5b	                                 pop rbx	        53	keyboard.c	FUNCTION_1
0x40000d2	              0xc3	                                     ret	        53	keyboard.c	FUNCTION_1
0x40000d3	       0xf1f440000	                   nop dword [rax + rax]	        53	keyboard.c	FUNCTION_1
0x40000d8	    0xf7c2fdffffff	                    test edx, 0xfffffffd	        44	keyboard.c	FUNCTION_1	IF_3
0x40000de	            0x74bb	                            je 0x400009b	        44	keyboard.c	FUNCTION_1	IF_3
0x40000e0	        0x448d4201	                      lea r8d, [rdx + 1]	        45	keyboard.c	FUNCTION_1	IF_3	CALL_3
0x40000e4	            0x89f1	                            mov ecx, esi	        45	keyboard.c	FUNCTION_1	IF_3	CALL_3
0x40000e6	      0xba00000000	                              mov edx, 0	        45	keyboard.c	FUNCTION_1	IF_3	CALL_3
0x40000eb	      0xbe9b000000	                           mov esi, 0x9b	        45	keyboard.c	FUNCTION_1	IF_3	CALL_3
0x40000f0	          0x4889df	                            mov rdi, rbx	        45	keyboard.c	FUNCTION_1	IF_3	CALL_3
0x40000f3	            0x31c0	                            xor eax, eax	        45	keyboard.c	FUNCTION_1	IF_3	CALL_3
0x40000f5	      0xe800000000	                          call 0x40000fa	        45	keyboard.c	FUNCTION_1	IF_3	CALL_3
0x40000fa	            0xebc1	                           jmp 0x40000bd	        46	keyboard.c	FUNCTION_1	IF_3
0x40000fc	         0xf1f4000	                         nop dword [rax]	        46	keyboard.c	FUNCTION_1	IF_3
0x4000100	            0x89d0	                            mov eax, edx	        36	keyboard.c	FUNCTION_1	SWITCH_1
0x4000102	          0x83e001	                              and eax, 1	        36	keyboard.c	FUNCTION_1	SWITCH_1
0x4000105	            0x85d2	                           test edx, edx	        17	keyboard.c	FUNCTION_1	IF_2
0x4000107	            0x7583	                           jne 0x400008c	        17	keyboard.c	FUNCTION_1	IF_2
0x4000109	            0x89f7	                            mov edi, esi	        20	keyboard.c	FUNCTION_1	IF_2	CALL_1
0x400010b	          0x4889e6	                            mov rsi, rsp	        20	keyboard.c	FUNCTION_1	IF_2	CALL_1
0x400010e	      0xe800000000	                          call 0x4000113	        20	keyboard.c	FUNCTION_1	IF_2	CALL_1
0x4000113	          0x4889e6	                            mov rsi, rsp	        21	keyboard.c	FUNCTION_1	IF_2	CALL_2
0x4000116	          0x4863d0	                         movsxd rdx, eax	        21	keyboard.c	FUNCTION_1	IF_2	CALL_2
0x4000119	          0x4889df	                            mov rdi, rbx	        21	keyboard.c	FUNCTION_1	IF_2	CALL_2
0x400011c	      0xe800000000	                          call 0x4000121	        21	keyboard.c	FUNCTION_1	IF_2	CALL_2
0x4000121	            0xeb9a	                           jmp 0x40000bd	        21	keyboard.c	FUNCTION_1	IF_2	CALL_2
0x4000123	      0xe800000000	                          call 0x4000128	        53	keyboard.c	FUNCTION_1
vterm_keyboard_start_paste	IF,1:functions,0:DO,0:FOR,0:ELSE,0:CALL,1:WHILE,0:SWITCH,0	9
0x4000340	    0x488b87180100	           mov rax, qword [rdi + 0x118] 	       221	keyboard.c	ELSE_11	FUNCTION_3	IF_1
0x4000347	    0xf68095000000	           test byte [rax + 0x95], 0x20 	       221	keyboard.c	ELSE_11	FUNCTION_3	IF_1
0x400034e	            0x7508	                           jne 0x4000358	       221	keyboard.c	ELSE_11	FUNCTION_3	IF_1
0x4000350	            0xf3c3	                                     ret	       221	keyboard.c	ELSE_11	FUNCTION_3	IF_1
0x4000352	    0x660f1f440000	                    nop word [rax + rax]	       221	keyboard.c	ELSE_11	FUNCTION_3	IF_1
0x4000358	      0xba00000000	                              mov edx, 0	       222	keyboard.c	ELSE_11	FUNCTION_3	CALL_1
0x400035d	      0xbe9b000000	                           mov esi, 0x9b	       222	keyboard.c	ELSE_11	FUNCTION_3	CALL_1
0x4000362	            0x31c0	                            xor eax, eax	       222	keyboard.c	ELSE_11	FUNCTION_3	CALL_1
0x4000364	      0xe900000000	                           jmp 0x4000369	       222	keyboard.c	ELSE_11	FUNCTION_3	CALL_1
vterm_keyboard_end_paste	IF,1:functions,0:DO,0:FOR,0:ELSE,0:CALL,1:WHILE,0:SWITCH,0	9
0x4000370	    0x488b87180100	           mov rax, qword [rdi + 0x118] 	       227	keyboard.c	FUNCTION_4	IF_1
0x4000377	    0xf68095000000	           test byte [rax + 0x95], 0x20 	       227	keyboard.c	FUNCTION_4	IF_1
0x400037e	            0x7508	                           jne 0x4000388	       227	keyboard.c	FUNCTION_4	IF_1
0x4000380	            0xf3c3	                                     ret	       227	keyboard.c	FUNCTION_4	IF_1
0x4000382	    0x660f1f440000	                    nop word [rax + rax]	       227	keyboard.c	FUNCTION_4	IF_1
0x4000388	      0xba00000000	                              mov edx, 0	       228	keyboard.c	FUNCTION_4	CALL_1
0x400038d	      0xbe9b000000	                           mov esi, 0x9b	       228	keyboard.c	FUNCTION_4	CALL_1
0x4000392	            0x31c0	                            xor eax, eax	       228	keyboard.c	FUNCTION_4	CALL_1
0x4000394	      0xe900000000	                   jmp section_end..text	       228	keyboard.c	FUNCTION_4	CALL_1
