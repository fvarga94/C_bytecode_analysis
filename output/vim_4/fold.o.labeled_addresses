foldedCount	WHILE,0:functions,0:ELSE,0:DO,0:FOR,0:SWITCH,0:IF,1:CALL,1	144
0x4005130	            0x4157	                                push r15	       292	fold.c	FUNCTION_7
0x4005132	            0x4156	                                push r14	       292	fold.c	FUNCTION_7
0x4005134	          0x4989f7	                            mov r15, rsi	       292	fold.c	FUNCTION_7
0x4005137	            0x4155	                                push r13	       292	fold.c	FUNCTION_7
0x4005139	            0x4154	                                push r12	       292	fold.c	FUNCTION_7
0x400513b	          0x4989fe	                            mov r14, rdi	       292	fold.c	FUNCTION_7
0x400513e	              0x55	                                push rbp	       292	fold.c	FUNCTION_7
0x400513f	              0x53	                                push rbx	       292	fold.c	FUNCTION_7
0x4005140	        0x4883ec38	                           sub rsp, 0x38	       292	fold.c	FUNCTION_7
0x4005144	    0x64488b042528	                mov rax, qword fs:[0x28]	       292	fold.c	FUNCTION_7
0x400514d	      0x4889442428	             mov qword [rsp + 0x28], rax	       292	fold.c	FUNCTION_7
0x4005152	            0x31c0	                            xor eax, eax	       292	fold.c	FUNCTION_7
0x4005154	    0x80bf21010000	               cmp byte [rdi + 0x121], 0	      1187	fold.c	FUNCTION_38	IF_1
0x400515b	      0x4889542418	             mov qword [rsp + 0x18], rdx	       292	fold.c	FUNCTION_7
0x4005160	    0xc74424200000	               mov dword [rsp + 0x20], 0	       152	fold.c	FUNCTION_4
0x4005168	    0xc74424240000	               mov dword [rsp + 0x24], 0	       153	fold.c	FUNCTION_4
0x4005170	     0xf855f010000	                           jne 0x40052d5	      1187	fold.c	FUNCTION_38	IF_1
0x4005176	    0x418b86d40100	           mov eax, dword [r14 + 0x1d4] 	       119	fold.c	FUNCTION_2	CALL_1
0x400517d	            0x85c0	                           test eax, eax	       119	fold.c	FUNCTION_2	CALL_1
0x400517f	     0xf84e3000000	                            je 0x4005268	       119	fold.c	FUNCTION_2	CALL_1
0x4005185	    0x498b86f80100	           mov rax, qword [r14 + 0x1f8] 	       307	fold.c	FUNCTION_8
0x400518c	    0x418b96080100	           mov edx, dword [r14 + 0x108] 	       307	fold.c	FUNCTION_8
0x4005193	        0x80780375	                cmp byte [rax + 3], 0x75	       119	fold.c	FUNCTION_2	CALL_1
0x4005197	     0xf84be000000	                            je 0x400525b	       119	fold.c	FUNCTION_2	CALL_1
0x400519d	    0x498d86080100	                  lea rax, [r14 + 0x108]	       188	fold.c	FUNCTION_4	IF_5
0x40051a4	          0x4c89fd	                            mov rbp, r15	       148	fold.c	FUNCTION_4
0x40051a7	          0x4531ed	                          xor r13d, r13d	       155	fold.c	FUNCTION_4
0x40051aa	          0x4531e4	                          xor r12d, r12d	       151	fold.c	FUNCTION_4
0x40051ad	    0x48c744241000	               mov qword [rsp + 0x10], 0	       188	fold.c	FUNCTION_4	IF_5
0x40051b6	    0x48c744240800	                  mov qword [rsp + 8], 0	       188	fold.c	FUNCTION_4	IF_5
0x40051bf	              0x90	                                     nop	       188	fold.c	FUNCTION_4	IF_5
0x40051c0	          0x83ea01	                              sub edx, 1	      1132	fold.c	FUNCTION_36
0x40051c3	        0x488b7010	            mov rsi, qword [rax + 0x10] 	      1132	fold.c	FUNCTION_36
0x40051c7	          0x4863d2	                         movsxd rdx, edx	      1132	fold.c	FUNCTION_36
0x40051ca	          0x4885d2	                           test rdx, rdx	      1133	fold.c	FUNCTION_36	WHILE_1
0x40051cd	            0x7845	                            js 0x4005214	      1133	fold.c	FUNCTION_36	WHILE_1
0x40051cf	            0x31ff	                            xor edi, edi	      1133	fold.c	FUNCTION_36	WHILE_1
0x40051d1	            0xeb10	                           jmp 0x40051e3	      1133	fold.c	FUNCTION_36	WHILE_1
0x40051d3	       0xf1f440000	                   nop dword [rax + rax]	      1133	fold.c	FUNCTION_36	WHILE_1
0x40051d8	          0x83e801	                              sub eax, 1	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40051db	          0x4863d0	                         movsxd rdx, eax	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40051de	          0x4839fa	                            cmp rdx, rdi	      1133	fold.c	FUNCTION_36	WHILE_1
0x40051e1	            0x7c31	                            jl 0x4005214	      1133	fold.c	FUNCTION_36	WHILE_1
0x40051e3	        0x488d0417	                    lea rax, [rdi + rdx]	      1135	fold.c	FUNCTION_36	WHILE_1
0x40051e7	          0x48d1f8	                              sar rax, 1	      1135	fold.c	FUNCTION_36	WHILE_1
0x40051ea	        0x488d1c40	                  lea rbx, [rax + rax*2]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40051ee	        0x48c1e304	                              shl rbx, 4	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40051f2	          0x4801f3	                            add rbx, rsi	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40051f5	          0x488b0b	                    mov rcx, qword [rbx]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40051f8	          0x4839e9	                            cmp rcx, rbp	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40051fb	            0x7fdb	                            jg 0x40051d8	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40051fd	          0x4889cf	                            mov rdi, rcx	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4005200	        0x48037b08	                add rdi, qword [rbx + 8]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4005204	          0x4839fd	                            cmp rbp, rdi	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4005207	            0x7c77	                            jl 0x4005280	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4005209	          0x83c001	                              add eax, 1	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x400520c	          0x4863f8	                         movsxd rdi, eax	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x400520f	          0x4839fa	                            cmp rdx, rdi	      1133	fold.c	FUNCTION_36	WHILE_1
0x4005212	            0x7dcf	                           jge 0x40051e3	      1133	fold.c	FUNCTION_36	WHILE_1
0x4005214	      0x488b442418	            mov rax, qword [rsp + 0x18] 	       221	fold.c	FUNCTION_4	IF_9	IF_10
0x4005219	          0x4885c0	                           test rax, rax	       221	fold.c	FUNCTION_4	IF_9	IF_10
0x400521c	            0x7418	                            je 0x4005236	       221	fold.c	FUNCTION_4	IF_9	IF_10
0x400521e	          0x4129ef	                           sub r15d, ebp	       224	fold.c	FUNCTION_4	IF_9	IF_10
0x4005221	          0x4589e3	                          mov r11d, r12d	       225	fold.c	FUNCTION_4	IF_9	IF_10
0x4005224	          0x4585ed	                         test r13d, r13d	       225	fold.c	FUNCTION_4	IF_9	IF_10
0x4005227	        0x450f45dd	                       cmovne r11d, r13d	       225	fold.c	FUNCTION_4	IF_9	IF_10
0x400522b	          0x448920	                   mov dword [rax], r12d	       223	fold.c	FUNCTION_4	IF_9	IF_10
0x400522e	        0x44897804	               mov dword [rax + 4], r15d	       224	fold.c	FUNCTION_4	IF_9	IF_10
0x4005232	        0x44895808	               mov dword [rax + 8], r11d	       225	fold.c	FUNCTION_4	IF_9	IF_10
0x4005236	            0x31c0	                            xor eax, eax	       297	fold.c	FUNCTION_7
0x4005238	      0x488b742428	            mov rsi, qword [rsp + 0x28] 	       298	fold.c	FUNCTION_7
0x400523d	    0x644833342528	                xor rsi, qword fs:[0x28]	       298	fold.c	FUNCTION_7
0x4005246	     0xf85ff000000	                           jne 0x400534b	       298	fold.c	FUNCTION_7
0x400524c	        0x4883c438	                           add rsp, 0x38	       298	fold.c	FUNCTION_7
0x4005250	              0x5b	                                 pop rbx	       298	fold.c	FUNCTION_7
0x4005251	              0x5d	                                 pop rbp	       298	fold.c	FUNCTION_7
0x4005252	            0x415c	                                 pop r12	       298	fold.c	FUNCTION_7
0x4005254	            0x415d	                                 pop r13	       298	fold.c	FUNCTION_7
0x4005256	            0x415e	                                 pop r14	       298	fold.c	FUNCTION_7
0x4005258	            0x415f	                                 pop r15	       298	fold.c	FUNCTION_7
0x400525a	              0xc3	                                     ret	       298	fold.c	FUNCTION_7
0x400525b	            0x85d2	                           test edx, edx	       119	fold.c	FUNCTION_2	CALL_1
0x400525d	     0xf8f3affffff	                            jg 0x400519d	       119	fold.c	FUNCTION_2	CALL_1
0x4005263	       0xf1f440000	                   nop dword [rax + rax]	       119	fold.c	FUNCTION_2	CALL_1
0x4005268	    0x48837c241800	               cmp qword [rsp + 0x18], 0	       163	fold.c	FUNCTION_4	IF_1	IF_2
0x400526e	            0x74c6	                            je 0x4005236	       163	fold.c	FUNCTION_4	IF_1	IF_2
0x4005270	      0x488b442418	            mov rax, qword [rsp + 0x18] 	       164	fold.c	FUNCTION_4	IF_1	IF_2
0x4005275	    0xc70000000000	                      mov dword [rax], 0	       164	fold.c	FUNCTION_4	IF_1	IF_2
0x400527b	            0xebb9	                           jmp 0x4005236	       164	fold.c	FUNCTION_4	IF_1	IF_2
0x400527d	           0xf1f00	                         nop dword [rax]	       164	fold.c	FUNCTION_4	IF_1	IF_2
0x4005280	          0x4839e9	                            cmp rcx, rbp	       195	fold.c	FUNCTION_4	IF_5	FOR_1	IF_7
0x4005283	            0x7511	                           jne 0x4005296	       195	fold.c	FUNCTION_4	IF_5	FOR_1	IF_7
0x4005285	          0x4585ed	                         test r13d, r13d	       195	fold.c	FUNCTION_4	IF_5	FOR_1	IF_7
0x4005288	      0x418d442401	                      lea eax, [r12 + 1]	       195	fold.c	FUNCTION_4	IF_5	FOR_1	IF_7
0x400528d	           0xf94c2	                                 sete dl	       195	fold.c	FUNCTION_4	IF_5	FOR_1	IF_7
0x4005290	            0x84d2	                             test dl, dl	       195	fold.c	FUNCTION_4	IF_5	FOR_1	IF_7
0x4005292	        0x440f45e8	                        cmovne r13d, eax	       195	fold.c	FUNCTION_4	IF_5	FOR_1	IF_7
0x4005296	          0x4d89f9	                             mov r9, r15	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x4005299	      0x4c8d442424	                    lea r8, [rsp + 0x24]	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x400529e	      0x488d542420	                   lea rdx, [rsp + 0x20]	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x40052a3	      0x48014c2408	                add qword [rsp + 8], rcx	       198	fold.c	FUNCTION_4	IF_5	FOR_1
0x40052a8	      0x48014c2410	            add qword [rsp + 0x10], rcx 	       199	fold.c	FUNCTION_4	IF_5	FOR_1
0x40052ad	          0x4929e9	                             sub r9, rbp	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x40052b0	          0x4489e1	                           mov ecx, r12d	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x40052b3	          0x4889de	                            mov rsi, rbx	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x40052b6	          0x4c89f7	                            mov rdi, r14	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x40052b9	      0xe882adffff	                   call sym.check_closed	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x40052be	            0x85c0	                           test eax, eax	       204	fold.c	FUNCTION_4	IF_5	FOR_1	IF_8
0x40052c0	            0x752a	                           jne 0x40052ec	       204	fold.c	FUNCTION_4	IF_5	FOR_1	IF_8
0x40052c2	        0x488d4310	                   lea rax, [rbx + 0x10]	       213	fold.c	FUNCTION_4	IF_5	FOR_1
0x40052c6	          0x482b2b	                    sub rbp, qword [rbx]	       214	fold.c	FUNCTION_4	IF_5	FOR_1
0x40052c9	        0x4183c401	                             add r12d, 1	       215	fold.c	FUNCTION_4	IF_5	FOR_1
0x40052cd	          0x8b5310	            mov edx, dword [rbx + 0x10] 	       215	fold.c	FUNCTION_4	IF_5	FOR_1
0x40052d0	      0xe9ebfeffff	                           jmp 0x40051c0	       215	fold.c	FUNCTION_4	IF_5	FOR_1
0x40052d5	    0x8b1500000000	            mov edx, dword [0x040052db] 	       813	fold.c	FUNCTION_28	IF_1
0x40052db	            0x85d2	                           test edx, edx	       813	fold.c	FUNCTION_28	IF_1
0x40052dd	            0x7e5b	                           jle 0x400533a	       813	fold.c	FUNCTION_28	IF_1
0x40052df	    0x41c686210100	               mov byte [r14 + 0x121], 0	      1190	fold.c	FUNCTION_38	IF_1
0x40052e7	      0xe98afeffff	                           jmp 0x4005176	      1190	fold.c	FUNCTION_38	IF_1
0x40052ec	        0x498b5608	                mov rdx, qword [r14 + 8]	       230	fold.c	FUNCTION_4	IF_11
0x40052f0	        0x488b4308	                mov rax, qword [rbx + 8]	       207	fold.c	FUNCTION_4	IF_5	FOR_1	IF_8
0x40052f4	      0x488b742410	            mov rsi, qword [rsp + 0x10] 	       207	fold.c	FUNCTION_4	IF_5	FOR_1	IF_8
0x40052f9	          0x488b12	                    mov rdx, qword [rdx]	       230	fold.c	FUNCTION_4	IF_11
0x40052fc	      0x488d4406ff	                lea rax, [rsi + rax - 1]	       207	fold.c	FUNCTION_4	IF_5	FOR_1	IF_8
0x4005301	          0x4839d0	                            cmp rax, rdx	       207	fold.c	FUNCTION_4	IF_5	FOR_1	IF_8
0x4005304	        0x480f4fc2	                          cmovg rax, rdx	       207	fold.c	FUNCTION_4	IF_5	FOR_1	IF_8
0x4005308	    0x48837c241800	               cmp qword [rsp + 0x18], 0	       236	fold.c	FUNCTION_4	IF_14
0x400530e	            0x741e	                            je 0x400532e	       236	fold.c	FUNCTION_4	IF_14
0x4005310	      0x488b742418	            mov rsi, qword [rsp + 0x18] 	       238	fold.c	FUNCTION_4	IF_14
0x4005315	        0x8b4c2408	                mov ecx, dword [rsp + 8]	       239	fold.c	FUNCTION_4	IF_14
0x4005319	        0x4183c401	                             add r12d, 1	       238	fold.c	FUNCTION_4	IF_14
0x400531d	          0x4585ed	                         test r13d, r13d	       240	fold.c	FUNCTION_4	IF_14
0x4005320	          0x448926	                   mov dword [rsi], r12d	       238	fold.c	FUNCTION_4	IF_14
0x4005323	        0x450f45e5	                       cmovne r12d, r13d	       240	fold.c	FUNCTION_4	IF_14
0x4005327	          0x894e04	                mov dword [rsi + 4], ecx	       239	fold.c	FUNCTION_4	IF_14
0x400532a	        0x44896608	               mov dword [rsi + 8], r12d	       240	fold.c	FUNCTION_4	IF_14
0x400532e	          0x4c29f8	                            sub rax, r15	       296	fold.c	FUNCTION_7	IF_1
0x4005331	        0x4883c001	                              add rax, 1	       296	fold.c	FUNCTION_7	IF_1
0x4005335	      0xe9fefeffff	                           jmp 0x4005238	       296	fold.c	FUNCTION_7	IF_1
0x400533a	      0xbaffffff7f	                     mov edx, 0x7fffffff	       296	fold.c	FUNCTION_7	IF_1
0x400533f	      0xbe01000000	                              mov esi, 1	       296	fold.c	FUNCTION_7	IF_1
0x4005344	      0xe8f7f4ffff	             call sym.foldUpdate.part.16	       296	fold.c	FUNCTION_7	IF_1
0x4005349	            0xeb94	                           jmp 0x40052df	       296	fold.c	FUNCTION_7	IF_1
0x400534b	      0xe800000000	                     call sym.lineFolded	       298	fold.c	FUNCTION_7
foldLevel	WHILE,0:functions,0:ELSE,2:DO,0:FOR,0:SWITCH,0:IF,4:CALL,3	95
0x4005650	              0x55	                                push rbp	       251	fold.c	FUNCTION_5
0x4005651	              0x53	                                push rbx	       251	fold.c	FUNCTION_5
0x4005652	          0x4889fb	                            mov rbx, rdi	       251	fold.c	FUNCTION_5
0x4005655	        0x4883ec08	                              sub rsp, 8	       251	fold.c	FUNCTION_5
0x4005659	    0x488b15000000	            mov rdx, qword [0x04005660] 	       254	fold.c	FUNCTION_5	IF_1
0x4005660	          0x4885d2	                           test rdx, rdx	       254	fold.c	FUNCTION_5	IF_1
0x4005663	     0xf85a2000000	                           jne 0x400570b	       254	fold.c	FUNCTION_5	IF_1
0x4005669	    0x488b2d000000	            mov rbp, qword [0x04005670] 	       255	fold.c	FUNCTION_5	CALL_1
0x4005670	    0x80bd21010000	               cmp byte [rbp + 0x121], 0	      1187	fold.c	FUNCTION_38	IF_1
0x4005677	     0xf85d5000000	                           jne 0x4005752	      1187	fold.c	FUNCTION_38	IF_1
0x400567d	    0x8b85d4010000	           mov eax, dword [rbp + 0x1d4] 	       118	fold.c	FUNCTION_2
0x4005683	            0x85c0	                           test eax, eax	       119	fold.c	FUNCTION_2	CALL_1
0x4005685	            0x747d	                            je 0x4005704	       119	fold.c	FUNCTION_2	CALL_1
0x4005687	    0x488b85f80100	           mov rax, qword [rbp + 0x1f8] 	       307	fold.c	FUNCTION_8
0x400568e	    0x8b9508010000	           mov edx, dword [rbp + 0x108] 	       307	fold.c	FUNCTION_8
0x4005694	        0x80780375	                cmp byte [rax + 3], 0x75	       119	fold.c	FUNCTION_2	CALL_1
0x4005698	     0xf84e6000000	                            je 0x4005784	       119	fold.c	FUNCTION_2	CALL_1
0x400569e	    0x488d8d080100	                  lea rcx, [rbp + 0x108]	      1166	fold.c	FUNCTION_37
0x40056a5	            0x31c0	                            xor eax, eax	      1162	fold.c	FUNCTION_37
0x40056a7	    0x660f1f840000	                    nop word [rax + rax]	      1162	fold.c	FUNCTION_37
0x40056b0	          0x83ea01	                              sub edx, 1	      1132	fold.c	FUNCTION_36
0x40056b3	        0x4c8b4910	              mov r9, qword [rcx + 0x10]	      1132	fold.c	FUNCTION_36
0x40056b7	          0x4863fa	                         movsxd rdi, edx	      1132	fold.c	FUNCTION_36
0x40056ba	          0x4885ff	                           test rdi, rdi	      1133	fold.c	FUNCTION_36	WHILE_1
0x40056bd	            0x7845	                            js 0x4005704	      1133	fold.c	FUNCTION_36	WHILE_1
0x40056bf	            0x31c9	                            xor ecx, ecx	      1133	fold.c	FUNCTION_36	WHILE_1
0x40056c1	            0xeb10	                           jmp 0x40056d3	      1133	fold.c	FUNCTION_36	WHILE_1
0x40056c3	       0xf1f440000	                   nop dword [rax + rax]	      1133	fold.c	FUNCTION_36	WHILE_1
0x40056c8	          0x83ea01	                              sub edx, 1	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40056cb	          0x4863fa	                         movsxd rdi, edx	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40056ce	          0x4839f9	                            cmp rcx, rdi	      1133	fold.c	FUNCTION_36	WHILE_1
0x40056d1	            0x7f31	                            jg 0x4005704	      1133	fold.c	FUNCTION_36	WHILE_1
0x40056d3	        0x488d140f	                    lea rdx, [rdi + rcx]	      1135	fold.c	FUNCTION_36	WHILE_1
0x40056d7	          0x48d1fa	                              sar rdx, 1	      1135	fold.c	FUNCTION_36	WHILE_1
0x40056da	        0x488d3452	                  lea rsi, [rdx + rdx*2]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40056de	        0x48c1e604	                              shl rsi, 4	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40056e2	          0x4c01ce	                             add rsi, r9	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40056e5	          0x4c8b06	                     mov r8, qword [rsi]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40056e8	          0x4939d8	                             cmp r8, rbx	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40056eb	            0x7fdb	                            jg 0x40056c8	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40056ed	          0x4c89c1	                             mov rcx, r8	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x40056f0	        0x48034e08	                add rcx, qword [rsi + 8]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x40056f4	          0x4839cb	                            cmp rbx, rcx	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x40056f7	            0x7c47	                            jl 0x4005740	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x40056f9	          0x8d4a01	                      lea ecx, [rdx + 1]	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x40056fc	          0x4863c9	                         movsxd rcx, ecx	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x40056ff	          0x4839f9	                            cmp rcx, rdi	      1133	fold.c	FUNCTION_36	WHILE_1
0x4005702	            0x7ecf	                           jle 0x40056d3	      1133	fold.c	FUNCTION_36	WHILE_1
0x4005704	        0x4883c408	                              add rsp, 8	       266	fold.c	FUNCTION_5
0x4005708	              0x5b	                                 pop rbx	       266	fold.c	FUNCTION_5
0x4005709	              0x5d	                                 pop rbp	       266	fold.c	FUNCTION_5
0x400570a	              0xc3	                                     ret	       266	fold.c	FUNCTION_5
0x400570b	    0x48393d000000	            cmp qword [0x04005712], rdi 	       256	fold.c	FUNCTION_5	ELSE_1	IF_2
0x4005712	            0x7464	                            je 0x4005778	       256	fold.c	FUNCTION_5	ELSE_1	IF_2
0x4005714	          0x4839da	                            cmp rdx, rbx	       258	fold.c	FUNCTION_5	ELSE_2	IF_3
0x4005717	            0x7f0d	                            jg 0x4005726	       258	fold.c	FUNCTION_5	ELSE_2	IF_3
0x4005719	    0x483b1d000000	            cmp rbx, qword [0x04005720] 	       258	fold.c	FUNCTION_5	ELSE_2	IF_3
0x4005720	     0xf8e88000000	                           jle 0x40057ae	       258	fold.c	FUNCTION_5	ELSE_2	IF_3
0x4005726	    0x488b2d000000	            mov rbp, qword [0x0400572d] 	       258	fold.c	FUNCTION_5	ELSE_2	IF_3
0x400572d	    0x8b85d4010000	           mov eax, dword [rbp + 0x1d4] 	       118	fold.c	FUNCTION_2
0x4005733	            0x85c0	                           test eax, eax	       119	fold.c	FUNCTION_2	CALL_1
0x4005735	            0x74cd	                            je 0x4005704	       119	fold.c	FUNCTION_2	CALL_1
0x4005737	      0xe94bffffff	                           jmp 0x4005687	       119	fold.c	FUNCTION_2	CALL_1
0x400573c	         0xf1f4000	                         nop dword [rax]	       119	fold.c	FUNCTION_2	CALL_1
0x4005740	        0x488d4e10	                   lea rcx, [rsi + 0x10]	      1172	fold.c	FUNCTION_37	FOR_1
0x4005744	          0x4c29c3	                             sub rbx, r8	      1173	fold.c	FUNCTION_37	FOR_1
0x4005747	          0x83c001	                              add eax, 1	      1174	fold.c	FUNCTION_37	FOR_1
0x400574a	          0x8b5610	            mov edx, dword [rsi + 0x10] 	      1174	fold.c	FUNCTION_37	FOR_1
0x400574d	      0xe95effffff	                           jmp 0x40056b0	      1174	fold.c	FUNCTION_37	FOR_1
0x4005752	    0x8b1500000000	            mov edx, dword [0x04005758] 	       813	fold.c	FUNCTION_28	IF_1
0x4005758	          0x4889e8	                            mov rax, rbp	       813	fold.c	FUNCTION_28	IF_1
0x400575b	            0x85d2	                           test edx, edx	       813	fold.c	FUNCTION_28	IF_1
0x400575d	            0x7e34	                           jle 0x4005793	       813	fold.c	FUNCTION_28	IF_1
0x400575f	    0xc68521010000	               mov byte [rbp + 0x121], 0	      1190	fold.c	FUNCTION_38	IF_1
0x4005766	          0x4889c5	                            mov rbp, rax	      1190	fold.c	FUNCTION_38	IF_1
0x4005769	    0x8b85d4010000	           mov eax, dword [rbp + 0x1d4] 	       118	fold.c	FUNCTION_2
0x400576f	            0x85c0	                           test eax, eax	       119	fold.c	FUNCTION_2	CALL_1
0x4005771	            0x7491	                            je 0x4005704	       119	fold.c	FUNCTION_2	CALL_1
0x4005773	      0xe90fffffff	                           jmp 0x4005687	       119	fold.c	FUNCTION_2	CALL_1
0x4005778	    0x8b0500000000	            mov eax, dword [0x0400577e] 	       256	fold.c	FUNCTION_5	ELSE_1	IF_2
0x400577e	            0x85c0	                           test eax, eax	       256	fold.c	FUNCTION_5	ELSE_1	IF_2
0x4005780	            0x7982	                           jns 0x4005704	       256	fold.c	FUNCTION_5	ELSE_1	IF_2
0x4005782	            0xeb90	                           jmp 0x4005714	       256	fold.c	FUNCTION_5	ELSE_1	IF_2
0x4005784	            0x31c0	                            xor eax, eax	       263	fold.c	FUNCTION_5	IF_4
0x4005786	            0x85d2	                           test edx, edx	       119	fold.c	FUNCTION_2	CALL_1
0x4005788	     0xf8f10ffffff	                            jg 0x400569e	       119	fold.c	FUNCTION_2	CALL_1
0x400578e	      0xe971ffffff	                           jmp 0x4005704	       119	fold.c	FUNCTION_2	CALL_1
0x4005793	      0xbaffffff7f	                     mov edx, 0x7fffffff	       119	fold.c	FUNCTION_2	CALL_1
0x4005798	      0xbe01000000	                              mov esi, 1	       119	fold.c	FUNCTION_2	CALL_1
0x400579d	          0x4889ef	                            mov rdi, rbp	       119	fold.c	FUNCTION_2	CALL_1
0x40057a0	      0xe89bf0ffff	             call sym.foldUpdate.part.16	       119	fold.c	FUNCTION_2	CALL_1
0x40057a5	    0x488b05000000	            mov rax, qword [0x040057ac] 	       119	fold.c	FUNCTION_2	CALL_1
0x40057ac	            0xebb1	                           jmp 0x400575f	       119	fold.c	FUNCTION_2	CALL_1
0x40057ae	      0xb8ffffffff	                     mov eax, 0xffffffff	       259	fold.c	FUNCTION_5	ELSE_2	IF_3
0x40057b3	      0xe94cffffff	                           jmp 0x4005704	       259	fold.c	FUNCTION_5	ELSE_2	IF_3
foldMoveTo	WHILE,0:functions,0:ELSE,5:DO,0:FOR,2:SWITCH,0:IF,20:CALL,4	267
0x4005e30	            0x4157	                                push r15	       867	fold.c	FUNCTION_30
0x4005e32	            0x4156	                                push r14	       867	fold.c	FUNCTION_30
0x4005e34	          0x4189ff	                           mov r15d, edi	       867	fold.c	FUNCTION_30
0x4005e37	            0x4155	                                push r13	       867	fold.c	FUNCTION_30
0x4005e39	            0x4154	                                push r12	       867	fold.c	FUNCTION_30
0x4005e3b	              0x55	                                push rbp	       867	fold.c	FUNCTION_30
0x4005e3c	              0x53	                                push rbx	       867	fold.c	FUNCTION_30
0x4005e3d	        0x4883ec48	                           sub rsp, 0x48	       867	fold.c	FUNCTION_30
0x4005e41	    0x488b1d000000	            mov rbx, qword [0x04005e48] 	       880	fold.c	FUNCTION_30	CALL_1
0x4005e48	        0x89742404	                mov dword [rsp + 4], esi	       867	fold.c	FUNCTION_30
0x4005e4c	      0x4889542428	             mov qword [rsp + 0x28], rdx	       867	fold.c	FUNCTION_30
0x4005e51	    0x80bb21010000	               cmp byte [rbx + 0x121], 0	      1187	fold.c	FUNCTION_38	IF_1
0x4005e58	     0xf85f5030000	                           jne 0x4006253	      1187	fold.c	FUNCTION_38	IF_1
0x4005e5e	    0x48837c242800	               cmp qword [rsp + 0x28], 0	       883	fold.c	FUNCTION_30	FOR_1
0x4005e64	     0xf8e08040000	                           jle 0x4006272	       883	fold.c	FUNCTION_30	FOR_1
0x4005e6a	    0x488b05000000	            mov rax, qword [0x04005e71] 	       883	fold.c	FUNCTION_30	FOR_1
0x4005e71	    0xc74424240000	               mov dword [rsp + 0x24], 0	       883	fold.c	FUNCTION_30	FOR_1
0x4005e79	    0x48c744241800	               mov qword [rsp + 0x18], 0	       883	fold.c	FUNCTION_30	FOR_1
0x4005e82	        0x488b6838	            mov rbp, qword [rax + 0x38] 	       883	fold.c	FUNCTION_30	FOR_1
0x4005e86	      0x4889442408	                mov qword [rsp + 8], rax	       883	fold.c	FUNCTION_30	FOR_1
0x4005e8b	      0x488b442408	                mov rax, qword [rsp + 8]	       888	fold.c	FUNCTION_30	FOR_1
0x4005e90	          0x4989eb	                            mov r11, rbp	       888	fold.c	FUNCTION_30	FOR_1
0x4005e93	          0x4531f6	                          xor r14d, r14d	       888	fold.c	FUNCTION_30	FOR_1
0x4005e96	    0xc74424100000	               mov dword [rsp + 0x10], 0	       890	fold.c	FUNCTION_30	FOR_1
0x4005e9e	    0xc74424200000	               mov dword [rsp + 0x20], 0	       889	fold.c	FUNCTION_30	FOR_1
0x4005ea6	          0x4531e4	                          xor r12d, r12d	       887	fold.c	FUNCTION_30	FOR_1
0x4005ea9	    0x4c8da8080100	                  lea r13, [rax + 0x108]	       888	fold.c	FUNCTION_30	FOR_1
0x4005eb0	        0x4d635500	                 movsxd r10, dword [r13]	       888	fold.c	FUNCTION_30	FOR_1
0x4005eb4	          0x4c89de	                            mov rsi, r11	       896	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	CALL_2
0x4005eb7	        0x498b7d10	            mov rdi, qword [r13 + 0x10] 	       896	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	CALL_2
0x4005ebb	          0x4c29e6	                            sub rsi, r12	       896	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	CALL_2
0x4005ebe	        0x418d52ff	                      lea edx, [r10 - 1]	      1132	fold.c	FUNCTION_36
0x4005ec2	          0x4863d2	                         movsxd rdx, edx	      1132	fold.c	FUNCTION_36
0x4005ec5	          0x4885d2	                           test rdx, rdx	      1133	fold.c	FUNCTION_36	WHILE_1
0x4005ec8	     0xf8862030000	                            js 0x4006230	      1133	fold.c	FUNCTION_36	WHILE_1
0x4005ece	          0x4531c0	                            xor r8d, r8d	      1133	fold.c	FUNCTION_36	WHILE_1
0x4005ed1	            0xeb10	                           jmp 0x4005ee3	      1133	fold.c	FUNCTION_36	WHILE_1
0x4005ed3	       0xf1f440000	                   nop dword [rax + rax]	      1133	fold.c	FUNCTION_36	WHILE_1
0x4005ed8	          0x83e801	                              sub eax, 1	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4005edb	          0x4863d0	                         movsxd rdx, eax	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4005ede	          0x4939d0	                             cmp r8, rdx	      1133	fold.c	FUNCTION_36	WHILE_1
0x4005ee1	            0x7f32	                            jg 0x4005f15	      1133	fold.c	FUNCTION_36	WHILE_1
0x4005ee3	        0x498d0410	                     lea rax, [r8 + rdx]	      1135	fold.c	FUNCTION_36	WHILE_1
0x4005ee7	          0x48d1f8	                              sar rax, 1	      1135	fold.c	FUNCTION_36	WHILE_1
0x4005eea	        0x488d1c40	                  lea rbx, [rax + rax*2]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4005eee	        0x48c1e304	                              shl rbx, 4	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4005ef2	          0x4801fb	                            add rbx, rdi	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4005ef5	          0x488b0b	                    mov rcx, qword [rbx]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4005ef8	          0x4839ce	                            cmp rsi, rcx	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4005efb	            0x7cdb	                            jl 0x4005ed8	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4005efd	        0x4c8b4308	                 mov r8, qword [rbx + 8]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4005f01	        0x4e8d0c01	                      lea r9, [rcx + r8]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4005f05	          0x4c39ce	                             cmp rsi, r9	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4005f08	            0x7c76	                            jl 0x4005f80	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4005f0a	          0x83c001	                              add eax, 1	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4005f0d	          0x4c63c0	                          movsxd r8, eax	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4005f10	          0x4939d0	                             cmp r8, rdx	      1133	fold.c	FUNCTION_36	WHILE_1
0x4005f13	            0x7ece	                           jle 0x4005ee3	      1133	fold.c	FUNCTION_36	WHILE_1
0x4005f15	        0x4b8d0440	                    lea rax, [r8 + r8*2]	      1133	fold.c	FUNCTION_36	WHILE_1
0x4005f19	        0x48c1e004	                              shl rax, 4	      1133	fold.c	FUNCTION_36	WHILE_1
0x4005f1d	          0x4585ff	                         test r15d, r15d	       898	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_2
0x4005f20	     0xf84fa000000	                            je 0x4006020	       898	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_2
0x4005f26	      0x837c240401	                  cmp dword [rsp + 4], 1	       903	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3
0x4005f2b	        0x488d1c07	                    lea rbx, [rdi + rax]	      1149	fold.c	FUNCTION_36
0x4005f2f	     0xf84b0020000	                            je 0x40061e5	       903	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3
0x4005f35	          0x4839df	                            cmp rdi, rbx	       911	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	ELSE_1	IF_5
0x4005f38	     0xf84e2000000	                            je 0x4006020	       911	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	ELSE_1	IF_5
0x4005f3e	      0xba01000000	                              mov edx, 1	       911	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	ELSE_1	IF_5
0x4005f43	          0x4839df	                            cmp rdi, rbx	       946	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x4005f46	            0x7316	                           jae 0x4005f5e	       946	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x4005f48	          0x4c89e0	                            mov rax, r12	       948	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x4005f4b	        0x480343d0	             add rax, qword [rbx - 0x30]	       948	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x4005f4f	        0x480343d8	             add rax, qword [rbx - 0x28]	       948	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x4005f53	        0x4883e801	                              sub rax, 1	       948	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x4005f57	          0x4c39d8	                            cmp rax, r11	       948	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x4005f5a	        0x480f4ce8	                          cmovl rbp, rax	       948	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x4005f5e	        0x4983c601	                              add r14, 1	       948	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x4005f62	            0x85d2	                           test edx, edx	       972	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_18
0x4005f64	     0xf85b6000000	                           jne 0x4006020	       972	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_18
0x4005f6a	        0x4c8d6b10	                   lea r13, [rbx + 0x10]	       976	fold.c	FUNCTION_30	FOR_1	FOR_2
0x4005f6e	          0x4c0323	                    add r12, qword [rbx]	       977	fold.c	FUNCTION_30	FOR_1	FOR_2
0x4005f71	      0xe93affffff	                           jmp 0x4005eb0	       979	fold.c	FUNCTION_30	FOR_1	FOR_2
0x4005f76	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       979	fold.c	FUNCTION_30	FOR_1	FOR_2
0x4005f80	        0x8b442420	            mov eax, dword [rsp + 0x20] 	      1652	fold.c	FUNCTION_49	IF_1
0x4005f84	            0x85c0	                           test eax, eax	      1652	fold.c	FUNCTION_49	IF_1
0x4005f86	     0xf8544010000	                           jne 0x40060d0	      1652	fold.c	FUNCTION_49	IF_1
0x4005f8c	         0xfb64328	           movzx eax, byte [rbx + 0x28] 	      1652	fold.c	FUNCTION_49	IF_1
0x4005f90	            0x31d2	                            xor edx, edx	      1648	fold.c	FUNCTION_49
0x4005f92	            0x3c01	                               cmp al, 1	      1648	fold.c	FUNCTION_49
0x4005f94	           0xf94c2	                                 sete dl	      1648	fold.c	FUNCTION_49
0x4005f97	            0x3c02	                               cmp al, 2	      1652	fold.c	FUNCTION_49	IF_1
0x4005f99	     0xf8431010000	                            je 0x40060d0	      1652	fold.c	FUNCTION_49	IF_1
0x4005f9f	         0xfb64329	           movzx eax, byte [rbx + 0x29] 	      1662	fold.c	FUNCTION_49	IF_4
0x4005fa3	            0x3c02	                               cmp al, 2	      1662	fold.c	FUNCTION_49	IF_4
0x4005fa5	     0xf844a010000	                            je 0x40060f5	      1662	fold.c	FUNCTION_49	IF_4
0x4005fab	            0x85d2	                           test edx, edx	      1664	fold.c	FUNCTION_49	IF_5
0x4005fad	     0xf84ed000000	                            je 0x40060a0	      1664	fold.c	FUNCTION_49	IF_5
0x4005fb3	        0x8b7c2410	            mov edi, dword [rsp + 0x10] 	      1666	fold.c	FUNCTION_49	IF_5	IF_6
0x4005fb7	            0x85ff	                           test edi, edi	      1666	fold.c	FUNCTION_49	IF_5	IF_6
0x4005fb9	     0xf853e010000	                           jne 0x40060fd	      1666	fold.c	FUNCTION_49	IF_5	IF_6
0x4005fbf	            0x3c01	                               cmp al, 1	      1669	fold.c	FUNCTION_49	IF_5	IF_7
0x4005fc1	     0xf84d9000000	                            je 0x40060a0	      1669	fold.c	FUNCTION_49	IF_5	IF_7
0x4005fc7	          0x4585ff	                         test r15d, r15d	       927	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_8
0x4005fca	            0x7454	                            je 0x4006020	       927	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_8
0x4005fcc	      0xba01000000	                              mov edx, 1	       927	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_8
0x4005fd1	      0x837c240401	                  cmp dword [rsp + 4], 1	       933	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10
0x4005fd6	        0x498b7d10	            mov rdi, qword [r13 + 0x10] 	       933	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10
0x4005fda	     0xf8563ffffff	                           jne 0x4005f43	       933	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10
0x4005fe0	        0x488d4330	                   lea rax, [rbx + 0x30]	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x4005fe4	        0x49634d00	                 movsxd rcx, dword [r13]	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x4005fe8	          0x4829f8	                            sub rax, rdi	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x4005feb	    0x48bfabaaaaaa	          movabs rdi, 0xaaaaaaaaaaaaaaab	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x4005ff5	        0x48c1f804	                              sar rax, 4	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x4005ff9	        0x480fafc7	                           imul rax, rdi	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x4005ffd	          0x4839c8	                            cmp rax, rcx	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x4006000	     0xf8d58ffffff	                           jge 0x4005f5e	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x4006006	          0x4c89e0	                            mov rax, r12	       938	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x4006009	        0x48034330	             add rax, qword [rbx + 0x30]	       938	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x400600d	          0x4c39d8	                            cmp rax, r11	       938	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x4006010	        0x480f4fe8	                          cmovg rbp, rax	       938	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x4006014	        0x4983c601	                              add r14, 1	       938	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x4006018	            0x85d2	                           test edx, edx	       972	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_18
0x400601a	     0xf844affffff	                            je 0x4005f6a	       972	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_18
0x4006020	          0x4c39dd	                            cmp rbp, r11	       980	fold.c	FUNCTION_30	FOR_1	IF_19
0x4006023	            0x743a	                            je 0x400605f	       980	fold.c	FUNCTION_30	FOR_1	IF_19
0x4006025	        0x8b542424	            mov edx, dword [rsp + 0x24] 	       982	fold.c	FUNCTION_30	FOR_1	IF_19	IF_20
0x4006029	            0x85d2	                           test edx, edx	       982	fold.c	FUNCTION_30	FOR_1	IF_19	IF_20
0x400602b	     0xf840c020000	                            je 0x400623d	       982	fold.c	FUNCTION_30	FOR_1	IF_19	IF_20
0x4006031	      0x488b442408	                mov rax, qword [rsp + 8]	       984	fold.c	FUNCTION_30	FOR_1	IF_19
0x4006036	    0x488344241801	               add qword [rsp + 0x18], 1	       883	fold.c	FUNCTION_30	FOR_1
0x400603c	    0xc74424240100	               mov dword [rsp + 0x24], 1	       986	fold.c	FUNCTION_30	FOR_1	IF_19
0x4006044	        0x48896838	             mov qword [rax + 0x38], rbp	       984	fold.c	FUNCTION_30	FOR_1	IF_19
0x4006048	    0xc74040000000	               mov dword [rax + 0x40], 0	       985	fold.c	FUNCTION_30	FOR_1	IF_19
0x400604f	      0x488b442418	            mov rax, qword [rsp + 0x18] 	       883	fold.c	FUNCTION_30	FOR_1
0x4006054	      0x4839442428	            cmp qword [rsp + 0x28], rax 	       883	fold.c	FUNCTION_30	FOR_1
0x4006059	     0xf852cfeffff	                           jne 0x4005e8b	       883	fold.c	FUNCTION_30	FOR_1
0x400605f	        0x8b442424	            mov eax, dword [rsp + 0x24] 	       993	fold.c	FUNCTION_30	ELSE_5
0x4006063	        0x4883c448	                           add rsp, 0x48	       993	fold.c	FUNCTION_30	ELSE_5
0x4006067	              0x5b	                                 pop rbx	       993	fold.c	FUNCTION_30	ELSE_5
0x4006068	              0x5d	                                 pop rbp	       993	fold.c	FUNCTION_30	ELSE_5
0x4006069	            0x415c	                                 pop r12	       993	fold.c	FUNCTION_30	ELSE_5
0x400606b	            0x415d	                                 pop r13	       993	fold.c	FUNCTION_30	ELSE_5
0x400606d	            0x415e	                                 pop r14	       993	fold.c	FUNCTION_30	ELSE_5
0x400606f	            0x415f	                                 pop r15	       993	fold.c	FUNCTION_30	ELSE_5
0x4006071	              0xc3	                                     ret	       993	fold.c	FUNCTION_30	ELSE_5
0x4006072	          0x4c89eb	                            mov rbx, r13	       993	fold.c	FUNCTION_30	ELSE_5
0x4006075	      0x488b6c2410	            mov rbp, qword [rsp + 0x10] 	       993	fold.c	FUNCTION_30	ELSE_5
0x400607a	      0x4c8b742438	            mov r14, qword [rsp + 0x38] 	       993	fold.c	FUNCTION_30	ELSE_5
0x400607f	      0x4c8b6c2430	            mov r13, qword [rsp + 0x30] 	       993	fold.c	FUNCTION_30	ELSE_5
0x4006084	        0xc6432901	                mov byte [rbx + 0x29], 1	      1707	fold.c	FUNCTION_50	IF_1	ELSE_1
0x4006088	        0x4c8b5838	            mov r11, qword [rax + 0x38] 	      1707	fold.c	FUNCTION_50	IF_1	ELSE_1
0x400608c	      0x4889442408	                mov qword [rsp + 8], rax	      1707	fold.c	FUNCTION_50	IF_1	ELSE_1
0x4006091	    0xc74424100100	               mov dword [rsp + 0x10], 1	      1707	fold.c	FUNCTION_50	IF_1	ELSE_1
0x4006099	     0xf1f80000000	                         nop dword [rax]	      1707	fold.c	FUNCTION_50	IF_1	ELSE_1
0x40060a0	          0x4585ff	                         test r15d, r15d	       931	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9
0x40060a3	     0xf8576010000	                           jne 0x400621f	       931	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9
0x40060a9	          0x4c89e0	                            mov rax, r12	       960	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x40060ac	          0x480303	                    add rax, qword [rbx]	       960	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x40060af	      0x837c240401	                  cmp dword [rsp + 4], 1	       958	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x40060b4	     0xf8417010000	                            je 0x40061d1	       958	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x40060ba	          0x4c39d8	                            cmp rax, r11	       958	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x40060bd	        0x480f4ce8	                          cmovl rbp, rax	       958	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x40060c1	        0x4983c601	                              add r14, 1	       958	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x40060c5	      0xe9a0feffff	                           jmp 0x4005f6a	       958	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x40060ca	    0x660f1f440000	                    nop word [rax + rax]	       958	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x40060d0	      0x488b442408	                mov rax, qword [rsp + 8]	      1648	fold.c	FUNCTION_49
0x40060d5	            0x31d2	                            xor edx, edx	      1648	fold.c	FUNCTION_49
0x40060d7	    0xc74424200100	               mov dword [rsp + 0x20], 1	      1654	fold.c	FUNCTION_49	IF_1
0x40060df	    0x4c3bb0e80100	           cmp r14, qword [rax + 0x1e8] 	      1648	fold.c	FUNCTION_49
0x40060e6	         0xfb64329	           movzx eax, byte [rbx + 0x29] 	      1662	fold.c	FUNCTION_49	IF_4
0x40060ea	           0xf9dc2	                                setge dl	      1648	fold.c	FUNCTION_49
0x40060ed	            0x3c02	                               cmp al, 2	      1662	fold.c	FUNCTION_49	IF_4
0x40060ef	     0xf85b6feffff	                           jne 0x4005fab	      1662	fold.c	FUNCTION_49	IF_4
0x40060f5	            0x85d2	                           test edx, edx	      1664	fold.c	FUNCTION_49	IF_5
0x40060f7	     0xf8411010000	                            je 0x400620e	      1664	fold.c	FUNCTION_49	IF_5
0x40060fd	        0x488b4320	            mov rax, qword [rbx + 0x20] 	      1664	fold.c	FUNCTION_49	IF_5
0x4006101	          0x8b7310	            mov esi, dword [rbx + 0x10] 	      1723	fold.c	FUNCTION_51	FOR_1
0x4006104	            0x31d2	                            xor edx, edx	      1723	fold.c	FUNCTION_51	FOR_1
0x4006106	        0xc6432902	                mov byte [rbx + 0x29], 2	      1667	fold.c	FUNCTION_49	IF_5	IF_6
0x400610a	        0x4883c029	                           add rax, 0x29	      1667	fold.c	FUNCTION_49	IF_5	IF_6
0x400610e	            0x85f6	                           test esi, esi	      1723	fold.c	FUNCTION_51	FOR_1
0x4006110	            0x7e15	                           jle 0x4006127	      1723	fold.c	FUNCTION_51	FOR_1
0x4006112	    0x660f1f440000	                    nop word [rax + rax]	      1723	fold.c	FUNCTION_51	FOR_1
0x4006118	          0xc60002	                       mov byte [rax], 2	      1724	fold.c	FUNCTION_51	FOR_1
0x400611b	          0x83c201	                              add edx, 1	      1723	fold.c	FUNCTION_51	FOR_1
0x400611e	        0x4883c030	                           add rax, 0x30	      1723	fold.c	FUNCTION_51	FOR_1
0x4006122	          0x3b5310	            cmp edx, dword [rbx + 0x10] 	      1723	fold.c	FUNCTION_51	FOR_1
0x4006125	            0x7cf1	                            jl 0x4006118	      1723	fold.c	FUNCTION_51	FOR_1
0x4006127	      0x488b442408	                mov rax, qword [rsp + 8]	      1693	fold.c	FUNCTION_50	IF_1	IF_2
0x400612c	    0x4c3b80080200	            cmp r8, qword [rax + 0x208] 	      1693	fold.c	FUNCTION_50	IF_1	IF_2
0x4006133	     0xf8ffe000000	                            jg 0x4006237	      1693	fold.c	FUNCTION_50	IF_1	IF_2
0x4006139	          0x4d85c0	                             test r8, r8	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x400613c	     0xf8e42ffffff	                           jle 0x4006084	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4006142	          0x4531c0	                            xor r8d, r8d	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4006145	            0x31d2	                            xor edx, edx	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4006147	      0x48896c2410	             mov qword [rsp + 0x10], rbp	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x400614c	      0x4c896c2430	             mov qword [rsp + 0x30], r13	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4006151	      0x4c89742438	             mov qword [rsp + 0x38], r14	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4006156	          0x4989dd	                            mov r13, rbx	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4006159	          0x4889ce	                            mov rsi, rcx	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x400615c	          0x4489c5	                            mov ebp, r8d	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x400615f	          0x4989d6	                            mov r14, rdx	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4006162	      0x488b5c2408	                mov rbx, qword [rsp + 8]	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4006167	            0xeb19	                           jmp 0x4006182	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4006169	     0xf1f80000000	                         nop dword [rax]	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4006170	        0x4983c601	                              add r14, 1	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4006174	        0x4d397508	                cmp qword [r13 + 8], r14	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4006178	     0xf8ef4feffff	                           jle 0x4006072	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x400617e	        0x498b7500	                    mov rsi, qword [r13]	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4006182	          0x4c01e6	                            add rsi, r12	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x4006185	          0x4889df	                            mov rdi, rbx	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x4006188	          0x4c01f6	                            add rsi, r14	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x400618b	      0xe800000000	                          call 0x4006190	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x4006190	             0x1c5	                            add ebp, eax	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x4006192	    0x488b05000000	            mov rax, qword [0x04006199] 	      1701	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x4006199	          0x4863f5	                         movsxd rsi, ebp	      1701	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x400619c	    0x483bb0080200	           cmp rsi, qword [rax + 0x208] 	      1701	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x40061a3	            0x7ecb	                           jle 0x4006170	      1701	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x40061a5	          0x4c89eb	                            mov rbx, r13	      1701	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x40061a8	      0x488b6c2410	            mov rbp, qword [rsp + 0x10] 	      1701	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x40061ad	      0x4c8b742438	            mov r14, qword [rsp + 0x38] 	      1701	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x40061b2	      0x4c8b6c2430	            mov r13, qword [rsp + 0x30] 	      1701	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x40061b7	        0xc6432900	                mov byte [rbx + 0x29], 0	      1703	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x40061bb	      0x4889442408	                mov qword [rsp + 8], rax	      1701	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x40061c0	        0x4c8b5838	            mov r11, qword [rax + 0x38] 	      1701	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x40061c4	    0xc74424100100	               mov dword [rsp + 0x10], 1	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x40061cc	      0xe9f6fdffff	                           jmp 0x4005fc7	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x40061d1	        0x48034308	                add rax, qword [rbx + 8]	       960	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x40061d5	        0x4883e801	                              sub rax, 1	       960	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x40061d9	          0x4c39d8	                            cmp rax, r11	       960	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x40061dc	        0x480f4fe8	                          cmovg rbp, rax	       960	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x40061e0	      0xe9dcfeffff	                           jmp 0x40060c1	       960	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x40061e5	        0x48c1f804	                              sar rax, 4	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x40061e9	    0x48beabaaaaaa	          movabs rsi, 0xaaaaaaaaaaaaaaab	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x40061f3	        0x480fafc6	                           imul rax, rsi	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x40061f7	          0x4c39d0	                            cmp rax, r10	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x40061fa	     0xf8d20feffff	                           jge 0x4006020	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x4006200	        0x4883eb30	                           sub rbx, 0x30	       907	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3
0x4006204	      0xba01000000	                              mov edx, 1	       907	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3
0x4006209	      0xe9d2fdffff	                           jmp 0x4005fe0	       907	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3
0x400620e	          0x4585ff	                         test r15d, r15d	       931	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9
0x4006211	    0xc74424100100	               mov dword [rsp + 0x10], 1	      1663	fold.c	FUNCTION_49	IF_4
0x4006219	     0xf848afeffff	                            je 0x40060a9	       931	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9
0x400621f	            0x31d2	                            xor edx, edx	       931	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9
0x4006221	      0xe9abfdffff	                           jmp 0x4005fd1	       931	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9
0x4006226	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       931	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9
0x4006230	            0x31c0	                            xor eax, eax	      1133	fold.c	FUNCTION_36	WHILE_1
0x4006232	      0xe9e6fcffff	                           jmp 0x4005f1d	      1133	fold.c	FUNCTION_36	WHILE_1
0x4006237	        0xc6432900	                mov byte [rbx + 0x29], 0	      1694	fold.c	FUNCTION_50	IF_1	IF_2
0x400623b	            0xeb83	                           jmp 0x40061c0	      1694	fold.c	FUNCTION_50	IF_1	IF_2
0x400623d	      0xe800000000	                          call 0x4006242	       983	fold.c	FUNCTION_30	FOR_1	IF_19	CALL_4
0x4006242	    0x488b05000000	            mov rax, qword [0x04006249] 	       983	fold.c	FUNCTION_30	FOR_1	IF_19	CALL_4
0x4006249	      0x4889442408	                mov qword [rsp + 8], rax	       983	fold.c	FUNCTION_30	FOR_1	IF_19	CALL_4
0x400624e	      0xe9defdffff	                           jmp 0x4006031	       983	fold.c	FUNCTION_30	FOR_1	IF_19	CALL_4
0x4006253	    0x448b05000000	            mov r8d, dword [0x0400625a] 	       813	fold.c	FUNCTION_28	IF_1
0x400625a	          0x4585c0	                           test r8d, r8d	       813	fold.c	FUNCTION_28	IF_1
0x400625d	            0x7e20	                           jle 0x400627f	       813	fold.c	FUNCTION_28	IF_1
0x400625f	    0x48837c242800	               cmp qword [rsp + 0x28], 0	       883	fold.c	FUNCTION_30	FOR_1
0x4006265	    0xc68321010000	               mov byte [rbx + 0x121], 0	      1190	fold.c	FUNCTION_38	IF_1
0x400626c	     0xf8ff8fbffff	                            jg 0x4005e6a	       883	fold.c	FUNCTION_30	FOR_1
0x4006272	    0xc74424240000	               mov dword [rsp + 0x24], 0	       883	fold.c	FUNCTION_30	FOR_1
0x400627a	      0xe9e0fdffff	                           jmp 0x400605f	       992	fold.c	FUNCTION_30	ELSE_5
0x400627f	      0xbaffffff7f	                     mov edx, 0x7fffffff	       992	fold.c	FUNCTION_30	ELSE_5
0x4006284	      0xbe01000000	                              mov esi, 1	       992	fold.c	FUNCTION_30	ELSE_5
0x4006289	          0x4889df	                            mov rdi, rbx	       992	fold.c	FUNCTION_30	ELSE_5
0x400628c	      0xe8afe5ffff	             call sym.foldUpdate.part.16	       992	fold.c	FUNCTION_30	ELSE_5
0x4006291	            0xebcc	                           jmp 0x400625f	       992	fold.c	FUNCTION_30	ELSE_5
foldCreate	WHILE,0:functions,0:ELSE,2:DO,0:FOR,3:SWITCH,0:IF,15:CALL,11	347
0x4007050	            0x4157	                                push r15	       576	fold.c	FUNCTION_25
0x4007052	            0x4156	                                push r14	       576	fold.c	FUNCTION_25
0x4007054	          0x4889f8	                            mov rax, rdi	       576	fold.c	FUNCTION_25
0x4007057	            0x4155	                                push r13	       576	fold.c	FUNCTION_25
0x4007059	            0x4154	                                push r12	       576	fold.c	FUNCTION_25
0x400705b	              0x55	                                push rbp	       576	fold.c	FUNCTION_25
0x400705c	              0x53	                                push rbx	       576	fold.c	FUNCTION_25
0x400705d	          0x4889f5	                            mov rbp, rsi	       576	fold.c	FUNCTION_25
0x4007060	        0x4883ec68	                           sub rsp, 0x68	       576	fold.c	FUNCTION_25
0x4007064	      0x48897c2408	                mov qword [rsp + 8], rdi	       576	fold.c	FUNCTION_25
0x4007069	    0x64488b3c2528	                mov rdi, qword fs:[0x28]	       576	fold.c	FUNCTION_25
0x4007072	      0x48897c2458	             mov qword [rsp + 0x58], rdi	       576	fold.c	FUNCTION_25
0x4007077	            0x31ff	                            xor edi, edi	       576	fold.c	FUNCTION_25
0x4007079	          0x4839f0	                            cmp rax, rsi	       588	fold.c	FUNCTION_25	IF_1
0x400707c	            0x7e08	                           jle 0x4007086	       588	fold.c	FUNCTION_25	IF_1
0x400707e	      0x4889742408	                mov qword [rsp + 8], rsi	       588	fold.c	FUNCTION_25	IF_1
0x4007083	          0x4889c5	                            mov rbp, rax	       588	fold.c	FUNCTION_25	IF_1
0x4007086	    0x4c8b3d000000	            mov r15, qword [0x0400708d] 	       598	fold.c	FUNCTION_25	IF_2	CALL_1
0x400708d	    0x498b87f80100	           mov rax, qword [r15 + 0x1f8] 	       337	fold.c	FUNCTION_11
0x4007094	        0x80780272	                cmp byte [rax + 2], 0x72	       598	fold.c	FUNCTION_25	IF_2	CALL_1
0x4007098	     0xf84b3020000	                            je 0x4007351	       598	fold.c	FUNCTION_25	IF_2	CALL_1
0x400709e	    0x4180bf210100	               cmp byte [r15 + 0x121], 0	      1187	fold.c	FUNCTION_38	IF_1
0x40070a6	     0xf852f010000	                           jne 0x40071db	      1187	fold.c	FUNCTION_38	IF_1
0x40070ac	      0x488b5c2408	                mov rbx, qword [rsp + 8]	       607	fold.c	FUNCTION_25
0x40070b1	    0x4d8da7080100	                  lea r12, [r15 + 0x108]	       607	fold.c	FUNCTION_25
0x40070b8	            0x31ff	                            xor edi, edi	       607	fold.c	FUNCTION_25
0x40070ba	          0x4531ed	                          xor r13d, r13d	       583	fold.c	FUNCTION_25
0x40070bd	          0x4531c0	                            xor r8d, r8d	       582	fold.c	FUNCTION_25
0x40070c0	    0x41bb01000000	                             mov r11d, 1	       620	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5
0x40070c6	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       620	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5
0x40070d0	        0x418b0424	                    mov eax, dword [r12]	      1132	fold.c	FUNCTION_36
0x40070d4	          0x4189f9	                            mov r9d, edi	      1132	fold.c	FUNCTION_36
0x40070d7	      0x4d8b542410	            mov r10, qword [r12 + 0x10] 	      1132	fold.c	FUNCTION_36
0x40070dc	          0x8d48ff	                      lea ecx, [rax - 1]	      1132	fold.c	FUNCTION_36
0x40070df	          0x4863c9	                         movsxd rcx, ecx	      1132	fold.c	FUNCTION_36
0x40070e2	          0x4885c9	                           test rcx, rcx	      1133	fold.c	FUNCTION_36	WHILE_1
0x40070e5	     0xf88e8000000	                            js 0x40071d3	      1133	fold.c	FUNCTION_36	WHILE_1
0x40070eb	            0x31d2	                            xor edx, edx	      1133	fold.c	FUNCTION_36	WHILE_1
0x40070ed	            0xeb0c	                           jmp 0x40070fb	      1133	fold.c	FUNCTION_36	WHILE_1
0x40070ef	              0x90	                                     nop	      1133	fold.c	FUNCTION_36	WHILE_1
0x40070f0	          0x83e801	                              sub eax, 1	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40070f3	          0x4863c8	                         movsxd rcx, eax	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40070f6	          0x4839ca	                            cmp rdx, rcx	      1133	fold.c	FUNCTION_36	WHILE_1
0x40070f9	            0x7f31	                            jg 0x400712c	      1133	fold.c	FUNCTION_36	WHILE_1
0x40070fb	        0x488d0411	                    lea rax, [rcx + rdx]	      1135	fold.c	FUNCTION_36	WHILE_1
0x40070ff	          0x48d1f8	                              sar rax, 1	      1135	fold.c	FUNCTION_36	WHILE_1
0x4007102	        0x4c8d3440	                  lea r14, [rax + rax*2]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4007106	        0x49c1e604	                              shl r14, 4	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x400710a	          0x4d01d6	                            add r14, r10	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x400710d	          0x498b36	                    mov rsi, qword [r14]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4007110	          0x4839f3	                            cmp rbx, rsi	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4007113	            0x7cdb	                            jl 0x40070f0	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4007115	          0x4889f2	                            mov rdx, rsi	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4007118	        0x49035608	                add rdx, qword [r14 + 8]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x400711c	          0x4839d3	                            cmp rbx, rdx	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x400711f	            0x7c6f	                            jl 0x4007190	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4007121	          0x83c001	                              add eax, 1	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4007124	          0x4863d0	                         movsxd rdx, eax	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4007127	          0x4839ca	                            cmp rdx, rcx	      1133	fold.c	FUNCTION_36	WHILE_1
0x400712a	            0x7ecf	                           jle 0x40070fb	      1133	fold.c	FUNCTION_36	WHILE_1
0x400712c	        0x4c8d3452	                  lea r14, [rdx + rdx*2]	      1133	fold.c	FUNCTION_36	WHILE_1
0x4007130	        0x49c1e604	                              shl r14, 4	      1133	fold.c	FUNCTION_36	WHILE_1
0x4007134	          0x4d01d6	                            add r14, r10	      1149	fold.c	FUNCTION_36
0x4007137	      0xbe01000000	                              mov esi, 1	       637	fold.c	FUNCTION_25	IF_8	CALL_5
0x400713c	          0x4c89e7	                            mov rdi, r12	       637	fold.c	FUNCTION_25	IF_8	CALL_5
0x400713f	      0x4c89542420	             mov qword [rsp + 0x20], r10	       637	fold.c	FUNCTION_25	IF_8	CALL_5
0x4007144	      0x44894c241c	             mov dword [rsp + 0x1c], r9d	       637	fold.c	FUNCTION_25	IF_8	CALL_5
0x4007149	      0x4489442410	             mov dword [rsp + 0x10], r8d	       637	fold.c	FUNCTION_25	IF_8	CALL_5
0x400714e	      0xe800000000	                          call 0x4007153	       637	fold.c	FUNCTION_25	IF_8	CALL_5
0x4007153	          0x83f801	                              cmp eax, 1	       637	fold.c	FUNCTION_25	IF_8	CALL_5
0x4007156	      0x448b442410	            mov r8d, dword [rsp + 0x10] 	       637	fold.c	FUNCTION_25	IF_8	CALL_5
0x400715b	      0x448b4c241c	            mov r9d, dword [rsp + 0x1c] 	       637	fold.c	FUNCTION_25	IF_8	CALL_5
0x4007160	      0x4c8b542420	            mov r10, qword [rsp + 0x20] 	       637	fold.c	FUNCTION_25	IF_8	CALL_5
0x4007165	     0xf8491000000	                            je 0x40071fc	       637	fold.c	FUNCTION_25	IF_8	CALL_5
0x400716b	      0x488b442458	            mov rax, qword [rsp + 0x58] 	       691	fold.c	FUNCTION_25
0x4007170	    0x644833042528	                xor rax, qword fs:[0x28]	       691	fold.c	FUNCTION_25
0x4007179	     0xf85f0030000	                           jne 0x400756f	       691	fold.c	FUNCTION_25
0x400717f	        0x4883c468	                           add rsp, 0x68	       691	fold.c	FUNCTION_25
0x4007183	              0x5b	                                 pop rbx	       691	fold.c	FUNCTION_25
0x4007184	              0x5d	                                 pop rbp	       691	fold.c	FUNCTION_25
0x4007185	            0x415c	                                 pop r12	       691	fold.c	FUNCTION_25
0x4007187	            0x415d	                                 pop r13	       691	fold.c	FUNCTION_25
0x4007189	            0x415e	                                 pop r14	       691	fold.c	FUNCTION_25
0x400718b	            0x415f	                                 pop r15	       691	fold.c	FUNCTION_25
0x400718d	              0xc3	                                     ret	       691	fold.c	FUNCTION_25
0x400718e	            0x6690	                                     nop	       691	fold.c	FUNCTION_25
0x4007190	          0x4839d5	                            cmp rbp, rdx	       612	fold.c	FUNCTION_25	FOR_1	IF_4
0x4007193	            0x7da2	                           jge 0x4007137	       612	fold.c	FUNCTION_25	FOR_1	IF_4
0x4007195	          0x4829f3	                            sub rbx, rsi	       616	fold.c	FUNCTION_25	FOR_1	IF_4
0x4007198	          0x4829f5	                            sub rbp, rsi	       617	fold.c	FUNCTION_25	FOR_1	IF_4
0x400719b	          0x4585c0	                           test r8d, r8d	       618	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5
0x400719e	        0x4d8d6610	                   lea r12, [r14 + 0x10]	       615	fold.c	FUNCTION_25	FOR_1	IF_4
0x40071a2	            0x751c	                           jne 0x40071c0	       618	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5
0x40071a4	      0x410fb64628	           movzx eax, byte [r14 + 0x28] 	       618	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5
0x40071a9	            0x3c02	                               cmp al, 2	       618	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5
0x40071ab	            0x7413	                            je 0x40071c0	       618	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5
0x40071ad	            0x3c01	                               cmp al, 1	       625	fold.c	FUNCTION_25	FOR_1	IF_4	ELSE_1	IF_7
0x40071af	        0x450f44eb	                        cmove r13d, r11d	       625	fold.c	FUNCTION_25	FOR_1	IF_4	ELSE_1	IF_7
0x40071b3	        0x4883c701	                              add rdi, 1	       625	fold.c	FUNCTION_25	FOR_1	IF_4	ELSE_1	IF_7
0x40071b7	      0xe914ffffff	                           jmp 0x40070d0	       634	fold.c	FUNCTION_25	FOR_1
0x40071bc	         0xf1f4000	                         nop dword [rax]	       634	fold.c	FUNCTION_25	FOR_1
0x40071c0	    0x493bbfe80100	           cmp rdi, qword [r15 + 0x1e8] 	       620	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5
0x40071c7	    0x41b801000000	                              mov r8d, 1	       620	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5
0x40071cd	        0x450f4deb	                       cmovge r13d, r11d	       620	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5
0x40071d1	            0xebe0	                           jmp 0x40071b3	       620	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5
0x40071d3	          0x4531f6	                          xor r14d, r14d	      1133	fold.c	FUNCTION_36	WHILE_1
0x40071d6	      0xe959ffffff	                           jmp 0x4007134	      1133	fold.c	FUNCTION_36	WHILE_1
0x40071db	    0x8b0d00000000	            mov ecx, dword [0x040071e1] 	       813	fold.c	FUNCTION_28	IF_1
0x40071e1	          0x4c89f8	                            mov rax, r15	       813	fold.c	FUNCTION_28	IF_1
0x40071e4	            0x85c9	                           test ecx, ecx	       813	fold.c	FUNCTION_28	IF_1
0x40071e6	     0xf8e31020000	                           jle 0x400741d	       813	fold.c	FUNCTION_28	IF_1
0x40071ec	    0x41c687210100	               mov byte [r15 + 0x121], 0	      1190	fold.c	FUNCTION_38	IF_1
0x40071f4	          0x4989c7	                            mov r15, rax	      1190	fold.c	FUNCTION_38	IF_1
0x40071f7	      0xe9b0feffff	                           jmp 0x40070ac	      1190	fold.c	FUNCTION_38	IF_1
0x40071fc	          0x4c89f0	                            mov rax, r14	       636	fold.c	FUNCTION_25
0x40071ff	    0x48b9abaaaaaa	          movabs rcx, 0xaaaaaaaaaaaaaaab	       636	fold.c	FUNCTION_25
0x4007209	      0x488d7c2440	                   lea rdi, [rsp + 0x40]	       640	fold.c	FUNCTION_25	IF_8	CALL_6
0x400720e	          0x4c29d0	                            sub rax, r10	       636	fold.c	FUNCTION_25
0x4007211	      0xba0a000000	                            mov edx, 0xa	       640	fold.c	FUNCTION_25	IF_8	CALL_6
0x4007216	      0xbe30000000	                           mov esi, 0x30	       640	fold.c	FUNCTION_25	IF_8	CALL_6
0x400721b	        0x48c1f804	                              sar rax, 4	       636	fold.c	FUNCTION_25
0x400721f	      0x44894c2420	             mov dword [rsp + 0x20], r9d	       636	fold.c	FUNCTION_25
0x4007224	      0x448944241c	             mov dword [rsp + 0x1c], r8d	       636	fold.c	FUNCTION_25
0x4007229	        0x480fafc1	                           imul rax, rcx	       636	fold.c	FUNCTION_25
0x400722d	          0x4989c7	                            mov r15, rax	       636	fold.c	FUNCTION_25
0x4007230	        0x89442410	             mov dword [rsp + 0x10], eax	       636	fold.c	FUNCTION_25
0x4007234	            0x4898	                                    cdqe	       639	fold.c	FUNCTION_25	IF_8
0x4007236	        0x4c8d3440	                  lea r14, [rax + rax*2]	       639	fold.c	FUNCTION_25	IF_8
0x400723a	        0x49c1e604	                              shl r14, 4	       639	fold.c	FUNCTION_25	IF_8
0x400723e	      0x4d03742410	             add r14, qword [r12 + 0x10]	       639	fold.c	FUNCTION_25	IF_8
0x4007243	      0xe800000000	                          call 0x4007248	       640	fold.c	FUNCTION_25	IF_8	CALL_6
0x4007248	        0x418b0424	                    mov eax, dword [r12]	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x400724c	      0x448b44241c	            mov r8d, dword [rsp + 0x1c] 	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x4007251	      0x4c634c2420	          movsxd r9, dword [rsp + 0x20] 	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x4007256	          0x4139c7	                           cmp r15d, eax	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x4007259	     0xf8d08030000	                           jge 0x4007567	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x400725f	          0x493b2e	                    cmp rbp, qword [r14]	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x4007262	      0x4c635c2410	         movsxd r11, dword [rsp + 0x10] 	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x4007267	     0xf8cec020000	                            jl 0x4007559	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x400726d	        0x498d7e30	                   lea rdi, [r14 + 0x30]	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x4007271	          0x4489fe	                           mov esi, r15d	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x4007274	          0x4429f8	                           sub eax, r15d	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x4007277	          0x4531ff	                          xor r15d, r15d	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x400727a	      0x48897c2410	             mov qword [rsp + 0x10], rdi	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x400727f	          0x4889fa	                            mov rdx, rdi	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x4007282	            0xeb0a	                           jmp 0x400728e	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x4007284	        0x4883c230	                           add rdx, 0x30	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x4007288	        0x483b6ad0	             cmp rbp, qword [rdx - 0x30]	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x400728c	            0x7c0d	                            jl 0x400729b	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x400728e	        0x4183c701	                             add r15d, 1	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x4007292	          0x4139c7	                           cmp r15d, eax	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x4007295	        0x458d1437	                   lea r10d, [r15 + rsi]	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x4007299	            0x75e9	                           jne 0x4007284	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x400729b	      0x488d7c2440	                   lea rdi, [rsp + 0x40]	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0x40072a0	          0x4489fe	                           mov esi, r15d	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0x40072a3	      0x448954242c	            mov dword [rsp + 0x2c], r10d	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0x40072a8	      0x44894c2428	             mov dword [rsp + 0x28], r9d	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0x40072ad	      0x4489442420	             mov dword [rsp + 0x20], r8d	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0x40072b2	      0x44895c241c	            mov dword [rsp + 0x1c], r11d	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0x40072b7	      0xe800000000	                          call 0x40072bc	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0x40072bc	          0x83f801	                              cmp eax, 1	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0x40072bf	      0x4c635c241c	         movsxd r11, dword [rsp + 0x1c] 	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0x40072c4	      0x448b442420	            mov r8d, dword [rsp + 0x20] 	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0x40072c9	      0x4c634c2428	          movsxd r9, dword [rsp + 0x28] 	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0x40072ce	      0x448b54242c	           mov r10d, dword [rsp + 0x2c] 	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0x40072d3	     0xf8462010000	                            je 0x400743b	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0x40072d9	        0x418b0424	                    mov eax, dword [r12]	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0x40072dd	          0x4139c3	                           cmp r11d, eax	       668	fold.c	FUNCTION_25	IF_8	IF_13
0x40072e0	     0xf8c32020000	                            jl 0x4007518	       668	fold.c	FUNCTION_25	IF_8	IF_13
0x40072e6	          0x83c001	                              add eax, 1	       671	fold.c	FUNCTION_25	IF_8
0x40072e9	        0x4183f501	                             xor r13d, 1	       681	fold.c	FUNCTION_25	IF_8	IF_14
0x40072ed	          0x4429f8	                           sub eax, r15d	       671	fold.c	FUNCTION_25	IF_8
0x40072f0	        0x41890424	                    mov dword [r12], eax	       671	fold.c	FUNCTION_25	IF_8
0x40072f4	      0x488b442440	            mov rax, qword [rsp + 0x40] 	       674	fold.c	FUNCTION_25	IF_8
0x40072f9	        0x49894610	             mov qword [r14 + 0x10], rax	       674	fold.c	FUNCTION_25	IF_8
0x40072fd	      0x488b442448	            mov rax, qword [rsp + 0x48] 	       674	fold.c	FUNCTION_25	IF_8
0x4007302	        0x49894618	             mov qword [r14 + 0x18], rax	       674	fold.c	FUNCTION_25	IF_8
0x4007306	      0x488b442450	            mov rax, qword [rsp + 0x50] 	       674	fold.c	FUNCTION_25	IF_8
0x400730b	          0x49891e	                    mov qword [r14], rbx	       675	fold.c	FUNCTION_25	IF_8
0x400730e	        0x49894620	             mov qword [r14 + 0x20], rax	       674	fold.c	FUNCTION_25	IF_8
0x4007312	          0x4889e8	                            mov rax, rbp	       676	fold.c	FUNCTION_25	IF_8
0x4007315	          0x4829d8	                            sub rax, rbx	       676	fold.c	FUNCTION_25	IF_8
0x4007318	        0x4883c001	                              add rax, 1	       676	fold.c	FUNCTION_25	IF_8
0x400731c	          0x4585c5	                          test r13d, r8d	       681	fold.c	FUNCTION_25	IF_8	IF_14
0x400731f	        0x49894608	                mov qword [r14 + 8], rax	       676	fold.c	FUNCTION_25	IF_8
0x4007323	     0xf84ba000000	                            je 0x40073e3	       681	fold.c	FUNCTION_25	IF_8	IF_14
0x4007329	    0x488b3d000000	            mov rdi, qword [0x04007330] 	       681	fold.c	FUNCTION_25	IF_8	IF_14
0x4007330	    0x4c3b8fe80100	            cmp r9, qword [rdi + 0x1e8] 	       681	fold.c	FUNCTION_25	IF_8	IF_14
0x4007337	     0xf8c87010000	                            jl 0x40074c4	       681	fold.c	FUNCTION_25	IF_8	IF_14
0x400733d	      0x41c6462801	                mov byte [r14 + 0x28], 1	       685	fold.c	FUNCTION_25	IF_8
0x4007342	      0x41c6462902	                mov byte [r14 + 0x29], 2	       686	fold.c	FUNCTION_25	IF_8
0x4007347	      0xe800000000	                          call 0x400734c	       689	fold.c	FUNCTION_25	IF_8	CALL_11
0x400734c	      0xe91afeffff	                           jmp 0x400716b	       689	fold.c	FUNCTION_25	IF_8	CALL_11
0x4007351	    0x488b05000000	            mov rax, qword [0x04007358] 	      1735	fold.c	FUNCTION_52	IF_1
0x4007358	    0x8bb040150000	          mov esi, dword [rax + 0x1540] 	      1735	fold.c	FUNCTION_52	IF_1
0x400735e	            0x85f6	                           test esi, esi	      1735	fold.c	FUNCTION_52	IF_1
0x4007360	     0xf8499000000	                            je 0x40073ff	      1735	fold.c	FUNCTION_52	IF_1
0x4007366	    0x498bbf280200	           mov rdi, qword [r15 + 0x228] 	      3358	fold.c	FUNCTION_70	CALL_1
0x400736d	      0xbe2c000000	                           mov esi, 0x2c	      3358	fold.c	FUNCTION_70	CALL_1
0x4007372	      0xe800000000	                          call 0x4007377	      3358	fold.c	FUNCTION_70	CALL_1
0x4007377	        0x488d7801	                      lea rdi, [rax + 1]	      3359	fold.c	FUNCTION_70
0x400737b	    0x492b87280200	            sub rax, qword [r15 + 0x228]	      3359	fold.c	FUNCTION_70
0x4007382	    0x48893d000000	            mov qword [0x04007389], rdi 	      3359	fold.c	FUNCTION_70
0x4007389	          0x4889c3	                            mov rbx, rax	      3359	fold.c	FUNCTION_70
0x400738c	    0x890500000000	            mov dword [0x04007392], eax 	      3359	fold.c	FUNCTION_70
0x4007392	      0xe800000000	                          call 0x4007397	      3360	fold.c	FUNCTION_70	CALL_2
0x4007397	    0x890500000000	            mov dword [0x0400739d], eax 	      3360	fold.c	FUNCTION_70	CALL_2
0x400739d	    0x488b05000000	            mov rax, qword [0x040073a4] 	      1742	fold.c	FUNCTION_52	CALL_4
0x40073a4	            0x89da	                            mov edx, ebx	      1742	fold.c	FUNCTION_52	CALL_4
0x40073a6	      0x488b5c2408	                mov rbx, qword [rsp + 8]	      1742	fold.c	FUNCTION_52	CALL_4
0x40073ab	    0x488bb0280200	           mov rsi, qword [rax + 0x228] 	      1742	fold.c	FUNCTION_52	CALL_4
0x40073b2	          0x4889df	                            mov rdi, rbx	      1742	fold.c	FUNCTION_52	CALL_4
0x40073b5	      0xe8b68dffff	                  call sym.foldAddMarker	      1742	fold.c	FUNCTION_52	CALL_4
0x40073ba	    0x8b1500000000	            mov edx, dword [0x040073c0] 	      1743	fold.c	FUNCTION_52	CALL_5
0x40073c0	    0x488b35000000	            mov rsi, qword [0x040073c7] 	      1743	fold.c	FUNCTION_52	CALL_5
0x40073c7	          0x4889ef	                            mov rdi, rbp	      1743	fold.c	FUNCTION_52	CALL_5
0x40073ca	      0xe8a18dffff	                  call sym.foldAddMarker	      1743	fold.c	FUNCTION_52	CALL_5
0x40073cf	            0x31c9	                            xor ecx, ecx	      1747	fold.c	FUNCTION_52	CALL_6
0x40073d1	          0x4889ea	                            mov rdx, rbp	      1747	fold.c	FUNCTION_52	CALL_6
0x40073d4	            0x31f6	                            xor esi, esi	      1747	fold.c	FUNCTION_52	CALL_6
0x40073d6	          0x4889df	                            mov rdi, rbx	      1747	fold.c	FUNCTION_52	CALL_6
0x40073d9	      0xe800000000	                          call 0x40073de	      1747	fold.c	FUNCTION_52	CALL_6
0x40073de	      0xe988fdffff	                           jmp 0x400716b	      1747	fold.c	FUNCTION_52	CALL_6
0x40073e3	          0x4585c0	                           test r8d, r8d	       683	fold.c	FUNCTION_25	IF_8	IF_15
0x40073e6	     0xf8551ffffff	                           jne 0x400733d	       683	fold.c	FUNCTION_25	IF_8	IF_15
0x40073ec	    0x488b05000000	            mov rax, qword [0x040073f3] 	       684	fold.c	FUNCTION_25	IF_8	IF_15
0x40073f3	    0xc68020010000	               mov byte [rax + 0x120], 1	       684	fold.c	FUNCTION_25	IF_8	IF_15
0x40073fa	      0xe93effffff	                           jmp 0x400733d	       684	fold.c	FUNCTION_25	IF_8	IF_15
0x40073ff	            0x31ff	                            xor edi, edi	      1737	fold.c	FUNCTION_52	IF_1	CALL_2
0x4007401	      0xba05000000	                              mov edx, 5	      1737	fold.c	FUNCTION_52	IF_1	CALL_2
0x4007406	      0xbe00000000	                              mov esi, 0	      1737	fold.c	FUNCTION_52	IF_1	CALL_2
0x400740b	      0xe800000000	                          call 0x4007410	      1737	fold.c	FUNCTION_52	IF_1	CALL_2
0x4007410	          0x4889c7	                            mov rdi, rax	      1737	fold.c	FUNCTION_52	IF_1	CALL_2
0x4007413	      0xe800000000	                          call 0x4007418	      1737	fold.c	FUNCTION_52	IF_1	CALL_2
0x4007418	      0xe94efdffff	                           jmp 0x400716b	      1737	fold.c	FUNCTION_52	IF_1	CALL_2
0x400741d	      0xbaffffff7f	                     mov edx, 0x7fffffff	      1737	fold.c	FUNCTION_52	IF_1	CALL_2
0x4007422	      0xbe01000000	                              mov esi, 1	      1737	fold.c	FUNCTION_52	IF_1	CALL_2
0x4007427	          0x4c89ff	                            mov rdi, r15	      1737	fold.c	FUNCTION_52	IF_1	CALL_2
0x400742a	      0xe811d4ffff	             call sym.foldUpdate.part.16	      1737	fold.c	FUNCTION_52	IF_1	CALL_2
0x400742f	    0x488b05000000	            mov rax, qword [0x04007436] 	      1737	fold.c	FUNCTION_52	IF_1	CALL_2
0x4007436	      0xe9b1fdffff	                           jmp 0x40071ec	      1737	fold.c	FUNCTION_52	IF_1	CALL_2
0x400743b	          0x498b06	                    mov rax, qword [r14]	       650	fold.c	FUNCTION_25	IF_8	IF_10	IF_11
0x400743e	      0x488b7c2450	            mov rdi, qword [rsp + 0x50] 	        59	string3.h	FUNCTION_78	CALL_3
0x4007443	      0x4489542428	            mov dword [rsp + 0x28], r10d	        59	string3.h	FUNCTION_78	CALL_3
0x4007448	      0x44894c2420	             mov dword [rsp + 0x20], r9d	        59	string3.h	FUNCTION_78	CALL_3
0x400744d	      0x448944241c	             mov dword [rsp + 0x1c], r8d	        59	string3.h	FUNCTION_78	CALL_3
0x4007452	          0x4839c3	                            cmp rbx, rax	        59	string3.h	FUNCTION_78	CALL_3
0x4007455	        0x480f4fd8	                          cmovg rbx, rax	        59	string3.h	FUNCTION_78	CALL_3
0x4007459	          0x4963c7	                        movsxd rax, r15d	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x400745c	        0x488d1440	                  lea rdx, [rax + rax*2]	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4007460	        0x48c1e204	                              shl rdx, 4	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4007464	      0x498d7416d0	             lea rsi, [r14 + rdx - 0x30]	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4007469	        0x488b4608	                mov rax, qword [rsi + 8]	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x400746d	          0x480306	                    add rax, qword [rsi]	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4007470	          0x4c89f6	                            mov rsi, r14	        59	string3.h	FUNCTION_78	CALL_3
0x4007473	        0x4883e801	                              sub rax, 1	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4007477	          0x4839c5	                            cmp rbp, rax	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x400747a	        0x480f4ce8	                          cmovl rbp, rax	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x400747e	      0xe800000000	                          call 0x4007483	        59	string3.h	FUNCTION_78	CALL_3
0x4007483	        0x418d57ff	                      lea edx, [r15 - 1]	        59	string3.h	FUNCTION_78	CALL_3
0x4007487	      0x488b442450	            mov rax, qword [rsp + 0x50] 	        59	string3.h	FUNCTION_78	CALL_3
0x400748c	      0x44017c2440	            add dword [rsp + 0x40], r15d	       659	fold.c	FUNCTION_25	IF_8	IF_10
0x4007491	      0x4c634c2420	          movsxd r9, dword [rsp + 0x20] 	       659	fold.c	FUNCTION_25	IF_8	IF_10
0x4007496	      0x448b44241c	            mov r8d, dword [rsp + 0x1c] 	       659	fold.c	FUNCTION_25	IF_8	IF_10
0x400749b	      0x488d545203	              lea rdx, [rdx + rdx*2 + 3]	       659	fold.c	FUNCTION_25	IF_8	IF_10
0x40074a0	      0x448b542428	           mov r10d, dword [rsp + 0x28] 	       659	fold.c	FUNCTION_25	IF_8	IF_10
0x40074a5	        0x48c1e204	                              shl rdx, 4	       659	fold.c	FUNCTION_25	IF_8	IF_10
0x40074a9	          0x4801c2	                            add rdx, rax	       659	fold.c	FUNCTION_25	IF_8	IF_10
0x40074ac	          0x482918	                    sub qword [rax], rbx	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x40074af	        0x4883c030	                           add rax, 0x30	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x40074b3	          0x4839d0	                            cmp rax, rdx	       664	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x40074b6	            0x75f4	                           jne 0x40074ac	       664	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x40074b8	        0x418b0424	                    mov eax, dword [r12]	       664	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x40074bc	          0x4d63da	                        movsxd r11, r10d	       664	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x40074bf	      0xe919feffff	                           jmp 0x40072dd	       664	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x40074c4	    0x488b87f80100	           mov rax, qword [rdi + 0x1f8] 	       357	fold.c	FUNCTION_13
0x40074cb	    0xc744243c0000	               mov dword [rsp + 0x3c], 0	      1207	fold.c	FUNCTION_39	FOR_1
0x40074d3	          0x803864	                    cmp byte [rax], 0x64	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x40074d6	     0xf8498000000	                            je 0x4007574	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x40074dc	      0x488b742408	                mov rsi, qword [rsp + 8]	      1253	fold.c	FUNCTION_40	CALL_2
0x40074e1	      0x4c8d44243c	                    lea r8, [rsp + 0x3c]	      1253	fold.c	FUNCTION_40	CALL_2
0x40074e6	            0x31c9	                            xor ecx, ecx	      1253	fold.c	FUNCTION_40	CALL_2
0x40074e8	            0x31d2	                            xor edx, edx	      1253	fold.c	FUNCTION_40	CALL_2
0x40074ea	      0xe8b1edffff	               call sym.setManualFoldWin	      1253	fold.c	FUNCTION_40	CALL_2
0x40074ef	      0xf644243c03	               test byte [rsp + 0x3c], 3	      1212	fold.c	FUNCTION_39	FOR_1	IF_1	IF_2
0x40074f4	     0xf8543feffff	                           jne 0x400733d	      1212	fold.c	FUNCTION_39	FOR_1	IF_1	IF_2
0x40074fa	            0x31ff	                            xor edi, edi	      1213	fold.c	FUNCTION_39	FOR_1	IF_1	CALL_3
0x40074fc	      0xba05000000	                              mov edx, 5	      1213	fold.c	FUNCTION_39	FOR_1	IF_1	CALL_3
0x4007501	      0xbe00000000	                              mov esi, 0	      1213	fold.c	FUNCTION_39	FOR_1	IF_1	CALL_3
0x4007506	      0xe800000000	                          call 0x400750b	      1213	fold.c	FUNCTION_39	FOR_1	IF_1	CALL_3
0x400750b	          0x4889c7	                            mov rdi, rax	      1213	fold.c	FUNCTION_39	FOR_1	IF_1	CALL_3
0x400750e	      0xe800000000	                          call 0x4007513	      1213	fold.c	FUNCTION_39	FOR_1	IF_1	CALL_3
0x4007513	      0xe925feffff	                           jmp 0x400733d	      1213	fold.c	FUNCTION_39	FOR_1	IF_1	CALL_3
0x4007518	      0x488b7c2410	            mov rdi, qword [rsp + 0x10] 	      1213	fold.c	FUNCTION_39	FOR_1	IF_1	CALL_3
0x400751d	        0x4b8d345b	                  lea rsi, [r11 + r11*2]	        59	string3.h	FUNCTION_78	CALL_3
0x4007521	          0x4429d8	                           sub eax, r11d	        59	string3.h	FUNCTION_78	CALL_3
0x4007524	      0x44894c2420	             mov dword [rsp + 0x20], r9d	        59	string3.h	FUNCTION_78	CALL_3
0x4007529	            0x4898	                                    cdqe	        59	string3.h	FUNCTION_78	CALL_3
0x400752b	      0x448944241c	             mov dword [rsp + 0x1c], r8d	        59	string3.h	FUNCTION_78	CALL_3
0x4007530	        0x48c1e604	                              shl rsi, 4	        59	string3.h	FUNCTION_78	CALL_3
0x4007534	      0x4903742410	             add rsi, qword [r12 + 0x10]	        59	string3.h	FUNCTION_78	CALL_3
0x4007539	        0x488d1440	                  lea rdx, [rax + rax*2]	        59	string3.h	FUNCTION_78	CALL_3
0x400753d	        0x48c1e204	                              shl rdx, 4	        59	string3.h	FUNCTION_78	CALL_3
0x4007541	      0xe800000000	                          call 0x4007546	        59	string3.h	FUNCTION_78	CALL_3
0x4007546	        0x418b0424	                    mov eax, dword [r12]	        59	string3.h	FUNCTION_78	CALL_3
0x400754a	      0x448b44241c	            mov r8d, dword [rsp + 0x1c] 	        59	string3.h	FUNCTION_78	CALL_3
0x400754f	      0x4c634c2420	          movsxd r9, dword [rsp + 0x20] 	        59	string3.h	FUNCTION_78	CALL_3
0x4007554	      0xe98dfdffff	                           jmp 0x40072e6	        59	string3.h	FUNCTION_78	CALL_3
0x4007559	        0x498d7e30	                   lea rdi, [r14 + 0x30]	        59	string3.h	FUNCTION_78	CALL_3
0x400755d	          0x4531ff	                          xor r15d, r15d	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x4007560	      0x48897c2410	             mov qword [rsp + 0x10], rdi	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x4007565	            0xebb6	                           jmp 0x400751d	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x4007567	          0x4531ff	                          xor r15d, r15d	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x400756a	      0xe977fdffff	                           jmp 0x40072e6	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x400756f	      0xe800000000	                          call 0x4007574	       691	fold.c	FUNCTION_25
0x4007574	    0x8b9788020000	           mov edx, dword [rdi + 0x288] 	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x400757a	            0x85d2	                           test edx, edx	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x400757c	     0xf845affffff	                            je 0x40074dc	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x4007582	    0x488b1d000000	            mov rbx, qword [0x04007589] 	      1241	fold.c	FUNCTION_40	IF_1
0x4007589	          0x4885db	                           test rbx, rbx	      1241	fold.c	FUNCTION_40	IF_1
0x400758c	            0x7517	                           jne 0x40075a5	      1241	fold.c	FUNCTION_40	IF_1
0x400758e	      0xe949ffffff	                           jmp 0x40074dc	      1241	fold.c	FUNCTION_40	IF_1
0x4007593	       0xf1f440000	                   nop dword [rax + rax]	      1241	fold.c	FUNCTION_40	IF_1
0x4007598	        0x488b5b20	            mov rbx, qword [rbx + 0x20] 	      1241	fold.c	FUNCTION_40	IF_1
0x400759c	          0x4885db	                           test rbx, rbx	      1241	fold.c	FUNCTION_40	IF_1
0x400759f	     0xf8437ffffff	                            je 0x40074dc	      1241	fold.c	FUNCTION_40	IF_1
0x40075a5	          0x4839fb	                            cmp rbx, rdi	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x40075a8	            0x74ee	                            je 0x4007598	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x40075aa	    0x488b83f80100	           mov rax, qword [rbx + 0x1f8] 	       357	fold.c	FUNCTION_13
0x40075b1	          0x803864	                    cmp byte [rax], 0x64	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x40075b4	            0x75e2	                           jne 0x4007598	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x40075b6	    0x8b8388020000	           mov eax, dword [rbx + 0x288] 	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x40075bc	            0x85c0	                           test eax, eax	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x40075be	            0x74d8	                            je 0x4007598	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x40075c0	        0x488b7f38	            mov rdi, qword [rdi + 0x38] 	      1245	fold.c	FUNCTION_40	FUNCTION_1	CALL_2
0x40075c4	          0x4889de	                            mov rsi, rbx	      1245	fold.c	FUNCTION_40	FUNCTION_1	CALL_2
0x40075c7	      0xe800000000	                          call 0x40075cc	      1245	fold.c	FUNCTION_40	FUNCTION_1	CALL_2
0x40075cc	          0x4885c0	                           test rax, rax	      1246	fold.c	FUNCTION_40	FUNCTION_1	IF_2
0x40075cf	            0x7412	                            je 0x40075e3	      1246	fold.c	FUNCTION_40	FUNCTION_1	IF_2
0x40075d1	          0x4531c0	                            xor r8d, r8d	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x40075d4	            0x31c9	                            xor ecx, ecx	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x40075d6	            0x31d2	                            xor edx, edx	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x40075d8	          0x4889c6	                            mov rsi, rax	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x40075db	          0x4889df	                            mov rdi, rbx	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x40075de	      0xe8bdecffff	               call sym.setManualFoldWin	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x40075e3	    0x488b3d000000	            mov rdi, qword [0x040075ea] 	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x40075ea	            0xebac	                           jmp 0x4007598	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
foldCheckClose	WHILE,0:functions,0:ELSE,0:DO,0:FOR,0:SWITCH,0:IF,2:CALL,3	90
0x4005500	    0x488b05000000	            mov rax, qword [0x04005507] 	       515	fold.c	FUNCTION_22	IF_1
0x4005507	          0x803800	                       cmp byte [rax], 0	       515	fold.c	FUNCTION_22	IF_1
0x400550a	     0xf848c000000	                            je 0x400559c	       515	fold.c	FUNCTION_22	IF_1
0x4005510	            0x4154	                                push r12	       514	fold.c	FUNCTION_22
0x4005512	              0x55	                                push rbp	       514	fold.c	FUNCTION_22
0x4005513	              0x53	                                push rbx	       514	fold.c	FUNCTION_22
0x4005514	    0x488b1d000000	            mov rbx, qword [0x0400551b] 	       517	fold.c	FUNCTION_22	IF_1	CALL_1
0x400551b	    0x80bb21010000	               cmp byte [rbx + 0x121], 0	      1187	fold.c	FUNCTION_38	IF_1
0x4005522	     0xf85e8000000	                           jne 0x4005610	      1187	fold.c	FUNCTION_38	IF_1
0x4005528	    0x8b8308010000	           mov eax, dword [rbx + 0x108] 	       533	fold.c	FUNCTION_23	FOR_1
0x400552e	    0x488b93e80100	           mov rdx, qword [rbx + 0x1e8] 	       518	fold.c	FUNCTION_22	IF_1	IF_2	CALL_2
0x4005535	        0x488b6b38	            mov rbp, qword [rbx + 0x38] 	       518	fold.c	FUNCTION_22	IF_1	IF_2	CALL_2
0x4005539	    0x4c8b8b180100	            mov r9, qword [rbx + 0x118] 	       518	fold.c	FUNCTION_22	IF_1	IF_2	CALL_2
0x4005540	            0x85c0	                           test eax, eax	       533	fold.c	FUNCTION_23	FOR_1
0x4005542	          0x4189d4	                           mov r12d, edx	       518	fold.c	FUNCTION_22	IF_1	IF_2	CALL_2
0x4005545	            0x7e51	                           jle 0x4005598	       533	fold.c	FUNCTION_23	FOR_1
0x4005547	        0x4983c110	                            add r9, 0x10	       533	fold.c	FUNCTION_23	FOR_1
0x400554b	          0x4531db	                          xor r11d, r11d	       533	fold.c	FUNCTION_23	FOR_1
0x400554e	          0x4531d2	                          xor r10d, r10d	       533	fold.c	FUNCTION_23	FOR_1
0x4005551	        0x4183ec01	                             sub r12d, 1	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x4005555	            0x85d2	                           test edx, edx	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x4005557	            0x7e74	                           jle 0x40055cd	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x4005559	     0xf1f80000000	                         nop dword [rax]	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x4005560	      0x4180791800	                 cmp byte [r9 + 0x18], 0	       536	fold.c	FUNCTION_23	FOR_1	IF_1
0x4005565	            0x751f	                           jne 0x4005586	       536	fold.c	FUNCTION_23	FOR_1	IF_1
0x4005567	          0x4889ea	                            mov rdx, rbp	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x400556a	        0x492b51f0	              sub rdx, qword [r9 - 0x10]	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x400556e	        0x498b7110	              mov rsi, qword [r9 + 0x10]	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x4005572	          0x4489e1	                           mov ecx, r12d	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x4005575	          0x4c89cf	                             mov rdi, r9	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x4005578	      0xe803ceffff	           call sym.checkCloseRec.isra.0	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x400557d	          0x4109c3	                            or r11d, eax	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x4005580	    0x8b8308010000	           mov eax, dword [rbx + 0x108] 	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x4005586	        0x4183c201	                             add r10d, 1	       533	fold.c	FUNCTION_23	FOR_1
0x400558a	        0x4983c130	                            add r9, 0x30	       533	fold.c	FUNCTION_23	FOR_1
0x400558e	          0x4439d0	                           cmp eax, r10d	       533	fold.c	FUNCTION_23	FOR_1
0x4005591	            0x7fcd	                            jg 0x4005560	       533	fold.c	FUNCTION_23	FOR_1
0x4005593	          0x4585db	                         test r11d, r11d	       518	fold.c	FUNCTION_22	IF_1	IF_2	CALL_2
0x4005596	            0x7548	                           jne 0x40055e0	       518	fold.c	FUNCTION_22	IF_1	IF_2	CALL_2
0x4005598	              0x5b	                                 pop rbx	       522	fold.c	FUNCTION_22
0x4005599	              0x5d	                                 pop rbp	       522	fold.c	FUNCTION_22
0x400559a	            0x415c	                                 pop r12	       522	fold.c	FUNCTION_22
0x400559c	            0xf3c3	                                     ret	       522	fold.c	FUNCTION_22
0x400559e	            0x6690	                                     nop	       522	fold.c	FUNCTION_22
0x40055a0	          0x4889c2	                            mov rdx, rax	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x40055a3	        0x490351f8	                 add rdx, qword [r9 - 8]	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x40055a7	          0x4839d5	                            cmp rbp, rdx	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x40055aa	            0x7c44	                            jl 0x40055f0	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x40055ac	      0x41c6411802	                 mov byte [r9 + 0x18], 2	       541	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x40055b1	    0x8b8308010000	           mov eax, dword [rbx + 0x108] 	       541	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x40055b7	    0x41bb01000000	                             mov r11d, 1	       542	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x40055bd	           0xf1f00	                         nop dword [rax]	       542	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x40055c0	        0x4183c201	                             add r10d, 1	       533	fold.c	FUNCTION_23	FOR_1
0x40055c4	        0x4983c130	                            add r9, 0x30	       533	fold.c	FUNCTION_23	FOR_1
0x40055c8	          0x4139c2	                           cmp r10d, eax	       533	fold.c	FUNCTION_23	FOR_1
0x40055cb	            0x7dc6	                           jge 0x4005593	       533	fold.c	FUNCTION_23	FOR_1
0x40055cd	      0x4180791800	                 cmp byte [r9 + 0x18], 0	       536	fold.c	FUNCTION_23	FOR_1	IF_1
0x40055d2	            0x75ec	                           jne 0x40055c0	       536	fold.c	FUNCTION_23	FOR_1	IF_1
0x40055d4	        0x498b41f0	              mov rax, qword [r9 - 0x10]	       538	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x40055d8	          0x4839c5	                            cmp rbp, rax	       538	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x40055db	            0x7ccf	                            jl 0x40055ac	       538	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x40055dd	            0xebc1	                           jmp 0x40055a0	       538	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x40055df	              0x90	                                     nop	       538	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x40055e0	              0x5b	                                 pop rbx	       522	fold.c	FUNCTION_22
0x40055e1	              0x5d	                                 pop rbp	       522	fold.c	FUNCTION_22
0x40055e2	            0x415c	                                 pop r12	       522	fold.c	FUNCTION_22
0x40055e4	      0xe900000000	                           jmp 0x40055e9	       520	fold.c	FUNCTION_22	IF_1	CALL_3
0x40055e9	     0xf1f80000000	                         nop dword [rax]	       520	fold.c	FUNCTION_22	IF_1	CALL_3
0x40055f0	        0x498b7110	              mov rsi, qword [r9 + 0x10]	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x40055f4	          0x4889ea	                            mov rdx, rbp	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x40055f7	          0x4489e1	                           mov ecx, r12d	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x40055fa	          0x4829c2	                            sub rdx, rax	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x40055fd	          0x4c89cf	                             mov rdi, r9	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x4005600	      0xe87bcdffff	           call sym.checkCloseRec.isra.0	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x4005605	          0x4109c3	                            or r11d, eax	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x4005608	    0x8b8308010000	           mov eax, dword [rbx + 0x108] 	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x400560e	            0xebb0	                           jmp 0x40055c0	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x4005610	    0x8b1500000000	            mov edx, dword [0x04005616] 	       813	fold.c	FUNCTION_28	IF_1
0x4005616	          0x4889d8	                            mov rax, rbx	       813	fold.c	FUNCTION_28	IF_1
0x4005619	            0x85d2	                           test edx, edx	       813	fold.c	FUNCTION_28	IF_1
0x400561b	            0x7e0f	                           jle 0x400562c	       813	fold.c	FUNCTION_28	IF_1
0x400561d	    0xc68321010000	               mov byte [rbx + 0x121], 0	      1190	fold.c	FUNCTION_38	IF_1
0x4005624	          0x4889c3	                            mov rbx, rax	      1190	fold.c	FUNCTION_38	IF_1
0x4005627	      0xe9fcfeffff	                           jmp 0x4005528	      1190	fold.c	FUNCTION_38	IF_1
0x400562c	      0xbaffffff7f	                     mov edx, 0x7fffffff	      1190	fold.c	FUNCTION_38	IF_1
0x4005631	      0xbe01000000	                              mov esi, 1	      1190	fold.c	FUNCTION_38	IF_1
0x4005636	          0x4889df	                            mov rdi, rbx	      1190	fold.c	FUNCTION_38	IF_1
0x4005639	      0xe802f2ffff	             call sym.foldUpdate.part.16	      1190	fold.c	FUNCTION_38	IF_1
0x400563e	    0x488b05000000	            mov rax, qword [0x04005645] 	      1190	fold.c	FUNCTION_38	IF_1
0x4005645	            0xebd6	                           jmp 0x400561d	      1190	fold.c	FUNCTION_38	IF_1
newFoldLevel	WHILE,0:functions,1:ELSE,0:DO,0:FOR,0:SWITCH,0:IF,1:CALL,2	91
0x4005370	              0x53	                                push rbx	       465	fold.c	FUNCTION_20
0x4005371	    0x488b1d000000	            mov rbx, qword [0x04005378] 	       466	fold.c	FUNCTION_20	CALL_1
0x4005378	    0x80bb21010000	               cmp byte [rbx + 0x121], 0	      1187	fold.c	FUNCTION_38	IF_1
0x400537f	     0xf851b010000	                           jne 0x40054a0	      1187	fold.c	FUNCTION_38	IF_1
0x4005385	    0x80bb20010000	               cmp byte [rbx + 0x120], 0	       495	fold.c	FUNCTION_21	IF_1
0x400538c	            0x743b	                            je 0x40053c9	       495	fold.c	FUNCTION_21	IF_1
0x400538e	    0x488b83180100	           mov rax, qword [rbx + 0x118] 	       495	fold.c	FUNCTION_21	IF_1
0x4005395	    0x448b8b080100	           mov r9d, dword [rbx + 0x108] 	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x400539c	            0x31d2	                            xor edx, edx	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x400539e	        0x4883c028	                           add rax, 0x28	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x40053a2	          0x4585c9	                           test r9d, r9d	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x40053a5	            0x7e1b	                           jle 0x40053c2	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x40053a7	    0x660f1f840000	                    nop word [rax + rax]	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x40053b0	          0xc60002	                       mov byte [rax], 2	       502	fold.c	FUNCTION_21	IF_1	FOR_1
0x40053b3	          0x83c201	                              add edx, 1	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x40053b6	        0x4883c030	                           add rax, 0x30	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x40053ba	    0x3b9308010000	           cmp edx, dword [rbx + 0x108] 	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x40053c0	            0x7cee	                            jl 0x40053b0	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x40053c2	    0xc68320010000	               mov byte [rbx + 0x120], 0	       503	fold.c	FUNCTION_21	IF_1
0x40053c9	          0x4889df	                            mov rdi, rbx	       505	fold.c	FUNCTION_21	CALL_2
0x40053cc	      0xe800000000	                          call 0x40053d1	       505	fold.c	FUNCTION_21	CALL_2
0x40053d1	    0x488b05000000	            mov rax, qword [0x040053d8] 	       469	fold.c	FUNCTION_20	IF_1	CALL_2
0x40053d8	    0x488b90f80100	           mov rdx, qword [rax + 0x1f8] 	       357	fold.c	FUNCTION_13
0x40053df	          0x803a64	                    cmp byte [rdx], 0x64	       469	fold.c	FUNCTION_20	IF_1	CALL_2
0x40053e2	            0x740c	                            je 0x40053f0	       469	fold.c	FUNCTION_20	IF_1	CALL_2
0x40053e4	              0x5b	                                 pop rbx	       486	fold.c	FUNCTION_20
0x40053e5	              0xc3	                                     ret	       486	fold.c	FUNCTION_20
0x40053e6	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       486	fold.c	FUNCTION_20
0x40053f0	    0x448b80880200	           mov r8d, dword [rax + 0x288] 	       469	fold.c	FUNCTION_20	IF_1	CALL_2
0x40053f7	          0x4585c0	                           test r8d, r8d	       469	fold.c	FUNCTION_20	IF_1	CALL_2
0x40053fa	            0x74e8	                            je 0x40053e4	       469	fold.c	FUNCTION_20	IF_1	CALL_2
0x40053fc	    0x488b1d000000	            mov rbx, qword [0x04005403] 	       476	fold.c	FUNCTION_20	IF_1
0x4005403	          0x4885db	                           test rbx, rbx	       476	fold.c	FUNCTION_20	IF_1
0x4005406	            0x7518	                           jne 0x4005420	       476	fold.c	FUNCTION_20	IF_1
0x4005408	            0xebda	                           jmp 0x40053e4	       476	fold.c	FUNCTION_20	IF_1
0x400540a	    0x660f1f440000	                    nop word [rax + rax]	       476	fold.c	FUNCTION_20	IF_1
0x4005410	        0x488b5b20	            mov rbx, qword [rbx + 0x20] 	       476	fold.c	FUNCTION_20	IF_1
0x4005414	          0x4885db	                           test rbx, rbx	       476	fold.c	FUNCTION_20	IF_1
0x4005417	            0x74cb	                            je 0x40053e4	       476	fold.c	FUNCTION_20	IF_1
0x4005419	    0x488b05000000	            mov rax, qword [0x04005420] 	       476	fold.c	FUNCTION_20	IF_1
0x4005420	          0x4839d8	                            cmp rax, rbx	       478	fold.c	FUNCTION_20	FUNCTION_1	CALL_1
0x4005423	            0x74eb	                            je 0x4005410	       478	fold.c	FUNCTION_20	FUNCTION_1	CALL_1
0x4005425	    0x488b93f80100	           mov rdx, qword [rbx + 0x1f8] 	       357	fold.c	FUNCTION_13
0x400542c	          0x803a64	                    cmp byte [rdx], 0x64	       478	fold.c	FUNCTION_20	FUNCTION_1	CALL_1
0x400542f	            0x75df	                           jne 0x4005410	       478	fold.c	FUNCTION_20	FUNCTION_1	CALL_1
0x4005431	    0x8bbb88020000	           mov edi, dword [rbx + 0x288] 	       478	fold.c	FUNCTION_20	FUNCTION_1	CALL_1
0x4005437	            0x85ff	                           test edi, edi	       478	fold.c	FUNCTION_20	FUNCTION_1	CALL_1
0x4005439	            0x74d5	                            je 0x4005410	       478	fold.c	FUNCTION_20	FUNCTION_1	CALL_1
0x400543b	    0x80bb21010000	               cmp byte [rbx + 0x121], 0	      1187	fold.c	FUNCTION_38	IF_1
0x4005442	    0x488b80e80100	           mov rax, qword [rax + 0x1e8] 	       480	fold.c	FUNCTION_20	FUNCTION_1
0x4005449	    0x488983e80100	            mov qword [rbx + 0x1e8], rax	       480	fold.c	FUNCTION_20	FUNCTION_1
0x4005450	            0x7566	                           jne 0x40054b8	      1187	fold.c	FUNCTION_38	IF_1
0x4005452	    0x80bb20010000	               cmp byte [rbx + 0x120], 0	       495	fold.c	FUNCTION_21	IF_1
0x4005459	            0x7436	                            je 0x4005491	       495	fold.c	FUNCTION_21	IF_1
0x400545b	    0x488b83180100	           mov rax, qword [rbx + 0x118] 	       495	fold.c	FUNCTION_21	IF_1
0x4005462	    0x8b8b08010000	           mov ecx, dword [rbx + 0x108] 	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x4005468	            0x31d2	                            xor edx, edx	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x400546a	        0x4883c028	                           add rax, 0x28	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x400546e	            0x85c9	                           test ecx, ecx	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x4005470	            0x7e18	                           jle 0x400548a	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x4005472	    0x660f1f440000	                    nop word [rax + rax]	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x4005478	          0xc60002	                       mov byte [rax], 2	       502	fold.c	FUNCTION_21	IF_1	FOR_1
0x400547b	          0x83c201	                              add edx, 1	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x400547e	        0x4883c030	                           add rax, 0x30	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x4005482	    0x3b9308010000	           cmp edx, dword [rbx + 0x108] 	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x4005488	            0x7cee	                            jl 0x4005478	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x400548a	    0xc68320010000	               mov byte [rbx + 0x120], 0	       503	fold.c	FUNCTION_21	IF_1
0x4005491	          0x4889df	                            mov rdi, rbx	       505	fold.c	FUNCTION_21	CALL_2
0x4005494	      0xe800000000	                          call 0x4005499	       505	fold.c	FUNCTION_21	CALL_2
0x4005499	      0xe972ffffff	                           jmp 0x4005410	       505	fold.c	FUNCTION_21	CALL_2
0x400549e	            0x6690	                                     nop	       505	fold.c	FUNCTION_21	CALL_2
0x40054a0	    0x448b15000000	           mov r10d, dword [0x040054a7] 	       813	fold.c	FUNCTION_28	IF_1
0x40054a7	          0x4585d2	                         test r10d, r10d	       813	fold.c	FUNCTION_28	IF_1
0x40054aa	            0x7e1f	                           jle 0x40054cb	       813	fold.c	FUNCTION_28	IF_1
0x40054ac	    0xc68321010000	               mov byte [rbx + 0x121], 0	      1190	fold.c	FUNCTION_38	IF_1
0x40054b3	      0xe9cdfeffff	                           jmp 0x4005385	      1190	fold.c	FUNCTION_38	IF_1
0x40054b8	    0x8b3500000000	            mov esi, dword [0x040054be] 	       813	fold.c	FUNCTION_28	IF_1
0x40054be	            0x85f6	                           test esi, esi	       813	fold.c	FUNCTION_28	IF_1
0x40054c0	            0x7e1d	                           jle 0x40054df	       813	fold.c	FUNCTION_28	IF_1
0x40054c2	    0xc68321010000	               mov byte [rbx + 0x121], 0	      1190	fold.c	FUNCTION_38	IF_1
0x40054c9	            0xeb87	                           jmp 0x4005452	      1190	fold.c	FUNCTION_38	IF_1
0x40054cb	      0xbaffffff7f	                     mov edx, 0x7fffffff	      1190	fold.c	FUNCTION_38	IF_1
0x40054d0	      0xbe01000000	                              mov esi, 1	      1190	fold.c	FUNCTION_38	IF_1
0x40054d5	          0x4889df	                            mov rdi, rbx	      1190	fold.c	FUNCTION_38	IF_1
0x40054d8	      0xe863f3ffff	             call sym.foldUpdate.part.16	      1190	fold.c	FUNCTION_38	IF_1
0x40054dd	            0xebcd	                           jmp 0x40054ac	      1190	fold.c	FUNCTION_38	IF_1
0x40054df	      0xbaffffff7f	                     mov edx, 0x7fffffff	      1190	fold.c	FUNCTION_38	IF_1
0x40054e4	      0xbe01000000	                              mov esi, 1	      1190	fold.c	FUNCTION_38	IF_1
0x40054e9	          0x4889df	                            mov rdi, rbx	      1190	fold.c	FUNCTION_38	IF_1
0x40054ec	      0xe84ff3ffff	             call sym.foldUpdate.part.16	      1190	fold.c	FUNCTION_38	IF_1
0x40054f1	            0xebcf	                           jmp 0x40054c2	      1190	fold.c	FUNCTION_38	IF_1
foldMerge	WHILE,0:functions,0:ELSE,0:DO,0:FOR,1:SWITCH,0:IF,2:CALL,5	155
0x40034e0	            0x4154	                                push r12	      3165	fold.c	FUNCTION_66
0x40034e2	              0x55	                                push rbp	      3165	fold.c	FUNCTION_66
0x40034e3	          0x4989f4	                            mov r12, rsi	      3165	fold.c	FUNCTION_66
0x40034e6	              0x53	                                push rbx	      3165	fold.c	FUNCTION_66
0x40034e7	        0x488b4708	                mov rax, qword [rdi + 8]	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x40034eb	          0x4889fb	                            mov rbx, rdi	      3165	fold.c	FUNCTION_66
0x40034ee	          0x4889d5	                            mov rbp, rdx	      3165	fold.c	FUNCTION_66
0x40034f1	        0x4c8b4f20	              mov r9, qword [rdi + 0x20]	      3165	fold.c	FUNCTION_66
0x40034f5	        0x4c8d40ff	                       lea r8, [rax - 1]	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x40034f9	          0x8b4710	            mov eax, dword [rdi + 0x10] 	      1132	fold.c	FUNCTION_36
0x40034fc	          0x83e801	                              sub eax, 1	      1132	fold.c	FUNCTION_36
0x40034ff	          0x4863f0	                         movsxd rsi, eax	      1132	fold.c	FUNCTION_36
0x4003502	          0x4885f6	                           test rsi, rsi	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003505	            0x7846	                            js 0x400354d	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003507	            0x31d2	                            xor edx, edx	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003509	            0xeb10	                           jmp 0x400351b	      1133	fold.c	FUNCTION_36	WHILE_1
0x400350b	       0xf1f440000	                   nop dword [rax + rax]	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003510	          0x83e801	                              sub eax, 1	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4003513	          0x4863f0	                         movsxd rsi, eax	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4003516	          0x4839f2	                            cmp rdx, rsi	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003519	            0x7f32	                            jg 0x400354d	      1133	fold.c	FUNCTION_36	WHILE_1
0x400351b	        0x488d0416	                    lea rax, [rsi + rdx]	      1135	fold.c	FUNCTION_36	WHILE_1
0x400351f	          0x48d1f8	                              sar rax, 1	      1135	fold.c	FUNCTION_36	WHILE_1
0x4003522	        0x488d3c40	                  lea rdi, [rax + rax*2]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4003526	        0x48c1e704	                              shl rdi, 4	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x400352a	          0x4c01cf	                             add rdi, r9	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x400352d	          0x488b0f	                    mov rcx, qword [rdi]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4003530	          0x4939c8	                             cmp r8, rcx	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4003533	            0x7cdb	                            jl 0x4003510	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4003535	        0x48034f08	                add rcx, qword [rdi + 8]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4003539	          0x4939c8	                             cmp r8, rcx	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x400353c	     0xf8c86000000	                            jl 0x40035c8	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4003542	          0x8d5001	                      lea edx, [rax + 1]	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4003545	          0x4863d2	                         movsxd rdx, edx	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4003548	          0x4839f2	                            cmp rdx, rsi	      1133	fold.c	FUNCTION_36	WHILE_1
0x400354b	            0x7ece	                           jle 0x400351b	      1133	fold.c	FUNCTION_36	WHILE_1
0x400354d	          0x8b7510	            mov esi, dword [rbp + 0x10] 	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003550	            0x85f6	                           test esi, esi	      3178	fold.c	FUNCTION_66	IF_2	CALL_4
0x4003552	            0x7e12	                           jle 0x4003566	      3178	fold.c	FUNCTION_66	IF_2	CALL_4
0x4003554	        0x488d7b10	                   lea rdi, [rbx + 0x10]	      3169	fold.c	FUNCTION_66
0x4003558	      0xe800000000	                          call 0x400355d	      3178	fold.c	FUNCTION_66	IF_2	CALL_4
0x400355d	          0x83f801	                              cmp eax, 1	      3178	fold.c	FUNCTION_66	IF_2	CALL_4
0x4003560	     0xf84ca000000	                            je 0x4003630	      3178	fold.c	FUNCTION_66	IF_2	CALL_4
0x4003566	        0x488b4308	                mov rax, qword [rbx + 8]	      3178	fold.c	FUNCTION_66	IF_2	CALL_4
0x400356a	        0x48034508	                add rax, qword [rbp + 8]	      3190	fold.c	FUNCTION_66
0x400356e	      0x498b542410	            mov rdx, qword [r12 + 0x10] 	      3191	fold.c	FUNCTION_66	CALL_5
0x4003573	          0x4829d5	                            sub rbp, rdx	      3191	fold.c	FUNCTION_66	CALL_5
0x4003576	        0x48894308	                mov qword [rbx + 8], rax	      3190	fold.c	FUNCTION_66
0x400357a	        0x48c1fd04	                              sar rbp, 4	      3191	fold.c	FUNCTION_66	CALL_5
0x400357e	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	      3191	fold.c	FUNCTION_66	CALL_5
0x4003588	        0x480fafe8	                           imul rbp, rax	      3191	fold.c	FUNCTION_66	CALL_5
0x400358c	          0x4863c5	                         movsxd rax, ebp	      1405	fold.c	FUNCTION_43
0x400358f	        0x488d1c40	                  lea rbx, [rax + rax*2]	      1405	fold.c	FUNCTION_43
0x4003593	        0x48c1e304	                              shl rbx, 4	      1405	fold.c	FUNCTION_43
0x4003597	          0x4801d3	                            add rbx, rdx	      1405	fold.c	FUNCTION_43
0x400359a	        0x488d7b10	                   lea rdi, [rbx + 0x10]	      1409	fold.c	FUNCTION_43	IF_1	CALL_1
0x400359e	      0xe800000000	                          call 0x40035a3	      1409	fold.c	FUNCTION_43	IF_1	CALL_1
0x40035a3	        0x418b0424	                    mov eax, dword [r12]	      1410	fold.c	FUNCTION_43	IF_1
0x40035a7	          0x83e801	                              sub eax, 1	      1410	fold.c	FUNCTION_43	IF_1
0x40035aa	            0x39c5	                            cmp ebp, eax	      1411	fold.c	FUNCTION_43	IF_1	IF_2
0x40035ac	        0x41890424	                    mov dword [r12], eax	      1410	fold.c	FUNCTION_43	IF_1
0x40035b0	     0xf8c22010000	                            jl 0x40036d8	      1411	fold.c	FUNCTION_43	IF_1	IF_2
0x40035b6	              0x5b	                                 pop rbx	      3193	fold.c	FUNCTION_66
0x40035b7	    0xc70500000000	               mov dword [0x040035c1], 1	      3192	fold.c	FUNCTION_66
0x40035c1	              0x5d	                                 pop rbp	      3193	fold.c	FUNCTION_66
0x40035c2	            0x415c	                                 pop r12	      3193	fold.c	FUNCTION_66
0x40035c4	              0xc3	                                     ret	      3193	fold.c	FUNCTION_66
0x40035c5	           0xf1f00	                         nop dword [rax]	      3193	fold.c	FUNCTION_66
0x40035c8	          0x8b7510	            mov esi, dword [rbp + 0x10] 	      3193	fold.c	FUNCTION_66
0x40035cb	            0x31d2	                            xor edx, edx	      1133	fold.c	FUNCTION_36	WHILE_1
0x40035cd	        0x4c8b5520	            mov r10, qword [rbp + 0x20] 	      1133	fold.c	FUNCTION_36	WHILE_1
0x40035d1	          0x8d46ff	                      lea eax, [rsi - 1]	      1132	fold.c	FUNCTION_36
0x40035d4	          0x4c63c0	                          movsxd r8, eax	      1132	fold.c	FUNCTION_36
0x40035d7	          0x4d85c0	                             test r8, r8	      1133	fold.c	FUNCTION_36	WHILE_1
0x40035da	            0x791b	                           jns 0x40035f7	      1133	fold.c	FUNCTION_36	WHILE_1
0x40035dc	      0xe96fffffff	                           jmp 0x4003550	      1133	fold.c	FUNCTION_36	WHILE_1
0x40035e1	     0xf1f80000000	                         nop dword [rax]	      1133	fold.c	FUNCTION_36	WHILE_1
0x40035e8	          0x83e801	                              sub eax, 1	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40035eb	          0x4c63c0	                          movsxd r8, eax	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40035ee	          0x4c39c2	                             cmp rdx, r8	      1133	fold.c	FUNCTION_36	WHILE_1
0x40035f1	     0xf8f59ffffff	                            jg 0x4003550	      1133	fold.c	FUNCTION_36	WHILE_1
0x40035f7	        0x4a8d0402	                     lea rax, [rdx + r8]	      1135	fold.c	FUNCTION_36	WHILE_1
0x40035fb	          0x48d1f8	                              sar rax, 1	      1135	fold.c	FUNCTION_36	WHILE_1
0x40035fe	        0x488d0c40	                  lea rcx, [rax + rax*2]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4003602	        0x48c1e104	                              shl rcx, 4	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4003606	          0x4c01d1	                            add rcx, r10	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4003609	          0x4c8b09	                     mov r9, qword [rcx]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x400360c	          0x4d85c9	                             test r9, r9	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x400360f	            0x7fd7	                            jg 0x40035e8	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4003611	        0x4c034908	                 add r9, qword [rcx + 8]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4003615	          0x4d85c9	                             test r9, r9	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4003618	     0xf8fe1000000	                            jg 0x40036ff	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x400361e	          0x8d5001	                      lea edx, [rax + 1]	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4003621	          0x4863d2	                         movsxd rdx, edx	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4003624	            0xebc8	                           jmp 0x40035ee	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4003626	    0x662e0f1f8400	                 nop word cs:[rax + rax]	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4003630	          0x8b4510	            mov eax, dword [rbp + 0x10] 	      3180	fold.c	FUNCTION_66	IF_2	FOR_1
0x4003633	            0x85c0	                           test eax, eax	      3180	fold.c	FUNCTION_66	IF_2	FOR_1
0x4003635	     0xf8ed5000000	                           jle 0x4003710	      3180	fold.c	FUNCTION_66	IF_2	FOR_1
0x400363b	        0x488b7b20	            mov rdi, qword [rbx + 0x20] 	      3180	fold.c	FUNCTION_66	IF_2	FOR_1
0x400363f	          0x8b5310	            mov edx, dword [rbx + 0x10] 	      3180	fold.c	FUNCTION_66	IF_2	FOR_1
0x4003642	            0x31c9	                            xor ecx, ecx	      3180	fold.c	FUNCTION_66	IF_2	FOR_1
0x4003644	          0x4531c0	                            xor r8d, r8d	      3180	fold.c	FUNCTION_66	IF_2	FOR_1
0x4003647	    0x660f1f840000	                    nop word [rax + rax]	      3180	fold.c	FUNCTION_66	IF_2	FOR_1
0x4003650	          0x4863d2	                         movsxd rdx, edx	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4003653	        0x4183c001	                              add r8d, 1	      3180	fold.c	FUNCTION_66	IF_2	FOR_1
0x4003657	        0x488d0452	                  lea rax, [rdx + rdx*2]	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x400365b	        0x488b5520	            mov rdx, qword [rbp + 0x20] 	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x400365f	        0x48c1e004	                              shl rax, 4	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4003663	        0x488b340a	              mov rsi, qword [rdx + rcx]	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4003667	          0x4801f8	                            add rax, rdi	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x400366a	          0x488930	                    mov qword [rax], rsi	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x400366d	      0x488b740a08	         mov rsi, qword [rdx + rcx + 8] 	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4003672	        0x48897008	                mov qword [rax + 8], rsi	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4003676	      0x488b740a10	      mov rsi, qword [rdx + rcx + 0x10] 	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x400367b	        0x48897010	             mov qword [rax + 0x10], rsi	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x400367f	      0x488b740a18	      mov rsi, qword [rdx + rcx + 0x18] 	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4003684	        0x48897018	             mov qword [rax + 0x18], rsi	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4003688	      0x488b740a20	      mov rsi, qword [rdx + rcx + 0x20] 	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x400368d	        0x48897020	             mov qword [rax + 0x20], rsi	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4003691	      0x488b540a28	      mov rdx, qword [rdx + rcx + 0x28] 	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4003696	        0x4883c130	                           add rcx, 0x30	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x400369a	        0x48895028	             mov qword [rax + 0x28], rdx	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x400369e	        0x48634310	         movsxd rax, dword [rbx + 0x10] 	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x40036a2	        0x488b7b20	            mov rdi, qword [rbx + 0x20] 	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x40036a6	        0x488d3440	                  lea rsi, [rax + rax*2]	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x40036aa	          0x4889c2	                            mov rdx, rax	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x40036ad	        0x488b4308	                mov rax, qword [rbx + 8]	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x40036b1	          0x83c201	                              add edx, 1	      3185	fold.c	FUNCTION_66	IF_2	FOR_1
0x40036b4	        0x48c1e604	                              shl rsi, 4	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x40036b8	        0x48010437	              add qword [rdi + rsi], rax	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x40036bc	          0x895310	             mov dword [rbx + 0x10], edx	      3185	fold.c	FUNCTION_66	IF_2	FOR_1
0x40036bf	        0x44394510	            cmp dword [rbp + 0x10], r8d 	      3180	fold.c	FUNCTION_66	IF_2	FOR_1
0x40036c3	            0x7f8b	                            jg 0x4003650	      3180	fold.c	FUNCTION_66	IF_2	FOR_1
0x40036c5	    0xc74510000000	               mov dword [rbp + 0x10], 0	      3187	fold.c	FUNCTION_66	IF_2
0x40036cc	      0xe999feffff	                           jmp 0x400356a	      3187	fold.c	FUNCTION_66	IF_2
0x40036d1	     0xf1f80000000	                         nop dword [rax]	      3187	fold.c	FUNCTION_66	IF_2
0x40036d8	            0x29e8	                            sub eax, ebp	        59	string3.h	FUNCTION_78	CALL_3
0x40036da	        0x488d7330	                   lea rsi, [rbx + 0x30]	        59	string3.h	FUNCTION_78	CALL_3
0x40036de	          0x4889df	                            mov rdi, rbx	        59	string3.h	FUNCTION_78	CALL_3
0x40036e1	            0x4898	                                    cdqe	        59	string3.h	FUNCTION_78	CALL_3
0x40036e3	        0x488d1440	                  lea rdx, [rax + rax*2]	        59	string3.h	FUNCTION_78	CALL_3
0x40036e7	        0x48c1e204	                              shl rdx, 4	        59	string3.h	FUNCTION_78	CALL_3
0x40036eb	      0xe800000000	                          call 0x40036f0	        59	string3.h	FUNCTION_78	CALL_3
0x40036f0	              0x5b	                                 pop rbx	      3193	fold.c	FUNCTION_66
0x40036f1	    0xc70500000000	               mov dword [0x040036fb], 1	      3192	fold.c	FUNCTION_66
0x40036fb	              0x5d	                                 pop rbp	      3193	fold.c	FUNCTION_66
0x40036fc	            0x415c	                                 pop r12	      3193	fold.c	FUNCTION_66
0x40036fe	              0xc3	                                     ret	      3193	fold.c	FUNCTION_66
0x40036ff	        0x488d7510	                   lea rsi, [rbp + 0x10]	      3170	fold.c	FUNCTION_66
0x4003703	          0x4889ca	                            mov rdx, rcx	      3175	fold.c	FUNCTION_66	CALL_3
0x4003706	      0xe8d5fdffff	                      call sym.foldMerge	      3175	fold.c	FUNCTION_66	CALL_3
0x400370b	      0xe93dfeffff	                           jmp 0x400354d	      3175	fold.c	FUNCTION_66	CALL_3
0x4003710	        0x488b4308	                mov rax, qword [rbx + 8]	      3175	fold.c	FUNCTION_66	CALL_3
0x4003714	            0xebaf	                           jmp 0x40036c5	      3175	fold.c	FUNCTION_66	CALL_3
foldlevelDiff	WHILE,0:functions,0:ELSE,1:DO,0:FOR,0:SWITCH,0:IF,1:CALL,1	12
0x4000520	              0x53	                                push rbx	      3239	fold.c	FUNCTION_68
0x4000521	        0x488b7710	            mov rsi, qword [rdi + 0x10] 	      3240	fold.c	FUNCTION_68	IF_1	CALL_1
0x4000525	          0x4889fb	                            mov rbx, rdi	      3239	fold.c	FUNCTION_68
0x4000528	        0x48037708	                add rsi, qword [rdi + 8]	      3240	fold.c	FUNCTION_68	IF_1	CALL_1
0x400052c	          0x488b3f	                    mov rdi, qword [rdi]	      3240	fold.c	FUNCTION_68	IF_1	CALL_1
0x400052f	      0xe800000000	                          call 0x4000534	      3240	fold.c	FUNCTION_68	IF_1	CALL_1
0x4000534	            0x85c0	                           test eax, eax	      3240	fold.c	FUNCTION_68	IF_1	CALL_1
0x4000536	           0xf95c0	                                setne al	      3240	fold.c	FUNCTION_68	IF_1	CALL_1
0x4000539	           0xfb6c0	                           movzx eax, al	      3240	fold.c	FUNCTION_68	IF_1	CALL_1
0x400053c	          0x894320	             mov dword [rbx + 0x20], eax	      3240	fold.c	FUNCTION_68	IF_1	CALL_1
0x400053f	              0x5b	                                 pop rbx	      3244	fold.c	FUNCTION_68	ELSE_1
0x4000540	              0xc3	                                     ret	      3244	fold.c	FUNCTION_68	ELSE_1
deleteFold	WHILE,1:functions,0:ELSE,3:DO,0:FOR,1:SWITCH,0:IF,10:CALL,13	410
0x40057c0	            0x4157	                                push r15	       705	fold.c	FUNCTION_26
0x40057c2	            0x4156	                                push r14	       705	fold.c	FUNCTION_26
0x40057c4	            0x4155	                                push r13	       705	fold.c	FUNCTION_26
0x40057c6	            0x4154	                                push r12	       705	fold.c	FUNCTION_26
0x40057c8	              0x55	                                push rbp	       705	fold.c	FUNCTION_26
0x40057c9	              0x53	                                push rbx	       705	fold.c	FUNCTION_26
0x40057ca	        0x4883ec68	                           sub rsp, 0x68	       705	fold.c	FUNCTION_26
0x40057ce	    0x488b1d000000	            mov rbx, qword [0x040057d5] 	       720	fold.c	FUNCTION_26	CALL_1
0x40057d5	      0x48897c2410	             mov qword [rsp + 0x10], rdi	       705	fold.c	FUNCTION_26
0x40057da	      0x4889742450	             mov qword [rsp + 0x50], rsi	       705	fold.c	FUNCTION_26
0x40057df	        0x89542458	             mov dword [rsp + 0x58], edx	       705	fold.c	FUNCTION_26
0x40057e3	        0x894c245c	             mov dword [rsp + 0x5c], ecx	       705	fold.c	FUNCTION_26
0x40057e7	    0x80bb21010000	               cmp byte [rbx + 0x121], 0	      1187	fold.c	FUNCTION_38	IF_1
0x40057ee	     0xf858a040000	                           jne 0x4005c7e	      1187	fold.c	FUNCTION_38	IF_1
0x40057f4	      0x488b4c2450	            mov rcx, qword [rsp + 0x50] 	       722	fold.c	FUNCTION_26	WHILE_1
0x40057f9	      0x48394c2410	            cmp qword [rsp + 0x10], rcx 	       722	fold.c	FUNCTION_26	WHILE_1
0x40057fe	     0xf8fa1040000	                            jg 0x4005ca5	       722	fold.c	FUNCTION_26	WHILE_1
0x4005804	    0xc74424400000	               mov dword [rsp + 0x40], 0	       722	fold.c	FUNCTION_26	WHILE_1
0x400580c	    0x48c744244800	               mov qword [rsp + 0x48], 0	       722	fold.c	FUNCTION_26	WHILE_1
0x4005815	            0x31c9	                            xor ecx, ecx	       722	fold.c	FUNCTION_26	WHILE_1
0x4005817	    0x48c7442438ff	     mov qword [rsp + 0x38], 0x7fffffff 	       722	fold.c	FUNCTION_26	WHILE_1
0x4005820	    0xc74424440000	               mov dword [rsp + 0x44], 0	       722	fold.c	FUNCTION_26	WHILE_1
0x4005828	          0x4531c0	                            xor r8d, r8d	       722	fold.c	FUNCTION_26	WHILE_1
0x400582b	    0xc74424180000	               mov dword [rsp + 0x18], 0	       722	fold.c	FUNCTION_26	WHILE_1
0x4005833	    0x4c8b0d000000	              mov r9, qword [0x0400583a]	       725	fold.c	FUNCTION_26	WHILE_1
0x400583a	      0x4863442418	         movsxd rax, dword [rsp + 0x18] 	      1648	fold.c	FUNCTION_49
0x400583f	          0x4531ff	                          xor r15d, r15d	       725	fold.c	FUNCTION_26	WHILE_1
0x4005842	    0xc74424080000	                  mov dword [rsp + 8], 0	       728	fold.c	FUNCTION_26	WHILE_1
0x400584a	          0x4531f6	                          xor r14d, r14d	       727	fold.c	FUNCTION_26	WHILE_1
0x400584d	          0x4531db	                          xor r11d, r11d	       726	fold.c	FUNCTION_26	WHILE_1
0x4005850	    0x418b91080100	            mov edx, dword [r9 + 0x108] 	       726	fold.c	FUNCTION_26	WHILE_1
0x4005857	    0x498da9080100	                   lea rbp, [r9 + 0x108]	       725	fold.c	FUNCTION_26	WHILE_1
0x400585e	      0x4889442428	             mov qword [rsp + 0x28], rax	      1648	fold.c	FUNCTION_49
0x4005863	       0xf1f440000	                   nop dword [rax + rax]	      1648	fold.c	FUNCTION_49
0x4005868	        0x8b442418	            mov eax, dword [rsp + 0x18] 	      1648	fold.c	FUNCTION_49
0x400586c	      0x488b7c2410	            mov rdi, qword [rsp + 0x10] 	       731	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_1	CALL_2
0x4005871	          0x83ea01	                              sub edx, 1	      1132	fold.c	FUNCTION_36
0x4005874	          0x4863d2	                         movsxd rdx, edx	      1132	fold.c	FUNCTION_36
0x4005877	        0x4c8b4d10	              mov r9, qword [rbp + 0x10]	      1132	fold.c	FUNCTION_36
0x400587b	          0x4401f8	                           add eax, r15d	      1132	fold.c	FUNCTION_36
0x400587e	          0x4c29f7	                            sub rdi, r14	       731	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_1	CALL_2
0x4005881	          0x4885d2	                           test rdx, rdx	      1133	fold.c	FUNCTION_36	WHILE_1
0x4005884	        0x89442424	             mov dword [rsp + 0x24], eax	      1133	fold.c	FUNCTION_36	WHILE_1
0x4005888	            0x7843	                            js 0x40058cd	      1133	fold.c	FUNCTION_36	WHILE_1
0x400588a	          0x4531d2	                          xor r10d, r10d	      1133	fold.c	FUNCTION_36	WHILE_1
0x400588d	            0xeb0c	                           jmp 0x400589b	      1133	fold.c	FUNCTION_36	WHILE_1
0x400588f	              0x90	                                     nop	      1133	fold.c	FUNCTION_36	WHILE_1
0x4005890	          0x83e801	                              sub eax, 1	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4005893	          0x4863d0	                         movsxd rdx, eax	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4005896	          0x4939d2	                            cmp r10, rdx	      1133	fold.c	FUNCTION_36	WHILE_1
0x4005899	            0x7f32	                            jg 0x40058cd	      1133	fold.c	FUNCTION_36	WHILE_1
0x400589b	        0x4a8d0412	                    lea rax, [rdx + r10]	      1135	fold.c	FUNCTION_36	WHILE_1
0x400589f	          0x48d1f8	                              sar rax, 1	      1135	fold.c	FUNCTION_36	WHILE_1
0x40058a2	        0x488d1c40	                  lea rbx, [rax + rax*2]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40058a6	        0x48c1e304	                              shl rbx, 4	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40058aa	          0x4c01cb	                             add rbx, r9	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40058ad	          0x488b33	                    mov rsi, qword [rbx]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40058b0	          0x4839f7	                            cmp rdi, rsi	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40058b3	            0x7cdb	                            jl 0x4005890	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40058b5	        0x4c8b5308	                mov r10, qword [rbx + 8]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x40058b9	        0x4e8d2416	                    lea r12, [rsi + r10]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x40058bd	          0x4c39e7	                            cmp rdi, r12	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x40058c0	            0x7c6e	                            jl 0x4005930	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x40058c2	          0x83c001	                              add eax, 1	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x40058c5	          0x4c63d0	                         movsxd r10, eax	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x40058c8	          0x4939d2	                            cmp r10, rdx	      1133	fold.c	FUNCTION_36	WHILE_1
0x40058cb	            0x7ece	                           jle 0x400589b	      1133	fold.c	FUNCTION_36	WHILE_1
0x40058cd	          0x4d85db	                           test r11, r11	       748	fold.c	FUNCTION_26	WHILE_1	IF_3
0x40058d0	     0xf8540050000	                           jne 0x4005e16	       748	fold.c	FUNCTION_26	WHILE_1	IF_3
0x40058d6	    0x488344241001	               add qword [rsp + 0x10], 1	       750	fold.c	FUNCTION_26	WHILE_1	IF_3
0x40058dc	      0x488b7c2410	            mov rdi, qword [rsp + 0x10] 	       722	fold.c	FUNCTION_26	WHILE_1
0x40058e1	      0x48397c2450	            cmp qword [rsp + 0x50], rdi 	       722	fold.c	FUNCTION_26	WHILE_1
0x40058e6	     0xf8d99010000	                           jge 0x4005a85	       722	fold.c	FUNCTION_26	WHILE_1
0x40058ec	        0x8b742444	            mov esi, dword [rsp + 0x44] 	       775	fold.c	FUNCTION_26	IF_8
0x40058f0	            0x85f6	                           test esi, esi	       775	fold.c	FUNCTION_26	IF_8
0x40058f2	     0xf84e1030000	                            je 0x4005cd9	       775	fold.c	FUNCTION_26	IF_8
0x40058f8	      0xe800000000	                          call 0x40058fd	       784	fold.c	FUNCTION_26	CALL_12
0x40058fd	      0x488b442448	            mov rax, qword [rsp + 0x48] 	       786	fold.c	FUNCTION_26	IF_10
0x4005902	          0x4885c0	                           test rax, rax	       786	fold.c	FUNCTION_26	IF_10
0x4005905	     0xf84bf030000	                            je 0x4005cca	       786	fold.c	FUNCTION_26	IF_10
0x400590b	      0x488b7c2438	            mov rdi, qword [rsp + 0x38] 	       787	fold.c	FUNCTION_26	CALL_13
0x4005910	        0x4883c468	                           add rsp, 0x68	       788	fold.c	FUNCTION_26
0x4005914	            0x31c9	                            xor ecx, ecx	       787	fold.c	FUNCTION_26	CALL_13
0x4005916	              0x5b	                                 pop rbx	       788	fold.c	FUNCTION_26
0x4005917	              0x5d	                                 pop rbp	       788	fold.c	FUNCTION_26
0x4005918	            0x415c	                                 pop r12	       788	fold.c	FUNCTION_26
0x400591a	            0x415d	                                 pop r13	       788	fold.c	FUNCTION_26
0x400591c	            0x415e	                                 pop r14	       788	fold.c	FUNCTION_26
0x400591e	            0x415f	                                 pop r15	       788	fold.c	FUNCTION_26
0x4005920	          0x4889c2	                            mov rdx, rax	       787	fold.c	FUNCTION_26	CALL_13
0x4005923	            0x31f6	                            xor esi, esi	       787	fold.c	FUNCTION_26	CALL_13
0x4005925	      0xe900000000	                           jmp 0x400592a	       787	fold.c	FUNCTION_26	CALL_13
0x400592a	    0x660f1f440000	                    nop word [rax + rax]	       787	fold.c	FUNCTION_26	CALL_13
0x4005930	        0x8b542408	                mov edx, dword [rsp + 8]	      1652	fold.c	FUNCTION_49	IF_1
0x4005934	    0x4c8b0d000000	              mov r9, qword [0x0400593b]	       739	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2	CALL_3
0x400593b	            0x85d2	                           test edx, edx	      1652	fold.c	FUNCTION_49	IF_1
0x400593d	          0x4c89cf	                             mov rdi, r9	       739	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2	CALL_3
0x4005940	     0xf8552010000	                           jne 0x4005a98	      1652	fold.c	FUNCTION_49	IF_1
0x4005946	         0xfb64328	           movzx eax, byte [rbx + 0x28] 	      1652	fold.c	FUNCTION_49	IF_1
0x400594a	            0x31d2	                            xor edx, edx	      1648	fold.c	FUNCTION_49
0x400594c	            0x3c01	                               cmp al, 1	      1648	fold.c	FUNCTION_49
0x400594e	           0xf94c2	                                 sete dl	      1648	fold.c	FUNCTION_49
0x4005951	            0x3c02	                               cmp al, 2	      1652	fold.c	FUNCTION_49	IF_1
0x4005953	     0xf843f010000	                            je 0x4005a98	      1652	fold.c	FUNCTION_49	IF_1
0x4005959	         0xfb64329	           movzx eax, byte [rbx + 0x29] 	      1662	fold.c	FUNCTION_49	IF_4
0x400595d	            0x3c02	                               cmp al, 2	      1662	fold.c	FUNCTION_49	IF_4
0x400595f	     0xf845b010000	                            je 0x4005ac0	      1662	fold.c	FUNCTION_49	IF_4
0x4005965	            0x85d2	                           test edx, edx	      1664	fold.c	FUNCTION_49	IF_5
0x4005967	     0xf8403020000	                            je 0x4005b70	      1664	fold.c	FUNCTION_49	IF_5
0x400596d	      0x448b642440	           mov r12d, dword [rsp + 0x40] 	      1666	fold.c	FUNCTION_49	IF_5	IF_6
0x4005972	          0x4585e4	                         test r12d, r12d	      1666	fold.c	FUNCTION_49	IF_5	IF_6
0x4005975	     0xf8555010000	                           jne 0x4005ad0	      1666	fold.c	FUNCTION_49	IF_5	IF_6
0x400597b	            0x3c01	                               cmp al, 1	      1669	fold.c	FUNCTION_49	IF_5	IF_7
0x400597d	     0xf84ed010000	                            je 0x4005b70	      1669	fold.c	FUNCTION_49	IF_5	IF_7
0x4005983	          0x488b13	                    mov rdx, qword [rbx]	       754	fold.c	FUNCTION_26	WHILE_1	ELSE_1
0x4005986	          0x4889d0	                            mov rax, rdx	       754	fold.c	FUNCTION_26	WHILE_1	ELSE_1
0x4005989	        0x48034308	                add rax, qword [rbx + 8]	       754	fold.c	FUNCTION_26	WHILE_1	ELSE_1
0x400598d	          0x4c01f0	                            add rax, r14	       754	fold.c	FUNCTION_26	WHILE_1	ELSE_1
0x4005990	      0x4889442410	             mov qword [rsp + 0x10], rax	       754	fold.c	FUNCTION_26	WHILE_1	ELSE_1
0x4005995	    0x498b81f80100	            mov rax, qword [r9 + 0x1f8] 	       307	fold.c	FUNCTION_8
0x400599c	        0x80780375	                cmp byte [rax + 3], 0x75	       756	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_4
0x40059a0	     0xf8456020000	                            je 0x4005bfc	       756	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_4
0x40059a6	      0x488b442438	            mov rax, qword [rsp + 0x38] 	       756	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_4
0x40059ab	          0x4c01f2	                            add rdx, r14	       761	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_5
0x40059ae	      0x488b4c2410	            mov rcx, qword [rsp + 0x10] 	       761	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_5
0x40059b3	      0x448b542444	           mov r10d, dword [rsp + 0x44] 	       765	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_7
0x40059b8	          0x4889d7	                            mov rdi, rdx	       765	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_7
0x40059bb	          0x4839d0	                            cmp rax, rdx	       765	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_7
0x40059be	        0x480f4fc2	                          cmovg rax, rdx	       765	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_7
0x40059c2	      0x4889442438	             mov qword [rsp + 0x38], rax	       765	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_7
0x40059c7	      0x488b442448	            mov rax, qword [rsp + 0x48] 	       765	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_7
0x40059cc	          0x4839c8	                            cmp rax, rcx	       765	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_7
0x40059cf	        0x480f4cc1	                          cmovl rax, rcx	       765	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_7
0x40059d3	          0x4585d2	                         test r10d, r10d	       765	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_7
0x40059d6	      0x4889442448	             mov qword [rsp + 0x48], rax	       765	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_7
0x40059db	     0xf84cf010000	                            je 0x4005bb0	       765	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_7
0x40059e1	      0x448b4c2458	            mov r9d, dword [rsp + 0x58] 	      1804	fold.c	FUNCTION_54	IF_1
0x40059e6	          0x4585c9	                           test r9d, r9d	      1804	fold.c	FUNCTION_54	IF_1
0x40059e9	            0x743e	                            je 0x4005a29	      1804	fold.c	FUNCTION_54	IF_1
0x40059eb	        0x448b4310	            mov r8d, dword [rbx + 0x10] 	      1805	fold.c	FUNCTION_54	IF_1	FOR_1
0x40059ef	          0x4585c0	                           test r8d, r8d	      1805	fold.c	FUNCTION_54	IF_1	FOR_1
0x40059f2	            0x7e35	                           jle 0x4005a29	      1805	fold.c	FUNCTION_54	IF_1	FOR_1
0x40059f4	          0x4531e4	                          xor r12d, r12d	      1805	fold.c	FUNCTION_54	IF_1	FOR_1
0x40059f7	            0x31ed	                            xor ebp, ebp	      1805	fold.c	FUNCTION_54	IF_1	FOR_1
0x40059f9	            0xeb0b	                           jmp 0x4005a06	      1805	fold.c	FUNCTION_54	IF_1	FOR_1
0x40059fb	       0xf1f440000	                   nop dword [rax + rax]	      1805	fold.c	FUNCTION_54	IF_1	FOR_1
0x4005a00	          0x4c89f2	                            mov rdx, r14	      1805	fold.c	FUNCTION_54	IF_1	FOR_1
0x4005a03	          0x480313	                    add rdx, qword [rbx]	      1805	fold.c	FUNCTION_54	IF_1	FOR_1
0x4005a06	          0x4c89e7	                            mov rdi, r12	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x4005a09	        0x48037b20	             add rdi, qword [rbx + 0x20]	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x4005a0d	      0xbe01000000	                              mov esi, 1	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x4005a12	          0x83c501	                              add ebp, 1	      1805	fold.c	FUNCTION_54	IF_1	FOR_1
0x4005a15	        0x4983c430	                           add r12, 0x30	      1805	fold.c	FUNCTION_54	IF_1	FOR_1
0x4005a19	      0xe852c3ffff	              call sym.deleteFoldMarkers	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x4005a1e	          0x3b6b10	            cmp ebp, dword [rbx + 0x10] 	      1805	fold.c	FUNCTION_54	IF_1	FOR_1
0x4005a21	            0x7cdd	                            jl 0x4005a00	      1805	fold.c	FUNCTION_54	IF_1	FOR_1
0x4005a23	          0x4c89f7	                            mov rdi, r14	      1805	fold.c	FUNCTION_54	IF_1	FOR_1
0x4005a26	          0x48033b	                    add rdi, qword [rbx]	      1805	fold.c	FUNCTION_54	IF_1	FOR_1
0x4005a29	    0x488b05000000	            mov rax, qword [0x04005a30] 	      1808	fold.c	FUNCTION_54	CALL_2
0x4005a30	    0x8b1500000000	            mov edx, dword [0x04005a36] 	      1808	fold.c	FUNCTION_54	CALL_2
0x4005a36	    0x488bb0280200	           mov rsi, qword [rax + 0x228] 	      1808	fold.c	FUNCTION_54	CALL_2
0x4005a3d	      0xe89ea8ffff	                  call sym.foldDelMarker	      1808	fold.c	FUNCTION_54	CALL_2
0x4005a42	          0x4c89f7	                            mov rdi, r14	      1809	fold.c	FUNCTION_54	CALL_3
0x4005a45	          0x48033b	                    add rdi, qword [rbx]	      1809	fold.c	FUNCTION_54	CALL_3
0x4005a48	    0x8b1500000000	            mov edx, dword [0x04005a4e] 	      1809	fold.c	FUNCTION_54	CALL_3
0x4005a4e	        0x48037b08	                add rdi, qword [rbx + 8]	      1809	fold.c	FUNCTION_54	CALL_3
0x4005a52	    0x488b35000000	            mov rsi, qword [0x04005a59] 	      1809	fold.c	FUNCTION_54	CALL_3
0x4005a59	        0x4883ef01	                              sub rdi, 1	      1809	fold.c	FUNCTION_54	CALL_3
0x4005a5d	      0xe87ea8ffff	                  call sym.foldDelMarker	      1809	fold.c	FUNCTION_54	CALL_3
0x4005a62	      0xe800000000	                          call 0x4005a67	       772	fold.c	FUNCTION_26	WHILE_1	ELSE_1	CALL_8
0x4005a67	      0x488b7c2410	            mov rdi, qword [rsp + 0x10] 	       722	fold.c	FUNCTION_26	WHILE_1
0x4005a6c	      0x48397c2450	            cmp qword [rsp + 0x50], rdi 	       722	fold.c	FUNCTION_26	WHILE_1
0x4005a71	          0x4c89f1	                            mov rcx, r14	       772	fold.c	FUNCTION_26	WHILE_1	ELSE_1	CALL_8
0x4005a74	          0x4989d8	                             mov r8, rbx	       772	fold.c	FUNCTION_26	WHILE_1	ELSE_1	CALL_8
0x4005a77	    0xc74424440100	               mov dword [rsp + 0x44], 1	       769	fold.c	FUNCTION_26	WHILE_1	ELSE_1
0x4005a7f	     0xf8c67feffff	                            jl 0x40058ec	       722	fold.c	FUNCTION_26	WHILE_1
0x4005a85	        0x8b442424	            mov eax, dword [rsp + 0x24] 	       722	fold.c	FUNCTION_26	WHILE_1
0x4005a89	        0x89442418	             mov dword [rsp + 0x18], eax	       722	fold.c	FUNCTION_26	WHILE_1
0x4005a8d	      0xe9a1fdffff	                           jmp 0x4005833	       722	fold.c	FUNCTION_26	WHILE_1
0x4005a92	    0x660f1f440000	                    nop word [rax + rax]	       722	fold.c	FUNCTION_26	WHILE_1
0x4005a98	      0x488b442428	            mov rax, qword [rsp + 0x28] 	      1648	fold.c	FUNCTION_49
0x4005a9d	            0x31d2	                            xor edx, edx	      1648	fold.c	FUNCTION_49
0x4005a9f	    0xc74424080100	                  mov dword [rsp + 8], 1	      1654	fold.c	FUNCTION_49	IF_1
0x4005aa7	          0x4c01f8	                            add rax, r15	      1648	fold.c	FUNCTION_49
0x4005aaa	    0x493981e80100	            cmp qword [r9 + 0x1e8], rax 	      1648	fold.c	FUNCTION_49
0x4005ab1	         0xfb64329	           movzx eax, byte [rbx + 0x29] 	      1662	fold.c	FUNCTION_49	IF_4
0x4005ab5	           0xf9ec2	                                setle dl	      1648	fold.c	FUNCTION_49
0x4005ab8	            0x3c02	                               cmp al, 2	      1662	fold.c	FUNCTION_49	IF_4
0x4005aba	     0xf85a5feffff	                           jne 0x4005965	      1662	fold.c	FUNCTION_49	IF_4
0x4005ac0	            0x85d2	                           test edx, edx	      1664	fold.c	FUNCTION_49	IF_5
0x4005ac2	    0xc74424400100	               mov dword [rsp + 0x40], 1	      1663	fold.c	FUNCTION_49	IF_4
0x4005aca	     0xf84a0000000	                            je 0x4005b70	      1664	fold.c	FUNCTION_49	IF_5
0x4005ad0	          0x8b5310	            mov edx, dword [rbx + 0x10] 	      1723	fold.c	FUNCTION_51	FOR_1
0x4005ad3	        0xc6432902	                mov byte [rbx + 0x29], 2	      1667	fold.c	FUNCTION_49	IF_5	IF_6
0x4005ad7	        0x488b4320	            mov rax, qword [rbx + 0x20] 	      1667	fold.c	FUNCTION_49	IF_5	IF_6
0x4005adb	            0x85d2	                           test edx, edx	      1723	fold.c	FUNCTION_51	FOR_1
0x4005add	            0x7e1a	                           jle 0x4005af9	      1723	fold.c	FUNCTION_51	FOR_1
0x4005adf	        0x4883c029	                           add rax, 0x29	      1723	fold.c	FUNCTION_51	FOR_1
0x4005ae3	            0x31c9	                            xor ecx, ecx	      1723	fold.c	FUNCTION_51	FOR_1
0x4005ae5	           0xf1f00	                         nop dword [rax]	      1723	fold.c	FUNCTION_51	FOR_1
0x4005ae8	          0xc60002	                       mov byte [rax], 2	      1724	fold.c	FUNCTION_51	FOR_1
0x4005aeb	          0x8b5310	            mov edx, dword [rbx + 0x10] 	      1723	fold.c	FUNCTION_51	FOR_1
0x4005aee	          0x83c101	                              add ecx, 1	      1723	fold.c	FUNCTION_51	FOR_1
0x4005af1	        0x4883c030	                           add rax, 0x30	      1723	fold.c	FUNCTION_51	FOR_1
0x4005af5	            0x39d1	                            cmp ecx, edx	      1723	fold.c	FUNCTION_51	FOR_1
0x4005af7	            0x7cef	                            jl 0x4005ae8	      1723	fold.c	FUNCTION_51	FOR_1
0x4005af9	    0x4d3b91080200	            cmp r10, qword [r9 + 0x208] 	      1693	fold.c	FUNCTION_50	IF_1	IF_2
0x4005b00	     0xf8f86000000	                            jg 0x4005b8c	      1693	fold.c	FUNCTION_50	IF_1	IF_2
0x4005b06	          0x4d85d2	                           test r10, r10	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4005b09	     0xf8e9b000000	                           jle 0x4005baa	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4005b0f	          0x4531ed	                          xor r13d, r13d	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4005b12	          0x4531e4	                          xor r12d, r12d	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4005b15	      0x4c897c2430	             mov qword [rsp + 0x30], r15	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4005b1a	          0x4989df	                            mov r15, rbx	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4005b1d	          0x4489eb	                           mov ebx, r13d	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4005b20	          0x4d89e5	                            mov r13, r12	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4005b23	          0x4989fc	                            mov r12, rdi	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4005b26	            0xeb15	                           jmp 0x4005b3d	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4005b28	     0xf1f84000000	                   nop dword [rax + rax]	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4005b30	        0x4983c501	                              add r13, 1	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4005b34	        0x4d396f08	                cmp qword [r15 + 8], r13	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4005b38	            0x7e62	                           jle 0x4005b9c	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4005b3a	          0x498b37	                    mov rsi, qword [r15]	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4005b3d	          0x4c01f6	                            add rsi, r14	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x4005b40	          0x4c89e7	                            mov rdi, r12	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x4005b43	          0x4c01ee	                            add rsi, r13	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x4005b46	      0xe800000000	                          call 0x4005b4b	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x4005b4b	    0x4c8b0d000000	              mov r9, qword [0x04005b52]	      1701	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x4005b52	             0x1c3	                            add ebx, eax	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x4005b54	          0x4863c3	                         movsxd rax, ebx	      1701	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x4005b57	    0x493b81080200	            cmp rax, qword [r9 + 0x208] 	      1701	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x4005b5e	            0x7ed0	                           jle 0x4005b30	      1701	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x4005b60	          0x4c89fb	                            mov rbx, r15	      1701	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x4005b63	      0x41c6472900	                mov byte [r15 + 0x29], 0	      1703	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x4005b68	      0xe916feffff	                           jmp 0x4005983	      1703	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x4005b6d	           0xf1f00	                         nop dword [rax]	      1703	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x4005b70	          0x8b5310	            mov edx, dword [rbx + 0x10] 	      1703	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x4005b73	          0x4c89f1	                            mov rcx, r14	      1703	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x4005b76	          0x4989eb	                            mov r11, rbp	       747	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x4005b79	        0x4983c701	                              add r15, 1	       747	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x4005b7d	          0x4901f6	                            add r14, rsi	       745	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x4005b80	          0x4989d8	                             mov r8, rbx	       747	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x4005b83	        0x488d6b10	                   lea rbp, [rbx + 0x10]	       744	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x4005b87	      0xe9dcfcffff	                           jmp 0x4005868	       747	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x4005b8c	        0xc6432900	                mov byte [rbx + 0x29], 0	      1694	fold.c	FUNCTION_50	IF_1	IF_2
0x4005b90	    0x4c8b0d000000	              mov r9, qword [0x04005b97]	      1694	fold.c	FUNCTION_50	IF_1	IF_2
0x4005b97	      0xe9e7fdffff	                           jmp 0x4005983	      1694	fold.c	FUNCTION_50	IF_1	IF_2
0x4005b9c	          0x4c89fb	                            mov rbx, r15	      1694	fold.c	FUNCTION_50	IF_1	IF_2
0x4005b9f	      0x4c8b7c2430	            mov r15, qword [rsp + 0x30] 	      1694	fold.c	FUNCTION_50	IF_1	IF_2
0x4005ba4	          0x488b33	                    mov rsi, qword [rbx]	      1694	fold.c	FUNCTION_50	IF_1	IF_2
0x4005ba7	          0x8b5310	            mov edx, dword [rbx + 0x10] 	      1694	fold.c	FUNCTION_50	IF_1	IF_2
0x4005baa	        0xc6432901	                mov byte [rbx + 0x29], 1	      1707	fold.c	FUNCTION_50	IF_1	ELSE_1
0x4005bae	            0xebc3	                           jmp 0x4005b73	      1707	fold.c	FUNCTION_50	IF_1	ELSE_1
0x4005bb0	    0x498bb9280200	            mov rdi, qword [r9 + 0x228] 	      3358	fold.c	FUNCTION_70	CALL_1
0x4005bb7	      0xbe2c000000	                           mov esi, 0x2c	      3358	fold.c	FUNCTION_70	CALL_1
0x4005bbc	      0x4c894c2408	                 mov qword [rsp + 8], r9	      3358	fold.c	FUNCTION_70	CALL_1
0x4005bc1	      0xe800000000	                          call 0x4005bc6	      3358	fold.c	FUNCTION_70	CALL_1
0x4005bc6	      0x4c8b4c2408	                 mov r9, qword [rsp + 8]	      3359	fold.c	FUNCTION_70
0x4005bcb	        0x488d7801	                      lea rdi, [rax + 1]	      3359	fold.c	FUNCTION_70
0x4005bcf	    0x48893d000000	            mov qword [0x04005bd6], rdi 	      3359	fold.c	FUNCTION_70
0x4005bd6	    0x492b81280200	             sub rax, qword [r9 + 0x228]	      3359	fold.c	FUNCTION_70
0x4005bdd	    0x890500000000	            mov dword [0x04005be3], eax 	      3359	fold.c	FUNCTION_70
0x4005be3	      0xe800000000	                          call 0x4005be8	      3360	fold.c	FUNCTION_70	CALL_2
0x4005be8	          0x4c89f2	                            mov rdx, r14	      3360	fold.c	FUNCTION_70	CALL_2
0x4005beb	          0x480313	                    add rdx, qword [rbx]	      3360	fold.c	FUNCTION_70	CALL_2
0x4005bee	    0x890500000000	            mov dword [0x04005bf4], eax 	      3360	fold.c	FUNCTION_70	CALL_2
0x4005bf4	          0x4889d7	                            mov rdi, rdx	      3360	fold.c	FUNCTION_70	CALL_2
0x4005bf7	      0xe9e5fdffff	                           jmp 0x40059e1	      3360	fold.c	FUNCTION_70	CALL_2
0x4005bfc	        0x4c8b7d10	            mov r15, qword [rbp + 0x10] 	       758	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4
0x4005c00	          0x4889da	                            mov rdx, rbx	       757	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_5
0x4005c03	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	       757	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_5
0x4005c0d	      0x448b5c2458	           mov r11d, dword [rsp + 0x58] 	      1406	fold.c	FUNCTION_43	IF_1
0x4005c12	          0x4c29fa	                            sub rdx, r15	       757	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_5
0x4005c15	        0x48c1fa04	                              sar rdx, 4	       757	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_5
0x4005c19	        0x480fafd0	                           imul rdx, rax	       757	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_5
0x4005c1d	          0x4863c2	                         movsxd rax, edx	      1405	fold.c	FUNCTION_43
0x4005c20	        0x4c8d2440	                  lea r12, [rax + rax*2]	      1405	fold.c	FUNCTION_43
0x4005c24	        0x49c1e404	                              shl r12, 4	      1405	fold.c	FUNCTION_43
0x4005c28	          0x4d01e7	                            add r15, r12	      1405	fold.c	FUNCTION_43
0x4005c2b	          0x4585db	                         test r11d, r11d	      1406	fold.c	FUNCTION_43	IF_1
0x4005c2e	            0x750d	                           jne 0x4005c3d	      1406	fold.c	FUNCTION_43	IF_1
0x4005c30	        0x458b6f10	           mov r13d, dword [r15 + 0x10] 	      1406	fold.c	FUNCTION_43	IF_1
0x4005c34	          0x4585ed	                         test r13d, r13d	      1406	fold.c	FUNCTION_43	IF_1
0x4005c37	     0xf85d0000000	                           jne 0x4005d0d	      1406	fold.c	FUNCTION_43	IF_1
0x4005c3d	        0x498d7f10	                   lea rdi, [r15 + 0x10]	      1409	fold.c	FUNCTION_43	IF_1	CALL_1
0x4005c41	      0x4889542408	                mov qword [rsp + 8], rdx	      1409	fold.c	FUNCTION_43	IF_1	CALL_1
0x4005c46	      0xe800000000	                          call 0x4005c4b	      1409	fold.c	FUNCTION_43	IF_1	CALL_1
0x4005c4b	          0x8b4500	                    mov eax, dword [rbp]	      1410	fold.c	FUNCTION_43	IF_1
0x4005c4e	      0x488b542408	                mov rdx, qword [rsp + 8]	      1411	fold.c	FUNCTION_43	IF_1	IF_2
0x4005c53	          0x83e801	                              sub eax, 1	      1410	fold.c	FUNCTION_43	IF_1
0x4005c56	            0x39c2	                            cmp edx, eax	      1411	fold.c	FUNCTION_43	IF_1	IF_2
0x4005c58	          0x894500	                    mov dword [rbp], eax	      1410	fold.c	FUNCTION_43	IF_1
0x4005c5b	     0xf8d01feffff	                           jge 0x4005a62	      1411	fold.c	FUNCTION_43	IF_1	IF_2
0x4005c61	            0x29d0	                            sub eax, edx	        59	string3.h	FUNCTION_78	CALL_3
0x4005c63	        0x498d7730	                   lea rsi, [r15 + 0x30]	        59	string3.h	FUNCTION_78	CALL_3
0x4005c67	          0x4c89ff	                            mov rdi, r15	        59	string3.h	FUNCTION_78	CALL_3
0x4005c6a	            0x4898	                                    cdqe	        59	string3.h	FUNCTION_78	CALL_3
0x4005c6c	        0x488d1440	                  lea rdx, [rax + rax*2]	        59	string3.h	FUNCTION_78	CALL_3
0x4005c70	        0x48c1e204	                              shl rdx, 4	        59	string3.h	FUNCTION_78	CALL_3
0x4005c74	      0xe800000000	                          call 0x4005c79	        59	string3.h	FUNCTION_78	CALL_3
0x4005c79	      0xe9e4fdffff	                           jmp 0x4005a62	        59	string3.h	FUNCTION_78	CALL_3
0x4005c7e	    0x448b2d000000	           mov r13d, dword [0x04005c85] 	       813	fold.c	FUNCTION_28	IF_1
0x4005c85	          0x4585ed	                         test r13d, r13d	       813	fold.c	FUNCTION_28	IF_1
0x4005c88	     0xf8e29010000	                           jle 0x4005db7	       813	fold.c	FUNCTION_28	IF_1
0x4005c8e	      0x488b4c2450	            mov rcx, qword [rsp + 0x50] 	       722	fold.c	FUNCTION_26	WHILE_1
0x4005c93	      0x48394c2410	            cmp qword [rsp + 0x10], rcx 	       722	fold.c	FUNCTION_26	WHILE_1
0x4005c98	    0xc68321010000	               mov byte [rbx + 0x121], 0	      1190	fold.c	FUNCTION_38	IF_1
0x4005c9f	     0xf8e5ffbffff	                           jle 0x4005804	       722	fold.c	FUNCTION_26	WHILE_1
0x4005ca5	            0x31ff	                            xor edi, edi	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x4005ca7	      0xba05000000	                              mov edx, 5	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x4005cac	      0xbe00000000	                              mov esi, 0	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x4005cb1	      0xe800000000	                          call 0x4005cb6	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x4005cb6	          0x4889c7	                            mov rdi, rax	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x4005cb9	      0xe800000000	                          call 0x4005cbe	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x4005cbe	        0x8b44245c	            mov eax, dword [rsp + 0x5c] 	       779	fold.c	FUNCTION_26	IF_8	IF_9
0x4005cc2	            0x85c0	                           test eax, eax	       779	fold.c	FUNCTION_26	IF_8	IF_9
0x4005cc4	     0xf8535010000	                           jne 0x4005dff	       779	fold.c	FUNCTION_26	IF_8	IF_9
0x4005cca	        0x4883c468	                           add rsp, 0x68	       788	fold.c	FUNCTION_26
0x4005cce	              0x5b	                                 pop rbx	       788	fold.c	FUNCTION_26
0x4005ccf	              0x5d	                                 pop rbp	       788	fold.c	FUNCTION_26
0x4005cd0	            0x415c	                                 pop r12	       788	fold.c	FUNCTION_26
0x4005cd2	            0x415d	                                 pop r13	       788	fold.c	FUNCTION_26
0x4005cd4	            0x415e	                                 pop r14	       788	fold.c	FUNCTION_26
0x4005cd6	            0x415f	                                 pop r15	       788	fold.c	FUNCTION_26
0x4005cd8	              0xc3	                                     ret	       788	fold.c	FUNCTION_26
0x4005cd9	            0x31ff	                            xor edi, edi	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x4005cdb	      0xba05000000	                              mov edx, 5	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x4005ce0	      0xbe00000000	                              mov esi, 0	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x4005ce5	      0xe800000000	                          call 0x4005cea	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x4005cea	          0x4889c7	                            mov rdi, rax	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x4005ced	      0xe800000000	                          call 0x4005cf2	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x4005cf2	        0x8b4c245c	            mov ecx, dword [rsp + 0x5c] 	       779	fold.c	FUNCTION_26	IF_8	IF_9
0x4005cf6	            0x85c9	                           test ecx, ecx	       779	fold.c	FUNCTION_26	IF_8	IF_9
0x4005cf8	     0xf84fffbffff	                            je 0x40058fd	       779	fold.c	FUNCTION_26	IF_8	IF_9
0x4005cfe	      0xbf14000000	                           mov edi, 0x14	       780	fold.c	FUNCTION_26	IF_8	CALL_11
0x4005d03	      0xe800000000	                          call 0x4005d08	       780	fold.c	FUNCTION_26	IF_8	CALL_11
0x4005d08	      0xe9f0fbffff	                           jmp 0x40058fd	       780	fold.c	FUNCTION_26	IF_8	CALL_11
0x4005d0d	        0x418d4dff	                      lea ecx, [r13 - 1]	      1419	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_3
0x4005d11	          0x4889ef	                            mov rdi, rbp	      1419	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_3
0x4005d14	      0x4889542418	             mov qword [rsp + 0x18], rdx	      1419	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_3
0x4005d19	            0x89ce	                            mov esi, ecx	      1419	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_3
0x4005d1b	        0x894c2408	                mov dword [rsp + 8], ecx	      1419	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_3
0x4005d1f	      0xe800000000	                          call 0x4005d24	      1419	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_3
0x4005d24	          0x83f801	                              cmp eax, 1	      1419	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_3
0x4005d27	        0x8b4c2408	                mov ecx, dword [rsp + 8]	      1419	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_3
0x4005d2b	      0x488b542418	            mov rdx, qword [rsp + 0x18] 	      1419	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_3
0x4005d30	     0xf852cfdffff	                           jne 0x4005a62	      1419	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_3
0x4005d36	        0x4c036510	             add r12, qword [rbp + 0x10]	      1422	fold.c	FUNCTION_43	ELSE_1	IF_3
0x4005d3a	          0x4585ed	                         test r13d, r13d	      1426	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x4005d3d	      0x4d8b7c2420	            mov r15, qword [r12 + 0x20] 	      1425	fold.c	FUNCTION_43	ELSE_1	IF_3
0x4005d42	            0x7e37	                           jle 0x4005d7b	      1426	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x4005d44	      0x488d4c4903	              lea rcx, [rcx + rcx*2 + 3]	      1426	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x4005d49	          0x4c89f8	                            mov rax, r15	      1426	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x4005d4c	        0x48c1e104	                              shl rcx, 4	      1426	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x4005d50	          0x4c01f9	                            add rcx, r15	      1426	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x4005d53	        0x498b3424	                    mov rsi, qword [r12]	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x4005d57	          0x480130	                    add qword [rax], rsi	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x4005d5a	    0x41807c242802	                cmp byte [r12 + 0x28], 2	      1429	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_4
0x4005d60	            0x7504	                           jne 0x4005d66	      1429	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_4
0x4005d62	        0xc6402802	                mov byte [rax + 0x28], 2	      1430	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_4
0x4005d66	    0x41807c242902	                cmp byte [r12 + 0x29], 2	      1431	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_5
0x4005d6c	            0x7504	                           jne 0x4005d72	      1431	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_5
0x4005d6e	        0xc6402902	                mov byte [rax + 0x29], 2	      1432	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_5
0x4005d72	        0x4883c030	                           add rax, 0x30	      1432	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_5
0x4005d76	          0x4839c8	                            cmp rax, rcx	      1426	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x4005d79	            0x75d8	                           jne 0x4005d53	      1426	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x4005d7b	          0x8b4500	                    mov eax, dword [rbp]	      1436	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6
0x4005d7e	          0x83c201	                              add edx, 1	      1436	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6
0x4005d81	            0x39c2	                            cmp edx, eax	      1436	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6
0x4005d83	            0x7c49	                            jl 0x4005dce	      1436	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6
0x4005d85	          0x4963c5	                        movsxd rax, r13d	      1436	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6
0x4005d88	        0x488d0c40	                  lea rcx, [rax + rax*2]	      1436	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6
0x4005d8c	        0x48c1e104	                              shl rcx, 4	      1436	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6
0x4005d90	          0x4889ca	                            mov rdx, rcx	        59	string3.h	FUNCTION_78	CALL_3
0x4005d93	          0x4c89fe	                            mov rsi, r15	        59	string3.h	FUNCTION_78	CALL_3
0x4005d96	          0x4c89e7	                            mov rdi, r12	        59	string3.h	FUNCTION_78	CALL_3
0x4005d99	      0xe800000000	                          call 0x4005d9e	        59	string3.h	FUNCTION_78	CALL_3
0x4005d9e	          0x4c89ff	                            mov rdi, r15	      1441	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_6
0x4005da1	      0xe800000000	                          call 0x4005da6	      1441	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_6
0x4005da6	          0x8b4500	                    mov eax, dword [rbp]	      1442	fold.c	FUNCTION_43	ELSE_1	IF_3
0x4005da9	          0x4401e8	                           add eax, r13d	      1442	fold.c	FUNCTION_43	ELSE_1	IF_3
0x4005dac	          0x83e801	                              sub eax, 1	      1442	fold.c	FUNCTION_43	ELSE_1	IF_3
0x4005daf	          0x894500	                    mov dword [rbp], eax	      1442	fold.c	FUNCTION_43	ELSE_1	IF_3
0x4005db2	      0xe9abfcffff	                           jmp 0x4005a62	      1442	fold.c	FUNCTION_43	ELSE_1	IF_3
0x4005db7	      0xbaffffff7f	                     mov edx, 0x7fffffff	      1442	fold.c	FUNCTION_43	ELSE_1	IF_3
0x4005dbc	      0xbe01000000	                              mov esi, 1	      1442	fold.c	FUNCTION_43	ELSE_1	IF_3
0x4005dc1	          0x4889df	                            mov rdi, rbx	      1442	fold.c	FUNCTION_43	ELSE_1	IF_3
0x4005dc4	      0xe877eaffff	             call sym.foldUpdate.part.16	      1442	fold.c	FUNCTION_43	ELSE_1	IF_3
0x4005dc9	      0xe9c0feffff	                           jmp 0x4005c8e	      1442	fold.c	FUNCTION_43	ELSE_1	IF_3
0x4005dce	          0x4963cd	                        movsxd rcx, r13d	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x4005dd1	            0x29d0	                            sub eax, edx	        59	string3.h	FUNCTION_78	CALL_3
0x4005dd3	      0x498d742430	                   lea rsi, [r12 + 0x30]	        59	string3.h	FUNCTION_78	CALL_3
0x4005dd8	        0x488d0c49	                  lea rcx, [rcx + rcx*2]	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x4005ddc	            0x4898	                                    cdqe	        59	string3.h	FUNCTION_78	CALL_3
0x4005dde	        0x488d1440	                  lea rdx, [rax + rax*2]	        59	string3.h	FUNCTION_78	CALL_3
0x4005de2	        0x48c1e104	                              shl rcx, 4	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x4005de6	        0x498d3c0c	                    lea rdi, [r12 + rcx]	        59	string3.h	FUNCTION_78	CALL_3
0x4005dea	        0x48c1e204	                              shl rdx, 4	        59	string3.h	FUNCTION_78	CALL_3
0x4005dee	      0x48894c2408	                mov qword [rsp + 8], rcx	        59	string3.h	FUNCTION_78	CALL_3
0x4005df3	      0xe800000000	                          call 0x4005df8	        59	string3.h	FUNCTION_78	CALL_3
0x4005df8	      0x488b4c2408	                mov rcx, qword [rsp + 8]	        59	string3.h	FUNCTION_78	CALL_3
0x4005dfd	            0xeb91	                           jmp 0x4005d90	        59	string3.h	FUNCTION_78	CALL_3
0x4005dff	    0x48c7442438ff	     mov qword [rsp + 0x38], 0x7fffffff 	       779	fold.c	FUNCTION_26	IF_8	IF_9
0x4005e08	    0x48c744244800	               mov qword [rsp + 0x48], 0	       779	fold.c	FUNCTION_26	IF_8	IF_9
0x4005e11	      0xe9e8feffff	                           jmp 0x4005cfe	       779	fold.c	FUNCTION_26	IF_8	IF_9
0x4005e16	          0x4989ce	                            mov r14, rcx	       779	fold.c	FUNCTION_26	IF_8	IF_9
0x4005e19	          0x4c89c3	                             mov rbx, r8	       779	fold.c	FUNCTION_26	IF_8	IF_9
0x4005e1c	          0x4c89dd	                            mov rbp, r11	       779	fold.c	FUNCTION_26	IF_8	IF_9
0x4005e1f	    0x4c8b0d000000	              mov r9, qword [0x04005e26]	       779	fold.c	FUNCTION_26	IF_8	IF_9
0x4005e26	      0xe958fbffff	                           jmp 0x4005983	       779	fold.c	FUNCTION_26	IF_8	IF_9
clearFolding	WHILE,0:functions,0:ELSE,0:DO,0:FOR,0:SWITCH,0:IF,0:CALL,1	30
0x4003470	            0x4155	                                push r13	       796	fold.c	FUNCTION_27
0x4003472	            0x4154	                                push r12	       796	fold.c	FUNCTION_27
0x4003474	    0x4c8daf080100	                  lea r13, [rdi + 0x108]	       797	fold.c	FUNCTION_27	CALL_1
0x400347b	              0x55	                                push rbp	       796	fold.c	FUNCTION_27
0x400347c	              0x53	                                push rbx	       796	fold.c	FUNCTION_27
0x400347d	            0x31ed	                            xor ebp, ebp	       796	fold.c	FUNCTION_27
0x400347f	            0x31db	                            xor ebx, ebx	       796	fold.c	FUNCTION_27
0x4003481	          0x4989fc	                            mov r12, rdi	       796	fold.c	FUNCTION_27
0x4003484	        0x4883ec08	                              sub rsp, 8	       796	fold.c	FUNCTION_27
0x4003488	    0x8b8708010000	           mov eax, dword [rdi + 0x108] 	      1456	fold.c	FUNCTION_44	FOR_1
0x400348e	            0x85c0	                           test eax, eax	      1456	fold.c	FUNCTION_44	FOR_1
0x4003490	            0x7e2b	                           jle 0x40034bd	      1456	fold.c	FUNCTION_44	FOR_1
0x4003492	    0x660f1f440000	                    nop word [rax + rax]	      1456	fold.c	FUNCTION_44	FOR_1
0x4003498	          0x4889ef	                            mov rdi, rbp	      1457	fold.c	FUNCTION_44	CALL_1
0x400349b	    0x4903bc241801	            add rdi, qword [r12 + 0x118]	      1457	fold.c	FUNCTION_44	CALL_1
0x40034a3	          0x83c301	                              add ebx, 1	      1456	fold.c	FUNCTION_44	FOR_1
0x40034a6	        0x4883c530	                           add rbp, 0x30	      1456	fold.c	FUNCTION_44	FOR_1
0x40034aa	        0x4883c710	                           add rdi, 0x10	      1457	fold.c	FUNCTION_44	CALL_1
0x40034ae	      0xe800000000	                          call 0x40034b3	      1457	fold.c	FUNCTION_44	CALL_1
0x40034b3	    0x413b9c240801	           cmp ebx, dword [r12 + 0x108] 	      1456	fold.c	FUNCTION_44	FOR_1
0x40034bb	            0x7cdb	                            jl 0x4003498	      1456	fold.c	FUNCTION_44	FOR_1
0x40034bd	          0x4c89ef	                            mov rdi, r13	      1458	fold.c	FUNCTION_44	CALL_2
0x40034c0	      0xe800000000	                          call 0x40034c5	      1458	fold.c	FUNCTION_44	CALL_2
0x40034c5	    0x41c684242101	               mov byte [r12 + 0x121], 0	       798	fold.c	FUNCTION_27
0x40034ce	        0x4883c408	                              add rsp, 8	       799	fold.c	FUNCTION_27
0x40034d2	              0x5b	                                 pop rbx	       799	fold.c	FUNCTION_27
0x40034d3	              0x5d	                                 pop rbp	       799	fold.c	FUNCTION_27
0x40034d4	            0x415c	                                 pop r12	       799	fold.c	FUNCTION_27
0x40034d6	            0x415d	                                 pop r13	       799	fold.c	FUNCTION_27
0x40034d8	              0xc3	                                     ret	       799	fold.c	FUNCTION_27
put_folds	WHILE,0:functions,0:ELSE,0:DO,0:FOR,0:SWITCH,0:IF,3:CALL,4	45
0x40084d0	              0x55	                                push rbp	      3493	fold.c	FUNCTION_73
0x40084d1	              0x53	                                push rbx	      3493	fold.c	FUNCTION_73
0x40084d2	          0x4889fd	                            mov rbp, rdi	      3493	fold.c	FUNCTION_73
0x40084d5	          0x4889f3	                            mov rbx, rsi	      3493	fold.c	FUNCTION_73
0x40084d8	        0x4883ec08	                              sub rsp, 8	      3493	fold.c	FUNCTION_73
0x40084dc	    0x488b86f80100	           mov rax, qword [rsi + 0x1f8] 	       307	fold.c	FUNCTION_8
0x40084e3	        0x80780375	                cmp byte [rax + 3], 0x75	      3494	fold.c	FUNCTION_73	IF_1	CALL_1
0x40084e7	            0x743f	                            je 0x4008528	      3494	fold.c	FUNCTION_73	IF_1	CALL_1
0x40084e9	    0x80bb20010000	               cmp byte [rbx + 0x120], 0	      3502	fold.c	FUNCTION_73	IF_3
0x40084f0	      0xb801000000	                              mov eax, 1	      3505	fold.c	FUNCTION_73
0x40084f5	            0x7509	                           jne 0x4008500	      3502	fold.c	FUNCTION_73	IF_3
0x40084f7	        0x4883c408	                              add rsp, 8	      3506	fold.c	FUNCTION_73
0x40084fb	              0x5b	                                 pop rbx	      3506	fold.c	FUNCTION_73
0x40084fc	              0x5d	                                 pop rbp	      3506	fold.c	FUNCTION_73
0x40084fd	              0xc3	                                     ret	      3506	fold.c	FUNCTION_73
0x40084fe	            0x6690	                                     nop	      3506	fold.c	FUNCTION_73
0x4008500	    0x488b8b180100	           mov rcx, qword [rbx + 0x118] 	      3503	fold.c	FUNCTION_73	CALL_4
0x4008507	        0x4883c408	                              add rsp, 8	      3506	fold.c	FUNCTION_73
0x400850b	    0x488d93080100	                  lea rdx, [rbx + 0x108]	      3503	fold.c	FUNCTION_73	CALL_4
0x4008512	          0x4889de	                            mov rsi, rbx	      3503	fold.c	FUNCTION_73	CALL_4
0x4008515	          0x4889ef	                            mov rdi, rbp	      3503	fold.c	FUNCTION_73	CALL_4
0x4008518	          0x4531c0	                            xor r8d, r8d	      3503	fold.c	FUNCTION_73	CALL_4
0x400851b	              0x5b	                                 pop rbx	      3506	fold.c	FUNCTION_73
0x400851c	              0x5d	                                 pop rbp	      3506	fold.c	FUNCTION_73
0x400851d	      0xe93e90ffff	    jmp sym.put_foldopen_recurse.isra.12	      3503	fold.c	FUNCTION_73	CALL_4
0x4008522	    0x660f1f440000	                    nop word [rax + rax]	      3503	fold.c	FUNCTION_73	CALL_4
0x4008528	      0xbe00000000	                              mov esi, 0	      3496	fold.c	FUNCTION_73	IF_1	IF_2	CALL_2
0x400852d	      0xe800000000	                          call 0x4008532	      3496	fold.c	FUNCTION_73	IF_1	IF_2	CALL_2
0x4008532	            0x85c0	                           test eax, eax	      3496	fold.c	FUNCTION_73	IF_1	IF_2	CALL_2
0x4008534	            0x750a	                           jne 0x4008540	      3496	fold.c	FUNCTION_73	IF_1	IF_2	CALL_2
0x4008536	            0x31c0	                            xor eax, eax	      3498	fold.c	FUNCTION_73	IF_1	IF_2
0x4008538	        0x4883c408	                              add rsp, 8	      3506	fold.c	FUNCTION_73
0x400853c	              0x5b	                                 pop rbx	      3506	fold.c	FUNCTION_73
0x400853d	              0x5d	                                 pop rbp	      3506	fold.c	FUNCTION_73
0x400853e	              0xc3	                                     ret	      3506	fold.c	FUNCTION_73
0x400853f	              0x90	                                     nop	      3506	fold.c	FUNCTION_73
0x4008540	    0x488b93180100	           mov rdx, qword [rbx + 0x118] 	      3497	fold.c	FUNCTION_73	IF_1	IF_2	CALL_3
0x4008547	    0x488db3080100	                  lea rsi, [rbx + 0x108]	      3497	fold.c	FUNCTION_73	IF_1	IF_2	CALL_3
0x400854e	            0x31c9	                            xor ecx, ecx	      3497	fold.c	FUNCTION_73	IF_1	IF_2	CALL_3
0x4008550	          0x4889ef	                            mov rdi, rbp	      3497	fold.c	FUNCTION_73	IF_1	IF_2	CALL_3
0x4008553	      0xe84892ffff	       call sym.put_folds_recurse.isra.9	      3497	fold.c	FUNCTION_73	IF_1	IF_2	CALL_3
0x4008558	            0x85c0	                           test eax, eax	      3497	fold.c	FUNCTION_73	IF_1	IF_2	CALL_3
0x400855a	            0x758d	                           jne 0x40084e9	      3497	fold.c	FUNCTION_73	IF_1	IF_2	CALL_3
0x400855c	            0x31c0	                            xor eax, eax	      3498	fold.c	FUNCTION_73	IF_1	IF_2
0x400855e	            0xebd8	                           jmp 0x4008538	      3498	fold.c	FUNCTION_73	IF_1	IF_2
foldMarkAdjust	WHILE,0:functions,0:ELSE,0:DO,0:FOR,0:SWITCH,0:IF,2:CALL,1	25
0x40075f0	    0x4881f9ffffff	                     cmp rcx, 0x7fffffff	      1475	fold.c	FUNCTION_45	IF_1
0x40075f7	            0x7516	                           jne 0x400760f	      1475	fold.c	FUNCTION_45	IF_1
0x40075f9	          0x4839f2	                            cmp rdx, rsi	      1475	fold.c	FUNCTION_45	IF_1
0x40075fc	            0x7c11	                            jl 0x400760f	      1475	fold.c	FUNCTION_45	IF_1
0x40075fe	          0x4989d1	                             mov r9, rdx	      1475	fold.c	FUNCTION_45	IF_1
0x4007601	          0x4c89c0	                             mov rax, r8	      1475	fold.c	FUNCTION_45	IF_1
0x4007604	          0x4929f1	                             sub r9, rsi	      1475	fold.c	FUNCTION_45	IF_1
0x4007607	          0x48f7d8	                                 neg rax	      1475	fold.c	FUNCTION_45	IF_1
0x400760a	          0x4939c1	                             cmp r9, rax	      1475	fold.c	FUNCTION_45	IF_1
0x400760d	            0x7d31	                           jge 0x4007640	      1475	fold.c	FUNCTION_45	IF_1
0x400760f	    0xf60500000000	           test byte [0x04007616], 0x10 	      1479	fold.c	FUNCTION_45	IF_2
0x4007616	            0x7416	                            je 0x400762e	      1479	fold.c	FUNCTION_45	IF_2
0x4007618	        0x4883f901	                              cmp rcx, 1	      1479	fold.c	FUNCTION_45	IF_2
0x400761c	            0x7510	                           jne 0x400762e	      1479	fold.c	FUNCTION_45	IF_2
0x400761e	    0x4881faffffff	                     cmp rdx, 0x7fffffff	      1479	fold.c	FUNCTION_45	IF_2
0x4007625	           0xf94c0	                                 sete al	      1479	fold.c	FUNCTION_45	IF_2
0x4007628	            0x3c01	                               cmp al, 1	      1480	fold.c	FUNCTION_45	IF_2
0x400762a	        0x4883d6ff	             adc rsi, 0xffffffffffffffff	      1480	fold.c	FUNCTION_45	IF_2
0x400762e	    0x4881c7080100	                          add rdi, 0x108	      1481	fold.c	FUNCTION_45	CALL_1
0x4007635	      0xe946bbffff	           jmp sym.foldMarkAdjustRecurse	      1481	fold.c	FUNCTION_45	CALL_1
0x400763a	    0x660f1f440000	                    nop word [rax + rax]	      1481	fold.c	FUNCTION_45	CALL_1
0x4007640	          0x4889f2	                            mov rdx, rsi	      1476	fold.c	FUNCTION_45	IF_1
0x4007643	          0x4c29c2	                             sub rdx, r8	      1476	fold.c	FUNCTION_45	IF_1
0x4007646	        0x4883ea01	                              sub rdx, 1	      1476	fold.c	FUNCTION_45	IF_1
0x400764a	            0xebc3	                           jmp 0x400760f	      1476	fold.c	FUNCTION_45	IF_1
lineFolded	WHILE,0:functions,0:ELSE,0:DO,0:FOR,0:SWITCH,0:IF,0:CALL,1	8
0x4005350	        0x4883ec08	                              sub rsp, 8	       277	fold.c	FUNCTION_6
0x4005354	            0x31d2	                            xor edx, edx	       278	fold.c	FUNCTION_6	CALL_1
0x4005356	      0xe800000000	                          call 0x400535b	       278	fold.c	FUNCTION_6	CALL_1
0x400535b	          0x4885c0	                           test rax, rax	       278	fold.c	FUNCTION_6	CALL_1
0x400535e	           0xf95c0	                                setne al	       278	fold.c	FUNCTION_6	CALL_1
0x4005361	        0x4883c408	                              add rsp, 8	       279	fold.c	FUNCTION_6
0x4005365	           0xfb6c0	                           movzx eax, al	       278	fold.c	FUNCTION_6	CALL_1
0x4005368	              0xc3	                                     ret	       279	fold.c	FUNCTION_6
get_foldtext	WHILE,0:functions,0:ELSE,2:DO,0:FOR,1:SWITCH,0:IF,14:CALL,14	214
0x4007700	            0x4157	                                push r15	      1878	fold.c	FUNCTION_56
0x4007702	            0x4156	                                push r14	      1878	fold.c	FUNCTION_56
0x4007704	          0x4d89c6	                             mov r14, r8	      1878	fold.c	FUNCTION_56
0x4007707	            0x4155	                                push r13	      1878	fold.c	FUNCTION_56
0x4007709	            0x4154	                                push r12	      1878	fold.c	FUNCTION_56
0x400770b	          0x4989f5	                            mov r13, rsi	      1878	fold.c	FUNCTION_56
0x400770e	              0x55	                                push rbp	      1878	fold.c	FUNCTION_56
0x400770f	              0x53	                                push rbx	      1878	fold.c	FUNCTION_56
0x4007710	          0x4989d4	                            mov r12, rdx	      1878	fold.c	FUNCTION_56
0x4007713	          0x4889fb	                            mov rbx, rdi	      1878	fold.c	FUNCTION_56
0x4007716	        0x4883ec38	                           sub rsp, 0x38	      1878	fold.c	FUNCTION_56
0x400771a	    0x448b3d000000	           mov r15d, dword [0x04007721] 	      1883	fold.c	FUNCTION_56
0x4007721	    0x64488b042528	                mov rax, qword fs:[0x28]	      1878	fold.c	FUNCTION_56
0x400772a	      0x4889442428	             mov qword [rsp + 0x28], rax	      1878	fold.c	FUNCTION_56
0x400772f	            0x31c0	                            xor eax, eax	      1878	fold.c	FUNCTION_56
0x4007731	    0x488b05000000	            mov rax, qword [0x04007738] 	      1887	fold.c	FUNCTION_56	IF_1
0x4007738	          0x4839f8	                            cmp rax, rdi	      1887	fold.c	FUNCTION_56	IF_1
0x400773b	            0x752b	                           jne 0x4007768	      1887	fold.c	FUNCTION_56	IF_1
0x400773d	          0x4885c0	                           test rax, rax	      1887	fold.c	FUNCTION_56	IF_1
0x4007740	            0x7426	                            je 0x4007768	      1887	fold.c	FUNCTION_56	IF_1
0x4007742	    0x488b05000000	            mov rax, qword [0x04007749] 	      1888	fold.c	FUNCTION_56	IF_1
0x4007749	          0x4839f0	                            cmp rax, rsi	      1888	fold.c	FUNCTION_56	IF_1
0x400774c	            0x7f1a	                            jg 0x4007768	      1888	fold.c	FUNCTION_56	IF_1
0x400774e	          0x4885c0	                           test rax, rax	      1888	fold.c	FUNCTION_56	IF_1
0x4007751	            0x7415	                            je 0x4007768	      1888	fold.c	FUNCTION_56	IF_1
0x4007753	    0x448b0d000000	            mov r9d, dword [0x0400775a] 	      1892	fold.c	FUNCTION_56	IF_2
0x400775a	          0x4585c9	                           test r9d, r9d	      1892	fold.c	FUNCTION_56	IF_2
0x400775d	            0x751d	                           jne 0x400777c	      1892	fold.c	FUNCTION_56	IF_2
0x400775f	            0xeb11	                           jmp 0x4007772	      1892	fold.c	FUNCTION_56	IF_2
0x4007761	     0xf1f80000000	                         nop dword [rax]	      1892	fold.c	FUNCTION_56	IF_2
0x4007768	    0xc70500000000	               mov dword [0x04007772], 0	      1890	fold.c	FUNCTION_56	IF_1
0x4007772	    0xc70500000000	               mov dword [0x0400777c], 0	      1894	fold.c	FUNCTION_56	IF_2
0x400777c	    0x488b83200200	           mov rax, qword [rbx + 0x220] 	      1896	fold.c	FUNCTION_56	IF_3
0x4007783	          0x803800	                       cmp byte [rax], 0	      1896	fold.c	FUNCTION_56	IF_3
0x4007786	            0x7568	                           jne 0x40077f0	      1896	fold.c	FUNCTION_56	IF_3
0x4007788	          0x4d29ec	                            sub r12, r13	      1975	fold.c	FUNCTION_56	IF_14
0x400778b	    0x41b805000000	                              mov r8d, 5	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x4007791	      0xba00000000	                              mov edx, 0	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x4007796	        0x4983c401	                              add r12, 1	      1975	fold.c	FUNCTION_56	IF_14
0x400779a	      0xbe00000000	                              mov esi, 0	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x400779f	            0x31ff	                            xor edi, edi	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x40077a1	          0x4c89e1	                            mov rcx, r12	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x40077a4	          0x4c89f5	                            mov rbp, r14	      1981	fold.c	FUNCTION_56	IF_14
0x40077a7	      0xe800000000	                          call 0x40077ac	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x40077ac	          0x4c89e1	                            mov rcx, r12	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x40077af	          0x4889c2	                            mov rdx, rax	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x40077b2	      0xbe33000000	                           mov esi, 0x33	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x40077b7	          0x4c89f7	                            mov rdi, r14	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x40077ba	            0x31c0	                            xor eax, eax	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x40077bc	      0xe800000000	                          call 0x40077c1	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x40077c1	      0x488b542428	            mov rdx, qword [rsp + 0x28] 	      1984	fold.c	FUNCTION_56
0x40077c6	    0x644833142528	                xor rdx, qword fs:[0x28]	      1984	fold.c	FUNCTION_56
0x40077cf	          0x4889e8	                            mov rax, rbp	      1984	fold.c	FUNCTION_56
0x40077d2	     0xf85b8020000	                           jne 0x4007a90	      1984	fold.c	FUNCTION_56
0x40077d8	        0x4883c438	                           add rsp, 0x38	      1984	fold.c	FUNCTION_56
0x40077dc	              0x5b	                                 pop rbx	      1984	fold.c	FUNCTION_56
0x40077dd	              0x5d	                                 pop rbp	      1984	fold.c	FUNCTION_56
0x40077de	            0x415c	                                 pop r12	      1984	fold.c	FUNCTION_56
0x40077e0	            0x415d	                                 pop r13	      1984	fold.c	FUNCTION_56
0x40077e2	            0x415e	                                 pop r14	      1984	fold.c	FUNCTION_56
0x40077e4	            0x415f	                                 pop r15	      1984	fold.c	FUNCTION_56
0x40077e6	              0xc3	                                     ret	      1984	fold.c	FUNCTION_56
0x40077e7	    0x660f1f840000	                    nop word [rax + rax]	      1984	fold.c	FUNCTION_56
0x40077f0	          0x4c89ee	                            mov rsi, r13	      1904	fold.c	FUNCTION_56	IF_3	CALL_1
0x40077f3	      0xbf16000000	                           mov edi, 0x16	      1904	fold.c	FUNCTION_56	IF_3	CALL_1
0x40077f8	      0x48894c2408	                mov qword [rsp + 8], rcx	      1904	fold.c	FUNCTION_56	IF_3	CALL_1
0x40077fd	      0xe800000000	                          call 0x4007802	      1904	fold.c	FUNCTION_56	IF_3	CALL_1
0x4007802	          0x4c89e6	                            mov rsi, r12	      1905	fold.c	FUNCTION_56	IF_3	CALL_2
0x4007805	      0xbf17000000	                           mov edi, 0x17	      1905	fold.c	FUNCTION_56	IF_3	CALL_2
0x400780a	      0xbd15000000	                           mov ebp, 0x15	      1905	fold.c	FUNCTION_56	IF_3	CALL_2
0x400780f	      0xe800000000	                          call 0x4007814	      1905	fold.c	FUNCTION_56	IF_3	CALL_2
0x4007814	      0x488b4c2408	                mov rcx, qword [rsp + 8]	      1909	fold.c	FUNCTION_56	IF_3
0x4007819	      0x488d7c2410	                   lea rdi, [rsp + 0x10]	        90	string3.h	FUNCTION_80	CALL_6
0x400781e	      0xbe2d000000	                           mov esi, 0x2d	        90	string3.h	FUNCTION_80	CALL_6
0x4007823	          0x486301	                 movsxd rax, dword [rcx]	      1909	fold.c	FUNCTION_56	IF_3
0x4007826	      0xb916000000	                           mov ecx, 0x16	        90	string3.h	FUNCTION_80	CALL_6
0x400782b	          0x83f815	                           cmp eax, 0x15	        90	string3.h	FUNCTION_80	CALL_6
0x400782e	        0x480f4ee8	                         cmovle rbp, rax	        90	string3.h	FUNCTION_80	CALL_6
0x4007832	          0x4889ea	                            mov rdx, rbp	        90	string3.h	FUNCTION_80	CALL_6
0x4007835	      0xe800000000	                          call 0x400783a	        90	string3.h	FUNCTION_80	CALL_6
0x400783a	      0x488d742410	                   lea rsi, [rsp + 0x10]	      1914	fold.c	FUNCTION_56	IF_3	CALL_4
0x400783f	      0xbaffffffff	                     mov edx, 0xffffffff	      1914	fold.c	FUNCTION_56	IF_3	CALL_4
0x4007844	      0xbf18000000	                           mov edi, 0x18	      1914	fold.c	FUNCTION_56	IF_3	CALL_4
0x4007849	      0xc6442c1000	          mov byte [rsp + rbp + 0x10], 0	      1913	fold.c	FUNCTION_56	IF_3
0x400784e	      0xe800000000	                          call 0x4007853	      1914	fold.c	FUNCTION_56	IF_3	CALL_4
0x4007853	          0x4889ee	                            mov rsi, rbp	      1915	fold.c	FUNCTION_56	IF_3	CALL_5
0x4007856	      0xbf19000000	                           mov edi, 0x19	      1915	fold.c	FUNCTION_56	IF_3	CALL_5
0x400785b	      0xe800000000	                          call 0x4007860	      1915	fold.c	FUNCTION_56	IF_3	CALL_5
0x4007860	    0x448b05000000	            mov r8d, dword [0x04007867] 	      1918	fold.c	FUNCTION_56	IF_3	IF_5
0x4007867	          0x4585c0	                           test r8d, r8d	      1918	fold.c	FUNCTION_56	IF_3	IF_5
0x400786a	     0xf8410010000	                            je 0x4007980	      1918	fold.c	FUNCTION_56	IF_3	IF_5
0x4007870	      0xbaffffffff	                     mov edx, 0xffffffff	      1937	fold.c	FUNCTION_56	IF_3	CALL_8
0x4007875	            0x31f6	                            xor esi, esi	      1937	fold.c	FUNCTION_56	IF_3	CALL_8
0x4007877	      0xbf18000000	                           mov edi, 0x18	      1937	fold.c	FUNCTION_56	IF_3	CALL_8
0x400787c	    0x4c892d000000	            mov qword [0x04007883], r13 	      1935	fold.c	FUNCTION_56	IF_3
0x4007883	    0x48891d000000	            mov qword [0x0400788a], rbx 	      1936	fold.c	FUNCTION_56	IF_3
0x400788a	      0xe800000000	                          call 0x400788f	      1937	fold.c	FUNCTION_56	IF_3	CALL_8
0x400788f	    0x8b1500000000	            mov edx, dword [0x04007895] 	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x4007895	            0x85d2	                           test edx, edx	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x4007897	     0xf85ebfeffff	                           jne 0x4007788	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x400789d	          0x4585ff	                         test r15d, r15d	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x40078a0	     0xf84e2feffff	                            je 0x4007788	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x40078a6	            0x31ed	                            xor ebp, ebp	      1879	fold.c	FUNCTION_56
0x40078a8	    0x44893d000000	           mov dword [0x040078af], r15d 	      1940	fold.c	FUNCTION_56	IF_3	IF_7
0x40078af	          0x4885ed	                           test rbp, rbp	      1942	fold.c	FUNCTION_56	IF_3	IF_8
0x40078b2	     0xf84d0feffff	                            je 0x4007788	      1942	fold.c	FUNCTION_56	IF_3	IF_8
0x40078b8	         0xfb64500	                   movzx eax, byte [rbp]	      1946	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1
0x40078bc	            0x84c0	                             test al, al	      1946	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1
0x40078be	     0xf84fdfeffff	                            je 0x40077c1	      1946	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1
0x40078c4	          0x4889eb	                            mov rbx, rbp	      1946	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1
0x40078c7	            0xeb1d	                           jmp 0x40078e6	      1946	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1
0x40078c9	     0xf1f80000000	                         nop dword [rax]	      1946	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1
0x40078d0	          0xc60320	                    mov byte [rbx], 0x20	      1960	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_1	IF_11
0x40078d3	          0x4889d8	                            mov rax, rbx	      1960	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_1	IF_11
0x40078d6	        0x488d5801	                      lea rbx, [rax + 1]	      1946	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1
0x40078da	         0xfb64001	               movzx eax, byte [rax + 1]	      1946	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1
0x40078de	            0x84c0	                             test al, al	      1946	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1
0x40078e0	     0xf84dbfeffff	                            je 0x40077c1	      1946	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1
0x40078e6	    0x8b0d00000000	            mov ecx, dword [0x040078ec] 	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x40078ec	            0x85c9	                           test ecx, ecx	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x40078ee	            0x7520	                           jne 0x4007910	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x40078f0	            0x3c09	                               cmp al, 9	      1959	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_1	IF_11
0x40078f2	            0x74dc	                            je 0x40078d0	      1959	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_1	IF_11
0x40078f4	          0x4889df	                            mov rdi, rbx	      1961	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_2	IF_12	CALL_10
0x40078f7	      0xe800000000	                          call 0x40078fc	      1961	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_2	IF_12	CALL_10
0x40078fc	          0x83f801	                              cmp eax, 1	      1961	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_2	IF_12	CALL_10
0x40078ff	            0x7f4f	                            jg 0x4007950	      1961	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_2	IF_12	CALL_10
0x4007901	          0x4889d8	                            mov rax, rbx	      1961	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_2	IF_12	CALL_10
0x4007904	            0xebd0	                           jmp 0x40078d6	      1961	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_2	IF_12	CALL_10
0x4007906	    0x662e0f1f8400	                 nop word cs:[rax + rax]	      1961	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_2	IF_12	CALL_10
0x4007910	          0x4889df	                            mov rdi, rbx	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x4007913	    0xff1500000000	                 call qword [0x04007919]	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x4007919	          0x4c63f8	                         movsxd r15, eax	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x400791c	        0x4183ff01	                             cmp r15d, 1	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x4007920	            0x7f0e	                            jg 0x4007930	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x4007922	           0xfb603	                   movzx eax, byte [rbx]	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x4007925	            0xebc9	                           jmp 0x40078f0	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x4007927	    0x660f1f840000	                    nop word [rax + rax]	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x4007930	          0x4889df	                            mov rdi, rbx	      1953	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9	IF_10	CALL_9
0x4007933	    0xff1500000000	                 call qword [0x04007939]	      1953	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9	IF_10	CALL_9
0x4007939	            0x89c7	                            mov edi, eax	      1953	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9	IF_10	CALL_9
0x400793b	      0xe800000000	                          call 0x4007940	      1953	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9	IF_10	CALL_9
0x4007940	            0x85c0	                           test eax, eax	      1953	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9	IF_10	CALL_9
0x4007942	            0x740c	                            je 0x4007950	      1953	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9	IF_10	CALL_9
0x4007944	      0x4a8d443bff	                lea rax, [rbx + r15 - 1]	      1955	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x4007949	            0xeb8b	                           jmp 0x40078d6	      1955	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x400794b	       0xf1f440000	                   nop dword [rax + rax]	      1955	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x4007950	          0x803b00	                       cmp byte [rbx], 0	      1964	fold.c	FUNCTION_56	IF_3	IF_8	IF_13
0x4007953	     0xf8468feffff	                            je 0x40077c1	      1964	fold.c	FUNCTION_56	IF_3	IF_8	IF_13
0x4007959	          0x4889ef	                            mov rdi, rbp	      1966	fold.c	FUNCTION_56	IF_3	IF_8	IF_13	CALL_11
0x400795c	      0xe800000000	                          call 0x4007961	      1966	fold.c	FUNCTION_56	IF_3	IF_8	IF_13	CALL_11
0x4007961	          0x4889ef	                            mov rdi, rbp	      1967	fold.c	FUNCTION_56	IF_3	IF_8	IF_13	CALL_12
0x4007964	          0x4889c3	                            mov rbx, rax	      1966	fold.c	FUNCTION_56	IF_3	IF_8	IF_13	CALL_11
0x4007967	      0xe800000000	                          call 0x400796c	      1967	fold.c	FUNCTION_56	IF_3	IF_8	IF_13	CALL_12
0x400796c	          0x4885db	                           test rbx, rbx	      1972	fold.c	FUNCTION_56	IF_14
0x400796f	     0xf8413feffff	                            je 0x4007788	      1972	fold.c	FUNCTION_56	IF_14
0x4007975	          0x4889dd	                            mov rbp, rbx	      1972	fold.c	FUNCTION_56	IF_14
0x4007978	      0xe944feffff	                           jmp 0x40077c1	      1972	fold.c	FUNCTION_56	IF_14
0x400797d	           0xf1f00	                         nop dword [rax]	      1972	fold.c	FUNCTION_56	IF_14
0x4007980	    0x488b0d000000	            mov rcx, qword [0x04007987] 	      1920	fold.c	FUNCTION_56	IF_3	IF_5
0x4007987	        0x488b4308	                mov rax, qword [rbx + 8]	      1922	fold.c	FUNCTION_56	IF_3	IF_5
0x400798b	      0xbe04000000	                              mov esi, 4	      1925	fold.c	FUNCTION_56	IF_3	IF_5	CALL_6
0x4007990	      0xbf00000000	                              mov edi, 0	      1925	fold.c	FUNCTION_56	IF_3	IF_5	CALL_6
0x4007995	    0x830500000000	               add dword [0x0400799c], 1	      1924	fold.c	FUNCTION_56	IF_3	IF_5
0x400799c	    0x48891d000000	            mov qword [0x040079a3], rbx 	      1921	fold.c	FUNCTION_56	IF_3	IF_5
0x40079a3	      0x48894c2408	                mov qword [rsp + 8], rcx	      1920	fold.c	FUNCTION_56	IF_3	IF_5
0x40079a8	    0x488905000000	            mov qword [0x040079af], rax 	      1922	fold.c	FUNCTION_56	IF_3	IF_5
0x40079af	      0xe800000000	                          call 0x40079b4	      1925	fold.c	FUNCTION_56	IF_3	IF_5	CALL_6
0x40079b4	    0x488bbb200200	           mov rdi, qword [rbx + 0x220] 	      1925	fold.c	FUNCTION_56	IF_3	IF_5	CALL_6
0x40079bb	            0x31f6	                            xor esi, esi	      1925	fold.c	FUNCTION_56	IF_3	IF_5	CALL_6
0x40079bd	            0x89c2	                            mov edx, eax	      1925	fold.c	FUNCTION_56	IF_3	IF_5	CALL_6
0x40079bf	      0xe800000000	                          call 0x40079c4	      1925	fold.c	FUNCTION_56	IF_3	IF_5	CALL_6
0x40079c4	    0x832d00000000	               sub dword [0x040079cb], 1	      1927	fold.c	FUNCTION_56	IF_3	IF_5
0x40079cb	          0x4885c0	                           test rax, rax	      1929	fold.c	FUNCTION_56	IF_3	IF_5	IF_6
0x40079ce	          0x4889c5	                            mov rbp, rax	      1925	fold.c	FUNCTION_56	IF_3	IF_5	CALL_6
0x40079d1	      0x488b4c2408	                mov rcx, qword [rsp + 8]	      1929	fold.c	FUNCTION_56	IF_3	IF_5	IF_6
0x40079d6	            0x740a	                            je 0x40079e2	      1929	fold.c	FUNCTION_56	IF_3	IF_5	IF_6
0x40079d8	    0x8b3d00000000	            mov edi, dword [0x040079de] 	      1929	fold.c	FUNCTION_56	IF_3	IF_5	IF_6
0x40079de	            0x85ff	                           test edi, edi	      1929	fold.c	FUNCTION_56	IF_3	IF_5	IF_6
0x40079e0	            0x745e	                            je 0x4007a40	      1929	fold.c	FUNCTION_56	IF_3	IF_5	IF_6
0x40079e2	        0x488b4108	                mov rax, qword [rcx + 8]	      1933	fold.c	FUNCTION_56	IF_3	IF_5
0x40079e6	            0x31f6	                            xor esi, esi	      1937	fold.c	FUNCTION_56	IF_3	CALL_8
0x40079e8	      0xbaffffffff	                     mov edx, 0xffffffff	      1937	fold.c	FUNCTION_56	IF_3	CALL_8
0x40079ed	      0xbf18000000	                           mov edi, 0x18	      1937	fold.c	FUNCTION_56	IF_3	CALL_8
0x40079f2	    0xc70500000000	               mov dword [0x040079fc], 1	      1930	fold.c	FUNCTION_56	IF_3	IF_5	IF_6
0x40079fc	    0x48890d000000	            mov qword [0x04007a03], rcx 	      1932	fold.c	FUNCTION_56	IF_3	IF_5
0x4007a03	    0x4c892d000000	            mov qword [0x04007a0a], r13 	      1935	fold.c	FUNCTION_56	IF_3
0x4007a0a	    0x48891d000000	            mov qword [0x04007a11], rbx 	      1936	fold.c	FUNCTION_56	IF_3
0x4007a11	    0x488905000000	            mov qword [0x04007a18], rax 	      1933	fold.c	FUNCTION_56	IF_3	IF_5
0x4007a18	      0xe800000000	                          call 0x4007a1d	      1937	fold.c	FUNCTION_56	IF_3	CALL_8
0x4007a1d	    0x8b3500000000	            mov esi, dword [0x04007a23] 	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x4007a23	            0x85f6	                           test esi, esi	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x4007a25	     0xf8584feffff	                           jne 0x40078af	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x4007a2b	          0x4585ff	                         test r15d, r15d	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x4007a2e	     0xf847bfeffff	                            je 0x40078af	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x4007a34	      0xe96ffeffff	                           jmp 0x40078a8	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x4007a39	     0xf1f80000000	                         nop dword [rax]	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x4007a40	        0x488b4108	                mov rax, qword [rcx + 8]	      1933	fold.c	FUNCTION_56	IF_3	IF_5
0x4007a44	            0x31f6	                            xor esi, esi	      1937	fold.c	FUNCTION_56	IF_3	CALL_8
0x4007a46	      0xbaffffffff	                     mov edx, 0xffffffff	      1937	fold.c	FUNCTION_56	IF_3	CALL_8
0x4007a4b	      0xbf18000000	                           mov edi, 0x18	      1937	fold.c	FUNCTION_56	IF_3	CALL_8
0x4007a50	    0x48890d000000	            mov qword [0x04007a57], rcx 	      1932	fold.c	FUNCTION_56	IF_3	IF_5
0x4007a57	    0x4c892d000000	            mov qword [0x04007a5e], r13 	      1935	fold.c	FUNCTION_56	IF_3
0x4007a5e	    0x48891d000000	            mov qword [0x04007a65], rbx 	      1936	fold.c	FUNCTION_56	IF_3
0x4007a65	    0x488905000000	            mov qword [0x04007a6c], rax 	      1933	fold.c	FUNCTION_56	IF_3	IF_5
0x4007a6c	      0xe800000000	                          call 0x4007a71	      1937	fold.c	FUNCTION_56	IF_3	CALL_8
0x4007a71	    0x8b0500000000	            mov eax, dword [0x04007a77] 	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x4007a77	            0x85c0	                           test eax, eax	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x4007a79	     0xf8539feffff	                           jne 0x40078b8	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x4007a7f	          0x4585ff	                         test r15d, r15d	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x4007a82	     0xf8520feffff	                           jne 0x40078a8	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x4007a88	      0xe92bfeffff	                           jmp 0x40078b8	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x4007a8d	           0xf1f00	                         nop dword [rax]	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x4007a90	      0xe800000000	                          call 0x4007a95	      1984	fold.c	FUNCTION_56
openFold	WHILE,0:functions,0:ELSE,0:DO,0:FOR,0:SWITCH,0:IF,0:CALL,1	2
0x40067a0	      0xba01000000	                              mov edx, 1	       426	fold.c	FUNCTION_17	CALL_1
0x40067a5	      0xe996feffff	                   jmp sym.setFoldRepeat	       426	fold.c	FUNCTION_17	CALL_1
opFoldRange	WHILE,0:functions,0:ELSE,0:DO,0:FOR,1:SWITCH,0:IF,4:CALL,6	131
0x4006e60	            0x4157	                                push r15	       393	fold.c	FUNCTION_16
0x4006e62	            0x4156	                                push r14	       393	fold.c	FUNCTION_16
0x4006e64	            0x4155	                                push r13	       393	fold.c	FUNCTION_16
0x4006e66	            0x4154	                                push r12	       393	fold.c	FUNCTION_16
0x4006e68	              0x55	                                push rbp	       393	fold.c	FUNCTION_16
0x4006e69	              0x53	                                push rbx	       393	fold.c	FUNCTION_16
0x4006e6a	        0x4883ec38	                           sub rsp, 0x38	       393	fold.c	FUNCTION_16
0x4006e6e	    0x64488b042528	                mov rax, qword fs:[0x28]	       393	fold.c	FUNCTION_16
0x4006e77	      0x4889442428	             mov qword [rsp + 0x28], rax	       393	fold.c	FUNCTION_16
0x4006e7c	            0x31c0	                            xor eax, eax	       393	fold.c	FUNCTION_16
0x4006e7e	          0x4839f7	                            cmp rdi, rsi	       398	fold.c	FUNCTION_16	FOR_1
0x4006e81	      0x448944240c	              mov dword [rsp + 0xc], r8d	       393	fold.c	FUNCTION_16
0x4006e86	    0xc744241c0000	               mov dword [rsp + 0x1c], 0	       394	fold.c	FUNCTION_16
0x4006e8e	     0xf8f94010000	                            jg 0x4007028	       398	fold.c	FUNCTION_16	FOR_1
0x4006e94	            0x85d2	                           test edx, edx	       398	fold.c	FUNCTION_16	FOR_1
0x4006e96	          0x4189d6	                           mov r14d, edx	       398	fold.c	FUNCTION_16	FOR_1
0x4006e99	          0x4989ff	                            mov r15, rdi	       398	fold.c	FUNCTION_16	FOR_1
0x4006e9c	        0x410f95c4	                              setne r12b	       398	fold.c	FUNCTION_16	FOR_1
0x4006ea0	            0x85c9	                           test ecx, ecx	       398	fold.c	FUNCTION_16	FOR_1
0x4006ea2	          0x4989f5	                            mov r13, rsi	       398	fold.c	FUNCTION_16	FOR_1
0x4006ea5	           0xf94c0	                                 sete al	       398	fold.c	FUNCTION_16	FOR_1
0x4006ea8	            0x89d5	                            mov ebp, edx	       398	fold.c	FUNCTION_16	FOR_1
0x4006eaa	            0x89cb	                            mov ebx, ecx	       398	fold.c	FUNCTION_16	FOR_1
0x4006eac	          0x4121c4	                           and r12d, eax	       398	fold.c	FUNCTION_16	FOR_1
0x4006eaf	          0x4109ce	                            or r14d, ecx	       398	fold.c	FUNCTION_16	FOR_1
0x4006eb2	            0xeb30	                           jmp 0x4006ee4	       398	fold.c	FUNCTION_16	FOR_1
0x4006eb4	         0xf1f4000	                         nop dword [rax]	       398	fold.c	FUNCTION_16	FOR_1
0x4006eb8	      0x4c8d44241c	                    lea r8, [rsp + 0x1c]	      1253	fold.c	FUNCTION_40	CALL_2
0x4006ebd	            0x89d9	                            mov ecx, ebx	      1253	fold.c	FUNCTION_40	CALL_2
0x4006ebf	            0x89ea	                            mov edx, ebp	      1253	fold.c	FUNCTION_40	CALL_2
0x4006ec1	          0x4c89fe	                            mov rsi, r15	      1253	fold.c	FUNCTION_40	CALL_2
0x4006ec4	      0xe8d7f3ffff	               call sym.setManualFoldWin	      1253	fold.c	FUNCTION_40	CALL_2
0x4006ec9	          0x4585f6	                         test r14d, r14d	       408	fold.c	FUNCTION_16	FOR_1	IF_2
0x4006ecc	     0xf84e6000000	                            je 0x4006fb8	       408	fold.c	FUNCTION_16	FOR_1	IF_2
0x4006ed2	      0x488b442420	            mov rax, qword [rsp + 0x20] 	       398	fold.c	FUNCTION_16	FOR_1
0x4006ed7	        0x4c8d7801	                      lea r15, [rax + 1]	       398	fold.c	FUNCTION_16	FOR_1
0x4006edb	          0x4d39fd	                            cmp r13, r15	       398	fold.c	FUNCTION_16	FOR_1
0x4006ede	     0xf8c05010000	                            jl 0x4006fe9	       398	fold.c	FUNCTION_16	FOR_1
0x4006ee4	          0x4584e4	                         test r12b, r12b	       403	fold.c	FUNCTION_16	FOR_1	IF_1
0x4006ee7	      0x4c897c2420	             mov qword [rsp + 0x20], r15	       400	fold.c	FUNCTION_16	FOR_1
0x4006eec	     0xf859e000000	                           jne 0x4006f90	       403	fold.c	FUNCTION_16	FOR_1	IF_1
0x4006ef2	    0x488b3d000000	            mov rdi, qword [0x04006ef9] 	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x4006ef9	    0x488b87f80100	           mov rax, qword [rdi + 0x1f8] 	       357	fold.c	FUNCTION_13
0x4006f00	          0x803864	                    cmp byte [rax], 0x64	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x4006f03	            0x75b3	                           jne 0x4006eb8	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x4006f05	    0x8bb788020000	           mov esi, dword [rdi + 0x288] 	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x4006f0b	            0x85f6	                           test esi, esi	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x4006f0d	            0x74a9	                            je 0x4006eb8	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x4006f0f	    0x4c8b0d000000	              mov r9, qword [0x04006f16]	      1241	fold.c	FUNCTION_40	IF_1
0x4006f16	          0x4d85c9	                             test r9, r9	      1241	fold.c	FUNCTION_40	IF_1
0x4006f19	            0x750e	                           jne 0x4006f29	      1241	fold.c	FUNCTION_40	IF_1
0x4006f1b	            0xeb9b	                           jmp 0x4006eb8	      1241	fold.c	FUNCTION_40	IF_1
0x4006f1d	           0xf1f00	                         nop dword [rax]	      1241	fold.c	FUNCTION_40	IF_1
0x4006f20	        0x4d8b4920	               mov r9, qword [r9 + 0x20]	      1241	fold.c	FUNCTION_40	IF_1
0x4006f24	          0x4d85c9	                             test r9, r9	      1241	fold.c	FUNCTION_40	IF_1
0x4006f27	            0x748f	                            je 0x4006eb8	      1241	fold.c	FUNCTION_40	IF_1
0x4006f29	          0x4939f9	                             cmp r9, rdi	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x4006f2c	            0x74f2	                            je 0x4006f20	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x4006f2e	    0x498b81f80100	            mov rax, qword [r9 + 0x1f8] 	       357	fold.c	FUNCTION_13
0x4006f35	          0x803864	                    cmp byte [rax], 0x64	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x4006f38	            0x75e6	                           jne 0x4006f20	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x4006f3a	    0x418b89880200	            mov ecx, dword [r9 + 0x288] 	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x4006f41	            0x85c9	                           test ecx, ecx	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x4006f43	            0x74db	                            je 0x4006f20	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x4006f45	        0x488b7f38	            mov rdi, qword [rdi + 0x38] 	      1245	fold.c	FUNCTION_40	FUNCTION_1	CALL_2
0x4006f49	          0x4c89ce	                             mov rsi, r9	      1245	fold.c	FUNCTION_40	FUNCTION_1	CALL_2
0x4006f4c	        0x4c890c24	                     mov qword [rsp], r9	      1245	fold.c	FUNCTION_40	FUNCTION_1	CALL_2
0x4006f50	      0xe800000000	                          call 0x4006f55	      1245	fold.c	FUNCTION_40	FUNCTION_1	CALL_2
0x4006f55	          0x4885c0	                           test rax, rax	      1246	fold.c	FUNCTION_40	FUNCTION_1	IF_2
0x4006f58	    0x488b3d000000	            mov rdi, qword [0x04006f5f] 	      1246	fold.c	FUNCTION_40	FUNCTION_1	IF_2
0x4006f5f	        0x4c8b0c24	                     mov r9, qword [rsp]	      1246	fold.c	FUNCTION_40	FUNCTION_1	IF_2
0x4006f63	            0x74bb	                            je 0x4006f20	      1246	fold.c	FUNCTION_40	FUNCTION_1	IF_2
0x4006f65	          0x4c89cf	                             mov rdi, r9	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x4006f68	          0x4531c0	                            xor r8d, r8d	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x4006f6b	            0x89d9	                            mov ecx, ebx	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x4006f6d	            0x89ea	                            mov edx, ebp	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x4006f6f	          0x4889c6	                            mov rsi, rax	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x4006f72	        0x4c890c24	                     mov qword [rsp], r9	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x4006f76	      0xe825f3ffff	               call sym.setManualFoldWin	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x4006f7b	    0x488b3d000000	            mov rdi, qword [0x04006f82] 	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x4006f82	        0x4c8b0c24	                     mov r9, qword [rsp]	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x4006f86	            0xeb98	                           jmp 0x4006f20	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x4006f88	     0xf1f84000000	                   nop dword [rax + rax]	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x4006f90	    0x488b3d000000	            mov rdi, qword [0x04006f97] 	       132	fold.c	FUNCTION_3	CALL_1
0x4006f97	      0x488d4c2420	                   lea rcx, [rsp + 0x20]	       132	fold.c	FUNCTION_3	CALL_1
0x4006f9c	          0x4531c9	                            xor r9d, r9d	       132	fold.c	FUNCTION_3	CALL_1
0x4006f9f	    0x41b801000000	                              mov r8d, 1	       132	fold.c	FUNCTION_3	CALL_1
0x4006fa5	            0x31d2	                            xor edx, edx	       132	fold.c	FUNCTION_3	CALL_1
0x4006fa7	          0x4c89fe	                            mov rsi, r15	       132	fold.c	FUNCTION_3	CALL_1
0x4006faa	      0xe800000000	                          call 0x4006faf	       132	fold.c	FUNCTION_3	CALL_1
0x4006faf	      0xe93effffff	                           jmp 0x4006ef2	       132	fold.c	FUNCTION_3	CALL_1
0x4006fb4	         0xf1f4000	                         nop dword [rax]	       132	fold.c	FUNCTION_3	CALL_1
0x4006fb8	    0x488b3d000000	            mov rdi, qword [0x04006fbf] 	       132	fold.c	FUNCTION_3	CALL_1
0x4006fbf	      0x488d4c2420	                   lea rcx, [rsp + 0x20]	       132	fold.c	FUNCTION_3	CALL_1
0x4006fc4	          0x4531c9	                            xor r9d, r9d	       132	fold.c	FUNCTION_3	CALL_1
0x4006fc7	            0x31d2	                            xor edx, edx	       132	fold.c	FUNCTION_3	CALL_1
0x4006fc9	          0x4c89fe	                            mov rsi, r15	       132	fold.c	FUNCTION_3	CALL_1
0x4006fcc	    0x41b801000000	                              mov r8d, 1	       132	fold.c	FUNCTION_3	CALL_1
0x4006fd2	      0xe800000000	                          call 0x4006fd7	       132	fold.c	FUNCTION_3	CALL_1
0x4006fd7	      0x488b442420	            mov rax, qword [rsp + 0x20] 	       398	fold.c	FUNCTION_16	FOR_1
0x4006fdc	        0x4c8d7801	                      lea r15, [rax + 1]	       398	fold.c	FUNCTION_16	FOR_1
0x4006fe0	          0x4d39fd	                            cmp r13, r15	       398	fold.c	FUNCTION_16	FOR_1
0x4006fe3	     0xf8dfbfeffff	                           jge 0x4006ee4	       398	fold.c	FUNCTION_16	FOR_1
0x4006fe9	        0x8b54241c	            mov edx, dword [rsp + 0x1c] 	       411	fold.c	FUNCTION_16	IF_3
0x4006fed	            0x85d2	                           test edx, edx	       411	fold.c	FUNCTION_16	IF_3
0x4006fef	            0x7437	                            je 0x4007028	       411	fold.c	FUNCTION_16	IF_3
0x4006ff1	        0x8b44240c	              mov eax, dword [rsp + 0xc]	       414	fold.c	FUNCTION_16	IF_4
0x4006ff5	            0x85c0	                           test eax, eax	       414	fold.c	FUNCTION_16	IF_4
0x4006ff7	            0x740a	                            je 0x4007003	       414	fold.c	FUNCTION_16	IF_4
0x4006ff9	      0xbf14000000	                           mov edi, 0x14	       415	fold.c	FUNCTION_16	CALL_6
0x4006ffe	      0xe800000000	                          call 0x4007003	       415	fold.c	FUNCTION_16	CALL_6
0x4007003	      0x488b442428	            mov rax, qword [rsp + 0x28] 	       416	fold.c	FUNCTION_16
0x4007008	    0x644833042528	                xor rax, qword fs:[0x28]	       416	fold.c	FUNCTION_16
0x4007011	            0x7530	                           jne 0x4007043	       416	fold.c	FUNCTION_16
0x4007013	        0x4883c438	                           add rsp, 0x38	       416	fold.c	FUNCTION_16
0x4007017	              0x5b	                                 pop rbx	       416	fold.c	FUNCTION_16
0x4007018	              0x5d	                                 pop rbp	       416	fold.c	FUNCTION_16
0x4007019	            0x415c	                                 pop r12	       416	fold.c	FUNCTION_16
0x400701b	            0x415d	                                 pop r13	       416	fold.c	FUNCTION_16
0x400701d	            0x415e	                                 pop r14	       416	fold.c	FUNCTION_16
0x400701f	            0x415f	                                 pop r15	       416	fold.c	FUNCTION_16
0x4007021	              0xc3	                                     ret	       416	fold.c	FUNCTION_16
0x4007022	    0x660f1f440000	                    nop word [rax + rax]	       416	fold.c	FUNCTION_16
0x4007028	            0x31ff	                            xor edi, edi	       412	fold.c	FUNCTION_16	CALL_5
0x400702a	      0xba05000000	                              mov edx, 5	       412	fold.c	FUNCTION_16	CALL_5
0x400702f	      0xbe00000000	                              mov esi, 0	       412	fold.c	FUNCTION_16	CALL_5
0x4007034	      0xe800000000	                          call 0x4007039	       412	fold.c	FUNCTION_16	CALL_5
0x4007039	          0x4889c7	                            mov rdi, rax	       412	fold.c	FUNCTION_16	CALL_5
0x400703c	      0xe800000000	                          call 0x4007041	       412	fold.c	FUNCTION_16	CALL_5
0x4007041	            0xebae	                           jmp 0x4006ff1	       412	fold.c	FUNCTION_16	CALL_5
0x4007043	      0xe800000000	                          call 0x4007048	       416	fold.c	FUNCTION_16
copyFoldingState	WHILE,0:functions,0:ELSE,0:DO,0:FOR,0:SWITCH,0:IF,0:CALL,1	31
0x4002b50	              0x55	                                push rbp	       104	fold.c	FUNCTION_1
0x4002b51	              0x53	                                push rbx	       104	fold.c	FUNCTION_1
0x4002b52	    0x488dae080100	                  lea rbp, [rsi + 0x108]	       107	fold.c	FUNCTION_1	CALL_1
0x4002b59	          0x4889fb	                            mov rbx, rdi	       104	fold.c	FUNCTION_1
0x4002b5c	        0x4883ec08	                              sub rsp, 8	       104	fold.c	FUNCTION_1
0x4002b60	     0xfb687200100	          movzx eax, byte [rdi + 0x120] 	       105	fold.c	FUNCTION_1
0x4002b67	    0x888620010000	              mov byte [rsi + 0x120], al	       105	fold.c	FUNCTION_1
0x4002b6d	     0xfb687210100	          movzx eax, byte [rdi + 0x121] 	       106	fold.c	FUNCTION_1
0x4002b74	    0x888621010000	              mov byte [rsi + 0x121], al	       106	fold.c	FUNCTION_1
0x4002b7a	    0x8bb710010000	           mov esi, dword [rdi + 0x110] 	      1091	fold.c	FUNCTION_35	CALL_1
0x4002b80	    0x8b9714010000	           mov edx, dword [rdi + 0x114] 	      1091	fold.c	FUNCTION_35	CALL_1
0x4002b86	          0x4889ef	                            mov rdi, rbp	      1091	fold.c	FUNCTION_35	CALL_1
0x4002b89	      0xe800000000	                          call 0x4002b8e	      1091	fold.c	FUNCTION_35	CALL_1
0x4002b8e	    0x8bb308010000	           mov esi, dword [rbx + 0x108] 	      1092	fold.c	FUNCTION_35	IF_1	CALL_2
0x4002b94	            0x85f6	                           test esi, esi	      1092	fold.c	FUNCTION_35	IF_1	CALL_2
0x4002b96	            0x7508	                           jne 0x4002ba0	      1092	fold.c	FUNCTION_35	IF_1	CALL_2
0x4002b98	        0x4883c408	                              add rsp, 8	       108	fold.c	FUNCTION_1
0x4002b9c	              0x5b	                                 pop rbx	       108	fold.c	FUNCTION_1
0x4002b9d	              0x5d	                                 pop rbp	       108	fold.c	FUNCTION_1
0x4002b9e	              0xc3	                                     ret	       108	fold.c	FUNCTION_1
0x4002b9f	              0x90	                                     nop	       108	fold.c	FUNCTION_1
0x4002ba0	          0x4889ef	                            mov rdi, rbp	      1092	fold.c	FUNCTION_35	IF_1	CALL_2
0x4002ba3	      0xe800000000	                          call 0x4002ba8	      1092	fold.c	FUNCTION_35	IF_1	CALL_2
0x4002ba8	            0x85c0	                           test eax, eax	      1092	fold.c	FUNCTION_35	IF_1	CALL_2
0x4002baa	            0x74ec	                            je 0x4002b98	      1092	fold.c	FUNCTION_35	IF_1	CALL_2
0x4002bac	        0x4883c408	                              add rsp, 8	       108	fold.c	FUNCTION_1
0x4002bb0	    0x488dbb080100	                  lea rdi, [rbx + 0x108]	       107	fold.c	FUNCTION_1	CALL_1
0x4002bb7	          0x4889ee	                            mov rsi, rbp	       107	fold.c	FUNCTION_1	CALL_1
0x4002bba	              0x5b	                                 pop rbx	       108	fold.c	FUNCTION_1
0x4002bbb	              0x5d	                                 pop rbp	       108	fold.c	FUNCTION_1
0x4002bbc	      0xe93fe6ffff	      jmp sym.cloneFoldGrowArray.part.14	       108	fold.c	FUNCTION_1
foldlevelExpr	WHILE,0:functions,0:ELSE,2:DO,0:FOR,0:SWITCH,1:IF,8:CALL,2	123
0x40005c0	            0x4155	                                push r13	      3255	fold.c	ELSE_1	FUNCTION_69
0x40005c2	            0x4154	                                push r12	      3255	fold.c	ELSE_1	FUNCTION_69
0x40005c4	              0x55	                                push rbp	      3255	fold.c	ELSE_1	FUNCTION_69
0x40005c5	              0x53	                                push rbx	      3255	fold.c	ELSE_1	FUNCTION_69
0x40005c6	          0x4889fb	                            mov rbx, rdi	      3255	fold.c	ELSE_1	FUNCTION_69
0x40005c9	        0x4883ec18	                           sub rsp, 0x18	      3255	fold.c	ELSE_1	FUNCTION_69
0x40005cd	        0x488b6f10	            mov rbp, qword [rdi + 0x10] 	      3263	fold.c	ELSE_1	FUNCTION_69
0x40005d1	        0x48036f08	                add rbp, qword [rdi + 8]	      3263	fold.c	ELSE_1	FUNCTION_69
0x40005d5	    0x64488b042528	                mov rax, qword fs:[0x28]	      3255	fold.c	ELSE_1	FUNCTION_69
0x40005de	      0x4889442408	                mov qword [rsp + 8], rax	      3255	fold.c	ELSE_1	FUNCTION_69
0x40005e3	            0x31c0	                            xor eax, eax	      3255	fold.c	ELSE_1	FUNCTION_69
0x40005e5	          0x488b07	                    mov rax, qword [rdi]	      3267	fold.c	ELSE_1	FUNCTION_69
0x40005e8	    0x4c8b25000000	            mov r12, qword [0x040005ef] 	      3266	fold.c	ELSE_1	FUNCTION_69
0x40005ef	      0xbf09000000	                              mov edi, 9	      3269	fold.c	ELSE_1	FUNCTION_69	CALL_1
0x40005f4	          0x4889ee	                            mov rsi, rbp	      3269	fold.c	ELSE_1	FUNCTION_69	CALL_1
0x40005f7	    0x488905000000	            mov qword [0x040005fe], rax 	      3267	fold.c	ELSE_1	FUNCTION_69
0x40005fe	        0x488b4008	                mov rax, qword [rax + 8]	      3268	fold.c	ELSE_1	FUNCTION_69
0x4000602	    0x488905000000	            mov qword [0x04000609], rax 	      3268	fold.c	ELSE_1	FUNCTION_69
0x4000609	      0xe800000000	                          call 0x400060e	      3269	fold.c	ELSE_1	FUNCTION_69	CALL_1
0x400060e	          0x8b432c	            mov eax, dword [rbx + 0x2c] 	      3272	fold.c	ELSE_1	FUNCTION_69
0x4000611	        0x4883fd01	                              cmp rbp, 1	      3274	fold.c	ELSE_1	FUNCTION_69	IF_1
0x4000615	    0xc74328000000	               mov dword [rbx + 0x28], 0	      3271	fold.c	ELSE_1	FUNCTION_69
0x400061c	    0xc7432c150000	           mov dword [rbx + 0x2c], 0x15 	      3273	fold.c	ELSE_1	FUNCTION_69
0x4000623	          0x894330	             mov dword [rbx + 0x30], eax	      3272	fold.c	ELSE_1	FUNCTION_69
0x4000626	     0xf8eb4000000	                           jle 0x40006e0	      3274	fold.c	ELSE_1	FUNCTION_69	IF_1
0x400062c	          0x488b03	                    mov rax, qword [rbx]	      3280	fold.c	ELSE_1	FUNCTION_69	CALL_2
0x400062f	      0x488d742404	                      lea rsi, [rsp + 4]	      3280	fold.c	ELSE_1	FUNCTION_69	CALL_2
0x4000634	    0x448b2d000000	           mov r13d, dword [0x0400063b] 	      3279	fold.c	ELSE_1	FUNCTION_69
0x400063b	    0x488bb8180200	           mov rdi, qword [rax + 0x218] 	      3280	fold.c	ELSE_1	FUNCTION_69	CALL_2
0x4000642	      0xe800000000	                          call 0x4000647	      3280	fold.c	ELSE_1	FUNCTION_69	CALL_2
0x4000647	        0x8b542404	                mov edx, dword [rsp + 4]	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x400064b	    0x44892d000000	           mov dword [0x04000652], r13d 	      3281	fold.c	ELSE_1	FUNCTION_69
0x4000652	          0x83fa3e	                           cmp edx, 0x3e	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x4000655	     0xf8415010000	                            je 0x4000770	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x400065b	            0x7f53	                            jg 0x40006b0	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x400065d	          0x83fa3c	                           cmp edx, 0x3c	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x4000660	     0xf84d2000000	                            je 0x4000738	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x4000666	          0x83fa3d	                           cmp edx, 0x3d	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x4000669	     0xf8581000000	                           jne 0x40006f0	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x400066f	          0x8b5320	            mov edx, dword [rbx + 0x20] 	      3317	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x4000672	          0x895324	             mov dword [rbx + 0x24], edx	      3317	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x4000675	            0x85d2	                           test edx, edx	      3333	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6
0x4000677	     0xf8893000000	                            js 0x4000710	      3333	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6
0x400067d	      0x498b442408	                mov rax, qword [r12 + 8]	      3345	fold.c	FUNCTION_69	ELSE_1
0x4000682	    0x4c8925000000	            mov qword [0x04000689], r12 	      3344	fold.c	FUNCTION_69	ELSE_1
0x4000689	    0x488905000000	            mov qword [0x04000690], rax 	      3345	fold.c	FUNCTION_69	ELSE_1
0x4000690	      0x488b442408	                mov rax, qword [rsp + 8]	      3347	fold.c	FUNCTION_69	ELSE_1
0x4000695	    0x644833042528	                xor rax, qword fs:[0x28]	      3347	fold.c	FUNCTION_69	ELSE_1
0x400069e	     0xf8514010000	                           jne 0x40007b8	      3347	fold.c	FUNCTION_69	ELSE_1
0x40006a4	        0x4883c418	                           add rsp, 0x18	      3347	fold.c	FUNCTION_69	ELSE_1
0x40006a8	              0x5b	                                 pop rbx	      3347	fold.c	FUNCTION_69	ELSE_1
0x40006a9	              0x5d	                                 pop rbp	      3347	fold.c	FUNCTION_69	ELSE_1
0x40006aa	            0x415c	                                 pop r12	      3347	fold.c	FUNCTION_69	ELSE_1
0x40006ac	            0x415d	                                 pop r13	      3347	fold.c	FUNCTION_69	ELSE_1
0x40006ae	              0xc3	                                     ret	      3347	fold.c	FUNCTION_69	ELSE_1
0x40006af	              0x90	                                     nop	      3347	fold.c	FUNCTION_69	ELSE_1
0x40006b0	          0x83fa61	                           cmp edx, 0x61	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x40006b3	     0xf8497000000	                            je 0x4000750	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x40006b9	          0x83fa73	                           cmp edx, 0x73	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x40006bc	            0x7532	                           jne 0x40006f0	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x40006be	          0x8b5320	            mov edx, dword [rbx + 0x20] 	      3295	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_3
0x40006c1	            0x85d2	                           test edx, edx	      3295	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_3
0x40006c3	            0x784b	                            js 0x4000710	      3295	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_3
0x40006c5	            0x39d0	                            cmp eax, edx	      3297	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_3	IF_4
0x40006c7	     0xf8fd3000000	                            jg 0x40007a0	      3297	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_3	IF_4
0x40006cd	            0x29c2	                            sub edx, eax	      3300	fold.c	FUNCTION_69	SWITCH_1	IF_3	ELSE_1
0x40006cf	          0x8d4201	                      lea eax, [rdx + 1]	      3300	fold.c	FUNCTION_69	SWITCH_1	IF_3	ELSE_1
0x40006d2	          0x895324	             mov dword [rbx + 0x24], edx	      3300	fold.c	FUNCTION_69	SWITCH_1	IF_3	ELSE_1
0x40006d5	          0x89432c	             mov dword [rbx + 0x2c], eax	      3301	fold.c	FUNCTION_69	SWITCH_1	IF_3	ELSE_1
0x40006d8	            0xeba3	                           jmp 0x400067d	      3301	fold.c	FUNCTION_69	SWITCH_1	IF_3	ELSE_1
0x40006da	    0x660f1f440000	                    nop word [rax + rax]	      3301	fold.c	FUNCTION_69	SWITCH_1	IF_3	ELSE_1
0x40006e0	    0xc74320000000	               mov dword [rbx + 0x20], 0	      3275	fold.c	ELSE_1	FUNCTION_69	IF_1
0x40006e7	      0xe940ffffff	                           jmp 0x400062c	      3275	fold.c	ELSE_1	FUNCTION_69	IF_1
0x40006ec	         0xf1f4000	                         nop dword [rax]	      3275	fold.c	ELSE_1	FUNCTION_69	IF_1
0x40006f0	            0x85c0	                           test eax, eax	      3321	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	IF_5
0x40006f2	            0x89c2	                            mov edx, eax	      3321	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	IF_5
0x40006f4	     0xf88b6000000	                            js 0x40007b0	      3321	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	IF_5
0x40006fa	          0x895324	             mov dword [rbx + 0x24], edx	      3321	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	IF_5
0x40006fd	            0x89c2	                            mov edx, eax	      3280	fold.c	ELSE_1	FUNCTION_69	CALL_2
0x40006ff	          0x894320	             mov dword [rbx + 0x20], eax	      3327	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	ELSE_2
0x4000702	            0x85d2	                           test edx, edx	      3333	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6
0x4000704	     0xf8973ffffff	                           jns 0x400067d	      3333	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6
0x400070a	    0x660f1f440000	                    nop word [rax + rax]	      3333	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6
0x4000710	        0x4883fd01	                              cmp rbp, 1	      3335	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_7
0x4000714	            0x7e72	                           jle 0x4000788	      3335	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_7
0x4000716	    0x488b05000000	            mov rax, qword [0x0400071d] 	      3340	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_8
0x400071d	          0x483b28	                    cmp rbp, qword [rax]	      3340	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_8
0x4000720	     0xf8557ffffff	                           jne 0x400067d	      3340	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_8
0x4000726	    0xc74324000000	               mov dword [rbx + 0x24], 0	      3341	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_8
0x400072d	      0xe94bffffff	                           jmp 0x400067d	      3341	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_8
0x4000732	    0x660f1f440000	                    nop word [rax + rax]	      3341	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_8
0x4000738	          0x8d50ff	                      lea edx, [rax - 1]	      3312	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x400073b	          0x89432c	             mov dword [rbx + 0x2c], eax	      3313	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x400073e	          0x895324	             mov dword [rbx + 0x24], edx	      3312	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x4000741	          0x8b5320	            mov edx, dword [rbx + 0x20] 	      3312	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x4000744	      0xe92cffffff	                           jmp 0x4000675	      3314	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x4000749	     0xf1f80000000	                         nop dword [rax]	      3314	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x4000750	          0x8b5320	            mov edx, dword [rbx + 0x20] 	      3286	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x4000753	            0x85d2	                           test edx, edx	      3286	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x4000755	            0x7808	                            js 0x400075f	      3286	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x4000757	             0x1c2	                            add edx, eax	      3288	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x4000759	          0x895320	             mov dword [rbx + 0x20], edx	      3288	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x400075c	          0x895324	             mov dword [rbx + 0x24], edx	      3289	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x400075f	          0x894328	             mov dword [rbx + 0x28], eax	      3291	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x4000762	      0xe90effffff	                           jmp 0x4000675	      3292	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x4000767	    0x660f1f840000	                    nop word [rax + rax]	      3292	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x4000770	          0x894320	             mov dword [rbx + 0x20], eax	      3306	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x4000773	          0x894324	             mov dword [rbx + 0x24], eax	      3307	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x4000776	            0x89c2	                            mov edx, eax	      3280	fold.c	ELSE_1	FUNCTION_69	CALL_2
0x4000778	    0xc74328010000	               mov dword [rbx + 0x28], 1	      3308	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x400077f	      0xe9f1feffff	                           jmp 0x4000675	      3309	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x4000784	         0xf1f4000	                         nop dword [rax]	      3309	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x4000788	    0xc74320000000	               mov dword [rbx + 0x20], 0	      3337	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_7
0x400078f	    0xc74324000000	               mov dword [rbx + 0x24], 0	      3338	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_7
0x4000796	      0xe97bffffff	                           jmp 0x4000716	      3338	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_7
0x400079b	       0xf1f440000	                   nop dword [rax + rax]	      3338	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_7
0x40007a0	      0xb801000000	                              mov eax, 1	      3338	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_7
0x40007a5	            0x31d2	                            xor edx, edx	      3298	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_3	IF_4
0x40007a7	      0xe926ffffff	                           jmp 0x40006d2	      3298	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_3	IF_4
0x40007ac	         0xf1f4000	                         nop dword [rax]	      3298	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_3	IF_4
0x40007b0	          0x8b5320	            mov edx, dword [rbx + 0x20] 	      3324	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	IF_5
0x40007b3	      0xe942ffffff	                           jmp 0x40006fa	      3324	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	IF_5
0x40007b8	      0xe800000000	                          call 0x40007bd	      3347	fold.c	FUNCTION_69	ELSE_1
foldtext_cleanup	WHILE,3:functions,0:ELSE,4:DO,0:FOR,2:SWITCH,0:IF,10:CALL,17	240
0x4007aa0	            0x4157	                                push r15	      1992	fold.c	FUNCTION_57
0x4007aa2	            0x4156	                                push r14	      1992	fold.c	FUNCTION_57
0x4007aa4	          0x4989ff	                            mov r15, rdi	      1992	fold.c	FUNCTION_57
0x4007aa7	            0x4155	                                push r13	      1992	fold.c	FUNCTION_57
0x4007aa9	            0x4154	                                push r12	      1992	fold.c	FUNCTION_57
0x4007aab	              0x55	                                push rbp	      1992	fold.c	FUNCTION_57
0x4007aac	              0x53	                                push rbx	      1992	fold.c	FUNCTION_57
0x4007aad	        0x4883ec48	                           sub rsp, 0x48	      1992	fold.c	FUNCTION_57
0x4007ab1	    0x488b05000000	            mov rax, qword [0x04007ab8] 	      2004	fold.c	FUNCTION_57	CALL_1
0x4007ab8	    0x488bb8501400	          mov rdi, qword [rax + 0x1450] 	      2004	fold.c	FUNCTION_57	CALL_1
0x4007abf	      0xe800000000	                          call 0x4007ac4	      2004	fold.c	FUNCTION_57	CALL_1
0x4007ac4	          0x4889c7	                            mov rdi, rax	      2005	fold.c	FUNCTION_57	CALL_2
0x4007ac7	          0x4889c5	                            mov rbp, rax	      2004	fold.c	FUNCTION_57	CALL_1
0x4007aca	      0xe800000000	                          call 0x4007acf	      2005	fold.c	FUNCTION_57	CALL_2
0x4007acf	            0x85c0	                           test eax, eax	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4007ad1	          0x4189c5	                           mov r13d, eax	      2005	fold.c	FUNCTION_57	CALL_2
0x4007ad4	            0x7e32	                           jle 0x4007b08	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4007ad6	            0x4898	                                    cdqe	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4007ad8	       0xfb65405ff	         movzx edx, byte [rbp + rax - 1]	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4007add	          0x80fa20	                            cmp dl, 0x20	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4007ae0	            0x7405	                            je 0x4007ae7	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4007ae2	          0x80fa09	                               cmp dl, 9	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4007ae5	            0x7521	                           jne 0x4007b08	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4007ae7	          0x4801e8	                            add rax, rbp	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4007aea	    0x660f1f440000	                    nop word [rax + rax]	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4007af0	        0x4183ed01	                             sub r13d, 1	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4007af4	            0x7412	                            je 0x4007b08	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4007af6	         0xfb650fe	               movzx edx, byte [rax - 2]	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4007afa	        0x4883e801	                              sub rax, 1	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4007afe	          0x80fa20	                            cmp dl, 0x20	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4007b01	            0x74ed	                            je 0x4007af0	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4007b03	          0x80fa09	                               cmp dl, 9	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4007b06	            0x74e8	                            je 0x4007af0	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4007b08	      0xbe00000000	                              mov esi, 0	      2010	fold.c	FUNCTION_57	CALL_4
0x4007b0d	          0x4889ef	                            mov rdi, rbp	      2010	fold.c	FUNCTION_57	CALL_4
0x4007b10	      0xe800000000	                          call 0x4007b15	      2010	fold.c	FUNCTION_57	CALL_4
0x4007b15	          0x4885c0	                           test rax, rax	      2011	fold.c	FUNCTION_57	IF_1
0x4007b18	      0x4889442418	             mov qword [rsp + 0x18], rax	      2010	fold.c	FUNCTION_57	CALL_4
0x4007b1d	     0xf8408030000	                            je 0x4007e2b	      2011	fold.c	FUNCTION_57	IF_1
0x4007b23	          0x4989c6	                            mov r14, rax	      2013	fold.c	FUNCTION_57	IF_1
0x4007b26	          0x4829e8	                            sub rax, rbp	      2013	fold.c	FUNCTION_57	IF_1
0x4007b29	          0x4129c5	                           sub r13d, eax	      2013	fold.c	FUNCTION_57	IF_1
0x4007b2c	            0x85c0	                           test eax, eax	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4007b2e	            0x89c3	                            mov ebx, eax	      2013	fold.c	FUNCTION_57	IF_1
0x4007b30	            0x7e35	                           jle 0x4007b67	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4007b32	            0x4898	                                    cdqe	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4007b34	       0xfb65405ff	         movzx edx, byte [rbp + rax - 1]	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4007b39	          0x80fa20	                            cmp dl, 0x20	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4007b3c	            0x7405	                            je 0x4007b43	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4007b3e	          0x80fa09	                               cmp dl, 9	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4007b41	            0x7524	                           jne 0x4007b67	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4007b43	          0x4801e8	                            add rax, rbp	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4007b46	    0x662e0f1f8400	                 nop word cs:[rax + rax]	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4007b50	          0x83eb01	                              sub ebx, 1	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4007b53	            0x7412	                            je 0x4007b67	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4007b55	         0xfb650fe	               movzx edx, byte [rax - 2]	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4007b59	        0x4883e801	                              sub rax, 1	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4007b5d	          0x80fa20	                            cmp dl, 0x20	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4007b60	            0x74ee	                            je 0x4007b50	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4007b62	          0x80fa09	                               cmp dl, 9	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4007b65	            0x74e9	                            je 0x4007b50	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4007b67	      0x488b7c2418	            mov rdi, qword [rsp + 0x18] 	      2021	fold.c	FUNCTION_57	IF_1	CALL_6
0x4007b6c	        0x4883c702	                              add rdi, 2	      2021	fold.c	FUNCTION_57	IF_1	CALL_6
0x4007b70	      0xe800000000	                          call 0x4007b75	      2021	fold.c	FUNCTION_57	IF_1	CALL_6
0x4007b75	      0x4889442418	             mov qword [rsp + 0x18], rax	      2021	fold.c	FUNCTION_57	IF_1	CALL_6
0x4007b7a	          0x4c29f0	                            sub rax, r14	      2022	fold.c	FUNCTION_57	IF_1
0x4007b7d	          0x4129c5	                           sub r13d, eax	      2022	fold.c	FUNCTION_57	IF_1
0x4007b80	      0x44896c2430	            mov dword [rsp + 0x30], r13d	      2022	fold.c	FUNCTION_57	IF_1
0x4007b85	    0x4c8b2d000000	            mov r13, qword [0x04007b8c] 	      2025	fold.c	FUNCTION_57	CALL_7
0x4007b8c	      0xbe2c000000	                           mov esi, 0x2c	      3358	fold.c	FUNCTION_70	CALL_1
0x4007b91	          0x4d89fc	                            mov r12, r15	      3360	fold.c	FUNCTION_70	CALL_2
0x4007b94	    0x498bbd280200	           mov rdi, qword [r13 + 0x228] 	      3358	fold.c	FUNCTION_70	CALL_1
0x4007b9b	      0xe800000000	                          call 0x4007ba0	      3358	fold.c	FUNCTION_70	CALL_1
0x4007ba0	        0x488d7801	                      lea rdi, [rax + 1]	      3359	fold.c	FUNCTION_70
0x4007ba4	    0x492b85280200	            sub rax, qword [r13 + 0x228]	      3359	fold.c	FUNCTION_70
0x4007bab	    0x48893d000000	            mov qword [0x04007bb2], rdi 	      3359	fold.c	FUNCTION_70
0x4007bb2	    0x890500000000	            mov dword [0x04007bb8], eax 	      3359	fold.c	FUNCTION_70
0x4007bb8	      0xe800000000	                          call 0x4007bbd	      3360	fold.c	FUNCTION_70	CALL_2
0x4007bbd	    0x890500000000	            mov dword [0x04007bc3], eax 	      3360	fold.c	FUNCTION_70	CALL_2
0x4007bc3	      0x4863442430	         movsxd rax, dword [rsp + 0x30] 	      2058	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9	CALL_14
0x4007bc8	    0xc74424340000	               mov dword [rsp + 0x34], 0	      2001	fold.c	FUNCTION_57
0x4007bd0	    0xc744242c0000	               mov dword [rsp + 0x2c], 0	      2000	fold.c	FUNCTION_57
0x4007bd8	      0x4889442438	             mov qword [rsp + 0x38], rax	      2058	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9	CALL_14
0x4007bdd	          0x4863c3	                         movsxd rax, ebx	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x4007be0	      0x4889442410	             mov qword [rsp + 0x10], rax	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x4007be5	          0x4c01f8	                            add rax, r15	      2043	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x4007be8	      0x4889442408	                mov qword [rsp + 8], rax	      2043	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x4007bed	           0xf1f00	                         nop dword [rax]	      2043	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x4007bf0	      0x41803c2400	                       cmp byte [r12], 0	      2027	fold.c	FUNCTION_57	FOR_1
0x4007bf5	     0xf84eb000000	                            je 0x4007ce6	      2027	fold.c	FUNCTION_57	FOR_1
0x4007bfb	    0x488b05000000	            mov rax, qword [0x04007c02] 	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x4007c02	    0x4c632d000000	         movsxd r13, dword [0x04007c09] 	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x4007c09	          0x4c89e7	                            mov rdi, r12	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x4007c0c	    0x488bb0280200	           mov rsi, qword [rax + 0x228] 	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x4007c13	          0x4c89ea	                            mov rdx, r13	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x4007c16	          0x4d89ee	                            mov r14, r13	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x4007c19	      0xe800000000	                          call 0x4007c1e	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x4007c1e	            0x85c0	                           test eax, eax	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x4007c20	     0xf84d2000000	                            je 0x4007cf8	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x4007c26	    0x4c632d000000	         movsxd r13, dword [0x04007c2d] 	      2032	fold.c	FUNCTION_57	FOR_1	ELSE_1	IF_3	CALL_9
0x4007c2d	    0x488b35000000	            mov rsi, qword [0x04007c34] 	      2032	fold.c	FUNCTION_57	FOR_1	ELSE_1	IF_3	CALL_9
0x4007c34	          0x4c89e7	                            mov rdi, r12	      2032	fold.c	FUNCTION_57	FOR_1	ELSE_1	IF_3	CALL_9
0x4007c37	          0x4c89ea	                            mov rdx, r13	      2032	fold.c	FUNCTION_57	FOR_1	ELSE_1	IF_3	CALL_9
0x4007c3a	          0x4d89ee	                            mov r14, r13	      2032	fold.c	FUNCTION_57	FOR_1	ELSE_1	IF_3	CALL_9
0x4007c3d	      0xe800000000	                          call 0x4007c42	      2032	fold.c	FUNCTION_57	FOR_1	ELSE_1	IF_3	CALL_9
0x4007c42	            0x85c0	                           test eax, eax	      2032	fold.c	FUNCTION_57	FOR_1	ELSE_1	IF_3	CALL_9
0x4007c44	     0xf84ae000000	                            je 0x4007cf8	      2032	fold.c	FUNCTION_57	FOR_1	ELSE_1	IF_3	CALL_9
0x4007c4a	          0x4531f6	                          xor r14d, r14d	      2029	fold.c	FUNCTION_57	FOR_1
0x4007c4d	    0x48837c241800	               cmp qword [rsp + 0x18], 0	      2050	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7
0x4007c53	     0xf8429010000	                            je 0x4007d82	      2050	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7
0x4007c59	        0x8b7c242c	            mov edi, dword [rsp + 0x2c] 	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x4007c5d	            0x85ff	                           test edi, edi	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x4007c5f	     0xf8553010000	                           jne 0x4007db8	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x4007c65	            0x85db	                           test ebx, ebx	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x4007c67	     0xf8e4b010000	                           jle 0x4007db8	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x4007c6d	      0x488b542410	            mov rdx, qword [rsp + 0x10] 	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x4007c72	          0x4889ee	                            mov rsi, rbp	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x4007c75	          0x4c89e7	                            mov rdi, r12	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x4007c78	      0xe800000000	                          call 0x4007c7d	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x4007c7d	            0x85c0	                           test eax, eax	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x4007c7f	     0xf8533010000	                           jne 0x4007db8	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x4007c85	      0x4c8b6c2410	            mov r13, qword [rsp + 0x10] 	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x4007c8a	          0x4189de	                           mov r14d, ebx	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x4007c8d	    0xc744242c0100	               mov dword [rsp + 0x2c], 1	      2055	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8
0x4007c95	           0xf1f00	                         nop dword [rax]	      2055	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8
0x4007c98	          0x4d01e5	                            add r13, r12	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x4007c9b	      0x410fb64500	                   movzx eax, byte [r13]	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x4007ca0	            0x3c09	                               cmp al, 9	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x4007ca2	            0x7404	                            je 0x4007ca8	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x4007ca4	            0x3c20	                            cmp al, 0x20	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x4007ca6	            0x751c	                           jne 0x4007cc4	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x4007ca8	          0x4963ce	                        movsxd rcx, r14d	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x4007cab	      0x498d440c01	                lea rax, [r12 + rcx + 1]	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x4007cb0	           0xfb610	                   movzx edx, byte [rax]	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x4007cb3	          0x4989c5	                            mov r13, rax	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x4007cb6	        0x4883c001	                              add rax, 1	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x4007cba	          0x80fa20	                            cmp dl, 0x20	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x4007cbd	            0x74f1	                            je 0x4007cb0	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x4007cbf	          0x80fa09	                               cmp dl, 9	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x4007cc2	            0x74ec	                            je 0x4007cb0	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x4007cc4	          0x4c89ef	                            mov rdi, r13	      2068	fold.c	FUNCTION_57	FOR_1	IF_10	CALL_16
0x4007cc7	      0xe800000000	                          call 0x4007ccc	      2068	fold.c	FUNCTION_57	FOR_1	IF_10	CALL_16
0x4007ccc	        0x488d5001	                      lea rdx, [rax + 1]	        59	string3.h	FUNCTION_78	CALL_3
0x4007cd0	          0x4c89ee	                            mov rsi, r13	        59	string3.h	FUNCTION_78	CALL_3
0x4007cd3	          0x4c89e7	                            mov rdi, r12	        59	string3.h	FUNCTION_78	CALL_3
0x4007cd6	      0xe800000000	                          call 0x4007cdb	        59	string3.h	FUNCTION_78	CALL_3
0x4007cdb	      0x41803c2400	                       cmp byte [r12], 0	      2027	fold.c	FUNCTION_57	FOR_1
0x4007ce0	     0xf8515ffffff	                           jne 0x4007bfb	      2027	fold.c	FUNCTION_57	FOR_1
0x4007ce6	        0x4883c448	                           add rsp, 0x48	      2075	fold.c	FUNCTION_57
0x4007cea	              0x5b	                                 pop rbx	      2075	fold.c	FUNCTION_57
0x4007ceb	              0x5d	                                 pop rbp	      2075	fold.c	FUNCTION_57
0x4007cec	            0x415c	                                 pop r12	      2075	fold.c	FUNCTION_57
0x4007cee	            0x415d	                                 pop r13	      2075	fold.c	FUNCTION_57
0x4007cf0	            0x415e	                                 pop r14	      2075	fold.c	FUNCTION_57
0x4007cf2	            0x415f	                                 pop r15	      2075	fold.c	FUNCTION_57
0x4007cf4	              0xc3	                                     ret	      2075	fold.c	FUNCTION_57
0x4007cf5	           0xf1f00	                         nop dword [rax]	      2075	fold.c	FUNCTION_57
0x4007cf8	          0x4585f6	                         test r14d, r14d	      2034	fold.c	FUNCTION_57	FOR_1	IF_4
0x4007cfb	     0xf8e19010000	                           jle 0x4007e1a	      2034	fold.c	FUNCTION_57	FOR_1	IF_4
0x4007d01	      0x430fb6042c	             movzx eax, byte [r12 + r13]	      2036	fold.c	FUNCTION_57	FOR_1	IF_4	IF_5	CALL_10
0x4007d06	          0x83e830	                           sub eax, 0x30	      2036	fold.c	FUNCTION_57	FOR_1	IF_4	IF_5	CALL_10
0x4007d09	          0x83f80a	                            cmp eax, 0xa	      2037	fold.c	FUNCTION_57	FOR_1	IF_4	IF_5
0x4007d0c	        0x4183d600	                             adc r14d, 0	      2037	fold.c	FUNCTION_57	FOR_1	IF_4	IF_5
0x4007d10	          0x4d39fc	                            cmp r12, r15	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x4007d13	     0xf86f9000000	                           jbe 0x4007e12	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x4007d19	    0x410fb64424ff	               movzx eax, byte [r12 - 1]	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x4007d1f	          0x4d89e5	                            mov r13, r12	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x4007d22	            0x3c20	                            cmp al, 0x20	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x4007d24	            0x751c	                           jne 0x4007d42	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x4007d26	    0x662e0f1f8400	                 nop word cs:[rax + rax]	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x4007d30	        0x4983ed01	                              sub r13, 1	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x4007d34	          0x4d39ef	                            cmp r15, r13	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x4007d37	            0x7477	                            je 0x4007db0	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x4007d39	      0x410fb645ff	               movzx eax, byte [r13 - 1]	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x4007d3e	            0x3c20	                            cmp al, 0x20	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x4007d40	            0x74ee	                            je 0x4007d30	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x4007d42	            0x3c09	                               cmp al, 9	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x4007d44	            0x74ea	                            je 0x4007d30	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x4007d46	      0x4c3b6c2408	                cmp r13, qword [rsp + 8]	      2043	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x4007d4b	            0x7253	                            jb 0x4007da0	      2043	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x4007d4d	      0x488b4c2410	            mov rcx, qword [rsp + 0x10] 	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x4007d52	          0x4c89e8	                            mov rax, r13	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x4007d55	          0x4889ee	                            mov rsi, rbp	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x4007d58	          0x4829c8	                            sub rax, rcx	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x4007d5b	          0x4889ca	                            mov rdx, rcx	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x4007d5e	          0x4889c7	                            mov rdi, rax	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x4007d61	      0x4889442420	             mov qword [rsp + 0x20], rax	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x4007d66	      0xe800000000	                          call 0x4007d6b	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x4007d6b	            0x85c0	                           test eax, eax	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x4007d6d	            0x7531	                           jne 0x4007da0	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x4007d6f	          0x4d29ec	                            sub r12, r13	      2046	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x4007d72	          0x4101dc	                           add r12d, ebx	      2046	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x4007d75	          0x4501e6	                          add r14d, r12d	      2046	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x4007d78	      0x4c8b642420	            mov r12, qword [rsp + 0x20] 	      2046	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x4007d7d	          0x4585f6	                         test r14d, r14d	      2064	fold.c	FUNCTION_57	FOR_1	IF_10
0x4007d80	            0x751e	                           jne 0x4007da0	      2064	fold.c	FUNCTION_57	FOR_1	IF_10
0x4007d82	    0x8b1500000000	            mov edx, dword [0x04007d88] 	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x4007d88	      0xb801000000	                              mov eax, 1	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x4007d8d	            0x85d2	                           test edx, edx	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x4007d8f	            0x7567	                           jne 0x4007df8	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x4007d91	          0x4901c4	                            add r12, rax	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x4007d94	      0xe957feffff	                           jmp 0x4007bf0	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x4007d99	     0xf1f80000000	                         nop dword [rax]	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x4007da0	          0x4d63ee	                        movsxd r13, r14d	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x4007da3	      0xe9f0feffff	                           jmp 0x4007c98	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x4007da8	     0xf1f84000000	                   nop dword [rax + rax]	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x4007db0	          0x4d89fd	                            mov r13, r15	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x4007db3	            0xeb91	                           jmp 0x4007d46	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x4007db5	           0xf1f00	                         nop dword [rax]	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x4007db8	        0x8b742434	            mov esi, dword [rsp + 0x34] 	      2057	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9
0x4007dbc	            0x85f6	                           test esi, esi	      2057	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9
0x4007dbe	            0x75bd	                           jne 0x4007d7d	      2057	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9
0x4007dc0	        0x8b4c2430	            mov ecx, dword [rsp + 0x30] 	      2057	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9
0x4007dc4	            0x85c9	                           test ecx, ecx	      2057	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9
0x4007dc6	            0x7eb5	                           jle 0x4007d7d	      2057	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9
0x4007dc8	      0x488b542438	            mov rdx, qword [rsp + 0x38] 	      2058	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9	CALL_14
0x4007dcd	      0x488b742418	            mov rsi, qword [rsp + 0x18] 	      2058	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9	CALL_14
0x4007dd2	          0x4c89e7	                            mov rdi, r12	      2058	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9	CALL_14
0x4007dd5	      0xe800000000	                          call 0x4007dda	      2058	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9	CALL_14
0x4007dda	            0x85c0	                           test eax, eax	      2058	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9	CALL_14
0x4007ddc	            0x7527	                           jne 0x4007e05	      2058	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9	CALL_14
0x4007dde	      0x4c8b6c2438	            mov r13, qword [rsp + 0x38] 	      2058	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9	CALL_14
0x4007de3	      0x448b742430	           mov r14d, dword [rsp + 0x30] 	      2058	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9	CALL_14
0x4007de8	    0xc74424340100	               mov dword [rsp + 0x34], 1	      2061	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9
0x4007df0	      0xe9a3feffff	                           jmp 0x4007c98	      2061	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9
0x4007df5	           0xf1f00	                         nop dword [rax]	      2061	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9
0x4007df8	          0x4c89e7	                            mov rdi, r12	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x4007dfb	    0xff1500000000	                 call qword [0x04007e01]	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x4007e01	            0x4898	                                    cdqe	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x4007e03	            0xeb8c	                           jmp 0x4007d91	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x4007e05	    0xc74424340000	               mov dword [rsp + 0x34], 0	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x4007e0d	      0xe96bffffff	                           jmp 0x4007d7d	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x4007e12	          0x4d89e5	                            mov r13, r12	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x4007e15	      0xe92cffffff	                           jmp 0x4007d46	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x4007e1a	    0x48837c241800	               cmp qword [rsp + 0x18], 0	      2050	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7
0x4007e20	     0xf8533feffff	                           jne 0x4007c59	      2050	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7
0x4007e26	      0xe952ffffff	                           jmp 0x4007d7d	      2050	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7
0x4007e2b	          0x4489eb	                           mov ebx, r13d	      2050	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7
0x4007e2e	    0xc74424300000	               mov dword [rsp + 0x30], 0	      1996	fold.c	FUNCTION_57
0x4007e36	      0xe94afdffff	                           jmp 0x4007b85	      1996	fold.c	FUNCTION_57
setManualFoldWin	WHILE,0:functions,0:ELSE,3:DO,0:FOR,2:SWITCH,0:IF,15:CALL,6	192
0x40062a0	            0x4157	                                push r15	      1273	fold.c	FUNCTION_41
0x40062a2	            0x4156	                                push r14	      1273	fold.c	FUNCTION_41
0x40062a4	            0x4155	                                push r13	      1273	fold.c	FUNCTION_41
0x40062a6	            0x4154	                                push r12	      1273	fold.c	FUNCTION_41
0x40062a8	              0x55	                                push rbp	      1273	fold.c	FUNCTION_41
0x40062a9	              0x53	                                push rbx	      1273	fold.c	FUNCTION_41
0x40062aa	          0x4889fd	                            mov rbp, rdi	      1273	fold.c	FUNCTION_41
0x40062ad	          0x4889f3	                            mov rbx, rsi	      1273	fold.c	FUNCTION_41
0x40062b0	        0x4883ec28	                           sub rsp, 0x28	      1273	fold.c	FUNCTION_41
0x40062b4	    0x80bf21010000	               cmp byte [rdi + 0x121], 0	      1187	fold.c	FUNCTION_38	IF_1
0x40062bb	        0x89542418	             mov dword [rsp + 0x18], edx	      1273	fold.c	FUNCTION_41
0x40062bf	        0x894c241c	             mov dword [rsp + 0x1c], ecx	      1273	fold.c	FUNCTION_41
0x40062c3	      0x4c89442410	              mov qword [rsp + 0x10], r8	      1273	fold.c	FUNCTION_41
0x40062c8	     0xf8552020000	                           jne 0x4006520	      1187	fold.c	FUNCTION_38	IF_1
0x40062ce	        0x8b7c2418	            mov edi, dword [rsp + 0x18] 	      1323	fold.c	FUNCTION_41	FOR_1	IF_6
0x40062d2	      0x448b44241c	            mov r8d, dword [rsp + 0x1c] 	      1323	fold.c	FUNCTION_41	FOR_1	IF_6
0x40062d7	    0x488d85080100	                  lea rax, [rbp + 0x108]	      1291	fold.c	FUNCTION_41
0x40062de	    0xc74424080000	                  mov dword [rsp + 8], 0	      1284	fold.c	FUNCTION_41
0x40062e6	    0x48c70424ffff	            mov qword [rsp], 0x7fffffff 	      1282	fold.c	FUNCTION_41
0x40062ee	            0x85ff	                           test edi, edi	      1323	fold.c	FUNCTION_41	FOR_1	IF_6
0x40062f0	       0xf9444240f	                   sete byte [rsp + 0xf]	      1323	fold.c	FUNCTION_41	FOR_1	IF_6
0x40062f5	       0xfb67c240f	            movzx edi, byte [rsp + 0xf] 	      1323	fold.c	FUNCTION_41	FOR_1	IF_6
0x40062fa	          0x4585c0	                           test r8d, r8d	      1323	fold.c	FUNCTION_41	FOR_1	IF_6
0x40062fd	        0x410f95c6	                              setne r14b	      1323	fold.c	FUNCTION_41	FOR_1	IF_6
0x4006301	          0x4531d2	                          xor r10d, r10d	      1323	fold.c	FUNCTION_41	FOR_1	IF_6
0x4006304	          0x4531db	                          xor r11d, r11d	      1283	fold.c	FUNCTION_41
0x4006307	          0x4531ff	                          xor r15d, r15d	      1280	fold.c	FUNCTION_41
0x400630a	          0x4531e4	                          xor r12d, r12d	      1279	fold.c	FUNCTION_41
0x400630d	          0x4531ed	                          xor r13d, r13d	      1276	fold.c	FUNCTION_41
0x4006310	          0x4121fe	                           and r14d, edi	      1323	fold.c	FUNCTION_41	FOR_1	IF_6
0x4006313	       0xf1f440000	                   nop dword [rax + rax]	      1323	fold.c	FUNCTION_41	FOR_1	IF_6
0x4006318	          0x4c6308	                  movsxd r9, dword [rax]	      1323	fold.c	FUNCTION_41	FOR_1	IF_6
0x400631b	            0x31d2	                            xor edx, edx	      1133	fold.c	FUNCTION_36	WHILE_1
0x400631d	        0x4c8b4010	              mov r8, qword [rax + 0x10]	      1133	fold.c	FUNCTION_36	WHILE_1
0x4006321	        0x418d71ff	                       lea esi, [r9 - 1]	      1132	fold.c	FUNCTION_36
0x4006325	          0x4863f6	                         movsxd rsi, esi	      1132	fold.c	FUNCTION_36
0x4006328	          0x4885f6	                           test rsi, rsi	      1133	fold.c	FUNCTION_36	WHILE_1
0x400632b	            0x790e	                           jns 0x400633b	      1133	fold.c	FUNCTION_36	WHILE_1
0x400632d	            0xeb45	                           jmp 0x4006374	      1133	fold.c	FUNCTION_36	WHILE_1
0x400632f	              0x90	                                     nop	      1133	fold.c	FUNCTION_36	WHILE_1
0x4006330	          0x83e801	                              sub eax, 1	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4006333	          0x4863f0	                         movsxd rsi, eax	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4006336	          0x4839f2	                            cmp rdx, rsi	      1133	fold.c	FUNCTION_36	WHILE_1
0x4006339	            0x7f31	                            jg 0x400636c	      1133	fold.c	FUNCTION_36	WHILE_1
0x400633b	        0x488d0416	                    lea rax, [rsi + rdx]	      1135	fold.c	FUNCTION_36	WHILE_1
0x400633f	          0x48d1f8	                              sar rax, 1	      1135	fold.c	FUNCTION_36	WHILE_1
0x4006342	        0x488d0c40	                  lea rcx, [rax + rax*2]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4006346	        0x48c1e104	                              shl rcx, 4	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x400634a	          0x4c01c1	                             add rcx, r8	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x400634d	          0x488b39	                    mov rdi, qword [rcx]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4006350	          0x4839fb	                            cmp rbx, rdi	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4006353	            0x7cdb	                            jl 0x4006330	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4006355	          0x4889fa	                            mov rdx, rdi	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4006358	        0x48035108	                add rdx, qword [rcx + 8]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x400635c	          0x4839d3	                            cmp rbx, rdx	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x400635f	            0x7c67	                            jl 0x40063c8	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4006361	          0x83c001	                              add eax, 1	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4006364	          0x4863d0	                         movsxd rdx, eax	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4006367	          0x4839f2	                            cmp rdx, rsi	      1133	fold.c	FUNCTION_36	WHILE_1
0x400636a	            0x7ecf	                           jle 0x400633b	      1133	fold.c	FUNCTION_36	WHILE_1
0x400636c	        0x488d1452	                  lea rdx, [rdx + rdx*2]	      1133	fold.c	FUNCTION_36	WHILE_1
0x4006370	        0x48c1e204	                              shl rdx, 4	      1133	fold.c	FUNCTION_36	WHILE_1
0x4006374	        0x4b8d0449	                    lea rax, [r9 + r9*2]	      1297	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x4006378	          0x4c01c2	                             add rdx, r8	      1149	fold.c	FUNCTION_36
0x400637b	        0x48c1e004	                              shl rax, 4	      1297	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x400637f	          0x4901c0	                             add r8, rax	      1297	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x4006382	          0x4c39c2	                             cmp rdx, r8	      1297	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x4006385	            0x7309	                           jae 0x4006390	      1297	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x4006387	          0x4c031a	                    add r11, qword [rdx]	      1298	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x400638a	        0x4c891c24	                    mov qword [rsp], r11	      1298	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x400638e	            0x6690	                                     nop	      1298	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x4006390	          0x4585ff	                         test r15d, r15d	      1351	fold.c	FUNCTION_41	IF_11
0x4006393	     0xf8513010000	                           jne 0x40064ac	      1351	fold.c	FUNCTION_41	IF_11
0x4006399	    0x48837c241000	               cmp qword [rsp + 0x10], 0	      1364	fold.c	FUNCTION_41	ELSE_3	IF_14
0x400639f	     0xf8493010000	                            je 0x4006538	      1364	fold.c	FUNCTION_41	ELSE_3	IF_14
0x40063a5	      0x488b442410	            mov rax, qword [rsp + 0x10] 	      1368	fold.c	FUNCTION_41	IF_15
0x40063aa	        0x8b5c2408	                mov ebx, dword [rsp + 8]	      1368	fold.c	FUNCTION_41	IF_15
0x40063ae	             0x918	                     or dword [rax], ebx	      1368	fold.c	FUNCTION_41	IF_15
0x40063b0	        0x488b0424	                    mov rax, qword [rsp]	      1371	fold.c	FUNCTION_41
0x40063b4	        0x4883c428	                           add rsp, 0x28	      1371	fold.c	FUNCTION_41
0x40063b8	              0x5b	                                 pop rbx	      1371	fold.c	FUNCTION_41
0x40063b9	              0x5d	                                 pop rbp	      1371	fold.c	FUNCTION_41
0x40063ba	            0x415c	                                 pop r12	      1371	fold.c	FUNCTION_41
0x40063bc	            0x415d	                                 pop r13	      1371	fold.c	FUNCTION_41
0x40063be	            0x415e	                                 pop r14	      1371	fold.c	FUNCTION_41
0x40063c0	            0x415f	                                 pop r15	      1371	fold.c	FUNCTION_41
0x40063c2	              0xc3	                                     ret	      1371	fold.c	FUNCTION_41
0x40063c3	       0xf1f440000	                   nop dword [rax + rax]	      1371	fold.c	FUNCTION_41
0x40063c8	        0x4b8d0449	                    lea rax, [r9 + r9*2]	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x40063cc	        0x488d5130	                   lea rdx, [rcx + 0x30]	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x40063d0	        0x48c1e004	                              shl rax, 4	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x40063d4	          0x4901c0	                             add r8, rax	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x40063d7	          0x4c39c2	                             cmp rdx, r8	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x40063da	            0x730b	                           jae 0x40063e7	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x40063dc	          0x4c89d8	                            mov rax, r11	      1307	fold.c	FUNCTION_41	FOR_1	IF_3
0x40063df	        0x48034130	             add rax, qword [rcx + 0x30]	      1307	fold.c	FUNCTION_41	FOR_1	IF_3
0x40063e3	        0x48890424	                    mov qword [rsp], rax	      1307	fold.c	FUNCTION_41	FOR_1	IF_3
0x40063e7	          0x4585e4	                         test r12d, r12d	      1310	fold.c	FUNCTION_41	FOR_1	IF_4
0x40063ea	            0x7544	                           jne 0x4006430	      1310	fold.c	FUNCTION_41	FOR_1	IF_4
0x40063ec	         0xfb64128	           movzx eax, byte [rcx + 0x28] 	      1310	fold.c	FUNCTION_41	FOR_1	IF_4
0x40063f0	            0x3c02	                               cmp al, 2	      1310	fold.c	FUNCTION_41	FOR_1	IF_4
0x40063f2	            0x743c	                            je 0x4006430	      1310	fold.c	FUNCTION_41	FOR_1	IF_4
0x40063f4	          0x4584f6	                         test r14b, r14b	      1323	fold.c	FUNCTION_41	FOR_1	IF_6
0x40063f7	     0xf8482000000	                            je 0x400647f	      1323	fold.c	FUNCTION_41	FOR_1	IF_6
0x40063fd	            0x3c01	                               cmp al, 1	      1325	fold.c	FUNCTION_41	FOR_1	IF_6	IF_7
0x40063ff	            0x740c	                            je 0x400640d	      1325	fold.c	FUNCTION_41	FOR_1	IF_6	IF_7
0x4006401	        0xc6412801	                mov byte [rcx + 0x28], 1	      1328	fold.c	FUNCTION_41	FOR_1	IF_6	IF_7
0x4006405	    0xc74424080100	                  mov dword [rsp + 8], 1	      1327	fold.c	FUNCTION_41	FOR_1	IF_6	IF_7
0x400640d	        0x488d4110	                   lea rax, [rcx + 0x10]	      1346	fold.c	FUNCTION_41	FOR_1
0x4006411	          0x4829fb	                            sub rbx, rdi	      1347	fold.c	FUNCTION_41	FOR_1
0x4006414	          0x4901fb	                            add r11, rdi	      1348	fold.c	FUNCTION_41	FOR_1
0x4006417	        0x4983c201	                              add r10, 1	      1348	fold.c	FUNCTION_41	FOR_1
0x400641b	    0x41bf01000000	                             mov r15d, 1	      1303	fold.c	FUNCTION_41	FOR_1
0x4006421	          0x4989cd	                            mov r13, rcx	      1350	fold.c	FUNCTION_41	FOR_1
0x4006424	      0xe9effeffff	                           jmp 0x4006318	      1350	fold.c	FUNCTION_41	FOR_1
0x4006429	     0xf1f80000000	                         nop dword [rax]	      1350	fold.c	FUNCTION_41	FOR_1
0x4006430	    0x4c3b95e80100	           cmp r10, qword [rbp + 0x1e8] 	      1314	fold.c	FUNCTION_41	FOR_1	IF_4	IF_5
0x4006437	          0x8b5110	            mov edx, dword [rcx + 0x10] 	      1318	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x400643a	        0x488b7120	            mov rsi, qword [rcx + 0x20] 	      1317	fold.c	FUNCTION_41	FOR_1	IF_4
0x400643e	           0xf9dc0	                                setge al	      1314	fold.c	FUNCTION_41	FOR_1	IF_4	IF_5
0x4006441	            0x85d2	                           test edx, edx	      1318	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x4006443	          0x884128	               mov byte [rcx + 0x28], al	      1318	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x4006446	     0xf8e9c000000	                           jle 0x40064e8	      1318	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x400644c	          0x83ea01	                              sub edx, 1	      1318	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x400644f	        0x488d4628	                   lea rax, [rsi + 0x28]	      1318	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x4006453	        0x488d1452	                  lea rdx, [rdx + rdx*2]	      1318	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x4006457	        0x48c1e204	                              shl rdx, 4	      1318	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x400645b	      0x488d541658	            lea rdx, [rsi + rdx + 0x58] 	      1318	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x4006460	          0xc60002	                       mov byte [rax], 2	      1319	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x4006463	        0x4883c030	                           add rax, 0x30	      1319	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x4006467	          0x4839d0	                            cmp rax, rdx	      1318	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x400646a	            0x75f4	                           jne 0x4006460	      1318	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x400646c	          0x4584f6	                         test r14b, r14b	      1323	fold.c	FUNCTION_41	FOR_1	IF_6
0x400646f	         0xfb64128	           movzx eax, byte [rcx + 0x28] 	      1323	fold.c	FUNCTION_41	FOR_1	IF_6
0x4006473	    0x41bc01000000	                             mov r12d, 1	      1312	fold.c	FUNCTION_41	FOR_1	IF_4
0x4006479	     0xf857effffff	                           jne 0x40063fd	      1323	fold.c	FUNCTION_41	FOR_1	IF_6
0x400647f	            0x3c01	                               cmp al, 1	      1331	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8
0x4006481	            0x758a	                           jne 0x400640d	      1331	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8
0x4006483	        0x8b742418	            mov esi, dword [rsp + 0x18] 	      1334	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9
0x4006487	            0x85f6	                           test esi, esi	      1334	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9
0x4006489	            0x7421	                            je 0x40064ac	      1334	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9
0x400648b	        0x8b54241c	            mov edx, dword [rsp + 0x1c] 	      1338	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9	IF_10
0x400648f	        0xc6412800	                mov byte [rcx + 0x28], 0	      1336	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9
0x4006493	    0xc74424080100	                  mov dword [rsp + 8], 1	      1337	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9
0x400649b	            0x85d2	                           test edx, edx	      1338	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9	IF_10
0x400649d	            0x740d	                            je 0x40064ac	      1338	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9	IF_10
0x400649f	        0x488b7120	            mov rsi, qword [rcx + 0x20] 	      1339	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9	CALL_3
0x40064a3	        0x488d7910	                   lea rdi, [rcx + 0x10]	      1339	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9	CALL_3
0x40064a7	      0xe804a7ffff	          call sym.foldOpenNested.isra.2	      1339	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9	CALL_3
0x40064ac	          0x4d85ed	                           test r13, r13	      1354	fold.c	FUNCTION_41	IF_11	IF_12
0x40064af	            0x7442	                            je 0x40064f3	      1354	fold.c	FUNCTION_41	IF_11	IF_12
0x40064b1	      0x807c240f00	                 cmp byte [rsp + 0xf], 0	      1354	fold.c	FUNCTION_41	IF_11	IF_12
0x40064b6	            0x743b	                            je 0x40064f3	      1354	fold.c	FUNCTION_41	IF_11	IF_12
0x40064b8	      0x41c6452801	                mov byte [r13 + 0x28], 1	      1356	fold.c	FUNCTION_41	IF_11	IF_12
0x40064bd	    0xc68520010000	               mov byte [rbp + 0x120], 1	      1359	fold.c	FUNCTION_41	IF_11
0x40064c4	          0x4889ef	                            mov rdi, rbp	      1361	fold.c	FUNCTION_41	IF_11	CALL_4
0x40064c7	      0xe800000000	                          call 0x40064cc	      1361	fold.c	FUNCTION_41	IF_11	CALL_4
0x40064cc	    0x48837c241000	               cmp qword [rsp + 0x10], 0	      1367	fold.c	FUNCTION_41	IF_15
0x40064d2	    0xc74424080300	                  mov dword [rsp + 8], 3	      1361	fold.c	FUNCTION_41	IF_11	CALL_4
0x40064da	     0xf85c5feffff	                           jne 0x40063a5	      1367	fold.c	FUNCTION_41	IF_15
0x40064e0	      0xe9cbfeffff	                           jmp 0x40063b0	      1367	fold.c	FUNCTION_41	IF_15
0x40064e5	           0xf1f00	                         nop dword [rax]	      1367	fold.c	FUNCTION_41	IF_15
0x40064e8	    0x41bc01000000	                             mov r12d, 1	      1312	fold.c	FUNCTION_41	FOR_1	IF_4
0x40064ee	      0xe901ffffff	                           jmp 0x40063f4	      1312	fold.c	FUNCTION_41	FOR_1	IF_4
0x40064f3	        0x8b442408	                mov eax, dword [rsp + 8]	      1360	fold.c	FUNCTION_41	IF_11	IF_13
0x40064f7	    0xc68520010000	               mov byte [rbp + 0x120], 1	      1359	fold.c	FUNCTION_41	IF_11
0x40064fe	            0x85c0	                           test eax, eax	      1360	fold.c	FUNCTION_41	IF_11	IF_13
0x4006500	            0x75c2	                           jne 0x40064c4	      1360	fold.c	FUNCTION_41	IF_11	IF_13
0x4006502	    0x48837c241000	               cmp qword [rsp + 0x10], 0	      1367	fold.c	FUNCTION_41	IF_15
0x4006508	    0xc74424080200	                  mov dword [rsp + 8], 2	      1367	fold.c	FUNCTION_41	IF_15
0x4006510	     0xf858ffeffff	                           jne 0x40063a5	      1367	fold.c	FUNCTION_41	IF_15
0x4006516	      0xe995feffff	                           jmp 0x40063b0	      1367	fold.c	FUNCTION_41	IF_15
0x400651b	       0xf1f440000	                   nop dword [rax + rax]	      1367	fold.c	FUNCTION_41	IF_15
0x4006520	    0x448b0d000000	            mov r9d, dword [0x04006527] 	       813	fold.c	FUNCTION_28	IF_1
0x4006527	          0x4585c9	                           test r9d, r9d	       813	fold.c	FUNCTION_28	IF_1
0x400652a	            0x7e3c	                           jle 0x4006568	       813	fold.c	FUNCTION_28	IF_1
0x400652c	    0xc68521010000	               mov byte [rbp + 0x121], 0	      1190	fold.c	FUNCTION_38	IF_1
0x4006533	      0xe996fdffff	                           jmp 0x40062ce	      1190	fold.c	FUNCTION_38	IF_1
0x4006538	    0x483b2d000000	            cmp rbp, qword [0x0400653f] 	      1364	fold.c	FUNCTION_41	ELSE_3	IF_14
0x400653f	     0xf856bfeffff	                           jne 0x40063b0	      1364	fold.c	FUNCTION_41	ELSE_3	IF_14
0x4006545	            0x31ff	                            xor edi, edi	      1365	fold.c	FUNCTION_41	ELSE_3	IF_14
0x4006547	      0xba05000000	                              mov edx, 5	      1365	fold.c	FUNCTION_41	ELSE_3	IF_14
0x400654c	      0xbe00000000	                              mov esi, 0	      1365	fold.c	FUNCTION_41	ELSE_3	IF_14
0x4006551	      0xe800000000	                          call 0x4006556	      1365	fold.c	FUNCTION_41	ELSE_3	IF_14
0x4006556	          0x4889c7	                            mov rdi, rax	      1365	fold.c	FUNCTION_41	ELSE_3	IF_14
0x4006559	      0xe800000000	                          call 0x400655e	      1365	fold.c	FUNCTION_41	ELSE_3	IF_14
0x400655e	      0xe94dfeffff	                           jmp 0x40063b0	      1365	fold.c	FUNCTION_41	ELSE_3	IF_14
0x4006563	       0xf1f440000	                   nop dword [rax + rax]	      1365	fold.c	FUNCTION_41	ELSE_3	IF_14
0x4006568	      0xbaffffff7f	                     mov edx, 0x7fffffff	      1365	fold.c	FUNCTION_41	ELSE_3	IF_14
0x400656d	      0xbe01000000	                              mov esi, 1	      1365	fold.c	FUNCTION_41	ELSE_3	IF_14
0x4006572	      0xe8c9e2ffff	             call sym.foldUpdate.part.16	      1365	fold.c	FUNCTION_41	ELSE_3	IF_14
0x4006577	            0xebb3	                           jmp 0x400652c	      1365	fold.c	FUNCTION_41	ELSE_3	IF_14
foldlevelSyntax	WHILE,0:functions,0:ELSE,0:DO,0:FOR,0:SWITCH,0:IF,2:CALL,2	33
0x4000550	              0x55	                                push rbp	      3457	fold.c	FUNCTION_72
0x4000551	              0x53	                                push rbx	      3457	fold.c	FUNCTION_72
0x4000552	          0x4889fb	                            mov rbx, rdi	      3457	fold.c	FUNCTION_72
0x4000555	        0x4883ec08	                              sub rsp, 8	      3457	fold.c	FUNCTION_72
0x4000559	        0x488b6f10	            mov rbp, qword [rdi + 0x10] 	      3462	fold.c	FUNCTION_72
0x400055d	        0x48036f08	                add rbp, qword [rdi + 8]	      3462	fold.c	FUNCTION_72
0x4000561	          0x488b3f	                    mov rdi, qword [rdi]	      3466	fold.c	FUNCTION_72	CALL_1
0x4000564	          0x4889ee	                            mov rsi, rbp	      3466	fold.c	FUNCTION_72	CALL_1
0x4000567	      0xe800000000	                          call 0x400056c	      3466	fold.c	FUNCTION_72	CALL_1
0x400056c	          0x488b3b	                    mov rdi, qword [rbx]	      3468	fold.c	FUNCTION_72	IF_1
0x400056f	          0x894320	             mov dword [rbx + 0x20], eax	      3466	fold.c	FUNCTION_72	CALL_1
0x4000572	    0xc74328000000	               mov dword [rbx + 0x28], 0	      3467	fold.c	FUNCTION_72
0x4000579	        0x488b4708	                mov rax, qword [rdi + 8]	      3468	fold.c	FUNCTION_72	IF_1
0x400057d	          0x483b28	                    cmp rbp, qword [rax]	      3468	fold.c	FUNCTION_72	IF_1
0x4000580	            0x7c0e	                            jl 0x4000590	      3468	fold.c	FUNCTION_72	IF_1
0x4000582	        0x4883c408	                              add rsp, 8	      3478	fold.c	FUNCTION_72
0x4000586	              0x5b	                                 pop rbx	      3478	fold.c	FUNCTION_72
0x4000587	              0x5d	                                 pop rbp	      3478	fold.c	FUNCTION_72
0x4000588	              0xc3	                                     ret	      3478	fold.c	FUNCTION_72
0x4000589	     0xf1f80000000	                         nop dword [rax]	      3478	fold.c	FUNCTION_72
0x4000590	        0x488d7501	                      lea rsi, [rbp + 1]	      3470	fold.c	FUNCTION_72	IF_1	CALL_2
0x4000594	      0xe800000000	                          call 0x4000599	      3470	fold.c	FUNCTION_72	IF_1	CALL_2
0x4000599	          0x8b5320	            mov edx, dword [rbx + 0x20] 	      3471	fold.c	FUNCTION_72	IF_1	IF_2
0x400059c	            0x39d0	                            cmp eax, edx	      3471	fold.c	FUNCTION_72	IF_1	IF_2
0x400059e	            0x7ee2	                           jle 0x4000582	      3471	fold.c	FUNCTION_72	IF_1	IF_2
0x40005a0	            0x89c1	                            mov ecx, eax	      3473	fold.c	FUNCTION_72	IF_1	IF_2
0x40005a2	          0x894320	             mov dword [rbx + 0x20], eax	      3474	fold.c	FUNCTION_72	IF_1	IF_2
0x40005a5	            0x29d1	                            sub ecx, edx	      3473	fold.c	FUNCTION_72	IF_1	IF_2
0x40005a7	          0x894b28	             mov dword [rbx + 0x28], ecx	      3473	fold.c	FUNCTION_72	IF_1	IF_2
0x40005aa	        0x4883c408	                              add rsp, 8	      3478	fold.c	FUNCTION_72
0x40005ae	              0x5b	                                 pop rbx	      3478	fold.c	FUNCTION_72
0x40005af	              0x5d	                                 pop rbp	      3478	fold.c	FUNCTION_72
0x40005b0	              0xc3	                                     ret	      3478	fold.c	FUNCTION_72
foldlevelIndent	WHILE,0:functions,0:ELSE,2:DO,0:FOR,0:SWITCH,0:IF,4:CALL,5	58
0x4000460	            0x4154	                                push r12	      3203	fold.c	FUNCTION_67
0x4000462	              0x55	                                push rbp	      3203	fold.c	FUNCTION_67
0x4000463	            0x31d2	                            xor edx, edx	      3209	fold.c	FUNCTION_67	CALL_2
0x4000465	              0x53	                                push rbx	      3203	fold.c	FUNCTION_67
0x4000466	          0x488b07	                    mov rax, qword [rdi]	      3208	fold.c	FUNCTION_67
0x4000469	          0x4889fb	                            mov rbx, rdi	      3203	fold.c	FUNCTION_67
0x400046c	        0x488b6f10	            mov rbp, qword [rdi + 0x10] 	      3206	fold.c	FUNCTION_67
0x4000470	        0x48036f08	                add rbp, qword [rdi + 8]	      3206	fold.c	FUNCTION_67
0x4000474	        0x4c8b6008	                mov r12, qword [rax + 8]	      3208	fold.c	FUNCTION_67
0x4000478	          0x4889ee	                            mov rsi, rbp	      3209	fold.c	FUNCTION_67	CALL_2
0x400047b	          0x4c89e7	                            mov rdi, r12	      3209	fold.c	FUNCTION_67	CALL_2
0x400047e	      0xe800000000	                          call 0x4000483	      3209	fold.c	FUNCTION_67	CALL_2
0x4000483	          0x4889c7	                            mov rdi, rax	      3209	fold.c	FUNCTION_67	CALL_2
0x4000486	      0xe800000000	                          call 0x400048b	      3209	fold.c	FUNCTION_67	CALL_2
0x400048b	           0xfb630	                   movzx esi, byte [rax]	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x400048e	          0x4084f6	                           test sil, sil	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x4000491	            0x754d	                           jne 0x40004e0	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x4000493	        0x4883fd01	                              cmp rbp, 1	      3216	fold.c	FUNCTION_67	IF_1	IF_2
0x4000497	            0x7437	                            je 0x40004d0	      3216	fold.c	FUNCTION_67	IF_1	IF_2
0x4000499	        0x493b2c24	                    cmp rbp, qword [r12]	      3216	fold.c	FUNCTION_67	IF_1	IF_2
0x400049d	            0x7431	                            je 0x40004d0	      3216	fold.c	FUNCTION_67	IF_1	IF_2
0x400049f	    0xc74320ffffff	     mov dword [rbx + 0x20], 0xffffffff 	      3219	fold.c	FUNCTION_67	IF_1	ELSE_1
0x40004a6	    0x48c7c0ffffff	             mov rax, 0xffffffffffffffff	      3219	fold.c	FUNCTION_67	IF_1	ELSE_1
0x40004ad	          0x488b13	                    mov rdx, qword [rbx]	      3223	fold.c	FUNCTION_67	IF_3
0x40004b0	    0x488b92100200	           mov rdx, qword [rdx + 0x210] 	      3223	fold.c	FUNCTION_67	IF_3
0x40004b7	          0x4839c2	                            cmp rdx, rax	      3223	fold.c	FUNCTION_67	IF_3
0x40004ba	            0x7d0d	                           jge 0x40004c9	      3223	fold.c	FUNCTION_67	IF_3
0x40004bc	            0x85d2	                           test edx, edx	      3225	fold.c	FUNCTION_67	IF_3
0x40004be	      0xb800000000	                              mov eax, 0	      3225	fold.c	FUNCTION_67	IF_3
0x40004c3	           0xf48d0	                          cmovs edx, eax	      3225	fold.c	FUNCTION_67	IF_3
0x40004c6	          0x895320	             mov dword [rbx + 0x20], edx	      3225	fold.c	FUNCTION_67	IF_3
0x40004c9	              0x5b	                                 pop rbx	      3229	fold.c	FUNCTION_67
0x40004ca	              0x5d	                                 pop rbp	      3229	fold.c	FUNCTION_67
0x40004cb	            0x415c	                                 pop r12	      3229	fold.c	FUNCTION_67
0x40004cd	              0xc3	                                     ret	      3229	fold.c	FUNCTION_67
0x40004ce	            0x6690	                                     nop	      3229	fold.c	FUNCTION_67
0x40004d0	    0xc74320000000	               mov dword [rbx + 0x20], 0	      3217	fold.c	FUNCTION_67	IF_1	IF_2
0x40004d7	            0x31c0	                            xor eax, eax	      3217	fold.c	FUNCTION_67	IF_1	IF_2
0x40004d9	            0xebd2	                           jmp 0x40004ad	      3217	fold.c	FUNCTION_67	IF_1	IF_2
0x40004db	       0xf1f440000	                   nop dword [rax + rax]	      3217	fold.c	FUNCTION_67	IF_1	IF_2
0x40004e0	          0x488b03	                    mov rax, qword [rbx]	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x40004e3	    0x488bb8e00100	           mov rdi, qword [rax + 0x1e0] 	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x40004ea	      0xe800000000	                          call 0x40004ef	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x40004ef	          0x4885c0	                           test rax, rax	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x40004f2	            0x759f	                           jne 0x4000493	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x40004f4	          0x4889ee	                            mov rsi, rbp	      3222	fold.c	FUNCTION_67	CALL_5
0x40004f7	          0x4c89e7	                            mov rdi, r12	      3222	fold.c	FUNCTION_67	CALL_5
0x40004fa	      0xe800000000	                          call 0x40004ff	      3222	fold.c	FUNCTION_67	CALL_5
0x40004ff	    0x488b3d000000	            mov rdi, qword [0x04000506] 	      3222	fold.c	FUNCTION_67	CALL_5
0x4000506	            0x89c5	                            mov ebp, eax	      3222	fold.c	FUNCTION_67	CALL_5
0x4000508	      0xe800000000	                          call 0x400050d	      3222	fold.c	FUNCTION_67	CALL_5
0x400050d	          0x4889c1	                            mov rcx, rax	      3222	fold.c	FUNCTION_67	CALL_5
0x4000510	          0x4863c5	                         movsxd rax, ebp	      3222	fold.c	FUNCTION_67	CALL_5
0x4000513	            0x4899	                                     cqo	      3222	fold.c	FUNCTION_67	CALL_5
0x4000515	          0x48f7f9	                                idiv rcx	      3222	fold.c	FUNCTION_67	CALL_5
0x4000518	          0x894320	             mov dword [rbx + 0x20], eax	      3222	fold.c	FUNCTION_67	CALL_5
0x400051b	            0x4898	                                    cdqe	      3222	fold.c	FUNCTION_67	CALL_5
0x400051d	            0xeb8e	                           jmp 0x40004ad	      3222	fold.c	FUNCTION_67	CALL_5
foldUpdateAll	WHILE,0:functions,0:ELSE,0:DO,0:FOR,0:SWITCH,0:IF,0:CALL,1	3
0x4002d20	    0xc68721010000	               mov byte [rdi + 0x121], 1	       852	fold.c	FUNCTION_29
0x4002d27	      0xbe28000000	                           mov esi, 0x28	       853	fold.c	FUNCTION_29	CALL_1
0x4002d2c	      0xe900000000	                           jmp 0x4002d31	       853	fold.c	FUNCTION_29	CALL_1
closeFoldRecurse	WHILE,0:functions,0:ELSE,0:DO,0:FOR,0:SWITCH,0:IF,0:CALL,1	50
0x4006920	              0x55	                                push rbp	       377	fold.c	FUNCTION_15
0x4006921	              0x53	                                push rbx	       377	fold.c	FUNCTION_15
0x4006922	          0x4889fd	                            mov rbp, rdi	       377	fold.c	FUNCTION_15
0x4006925	        0x4883ec08	                              sub rsp, 8	       377	fold.c	FUNCTION_15
0x4006929	    0x488b3d000000	            mov rdi, qword [0x04006930] 	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x4006930	    0x488b87f80100	           mov rax, qword [rdi + 0x1f8] 	       357	fold.c	FUNCTION_13
0x4006937	          0x803864	                    cmp byte [rax], 0x64	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x400693a	            0x741c	                            je 0x4006958	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x400693c	        0x4883c408	                              add rsp, 8	       379	fold.c	FUNCTION_15
0x4006940	          0x4889ee	                            mov rsi, rbp	      1253	fold.c	FUNCTION_40	CALL_2
0x4006943	          0x4531c0	                            xor r8d, r8d	      1253	fold.c	FUNCTION_40	CALL_2
0x4006946	              0x5b	                                 pop rbx	       379	fold.c	FUNCTION_15
0x4006947	              0x5d	                                 pop rbp	       379	fold.c	FUNCTION_15
0x4006948	      0xb901000000	                              mov ecx, 1	      1253	fold.c	FUNCTION_40	CALL_2
0x400694d	            0x31d2	                            xor edx, edx	      1253	fold.c	FUNCTION_40	CALL_2
0x400694f	      0xe94cf9ffff	                jmp sym.setManualFoldWin	      1253	fold.c	FUNCTION_40	CALL_2
0x4006954	         0xf1f4000	                         nop dword [rax]	      1253	fold.c	FUNCTION_40	CALL_2
0x4006958	    0x8b9788020000	           mov edx, dword [rdi + 0x288] 	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x400695e	            0x85d2	                           test edx, edx	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x4006960	            0x74da	                            je 0x400693c	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x4006962	    0x488b1d000000	            mov rbx, qword [0x04006969] 	      1241	fold.c	FUNCTION_40	IF_1
0x4006969	          0x4885db	                           test rbx, rbx	      1241	fold.c	FUNCTION_40	IF_1
0x400696c	            0x750b	                           jne 0x4006979	      1241	fold.c	FUNCTION_40	IF_1
0x400696e	            0xebcc	                           jmp 0x400693c	      1241	fold.c	FUNCTION_40	IF_1
0x4006970	        0x488b5b20	            mov rbx, qword [rbx + 0x20] 	      1241	fold.c	FUNCTION_40	IF_1
0x4006974	          0x4885db	                           test rbx, rbx	      1241	fold.c	FUNCTION_40	IF_1
0x4006977	            0x74c3	                            je 0x400693c	      1241	fold.c	FUNCTION_40	IF_1
0x4006979	          0x4839df	                            cmp rdi, rbx	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x400697c	            0x74f2	                            je 0x4006970	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x400697e	    0x488b83f80100	           mov rax, qword [rbx + 0x1f8] 	       357	fold.c	FUNCTION_13
0x4006985	          0x803864	                    cmp byte [rax], 0x64	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x4006988	            0x75e6	                           jne 0x4006970	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x400698a	    0x8b8388020000	           mov eax, dword [rbx + 0x288] 	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x4006990	            0x85c0	                           test eax, eax	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x4006992	            0x74dc	                            je 0x4006970	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x4006994	        0x488b7f38	            mov rdi, qword [rdi + 0x38] 	      1245	fold.c	FUNCTION_40	FUNCTION_1	CALL_2
0x4006998	          0x4889de	                            mov rsi, rbx	      1245	fold.c	FUNCTION_40	FUNCTION_1	CALL_2
0x400699b	      0xe800000000	                          call 0x40069a0	      1245	fold.c	FUNCTION_40	FUNCTION_1	CALL_2
0x40069a0	          0x4885c0	                           test rax, rax	      1246	fold.c	FUNCTION_40	FUNCTION_1	IF_2
0x40069a3	            0x750b	                           jne 0x40069b0	      1246	fold.c	FUNCTION_40	FUNCTION_1	IF_2
0x40069a5	    0x488b3d000000	            mov rdi, qword [0x040069ac] 	      1246	fold.c	FUNCTION_40	FUNCTION_1	IF_2
0x40069ac	            0xebc2	                           jmp 0x4006970	      1246	fold.c	FUNCTION_40	FUNCTION_1	IF_2
0x40069ae	            0x6690	                                     nop	      1246	fold.c	FUNCTION_40	FUNCTION_1	IF_2
0x40069b0	          0x4531c0	                            xor r8d, r8d	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x40069b3	      0xb901000000	                              mov ecx, 1	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x40069b8	            0x31d2	                            xor edx, edx	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x40069ba	          0x4889c6	                            mov rsi, rax	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x40069bd	          0x4889df	                            mov rdi, rbx	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x40069c0	      0xe8dbf8ffff	               call sym.setManualFoldWin	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x40069c5	            0xebde	                           jmp 0x40069a5	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
foldAdjustVisual	WHILE,0:functions,0:ELSE,1:DO,0:FOR,0:SWITCH,0:IF,6:CALL,7	85
0x4006cf0	    0x8b3500000000	            mov esi, dword [0x04006cf6] 	      1038	fold.c	FUNCTION_33	IF_1	CALL_1
0x4006cf6	            0x4154	                                push r12	      1034	fold.c	FUNCTION_33
0x4006cf8	              0x55	                                push rbp	      1034	fold.c	FUNCTION_33
0x4006cf9	              0x53	                                push rbx	      1034	fold.c	FUNCTION_33
0x4006cfa	            0x85f6	                           test esi, esi	      1038	fold.c	FUNCTION_33	IF_1	CALL_1
0x4006cfc	     0xf8487000000	                            je 0x4006d89	      1038	fold.c	FUNCTION_33	IF_1	CALL_1
0x4006d02	    0x488b3d000000	            mov rdi, qword [0x04006d09] 	      1038	fold.c	FUNCTION_33	IF_1	CALL_1
0x4006d09	    0x8b8fd4010000	           mov ecx, dword [rdi + 0x1d4] 	       119	fold.c	FUNCTION_2	CALL_1
0x4006d0f	            0x85c9	                           test ecx, ecx	       119	fold.c	FUNCTION_2	CALL_1
0x4006d11	            0x7476	                            je 0x4006d89	       119	fold.c	FUNCTION_2	CALL_1
0x4006d13	    0x488b87f80100	           mov rax, qword [rdi + 0x1f8] 	       307	fold.c	FUNCTION_8
0x4006d1a	        0x80780375	                cmp byte [rax + 3], 0x75	       119	fold.c	FUNCTION_2	CALL_1
0x4006d1e	     0xf84f4000000	                            je 0x4006e18	       119	fold.c	FUNCTION_2	CALL_1
0x4006d24	    0x488b35000000	            mov rsi, qword [0x04006d2b] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4006d2b	        0x488b4738	            mov rax, qword [rdi + 0x38] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4006d2f	          0x4839c6	                            cmp rsi, rax	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4006d32	     0xf8498000000	                            je 0x4006dd0	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4006d38	     0xf8dbd000000	                           jge 0x4006dfb	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4006d3e	        0x488d5f38	                   lea rbx, [rdi + 0x38]	      1044	fold.c	FUNCTION_33	IF_2
0x4006d42	      0xba00000000	                              mov edx, 0	      1044	fold.c	FUNCTION_33	IF_2
0x4006d47	          0x4889d5	                            mov rbp, rdx	      1043	fold.c	FUNCTION_33	IF_2
0x4006d4a	          0x4989dc	                            mov r12, rbx	      1044	fold.c	FUNCTION_33	IF_2
0x4006d4d	          0x4531c9	                            xor r9d, r9d	       132	fold.c	FUNCTION_3	CALL_1
0x4006d50	            0x31c9	                            xor ecx, ecx	       132	fold.c	FUNCTION_3	CALL_1
0x4006d52	    0x41b801000000	                              mov r8d, 1	       132	fold.c	FUNCTION_3	CALL_1
0x4006d58	      0xe800000000	                          call 0x4006d5d	       132	fold.c	FUNCTION_3	CALL_1
0x4006d5d	            0x85c0	                           test eax, eax	      1051	fold.c	FUNCTION_33	IF_3	CALL_3
0x4006d5f	            0x7407	                            je 0x4006d68	      1051	fold.c	FUNCTION_33	IF_3	CALL_3
0x4006d61	    0xc74508000000	                  mov dword [rbp + 8], 0	      1052	fold.c	FUNCTION_33	IF_3
0x4006d68	          0x488b33	                    mov rsi, qword [rbx]	       132	fold.c	FUNCTION_3	CALL_1
0x4006d6b	    0x488b3d000000	            mov rdi, qword [0x04006d72] 	       132	fold.c	FUNCTION_3	CALL_1
0x4006d72	          0x4531c9	                            xor r9d, r9d	       132	fold.c	FUNCTION_3	CALL_1
0x4006d75	            0x31d2	                            xor edx, edx	       132	fold.c	FUNCTION_3	CALL_1
0x4006d77	    0x41b801000000	                              mov r8d, 1	       132	fold.c	FUNCTION_3	CALL_1
0x4006d7d	          0x4c89e1	                            mov rcx, r12	       132	fold.c	FUNCTION_3	CALL_1
0x4006d80	      0xe800000000	                          call 0x4006d85	       132	fold.c	FUNCTION_3	CALL_1
0x4006d85	            0x85c0	                           test eax, eax	      1053	fold.c	FUNCTION_33	IF_4	CALL_4
0x4006d87	            0x7507	                           jne 0x4006d90	      1053	fold.c	FUNCTION_33	IF_4	CALL_4
0x4006d89	              0x5b	                                 pop rbx	      1065	fold.c	FUNCTION_33
0x4006d8a	              0x5d	                                 pop rbp	      1065	fold.c	FUNCTION_33
0x4006d8b	            0x415c	                                 pop r12	      1065	fold.c	FUNCTION_33
0x4006d8d	              0xc3	                                     ret	      1065	fold.c	FUNCTION_33
0x4006d8e	            0x6690	                                     nop	      1065	fold.c	FUNCTION_33
0x4006d90	          0x488b3b	                    mov rdi, qword [rbx]	      1055	fold.c	FUNCTION_33	IF_4	CALL_5
0x4006d93	      0xe800000000	                          call 0x4006d98	      1055	fold.c	FUNCTION_33	IF_4	CALL_5
0x4006d98	          0x4889c7	                            mov rdi, rax	      1056	fold.c	FUNCTION_33	IF_4	CALL_6
0x4006d9b	      0xe800000000	                          call 0x4006da0	      1056	fold.c	FUNCTION_33	IF_4	CALL_6
0x4006da0	            0x85c0	                           test eax, eax	      1057	fold.c	FUNCTION_33	IF_4	IF_5
0x4006da2	          0x894308	                mov dword [rbx + 8], eax	      1056	fold.c	FUNCTION_33	IF_4	CALL_6
0x4006da5	            0x7e0c	                           jle 0x4006db3	      1057	fold.c	FUNCTION_33	IF_4	IF_5
0x4006da7	    0x488b15000000	            mov rdx, qword [0x04006dae] 	      1057	fold.c	FUNCTION_33	IF_4	IF_5
0x4006dae	          0x803a6f	                    cmp byte [rdx], 0x6f	      1057	fold.c	FUNCTION_33	IF_4	IF_5
0x4006db1	            0x747d	                            je 0x4006e30	      1057	fold.c	FUNCTION_33	IF_4	IF_5
0x4006db3	    0x8b0500000000	            mov eax, dword [0x04006db9] 	      1061	fold.c	FUNCTION_33	IF_4	IF_6
0x4006db9	            0x85c0	                           test eax, eax	      1061	fold.c	FUNCTION_33	IF_4	IF_6
0x4006dbb	            0x74cc	                            je 0x4006d89	      1061	fold.c	FUNCTION_33	IF_4	IF_6
0x4006dbd	              0x5b	                                 pop rbx	      1065	fold.c	FUNCTION_33
0x4006dbe	              0x5d	                                 pop rbp	      1065	fold.c	FUNCTION_33
0x4006dbf	            0x415c	                                 pop r12	      1065	fold.c	FUNCTION_33
0x4006dc1	      0xe900000000	                           jmp 0x4006dc6	      1062	fold.c	FUNCTION_33	IF_4	CALL_7
0x4006dc6	    0x662e0f1f8400	                 nop word cs:[rax + rax]	      1062	fold.c	FUNCTION_33	IF_4	CALL_7
0x4006dd0	          0x8b4f40	            mov ecx, dword [rdi + 0x40] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4006dd3	    0x390d00000000	            cmp dword [0x04006dd9], ecx 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4006dd9	            0x7509	                           jne 0x4006de4	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4006ddb	          0x8b4f44	            mov ecx, dword [rdi + 0x44] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4006dde	    0x390d00000000	            cmp dword [0x04006de4], ecx 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4006de4	     0xf8c54ffffff	                            jl 0x4006d3e	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4006dea	        0x488b4f40	            mov rcx, qword [rdi + 0x40] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4006dee	    0x48390d000000	            cmp qword [0x04006df5], rcx 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4006df5	     0xf8443ffffff	                            je 0x4006d3e	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4006dfb	        0x488d6f38	                   lea rbp, [rdi + 0x38]	      1048	fold.c	FUNCTION_33	ELSE_1
0x4006dff	    0x41bc00000000	                             mov r12d, 0	      1048	fold.c	FUNCTION_33	ELSE_1
0x4006e05	          0x4889c6	                            mov rsi, rax	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4006e08	          0x4c89e3	                            mov rbx, r12	      1049	fold.c	FUNCTION_33	ELSE_1
0x4006e0b	          0x4889ea	                            mov rdx, rbp	      1048	fold.c	FUNCTION_33	ELSE_1
0x4006e0e	      0xe93affffff	                           jmp 0x4006d4d	      1048	fold.c	FUNCTION_33	ELSE_1
0x4006e13	       0xf1f440000	                   nop dword [rax + rax]	      1048	fold.c	FUNCTION_33	ELSE_1
0x4006e18	    0x8b9708010000	           mov edx, dword [rdi + 0x108] 	       119	fold.c	FUNCTION_2	CALL_1
0x4006e1e	            0x85d2	                           test edx, edx	       119	fold.c	FUNCTION_2	CALL_1
0x4006e20	     0xf8ffefeffff	                            jg 0x4006d24	       119	fold.c	FUNCTION_2	CALL_1
0x4006e26	      0xe95effffff	                           jmp 0x4006d89	       119	fold.c	FUNCTION_2	CALL_1
0x4006e2b	       0xf1f440000	                   nop dword [rax + rax]	       119	fold.c	FUNCTION_2	CALL_1
0x4006e30	          0x83e801	                              sub eax, 1	      1058	fold.c	FUNCTION_33	IF_4	IF_5
0x4006e33	          0x894308	                mov dword [rbx + 8], eax	      1058	fold.c	FUNCTION_33	IF_4	IF_5
0x4006e36	      0xe978ffffff	                           jmp 0x4006db3	      1058	fold.c	FUNCTION_33	IF_4	IF_5
foldAdjustCursor	WHILE,0:functions,0:ELSE,0:DO,0:FOR,0:SWITCH,0:IF,0:CALL,1	7
0x4006e40	    0x488b3d000000	            mov rdi, qword [0x04006e47] 	      1074	fold.c	FUNCTION_34	CALL_1
0x4006e47	          0x4531c9	                            xor r9d, r9d	       132	fold.c	FUNCTION_3	CALL_1
0x4006e4a	    0x41b801000000	                              mov r8d, 1	       132	fold.c	FUNCTION_3	CALL_1
0x4006e50	            0x31c9	                            xor ecx, ecx	       132	fold.c	FUNCTION_3	CALL_1
0x4006e52	        0x488b7738	            mov rsi, qword [rdi + 0x38] 	       132	fold.c	FUNCTION_3	CALL_1
0x4006e56	        0x488d5738	                   lea rdx, [rdi + 0x38]	      1074	fold.c	FUNCTION_34	CALL_1
0x4006e5a	      0xe971fbffff	                   jmp sym.hasFoldingWin	       132	fold.c	FUNCTION_3	CALL_1
openFoldRecurse	WHILE,0:functions,0:ELSE,0:DO,0:FOR,0:SWITCH,0:IF,0:CALL,1	51
0x4006580	              0x55	                                push rbp	       435	fold.c	FUNCTION_18
0x4006581	              0x53	                                push rbx	       435	fold.c	FUNCTION_18
0x4006582	          0x4889fd	                            mov rbp, rdi	       435	fold.c	FUNCTION_18
0x4006585	        0x4883ec08	                              sub rsp, 8	       435	fold.c	FUNCTION_18
0x4006589	    0x488b3d000000	            mov rdi, qword [0x04006590] 	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x4006590	    0x488b87f80100	           mov rax, qword [rdi + 0x1f8] 	       357	fold.c	FUNCTION_13
0x4006597	          0x803864	                    cmp byte [rax], 0x64	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x400659a	            0x7424	                            je 0x40065c0	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x400659c	        0x4883c408	                              add rsp, 8	       437	fold.c	FUNCTION_18
0x40065a0	          0x4889ee	                            mov rsi, rbp	      1253	fold.c	FUNCTION_40	CALL_2
0x40065a3	          0x4531c0	                            xor r8d, r8d	      1253	fold.c	FUNCTION_40	CALL_2
0x40065a6	              0x5b	                                 pop rbx	       437	fold.c	FUNCTION_18
0x40065a7	              0x5d	                                 pop rbp	       437	fold.c	FUNCTION_18
0x40065a8	      0xb901000000	                              mov ecx, 1	      1253	fold.c	FUNCTION_40	CALL_2
0x40065ad	      0xba01000000	                              mov edx, 1	      1253	fold.c	FUNCTION_40	CALL_2
0x40065b2	      0xe9e9fcffff	                jmp sym.setManualFoldWin	      1253	fold.c	FUNCTION_40	CALL_2
0x40065b7	    0x660f1f840000	                    nop word [rax + rax]	      1253	fold.c	FUNCTION_40	CALL_2
0x40065c0	    0x8b9788020000	           mov edx, dword [rdi + 0x288] 	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x40065c6	            0x85d2	                           test edx, edx	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x40065c8	            0x74d2	                            je 0x400659c	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x40065ca	    0x488b1d000000	            mov rbx, qword [0x040065d1] 	      1241	fold.c	FUNCTION_40	IF_1
0x40065d1	          0x4885db	                           test rbx, rbx	      1241	fold.c	FUNCTION_40	IF_1
0x40065d4	            0x7513	                           jne 0x40065e9	      1241	fold.c	FUNCTION_40	IF_1
0x40065d6	            0xebc4	                           jmp 0x400659c	      1241	fold.c	FUNCTION_40	IF_1
0x40065d8	     0xf1f84000000	                   nop dword [rax + rax]	      1241	fold.c	FUNCTION_40	IF_1
0x40065e0	        0x488b5b20	            mov rbx, qword [rbx + 0x20] 	      1241	fold.c	FUNCTION_40	IF_1
0x40065e4	          0x4885db	                           test rbx, rbx	      1241	fold.c	FUNCTION_40	IF_1
0x40065e7	            0x74b3	                            je 0x400659c	      1241	fold.c	FUNCTION_40	IF_1
0x40065e9	          0x4839df	                            cmp rdi, rbx	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x40065ec	            0x74f2	                            je 0x40065e0	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x40065ee	    0x488b83f80100	           mov rax, qword [rbx + 0x1f8] 	       357	fold.c	FUNCTION_13
0x40065f5	          0x803864	                    cmp byte [rax], 0x64	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x40065f8	            0x75e6	                           jne 0x40065e0	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x40065fa	    0x8b8388020000	           mov eax, dword [rbx + 0x288] 	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x4006600	            0x85c0	                           test eax, eax	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x4006602	            0x74dc	                            je 0x40065e0	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x4006604	        0x488b7f38	            mov rdi, qword [rdi + 0x38] 	      1245	fold.c	FUNCTION_40	FUNCTION_1	CALL_2
0x4006608	          0x4889de	                            mov rsi, rbx	      1245	fold.c	FUNCTION_40	FUNCTION_1	CALL_2
0x400660b	      0xe800000000	                          call 0x4006610	      1245	fold.c	FUNCTION_40	FUNCTION_1	CALL_2
0x4006610	          0x4885c0	                           test rax, rax	      1246	fold.c	FUNCTION_40	FUNCTION_1	IF_2
0x4006613	            0x750b	                           jne 0x4006620	      1246	fold.c	FUNCTION_40	FUNCTION_1	IF_2
0x4006615	    0x488b3d000000	            mov rdi, qword [0x0400661c] 	      1246	fold.c	FUNCTION_40	FUNCTION_1	IF_2
0x400661c	            0xebc2	                           jmp 0x40065e0	      1246	fold.c	FUNCTION_40	FUNCTION_1	IF_2
0x400661e	            0x6690	                                     nop	      1246	fold.c	FUNCTION_40	FUNCTION_1	IF_2
0x4006620	          0x4531c0	                            xor r8d, r8d	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x4006623	      0xb901000000	                              mov ecx, 1	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x4006628	      0xba01000000	                              mov edx, 1	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x400662d	          0x4889c6	                            mov rsi, rax	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x4006630	          0x4889df	                            mov rdi, rbx	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x4006633	      0xe868fcffff	               call sym.setManualFoldWin	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x4006638	            0xebdb	                           jmp 0x4006615	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
foldUpdateIEMSRecurse	WHILE,4:functions,0:ELSE,14:DO,0:FOR,1:SWITCH,0:IF,46:CALL,21	842
0x4003b40	            0x4157	                                push r15	      2379	fold.c	FUNCTION_59
0x4003b42	            0x4156	                                push r14	      2379	fold.c	FUNCTION_59
0x4003b44	          0x4989ce	                            mov r14, rcx	      2379	fold.c	FUNCTION_59
0x4003b47	            0x4155	                                push r13	      2379	fold.c	FUNCTION_59
0x4003b49	            0x4154	                                push r12	      2379	fold.c	FUNCTION_59
0x4003b4b	          0x4989d5	                            mov r13, rdx	      2379	fold.c	FUNCTION_59
0x4003b4e	              0x55	                                push rbp	      2379	fold.c	FUNCTION_59
0x4003b4f	              0x53	                                push rbx	      2379	fold.c	FUNCTION_59
0x4003b50	            0x31db	                            xor ebx, ebx	      2381	fold.c	FUNCTION_59
0x4003b52	          0x4889fd	                            mov rbp, rdi	      2379	fold.c	FUNCTION_59
0x4003b55	          0x4d89c4	                             mov r12, r8	      2379	fold.c	FUNCTION_59
0x4003b58	        0x4883ec58	                           sub rsp, 0x58	      2379	fold.c	FUNCTION_59
0x4003b5c	        0x488b4108	                mov rax, qword [rcx + 8]	      2385	fold.c	FUNCTION_59
0x4003b60	        0x89742414	             mov dword [rsp + 0x14], esi	      2379	fold.c	FUNCTION_59
0x4003b64	      0x4c894c2420	              mov qword [rsp + 0x20], r9	      2379	fold.c	FUNCTION_59
0x4003b69	      0x4889442408	                mov qword [rsp + 8], rax	      2385	fold.c	FUNCTION_59
0x4003b6e	          0x488b01	                    mov rax, qword [rcx]	      2388	fold.c	FUNCTION_59
0x4003b71	        0x488b4008	                mov rax, qword [rax + 8]	      2388	fold.c	FUNCTION_59
0x4003b75	          0x488b00	                    mov rax, qword [rax]	      2388	fold.c	FUNCTION_59
0x4003b78	        0x482b4110	             sub rax, qword [rcx + 0x10]	      2388	fold.c	FUNCTION_59
0x4003b7c	    0x4981f8000000	                               cmp r8, 0	      2397	fold.c	FUNCTION_59	IF_1
0x4003b83	      0x4889442428	             mov qword [rsp + 0x28], rax	      2388	fold.c	FUNCTION_59
0x4003b88	     0xf84100a0000	                            je 0x400459e	      2397	fold.c	FUNCTION_59	IF_1
0x4003b8e	      0x488b442408	                mov rax, qword [rsp + 8]	      2417	fold.c	FUNCTION_59
0x4003b93	    0x4981fc000000	                              cmp r12, 0	      2444	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4003b9a	      0x4c896c2438	             mov qword [rsp + 0x38], r13	      2418	fold.c	FUNCTION_59	WHILE_1
0x4003b9f	           0xf95c2	                                setne dl	      2444	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4003ba2	    0x4981fc000000	                              cmp r12, 0	      2444	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4003ba9	    0xc74424300000	               mov dword [rsp + 0x30], 0	      2387	fold.c	FUNCTION_59
0x4003bb1	        0x49894618	             mov qword [r14 + 0x18], rax	      2417	fold.c	FUNCTION_59
0x4003bb5	           0xf95c0	                                setne al	      2444	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4003bb8	            0x21d0	                            and eax, edx	      2444	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4003bba	    0x4981fc000000	                              cmp r12, 0	      2444	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4003bc1	           0xf95c2	                                setne dl	      2444	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4003bc4	            0x21d0	                            and eax, edx	      2444	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4003bc6	    0x4981fc000000	                              cmp r12, 0	      2444	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4003bcd	           0xf94c2	                                 sete dl	      2444	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4003bd0	    0x4981fc000000	                              cmp r12, 0	      2444	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4003bd7	        0x88442446	               mov byte [rsp + 0x46], al	      2444	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4003bdb	           0xf94c0	                                 sete al	      2444	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4003bde	             0x9d0	                             or eax, edx	      2444	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4003be0	    0x4981fc000000	                              cmp r12, 0	      2444	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4003be7	           0xf94c2	                                 sete dl	      2444	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4003bea	             0x9d0	                             or eax, edx	      2444	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4003bec	        0x88442447	               mov byte [rsp + 0x47], al	      2444	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4003bf0	        0x8b442414	            mov eax, dword [rsp + 0x14] 	      2418	fold.c	FUNCTION_59	WHILE_1
0x4003bf4	        0x89442410	             mov dword [rsp + 0x10], eax	      2418	fold.c	FUNCTION_59	WHILE_1
0x4003bf8	          0x83c001	                              add eax, 1	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4003bfb	        0x89442440	             mov dword [rsp + 0x40], eax	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4003bff	              0x90	                                     nop	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4003c00	    0x8b0500000000	            mov eax, dword [0x04003c06] 	      2418	fold.c	FUNCTION_59	WHILE_1
0x4003c06	            0x85c0	                           test eax, eax	      2418	fold.c	FUNCTION_59	WHILE_1
0x4003c08	     0xf853d050000	                           jne 0x400414b	      2418	fold.c	FUNCTION_59	WHILE_1
0x4003c0e	      0xe800000000	                          call 0x4003c13	      2421	fold.c	FUNCTION_59	WHILE_1	CALL_2
0x4003c13	        0x418b4620	            mov eax, dword [r14 + 0x20] 	      2427	fold.c	FUNCTION_59	WHILE_1
0x4003c17	      0xbf14000000	                           mov edi, 0x14	      2427	fold.c	FUNCTION_59	WHILE_1
0x4003c1c	        0x4d8b5608	                mov r10, qword [r14 + 8]	      2430	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4003c20	          0x83f814	                           cmp eax, 0x14	      2430	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4003c23	          0x4d89d7	                            mov r15, r10	      2430	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4003c26	           0xf4fc7	                          cmovg eax, edi	      2430	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4003c29	      0x4c39542408	                cmp qword [rsp + 8], r10	      2430	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4003c2e	        0x89442410	             mov dword [rsp + 0x10], eax	      2430	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4003c32	            0x7d22	                           jge 0x4003c56	      2430	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4003c34	            0x89c7	                            mov edi, eax	      2431	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4003c36	        0x412b4628	             sub eax, dword [r14 + 0x28]	      2431	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4003c3a	        0x8b742414	            mov esi, dword [rsp + 0x14] 	      2431	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4003c3e	            0x39c6	                            cmp esi, eax	      2431	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4003c40	     0xf8fa0020000	                            jg 0x4003ee6	      2431	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4003c46	        0x413b7630	            cmp esi, dword [r14 + 0x30] 	      2432	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4003c4a	      0xbe00000000	                              mov esi, 0	      2432	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4003c4f	           0xf4cf7	                          cmovl esi, edi	      2432	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4003c52	        0x89742410	             mov dword [rsp + 0x10], esi	      2432	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4003c56	      0x4c39542420	            cmp qword [rsp + 0x20], r10 	      2434	fold.c	FUNCTION_59	WHILE_1	IF_5
0x4003c5b	     0xf8dcf000000	                           jge 0x4003d30	      2434	fold.c	FUNCTION_59	WHILE_1	IF_5
0x4003c61	      0x448b442430	            mov r8d, dword [rsp + 0x30] 	      2434	fold.c	FUNCTION_59	WHILE_1	IF_5
0x4003c66	          0x4585c0	                           test r8d, r8d	      2434	fold.c	FUNCTION_59	WHILE_1	IF_5
0x4003c69	     0xf85c1000000	                           jne 0x4003d30	      2434	fold.c	FUNCTION_59	WHILE_1	IF_5
0x4003c6f	          0x4885db	                           test rbx, rbx	      2434	fold.c	FUNCTION_59	WHILE_1	IF_5
0x4003c72	     0xf847b020000	                            je 0x4003ef3	      2434	fold.c	FUNCTION_59	WHILE_1	IF_5
0x4003c78	      0x807c244600	                cmp byte [rsp + 0x46], 0	      2444	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4003c7d	     0xf85630b0000	                           jne 0x40047e6	      2444	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4003c83	        0x8b7c2414	            mov edi, dword [rsp + 0x14] 	      2448	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x4003c87	        0x397c2410	            cmp dword [rsp + 0x10], edi 	      2448	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x4003c8b	          0x488b03	                    mov rax, qword [rbx]	      2453	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x4003c8e	     0xf8d04060000	                           jge 0x4004298	      2448	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x4003c94	      0x4889442418	             mov qword [rsp + 0x18], rax	      2448	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x4003c99	          0x4929c2	                            sub r10, rax	      2448	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x4003c9c	          0x8b4310	            mov eax, dword [rbx + 0x10] 	      1132	fold.c	FUNCTION_36
0x4003c9f	        0x4c8b4320	              mov r8, qword [rbx + 0x20]	      1132	fold.c	FUNCTION_36
0x4003ca3	          0x8d70ff	                      lea esi, [rax - 1]	      1132	fold.c	FUNCTION_36
0x4003ca6	          0x4863f6	                         movsxd rsi, esi	      1132	fold.c	FUNCTION_36
0x4003ca9	          0x4885f6	                           test rsi, rsi	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003cac	     0xf88400b0000	                            js 0x40047f2	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003cb2	            0x31d2	                            xor edx, edx	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003cb4	            0xeb15	                           jmp 0x4003ccb	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003cb6	    0x662e0f1f8400	                 nop word cs:[rax + rax]	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003cc0	          0x83e801	                              sub eax, 1	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4003cc3	          0x4863f0	                         movsxd rsi, eax	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4003cc6	          0x4839f2	                            cmp rdx, rsi	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003cc9	            0x7f2e	                            jg 0x4003cf9	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003ccb	        0x488d0416	                    lea rax, [rsi + rdx]	      1135	fold.c	FUNCTION_36	WHILE_1
0x4003ccf	          0x48d1f8	                              sar rax, 1	      1135	fold.c	FUNCTION_36	WHILE_1
0x4003cd2	        0x488d0c40	                  lea rcx, [rax + rax*2]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4003cd6	        0x48c1e104	                              shl rcx, 4	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4003cda	          0x4c01c1	                             add rcx, r8	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4003cdd	          0x488b39	                    mov rdi, qword [rcx]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4003ce0	          0x4c39d7	                            cmp rdi, r10	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4003ce3	            0x7fdb	                            jg 0x4003cc0	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4003ce5	        0x48037908	                add rdi, qword [rcx + 8]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4003ce9	          0x4c39d7	                            cmp rdi, r10	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4003cec	            0x7f1f	                            jg 0x4003d0d	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4003cee	          0x8d5001	                      lea edx, [rax + 1]	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4003cf1	          0x4863d2	                         movsxd rdx, edx	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4003cf4	          0x4839f2	                            cmp rdx, rsi	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003cf7	            0x7ed2	                           jle 0x4003ccb	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003cf9	        0x488d0452	                  lea rax, [rdx + rdx*2]	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003cfd	        0x48c1e004	                              shl rax, 4	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003d01	          0x4c01c0	                             add rax, r8	      2463	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x4003d04	            0x7416	                            je 0x4003d1c	      2463	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x4003d06	        0x488b7808	                mov rdi, qword [rax + 8]	      2463	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x4003d0a	          0x480338	                    add rdi, qword [rax]	      2463	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x4003d0d	      0x488b442418	            mov rax, qword [rsp + 0x18] 	      2464	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x4003d12	      0x488d4407ff	                lea rax, [rdi + rax - 1]	      2464	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x4003d17	      0x4889442420	             mov qword [rsp + 0x20], rax	      2464	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x4003d1c	    0xc74424300000	               mov dword [rsp + 0x30], 0	      2650	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_29
0x4003d24	            0xeb13	                           jmp 0x4003d39	      2650	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_29
0x4003d26	    0x662e0f1f8400	                 nop word cs:[rax + rax]	      2650	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_29
0x4003d30	          0x4885db	                           test rbx, rbx	      2475	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4003d33	     0xf84c2010000	                            je 0x4003efb	      2475	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4003d39	        0x8b7c2414	            mov edi, dword [rsp + 0x14] 	      2657	fold.c	FUNCTION_59	WHILE_1	IF_30
0x4003d3d	        0x397c2410	            cmp dword [rsp + 0x10], edi 	      2657	fold.c	FUNCTION_59	WHILE_1	IF_30
0x4003d41	     0xf8c04040000	                            jl 0x400414b	      2657	fold.c	FUNCTION_59	WHILE_1	IF_30
0x4003d47	        0x4d8b5608	                mov r10, qword [r14 + 8]	      2657	fold.c	FUNCTION_59	WHILE_1	IF_30
0x4003d4b	      0x4c39542428	            cmp qword [rsp + 0x28], r10 	      2657	fold.c	FUNCTION_59	WHILE_1	IF_30
0x4003d50	     0xf8cf5030000	                            jl 0x400414b	      2657	fold.c	FUNCTION_59	WHILE_1	IF_30
0x4003d56	          0x4885db	                           test rbx, rbx	      2670	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4003d59	     0xf84e4000000	                            je 0x4003e43	      2670	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4003d5f	        0x8b7c2414	            mov edi, dword [rsp + 0x14] 	      2670	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4003d63	        0x397c2410	            cmp dword [rsp + 0x10], edi 	      2670	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4003d67	     0xf8ed6000000	                           jle 0x4003e43	      2670	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4003d6d	          0x4989df	                            mov r15, rbx	      2683	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4003d70	        0x4c2b7d10	             sub r15, qword [rbp + 0x10]	      2683	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4003d74	          0x488b03	                    mov rax, qword [rbx]	      2681	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4003d77	        0x498b5618	            mov rdx, qword [r14 + 0x18] 	      2681	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4003d7b	    0x48bfabaaaaaa	          movabs rdi, 0xaaaaaaaaaaaaaaab	      2683	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4003d85	        0x49014610	            add qword [r14 + 0x10], rax 	      2682	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4003d89	          0x4d89e0	                             mov r8, r12	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4003d8c	        0x49c1ff04	                              sar r15, 4	      2683	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4003d90	          0x4829c2	                            sub rdx, rax	      2681	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4003d93	        0x4c0fafff	                           imul r15, rdi	      2683	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4003d97	      0x488b7c2420	            mov rdi, qword [rsp + 0x20] 	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4003d9c	        0x49895608	                mov qword [r14 + 8], rdx	      2681	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4003da0	         0xfbe4b28	           movsx ecx, byte [rbx + 0x28] 	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4003da4	      0x488b542438	            mov rdx, qword [rsp + 0x38] 	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4003da9	          0x4c39d7	                            cmp rdi, r10	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4003dac	          0x4989f9	                             mov r9, rdi	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4003daf	        0x488d7b10	                   lea rdi, [rbx + 0x10]	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4003db3	        0x4d0f4cca	                           cmovl r9, r10	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4003db7	        0x4883ec08	                              sub rsp, 8	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4003dbb	          0x4d63ff	                        movsxd r15, r15d	      2687	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4003dbe	              0x51	                                push rcx	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4003dbf	        0x8b742450	            mov esi, dword [rsp + 0x50] 	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4003dc3	        0x4b8d1c7f	                  lea rbx, [r15 + r15*2]	      2687	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4003dc7	          0x4829c2	                            sub rdx, rax	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4003dca	          0x4c89f1	                            mov rcx, r14	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4003dcd	          0x4929c1	                             sub r9, rax	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4003dd0	        0x48c1e304	                              shl rbx, 4	      2687	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4003dd4	      0xe867fdffff	          call sym.foldUpdateIEMSRecurse	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4003dd9	        0x48035d10	             add rbx, qword [rbp + 0x10]	      2687	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4003ddd	          0x488b13	                    mov rdx, qword [rbx]	      2688	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4003de0	        0x49015618	            add qword [r14 + 0x18], rdx 	      2689	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4003de4	        0x49295610	             sub qword [r14 + 0x10], rdx	      2690	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4003de8	          0x4889d7	                            mov rdi, rdx	      2688	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4003deb	        0x49037e08	                add rdi, qword [r14 + 8]	      2688	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4003def	          0x4801d0	                            add rax, rdx	      2691	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4003df2	      0x4889442430	             mov qword [rsp + 0x30], rax	      2691	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4003df7	      0x48897c2448	             mov qword [rsp + 0x48], rdi	      2688	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4003dfc	        0x49897e08	                mov qword [r14 + 8], rdi	      2688	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4003e00	              0x5a	                                 pop rdx	      2692	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4003e01	              0x59	                                 pop rcx	      2692	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4003e02	      0xe9f9fdffff	                           jmp 0x4003c00	      2692	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4003e07	      0x488b442420	            mov rax, qword [rsp + 0x20] 	      2477	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4003e0c	        0x493b4618	            cmp rax, qword [r14 + 0x18] 	      2477	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4003e10	     0xf8efa000000	                           jle 0x4003f10	      2477	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4003e16	        0x418b7e28	            mov edi, dword [r14 + 0x28] 	      2478	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4003e1a	            0x85ff	                           test edi, edi	      2478	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4003e1c	     0xf85ee000000	                           jne 0x4003f10	      2478	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4003e22	      0x41837e3014	           cmp dword [r14 + 0x30], 0x14 	      2480	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4003e27	     0xf8e64090000	                           jle 0x4004791	      2480	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4003e2d	      0x4c39542428	            cmp qword [rsp + 0x28], r10 	      2480	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4003e32	     0xf8459090000	                            je 0x4004791	      2480	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4003e38	      0x4c39542428	            cmp qword [rsp + 0x28], r10 	      2657	fold.c	FUNCTION_59	WHILE_1	IF_30
0x4003e3d	     0xf8cd5020000	                            jl 0x4004118	      2657	fold.c	FUNCTION_59	WHILE_1	IF_30
0x4003e43	        0x498b4618	            mov rax, qword [r14 + 0x18] 	      2704	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4003e47	      0x4c896c2418	             mov qword [rsp + 0x18], r13	      2704	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4003e4c	          0x4d89e5	                            mov r13, r12	      2704	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4003e4f	      0x4c8b642428	            mov r12, qword [rsp + 0x28] 	      2704	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4003e54	        0x49894608	                mov qword [r14 + 8], rax	      2704	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4003e58	        0x4c8d7801	                      lea r15, [rax + 1]	      2705	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4003e5c	            0xeb45	                           jmp 0x4003ea3	      2706	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4003e5e	            0x6690	                                     nop	      2706	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4003e60	        0x418b4e20	            mov ecx, dword [r14 + 0x20] 	      2710	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4003e64	    0x488905000000	            mov qword [0x04003e6b], rax 	      2709	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4003e6b	        0x4883c001	                              add rax, 1	      2712	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_33
0x4003e6f	          0x4939c4	                            cmp r12, rax	      2712	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_33
0x4003e72	        0x49894608	                mov qword [r14 + 8], rax	      2712	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_33
0x4003e76	    0x890d00000000	            mov dword [0x04003e7c], ecx 	      2710	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4003e7c	     0xf8cbe020000	                            jl 0x4004140	      2712	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_33
0x4003e82	        0x418b4624	            mov eax, dword [r14 + 0x24] 	      2714	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4003e86	          0x4c89f7	                            mov rdi, r14	      2715	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	CALL_16
0x4003e89	        0x41894620	             mov dword [r14 + 0x20], eax	      2714	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4003e8d	          0x41ffd5	                                call r13	      2715	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	CALL_16
0x4003e90	        0x418b4620	            mov eax, dword [r14 + 0x20] 	      2716	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_34
0x4003e94	            0x85c0	                           test eax, eax	      2716	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_34
0x4003e96	            0x7940	                           jns 0x4003ed8	      2716	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_34
0x4003e98	      0x41837e3014	           cmp dword [r14 + 0x30], 0x14 	      2716	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_34
0x4003e9d	            0x7e39	                           jle 0x4003ed8	      2716	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_34
0x4003e9f	        0x498b4608	                mov rax, qword [r14 + 8]	      2716	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_34
0x4003ea3	    0x8b0d00000000	            mov ecx, dword [0x04003ea9] 	      2706	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4003ea9	            0x85c9	                           test ecx, ecx	      2706	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4003eab	            0x74b3	                            je 0x4003e60	      2706	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4003ead	          0x4d89ec	                            mov r12, r13	      2706	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4003eb0	      0x4c8b6c2418	            mov r13, qword [rsp + 0x18] 	      2706	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4003eb5	      0x4839442428	            cmp qword [rsp + 0x28], rax 	      2720	fold.c	FUNCTION_59	WHILE_1	ELSE_12	IF_35
0x4003eba	    0x48c705000000	               mov qword [0x04003ec5], 0	      2719	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4003ec5	     0xf8c80020000	                            jl 0x400414b	      2720	fold.c	FUNCTION_59	WHILE_1	ELSE_12	IF_35
0x4003ecb	        0x49894618	             mov qword [r14 + 0x18], rax	      2725	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4003ecf	        0x4d897e08	                mov qword [r14 + 8], r15	      2726	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4003ed3	      0xe928fdffff	                           jmp 0x4003c00	      2726	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4003ed8	          0x4d89ec	                            mov r12, r13	      2726	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4003edb	        0x498b4608	                mov rax, qword [r14 + 8]	      2726	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4003edf	      0x4c8b6c2418	            mov r13, qword [rsp + 0x18] 	      2726	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4003ee4	            0xebcf	                           jmp 0x4003eb5	      2726	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4003ee6	    0xc74424100000	               mov dword [rsp + 0x10], 0	      2432	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4003eee	      0xe963fdffff	                           jmp 0x4003c56	      2432	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4003ef3	    0xc74424300000	               mov dword [rsp + 0x30], 0	      2432	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4003efb	            0x31db	                            xor ebx, ebx	      2432	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4003efd	        0x8b7c2414	            mov edi, dword [rsp + 0x14] 	      2476	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4003f01	        0x397c2410	            cmp dword [rsp + 0x10], edi 	      2476	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4003f05	     0xf84fcfeffff	                            je 0x4003e07	      2476	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4003f0b	       0xf1f440000	                   nop dword [rax + rax]	      2476	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4003f10	    0x8b0500000000	            mov eax, dword [0x04003f16] 	      2486	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3
0x4003f16	            0x85c0	                           test eax, eax	      2486	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3
0x4003f18	     0xf851bfeffff	                           jne 0x4003d39	      2486	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3
0x4003f1e	        0x458b5e28	           mov r11d, dword [r14 + 0x28] 	      2490	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	IF_12
0x4003f22	          0x4531ff	                          xor r15d, r15d	      2491	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	IF_12
0x4003f25	          0x4585db	                         test r11d, r11d	      2490	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	IF_12
0x4003f28	            0x750c	                           jne 0x4003f36	      2490	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	IF_12
0x4003f2a	          0x4531ff	                          xor r15d, r15d	      2491	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	IF_12
0x4003f2d	      0x41837e3014	           cmp dword [r14 + 0x30], 0x14 	      2491	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	IF_12
0x4003f32	        0x410f9fc7	                               setg r15b	      2491	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	IF_12
0x4003f36	        0x4c634d00	                  movsxd r9, dword [rbp]	      2491	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	IF_12
0x4003f3a	        0x488b4d10	            mov rcx, qword [rbp + 0x10] 	      2491	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	IF_12
0x4003f3e	        0x458d41ff	                       lea r8d, [r9 - 1]	      1132	fold.c	FUNCTION_36
0x4003f42	          0x4d63c0	                          movsxd r8, r8d	      1132	fold.c	FUNCTION_36
0x4003f45	          0x4d85c0	                             test r8, r8	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003f48	     0xf8820030000	                            js 0x400426e	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003f4e	          0x4c89c7	                             mov rdi, r8	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003f51	            0x31d2	                            xor edx, edx	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003f53	            0xeb0e	                           jmp 0x4003f63	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003f55	           0xf1f00	                         nop dword [rax]	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003f58	          0x83e801	                              sub eax, 1	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4003f5b	          0x4863f8	                         movsxd rdi, eax	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4003f5e	          0x4839d7	                            cmp rdi, rdx	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003f61	            0x7c31	                            jl 0x4003f94	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003f63	        0x488d043a	                    lea rax, [rdx + rdi]	      1135	fold.c	FUNCTION_36	WHILE_1
0x4003f67	          0x48d1f8	                              sar rax, 1	      1135	fold.c	FUNCTION_36	WHILE_1
0x4003f6a	        0x488d1c40	                  lea rbx, [rax + rax*2]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4003f6e	        0x48c1e304	                              shl rbx, 4	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4003f72	          0x4801cb	                            add rbx, rcx	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4003f75	          0x488b33	                    mov rsi, qword [rbx]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4003f78	          0x4939f5	                            cmp r13, rsi	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4003f7b	            0x7cdb	                            jl 0x4003f58	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4003f7d	          0x4889f2	                            mov rdx, rsi	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4003f80	        0x48035308	                add rdx, qword [rbx + 8]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4003f84	          0x4939d5	                            cmp r13, rdx	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4003f87	            0x7c3f	                            jl 0x4003fc8	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4003f89	          0x83c001	                              add eax, 1	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4003f8c	          0x4863d0	                         movsxd rdx, eax	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4003f8f	          0x4839d7	                            cmp rdi, rdx	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003f92	            0x7dcf	                           jge 0x4003f63	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003f94	        0x488d1c52	                  lea rbx, [rdx + rdx*2]	      1149	fold.c	FUNCTION_36
0x4003f98	        0x4f8d0c49	                     lea r9, [r9 + r9*2]	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4003f9c	        0x48c1e304	                              shl rbx, 4	      1149	fold.c	FUNCTION_36
0x4003fa0	        0x49c1e104	                               shl r9, 4	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4003fa4	          0x4801cb	                            add rbx, rcx	      1149	fold.c	FUNCTION_36
0x4003fa7	          0x4901c9	                             add r9, rcx	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4003faa	          0x4c39cb	                             cmp rbx, r9	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4003fad	     0xf83cd000000	                           jae 0x4004080	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4003fb3	          0x488b33	                    mov rsi, qword [rbx]	      2500	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4003fb6	      0x4839742408	                cmp qword [rsp + 8], rsi	      2500	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4003fbb	     0xf8cbf000000	                            jl 0x4004080	      2500	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4003fc1	          0x4889f2	                            mov rdx, rsi	      2500	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4003fc4	        0x48035308	                add rdx, qword [rbx + 8]	      2500	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4003fc8	          0x4d63d7	                        movsxd r10, r15d	      2500	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4003fcb	          0x4901d2	                            add r10, rdx	      2507	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14
0x4003fce	      0x4c39542408	                cmp qword [rsp + 8], r10	      2507	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14
0x4003fd3	     0xf8cb8030000	                            jl 0x4004391	      2507	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14
0x4003fd9	          0x4939f5	                            cmp r13, rsi	      2597	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24
0x4003fdc	            0x7f72	                            jg 0x4004050	      2597	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24
0x4003fde	          0x4989df	                            mov r15, rbx	      2602	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24	CALL_12
0x4003fe1	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	      2602	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24	CALL_12
0x4003feb	          0x4929cf	                            sub r15, rcx	      2602	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24	CALL_12
0x4003fee	        0x49c1ff04	                              sar r15, 4	      2602	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24	CALL_12
0x4003ff2	        0x4c0faff8	                           imul r15, rax	      2602	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24	CALL_12
0x4003ff6	          0x4963c7	                        movsxd rax, r15d	      1405	fold.c	FUNCTION_43
0x4003ff9	        0x488d0440	                  lea rax, [rax + rax*2]	      1405	fold.c	FUNCTION_43
0x4003ffd	        0x48c1e004	                              shl rax, 4	      1405	fold.c	FUNCTION_43
0x4004001	          0x4801c1	                            add rcx, rax	      1405	fold.c	FUNCTION_43
0x4004004	        0x488d7910	                   lea rdi, [rcx + 0x10]	      1409	fold.c	FUNCTION_43	IF_1	CALL_1
0x4004008	      0x48894c2418	             mov qword [rsp + 0x18], rcx	      1409	fold.c	FUNCTION_43	IF_1	CALL_1
0x400400d	      0xe800000000	                          call 0x4004012	      1409	fold.c	FUNCTION_43	IF_1	CALL_1
0x4004012	          0x8b4500	                    mov eax, dword [rbp]	      1410	fold.c	FUNCTION_43	IF_1
0x4004015	      0x488b4c2418	            mov rcx, qword [rsp + 0x18] 	      1411	fold.c	FUNCTION_43	IF_1	IF_2
0x400401a	          0x83e801	                              sub eax, 1	      1410	fold.c	FUNCTION_43	IF_1
0x400401d	          0x4139c7	                           cmp r15d, eax	      1411	fold.c	FUNCTION_43	IF_1	IF_2
0x4004020	          0x894500	                    mov dword [rbp], eax	      1410	fold.c	FUNCTION_43	IF_1
0x4004023	     0xf8de7feffff	                           jge 0x4003f10	      1411	fold.c	FUNCTION_43	IF_1	IF_2
0x4004029	          0x4429f8	                           sub eax, r15d	        59	string3.h	FUNCTION_78	CALL_3
0x400402c	        0x488d7130	                   lea rsi, [rcx + 0x30]	        59	string3.h	FUNCTION_78	CALL_3
0x4004030	          0x4889cf	                            mov rdi, rcx	        59	string3.h	FUNCTION_78	CALL_3
0x4004033	            0x4898	                                    cdqe	        59	string3.h	FUNCTION_78	CALL_3
0x4004035	        0x488d1440	                  lea rdx, [rax + rax*2]	        59	string3.h	FUNCTION_78	CALL_3
0x4004039	        0x48c1e204	                              shl rdx, 4	        59	string3.h	FUNCTION_78	CALL_3
0x400403d	      0xe800000000	                          call 0x4004042	        59	string3.h	FUNCTION_78	CALL_3
0x4004042	      0xe9c9feffff	                           jmp 0x4003f10	        59	string3.h	FUNCTION_78	CALL_3
0x4004047	    0x660f1f840000	                    nop word [rax + rax]	        59	string3.h	FUNCTION_78	CALL_3
0x4004050	          0x4c89e8	                            mov rax, r13	      2609	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8
0x4004053	        0x488d7b10	                   lea rdi, [rbx + 0x10]	      2610	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8	CALL_13
0x4004057	            0x31c9	                            xor ecx, ecx	      2610	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8	CALL_13
0x4004059	          0x4829f0	                            sub rax, rsi	      2609	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8
0x400405c	      0xbaffffff7f	                     mov edx, 0x7fffffff	      2610	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8	CALL_13
0x4004061	          0x4889c6	                            mov rsi, rax	      2609	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8
0x4004064	        0x48894308	                mov qword [rbx + 8], rax	      2609	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8
0x4004068	      0xe8b3f6ffff	call sym.foldMarkAdjustRecurse.constprop.22	      2610	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8	CALL_13
0x400406d	    0xc70500000000	               mov dword [0x04004077], 1	      2613	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8
0x4004077	      0xe994feffff	                           jmp 0x4003f10	      2613	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8
0x400407c	         0xf1f4000	                         nop dword [rax]	      2613	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8
0x4004080	      0x488b7c2408	                mov rdi, qword [rsp + 8]	      2501	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_6
0x4004085	          0x4d63d7	                        movsxd r10, r15d	      2501	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_6
0x4004088	            0x31d2	                            xor edx, edx	      2500	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x400408a	          0x4c29d7	                            sub rdi, r10	      2501	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_6
0x400408d	            0xeb0c	                           jmp 0x400409b	      2501	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_6
0x400408f	              0x90	                                     nop	      2501	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_6
0x4004090	          0x83e801	                              sub eax, 1	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4004093	          0x4c63c0	                          movsxd r8, eax	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4004096	          0x4c39c2	                             cmp rdx, r8	      1133	fold.c	FUNCTION_36	WHILE_1
0x4004099	            0x7f35	                            jg 0x40040d0	      1133	fold.c	FUNCTION_36	WHILE_1
0x400409b	        0x498d0410	                     lea rax, [r8 + rdx]	      1135	fold.c	FUNCTION_36	WHILE_1
0x400409f	          0x48d1f8	                              sar rax, 1	      1135	fold.c	FUNCTION_36	WHILE_1
0x40040a2	        0x488d1c40	                  lea rbx, [rax + rax*2]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40040a6	        0x48c1e304	                              shl rbx, 4	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40040aa	          0x4801cb	                            add rbx, rcx	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40040ad	          0x488b33	                    mov rsi, qword [rbx]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40040b0	          0x4839fe	                            cmp rsi, rdi	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40040b3	            0x7fdb	                            jg 0x4004090	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40040b5	          0x4889f2	                            mov rdx, rsi	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x40040b8	        0x48035308	                add rdx, qword [rbx + 8]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x40040bc	          0x4839fa	                            cmp rdx, rdi	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x40040bf	     0xf8f06ffffff	                            jg 0x4003fcb	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x40040c5	          0x83c001	                              add eax, 1	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x40040c8	          0x4863d0	                         movsxd rdx, eax	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x40040cb	          0x4c39c2	                             cmp rdx, r8	      1133	fold.c	FUNCTION_36	WHILE_1
0x40040ce	            0x7ecb	                           jle 0x400409b	      1133	fold.c	FUNCTION_36	WHILE_1
0x40040d0	        0x488d1452	                  lea rdx, [rdx + rdx*2]	      1133	fold.c	FUNCTION_36	WHILE_1
0x40040d4	        0x48c1e204	                              shl rdx, 4	      1133	fold.c	FUNCTION_36	WHILE_1
0x40040d8	        0x488d1c11	                    lea rbx, [rcx + rdx]	      1149	fold.c	FUNCTION_36
0x40040dc	          0x4c39cb	                             cmp rbx, r9	      2502	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40040df	            0x7317	                           jae 0x40040f8	      2502	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40040e1	        0x8b7c2414	            mov edi, dword [rsp + 0x14] 	      2503	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40040e5	        0x397c2410	            cmp dword [rsp + 0x10], edi 	      2503	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40040e9	          0x488b33	                    mov rsi, qword [rbx]	      2503	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40040ec	            0x7d3e	                           jge 0x400412c	      2503	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40040ee	        0x493b7608	                cmp rsi, qword [r14 + 8]	      2503	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40040f2	     0xf8cc9feffff	                            jl 0x4003fc1	      2503	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40040f8	      0xbe01000000	                              mov esi, 1	      2833	fold.c	FUNCTION_60	IF_1	CALL_1
0x40040fd	          0x4889ef	                            mov rdi, rbp	      2833	fold.c	FUNCTION_60	IF_1	CALL_1
0x4004100	      0x4889542418	             mov qword [rsp + 0x18], rdx	      2833	fold.c	FUNCTION_60	IF_1	CALL_1
0x4004105	      0xe800000000	                          call 0x400410a	      2833	fold.c	FUNCTION_60	IF_1	CALL_1
0x400410a	          0x83f801	                              cmp eax, 1	      2833	fold.c	FUNCTION_60	IF_1	CALL_1
0x400410d	      0x488b542418	            mov rdx, qword [rsp + 0x18] 	      2833	fold.c	FUNCTION_60	IF_1	CALL_1
0x4004112	     0xf8428050000	                            je 0x4004640	      2833	fold.c	FUNCTION_60	IF_1	CALL_1
0x4004118	      0x488b442420	            mov rax, qword [rsp + 0x20] 	      2821	fold.c	FUNCTION_59
0x400411d	        0x4883c458	                           add rsp, 0x58	      2821	fold.c	FUNCTION_59
0x4004121	              0x5b	                                 pop rbx	      2821	fold.c	FUNCTION_59
0x4004122	              0x5d	                                 pop rbp	      2821	fold.c	FUNCTION_59
0x4004123	            0x415c	                                 pop r12	      2821	fold.c	FUNCTION_59
0x4004125	            0x415d	                                 pop r13	      2821	fold.c	FUNCTION_59
0x4004127	            0x415e	                                 pop r14	      2821	fold.c	FUNCTION_59
0x4004129	            0x415f	                                 pop r15	      2821	fold.c	FUNCTION_59
0x400412b	              0xc3	                                     ret	      2821	fold.c	FUNCTION_59
0x400412c	        0x493b7618	            cmp rsi, qword [r14 + 0x18] 	      2505	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4004130	     0xf8e8bfeffff	                           jle 0x4003fc1	      2505	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4004136	            0xebc0	                           jmp 0x40040f8	      2505	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4004138	     0xf1f84000000	                   nop dword [rax + rax]	      2505	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4004140	    0x48c705000000	               mov qword [0x0400414b], 0	      2719	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x400414b	          0x4885db	                           test rbx, rbx	      2730	fold.c	FUNCTION_59	IF_36
0x400414e	            0x74c8	                            je 0x4004118	      2730	fold.c	FUNCTION_59	IF_36
0x4004150	        0x4d8b5608	                mov r10, qword [r14 + 8]	      2730	fold.c	FUNCTION_59	IF_36
0x4004154	        0x488b5308	                mov rdx, qword [rbx + 8]	      2730	fold.c	FUNCTION_59	IF_36
0x4004158	          0x4d89d3	                            mov r11, r10	      2730	fold.c	FUNCTION_59	IF_36
0x400415b	          0x488b03	                    mov rax, qword [rbx]	      2730	fold.c	FUNCTION_59	IF_36
0x400415e	          0x4c89d7	                            mov rdi, r10	      2730	fold.c	FUNCTION_59	IF_36
0x4004161	          0x4829c7	                            sub rdi, rax	      2730	fold.c	FUNCTION_59	IF_36
0x4004164	      0x4889442418	             mov qword [rsp + 0x18], rax	      2730	fold.c	FUNCTION_59	IF_36
0x4004169	          0x4889f8	                            mov rax, rdi	      2730	fold.c	FUNCTION_59	IF_36
0x400416c	          0x4839d0	                            cmp rax, rdx	      2740	fold.c	FUNCTION_59	IF_37
0x400416f	     0xf8f96030000	                            jg 0x400450b	      2740	fold.c	FUNCTION_59	IF_37
0x4004175	      0x488b442418	            mov rax, qword [rsp + 0x18] 	      2749	fold.c	FUNCTION_59	CALL_17
0x400417a	      0x488b742438	            mov rsi, qword [rsp + 0x38] 	      2749	fold.c	FUNCTION_59	CALL_17
0x400417f	        0x498d52ff	                      lea rdx, [r10 - 1]	      2749	fold.c	FUNCTION_59	CALL_17
0x4004183	          0x4829c6	                            sub rsi, rax	      2749	fold.c	FUNCTION_59	CALL_17
0x4004186	          0x4829c2	                            sub rdx, rax	      2749	fold.c	FUNCTION_59	CALL_17
0x4004189	          0x4839f2	                            cmp rdx, rsi	      2920	fold.c	FUNCTION_62	IF_1
0x400418c	     0xf8ddd030000	                           jge 0x400456f	      2920	fold.c	FUNCTION_62	IF_1
0x4004192	        0x8b7c2410	            mov edi, dword [rsp + 0x10] 	      2752	fold.c	FUNCTION_59	IF_38
0x4004196	        0x397c2414	            cmp dword [rsp + 0x14], edi 	      2752	fold.c	FUNCTION_59	IF_38
0x400419a	     0xf8ff7020000	                            jg 0x4004497	      2752	fold.c	FUNCTION_59	IF_38
0x40041a0	        0x488b7510	            mov rsi, qword [rbp + 0x10] 	      2752	fold.c	FUNCTION_59	IF_38
0x40041a4	        0x4c8d6330	                   lea r12, [rbx + 0x30]	      2752	fold.c	FUNCTION_59	IF_38
0x40041a8	      0x4c89742408	                mov qword [rsp + 8], r14	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x40041ad	          0x8b4500	                    mov eax, dword [rbp]	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x40041b0	            0x4898	                                    cdqe	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x40041b2	        0x488d0440	                  lea rax, [rax + rax*2]	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x40041b6	        0x48c1e004	                              shl rax, 4	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x40041ba	          0x4801f0	                            add rax, rsi	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x40041bd	          0x4939c4	                            cmp r12, rax	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x40041c0	     0xf83b1010000	                           jae 0x4004377	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x40041c6	        0x488b4330	            mov rax, qword [rbx + 0x30] 	      2789	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x40041ca	          0x4c39d0	                            cmp rax, r10	      2789	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x40041cd	     0xf8fa4010000	                            jg 0x4004377	      2789	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x40041d3	          0x4889c2	                            mov rdx, rax	      2791	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43
0x40041d6	        0x48035338	             add rdx, qword [rbx + 0x38]	      2791	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43
0x40041da	          0x4c39d2	                            cmp rdx, r10	      2791	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43
0x40041dd	     0xf8f67010000	                            jg 0x400434a	      2791	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43
0x40041e3	          0x4d89e5	                            mov r13, r12	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x40041e6	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x40041f0	    0xc70500000000	               mov dword [0x040041fa], 1	      2811	fold.c	FUNCTION_59	ELSE_14	FOR_1
0x40041fa	          0x4929f5	                            sub r13, rsi	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x40041fd	        0x49c1fd04	                              sar r13, 4	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x4004201	        0x4c0fafe8	                           imul r13, rax	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x4004205	          0x4963c5	                        movsxd rax, r13d	      1405	fold.c	FUNCTION_43
0x4004208	        0x488d0c40	                  lea rcx, [rax + rax*2]	      1405	fold.c	FUNCTION_43
0x400420c	        0x48c1e104	                              shl rcx, 4	      1405	fold.c	FUNCTION_43
0x4004210	        0x4c8d340e	                    lea r14, [rsi + rcx]	      1405	fold.c	FUNCTION_43
0x4004214	        0x498d7e10	                   lea rdi, [r14 + 0x10]	      1409	fold.c	FUNCTION_43	IF_1	CALL_1
0x4004218	      0xe800000000	                          call 0x400421d	      1409	fold.c	FUNCTION_43	IF_1	CALL_1
0x400421d	          0x8b4500	                    mov eax, dword [rbp]	      1410	fold.c	FUNCTION_43	IF_1
0x4004220	          0x83e801	                              sub eax, 1	      1410	fold.c	FUNCTION_43	IF_1
0x4004223	          0x4139c5	                           cmp r13d, eax	      1411	fold.c	FUNCTION_43	IF_1	IF_2
0x4004226	          0x894500	                    mov dword [rbp], eax	      1410	fold.c	FUNCTION_43	IF_1
0x4004229	            0x7c15	                            jl 0x4004240	      1411	fold.c	FUNCTION_43	IF_1	IF_2
0x400422b	      0x488b7c2408	                mov rdi, qword [rsp + 8]	      1411	fold.c	FUNCTION_43	IF_1	IF_2
0x4004230	        0x488b7510	            mov rsi, qword [rbp + 0x10] 	      1411	fold.c	FUNCTION_43	IF_1	IF_2
0x4004234	        0x4c8b5708	                mov r10, qword [rdi + 8]	      1411	fold.c	FUNCTION_43	IF_1	IF_2
0x4004238	          0x4d89d3	                            mov r11, r10	      1411	fold.c	FUNCTION_43	IF_1	IF_2
0x400423b	      0xe970ffffff	                           jmp 0x40041b0	      1411	fold.c	FUNCTION_43	IF_1	IF_2
0x4004240	          0x4429e8	                           sub eax, r13d	        59	string3.h	FUNCTION_78	CALL_3
0x4004243	        0x498d7630	                   lea rsi, [r14 + 0x30]	        59	string3.h	FUNCTION_78	CALL_3
0x4004247	          0x4c89f7	                            mov rdi, r14	        59	string3.h	FUNCTION_78	CALL_3
0x400424a	            0x4898	                                    cdqe	        59	string3.h	FUNCTION_78	CALL_3
0x400424c	        0x488d1440	                  lea rdx, [rax + rax*2]	        59	string3.h	FUNCTION_78	CALL_3
0x4004250	        0x48c1e204	                              shl rdx, 4	        59	string3.h	FUNCTION_78	CALL_3
0x4004254	      0xe800000000	                          call 0x4004259	        59	string3.h	FUNCTION_78	CALL_3
0x4004259	      0x488b442408	                mov rax, qword [rsp + 8]	        59	string3.h	FUNCTION_78	CALL_3
0x400425e	        0x488b7510	            mov rsi, qword [rbp + 0x10] 	        59	string3.h	FUNCTION_78	CALL_3
0x4004262	        0x4c8b5008	                mov r10, qword [rax + 8]	        59	string3.h	FUNCTION_78	CALL_3
0x4004266	          0x4d89d3	                            mov r11, r10	        59	string3.h	FUNCTION_78	CALL_3
0x4004269	      0xe93fffffff	                           jmp 0x40041ad	        59	string3.h	FUNCTION_78	CALL_3
0x400426e	        0x4f8d0c49	                     lea r9, [r9 + r9*2]	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4004272	        0x49c1e104	                               shl r9, 4	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4004276	          0x4901c9	                             add r9, rcx	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4004279	          0x4c39c9	                             cmp rcx, r9	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x400427c	     0xf830e020000	                           jae 0x4004490	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4004282	          0x488b31	                    mov rsi, qword [rcx]	      2500	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4004285	      0x4839742408	                cmp qword [rsp + 8], rsi	      2500	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x400428a	     0xf8c90050000	                            jl 0x4004820	      2500	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4004290	          0x4889cb	                            mov rbx, rcx	      2500	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4004293	      0xe929fdffff	                           jmp 0x4003fc1	      2500	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4004298	          0x4889c7	                            mov rdi, rax	      2453	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x400429b	      0x4889442418	             mov qword [rsp + 0x18], rax	      2453	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x40042a0	          0x4c89d0	                            mov rax, r10	      2453	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x40042a3	          0x4829f8	                            sub rax, rdi	      2453	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x40042a6	          0x4889d9	                            mov rcx, rbx	      2454	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2	CALL_3
0x40042a9	          0x4531db	                          xor r11d, r11d	      2446	fold.c	FUNCTION_59	WHILE_1	IF_5
0x40042ac	      0x4889442430	             mov qword [rsp + 0x30], rax	      2453	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x40042b1	          0x4989c0	                             mov r8, rax	      2453	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x40042b4	         0xf1f4000	                         nop dword [rax]	      2453	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x40042b8	          0x8b7110	            mov esi, dword [rcx + 0x10] 	      1132	fold.c	FUNCTION_36
0x40042bb	        0x488b7920	            mov rdi, qword [rcx + 0x20] 	      1132	fold.c	FUNCTION_36
0x40042bf	          0x83ee01	                              sub esi, 1	      1132	fold.c	FUNCTION_36
0x40042c2	          0x4863f6	                         movsxd rsi, esi	      1132	fold.c	FUNCTION_36
0x40042c5	          0x4885f6	                           test rsi, rsi	      1133	fold.c	FUNCTION_36	WHILE_1
0x40042c8	            0x7842	                            js 0x400430c	      1133	fold.c	FUNCTION_36	WHILE_1
0x40042ca	            0x31d2	                            xor edx, edx	      1133	fold.c	FUNCTION_36	WHILE_1
0x40042cc	            0xeb0d	                           jmp 0x40042db	      1133	fold.c	FUNCTION_36	WHILE_1
0x40042ce	            0x6690	                                     nop	      1133	fold.c	FUNCTION_36	WHILE_1
0x40042d0	          0x83e801	                              sub eax, 1	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40042d3	          0x4863f0	                         movsxd rsi, eax	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40042d6	          0x4839d6	                            cmp rsi, rdx	      1133	fold.c	FUNCTION_36	WHILE_1
0x40042d9	            0x7c31	                            jl 0x400430c	      1133	fold.c	FUNCTION_36	WHILE_1
0x40042db	        0x488d0432	                    lea rax, [rdx + rsi]	      1135	fold.c	FUNCTION_36	WHILE_1
0x40042df	          0x48d1f8	                              sar rax, 1	      1135	fold.c	FUNCTION_36	WHILE_1
0x40042e2	        0x488d0c40	                  lea rcx, [rax + rax*2]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40042e6	        0x48c1e104	                              shl rcx, 4	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40042ea	          0x4801f9	                            add rcx, rdi	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40042ed	          0x4c8b09	                     mov r9, qword [rcx]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40042f0	          0x4d39c8	                              cmp r8, r9	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40042f3	            0x7cdb	                            jl 0x40042d0	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40042f5	          0x4c89ca	                             mov rdx, r9	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x40042f8	        0x48035108	                add rdx, qword [rcx + 8]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x40042fc	          0x4939d0	                             cmp r8, rdx	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x40042ff	            0x7c3d	                            jl 0x400433e	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4004301	          0x83c001	                              add eax, 1	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4004304	          0x4863d0	                         movsxd rdx, eax	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4004307	          0x4839d6	                            cmp rsi, rdx	      1133	fold.c	FUNCTION_36	WHILE_1
0x400430a	            0x7dcf	                           jge 0x40042db	      1133	fold.c	FUNCTION_36	WHILE_1
0x400430c	      0x44035c2414	            add r11d, dword [rsp + 0x14]	      2460	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8
0x4004311	      0x44395c2410	           cmp dword [rsp + 0x10], r11d 	      2460	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8
0x4004316	     0xf8c0b050000	                            jl 0x4004827	      2460	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8
0x400431c	        0x488b5308	                mov rdx, qword [rbx + 8]	      2466	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x4004320	      0x488b442418	            mov rax, qword [rsp + 0x18] 	      2466	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x4004325	          0x4801d0	                            add rax, rdx	      2466	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x4004328	          0x4939c2	                            cmp r10, rax	      2466	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x400432b	     0xf8ce2040000	                            jl 0x4004813	      2466	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x4004331	    0xc74424300100	               mov dword [rsp + 0x30], 1	      2467	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x4004339	      0xe90dfaffff	                           jmp 0x4003d4b	      2467	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x400433e	        0x4183c301	                             add r11d, 1	      2456	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2
0x4004342	          0x4d29c8	                              sub r8, r9	      2457	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2
0x4004345	      0xe96effffff	                           jmp 0x40042b8	      2457	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2
0x400434a	          0x4c39d0	                            cmp rax, r10	      2793	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x400434d	      0x4c8b742408	                mov r14, qword [rsp + 8]	      2793	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4004352	     0xf8cfc030000	                            jl 0x4004754	      2793	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4004358	        0x8b7c2410	            mov edi, dword [rsp + 0x10] 	      2804	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45
0x400435c	        0x397c2414	            cmp dword [rsp + 0x14], edi 	      2804	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45
0x4004360	          0x4d89d3	                            mov r11, r10	      2804	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45
0x4004363	            0x7f12	                            jg 0x4004377	      2804	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45
0x4004365	          0x4c89e2	                            mov rdx, r12	      2807	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45	CALL_20
0x4004368	          0x4889ee	                            mov rsi, rbp	      2807	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45	CALL_20
0x400436b	          0x4889df	                            mov rdi, rbx	      2807	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45	CALL_20
0x400436e	      0xe86df1ffff	                      call sym.foldMerge	      2807	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45	CALL_20
0x4004373	        0x4d8b5e08	                mov r11, qword [r14 + 8]	      2807	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45	CALL_20
0x4004377	      0x488b442420	            mov rax, qword [rsp + 0x20] 	      2807	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45	CALL_20
0x400437c	        0x4983eb01	                              sub r11, 1	      2817	fold.c	FUNCTION_59	IF_46
0x4004380	          0x4c39d8	                            cmp rax, r11	      2817	fold.c	FUNCTION_59	IF_46
0x4004383	        0x4c0f4dd8	                         cmovge r11, rax	      2817	fold.c	FUNCTION_59	IF_46
0x4004387	      0x4c895c2420	             mov qword [rsp + 0x20], r11	      2817	fold.c	FUNCTION_59	IF_46
0x400438c	      0xe987fdffff	                           jmp 0x4004118	      2817	fold.c	FUNCTION_59	IF_46
0x4004391	      0x488b442408	                mov rax, qword [rsp + 8]	      2513	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_15
0x4004396	          0x4839f0	                            cmp rax, rsi	      2513	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_15
0x4004399	     0xf8490000000	                            je 0x400442f	      2513	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_15
0x400439f	          0x4939f5	                            cmp r13, rsi	      2517	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x40043a2	     0xf8e81010000	                           jle 0x4004529	      2517	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x40043a8	        0x8b7c2414	            mov edi, dword [rsp + 0x14] 	      2535	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40043ac	        0x397c2410	            cmp dword [rsp + 0x10], edi 	      2535	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40043b0	            0x7509	                           jne 0x40043bb	      2535	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40043b2	          0x4585db	                         test r11d, r11d	      2535	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40043b5	     0xf853e040000	                           jne 0x40047f9	      2535	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40043bb	      0x488b7c2408	                mov rdi, qword [rsp + 8]	      2535	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40043c0	          0x4c89e8	                            mov rax, r13	      2535	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40043c3	          0x4939fd	                            cmp r13, rdi	      2536	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40043c6	          0x4989f8	                             mov r8, rdi	      2536	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40043c9	     0xf846af9ffff	                            je 0x4003d39	      2536	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40043cf	          0x4c89c2	                             mov rdx, r8	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x40043d2	          0x4889c7	                            mov rdi, rax	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x40043d5	          0x4829f2	                            sub rdx, rsi	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x40043d8	          0x4829f7	                            sub rdi, rsi	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x40043db	          0x4839fa	                            cmp rdx, rdi	      2920	fold.c	FUNCTION_62	IF_1
0x40043de	          0x4889fe	                            mov rsi, rdi	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x40043e1	     0xf8db1030000	                           jge 0x4004798	      2920	fold.c	FUNCTION_62	IF_1
0x40043e7	          0x4829cb	                            sub rbx, rcx	      2569	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40043ea	    0x48bfabaaaaaa	          movabs rdi, 0xaaaaaaaaaaaaaaab	      2569	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40043f4	        0x498d48ff	                       lea rcx, [r8 - 1]	      2570	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_10
0x40043f8	        0x48c1fb04	                              sar rbx, 4	      2569	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40043fc	          0x4889c2	                            mov rdx, rax	      2570	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_10
0x40043ff	        0x480fafdf	                           imul rbx, rdi	      2569	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x4004403	          0x4889ef	                            mov rdi, rbp	      2570	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_10
0x4004406	            0x89de	                            mov esi, ebx	      2570	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_10
0x4004408	          0x4863db	                         movsxd rbx, ebx	      2571	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x400440b	      0x488d5c5b03	              lea rbx, [rbx + rbx*2 + 3]	      2571	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x4004410	      0xe87bc5ffff	                      call sym.foldSplit	      2570	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_10
0x4004415	        0x48c1e304	                              shl rbx, 4	      2571	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x4004419	        0x48035d10	             add rbx, qword [rbp + 0x10]	      2571	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x400441d	      0x807c244700	                cmp byte [rsp + 0x47], 0	      2578	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_20
0x4004422	          0x488b33	                    mov rsi, qword [rbx]	      2578	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_20
0x4004425	            0x7408	                            je 0x400442f	      2578	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_20
0x4004427	    0xc74424300100	               mov dword [rsp + 0x30], 1	      2579	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_20
0x400442f	          0x4939f5	                            cmp r13, rsi	      2582	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x4004432	     0xf8501f9ffff	                           jne 0x4003d39	      2582	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x4004438	          0x4585ff	                         test r15d, r15d	      2582	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x400443b	     0xf84f8f8ffff	                            je 0x4003d39	      2582	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x4004441	          0x4889d8	                            mov rax, rbx	      2585	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22
0x4004444	        0x482b4510	             sub rax, qword [rbp + 0x10]	      2585	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22
0x4004448	    0x48bfabaaaaaa	          movabs rdi, 0xaaaaaaaaaaaaaaab	      2585	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22
0x4004452	        0x48c1f804	                              sar rax, 4	      2585	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22
0x4004456	        0x480fafc7	                           imul rax, rdi	      2585	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22
0x400445a	            0x85c0	                           test eax, eax	      2585	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22
0x400445c	     0xf84d7f8ffff	                            je 0x4003d39	      2585	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22
0x4004462	        0x488b43d8	             mov rax, qword [rbx - 0x28]	      2588	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23
0x4004466	        0x480343d0	             add rax, qword [rbx - 0x30]	      2588	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23
0x400446a	          0x4839f0	                            cmp rax, rsi	      2588	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23
0x400446d	     0xf85c6f8ffff	                           jne 0x4003d39	      2588	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23
0x4004473	        0x4c8d7bd0	                   lea r15, [rbx - 0x30]	      2587	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22
0x4004477	          0x4889da	                            mov rdx, rbx	      2590	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23	CALL_11
0x400447a	          0x4889ee	                            mov rsi, rbp	      2590	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23	CALL_11
0x400447d	          0x4c89ff	                            mov rdi, r15	      2590	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23	CALL_11
0x4004480	          0x4c89fb	                            mov rbx, r15	      2591	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23
0x4004483	      0xe858f0ffff	                      call sym.foldMerge	      2590	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23	CALL_11
0x4004488	      0xe9acf8ffff	                           jmp 0x4003d39	      2590	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23	CALL_11
0x400448d	           0xf1f00	                         nop dword [rax]	      2590	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23	CALL_11
0x4004490	            0x31d2	                            xor edx, edx	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4004492	      0xe961fcffff	                           jmp 0x40040f8	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4004497	          0x488b13	                    mov rdx, qword [rbx]	      2755	fold.c	FUNCTION_59	IF_38	IF_39
0x400449a	        0x488b4b08	                mov rcx, qword [rbx + 8]	      2755	fold.c	FUNCTION_59	IF_38	IF_39
0x400449e	          0x4c89d0	                            mov rax, r10	      2755	fold.c	FUNCTION_59	IF_38	IF_39
0x40044a1	          0x4829d0	                            sub rax, rdx	      2755	fold.c	FUNCTION_59	IF_38	IF_39
0x40044a4	          0x4839c1	                            cmp rcx, rax	      2755	fold.c	FUNCTION_59	IF_38	IF_39
0x40044a7	     0xf84f3fcffff	                            je 0x40041a0	      2755	fold.c	FUNCTION_59	IF_38	IF_39
0x40044ad	      0x488d5411ff	                lea rdx, [rcx + rdx - 1]	      2757	fold.c	FUNCTION_59	IF_38	IF_39	IF_40
0x40044b2	      0x483b542420	            cmp rdx, qword [rsp + 0x20] 	      2757	fold.c	FUNCTION_59	IF_38	IF_39	IF_40
0x40044b7	     0xf8ec7000000	                           jle 0x4004584	      2757	fold.c	FUNCTION_59	IF_38	IF_39	IF_40
0x40044bd	      0x807c244700	                cmp byte [rsp + 0x47], 0	      2762	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x40044c2	     0xf8541020000	                           jne 0x4004709	      2762	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x40044c8	        0x482b5d10	             sub rbx, qword [rbp + 0x10]	      2773	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x40044cc	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	      2773	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x40044d6	      0x488b4c2420	            mov rcx, qword [rsp + 0x20] 	      2774	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13	CALL_18
0x40044db	          0x4c89d2	                            mov rdx, r10	      2774	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13	CALL_18
0x40044de	          0x4889ef	                            mov rdi, rbp	      2774	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13	CALL_18
0x40044e1	        0x48c1fb04	                              sar rbx, 4	      2773	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x40044e5	        0x480fafd8	                           imul rbx, rax	      2773	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x40044e9	            0x89de	                            mov esi, ebx	      2774	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13	CALL_18
0x40044eb	          0x4863db	                         movsxd rbx, ebx	      2775	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x40044ee	      0xe89dc4ffff	                      call sym.foldSplit	      2774	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13	CALL_18
0x40044f3	        0x488d1c5b	                  lea rbx, [rbx + rbx*2]	      2775	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x40044f7	        0x488b7510	            mov rsi, qword [rbp + 0x10] 	      2775	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x40044fb	        0x4d8b5608	                mov r10, qword [r14 + 8]	      2775	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x40044ff	        0x48c1e304	                              shl rbx, 4	      2775	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4004503	          0x4801f3	                            add rbx, rsi	      2775	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4004506	      0xe981000000	                           jmp 0x400458c	      2775	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x400450b	        0xc6432902	                mov byte [rbx + 0x29], 2	      2743	fold.c	FUNCTION_59	IF_37
0x400450f	        0x4d8b5608	                mov r10, qword [r14 + 8]	      2743	fold.c	FUNCTION_59	IF_37
0x4004513	        0x48894308	                mov qword [rbx + 8], rax	      2742	fold.c	FUNCTION_59	IF_37
0x4004517	    0xc70500000000	               mov dword [0x04004521], 1	      2744	fold.c	FUNCTION_59	IF_37
0x4004521	          0x4d89d3	                            mov r11, r10	      2744	fold.c	FUNCTION_59	IF_37
0x4004524	      0xe94cfcffff	                           jmp 0x4004175	      2744	fold.c	FUNCTION_59	IF_37
0x4004529	          0x4839f0	                            cmp rax, rsi	      2519	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17
0x400452c	     0xf8d02020000	                           jge 0x4004734	      2519	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17
0x4004532	          0x4829c6	                            sub rsi, rax	      2521	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17	CALL_7
0x4004535	        0x488d7b10	                   lea rdi, [rbx + 0x10]	      2521	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17	CALL_7
0x4004539	          0x4531c0	                            xor r8d, r8d	      2521	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17	CALL_7
0x400453c	          0x4889f1	                            mov rcx, rsi	      2521	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17	CALL_7
0x400453f	      0xbaffffff7f	                     mov edx, 0x7fffffff	      2521	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17	CALL_7
0x4004544	            0x31f6	                            xor esi, esi	      2521	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17	CALL_7
0x4004546	      0xe835ecffff	          call sym.foldMarkAdjustRecurse	      2521	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17	CALL_7
0x400454b	      0x488b7c2408	                mov rdi, qword [rsp + 8]	      2531	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x4004550	          0x488b03	                    mov rax, qword [rbx]	      2531	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x4004553	    0xc70500000000	               mov dword [0x0400455d], 1	      2533	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x400455d	          0x4829f8	                            sub rax, rdi	      2531	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x4004560	          0x48893b	                    mov qword [rbx], rdi	      2532	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x4004563	        0x48014308	                add qword [rbx + 8], rax	      2531	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x4004567	          0x4889fe	                            mov rsi, rdi	      2531	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x400456a	      0xe9c0feffff	                           jmp 0x400442f	      2531	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x400456f	        0x488d7b10	                   lea rdi, [rbx + 0x10]	      2749	fold.c	FUNCTION_59	CALL_17
0x4004573	      0xe8a8f3ffff	             call sym.foldRemove.part.15	      2749	fold.c	FUNCTION_59	CALL_17
0x4004578	        0x4d8b5608	                mov r10, qword [r14 + 8]	      2749	fold.c	FUNCTION_59	CALL_17
0x400457c	          0x4d89d3	                            mov r11, r10	      2749	fold.c	FUNCTION_59	CALL_17
0x400457f	      0xe90efcffff	                           jmp 0x4004192	      2749	fold.c	FUNCTION_59	CALL_17
0x4004584	        0x488b7510	            mov rsi, qword [rbp + 0x10] 	      2749	fold.c	FUNCTION_59	CALL_17
0x4004588	        0x48894308	                mov qword [rbx + 8], rax	      2779	fold.c	FUNCTION_59	IF_38	IF_39	ELSE_14
0x400458c	    0xc70500000000	               mov dword [0x04004596], 1	      2780	fold.c	FUNCTION_59	IF_38	IF_39	ELSE_14
0x4004596	          0x4d89d3	                            mov r11, r10	      2780	fold.c	FUNCTION_59	IF_38	IF_39	ELSE_14
0x4004599	      0xe906fcffff	                           jmp 0x40041a4	      2780	fold.c	FUNCTION_59	IF_38	IF_39	ELSE_14
0x400459e	          0x8b4120	            mov eax, dword [rcx + 0x20] 	      2397	fold.c	FUNCTION_59	IF_1
0x40045a1	            0x89c2	                            mov edx, eax	      2398	fold.c	FUNCTION_59	IF_1
0x40045a3	            0x29f2	                            sub edx, esi	      2398	fold.c	FUNCTION_59	IF_1
0x40045a5	          0x395128	            cmp dword [rcx + 0x28], edx 	      2398	fold.c	FUNCTION_59	IF_1
0x40045a8	     0xf8f7f010000	                            jg 0x400472d	      2398	fold.c	FUNCTION_59	IF_1
0x40045ae	            0x85c0	                           test eax, eax	      2398	fold.c	FUNCTION_59	IF_1
0x40045b0	     0xf8e77010000	                           jle 0x400472d	      2398	fold.c	FUNCTION_59	IF_1
0x40045b6	          0x486337	                 movsxd rsi, dword [rdi]	      2398	fold.c	FUNCTION_59	IF_1
0x40045b9	        0x4d8d4dff	                       lea r9, [r13 - 1]	      2400	fold.c	FUNCTION_59	IF_1	CALL_1
0x40045bd	        0x4c8b4710	              mov r8, qword [rdi + 0x10]	      2400	fold.c	FUNCTION_59	IF_1	CALL_1
0x40045c1	          0x8d4eff	                      lea ecx, [rsi - 1]	      1132	fold.c	FUNCTION_36
0x40045c4	          0x4863c9	                         movsxd rcx, ecx	      1132	fold.c	FUNCTION_36
0x40045c7	          0x4885c9	                           test rcx, rcx	      1133	fold.c	FUNCTION_36	WHILE_1
0x40045ca	     0xf883c020000	                            js 0x400480c	      1133	fold.c	FUNCTION_36	WHILE_1
0x40045d0	            0x31c0	                            xor eax, eax	      1133	fold.c	FUNCTION_36	WHILE_1
0x40045d2	            0xeb0b	                           jmp 0x40045df	      1133	fold.c	FUNCTION_36	WHILE_1
0x40045d4	          0x8d4aff	                      lea ecx, [rdx - 1]	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40045d7	          0x4863c9	                         movsxd rcx, ecx	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40045da	          0x4839c8	                            cmp rax, rcx	      1133	fold.c	FUNCTION_36	WHILE_1
0x40045dd	            0x7f31	                            jg 0x4004610	      1133	fold.c	FUNCTION_36	WHILE_1
0x40045df	        0x488d3c01	                    lea rdi, [rcx + rax]	      1135	fold.c	FUNCTION_36	WHILE_1
0x40045e3	          0x48d1ff	                              sar rdi, 1	      1135	fold.c	FUNCTION_36	WHILE_1
0x40045e6	        0x488d1c7f	                  lea rbx, [rdi + rdi*2]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40045ea	          0x4889fa	                            mov rdx, rdi	      1135	fold.c	FUNCTION_36	WHILE_1
0x40045ed	        0x48c1e304	                              shl rbx, 4	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40045f1	          0x4c01c3	                             add rbx, r8	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40045f4	          0x488b3b	                    mov rdi, qword [rbx]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40045f7	          0x4939f9	                             cmp r9, rdi	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40045fa	            0x7cd8	                            jl 0x40045d4	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40045fc	        0x48037b08	                add rdi, qword [rbx + 8]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4004600	          0x4939f9	                             cmp r9, rdi	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4004603	            0x7c16	                            jl 0x400461b	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4004605	          0x83c201	                              add edx, 1	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4004608	          0x4863c2	                         movsxd rax, edx	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x400460b	          0x4839c8	                            cmp rax, rcx	      1133	fold.c	FUNCTION_36	WHILE_1
0x400460e	            0x7ecf	                           jle 0x40045df	      1133	fold.c	FUNCTION_36	WHILE_1
0x4004610	        0x488d1c40	                  lea rbx, [rax + rax*2]	      1133	fold.c	FUNCTION_36	WHILE_1
0x4004614	        0x48c1e304	                              shl rbx, 4	      1133	fold.c	FUNCTION_36	WHILE_1
0x4004618	          0x4c01c3	                             add rbx, r8	      1149	fold.c	FUNCTION_36
0x400461b	        0x488d0476	                  lea rax, [rsi + rsi*2]	      2401	fold.c	FUNCTION_59	IF_1	IF_2
0x400461f	        0x48c1e004	                              shl rax, 4	      2401	fold.c	FUNCTION_59	IF_1	IF_2
0x4004623	          0x4901c0	                             add r8, rax	      2401	fold.c	FUNCTION_59	IF_1	IF_2
0x4004626	          0x4c39c3	                             cmp rbx, r8	      2401	fold.c	FUNCTION_59	IF_1	IF_2
0x4004629	     0xf83fe000000	                           jae 0x400472d	      2401	fold.c	FUNCTION_59	IF_1	IF_2
0x400462f	          0x4c3b2b	                    cmp r13, qword [rbx]	      2381	fold.c	FUNCTION_59
0x4004632	      0xb800000000	                              mov eax, 0	      2381	fold.c	FUNCTION_59
0x4004637	        0x480f4ed8	                         cmovle rbx, rax	      2381	fold.c	FUNCTION_59
0x400463b	      0xe94ef5ffff	                           jmp 0x4003b8e	      2381	fold.c	FUNCTION_59
0x4004640	        0x48c1fa04	                              sar rdx, 4	      2620	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4004644	    0x49bfabaaaaaa	          movabs r15, 0xaaaaaaaaaaaaaaab	      2620	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x400464e	        0x4c0faffa	                           imul r15, rdx	      2620	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4004652	          0x4963c7	                        movsxd rax, r15d	      2835	fold.c	FUNCTION_60
0x4004655	        0x488d1c40	                  lea rbx, [rax + rax*2]	      2835	fold.c	FUNCTION_60
0x4004659	          0x8b4500	                    mov eax, dword [rbp]	      2836	fold.c	FUNCTION_60	IF_2
0x400465c	        0x48c1e304	                              shl rbx, 4	      2835	fold.c	FUNCTION_60
0x4004660	          0x4889d9	                            mov rcx, rbx	      2835	fold.c	FUNCTION_60
0x4004663	        0x48034d10	             add rcx, qword [rbp + 0x10]	      2835	fold.c	FUNCTION_60
0x4004667	          0x4139c7	                           cmp r15d, eax	      2836	fold.c	FUNCTION_60	IF_2
0x400466a	            0x7d26	                           jge 0x4004692	      2836	fold.c	FUNCTION_60	IF_2
0x400466c	          0x4429f8	                           sub eax, r15d	        59	string3.h	FUNCTION_78	CALL_3
0x400466f	        0x488d7930	                   lea rdi, [rcx + 0x30]	        59	string3.h	FUNCTION_78	CALL_3
0x4004673	          0x4889ce	                            mov rsi, rcx	        59	string3.h	FUNCTION_78	CALL_3
0x4004676	            0x4898	                                    cdqe	        59	string3.h	FUNCTION_78	CALL_3
0x4004678	      0x48894c2418	             mov qword [rsp + 0x18], rcx	        59	string3.h	FUNCTION_78	CALL_3
0x400467d	        0x488d1440	                  lea rdx, [rax + rax*2]	        59	string3.h	FUNCTION_78	CALL_3
0x4004681	        0x48c1e204	                              shl rdx, 4	        59	string3.h	FUNCTION_78	CALL_3
0x4004685	      0xe800000000	                          call 0x400468a	        59	string3.h	FUNCTION_78	CALL_3
0x400468a	          0x8b4500	                    mov eax, dword [rbp]	        59	string3.h	FUNCTION_78	CALL_3
0x400468d	      0x488b4c2418	            mov rcx, qword [rsp + 0x18] 	        59	string3.h	FUNCTION_78	CALL_3
0x4004692	          0x83c001	                              add eax, 1	      2838	fold.c	FUNCTION_60
0x4004695	        0x488d7910	                   lea rdi, [rcx + 0x10]	      2839	fold.c	FUNCTION_60	CALL_3
0x4004699	      0xbe30000000	                           mov esi, 0x30	      2839	fold.c	FUNCTION_60	CALL_3
0x400469e	          0x894500	                    mov dword [rbp], eax	      2838	fold.c	FUNCTION_60
0x40046a1	      0xba0a000000	                            mov edx, 0xa	      2839	fold.c	FUNCTION_60	CALL_3
0x40046a6	      0xe800000000	                          call 0x40046ab	      2839	fold.c	FUNCTION_60	CALL_3
0x40046ab	        0x48035d10	             add rbx, qword [rbp + 0x10]	      2623	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x40046af	      0x488b442408	                mov rax, qword [rsp + 8]	      2626	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x40046b4	      0x488b7c2420	            mov rdi, qword [rsp + 0x20] 	      2627	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x40046b9	    0x8bb424900000	            mov esi, dword [rsp + 0x90] 	      2631	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_26
0x40046c0	          0x4829c7	                            sub rdi, rax	      2627	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x40046c3	          0x488903	                    mov qword [rbx], rax	      2626	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x40046c6	          0x4889f8	                            mov rax, rdi	      2627	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x40046c9	        0x4883c001	                              add rax, 1	      2627	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x40046cd	            0x85f6	                           test esi, esi	      2631	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_26
0x40046cf	        0x48894308	                mov qword [rbx + 8], rax	      2627	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x40046d3	            0x7546	                           jne 0x400471b	      2631	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_26
0x40046d5	          0x498b06	                    mov rax, qword [r14]	      2633	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_26
0x40046d8	    0xc68020010000	               mov byte [rax + 0x120], 1	      2633	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_26
0x40046df	        0xc6432800	                mov byte [rbx + 0x28], 0	      2634	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_26
0x40046e3	      0x807c244700	                cmp byte [rsp + 0x47], 0	      2650	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_29
0x40046e8	      0xb801000000	                              mov eax, 1	      2650	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_29
0x40046ed	        0xc6432902	                mov byte [rbx + 0x29], 2	      2644	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x40046f1	       0xf44442430	           cmove eax, dword [rsp + 0x30]	      2650	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_29
0x40046f6	    0xc70500000000	               mov dword [0x04004700], 1	      2651	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4004700	        0x89442430	             mov dword [rsp + 0x30], eax	      2650	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_29
0x4004704	      0xe930f6ffff	                           jmp 0x4003d39	      2652	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4004709	        0x48894308	                mov qword [rbx + 8], rax	      2767	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x400470d	        0x488b7510	            mov rsi, qword [rbp + 0x10] 	      2767	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4004711	      0x4889542420	             mov qword [rsp + 0x20], rdx	      2767	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4004716	      0xe971feffff	                           jmp 0x400458c	      2767	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x400471b	          0x4585ff	                         test r15d, r15d	      2636	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27
0x400471e	     0xf8e9a000000	                           jle 0x40047be	      2636	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27
0x4004724	         0xfb643f8	               movzx eax, byte [rbx - 8]	      2643	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_11
0x4004728	          0x884328	               mov byte [rbx + 0x28], al	      2643	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_11
0x400472b	            0xebb6	                           jmp 0x40046e3	      2643	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_11
0x400472d	            0x31db	                            xor ebx, ebx	      2381	fold.c	FUNCTION_59
0x400472f	      0xe95af4ffff	                           jmp 0x4003b8e	      2381	fold.c	FUNCTION_59
0x4004734	          0x4889f1	                            mov rcx, rsi	      2526	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5	CALL_8
0x4004737	        0x488d7b10	                   lea rdi, [rbx + 0x10]	      2526	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5	CALL_8
0x400473b	          0x4829c1	                            sub rcx, rax	      2526	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5	CALL_8
0x400473e	          0x4829f0	                            sub rax, rsi	      2526	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5	CALL_8
0x4004741	            0x31f6	                            xor esi, esi	      2526	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5	CALL_8
0x4004743	          0x4889c2	                            mov rdx, rax	      2526	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5	CALL_8
0x4004746	        0x4883ea01	                              sub rdx, 1	      2526	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5	CALL_8
0x400474a	      0xe8d1efffff	call sym.foldMarkAdjustRecurse.constprop.22	      2526	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5	CALL_8
0x400474f	      0xe9f7fdffff	                           jmp 0x400454b	      2526	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5	CALL_8
0x4004754	          0x4c89d2	                            mov rdx, r10	      2796	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44	CALL_19
0x4004757	          0x4889c1	                            mov rcx, rax	      2796	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44	CALL_19
0x400475a	        0x488d7b40	                   lea rdi, [rbx + 0x40]	      2796	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44	CALL_19
0x400475e	          0x4829c2	                            sub rdx, rax	      2796	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44	CALL_19
0x4004761	          0x4c29d1	                            sub rcx, r10	      2796	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44	CALL_19
0x4004764	            0x31f6	                            xor esi, esi	      2796	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44	CALL_19
0x4004766	        0x4883ea01	                              sub rdx, 1	      2796	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44	CALL_19
0x400476a	      0xe8b1efffff	call sym.foldMarkAdjustRecurse.constprop.22	      2796	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44	CALL_19
0x400476f	        0x4d8b5608	                mov r10, qword [r14 + 8]	      2799	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4004773	    0xc70500000000	               mov dword [0x0400477d], 1	      2801	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x400477d	          0x4c89d0	                            mov rax, r10	      2799	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4004780	        0x482b4330	             sub rax, qword [rbx + 0x30]	      2799	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4004784	        0x4c895330	             mov qword [rbx + 0x30], r10	      2800	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4004788	        0x48294338	             sub qword [rbx + 0x38], rax	      2799	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x400478c	      0xe9c7fbffff	                           jmp 0x4004358	      2799	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4004791	            0x31db	                            xor ebx, ebx	      2799	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4004793	      0xe978f7ffff	                           jmp 0x4003f10	      2799	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4004798	        0x488d7b10	                   lea rdi, [rbx + 0x10]	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x400479c	      0x4c89442448	              mov qword [rsp + 0x48], r8	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x40047a1	      0x4889442418	             mov qword [rsp + 0x18], rax	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x40047a6	      0xe875f1ffff	             call sym.foldRemove.part.15	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x40047ab	        0x488b4d10	            mov rcx, qword [rbp + 0x10] 	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x40047af	      0x4c8b442448	              mov r8, qword [rsp + 0x48]	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x40047b4	      0x488b442418	            mov rax, qword [rsp + 0x18] 	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x40047b9	      0xe929fcffff	                           jmp 0x40043e7	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x40047be	     0xfb684249000	           movzx eax, byte [rsp + 0x90] 	      2638	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27
0x40047c6	    0x83bc24900000	               cmp dword [rsp + 0x90], 2	      2639	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27	IF_28
0x40047ce	          0x884328	               mov byte [rbx + 0x28], al	      2638	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27
0x40047d1	     0xf840cffffff	                            je 0x40046e3	      2639	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27	IF_28
0x40047d7	          0x498b06	                    mov rax, qword [r14]	      2640	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27	IF_28
0x40047da	    0xc68020010000	               mov byte [rax + 0x120], 1	      2640	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27	IF_28
0x40047e1	      0xe9fdfeffff	                           jmp 0x40046e3	      2640	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27	IF_28
0x40047e6	          0x4d89fb	                            mov r11, r15	      2640	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27	IF_28
0x40047e9	        0x488b5308	                mov rdx, qword [rbx + 8]	      2640	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27	IF_28
0x40047ed	      0xe969f9ffff	                           jmp 0x400415b	      2640	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27	IF_28
0x40047f2	            0x31c0	                            xor eax, eax	      1133	fold.c	FUNCTION_36	WHILE_1
0x40047f4	      0xe908f5ffff	                           jmp 0x4003d01	      1133	fold.c	FUNCTION_36	WHILE_1
0x40047f9	      0x4c3b6c2408	                cmp r13, qword [rsp + 8]	      2557	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_19
0x40047fe	            0x7531	                           jne 0x4004831	      2557	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_19
0x4004800	        0x498b4608	                mov rax, qword [r14 + 8]	      2564	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	ELSE_7
0x4004804	          0x4989c0	                             mov r8, rax	      2565	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	ELSE_7
0x4004807	      0xe9c3fbffff	                           jmp 0x40043cf	      2565	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	ELSE_7
0x400480c	            0x31db	                            xor ebx, ebx	      1133	fold.c	FUNCTION_36	WHILE_1
0x400480e	      0xe905feffff	                           jmp 0x4004618	      1133	fold.c	FUNCTION_36	WHILE_1
0x4004813	          0x4d89fb	                            mov r11, r15	      1133	fold.c	FUNCTION_36	WHILE_1
0x4004816	      0x488b442430	            mov rax, qword [rsp + 0x30] 	      2453	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x400481b	      0xe94cf9ffff	                           jmp 0x400416c	      2453	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x4004820	            0x31d2	                            xor edx, edx	      2500	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4004822	      0xe9b1f8ffff	                           jmp 0x40040d8	      2500	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4004827	      0x4c8b542430	            mov r10, qword [rsp + 0x30] 	      2453	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x400482c	      0xe96bf4ffff	                           jmp 0x4003c9c	      2453	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x4004831	          0x4989c0	                             mov r8, rax	      2453	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x4004834	          0x4c89e8	                            mov rax, r13	      2453	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x4004837	      0xe993fbffff	                           jmp 0x40043cf	      2453	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
foldInitWin	WHILE,0:functions,0:ELSE,0:DO,0:FOR,0:SWITCH,0:IF,0:CALL,1	4
0x4002d40	    0x4881c7080100	                          add rdi, 0x108	      1002	fold.c	ELSE_5	FUNCTION_31	CALL_1
0x4002d47	      0xba0a000000	                            mov edx, 0xa	      1002	fold.c	ELSE_5	FUNCTION_31	CALL_1
0x4002d4c	      0xbe30000000	                           mov esi, 0x30	      1002	fold.c	ELSE_5	FUNCTION_31	CALL_1
0x4002d51	      0xe900000000	                           jmp 0x4002d56	      1002	fold.c	ELSE_5	FUNCTION_31	CALL_1
foldAddMarker	WHILE,0:functions,0:ELSE,1:DO,0:FOR,0:SWITCH,0:IF,3:CALL,13	99
0x4000170	            0x4157	                                push r15	      1756	fold.c	FUNCTION_53
0x4000172	            0x4156	                                push r14	      1756	fold.c	FUNCTION_53
0x4000174	          0x4c63f2	                         movsxd r14, edx	      1756	fold.c	FUNCTION_53
0x4000177	            0x4155	                                push r13	      1756	fold.c	FUNCTION_53
0x4000179	            0x4154	                                push r12	      1756	fold.c	FUNCTION_53
0x400017b	              0x55	                                push rbp	      1756	fold.c	FUNCTION_53
0x400017c	              0x53	                                push rbx	      1756	fold.c	FUNCTION_53
0x400017d	          0x4889fb	                            mov rbx, rdi	      1756	fold.c	FUNCTION_53
0x4000180	        0x4883ec28	                           sub rsp, 0x28	      1756	fold.c	FUNCTION_53
0x4000184	    0x64488b042528	                mov rax, qword fs:[0x28]	      1756	fold.c	FUNCTION_53
0x400018d	      0x4889442418	             mov qword [rsp + 0x18], rax	      1756	fold.c	FUNCTION_53
0x4000192	            0x31c0	                            xor eax, eax	      1756	fold.c	FUNCTION_53
0x4000194	    0x488b05000000	            mov rax, qword [0x0400019b] 	      1757	fold.c	FUNCTION_53
0x400019b	        0x48893424	                    mov qword [rsp], rsi	      1756	fold.c	FUNCTION_53
0x400019f	      0xbe00000000	                              mov esi, 0	      1761	fold.c	FUNCTION_53	CALL_1
0x40001a4	    0x4c8ba0501400	          mov r12, qword [rax + 0x1450] 	      1757	fold.c	FUNCTION_53
0x40001ab	          0x4c89e7	                            mov rdi, r12	      1761	fold.c	FUNCTION_53	CALL_1
0x40001ae	      0xe800000000	                          call 0x40001b3	      1761	fold.c	FUNCTION_53	CALL_1
0x40001b3	          0x4889df	                            mov rdi, rbx	      1765	fold.c	FUNCTION_53	CALL_2
0x40001b6	          0x4989c7	                            mov r15, rax	      1761	fold.c	FUNCTION_53	CALL_1
0x40001b9	    0xc74424140000	               mov dword [rsp + 0x14], 0	      1762	fold.c	FUNCTION_53
0x40001c1	      0xe800000000	                          call 0x40001c6	      1765	fold.c	FUNCTION_53	CALL_2
0x40001c6	          0x4889c7	                            mov rdi, rax	      1766	fold.c	FUNCTION_53	CALL_3
0x40001c9	          0x4889c5	                            mov rbp, rax	      1765	fold.c	FUNCTION_53	CALL_2
0x40001cc	      0xe800000000	                          call 0x40001d1	      1766	fold.c	FUNCTION_53	CALL_3
0x40001d1	        0x488d7301	                      lea rsi, [rbx + 1]	      1768	fold.c	FUNCTION_53	IF_1	CALL_4
0x40001d5	        0x488d7bff	                      lea rdi, [rbx - 1]	      1768	fold.c	FUNCTION_53	IF_1	CALL_4
0x40001d9	          0x4989c5	                            mov r13, rax	      1766	fold.c	FUNCTION_53	CALL_3
0x40001dc	      0xe800000000	                          call 0x40001e1	      1768	fold.c	FUNCTION_53	IF_1	CALL_4
0x40001e1	          0x83f801	                              cmp eax, 1	      1768	fold.c	FUNCTION_53	IF_1	CALL_4
0x40001e4	            0x742a	                            je 0x4000210	      1768	fold.c	FUNCTION_53	IF_1	CALL_4
0x40001e6	      0x488b442418	            mov rax, qword [rsp + 0x18] 	      1790	fold.c	FUNCTION_53
0x40001eb	    0x644833042528	                xor rax, qword fs:[0x28]	      1790	fold.c	FUNCTION_53
0x40001f4	     0xf85df000000	                           jne 0x40002d9	      1790	fold.c	FUNCTION_53
0x40001fa	        0x4883c428	                           add rsp, 0x28	      1790	fold.c	FUNCTION_53
0x40001fe	              0x5b	                                 pop rbx	      1790	fold.c	FUNCTION_53
0x40001ff	              0x5d	                                 pop rbp	      1790	fold.c	FUNCTION_53
0x4000200	            0x415c	                                 pop r12	      1790	fold.c	FUNCTION_53
0x4000202	            0x415d	                                 pop r13	      1790	fold.c	FUNCTION_53
0x4000204	            0x415e	                                 pop r14	      1790	fold.c	FUNCTION_53
0x4000206	            0x415f	                                 pop r15	      1790	fold.c	FUNCTION_53
0x4000208	              0xc3	                                     ret	      1790	fold.c	FUNCTION_53
0x4000209	     0xf1f80000000	                         nop dword [rax]	      1790	fold.c	FUNCTION_53
0x4000210	      0x488d4c2414	                   lea rcx, [rsp + 0x14]	      1772	fold.c	FUNCTION_53	IF_1	CALL_5
0x4000215	            0x31d2	                            xor edx, edx	      1772	fold.c	FUNCTION_53	IF_1	CALL_5
0x4000217	            0x31f6	                            xor esi, esi	      1772	fold.c	FUNCTION_53	IF_1	CALL_5
0x4000219	          0x4889ef	                            mov rdi, rbp	      1772	fold.c	FUNCTION_53	IF_1	CALL_5
0x400021c	      0xe800000000	                          call 0x4000221	      1772	fold.c	FUNCTION_53	IF_1	CALL_5
0x4000221	          0x4c89e7	                            mov rdi, r12	      1774	fold.c	FUNCTION_53	IF_1	CALL_7
0x4000224	      0xe800000000	                          call 0x4000229	      1774	fold.c	FUNCTION_53	IF_1	CALL_7
0x4000229	      0x438d7c2e01	                lea edi, [r14 + r13 + 1]	      1774	fold.c	FUNCTION_53	IF_1	CALL_7
0x400022e	             0x1c7	                            add edi, eax	      1774	fold.c	FUNCTION_53	IF_1	CALL_7
0x4000230	      0xe800000000	                          call 0x4000235	      1774	fold.c	FUNCTION_53	IF_1	CALL_7
0x4000235	          0x4885c0	                           test rax, rax	      1775	fold.c	FUNCTION_53	IF_1	IF_2
0x4000238	            0x74ac	                            je 0x40001e6	      1775	fold.c	FUNCTION_53	IF_1	IF_2
0x400023a	          0x4889ee	                            mov rsi, rbp	       110	string3.h	FUNCTION_83	CALL_3
0x400023d	          0x4889c7	                            mov rdi, rax	       110	string3.h	FUNCTION_83	CALL_3
0x4000240	      0xe800000000	                          call 0x4000245	       110	string3.h	FUNCTION_83	CALL_3
0x4000245	          0x4d85ff	                           test r15, r15	      1779	fold.c	FUNCTION_53	IF_1	IF_3
0x4000248	          0x4889c1	                            mov rcx, rax	       110	string3.h	FUNCTION_83	CALL_3
0x400024b	            0x7408	                            je 0x4000255	      1779	fold.c	FUNCTION_53	IF_1	IF_3
0x400024d	        0x8b442414	            mov eax, dword [rsp + 0x14] 	      1779	fold.c	FUNCTION_53	IF_1	IF_3
0x4000251	            0x85c0	                           test eax, eax	      1779	fold.c	FUNCTION_53	IF_1	IF_3
0x4000253	            0x7433	                            je 0x4000288	      1779	fold.c	FUNCTION_53	IF_1	IF_3
0x4000255	        0x488b3424	                    mov rsi, qword [rsp]	      1780	fold.c	FUNCTION_53	IF_1	CALL_9
0x4000259	          0x4963fd	                        movsxd rdi, r13d	      1780	fold.c	FUNCTION_53	IF_1	CALL_9
0x400025c	          0x4963d6	                        movsxd rdx, r14d	      1780	fold.c	FUNCTION_53	IF_1	CALL_9
0x400025f	          0x4801cf	                            add rdi, rcx	      1780	fold.c	FUNCTION_53	IF_1	CALL_9
0x4000262	      0x48894c2408	                mov qword [rsp + 8], rcx	      1780	fold.c	FUNCTION_53	IF_1	CALL_9
0x4000267	      0xe800000000	                          call 0x400026c	      1780	fold.c	FUNCTION_53	IF_1	CALL_9
0x400026c	      0x488b4c2408	                mov rcx, qword [rsp + 8]	      1780	fold.c	FUNCTION_53	IF_1	CALL_9
0x4000271	            0x31d2	                            xor edx, edx	      1788	fold.c	FUNCTION_53	IF_1	CALL_13
0x4000273	          0x4889ce	                            mov rsi, rcx	      1788	fold.c	FUNCTION_53	IF_1	CALL_13
0x4000276	          0x4889df	                            mov rdi, rbx	      1788	fold.c	FUNCTION_53	IF_1	CALL_13
0x4000279	      0xe800000000	                          call 0x400027e	      1788	fold.c	FUNCTION_53	IF_1	CALL_13
0x400027e	      0xe963ffffff	                           jmp 0x40001e6	      1788	fold.c	FUNCTION_53	IF_1	CALL_13
0x4000283	       0xf1f440000	                   nop dword [rax + rax]	      1788	fold.c	FUNCTION_53	IF_1	CALL_13
0x4000288	          0x4d63ed	                        movsxd r13, r13d	      1783	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_10
0x400028b	          0x4c89e6	                            mov rsi, r12	       110	string3.h	FUNCTION_83	CALL_3
0x400028e	      0x48894c2408	                mov qword [rsp + 8], rcx	       110	string3.h	FUNCTION_83	CALL_3
0x4000293	        0x4a8d3c29	                    lea rdi, [rcx + r13]	       110	string3.h	FUNCTION_83	CALL_3
0x4000297	      0xe800000000	                          call 0x400029c	       110	string3.h	FUNCTION_83	CALL_3
0x400029c	      0x488b4c2408	                mov rcx, qword [rsp + 8]	       126	string3.h	FUNCTION_85	CALL_3
0x40002a1	          0x4c89f8	                            mov rax, r15	      1784	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_11
0x40002a4	        0x488b3424	                    mov rsi, qword [rsp]	       126	string3.h	FUNCTION_85	CALL_3
0x40002a8	          0x4c29e0	                            sub rax, r12	      1784	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_11
0x40002ab	          0x4c89f2	                            mov rdx, r14	       126	string3.h	FUNCTION_85	CALL_3
0x40002ae	          0x4901c5	                            add r13, rax	      1784	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_11
0x40002b1	        0x4a8d3c29	                    lea rdi, [rcx + r13]	       126	string3.h	FUNCTION_85	CALL_3
0x40002b5	          0x4d01f5	                            add r13, r14	       110	string3.h	FUNCTION_83	CALL_3
0x40002b8	      0xe800000000	                          call 0x40002bd	       126	string3.h	FUNCTION_85	CALL_3
0x40002bd	      0x488b4c2408	                mov rcx, qword [rsp + 8]	       110	string3.h	FUNCTION_83	CALL_3
0x40002c2	        0x498d7702	                      lea rsi, [r15 + 2]	       110	string3.h	FUNCTION_83	CALL_3
0x40002c6	        0x4a8d3c29	                    lea rdi, [rcx + r13]	       110	string3.h	FUNCTION_83	CALL_3
0x40002ca	        0x48890c24	                    mov qword [rsp], rcx	       110	string3.h	FUNCTION_83	CALL_3
0x40002ce	      0xe800000000	                          call 0x40002d3	       110	string3.h	FUNCTION_83	CALL_3
0x40002d3	        0x488b0c24	                    mov rcx, qword [rsp]	       110	string3.h	FUNCTION_83	CALL_3
0x40002d7	            0xeb98	                           jmp 0x4000271	       110	string3.h	FUNCTION_83	CALL_3
0x40002d9	      0xe800000000	                          call 0x40002de	      1790	fold.c	FUNCTION_53
foldOpenCursor	WHILE,0:functions,0:ELSE,0:DO,0:FOR,1:SWITCH,0:IF,2:CALL,3	92
0x40067b0	            0x4154	                                push r12	       445	fold.c	FUNCTION_19
0x40067b2	              0x55	                                push rbp	       445	fold.c	FUNCTION_19
0x40067b3	              0x53	                                push rbx	       445	fold.c	FUNCTION_19
0x40067b4	        0x4883ec10	                           sub rsp, 0x10	       445	fold.c	FUNCTION_19
0x40067b8	    0x488b2d000000	            mov rbp, qword [0x040067bf] 	       448	fold.c	FUNCTION_19	CALL_1
0x40067bf	    0x64488b042528	                mov rax, qword fs:[0x28]	       445	fold.c	FUNCTION_19
0x40067c8	      0x4889442408	                mov qword [rsp + 8], rax	       445	fold.c	FUNCTION_19
0x40067cd	            0x31c0	                            xor eax, eax	       445	fold.c	FUNCTION_19
0x40067cf	    0x80bd21010000	               cmp byte [rbp + 0x121], 0	      1187	fold.c	FUNCTION_38	IF_1
0x40067d6	     0xf8504010000	                           jne 0x40068e0	      1187	fold.c	FUNCTION_38	IF_1
0x40067dc	    0x8bb5d4010000	           mov esi, dword [rbp + 0x1d4] 	       119	fold.c	FUNCTION_2	CALL_1
0x40067e2	            0x85f6	                           test esi, esi	       119	fold.c	FUNCTION_2	CALL_1
0x40067e4	            0x741a	                            je 0x4006800	       119	fold.c	FUNCTION_2	CALL_1
0x40067e6	    0x488b85f80100	           mov rax, qword [rbp + 0x1f8] 	       307	fold.c	FUNCTION_8
0x40067ed	        0x80780375	                cmp byte [rax + 3], 0x75	       119	fold.c	FUNCTION_2	CALL_1
0x40067f1	            0x7559	                           jne 0x400684c	       119	fold.c	FUNCTION_2	CALL_1
0x40067f3	    0x8b8d08010000	           mov ecx, dword [rbp + 0x108] 	       119	fold.c	FUNCTION_2	CALL_1
0x40067f9	            0x85c9	                           test ecx, ecx	       119	fold.c	FUNCTION_2	CALL_1
0x40067fb	            0x7f4f	                            jg 0x400684c	       119	fold.c	FUNCTION_2	CALL_1
0x40067fd	           0xf1f00	                         nop dword [rax]	       119	fold.c	FUNCTION_2	CALL_1
0x4006800	      0x488b442408	                mov rax, qword [rsp + 8]	       457	fold.c	FUNCTION_19
0x4006805	    0x644833042528	                xor rax, qword fs:[0x28]	       457	fold.c	FUNCTION_19
0x400680e	     0xf8503010000	                           jne 0x4006917	       457	fold.c	FUNCTION_19
0x4006814	        0x4883c410	                           add rsp, 0x10	       457	fold.c	FUNCTION_19
0x4006818	              0x5b	                                 pop rbx	       457	fold.c	FUNCTION_19
0x4006819	              0x5d	                                 pop rbp	       457	fold.c	FUNCTION_19
0x400681a	            0x415c	                                 pop r12	       457	fold.c	FUNCTION_19
0x400681c	              0xc3	                                     ret	       457	fold.c	FUNCTION_19
0x400681d	           0xf1f00	                         nop dword [rax]	       457	fold.c	FUNCTION_19
0x4006820	      0x4c8d442404	                       lea r8, [rsp + 4]	      1253	fold.c	FUNCTION_40	CALL_2
0x4006825	            0x31c9	                            xor ecx, ecx	      1253	fold.c	FUNCTION_40	CALL_2
0x4006827	      0xba01000000	                              mov edx, 1	      1253	fold.c	FUNCTION_40	CALL_2
0x400682c	          0x4c89e6	                            mov rsi, r12	      1253	fold.c	FUNCTION_40	CALL_2
0x400682f	          0x4889ef	                            mov rdi, rbp	      1253	fold.c	FUNCTION_40	CALL_2
0x4006832	      0xe869faffff	               call sym.setManualFoldWin	      1253	fold.c	FUNCTION_40	CALL_2
0x4006837	      0xf644240401	                  test byte [rsp + 4], 1	       454	fold.c	FUNCTION_19	IF_1	FOR_1	IF_2
0x400683c	            0x74c2	                            je 0x4006800	       454	fold.c	FUNCTION_19	IF_1	FOR_1	IF_2
0x400683e	    0x488b2d000000	            mov rbp, qword [0x04006845] 	       454	fold.c	FUNCTION_19	IF_1	FOR_1	IF_2
0x4006845	    0x488b85f80100	           mov rax, qword [rbp + 0x1f8] 	       454	fold.c	FUNCTION_19	IF_1	FOR_1	IF_2
0x400684c	    0xc74424040000	                  mov dword [rsp + 4], 0	       452	fold.c	FUNCTION_19	IF_1	FOR_1
0x4006854	          0x803864	                    cmp byte [rax], 0x64	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x4006857	        0x4c8b6538	            mov r12, qword [rbp + 0x38] 	       453	fold.c	FUNCTION_19	IF_1	FOR_1	CALL_3
0x400685b	            0x75c3	                           jne 0x4006820	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x400685d	    0x8b9588020000	           mov edx, dword [rbp + 0x288] 	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x4006863	            0x85d2	                           test edx, edx	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x4006865	            0x74b9	                            je 0x4006820	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x4006867	    0x488b1d000000	            mov rbx, qword [0x0400686e] 	      1241	fold.c	FUNCTION_40	IF_1
0x400686e	          0x4885db	                           test rbx, rbx	      1241	fold.c	FUNCTION_40	IF_1
0x4006871	            0x750e	                           jne 0x4006881	      1241	fold.c	FUNCTION_40	IF_1
0x4006873	            0xebab	                           jmp 0x4006820	      1241	fold.c	FUNCTION_40	IF_1
0x4006875	           0xf1f00	                         nop dword [rax]	      1241	fold.c	FUNCTION_40	IF_1
0x4006878	        0x488b5b20	            mov rbx, qword [rbx + 0x20] 	      1241	fold.c	FUNCTION_40	IF_1
0x400687c	          0x4885db	                           test rbx, rbx	      1241	fold.c	FUNCTION_40	IF_1
0x400687f	            0x749f	                            je 0x4006820	      1241	fold.c	FUNCTION_40	IF_1
0x4006881	          0x4839eb	                            cmp rbx, rbp	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x4006884	            0x74f2	                            je 0x4006878	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x4006886	    0x488b83f80100	           mov rax, qword [rbx + 0x1f8] 	       357	fold.c	FUNCTION_13
0x400688d	          0x803864	                    cmp byte [rax], 0x64	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x4006890	            0x75e6	                           jne 0x4006878	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x4006892	    0x8b8388020000	           mov eax, dword [rbx + 0x288] 	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x4006898	            0x85c0	                           test eax, eax	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x400689a	            0x74dc	                            je 0x4006878	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x400689c	        0x488b7d38	            mov rdi, qword [rbp + 0x38] 	      1245	fold.c	FUNCTION_40	FUNCTION_1	CALL_2
0x40068a0	          0x4889de	                            mov rsi, rbx	      1245	fold.c	FUNCTION_40	FUNCTION_1	CALL_2
0x40068a3	      0xe800000000	                          call 0x40068a8	      1245	fold.c	FUNCTION_40	FUNCTION_1	CALL_2
0x40068a8	          0x4885c0	                           test rax, rax	      1246	fold.c	FUNCTION_40	FUNCTION_1	IF_2
0x40068ab	            0x7513	                           jne 0x40068c0	      1246	fold.c	FUNCTION_40	FUNCTION_1	IF_2
0x40068ad	    0x488b2d000000	            mov rbp, qword [0x040068b4] 	      1246	fold.c	FUNCTION_40	FUNCTION_1	IF_2
0x40068b4	            0xebc2	                           jmp 0x4006878	      1246	fold.c	FUNCTION_40	FUNCTION_1	IF_2
0x40068b6	    0x662e0f1f8400	                 nop word cs:[rax + rax]	      1246	fold.c	FUNCTION_40	FUNCTION_1	IF_2
0x40068c0	          0x4531c0	                            xor r8d, r8d	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x40068c3	            0x31c9	                            xor ecx, ecx	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x40068c5	      0xba01000000	                              mov edx, 1	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x40068ca	          0x4889c6	                            mov rsi, rax	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x40068cd	          0x4889df	                            mov rdi, rbx	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x40068d0	      0xe8cbf9ffff	               call sym.setManualFoldWin	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x40068d5	            0xebd6	                           jmp 0x40068ad	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x40068d7	    0x660f1f840000	                    nop word [rax + rax]	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x40068e0	    0x8b3d00000000	            mov edi, dword [0x040068e6] 	       813	fold.c	FUNCTION_28	IF_1
0x40068e6	          0x4889e8	                            mov rax, rbp	       813	fold.c	FUNCTION_28	IF_1
0x40068e9	            0x85ff	                           test edi, edi	       813	fold.c	FUNCTION_28	IF_1
0x40068eb	            0x7e0f	                           jle 0x40068fc	       813	fold.c	FUNCTION_28	IF_1
0x40068ed	    0xc68521010000	               mov byte [rbp + 0x121], 0	      1190	fold.c	FUNCTION_38	IF_1
0x40068f4	          0x4889c5	                            mov rbp, rax	      1190	fold.c	FUNCTION_38	IF_1
0x40068f7	      0xe9e0feffff	                           jmp 0x40067dc	      1190	fold.c	FUNCTION_38	IF_1
0x40068fc	      0xbaffffff7f	                     mov edx, 0x7fffffff	      1190	fold.c	FUNCTION_38	IF_1
0x4006901	      0xbe01000000	                              mov esi, 1	      1190	fold.c	FUNCTION_38	IF_1
0x4006906	          0x4889ef	                            mov rdi, rbp	      1190	fold.c	FUNCTION_38	IF_1
0x4006909	      0xe832dfffff	             call sym.foldUpdate.part.16	      1190	fold.c	FUNCTION_38	IF_1
0x400690e	    0x488b05000000	            mov rax, qword [0x04006915] 	      1190	fold.c	FUNCTION_38	IF_1
0x4006915	            0xebd6	                           jmp 0x40068ed	      1190	fold.c	FUNCTION_38	IF_1
0x4006917	      0xe800000000	                          call 0x400691c	       457	fold.c	FUNCTION_19
foldMoveRange	WHILE,0:functions,0:ELSE,4:DO,0:FOR,2:SWITCH,0:IF,12:CALL,11	433
0x4007e40	            0x4157	                                push r15	      3036	fold.c	FUNCTION_65
0x4007e42	            0x4156	                                push r14	      3036	fold.c	FUNCTION_65
0x4007e44	          0x4989d1	                             mov r9, rdx	      3036	fold.c	FUNCTION_65
0x4007e47	            0x4155	                                push r13	      3036	fold.c	FUNCTION_65
0x4007e49	            0x4154	                                push r12	      3036	fold.c	FUNCTION_65
0x4007e4b	          0x4989cf	                            mov r15, rcx	      3036	fold.c	FUNCTION_65
0x4007e4e	              0x55	                                push rbp	      3036	fold.c	FUNCTION_65
0x4007e4f	              0x53	                                push rbx	      3036	fold.c	FUNCTION_65
0x4007e50	          0x4889f5	                            mov rbp, rsi	      3036	fold.c	FUNCTION_65
0x4007e53	          0x4889fb	                            mov rbx, rdi	      3036	fold.c	FUNCTION_65
0x4007e56	        0x4883ec58	                           sub rsp, 0x58	      3036	fold.c	FUNCTION_65
0x4007e5a	    0x660f1f440000	                    nop word [rax + rax]	      3036	fold.c	FUNCTION_65
0x4007e60	          0x486313	                 movsxd rdx, dword [rbx]	      3036	fold.c	FUNCTION_65
0x4007e63	          0x4d89ce	                             mov r14, r9	      3038	fold.c	FUNCTION_65
0x4007e66	        0x488d7dff	                      lea rdi, [rbp - 1]	      3040	fold.c	FUNCTION_65	CALL_1
0x4007e6a	          0x4929ee	                            sub r14, rbp	      3038	fold.c	FUNCTION_65
0x4007e6d	        0x4c8b6b10	            mov r13, qword [rbx + 0x10] 	      3038	fold.c	FUNCTION_65
0x4007e71	        0x4983c601	                              add r14, 1	      3038	fold.c	FUNCTION_65
0x4007e75	          0x8d4aff	                      lea ecx, [rdx - 1]	      1132	fold.c	FUNCTION_36
0x4007e78	          0x4863c9	                         movsxd rcx, ecx	      1132	fold.c	FUNCTION_36
0x4007e7b	          0x4885c9	                           test rcx, rcx	      1133	fold.c	FUNCTION_36	WHILE_1
0x4007e7e	     0xf88f0000000	                            js 0x4007f74	      1133	fold.c	FUNCTION_36	WHILE_1
0x4007e84	            0x31f6	                            xor esi, esi	      1133	fold.c	FUNCTION_36	WHILE_1
0x4007e86	            0xeb13	                           jmp 0x4007e9b	      1133	fold.c	FUNCTION_36	WHILE_1
0x4007e88	     0xf1f84000000	                   nop dword [rax + rax]	      1133	fold.c	FUNCTION_36	WHILE_1
0x4007e90	          0x83e801	                              sub eax, 1	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4007e93	          0x4863c8	                         movsxd rcx, eax	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4007e96	          0x4839ce	                            cmp rsi, rcx	      1133	fold.c	FUNCTION_36	WHILE_1
0x4007e99	            0x7f37	                            jg 0x4007ed2	      1133	fold.c	FUNCTION_36	WHILE_1
0x4007e9b	        0x488d0431	                    lea rax, [rcx + rsi]	      1135	fold.c	FUNCTION_36	WHILE_1
0x4007e9f	          0x48d1f8	                              sar rax, 1	      1135	fold.c	FUNCTION_36	WHILE_1
0x4007ea2	        0x4c8d2440	                  lea r12, [rax + rax*2]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4007ea6	        0x49c1e404	                              shl r12, 4	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4007eaa	          0x4d01ec	                            add r12, r13	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4007ead	        0x4d8b1424	                    mov r10, qword [r12]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4007eb1	          0x4c39d7	                            cmp rdi, r10	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4007eb4	            0x7cda	                            jl 0x4007e90	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4007eb6	          0x4c89d6	                            mov rsi, r10	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4007eb9	      0x4903742408	                add rsi, qword [r12 + 8]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4007ebe	          0x4839f7	                            cmp rdi, rsi	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4007ec1	     0xf8c91000000	                            jl 0x4007f58	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4007ec7	          0x83c001	                              add eax, 1	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4007eca	          0x4863f0	                         movsxd rsi, eax	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4007ecd	          0x4839ce	                            cmp rsi, rcx	      1133	fold.c	FUNCTION_36	WHILE_1
0x4007ed0	            0x7ec9	                           jle 0x4007e9b	      1133	fold.c	FUNCTION_36	WHILE_1
0x4007ed2	        0x4c8d2476	                  lea r12, [rsi + rsi*2]	      1133	fold.c	FUNCTION_36	WHILE_1
0x4007ed6	        0x49c1e404	                              shl r12, 4	      1133	fold.c	FUNCTION_36	WHILE_1
0x4007eda	          0x4d01ec	                            add r12, r13	      1149	fold.c	FUNCTION_36
0x4007edd	        0x488d0452	                  lea rax, [rdx + rdx*2]	      3074	fold.c	FUNCTION_65	IF_4
0x4007ee1	        0x48c1e004	                              shl rax, 4	      3074	fold.c	FUNCTION_65	IF_4
0x4007ee5	          0x4c01e8	                            add rax, r13	      3074	fold.c	FUNCTION_65	IF_4
0x4007ee8	          0x4c39e0	                            cmp rax, r12	      3074	fold.c	FUNCTION_65	IF_4
0x4007eeb	            0x7655	                           jbe 0x4007f42	      3074	fold.c	FUNCTION_65	IF_4
0x4007eed	        0x498b3c24	                    mov rdi, qword [r12]	      3074	fold.c	FUNCTION_65	IF_4
0x4007ef1	          0x4939ff	                            cmp r15, rdi	      3074	fold.c	FUNCTION_65	IF_4
0x4007ef4	            0x7c4c	                            jl 0x4007f42	      3074	fold.c	FUNCTION_65	IF_4
0x4007ef6	          0x4939f9	                             cmp r9, rdi	      3081	fold.c	FUNCTION_65	ELSE_3	IF_5
0x4007ef9	     0xf8dd7000000	                           jge 0x4007fd6	      3081	fold.c	FUNCTION_65	ELSE_3	IF_5
0x4007eff	          0x4889fa	                            mov rdx, rdi	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4007f02	      0x4903542408	                add rdx, qword [r12 + 8]	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4007f07	        0x4883ea01	                              sub rdx, 1	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4007f0b	          0x4939d7	                            cmp r15, rdx	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4007f0e	            0x7d21	                           jge 0x4007f31	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4007f10	      0xe975050000	                           jmp 0x400848a	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4007f15	           0xf1f00	                         nop dword [rax]	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4007f18	        0x498b3c24	                    mov rdi, qword [r12]	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4007f1c	          0x4889fa	                            mov rdx, rdi	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4007f1f	      0x4903542408	                add rdx, qword [r12 + 8]	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4007f24	        0x4883ea01	                              sub rdx, 1	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4007f28	          0x4939d7	                            cmp r15, rdx	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4007f2b	     0xf8c50050000	                            jl 0x4008481	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4007f31	          0x4c29f7	                            sub rdi, r14	      3085	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4007f34	        0x4983c430	                           add r12, 0x30	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4007f38	      0x49897c24d0	             mov qword [r12 - 0x30], rdi	      3085	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4007f3d	          0x4c39e0	                            cmp rax, r12	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4007f40	            0x77d6	                            ja 0x4007f18	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4007f42	        0x4883c458	                           add rsp, 0x58	      3150	fold.c	FUNCTION_65
0x4007f46	              0x5b	                                 pop rbx	      3150	fold.c	FUNCTION_65
0x4007f47	              0x5d	                                 pop rbp	      3150	fold.c	FUNCTION_65
0x4007f48	            0x415c	                                 pop r12	      3150	fold.c	FUNCTION_65
0x4007f4a	            0x415d	                                 pop r13	      3150	fold.c	FUNCTION_65
0x4007f4c	            0x415e	                                 pop r14	      3150	fold.c	FUNCTION_65
0x4007f4e	            0x415f	                                 pop r15	      3150	fold.c	FUNCTION_65
0x4007f50	              0xc3	                                     ret	      3150	fold.c	FUNCTION_65
0x4007f51	     0xf1f80000000	                         nop dword [rax]	      3150	fold.c	FUNCTION_65
0x4007f58	        0x4883ee01	                              sub rsi, 1	      3045	fold.c	FUNCTION_65	IF_1	IF_2
0x4007f5c	          0x4939f7	                            cmp r15, rsi	      3045	fold.c	FUNCTION_65	IF_1	IF_2
0x4007f5f	            0x7d1b	                           jge 0x4007f7c	      3045	fold.c	FUNCTION_65	IF_1	IF_2
0x4007f61	          0x4d29d7	                            sub r15, r10	      3050	fold.c	FUNCTION_65	IF_1	IF_2	CALL_2
0x4007f64	          0x4d29d1	                             sub r9, r10	      3050	fold.c	FUNCTION_65	IF_1	IF_2	CALL_2
0x4007f67	          0x4c29d5	                            sub rbp, r10	      3050	fold.c	FUNCTION_65	IF_1	IF_2	CALL_2
0x4007f6a	      0x498d5c2410	                   lea rbx, [r12 + 0x10]	      3050	fold.c	FUNCTION_65	IF_1	IF_2	CALL_2
0x4007f6f	      0xe9ecfeffff	                           jmp 0x4007e60	      3052	fold.c	FUNCTION_65	IF_1	IF_2
0x4007f74	          0x4531e4	                          xor r12d, r12d	      1133	fold.c	FUNCTION_36	WHILE_1
0x4007f77	      0xe95effffff	                           jmp 0x4007eda	      1133	fold.c	FUNCTION_36	WHILE_1
0x4007f7c	          0x4939f1	                             cmp r9, rsi	      3054	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3
0x4007f7f	            0x7d3b	                           jge 0x4007fbc	      3054	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3
0x4007f81	          0x4c89ca	                             mov rdx, r9	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_3
0x4007f84	          0x4c89f1	                            mov rcx, r14	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_3
0x4007f87	          0x4889ee	                            mov rsi, rbp	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_3
0x4007f8a	      0x498d7c2410	                   lea rdi, [r12 + 0x10]	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_3
0x4007f8f	          0x4c29d2	                            sub rdx, r10	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_3
0x4007f92	          0x48f7d9	                                 neg rcx	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_3
0x4007f95	          0x4c29d6	                            sub rsi, r10	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_3
0x4007f98	      0x4c894c2408	                 mov qword [rsp + 8], r9	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_3
0x4007f9d	      0xe87eb7ffff	call sym.foldMarkAdjustRecurse.constprop.22	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_3
0x4007fa2	      0x4d29742408	                sub qword [r12 + 8], r14	      3063	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3
0x4007fa7	          0x486313	                 movsxd rdx, dword [rbx]	      3063	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3
0x4007faa	        0x4c8b6b10	            mov r13, qword [rbx + 0x10] 	      3063	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3
0x4007fae	      0x4c8b4c2408	                 mov r9, qword [rsp + 8]	      3063	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3
0x4007fb3	        0x4983c430	                           add r12, 0x30	      3071	fold.c	FUNCTION_65	IF_1
0x4007fb7	      0xe921ffffff	                           jmp 0x4007edd	      3071	fold.c	FUNCTION_65	IF_1
0x4007fbc	          0x4889ee	                            mov rsi, rbp	      3026	fold.c	FUNCTION_64	CALL_1
0x4007fbf	          0x4c29d6	                            sub rsi, r10	      3026	fold.c	FUNCTION_64	CALL_1
0x4007fc2	    0x4881feffffff	                     cmp rsi, 0x7fffffff	      2920	fold.c	FUNCTION_62	IF_1
0x4007fc9	     0xf8ecf000000	                           jle 0x400809e	      2920	fold.c	FUNCTION_62	IF_1
0x4007fcf	      0x4989742408	                mov qword [r12 + 8], rsi	      3027	fold.c	FUNCTION_64
0x4007fd4	            0xebdd	                           jmp 0x4007fb3	      3027	fold.c	FUNCTION_64
0x4007fd6	          0x4889f8	                            mov rax, rdi	      3095	fold.c	FUNCTION_65	ELSE_4	IF_7
0x4007fd9	      0x4903442408	                add rax, qword [r12 + 8]	      3095	fold.c	FUNCTION_65	ELSE_4	IF_7
0x4007fde	          0x4d89fa	                            mov r10, r15	      3039	fold.c	FUNCTION_65
0x4007fe1	          0x4d29ca	                             sub r10, r9	      3039	fold.c	FUNCTION_65
0x4007fe4	        0x4883e801	                              sub rax, 1	      3095	fold.c	FUNCTION_65	ELSE_4	IF_7
0x4007fe8	          0x4939c7	                            cmp r15, rax	      3095	fold.c	FUNCTION_65	ELSE_4	IF_7
0x4007feb	     0xf8cde000000	                            jl 0x40080cf	      3095	fold.c	FUNCTION_65	ELSE_4	IF_7
0x4007ff1	        0x498d7701	                      lea rsi, [r15 + 1]	      3025	fold.c	FUNCTION_64
0x4007ff5	          0x4c89e1	                            mov rcx, r12	      3025	fold.c	FUNCTION_64
0x4007ff8	          0x4c89e8	                            mov rax, r13	      3025	fold.c	FUNCTION_64
0x4007ffb	      0x4c89642418	             mov qword [rsp + 0x18], r12	      3025	fold.c	FUNCTION_64
0x4008000	      0x4c896c2420	             mov qword [rsp + 0x20], r13	      3025	fold.c	FUNCTION_64
0x4008005	          0x4d89f4	                            mov r12, r14	      3025	fold.c	FUNCTION_64
0x4008008	      0x4889742408	                mov qword [rsp + 8], rsi	      3025	fold.c	FUNCTION_64
0x400800d	        0x498d7101	                       lea rsi, [r9 + 1]	      3025	fold.c	FUNCTION_64
0x4008011	          0x4d89ce	                             mov r14, r9	      3025	fold.c	FUNCTION_64
0x4008014	            0x31ed	                            xor ebp, ebp	      3025	fold.c	FUNCTION_64
0x4008016	          0x4989d9	                             mov r9, rbx	      3025	fold.c	FUNCTION_64
0x4008019	          0x4d89d5	                            mov r13, r10	      3025	fold.c	FUNCTION_64
0x400801c	      0x4889742410	             mov qword [rsp + 0x10], rsi	      3025	fold.c	FUNCTION_64
0x4008021	          0x4889cb	                            mov rbx, rcx	      3025	fold.c	FUNCTION_64
0x4008024	            0xeb3e	                           jmp 0x4008064	      3025	fold.c	FUNCTION_64
0x4008026	          0x4889f9	                            mov rcx, rdi	      3116	fold.c	FUNCTION_65	FOR_2	IF_8	IF_9
0x4008029	        0x48034b08	                add rcx, qword [rbx + 8]	      3116	fold.c	FUNCTION_65	FOR_2	IF_8	IF_9
0x400802d	        0x4883e901	                              sub rcx, 1	      3116	fold.c	FUNCTION_65	FOR_2	IF_8	IF_9
0x4008031	          0x4939ce	                            cmp r14, rcx	      3116	fold.c	FUNCTION_65	FOR_2	IF_8	IF_9
0x4008034	     0xf8c0e010000	                            jl 0x4008148	      3116	fold.c	FUNCTION_65	FOR_2	IF_8	IF_9
0x400803a	          0x4c01ef	                            add rdi, r13	      3120	fold.c	FUNCTION_65	FOR_2	IF_8
0x400803d	          0x48893b	                    mov qword [rbx], rdi	      3120	fold.c	FUNCTION_65	FOR_2	IF_8
0x4008040	        0x488d0c52	                  lea rcx, [rdx + rdx*2]	      3111	fold.c	FUNCTION_65	FOR_2
0x4008044	        0x4883c330	                           add rbx, 0x30	      3111	fold.c	FUNCTION_65	FOR_2
0x4008048	        0x48c1e104	                              shl rcx, 4	      3111	fold.c	FUNCTION_65	FOR_2
0x400804c	          0x4801c1	                            add rcx, rax	      3111	fold.c	FUNCTION_65	FOR_2
0x400804f	          0x4839cb	                            cmp rbx, rcx	      3111	fold.c	FUNCTION_65	FOR_2
0x4008052	     0xf8334010000	                           jae 0x400818c	      3111	fold.c	FUNCTION_65	FOR_2
0x4008058	          0x488b3b	                    mov rdi, qword [rbx]	      3111	fold.c	FUNCTION_65	FOR_2
0x400805b	          0x4939ff	                            cmp r15, rdi	      3111	fold.c	FUNCTION_65	FOR_2
0x400805e	     0xf8c28010000	                            jl 0x400818c	      3111	fold.c	FUNCTION_65	FOR_2
0x4008064	          0x4939fe	                            cmp r14, rdi	      3113	fold.c	FUNCTION_65	FOR_2	IF_8
0x4008067	            0x7dbd	                           jge 0x4008026	      3113	fold.c	FUNCTION_65	FOR_2	IF_8
0x4008069	          0x4885ed	                           test rbp, rbp	      3125	fold.c	FUNCTION_65	FOR_2	IF_10
0x400806c	            0x7518	                           jne 0x4008086	      3125	fold.c	FUNCTION_65	FOR_2	IF_10
0x400806e	          0x4889dd	                            mov rbp, rbx	      3126	fold.c	FUNCTION_65	FOR_2	IF_10
0x4008071	    0x48b9abaaaaaa	          movabs rcx, 0xaaaaaaaaaaaaaaab	      3126	fold.c	FUNCTION_65	FOR_2	IF_10
0x400807b	          0x4829c5	                            sub rbp, rax	      3126	fold.c	FUNCTION_65	FOR_2	IF_10
0x400807e	        0x48c1fd04	                              sar rbp, 4	      3126	fold.c	FUNCTION_65	FOR_2	IF_10
0x4008082	        0x480fafe9	                           imul rbp, rcx	      3126	fold.c	FUNCTION_65	FOR_2	IF_10
0x4008086	          0x4889f9	                            mov rcx, rdi	      3128	fold.c	FUNCTION_65	FOR_2	IF_11
0x4008089	        0x48034b08	                add rcx, qword [rbx + 8]	      3128	fold.c	FUNCTION_65	FOR_2	IF_11
0x400808d	        0x4883e901	                              sub rcx, 1	      3128	fold.c	FUNCTION_65	FOR_2	IF_11
0x4008091	          0x4939cf	                            cmp r15, rcx	      3128	fold.c	FUNCTION_65	FOR_2	IF_11
0x4008094	            0x7c6e	                            jl 0x4008104	      3128	fold.c	FUNCTION_65	FOR_2	IF_11
0x4008096	          0x4c29e7	                            sub rdi, r12	      3131	fold.c	FUNCTION_65	FOR_2
0x4008099	          0x48893b	                    mov qword [rbx], rdi	      3131	fold.c	FUNCTION_65	FOR_2
0x400809c	            0xeba2	                           jmp 0x4008040	      3131	fold.c	FUNCTION_65	FOR_2
0x400809e	      0x498d7c2410	                   lea rdi, [r12 + 0x10]	      3026	fold.c	FUNCTION_64	CALL_1
0x40080a3	      0xbaffffff7f	                     mov edx, 0x7fffffff	      3026	fold.c	FUNCTION_64	CALL_1
0x40080a8	      0x4c894c2408	                 mov qword [rsp + 8], r9	      3026	fold.c	FUNCTION_64	CALL_1
0x40080ad	      0xe86eb8ffff	             call sym.foldRemove.part.15	      3026	fold.c	FUNCTION_64	CALL_1
0x40080b2	          0x4889ee	                            mov rsi, rbp	      3026	fold.c	FUNCTION_64	CALL_1
0x40080b5	        0x492b3424	                    sub rsi, qword [r12]	      3026	fold.c	FUNCTION_64	CALL_1
0x40080b9	        0x4c8b6b10	            mov r13, qword [rbx + 0x10] 	      3026	fold.c	FUNCTION_64	CALL_1
0x40080bd	          0x486313	                 movsxd rdx, dword [rbx]	      3026	fold.c	FUNCTION_64	CALL_1
0x40080c0	      0x4c8b4c2408	                 mov r9, qword [rsp + 8]	      3026	fold.c	FUNCTION_64	CALL_1
0x40080c5	      0x4989742408	                mov qword [r12 + 8], rsi	      3027	fold.c	FUNCTION_64
0x40080ca	      0xe9e4feffff	                           jmp 0x4007fb3	      3027	fold.c	FUNCTION_64
0x40080cf	        0x498d7101	                       lea rsi, [r9 + 1]	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_6
0x40080d3	          0x4c89fa	                            mov rdx, r15	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_6
0x40080d6	          0x4c89d1	                            mov rcx, r10	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_6
0x40080d9	          0x4829fa	                            sub rdx, rdi	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_6
0x40080dc	          0x48f7d9	                                 neg rcx	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_6
0x40080df	      0x4c89542408	                mov qword [rsp + 8], r10	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_6
0x40080e4	          0x4829fe	                            sub rsi, rdi	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_6
0x40080e7	      0x498d7c2410	                   lea rdi, [r12 + 0x10]	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_6
0x40080ec	      0xe82fb6ffff	call sym.foldMarkAdjustRecurse.constprop.22	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_6
0x40080f1	      0x4c8b542408	                mov r10, qword [rsp + 8]	      3100	fold.c	FUNCTION_65	ELSE_4	IF_7
0x40080f6	      0x4d29542408	                sub qword [r12 + 8], r10	      3100	fold.c	FUNCTION_65	ELSE_4	IF_7
0x40080fb	        0x4d011424	                    add qword [r12], r10	      3101	fold.c	FUNCTION_65	ELSE_4	IF_7
0x40080ff	      0xe93efeffff	                           jmp 0x4007f42	      3102	fold.c	FUNCTION_65	ELSE_4	IF_7
0x4008104	      0x488b742408	                mov rsi, qword [rsp + 8]	      3026	fold.c	FUNCTION_64	CALL_1
0x4008109	          0x4829fe	                            sub rsi, rdi	      3026	fold.c	FUNCTION_64	CALL_1
0x400810c	    0x4881feffffff	                     cmp rsi, 0x7fffffff	      2920	fold.c	FUNCTION_62	IF_1
0x4008113	            0x7f22	                            jg 0x4008137	      2920	fold.c	FUNCTION_62	IF_1
0x4008115	        0x488d7b10	                   lea rdi, [rbx + 0x10]	      2920	fold.c	FUNCTION_62	IF_1
0x4008119	      0xbaffffff7f	                     mov edx, 0x7fffffff	      2920	fold.c	FUNCTION_62	IF_1
0x400811e	      0x4c894c2428	              mov qword [rsp + 0x28], r9	      2920	fold.c	FUNCTION_62	IF_1
0x4008123	      0xe8f8b7ffff	             call sym.foldRemove.part.15	      2920	fold.c	FUNCTION_62	IF_1
0x4008128	      0x4c8b4c2428	              mov r9, qword [rsp + 0x28]	      2920	fold.c	FUNCTION_62	IF_1
0x400812d	          0x488b3b	                    mov rdi, qword [rbx]	      2920	fold.c	FUNCTION_62	IF_1
0x4008130	          0x496311	                  movsxd rdx, dword [r9]	      2920	fold.c	FUNCTION_62	IF_1
0x4008133	        0x498b4110	              mov rax, qword [r9 + 0x10]	      2920	fold.c	FUNCTION_62	IF_1
0x4008137	      0x488b4c2408	                mov rcx, qword [rsp + 8]	      3027	fold.c	FUNCTION_64
0x400813c	          0x4829f9	                            sub rcx, rdi	      3027	fold.c	FUNCTION_64
0x400813f	        0x48894b08	                mov qword [rbx + 8], rcx	      3027	fold.c	FUNCTION_64
0x4008143	      0xe94effffff	                           jmp 0x4008096	      3027	fold.c	FUNCTION_64
0x4008148	      0x488b742410	            mov rsi, qword [rsp + 0x10] 	      3026	fold.c	FUNCTION_64	CALL_1
0x400814d	          0x4829fe	                            sub rsi, rdi	      3026	fold.c	FUNCTION_64	CALL_1
0x4008150	    0x4881feffffff	                     cmp rsi, 0x7fffffff	      2920	fold.c	FUNCTION_62	IF_1
0x4008157	            0x7f22	                            jg 0x400817b	      2920	fold.c	FUNCTION_62	IF_1
0x4008159	        0x488d7b10	                   lea rdi, [rbx + 0x10]	      2920	fold.c	FUNCTION_62	IF_1
0x400815d	      0xbaffffff7f	                     mov edx, 0x7fffffff	      2920	fold.c	FUNCTION_62	IF_1
0x4008162	      0x4c894c2428	              mov qword [rsp + 0x28], r9	      2920	fold.c	FUNCTION_62	IF_1
0x4008167	      0xe8b4b7ffff	             call sym.foldRemove.part.15	      2920	fold.c	FUNCTION_62	IF_1
0x400816c	      0x4c8b4c2428	              mov r9, qword [rsp + 0x28]	      2920	fold.c	FUNCTION_62	IF_1
0x4008171	          0x488b3b	                    mov rdi, qword [rbx]	      2920	fold.c	FUNCTION_62	IF_1
0x4008174	          0x496311	                  movsxd rdx, dword [r9]	      2920	fold.c	FUNCTION_62	IF_1
0x4008177	        0x498b4110	              mov rax, qword [r9 + 0x10]	      2920	fold.c	FUNCTION_62	IF_1
0x400817b	      0x488b4c2410	            mov rcx, qword [rsp + 0x10] 	      3027	fold.c	FUNCTION_64
0x4008180	          0x4829f9	                            sub rcx, rdi	      3027	fold.c	FUNCTION_64
0x4008183	        0x48894b08	                mov qword [rbx + 8], rcx	      3027	fold.c	FUNCTION_64
0x4008187	      0xe9aefeffff	                           jmp 0x400803a	      3027	fold.c	FUNCTION_64
0x400818c	          0x4885ed	                           test rbp, rbp	      3141	fold.c	FUNCTION_65	IF_12
0x400818f	          0x4889d9	                            mov rcx, rbx	      3141	fold.c	FUNCTION_65	IF_12
0x4008192	      0x4c8b642418	            mov r12, qword [rsp + 0x18] 	      3141	fold.c	FUNCTION_65	IF_12
0x4008197	      0x4c8b6c2420	            mov r13, qword [rsp + 0x20] 	      3141	fold.c	FUNCTION_65	IF_12
0x400819c	          0x4c89cb	                             mov rbx, r9	      3141	fold.c	FUNCTION_65	IF_12
0x400819f	     0xf849dfdffff	                            je 0x4007f42	      3141	fold.c	FUNCTION_65	IF_12
0x40081a5	          0x4829c1	                            sub rcx, rax	      3134	fold.c	FUNCTION_65
0x40081a8	          0x4d29ec	                            sub r12, r13	      3109	fold.c	FUNCTION_65
0x40081ab	    0x48baabaaaaaa	          movabs rdx, 0xaaaaaaaaaaaaaaab	      3109	fold.c	FUNCTION_65
0x40081b5	      0x48894c2428	             mov qword [rsp + 0x28], rcx	      3134	fold.c	FUNCTION_65
0x40081ba	        0x48c1f904	                              sar rcx, 4	      3134	fold.c	FUNCTION_65
0x40081be	          0x4c89e6	                            mov rsi, r12	      3109	fold.c	FUNCTION_65
0x40081c1	        0x480fafca	                           imul rcx, rdx	      3134	fold.c	FUNCTION_65
0x40081c5	        0x48c1fe04	                              sar rsi, 4	      3109	fold.c	FUNCTION_65
0x40081c9	      0x4c89642420	             mov qword [rsp + 0x20], r12	      3109	fold.c	FUNCTION_65
0x40081ce	        0x480faff2	                           imul rsi, rdx	      3109	fold.c	FUNCTION_65
0x40081d2	        0x488d51ff	                      lea rdx, [rcx - 1]	      3145	fold.c	FUNCTION_65	CALL_9
0x40081d6	      0x48894c2438	             mov qword [rsp + 0x38], rcx	      3134	fold.c	FUNCTION_65
0x40081db	          0x4889f7	                            mov rdi, rsi	      3109	fold.c	FUNCTION_65
0x40081de	      0x4889742430	             mov qword [rsp + 0x30], rsi	      3109	fold.c	FUNCTION_65
0x40081e3	      0x4889742408	                mov qword [rsp + 8], rsi	      3109	fold.c	FUNCTION_65
0x40081e8	          0x4989d3	                            mov r11, rdx	      3145	fold.c	FUNCTION_65	CALL_9
0x40081eb	      0x4889542440	             mov qword [rsp + 0x40], rdx	      3145	fold.c	FUNCTION_65	CALL_9
0x40081f0	          0x4889d6	                            mov rsi, rdx	      3145	fold.c	FUNCTION_65	CALL_9
0x40081f3	          0x4c39df	                            cmp rdi, r11	      2979	fold.c	FUNCTION_63	FOR_1
0x40081f6	     0xf8dd0000000	                           jge 0x40082cc	      2979	fold.c	FUNCTION_63	FOR_1
0x40081fc	        0x4b8d145b	                  lea rdx, [r11 + r11*2]	      2979	fold.c	FUNCTION_63	FOR_1
0x4008200	          0x4c89e1	                            mov rcx, r12	      2979	fold.c	FUNCTION_63	FOR_1
0x4008203	      0x48896c2448	             mov qword [rsp + 0x48], rbp	      2979	fold.c	FUNCTION_63	FOR_1
0x4008208	      0x4c894c2418	              mov qword [rsp + 0x18], r9	      2979	fold.c	FUNCTION_63	FOR_1
0x400820d	        0x48c1e204	                              shl rdx, 4	      2979	fold.c	FUNCTION_63	FOR_1
0x4008211	          0x4989d0	                             mov r8, rdx	      2979	fold.c	FUNCTION_63	FOR_1
0x4008214	            0xeb13	                           jmp 0x4008229	      2979	fold.c	FUNCTION_63	FOR_1
0x4008216	    0x662e0f1f8400	                 nop word cs:[rax + rax]	      2979	fold.c	FUNCTION_63	FOR_1
0x4008220	      0x488b442418	            mov rax, qword [rsp + 0x18] 	      2979	fold.c	FUNCTION_63	FOR_1
0x4008225	        0x488b4010	            mov rax, qword [rax + 0x10] 	      2979	fold.c	FUNCTION_63	FOR_1
0x4008229	        0x488d1408	                    lea rdx, [rax + rcx]	      2981	fold.c	FUNCTION_63	FOR_1
0x400822d	          0x4c01c0	                             add rax, r8	      2982	fold.c	FUNCTION_63	FOR_1
0x4008230	        0x4883c701	                              add rdi, 1	      2979	fold.c	FUNCTION_63	FOR_1
0x4008234	          0x4c8b08	                     mov r9, qword [rax]	      2984	fold.c	FUNCTION_63	FOR_1
0x4008237	        0x4883ee01	                              sub rsi, 1	      2979	fold.c	FUNCTION_63	FOR_1
0x400823b	        0x4883c130	                           add rcx, 0x30	      2979	fold.c	FUNCTION_63	FOR_1
0x400823f	          0x4c8b3a	                    mov r15, qword [rdx]	      2983	fold.c	FUNCTION_63	FOR_1
0x4008242	        0x4c8b7208	                mov r14, qword [rdx + 8]	      2983	fold.c	FUNCTION_63	FOR_1
0x4008246	        0x4983e830	                            sub r8, 0x30	      2983	fold.c	FUNCTION_63	FOR_1
0x400824a	        0x448b6a10	           mov r13d, dword [rdx + 0x10] 	      2983	fold.c	FUNCTION_63	FOR_1
0x400824e	        0x448b6214	           mov r12d, dword [rdx + 0x14] 	      2983	fold.c	FUNCTION_63	FOR_1
0x4008252	          0x4839f7	                            cmp rdi, rsi	      2979	fold.c	FUNCTION_63	FOR_1
0x4008255	          0x4c890a	                     mov qword [rdx], r9	      2984	fold.c	FUNCTION_63	FOR_1
0x4008258	        0x4c8b4808	                 mov r9, qword [rax + 8]	      2984	fold.c	FUNCTION_63	FOR_1
0x400825c	          0x8b6a18	            mov ebp, dword [rdx + 0x18] 	      2983	fold.c	FUNCTION_63	FOR_1
0x400825f	        0x448b5a1c	           mov r11d, dword [rdx + 0x1c] 	      2983	fold.c	FUNCTION_63	FOR_1
0x4008263	         0xfb65a28	           movzx ebx, byte [rdx + 0x28] 	      2983	fold.c	FUNCTION_63	FOR_1
0x4008267	        0x4c8b5220	            mov r10, qword [rdx + 0x20] 	      2983	fold.c	FUNCTION_63	FOR_1
0x400826b	        0x4c894a08	                 mov qword [rdx + 8], r9	      2984	fold.c	FUNCTION_63	FOR_1
0x400826f	        0x4c8b4810	              mov r9, qword [rax + 0x10]	      2984	fold.c	FUNCTION_63	FOR_1
0x4008273	        0x4c894a10	              mov qword [rdx + 0x10], r9	      2984	fold.c	FUNCTION_63	FOR_1
0x4008277	        0x4c8b4818	              mov r9, qword [rax + 0x18]	      2984	fold.c	FUNCTION_63	FOR_1
0x400827b	        0x885c2410	               mov byte [rsp + 0x10], bl	      2983	fold.c	FUNCTION_63	FOR_1
0x400827f	         0xfb65a29	           movzx ebx, byte [rdx + 0x29] 	      2983	fold.c	FUNCTION_63	FOR_1
0x4008283	        0x4c894a18	              mov qword [rdx + 0x18], r9	      2984	fold.c	FUNCTION_63	FOR_1
0x4008287	        0x4c8b4820	              mov r9, qword [rax + 0x20]	      2984	fold.c	FUNCTION_63	FOR_1
0x400828b	        0x4c894a20	              mov qword [rdx + 0x20], r9	      2984	fold.c	FUNCTION_63	FOR_1
0x400828f	        0x4c8b4828	              mov r9, qword [rax + 0x28]	      2984	fold.c	FUNCTION_63	FOR_1
0x4008293	        0x4c894a28	              mov qword [rdx + 0x28], r9	      2984	fold.c	FUNCTION_63	FOR_1
0x4008297	       0xfb6542410	           movzx edx, byte [rsp + 0x10] 	      2985	fold.c	FUNCTION_63	FOR_1
0x400829c	          0x4c8938	                    mov qword [rax], r15	      2985	fold.c	FUNCTION_63	FOR_1
0x400829f	        0x4c897008	                mov qword [rax + 8], r14	      2985	fold.c	FUNCTION_63	FOR_1
0x40082a3	        0x44896810	            mov dword [rax + 0x10], r13d	      2985	fold.c	FUNCTION_63	FOR_1
0x40082a7	        0x44896014	            mov dword [rax + 0x14], r12d	      2985	fold.c	FUNCTION_63	FOR_1
0x40082ab	          0x896818	             mov dword [rax + 0x18], ebp	      2985	fold.c	FUNCTION_63	FOR_1
0x40082ae	        0x4489581c	            mov dword [rax + 0x1c], r11d	      2985	fold.c	FUNCTION_63	FOR_1
0x40082b2	        0x4c895020	             mov qword [rax + 0x20], r10	      2985	fold.c	FUNCTION_63	FOR_1
0x40082b6	          0x885028	               mov byte [rax + 0x28], dl	      2985	fold.c	FUNCTION_63	FOR_1
0x40082b9	          0x885829	               mov byte [rax + 0x29], bl	      2985	fold.c	FUNCTION_63	FOR_1
0x40082bc	     0xf8c5effffff	                            jl 0x4008220	      2979	fold.c	FUNCTION_63	FOR_1
0x40082c2	      0x488b6c2448	            mov rbp, qword [rsp + 0x48] 	      2979	fold.c	FUNCTION_63	FOR_1
0x40082c7	      0x488b5c2418	            mov rbx, qword [rsp + 0x18] 	      2979	fold.c	FUNCTION_63	FOR_1
0x40082cc	      0x488b442430	            mov rax, qword [rsp + 0x30] 	      3147	fold.c	FUNCTION_65
0x40082d1	          0x4889c1	                            mov rcx, rax	      3147	fold.c	FUNCTION_65
0x40082d4	          0x4829e9	                            sub rcx, rbp	      3147	fold.c	FUNCTION_65
0x40082d7	      0x48034c2438	             add rcx, qword [rsp + 0x38]	      3147	fold.c	FUNCTION_65
0x40082dc	        0x488d71ff	                      lea rsi, [rcx - 1]	      3146	fold.c	FUNCTION_65	CALL_10
0x40082e0	      0x48894c2418	             mov qword [rsp + 0x18], rcx	      3147	fold.c	FUNCTION_65
0x40082e5	          0x4839f0	                            cmp rax, rsi	      2979	fold.c	FUNCTION_63	FOR_1
0x40082e8	     0xf8dc3000000	                           jge 0x40083b1	      2979	fold.c	FUNCTION_63	FOR_1
0x40082ee	      0x488b442418	            mov rax, qword [rsp + 0x18] 	      2979	fold.c	FUNCTION_63	FOR_1
0x40082f3	      0x488b4c2420	            mov rcx, qword [rsp + 0x20] 	      2979	fold.c	FUNCTION_63	FOR_1
0x40082f8	      0x48895c2410	             mov qword [rsp + 0x10], rbx	      2979	fold.c	FUNCTION_63	FOR_1
0x40082fd	        0x4c8d3c40	                  lea r15, [rax + rax*2]	      2979	fold.c	FUNCTION_63	FOR_1
0x4008301	        0x49c1e704	                              shl r15, 4	      2979	fold.c	FUNCTION_63	FOR_1
0x4008305	        0x4983ef30	                           sub r15, 0x30	      2979	fold.c	FUNCTION_63	FOR_1
0x4008309	      0x488b442410	            mov rax, qword [rsp + 0x10] 	      2981	fold.c	FUNCTION_63	FOR_1
0x400830e	        0x4883ee01	                              sub rsi, 1	      2979	fold.c	FUNCTION_63	FOR_1
0x4008312	        0x488b4010	            mov rax, qword [rax + 0x10] 	      2981	fold.c	FUNCTION_63	FOR_1
0x4008316	        0x488d1408	                    lea rdx, [rax + rcx]	      2981	fold.c	FUNCTION_63	FOR_1
0x400831a	          0x4c01f8	                            add rax, r15	      2982	fold.c	FUNCTION_63	FOR_1
0x400831d	        0x4883c130	                           add rcx, 0x30	      2982	fold.c	FUNCTION_63	FOR_1
0x4008321	          0x488b18	                    mov rbx, qword [rax]	      2984	fold.c	FUNCTION_63	FOR_1
0x4008324	        0x4983ef30	                           sub r15, 0x30	      2984	fold.c	FUNCTION_63	FOR_1
0x4008328	          0x4c8b32	                    mov r14, qword [rdx]	      2983	fold.c	FUNCTION_63	FOR_1
0x400832b	        0x4c8b6a08	                mov r13, qword [rdx + 8]	      2983	fold.c	FUNCTION_63	FOR_1
0x400832f	        0x448b6210	           mov r12d, dword [rdx + 0x10] 	      2983	fold.c	FUNCTION_63	FOR_1
0x4008333	          0x8b6a14	            mov ebp, dword [rdx + 0x14] 	      2983	fold.c	FUNCTION_63	FOR_1
0x4008336	          0x48891a	                    mov qword [rdx], rbx	      2984	fold.c	FUNCTION_63	FOR_1
0x4008339	        0x488b5808	                mov rbx, qword [rax + 8]	      2984	fold.c	FUNCTION_63	FOR_1
0x400833d	        0x448b5a18	           mov r11d, dword [rdx + 0x18] 	      2983	fold.c	FUNCTION_63	FOR_1
0x4008341	        0x448b521c	           mov r10d, dword [rdx + 0x1c] 	      2983	fold.c	FUNCTION_63	FOR_1
0x4008345	      0x440fb64228	           movzx r8d, byte [rdx + 0x28] 	      2983	fold.c	FUNCTION_63	FOR_1
0x400834a	         0xfb67a29	           movzx edi, byte [rdx + 0x29] 	      2983	fold.c	FUNCTION_63	FOR_1
0x400834e	        0x48895a08	                mov qword [rdx + 8], rbx	      2984	fold.c	FUNCTION_63	FOR_1
0x4008352	        0x488b5810	            mov rbx, qword [rax + 0x10] 	      2984	fold.c	FUNCTION_63	FOR_1
0x4008356	        0x4c8b4a20	              mov r9, qword [rdx + 0x20]	      2983	fold.c	FUNCTION_63	FOR_1
0x400835a	        0x48895a10	             mov qword [rdx + 0x10], rbx	      2984	fold.c	FUNCTION_63	FOR_1
0x400835e	        0x488b5818	            mov rbx, qword [rax + 0x18] 	      2984	fold.c	FUNCTION_63	FOR_1
0x4008362	        0x48895a18	             mov qword [rdx + 0x18], rbx	      2984	fold.c	FUNCTION_63	FOR_1
0x4008366	        0x488b5820	            mov rbx, qword [rax + 0x20] 	      2984	fold.c	FUNCTION_63	FOR_1
0x400836a	        0x48895a20	             mov qword [rdx + 0x20], rbx	      2984	fold.c	FUNCTION_63	FOR_1
0x400836e	        0x488b5828	            mov rbx, qword [rax + 0x28] 	      2984	fold.c	FUNCTION_63	FOR_1
0x4008372	        0x48895a28	             mov qword [rdx + 0x28], rbx	      2984	fold.c	FUNCTION_63	FOR_1
0x4008376	          0x4c8930	                    mov qword [rax], r14	      2985	fold.c	FUNCTION_63	FOR_1
0x4008379	        0x4c896808	                mov qword [rax + 8], r13	      2985	fold.c	FUNCTION_63	FOR_1
0x400837d	        0x44896010	            mov dword [rax + 0x10], r12d	      2985	fold.c	FUNCTION_63	FOR_1
0x4008381	          0x896814	             mov dword [rax + 0x14], ebp	      2985	fold.c	FUNCTION_63	FOR_1
0x4008384	        0x44895818	            mov dword [rax + 0x18], r11d	      2985	fold.c	FUNCTION_63	FOR_1
0x4008388	        0x4489501c	            mov dword [rax + 0x1c], r10d	      2985	fold.c	FUNCTION_63	FOR_1
0x400838c	        0x4c894820	              mov qword [rax + 0x20], r9	      2985	fold.c	FUNCTION_63	FOR_1
0x4008390	        0x44884028	              mov byte [rax + 0x28], r8b	      2985	fold.c	FUNCTION_63	FOR_1
0x4008394	        0x40887829	              mov byte [rax + 0x29], dil	      2985	fold.c	FUNCTION_63	FOR_1
0x4008398	    0x488344240801	                  add qword [rsp + 8], 1	      2979	fold.c	FUNCTION_63	FOR_1
0x400839e	      0x488b442408	                mov rax, qword [rsp + 8]	      2979	fold.c	FUNCTION_63	FOR_1
0x40083a3	          0x4839f0	                            cmp rax, rsi	      2979	fold.c	FUNCTION_63	FOR_1
0x40083a6	     0xf8c5dffffff	                            jl 0x4008309	      2979	fold.c	FUNCTION_63	FOR_1
0x40083ac	      0x488b5c2410	            mov rbx, qword [rsp + 0x10] 	      2979	fold.c	FUNCTION_63	FOR_1
0x40083b1	      0x488b742440	            mov rsi, qword [rsp + 0x40] 	      3148	fold.c	FUNCTION_65	CALL_11
0x40083b6	      0x488b4c2418	            mov rcx, qword [rsp + 0x18] 	      3148	fold.c	FUNCTION_65	CALL_11
0x40083bb	          0x4839ce	                            cmp rsi, rcx	      2979	fold.c	FUNCTION_63	FOR_1
0x40083be	     0xf8e7efbffff	                           jle 0x4007f42	      2979	fold.c	FUNCTION_63	FOR_1
0x40083c4	      0x4c8b442428	              mov r8, qword [rsp + 0x28]	      2979	fold.c	FUNCTION_63	FOR_1
0x40083c9	        0x488d3c49	                  lea rdi, [rcx + rcx*2]	      2979	fold.c	FUNCTION_63	FOR_1
0x40083cd	      0x48895c2410	             mov qword [rsp + 0x10], rbx	      2979	fold.c	FUNCTION_63	FOR_1
0x40083d2	        0x48c1e704	                              shl rdi, 4	      2979	fold.c	FUNCTION_63	FOR_1
0x40083d6	        0x4983e830	                            sub r8, 0x30	      2979	fold.c	FUNCTION_63	FOR_1
0x40083da	      0x488b442410	            mov rax, qword [rsp + 0x10] 	      2981	fold.c	FUNCTION_63	FOR_1
0x40083df	        0x4883c101	                              add rcx, 1	      2979	fold.c	FUNCTION_63	FOR_1
0x40083e3	        0x4883ee01	                              sub rsi, 1	      2979	fold.c	FUNCTION_63	FOR_1
0x40083e7	        0x488b4010	            mov rax, qword [rax + 0x10] 	      2981	fold.c	FUNCTION_63	FOR_1
0x40083eb	        0x488d1438	                    lea rdx, [rax + rdi]	      2981	fold.c	FUNCTION_63	FOR_1
0x40083ef	          0x4c01c0	                             add rax, r8	      2982	fold.c	FUNCTION_63	FOR_1
0x40083f2	        0x4883c730	                           add rdi, 0x30	      2982	fold.c	FUNCTION_63	FOR_1
0x40083f6	          0x4c8b08	                     mov r9, qword [rax]	      2984	fold.c	FUNCTION_63	FOR_1
0x40083f9	        0x4983e830	                            sub r8, 0x30	      2984	fold.c	FUNCTION_63	FOR_1
0x40083fd	          0x4839f1	                            cmp rcx, rsi	      2979	fold.c	FUNCTION_63	FOR_1
0x4008400	          0x4c8b3a	                    mov r15, qword [rdx]	      2983	fold.c	FUNCTION_63	FOR_1
0x4008403	        0x4c8b7208	                mov r14, qword [rdx + 8]	      2983	fold.c	FUNCTION_63	FOR_1
0x4008407	        0x448b6a10	           mov r13d, dword [rdx + 0x10] 	      2983	fold.c	FUNCTION_63	FOR_1
0x400840b	        0x448b6214	           mov r12d, dword [rdx + 0x14] 	      2983	fold.c	FUNCTION_63	FOR_1
0x400840f	          0x4c890a	                     mov qword [rdx], r9	      2984	fold.c	FUNCTION_63	FOR_1
0x4008412	        0x4c8b4808	                 mov r9, qword [rax + 8]	      2984	fold.c	FUNCTION_63	FOR_1
0x4008416	          0x8b6a18	            mov ebp, dword [rdx + 0x18] 	      2983	fold.c	FUNCTION_63	FOR_1
0x4008419	        0x448b5a1c	           mov r11d, dword [rdx + 0x1c] 	      2983	fold.c	FUNCTION_63	FOR_1
0x400841d	         0xfb65a28	           movzx ebx, byte [rdx + 0x28] 	      2983	fold.c	FUNCTION_63	FOR_1
0x4008421	        0x4c8b5220	            mov r10, qword [rdx + 0x20] 	      2983	fold.c	FUNCTION_63	FOR_1
0x4008425	        0x4c894a08	                 mov qword [rdx + 8], r9	      2984	fold.c	FUNCTION_63	FOR_1
0x4008429	        0x4c8b4810	              mov r9, qword [rax + 0x10]	      2984	fold.c	FUNCTION_63	FOR_1
0x400842d	        0x4c894a10	              mov qword [rdx + 0x10], r9	      2984	fold.c	FUNCTION_63	FOR_1
0x4008431	        0x4c8b4818	              mov r9, qword [rax + 0x18]	      2984	fold.c	FUNCTION_63	FOR_1
0x4008435	        0x885c2408	                  mov byte [rsp + 8], bl	      2983	fold.c	FUNCTION_63	FOR_1
0x4008439	         0xfb65a29	           movzx ebx, byte [rdx + 0x29] 	      2983	fold.c	FUNCTION_63	FOR_1
0x400843d	        0x4c894a18	              mov qword [rdx + 0x18], r9	      2984	fold.c	FUNCTION_63	FOR_1
0x4008441	        0x4c8b4820	              mov r9, qword [rax + 0x20]	      2984	fold.c	FUNCTION_63	FOR_1
0x4008445	        0x4c894a20	              mov qword [rdx + 0x20], r9	      2984	fold.c	FUNCTION_63	FOR_1
0x4008449	        0x4c8b4828	              mov r9, qword [rax + 0x28]	      2984	fold.c	FUNCTION_63	FOR_1
0x400844d	        0x4c894a28	              mov qword [rdx + 0x28], r9	      2984	fold.c	FUNCTION_63	FOR_1
0x4008451	       0xfb6542408	               movzx edx, byte [rsp + 8]	      2985	fold.c	FUNCTION_63	FOR_1
0x4008456	          0x4c8938	                    mov qword [rax], r15	      2985	fold.c	FUNCTION_63	FOR_1
0x4008459	        0x4c897008	                mov qword [rax + 8], r14	      2985	fold.c	FUNCTION_63	FOR_1
0x400845d	        0x44896810	            mov dword [rax + 0x10], r13d	      2985	fold.c	FUNCTION_63	FOR_1
0x4008461	        0x44896014	            mov dword [rax + 0x14], r12d	      2985	fold.c	FUNCTION_63	FOR_1
0x4008465	          0x896818	             mov dword [rax + 0x18], ebp	      2985	fold.c	FUNCTION_63	FOR_1
0x4008468	        0x4489581c	            mov dword [rax + 0x1c], r11d	      2985	fold.c	FUNCTION_63	FOR_1
0x400846c	        0x4c895020	             mov qword [rax + 0x20], r10	      2985	fold.c	FUNCTION_63	FOR_1
0x4008470	          0x885028	               mov byte [rax + 0x28], dl	      2985	fold.c	FUNCTION_63	FOR_1
0x4008473	          0x885829	               mov byte [rax + 0x29], bl	      2985	fold.c	FUNCTION_63	FOR_1
0x4008476	     0xf8c5effffff	                            jl 0x40083da	      2979	fold.c	FUNCTION_63	FOR_1
0x400847c	      0xe9c1faffff	                           jmp 0x4007f42	      2979	fold.c	FUNCTION_63	FOR_1
0x4008481	          0x4939ff	                            cmp r15, rdi	      3087	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6
0x4008484	     0xf8cb8faffff	                            jl 0x4007f42	      3087	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6
0x400848a	        0x4983c701	                              add r15, 1	      3025	fold.c	FUNCTION_64
0x400848e	          0x4c89fe	                            mov rsi, r15	      3026	fold.c	FUNCTION_64	CALL_1
0x4008491	          0x4829fe	                            sub rsi, rdi	      3026	fold.c	FUNCTION_64	CALL_1
0x4008494	    0x4881feffffff	                     cmp rsi, 0x7fffffff	      2920	fold.c	FUNCTION_62	IF_1
0x400849b	            0x7e11	                           jle 0x40084ae	      2920	fold.c	FUNCTION_62	IF_1
0x400849d	          0x4c29f7	                            sub rdi, r14	      3091	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6
0x40084a0	      0x4989742408	                mov qword [r12 + 8], rsi	      3027	fold.c	FUNCTION_64
0x40084a5	        0x49893c24	                    mov qword [r12], rdi	      3091	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6
0x40084a9	      0xe994faffff	                           jmp 0x4007f42	      3091	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6
0x40084ae	      0x498d7c2410	                   lea rdi, [r12 + 0x10]	      3026	fold.c	FUNCTION_64	CALL_1
0x40084b3	      0xbaffffff7f	                     mov edx, 0x7fffffff	      3026	fold.c	FUNCTION_64	CALL_1
0x40084b8	      0xe863b4ffff	             call sym.foldRemove.part.15	      3026	fold.c	FUNCTION_64	CALL_1
0x40084bd	        0x498b3c24	                    mov rdi, qword [r12]	      3026	fold.c	FUNCTION_64	CALL_1
0x40084c1	          0x4c89fe	                            mov rsi, r15	      3026	fold.c	FUNCTION_64	CALL_1
0x40084c4	          0x4829fe	                            sub rsi, rdi	      3026	fold.c	FUNCTION_64	CALL_1
0x40084c7	            0xebd4	                           jmp 0x400849d	      3026	fold.c	FUNCTION_64	CALL_1
foldDelMarker	WHILE,0:functions,0:ELSE,0:DO,0:FOR,1:SWITCH,0:IF,6:CALL,14	114
0x40002e0	            0x4157	                                push r15	      1822	fold.c	FUNCTION_55
0x40002e2	            0x4156	                                push r14	      1822	fold.c	FUNCTION_55
0x40002e4	          0x4989fe	                            mov r14, rdi	      1822	fold.c	FUNCTION_55
0x40002e7	            0x4155	                                push r13	      1822	fold.c	FUNCTION_55
0x40002e9	            0x4154	                                push r12	      1822	fold.c	FUNCTION_55
0x40002eb	              0x55	                                push rbp	      1822	fold.c	FUNCTION_55
0x40002ec	              0x53	                                push rbx	      1822	fold.c	FUNCTION_55
0x40002ed	          0x4889f5	                            mov rbp, rsi	      1822	fold.c	FUNCTION_55
0x40002f0	          0x4863da	                         movsxd rbx, edx	      1822	fold.c	FUNCTION_55
0x40002f3	        0x4883ec18	                           sub rsp, 0x18	      1822	fold.c	FUNCTION_55
0x40002f7	    0x488b05000000	            mov rax, qword [0x040002fe] 	      1827	fold.c	FUNCTION_55
0x40002fe	    0x488b80501400	          mov rax, qword [rax + 0x1450] 	      1827	fold.c	FUNCTION_55
0x4000305	      0x4889442408	                mov qword [rsp + 8], rax	      1827	fold.c	FUNCTION_55
0x400030a	      0xe800000000	                          call 0x400030f	      1830	fold.c	FUNCTION_55	CALL_1
0x400030f	          0x803800	                       cmp byte [rax], 0	      1831	fold.c	FUNCTION_55	FOR_1
0x4000312	     0xf84d4000000	                            je 0x40003ec	      1831	fold.c	FUNCTION_55	FOR_1
0x4000318	          0x4989dc	                            mov r12, rbx	      1831	fold.c	FUNCTION_55	FOR_1
0x400031b	          0x4989c5	                            mov r13, rax	      1831	fold.c	FUNCTION_55	FOR_1
0x400031e	          0x4989c7	                            mov r15, rax	      1831	fold.c	FUNCTION_55	FOR_1
0x4000321	            0xeb13	                           jmp 0x4000336	      1831	fold.c	FUNCTION_55	FOR_1
0x4000323	       0xf1f440000	                   nop dword [rax + rax]	      1831	fold.c	FUNCTION_55	FOR_1
0x4000328	        0x4983c701	                              add r15, 1	      1831	fold.c	FUNCTION_55	FOR_1
0x400032c	        0x41803f00	                       cmp byte [r15], 0	      1831	fold.c	FUNCTION_55	FOR_1
0x4000330	     0xf84b6000000	                            je 0x40003ec	      1831	fold.c	FUNCTION_55	FOR_1
0x4000336	          0x4889da	                            mov rdx, rbx	      1832	fold.c	FUNCTION_55	FOR_1	IF_1	CALL_2
0x4000339	          0x4889ee	                            mov rsi, rbp	      1832	fold.c	FUNCTION_55	FOR_1	IF_1	CALL_2
0x400033c	          0x4c89ff	                            mov rdi, r15	      1832	fold.c	FUNCTION_55	FOR_1	IF_1	CALL_2
0x400033f	      0xe800000000	                          call 0x4000344	      1832	fold.c	FUNCTION_55	FOR_1	IF_1	CALL_2
0x4000344	            0x85c0	                           test eax, eax	      1832	fold.c	FUNCTION_55	FOR_1	IF_1	CALL_2
0x4000346	            0x75e0	                           jne 0x4000328	      1832	fold.c	FUNCTION_55	FOR_1	IF_1	CALL_2
0x4000348	      0x410fb6041f	             movzx eax, byte [r15 + rbx]	      1836	fold.c	FUNCTION_55	FOR_1	IF_1	IF_2	CALL_3
0x400034d	      0x488b5c2408	                mov rbx, qword [rsp + 8]	      1838	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3
0x4000352	          0x83e830	                           sub eax, 0x30	      1836	fold.c	FUNCTION_55	FOR_1	IF_1	IF_2	CALL_3
0x4000355	          0x83f80a	                            cmp eax, 0xa	      1837	fold.c	FUNCTION_55	FOR_1	IF_1	IF_2
0x4000358	        0x4183d400	                             adc r12d, 0	      1837	fold.c	FUNCTION_55	FOR_1	IF_1	IF_2
0x400035c	          0x803b00	                       cmp byte [rbx], 0	      1838	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3
0x400035f	            0x7477	                            je 0x40003d8	      1838	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3
0x4000361	      0xbe00000000	                              mov esi, 0	      1841	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	CALL_4
0x4000366	          0x4889df	                            mov rdi, rbx	      1841	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	CALL_4
0x4000369	      0xe800000000	                          call 0x400036e	      1841	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	CALL_4
0x400036e	          0x4889c2	                            mov rdx, rax	      1842	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x4000371	          0x4889c5	                            mov rbp, rax	      1841	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	CALL_4
0x4000374	          0x4c89f8	                            mov rax, r15	      1842	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x4000377	          0x4829da	                            sub rdx, rbx	      1842	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x400037a	          0x4c29e8	                            sub rax, r13	      1842	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x400037d	          0x4889d9	                            mov rcx, rbx	      1842	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x4000380	          0x4839d0	                            cmp rax, rdx	      1842	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x4000383	            0x7c53	                            jl 0x40003d8	      1842	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x4000385	          0x4c89fb	                            mov rbx, r15	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x4000388	          0x4889ce	                            mov rsi, rcx	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x400038b	      0x48894c2408	                mov qword [rsp + 8], rcx	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x4000390	          0x4829d3	                            sub rbx, rdx	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x4000393	          0x4889df	                            mov rdi, rbx	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x4000396	      0xe800000000	                          call 0x400039b	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x400039b	            0x85c0	                           test eax, eax	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x400039d	            0x7539	                           jne 0x40003d8	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x400039f	        0x4883c502	                              add rbp, 2	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x40003a3	          0x4889ef	                            mov rdi, rbp	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x40003a6	      0xe800000000	                          call 0x40003ab	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x40003ab	          0x4963fc	                        movsxd rdi, r12d	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x40003ae	          0x4889c2	                            mov rdx, rax	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x40003b1	          0x4889ee	                            mov rsi, rbp	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x40003b4	          0x4c01ff	                            add rdi, r15	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x40003b7	      0xe800000000	                          call 0x40003bc	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x40003bc	            0x85c0	                           test eax, eax	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x40003be	            0x7518	                           jne 0x40003d8	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x40003c0	      0x488b7c2408	                mov rdi, qword [rsp + 8]	      1847	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_8
0x40003c5	          0x4989df	                            mov r15, rbx	      1847	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_8
0x40003c8	      0xe800000000	                          call 0x40003cd	      1847	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_8
0x40003cd	      0x458d6404fe	               lea r12d, [r12 + rax - 2]	      1847	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_8
0x40003d2	    0x660f1f440000	                    nop word [rax + rax]	      1847	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_8
0x40003d8	        0x498d7601	                      lea rsi, [r14 + 1]	      1850	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_9
0x40003dc	        0x498d7eff	                      lea rdi, [r14 - 1]	      1850	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_9
0x40003e0	      0xe800000000	                          call 0x40003e5	      1850	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_9
0x40003e5	          0x83f801	                              cmp eax, 1	      1850	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_9
0x40003e8	            0x89c3	                            mov ebx, eax	      1850	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_9
0x40003ea	            0x740f	                            je 0x40003fb	      1850	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_9
0x40003ec	        0x4883c418	                           add rsp, 0x18	      1863	fold.c	FUNCTION_55
0x40003f0	              0x5b	                                 pop rbx	      1863	fold.c	FUNCTION_55
0x40003f1	              0x5d	                                 pop rbp	      1863	fold.c	FUNCTION_55
0x40003f2	            0x415c	                                 pop r12	      1863	fold.c	FUNCTION_55
0x40003f4	            0x415d	                                 pop r13	      1863	fold.c	FUNCTION_55
0x40003f6	            0x415e	                                 pop r14	      1863	fold.c	FUNCTION_55
0x40003f8	            0x415f	                                 pop r15	      1863	fold.c	FUNCTION_55
0x40003fa	              0xc3	                                     ret	      1863	fold.c	FUNCTION_55
0x40003fb	          0x4429e3	                           sub ebx, r12d	      1853	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_11
0x40003fe	          0x4c89ef	                            mov rdi, r13	      1853	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_11
0x4000401	      0xe800000000	                          call 0x4000406	      1853	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_11
0x4000406	          0x8d3c03	                    lea edi, [rbx + rax]	      1853	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_11
0x4000409	      0xe800000000	                          call 0x400040e	      1853	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_11
0x400040e	          0x4885c0	                           test rax, rax	      1854	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6
0x4000411	          0x4889c3	                            mov rbx, rax	      1853	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_11
0x4000414	            0x74d6	                            je 0x40003ec	      1854	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6
0x4000416	          0x4c89fd	                            mov rbp, r15	      1856	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_12
0x4000419	          0x4c89ee	                            mov rsi, r13	       126	string3.h	FUNCTION_85	CALL_3
0x400041c	          0x4889c7	                            mov rdi, rax	       126	string3.h	FUNCTION_85	CALL_3
0x400041f	          0x4c29ed	                            sub rbp, r13	      1856	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_12
0x4000422	          0x4889ea	                            mov rdx, rbp	       126	string3.h	FUNCTION_85	CALL_3
0x4000425	      0xe800000000	                          call 0x400042a	       126	string3.h	FUNCTION_85	CALL_3
0x400042a	        0x488d3c2b	                    lea rdi, [rbx + rbp]	       110	string3.h	FUNCTION_83	CALL_3
0x400042e	          0x4963f4	                        movsxd rsi, r12d	       110	string3.h	FUNCTION_83	CALL_3
0x4000431	          0x4c01fe	                            add rsi, r15	       110	string3.h	FUNCTION_83	CALL_3
0x4000434	      0xe800000000	                          call 0x4000439	       110	string3.h	FUNCTION_83	CALL_3
0x4000439	        0x4883c418	                           add rsp, 0x18	      1863	fold.c	FUNCTION_55
0x400043d	          0x4889de	                            mov rsi, rbx	      1858	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_14
0x4000440	          0x4c89f7	                            mov rdi, r14	      1858	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_14
0x4000443	              0x5b	                                 pop rbx	      1863	fold.c	FUNCTION_55
0x4000444	              0x5d	                                 pop rbp	      1863	fold.c	FUNCTION_55
0x4000445	            0x415c	                                 pop r12	      1863	fold.c	FUNCTION_55
0x4000447	            0x415d	                                 pop r13	      1863	fold.c	FUNCTION_55
0x4000449	            0x415e	                                 pop r14	      1863	fold.c	FUNCTION_55
0x400044b	            0x415f	                                 pop r15	      1863	fold.c	FUNCTION_55
0x400044d	            0x31d2	                            xor edx, edx	      1858	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_14
0x400044f	      0xe900000000	                           jmp 0x4000454	      1858	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_14
foldManualAllowed	WHILE,0:functions,0:ELSE,1:DO,0:FOR,0:SWITCH,0:IF,2:CALL,6	22
0x4002cc0	    0x488b05000000	            mov rax, qword [0x04002cc7] 	       307	fold.c	FUNCTION_8
0x4002cc7	    0x488b80f80100	           mov rax, qword [rax + 0x1f8] 	       307	fold.c	FUNCTION_8
0x4002cce	        0x80780375	                cmp byte [rax + 3], 0x75	       560	fold.c	FUNCTION_24	IF_1	CALL_2
0x4002cd2	            0x743c	                            je 0x4002d10	       560	fold.c	FUNCTION_24	IF_1	CALL_2
0x4002cd4	        0x80780272	                cmp byte [rax + 2], 0x72	       560	fold.c	FUNCTION_24	IF_1	CALL_2
0x4002cd8	            0x7436	                            je 0x4002d10	       560	fold.c	FUNCTION_24	IF_1	CALL_2
0x4002cda	        0x4883ec08	                              sub rsp, 8	       559	fold.c	FUNCTION_24
0x4002cde	            0x85ff	                           test edi, edi	       562	fold.c	FUNCTION_24	IF_2
0x4002ce0	      0xba05000000	                              mov edx, 5	       563	fold.c	FUNCTION_24	CALL_4
0x4002ce5	      0xbe00000000	                              mov esi, 0	       563	fold.c	FUNCTION_24	CALL_4
0x4002cea	            0x7505	                           jne 0x4002cf1	       562	fold.c	FUNCTION_24	IF_2
0x4002cec	      0xbe00000000	                              mov esi, 0	       565	fold.c	FUNCTION_24	CALL_6
0x4002cf1	            0x31ff	                            xor edi, edi	       565	fold.c	FUNCTION_24	CALL_6
0x4002cf3	      0xe800000000	                          call 0x4002cf8	       565	fold.c	FUNCTION_24	CALL_6
0x4002cf8	          0x4889c7	                            mov rdi, rax	       565	fold.c	FUNCTION_24	CALL_6
0x4002cfb	      0xe800000000	                          call 0x4002d00	       565	fold.c	FUNCTION_24	CALL_6
0x4002d00	            0x31c0	                            xor eax, eax	       566	fold.c	FUNCTION_24
0x4002d02	        0x4883c408	                              add rsp, 8	       567	fold.c	FUNCTION_24
0x4002d06	              0xc3	                                     ret	       567	fold.c	FUNCTION_24
0x4002d07	    0x660f1f840000	                    nop word [rax + rax]	       567	fold.c	FUNCTION_24
0x4002d10	      0xb801000000	                              mov eax, 1	       561	fold.c	FUNCTION_24	IF_1
0x4002d15	              0xc3	                                     ret	       561	fold.c	FUNCTION_24	IF_1
getDeepestNesting	WHILE,0:functions,0:ELSE,0:DO,0:FOR,0:SWITCH,0:IF,0:CALL,2	43
0x4007650	              0x53	                                push rbx	      1611	fold.c	FUNCTION_47
0x4007651	    0x488b1d000000	            mov rbx, qword [0x04007658] 	      1612	fold.c	FUNCTION_47	CALL_1
0x4007658	    0x80bb21010000	               cmp byte [rbx + 0x121], 0	      1187	fold.c	FUNCTION_38	IF_1
0x400765f	            0x7557	                           jne 0x40076b8	      1187	fold.c	FUNCTION_38	IF_1
0x4007661	    0x8b8308010000	           mov eax, dword [rbx + 0x108] 	      1625	fold.c	FUNCTION_48	FOR_1
0x4007667	    0x488b93180100	           mov rdx, qword [rbx + 0x118] 	      1625	fold.c	FUNCTION_48	FOR_1
0x400766e	            0x85c0	                           test eax, eax	      1625	fold.c	FUNCTION_48	FOR_1
0x4007670	            0x7e5f	                           jle 0x40076d1	      1625	fold.c	FUNCTION_48	FOR_1
0x4007672	          0x83e801	                              sub eax, 1	      1625	fold.c	FUNCTION_48	FOR_1
0x4007675	        0x4c8d4210	                    lea r8, [rdx + 0x10]	      1625	fold.c	FUNCTION_48	FOR_1
0x4007679	          0x4531c9	                            xor r9d, r9d	      1625	fold.c	FUNCTION_48	FOR_1
0x400767c	        0x488d0440	                  lea rax, [rax + rax*2]	      1625	fold.c	FUNCTION_48	FOR_1
0x4007680	        0x48c1e004	                              shl rax, 4	      1625	fold.c	FUNCTION_48	FOR_1
0x4007684	      0x4c8d540240	            lea r10, [rdx + rax + 0x40] 	      1625	fold.c	FUNCTION_48	FOR_1
0x4007689	     0xf1f80000000	                         nop dword [rax]	      1625	fold.c	FUNCTION_48	FOR_1
0x4007690	        0x498b7010	              mov rsi, qword [r8 + 0x10]	      1627	fold.c	FUNCTION_48	FOR_1	CALL_1
0x4007694	          0x4c89c7	                             mov rdi, r8	      1627	fold.c	FUNCTION_48	FOR_1	CALL_1
0x4007697	      0xe89497ffff	call sym.getDeepestNestingRecurse.isra.3	      1627	fold.c	FUNCTION_48	FOR_1	CALL_1
0x400769c	          0x83c001	                              add eax, 1	      1627	fold.c	FUNCTION_48	FOR_1	CALL_1
0x400769f	          0x4139c1	                            cmp r9d, eax	      1627	fold.c	FUNCTION_48	FOR_1	CALL_1
0x40076a2	        0x440f4cc8	                          cmovl r9d, eax	      1627	fold.c	FUNCTION_48	FOR_1	CALL_1
0x40076a6	        0x4983c030	                            add r8, 0x30	      1627	fold.c	FUNCTION_48	FOR_1	CALL_1
0x40076aa	          0x4d39c2	                             cmp r10, r8	      1625	fold.c	FUNCTION_48	FOR_1
0x40076ad	            0x75e1	                           jne 0x4007690	      1625	fold.c	FUNCTION_48	FOR_1
0x40076af	          0x4489c8	                            mov eax, r9d	      1614	fold.c	FUNCTION_47
0x40076b2	              0x5b	                                 pop rbx	      1614	fold.c	FUNCTION_47
0x40076b3	              0xc3	                                     ret	      1614	fold.c	FUNCTION_47
0x40076b4	         0xf1f4000	                         nop dword [rax]	      1614	fold.c	FUNCTION_47
0x40076b8	    0x8b1500000000	            mov edx, dword [0x040076be] 	       813	fold.c	FUNCTION_28	IF_1
0x40076be	          0x4889d8	                            mov rax, rbx	       813	fold.c	FUNCTION_28	IF_1
0x40076c1	            0x85d2	                           test edx, edx	       813	fold.c	FUNCTION_28	IF_1
0x40076c3	            0x7e11	                           jle 0x40076d6	       813	fold.c	FUNCTION_28	IF_1
0x40076c5	    0xc68321010000	               mov byte [rbx + 0x121], 0	      1190	fold.c	FUNCTION_38	IF_1
0x40076cc	          0x4889c3	                            mov rbx, rax	      1190	fold.c	FUNCTION_38	IF_1
0x40076cf	            0xeb90	                           jmp 0x4007661	      1190	fold.c	FUNCTION_38	IF_1
0x40076d1	          0x4531c9	                            xor r9d, r9d	      1621	fold.c	FUNCTION_48
0x40076d4	            0xebd9	                           jmp 0x40076af	      1621	fold.c	FUNCTION_48
0x40076d6	      0xbaffffff7f	                     mov edx, 0x7fffffff	      1621	fold.c	FUNCTION_48
0x40076db	      0xbe01000000	                              mov esi, 1	      1621	fold.c	FUNCTION_48
0x40076e0	          0x4889df	                            mov rdi, rbx	      1621	fold.c	FUNCTION_48
0x40076e3	      0xe858d1ffff	             call sym.foldUpdate.part.16	      1621	fold.c	FUNCTION_48
0x40076e8	    0x488b05000000	            mov rax, qword [0x040076ef] 	      1621	fold.c	FUNCTION_48
0x40076ef	            0xebd4	                           jmp 0x40076c5	      1621	fold.c	FUNCTION_48
