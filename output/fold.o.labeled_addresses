put_folds	SWITCH,0:ELSE,0:DO,0:FOR,0:WHILE,0:IF,3:functions,0:CALL,4	42
0x6529	              0x55	                                push rbp	      3493	fold.c	FUNCTION_73
0x652a	          0x4889e5	                            mov rbp, rsp	      3493	fold.c	FUNCTION_73
0x652d	        0x4883ec10	                           sub rsp, 0x10	      3493	fold.c	FUNCTION_73
0x6531	        0x48897df8	                mov qword [rbp - 8], rdi	      3493	fold.c	FUNCTION_73
0x6535	        0x488975f0	             mov qword [rbp - 0x10], rsi	      3493	fold.c	FUNCTION_73
0x6539	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3494	fold.c	FUNCTION_73	IF_1	CALL_1
0x653d	          0x4889c7	                            mov rdi, rax	      3494	fold.c	FUNCTION_73	IF_1	CALL_1
0x6540	      0xe800000000	                          call 0x4006585	      3494	fold.c	FUNCTION_73	IF_1	CALL_1
0x6545	            0x85c0	                           test eax, eax	      3494	fold.c	FUNCTION_73	IF_1	CALL_1
0x6547	            0x743f	                            je 0x40065c8	      3494	fold.c	FUNCTION_73	IF_1	CALL_1
0x6549	        0x488b45f8	                mov rax, qword [rbp - 8]	      3496	fold.c	FUNCTION_73	IF_1	IF_2	CALL_2
0x654d	      0xbe00000000	                              mov esi, 0	      3496	fold.c	FUNCTION_73	IF_1	IF_2	CALL_2
0x6552	          0x4889c7	                            mov rdi, rax	      3496	fold.c	FUNCTION_73	IF_1	IF_2	CALL_2
0x6555	      0xe800000000	                          call 0x400659a	      3496	fold.c	FUNCTION_73	IF_1	IF_2	CALL_2
0x655a	            0x85c0	                           test eax, eax	      3496	fold.c	FUNCTION_73	IF_1	IF_2	CALL_2
0x655c	            0x7423	                            je 0x40065c1	      3496	fold.c	FUNCTION_73	IF_1	IF_2	CALL_2
0x655e	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3497	fold.c	FUNCTION_73	IF_1	IF_2	CALL_3
0x6562	    0x488d88080100	                  lea rcx, [rax + 0x108]	      3497	fold.c	FUNCTION_73	IF_1	IF_2	CALL_3
0x6569	        0x488b45f8	                mov rax, qword [rbp - 8]	      3497	fold.c	FUNCTION_73	IF_1	IF_2	CALL_3
0x656d	      0xba00000000	                              mov edx, 0	      3497	fold.c	FUNCTION_73	IF_1	IF_2	CALL_3
0x6572	          0x4889ce	                            mov rsi, rcx	      3497	fold.c	FUNCTION_73	IF_1	IF_2	CALL_3
0x6575	          0x4889c7	                            mov rdi, rax	      3497	fold.c	FUNCTION_73	IF_1	IF_2	CALL_3
0x6578	      0xe843000000	              call sym.put_folds_recurse	      3497	fold.c	FUNCTION_73	IF_1	IF_2	CALL_3
0x657d	            0x85c0	                           test eax, eax	      3497	fold.c	FUNCTION_73	IF_1	IF_2	CALL_3
0x657f	            0x7507	                           jne 0x40065c8	      3497	fold.c	FUNCTION_73	IF_1	IF_2	CALL_3
0x6581	      0xb800000000	                              mov eax, 0	      3498	fold.c	FUNCTION_73	IF_1	IF_2
0x6586	            0xeb36	                           jmp 0x40065fe	      3498	fold.c	FUNCTION_73	IF_1	IF_2
0x6588	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3502	fold.c	FUNCTION_73	IF_3
0x658c	     0xfb680200100	          movzx eax, byte [rax + 0x120] 	      3502	fold.c	FUNCTION_73	IF_3
0x6593	            0x84c0	                             test al, al	      3502	fold.c	FUNCTION_73	IF_3
0x6595	            0x7422	                            je 0x40065f9	      3502	fold.c	FUNCTION_73	IF_3
0x6597	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3503	fold.c	FUNCTION_73	CALL_4
0x659b	    0x488d90080100	                  lea rdx, [rax + 0x108]	      3503	fold.c	FUNCTION_73	CALL_4
0x65a2	        0x488b75f0	             mov rsi, qword [rbp - 0x10]	      3503	fold.c	FUNCTION_73	CALL_4
0x65a6	        0x488b45f8	                mov rax, qword [rbp - 8]	      3503	fold.c	FUNCTION_73	CALL_4
0x65aa	      0xb900000000	                              mov ecx, 0	      3503	fold.c	FUNCTION_73	CALL_4
0x65af	          0x4889c7	                            mov rdi, rax	      3503	fold.c	FUNCTION_73	CALL_4
0x65b2	      0xe8e0000000	           call sym.put_foldopen_recurse	      3503	fold.c	FUNCTION_73	CALL_4
0x65b7	            0xeb05	                           jmp 0x40065fe	      3503	fold.c	FUNCTION_73	CALL_4
0x65b9	      0xb801000000	                              mov eax, 1	      3505	fold.c	FUNCTION_73
0x65be	              0xc9	                                   leave	      3506	fold.c	FUNCTION_73
0x65bf	              0xc3	                                     ret	      3506	fold.c	FUNCTION_73
cloneFoldGrowArray	SWITCH,0:ELSE,0:DO,0:FOR,1:WHILE,0:IF,1:functions,0:CALL,3	72
0x1aaa	              0x55	                                push rbp	      1086	fold.c	FUNCTION_35
0x1aab	          0x4889e5	                            mov rbp, rsp	      1086	fold.c	FUNCTION_35
0x1aae	        0x4883ec30	                           sub rsp, 0x30	      1086	fold.c	FUNCTION_35
0x1ab2	        0x48897dd8	             mov qword [rbp - 0x28], rdi	      1086	fold.c	FUNCTION_35
0x1ab6	        0x488975d0	             mov qword [rbp - 0x30], rsi	      1086	fold.c	FUNCTION_35
0x1aba	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1091	fold.c	FUNCTION_35	CALL_1
0x1abe	          0x8b500c	              mov edx, dword [rax + 0xc]	      1091	fold.c	FUNCTION_35	CALL_1
0x1ac1	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1091	fold.c	FUNCTION_35	CALL_1
0x1ac5	          0x8b4808	                mov ecx, dword [rax + 8]	      1091	fold.c	FUNCTION_35	CALL_1
0x1ac8	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1091	fold.c	FUNCTION_35	CALL_1
0x1acc	            0x89ce	                            mov esi, ecx	      1091	fold.c	FUNCTION_35	CALL_1
0x1ace	          0x4889c7	                            mov rdi, rax	      1091	fold.c	FUNCTION_35	CALL_1
0x1ad1	      0xe800000000	                          call 0x4001b16	      1091	fold.c	FUNCTION_35	CALL_1
0x1ad6	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1092	fold.c	FUNCTION_35	IF_1	CALL_2
0x1ada	            0x8b00	                    mov eax, dword [rax]	      1092	fold.c	FUNCTION_35	IF_1	CALL_2
0x1adc	            0x85c0	                           test eax, eax	      1092	fold.c	FUNCTION_35	IF_1	CALL_2
0x1ade	     0xf84be000000	                            je 0x4001be2	      1092	fold.c	FUNCTION_35	IF_1	CALL_2
0x1ae4	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1092	fold.c	FUNCTION_35	IF_1	CALL_2
0x1ae8	            0x8b10	                    mov edx, dword [rax]	      1092	fold.c	FUNCTION_35	IF_1	CALL_2
0x1aea	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1092	fold.c	FUNCTION_35	IF_1	CALL_2
0x1aee	            0x89d6	                            mov esi, edx	      1092	fold.c	FUNCTION_35	IF_1	CALL_2
0x1af0	          0x4889c7	                            mov rdi, rax	      1092	fold.c	FUNCTION_35	IF_1	CALL_2
0x1af3	      0xe800000000	                          call 0x4001b38	      1092	fold.c	FUNCTION_35	IF_1	CALL_2
0x1af8	            0x85c0	                           test eax, eax	      1092	fold.c	FUNCTION_35	IF_1	CALL_2
0x1afa	     0xf84a2000000	                            je 0x4001be2	      1092	fold.c	FUNCTION_35	IF_1	CALL_2
0x1b00	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1095	fold.c	FUNCTION_35
0x1b04	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1095	fold.c	FUNCTION_35
0x1b08	        0x488945f0	             mov qword [rbp - 0x10], rax	      1095	fold.c	FUNCTION_35
0x1b0c	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1096	fold.c	FUNCTION_35
0x1b10	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1096	fold.c	FUNCTION_35
0x1b14	        0x488945f8	                mov qword [rbp - 8], rax	      1096	fold.c	FUNCTION_35
0x1b18	    0xc745ec000000	               mov dword [rbp - 0x14], 0	      1098	fold.c	FUNCTION_35	FOR_1
0x1b1f	            0xeb74	                           jmp 0x4001bd5	      1098	fold.c	FUNCTION_35	FOR_1
0x1b21	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1100	fold.c	FUNCTION_35	FOR_1
0x1b25	          0x488b10	                    mov rdx, qword [rax]	      1100	fold.c	FUNCTION_35	FOR_1
0x1b28	        0x488b45f8	                mov rax, qword [rbp - 8]	      1100	fold.c	FUNCTION_35	FOR_1
0x1b2c	          0x488910	                    mov qword [rax], rdx	      1100	fold.c	FUNCTION_35	FOR_1
0x1b2f	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1101	fold.c	FUNCTION_35	FOR_1
0x1b33	        0x488b5008	                mov rdx, qword [rax + 8]	      1101	fold.c	FUNCTION_35	FOR_1
0x1b37	        0x488b45f8	                mov rax, qword [rbp - 8]	      1101	fold.c	FUNCTION_35	FOR_1
0x1b3b	        0x48895008	                mov qword [rax + 8], rdx	      1101	fold.c	FUNCTION_35	FOR_1
0x1b3f	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1102	fold.c	FUNCTION_35	FOR_1
0x1b43	         0xfb65028	           movzx edx, byte [rax + 0x28] 	      1102	fold.c	FUNCTION_35	FOR_1
0x1b47	        0x488b45f8	                mov rax, qword [rbp - 8]	      1102	fold.c	FUNCTION_35	FOR_1
0x1b4b	          0x885028	               mov byte [rax + 0x28], dl	      1102	fold.c	FUNCTION_35	FOR_1
0x1b4e	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1103	fold.c	FUNCTION_35	FOR_1
0x1b52	         0xfb65029	           movzx edx, byte [rax + 0x29] 	      1103	fold.c	FUNCTION_35	FOR_1
0x1b56	        0x488b45f8	                mov rax, qword [rbp - 8]	      1103	fold.c	FUNCTION_35	FOR_1
0x1b5a	          0x885029	               mov byte [rax + 0x29], dl	      1103	fold.c	FUNCTION_35	FOR_1
0x1b5d	        0x488b45f8	                mov rax, qword [rbp - 8]	      1104	fold.c	FUNCTION_35	FOR_1	CALL_3
0x1b61	        0x488d5010	                   lea rdx, [rax + 0x10]	      1104	fold.c	FUNCTION_35	FOR_1	CALL_3
0x1b65	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1104	fold.c	FUNCTION_35	FOR_1	CALL_3
0x1b69	        0x4883c010	                           add rax, 0x10	      1104	fold.c	FUNCTION_35	FOR_1	CALL_3
0x1b6d	          0x4889d6	                            mov rsi, rdx	      1104	fold.c	FUNCTION_35	FOR_1	CALL_3
0x1b70	          0x4889c7	                            mov rdi, rax	      1104	fold.c	FUNCTION_35	FOR_1	CALL_3
0x1b73	      0xe800000000	                          call 0x4001bb8	      1104	fold.c	FUNCTION_35	FOR_1	CALL_3
0x1b78	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1105	fold.c	FUNCTION_35	FOR_1
0x1b7c	            0x8b00	                    mov eax, dword [rax]	      1105	fold.c	FUNCTION_35	FOR_1
0x1b7e	          0x8d5001	                      lea edx, [rax + 1]	      1105	fold.c	FUNCTION_35	FOR_1
0x1b81	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1105	fold.c	FUNCTION_35	FOR_1
0x1b85	            0x8910	                    mov dword [rax], edx	      1105	fold.c	FUNCTION_35	FOR_1
0x1b87	      0x488345f030	           add qword [rbp - 0x10], 0x30 	      1106	fold.c	FUNCTION_35	FOR_1
0x1b8c	      0x488345f830	               add qword [rbp - 8], 0x30	      1107	fold.c	FUNCTION_35	FOR_1
0x1b91	        0x8345ec01	               add dword [rbp - 0x14], 1	      1098	fold.c	FUNCTION_35	FOR_1
0x1b95	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1098	fold.c	FUNCTION_35	FOR_1
0x1b99	            0x8b00	                    mov eax, dword [rax]	      1098	fold.c	FUNCTION_35	FOR_1
0x1b9b	          0x3b45ec	             cmp eax, dword [rbp - 0x14]	      1098	fold.c	FUNCTION_35	FOR_1
0x1b9e	            0x7f81	                            jg 0x4001b61	      1098	fold.c	FUNCTION_35	FOR_1
0x1ba0	            0xeb01	                           jmp 0x4001be3	      1098	fold.c	FUNCTION_35	FOR_1
0x1ba2	              0x90	                                     nop	      1093	fold.c	FUNCTION_35	IF_1
0x1ba3	              0xc9	                                   leave	      1109	fold.c	FUNCTION_35
0x1ba4	              0xc3	                                     ret	      1109	fold.c	FUNCTION_35
getDeepestNesting	SWITCH,0:ELSE,0:DO,0:FOR,0:WHILE,0:IF,0:functions,0:CALL,2	11
0x2977	              0x55	                                push rbp	      1611	fold.c	FUNCTION_47
0x2978	          0x4889e5	                            mov rbp, rsp	      1611	fold.c	FUNCTION_47
0x297b	    0x488b05000000	            mov rax, qword [0x040029c2] 	      1612	fold.c	FUNCTION_47	CALL_1
0x2982	          0x4889c7	                            mov rdi, rax	      1612	fold.c	FUNCTION_47	CALL_1
0x2985	      0xe8edf3ffff	                    call sym.checkupdate	      1612	fold.c	FUNCTION_47	CALL_1
0x298a	    0x488b05000000	            mov rax, qword [0x040029d1] 	      1613	fold.c	FUNCTION_47	CALL_2
0x2991	    0x480508010000	                          add rax, 0x108	      1613	fold.c	FUNCTION_47	CALL_2
0x2997	          0x4889c7	                            mov rdi, rax	      1613	fold.c	FUNCTION_47	CALL_2
0x299a	      0xe802000000	       call sym.getDeepestNestingRecurse	      1613	fold.c	FUNCTION_47	CALL_2
0x299f	              0x5d	                                 pop rbp	      1614	fold.c	FUNCTION_47
0x29a0	              0xc3	                                     ret	      1614	fold.c	FUNCTION_47
setFoldRepeat	SWITCH,0:ELSE,0:DO,0:FOR,1:WHILE,0:IF,2:functions,0:CALL,3	48
0x1db6	              0x55	                                push rbp	      1201	fold.c	FUNCTION_39
0x1db7	          0x4889e5	                            mov rbp, rsp	      1201	fold.c	FUNCTION_39
0x1dba	        0x4883ec40	                           sub rsp, 0x40	      1201	fold.c	FUNCTION_39
0x1dbe	        0x48897dd8	             mov qword [rbp - 0x28], rdi	      1201	fold.c	FUNCTION_39
0x1dc2	        0x488975d0	             mov qword [rbp - 0x30], rsi	      1201	fold.c	FUNCTION_39
0x1dc6	          0x8955cc	             mov dword [rbp - 0x34], edx	      1201	fold.c	FUNCTION_39
0x1dc9	    0x64488b042528	                mov rax, qword fs:[0x28]	      1201	fold.c	FUNCTION_39
0x1dd2	        0x488945f8	                mov qword [rbp - 8], rax	      1201	fold.c	FUNCTION_39
0x1dd6	            0x31c0	                            xor eax, eax	      1201	fold.c	FUNCTION_39
0x1dd8	    0x48c745f00000	               mov qword [rbp - 0x10], 0	      1205	fold.c	FUNCTION_39	FOR_1
0x1de0	            0xeb5b	                           jmp 0x4001e7d	      1205	fold.c	FUNCTION_39	FOR_1
0x1de2	    0xc745ec000000	               mov dword [rbp - 0x14], 0	      1207	fold.c	FUNCTION_39	FOR_1
0x1de9	        0x488d55ec	                   lea rdx, [rbp - 0x14]	      1208	fold.c	FUNCTION_39	FOR_1	CALL_1
0x1ded	          0x8b75cc	             mov esi, dword [rbp - 0x34]	      1208	fold.c	FUNCTION_39	FOR_1	CALL_1
0x1df0	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1208	fold.c	FUNCTION_39	FOR_1	CALL_1
0x1df4	          0x4889d1	                            mov rcx, rdx	      1208	fold.c	FUNCTION_39	FOR_1	CALL_1
0x1df7	      0xba00000000	                              mov edx, 0	      1208	fold.c	FUNCTION_39	FOR_1	CALL_1
0x1dfc	          0x4889c7	                            mov rdi, rax	      1208	fold.c	FUNCTION_39	FOR_1	CALL_1
0x1dff	      0xe85d000000	                  call sym.setManualFold	      1208	fold.c	FUNCTION_39	FOR_1	CALL_1
0x1e04	          0x8b45ec	             mov eax, dword [rbp - 0x14]	      1209	fold.c	FUNCTION_39	FOR_1	IF_1
0x1e07	          0x83e001	                              and eax, 1	      1209	fold.c	FUNCTION_39	FOR_1	IF_1
0x1e0a	            0x85c0	                           test eax, eax	      1209	fold.c	FUNCTION_39	FOR_1	IF_1
0x1e0c	            0x752a	                           jne 0x4001e78	      1209	fold.c	FUNCTION_39	FOR_1	IF_1
0x1e0e	      0x48837df000	               cmp qword [rbp - 0x10], 0	      1212	fold.c	FUNCTION_39	FOR_1	IF_1	IF_2
0x1e13	            0x7534	                           jne 0x4001e89	      1212	fold.c	FUNCTION_39	FOR_1	IF_1	IF_2
0x1e15	          0x8b45ec	             mov eax, dword [rbp - 0x14]	      1212	fold.c	FUNCTION_39	FOR_1	IF_1	IF_2
0x1e18	          0x83e002	                              and eax, 2	      1212	fold.c	FUNCTION_39	FOR_1	IF_1	IF_2
0x1e1b	            0x85c0	                           test eax, eax	      1212	fold.c	FUNCTION_39	FOR_1	IF_1	IF_2
0x1e1d	            0x752a	                           jne 0x4001e89	      1212	fold.c	FUNCTION_39	FOR_1	IF_1	IF_2
0x1e1f	    0x488b05000000	            mov rax, qword [0x04001e66] 	      1213	fold.c	FUNCTION_39	FOR_1	IF_1	CALL_3
0x1e26	          0x4889c7	                            mov rdi, rax	      1213	fold.c	FUNCTION_39	FOR_1	IF_1	CALL_3
0x1e29	      0xe800000000	                          call 0x4001e6e	      1213	fold.c	FUNCTION_39	FOR_1	IF_1	CALL_3
0x1e2e	          0x4889c7	                            mov rdi, rax	      1213	fold.c	FUNCTION_39	FOR_1	IF_1	CALL_3
0x1e31	      0xe800000000	                          call 0x4001e76	      1213	fold.c	FUNCTION_39	FOR_1	IF_1	CALL_3
0x1e36	            0xeb11	                           jmp 0x4001e89	      1214	fold.c	FUNCTION_39	FOR_1	IF_1
0x1e38	      0x488345f001	               add qword [rbp - 0x10], 1	      1205	fold.c	FUNCTION_39	FOR_1
0x1e3d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1205	fold.c	FUNCTION_39	FOR_1
0x1e41	        0x483b45d0	             cmp rax, qword [rbp - 0x30]	      1205	fold.c	FUNCTION_39	FOR_1
0x1e45	            0x7c9b	                            jl 0x4001e22	      1205	fold.c	FUNCTION_39	FOR_1
0x1e47	            0xeb01	                           jmp 0x4001e8a	      1217	fold.c	FUNCTION_39
0x1e49	              0x90	                                     nop	      1214	fold.c	FUNCTION_39	FOR_1	IF_1
0x1e4a	              0x90	                                     nop	      1217	fold.c	FUNCTION_39
0x1e4b	        0x488b45f8	                mov rax, qword [rbp - 8]	      1217	fold.c	FUNCTION_39
0x1e4f	    0x644833042528	                xor rax, qword fs:[0x28]	      1217	fold.c	FUNCTION_39
0x1e58	            0x7405	                            je 0x4001e9f	      1217	fold.c	FUNCTION_39
0x1e5a	      0xe800000000	                          call 0x4001e9f	      1217	fold.c	FUNCTION_39
0x1e5f	              0xc9	                                   leave	      1217	fold.c	FUNCTION_39
0x1e60	              0xc3	                                     ret	      1217	fold.c	FUNCTION_39
deleteFoldMarkers	SWITCH,0:ELSE,0:DO,0:FOR,1:WHILE,0:IF,1:functions,0:CALL,3	58
0x2ea3	              0x55	                                push rbp	      1801	fold.c	FUNCTION_54
0x2ea4	          0x4889e5	                            mov rbp, rsp	      1801	fold.c	FUNCTION_54
0x2ea7	        0x4883ec30	                           sub rsp, 0x30	      1801	fold.c	FUNCTION_54
0x2eab	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1801	fold.c	FUNCTION_54
0x2eaf	          0x8975e4	             mov dword [rbp - 0x1c], esi	      1801	fold.c	FUNCTION_54
0x2eb2	        0x488955d8	             mov qword [rbp - 0x28], rdx	      1801	fold.c	FUNCTION_54
0x2eb6	        0x837de400	               cmp dword [rbp - 0x1c], 0	      1804	fold.c	FUNCTION_54	IF_1
0x2eba	            0x7456	                            je 0x4002f52	      1804	fold.c	FUNCTION_54	IF_1
0x2ebc	    0xc745fc000000	                  mov dword [rbp - 4], 0	      1805	fold.c	FUNCTION_54	IF_1	FOR_1
0x2ec3	            0xeb41	                           jmp 0x4002f46	      1805	fold.c	FUNCTION_54	IF_1	FOR_1
0x2ec5	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1807	fold.c	FUNCTION_54	IF_1	FOR_1
0x2ec9	          0x488b10	                    mov rdx, qword [rax]	      1807	fold.c	FUNCTION_54	IF_1	FOR_1
0x2ecc	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x2ed0	        0x488d0c02	                    lea rcx, [rdx + rax]	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x2ed4	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x2ed8	        0x488b7020	            mov rsi, qword [rax + 0x20] 	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x2edc	          0x8b45fc	                mov eax, dword [rbp - 4]	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x2edf	          0x4863d0	                         movsxd rdx, eax	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x2ee2	          0x4889d0	                            mov rax, rdx	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x2ee5	          0x4801c0	                            add rax, rax	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x2ee8	          0x4801d0	                            add rax, rdx	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x2eeb	        0x48c1e004	                              shl rax, 4	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x2eef	          0x4801f0	                            add rax, rsi	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x2ef2	          0x4889ca	                            mov rdx, rcx	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x2ef5	      0xbe01000000	                              mov esi, 1	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x2efa	          0x4889c7	                            mov rdi, rax	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x2efd	      0xe8a1ffffff	              call sym.deleteFoldMarkers	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x2f02	        0x8345fc01	                  add dword [rbp - 4], 1	      1805	fold.c	FUNCTION_54	IF_1	FOR_1
0x2f06	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1805	fold.c	FUNCTION_54	IF_1	FOR_1
0x2f0a	          0x8b4010	            mov eax, dword [rax + 0x10] 	      1805	fold.c	FUNCTION_54	IF_1	FOR_1
0x2f0d	          0x3b45fc	                cmp eax, dword [rbp - 4]	      1805	fold.c	FUNCTION_54	IF_1	FOR_1
0x2f10	            0x7fb3	                            jg 0x4002f05	      1805	fold.c	FUNCTION_54	IF_1	FOR_1
0x2f12	    0x8b1500000000	            mov edx, dword [0x04002f58] 	      1808	fold.c	FUNCTION_54	CALL_2
0x2f18	    0x488b05000000	            mov rax, qword [0x04002f5f] 	      1808	fold.c	FUNCTION_54	CALL_2
0x2f1f	    0x488b80280200	           mov rax, qword [rax + 0x228] 	      1808	fold.c	FUNCTION_54	CALL_2
0x2f26	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	      1808	fold.c	FUNCTION_54	CALL_2
0x2f2a	          0x488b31	                    mov rsi, qword [rcx]	      1808	fold.c	FUNCTION_54	CALL_2
0x2f2d	        0x488b4dd8	             mov rcx, qword [rbp - 0x28]	      1808	fold.c	FUNCTION_54	CALL_2
0x2f31	          0x4801f1	                            add rcx, rsi	      1808	fold.c	FUNCTION_54	CALL_2
0x2f34	          0x4889c6	                            mov rsi, rax	      1808	fold.c	FUNCTION_54	CALL_2
0x2f37	          0x4889cf	                            mov rdi, rcx	      1808	fold.c	FUNCTION_54	CALL_2
0x2f3a	      0xe838000000	                  call sym.foldDelMarker	      1808	fold.c	FUNCTION_54	CALL_2
0x2f3f	    0x8b1500000000	            mov edx, dword [0x04002f85] 	      1809	fold.c	FUNCTION_54	CALL_3
0x2f45	    0x488b05000000	            mov rax, qword [0x04002f8c] 	      1809	fold.c	FUNCTION_54	CALL_3
0x2f4c	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	      1809	fold.c	FUNCTION_54	CALL_3
0x2f50	          0x488b31	                    mov rsi, qword [rcx]	      1809	fold.c	FUNCTION_54	CALL_3
0x2f53	        0x488b4dd8	             mov rcx, qword [rbp - 0x28]	      1809	fold.c	FUNCTION_54	CALL_3
0x2f57	          0x4801ce	                            add rsi, rcx	      1809	fold.c	FUNCTION_54	CALL_3
0x2f5a	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	      1809	fold.c	FUNCTION_54	CALL_3
0x2f5e	        0x488b4908	                mov rcx, qword [rcx + 8]	      1809	fold.c	FUNCTION_54	CALL_3
0x2f62	          0x4801f1	                            add rcx, rsi	      1809	fold.c	FUNCTION_54	CALL_3
0x2f65	        0x4883e901	                              sub rcx, 1	      1809	fold.c	FUNCTION_54	CALL_3
0x2f69	          0x4889c6	                            mov rsi, rax	      1809	fold.c	FUNCTION_54	CALL_3
0x2f6c	          0x4889cf	                            mov rdi, rcx	      1809	fold.c	FUNCTION_54	CALL_3
0x2f6f	      0xe803000000	                  call sym.foldDelMarker	      1809	fold.c	FUNCTION_54	CALL_3
0x2f74	              0x90	                                     nop	      1811	fold.c	FUNCTION_54
0x2f75	              0xc9	                                   leave	      1811	fold.c	FUNCTION_54
0x2f76	              0xc3	                                     ret	      1811	fold.c	FUNCTION_54
closeFold	SWITCH,0:ELSE,0:DO,0:FOR,0:WHILE,0:IF,0:functions,0:CALL,1	14
0x5eb	              0x55	                                push rbp	       367	fold.c	FUNCTION_14
0x5ec	          0x4889e5	                            mov rbp, rsp	       367	fold.c	FUNCTION_14
0x5ef	        0x4883ec10	                           sub rsp, 0x10	       367	fold.c	FUNCTION_14
0x5f3	        0x48897df8	                mov qword [rbp - 8], rdi	       367	fold.c	FUNCTION_14
0x5f7	        0x488975f0	             mov qword [rbp - 0x10], rsi	       367	fold.c	FUNCTION_14
0x5fb	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	       368	fold.c	FUNCTION_14	CALL_1
0x5ff	        0x488b45f8	                mov rax, qword [rbp - 8]	       368	fold.c	FUNCTION_14	CALL_1
0x603	      0xba00000000	                              mov edx, 0	       368	fold.c	FUNCTION_14	CALL_1
0x608	          0x4889ce	                            mov rsi, rcx	       368	fold.c	FUNCTION_14	CALL_1
0x60b	          0x4889c7	                            mov rdi, rax	       368	fold.c	FUNCTION_14	CALL_1
0x60e	      0xe8a3170000	                  call sym.setFoldRepeat	       368	fold.c	FUNCTION_14	CALL_1
0x613	              0x90	                                     nop	       369	fold.c	FUNCTION_14
0x614	              0xc9	                                   leave	       369	fold.c	FUNCTION_14
0x615	              0xc3	                                     ret	       369	fold.c	FUNCTION_14
foldedCount	SWITCH,0:ELSE,0:DO,0:FOR,0:WHILE,0:IF,1:functions,0:CALL,1	32
0x4a6	              0x55	                                push rbp	       292	fold.c	FUNCTION_7
0x4a7	          0x4889e5	                            mov rbp, rsp	       292	fold.c	FUNCTION_7
0x4aa	        0x4883ec30	                           sub rsp, 0x30	       292	fold.c	FUNCTION_7
0x4ae	        0x48897de8	             mov qword [rbp - 0x18], rdi	       292	fold.c	FUNCTION_7
0x4b2	        0x488975e0	             mov qword [rbp - 0x20], rsi	       292	fold.c	FUNCTION_7
0x4b6	        0x488955d8	             mov qword [rbp - 0x28], rdx	       292	fold.c	FUNCTION_7
0x4ba	    0x64488b042528	                mov rax, qword fs:[0x28]	       292	fold.c	FUNCTION_7
0x4c3	        0x488945f8	                mov qword [rbp - 8], rax	       292	fold.c	FUNCTION_7
0x4c7	            0x31c0	                            xor eax, eax	       292	fold.c	FUNCTION_7
0x4c9	        0x488b4dd8	             mov rcx, qword [rbp - 0x28]	       295	fold.c	FUNCTION_7	IF_1	CALL_1
0x4cd	        0x488d55f0	                   lea rdx, [rbp - 0x10]	       295	fold.c	FUNCTION_7	IF_1	CALL_1
0x4d1	        0x488b75e0	             mov rsi, qword [rbp - 0x20]	       295	fold.c	FUNCTION_7	IF_1	CALL_1
0x4d5	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       295	fold.c	FUNCTION_7	IF_1	CALL_1
0x4d9	          0x4989c9	                             mov r9, rcx	       295	fold.c	FUNCTION_7	IF_1	CALL_1
0x4dc	    0x41b800000000	                              mov r8d, 0	       295	fold.c	FUNCTION_7	IF_1	CALL_1
0x4e2	          0x4889d1	                            mov rcx, rdx	       295	fold.c	FUNCTION_7	IF_1	CALL_1
0x4e5	      0xba00000000	                              mov edx, 0	       295	fold.c	FUNCTION_7	IF_1	CALL_1
0x4ea	          0x4889c7	                            mov rdi, rax	       295	fold.c	FUNCTION_7	IF_1	CALL_1
0x4ed	      0xe800000000	                          call 0x4000532	       295	fold.c	FUNCTION_7	IF_1	CALL_1
0x4f2	            0x85c0	                           test eax, eax	       295	fold.c	FUNCTION_7	IF_1	CALL_1
0x4f4	            0x740e	                            je 0x4000544	       295	fold.c	FUNCTION_7	IF_1	CALL_1
0x4f6	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       296	fold.c	FUNCTION_7	IF_1
0x4fa	        0x482b45e0	             sub rax, qword [rbp - 0x20]	       296	fold.c	FUNCTION_7	IF_1
0x4fe	        0x4883c001	                              add rax, 1	       296	fold.c	FUNCTION_7	IF_1
0x502	            0xeb05	                           jmp 0x4000549	       296	fold.c	FUNCTION_7	IF_1
0x504	      0xb800000000	                              mov eax, 0	       297	fold.c	FUNCTION_7
0x509	        0x488b7df8	                mov rdi, qword [rbp - 8]	       298	fold.c	FUNCTION_7
0x50d	    0x6448333c2528	                xor rdi, qword fs:[0x28]	       298	fold.c	FUNCTION_7
0x516	            0x7405	                            je 0x400055d	       298	fold.c	FUNCTION_7
0x518	      0xe800000000	                          call 0x400055d	       298	fold.c	FUNCTION_7
0x51d	              0xc9	                                   leave	       298	fold.c	FUNCTION_7
0x51e	              0xc3	                                     ret	       298	fold.c	FUNCTION_7
foldlevelExpr	SWITCH,1:ELSE,2:DO,0:FOR,0:WHILE,0:IF,8:functions,0:CALL,2	171
0x5f00	              0x55	                                push rbp	      3255	fold.c	ELSE_1	FUNCTION_69
0x5f01	          0x4889e5	                            mov rbp, rsp	      3255	fold.c	ELSE_1	FUNCTION_69
0x5f04	        0x4883ec40	                           sub rsp, 0x40	      3255	fold.c	ELSE_1	FUNCTION_69
0x5f08	        0x48897dc8	             mov qword [rbp - 0x38], rdi	      3255	fold.c	ELSE_1	FUNCTION_69
0x5f0c	    0x64488b042528	                mov rax, qword fs:[0x28]	      3255	fold.c	ELSE_1	FUNCTION_69
0x5f15	        0x488945f8	                mov qword [rbp - 8], rax	      3255	fold.c	ELSE_1	FUNCTION_69
0x5f19	            0x31c0	                            xor eax, eax	      3255	fold.c	ELSE_1	FUNCTION_69
0x5f1b	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3263	fold.c	ELSE_1	FUNCTION_69
0x5f1f	        0x488b5008	                mov rdx, qword [rax + 8]	      3263	fold.c	ELSE_1	FUNCTION_69
0x5f23	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3263	fold.c	ELSE_1	FUNCTION_69
0x5f27	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3263	fold.c	ELSE_1	FUNCTION_69
0x5f2b	          0x4801d0	                            add rax, rdx	      3263	fold.c	ELSE_1	FUNCTION_69
0x5f2e	        0x488945e8	             mov qword [rbp - 0x18], rax	      3263	fold.c	ELSE_1	FUNCTION_69
0x5f32	    0x488b05000000	            mov rax, qword [0x04005f79] 	      3266	fold.c	ELSE_1	FUNCTION_69
0x5f39	        0x488945f0	             mov qword [rbp - 0x10], rax	      3266	fold.c	ELSE_1	FUNCTION_69
0x5f3d	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3267	fold.c	ELSE_1	FUNCTION_69
0x5f41	          0x488b00	                    mov rax, qword [rax]	      3267	fold.c	ELSE_1	FUNCTION_69
0x5f44	    0x488905000000	            mov qword [0x04005f8b], rax 	      3267	fold.c	ELSE_1	FUNCTION_69
0x5f4b	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3268	fold.c	ELSE_1	FUNCTION_69
0x5f4f	          0x488b00	                    mov rax, qword [rax]	      3268	fold.c	ELSE_1	FUNCTION_69
0x5f52	        0x488b4008	                mov rax, qword [rax + 8]	      3268	fold.c	ELSE_1	FUNCTION_69
0x5f56	    0x488905000000	            mov qword [0x04005f9d], rax 	      3268	fold.c	ELSE_1	FUNCTION_69
0x5f5d	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3269	fold.c	ELSE_1	FUNCTION_69	CALL_1
0x5f61	          0x4889c6	                            mov rsi, rax	      3269	fold.c	ELSE_1	FUNCTION_69	CALL_1
0x5f64	      0xbf09000000	                              mov edi, 9	      3269	fold.c	ELSE_1	FUNCTION_69	CALL_1
0x5f69	      0xe800000000	                          call 0x4005fae	      3269	fold.c	ELSE_1	FUNCTION_69	CALL_1
0x5f6e	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3271	fold.c	ELSE_1	FUNCTION_69
0x5f72	    0xc74028000000	               mov dword [rax + 0x28], 0	      3271	fold.c	ELSE_1	FUNCTION_69
0x5f79	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3272	fold.c	ELSE_1	FUNCTION_69
0x5f7d	          0x8b502c	            mov edx, dword [rax + 0x2c] 	      3272	fold.c	ELSE_1	FUNCTION_69
0x5f80	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3272	fold.c	ELSE_1	FUNCTION_69
0x5f84	          0x895030	             mov dword [rax + 0x30], edx	      3272	fold.c	ELSE_1	FUNCTION_69
0x5f87	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3273	fold.c	ELSE_1	FUNCTION_69
0x5f8b	    0xc7402c150000	           mov dword [rax + 0x2c], 0x15 	      3273	fold.c	ELSE_1	FUNCTION_69
0x5f92	      0x48837de801	               cmp qword [rbp - 0x18], 1	      3274	fold.c	ELSE_1	FUNCTION_69	IF_1
0x5f97	            0x7f0b	                            jg 0x4005fe4	      3274	fold.c	ELSE_1	FUNCTION_69	IF_1
0x5f99	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3275	fold.c	ELSE_1	FUNCTION_69	IF_1
0x5f9d	    0xc74020000000	               mov dword [rax + 0x20], 0	      3275	fold.c	ELSE_1	FUNCTION_69	IF_1
0x5fa4	    0x8b0500000000	            mov eax, dword [0x04005fea] 	      3279	fold.c	ELSE_1	FUNCTION_69
0x5faa	          0x8945e0	             mov dword [rbp - 0x20], eax	      3279	fold.c	ELSE_1	FUNCTION_69
0x5fad	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3280	fold.c	ELSE_1	FUNCTION_69	CALL_2
0x5fb1	          0x488b00	                    mov rax, qword [rax]	      3280	fold.c	ELSE_1	FUNCTION_69	CALL_2
0x5fb4	    0x488b80180200	           mov rax, qword [rax + 0x218] 	      3280	fold.c	ELSE_1	FUNCTION_69	CALL_2
0x5fbb	        0x488d55dc	                   lea rdx, [rbp - 0x24]	      3280	fold.c	ELSE_1	FUNCTION_69	CALL_2
0x5fbf	          0x4889d6	                            mov rsi, rdx	      3280	fold.c	ELSE_1	FUNCTION_69	CALL_2
0x5fc2	          0x4889c7	                            mov rdi, rax	      3280	fold.c	ELSE_1	FUNCTION_69	CALL_2
0x5fc5	      0xe800000000	                          call 0x400600a	      3280	fold.c	ELSE_1	FUNCTION_69	CALL_2
0x5fca	          0x8945e4	             mov dword [rbp - 0x1c], eax	      3280	fold.c	ELSE_1	FUNCTION_69	CALL_2
0x5fcd	          0x8b45e0	             mov eax, dword [rbp - 0x20]	      3281	fold.c	ELSE_1	FUNCTION_69
0x5fd0	    0x890500000000	            mov dword [0x04006016], eax 	      3281	fold.c	ELSE_1	FUNCTION_69
0x5fd6	          0x8b45dc	             mov eax, dword [rbp - 0x24]	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x5fd9	          0x83f83e	                           cmp eax, 0x3e	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x5fdc	     0xf84b4000000	                            je 0x40060d6	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x5fe2	          0x83f83e	                           cmp eax, 0x3e	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x5fe5	            0x7f17	                            jg 0x400603e	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x5fe7	          0x83f83c	                           cmp eax, 0x3c	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x5fea	     0xf84c7000000	                            je 0x40060f7	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x5ff0	          0x83f83d	                           cmp eax, 0x3d	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x5ff3	     0xf84d7000000	                            je 0x4006110	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x5ff9	      0xe9e2000000	                           jmp 0x4006120	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x5ffe	          0x83f861	                           cmp eax, 0x61	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x6001	            0x740a	                            je 0x400604d	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x6003	          0x83f873	                           cmp eax, 0x73	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x6006	            0x7440	                            je 0x4006088	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x6008	      0xe9d3000000	                           jmp 0x4006120	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x600d	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3286	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x6011	          0x8b4020	            mov eax, dword [rax + 0x20] 	      3286	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x6014	            0x85c0	                           test eax, eax	      3286	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x6016	            0x7821	                            js 0x4006079	      3286	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x6018	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3288	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x601c	          0x8b5020	            mov edx, dword [rax + 0x20] 	      3288	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x601f	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      3288	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x6022	             0x1c2	                            add edx, eax	      3288	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x6024	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3288	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x6028	          0x895020	             mov dword [rax + 0x20], edx	      3288	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x602b	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3289	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x602f	          0x8b5020	            mov edx, dword [rax + 0x20] 	      3289	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x6032	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3289	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x6036	          0x895024	             mov dword [rax + 0x24], edx	      3289	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x6039	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3291	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x603d	          0x8b55e4	             mov edx, dword [rbp - 0x1c]	      3291	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x6040	          0x895028	             mov dword [rax + 0x28], edx	      3291	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x6043	      0xe9c5000000	                           jmp 0x400614d	      3292	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x6048	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3295	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_3
0x604c	          0x8b4020	            mov eax, dword [rax + 0x20] 	      3295	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_3
0x604f	            0x85c0	                           test eax, eax	      3295	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_3
0x6051	     0xf88b5000000	                            js 0x400614c	      3295	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_3
0x6057	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3297	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_3	IF_4
0x605b	          0x8b4020	            mov eax, dword [rax + 0x20] 	      3297	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_3	IF_4
0x605e	          0x3b45e4	             cmp eax, dword [rbp - 0x1c]	      3297	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_3	IF_4
0x6061	            0x7d0d	                           jge 0x40060b0	      3297	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_3	IF_4
0x6063	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3298	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_3	IF_4
0x6067	    0xc74024000000	               mov dword [rax + 0x24], 0	      3298	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_3	IF_4
0x606e	            0xeb13	                           jmp 0x40060c3	      3298	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_3	IF_4
0x6070	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3300	fold.c	FUNCTION_69	SWITCH_1	IF_3	ELSE_1
0x6074	          0x8b4020	            mov eax, dword [rax + 0x20] 	      3300	fold.c	FUNCTION_69	SWITCH_1	IF_3	ELSE_1
0x6077	          0x2b45e4	             sub eax, dword [rbp - 0x1c]	      3300	fold.c	FUNCTION_69	SWITCH_1	IF_3	ELSE_1
0x607a	            0x89c2	                            mov edx, eax	      3300	fold.c	FUNCTION_69	SWITCH_1	IF_3	ELSE_1
0x607c	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3300	fold.c	FUNCTION_69	SWITCH_1	IF_3	ELSE_1
0x6080	          0x895024	             mov dword [rax + 0x24], edx	      3300	fold.c	FUNCTION_69	SWITCH_1	IF_3	ELSE_1
0x6083	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3301	fold.c	FUNCTION_69	SWITCH_1	IF_3	ELSE_1
0x6087	          0x8b4024	            mov eax, dword [rax + 0x24] 	      3301	fold.c	FUNCTION_69	SWITCH_1	IF_3	ELSE_1
0x608a	          0x8d5001	                      lea edx, [rax + 1]	      3301	fold.c	FUNCTION_69	SWITCH_1	IF_3	ELSE_1
0x608d	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3301	fold.c	FUNCTION_69	SWITCH_1	IF_3	ELSE_1
0x6091	          0x89502c	             mov dword [rax + 0x2c], edx	      3301	fold.c	FUNCTION_69	SWITCH_1	IF_3	ELSE_1
0x6094	            0xeb76	                           jmp 0x400614c	      3303	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x6096	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3306	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x609a	          0x8b55e4	             mov edx, dword [rbp - 0x1c]	      3306	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x609d	          0x895020	             mov dword [rax + 0x20], edx	      3306	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x60a0	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3307	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x60a4	          0x8b55e4	             mov edx, dword [rbp - 0x1c]	      3307	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x60a7	          0x895024	             mov dword [rax + 0x24], edx	      3307	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x60aa	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3308	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x60ae	    0xc74028010000	               mov dword [rax + 0x28], 1	      3308	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x60b5	            0xeb56	                           jmp 0x400614d	      3309	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x60b7	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      3312	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x60ba	          0x8d50ff	                      lea edx, [rax - 1]	      3312	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x60bd	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3312	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x60c1	          0x895024	             mov dword [rax + 0x24], edx	      3312	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x60c4	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3313	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x60c8	          0x8b55e4	             mov edx, dword [rbp - 0x1c]	      3313	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x60cb	          0x89502c	             mov dword [rax + 0x2c], edx	      3313	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x60ce	            0xeb3d	                           jmp 0x400614d	      3314	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x60d0	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3317	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x60d4	          0x8b5020	            mov edx, dword [rax + 0x20] 	      3317	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x60d7	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3317	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x60db	          0x895024	             mov dword [rax + 0x24], edx	      3317	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x60de	            0xeb2d	                           jmp 0x400614d	      3318	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x60e0	        0x837de400	               cmp dword [rbp - 0x1c], 0	      3321	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	IF_5
0x60e4	            0x7910	                           jns 0x4006136	      3321	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	IF_5
0x60e6	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3324	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	IF_5
0x60ea	          0x8b5020	            mov edx, dword [rax + 0x20] 	      3324	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	IF_5
0x60ed	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3324	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	IF_5
0x60f1	          0x895024	             mov dword [rax + 0x24], edx	      3324	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	IF_5
0x60f4	            0xeb0a	                           jmp 0x4006140	      3324	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	IF_5
0x60f6	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3326	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	ELSE_2
0x60fa	          0x8b55e4	             mov edx, dword [rbp - 0x1c]	      3326	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	ELSE_2
0x60fd	          0x895024	             mov dword [rax + 0x24], edx	      3326	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	ELSE_2
0x6100	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3327	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	ELSE_2
0x6104	          0x8b55e4	             mov edx, dword [rbp - 0x1c]	      3327	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	ELSE_2
0x6107	          0x895020	             mov dword [rax + 0x20], edx	      3327	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	ELSE_2
0x610a	            0xeb01	                           jmp 0x400614d	      3328	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	ELSE_2
0x610c	              0x90	                                     nop	      3303	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x610d	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3333	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6
0x6111	          0x8b4020	            mov eax, dword [rax + 0x20] 	      3333	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6
0x6114	            0x85c0	                           test eax, eax	      3333	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6
0x6116	            0x7938	                           jns 0x4006190	      3333	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6
0x6118	      0x48837de801	               cmp qword [rbp - 0x18], 1	      3335	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_7
0x611d	            0x7f16	                            jg 0x4006175	      3335	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_7
0x611f	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3337	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_7
0x6123	    0xc74020000000	               mov dword [rax + 0x20], 0	      3337	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_7
0x612a	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3338	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_7
0x612e	    0xc74024000000	               mov dword [rax + 0x24], 0	      3338	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_7
0x6135	    0x488b05000000	            mov rax, qword [0x0400617c] 	      3340	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_8
0x613c	          0x488b00	                    mov rax, qword [rax]	      3340	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_8
0x613f	        0x483b45e8	             cmp rax, qword [rbp - 0x18]	      3340	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_8
0x6143	            0x750b	                           jne 0x4006190	      3340	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_8
0x6145	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3341	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_8
0x6149	    0xc74024000000	               mov dword [rax + 0x24], 0	      3341	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_8
0x6150	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3344	fold.c	FUNCTION_69	ELSE_1
0x6154	    0x488905000000	            mov qword [0x0400619b], rax 	      3344	fold.c	FUNCTION_69	ELSE_1
0x615b	    0x488b05000000	            mov rax, qword [0x040061a2] 	      3345	fold.c	FUNCTION_69	ELSE_1
0x6162	        0x488b4008	                mov rax, qword [rax + 8]	      3345	fold.c	FUNCTION_69	ELSE_1
0x6166	    0x488905000000	            mov qword [0x040061ad], rax 	      3345	fold.c	FUNCTION_69	ELSE_1
0x616d	              0x90	                                     nop	      3347	fold.c	FUNCTION_69	ELSE_1
0x616e	        0x488b45f8	                mov rax, qword [rbp - 8]	      3347	fold.c	FUNCTION_69	ELSE_1
0x6172	    0x644833042528	                xor rax, qword fs:[0x28]	      3347	fold.c	FUNCTION_69	ELSE_1
0x617b	            0x7405	                            je 0x40061c2	      3347	fold.c	FUNCTION_69	ELSE_1
0x617d	      0xe800000000	                          call 0x40061c2	      3347	fold.c	FUNCTION_69	ELSE_1
0x6182	              0xc9	                                   leave	      3347	fold.c	FUNCTION_69	ELSE_1
0x6183	              0xc3	                                     ret	      3347	fold.c	FUNCTION_69	ELSE_1
clearFolding	SWITCH,0:ELSE,0:DO,0:FOR,0:WHILE,0:IF,0:functions,0:CALL,1	13
0x12db	              0x55	                                push rbp	       796	fold.c	FUNCTION_27
0x12dc	          0x4889e5	                            mov rbp, rsp	       796	fold.c	FUNCTION_27
0x12df	        0x4883ec10	                           sub rsp, 0x10	       796	fold.c	FUNCTION_27
0x12e3	        0x48897df8	                mov qword [rbp - 8], rdi	       796	fold.c	FUNCTION_27
0x12e7	        0x488b45f8	                mov rax, qword [rbp - 8]	       797	fold.c	FUNCTION_27	CALL_1
0x12eb	    0x480508010000	                          add rax, 0x108	       797	fold.c	FUNCTION_27	CALL_1
0x12f1	          0x4889c7	                            mov rdi, rax	       797	fold.c	FUNCTION_27	CALL_1
0x12f4	      0xe800000000	                          call 0x4001339	       797	fold.c	FUNCTION_27	CALL_1
0x12f9	        0x488b45f8	                mov rax, qword [rbp - 8]	       798	fold.c	FUNCTION_27
0x12fd	    0xc68021010000	               mov byte [rax + 0x121], 0	       798	fold.c	FUNCTION_27
0x1304	              0x90	                                     nop	       799	fold.c	FUNCTION_27
0x1305	              0xc9	                                   leave	       799	fold.c	FUNCTION_27
0x1306	              0xc3	                                     ret	       799	fold.c	FUNCTION_27
foldAdjustCursor	SWITCH,0:ELSE,0:DO,0:FOR,0:WHILE,0:IF,0:functions,0:CALL,1	13
0x1a7d	              0x55	                                push rbp	      1073	fold.c	FUNCTION_34
0x1a7e	          0x4889e5	                            mov rbp, rsp	      1073	fold.c	FUNCTION_34
0x1a81	    0x488b05000000	            mov rax, qword [0x04001ac8] 	      1074	fold.c	FUNCTION_34	CALL_1
0x1a88	        0x488d4838	                   lea rcx, [rax + 0x38]	      1074	fold.c	FUNCTION_34	CALL_1
0x1a8c	    0x488b05000000	            mov rax, qword [0x04001ad3] 	      1074	fold.c	FUNCTION_34	CALL_1
0x1a93	        0x488b4038	            mov rax, qword [rax + 0x38] 	      1074	fold.c	FUNCTION_34	CALL_1
0x1a97	      0xba00000000	                              mov edx, 0	      1074	fold.c	FUNCTION_34	CALL_1
0x1a9c	          0x4889ce	                            mov rsi, rcx	      1074	fold.c	FUNCTION_34	CALL_1
0x1a9f	          0x4889c7	                            mov rdi, rax	      1074	fold.c	FUNCTION_34	CALL_1
0x1aa2	      0xe800000000	                          call 0x4001ae7	      1074	fold.c	FUNCTION_34	CALL_1
0x1aa7	              0x90	                                     nop	      1075	fold.c	FUNCTION_34
0x1aa8	              0x5d	                                 pop rbp	      1075	fold.c	FUNCTION_34
0x1aa9	              0xc3	                                     ret	      1075	fold.c	FUNCTION_34
foldmethodIsManual	SWITCH,0:ELSE,0:DO,0:FOR,0:WHILE,0:IF,0:functions,0:CALL,0	12
0x51f	              0x55	                                push rbp	       306	fold.c	FUNCTION_8
0x520	          0x4889e5	                            mov rbp, rsp	       306	fold.c	FUNCTION_8
0x523	        0x48897df8	                mov qword [rbp - 8], rdi	       306	fold.c	FUNCTION_8
0x527	        0x488b45f8	                mov rax, qword [rbp - 8]	       307	fold.c	FUNCTION_8
0x52b	    0x488b80f80100	           mov rax, qword [rax + 0x1f8] 	       307	fold.c	FUNCTION_8
0x532	        0x4883c003	                              add rax, 3	       307	fold.c	FUNCTION_8
0x536	           0xfb600	                   movzx eax, byte [rax]	       307	fold.c	FUNCTION_8
0x539	            0x3c75	                            cmp al, 0x75	       307	fold.c	FUNCTION_8
0x53b	           0xf94c0	                                 sete al	       307	fold.c	FUNCTION_8
0x53e	           0xfb6c0	                           movzx eax, al	       307	fold.c	FUNCTION_8
0x541	              0x5d	                                 pop rbp	       308	fold.c	FUNCTION_8
0x542	              0xc3	                                     ret	       308	fold.c	FUNCTION_8
foldDelMarker	SWITCH,0:ELSE,0:DO,0:FOR,1:WHILE,0:IF,6:functions,0:CALL,14	167
0x2f77	              0x55	                                push rbp	      1822	fold.c	FUNCTION_55
0x2f78	          0x4889e5	                            mov rbp, rsp	      1822	fold.c	FUNCTION_55
0x2f7b	        0x4883ec50	                           sub rsp, 0x50	      1822	fold.c	FUNCTION_55
0x2f7f	        0x48897dc8	             mov qword [rbp - 0x38], rdi	      1822	fold.c	FUNCTION_55
0x2f83	        0x488975c0	             mov qword [rbp - 0x40], rsi	      1822	fold.c	FUNCTION_55
0x2f87	          0x8955bc	             mov dword [rbp - 0x44], edx	      1822	fold.c	FUNCTION_55
0x2f8a	    0x488b05000000	            mov rax, qword [0x04002fd1] 	      1827	fold.c	FUNCTION_55
0x2f91	    0x488b80381400	          mov rax, qword [rax + 0x1438] 	      1827	fold.c	FUNCTION_55
0x2f98	        0x488945e0	             mov qword [rbp - 0x20], rax	      1827	fold.c	FUNCTION_55
0x2f9c	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1830	fold.c	FUNCTION_55	CALL_1
0x2fa0	          0x4889c7	                            mov rdi, rax	      1830	fold.c	FUNCTION_55	CALL_1
0x2fa3	      0xe800000000	                          call 0x4002fe8	      1830	fold.c	FUNCTION_55	CALL_1
0x2fa8	        0x488945e8	             mov qword [rbp - 0x18], rax	      1830	fold.c	FUNCTION_55	CALL_1
0x2fac	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1831	fold.c	FUNCTION_55	FOR_1
0x2fb0	        0x488945d8	             mov qword [rbp - 0x28], rax	      1831	fold.c	FUNCTION_55	FOR_1
0x2fb4	      0xe9f8010000	                           jmp 0x40031f1	      1831	fold.c	FUNCTION_55	FOR_1
0x2fb9	          0x8b45bc	             mov eax, dword [rbp - 0x44]	      1832	fold.c	FUNCTION_55	FOR_1	IF_1	CALL_2
0x2fbc	          0x4863d0	                         movsxd rdx, eax	      1832	fold.c	FUNCTION_55	FOR_1	IF_1	CALL_2
0x2fbf	        0x488b4dc0	             mov rcx, qword [rbp - 0x40]	      1832	fold.c	FUNCTION_55	FOR_1	IF_1	CALL_2
0x2fc3	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1832	fold.c	FUNCTION_55	FOR_1	IF_1	CALL_2
0x2fc7	          0x4889ce	                            mov rsi, rcx	      1832	fold.c	FUNCTION_55	FOR_1	IF_1	CALL_2
0x2fca	          0x4889c7	                            mov rdi, rax	      1832	fold.c	FUNCTION_55	FOR_1	IF_1	CALL_2
0x2fcd	      0xe800000000	                          call 0x4003012	      1832	fold.c	FUNCTION_55	FOR_1	IF_1	CALL_2
0x2fd2	            0x85c0	                           test eax, eax	      1832	fold.c	FUNCTION_55	FOR_1	IF_1	CALL_2
0x2fd4	     0xf85d2010000	                           jne 0x40031ec	      1832	fold.c	FUNCTION_55	FOR_1	IF_1	CALL_2
0x2fda	          0x8b45bc	             mov eax, dword [rbp - 0x44]	      1835	fold.c	FUNCTION_55	FOR_1	IF_1
0x2fdd	          0x8945d4	             mov dword [rbp - 0x2c], eax	      1835	fold.c	FUNCTION_55	FOR_1	IF_1
0x2fe0	          0x8b45d4	             mov eax, dword [rbp - 0x2c]	      1836	fold.c	FUNCTION_55	FOR_1	IF_1	IF_2	CALL_3
0x2fe3	          0x4863d0	                         movsxd rdx, eax	      1836	fold.c	FUNCTION_55	FOR_1	IF_1	IF_2	CALL_3
0x2fe6	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1836	fold.c	FUNCTION_55	FOR_1	IF_1	IF_2	CALL_3
0x2fea	          0x4801d0	                            add rax, rdx	      1836	fold.c	FUNCTION_55	FOR_1	IF_1	IF_2	CALL_3
0x2fed	           0xfb600	                   movzx eax, byte [rax]	      1836	fold.c	FUNCTION_55	FOR_1	IF_1	IF_2	CALL_3
0x2ff0	           0xfb6c0	                           movzx eax, al	      1836	fold.c	FUNCTION_55	FOR_1	IF_1	IF_2	CALL_3
0x2ff3	          0x83e830	                           sub eax, 0x30	      1836	fold.c	FUNCTION_55	FOR_1	IF_1	IF_2	CALL_3
0x2ff6	          0x83f809	                              cmp eax, 9	      1836	fold.c	FUNCTION_55	FOR_1	IF_1	IF_2	CALL_3
0x2ff9	            0x7704	                            ja 0x400303f	      1836	fold.c	FUNCTION_55	FOR_1	IF_1	IF_2	CALL_3
0x2ffb	        0x8345d401	               add dword [rbp - 0x2c], 1	      1837	fold.c	FUNCTION_55	FOR_1	IF_1	IF_2
0x2fff	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1838	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3
0x3003	           0xfb600	                   movzx eax, byte [rax]	      1838	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3
0x3006	            0x84c0	                             test al, al	      1838	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3
0x3008	     0xf84de000000	                            je 0x400312c	      1838	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3
0x300e	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1841	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	CALL_4
0x3012	      0xbe00000000	                              mov esi, 0	      1841	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	CALL_4
0x3017	          0x4889c7	                            mov rdi, rax	      1841	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	CALL_4
0x301a	      0xe800000000	                          call 0x400305f	      1841	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	CALL_4
0x301f	        0x488945f0	             mov qword [rbp - 0x10], rax	      1841	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	CALL_4
0x3023	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      1842	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x3027	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1842	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x302b	          0x4889d1	                            mov rcx, rdx	      1842	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x302e	          0x4829c1	                            sub rcx, rax	      1842	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x3031	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      1842	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x3035	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1842	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x3039	          0x4829c2	                            sub rdx, rax	      1842	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x303c	          0x4889d0	                            mov rax, rdx	      1842	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x303f	          0x4839c1	                            cmp rcx, rax	      1842	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x3042	     0xf8ca4000000	                            jl 0x400312c	      1842	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x3048	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x304c	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x3050	          0x4829c2	                            sub rdx, rax	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x3053	          0x4889d0	                            mov rax, rdx	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x3056	          0x4889c6	                            mov rsi, rax	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x3059	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x305d	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x3061	          0x4829c2	                            sub rdx, rax	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x3064	          0x4889d0	                            mov rax, rdx	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x3067	          0x48f7d8	                                 neg rax	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x306a	          0x4889c2	                            mov rdx, rax	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x306d	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x3071	        0x488d0c02	                    lea rcx, [rdx + rax]	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x3075	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x3079	          0x4889f2	                            mov rdx, rsi	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x307c	          0x4889c6	                            mov rsi, rax	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x307f	          0x4889cf	                            mov rdi, rcx	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x3082	      0xe800000000	                          call 0x40030c7	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x3087	            0x85c0	                           test eax, eax	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x3089	            0x7561	                           jne 0x400312c	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x308b	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x308f	        0x4883c002	                              add rax, 2	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x3093	          0x4889c7	                            mov rdi, rax	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x3096	      0xe800000000	                          call 0x40030db	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x309b	          0x4889c6	                            mov rsi, rax	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x309e	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x30a2	        0x488d4802	                      lea rcx, [rax + 2]	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x30a6	          0x8b45d4	             mov eax, dword [rbp - 0x2c]	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x30a9	          0x4863d0	                         movsxd rdx, eax	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x30ac	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x30b0	          0x4801d0	                            add rax, rdx	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x30b3	          0x4889f2	                            mov rdx, rsi	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x30b6	          0x4889ce	                            mov rsi, rcx	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x30b9	          0x4889c7	                            mov rdi, rax	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x30bc	      0xe800000000	                          call 0x4003101	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x30c1	            0x85c0	                           test eax, eax	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x30c3	            0x7527	                           jne 0x400312c	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x30c5	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      1846	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x30c9	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1846	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x30cd	          0x4829c2	                            sub rdx, rax	      1846	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x30d0	          0x4889d0	                            mov rax, rdx	      1846	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x30d3	          0x48f7d8	                                 neg rax	      1846	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x30d6	        0x480145d8	            add qword [rbp - 0x28], rax 	      1846	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x30da	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1847	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_8
0x30de	          0x4889c7	                            mov rdi, rax	      1847	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_8
0x30e1	      0xe800000000	                          call 0x4003126	      1847	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_8
0x30e6	          0x83e802	                              sub eax, 2	      1847	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_8
0x30e9	           0x145d4	             add dword [rbp - 0x2c], eax	      1847	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_8
0x30ec	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1850	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_9
0x30f0	        0x488d5001	                      lea rdx, [rax + 1]	      1850	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_9
0x30f4	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1850	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_9
0x30f8	        0x4883e801	                              sub rax, 1	      1850	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_9
0x30fc	          0x4889d6	                            mov rsi, rdx	      1850	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_9
0x30ff	          0x4889c7	                            mov rdi, rax	      1850	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_9
0x3102	      0xe800000000	                          call 0x4003147	      1850	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_9
0x3107	          0x83f801	                              cmp eax, 1	      1850	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_9
0x310a	     0xf85b2000000	                           jne 0x4003202	      1850	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_9
0x3110	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1853	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_11
0x3114	          0x4889c7	                            mov rdi, rax	      1853	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_11
0x3117	      0xe800000000	                          call 0x400315c	      1853	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_11
0x311c	            0x89c2	                            mov edx, eax	      1853	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_11
0x311e	          0x8b45d4	             mov eax, dword [rbp - 0x2c]	      1853	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_11
0x3121	            0x29c2	                            sub edx, eax	      1853	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_11
0x3123	            0x89d0	                            mov eax, edx	      1853	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_11
0x3125	          0x83c001	                              add eax, 1	      1853	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_11
0x3128	            0x89c7	                            mov edi, eax	      1853	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_11
0x312a	      0xe800000000	                          call 0x400316f	      1853	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_11
0x312f	        0x488945f8	                mov qword [rbp - 8], rax	      1853	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_11
0x3133	      0x48837df800	                  cmp qword [rbp - 8], 0	      1854	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6
0x3138	     0xf8484000000	                            je 0x4003202	      1854	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6
0x313e	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      1856	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_12
0x3142	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1856	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_12
0x3146	          0x4829c2	                            sub rdx, rax	      1856	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_12
0x3149	          0x4889d0	                            mov rax, rdx	      1856	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_12
0x314c	          0x4889c2	                            mov rdx, rax	      1856	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_12
0x314f	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	      1856	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_12
0x3153	        0x488b45f8	                mov rax, qword [rbp - 8]	      1856	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_12
0x3157	          0x4889ce	                            mov rsi, rcx	      1856	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_12
0x315a	          0x4889c7	                            mov rdi, rax	      1856	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_12
0x315d	      0xe800000000	                          call 0x40031a2	      1856	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_12
0x3162	          0x8b45d4	             mov eax, dword [rbp - 0x2c]	      1857	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_13
0x3165	          0x4863d0	                         movsxd rdx, eax	      1857	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_13
0x3168	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1857	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_13
0x316c	          0x4801c2	                            add rdx, rax	      1857	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_13
0x316f	        0x488b4dd8	             mov rcx, qword [rbp - 0x28]	      1857	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_13
0x3173	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1857	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_13
0x3177	          0x4829c1	                            sub rcx, rax	      1857	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_13
0x317a	          0x4889c8	                            mov rax, rcx	      1857	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_13
0x317d	          0x4889c1	                            mov rcx, rax	      1857	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_13
0x3180	        0x488b45f8	                mov rax, qword [rbp - 8]	      1857	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_13
0x3184	          0x4801c8	                            add rax, rcx	      1857	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_13
0x3187	          0x4889d6	                            mov rsi, rdx	      1857	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_13
0x318a	          0x4889c7	                            mov rdi, rax	      1857	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_13
0x318d	      0xe800000000	                          call 0x40031d2	      1857	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_13
0x3192	        0x488b4df8	                mov rcx, qword [rbp - 8]	      1858	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_14
0x3196	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1858	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_14
0x319a	      0xba00000000	                              mov edx, 0	      1858	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_14
0x319f	          0x4889ce	                            mov rsi, rcx	      1858	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_14
0x31a2	          0x4889c7	                            mov rdi, rax	      1858	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_14
0x31a5	      0xe800000000	                          call 0x40031ea	      1858	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_14
0x31aa	            0xeb16	                           jmp 0x4003202	      1861	fold.c	FUNCTION_55	FOR_1	IF_1
0x31ac	      0x488345d801	               add qword [rbp - 0x28], 1	      1831	fold.c	FUNCTION_55	FOR_1
0x31b1	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1831	fold.c	FUNCTION_55	FOR_1
0x31b5	           0xfb600	                   movzx eax, byte [rax]	      1831	fold.c	FUNCTION_55	FOR_1
0x31b8	            0x84c0	                             test al, al	      1831	fold.c	FUNCTION_55	FOR_1
0x31ba	     0xf85f9fdffff	                           jne 0x4002ff9	      1831	fold.c	FUNCTION_55	FOR_1
0x31c0	            0xeb01	                           jmp 0x4003203	      1863	fold.c	FUNCTION_55
0x31c2	              0x90	                                     nop	      1861	fold.c	FUNCTION_55	FOR_1	IF_1
0x31c3	              0x90	                                     nop	      1863	fold.c	FUNCTION_55
0x31c4	              0xc9	                                   leave	      1863	fold.c	FUNCTION_55
0x31c5	              0xc3	                                     ret	      1863	fold.c	FUNCTION_55
opFoldRange	SWITCH,0:ELSE,0:DO,0:FOR,1:WHILE,0:IF,4:functions,0:CALL,6	66
0x640	              0x55	                                push rbp	       393	fold.c	FUNCTION_16
0x641	          0x4889e5	                            mov rbp, rsp	       393	fold.c	FUNCTION_16
0x644	        0x4883ec40	                           sub rsp, 0x40	       393	fold.c	FUNCTION_16
0x648	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       393	fold.c	FUNCTION_16
0x64c	        0x488975d0	             mov qword [rbp - 0x30], rsi	       393	fold.c	FUNCTION_16
0x650	          0x8955cc	             mov dword [rbp - 0x34], edx	       393	fold.c	FUNCTION_16
0x653	          0x894dc8	             mov dword [rbp - 0x38], ecx	       393	fold.c	FUNCTION_16
0x656	        0x448945c4	             mov dword [rbp - 0x3c], r8d	       393	fold.c	FUNCTION_16
0x65a	    0x64488b042528	                mov rax, qword fs:[0x28]	       393	fold.c	FUNCTION_16
0x663	        0x488945f8	                mov qword [rbp - 8], rax	       393	fold.c	FUNCTION_16
0x667	            0x31c0	                            xor eax, eax	       393	fold.c	FUNCTION_16
0x669	    0xc745e4000000	               mov dword [rbp - 0x1c], 0	       394	fold.c	FUNCTION_16
0x670	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       398	fold.c	FUNCTION_16	FOR_1
0x674	        0x488945f0	             mov qword [rbp - 0x10], rax	       398	fold.c	FUNCTION_16	FOR_1
0x678	            0xeb6c	                           jmp 0x4000726	       398	fold.c	FUNCTION_16	FOR_1
0x67a	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       400	fold.c	FUNCTION_16	FOR_1
0x67e	        0x488945e8	             mov qword [rbp - 0x18], rax	       400	fold.c	FUNCTION_16	FOR_1
0x682	        0x837dcc00	               cmp dword [rbp - 0x34], 0	       403	fold.c	FUNCTION_16	FOR_1	IF_1
0x686	            0x741b	                            je 0x40006e3	       403	fold.c	FUNCTION_16	FOR_1	IF_1
0x688	        0x837dc800	               cmp dword [rbp - 0x38], 0	       403	fold.c	FUNCTION_16	FOR_1	IF_1
0x68c	            0x7515	                           jne 0x40006e3	       403	fold.c	FUNCTION_16	FOR_1	IF_1
0x68e	        0x488d55e8	                   lea rdx, [rbp - 0x18]	       404	fold.c	FUNCTION_16	FOR_1	CALL_1
0x692	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       404	fold.c	FUNCTION_16	FOR_1	CALL_1
0x696	      0xbe00000000	                              mov esi, 0	       404	fold.c	FUNCTION_16	FOR_1	CALL_1
0x69b	          0x4889c7	                            mov rdi, rax	       404	fold.c	FUNCTION_16	FOR_1	CALL_1
0x69e	      0xe800000000	                          call 0x40006e3	       404	fold.c	FUNCTION_16	FOR_1	CALL_1
0x6a3	        0x488d4de4	                   lea rcx, [rbp - 0x1c]	       405	fold.c	FUNCTION_16	FOR_1	CALL_2
0x6a7	          0x8b55c8	             mov edx, dword [rbp - 0x38]	       405	fold.c	FUNCTION_16	FOR_1	CALL_2
0x6aa	          0x8b75cc	             mov esi, dword [rbp - 0x34]	       405	fold.c	FUNCTION_16	FOR_1	CALL_2
0x6ad	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       405	fold.c	FUNCTION_16	FOR_1	CALL_2
0x6b1	          0x4889c7	                            mov rdi, rax	       405	fold.c	FUNCTION_16	FOR_1	CALL_2
0x6b4	      0xe8a8170000	                  call sym.setManualFold	       405	fold.c	FUNCTION_16	FOR_1	CALL_2
0x6b9	        0x837dcc00	               cmp dword [rbp - 0x34], 0	       408	fold.c	FUNCTION_16	FOR_1	IF_2
0x6bd	            0x751b	                           jne 0x400071a	       408	fold.c	FUNCTION_16	FOR_1	IF_2
0x6bf	        0x837dc800	               cmp dword [rbp - 0x38], 0	       408	fold.c	FUNCTION_16	FOR_1	IF_2
0x6c3	            0x7515	                           jne 0x400071a	       408	fold.c	FUNCTION_16	FOR_1	IF_2
0x6c5	        0x488d55e8	                   lea rdx, [rbp - 0x18]	       409	fold.c	FUNCTION_16	FOR_1	CALL_3
0x6c9	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       409	fold.c	FUNCTION_16	FOR_1	CALL_3
0x6cd	      0xbe00000000	                              mov esi, 0	       409	fold.c	FUNCTION_16	FOR_1	CALL_3
0x6d2	          0x4889c7	                            mov rdi, rax	       409	fold.c	FUNCTION_16	FOR_1	CALL_3
0x6d5	      0xe800000000	                          call 0x400071a	       409	fold.c	FUNCTION_16	FOR_1	CALL_3
0x6da	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       398	fold.c	FUNCTION_16	FOR_1
0x6de	        0x4883c001	                              add rax, 1	       398	fold.c	FUNCTION_16	FOR_1
0x6e2	        0x488945f0	             mov qword [rbp - 0x10], rax	       398	fold.c	FUNCTION_16	FOR_1
0x6e6	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       398	fold.c	FUNCTION_16	FOR_1
0x6ea	        0x483b45d0	             cmp rax, qword [rbp - 0x30]	       398	fold.c	FUNCTION_16	FOR_1
0x6ee	            0x7e8a	                           jle 0x40006ba	       398	fold.c	FUNCTION_16	FOR_1
0x6f0	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	       411	fold.c	FUNCTION_16	IF_3
0x6f3	            0x85c0	                           test eax, eax	       411	fold.c	FUNCTION_16	IF_3
0x6f5	            0x7517	                           jne 0x400074e	       411	fold.c	FUNCTION_16	IF_3
0x6f7	    0x488b05000000	            mov rax, qword [0x0400073e] 	       412	fold.c	FUNCTION_16	CALL_5
0x6fe	          0x4889c7	                            mov rdi, rax	       412	fold.c	FUNCTION_16	CALL_5
0x701	      0xe800000000	                          call 0x4000746	       412	fold.c	FUNCTION_16	CALL_5
0x706	          0x4889c7	                            mov rdi, rax	       412	fold.c	FUNCTION_16	CALL_5
0x709	      0xe800000000	                          call 0x400074e	       412	fold.c	FUNCTION_16	CALL_5
0x70e	        0x837dc400	               cmp dword [rbp - 0x3c], 0	       414	fold.c	FUNCTION_16	IF_4
0x712	            0x740a	                            je 0x400075e	       414	fold.c	FUNCTION_16	IF_4
0x714	      0xbf14000000	                           mov edi, 0x14	       415	fold.c	FUNCTION_16	CALL_6
0x719	      0xe800000000	                          call 0x400075e	       415	fold.c	FUNCTION_16	CALL_6
0x71e	              0x90	                                     nop	       416	fold.c	FUNCTION_16
0x71f	        0x488b45f8	                mov rax, qword [rbp - 8]	       416	fold.c	FUNCTION_16
0x723	    0x644833042528	                xor rax, qword fs:[0x28]	       416	fold.c	FUNCTION_16
0x72c	            0x7405	                            je 0x4000773	       416	fold.c	FUNCTION_16
0x72e	      0xe800000000	                          call 0x4000773	       416	fold.c	FUNCTION_16
0x733	              0xc9	                                   leave	       416	fold.c	FUNCTION_16
0x734	              0xc3	                                     ret	       416	fold.c	FUNCTION_16
foldOpenNested	SWITCH,0:ELSE,0:DO,0:FOR,1:WHILE,0:IF,0:functions,0:CALL,1	38
0x222d	              0x55	                                push rbp	      1379	fold.c	FUNCTION_42
0x222e	          0x4889e5	                            mov rbp, rsp	      1379	fold.c	FUNCTION_42
0x2231	        0x4883ec20	                           sub rsp, 0x20	      1379	fold.c	FUNCTION_42
0x2235	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1379	fold.c	FUNCTION_42
0x2239	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1383	fold.c	FUNCTION_42
0x223d	        0x488b4020	            mov rax, qword [rax + 0x20] 	      1383	fold.c	FUNCTION_42
0x2241	        0x488945f8	                mov qword [rbp - 8], rax	      1383	fold.c	FUNCTION_42
0x2245	    0xc745f4000000	                mov dword [rbp - 0xc], 0	      1384	fold.c	FUNCTION_42	FOR_1
0x224c	            0xeb4a	                           jmp 0x40022d8	      1384	fold.c	FUNCTION_42	FOR_1
0x224e	          0x8b45f4	              mov eax, dword [rbp - 0xc]	      1386	fold.c	FUNCTION_42	FOR_1	CALL_1
0x2251	          0x4863d0	                         movsxd rdx, eax	      1386	fold.c	FUNCTION_42	FOR_1	CALL_1
0x2254	          0x4889d0	                            mov rax, rdx	      1386	fold.c	FUNCTION_42	FOR_1	CALL_1
0x2257	          0x4801c0	                            add rax, rax	      1386	fold.c	FUNCTION_42	FOR_1	CALL_1
0x225a	          0x4801d0	                            add rax, rdx	      1386	fold.c	FUNCTION_42	FOR_1	CALL_1
0x225d	        0x48c1e004	                              shl rax, 4	      1386	fold.c	FUNCTION_42	FOR_1	CALL_1
0x2261	          0x4889c2	                            mov rdx, rax	      1386	fold.c	FUNCTION_42	FOR_1	CALL_1
0x2264	        0x488b45f8	                mov rax, qword [rbp - 8]	      1386	fold.c	FUNCTION_42	FOR_1	CALL_1
0x2268	          0x4801d0	                            add rax, rdx	      1386	fold.c	FUNCTION_42	FOR_1	CALL_1
0x226b	          0x4889c7	                            mov rdi, rax	      1386	fold.c	FUNCTION_42	FOR_1	CALL_1
0x226e	      0xe8baffffff	                 call sym.foldOpenNested	      1386	fold.c	FUNCTION_42	FOR_1	CALL_1
0x2273	          0x8b45f4	              mov eax, dword [rbp - 0xc]	      1387	fold.c	FUNCTION_42	FOR_1
0x2276	          0x4863d0	                         movsxd rdx, eax	      1387	fold.c	FUNCTION_42	FOR_1
0x2279	          0x4889d0	                            mov rax, rdx	      1387	fold.c	FUNCTION_42	FOR_1
0x227c	          0x4801c0	                            add rax, rax	      1387	fold.c	FUNCTION_42	FOR_1
0x227f	          0x4801d0	                            add rax, rdx	      1387	fold.c	FUNCTION_42	FOR_1
0x2282	        0x48c1e004	                              shl rax, 4	      1387	fold.c	FUNCTION_42	FOR_1
0x2286	          0x4889c2	                            mov rdx, rax	      1387	fold.c	FUNCTION_42	FOR_1
0x2289	        0x488b45f8	                mov rax, qword [rbp - 8]	      1387	fold.c	FUNCTION_42	FOR_1
0x228d	          0x4801d0	                            add rax, rdx	      1387	fold.c	FUNCTION_42	FOR_1
0x2290	        0xc6402800	                mov byte [rax + 0x28], 0	      1387	fold.c	FUNCTION_42	FOR_1
0x2294	        0x8345f401	                add dword [rbp - 0xc], 1	      1384	fold.c	FUNCTION_42	FOR_1
0x2298	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1384	fold.c	FUNCTION_42	FOR_1
0x229c	          0x8b4010	            mov eax, dword [rax + 0x10] 	      1384	fold.c	FUNCTION_42	FOR_1
0x229f	          0x3b45f4	              cmp eax, dword [rbp - 0xc]	      1384	fold.c	FUNCTION_42	FOR_1
0x22a2	            0x7faa	                            jg 0x400228e	      1384	fold.c	FUNCTION_42	FOR_1
0x22a4	              0x90	                                     nop	      1389	fold.c	FUNCTION_42
0x22a5	              0xc9	                                   leave	      1389	fold.c	FUNCTION_42
0x22a6	              0xc3	                                     ret	      1389	fold.c	FUNCTION_42
foldSplit	SWITCH,0:ELSE,0:DO,0:FOR,1:WHILE,0:IF,2:functions,0:CALL,3	191
0x4f89	              0x55	                                push rbp	      2857	fold.c	FUNCTION_61
0x4f8a	          0x4889e5	                            mov rbp, rsp	      2857	fold.c	FUNCTION_61
0x4f8d	        0x4883ec50	                           sub rsp, 0x50	      2857	fold.c	FUNCTION_61
0x4f91	        0x48897dc8	             mov qword [rbp - 0x38], rdi	      2857	fold.c	FUNCTION_61
0x4f95	          0x8975c4	             mov dword [rbp - 0x3c], esi	      2857	fold.c	FUNCTION_61
0x4f98	        0x488955b8	             mov qword [rbp - 0x48], rdx	      2857	fold.c	FUNCTION_61
0x4f9c	        0x48894db0	             mov qword [rbp - 0x50], rcx	      2857	fold.c	FUNCTION_61
0x4fa0	    0x64488b042528	                mov rax, qword fs:[0x28]	      2857	fold.c	FUNCTION_61
0x4fa9	        0x488945f8	                mov qword [rbp - 8], rax	      2857	fold.c	FUNCTION_61
0x4fad	            0x31c0	                            xor eax, eax	      2857	fold.c	FUNCTION_61
0x4faf	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	      2866	fold.c	FUNCTION_61	IF_1	CALL_1
0x4fb2	          0x8d5001	                      lea edx, [rax + 1]	      2866	fold.c	FUNCTION_61	IF_1	CALL_1
0x4fb5	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2866	fold.c	FUNCTION_61	IF_1	CALL_1
0x4fb9	            0x89d6	                            mov esi, edx	      2866	fold.c	FUNCTION_61	IF_1	CALL_1
0x4fbb	          0x4889c7	                            mov rdi, rax	      2866	fold.c	FUNCTION_61	IF_1	CALL_1
0x4fbe	      0xe807ffffff	                     call sym.foldInsert	      2866	fold.c	FUNCTION_61	IF_1	CALL_1
0x4fc3	            0x85c0	                           test eax, eax	      2866	fold.c	FUNCTION_61	IF_1	CALL_1
0x4fc5	     0xf845a020000	                            je 0x4005265	      2866	fold.c	FUNCTION_61	IF_1	CALL_1
0x4fcb	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2868	fold.c	FUNCTION_61
0x4fcf	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      2868	fold.c	FUNCTION_61
0x4fd3	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	      2868	fold.c	FUNCTION_61
0x4fd6	          0x4863d0	                         movsxd rdx, eax	      2868	fold.c	FUNCTION_61
0x4fd9	          0x4889d0	                            mov rax, rdx	      2868	fold.c	FUNCTION_61
0x4fdc	          0x4801c0	                            add rax, rax	      2868	fold.c	FUNCTION_61
0x4fdf	          0x4801d0	                            add rax, rdx	      2868	fold.c	FUNCTION_61
0x4fe2	        0x48c1e004	                              shl rax, 4	      2868	fold.c	FUNCTION_61
0x4fe6	          0x4801c8	                            add rax, rcx	      2868	fold.c	FUNCTION_61
0x4fe9	        0x488945e0	             mov qword [rbp - 0x20], rax	      2868	fold.c	FUNCTION_61
0x4fed	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2869	fold.c	FUNCTION_61
0x4ff1	        0x4883c030	                           add rax, 0x30	      2869	fold.c	FUNCTION_61
0x4ff5	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	      2869	fold.c	FUNCTION_61
0x4ff9	        0x4883c201	                              add rdx, 1	      2869	fold.c	FUNCTION_61
0x4ffd	          0x488910	                    mov qword [rax], rdx	      2869	fold.c	FUNCTION_61
0x5000	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2870	fold.c	FUNCTION_61
0x5004	        0x488d5030	                   lea rdx, [rax + 0x30]	      2870	fold.c	FUNCTION_61
0x5008	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2870	fold.c	FUNCTION_61
0x500c	        0x488b4808	                mov rcx, qword [rax + 8]	      2870	fold.c	FUNCTION_61
0x5010	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2870	fold.c	FUNCTION_61
0x5014	        0x4883c030	                           add rax, 0x30	      2870	fold.c	FUNCTION_61
0x5018	          0x488b30	                    mov rsi, qword [rax]	      2870	fold.c	FUNCTION_61
0x501b	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2870	fold.c	FUNCTION_61
0x501f	          0x488b00	                    mov rax, qword [rax]	      2870	fold.c	FUNCTION_61
0x5022	          0x4829c6	                            sub rsi, rax	      2870	fold.c	FUNCTION_61
0x5025	          0x4889f0	                            mov rax, rsi	      2870	fold.c	FUNCTION_61
0x5028	          0x4829c1	                            sub rcx, rax	      2870	fold.c	FUNCTION_61
0x502b	          0x4889c8	                            mov rax, rcx	      2870	fold.c	FUNCTION_61
0x502e	        0x48894208	                mov qword [rdx + 8], rax	      2870	fold.c	FUNCTION_61
0x5032	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2871	fold.c	FUNCTION_61
0x5036	        0x488d5030	                   lea rdx, [rax + 0x30]	      2871	fold.c	FUNCTION_61
0x503a	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2871	fold.c	FUNCTION_61
0x503e	         0xfb64028	           movzx eax, byte [rax + 0x28] 	      2871	fold.c	FUNCTION_61
0x5042	          0x884228	               mov byte [rdx + 0x28], al	      2871	fold.c	FUNCTION_61
0x5045	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2872	fold.c	FUNCTION_61
0x5049	        0x4883c030	                           add rax, 0x30	      2872	fold.c	FUNCTION_61
0x504d	        0xc6402902	                mov byte [rax + 0x29], 2	      2872	fold.c	FUNCTION_61
0x5051	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2873	fold.c	FUNCTION_61
0x5055	        0xc6402902	                mov byte [rax + 0x29], 2	      2873	fold.c	FUNCTION_61
0x5059	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2877	fold.c	FUNCTION_61
0x505d	        0x4883c010	                           add rax, 0x10	      2877	fold.c	FUNCTION_61
0x5061	        0x488945e8	             mov qword [rbp - 0x18], rax	      2877	fold.c	FUNCTION_61
0x5065	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2878	fold.c	FUNCTION_61
0x5069	        0x4883c030	                           add rax, 0x30	      2878	fold.c	FUNCTION_61
0x506d	        0x4883c010	                           add rax, 0x10	      2878	fold.c	FUNCTION_61
0x5071	        0x488945f0	             mov qword [rbp - 0x10], rax	      2878	fold.c	FUNCTION_61
0x5075	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      2879	fold.c	FUNCTION_61	CALL_2
0x5079	        0x488d5001	                      lea rdx, [rax + 1]	      2879	fold.c	FUNCTION_61	CALL_2
0x507d	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2879	fold.c	FUNCTION_61	CALL_2
0x5081	          0x488b00	                    mov rax, qword [rax]	      2879	fold.c	FUNCTION_61	CALL_2
0x5084	          0x4889d1	                            mov rcx, rdx	      2879	fold.c	FUNCTION_61	CALL_2
0x5087	          0x4829c1	                            sub rcx, rax	      2879	fold.c	FUNCTION_61	CALL_2
0x508a	        0x488d55d8	                   lea rdx, [rbp - 0x28]	      2879	fold.c	FUNCTION_61	CALL_2
0x508e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2879	fold.c	FUNCTION_61	CALL_2
0x5092	          0x4889ce	                            mov rsi, rcx	      2879	fold.c	FUNCTION_61	CALL_2
0x5095	          0x4889c7	                            mov rdi, rax	      2879	fold.c	FUNCTION_61	CALL_2
0x5098	      0xe808cbffff	                       call sym.foldFind	      2879	fold.c	FUNCTION_61	CALL_2
0x509d	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2880	fold.c	FUNCTION_61
0x50a1	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      2880	fold.c	FUNCTION_61
0x50a5	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2880	fold.c	FUNCTION_61
0x50a9	            0x8b00	                    mov eax, dword [rax]	      2880	fold.c	FUNCTION_61
0x50ab	          0x4863d0	                         movsxd rdx, eax	      2880	fold.c	FUNCTION_61
0x50ae	          0x4889d0	                            mov rax, rdx	      2880	fold.c	FUNCTION_61
0x50b1	          0x4801c0	                            add rax, rax	      2880	fold.c	FUNCTION_61
0x50b4	          0x4801d0	                            add rax, rdx	      2880	fold.c	FUNCTION_61
0x50b7	        0x48c1e004	                              shl rax, 4	      2880	fold.c	FUNCTION_61
0x50bb	          0x4801c8	                            add rax, rcx	      2880	fold.c	FUNCTION_61
0x50be	          0x4889c2	                            mov rdx, rax	      2880	fold.c	FUNCTION_61
0x50c1	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      2880	fold.c	FUNCTION_61
0x50c5	          0x4829c2	                            sub rdx, rax	      2880	fold.c	FUNCTION_61
0x50c8	          0x4889d0	                            mov rax, rdx	      2880	fold.c	FUNCTION_61
0x50cb	        0x48c1f804	                              sar rax, 4	      2880	fold.c	FUNCTION_61
0x50cf	          0x4889c2	                            mov rdx, rax	      2880	fold.c	FUNCTION_61
0x50d2	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	      2880	fold.c	FUNCTION_61
0x50dc	        0x480fafc2	                           imul rax, rdx	      2880	fold.c	FUNCTION_61
0x50e0	          0x8945d4	             mov dword [rbp - 0x2c], eax	      2880	fold.c	FUNCTION_61
0x50e3	        0x837dd400	               cmp dword [rbp - 0x2c], 0	      2881	fold.c	FUNCTION_61	IF_2	CALL_3
0x50e7	     0xf8e16010000	                           jle 0x4005243	      2881	fold.c	FUNCTION_61	IF_2	CALL_3
0x50ed	          0x8b55d4	             mov edx, dword [rbp - 0x2c]	      2881	fold.c	FUNCTION_61	IF_2	CALL_3
0x50f0	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2881	fold.c	FUNCTION_61	IF_2	CALL_3
0x50f4	            0x89d6	                            mov esi, edx	      2881	fold.c	FUNCTION_61	IF_2	CALL_3
0x50f6	          0x4889c7	                            mov rdi, rax	      2881	fold.c	FUNCTION_61	IF_2	CALL_3
0x50f9	      0xe800000000	                          call 0x400513e	      2881	fold.c	FUNCTION_61	IF_2	CALL_3
0x50fe	          0x83f801	                              cmp eax, 1	      2881	fold.c	FUNCTION_61	IF_2	CALL_3
0x5101	     0xf85fc000000	                           jne 0x4005243	      2881	fold.c	FUNCTION_61	IF_2	CALL_3
0x5107	    0xc745d0000000	               mov dword [rbp - 0x30], 0	      2883	fold.c	FUNCTION_61	IF_2	FOR_1
0x510e	      0xe9ca000000	                           jmp 0x400521d	      2883	fold.c	FUNCTION_61	IF_2	FOR_1
0x5113	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x5117	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x511b	          0x8b45d0	             mov eax, dword [rbp - 0x30]	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x511e	          0x4863d0	                         movsxd rdx, eax	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x5121	          0x4889d0	                            mov rax, rdx	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x5124	          0x4801c0	                            add rax, rax	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x5127	          0x4801d0	                            add rax, rdx	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x512a	        0x48c1e004	                              shl rax, 4	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x512e	          0x4801c8	                            add rax, rcx	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x5131	        0x488b75d8	             mov rsi, qword [rbp - 0x28]	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x5135	          0x8b55d0	             mov edx, dword [rbp - 0x30]	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x5138	          0x4863ca	                         movsxd rcx, edx	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x513b	          0x4889ca	                            mov rdx, rcx	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x513e	          0x4801d2	                            add rdx, rdx	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x5141	          0x4801ca	                            add rdx, rcx	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x5144	        0x48c1e204	                              shl rdx, 4	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x5148	          0x4801f2	                            add rdx, rsi	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x514b	          0x488b0a	                    mov rcx, qword [rdx]	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x514e	          0x488908	                    mov qword [rax], rcx	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x5151	        0x488b4a08	                mov rcx, qword [rdx + 8]	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x5155	        0x48894808	                mov qword [rax + 8], rcx	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x5159	        0x488b4a10	            mov rcx, qword [rdx + 0x10] 	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x515d	        0x48894810	             mov qword [rax + 0x10], rcx	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x5161	        0x488b4a18	            mov rcx, qword [rdx + 0x18] 	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x5165	        0x48894818	             mov qword [rax + 0x18], rcx	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x5169	        0x488b4a20	            mov rcx, qword [rdx + 0x20] 	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x516d	        0x48894820	             mov qword [rax + 0x20], rcx	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x5171	        0x488b5228	            mov rdx, qword [rdx + 0x28] 	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x5175	        0x48895028	             mov qword [rax + 0x28], rdx	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x5179	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2886	fold.c	FUNCTION_61	IF_2	FOR_1
0x517d	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      2886	fold.c	FUNCTION_61	IF_2	FOR_1
0x5181	          0x8b45d0	             mov eax, dword [rbp - 0x30]	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x5184	          0x4863d0	                         movsxd rdx, eax	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x5187	          0x4889d0	                            mov rax, rdx	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x518a	          0x4801c0	                            add rax, rax	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x518d	          0x4801d0	                            add rax, rdx	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x5190	        0x48c1e004	                              shl rax, 4	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x5194	          0x4801c1	                            add rcx, rax	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x5197	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2886	fold.c	FUNCTION_61	IF_2	FOR_1
0x519b	        0x488b7010	            mov rsi, qword [rax + 0x10] 	      2886	fold.c	FUNCTION_61	IF_2	FOR_1
0x519f	          0x8b45d0	             mov eax, dword [rbp - 0x30]	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x51a2	          0x4863d0	                         movsxd rdx, eax	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x51a5	          0x4889d0	                            mov rax, rdx	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x51a8	          0x4801c0	                            add rax, rax	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x51ab	          0x4801d0	                            add rax, rdx	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x51ae	        0x48c1e004	                              shl rax, 4	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x51b2	          0x4801f0	                            add rax, rsi	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x51b5	          0x488b10	                    mov rdx, qword [rax]	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x51b8	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x51bc	        0x4883c030	                           add rax, 0x30	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x51c0	          0x488b30	                    mov rsi, qword [rax]	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x51c3	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x51c7	          0x488b00	                    mov rax, qword [rax]	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x51ca	          0x4829c6	                            sub rsi, rax	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x51cd	          0x4889f0	                            mov rax, rsi	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x51d0	          0x4829c2	                            sub rdx, rax	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x51d3	          0x4889d0	                            mov rax, rdx	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x51d6	          0x488901	                    mov qword [rcx], rax	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x51d9	        0x8345d001	               add dword [rbp - 0x30], 1	      2883	fold.c	FUNCTION_61	IF_2	FOR_1
0x51dd	          0x8b45d0	             mov eax, dword [rbp - 0x30]	      2883	fold.c	FUNCTION_61	IF_2	FOR_1
0x51e0	          0x3b45d4	             cmp eax, dword [rbp - 0x2c]	      2883	fold.c	FUNCTION_61	IF_2	FOR_1
0x51e3	     0xf8c2affffff	                            jl 0x4005153	      2883	fold.c	FUNCTION_61	IF_2	FOR_1
0x51e9	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2889	fold.c	FUNCTION_61	IF_2
0x51ed	          0x8b55d4	             mov edx, dword [rbp - 0x2c]	      2889	fold.c	FUNCTION_61	IF_2
0x51f0	            0x8910	                    mov dword [rax], edx	      2889	fold.c	FUNCTION_61	IF_2
0x51f2	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2890	fold.c	FUNCTION_61	IF_2
0x51f6	            0x8b00	                    mov eax, dword [rax]	      2890	fold.c	FUNCTION_61	IF_2
0x51f8	          0x2b45d4	             sub eax, dword [rbp - 0x2c]	      2890	fold.c	FUNCTION_61	IF_2
0x51fb	            0x89c2	                            mov edx, eax	      2890	fold.c	FUNCTION_61	IF_2
0x51fd	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2890	fold.c	FUNCTION_61	IF_2
0x5201	            0x8910	                    mov dword [rax], edx	      2890	fold.c	FUNCTION_61	IF_2
0x5203	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2892	fold.c	FUNCTION_61
0x5207	          0x488b00	                    mov rax, qword [rax]	      2892	fold.c	FUNCTION_61
0x520a	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      2892	fold.c	FUNCTION_61
0x520e	          0x4829c2	                            sub rdx, rax	      2892	fold.c	FUNCTION_61
0x5211	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2892	fold.c	FUNCTION_61
0x5215	        0x48895008	                mov qword [rax + 8], rdx	      2892	fold.c	FUNCTION_61
0x5219	    0xc70500000000	               mov dword [0x04005263], 1	      2893	fold.c	FUNCTION_61
0x5223	            0xeb01	                           jmp 0x4005266	      2893	fold.c	FUNCTION_61
0x5225	              0x90	                                     nop	      2867	fold.c	FUNCTION_61	IF_1
0x5226	        0x488b45f8	                mov rax, qword [rbp - 8]	      2894	fold.c	FUNCTION_61
0x522a	    0x644833042528	                xor rax, qword fs:[0x28]	      2894	fold.c	FUNCTION_61
0x5233	            0x7405	                            je 0x400527a	      2894	fold.c	FUNCTION_61
0x5235	      0xe800000000	                          call 0x400527a	      2894	fold.c	FUNCTION_61
0x523a	              0xc9	                                   leave	      2894	fold.c	FUNCTION_61
0x523b	              0xc3	                                     ret	      2894	fold.c	FUNCTION_61
foldAddMarker	SWITCH,0:ELSE,1:DO,0:FOR,0:WHILE,0:IF,3:functions,0:CALL,13	135
0x2cb3	              0x55	                                push rbp	      1756	fold.c	FUNCTION_53
0x2cb4	          0x4889e5	                            mov rbp, rsp	      1756	fold.c	FUNCTION_53
0x2cb7	              0x53	                                push rbx	      1756	fold.c	FUNCTION_53
0x2cb8	        0x4883ec58	                           sub rsp, 0x58	      1756	fold.c	FUNCTION_53
0x2cbc	        0x48897db8	             mov qword [rbp - 0x48], rdi	      1756	fold.c	FUNCTION_53
0x2cc0	        0x488975b0	             mov qword [rbp - 0x50], rsi	      1756	fold.c	FUNCTION_53
0x2cc4	          0x8955ac	             mov dword [rbp - 0x54], edx	      1756	fold.c	FUNCTION_53
0x2cc7	    0x64488b042528	                mov rax, qword fs:[0x28]	      1756	fold.c	FUNCTION_53
0x2cd0	        0x488945e8	             mov qword [rbp - 0x18], rax	      1756	fold.c	FUNCTION_53
0x2cd4	            0x31c0	                            xor eax, eax	      1756	fold.c	FUNCTION_53
0x2cd6	    0x488b05000000	            mov rax, qword [0x04002d1d] 	      1757	fold.c	FUNCTION_53
0x2cdd	    0x488b80381400	          mov rax, qword [rax + 0x1438] 	      1757	fold.c	FUNCTION_53
0x2ce4	        0x488945c8	             mov qword [rbp - 0x38], rax	      1757	fold.c	FUNCTION_53
0x2ce8	    0x488b05000000	            mov rax, qword [0x04002d2f] 	      1761	fold.c	FUNCTION_53	CALL_1
0x2cef	    0x488b80381400	          mov rax, qword [rax + 0x1438] 	      1761	fold.c	FUNCTION_53	CALL_1
0x2cf6	      0xbe00000000	                              mov esi, 0	      1761	fold.c	FUNCTION_53	CALL_1
0x2cfb	          0x4889c7	                            mov rdi, rax	      1761	fold.c	FUNCTION_53	CALL_1
0x2cfe	      0xe800000000	                          call 0x4002d43	      1761	fold.c	FUNCTION_53	CALL_1
0x2d03	        0x488945d0	             mov qword [rbp - 0x30], rax	      1761	fold.c	FUNCTION_53	CALL_1
0x2d07	    0xc745c0000000	               mov dword [rbp - 0x40], 0	      1762	fold.c	FUNCTION_53
0x2d0e	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1765	fold.c	FUNCTION_53	CALL_2
0x2d12	          0x4889c7	                            mov rdi, rax	      1765	fold.c	FUNCTION_53	CALL_2
0x2d15	      0xe800000000	                          call 0x4002d5a	      1765	fold.c	FUNCTION_53	CALL_2
0x2d1a	        0x488945d8	             mov qword [rbp - 0x28], rax	      1765	fold.c	FUNCTION_53	CALL_2
0x2d1e	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1766	fold.c	FUNCTION_53	CALL_3
0x2d22	          0x4889c7	                            mov rdi, rax	      1766	fold.c	FUNCTION_53	CALL_3
0x2d25	      0xe800000000	                          call 0x4002d6a	      1766	fold.c	FUNCTION_53	CALL_3
0x2d2a	          0x8945c4	             mov dword [rbp - 0x3c], eax	      1766	fold.c	FUNCTION_53	CALL_3
0x2d2d	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1768	fold.c	FUNCTION_53	IF_1	CALL_4
0x2d31	        0x488d5001	                      lea rdx, [rax + 1]	      1768	fold.c	FUNCTION_53	IF_1	CALL_4
0x2d35	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1768	fold.c	FUNCTION_53	IF_1	CALL_4
0x2d39	        0x4883e801	                              sub rax, 1	      1768	fold.c	FUNCTION_53	IF_1	CALL_4
0x2d3d	          0x4889d6	                            mov rsi, rdx	      1768	fold.c	FUNCTION_53	IF_1	CALL_4
0x2d40	          0x4889c7	                            mov rdi, rax	      1768	fold.c	FUNCTION_53	IF_1	CALL_4
0x2d43	      0xe800000000	                          call 0x4002d88	      1768	fold.c	FUNCTION_53	IF_1	CALL_4
0x2d48	          0x83f801	                              cmp eax, 1	      1768	fold.c	FUNCTION_53	IF_1	CALL_4
0x2d4b	     0xf8537010000	                           jne 0x4002ec8	      1768	fold.c	FUNCTION_53	IF_1	CALL_4
0x2d51	        0x488d55c0	                   lea rdx, [rbp - 0x40]	      1772	fold.c	FUNCTION_53	IF_1	CALL_5
0x2d55	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1772	fold.c	FUNCTION_53	IF_1	CALL_5
0x2d59	          0x4889d1	                            mov rcx, rdx	      1772	fold.c	FUNCTION_53	IF_1	CALL_5
0x2d5c	      0xba00000000	                              mov edx, 0	      1772	fold.c	FUNCTION_53	IF_1	CALL_5
0x2d61	      0xbe00000000	                              mov esi, 0	      1772	fold.c	FUNCTION_53	IF_1	CALL_5
0x2d66	          0x4889c7	                            mov rdi, rax	      1772	fold.c	FUNCTION_53	IF_1	CALL_5
0x2d69	      0xe800000000	                          call 0x4002dae	      1772	fold.c	FUNCTION_53	IF_1	CALL_5
0x2d6e	          0x8b55c4	             mov edx, dword [rbp - 0x3c]	      1774	fold.c	FUNCTION_53	IF_1	CALL_7
0x2d71	          0x8b45ac	             mov eax, dword [rbp - 0x54]	      1774	fold.c	FUNCTION_53	IF_1	CALL_7
0x2d74	             0x1d0	                            add eax, edx	      1774	fold.c	FUNCTION_53	IF_1	CALL_7
0x2d76	            0x89c3	                            mov ebx, eax	      1774	fold.c	FUNCTION_53	IF_1	CALL_7
0x2d78	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1774	fold.c	FUNCTION_53	IF_1	CALL_7
0x2d7c	          0x4889c7	                            mov rdi, rax	      1774	fold.c	FUNCTION_53	IF_1	CALL_7
0x2d7f	      0xe800000000	                          call 0x4002dc4	      1774	fold.c	FUNCTION_53	IF_1	CALL_7
0x2d84	             0x1d8	                            add eax, ebx	      1774	fold.c	FUNCTION_53	IF_1	CALL_7
0x2d86	          0x83c001	                              add eax, 1	      1774	fold.c	FUNCTION_53	IF_1	CALL_7
0x2d89	            0x89c7	                            mov edi, eax	      1774	fold.c	FUNCTION_53	IF_1	CALL_7
0x2d8b	      0xe800000000	                          call 0x4002dd0	      1774	fold.c	FUNCTION_53	IF_1	CALL_7
0x2d90	        0x488945e0	             mov qword [rbp - 0x20], rax	      1774	fold.c	FUNCTION_53	IF_1	CALL_7
0x2d94	      0x48837de000	               cmp qword [rbp - 0x20], 0	      1775	fold.c	FUNCTION_53	IF_1	IF_2
0x2d99	     0xf84e8000000	                            je 0x4002ec7	      1775	fold.c	FUNCTION_53	IF_1	IF_2
0x2d9f	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      1777	fold.c	FUNCTION_53	IF_1	CALL_8
0x2da3	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1777	fold.c	FUNCTION_53	IF_1	CALL_8
0x2da7	          0x4889d6	                            mov rsi, rdx	      1777	fold.c	FUNCTION_53	IF_1	CALL_8
0x2daa	          0x4889c7	                            mov rdi, rax	      1777	fold.c	FUNCTION_53	IF_1	CALL_8
0x2dad	      0xe800000000	                          call 0x4002df2	      1777	fold.c	FUNCTION_53	IF_1	CALL_8
0x2db2	      0x48837dd000	               cmp qword [rbp - 0x30], 0	      1779	fold.c	FUNCTION_53	IF_1	IF_3
0x2db7	            0x7407	                            je 0x4002e00	      1779	fold.c	FUNCTION_53	IF_1	IF_3
0x2db9	          0x8b45c0	             mov eax, dword [rbp - 0x40]	      1779	fold.c	FUNCTION_53	IF_1	IF_3
0x2dbc	            0x85c0	                           test eax, eax	      1779	fold.c	FUNCTION_53	IF_1	IF_3
0x2dbe	            0x7427	                            je 0x4002e27	      1779	fold.c	FUNCTION_53	IF_1	IF_3
0x2dc0	          0x8b45ac	             mov eax, dword [rbp - 0x54]	      1780	fold.c	FUNCTION_53	IF_1	CALL_9
0x2dc3	          0x4863d0	                         movsxd rdx, eax	      1780	fold.c	FUNCTION_53	IF_1	CALL_9
0x2dc6	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	      1780	fold.c	FUNCTION_53	IF_1	CALL_9
0x2dc9	          0x4863c8	                         movsxd rcx, eax	      1780	fold.c	FUNCTION_53	IF_1	CALL_9
0x2dcc	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1780	fold.c	FUNCTION_53	IF_1	CALL_9
0x2dd0	          0x4801c1	                            add rcx, rax	      1780	fold.c	FUNCTION_53	IF_1	CALL_9
0x2dd3	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1780	fold.c	FUNCTION_53	IF_1	CALL_9
0x2dd7	          0x4889c6	                            mov rsi, rax	      1780	fold.c	FUNCTION_53	IF_1	CALL_9
0x2dda	          0x4889cf	                            mov rdi, rcx	      1780	fold.c	FUNCTION_53	IF_1	CALL_9
0x2ddd	      0xe800000000	                          call 0x4002e22	      1780	fold.c	FUNCTION_53	IF_1	CALL_9
0x2de2	      0xe986000000	                           jmp 0x4002ead	      1780	fold.c	FUNCTION_53	IF_1	CALL_9
0x2de7	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	      1783	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_10
0x2dea	          0x4863d0	                         movsxd rdx, eax	      1783	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_10
0x2ded	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1783	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_10
0x2df1	          0x4801c2	                            add rdx, rax	      1783	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_10
0x2df4	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1783	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_10
0x2df8	          0x4889c6	                            mov rsi, rax	      1783	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_10
0x2dfb	          0x4889d7	                            mov rdi, rdx	      1783	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_10
0x2dfe	      0xe800000000	                          call 0x4002e43	      1783	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_10
0x2e03	          0x8b45ac	             mov eax, dword [rbp - 0x54]	      1784	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_11
0x2e06	          0x4863d0	                         movsxd rdx, eax	      1784	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_11
0x2e09	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	      1784	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_11
0x2e0c	            0x4898	                                    cdqe	      1784	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_11
0x2e0e	        0x488b75d0	             mov rsi, qword [rbp - 0x30]	      1784	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_11
0x2e12	        0x488b4dc8	             mov rcx, qword [rbp - 0x38]	      1784	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_11
0x2e16	          0x4829ce	                            sub rsi, rcx	      1784	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_11
0x2e19	          0x4889f1	                            mov rcx, rsi	      1784	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_11
0x2e1c	          0x4801c1	                            add rcx, rax	      1784	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_11
0x2e1f	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1784	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_11
0x2e23	          0x4801c1	                            add rcx, rax	      1784	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_11
0x2e26	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1784	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_11
0x2e2a	          0x4889c6	                            mov rsi, rax	      1784	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_11
0x2e2d	          0x4889cf	                            mov rdi, rcx	      1784	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_11
0x2e30	      0xe800000000	                          call 0x4002e75	      1784	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_11
0x2e35	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1785	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_12
0x2e39	        0x488d5002	                      lea rdx, [rax + 2]	      1785	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_12
0x2e3d	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	      1785	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_12
0x2e40	            0x4898	                                    cdqe	      1785	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_12
0x2e42	        0x488b75d0	             mov rsi, qword [rbp - 0x30]	      1785	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_12
0x2e46	        0x488b4dc8	             mov rcx, qword [rbp - 0x38]	      1785	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_12
0x2e4a	          0x4829ce	                            sub rsi, rcx	      1785	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_12
0x2e4d	          0x4889f1	                            mov rcx, rsi	      1785	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_12
0x2e50	          0x4801c1	                            add rcx, rax	      1785	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_12
0x2e53	          0x8b45ac	             mov eax, dword [rbp - 0x54]	      1785	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_12
0x2e56	            0x4898	                                    cdqe	      1785	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_12
0x2e58	          0x4801c1	                            add rcx, rax	      1785	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_12
0x2e5b	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1785	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_12
0x2e5f	          0x4801c8	                            add rax, rcx	      1785	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_12
0x2e62	          0x4889d6	                            mov rsi, rdx	      1785	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_12
0x2e65	          0x4889c7	                            mov rdi, rax	      1785	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_12
0x2e68	      0xe800000000	                          call 0x4002ead	      1785	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_12
0x2e6d	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	      1788	fold.c	FUNCTION_53	IF_1	CALL_13
0x2e71	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1788	fold.c	FUNCTION_53	IF_1	CALL_13
0x2e75	      0xba00000000	                              mov edx, 0	      1788	fold.c	FUNCTION_53	IF_1	CALL_13
0x2e7a	          0x4889ce	                            mov rsi, rcx	      1788	fold.c	FUNCTION_53	IF_1	CALL_13
0x2e7d	          0x4889c7	                            mov rdi, rax	      1788	fold.c	FUNCTION_53	IF_1	CALL_13
0x2e80	      0xe800000000	                          call 0x4002ec5	      1788	fold.c	FUNCTION_53	IF_1	CALL_13
0x2e85	            0xeb01	                           jmp 0x4002ec8	      1788	fold.c	FUNCTION_53	IF_1	CALL_13
0x2e87	              0x90	                                     nop	      1776	fold.c	FUNCTION_53	IF_1	IF_2
0x2e88	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1790	fold.c	FUNCTION_53
0x2e8c	    0x644833042528	                xor rax, qword fs:[0x28]	      1790	fold.c	FUNCTION_53
0x2e95	            0x7405	                            je 0x4002edc	      1790	fold.c	FUNCTION_53
0x2e97	      0xe800000000	                          call 0x4002edc	      1790	fold.c	FUNCTION_53
0x2e9c	        0x4883c458	                           add rsp, 0x58	      1790	fold.c	FUNCTION_53
0x2ea0	              0x5b	                                 pop rbx	      1790	fold.c	FUNCTION_53
0x2ea1	              0x5d	                                 pop rbp	      1790	fold.c	FUNCTION_53
0x2ea2	              0xc3	                                     ret	      1790	fold.c	FUNCTION_53
foldUpdate	SWITCH,0:ELSE,0:DO,0:FOR,0:WHILE,1:IF,2:functions,0:CALL,7	87
0x1307	              0x55	                                push rbp	       810	fold.c	FUNCTION_28
0x1308	          0x4889e5	                            mov rbp, rsp	       810	fold.c	FUNCTION_28
0x130b	        0x4883ec40	                           sub rsp, 0x40	       810	fold.c	FUNCTION_28
0x130f	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       810	fold.c	FUNCTION_28
0x1313	        0x488975d0	             mov qword [rbp - 0x30], rsi	       810	fold.c	FUNCTION_28
0x1317	        0x488955c8	             mov qword [rbp - 0x38], rdx	       810	fold.c	FUNCTION_28
0x131b	    0x64488b042528	                mov rax, qword fs:[0x28]	       810	fold.c	FUNCTION_28
0x1324	        0x488945f8	                mov qword [rbp - 8], rax	       810	fold.c	FUNCTION_28
0x1328	            0x31c0	                            xor eax, eax	       810	fold.c	FUNCTION_28
0x132a	    0x8b0500000000	            mov eax, dword [0x04001370] 	       813	fold.c	FUNCTION_28	IF_1
0x1330	            0x85c0	                           test eax, eax	       813	fold.c	FUNCTION_28	IF_1
0x1332	     0xf8ffe000000	                            jg 0x4001476	       813	fold.c	FUNCTION_28	IF_1
0x1338	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       817	fold.c	FUNCTION_28	CALL_1
0x133c	    0x488d88080100	                  lea rcx, [rax + 0x108]	       817	fold.c	FUNCTION_28	CALL_1
0x1343	        0x488d55f0	                   lea rdx, [rbp - 0x10]	       817	fold.c	FUNCTION_28	CALL_1
0x1347	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       817	fold.c	FUNCTION_28	CALL_1
0x134b	          0x4889c6	                            mov rsi, rax	       817	fold.c	FUNCTION_28	CALL_1
0x134e	          0x4889cf	                            mov rdi, rcx	       817	fold.c	FUNCTION_28	CALL_1
0x1351	      0xe84f080000	                       call sym.foldFind	       817	fold.c	FUNCTION_28	CALL_1
0x1356	            0xeb14	                           jmp 0x40013ac	       818	fold.c	FUNCTION_28	WHILE_1
0x1358	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       821	fold.c	FUNCTION_28	WHILE_1
0x135c	        0xc6402902	                mov byte [rax + 0x29], 2	       821	fold.c	FUNCTION_28	WHILE_1
0x1360	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       822	fold.c	FUNCTION_28	WHILE_1
0x1364	        0x4883c030	                           add rax, 0x30	       822	fold.c	FUNCTION_28	WHILE_1
0x1368	        0x488945f0	             mov qword [rbp - 0x10], rax	       822	fold.c	FUNCTION_28	WHILE_1
0x136c	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       818	fold.c	FUNCTION_28	WHILE_1
0x1370	    0x488b88180100	           mov rcx, qword [rax + 0x118] 	       818	fold.c	FUNCTION_28	WHILE_1
0x1377	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       818	fold.c	FUNCTION_28	WHILE_1
0x137b	    0x8b8008010000	           mov eax, dword [rax + 0x108] 	       818	fold.c	FUNCTION_28	WHILE_1
0x1381	          0x4863d0	                         movsxd rdx, eax	       818	fold.c	FUNCTION_28	WHILE_1
0x1384	          0x4889d0	                            mov rax, rdx	       818	fold.c	FUNCTION_28	WHILE_1
0x1387	          0x4801c0	                            add rax, rax	       818	fold.c	FUNCTION_28	WHILE_1
0x138a	          0x4801d0	                            add rax, rdx	       818	fold.c	FUNCTION_28	WHILE_1
0x138d	        0x48c1e004	                              shl rax, 4	       818	fold.c	FUNCTION_28	WHILE_1
0x1391	        0x488d1401	                    lea rdx, [rcx + rax]	       818	fold.c	FUNCTION_28	WHILE_1
0x1395	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       818	fold.c	FUNCTION_28	WHILE_1
0x1399	          0x4839c2	                            cmp rdx, rax	       818	fold.c	FUNCTION_28	WHILE_1
0x139c	            0x760d	                           jbe 0x40013eb	       818	fold.c	FUNCTION_28	WHILE_1
0x139e	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       819	fold.c	FUNCTION_28	WHILE_1
0x13a2	          0x488b00	                    mov rax, qword [rax]	       819	fold.c	FUNCTION_28	WHILE_1
0x13a5	        0x483b45c8	             cmp rax, qword [rbp - 0x38]	       819	fold.c	FUNCTION_28	WHILE_1
0x13a9	            0x7cad	                            jl 0x4001398	       819	fold.c	FUNCTION_28	WHILE_1
0x13ab	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       825	fold.c	FUNCTION_28	IF_2	CALL_2
0x13af	          0x4889c7	                            mov rdi, rax	       825	fold.c	FUNCTION_28	IF_2	CALL_2
0x13b2	      0xe800000000	                          call 0x40013f7	       825	fold.c	FUNCTION_28	IF_2	CALL_2
0x13b7	            0x85c0	                           test eax, eax	       825	fold.c	FUNCTION_28	IF_2	CALL_2
0x13b9	            0x7540	                           jne 0x400143b	       825	fold.c	FUNCTION_28	IF_2	CALL_2
0x13bb	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       826	fold.c	FUNCTION_28	IF_2	CALL_3
0x13bf	          0x4889c7	                            mov rdi, rax	       826	fold.c	FUNCTION_28	IF_2	CALL_3
0x13c2	      0xe800000000	                          call 0x4001407	       826	fold.c	FUNCTION_28	IF_2	CALL_3
0x13c7	            0x85c0	                           test eax, eax	       826	fold.c	FUNCTION_28	IF_2	CALL_3
0x13c9	            0x7530	                           jne 0x400143b	       826	fold.c	FUNCTION_28	IF_2	CALL_3
0x13cb	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       827	fold.c	FUNCTION_28	IF_2	CALL_4
0x13cf	          0x4889c7	                            mov rdi, rax	       827	fold.c	FUNCTION_28	IF_2	CALL_4
0x13d2	      0xe800000000	                          call 0x4001417	       827	fold.c	FUNCTION_28	IF_2	CALL_4
0x13d7	            0x85c0	                           test eax, eax	       827	fold.c	FUNCTION_28	IF_2	CALL_4
0x13d9	            0x7520	                           jne 0x400143b	       827	fold.c	FUNCTION_28	IF_2	CALL_4
0x13db	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       829	fold.c	FUNCTION_28	IF_2	CALL_5
0x13df	          0x4889c7	                            mov rdi, rax	       829	fold.c	FUNCTION_28	IF_2	CALL_5
0x13e2	      0xe800000000	                          call 0x4001427	       829	fold.c	FUNCTION_28	IF_2	CALL_5
0x13e7	            0x85c0	                           test eax, eax	       829	fold.c	FUNCTION_28	IF_2	CALL_5
0x13e9	            0x7510	                           jne 0x400143b	       829	fold.c	FUNCTION_28	IF_2	CALL_5
0x13eb	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       831	fold.c	FUNCTION_28	IF_2	CALL_6
0x13ef	          0x4889c7	                            mov rdi, rax	       831	fold.c	FUNCTION_28	IF_2	CALL_6
0x13f2	      0xe800000000	                          call 0x4001437	       831	fold.c	FUNCTION_28	IF_2	CALL_6
0x13f7	            0x85c0	                           test eax, eax	       831	fold.c	FUNCTION_28	IF_2	CALL_6
0x13f9	            0x743c	                            je 0x4001477	       831	fold.c	FUNCTION_28	IF_2	CALL_6
0x13fb	    0x8b0500000000	            mov eax, dword [0x04001441] 	       833	fold.c	FUNCTION_28	IF_2
0x1401	          0x8945ec	             mov dword [rbp - 0x14], eax	       833	fold.c	FUNCTION_28	IF_2
0x1404	    0xc70500000000	               mov dword [0x0400144e], 0	       836	fold.c	FUNCTION_28	IF_2
0x140e	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	       837	fold.c	FUNCTION_28	IF_2	CALL_7
0x1412	        0x488b4dd0	             mov rcx, qword [rbp - 0x30]	       837	fold.c	FUNCTION_28	IF_2	CALL_7
0x1416	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       837	fold.c	FUNCTION_28	IF_2	CALL_7
0x141a	          0x4889ce	                            mov rsi, rcx	       837	fold.c	FUNCTION_28	IF_2	CALL_7
0x141d	          0x4889c7	                            mov rdi, rax	       837	fold.c	FUNCTION_28	IF_2	CALL_7
0x1420	      0xe8ad240000	                 call sym.foldUpdateIEMS	       837	fold.c	FUNCTION_28	IF_2	CALL_7
0x1425	    0x8b0500000000	            mov eax, dword [0x0400146b] 	       838	fold.c	FUNCTION_28	IF_2
0x142b	           0xb45ec	              or eax, dword [rbp - 0x14]	       838	fold.c	FUNCTION_28	IF_2
0x142e	    0x890500000000	            mov dword [0x04001474], eax 	       838	fold.c	FUNCTION_28	IF_2
0x1434	            0xeb01	                           jmp 0x4001477	       838	fold.c	FUNCTION_28	IF_2
0x1436	              0x90	                                     nop	       814	fold.c	FUNCTION_28	IF_1
0x1437	        0x488b45f8	                mov rax, qword [rbp - 8]	       840	fold.c	FUNCTION_28
0x143b	    0x644833042528	                xor rax, qword fs:[0x28]	       840	fold.c	FUNCTION_28
0x1444	            0x7405	                            je 0x400148b	       840	fold.c	FUNCTION_28
0x1446	      0xe800000000	                          call 0x400148b	       840	fold.c	FUNCTION_28
0x144b	              0xc9	                                   leave	       840	fold.c	FUNCTION_28
0x144c	              0xc3	                                     ret	       840	fold.c	FUNCTION_28
lineFolded	SWITCH,0:ELSE,0:DO,0:FOR,0:WHILE,0:IF,0:functions,0:CALL,1	16
0x473	              0x55	                                push rbp	       277	fold.c	FUNCTION_6
0x474	          0x4889e5	                            mov rbp, rsp	       277	fold.c	FUNCTION_6
0x477	        0x4883ec10	                           sub rsp, 0x10	       277	fold.c	FUNCTION_6
0x47b	        0x48897df8	                mov qword [rbp - 8], rdi	       277	fold.c	FUNCTION_6
0x47f	        0x488975f0	             mov qword [rbp - 0x10], rsi	       277	fold.c	FUNCTION_6
0x483	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	       278	fold.c	FUNCTION_6	CALL_1
0x487	        0x488b45f8	                mov rax, qword [rbp - 8]	       278	fold.c	FUNCTION_6	CALL_1
0x48b	      0xba00000000	                              mov edx, 0	       278	fold.c	FUNCTION_6	CALL_1
0x490	          0x4889ce	                            mov rsi, rcx	       278	fold.c	FUNCTION_6	CALL_1
0x493	          0x4889c7	                            mov rdi, rax	       278	fold.c	FUNCTION_6	CALL_1
0x496	      0xe800000000	                          call 0x40004db	       278	fold.c	FUNCTION_6	CALL_1
0x49b	          0x4885c0	                           test rax, rax	       278	fold.c	FUNCTION_6	CALL_1
0x49e	           0xf95c0	                                setne al	       278	fold.c	FUNCTION_6	CALL_1
0x4a1	           0xfb6c0	                           movzx eax, al	       278	fold.c	FUNCTION_6	CALL_1
0x4a4	              0xc9	                                   leave	       279	fold.c	FUNCTION_6
0x4a5	              0xc3	                                     ret	       279	fold.c	FUNCTION_6
deleteFoldEntry	SWITCH,0:ELSE,1:DO,0:FOR,1:WHILE,0:IF,6:functions,0:CALL,6	193
0x22a7	              0x55	                                push rbp	      1399	fold.c	FUNCTION_43
0x22a8	          0x4889e5	                            mov rbp, rsp	      1399	fold.c	FUNCTION_43
0x22ab	        0x4883ec30	                           sub rsp, 0x30	      1399	fold.c	FUNCTION_43
0x22af	        0x48897dd8	             mov qword [rbp - 0x28], rdi	      1399	fold.c	FUNCTION_43
0x22b3	          0x8975d4	             mov dword [rbp - 0x2c], esi	      1399	fold.c	FUNCTION_43
0x22b6	          0x8955d0	             mov dword [rbp - 0x30], edx	      1399	fold.c	FUNCTION_43
0x22b9	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1405	fold.c	FUNCTION_43
0x22bd	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      1405	fold.c	FUNCTION_43
0x22c1	          0x8b45d4	             mov eax, dword [rbp - 0x2c]	      1405	fold.c	FUNCTION_43
0x22c4	          0x4863d0	                         movsxd rdx, eax	      1405	fold.c	FUNCTION_43
0x22c7	          0x4889d0	                            mov rax, rdx	      1405	fold.c	FUNCTION_43
0x22ca	          0x4801c0	                            add rax, rax	      1405	fold.c	FUNCTION_43
0x22cd	          0x4801d0	                            add rax, rdx	      1405	fold.c	FUNCTION_43
0x22d0	        0x48c1e004	                              shl rax, 4	      1405	fold.c	FUNCTION_43
0x22d4	          0x4801c8	                            add rax, rcx	      1405	fold.c	FUNCTION_43
0x22d7	        0x488945e8	             mov qword [rbp - 0x18], rax	      1405	fold.c	FUNCTION_43
0x22db	        0x837dd000	               cmp dword [rbp - 0x30], 0	      1406	fold.c	FUNCTION_43	IF_1
0x22df	            0x750b	                           jne 0x400232c	      1406	fold.c	FUNCTION_43	IF_1
0x22e1	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1406	fold.c	FUNCTION_43	IF_1
0x22e5	          0x8b4010	            mov eax, dword [rax + 0x10] 	      1406	fold.c	FUNCTION_43	IF_1
0x22e8	            0x85c0	                           test eax, eax	      1406	fold.c	FUNCTION_43	IF_1
0x22ea	            0x7566	                           jne 0x4002392	      1406	fold.c	FUNCTION_43	IF_1
0x22ec	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1409	fold.c	FUNCTION_43	IF_1	CALL_1
0x22f0	        0x4883c010	                           add rax, 0x10	      1409	fold.c	FUNCTION_43	IF_1	CALL_1
0x22f4	          0x4889c7	                            mov rdi, rax	      1409	fold.c	FUNCTION_43	IF_1	CALL_1
0x22f7	      0xe800000000	                          call 0x400233c	      1409	fold.c	FUNCTION_43	IF_1	CALL_1
0x22fc	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1410	fold.c	FUNCTION_43	IF_1
0x2300	            0x8b00	                    mov eax, dword [rax]	      1410	fold.c	FUNCTION_43	IF_1
0x2302	          0x8d50ff	                      lea edx, [rax - 1]	      1410	fold.c	FUNCTION_43	IF_1
0x2305	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1410	fold.c	FUNCTION_43	IF_1
0x2309	            0x8910	                    mov dword [rax], edx	      1410	fold.c	FUNCTION_43	IF_1
0x230b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1411	fold.c	FUNCTION_43	IF_1	IF_2
0x230f	            0x8b00	                    mov eax, dword [rax]	      1411	fold.c	FUNCTION_43	IF_1	IF_2
0x2311	          0x3b45d4	             cmp eax, dword [rbp - 0x2c]	      1411	fold.c	FUNCTION_43	IF_1	IF_2
0x2314	     0xf8e07020000	                           jle 0x4002561	      1411	fold.c	FUNCTION_43	IF_1	IF_2
0x231a	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1412	fold.c	FUNCTION_43	IF_1	CALL_2
0x231e	            0x8b00	                    mov eax, dword [rax]	      1412	fold.c	FUNCTION_43	IF_1	CALL_2
0x2320	          0x2b45d4	             sub eax, dword [rbp - 0x2c]	      1412	fold.c	FUNCTION_43	IF_1	CALL_2
0x2323	          0x4863d0	                         movsxd rdx, eax	      1412	fold.c	FUNCTION_43	IF_1	CALL_2
0x2326	          0x4889d0	                            mov rax, rdx	      1412	fold.c	FUNCTION_43	IF_1	CALL_2
0x2329	          0x4801c0	                            add rax, rax	      1412	fold.c	FUNCTION_43	IF_1	CALL_2
0x232c	          0x4801d0	                            add rax, rdx	      1412	fold.c	FUNCTION_43	IF_1	CALL_2
0x232f	        0x48c1e004	                              shl rax, 4	      1412	fold.c	FUNCTION_43	IF_1	CALL_2
0x2333	          0x4889c2	                            mov rdx, rax	      1412	fold.c	FUNCTION_43	IF_1	CALL_2
0x2336	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1412	fold.c	FUNCTION_43	IF_1	CALL_2
0x233a	        0x488d4830	                   lea rcx, [rax + 0x30]	      1412	fold.c	FUNCTION_43	IF_1	CALL_2
0x233e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1412	fold.c	FUNCTION_43	IF_1	CALL_2
0x2342	          0x4889ce	                            mov rsi, rcx	      1412	fold.c	FUNCTION_43	IF_1	CALL_2
0x2345	          0x4889c7	                            mov rdi, rax	      1412	fold.c	FUNCTION_43	IF_1	CALL_2
0x2348	      0xe800000000	                          call 0x400238d	      1412	fold.c	FUNCTION_43	IF_1	CALL_2
0x234d	      0xe9cf010000	                           jmp 0x4002561	      1411	fold.c	FUNCTION_43	IF_1	IF_2
0x2352	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1418	fold.c	FUNCTION_43	ELSE_1
0x2356	          0x8b4010	            mov eax, dword [rax + 0x10] 	      1418	fold.c	FUNCTION_43	ELSE_1
0x2359	            0x4898	                                    cdqe	      1418	fold.c	FUNCTION_43	ELSE_1
0x235b	        0x488945f0	             mov qword [rbp - 0x10], rax	      1418	fold.c	FUNCTION_43	ELSE_1
0x235f	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1419	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_3
0x2363	          0x83e801	                              sub eax, 1	      1419	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_3
0x2366	            0x89c2	                            mov edx, eax	      1419	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_3
0x2368	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1419	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_3
0x236c	            0x89d6	                            mov esi, edx	      1419	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_3
0x236e	          0x4889c7	                            mov rdi, rax	      1419	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_3
0x2371	      0xe800000000	                          call 0x40023b6	      1419	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_3
0x2376	          0x83f801	                              cmp eax, 1	      1419	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_3
0x2379	     0xf85a2010000	                           jne 0x4002561	      1419	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_3
0x237f	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1422	fold.c	FUNCTION_43	ELSE_1	IF_3
0x2383	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      1422	fold.c	FUNCTION_43	ELSE_1	IF_3
0x2387	          0x8b45d4	             mov eax, dword [rbp - 0x2c]	      1422	fold.c	FUNCTION_43	ELSE_1	IF_3
0x238a	          0x4863d0	                         movsxd rdx, eax	      1422	fold.c	FUNCTION_43	ELSE_1	IF_3
0x238d	          0x4889d0	                            mov rax, rdx	      1422	fold.c	FUNCTION_43	ELSE_1	IF_3
0x2390	          0x4801c0	                            add rax, rax	      1422	fold.c	FUNCTION_43	ELSE_1	IF_3
0x2393	          0x4801d0	                            add rax, rdx	      1422	fold.c	FUNCTION_43	ELSE_1	IF_3
0x2396	        0x48c1e004	                              shl rax, 4	      1422	fold.c	FUNCTION_43	ELSE_1	IF_3
0x239a	          0x4801c8	                            add rax, rcx	      1422	fold.c	FUNCTION_43	ELSE_1	IF_3
0x239d	        0x488945e8	             mov qword [rbp - 0x18], rax	      1422	fold.c	FUNCTION_43	ELSE_1	IF_3
0x23a1	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1425	fold.c	FUNCTION_43	ELSE_1	IF_3
0x23a5	        0x488b4020	            mov rax, qword [rax + 0x20] 	      1425	fold.c	FUNCTION_43	ELSE_1	IF_3
0x23a9	        0x488945f8	                mov qword [rbp - 8], rax	      1425	fold.c	FUNCTION_43	ELSE_1	IF_3
0x23ad	    0xc745e4000000	               mov dword [rbp - 0x1c], 0	      1426	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x23b4	      0xe9a9000000	                           jmp 0x40024a2	      1426	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x23b9	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x23bc	          0x4863d0	                         movsxd rdx, eax	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x23bf	          0x4889d0	                            mov rax, rdx	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x23c2	          0x4801c0	                            add rax, rax	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x23c5	          0x4801d0	                            add rax, rdx	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x23c8	        0x48c1e004	                              shl rax, 4	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x23cc	          0x4889c2	                            mov rdx, rax	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x23cf	        0x488b45f8	                mov rax, qword [rbp - 8]	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x23d3	        0x488d0c02	                    lea rcx, [rdx + rax]	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x23d7	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x23da	          0x4863d0	                         movsxd rdx, eax	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x23dd	          0x4889d0	                            mov rax, rdx	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x23e0	          0x4801c0	                            add rax, rax	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x23e3	          0x4801d0	                            add rax, rdx	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x23e6	        0x48c1e004	                              shl rax, 4	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x23ea	          0x4889c2	                            mov rdx, rax	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x23ed	        0x488b45f8	                mov rax, qword [rbp - 8]	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x23f1	          0x4801d0	                            add rax, rdx	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x23f4	          0x488b10	                    mov rdx, qword [rax]	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x23f7	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x23fb	          0x488b00	                    mov rax, qword [rax]	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x23fe	          0x4801d0	                            add rax, rdx	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x2401	          0x488901	                    mov qword [rcx], rax	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x2404	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1429	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_4
0x2408	         0xfb64028	           movzx eax, byte [rax + 0x28] 	      1429	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_4
0x240c	            0x3c02	                               cmp al, 2	      1429	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_4
0x240e	            0x7521	                           jne 0x4002471	      1429	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_4
0x2410	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      1430	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_4
0x2413	          0x4863d0	                         movsxd rdx, eax	      1430	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_4
0x2416	          0x4889d0	                            mov rax, rdx	      1430	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_4
0x2419	          0x4801c0	                            add rax, rax	      1430	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_4
0x241c	          0x4801d0	                            add rax, rdx	      1430	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_4
0x241f	        0x48c1e004	                              shl rax, 4	      1430	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_4
0x2423	          0x4889c2	                            mov rdx, rax	      1430	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_4
0x2426	        0x488b45f8	                mov rax, qword [rbp - 8]	      1430	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_4
0x242a	          0x4801d0	                            add rax, rdx	      1430	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_4
0x242d	        0xc6402802	                mov byte [rax + 0x28], 2	      1430	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_4
0x2431	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1431	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_5
0x2435	         0xfb64029	           movzx eax, byte [rax + 0x29] 	      1431	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_5
0x2439	            0x3c02	                               cmp al, 2	      1431	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_5
0x243b	            0x7521	                           jne 0x400249e	      1431	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_5
0x243d	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      1432	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_5
0x2440	          0x4863d0	                         movsxd rdx, eax	      1432	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_5
0x2443	          0x4889d0	                            mov rax, rdx	      1432	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_5
0x2446	          0x4801c0	                            add rax, rax	      1432	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_5
0x2449	          0x4801d0	                            add rax, rdx	      1432	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_5
0x244c	        0x48c1e004	                              shl rax, 4	      1432	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_5
0x2450	          0x4889c2	                            mov rdx, rax	      1432	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_5
0x2453	        0x488b45f8	                mov rax, qword [rbp - 8]	      1432	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_5
0x2457	          0x4801d0	                            add rax, rdx	      1432	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_5
0x245a	        0xc6402902	                mov byte [rax + 0x29], 2	      1432	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_5
0x245e	        0x8345e401	               add dword [rbp - 0x1c], 1	      1426	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x2462	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      1426	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x2465	            0x4898	                                    cdqe	      1426	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x2467	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	      1426	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x246b	     0xf8c48ffffff	                            jl 0x40023f9	      1426	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x2471	          0x8b45d4	             mov eax, dword [rbp - 0x2c]	      1436	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6
0x2474	          0x8d5001	                      lea edx, [rax + 1]	      1436	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6
0x2477	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1436	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6
0x247b	            0x8b00	                    mov eax, dword [rax]	      1436	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6
0x247d	            0x39c2	                            cmp edx, eax	      1436	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6
0x247f	            0x7d52	                           jge 0x4002513	      1436	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6
0x2481	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x2485	            0x8b00	                    mov eax, dword [rax]	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x2487	          0x8b55d4	             mov edx, dword [rbp - 0x2c]	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x248a	          0x83c201	                              add edx, 1	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x248d	            0x29d0	                            sub eax, edx	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x248f	          0x4863d0	                         movsxd rdx, eax	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x2492	          0x4889d0	                            mov rax, rdx	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x2495	          0x4801c0	                            add rax, rax	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x2498	          0x4801d0	                            add rax, rdx	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x249b	        0x48c1e004	                              shl rax, 4	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x249f	          0x4889c6	                            mov rsi, rax	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x24a2	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x24a6	        0x488d4830	                   lea rcx, [rax + 0x30]	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x24aa	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x24ae	          0x4889d0	                            mov rax, rdx	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x24b1	          0x4801c0	                            add rax, rax	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x24b4	          0x4801d0	                            add rax, rdx	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x24b7	        0x48c1e004	                              shl rax, 4	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x24bb	          0x4889c2	                            mov rdx, rax	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x24be	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x24c2	          0x4801d0	                            add rax, rdx	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x24c5	          0x4889f2	                            mov rdx, rsi	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x24c8	          0x4889ce	                            mov rsi, rcx	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x24cb	          0x4889c7	                            mov rdi, rax	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x24ce	      0xe800000000	                          call 0x4002513	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x24d3	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      1440	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_5
0x24d7	          0x4889d0	                            mov rax, rdx	      1440	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_5
0x24da	          0x4801c0	                            add rax, rax	      1440	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_5
0x24dd	          0x4801d0	                            add rax, rdx	      1440	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_5
0x24e0	        0x48c1e004	                              shl rax, 4	      1440	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_5
0x24e4	          0x4889c2	                            mov rdx, rax	      1440	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_5
0x24e7	        0x488b4df8	                mov rcx, qword [rbp - 8]	      1440	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_5
0x24eb	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1440	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_5
0x24ef	          0x4889ce	                            mov rsi, rcx	      1440	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_5
0x24f2	          0x4889c7	                            mov rdi, rax	      1440	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_5
0x24f5	      0xe800000000	                          call 0x400253a	      1440	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_5
0x24fa	        0x488b45f8	                mov rax, qword [rbp - 8]	      1441	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_6
0x24fe	          0x4889c7	                            mov rdi, rax	      1441	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_6
0x2501	      0xe800000000	                          call 0x4002546	      1441	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_6
0x2506	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1442	fold.c	FUNCTION_43	ELSE_1	IF_3
0x250a	            0x8b00	                    mov eax, dword [rax]	      1442	fold.c	FUNCTION_43	ELSE_1	IF_3
0x250c	            0x89c2	                            mov edx, eax	      1442	fold.c	FUNCTION_43	ELSE_1	IF_3
0x250e	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1442	fold.c	FUNCTION_43	ELSE_1	IF_3
0x2512	             0x1d0	                            add eax, edx	      1442	fold.c	FUNCTION_43	ELSE_1	IF_3
0x2514	          0x83e801	                              sub eax, 1	      1442	fold.c	FUNCTION_43	ELSE_1	IF_3
0x2517	            0x89c2	                            mov edx, eax	      1442	fold.c	FUNCTION_43	ELSE_1	IF_3
0x2519	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1442	fold.c	FUNCTION_43	ELSE_1	IF_3
0x251d	            0x8910	                    mov dword [rax], edx	      1442	fold.c	FUNCTION_43	ELSE_1	IF_3
0x251f	            0xeb00	                           jmp 0x4002561	      1445	fold.c	FUNCTION_43
0x2521	              0x90	                                     nop	      1445	fold.c	FUNCTION_43
0x2522	              0xc9	                                   leave	      1445	fold.c	FUNCTION_43
0x2523	              0xc3	                                     ret	      1445	fold.c	FUNCTION_43
put_fold_open_close	SWITCH,0:ELSE,0:DO,0:FOR,0:WHILE,0:IF,1:functions,0:CALL,4	46
0x684e	              0x55	                                push rbp	      3598	fold.c	FUNCTION_76
0x684f	          0x4889e5	                            mov rbp, rsp	      3598	fold.c	FUNCTION_76
0x6852	        0x4883ec20	                           sub rsp, 0x20	      3598	fold.c	FUNCTION_76
0x6856	        0x48897df8	                mov qword [rbp - 8], rdi	      3598	fold.c	FUNCTION_76
0x685a	        0x488975f0	             mov qword [rbp - 0x10], rsi	      3598	fold.c	FUNCTION_76
0x685e	        0x488955e8	             mov qword [rbp - 0x18], rdx	      3598	fold.c	FUNCTION_76
0x6862	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3599	fold.c	FUNCTION_76	IF_1	CALL_1
0x6866	          0x488b10	                    mov rdx, qword [rax]	      3599	fold.c	FUNCTION_76	IF_1	CALL_1
0x6869	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3599	fold.c	FUNCTION_76	IF_1	CALL_1
0x686d	          0x4801c2	                            add rdx, rax	      3599	fold.c	FUNCTION_76	IF_1	CALL_1
0x6870	        0x488b45f8	                mov rax, qword [rbp - 8]	      3599	fold.c	FUNCTION_76	IF_1	CALL_1
0x6874	      0xbe00000000	                              mov esi, 0	      3599	fold.c	FUNCTION_76	IF_1	CALL_1
0x6879	          0x4889c7	                            mov rdi, rax	      3599	fold.c	FUNCTION_76	IF_1	CALL_1
0x687c	      0xb800000000	                              mov eax, 0	      3599	fold.c	FUNCTION_76	IF_1	CALL_1
0x6881	      0xe800000000	                          call 0x40068c6	      3599	fold.c	FUNCTION_76	IF_1	CALL_1
0x6886	            0x85c0	                           test eax, eax	      3599	fold.c	FUNCTION_76	IF_1	CALL_1
0x6888	            0x7852	                            js 0x400691c	      3599	fold.c	FUNCTION_76	IF_1	CALL_1
0x688a	        0x488b45f8	                mov rax, qword [rbp - 8]	      3600	fold.c	FUNCTION_76	IF_1	CALL_2
0x688e	          0x4889c7	                            mov rdi, rax	      3600	fold.c	FUNCTION_76	IF_1	CALL_2
0x6891	      0xe800000000	                          call 0x40068d6	      3600	fold.c	FUNCTION_76	IF_1	CALL_2
0x6896	            0x85c0	                           test eax, eax	      3600	fold.c	FUNCTION_76	IF_1	CALL_2
0x6898	            0x7442	                            je 0x400691c	      3600	fold.c	FUNCTION_76	IF_1	CALL_2
0x689a	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3602	fold.c	FUNCTION_76	IF_1
0x689e	         0xfb64028	           movzx eax, byte [rax + 0x28] 	      3602	fold.c	FUNCTION_76	IF_1
0x68a2	            0x3c01	                               cmp al, 1	      3601	fold.c	FUNCTION_76	IF_1	CALL_3
0x68a4	            0x7507	                           jne 0x40068ed	      3601	fold.c	FUNCTION_76	IF_1	CALL_3
0x68a6	      0xba63000000	                           mov edx, 0x63	      3601	fold.c	FUNCTION_76	IF_1	CALL_3
0x68ab	            0xeb05	                           jmp 0x40068f2	      3601	fold.c	FUNCTION_76	IF_1	CALL_3
0x68ad	      0xba6f000000	                           mov edx, 0x6f	      3601	fold.c	FUNCTION_76	IF_1	CALL_3
0x68b2	        0x488b45f8	                mov rax, qword [rbp - 8]	      3601	fold.c	FUNCTION_76	IF_1	CALL_3
0x68b6	      0xbe00000000	                              mov esi, 0	      3601	fold.c	FUNCTION_76	IF_1	CALL_3
0x68bb	          0x4889c7	                            mov rdi, rax	      3601	fold.c	FUNCTION_76	IF_1	CALL_3
0x68be	      0xb800000000	                              mov eax, 0	      3601	fold.c	FUNCTION_76	IF_1	CALL_3
0x68c3	      0xe800000000	                          call 0x4006908	      3601	fold.c	FUNCTION_76	IF_1	CALL_3
0x68c8	            0x85c0	                           test eax, eax	      3601	fold.c	FUNCTION_76	IF_1	CALL_3
0x68ca	            0x7810	                            js 0x400691c	      3601	fold.c	FUNCTION_76	IF_1	CALL_3
0x68cc	        0x488b45f8	                mov rax, qword [rbp - 8]	      3603	fold.c	FUNCTION_76	IF_1	CALL_4
0x68d0	          0x4889c7	                            mov rdi, rax	      3603	fold.c	FUNCTION_76	IF_1	CALL_4
0x68d3	      0xe800000000	                          call 0x4006918	      3603	fold.c	FUNCTION_76	IF_1	CALL_4
0x68d8	            0x85c0	                           test eax, eax	      3603	fold.c	FUNCTION_76	IF_1	CALL_4
0x68da	            0x7507	                           jne 0x4006923	      3603	fold.c	FUNCTION_76	IF_1	CALL_4
0x68dc	      0xb800000000	                              mov eax, 0	      3604	fold.c	FUNCTION_76	IF_1
0x68e1	            0xeb05	                           jmp 0x4006928	      3604	fold.c	FUNCTION_76	IF_1
0x68e3	      0xb801000000	                              mov eax, 1	      3606	fold.c	FUNCTION_76
0x68e8	              0xc9	                                   leave	      3607	fold.c	FUNCTION_76
0x68e9	              0xc3	                                     ret	      3607	fold.c	FUNCTION_76
foldlevelIndent	SWITCH,0:ELSE,2:DO,0:FOR,0:WHILE,0:IF,4:functions,0:CALL,5	92
0x5d6e	              0x55	                                push rbp	      3203	fold.c	FUNCTION_67
0x5d6f	          0x4889e5	                            mov rbp, rsp	      3203	fold.c	FUNCTION_67
0x5d72	              0x53	                                push rbx	      3203	fold.c	FUNCTION_67
0x5d73	        0x4883ec38	                           sub rsp, 0x38	      3203	fold.c	FUNCTION_67
0x5d77	        0x48897dc8	             mov qword [rbp - 0x38], rdi	      3203	fold.c	FUNCTION_67
0x5d7b	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3206	fold.c	FUNCTION_67
0x5d7f	        0x488b5008	                mov rdx, qword [rax + 8]	      3206	fold.c	FUNCTION_67
0x5d83	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3206	fold.c	FUNCTION_67
0x5d87	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3206	fold.c	FUNCTION_67
0x5d8b	          0x4801d0	                            add rax, rdx	      3206	fold.c	FUNCTION_67
0x5d8e	        0x488945d8	             mov qword [rbp - 0x28], rax	      3206	fold.c	FUNCTION_67
0x5d92	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3208	fold.c	FUNCTION_67
0x5d96	          0x488b00	                    mov rax, qword [rax]	      3208	fold.c	FUNCTION_67
0x5d99	        0x488b4008	                mov rax, qword [rax + 8]	      3208	fold.c	FUNCTION_67
0x5d9d	        0x488945e0	             mov qword [rbp - 0x20], rax	      3208	fold.c	FUNCTION_67
0x5da1	        0x488b4dd8	             mov rcx, qword [rbp - 0x28]	      3209	fold.c	FUNCTION_67	CALL_2
0x5da5	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      3209	fold.c	FUNCTION_67	CALL_2
0x5da9	      0xba00000000	                              mov edx, 0	      3209	fold.c	FUNCTION_67	CALL_2
0x5dae	          0x4889ce	                            mov rsi, rcx	      3209	fold.c	FUNCTION_67	CALL_2
0x5db1	          0x4889c7	                            mov rdi, rax	      3209	fold.c	FUNCTION_67	CALL_2
0x5db4	      0xe800000000	                          call 0x4005df9	      3209	fold.c	FUNCTION_67	CALL_2
0x5db9	          0x4889c7	                            mov rdi, rax	      3209	fold.c	FUNCTION_67	CALL_2
0x5dbc	      0xe800000000	                          call 0x4005e01	      3209	fold.c	FUNCTION_67	CALL_2
0x5dc1	        0x488945e8	             mov qword [rbp - 0x18], rax	      3209	fold.c	FUNCTION_67	CALL_2
0x5dc5	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x5dc9	           0xfb600	                   movzx eax, byte [rax]	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x5dcc	            0x84c0	                             test al, al	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x5dce	            0x7427	                            je 0x4005e37	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x5dd0	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x5dd4	           0xfb600	                   movzx eax, byte [rax]	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x5dd7	           0xfb6d0	                           movzx edx, al	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x5dda	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x5dde	          0x488b00	                    mov rax, qword [rax]	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x5de1	    0x488b80e00100	           mov rax, qword [rax + 0x1e0] 	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x5de8	            0x89d6	                            mov esi, edx	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x5dea	          0x4889c7	                            mov rdi, rax	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x5ded	      0xe800000000	                          call 0x4005e32	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x5df2	          0x4885c0	                           test rax, rax	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x5df5	            0x742e	                            je 0x4005e65	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x5df7	      0x48837dd801	               cmp qword [rbp - 0x28], 1	      3216	fold.c	FUNCTION_67	IF_1	IF_2
0x5dfc	            0x740d	                            je 0x4005e4b	      3216	fold.c	FUNCTION_67	IF_1	IF_2
0x5dfe	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      3216	fold.c	FUNCTION_67	IF_1	IF_2
0x5e02	          0x488b00	                    mov rax, qword [rax]	      3216	fold.c	FUNCTION_67	IF_1	IF_2
0x5e05	        0x483b45d8	             cmp rax, qword [rbp - 0x28]	      3216	fold.c	FUNCTION_67	IF_1	IF_2
0x5e09	            0x750d	                           jne 0x4005e58	      3216	fold.c	FUNCTION_67	IF_1	IF_2
0x5e0b	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3217	fold.c	FUNCTION_67	IF_1	IF_2
0x5e0f	    0xc74020000000	               mov dword [rax + 0x20], 0	      3217	fold.c	FUNCTION_67	IF_1	IF_2
0x5e16	            0xeb46	                           jmp 0x4005e9e	      3216	fold.c	FUNCTION_67	IF_1	IF_2
0x5e18	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3219	fold.c	FUNCTION_67	IF_1	ELSE_1
0x5e1c	    0xc74020ffffff	     mov dword [rax + 0x20], 0xffffffff 	      3219	fold.c	FUNCTION_67	IF_1	ELSE_1
0x5e23	            0xeb39	                           jmp 0x4005e9e	      3216	fold.c	FUNCTION_67	IF_1	IF_2
0x5e25	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      3222	fold.c	FUNCTION_67	CALL_5
0x5e29	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      3222	fold.c	FUNCTION_67	CALL_5
0x5e2d	          0x4889d6	                            mov rsi, rdx	      3222	fold.c	FUNCTION_67	CALL_5
0x5e30	          0x4889c7	                            mov rdi, rax	      3222	fold.c	FUNCTION_67	CALL_5
0x5e33	      0xe800000000	                          call 0x4005e78	      3222	fold.c	FUNCTION_67	CALL_5
0x5e38	          0x4863d8	                         movsxd rbx, eax	      3222	fold.c	FUNCTION_67	CALL_5
0x5e3b	    0x488b05000000	            mov rax, qword [0x04005e82] 	      3222	fold.c	FUNCTION_67	CALL_5
0x5e42	          0x4889c7	                            mov rdi, rax	      3222	fold.c	FUNCTION_67	CALL_5
0x5e45	      0xe800000000	                          call 0x4005e8a	      3222	fold.c	FUNCTION_67	CALL_5
0x5e4a	          0x4889c1	                            mov rcx, rax	      3222	fold.c	FUNCTION_67	CALL_5
0x5e4d	          0x4889d8	                            mov rax, rbx	      3222	fold.c	FUNCTION_67	CALL_5
0x5e50	            0x4899	                                     cqo	      3222	fold.c	FUNCTION_67	CALL_5
0x5e52	          0x48f7f9	                                idiv rcx	      3222	fold.c	FUNCTION_67	CALL_5
0x5e55	            0x89c2	                            mov edx, eax	      3222	fold.c	FUNCTION_67	CALL_5
0x5e57	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3222	fold.c	FUNCTION_67	CALL_5
0x5e5b	          0x895020	             mov dword [rax + 0x20], edx	      3222	fold.c	FUNCTION_67	CALL_5
0x5e5e	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3223	fold.c	FUNCTION_67	IF_3
0x5e62	          0x8b4020	            mov eax, dword [rax + 0x20] 	      3223	fold.c	FUNCTION_67	IF_3
0x5e65	          0x4863d0	                         movsxd rdx, eax	      3223	fold.c	FUNCTION_67	IF_3
0x5e68	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3223	fold.c	FUNCTION_67	IF_3
0x5e6c	          0x488b00	                    mov rax, qword [rax]	      3223	fold.c	FUNCTION_67	IF_3
0x5e6f	    0x488b80100200	           mov rax, qword [rax + 0x210] 	      3223	fold.c	FUNCTION_67	IF_3
0x5e76	          0x4839c2	                            cmp rdx, rax	      3223	fold.c	FUNCTION_67	IF_3
0x5e79	            0x7e2d	                           jle 0x4005ee8	      3223	fold.c	FUNCTION_67	IF_3
0x5e7b	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3225	fold.c	FUNCTION_67	IF_3
0x5e7f	          0x488b00	                    mov rax, qword [rax]	      3225	fold.c	FUNCTION_67	IF_3
0x5e82	    0x488b80100200	           mov rax, qword [rax + 0x210] 	      3225	fold.c	FUNCTION_67	IF_3
0x5e89	            0x89c2	                            mov edx, eax	      3225	fold.c	FUNCTION_67	IF_3
0x5e8b	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3225	fold.c	FUNCTION_67	IF_3
0x5e8f	          0x895020	             mov dword [rax + 0x20], edx	      3225	fold.c	FUNCTION_67	IF_3
0x5e92	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3226	fold.c	FUNCTION_67	IF_3	IF_4
0x5e96	          0x8b4020	            mov eax, dword [rax + 0x20] 	      3226	fold.c	FUNCTION_67	IF_3	IF_4
0x5e99	            0x85c0	                           test eax, eax	      3226	fold.c	FUNCTION_67	IF_3	IF_4
0x5e9b	            0x790b	                           jns 0x4005ee8	      3226	fold.c	FUNCTION_67	IF_3	IF_4
0x5e9d	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3227	fold.c	FUNCTION_67	IF_3	IF_4
0x5ea1	    0xc74020000000	               mov dword [rax + 0x20], 0	      3227	fold.c	FUNCTION_67	IF_3	IF_4
0x5ea8	              0x90	                                     nop	      3229	fold.c	FUNCTION_67
0x5ea9	        0x4883c438	                           add rsp, 0x38	      3229	fold.c	FUNCTION_67
0x5ead	              0x5b	                                 pop rbx	      3229	fold.c	FUNCTION_67
0x5eae	              0x5d	                                 pop rbp	      3229	fold.c	FUNCTION_67
0x5eaf	              0xc3	                                     ret	      3229	fold.c	FUNCTION_67
foldMarkAdjust	SWITCH,0:ELSE,0:DO,0:FOR,0:WHILE,0:IF,2:functions,0:CALL,1	44
0x2581	              0x55	                                push rbp	      1472	fold.c	FUNCTION_45
0x2582	          0x4889e5	                            mov rbp, rsp	      1472	fold.c	FUNCTION_45
0x2585	        0x4883ec30	                           sub rsp, 0x30	      1472	fold.c	FUNCTION_45
0x2589	        0x48897df8	                mov qword [rbp - 8], rdi	      1472	fold.c	FUNCTION_45
0x258d	        0x488975f0	             mov qword [rbp - 0x10], rsi	      1472	fold.c	FUNCTION_45
0x2591	        0x488955e8	             mov qword [rbp - 0x18], rdx	      1472	fold.c	FUNCTION_45
0x2595	        0x48894de0	             mov qword [rbp - 0x20], rcx	      1472	fold.c	FUNCTION_45
0x2599	        0x4c8945d8	              mov qword [rbp - 0x28], r8	      1472	fold.c	FUNCTION_45
0x259d	    0x48817de0ffff	     cmp qword [rbp - 0x20], 0x7fffffff 	      1475	fold.c	FUNCTION_45	IF_1
0x25a5	            0x752e	                           jne 0x4002615	      1475	fold.c	FUNCTION_45	IF_1
0x25a7	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1475	fold.c	FUNCTION_45	IF_1
0x25ab	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	      1475	fold.c	FUNCTION_45	IF_1
0x25af	            0x7c24	                            jl 0x4002615	      1475	fold.c	FUNCTION_45	IF_1
0x25b1	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1475	fold.c	FUNCTION_45	IF_1
0x25b5	        0x482b45f0	             sub rax, qword [rbp - 0x10]	      1475	fold.c	FUNCTION_45	IF_1
0x25b9	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      1475	fold.c	FUNCTION_45	IF_1
0x25bd	          0x48f7da	                                 neg rdx	      1475	fold.c	FUNCTION_45	IF_1
0x25c0	          0x4839d0	                            cmp rax, rdx	      1475	fold.c	FUNCTION_45	IF_1
0x25c3	            0x7c10	                            jl 0x4002615	      1475	fold.c	FUNCTION_45	IF_1
0x25c5	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1476	fold.c	FUNCTION_45	IF_1
0x25c9	        0x482b45d8	             sub rax, qword [rbp - 0x28]	      1476	fold.c	FUNCTION_45	IF_1
0x25cd	        0x4883e801	                              sub rax, 1	      1476	fold.c	FUNCTION_45	IF_1
0x25d1	        0x488945e8	             mov qword [rbp - 0x18], rax	      1476	fold.c	FUNCTION_45	IF_1
0x25d5	    0x8b0500000000	            mov eax, dword [0x0400261b] 	      1479	fold.c	FUNCTION_45	IF_2
0x25db	          0x83e010	                           and eax, 0x10	      1479	fold.c	FUNCTION_45	IF_2
0x25de	            0x85c0	                           test eax, eax	      1479	fold.c	FUNCTION_45	IF_2
0x25e0	            0x7416	                            je 0x4002638	      1479	fold.c	FUNCTION_45	IF_2
0x25e2	      0x48837de001	               cmp qword [rbp - 0x20], 1	      1479	fold.c	FUNCTION_45	IF_2
0x25e7	            0x750f	                           jne 0x4002638	      1479	fold.c	FUNCTION_45	IF_2
0x25e9	    0x48817de8ffff	     cmp qword [rbp - 0x18], 0x7fffffff 	      1479	fold.c	FUNCTION_45	IF_2
0x25f1	            0x7505	                           jne 0x4002638	      1479	fold.c	FUNCTION_45	IF_2
0x25f3	      0x48836df001	               sub qword [rbp - 0x10], 1	      1480	fold.c	FUNCTION_45	IF_2
0x25f8	        0x488b45f8	                mov rax, qword [rbp - 8]	      1481	fold.c	FUNCTION_45	CALL_1
0x25fc	    0x488db8080100	                  lea rdi, [rax + 0x108]	      1481	fold.c	FUNCTION_45	CALL_1
0x2603	        0x488b75d8	             mov rsi, qword [rbp - 0x28]	      1481	fold.c	FUNCTION_45	CALL_1
0x2607	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	      1481	fold.c	FUNCTION_45	CALL_1
0x260b	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      1481	fold.c	FUNCTION_45	CALL_1
0x260f	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1481	fold.c	FUNCTION_45	CALL_1
0x2613	          0x4989f0	                             mov r8, rsi	      1481	fold.c	FUNCTION_45	CALL_1
0x2616	          0x4889c6	                            mov rsi, rax	      1481	fold.c	FUNCTION_45	CALL_1
0x2619	      0xe803000000	          call sym.foldMarkAdjustRecurse	      1481	fold.c	FUNCTION_45	CALL_1
0x261e	              0x90	                                     nop	      1482	fold.c	FUNCTION_45
0x261f	              0xc9	                                   leave	      1482	fold.c	FUNCTION_45
0x2620	              0xc3	                                     ret	      1482	fold.c	FUNCTION_45
foldReverseOrder	SWITCH,0:ELSE,0:DO,0:FOR,1:WHILE,0:IF,0:functions,0:CALL,0	76
0x54a2	              0x55	                                push rbp	      2973	fold.c	FUNCTION_63
0x54a3	          0x4889e5	                            mov rbp, rsp	      2973	fold.c	FUNCTION_63
0x54a6	        0x48897da8	             mov qword [rbp - 0x58], rdi	      2973	fold.c	FUNCTION_63
0x54aa	        0x488975a0	             mov qword [rbp - 0x60], rsi	      2973	fold.c	FUNCTION_63
0x54ae	        0x48895598	             mov qword [rbp - 0x68], rdx	      2973	fold.c	FUNCTION_63
0x54b2	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      2976	fold.c	FUNCTION_63
0x54b6	        0x488945b0	             mov qword [rbp - 0x50], rax	      2976	fold.c	FUNCTION_63
0x54ba	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2977	fold.c	FUNCTION_63
0x54be	        0x488945b8	             mov qword [rbp - 0x48], rax	      2977	fold.c	FUNCTION_63
0x54c2	      0xe9e6000000	                           jmp 0x40055ed	      2979	fold.c	FUNCTION_63	FOR_1
0x54c7	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      2981	fold.c	FUNCTION_63	FOR_1
0x54cb	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      2981	fold.c	FUNCTION_63	FOR_1
0x54cf	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	      2981	fold.c	FUNCTION_63	FOR_1
0x54d3	          0x4889d0	                            mov rax, rdx	      2981	fold.c	FUNCTION_63	FOR_1
0x54d6	          0x4801c0	                            add rax, rax	      2981	fold.c	FUNCTION_63	FOR_1
0x54d9	          0x4801d0	                            add rax, rdx	      2981	fold.c	FUNCTION_63	FOR_1
0x54dc	        0x48c1e004	                              shl rax, 4	      2981	fold.c	FUNCTION_63	FOR_1
0x54e0	          0x4801c8	                            add rax, rcx	      2981	fold.c	FUNCTION_63	FOR_1
0x54e3	        0x488945c0	             mov qword [rbp - 0x40], rax	      2981	fold.c	FUNCTION_63	FOR_1
0x54e7	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      2982	fold.c	FUNCTION_63	FOR_1
0x54eb	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      2982	fold.c	FUNCTION_63	FOR_1
0x54ef	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      2982	fold.c	FUNCTION_63	FOR_1
0x54f3	          0x4889d0	                            mov rax, rdx	      2982	fold.c	FUNCTION_63	FOR_1
0x54f6	          0x4801c0	                            add rax, rax	      2982	fold.c	FUNCTION_63	FOR_1
0x54f9	          0x4801d0	                            add rax, rdx	      2982	fold.c	FUNCTION_63	FOR_1
0x54fc	        0x48c1e004	                              shl rax, 4	      2982	fold.c	FUNCTION_63	FOR_1
0x5500	          0x4801c8	                            add rax, rcx	      2982	fold.c	FUNCTION_63	FOR_1
0x5503	        0x488945c8	             mov qword [rbp - 0x38], rax	      2982	fold.c	FUNCTION_63	FOR_1
0x5507	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2983	fold.c	FUNCTION_63	FOR_1
0x550b	          0x488b10	                    mov rdx, qword [rax]	      2983	fold.c	FUNCTION_63	FOR_1
0x550e	        0x488955d0	             mov qword [rbp - 0x30], rdx	      2983	fold.c	FUNCTION_63	FOR_1
0x5512	        0x488b5008	                mov rdx, qword [rax + 8]	      2983	fold.c	FUNCTION_63	FOR_1
0x5516	        0x488955d8	             mov qword [rbp - 0x28], rdx	      2983	fold.c	FUNCTION_63	FOR_1
0x551a	        0x488b5010	            mov rdx, qword [rax + 0x10] 	      2983	fold.c	FUNCTION_63	FOR_1
0x551e	        0x488955e0	             mov qword [rbp - 0x20], rdx	      2983	fold.c	FUNCTION_63	FOR_1
0x5522	        0x488b5018	            mov rdx, qword [rax + 0x18] 	      2983	fold.c	FUNCTION_63	FOR_1
0x5526	        0x488955e8	             mov qword [rbp - 0x18], rdx	      2983	fold.c	FUNCTION_63	FOR_1
0x552a	        0x488b5020	            mov rdx, qword [rax + 0x20] 	      2983	fold.c	FUNCTION_63	FOR_1
0x552e	        0x488955f0	             mov qword [rbp - 0x10], rdx	      2983	fold.c	FUNCTION_63	FOR_1
0x5532	        0x488b4028	            mov rax, qword [rax + 0x28] 	      2983	fold.c	FUNCTION_63	FOR_1
0x5536	        0x488945f8	                mov qword [rbp - 8], rax	      2983	fold.c	FUNCTION_63	FOR_1
0x553a	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2984	fold.c	FUNCTION_63	FOR_1
0x553e	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      2984	fold.c	FUNCTION_63	FOR_1
0x5542	          0x488b0a	                    mov rcx, qword [rdx]	      2984	fold.c	FUNCTION_63	FOR_1
0x5545	          0x488908	                    mov qword [rax], rcx	      2984	fold.c	FUNCTION_63	FOR_1
0x5548	        0x488b4a08	                mov rcx, qword [rdx + 8]	      2984	fold.c	FUNCTION_63	FOR_1
0x554c	        0x48894808	                mov qword [rax + 8], rcx	      2984	fold.c	FUNCTION_63	FOR_1
0x5550	        0x488b4a10	            mov rcx, qword [rdx + 0x10] 	      2984	fold.c	FUNCTION_63	FOR_1
0x5554	        0x48894810	             mov qword [rax + 0x10], rcx	      2984	fold.c	FUNCTION_63	FOR_1
0x5558	        0x488b4a18	            mov rcx, qword [rdx + 0x18] 	      2984	fold.c	FUNCTION_63	FOR_1
0x555c	        0x48894818	             mov qword [rax + 0x18], rcx	      2984	fold.c	FUNCTION_63	FOR_1
0x5560	        0x488b4a20	            mov rcx, qword [rdx + 0x20] 	      2984	fold.c	FUNCTION_63	FOR_1
0x5564	        0x48894820	             mov qword [rax + 0x20], rcx	      2984	fold.c	FUNCTION_63	FOR_1
0x5568	        0x488b5228	            mov rdx, qword [rdx + 0x28] 	      2984	fold.c	FUNCTION_63	FOR_1
0x556c	        0x48895028	             mov qword [rax + 0x28], rdx	      2984	fold.c	FUNCTION_63	FOR_1
0x5570	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2985	fold.c	FUNCTION_63	FOR_1
0x5574	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	      2985	fold.c	FUNCTION_63	FOR_1
0x5578	          0x488910	                    mov qword [rax], rdx	      2985	fold.c	FUNCTION_63	FOR_1
0x557b	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      2985	fold.c	FUNCTION_63	FOR_1
0x557f	        0x48895008	                mov qword [rax + 8], rdx	      2985	fold.c	FUNCTION_63	FOR_1
0x5583	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      2985	fold.c	FUNCTION_63	FOR_1
0x5587	        0x48895010	             mov qword [rax + 0x10], rdx	      2985	fold.c	FUNCTION_63	FOR_1
0x558b	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      2985	fold.c	FUNCTION_63	FOR_1
0x558f	        0x48895018	             mov qword [rax + 0x18], rdx	      2985	fold.c	FUNCTION_63	FOR_1
0x5593	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      2985	fold.c	FUNCTION_63	FOR_1
0x5597	        0x48895020	             mov qword [rax + 0x20], rdx	      2985	fold.c	FUNCTION_63	FOR_1
0x559b	        0x488b55f8	                mov rdx, qword [rbp - 8]	      2985	fold.c	FUNCTION_63	FOR_1
0x559f	        0x48895028	             mov qword [rax + 0x28], rdx	      2985	fold.c	FUNCTION_63	FOR_1
0x55a3	      0x488345b001	               add qword [rbp - 0x50], 1	      2979	fold.c	FUNCTION_63	FOR_1
0x55a8	      0x48836db801	               sub qword [rbp - 0x48], 1	      2979	fold.c	FUNCTION_63	FOR_1
0x55ad	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      2979	fold.c	FUNCTION_63	FOR_1
0x55b1	        0x483b45b8	             cmp rax, qword [rbp - 0x48]	      2979	fold.c	FUNCTION_63	FOR_1
0x55b5	     0xf8c0cffffff	                            jl 0x4005507	      2979	fold.c	FUNCTION_63	FOR_1
0x55bb	              0x90	                                     nop	      2987	fold.c	FUNCTION_63
0x55bc	              0x5d	                                 pop rbp	      2987	fold.c	FUNCTION_63
0x55bd	              0xc3	                                     ret	      2987	fold.c	FUNCTION_63
newFoldLevelWin	SWITCH,0:ELSE,0:DO,0:FOR,1:WHILE,0:IF,1:functions,0:CALL,2	39
0x8c4	              0x55	                                push rbp	       490	fold.c	FUNCTION_21
0x8c5	          0x4889e5	                            mov rbp, rsp	       490	fold.c	FUNCTION_21
0x8c8	        0x4883ec20	                           sub rsp, 0x20	       490	fold.c	FUNCTION_21
0x8cc	        0x48897de8	             mov qword [rbp - 0x18], rdi	       490	fold.c	FUNCTION_21
0x8d0	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       494	fold.c	FUNCTION_21	CALL_1
0x8d4	          0x4889c7	                            mov rdi, rax	       494	fold.c	FUNCTION_21	CALL_1
0x8d7	      0xe89b140000	                    call sym.checkupdate	       494	fold.c	FUNCTION_21	CALL_1
0x8dc	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       495	fold.c	FUNCTION_21	IF_1
0x8e0	     0xfb680200100	          movzx eax, byte [rax + 0x120] 	       495	fold.c	FUNCTION_21	IF_1
0x8e7	            0x84c0	                             test al, al	       495	fold.c	FUNCTION_21	IF_1
0x8e9	            0x7457	                            je 0x4000982	       495	fold.c	FUNCTION_21	IF_1
0x8eb	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       500	fold.c	FUNCTION_21	IF_1
0x8ef	    0x488b80180100	           mov rax, qword [rax + 0x118] 	       500	fold.c	FUNCTION_21	IF_1
0x8f6	        0x488945f8	                mov qword [rbp - 8], rax	       500	fold.c	FUNCTION_21	IF_1
0x8fa	    0xc745f4000000	                mov dword [rbp - 0xc], 0	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x901	            0xeb25	                           jmp 0x4000968	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x903	          0x8b45f4	              mov eax, dword [rbp - 0xc]	       502	fold.c	FUNCTION_21	IF_1	FOR_1
0x906	          0x4863d0	                         movsxd rdx, eax	       502	fold.c	FUNCTION_21	IF_1	FOR_1
0x909	          0x4889d0	                            mov rax, rdx	       502	fold.c	FUNCTION_21	IF_1	FOR_1
0x90c	          0x4801c0	                            add rax, rax	       502	fold.c	FUNCTION_21	IF_1	FOR_1
0x90f	          0x4801d0	                            add rax, rdx	       502	fold.c	FUNCTION_21	IF_1	FOR_1
0x912	        0x48c1e004	                              shl rax, 4	       502	fold.c	FUNCTION_21	IF_1	FOR_1
0x916	          0x4889c2	                            mov rdx, rax	       502	fold.c	FUNCTION_21	IF_1	FOR_1
0x919	        0x488b45f8	                mov rax, qword [rbp - 8]	       502	fold.c	FUNCTION_21	IF_1	FOR_1
0x91d	          0x4801d0	                            add rax, rdx	       502	fold.c	FUNCTION_21	IF_1	FOR_1
0x920	        0xc6402802	                mov byte [rax + 0x28], 2	       502	fold.c	FUNCTION_21	IF_1	FOR_1
0x924	        0x8345f401	                add dword [rbp - 0xc], 1	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x928	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x92c	    0x8b8008010000	           mov eax, dword [rax + 0x108] 	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x932	          0x3b45f4	              cmp eax, dword [rbp - 0xc]	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x935	            0x7fcc	                            jg 0x4000943	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x937	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       503	fold.c	FUNCTION_21	IF_1
0x93b	    0xc68020010000	               mov byte [rax + 0x120], 0	       503	fold.c	FUNCTION_21	IF_1
0x942	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       505	fold.c	FUNCTION_21	CALL_2
0x946	          0x4889c7	                            mov rdi, rax	       505	fold.c	FUNCTION_21	CALL_2
0x949	      0xe800000000	                          call 0x400098e	       505	fold.c	FUNCTION_21	CALL_2
0x94e	              0x90	                                     nop	       506	fold.c	FUNCTION_21
0x94f	              0xc9	                                   leave	       506	fold.c	FUNCTION_21
0x950	              0xc3	                                     ret	       506	fold.c	FUNCTION_21
checkCloseRec	SWITCH,0:ELSE,1:DO,0:FOR,1:WHILE,0:IF,2:functions,0:CALL,1	111
0x9b4	              0x55	                                push rbp	       527	fold.c	FUNCTION_23
0x9b5	          0x4889e5	                            mov rbp, rsp	       527	fold.c	FUNCTION_23
0x9b8	        0x4883ec30	                           sub rsp, 0x30	       527	fold.c	FUNCTION_23
0x9bc	        0x48897de8	             mov qword [rbp - 0x18], rdi	       527	fold.c	FUNCTION_23
0x9c0	        0x488975e0	             mov qword [rbp - 0x20], rsi	       527	fold.c	FUNCTION_23
0x9c4	          0x8955dc	             mov dword [rbp - 0x24], edx	       527	fold.c	FUNCTION_23
0x9c7	    0xc745f0000000	               mov dword [rbp - 0x10], 0	       529	fold.c	FUNCTION_23
0x9ce	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       532	fold.c	FUNCTION_23
0x9d2	        0x488b4010	            mov rax, qword [rax + 0x10] 	       532	fold.c	FUNCTION_23
0x9d6	        0x488945f8	                mov qword [rbp - 8], rax	       532	fold.c	FUNCTION_23
0x9da	    0xc745f4000000	                mov dword [rbp - 0xc], 0	       533	fold.c	FUNCTION_23	FOR_1
0x9e1	      0xe932010000	                           jmp 0x4000b58	       533	fold.c	FUNCTION_23	FOR_1
0x9e6	          0x8b45f4	              mov eax, dword [rbp - 0xc]	       536	fold.c	FUNCTION_23	FOR_1	IF_1
0x9e9	          0x4863d0	                         movsxd rdx, eax	       536	fold.c	FUNCTION_23	FOR_1	IF_1
0x9ec	          0x4889d0	                            mov rax, rdx	       536	fold.c	FUNCTION_23	FOR_1	IF_1
0x9ef	          0x4801c0	                            add rax, rax	       536	fold.c	FUNCTION_23	FOR_1	IF_1
0x9f2	          0x4801d0	                            add rax, rdx	       536	fold.c	FUNCTION_23	FOR_1	IF_1
0x9f5	        0x48c1e004	                              shl rax, 4	       536	fold.c	FUNCTION_23	FOR_1	IF_1
0x9f9	          0x4889c2	                            mov rdx, rax	       536	fold.c	FUNCTION_23	FOR_1	IF_1
0x9fc	        0x488b45f8	                mov rax, qword [rbp - 8]	       536	fold.c	FUNCTION_23	FOR_1	IF_1
0xa00	          0x4801d0	                            add rax, rdx	       536	fold.c	FUNCTION_23	FOR_1	IF_1
0xa03	         0xfb64028	           movzx eax, byte [rax + 0x28] 	       536	fold.c	FUNCTION_23	FOR_1	IF_1
0xa07	            0x84c0	                             test al, al	       536	fold.c	FUNCTION_23	FOR_1	IF_1
0xa09	     0xf8505010000	                           jne 0x4000b54	       536	fold.c	FUNCTION_23	FOR_1	IF_1
0xa0f	        0x837ddc00	               cmp dword [rbp - 0x24], 0	       538	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xa13	     0xf8f9a000000	                            jg 0x4000af3	       538	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xa19	          0x8b45f4	              mov eax, dword [rbp - 0xc]	       538	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xa1c	          0x4863d0	                         movsxd rdx, eax	       538	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xa1f	          0x4889d0	                            mov rax, rdx	       538	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xa22	          0x4801c0	                            add rax, rax	       538	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xa25	          0x4801d0	                            add rax, rdx	       538	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xa28	        0x48c1e004	                              shl rax, 4	       538	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xa2c	          0x4889c2	                            mov rdx, rax	       538	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xa2f	        0x488b45f8	                mov rax, qword [rbp - 8]	       538	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xa33	          0x4801d0	                            add rax, rdx	       538	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xa36	          0x488b00	                    mov rax, qword [rax]	       538	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xa39	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	       538	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xa3d	            0x7f4a	                            jg 0x4000ac9	       538	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xa3f	          0x8b45f4	              mov eax, dword [rbp - 0xc]	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xa42	          0x4863d0	                         movsxd rdx, eax	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xa45	          0x4889d0	                            mov rax, rdx	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xa48	          0x4801c0	                            add rax, rax	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xa4b	          0x4801d0	                            add rax, rdx	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xa4e	        0x48c1e004	                              shl rax, 4	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xa52	          0x4889c2	                            mov rdx, rax	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xa55	        0x488b45f8	                mov rax, qword [rbp - 8]	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xa59	          0x4801d0	                            add rax, rdx	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xa5c	          0x488b08	                    mov rcx, qword [rax]	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xa5f	          0x8b45f4	              mov eax, dword [rbp - 0xc]	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xa62	          0x4863d0	                         movsxd rdx, eax	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xa65	          0x4889d0	                            mov rax, rdx	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xa68	          0x4801c0	                            add rax, rax	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xa6b	          0x4801d0	                            add rax, rdx	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xa6e	        0x48c1e004	                              shl rax, 4	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xa72	          0x4889c2	                            mov rdx, rax	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xa75	        0x488b45f8	                mov rax, qword [rbp - 8]	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xa79	          0x4801d0	                            add rax, rdx	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xa7c	        0x488b4008	                mov rax, qword [rax + 8]	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xa80	          0x4801c8	                            add rax, rcx	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xa83	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xa87	            0x7f2a	                            jg 0x4000af3	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xa89	          0x8b45f4	              mov eax, dword [rbp - 0xc]	       541	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xa8c	          0x4863d0	                         movsxd rdx, eax	       541	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xa8f	          0x4889d0	                            mov rax, rdx	       541	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xa92	          0x4801c0	                            add rax, rax	       541	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xa95	          0x4801d0	                            add rax, rdx	       541	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xa98	        0x48c1e004	                              shl rax, 4	       541	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xa9c	          0x4889c2	                            mov rdx, rax	       541	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xa9f	        0x488b45f8	                mov rax, qword [rbp - 8]	       541	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xaa3	          0x4801d0	                            add rax, rdx	       541	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xaa6	        0xc6402802	                mov byte [rax + 0x28], 2	       541	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xaaa	    0xc745f0010000	               mov dword [rbp - 0x10], 1	       542	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xab1	            0xeb61	                           jmp 0x4000b54	       542	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0xab3	          0x8b45dc	             mov eax, dword [rbp - 0x24]	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0xab6	          0x8d70ff	                      lea esi, [rax - 1]	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0xab9	          0x8b45f4	              mov eax, dword [rbp - 0xc]	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0xabc	          0x4863d0	                         movsxd rdx, eax	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0xabf	          0x4889d0	                            mov rax, rdx	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0xac2	          0x4801c0	                            add rax, rax	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0xac5	          0x4801d0	                            add rax, rdx	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0xac8	        0x48c1e004	                              shl rax, 4	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0xacc	          0x4889c2	                            mov rdx, rax	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0xacf	        0x488b45f8	                mov rax, qword [rbp - 8]	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0xad3	          0x4801d0	                            add rax, rdx	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0xad6	          0x488b00	                    mov rax, qword [rax]	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0xad9	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0xadd	          0x4889d1	                            mov rcx, rdx	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0xae0	          0x4829c1	                            sub rcx, rax	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0xae3	          0x8b45f4	              mov eax, dword [rbp - 0xc]	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0xae6	          0x4863d0	                         movsxd rdx, eax	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0xae9	          0x4889d0	                            mov rax, rdx	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0xaec	          0x4801c0	                            add rax, rax	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0xaef	          0x4801d0	                            add rax, rdx	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0xaf2	        0x48c1e004	                              shl rax, 4	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0xaf6	          0x4889c2	                            mov rdx, rax	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0xaf9	        0x488b45f8	                mov rax, qword [rbp - 8]	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0xafd	          0x4801d0	                            add rax, rdx	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0xb00	        0x4883c010	                           add rax, 0x10	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0xb04	            0x89f2	                            mov edx, esi	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0xb06	          0x4889ce	                            mov rsi, rcx	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0xb09	          0x4889c7	                            mov rdi, rax	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0xb0c	      0xe8a3feffff	                  call sym.checkCloseRec	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0xb11	           0x945f0	              or dword [rbp - 0x10], eax	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0xb14	        0x8345f401	                add dword [rbp - 0xc], 1	       533	fold.c	FUNCTION_23	FOR_1
0xb18	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       533	fold.c	FUNCTION_23	FOR_1
0xb1c	            0x8b00	                    mov eax, dword [rax]	       533	fold.c	FUNCTION_23	FOR_1
0xb1e	          0x3b45f4	              cmp eax, dword [rbp - 0xc]	       533	fold.c	FUNCTION_23	FOR_1
0xb21	     0xf8fbffeffff	                            jg 0x4000a26	       533	fold.c	FUNCTION_23	FOR_1
0xb27	          0x8b45f0	             mov eax, dword [rbp - 0x10]	       549	fold.c	FUNCTION_23
0xb2a	              0xc9	                                   leave	       550	fold.c	FUNCTION_23
0xb2b	              0xc3	                                     ret	       550	fold.c	FUNCTION_23
deleteFold	SWITCH,0:ELSE,3:DO,0:FOR,1:WHILE,1:IF,10:functions,0:CALL,13	161
0x104e	              0x55	                                push rbp	       705	fold.c	FUNCTION_26
0x104f	          0x4889e5	                            mov rbp, rsp	       705	fold.c	FUNCTION_26
0x1052	        0x4883c480	             add rsp, 0xffffffffffffff80	       705	fold.c	FUNCTION_26
0x1056	        0x48897d98	             mov qword [rbp - 0x68], rdi	       705	fold.c	FUNCTION_26
0x105a	        0x48897590	             mov qword [rbp - 0x70], rsi	       705	fold.c	FUNCTION_26
0x105e	          0x89558c	             mov dword [rbp - 0x74], edx	       705	fold.c	FUNCTION_26
0x1061	          0x894d88	             mov dword [rbp - 0x78], ecx	       705	fold.c	FUNCTION_26
0x1064	    0x64488b042528	                mov rax, qword fs:[0x28]	       705	fold.c	FUNCTION_26
0x106d	        0x488945f8	                mov qword [rbp - 8], rax	       705	fold.c	FUNCTION_26
0x1071	            0x31c0	                            xor eax, eax	       705	fold.c	FUNCTION_26
0x1073	    0x48c745c80000	               mov qword [rbp - 0x38], 0	       709	fold.c	FUNCTION_26
0x107b	    0x48c745d00000	               mov qword [rbp - 0x30], 0	       710	fold.c	FUNCTION_26
0x1083	    0xc745a4000000	               mov dword [rbp - 0x5c], 0	       712	fold.c	FUNCTION_26
0x108a	    0xc745a8000000	               mov dword [rbp - 0x58], 0	       713	fold.c	FUNCTION_26
0x1091	        0x488b4598	             mov rax, qword [rbp - 0x68]	       714	fold.c	FUNCTION_26
0x1095	        0x488945d8	             mov qword [rbp - 0x28], rax	       714	fold.c	FUNCTION_26
0x1099	    0xc745ac000000	               mov dword [rbp - 0x54], 0	       716	fold.c	FUNCTION_26
0x10a0	    0x48c745e8ffff	      mov qword [rbp - 0x18], 0x7fffffff	       717	fold.c	FUNCTION_26
0x10a8	    0x48c745f00000	               mov qword [rbp - 0x10], 0	       718	fold.c	FUNCTION_26
0x10b0	    0x488b05000000	            mov rax, qword [0x040010f7] 	       720	fold.c	FUNCTION_26	CALL_1
0x10b7	          0x4889c7	                            mov rdi, rax	       720	fold.c	FUNCTION_26	CALL_1
0x10ba	      0xe8b80c0000	                    call sym.checkupdate	       720	fold.c	FUNCTION_26	CALL_1
0x10bf	      0xe99d010000	                           jmp 0x40012a1	       722	fold.c	FUNCTION_26	WHILE_1
0x10c4	    0x488b05000000	            mov rax, qword [0x0400110b] 	       725	fold.c	FUNCTION_26	WHILE_1
0x10cb	    0x480508010000	                          add rax, 0x108	       725	fold.c	FUNCTION_26	WHILE_1
0x10d1	        0x488945b8	             mov qword [rbp - 0x48], rax	       725	fold.c	FUNCTION_26	WHILE_1
0x10d5	    0x48c745c00000	               mov qword [rbp - 0x40], 0	       726	fold.c	FUNCTION_26	WHILE_1
0x10dd	    0x48c745e00000	               mov qword [rbp - 0x20], 0	       727	fold.c	FUNCTION_26	WHILE_1
0x10e5	    0xc745a0000000	               mov dword [rbp - 0x60], 0	       728	fold.c	FUNCTION_26	WHILE_1
0x10ec	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       731	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_1	CALL_2
0x10f0	        0x482b45e0	             sub rax, qword [rbp - 0x20]	       731	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_1	CALL_2
0x10f4	          0x4889c1	                            mov rcx, rax	       731	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_1	CALL_2
0x10f7	        0x488d55b0	                   lea rdx, [rbp - 0x50]	       731	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_1	CALL_2
0x10fb	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       731	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_1	CALL_2
0x10ff	          0x4889ce	                            mov rsi, rcx	       731	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_1	CALL_2
0x1102	          0x4889c7	                            mov rdi, rax	       731	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_1	CALL_2
0x1105	      0xe89b0a0000	                       call sym.foldFind	       731	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_1	CALL_2
0x110a	            0x85c0	                           test eax, eax	       731	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_1	CALL_2
0x110c	            0x7464	                            je 0x40011b2	       731	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_1	CALL_2
0x110e	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       734	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x1112	        0x488945c0	             mov qword [rbp - 0x40], rax	       734	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x1116	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       735	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x111a	        0x488945c8	             mov qword [rbp - 0x38], rax	       735	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x111e	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       736	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x1122	        0x488945d0	             mov qword [rbp - 0x30], rax	       736	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x1126	        0x488b75b0	             mov rsi, qword [rbp - 0x50]	       739	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2	CALL_3
0x112a	    0x488b05000000	            mov rax, qword [0x04001171] 	       739	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2	CALL_3
0x1131	        0x4c8b45e0	              mov r8, qword [rbp - 0x20]	       739	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2	CALL_3
0x1135	        0x488d7da4	                   lea rdi, [rbp - 0x5c]	       739	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2	CALL_3
0x1139	          0x8b4da8	             mov ecx, dword [rbp - 0x58]	       739	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2	CALL_3
0x113c	        0x488d55a0	                   lea rdx, [rbp - 0x60]	       739	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2	CALL_3
0x1140	          0x4d89c1	                              mov r9, r8	       739	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2	CALL_3
0x1143	          0x4989f8	                             mov r8, rdi	       739	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2	CALL_3
0x1146	          0x4889c7	                            mov rdi, rax	       739	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2	CALL_3
0x1149	      0xe8cc180000	                   call sym.check_closed	       739	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2	CALL_3
0x114e	            0x85c0	                           test eax, eax	       739	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2	CALL_3
0x1150	            0x7523	                           jne 0x40011b5	       739	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2	CALL_3
0x1152	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       744	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x1156	        0x4883c010	                           add rax, 0x10	       744	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x115a	        0x488945b8	             mov qword [rbp - 0x48], rax	       744	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x115e	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       745	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x1162	          0x488b00	                    mov rax, qword [rax]	       745	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x1165	        0x480145e0	            add qword [rbp - 0x20], rax 	       745	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x1169	        0x8345a801	               add dword [rbp - 0x58], 1	       746	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x116d	      0xe97affffff	                           jmp 0x400112c	       747	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x1172	              0x90	                                     nop	       732	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_1
0x1173	            0xeb01	                           jmp 0x40011b6	       732	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_1
0x1175	              0x90	                                     nop	       741	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2
0x1176	      0x48837dc000	               cmp qword [rbp - 0x40], 0	       748	fold.c	FUNCTION_26	WHILE_1	IF_3
0x117b	            0x750a	                           jne 0x40011c7	       748	fold.c	FUNCTION_26	WHILE_1	IF_3
0x117d	      0x488345d801	               add qword [rbp - 0x28], 1	       750	fold.c	FUNCTION_26	WHILE_1	IF_3
0x1182	      0xe9da000000	                           jmp 0x40012a1	       750	fold.c	FUNCTION_26	WHILE_1	IF_3
0x1187	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       754	fold.c	FUNCTION_26	WHILE_1	ELSE_1
0x118b	          0x488b10	                    mov rdx, qword [rax]	       754	fold.c	FUNCTION_26	WHILE_1	ELSE_1
0x118e	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       754	fold.c	FUNCTION_26	WHILE_1	ELSE_1
0x1192	        0x488b4008	                mov rax, qword [rax + 8]	       754	fold.c	FUNCTION_26	WHILE_1	ELSE_1
0x1196	          0x4801c2	                            add rdx, rax	       754	fold.c	FUNCTION_26	WHILE_1	ELSE_1
0x1199	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       754	fold.c	FUNCTION_26	WHILE_1	ELSE_1
0x119d	          0x4801d0	                            add rax, rdx	       754	fold.c	FUNCTION_26	WHILE_1	ELSE_1
0x11a0	        0x488945d8	             mov qword [rbp - 0x28], rax	       754	fold.c	FUNCTION_26	WHILE_1	ELSE_1
0x11a4	    0x488b05000000	            mov rax, qword [0x040011eb] 	       756	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_4
0x11ab	          0x4889c7	                            mov rdi, rax	       756	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_4
0x11ae	      0xe800000000	                          call 0x40011f3	       756	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_4
0x11b3	            0x85c0	                           test eax, eax	       756	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_4
0x11b5	            0x743c	                            je 0x4001233	       756	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_4
0x11b7	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	       758	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4
0x11bb	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       758	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4
0x11bf	        0x488b4010	            mov rax, qword [rax + 0x10] 	       758	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4
0x11c3	          0x4829c2	                            sub rdx, rax	       758	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4
0x11c6	          0x4889d0	                            mov rax, rdx	       758	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4
0x11c9	        0x48c1f804	                              sar rax, 4	       758	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4
0x11cd	          0x4889c2	                            mov rdx, rax	       758	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4
0x11d0	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	       758	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4
0x11da	        0x480fafc2	                           imul rax, rdx	       758	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4
0x11de	            0x89c1	                            mov ecx, eax	       757	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_5
0x11e0	          0x8b558c	             mov edx, dword [rbp - 0x74]	       757	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_5
0x11e3	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       757	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_5
0x11e7	            0x89ce	                            mov esi, ecx	       757	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_5
0x11e9	          0x4889c7	                            mov rdi, rax	       757	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_5
0x11ec	      0xe8b6100000	                call sym.deleteFoldEntry	       757	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_5
0x11f1	            0xeb62	                           jmp 0x4001295	       757	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_5
0x11f3	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       761	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_5
0x11f7	          0x488b10	                    mov rdx, qword [rax]	       761	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_5
0x11fa	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       761	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_5
0x11fe	          0x4801d0	                            add rax, rdx	       761	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_5
0x1201	        0x483b45e8	             cmp rax, qword [rbp - 0x18]	       761	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_5
0x1205	            0x7d12	                           jge 0x4001259	       761	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_5
0x1207	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       762	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_5
0x120b	          0x488b10	                    mov rdx, qword [rax]	       762	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_5
0x120e	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       762	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_5
0x1212	          0x4801d0	                            add rax, rdx	       762	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_5
0x1215	        0x488945e8	             mov qword [rbp - 0x18], rax	       762	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_5
0x1219	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       763	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_6
0x121d	        0x483b45d8	             cmp rax, qword [rbp - 0x28]	       763	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_6
0x1221	            0x7d08	                           jge 0x400126b	       763	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_6
0x1223	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       764	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_6
0x1227	        0x488945f0	             mov qword [rbp - 0x10], rax	       764	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_6
0x122b	        0x837dac00	               cmp dword [rbp - 0x54], 0	       765	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_7
0x122f	            0x750f	                           jne 0x4001280	       765	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_7
0x1231	    0x488b05000000	            mov rax, qword [0x04001278] 	       766	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	CALL_6
0x1238	          0x4889c7	                            mov rdi, rax	       766	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	CALL_6
0x123b	      0xe8444f0000	                    call sym.parseMarker	       766	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	CALL_6
0x1240	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	       767	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	CALL_7
0x1244	          0x8b4d8c	             mov ecx, dword [rbp - 0x74]	       767	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	CALL_7
0x1247	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       767	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	CALL_7
0x124b	            0x89ce	                            mov esi, ecx	       767	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	CALL_7
0x124d	          0x4889c7	                            mov rdi, rax	       767	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	CALL_7
0x1250	      0xe84e1c0000	              call sym.deleteFoldMarkers	       767	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	CALL_7
0x1255	    0xc745ac010000	               mov dword [rbp - 0x54], 1	       769	fold.c	FUNCTION_26	WHILE_1	ELSE_1
0x125c	      0xe800000000	                          call 0x40012a1	       772	fold.c	FUNCTION_26	WHILE_1	ELSE_1	CALL_8
0x1261	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       722	fold.c	FUNCTION_26	WHILE_1
0x1265	        0x483b4590	             cmp rax, qword [rbp - 0x70]	       722	fold.c	FUNCTION_26	WHILE_1
0x1269	     0xf8e55feffff	                           jle 0x4001104	       722	fold.c	FUNCTION_26	WHILE_1
0x126f	        0x837dac00	               cmp dword [rbp - 0x54], 0	       775	fold.c	FUNCTION_26	IF_8
0x1273	            0x7529	                           jne 0x40012de	       775	fold.c	FUNCTION_26	IF_8
0x1275	    0x488b05000000	            mov rax, qword [0x040012bc] 	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x127c	          0x4889c7	                            mov rdi, rax	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x127f	      0xe800000000	                          call 0x40012c4	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x1284	          0x4889c7	                            mov rdi, rax	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x1287	      0xe800000000	                          call 0x40012cc	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x128c	        0x837d8800	               cmp dword [rbp - 0x78], 0	       779	fold.c	FUNCTION_26	IF_8	IF_9
0x1290	            0x7411	                            je 0x40012e3	       779	fold.c	FUNCTION_26	IF_8	IF_9
0x1292	      0xbf14000000	                           mov edi, 0x14	       780	fold.c	FUNCTION_26	IF_8	CALL_11
0x1297	      0xe800000000	                          call 0x40012dc	       780	fold.c	FUNCTION_26	IF_8	CALL_11
0x129c	            0xeb05	                           jmp 0x40012e3	       780	fold.c	FUNCTION_26	IF_8	CALL_11
0x129e	      0xe800000000	                          call 0x40012e3	       784	fold.c	FUNCTION_26	CALL_12
0x12a3	      0x48837df000	               cmp qword [rbp - 0x10], 0	       786	fold.c	FUNCTION_26	IF_10
0x12a8	            0x7e1a	                           jle 0x4001304	       786	fold.c	FUNCTION_26	IF_10
0x12aa	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       787	fold.c	FUNCTION_26	CALL_13
0x12ae	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       787	fold.c	FUNCTION_26	CALL_13
0x12b2	      0xb900000000	                              mov ecx, 0	       787	fold.c	FUNCTION_26	CALL_13
0x12b7	      0xbe00000000	                              mov esi, 0	       787	fold.c	FUNCTION_26	CALL_13
0x12bc	          0x4889c7	                            mov rdi, rax	       787	fold.c	FUNCTION_26	CALL_13
0x12bf	      0xe800000000	                          call 0x4001304	       787	fold.c	FUNCTION_26	CALL_13
0x12c4	              0x90	                                     nop	       788	fold.c	FUNCTION_26
0x12c5	        0x488b45f8	                mov rax, qword [rbp - 8]	       788	fold.c	FUNCTION_26
0x12c9	    0x644833042528	                xor rax, qword fs:[0x28]	       788	fold.c	FUNCTION_26
0x12d2	            0x7405	                            je 0x4001319	       788	fold.c	FUNCTION_26
0x12d4	      0xe800000000	                          call 0x4001319	       788	fold.c	FUNCTION_26
0x12d9	              0xc9	                                   leave	       788	fold.c	FUNCTION_26
0x12da	              0xc3	                                     ret	       788	fold.c	FUNCTION_26
checkSmall	SWITCH,0:ELSE,1:DO,0:FOR,1:WHILE,0:IF,3:functions,0:CALL,2	58
0x2aef	              0x55	                                push rbp	      1684	fold.c	FUNCTION_50
0x2af0	          0x4889e5	                            mov rbp, rsp	      1684	fold.c	FUNCTION_50
0x2af3	        0x4883ec30	                           sub rsp, 0x30	      1684	fold.c	FUNCTION_50
0x2af7	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1684	fold.c	FUNCTION_50
0x2afb	        0x488975e0	             mov qword [rbp - 0x20], rsi	      1684	fold.c	FUNCTION_50
0x2aff	        0x488955d8	             mov qword [rbp - 0x28], rdx	      1684	fold.c	FUNCTION_50
0x2b03	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1688	fold.c	FUNCTION_50	IF_1
0x2b07	         0xfb64029	           movzx eax, byte [rax + 0x29] 	      1688	fold.c	FUNCTION_50	IF_1
0x2b0b	            0x3c02	                               cmp al, 2	      1688	fold.c	FUNCTION_50	IF_1
0x2b0d	     0xf85af000000	                           jne 0x4002c02	      1688	fold.c	FUNCTION_50	IF_1
0x2b13	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1691	fold.c	FUNCTION_50	IF_1	CALL_1
0x2b17	        0x4883c010	                           add rax, 0x10	      1691	fold.c	FUNCTION_50	IF_1	CALL_1
0x2b1b	          0x4889c7	                            mov rdi, rax	      1691	fold.c	FUNCTION_50	IF_1	CALL_1
0x2b1e	      0xe8a1000000	                  call sym.setSmallMaybe	      1691	fold.c	FUNCTION_50	IF_1	CALL_1
0x2b23	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1693	fold.c	FUNCTION_50	IF_1	IF_2
0x2b27	        0x488b5008	                mov rdx, qword [rax + 8]	      1693	fold.c	FUNCTION_50	IF_1	IF_2
0x2b2b	    0x488b05000000	            mov rax, qword [0x04002b72] 	      1693	fold.c	FUNCTION_50	IF_1	IF_2
0x2b32	    0x488b80080200	           mov rax, qword [rax + 0x208] 	      1693	fold.c	FUNCTION_50	IF_1	IF_2
0x2b39	          0x4839c2	                            cmp rdx, rax	      1693	fold.c	FUNCTION_50	IF_1	IF_2
0x2b3c	            0x7e0a	                           jle 0x4002b88	      1693	fold.c	FUNCTION_50	IF_1	IF_2
0x2b3e	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1694	fold.c	FUNCTION_50	IF_1	IF_2
0x2b42	        0xc6402900	                mov byte [rax + 0x29], 0	      1694	fold.c	FUNCTION_50	IF_1	IF_2
0x2b46	            0xeb7a	                           jmp 0x4002c02	      1694	fold.c	FUNCTION_50	IF_1	IF_2
0x2b48	    0xc745f8000000	                  mov dword [rbp - 8], 0	      1697	fold.c	FUNCTION_50	IF_1	ELSE_1
0x2b4f	    0xc745fc000000	                  mov dword [rbp - 4], 0	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x2b56	            0xeb4f	                           jmp 0x4002be7	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x2b58	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x2b5c	          0x488b10	                    mov rdx, qword [rax]	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x2b5f	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x2b63	          0x4801c2	                            add rdx, rax	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x2b66	          0x8b45fc	                mov eax, dword [rbp - 4]	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x2b69	            0x4898	                                    cdqe	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x2b6b	          0x4801c2	                            add rdx, rax	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x2b6e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x2b72	          0x4889d6	                            mov rsi, rdx	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x2b75	          0x4889c7	                            mov rdi, rax	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x2b78	      0xe800000000	                          call 0x4002bbd	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x2b7d	           0x145f8	                add dword [rbp - 8], eax	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x2b80	          0x8b45f8	                mov eax, dword [rbp - 8]	      1701	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x2b83	          0x4863d0	                         movsxd rdx, eax	      1701	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x2b86	    0x488b05000000	            mov rax, qword [0x04002bcd] 	      1701	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x2b8d	    0x488b80080200	           mov rax, qword [rax + 0x208] 	      1701	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x2b94	          0x4839c2	                            cmp rdx, rax	      1701	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x2b97	            0x7e0a	                           jle 0x4002be3	      1701	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x2b99	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1703	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x2b9d	        0xc6402900	                mov byte [rax + 0x29], 0	      1703	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x2ba1	            0xeb1f	                           jmp 0x4002c02	      1704	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x2ba3	        0x8345fc01	                  add dword [rbp - 4], 1	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x2ba7	          0x8b45fc	                mov eax, dword [rbp - 4]	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x2baa	          0x4863d0	                         movsxd rdx, eax	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x2bad	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x2bb1	        0x488b4008	                mov rax, qword [rax + 8]	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x2bb5	          0x4839c2	                            cmp rdx, rax	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x2bb8	            0x7c9e	                            jl 0x4002b98	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x2bba	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1707	fold.c	FUNCTION_50	IF_1	ELSE_1
0x2bbe	        0xc6402901	                mov byte [rax + 0x29], 1	      1707	fold.c	FUNCTION_50	IF_1	ELSE_1
0x2bc2	              0xc9	                                   leave	      1710	fold.c	FUNCTION_50
0x2bc3	              0xc3	                                     ret	      1710	fold.c	FUNCTION_50
foldmethodIsIndent	SWITCH,0:ELSE,0:DO,0:FOR,0:WHILE,0:IF,0:functions,0:CALL,0	11
0x543	              0x55	                                push rbp	       316	fold.c	FUNCTION_9
0x544	          0x4889e5	                            mov rbp, rsp	       316	fold.c	FUNCTION_9
0x547	        0x48897df8	                mov qword [rbp - 8], rdi	       316	fold.c	FUNCTION_9
0x54b	        0x488b45f8	                mov rax, qword [rbp - 8]	       317	fold.c	FUNCTION_9
0x54f	    0x488b80f80100	           mov rax, qword [rax + 0x1f8] 	       317	fold.c	FUNCTION_9
0x556	           0xfb600	                   movzx eax, byte [rax]	       317	fold.c	FUNCTION_9
0x559	            0x3c69	                            cmp al, 0x69	       317	fold.c	FUNCTION_9
0x55b	           0xf94c0	                                 sete al	       317	fold.c	FUNCTION_9
0x55e	           0xfb6c0	                           movzx eax, al	       317	fold.c	FUNCTION_9
0x561	              0x5d	                                 pop rbp	       318	fold.c	FUNCTION_9
0x562	              0xc3	                                     ret	       318	fold.c	FUNCTION_9
setManualFoldWin	SWITCH,0:ELSE,3:DO,0:FOR,2:WHILE,0:IF,15:functions,0:CALL,6	198
0x1f51	              0x55	                                push rbp	      1273	fold.c	FUNCTION_41
0x1f52	          0x4889e5	                            mov rbp, rsp	      1273	fold.c	FUNCTION_41
0x1f55	        0x4883ec70	                           sub rsp, 0x70	      1273	fold.c	FUNCTION_41
0x1f59	        0x48897da8	             mov qword [rbp - 0x58], rdi	      1273	fold.c	FUNCTION_41
0x1f5d	        0x488975a0	             mov qword [rbp - 0x60], rsi	      1273	fold.c	FUNCTION_41
0x1f61	          0x89559c	             mov dword [rbp - 0x64], edx	      1273	fold.c	FUNCTION_41
0x1f64	          0x894d98	             mov dword [rbp - 0x68], ecx	      1273	fold.c	FUNCTION_41
0x1f67	        0x4c894590	              mov qword [rbp - 0x70], r8	      1273	fold.c	FUNCTION_41
0x1f6b	    0x64488b042528	                mov rax, qword fs:[0x28]	      1273	fold.c	FUNCTION_41
0x1f74	        0x488945f8	                mov qword [rbp - 8], rax	      1273	fold.c	FUNCTION_41
0x1f78	            0x31c0	                            xor eax, eax	      1273	fold.c	FUNCTION_41
0x1f7a	    0x48c745d00000	               mov qword [rbp - 0x30], 0	      1276	fold.c	FUNCTION_41
0x1f82	    0xc745b8000000	               mov dword [rbp - 0x48], 0	      1278	fold.c	FUNCTION_41
0x1f89	    0xc745bc000000	               mov dword [rbp - 0x44], 0	      1279	fold.c	FUNCTION_41
0x1f90	    0xc745c0000000	               mov dword [rbp - 0x40], 0	      1280	fold.c	FUNCTION_41
0x1f97	    0x48c745e0ffff	      mov qword [rbp - 0x20], 0x7fffffff	      1282	fold.c	FUNCTION_41
0x1f9f	    0x48c745e80000	               mov qword [rbp - 0x18], 0	      1283	fold.c	FUNCTION_41
0x1fa7	    0xc745c4000000	               mov dword [rbp - 0x3c], 0	      1284	fold.c	FUNCTION_41
0x1fae	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1286	fold.c	FUNCTION_41	CALL_1
0x1fb2	          0x4889c7	                            mov rdi, rax	      1286	fold.c	FUNCTION_41	CALL_1
0x1fb5	      0xe8bdfdffff	                    call sym.checkupdate	      1286	fold.c	FUNCTION_41	CALL_1
0x1fba	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1291	fold.c	FUNCTION_41
0x1fbe	    0x480508010000	                          add rax, 0x108	      1291	fold.c	FUNCTION_41
0x1fc4	        0x488945d8	             mov qword [rbp - 0x28], rax	      1291	fold.c	FUNCTION_41
0x1fc8	        0x488d55c8	                   lea rdx, [rbp - 0x38]	      1294	fold.c	FUNCTION_41	FOR_1	IF_1	CALL_2
0x1fcc	        0x488b4da0	             mov rcx, qword [rbp - 0x60]	      1294	fold.c	FUNCTION_41	FOR_1	IF_1	CALL_2
0x1fd0	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1294	fold.c	FUNCTION_41	FOR_1	IF_1	CALL_2
0x1fd4	          0x4889ce	                            mov rsi, rcx	      1294	fold.c	FUNCTION_41	FOR_1	IF_1	CALL_2
0x1fd7	          0x4889c7	                            mov rdi, rax	      1294	fold.c	FUNCTION_41	FOR_1	IF_1	CALL_2
0x1fda	      0xe8c6fbffff	                       call sym.foldFind	      1294	fold.c	FUNCTION_41	FOR_1	IF_1	CALL_2
0x1fdf	            0x85c0	                           test eax, eax	      1294	fold.c	FUNCTION_41	FOR_1	IF_1	CALL_2
0x1fe1	            0x7546	                           jne 0x4002069	      1294	fold.c	FUNCTION_41	FOR_1	IF_1	CALL_2
0x1fe3	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1297	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x1fe7	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      1297	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x1feb	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1297	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x1fef	            0x8b00	                    mov eax, dword [rax]	      1297	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x1ff1	          0x4863d0	                         movsxd rdx, eax	      1297	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x1ff4	          0x4889d0	                            mov rax, rdx	      1297	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x1ff7	          0x4801c0	                            add rax, rax	      1297	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x1ffa	          0x4801d0	                            add rax, rdx	      1297	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x1ffd	        0x48c1e004	                              shl rax, 4	      1297	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x2001	        0x488d1401	                    lea rdx, [rcx + rax]	      1297	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x2005	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1297	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x2009	          0x4839c2	                            cmp rdx, rax	      1297	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x200c	     0xf8674010000	                           jbe 0x40021c6	      1297	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x2012	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1298	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x2016	          0x488b10	                    mov rdx, qword [rax]	      1298	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x2019	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1298	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x201d	          0x4801d0	                            add rax, rdx	      1298	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x2020	        0x488945e0	             mov qword [rbp - 0x20], rax	      1298	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x2024	      0xe95d010000	                           jmp 0x40021c6	      1299	fold.c	FUNCTION_41	FOR_1	IF_1
0x2029	    0xc745c0010000	               mov dword [rbp - 0x40], 1	      1303	fold.c	FUNCTION_41	FOR_1
0x2030	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x2034	        0x488d7030	                   lea rsi, [rax + 0x30]	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x2038	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x203c	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x2040	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x2044	            0x8b00	                    mov eax, dword [rax]	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x2046	          0x4863d0	                         movsxd rdx, eax	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x2049	          0x4889d0	                            mov rax, rdx	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x204c	          0x4801c0	                            add rax, rax	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x204f	          0x4801d0	                            add rax, rdx	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x2052	        0x48c1e004	                              shl rax, 4	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x2056	          0x4801c8	                            add rax, rcx	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x2059	          0x4839c6	                            cmp rsi, rax	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x205c	            0x7316	                           jae 0x40020b4	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x205e	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1307	fold.c	FUNCTION_41	FOR_1	IF_3
0x2062	        0x4883c030	                           add rax, 0x30	      1307	fold.c	FUNCTION_41	FOR_1	IF_3
0x2066	          0x488b10	                    mov rdx, qword [rax]	      1307	fold.c	FUNCTION_41	FOR_1	IF_3
0x2069	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1307	fold.c	FUNCTION_41	FOR_1	IF_3
0x206d	          0x4801d0	                            add rax, rdx	      1307	fold.c	FUNCTION_41	FOR_1	IF_3
0x2070	        0x488945e0	             mov qword [rbp - 0x20], rax	      1307	fold.c	FUNCTION_41	FOR_1	IF_3
0x2074	        0x837dbc00	               cmp dword [rbp - 0x44], 0	      1310	fold.c	FUNCTION_41	FOR_1	IF_4
0x2078	            0x750c	                           jne 0x40020c6	      1310	fold.c	FUNCTION_41	FOR_1	IF_4
0x207a	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1310	fold.c	FUNCTION_41	FOR_1	IF_4
0x207e	         0xfb64028	           movzx eax, byte [rax + 0x28] 	      1310	fold.c	FUNCTION_41	FOR_1	IF_4
0x2082	            0x3c02	                               cmp al, 2	      1310	fold.c	FUNCTION_41	FOR_1	IF_4
0x2084	            0x7575	                           jne 0x400213b	      1310	fold.c	FUNCTION_41	FOR_1	IF_4
0x2086	    0xc745bc010000	               mov dword [rbp - 0x44], 1	      1312	fold.c	FUNCTION_41	FOR_1	IF_4
0x208d	          0x8b45b8	             mov eax, dword [rbp - 0x48]	      1313	fold.c	FUNCTION_41	FOR_1	IF_4	IF_5
0x2090	          0x4863d0	                         movsxd rdx, eax	      1313	fold.c	FUNCTION_41	FOR_1	IF_4	IF_5
0x2093	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1313	fold.c	FUNCTION_41	FOR_1	IF_4	IF_5
0x2097	    0x488b80e80100	           mov rax, qword [rax + 0x1e8] 	      1313	fold.c	FUNCTION_41	FOR_1	IF_4	IF_5
0x209e	          0x4839c2	                            cmp rdx, rax	      1313	fold.c	FUNCTION_41	FOR_1	IF_4	IF_5
0x20a1	            0x7c0a	                            jl 0x40020ed	      1313	fold.c	FUNCTION_41	FOR_1	IF_4	IF_5
0x20a3	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1314	fold.c	FUNCTION_41	FOR_1	IF_4	IF_5
0x20a7	        0xc6402801	                mov byte [rax + 0x28], 1	      1314	fold.c	FUNCTION_41	FOR_1	IF_4	IF_5
0x20ab	            0xeb08	                           jmp 0x40020f5	      1314	fold.c	FUNCTION_41	FOR_1	IF_4	IF_5
0x20ad	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1316	fold.c	FUNCTION_41	FOR_1	IF_4	ELSE_1
0x20b1	        0xc6402800	                mov byte [rax + 0x28], 0	      1316	fold.c	FUNCTION_41	FOR_1	IF_4	ELSE_1
0x20b5	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1317	fold.c	FUNCTION_41	FOR_1	IF_4
0x20b9	        0x488b4020	            mov rax, qword [rax + 0x20] 	      1317	fold.c	FUNCTION_41	FOR_1	IF_4
0x20bd	        0x488945f0	             mov qword [rbp - 0x10], rax	      1317	fold.c	FUNCTION_41	FOR_1	IF_4
0x20c1	    0xc745b4000000	               mov dword [rbp - 0x4c], 0	      1318	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x20c8	            0xeb25	                           jmp 0x400212f	      1318	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x20ca	          0x8b45b4	             mov eax, dword [rbp - 0x4c]	      1319	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x20cd	          0x4863d0	                         movsxd rdx, eax	      1319	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x20d0	          0x4889d0	                            mov rax, rdx	      1319	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x20d3	          0x4801c0	                            add rax, rax	      1319	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x20d6	          0x4801d0	                            add rax, rdx	      1319	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x20d9	        0x48c1e004	                              shl rax, 4	      1319	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x20dd	          0x4889c2	                            mov rdx, rax	      1319	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x20e0	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1319	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x20e4	          0x4801d0	                            add rax, rdx	      1319	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x20e7	        0xc6402802	                mov byte [rax + 0x28], 2	      1319	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x20eb	        0x8345b401	               add dword [rbp - 0x4c], 1	      1318	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x20ef	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1318	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x20f3	          0x8b4010	            mov eax, dword [rax + 0x10] 	      1318	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x20f6	          0x3b45b4	             cmp eax, dword [rbp - 0x4c]	      1318	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x20f9	            0x7fcf	                            jg 0x400210a	      1318	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x20fb	        0x837d9c00	               cmp dword [rbp - 0x64], 0	      1323	fold.c	FUNCTION_41	FOR_1	IF_6
0x20ff	            0x7520	                           jne 0x4002161	      1323	fold.c	FUNCTION_41	FOR_1	IF_6
0x2101	        0x837d9800	               cmp dword [rbp - 0x68], 0	      1323	fold.c	FUNCTION_41	FOR_1	IF_6
0x2105	            0x741a	                            je 0x4002161	      1323	fold.c	FUNCTION_41	FOR_1	IF_6
0x2107	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1325	fold.c	FUNCTION_41	FOR_1	IF_6	IF_7
0x210b	         0xfb64028	           movzx eax, byte [rax + 0x28] 	      1325	fold.c	FUNCTION_41	FOR_1	IF_6	IF_7
0x210f	            0x3c01	                               cmp al, 1	      1325	fold.c	FUNCTION_41	FOR_1	IF_6	IF_7
0x2111	            0x7440	                            je 0x4002193	      1325	fold.c	FUNCTION_41	FOR_1	IF_6	IF_7
0x2113	        0x834dc401	                or dword [rbp - 0x3c], 1	      1327	fold.c	FUNCTION_41	FOR_1	IF_6	IF_7
0x2117	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1328	fold.c	FUNCTION_41	FOR_1	IF_6	IF_7
0x211b	        0xc6402801	                mov byte [rax + 0x28], 1	      1328	fold.c	FUNCTION_41	FOR_1	IF_6	IF_7
0x211f	            0xeb32	                           jmp 0x4002193	      1325	fold.c	FUNCTION_41	FOR_1	IF_6	IF_7
0x2121	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1331	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8
0x2125	         0xfb64028	           movzx eax, byte [rax + 0x28] 	      1331	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8
0x2129	            0x3c01	                               cmp al, 1	      1331	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8
0x212b	            0x7526	                           jne 0x4002193	      1331	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8
0x212d	        0x837d9c00	               cmp dword [rbp - 0x64], 0	      1334	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9
0x2131	            0x7456	                            je 0x40021c9	      1334	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9
0x2133	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1336	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9
0x2137	        0xc6402800	                mov byte [rax + 0x28], 0	      1336	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9
0x213b	        0x834dc401	                or dword [rbp - 0x3c], 1	      1337	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9
0x213f	        0x837d9800	               cmp dword [rbp - 0x68], 0	      1338	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9	IF_10
0x2143	            0x7444	                            je 0x40021c9	      1338	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9	IF_10
0x2145	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1339	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9	CALL_3
0x2149	          0x4889c7	                            mov rdi, rax	      1339	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9	CALL_3
0x214c	      0xe8dc000000	                 call sym.foldOpenNested	      1339	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9	CALL_3
0x2151	            0xeb36	                           jmp 0x40021c9	      1341	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8
0x2153	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1345	fold.c	FUNCTION_41	FOR_1
0x2157	        0x488945d0	             mov qword [rbp - 0x30], rax	      1345	fold.c	FUNCTION_41	FOR_1
0x215b	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1346	fold.c	FUNCTION_41	FOR_1
0x215f	        0x4883c010	                           add rax, 0x10	      1346	fold.c	FUNCTION_41	FOR_1
0x2163	        0x488945d8	             mov qword [rbp - 0x28], rax	      1346	fold.c	FUNCTION_41	FOR_1
0x2167	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1347	fold.c	FUNCTION_41	FOR_1
0x216b	          0x488b00	                    mov rax, qword [rax]	      1347	fold.c	FUNCTION_41	FOR_1
0x216e	        0x482945a0	             sub qword [rbp - 0x60], rax	      1347	fold.c	FUNCTION_41	FOR_1
0x2172	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1348	fold.c	FUNCTION_41	FOR_1
0x2176	          0x488b00	                    mov rax, qword [rax]	      1348	fold.c	FUNCTION_41	FOR_1
0x2179	        0x480145e8	            add qword [rbp - 0x18], rax 	      1348	fold.c	FUNCTION_41	FOR_1
0x217d	        0x8345b801	               add dword [rbp - 0x48], 1	      1349	fold.c	FUNCTION_41	FOR_1
0x2181	      0xe942feffff	                           jmp 0x4002008	      1350	fold.c	FUNCTION_41	FOR_1
0x2186	              0x90	                                     nop	      1299	fold.c	FUNCTION_41	FOR_1	IF_1
0x2187	            0xeb01	                           jmp 0x40021ca	      1299	fold.c	FUNCTION_41	FOR_1	IF_1
0x2189	              0x90	                                     nop	      1341	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8
0x218a	        0x837dc000	               cmp dword [rbp - 0x40], 0	      1351	fold.c	FUNCTION_41	IF_11
0x218e	            0x7440	                            je 0x4002210	      1351	fold.c	FUNCTION_41	IF_11
0x2190	        0x837d9c00	               cmp dword [rbp - 0x64], 0	      1354	fold.c	FUNCTION_41	IF_11	IF_12
0x2194	            0x7513	                           jne 0x40021e9	      1354	fold.c	FUNCTION_41	IF_11	IF_12
0x2196	      0x48837dd000	               cmp qword [rbp - 0x30], 0	      1354	fold.c	FUNCTION_41	IF_11	IF_12
0x219b	            0x740c	                            je 0x40021e9	      1354	fold.c	FUNCTION_41	IF_11	IF_12
0x219d	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1356	fold.c	FUNCTION_41	IF_11	IF_12
0x21a1	        0xc6402801	                mov byte [rax + 0x28], 1	      1356	fold.c	FUNCTION_41	IF_11	IF_12
0x21a5	        0x834dc401	                or dword [rbp - 0x3c], 1	      1357	fold.c	FUNCTION_41	IF_11	IF_12
0x21a9	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1359	fold.c	FUNCTION_41	IF_11
0x21ad	    0xc68020010000	               mov byte [rax + 0x120], 1	      1359	fold.c	FUNCTION_41	IF_11
0x21b4	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	      1360	fold.c	FUNCTION_41	IF_11	IF_13
0x21b7	          0x83e001	                              and eax, 1	      1360	fold.c	FUNCTION_41	IF_11	IF_13
0x21ba	            0x85c0	                           test eax, eax	      1360	fold.c	FUNCTION_41	IF_11	IF_13
0x21bc	            0x740c	                            je 0x400220a	      1360	fold.c	FUNCTION_41	IF_11	IF_13
0x21be	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1361	fold.c	FUNCTION_41	IF_11	CALL_4
0x21c2	          0x4889c7	                            mov rdi, rax	      1361	fold.c	FUNCTION_41	IF_11	CALL_4
0x21c5	      0xe800000000	                          call 0x400220a	      1361	fold.c	FUNCTION_41	IF_11	CALL_4
0x21ca	        0x834dc402	                or dword [rbp - 0x3c], 2	      1362	fold.c	FUNCTION_41	IF_11
0x21ce	            0xeb2b	                           jmp 0x400223b	      1362	fold.c	FUNCTION_41	IF_11
0x21d0	      0x48837d9000	               cmp qword [rbp - 0x70], 0	      1364	fold.c	FUNCTION_41	ELSE_3	IF_14
0x21d5	            0x7524	                           jne 0x400223b	      1364	fold.c	FUNCTION_41	ELSE_3	IF_14
0x21d7	    0x488b05000000	            mov rax, qword [0x0400221e] 	      1364	fold.c	FUNCTION_41	ELSE_3	IF_14
0x21de	        0x483945a8	            cmp qword [rbp - 0x58], rax 	      1364	fold.c	FUNCTION_41	ELSE_3	IF_14
0x21e2	            0x7517	                           jne 0x400223b	      1364	fold.c	FUNCTION_41	ELSE_3	IF_14
0x21e4	    0x488b05000000	            mov rax, qword [0x0400222b] 	      1365	fold.c	FUNCTION_41	ELSE_3	IF_14
0x21eb	          0x4889c7	                            mov rdi, rax	      1365	fold.c	FUNCTION_41	ELSE_3	IF_14
0x21ee	      0xe800000000	                          call 0x4002233	      1365	fold.c	FUNCTION_41	ELSE_3	IF_14
0x21f3	          0x4889c7	                            mov rdi, rax	      1365	fold.c	FUNCTION_41	ELSE_3	IF_14
0x21f6	      0xe800000000	                          call 0x400223b	      1365	fold.c	FUNCTION_41	ELSE_3	IF_14
0x21fb	      0x48837d9000	               cmp qword [rbp - 0x70], 0	      1367	fold.c	FUNCTION_41	IF_15
0x2200	            0x7411	                            je 0x4002253	      1367	fold.c	FUNCTION_41	IF_15
0x2202	        0x488b4590	             mov rax, qword [rbp - 0x70]	      1368	fold.c	FUNCTION_41	IF_15
0x2206	            0x8b00	                    mov eax, dword [rax]	      1368	fold.c	FUNCTION_41	IF_15
0x2208	           0xb45c4	              or eax, dword [rbp - 0x3c]	      1368	fold.c	FUNCTION_41	IF_15
0x220b	            0x89c2	                            mov edx, eax	      1368	fold.c	FUNCTION_41	IF_15
0x220d	        0x488b4590	             mov rax, qword [rbp - 0x70]	      1368	fold.c	FUNCTION_41	IF_15
0x2211	            0x8910	                    mov dword [rax], edx	      1368	fold.c	FUNCTION_41	IF_15
0x2213	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1370	fold.c	FUNCTION_41
0x2217	        0x488b75f8	                mov rsi, qword [rbp - 8]	      1371	fold.c	FUNCTION_41
0x221b	    0x644833342528	                xor rsi, qword fs:[0x28]	      1371	fold.c	FUNCTION_41
0x2224	            0x7405	                            je 0x400226b	      1371	fold.c	FUNCTION_41
0x2226	      0xe800000000	                          call 0x400226b	      1371	fold.c	FUNCTION_41
0x222b	              0xc9	                                   leave	      1371	fold.c	FUNCTION_41
0x222c	              0xc3	                                     ret	      1371	fold.c	FUNCTION_41
foldMoveTo	SWITCH,0:ELSE,5:DO,0:FOR,2:WHILE,0:IF,20:functions,0:CALL,4	217
0x1478	              0x55	                                push rbp	       867	fold.c	FUNCTION_30
0x1479	          0x4889e5	                            mov rbp, rsp	       867	fold.c	FUNCTION_30
0x147c	        0x4883ec60	                           sub rsp, 0x60	       867	fold.c	FUNCTION_30
0x1480	          0x897dac	             mov dword [rbp - 0x54], edi	       867	fold.c	FUNCTION_30
0x1483	          0x8975a8	             mov dword [rbp - 0x58], esi	       867	fold.c	FUNCTION_30
0x1486	        0x488955a0	             mov qword [rbp - 0x60], rdx	       867	fold.c	FUNCTION_30
0x148a	    0x64488b042528	                mov rax, qword fs:[0x28]	       867	fold.c	FUNCTION_30
0x1493	        0x488945f8	                mov qword [rbp - 8], rax	       867	fold.c	FUNCTION_30
0x1497	            0x31c0	                            xor eax, eax	       867	fold.c	FUNCTION_30
0x1499	    0xc745bc000000	               mov dword [rbp - 0x44], 0	       869	fold.c	FUNCTION_30
0x14a0	    0x488b05000000	            mov rax, qword [0x040014e7] 	       880	fold.c	FUNCTION_30	CALL_1
0x14a7	          0x4889c7	                            mov rdi, rax	       880	fold.c	FUNCTION_30	CALL_1
0x14aa	      0xe8c8080000	                    call sym.checkupdate	       880	fold.c	FUNCTION_30	CALL_1
0x14af	    0x48c745d00000	               mov qword [rbp - 0x30], 0	       883	fold.c	FUNCTION_30	FOR_1
0x14b7	      0xe9f6020000	                           jmp 0x40017f2	       883	fold.c	FUNCTION_30	FOR_1
0x14bc	    0x48c745d80000	               mov qword [rbp - 0x28], 0	       887	fold.c	FUNCTION_30	FOR_1
0x14c4	    0x488b05000000	            mov rax, qword [0x0400150b] 	       888	fold.c	FUNCTION_30	FOR_1
0x14cb	    0x480508010000	                          add rax, 0x108	       888	fold.c	FUNCTION_30	FOR_1
0x14d1	        0x488945e8	             mov qword [rbp - 0x18], rax	       888	fold.c	FUNCTION_30	FOR_1
0x14d5	    0xc745b4000000	               mov dword [rbp - 0x4c], 0	       889	fold.c	FUNCTION_30	FOR_1
0x14dc	    0xc745b8000000	               mov dword [rbp - 0x48], 0	       890	fold.c	FUNCTION_30	FOR_1
0x14e3	    0x488b05000000	            mov rax, qword [0x0400152a] 	       891	fold.c	FUNCTION_30	FOR_1
0x14ea	        0x488b4038	            mov rax, qword [rax + 0x38] 	       891	fold.c	FUNCTION_30	FOR_1
0x14ee	        0x488945e0	             mov qword [rbp - 0x20], rax	       891	fold.c	FUNCTION_30	FOR_1
0x14f2	    0xc745c0000000	               mov dword [rbp - 0x40], 0	       892	fold.c	FUNCTION_30	FOR_1
0x14f9	    0xc745c4000000	               mov dword [rbp - 0x3c], 0	       893	fold.c	FUNCTION_30	FOR_1
0x1500	    0x488b05000000	            mov rax, qword [0x04001547] 	       896	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	CALL_2
0x1507	        0x488b4038	            mov rax, qword [rax + 0x38] 	       896	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	CALL_2
0x150b	        0x482b45d8	             sub rax, qword [rbp - 0x28]	       896	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	CALL_2
0x150f	          0x4889c1	                            mov rcx, rax	       896	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	CALL_2
0x1512	        0x488d55c8	                   lea rdx, [rbp - 0x38]	       896	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	CALL_2
0x1516	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       896	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	CALL_2
0x151a	          0x4889ce	                            mov rsi, rcx	       896	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	CALL_2
0x151d	          0x4889c7	                            mov rdi, rax	       896	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	CALL_2
0x1520	      0xe880060000	                       call sym.foldFind	       896	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	CALL_2
0x1525	            0x85c0	                           test eax, eax	       896	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	CALL_2
0x1527	            0x7578	                           jne 0x40015e1	       896	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	CALL_2
0x1529	        0x837dac00	               cmp dword [rbp - 0x54], 0	       898	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_2
0x152d	     0xf842d020000	                            je 0x40017a0	       898	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_2
0x1533	        0x837da801	               cmp dword [rbp - 0x58], 1	       903	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3
0x1537	            0x754c	                           jne 0x40015c5	       903	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3
0x1539	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x153d	          0x4889c2	                            mov rdx, rax	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x1540	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x1544	        0x488b4010	            mov rax, qword [rax + 0x10] 	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x1548	          0x4829c2	                            sub rdx, rax	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x154b	          0x4889d0	                            mov rax, rdx	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x154e	        0x48c1f804	                              sar rax, 4	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x1552	          0x4889c2	                            mov rdx, rax	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x1555	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x155f	        0x480fafc2	                           imul rax, rdx	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x1563	          0x4889c2	                            mov rdx, rax	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x1566	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x156a	            0x8b00	                    mov eax, dword [rax]	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x156c	            0x4898	                                    cdqe	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x156e	          0x4839c2	                            cmp rdx, rax	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x1571	     0xf8dec010000	                           jge 0x40017a3	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x1577	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       907	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3
0x157b	        0x4883e830	                           sub rax, 0x30	       907	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3
0x157f	        0x488945c8	             mov qword [rbp - 0x38], rax	       907	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3
0x1583	            0xeb15	                           jmp 0x40015da	       907	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3
0x1585	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       911	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	ELSE_1	IF_5
0x1589	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       911	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	ELSE_1	IF_5
0x158d	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       911	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	ELSE_1	IF_5
0x1591	          0x4839c2	                            cmp rdx, rax	       911	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	ELSE_1	IF_5
0x1594	     0xf84cc010000	                            je 0x40017a6	       911	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	ELSE_1	IF_5
0x159a	    0xc745c4010000	               mov dword [rbp - 0x3c], 1	       916	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1
0x15a1	        0x837dc400	               cmp dword [rbp - 0x3c], 0	       919	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6
0x15a5	            0x7543	                           jne 0x400162a	       919	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6
0x15a7	        0x488b75c8	             mov rsi, qword [rbp - 0x38]	       922	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_7	CALL_3
0x15ab	    0x488b05000000	            mov rax, qword [0x040015f2] 	       922	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_7	CALL_3
0x15b2	        0x4c8b45d8	              mov r8, qword [rbp - 0x28]	       922	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_7	CALL_3
0x15b6	        0x488d7db8	                   lea rdi, [rbp - 0x48]	       922	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_7	CALL_3
0x15ba	          0x8b4dc0	             mov ecx, dword [rbp - 0x40]	       922	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_7	CALL_3
0x15bd	        0x488d55b4	                   lea rdx, [rbp - 0x4c]	       922	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_7	CALL_3
0x15c1	          0x4d89c1	                              mov r9, r8	       922	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_7	CALL_3
0x15c4	          0x4989f8	                             mov r8, rdi	       922	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_7	CALL_3
0x15c7	          0x4889c7	                            mov rdi, rax	       922	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_7	CALL_3
0x15ca	      0xe84b140000	                   call sym.check_closed	       922	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_7	CALL_3
0x15cf	            0x85c0	                           test eax, eax	       922	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_7	CALL_3
0x15d1	            0x7407	                            je 0x400161a	       922	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_7	CALL_3
0x15d3	    0xc745c4010000	               mov dword [rbp - 0x3c], 1	       924	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_7
0x15da	        0x837dc400	               cmp dword [rbp - 0x3c], 0	       927	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_8
0x15de	            0x740a	                            je 0x400162a	       927	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_8
0x15e0	        0x837dac00	               cmp dword [rbp - 0x54], 0	       927	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_8
0x15e4	     0xf847f010000	                            je 0x40017a9	       927	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_8
0x15ea	        0x837dac00	               cmp dword [rbp - 0x54], 0	       931	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9
0x15ee	     0xf84d9000000	                            je 0x400170d	       931	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9
0x15f4	        0x837da801	               cmp dword [rbp - 0x58], 1	       933	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10
0x15f8	            0x757a	                           jne 0x40016b4	       933	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10
0x15fa	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x15fe	        0x4883c030	                           add rax, 0x30	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x1602	          0x4889c2	                            mov rdx, rax	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x1605	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x1609	        0x488b4010	            mov rax, qword [rax + 0x10] 	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x160d	          0x4829c2	                            sub rdx, rax	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x1610	          0x4889d0	                            mov rax, rdx	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x1613	        0x48c1f804	                              sar rax, 4	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x1617	          0x4889c2	                            mov rdx, rax	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x161a	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x1624	        0x480fafc2	                           imul rax, rdx	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x1628	          0x4889c2	                            mov rdx, rax	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x162b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x162f	            0x8b00	                    mov eax, dword [rax]	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x1631	            0x4898	                                    cdqe	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x1633	          0x4839c2	                            cmp rdx, rax	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x1636	     0xf8dfe000000	                           jge 0x400177a	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x163c	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       938	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x1640	        0x4883c030	                           add rax, 0x30	       938	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x1644	          0x488b10	                    mov rdx, qword [rax]	       938	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x1647	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       938	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x164b	          0x4801d0	                            add rax, rdx	       938	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x164e	        0x488945f0	             mov qword [rbp - 0x10], rax	       938	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x1652	    0x488b05000000	            mov rax, qword [0x04001699] 	       939	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11	IF_12
0x1659	        0x488b4038	            mov rax, qword [rax + 0x38] 	       939	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11	IF_12
0x165d	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	       939	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11	IF_12
0x1661	     0xf8dd3000000	                           jge 0x400177a	       939	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11	IF_12
0x1667	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       940	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11	IF_12
0x166b	        0x488945e0	             mov qword [rbp - 0x20], rax	       940	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11	IF_12
0x166f	      0xe9c6000000	                           jmp 0x400177a	       940	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11	IF_12
0x1674	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       946	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x1678	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       946	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x167c	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       946	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x1680	          0x4839c2	                            cmp rdx, rax	       946	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x1683	     0xf83b1000000	                           jae 0x400177a	       946	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x1689	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       948	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x168d	        0x4883e830	                           sub rax, 0x30	       948	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x1691	          0x488b10	                    mov rdx, qword [rax]	       948	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x1694	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       948	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x1698	          0x4801c2	                            add rdx, rax	       948	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x169b	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       948	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x169f	        0x4883e830	                           sub rax, 0x30	       948	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x16a3	        0x488b4008	                mov rax, qword [rax + 8]	       948	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x16a7	          0x4801d0	                            add rax, rdx	       948	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x16aa	        0x4883e801	                              sub rax, 1	       948	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x16ae	        0x488945f0	             mov qword [rbp - 0x10], rax	       948	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x16b2	    0x488b05000000	            mov rax, qword [0x040016f9] 	       949	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13	IF_14
0x16b9	        0x488b4038	            mov rax, qword [rax + 0x38] 	       949	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13	IF_14
0x16bd	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	       949	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13	IF_14
0x16c1	            0x7e77	                           jle 0x400177a	       949	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13	IF_14
0x16c3	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       950	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13	IF_14
0x16c7	        0x488945e0	             mov qword [rbp - 0x20], rax	       950	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13	IF_14
0x16cb	            0xeb6d	                           jmp 0x400177a	       950	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13	IF_14
0x16cd	        0x837da801	               cmp dword [rbp - 0x58], 1	       958	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x16d1	            0x753c	                           jne 0x400174f	       958	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x16d3	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       960	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x16d7	          0x488b10	                    mov rdx, qword [rax]	       960	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x16da	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       960	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x16de	          0x4801c2	                            add rdx, rax	       960	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x16e1	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       960	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x16e5	        0x488b4008	                mov rax, qword [rax + 8]	       960	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x16e9	          0x4801d0	                            add rax, rdx	       960	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x16ec	        0x4883e801	                              sub rax, 1	       960	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x16f0	        0x488945f0	             mov qword [rbp - 0x10], rax	       960	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x16f4	    0x488b05000000	            mov rax, qword [0x0400173b] 	       961	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15	IF_16
0x16fb	        0x488b4038	            mov rax, qword [rax + 0x38] 	       961	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15	IF_16
0x16ff	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	       961	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15	IF_16
0x1703	            0x7d35	                           jge 0x400177a	       961	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15	IF_16
0x1705	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       962	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15	IF_16
0x1709	        0x488945e0	             mov qword [rbp - 0x20], rax	       962	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15	IF_16
0x170d	            0xeb2b	                           jmp 0x400177a	       962	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15	IF_16
0x170f	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       966	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	ELSE_4
0x1713	          0x488b10	                    mov rdx, qword [rax]	       966	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	ELSE_4
0x1716	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       966	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	ELSE_4
0x171a	          0x4801d0	                            add rax, rdx	       966	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	ELSE_4
0x171d	        0x488945f0	             mov qword [rbp - 0x10], rax	       966	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	ELSE_4
0x1721	    0x488b05000000	            mov rax, qword [0x04001768] 	       967	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	ELSE_4	IF_17
0x1728	        0x488b4038	            mov rax, qword [rax + 0x38] 	       967	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	ELSE_4	IF_17
0x172c	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	       967	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	ELSE_4	IF_17
0x1730	            0x7e08	                           jle 0x400177a	       967	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	ELSE_4	IF_17
0x1732	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       968	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	ELSE_4	IF_17
0x1736	        0x488945e0	             mov qword [rbp - 0x20], rax	       968	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	ELSE_4	IF_17
0x173a	        0x837dc400	               cmp dword [rbp - 0x3c], 0	       972	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_18
0x173e	            0x752c	                           jne 0x40017ac	       972	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_18
0x1740	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       976	fold.c	FUNCTION_30	FOR_1	FOR_2
0x1744	        0x4883c010	                           add rax, 0x10	       976	fold.c	FUNCTION_30	FOR_1	FOR_2
0x1748	        0x488945e8	             mov qword [rbp - 0x18], rax	       976	fold.c	FUNCTION_30	FOR_1	FOR_2
0x174c	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       977	fold.c	FUNCTION_30	FOR_1	FOR_2
0x1750	          0x488b00	                    mov rax, qword [rax]	       977	fold.c	FUNCTION_30	FOR_1	FOR_2
0x1753	        0x480145d8	            add qword [rbp - 0x28], rax 	       977	fold.c	FUNCTION_30	FOR_1	FOR_2
0x1757	        0x8345c001	               add dword [rbp - 0x40], 1	       978	fold.c	FUNCTION_30	FOR_1	FOR_2
0x175b	      0xe9a0fdffff	                           jmp 0x4001540	       979	fold.c	FUNCTION_30	FOR_1	FOR_2
0x1760	              0x90	                                     nop	       899	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_2
0x1761	            0xeb0a	                           jmp 0x40017ad	       899	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_2
0x1763	              0x90	                                     nop	       906	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x1764	            0xeb07	                           jmp 0x40017ad	       906	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x1766	              0x90	                                     nop	       912	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	ELSE_1	IF_5
0x1767	            0xeb04	                           jmp 0x40017ad	       912	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	ELSE_1	IF_5
0x1769	              0x90	                                     nop	       928	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_8
0x176a	            0xeb01	                           jmp 0x40017ad	       928	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_8
0x176c	              0x90	                                     nop	       973	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_18
0x176d	    0x488b05000000	            mov rax, qword [0x040017b4] 	       980	fold.c	FUNCTION_30	FOR_1	IF_19
0x1774	        0x488b4038	            mov rax, qword [rax + 0x38] 	       980	fold.c	FUNCTION_30	FOR_1	IF_19
0x1778	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	       980	fold.c	FUNCTION_30	FOR_1	IF_19
0x177c	            0x7444	                            je 0x4001802	       980	fold.c	FUNCTION_30	FOR_1	IF_19
0x177e	        0x837dbc00	               cmp dword [rbp - 0x44], 0	       982	fold.c	FUNCTION_30	FOR_1	IF_19	IF_20
0x1782	            0x7505	                           jne 0x40017c9	       982	fold.c	FUNCTION_30	FOR_1	IF_19	IF_20
0x1784	      0xe800000000	                          call 0x40017c9	       983	fold.c	FUNCTION_30	FOR_1	IF_19	CALL_4
0x1789	    0x488b05000000	            mov rax, qword [0x040017d0] 	       984	fold.c	FUNCTION_30	FOR_1	IF_19
0x1790	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       984	fold.c	FUNCTION_30	FOR_1	IF_19
0x1794	        0x48895038	             mov qword [rax + 0x38], rdx	       984	fold.c	FUNCTION_30	FOR_1	IF_19
0x1798	    0x488b05000000	            mov rax, qword [0x040017df] 	       985	fold.c	FUNCTION_30	FOR_1	IF_19
0x179f	    0xc74040000000	               mov dword [rax + 0x40], 0	       985	fold.c	FUNCTION_30	FOR_1	IF_19
0x17a6	    0xc745bc010000	               mov dword [rbp - 0x44], 1	       986	fold.c	FUNCTION_30	FOR_1	IF_19
0x17ad	      0x488345d001	               add qword [rbp - 0x30], 1	       883	fold.c	FUNCTION_30	FOR_1
0x17b2	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       883	fold.c	FUNCTION_30	FOR_1
0x17b6	        0x483b45a0	             cmp rax, qword [rbp - 0x60]	       883	fold.c	FUNCTION_30	FOR_1
0x17ba	     0xf8cfcfcffff	                            jl 0x40014fc	       883	fold.c	FUNCTION_30	FOR_1
0x17c0	            0xeb01	                           jmp 0x4001803	       883	fold.c	FUNCTION_30	FOR_1
0x17c2	              0x90	                                     nop	       989	fold.c	FUNCTION_30	FOR_1	ELSE_5
0x17c3	          0x8b45bc	             mov eax, dword [rbp - 0x44]	       992	fold.c	FUNCTION_30	ELSE_5
0x17c6	        0x488b4df8	                mov rcx, qword [rbp - 8]	       993	fold.c	FUNCTION_30	ELSE_5
0x17ca	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       993	fold.c	FUNCTION_30	ELSE_5
0x17d3	            0x7405	                            je 0x400181a	       993	fold.c	FUNCTION_30	ELSE_5
0x17d5	      0xe800000000	                          call 0x400181a	       993	fold.c	FUNCTION_30	ELSE_5
0x17da	              0xc9	                                   leave	       993	fold.c	FUNCTION_30	ELSE_5
0x17db	              0xc3	                                     ret	       993	fold.c	FUNCTION_30	ELSE_5
foldLevelWin	SWITCH,0:ELSE,0:DO,0:FOR,1:WHILE,0:IF,1:functions,0:CALL,1	38
0x1ce9	              0x55	                                push rbp	      1159	fold.c	FUNCTION_37
0x1cea	          0x4889e5	                            mov rbp, rsp	      1159	fold.c	FUNCTION_37
0x1ced	        0x4883ec40	                           sub rsp, 0x40	      1159	fold.c	FUNCTION_37
0x1cf1	        0x48897dc8	             mov qword [rbp - 0x38], rdi	      1159	fold.c	FUNCTION_37
0x1cf5	        0x488975c0	             mov qword [rbp - 0x40], rsi	      1159	fold.c	FUNCTION_37
0x1cf9	    0x64488b042528	                mov rax, qword fs:[0x28]	      1159	fold.c	FUNCTION_37
0x1d02	        0x488945f8	                mov qword [rbp - 8], rax	      1159	fold.c	FUNCTION_37
0x1d06	            0x31c0	                            xor eax, eax	      1159	fold.c	FUNCTION_37
0x1d08	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      1161	fold.c	FUNCTION_37
0x1d0c	        0x488945e8	             mov qword [rbp - 0x18], rax	      1161	fold.c	FUNCTION_37
0x1d10	    0xc745dc000000	               mov dword [rbp - 0x24], 0	      1162	fold.c	FUNCTION_37
0x1d17	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1166	fold.c	FUNCTION_37
0x1d1b	    0x480508010000	                          add rax, 0x108	      1166	fold.c	FUNCTION_37
0x1d21	        0x488945f0	             mov qword [rbp - 0x10], rax	      1166	fold.c	FUNCTION_37
0x1d25	        0x488d55e0	                   lea rdx, [rbp - 0x20]	      1169	fold.c	FUNCTION_37	FOR_1	IF_1	CALL_1
0x1d29	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	      1169	fold.c	FUNCTION_37	FOR_1	IF_1	CALL_1
0x1d2d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1169	fold.c	FUNCTION_37	FOR_1	IF_1	CALL_1
0x1d31	          0x4889ce	                            mov rsi, rcx	      1169	fold.c	FUNCTION_37	FOR_1	IF_1	CALL_1
0x1d34	          0x4889c7	                            mov rdi, rax	      1169	fold.c	FUNCTION_37	FOR_1	IF_1	CALL_1
0x1d37	      0xe869feffff	                       call sym.foldFind	      1169	fold.c	FUNCTION_37	FOR_1	IF_1	CALL_1
0x1d3c	            0x85c0	                           test eax, eax	      1169	fold.c	FUNCTION_37	FOR_1	IF_1	CALL_1
0x1d3e	            0x741d	                            je 0x4001d9d	      1169	fold.c	FUNCTION_37	FOR_1	IF_1	CALL_1
0x1d40	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1172	fold.c	FUNCTION_37	FOR_1
0x1d44	        0x4883c010	                           add rax, 0x10	      1172	fold.c	FUNCTION_37	FOR_1
0x1d48	        0x488945f0	             mov qword [rbp - 0x10], rax	      1172	fold.c	FUNCTION_37	FOR_1
0x1d4c	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1173	fold.c	FUNCTION_37	FOR_1
0x1d50	          0x488b00	                    mov rax, qword [rax]	      1173	fold.c	FUNCTION_37	FOR_1
0x1d53	        0x482945e8	             sub qword [rbp - 0x18], rax	      1173	fold.c	FUNCTION_37	FOR_1
0x1d57	        0x8345dc01	               add dword [rbp - 0x24], 1	      1174	fold.c	FUNCTION_37	FOR_1
0x1d5b	            0xebc8	                           jmp 0x4001d65	      1175	fold.c	FUNCTION_37	FOR_1
0x1d5d	              0x90	                                     nop	      1170	fold.c	FUNCTION_37	FOR_1	IF_1
0x1d5e	          0x8b45dc	             mov eax, dword [rbp - 0x24]	      1177	fold.c	FUNCTION_37
0x1d61	        0x488b4df8	                mov rcx, qword [rbp - 8]	      1178	fold.c	FUNCTION_37
0x1d65	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      1178	fold.c	FUNCTION_37
0x1d6e	            0x7405	                            je 0x4001db5	      1178	fold.c	FUNCTION_37
0x1d70	      0xe800000000	                          call 0x4001db5	      1178	fold.c	FUNCTION_37
0x1d75	              0xc9	                                   leave	      1178	fold.c	FUNCTION_37
0x1d76	              0xc3	                                     ret	      1178	fold.c	FUNCTION_37
foldCreateMarkers	SWITCH,0:ELSE,0:DO,0:FOR,0:WHILE,0:IF,1:functions,0:CALL,6	38
0x2c14	              0x55	                                push rbp	      1734	fold.c	FUNCTION_52
0x2c15	          0x4889e5	                            mov rbp, rsp	      1734	fold.c	FUNCTION_52
0x2c18	        0x4883ec10	                           sub rsp, 0x10	      1734	fold.c	FUNCTION_52
0x2c1c	        0x48897df8	                mov qword [rbp - 8], rdi	      1734	fold.c	FUNCTION_52
0x2c20	        0x488975f0	             mov qword [rbp - 0x10], rsi	      1734	fold.c	FUNCTION_52
0x2c24	    0x488b05000000	            mov rax, qword [0x04002c6b] 	      1735	fold.c	FUNCTION_52	IF_1
0x2c2b	    0x8b8028150000	          mov eax, dword [rax + 0x1528] 	      1735	fold.c	FUNCTION_52	IF_1
0x2c31	            0x85c0	                           test eax, eax	      1735	fold.c	FUNCTION_52	IF_1
0x2c33	            0x7514	                           jne 0x4002c89	      1735	fold.c	FUNCTION_52	IF_1
0x2c35	      0xbf00000000	                              mov edi, 0	      1737	fold.c	FUNCTION_52	IF_1	CALL_2
0x2c3a	      0xe800000000	                          call 0x4002c7f	      1737	fold.c	FUNCTION_52	IF_1	CALL_2
0x2c3f	          0x4889c7	                            mov rdi, rax	      1737	fold.c	FUNCTION_52	IF_1	CALL_2
0x2c42	      0xe800000000	                          call 0x4002c87	      1737	fold.c	FUNCTION_52	IF_1	CALL_2
0x2c47	            0xeb68	                           jmp 0x4002cf1	      1738	fold.c	FUNCTION_52	IF_1
0x2c49	    0x488b05000000	            mov rax, qword [0x04002c90] 	      1740	fold.c	FUNCTION_52	CALL_3
0x2c50	          0x4889c7	                            mov rdi, rax	      1740	fold.c	FUNCTION_52	CALL_3
0x2c53	      0xe82c350000	                    call sym.parseMarker	      1740	fold.c	FUNCTION_52	CALL_3
0x2c58	    0x8b1500000000	            mov edx, dword [0x04002c9e] 	      1742	fold.c	FUNCTION_52	CALL_4
0x2c5e	    0x488b05000000	            mov rax, qword [0x04002ca5] 	      1742	fold.c	FUNCTION_52	CALL_4
0x2c65	    0x488b88280200	           mov rcx, qword [rax + 0x228] 	      1742	fold.c	FUNCTION_52	CALL_4
0x2c6c	        0x488b45f8	                mov rax, qword [rbp - 8]	      1742	fold.c	FUNCTION_52	CALL_4
0x2c70	          0x4889ce	                            mov rsi, rcx	      1742	fold.c	FUNCTION_52	CALL_4
0x2c73	          0x4889c7	                            mov rdi, rax	      1742	fold.c	FUNCTION_52	CALL_4
0x2c76	      0xe838000000	                  call sym.foldAddMarker	      1742	fold.c	FUNCTION_52	CALL_4
0x2c7b	    0x8b1500000000	            mov edx, dword [0x04002cc1] 	      1743	fold.c	FUNCTION_52	CALL_5
0x2c81	    0x488b0d000000	            mov rcx, qword [0x04002cc8] 	      1743	fold.c	FUNCTION_52	CALL_5
0x2c88	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1743	fold.c	FUNCTION_52	CALL_5
0x2c8c	          0x4889ce	                            mov rsi, rcx	      1743	fold.c	FUNCTION_52	CALL_5
0x2c8f	          0x4889c7	                            mov rdi, rax	      1743	fold.c	FUNCTION_52	CALL_5
0x2c92	      0xe81c000000	                  call sym.foldAddMarker	      1743	fold.c	FUNCTION_52	CALL_5
0x2c97	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      1747	fold.c	FUNCTION_52	CALL_6
0x2c9b	        0x488b45f8	                mov rax, qword [rbp - 8]	      1747	fold.c	FUNCTION_52	CALL_6
0x2c9f	      0xb900000000	                              mov ecx, 0	      1747	fold.c	FUNCTION_52	CALL_6
0x2ca4	      0xbe00000000	                              mov esi, 0	      1747	fold.c	FUNCTION_52	CALL_6
0x2ca9	          0x4889c7	                            mov rdi, rax	      1747	fold.c	FUNCTION_52	CALL_6
0x2cac	      0xe800000000	                          call 0x4002cf1	      1747	fold.c	FUNCTION_52	CALL_6
0x2cb1	              0xc9	                                   leave	      1748	fold.c	FUNCTION_52
0x2cb2	              0xc3	                                     ret	      1748	fold.c	FUNCTION_52
foldlevelSyntax	SWITCH,0:ELSE,0:DO,0:FOR,0:WHILE,0:IF,2:functions,0:CALL,2	51
0x647f	              0x55	                                push rbp	      3457	fold.c	FUNCTION_72
0x6480	          0x4889e5	                            mov rbp, rsp	      3457	fold.c	FUNCTION_72
0x6483	        0x4883ec20	                           sub rsp, 0x20	      3457	fold.c	FUNCTION_72
0x6487	        0x48897de8	             mov qword [rbp - 0x18], rdi	      3457	fold.c	FUNCTION_72
0x648b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3462	fold.c	FUNCTION_72
0x648f	        0x488b5008	                mov rdx, qword [rax + 8]	      3462	fold.c	FUNCTION_72
0x6493	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3462	fold.c	FUNCTION_72
0x6497	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3462	fold.c	FUNCTION_72
0x649b	          0x4801d0	                            add rax, rdx	      3462	fold.c	FUNCTION_72
0x649e	        0x488945f8	                mov qword [rbp - 8], rax	      3462	fold.c	FUNCTION_72
0x64a2	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3466	fold.c	FUNCTION_72	CALL_1
0x64a6	          0x488b00	                    mov rax, qword [rax]	      3466	fold.c	FUNCTION_72	CALL_1
0x64a9	        0x488b55f8	                mov rdx, qword [rbp - 8]	      3466	fold.c	FUNCTION_72	CALL_1
0x64ad	          0x4889d6	                            mov rsi, rdx	      3466	fold.c	FUNCTION_72	CALL_1
0x64b0	          0x4889c7	                            mov rdi, rax	      3466	fold.c	FUNCTION_72	CALL_1
0x64b3	      0xe800000000	                          call 0x40064f8	      3466	fold.c	FUNCTION_72	CALL_1
0x64b8	            0x89c2	                            mov edx, eax	      3466	fold.c	FUNCTION_72	CALL_1
0x64ba	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3466	fold.c	FUNCTION_72	CALL_1
0x64be	          0x895020	             mov dword [rax + 0x20], edx	      3466	fold.c	FUNCTION_72	CALL_1
0x64c1	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3467	fold.c	FUNCTION_72
0x64c5	    0xc74028000000	               mov dword [rax + 0x28], 0	      3467	fold.c	FUNCTION_72
0x64cc	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3468	fold.c	FUNCTION_72	IF_1
0x64d0	          0x488b00	                    mov rax, qword [rax]	      3468	fold.c	FUNCTION_72	IF_1
0x64d3	        0x488b4008	                mov rax, qword [rax + 8]	      3468	fold.c	FUNCTION_72	IF_1
0x64d7	          0x488b00	                    mov rax, qword [rax]	      3468	fold.c	FUNCTION_72	IF_1
0x64da	        0x483b45f8	                cmp rax, qword [rbp - 8]	      3468	fold.c	FUNCTION_72	IF_1
0x64de	            0x7e46	                           jle 0x4006566	      3468	fold.c	FUNCTION_72	IF_1
0x64e0	        0x488b45f8	                mov rax, qword [rbp - 8]	      3470	fold.c	FUNCTION_72	IF_1	CALL_2
0x64e4	        0x488d5001	                      lea rdx, [rax + 1]	      3470	fold.c	FUNCTION_72	IF_1	CALL_2
0x64e8	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3470	fold.c	FUNCTION_72	IF_1	CALL_2
0x64ec	          0x488b00	                    mov rax, qword [rax]	      3470	fold.c	FUNCTION_72	IF_1	CALL_2
0x64ef	          0x4889d6	                            mov rsi, rdx	      3470	fold.c	FUNCTION_72	IF_1	CALL_2
0x64f2	          0x4889c7	                            mov rdi, rax	      3470	fold.c	FUNCTION_72	IF_1	CALL_2
0x64f5	      0xe800000000	                          call 0x400653a	      3470	fold.c	FUNCTION_72	IF_1	CALL_2
0x64fa	          0x8945f4	              mov dword [rbp - 0xc], eax	      3470	fold.c	FUNCTION_72	IF_1	CALL_2
0x64fd	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3471	fold.c	FUNCTION_72	IF_1	IF_2
0x6501	          0x8b4020	            mov eax, dword [rax + 0x20] 	      3471	fold.c	FUNCTION_72	IF_1	IF_2
0x6504	          0x3b45f4	              cmp eax, dword [rbp - 0xc]	      3471	fold.c	FUNCTION_72	IF_1	IF_2
0x6507	            0x7d1d	                           jge 0x4006566	      3471	fold.c	FUNCTION_72	IF_1	IF_2
0x6509	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3473	fold.c	FUNCTION_72	IF_1	IF_2
0x650d	          0x8b4020	            mov eax, dword [rax + 0x20] 	      3473	fold.c	FUNCTION_72	IF_1	IF_2
0x6510	          0x8b55f4	              mov edx, dword [rbp - 0xc]	      3473	fold.c	FUNCTION_72	IF_1	IF_2
0x6513	            0x29c2	                            sub edx, eax	      3473	fold.c	FUNCTION_72	IF_1	IF_2
0x6515	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3473	fold.c	FUNCTION_72	IF_1	IF_2
0x6519	          0x895028	             mov dword [rax + 0x28], edx	      3473	fold.c	FUNCTION_72	IF_1	IF_2
0x651c	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3474	fold.c	FUNCTION_72	IF_1	IF_2
0x6520	          0x8b55f4	              mov edx, dword [rbp - 0xc]	      3474	fold.c	FUNCTION_72	IF_1	IF_2
0x6523	          0x895020	             mov dword [rax + 0x20], edx	      3474	fold.c	FUNCTION_72	IF_1	IF_2
0x6526	              0x90	                                     nop	      3478	fold.c	FUNCTION_72
0x6527	              0xc9	                                   leave	      3478	fold.c	FUNCTION_72
0x6528	              0xc3	                                     ret	      3478	fold.c	FUNCTION_72
foldManualAllowed	SWITCH,0:ELSE,1:DO,0:FOR,0:WHILE,0:IF,2:functions,0:CALL,6	30
0xb2c	              0x55	                                push rbp	       559	fold.c	FUNCTION_24
0xb2d	          0x4889e5	                            mov rbp, rsp	       559	fold.c	FUNCTION_24
0xb30	        0x4883ec10	                           sub rsp, 0x10	       559	fold.c	FUNCTION_24
0xb34	          0x897dfc	                mov dword [rbp - 4], edi	       559	fold.c	FUNCTION_24
0xb37	    0x488b05000000	            mov rax, qword [0x04000b7e] 	       560	fold.c	FUNCTION_24	IF_1	CALL_2
0xb3e	          0x4889c7	                            mov rdi, rax	       560	fold.c	FUNCTION_24	IF_1	CALL_2
0xb41	      0xe800000000	                          call 0x4000b86	       560	fold.c	FUNCTION_24	IF_1	CALL_2
0xb46	            0x85c0	                           test eax, eax	       560	fold.c	FUNCTION_24	IF_1	CALL_2
0xb48	            0x7513	                           jne 0x4000b9d	       560	fold.c	FUNCTION_24	IF_1	CALL_2
0xb4a	    0x488b05000000	            mov rax, qword [0x04000b91] 	       560	fold.c	FUNCTION_24	IF_1	CALL_2
0xb51	          0x4889c7	                            mov rdi, rax	       560	fold.c	FUNCTION_24	IF_1	CALL_2
0xb54	      0xe800000000	                          call 0x4000b99	       560	fold.c	FUNCTION_24	IF_1	CALL_2
0xb59	            0x85c0	                           test eax, eax	       560	fold.c	FUNCTION_24	IF_1	CALL_2
0xb5b	            0x7407	                            je 0x4000ba4	       560	fold.c	FUNCTION_24	IF_1	CALL_2
0xb5d	      0xb801000000	                              mov eax, 1	       561	fold.c	FUNCTION_24	IF_1
0xb62	            0xeb31	                           jmp 0x4000bd5	       561	fold.c	FUNCTION_24	IF_1
0xb64	        0x837dfc00	                  cmp dword [rbp - 4], 0	       562	fold.c	FUNCTION_24	IF_2
0xb68	            0x7414	                            je 0x4000bbe	       562	fold.c	FUNCTION_24	IF_2
0xb6a	      0xbf00000000	                              mov edi, 0	       563	fold.c	FUNCTION_24	CALL_4
0xb6f	      0xe800000000	                          call 0x4000bb4	       563	fold.c	FUNCTION_24	CALL_4
0xb74	          0x4889c7	                            mov rdi, rax	       563	fold.c	FUNCTION_24	CALL_4
0xb77	      0xe800000000	                          call 0x4000bbc	       563	fold.c	FUNCTION_24	CALL_4
0xb7c	            0xeb12	                           jmp 0x4000bd0	       563	fold.c	FUNCTION_24	CALL_4
0xb7e	      0xbf00000000	                              mov edi, 0	       565	fold.c	FUNCTION_24	CALL_6
0xb83	      0xe800000000	                          call 0x4000bc8	       565	fold.c	FUNCTION_24	CALL_6
0xb88	          0x4889c7	                            mov rdi, rax	       565	fold.c	FUNCTION_24	CALL_6
0xb8b	      0xe800000000	                          call 0x4000bd0	       565	fold.c	FUNCTION_24	CALL_6
0xb90	      0xb800000000	                              mov eax, 0	       566	fold.c	FUNCTION_24
0xb95	              0xc9	                                   leave	       567	fold.c	FUNCTION_24
0xb96	              0xc3	                                     ret	       567	fold.c	FUNCTION_24
foldInitWin	SWITCH,0:ELSE,0:DO,0:FOR,0:WHILE,0:IF,0:functions,0:CALL,1	13
0x17dc	              0x55	                                push rbp	      1001	fold.c	ELSE_5	FUNCTION_31
0x17dd	          0x4889e5	                            mov rbp, rsp	      1001	fold.c	ELSE_5	FUNCTION_31
0x17e0	        0x4883ec10	                           sub rsp, 0x10	      1001	fold.c	ELSE_5	FUNCTION_31
0x17e4	        0x48897df8	                mov qword [rbp - 8], rdi	      1001	fold.c	ELSE_5	FUNCTION_31
0x17e8	        0x488b45f8	                mov rax, qword [rbp - 8]	      1002	fold.c	ELSE_5	FUNCTION_31	CALL_1
0x17ec	    0x480508010000	                          add rax, 0x108	      1002	fold.c	ELSE_5	FUNCTION_31	CALL_1
0x17f2	      0xba0a000000	                            mov edx, 0xa	      1002	fold.c	ELSE_5	FUNCTION_31	CALL_1
0x17f7	      0xbe30000000	                           mov esi, 0x30	      1002	fold.c	ELSE_5	FUNCTION_31	CALL_1
0x17fc	          0x4889c7	                            mov rdi, rax	      1002	fold.c	ELSE_5	FUNCTION_31	CALL_1
0x17ff	      0xe800000000	                          call 0x4001844	      1002	fold.c	ELSE_5	FUNCTION_31	CALL_1
0x1804	              0x90	                                     nop	      1003	fold.c	ELSE_5	FUNCTION_31
0x1805	              0xc9	                                   leave	      1003	fold.c	ELSE_5	FUNCTION_31
0x1806	              0xc3	                                     ret	      1003	fold.c	ELSE_5	FUNCTION_31
foldlevelDiff	SWITCH,0:ELSE,1:DO,0:FOR,0:WHILE,0:IF,1:functions,0:CALL,1	24
0x5eb0	              0x55	                                push rbp	      3239	fold.c	FUNCTION_68
0x5eb1	          0x4889e5	                            mov rbp, rsp	      3239	fold.c	FUNCTION_68
0x5eb4	        0x4883ec10	                           sub rsp, 0x10	      3239	fold.c	FUNCTION_68
0x5eb8	        0x48897df8	                mov qword [rbp - 8], rdi	      3239	fold.c	FUNCTION_68
0x5ebc	        0x488b45f8	                mov rax, qword [rbp - 8]	      3240	fold.c	FUNCTION_68	IF_1	CALL_1
0x5ec0	        0x488b5008	                mov rdx, qword [rax + 8]	      3240	fold.c	FUNCTION_68	IF_1	CALL_1
0x5ec4	        0x488b45f8	                mov rax, qword [rbp - 8]	      3240	fold.c	FUNCTION_68	IF_1	CALL_1
0x5ec8	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3240	fold.c	FUNCTION_68	IF_1	CALL_1
0x5ecc	          0x4801c2	                            add rdx, rax	      3240	fold.c	FUNCTION_68	IF_1	CALL_1
0x5ecf	        0x488b45f8	                mov rax, qword [rbp - 8]	      3240	fold.c	FUNCTION_68	IF_1	CALL_1
0x5ed3	          0x488b00	                    mov rax, qword [rax]	      3240	fold.c	FUNCTION_68	IF_1	CALL_1
0x5ed6	          0x4889d6	                            mov rsi, rdx	      3240	fold.c	FUNCTION_68	IF_1	CALL_1
0x5ed9	          0x4889c7	                            mov rdi, rax	      3240	fold.c	FUNCTION_68	IF_1	CALL_1
0x5edc	      0xe800000000	                          call 0x4005f21	      3240	fold.c	FUNCTION_68	IF_1	CALL_1
0x5ee1	            0x85c0	                           test eax, eax	      3240	fold.c	FUNCTION_68	IF_1	CALL_1
0x5ee3	            0x740d	                            je 0x4005f32	      3240	fold.c	FUNCTION_68	IF_1	CALL_1
0x5ee5	        0x488b45f8	                mov rax, qword [rbp - 8]	      3241	fold.c	FUNCTION_68	IF_1
0x5ee9	    0xc74020010000	               mov dword [rax + 0x20], 1	      3241	fold.c	FUNCTION_68	IF_1
0x5ef0	            0xeb0b	                           jmp 0x4005f3d	      3244	fold.c	FUNCTION_68	ELSE_1
0x5ef2	        0x488b45f8	                mov rax, qword [rbp - 8]	      3243	fold.c	FUNCTION_68	ELSE_1
0x5ef6	    0xc74020000000	               mov dword [rax + 0x20], 0	      3243	fold.c	FUNCTION_68	ELSE_1
0x5efd	              0x90	                                     nop	      3244	fold.c	FUNCTION_68	ELSE_1
0x5efe	              0xc9	                                   leave	      3244	fold.c	FUNCTION_68	ELSE_1
0x5eff	              0xc3	                                     ret	      3244	fold.c	FUNCTION_68	ELSE_1
setManualFold	SWITCH,0:ELSE,0:DO,0:FOR,0:WHILE,0:IF,1:functions,1:CALL,2	62
0x1e61	              0x55	                                push rbp	      1230	fold.c	FUNCTION_40
0x1e62	          0x4889e5	                            mov rbp, rsp	      1230	fold.c	FUNCTION_40
0x1e65	        0x4883ec30	                           sub rsp, 0x30	      1230	fold.c	FUNCTION_40
0x1e69	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1230	fold.c	FUNCTION_40
0x1e6d	          0x8975e4	             mov dword [rbp - 0x1c], esi	      1230	fold.c	FUNCTION_40
0x1e70	          0x8955e0	             mov dword [rbp - 0x20], edx	      1230	fold.c	FUNCTION_40
0x1e73	        0x48894dd8	             mov qword [rbp - 0x28], rcx	      1230	fold.c	FUNCTION_40
0x1e77	    0x488b05000000	            mov rax, qword [0x04001ebe] 	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x1e7e	          0x4889c7	                            mov rdi, rax	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x1e81	      0xe800000000	                          call 0x4001ec6	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x1e86	            0x85c0	                           test eax, eax	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x1e88	     0xf84a1000000	                            je 0x4001f6f	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x1e8e	    0x488b05000000	            mov rax, qword [0x04001ed5] 	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x1e95	    0x8b8088020000	           mov eax, dword [rax + 0x288] 	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x1e9b	            0x85c0	                           test eax, eax	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x1e9d	     0xf848c000000	                            je 0x4001f6f	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x1ea3	    0x488b05000000	            mov rax, qword [0x04001eea] 	      1241	fold.c	FUNCTION_40	IF_1
0x1eaa	        0x488945f0	             mov qword [rbp - 0x10], rax	      1241	fold.c	FUNCTION_40	IF_1
0x1eae	            0xeb78	                           jmp 0x4001f68	      1241	fold.c	FUNCTION_40	IF_1
0x1eb0	    0x488b05000000	            mov rax, qword [0x04001ef7] 	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x1eb7	        0x483945f0	            cmp qword [rbp - 0x10], rax 	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x1ebb	            0x745f	                            je 0x4001f5c	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x1ebd	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x1ec1	          0x4889c7	                            mov rdi, rax	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x1ec4	      0xe800000000	                          call 0x4001f09	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x1ec9	            0x85c0	                           test eax, eax	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x1ecb	            0x744f	                            je 0x4001f5c	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x1ecd	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x1ed1	    0x8b8088020000	           mov eax, dword [rax + 0x288] 	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x1ed7	            0x85c0	                           test eax, eax	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x1ed9	            0x7441	                            je 0x4001f5c	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x1edb	    0x488b05000000	            mov rax, qword [0x04001f22] 	      1245	fold.c	FUNCTION_40	FUNCTION_1	CALL_2
0x1ee2	        0x488b4038	            mov rax, qword [rax + 0x38] 	      1245	fold.c	FUNCTION_40	FUNCTION_1	CALL_2
0x1ee6	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      1245	fold.c	FUNCTION_40	FUNCTION_1	CALL_2
0x1eea	          0x4889d6	                            mov rsi, rdx	      1245	fold.c	FUNCTION_40	FUNCTION_1	CALL_2
0x1eed	          0x4889c7	                            mov rdi, rax	      1245	fold.c	FUNCTION_40	FUNCTION_1	CALL_2
0x1ef0	      0xe800000000	                          call 0x4001f35	      1245	fold.c	FUNCTION_40	FUNCTION_1	CALL_2
0x1ef5	        0x488945f8	                mov qword [rbp - 8], rax	      1245	fold.c	FUNCTION_40	FUNCTION_1	CALL_2
0x1ef9	      0x48837df800	                  cmp qword [rbp - 8], 0	      1246	fold.c	FUNCTION_40	FUNCTION_1	IF_2
0x1efe	            0x741c	                            je 0x4001f5c	      1246	fold.c	FUNCTION_40	FUNCTION_1	IF_2
0x1f00	          0x8b4de0	             mov ecx, dword [rbp - 0x20]	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x1f03	          0x8b55e4	             mov edx, dword [rbp - 0x1c]	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x1f06	        0x488b75f8	                mov rsi, qword [rbp - 8]	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x1f0a	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x1f0e	    0x41b800000000	                              mov r8d, 0	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x1f14	          0x4889c7	                            mov rdi, rax	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x1f17	      0xe835000000	               call sym.setManualFoldWin	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x1f1c	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1241	fold.c	FUNCTION_40	IF_1
0x1f20	        0x488b4020	            mov rax, qword [rax + 0x20] 	      1241	fold.c	FUNCTION_40	IF_1
0x1f24	        0x488945f0	             mov qword [rbp - 0x10], rax	      1241	fold.c	FUNCTION_40	IF_1
0x1f28	      0x48837df000	               cmp qword [rbp - 0x10], 0	      1241	fold.c	FUNCTION_40	IF_1
0x1f2d	            0x7581	                           jne 0x4001ef0	      1241	fold.c	FUNCTION_40	IF_1
0x1f2f	    0x488b05000000	            mov rax, qword [0x04001f76] 	      1253	fold.c	FUNCTION_40	CALL_2
0x1f36	        0x488b7dd8	             mov rdi, qword [rbp - 0x28]	      1253	fold.c	FUNCTION_40	CALL_2
0x1f3a	          0x8b4de0	             mov ecx, dword [rbp - 0x20]	      1253	fold.c	FUNCTION_40	CALL_2
0x1f3d	          0x8b55e4	             mov edx, dword [rbp - 0x1c]	      1253	fold.c	FUNCTION_40	CALL_2
0x1f40	        0x488b75e8	             mov rsi, qword [rbp - 0x18]	      1253	fold.c	FUNCTION_40	CALL_2
0x1f44	          0x4989f8	                             mov r8, rdi	      1253	fold.c	FUNCTION_40	CALL_2
0x1f47	          0x4889c7	                            mov rdi, rax	      1253	fold.c	FUNCTION_40	CALL_2
0x1f4a	      0xe802000000	               call sym.setManualFoldWin	      1253	fold.c	FUNCTION_40	CALL_2
0x1f4f	              0xc9	                                   leave	      1254	fold.c	FUNCTION_40
0x1f50	              0xc3	                                     ret	      1254	fold.c	FUNCTION_40
foldMoveRange	SWITCH,0:ELSE,4:DO,0:FOR,2:WHILE,0:IF,12:functions,0:CALL,24	357
0x5615	              0x55	                                push rbp	      3036	fold.c	FUNCTION_65
0x5616	          0x4889e5	                            mov rbp, rsp	      3036	fold.c	FUNCTION_65
0x5619	        0x4883ec60	                           sub rsp, 0x60	      3036	fold.c	FUNCTION_65
0x561d	        0x48897db8	             mov qword [rbp - 0x48], rdi	      3036	fold.c	FUNCTION_65
0x5621	        0x488975b0	             mov qword [rbp - 0x50], rsi	      3036	fold.c	FUNCTION_65
0x5625	        0x488955a8	             mov qword [rbp - 0x58], rdx	      3036	fold.c	FUNCTION_65
0x5629	        0x48894da0	             mov qword [rbp - 0x60], rcx	      3036	fold.c	FUNCTION_65
0x562d	    0x64488b042528	                mov rax, qword fs:[0x28]	      3036	fold.c	FUNCTION_65
0x5636	        0x488945f8	                mov qword [rbp - 8], rax	      3036	fold.c	FUNCTION_65
0x563a	            0x31c0	                            xor eax, eax	      3036	fold.c	FUNCTION_65
0x563c	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      3038	fold.c	FUNCTION_65
0x5640	        0x482b45b0	             sub rax, qword [rbp - 0x50]	      3038	fold.c	FUNCTION_65
0x5644	        0x4883c001	                              add rax, 1	      3038	fold.c	FUNCTION_65
0x5648	        0x488945d8	             mov qword [rbp - 0x28], rax	      3038	fold.c	FUNCTION_65
0x564c	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      3039	fold.c	FUNCTION_65
0x5650	        0x482b45a8	             sub rax, qword [rbp - 0x58]	      3039	fold.c	FUNCTION_65
0x5654	        0x488945e0	             mov qword [rbp - 0x20], rax	      3039	fold.c	FUNCTION_65
0x5658	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      3040	fold.c	FUNCTION_65	CALL_1
0x565c	        0x488d48ff	                      lea rcx, [rax - 1]	      3040	fold.c	FUNCTION_65	CALL_1
0x5660	        0x488d55c8	                   lea rdx, [rbp - 0x38]	      3040	fold.c	FUNCTION_65	CALL_1
0x5664	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      3040	fold.c	FUNCTION_65	CALL_1
0x5668	          0x4889ce	                            mov rsi, rcx	      3040	fold.c	FUNCTION_65	CALL_1
0x566b	          0x4889c7	                            mov rdi, rax	      3040	fold.c	FUNCTION_65	CALL_1
0x566e	      0xe832c5ffff	                       call sym.foldFind	      3040	fold.c	FUNCTION_65	CALL_1
0x5673	          0x8945c4	             mov dword [rbp - 0x3c], eax	      3040	fold.c	FUNCTION_65	CALL_1
0x5676	    0x48c745e80000	               mov qword [rbp - 0x18], 0	      3041	fold.c	FUNCTION_65
0x567e	    0x48c745d00000	               mov qword [rbp - 0x30], 0	      3041	fold.c	FUNCTION_65
0x5686	    0x48c745f00000	               mov qword [rbp - 0x10], 0	      3041	fold.c	FUNCTION_65
0x568e	        0x837dc400	               cmp dword [rbp - 0x3c], 0	      3043	fold.c	FUNCTION_65	IF_1
0x5692	     0xf84f4000000	                            je 0x40057cc	      3043	fold.c	FUNCTION_65	IF_1
0x5698	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3045	fold.c	FUNCTION_65	IF_1	IF_2	CALL_2
0x569c	          0x488b10	                    mov rdx, qword [rax]	      3045	fold.c	FUNCTION_65	IF_1	IF_2	CALL_2
0x569f	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3045	fold.c	FUNCTION_65	IF_1	IF_2	CALL_2
0x56a3	        0x488b4008	                mov rax, qword [rax + 8]	      3045	fold.c	FUNCTION_65	IF_1	IF_2	CALL_2
0x56a7	          0x4801d0	                            add rax, rdx	      3045	fold.c	FUNCTION_65	IF_1	IF_2	CALL_2
0x56aa	        0x4883e801	                              sub rax, 1	      3045	fold.c	FUNCTION_65	IF_1	IF_2	CALL_2
0x56ae	        0x483b45a0	             cmp rax, qword [rbp - 0x60]	      3045	fold.c	FUNCTION_65	IF_1	IF_2	CALL_2
0x56b2	            0x7e42	                           jle 0x4005736	      3045	fold.c	FUNCTION_65	IF_1	IF_2	CALL_2
0x56b4	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3051	fold.c	FUNCTION_65	IF_1	IF_2
0x56b8	          0x488b00	                    mov rax, qword [rax]	      3051	fold.c	FUNCTION_65	IF_1	IF_2
0x56bb	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	      3050	fold.c	FUNCTION_65	IF_1	IF_2	CALL_3
0x56bf	          0x4889d1	                            mov rcx, rdx	      3050	fold.c	FUNCTION_65	IF_1	IF_2	CALL_3
0x56c2	          0x4829c1	                            sub rcx, rax	      3050	fold.c	FUNCTION_65	IF_1	IF_2	CALL_3
0x56c5	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3051	fold.c	FUNCTION_65	IF_1	IF_2
0x56c9	          0x488b00	                    mov rax, qword [rax]	      3051	fold.c	FUNCTION_65	IF_1	IF_2
0x56cc	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      3050	fold.c	FUNCTION_65	IF_1	IF_2	CALL_3
0x56d0	          0x4829c2	                            sub rdx, rax	      3050	fold.c	FUNCTION_65	IF_1	IF_2	CALL_3
0x56d3	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3050	fold.c	FUNCTION_65	IF_1	IF_2	CALL_3
0x56d7	          0x488b00	                    mov rax, qword [rax]	      3050	fold.c	FUNCTION_65	IF_1	IF_2	CALL_3
0x56da	        0x488b75b0	             mov rsi, qword [rbp - 0x50]	      3050	fold.c	FUNCTION_65	IF_1	IF_2	CALL_3
0x56de	          0x4829c6	                            sub rsi, rax	      3050	fold.c	FUNCTION_65	IF_1	IF_2	CALL_3
0x56e1	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3050	fold.c	FUNCTION_65	IF_1	IF_2	CALL_3
0x56e5	        0x4883c010	                           add rax, 0x10	      3050	fold.c	FUNCTION_65	IF_1	IF_2	CALL_3
0x56e9	          0x4889c7	                            mov rdi, rax	      3050	fold.c	FUNCTION_65	IF_1	IF_2	CALL_3
0x56ec	      0xe800000000	                          call 0x4005731	      3050	fold.c	FUNCTION_65	IF_1	IF_2	CALL_3
0x56f1	      0xe939040000	                           jmp 0x4005b6f	      3052	fold.c	FUNCTION_65	IF_1	IF_2
0x56f6	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3054	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_4
0x56fa	          0x488b10	                    mov rdx, qword [rax]	      3054	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_4
0x56fd	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3054	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_4
0x5701	        0x488b4008	                mov rax, qword [rax + 8]	      3054	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_4
0x5705	          0x4801d0	                            add rax, rdx	      3054	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_4
0x5708	        0x4883e801	                              sub rax, 1	      3054	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_4
0x570c	        0x483b45a8	             cmp rax, qword [rbp - 0x58]	      3054	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_4
0x5710	            0x7e57	                           jle 0x40057a9	      3054	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_4
0x5712	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_5
0x5716	          0x48f7d8	                                 neg rax	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_5
0x5719	          0x4889c7	                            mov rdi, rax	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_5
0x571c	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3062	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3
0x5720	          0x488b00	                    mov rax, qword [rax]	      3062	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3
0x5723	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_5
0x5727	          0x4829c2	                            sub rdx, rax	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_5
0x572a	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_5
0x572e	          0x488b00	                    mov rax, qword [rax]	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_5
0x5731	        0x488b4db0	             mov rcx, qword [rbp - 0x50]	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_5
0x5735	          0x4889ce	                            mov rsi, rcx	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_5
0x5738	          0x4829c6	                            sub rsi, rax	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_5
0x573b	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_5
0x573f	        0x4883c010	                           add rax, 0x10	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_5
0x5743	          0x4989f8	                             mov r8, rdi	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_5
0x5746	      0xb9ffffff7f	                     mov ecx, 0x7fffffff	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_5
0x574b	          0x4889c7	                            mov rdi, rax	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_5
0x574e	      0xe8ceceffff	          call sym.foldMarkAdjustRecurse	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_5
0x5753	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3063	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3
0x5757	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      3063	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3
0x575b	        0x488b5208	                mov rdx, qword [rdx + 8]	      3063	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3
0x575f	        0x482b55d8	             sub rdx, qword [rbp - 0x28]	      3063	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3
0x5763	        0x48895008	                mov qword [rax + 8], rdx	      3063	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3
0x5767	            0xeb17	                           jmp 0x40057c0	      3063	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3
0x5769	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      3067	fold.c	FUNCTION_65	IF_1	CALL_6
0x576d	        0x488d50ff	                      lea rdx, [rax - 1]	      3067	fold.c	FUNCTION_65	IF_1	CALL_6
0x5771	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3067	fold.c	FUNCTION_65	IF_1	CALL_6
0x5775	          0x4889d6	                            mov rsi, rdx	      3067	fold.c	FUNCTION_65	IF_1	CALL_6
0x5778	          0x4889c7	                            mov rdi, rax	      3067	fold.c	FUNCTION_65	IF_1	CALL_6
0x577b	      0xe83efeffff	                  call sym.truncate_fold	      3067	fold.c	FUNCTION_65	IF_1	CALL_6
0x5780	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3071	fold.c	FUNCTION_65	IF_1
0x5784	        0x4883c030	                           add rax, 0x30	      3071	fold.c	FUNCTION_65	IF_1
0x5788	        0x488945c8	             mov qword [rbp - 0x38], rax	      3071	fold.c	FUNCTION_65	IF_1
0x578c	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      3074	fold.c	FUNCTION_65	IF_4	CALL_7
0x5790	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      3074	fold.c	FUNCTION_65	IF_4	CALL_7
0x5794	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      3074	fold.c	FUNCTION_65	IF_4	CALL_7
0x5798	            0x8b00	                    mov eax, dword [rax]	      3074	fold.c	FUNCTION_65	IF_4	CALL_7
0x579a	          0x4863d0	                         movsxd rdx, eax	      3074	fold.c	FUNCTION_65	IF_4	CALL_7
0x579d	          0x4889d0	                            mov rax, rdx	      3074	fold.c	FUNCTION_65	IF_4	CALL_7
0x57a0	          0x4801c0	                            add rax, rax	      3074	fold.c	FUNCTION_65	IF_4	CALL_7
0x57a3	          0x4801d0	                            add rax, rdx	      3074	fold.c	FUNCTION_65	IF_4	CALL_7
0x57a6	        0x48c1e004	                              shl rax, 4	      3074	fold.c	FUNCTION_65	IF_4	CALL_7
0x57aa	        0x488d1401	                    lea rdx, [rcx + rax]	      3074	fold.c	FUNCTION_65	IF_4	CALL_7
0x57ae	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3074	fold.c	FUNCTION_65	IF_4	CALL_7
0x57b2	          0x4839c2	                            cmp rdx, rax	      3074	fold.c	FUNCTION_65	IF_4	CALL_7
0x57b5	     0xf866d030000	                           jbe 0x4005b68	      3074	fold.c	FUNCTION_65	IF_4	CALL_7
0x57bb	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3074	fold.c	FUNCTION_65	IF_4	CALL_7
0x57bf	          0x488b00	                    mov rax, qword [rax]	      3074	fold.c	FUNCTION_65	IF_4	CALL_7
0x57c2	        0x483b45a0	             cmp rax, qword [rbp - 0x60]	      3074	fold.c	FUNCTION_65	IF_4	CALL_7
0x57c6	     0xf8f5c030000	                            jg 0x4005b68	      3074	fold.c	FUNCTION_65	IF_4	CALL_7
0x57cc	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3081	fold.c	FUNCTION_65	ELSE_3	IF_5
0x57d0	          0x488b00	                    mov rax, qword [rax]	      3081	fold.c	FUNCTION_65	ELSE_3	IF_5
0x57d3	        0x483b45a8	             cmp rax, qword [rbp - 0x58]	      3081	fold.c	FUNCTION_65	ELSE_3	IF_5
0x57d7	     0xf8ed1000000	                           jle 0x40058ee	      3081	fold.c	FUNCTION_65	ELSE_3	IF_5
0x57dd	            0xeb1e	                           jmp 0x400583d	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1	CALL_9
0x57df	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3085	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x57e3	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      3085	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x57e7	          0x488b12	                    mov rdx, qword [rdx]	      3085	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x57ea	        0x482b55d8	             sub rdx, qword [rbp - 0x28]	      3085	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x57ee	          0x488910	                    mov qword [rax], rdx	      3085	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x57f1	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1	CALL_9
0x57f5	        0x4883c030	                           add rax, 0x30	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1	CALL_9
0x57f9	        0x488945c8	             mov qword [rbp - 0x38], rax	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1	CALL_9
0x57fd	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1	CALL_9
0x5801	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1	CALL_9
0x5805	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1	CALL_9
0x5809	            0x8b00	                    mov eax, dword [rax]	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1	CALL_9
0x580b	          0x4863d0	                         movsxd rdx, eax	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1	CALL_9
0x580e	          0x4889d0	                            mov rax, rdx	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1	CALL_9
0x5811	          0x4801c0	                            add rax, rax	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1	CALL_9
0x5814	          0x4801d0	                            add rax, rdx	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1	CALL_9
0x5817	        0x48c1e004	                              shl rax, 4	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1	CALL_9
0x581b	        0x488d1401	                    lea rdx, [rcx + rax]	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1	CALL_9
0x581f	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1	CALL_9
0x5823	          0x4839c2	                            cmp rdx, rax	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1	CALL_9
0x5826	            0x761c	                           jbe 0x4005884	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1	CALL_9
0x5828	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1	CALL_9
0x582c	          0x488b10	                    mov rdx, qword [rax]	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1	CALL_9
0x582f	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1	CALL_9
0x5833	        0x488b4008	                mov rax, qword [rax + 8]	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1	CALL_9
0x5837	          0x4801d0	                            add rax, rdx	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1	CALL_9
0x583a	        0x4883e801	                              sub rax, 1	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1	CALL_9
0x583e	        0x483b45a0	             cmp rax, qword [rbp - 0x60]	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1	CALL_9
0x5842	            0x7e9b	                           jle 0x400581f	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1	CALL_9
0x5844	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      3087	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6	CALL_10
0x5848	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      3087	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6	CALL_10
0x584c	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      3087	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6	CALL_10
0x5850	            0x8b00	                    mov eax, dword [rax]	      3087	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6	CALL_10
0x5852	          0x4863d0	                         movsxd rdx, eax	      3087	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6	CALL_10
0x5855	          0x4889d0	                            mov rax, rdx	      3087	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6	CALL_10
0x5858	          0x4801c0	                            add rax, rax	      3087	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6	CALL_10
0x585b	          0x4801d0	                            add rax, rdx	      3087	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6	CALL_10
0x585e	        0x48c1e004	                              shl rax, 4	      3087	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6	CALL_10
0x5862	        0x488d1401	                    lea rdx, [rcx + rax]	      3087	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6	CALL_10
0x5866	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3087	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6	CALL_10
0x586a	          0x4839c2	                            cmp rdx, rax	      3087	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6	CALL_10
0x586d	     0xf86b8020000	                           jbe 0x4005b6b	      3087	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6	CALL_10
0x5873	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3087	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6	CALL_10
0x5877	          0x488b00	                    mov rax, qword [rax]	      3087	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6	CALL_10
0x587a	        0x483b45a0	             cmp rax, qword [rbp - 0x60]	      3087	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6	CALL_10
0x587e	     0xf8fa7020000	                            jg 0x4005b6b	      3087	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6	CALL_10
0x5884	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3090	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6	CALL_11
0x5888	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	      3090	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6	CALL_11
0x588c	          0x4889d6	                            mov rsi, rdx	      3090	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6	CALL_11
0x588f	          0x4889c7	                            mov rdi, rax	      3090	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6	CALL_11
0x5892	      0xe827fdffff	                  call sym.truncate_fold	      3090	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6	CALL_11
0x5897	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3091	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6
0x589b	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      3091	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6
0x589f	          0x488b12	                    mov rdx, qword [rdx]	      3091	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6
0x58a2	        0x482b55d8	             sub rdx, qword [rbp - 0x28]	      3091	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6
0x58a6	          0x488910	                    mov qword [rax], rdx	      3091	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6
0x58a9	      0xe97d020000	                           jmp 0x4005b6b	      3093	fold.c	FUNCTION_65	ELSE_3	IF_5
0x58ae	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3095	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_12
0x58b2	          0x488b10	                    mov rdx, qword [rax]	      3095	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_12
0x58b5	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3095	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_12
0x58b9	        0x488b4008	                mov rax, qword [rax + 8]	      3095	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_12
0x58bd	          0x4801d0	                            add rax, rdx	      3095	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_12
0x58c0	        0x4883e801	                              sub rax, 1	      3095	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_12
0x58c4	        0x483b45a0	             cmp rax, qword [rbp - 0x60]	      3095	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_12
0x58c8	            0x7e70	                           jle 0x400597a	      3095	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_12
0x58ca	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_13
0x58ce	          0x48f7d8	                                 neg rax	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_13
0x58d1	          0x4889c1	                            mov rcx, rax	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_13
0x58d4	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3099	fold.c	FUNCTION_65	ELSE_4	IF_7
0x58d8	          0x488b00	                    mov rax, qword [rax]	      3099	fold.c	FUNCTION_65	ELSE_4	IF_7
0x58db	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_13
0x58df	          0x4829c2	                            sub rdx, rax	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_13
0x58e2	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_13
0x58e6	        0x488d7001	                      lea rsi, [rax + 1]	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_13
0x58ea	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_13
0x58ee	          0x488b00	                    mov rax, qword [rax]	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_13
0x58f1	          0x4829c6	                            sub rsi, rax	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_13
0x58f4	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_13
0x58f8	        0x4883c010	                           add rax, 0x10	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_13
0x58fc	          0x4989c8	                             mov r8, rcx	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_13
0x58ff	      0xb9ffffff7f	                     mov ecx, 0x7fffffff	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_13
0x5904	          0x4889c7	                            mov rdi, rax	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_13
0x5907	      0xe815cdffff	          call sym.foldMarkAdjustRecurse	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_13
0x590c	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3100	fold.c	FUNCTION_65	ELSE_4	IF_7
0x5910	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      3100	fold.c	FUNCTION_65	ELSE_4	IF_7
0x5914	        0x488b5208	                mov rdx, qword [rdx + 8]	      3100	fold.c	FUNCTION_65	ELSE_4	IF_7
0x5918	        0x482b55e0	             sub rdx, qword [rbp - 0x20]	      3100	fold.c	FUNCTION_65	ELSE_4	IF_7
0x591c	        0x48895008	                mov qword [rax + 8], rdx	      3100	fold.c	FUNCTION_65	ELSE_4	IF_7
0x5920	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3101	fold.c	FUNCTION_65	ELSE_4	IF_7
0x5924	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      3101	fold.c	FUNCTION_65	ELSE_4	IF_7
0x5928	          0x488b0a	                    mov rcx, qword [rdx]	      3101	fold.c	FUNCTION_65	ELSE_4	IF_7
0x592b	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      3101	fold.c	FUNCTION_65	ELSE_4	IF_7
0x592f	          0x4801ca	                            add rdx, rcx	      3101	fold.c	FUNCTION_65	ELSE_4	IF_7
0x5932	          0x488910	                    mov qword [rax], rdx	      3101	fold.c	FUNCTION_65	ELSE_4	IF_7
0x5935	      0xe9f5010000	                           jmp 0x4005b6f	      3102	fold.c	FUNCTION_65	ELSE_4	IF_7
0x593a	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3109	fold.c	FUNCTION_65	CALL_14
0x593e	          0x4889c2	                            mov rdx, rax	      3109	fold.c	FUNCTION_65	CALL_14
0x5941	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      3109	fold.c	FUNCTION_65	CALL_14
0x5945	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3109	fold.c	FUNCTION_65	CALL_14
0x5949	          0x4829c2	                            sub rdx, rax	      3109	fold.c	FUNCTION_65	CALL_14
0x594c	          0x4889d0	                            mov rax, rdx	      3109	fold.c	FUNCTION_65	CALL_14
0x594f	        0x48c1f804	                              sar rax, 4	      3109	fold.c	FUNCTION_65	CALL_14
0x5953	          0x4889c2	                            mov rdx, rax	      3109	fold.c	FUNCTION_65	CALL_14
0x5956	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	      3109	fold.c	FUNCTION_65	CALL_14
0x5960	        0x480fafc2	                           imul rax, rdx	      3109	fold.c	FUNCTION_65	CALL_14
0x5964	        0x488945e8	             mov qword [rbp - 0x18], rax	      3109	fold.c	FUNCTION_65	CALL_14
0x5968	      0xe9d5000000	                           jmp 0x4005a82	      3111	fold.c	FUNCTION_65	FOR_2	CALL_15
0x596d	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3113	fold.c	FUNCTION_65	FOR_2	IF_8
0x5971	          0x488b00	                    mov rax, qword [rax]	      3113	fold.c	FUNCTION_65	FOR_2	IF_8
0x5974	        0x483b45a8	             cmp rax, qword [rbp - 0x58]	      3113	fold.c	FUNCTION_65	FOR_2	IF_8
0x5978	            0x7f46	                            jg 0x4005a00	      3113	fold.c	FUNCTION_65	FOR_2	IF_8
0x597a	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3116	fold.c	FUNCTION_65	FOR_2	IF_8	IF_9	CALL_16
0x597e	          0x488b10	                    mov rdx, qword [rax]	      3116	fold.c	FUNCTION_65	FOR_2	IF_8	IF_9	CALL_16
0x5981	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3116	fold.c	FUNCTION_65	FOR_2	IF_8	IF_9	CALL_16
0x5985	        0x488b4008	                mov rax, qword [rax + 8]	      3116	fold.c	FUNCTION_65	FOR_2	IF_8	IF_9	CALL_16
0x5989	          0x4801d0	                            add rax, rdx	      3116	fold.c	FUNCTION_65	FOR_2	IF_8	IF_9	CALL_16
0x598c	        0x4883e801	                              sub rax, 1	      3116	fold.c	FUNCTION_65	FOR_2	IF_8	IF_9	CALL_16
0x5990	        0x483b45a8	             cmp rax, qword [rbp - 0x58]	      3116	fold.c	FUNCTION_65	FOR_2	IF_8	IF_9	CALL_16
0x5994	            0x7e13	                           jle 0x40059e9	      3116	fold.c	FUNCTION_65	FOR_2	IF_8	IF_9	CALL_16
0x5996	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3118	fold.c	FUNCTION_65	FOR_2	IF_8	CALL_17
0x599a	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      3118	fold.c	FUNCTION_65	FOR_2	IF_8	CALL_17
0x599e	          0x4889d6	                            mov rsi, rdx	      3118	fold.c	FUNCTION_65	FOR_2	IF_8	CALL_17
0x59a1	          0x4889c7	                            mov rdi, rax	      3118	fold.c	FUNCTION_65	FOR_2	IF_8	CALL_17
0x59a4	      0xe815fcffff	                  call sym.truncate_fold	      3118	fold.c	FUNCTION_65	FOR_2	IF_8	CALL_17
0x59a9	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3120	fold.c	FUNCTION_65	FOR_2	IF_8
0x59ad	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      3120	fold.c	FUNCTION_65	FOR_2	IF_8
0x59b1	          0x488b0a	                    mov rcx, qword [rdx]	      3120	fold.c	FUNCTION_65	FOR_2	IF_8
0x59b4	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      3120	fold.c	FUNCTION_65	FOR_2	IF_8
0x59b8	          0x4801ca	                            add rdx, rcx	      3120	fold.c	FUNCTION_65	FOR_2	IF_8
0x59bb	          0x488910	                    mov qword [rax], rdx	      3120	fold.c	FUNCTION_65	FOR_2	IF_8
0x59be	            0xeb76	                           jmp 0x4005a76	      3121	fold.c	FUNCTION_65	FOR_2	IF_8
0x59c0	      0x48837dd000	               cmp qword [rbp - 0x30], 0	      3125	fold.c	FUNCTION_65	FOR_2	IF_10
0x59c5	            0x752e	                           jne 0x4005a35	      3125	fold.c	FUNCTION_65	FOR_2	IF_10
0x59c7	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3126	fold.c	FUNCTION_65	FOR_2	CALL_18
0x59cb	          0x4889c2	                            mov rdx, rax	      3126	fold.c	FUNCTION_65	FOR_2	CALL_18
0x59ce	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      3126	fold.c	FUNCTION_65	FOR_2	CALL_18
0x59d2	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3126	fold.c	FUNCTION_65	FOR_2	CALL_18
0x59d6	          0x4829c2	                            sub rdx, rax	      3126	fold.c	FUNCTION_65	FOR_2	CALL_18
0x59d9	          0x4889d0	                            mov rax, rdx	      3126	fold.c	FUNCTION_65	FOR_2	CALL_18
0x59dc	        0x48c1f804	                              sar rax, 4	      3126	fold.c	FUNCTION_65	FOR_2	CALL_18
0x59e0	          0x4889c2	                            mov rdx, rax	      3126	fold.c	FUNCTION_65	FOR_2	CALL_18
0x59e3	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	      3126	fold.c	FUNCTION_65	FOR_2	CALL_18
0x59ed	        0x480fafc2	                           imul rax, rdx	      3126	fold.c	FUNCTION_65	FOR_2	CALL_18
0x59f1	        0x488945d0	             mov qword [rbp - 0x30], rax	      3126	fold.c	FUNCTION_65	FOR_2	CALL_18
0x59f5	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3128	fold.c	FUNCTION_65	FOR_2	IF_11	CALL_19
0x59f9	          0x488b10	                    mov rdx, qword [rax]	      3128	fold.c	FUNCTION_65	FOR_2	IF_11	CALL_19
0x59fc	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3128	fold.c	FUNCTION_65	FOR_2	IF_11	CALL_19
0x5a00	        0x488b4008	                mov rax, qword [rax + 8]	      3128	fold.c	FUNCTION_65	FOR_2	IF_11	CALL_19
0x5a04	          0x4801d0	                            add rax, rdx	      3128	fold.c	FUNCTION_65	FOR_2	IF_11	CALL_19
0x5a07	        0x4883e801	                              sub rax, 1	      3128	fold.c	FUNCTION_65	FOR_2	IF_11	CALL_19
0x5a0b	        0x483b45a0	             cmp rax, qword [rbp - 0x60]	      3128	fold.c	FUNCTION_65	FOR_2	IF_11	CALL_19
0x5a0f	            0x7e13	                           jle 0x4005a64	      3128	fold.c	FUNCTION_65	FOR_2	IF_11	CALL_19
0x5a11	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3129	fold.c	FUNCTION_65	FOR_2	CALL_20
0x5a15	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	      3129	fold.c	FUNCTION_65	FOR_2	CALL_20
0x5a19	          0x4889d6	                            mov rsi, rdx	      3129	fold.c	FUNCTION_65	FOR_2	CALL_20
0x5a1c	          0x4889c7	                            mov rdi, rax	      3129	fold.c	FUNCTION_65	FOR_2	CALL_20
0x5a1f	      0xe89afbffff	                  call sym.truncate_fold	      3129	fold.c	FUNCTION_65	FOR_2	CALL_20
0x5a24	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3131	fold.c	FUNCTION_65	FOR_2
0x5a28	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      3131	fold.c	FUNCTION_65	FOR_2
0x5a2c	          0x488b12	                    mov rdx, qword [rdx]	      3131	fold.c	FUNCTION_65	FOR_2
0x5a2f	        0x482b55d8	             sub rdx, qword [rbp - 0x28]	      3131	fold.c	FUNCTION_65	FOR_2
0x5a33	          0x488910	                    mov qword [rax], rdx	      3131	fold.c	FUNCTION_65	FOR_2
0x5a36	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3111	fold.c	FUNCTION_65	FOR_2	CALL_15
0x5a3a	        0x4883c030	                           add rax, 0x30	      3111	fold.c	FUNCTION_65	FOR_2	CALL_15
0x5a3e	        0x488945c8	             mov qword [rbp - 0x38], rax	      3111	fold.c	FUNCTION_65	FOR_2	CALL_15
0x5a42	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      3111	fold.c	FUNCTION_65	FOR_2	CALL_15
0x5a46	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      3111	fold.c	FUNCTION_65	FOR_2	CALL_15
0x5a4a	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      3111	fold.c	FUNCTION_65	FOR_2	CALL_15
0x5a4e	            0x8b00	                    mov eax, dword [rax]	      3111	fold.c	FUNCTION_65	FOR_2	CALL_15
0x5a50	          0x4863d0	                         movsxd rdx, eax	      3111	fold.c	FUNCTION_65	FOR_2	CALL_15
0x5a53	          0x4889d0	                            mov rax, rdx	      3111	fold.c	FUNCTION_65	FOR_2	CALL_15
0x5a56	          0x4801c0	                            add rax, rax	      3111	fold.c	FUNCTION_65	FOR_2	CALL_15
0x5a59	          0x4801d0	                            add rax, rdx	      3111	fold.c	FUNCTION_65	FOR_2	CALL_15
0x5a5c	        0x48c1e004	                              shl rax, 4	      3111	fold.c	FUNCTION_65	FOR_2	CALL_15
0x5a60	        0x488d1401	                    lea rdx, [rcx + rax]	      3111	fold.c	FUNCTION_65	FOR_2	CALL_15
0x5a64	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3111	fold.c	FUNCTION_65	FOR_2	CALL_15
0x5a68	          0x4839c2	                            cmp rdx, rax	      3111	fold.c	FUNCTION_65	FOR_2	CALL_15
0x5a6b	            0x7611	                           jbe 0x4005abe	      3111	fold.c	FUNCTION_65	FOR_2	CALL_15
0x5a6d	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3111	fold.c	FUNCTION_65	FOR_2	CALL_15
0x5a71	          0x488b00	                    mov rax, qword [rax]	      3111	fold.c	FUNCTION_65	FOR_2	CALL_15
0x5a74	        0x483b45a0	             cmp rax, qword [rbp - 0x60]	      3111	fold.c	FUNCTION_65	FOR_2	CALL_15
0x5a78	     0xf8eeffeffff	                           jle 0x40059ad	      3111	fold.c	FUNCTION_65	FOR_2	CALL_15
0x5a7e	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3134	fold.c	FUNCTION_65	CALL_21
0x5a82	          0x4889c2	                            mov rdx, rax	      3134	fold.c	FUNCTION_65	CALL_21
0x5a85	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      3134	fold.c	FUNCTION_65	CALL_21
0x5a89	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3134	fold.c	FUNCTION_65	CALL_21
0x5a8d	          0x4829c2	                            sub rdx, rax	      3134	fold.c	FUNCTION_65	CALL_21
0x5a90	          0x4889d0	                            mov rax, rdx	      3134	fold.c	FUNCTION_65	CALL_21
0x5a93	        0x48c1f804	                              sar rax, 4	      3134	fold.c	FUNCTION_65	CALL_21
0x5a97	          0x4889c2	                            mov rdx, rax	      3134	fold.c	FUNCTION_65	CALL_21
0x5a9a	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	      3134	fold.c	FUNCTION_65	CALL_21
0x5aa4	        0x480fafc2	                           imul rax, rdx	      3134	fold.c	FUNCTION_65	CALL_21
0x5aa8	        0x488945f0	             mov qword [rbp - 0x10], rax	      3134	fold.c	FUNCTION_65	CALL_21
0x5aac	      0x48837dd000	               cmp qword [rbp - 0x30], 0	      3141	fold.c	FUNCTION_65	IF_12
0x5ab1	            0x747b	                            je 0x4005b6e	      3141	fold.c	FUNCTION_65	IF_12
0x5ab3	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3145	fold.c	FUNCTION_65	CALL_22
0x5ab7	        0x488d50ff	                      lea rdx, [rax - 1]	      3145	fold.c	FUNCTION_65	CALL_22
0x5abb	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	      3145	fold.c	FUNCTION_65	CALL_22
0x5abf	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      3145	fold.c	FUNCTION_65	CALL_22
0x5ac3	          0x4889ce	                            mov rsi, rcx	      3145	fold.c	FUNCTION_65	CALL_22
0x5ac6	          0x4889c7	                            mov rdi, rax	      3145	fold.c	FUNCTION_65	CALL_22
0x5ac9	      0xe8d4f9ffff	               call sym.foldReverseOrder	      3145	fold.c	FUNCTION_65	CALL_22
0x5ace	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      3147	fold.c	FUNCTION_65
0x5ad2	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3147	fold.c	FUNCTION_65
0x5ad6	          0x4801d0	                            add rax, rdx	      3147	fold.c	FUNCTION_65
0x5ad9	        0x482b45d0	             sub rax, qword [rbp - 0x30]	      3147	fold.c	FUNCTION_65
0x5add	        0x4883e801	                              sub rax, 1	      3147	fold.c	FUNCTION_65
0x5ae1	          0x4889c2	                            mov rdx, rax	      3146	fold.c	FUNCTION_65	CALL_23
0x5ae4	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	      3146	fold.c	FUNCTION_65	CALL_23
0x5ae8	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      3146	fold.c	FUNCTION_65	CALL_23
0x5aec	          0x4889ce	                            mov rsi, rcx	      3146	fold.c	FUNCTION_65	CALL_23
0x5aef	          0x4889c7	                            mov rdi, rax	      3146	fold.c	FUNCTION_65	CALL_23
0x5af2	      0xe8abf9ffff	               call sym.foldReverseOrder	      3146	fold.c	FUNCTION_65	CALL_23
0x5af7	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3149	fold.c	FUNCTION_65
0x5afb	        0x4883e801	                              sub rax, 1	      3149	fold.c	FUNCTION_65
0x5aff	          0x4889c6	                            mov rsi, rax	      3148	fold.c	FUNCTION_65	CALL_24
0x5b02	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      3148	fold.c	FUNCTION_65	CALL_24
0x5b06	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3148	fold.c	FUNCTION_65	CALL_24
0x5b0a	          0x4801d0	                            add rax, rdx	      3148	fold.c	FUNCTION_65	CALL_24
0x5b0d	        0x482b45d0	             sub rax, qword [rbp - 0x30]	      3148	fold.c	FUNCTION_65	CALL_24
0x5b11	          0x4889c1	                            mov rcx, rax	      3148	fold.c	FUNCTION_65	CALL_24
0x5b14	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      3148	fold.c	FUNCTION_65	CALL_24
0x5b18	          0x4889f2	                            mov rdx, rsi	      3148	fold.c	FUNCTION_65	CALL_24
0x5b1b	          0x4889ce	                            mov rsi, rcx	      3148	fold.c	FUNCTION_65	CALL_24
0x5b1e	          0x4889c7	                            mov rdi, rax	      3148	fold.c	FUNCTION_65	CALL_24
0x5b21	      0xe87cf9ffff	               call sym.foldReverseOrder	      3148	fold.c	FUNCTION_65	CALL_24
0x5b26	            0xeb07	                           jmp 0x4005b6f	      3148	fold.c	FUNCTION_65	CALL_24
0x5b28	              0x90	                                     nop	      3079	fold.c	FUNCTION_65	IF_4
0x5b29	            0xeb04	                           jmp 0x4005b6f	      3079	fold.c	FUNCTION_65	IF_4
0x5b2b	              0x90	                                     nop	      3093	fold.c	FUNCTION_65	ELSE_3	IF_5
0x5b2c	            0xeb01	                           jmp 0x4005b6f	      3093	fold.c	FUNCTION_65	ELSE_3	IF_5
0x5b2e	              0x90	                                     nop	      3144	fold.c	FUNCTION_65	IF_12
0x5b2f	        0x488b45f8	                mov rax, qword [rbp - 8]	      3150	fold.c	FUNCTION_65
0x5b33	    0x644833042528	                xor rax, qword fs:[0x28]	      3150	fold.c	FUNCTION_65
0x5b3c	            0x7405	                            je 0x4005b83	      3150	fold.c	FUNCTION_65
0x5b3e	      0xe800000000	                          call 0x4005b83	      3150	fold.c	FUNCTION_65
0x5b43	              0xc9	                                   leave	      3150	fold.c	FUNCTION_65
0x5b44	              0xc3	                                     ret	      3150	fold.c	FUNCTION_65
foldAdjustVisual	SWITCH,0:ELSE,1:DO,0:FOR,0:WHILE,0:IF,6:functions,0:CALL,7	113
0x18c7	              0x55	                                push rbp	      1034	fold.c	FUNCTION_33
0x18c8	          0x4889e5	                            mov rbp, rsp	      1034	fold.c	FUNCTION_33
0x18cb	        0x4883ec20	                           sub rsp, 0x20	      1034	fold.c	FUNCTION_33
0x18cf	    0x8b0500000000	            mov eax, dword [0x04001915] 	      1038	fold.c	FUNCTION_33	IF_1	CALL_1
0x18d5	            0x85c0	                           test eax, eax	      1038	fold.c	FUNCTION_33	IF_1	CALL_1
0x18d7	     0xf849d010000	                            je 0x4001aba	      1038	fold.c	FUNCTION_33	IF_1	CALL_1
0x18dd	    0x488b05000000	            mov rax, qword [0x04001924] 	      1038	fold.c	FUNCTION_33	IF_1	CALL_1
0x18e4	          0x4889c7	                            mov rdi, rax	      1038	fold.c	FUNCTION_33	IF_1	CALL_1
0x18e7	      0xe800000000	                          call 0x400192c	      1038	fold.c	FUNCTION_33	IF_1	CALL_1
0x18ec	            0x85c0	                           test eax, eax	      1038	fold.c	FUNCTION_33	IF_1	CALL_1
0x18ee	     0xf8486010000	                            je 0x4001aba	      1038	fold.c	FUNCTION_33	IF_1	CALL_1
0x18f4	    0x488b15000000	            mov rdx, qword [0x0400193b] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x18fb	    0x488b05000000	            mov rax, qword [0x04001942] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x1902	        0x488b4038	            mov rax, qword [rax + 0x38] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x1906	          0x4839c2	                            cmp rdx, rax	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x1909	            0x7419	                            je 0x4001964	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x190b	    0x488b15000000	            mov rdx, qword [0x04001952] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x1912	    0x488b05000000	            mov rax, qword [0x04001959] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x1919	        0x488b4038	            mov rax, qword [rax + 0x38] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x191d	          0x4839c2	                            cmp rdx, rax	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x1920	            0x7c7f	                            jl 0x40019e1	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x1922	            0xeb3e	                           jmp 0x40019a2	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x1924	    0x8b1500000000	            mov edx, dword [0x0400196a] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x192a	    0x488b05000000	            mov rax, qword [0x04001971] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x1931	          0x8b4040	            mov eax, dword [rax + 0x40] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x1934	            0x39c2	                            cmp edx, eax	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x1936	            0x7416	                            je 0x400198e	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x1938	    0x8b1500000000	            mov edx, dword [0x0400197e] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x193e	    0x488b05000000	            mov rax, qword [0x04001985] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x1945	          0x8b4040	            mov eax, dword [rax + 0x40] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x1948	            0x39c2	                            cmp edx, eax	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x194a	            0x7c55	                            jl 0x40019e1	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x194c	            0xeb14	                           jmp 0x40019a2	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x194e	    0x8b1500000000	            mov edx, dword [0x04001994] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x1954	    0x488b05000000	            mov rax, qword [0x0400199b] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x195b	          0x8b4044	            mov eax, dword [rax + 0x44] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x195e	            0x39c2	                            cmp edx, eax	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x1960	            0x7c3f	                            jl 0x40019e1	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x1962	    0x488b15000000	            mov rdx, qword [0x040019a9] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x1969	    0x488b05000000	            mov rax, qword [0x040019b0] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x1970	        0x488b4038	            mov rax, qword [rax + 0x38] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x1974	          0x4839c2	                            cmp rdx, rax	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x1977	            0x7541	                           jne 0x40019fa	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x1979	    0x8b1500000000	            mov edx, dword [0x040019bf] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x197f	    0x488b05000000	            mov rax, qword [0x040019c6] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x1986	          0x8b4040	            mov eax, dword [rax + 0x40] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x1989	            0x39c2	                            cmp edx, eax	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x198b	            0x752d	                           jne 0x40019fa	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x198d	    0x8b1500000000	            mov edx, dword [0x040019d3] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x1993	    0x488b05000000	            mov rax, qword [0x040019da] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x199a	          0x8b4044	            mov eax, dword [rax + 0x44] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x199d	            0x39c2	                            cmp edx, eax	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x199f	            0x7519	                           jne 0x40019fa	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x19a1	    0x48c745e80000	               mov qword [rbp - 0x18], 0	      1043	fold.c	FUNCTION_33	IF_2
0x19a9	    0x488b05000000	            mov rax, qword [0x040019f0] 	      1044	fold.c	FUNCTION_33	IF_2
0x19b0	        0x4883c038	                           add rax, 0x38	      1044	fold.c	FUNCTION_33	IF_2
0x19b4	        0x488945f0	             mov qword [rbp - 0x10], rax	      1044	fold.c	FUNCTION_33	IF_2
0x19b8	            0xeb17	                           jmp 0x4001a11	      1044	fold.c	FUNCTION_33	IF_2
0x19ba	    0x488b05000000	            mov rax, qword [0x04001a01] 	      1048	fold.c	FUNCTION_33	ELSE_1
0x19c1	        0x4883c038	                           add rax, 0x38	      1048	fold.c	FUNCTION_33	ELSE_1
0x19c5	        0x488945e8	             mov qword [rbp - 0x18], rax	      1048	fold.c	FUNCTION_33	ELSE_1
0x19c9	    0x48c745f00000	               mov qword [rbp - 0x10], 0	      1049	fold.c	FUNCTION_33	ELSE_1
0x19d1	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	      1051	fold.c	FUNCTION_33	IF_3	CALL_3
0x19d5	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1051	fold.c	FUNCTION_33	IF_3	CALL_3
0x19d9	          0x488b00	                    mov rax, qword [rax]	      1051	fold.c	FUNCTION_33	IF_3	CALL_3
0x19dc	      0xba00000000	                              mov edx, 0	      1051	fold.c	FUNCTION_33	IF_3	CALL_3
0x19e1	          0x4889ce	                            mov rsi, rcx	      1051	fold.c	FUNCTION_33	IF_3	CALL_3
0x19e4	          0x4889c7	                            mov rdi, rax	      1051	fold.c	FUNCTION_33	IF_3	CALL_3
0x19e7	      0xe800000000	                          call 0x4001a2c	      1051	fold.c	FUNCTION_33	IF_3	CALL_3
0x19ec	            0x85c0	                           test eax, eax	      1051	fold.c	FUNCTION_33	IF_3	CALL_3
0x19ee	            0x740b	                            je 0x4001a3b	      1051	fold.c	FUNCTION_33	IF_3	CALL_3
0x19f0	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1052	fold.c	FUNCTION_33	IF_3
0x19f4	    0xc74008000000	                  mov dword [rax + 8], 0	      1052	fold.c	FUNCTION_33	IF_3
0x19fb	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      1053	fold.c	FUNCTION_33	IF_4	CALL_4
0x19ff	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1053	fold.c	FUNCTION_33	IF_4	CALL_4
0x1a03	          0x488b00	                    mov rax, qword [rax]	      1053	fold.c	FUNCTION_33	IF_4	CALL_4
0x1a06	      0xbe00000000	                              mov esi, 0	      1053	fold.c	FUNCTION_33	IF_4	CALL_4
0x1a0b	          0x4889c7	                            mov rdi, rax	      1053	fold.c	FUNCTION_33	IF_4	CALL_4
0x1a0e	      0xe800000000	                          call 0x4001a53	      1053	fold.c	FUNCTION_33	IF_4	CALL_4
0x1a13	            0x85c0	                           test eax, eax	      1053	fold.c	FUNCTION_33	IF_4	CALL_4
0x1a15	            0x7464	                            je 0x4001abb	      1053	fold.c	FUNCTION_33	IF_4	CALL_4
0x1a17	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1055	fold.c	FUNCTION_33	IF_4	CALL_5
0x1a1b	          0x488b00	                    mov rax, qword [rax]	      1055	fold.c	FUNCTION_33	IF_4	CALL_5
0x1a1e	          0x4889c7	                            mov rdi, rax	      1055	fold.c	FUNCTION_33	IF_4	CALL_5
0x1a21	      0xe800000000	                          call 0x4001a66	      1055	fold.c	FUNCTION_33	IF_4	CALL_5
0x1a26	        0x488945f8	                mov qword [rbp - 8], rax	      1055	fold.c	FUNCTION_33	IF_4	CALL_5
0x1a2a	        0x488b45f8	                mov rax, qword [rbp - 8]	      1056	fold.c	FUNCTION_33	IF_4	CALL_6
0x1a2e	          0x4889c7	                            mov rdi, rax	      1056	fold.c	FUNCTION_33	IF_4	CALL_6
0x1a31	      0xe800000000	                          call 0x4001a76	      1056	fold.c	FUNCTION_33	IF_4	CALL_6
0x1a36	            0x89c2	                            mov edx, eax	      1056	fold.c	FUNCTION_33	IF_4	CALL_6
0x1a38	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1056	fold.c	FUNCTION_33	IF_4	CALL_6
0x1a3c	          0x895008	                mov dword [rax + 8], edx	      1056	fold.c	FUNCTION_33	IF_4	CALL_6
0x1a3f	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1057	fold.c	FUNCTION_33	IF_4	IF_5
0x1a43	          0x8b4008	                mov eax, dword [rax + 8]	      1057	fold.c	FUNCTION_33	IF_4	IF_5
0x1a46	            0x85c0	                           test eax, eax	      1057	fold.c	FUNCTION_33	IF_4	IF_5
0x1a48	            0x7e1f	                           jle 0x4001aa9	      1057	fold.c	FUNCTION_33	IF_4	IF_5
0x1a4a	    0x488b05000000	            mov rax, qword [0x04001a91] 	      1057	fold.c	FUNCTION_33	IF_4	IF_5
0x1a51	           0xfb600	                   movzx eax, byte [rax]	      1057	fold.c	FUNCTION_33	IF_4	IF_5
0x1a54	            0x3c6f	                            cmp al, 0x6f	      1057	fold.c	FUNCTION_33	IF_4	IF_5
0x1a56	            0x7511	                           jne 0x4001aa9	      1057	fold.c	FUNCTION_33	IF_4	IF_5
0x1a58	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1058	fold.c	FUNCTION_33	IF_4	IF_5
0x1a5c	          0x8b4008	                mov eax, dword [rax + 8]	      1058	fold.c	FUNCTION_33	IF_4	IF_5
0x1a5f	          0x8d50ff	                      lea edx, [rax - 1]	      1058	fold.c	FUNCTION_33	IF_4	IF_5
0x1a62	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1058	fold.c	FUNCTION_33	IF_4	IF_5
0x1a66	          0x895008	                mov dword [rax + 8], edx	      1058	fold.c	FUNCTION_33	IF_4	IF_5
0x1a69	    0x8b0500000000	            mov eax, dword [0x04001aaf] 	      1061	fold.c	FUNCTION_33	IF_4	IF_6
0x1a6f	            0x85c0	                           test eax, eax	      1061	fold.c	FUNCTION_33	IF_4	IF_6
0x1a71	            0x7408	                            je 0x4001abb	      1061	fold.c	FUNCTION_33	IF_4	IF_6
0x1a73	      0xe800000000	                          call 0x4001ab8	      1062	fold.c	FUNCTION_33	IF_4	CALL_7
0x1a78	            0xeb01	                           jmp 0x4001abb	      1062	fold.c	FUNCTION_33	IF_4	CALL_7
0x1a7a	              0x90	                                     nop	      1039	fold.c	FUNCTION_33	IF_1
0x1a7b	              0xc9	                                   leave	      1065	fold.c	FUNCTION_33
0x1a7c	              0xc3	                                     ret	      1065	fold.c	FUNCTION_33
foldMarkAdjustRecurse	SWITCH,0:ELSE,8:DO,0:FOR,1:WHILE,0:IF,10:functions,0:CALL,5	227
0x2621	              0x55	                                push rbp	      1492	fold.c	FUNCTION_46
0x2622	          0x4889e5	                            mov rbp, rsp	      1492	fold.c	FUNCTION_46
0x2625	        0x4883ec60	                           sub rsp, 0x60	      1492	fold.c	FUNCTION_46
0x2629	        0x48897dc8	             mov qword [rbp - 0x38], rdi	      1492	fold.c	FUNCTION_46
0x262d	        0x488975c0	             mov qword [rbp - 0x40], rsi	      1492	fold.c	FUNCTION_46
0x2631	        0x488955b8	             mov qword [rbp - 0x48], rdx	      1492	fold.c	FUNCTION_46
0x2635	        0x48894db0	             mov qword [rbp - 0x50], rcx	      1492	fold.c	FUNCTION_46
0x2639	        0x4c8945a8	              mov qword [rbp - 0x58], r8	      1492	fold.c	FUNCTION_46
0x263d	    0x64488b042528	                mov rax, qword fs:[0x28]	      1492	fold.c	FUNCTION_46
0x2646	        0x488945f8	                mov qword [rbp - 8], rax	      1492	fold.c	FUNCTION_46
0x264a	            0x31c0	                            xor eax, eax	      1492	fold.c	FUNCTION_46
0x264c	    0x8b0500000000	            mov eax, dword [0x04002692] 	      1500	fold.c	FUNCTION_46	IF_1
0x2652	          0x83e010	                           and eax, 0x10	      1500	fold.c	FUNCTION_46	IF_1
0x2655	            0x85c0	                           test eax, eax	      1500	fold.c	FUNCTION_46	IF_1
0x2657	            0x741f	                            je 0x40026b8	      1500	fold.c	FUNCTION_46	IF_1
0x2659	      0x48837db001	               cmp qword [rbp - 0x50], 1	      1500	fold.c	FUNCTION_46	IF_1
0x265e	            0x7518	                           jne 0x40026b8	      1500	fold.c	FUNCTION_46	IF_1
0x2660	    0x48817db8ffff	     cmp qword [rbp - 0x48], 0x7fffffff 	      1500	fold.c	FUNCTION_46	IF_1
0x2668	            0x750e	                           jne 0x40026b8	      1500	fold.c	FUNCTION_46	IF_1
0x266a	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      1501	fold.c	FUNCTION_46	IF_1
0x266e	        0x4883c001	                              add rax, 1	      1501	fold.c	FUNCTION_46	IF_1
0x2672	        0x488945e8	             mov qword [rbp - 0x18], rax	      1501	fold.c	FUNCTION_46	IF_1
0x2676	            0xeb08	                           jmp 0x40026c0	      1501	fold.c	FUNCTION_46	IF_1
0x2678	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      1503	fold.c	FUNCTION_46	ELSE_1
0x267c	        0x488945e8	             mov qword [rbp - 0x18], rax	      1503	fold.c	FUNCTION_46	ELSE_1
0x2680	        0x488d55e0	                   lea rdx, [rbp - 0x20]	      1506	fold.c	FUNCTION_46	CALL_1
0x2684	        0x488b4dc0	             mov rcx, qword [rbp - 0x40]	      1506	fold.c	FUNCTION_46	CALL_1
0x2688	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1506	fold.c	FUNCTION_46	CALL_1
0x268c	          0x4889ce	                            mov rsi, rcx	      1506	fold.c	FUNCTION_46	CALL_1
0x268f	          0x4889c7	                            mov rdi, rax	      1506	fold.c	FUNCTION_46	CALL_1
0x2692	      0xe80ef5ffff	                       call sym.foldFind	      1506	fold.c	FUNCTION_46	CALL_1
0x2697	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1511	fold.c	FUNCTION_46	FOR_1
0x269b	          0x4889c2	                            mov rdx, rax	      1511	fold.c	FUNCTION_46	FOR_1
0x269e	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1511	fold.c	FUNCTION_46	FOR_1
0x26a2	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1511	fold.c	FUNCTION_46	FOR_1
0x26a6	          0x4829c2	                            sub rdx, rax	      1511	fold.c	FUNCTION_46	FOR_1
0x26a9	          0x4889d0	                            mov rax, rdx	      1511	fold.c	FUNCTION_46	FOR_1
0x26ac	        0x48c1f804	                              sar rax, 4	      1511	fold.c	FUNCTION_46	FOR_1
0x26b0	          0x4889c2	                            mov rdx, rax	      1511	fold.c	FUNCTION_46	FOR_1
0x26b3	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	      1511	fold.c	FUNCTION_46	FOR_1
0x26bd	        0x480fafc2	                           imul rax, rdx	      1511	fold.c	FUNCTION_46	FOR_1
0x26c1	          0x8945dc	             mov dword [rbp - 0x24], eax	      1511	fold.c	FUNCTION_46	FOR_1
0x26c4	      0xe985020000	                           jmp 0x400298e	      1511	fold.c	FUNCTION_46	FOR_1
0x26c9	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1525	fold.c	FUNCTION_46	FOR_1
0x26cd	          0x488b10	                    mov rdx, qword [rax]	      1525	fold.c	FUNCTION_46	FOR_1
0x26d0	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1525	fold.c	FUNCTION_46	FOR_1
0x26d4	        0x488b4008	                mov rax, qword [rax + 8]	      1525	fold.c	FUNCTION_46	FOR_1
0x26d8	          0x4801d0	                            add rax, rdx	      1525	fold.c	FUNCTION_46	FOR_1
0x26db	        0x4883e801	                              sub rax, 1	      1525	fold.c	FUNCTION_46	FOR_1
0x26df	        0x488945f0	             mov qword [rbp - 0x10], rax	      1525	fold.c	FUNCTION_46	FOR_1
0x26e3	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1528	fold.c	FUNCTION_46	FOR_1	IF_2
0x26e7	        0x483b45c0	             cmp rax, qword [rbp - 0x40]	      1528	fold.c	FUNCTION_46	FOR_1	IF_2
0x26eb	     0xf8c4c020000	                            jl 0x400297d	      1528	fold.c	FUNCTION_46	FOR_1	IF_2
0x26f1	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1532	fold.c	FUNCTION_46	FOR_1	IF_3
0x26f5	          0x488b00	                    mov rax, qword [rax]	      1532	fold.c	FUNCTION_46	FOR_1	IF_3
0x26f8	        0x483b45b8	             cmp rax, qword [rbp - 0x48]	      1532	fold.c	FUNCTION_46	FOR_1	IF_3
0x26fc	            0x7e25	                           jle 0x4002763	      1532	fold.c	FUNCTION_46	FOR_1	IF_3
0x26fe	      0x48837da800	               cmp qword [rbp - 0x58], 0	      1534	fold.c	FUNCTION_46	FOR_1	IF_3	IF_4
0x2703	     0xf8456020000	                            je 0x400299f	      1534	fold.c	FUNCTION_46	FOR_1	IF_3	IF_4
0x2709	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1536	fold.c	FUNCTION_46	FOR_1	IF_3
0x270d	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      1536	fold.c	FUNCTION_46	FOR_1	IF_3
0x2711	          0x488b0a	                    mov rcx, qword [rdx]	      1536	fold.c	FUNCTION_46	FOR_1	IF_3
0x2714	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      1536	fold.c	FUNCTION_46	FOR_1	IF_3
0x2718	          0x4801ca	                            add rdx, rcx	      1536	fold.c	FUNCTION_46	FOR_1	IF_3
0x271b	          0x488910	                    mov qword [rax], rdx	      1536	fold.c	FUNCTION_46	FOR_1	IF_3
0x271e	      0xe91b020000	                           jmp 0x400297e	      1536	fold.c	FUNCTION_46	FOR_1	IF_3
0x2723	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1540	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5
0x2727	          0x488b00	                    mov rax, qword [rax]	      1540	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5
0x272a	        0x483b45e8	             cmp rax, qword [rbp - 0x18]	      1540	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5
0x272e	            0x7c59	                            jl 0x40027c9	      1540	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5
0x2730	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1540	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5
0x2734	        0x483b45b8	             cmp rax, qword [rbp - 0x48]	      1540	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5
0x2738	            0x7f4f	                            jg 0x40027c9	      1540	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5
0x273a	    0x48817db0ffff	     cmp qword [rbp - 0x50], 0x7fffffff 	      1543	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6
0x2742	            0x752b	                           jne 0x40027af	      1543	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6
0x2744	          0x8b4ddc	             mov ecx, dword [rbp - 0x24]	      1546	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6	CALL_2
0x2747	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1546	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6	CALL_2
0x274b	      0xba01000000	                              mov edx, 1	      1546	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6	CALL_2
0x2750	            0x89ce	                            mov esi, ecx	      1546	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6	CALL_2
0x2752	          0x4889c7	                            mov rdi, rax	      1546	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6	CALL_2
0x2755	      0xe84dfbffff	                call sym.deleteFoldEntry	      1546	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6	CALL_2
0x275a	        0x836ddc01	               sub dword [rbp - 0x24], 1	      1547	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6
0x275e	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1548	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6
0x2762	        0x4883e830	                           sub rax, 0x30	      1548	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6
0x2766	        0x488945e0	             mov qword [rbp - 0x20], rax	      1548	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6
0x276a	      0xe9cf010000	                           jmp 0x400297e	      1543	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6
0x276f	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1551	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	ELSE_3
0x2773	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      1551	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	ELSE_3
0x2777	          0x488b0a	                    mov rcx, qword [rdx]	      1551	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	ELSE_3
0x277a	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	      1551	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	ELSE_3
0x277e	          0x4801ca	                            add rdx, rcx	      1551	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	ELSE_3
0x2781	          0x488910	                    mov qword [rax], rdx	      1551	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	ELSE_3
0x2784	      0xe9b5010000	                           jmp 0x400297e	      1543	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6
0x2789	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1555	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7
0x278d	          0x488b00	                    mov rax, qword [rax]	      1555	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7
0x2790	        0x483b45e8	             cmp rax, qword [rbp - 0x18]	      1555	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7
0x2794	     0xf8da4000000	                           jge 0x400287e	      1555	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7
0x279a	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1559	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7
0x279e	          0x488b00	                    mov rax, qword [rax]	      1559	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7
0x27a1	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x27a5	          0x4829c2	                            sub rdx, rax	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x27a8	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x27ac	          0x488b00	                    mov rax, qword [rax]	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x27af	        0x488b4dc0	             mov rcx, qword [rbp - 0x40]	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x27b3	          0x4889ce	                            mov rsi, rcx	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x27b6	          0x4829c6	                            sub rsi, rax	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x27b9	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x27bd	        0x488d7810	                   lea rdi, [rax + 0x10]	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x27c1	        0x488b4da8	             mov rcx, qword [rbp - 0x58]	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x27c5	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x27c9	          0x4989c8	                             mov r8, rcx	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x27cc	          0x4889c1	                            mov rcx, rax	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x27cf	      0xe84dfeffff	          call sym.foldMarkAdjustRecurse	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x27d4	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1560	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8
0x27d8	        0x483b45b8	             cmp rax, qword [rbp - 0x48]	      1560	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8
0x27dc	            0x7f44	                            jg 0x4002862	      1560	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8
0x27de	    0x48817db0ffff	     cmp qword [rbp - 0x50], 0x7fffffff 	      1563	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	IF_9
0x27e6	            0x751e	                           jne 0x4002846	      1563	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	IF_9
0x27e8	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1564	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	IF_9
0x27ec	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      1564	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	IF_9
0x27f0	          0x488b12	                    mov rdx, qword [rdx]	      1564	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	IF_9
0x27f3	        0x488b4dc0	             mov rcx, qword [rbp - 0x40]	      1564	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	IF_9
0x27f7	          0x4829d1	                            sub rcx, rdx	      1564	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	IF_9
0x27fa	          0x4889ca	                            mov rdx, rcx	      1564	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	IF_9
0x27fd	        0x48895008	                mov qword [rax + 8], rdx	      1564	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	IF_9
0x2801	      0xe938010000	                           jmp 0x400297e	      1564	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	IF_9
0x2806	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1566	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	ELSE_5
0x280a	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      1566	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	ELSE_5
0x280e	        0x488b4a08	                mov rcx, qword [rdx + 8]	      1566	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	ELSE_5
0x2812	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	      1566	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	ELSE_5
0x2816	          0x4801ca	                            add rdx, rcx	      1566	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	ELSE_5
0x2819	        0x48895008	                mov qword [rax + 8], rdx	      1566	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	ELSE_5
0x281d	      0xe91c010000	                           jmp 0x400297e	      1566	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	ELSE_5
0x2822	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1571	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	ELSE_5	ELSE_6
0x2826	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      1571	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	ELSE_5	ELSE_6
0x282a	        0x488b4a08	                mov rcx, qword [rdx + 8]	      1571	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	ELSE_5	ELSE_6
0x282e	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      1571	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	ELSE_5	ELSE_6
0x2832	          0x4801ca	                            add rdx, rcx	      1571	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	ELSE_5	ELSE_6
0x2835	        0x48895008	                mov qword [rax + 8], rdx	      1571	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	ELSE_5	ELSE_6
0x2839	      0xe900010000	                           jmp 0x400297e	      1571	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	ELSE_5	ELSE_6
0x283e	    0x48817db0ffff	     cmp qword [rbp - 0x50], 0x7fffffff 	      1578	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x2846	     0xf8581000000	                           jne 0x400290d	      1578	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x284c	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1584	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x2850	          0x488b00	                    mov rax, qword [rax]	      1584	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x2853	        0x482b45e8	             sub rax, qword [rbp - 0x18]	      1584	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x2857	          0x4889c2	                            mov rdx, rax	      1584	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x285a	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1580	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10	CALL_4
0x285e	        0x4c8d0402	                     lea r8, [rdx + rax]	      1580	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10	CALL_4
0x2862	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1582	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x2866	          0x488b00	                    mov rax, qword [rax]	      1582	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x2869	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      1580	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10	CALL_4
0x286d	          0x4829c2	                            sub rdx, rax	      1580	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10	CALL_4
0x2870	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1581	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x2874	          0x488b00	                    mov rax, qword [rax]	      1581	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x2877	        0x488b4dc0	             mov rcx, qword [rbp - 0x40]	      1580	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10	CALL_4
0x287b	          0x4889ce	                            mov rsi, rcx	      1580	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10	CALL_4
0x287e	          0x4829c6	                            sub rsi, rax	      1580	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10	CALL_4
0x2881	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1580	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10	CALL_4
0x2885	        0x488d7810	                   lea rdi, [rax + 0x10]	      1580	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10	CALL_4
0x2889	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1580	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10	CALL_4
0x288d	          0x4889c1	                            mov rcx, rax	      1580	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10	CALL_4
0x2890	      0xe88cfdffff	          call sym.foldMarkAdjustRecurse	      1580	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10	CALL_4
0x2895	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1585	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x2899	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      1585	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x289d	        0x488b4a08	                mov rcx, qword [rdx + 8]	      1585	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x28a1	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      1585	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x28a5	          0x488b12	                    mov rdx, qword [rdx]	      1585	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x28a8	        0x488b75b8	             mov rsi, qword [rbp - 0x48]	      1585	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x28ac	          0x4829d6	                            sub rsi, rdx	      1585	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x28af	          0x4889f2	                            mov rdx, rsi	      1585	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x28b2	        0x4883c201	                              add rdx, 1	      1585	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x28b6	          0x4829d1	                            sub rcx, rdx	      1585	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x28b9	          0x4889ca	                            mov rdx, rcx	      1585	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x28bc	        0x48895008	                mov qword [rax + 8], rdx	      1585	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x28c0	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1586	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x28c4	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      1586	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x28c8	          0x488910	                    mov qword [rax], rdx	      1586	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x28cb	            0xeb71	                           jmp 0x400297e	      1586	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x28cd	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x28d1	        0x482b45b0	             sub rax, qword [rbp - 0x50]	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x28d5	          0x4889c1	                            mov rcx, rax	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x28d8	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1592	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x28dc	          0x488b00	                    mov rax, qword [rax]	      1592	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x28df	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x28e3	          0x4829c2	                            sub rdx, rax	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x28e6	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1591	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x28ea	          0x488b00	                    mov rax, qword [rax]	      1591	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x28ed	        0x488b75c0	             mov rsi, qword [rbp - 0x40]	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x28f1	          0x4829c6	                            sub rsi, rax	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x28f4	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x28f8	        0x488d7810	                   lea rdi, [rax + 0x10]	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x28fc	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x2900	          0x4989c8	                             mov r8, rcx	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x2903	          0x4889c1	                            mov rcx, rax	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x2906	      0xe816fdffff	          call sym.foldMarkAdjustRecurse	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x290b	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1595	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x290f	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      1595	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x2913	        0x488b4a08	                mov rcx, qword [rdx + 8]	      1595	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x2917	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      1595	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x291b	        0x482b55b0	             sub rdx, qword [rbp - 0x50]	      1595	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x291f	          0x4801ca	                            add rdx, rcx	      1595	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x2922	        0x48895008	                mov qword [rax + 8], rdx	      1595	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x2926	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1596	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x292a	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      1596	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x292e	          0x488b0a	                    mov rcx, qword [rdx]	      1596	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x2931	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	      1596	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x2935	          0x4801ca	                            add rdx, rcx	      1596	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x2938	          0x488910	                    mov qword [rax], rdx	      1596	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x293b	            0xeb01	                           jmp 0x400297e	      1596	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x293d	              0x90	                                     nop	      1529	fold.c	FUNCTION_46	FOR_1	IF_2
0x293e	        0x8345dc01	               add dword [rbp - 0x24], 1	      1511	fold.c	FUNCTION_46	FOR_1
0x2942	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1511	fold.c	FUNCTION_46	FOR_1
0x2946	        0x4883c030	                           add rax, 0x30	      1511	fold.c	FUNCTION_46	FOR_1
0x294a	        0x488945e0	             mov qword [rbp - 0x20], rax	      1511	fold.c	FUNCTION_46	FOR_1
0x294e	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1511	fold.c	FUNCTION_46	FOR_1
0x2952	            0x8b00	                    mov eax, dword [rax]	      1511	fold.c	FUNCTION_46	FOR_1
0x2954	          0x3b45dc	             cmp eax, dword [rbp - 0x24]	      1511	fold.c	FUNCTION_46	FOR_1
0x2957	     0xf8f6cfdffff	                            jg 0x4002709	      1511	fold.c	FUNCTION_46	FOR_1
0x295d	            0xeb01	                           jmp 0x40029a0	      1602	fold.c	FUNCTION_46
0x295f	              0x90	                                     nop	      1535	fold.c	FUNCTION_46	FOR_1	IF_3	IF_4
0x2960	              0x90	                                     nop	      1602	fold.c	FUNCTION_46
0x2961	        0x488b45f8	                mov rax, qword [rbp - 8]	      1602	fold.c	FUNCTION_46
0x2965	    0x644833042528	                xor rax, qword fs:[0x28]	      1602	fold.c	FUNCTION_46
0x296e	            0x7405	                            je 0x40029b5	      1602	fold.c	FUNCTION_46
0x2970	      0xe800000000	                          call 0x40029b5	      1602	fold.c	FUNCTION_46
0x2975	              0xc9	                                   leave	      1602	fold.c	FUNCTION_46
0x2976	              0xc3	                                     ret	      1602	fold.c	FUNCTION_46
hasFoldingWin	SWITCH,0:ELSE,0:DO,0:FOR,1:WHILE,0:IF,14:functions,0:CALL,5	204
0xe0	              0x55	                                push rbp	       144	fold.c	FUNCTION_4
0xe1	          0x4889e5	                            mov rbp, rsp	       144	fold.c	FUNCTION_4
0xe4	        0x4883c480	             add rsp, 0xffffffffffffff80	       144	fold.c	FUNCTION_4
0xe8	        0x48897da8	             mov qword [rbp - 0x58], rdi	       144	fold.c	FUNCTION_4
0xec	        0x488975a0	             mov qword [rbp - 0x60], rsi	       144	fold.c	FUNCTION_4
0xf0	        0x48895598	             mov qword [rbp - 0x68], rdx	       144	fold.c	FUNCTION_4
0xf4	        0x48894d90	             mov qword [rbp - 0x70], rcx	       144	fold.c	FUNCTION_4
0xf8	        0x4489458c	             mov dword [rbp - 0x74], r8d	       144	fold.c	FUNCTION_4
0xfc	        0x4c894d80	              mov qword [rbp - 0x80], r9	       144	fold.c	FUNCTION_4
0x100	    0x64488b042528	                mov rax, qword fs:[0x28]	       144	fold.c	FUNCTION_4
0x109	        0x488945f8	                mov qword [rbp - 8], rax	       144	fold.c	FUNCTION_4
0x10d	            0x31c0	                            xor eax, eax	       144	fold.c	FUNCTION_4
0x10f	    0xc745c0000000	               mov dword [rbp - 0x40], 0	       145	fold.c	FUNCTION_4
0x116	    0x48c745d80000	               mov qword [rbp - 0x28], 0	       146	fold.c	FUNCTION_4
0x11e	    0x48c745e00000	               mov qword [rbp - 0x20], 0	       147	fold.c	FUNCTION_4
0x126	        0x488b45a0	             mov rax, qword [rbp - 0x60]	       148	fold.c	FUNCTION_4
0x12a	        0x488945e8	             mov qword [rbp - 0x18], rax	       148	fold.c	FUNCTION_4
0x12e	    0xc745c4000000	               mov dword [rbp - 0x3c], 0	       151	fold.c	FUNCTION_4
0x135	    0xc745b8000000	               mov dword [rbp - 0x48], 0	       152	fold.c	FUNCTION_4
0x13c	    0xc745bc000000	               mov dword [rbp - 0x44], 0	       153	fold.c	FUNCTION_4
0x143	    0xc745c8000000	               mov dword [rbp - 0x38], 0	       155	fold.c	FUNCTION_4
0x14a	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       157	fold.c	FUNCTION_4	CALL_1
0x14e	          0x4889c7	                            mov rdi, rax	       157	fold.c	FUNCTION_4	CALL_1
0x151	      0xe8211c0000	                    call sym.checkupdate	       157	fold.c	FUNCTION_4	CALL_1
0x156	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       161	fold.c	FUNCTION_4	IF_1	CALL_2
0x15a	          0x4889c7	                            mov rdi, rax	       161	fold.c	FUNCTION_4	IF_1	CALL_2
0x15d	      0xe800000000	                          call 0x40001a2	       161	fold.c	FUNCTION_4	IF_1	CALL_2
0x162	            0x85c0	                           test eax, eax	       161	fold.c	FUNCTION_4	IF_1	CALL_2
0x164	            0x751b	                           jne 0x40001c1	       161	fold.c	FUNCTION_4	IF_1	CALL_2
0x166	      0x48837d8000	               cmp qword [rbp - 0x80], 0	       163	fold.c	FUNCTION_4	IF_1	IF_2
0x16b	            0x740a	                            je 0x40001b7	       163	fold.c	FUNCTION_4	IF_1	IF_2
0x16d	        0x488b4580	             mov rax, qword [rbp - 0x80]	       164	fold.c	FUNCTION_4	IF_1	IF_2
0x171	    0xc70000000000	                      mov dword [rax], 0	       164	fold.c	FUNCTION_4	IF_1	IF_2
0x177	      0xb800000000	                              mov eax, 0	       165	fold.c	FUNCTION_4	IF_1
0x17c	      0xe941020000	                           jmp 0x4000402	       165	fold.c	FUNCTION_4	IF_1
0x181	        0x837d8c00	               cmp dword [rbp - 0x74], 0	       168	fold.c	FUNCTION_4	IF_3
0x185	     0xf8498000000	                            je 0x4000263	       168	fold.c	FUNCTION_4	IF_3
0x18b	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	       174	fold.c	FUNCTION_4	IF_3	CALL_3
0x18f	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       174	fold.c	FUNCTION_4	IF_3	CALL_3
0x193	          0x4889d6	                            mov rsi, rdx	       174	fold.c	FUNCTION_4	IF_3	CALL_3
0x196	          0x4889c7	                            mov rdi, rax	       174	fold.c	FUNCTION_4	IF_3	CALL_3
0x199	      0xe800000000	                          call 0x40001de	       174	fold.c	FUNCTION_4	IF_3	CALL_3
0x19e	          0x8945cc	             mov dword [rbp - 0x34], eax	       174	fold.c	FUNCTION_4	IF_3	CALL_3
0x1a1	        0x837dcc00	               cmp dword [rbp - 0x34], 0	       175	fold.c	FUNCTION_4	IF_3	IF_4
0x1a5	            0x787c	                            js 0x4000263	       175	fold.c	FUNCTION_4	IF_3	IF_4
0x1a7	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       177	fold.c	FUNCTION_4	IF_3	IF_4
0x1ab	    0x488b88000100	           mov rcx, qword [rax + 0x100] 	       177	fold.c	FUNCTION_4	IF_3	IF_4
0x1b2	          0x8b45cc	             mov eax, dword [rbp - 0x34]	       177	fold.c	FUNCTION_4	IF_3	IF_4
0x1b5	          0x4863d0	                         movsxd rdx, eax	       177	fold.c	FUNCTION_4	IF_3	IF_4
0x1b8	          0x4889d0	                            mov rax, rdx	       177	fold.c	FUNCTION_4	IF_3	IF_4
0x1bb	          0x4801c0	                            add rax, rax	       177	fold.c	FUNCTION_4	IF_3	IF_4
0x1be	          0x4801d0	                            add rax, rdx	       177	fold.c	FUNCTION_4	IF_3	IF_4
0x1c1	        0x48c1e003	                              shl rax, 3	       177	fold.c	FUNCTION_4	IF_3	IF_4
0x1c5	          0x4801c8	                            add rax, rcx	       177	fold.c	FUNCTION_4	IF_3	IF_4
0x1c8	          0x488b00	                    mov rax, qword [rax]	       177	fold.c	FUNCTION_4	IF_3	IF_4
0x1cb	        0x488945d8	             mov qword [rbp - 0x28], rax	       177	fold.c	FUNCTION_4	IF_3	IF_4
0x1cf	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       178	fold.c	FUNCTION_4	IF_3	IF_4
0x1d3	    0x488b88000100	           mov rcx, qword [rax + 0x100] 	       178	fold.c	FUNCTION_4	IF_3	IF_4
0x1da	          0x8b45cc	             mov eax, dword [rbp - 0x34]	       178	fold.c	FUNCTION_4	IF_3	IF_4
0x1dd	          0x4863d0	                         movsxd rdx, eax	       178	fold.c	FUNCTION_4	IF_3	IF_4
0x1e0	          0x4889d0	                            mov rax, rdx	       178	fold.c	FUNCTION_4	IF_3	IF_4
0x1e3	          0x4801c0	                            add rax, rax	       178	fold.c	FUNCTION_4	IF_3	IF_4
0x1e6	          0x4801d0	                            add rax, rdx	       178	fold.c	FUNCTION_4	IF_3	IF_4
0x1e9	        0x48c1e003	                              shl rax, 3	       178	fold.c	FUNCTION_4	IF_3	IF_4
0x1ed	          0x4801c8	                            add rax, rcx	       178	fold.c	FUNCTION_4	IF_3	IF_4
0x1f0	        0x488b4010	            mov rax, qword [rax + 0x10] 	       178	fold.c	FUNCTION_4	IF_3	IF_4
0x1f4	        0x488945e0	             mov qword [rbp - 0x20], rax	       178	fold.c	FUNCTION_4	IF_3	IF_4
0x1f8	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       179	fold.c	FUNCTION_4	IF_3	IF_4
0x1fc	    0x488b88000100	           mov rcx, qword [rax + 0x100] 	       179	fold.c	FUNCTION_4	IF_3	IF_4
0x203	          0x8b45cc	             mov eax, dword [rbp - 0x34]	       179	fold.c	FUNCTION_4	IF_3	IF_4
0x206	          0x4863d0	                         movsxd rdx, eax	       179	fold.c	FUNCTION_4	IF_3	IF_4
0x209	          0x4889d0	                            mov rax, rdx	       179	fold.c	FUNCTION_4	IF_3	IF_4
0x20c	          0x4801c0	                            add rax, rax	       179	fold.c	FUNCTION_4	IF_3	IF_4
0x20f	          0x4801d0	                            add rax, rdx	       179	fold.c	FUNCTION_4	IF_3	IF_4
0x212	        0x48c1e003	                              shl rax, 3	       179	fold.c	FUNCTION_4	IF_3	IF_4
0x216	          0x4801c8	                            add rax, rcx	       179	fold.c	FUNCTION_4	IF_3	IF_4
0x219	         0xfb6400b	            movzx eax, byte [rax + 0xb] 	       179	fold.c	FUNCTION_4	IF_3	IF_4
0x21d	           0xfbec0	                           movsx eax, al	       179	fold.c	FUNCTION_4	IF_3	IF_4
0x220	          0x8945c0	             mov dword [rbp - 0x40], eax	       179	fold.c	FUNCTION_4	IF_3	IF_4
0x223	      0x48837dd800	               cmp qword [rbp - 0x28], 0	       183	fold.c	FUNCTION_4	IF_5
0x228	     0xf85c7000000	                           jne 0x4000335	       183	fold.c	FUNCTION_4	IF_5
0x22e	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       188	fold.c	FUNCTION_4	IF_5
0x232	    0x480508010000	                          add rax, 0x108	       188	fold.c	FUNCTION_4	IF_5
0x238	        0x488945f0	             mov qword [rbp - 0x10], rax	       188	fold.c	FUNCTION_4	IF_5
0x23c	        0x488d55d0	                   lea rdx, [rbp - 0x30]	       191	fold.c	FUNCTION_4	IF_5	FOR_1	IF_6	CALL_4
0x240	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	       191	fold.c	FUNCTION_4	IF_5	FOR_1	IF_6	CALL_4
0x244	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       191	fold.c	FUNCTION_4	IF_5	FOR_1	IF_6	CALL_4
0x248	          0x4889ce	                            mov rsi, rcx	       191	fold.c	FUNCTION_4	IF_5	FOR_1	IF_6	CALL_4
0x24b	          0x4889c7	                            mov rdi, rax	       191	fold.c	FUNCTION_4	IF_5	FOR_1	IF_6	CALL_4
0x24e	      0xe852190000	                       call sym.foldFind	       191	fold.c	FUNCTION_4	IF_5	FOR_1	IF_6	CALL_4
0x253	            0x85c0	                           test eax, eax	       191	fold.c	FUNCTION_4	IF_5	FOR_1	IF_6	CALL_4
0x255	     0xf8499000000	                            je 0x4000334	       191	fold.c	FUNCTION_4	IF_5	FOR_1	IF_6	CALL_4
0x25b	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       195	fold.c	FUNCTION_4	IF_5	FOR_1	IF_7
0x25f	          0x488b00	                    mov rax, qword [rax]	       195	fold.c	FUNCTION_4	IF_5	FOR_1	IF_7
0x262	        0x483b45e8	             cmp rax, qword [rbp - 0x18]	       195	fold.c	FUNCTION_4	IF_5	FOR_1	IF_7
0x266	            0x750f	                           jne 0x40002b7	       195	fold.c	FUNCTION_4	IF_5	FOR_1	IF_7
0x268	        0x837dc800	               cmp dword [rbp - 0x38], 0	       195	fold.c	FUNCTION_4	IF_5	FOR_1	IF_7
0x26c	            0x7509	                           jne 0x40002b7	       195	fold.c	FUNCTION_4	IF_5	FOR_1	IF_7
0x26e	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	       196	fold.c	FUNCTION_4	IF_5	FOR_1	IF_7
0x271	          0x83c001	                              add eax, 1	       196	fold.c	FUNCTION_4	IF_5	FOR_1	IF_7
0x274	          0x8945c8	             mov dword [rbp - 0x38], eax	       196	fold.c	FUNCTION_4	IF_5	FOR_1	IF_7
0x277	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       198	fold.c	FUNCTION_4	IF_5	FOR_1
0x27b	          0x488b00	                    mov rax, qword [rax]	       198	fold.c	FUNCTION_4	IF_5	FOR_1
0x27e	        0x480145d8	            add qword [rbp - 0x28], rax 	       198	fold.c	FUNCTION_4	IF_5	FOR_1
0x282	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       199	fold.c	FUNCTION_4	IF_5	FOR_1
0x286	          0x488b00	                    mov rax, qword [rax]	       199	fold.c	FUNCTION_4	IF_5	FOR_1
0x289	        0x480145e0	            add qword [rbp - 0x20], rax 	       199	fold.c	FUNCTION_4	IF_5	FOR_1
0x28d	        0x488b45a0	             mov rax, qword [rbp - 0x60]	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x291	        0x482b45e8	             sub rax, qword [rbp - 0x18]	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x295	          0x4989c0	                             mov r8, rax	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x298	        0x488b75d0	             mov rsi, qword [rbp - 0x30]	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x29c	        0x488d7dbc	                   lea rdi, [rbp - 0x44]	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x2a0	          0x8b4dc4	             mov ecx, dword [rbp - 0x3c]	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x2a3	        0x488d55b8	                   lea rdx, [rbp - 0x48]	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x2a7	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x2ab	          0x4d89c1	                              mov r9, r8	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x2ae	          0x4989f8	                             mov r8, rdi	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x2b1	          0x4889c7	                            mov rdi, rax	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x2b4	      0xe861270000	                   call sym.check_closed	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x2b9	          0x8945c0	             mov dword [rbp - 0x40], eax	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x2bc	        0x837dc000	               cmp dword [rbp - 0x40], 0	       204	fold.c	FUNCTION_4	IF_5	FOR_1	IF_8
0x2c0	            0x7412	                            je 0x4000314	       204	fold.c	FUNCTION_4	IF_5	FOR_1	IF_8
0x2c2	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       207	fold.c	FUNCTION_4	IF_5	FOR_1	IF_8
0x2c6	        0x488b4008	                mov rax, qword [rax + 8]	       207	fold.c	FUNCTION_4	IF_5	FOR_1	IF_8
0x2ca	        0x4883e801	                              sub rax, 1	       207	fold.c	FUNCTION_4	IF_5	FOR_1	IF_8
0x2ce	        0x480145e0	            add qword [rbp - 0x20], rax 	       207	fold.c	FUNCTION_4	IF_5	FOR_1	IF_8
0x2d2	            0xeb21	                           jmp 0x4000335	       208	fold.c	FUNCTION_4	IF_5	FOR_1	IF_8
0x2d4	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       213	fold.c	FUNCTION_4	IF_5	FOR_1
0x2d8	        0x4883c010	                           add rax, 0x10	       213	fold.c	FUNCTION_4	IF_5	FOR_1
0x2dc	        0x488945f0	             mov qword [rbp - 0x10], rax	       213	fold.c	FUNCTION_4	IF_5	FOR_1
0x2e0	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       214	fold.c	FUNCTION_4	IF_5	FOR_1
0x2e4	          0x488b00	                    mov rax, qword [rax]	       214	fold.c	FUNCTION_4	IF_5	FOR_1
0x2e7	        0x482945e8	             sub qword [rbp - 0x18], rax	       214	fold.c	FUNCTION_4	IF_5	FOR_1
0x2eb	        0x8345c401	               add dword [rbp - 0x3c], 1	       215	fold.c	FUNCTION_4	IF_5	FOR_1
0x2ef	      0xe948ffffff	                           jmp 0x400027c	       216	fold.c	FUNCTION_4	IF_5	FOR_1
0x2f4	              0x90	                                     nop	       192	fold.c	FUNCTION_4	IF_5	FOR_1	IF_6
0x2f5	        0x837dc000	               cmp dword [rbp - 0x40], 0	       219	fold.c	FUNCTION_4	IF_9
0x2f9	            0x7546	                           jne 0x4000381	       219	fold.c	FUNCTION_4	IF_9
0x2fb	      0x48837d8000	               cmp qword [rbp - 0x80], 0	       221	fold.c	FUNCTION_4	IF_9	IF_10
0x300	            0x7435	                            je 0x4000377	       221	fold.c	FUNCTION_4	IF_9	IF_10
0x302	        0x488b4580	             mov rax, qword [rbp - 0x80]	       223	fold.c	FUNCTION_4	IF_9	IF_10
0x306	          0x8b55c4	             mov edx, dword [rbp - 0x3c]	       223	fold.c	FUNCTION_4	IF_9	IF_10
0x309	            0x8910	                    mov dword [rax], edx	       223	fold.c	FUNCTION_4	IF_9	IF_10
0x30b	        0x488b45a0	             mov rax, qword [rbp - 0x60]	       224	fold.c	FUNCTION_4	IF_9	IF_10
0x30f	            0x89c2	                            mov edx, eax	       224	fold.c	FUNCTION_4	IF_9	IF_10
0x311	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       224	fold.c	FUNCTION_4	IF_9	IF_10
0x315	            0x29c2	                            sub edx, eax	       224	fold.c	FUNCTION_4	IF_9	IF_10
0x317	            0x89d0	                            mov eax, edx	       224	fold.c	FUNCTION_4	IF_9	IF_10
0x319	            0x89c2	                            mov edx, eax	       224	fold.c	FUNCTION_4	IF_9	IF_10
0x31b	        0x488b4580	             mov rax, qword [rbp - 0x80]	       224	fold.c	FUNCTION_4	IF_9	IF_10
0x31f	          0x895004	                mov dword [rax + 4], edx	       224	fold.c	FUNCTION_4	IF_9	IF_10
0x322	        0x837dc800	               cmp dword [rbp - 0x38], 0	       225	fold.c	FUNCTION_4	IF_9	IF_10
0x326	            0x7505	                           jne 0x400036d	       225	fold.c	FUNCTION_4	IF_9	IF_10
0x328	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	       225	fold.c	FUNCTION_4	IF_9	IF_10
0x32b	            0xeb03	                           jmp 0x4000370	       225	fold.c	FUNCTION_4	IF_9	IF_10
0x32d	          0x8b45c8	             mov eax, dword [rbp - 0x38]	       225	fold.c	FUNCTION_4	IF_9	IF_10
0x330	        0x488b5580	             mov rdx, qword [rbp - 0x80]	       225	fold.c	FUNCTION_4	IF_9	IF_10
0x334	          0x894208	                mov dword [rdx + 8], eax	       225	fold.c	FUNCTION_4	IF_9	IF_10
0x337	      0xb800000000	                              mov eax, 0	       227	fold.c	FUNCTION_4	IF_9
0x33c	      0xe981000000	                           jmp 0x4000402	       227	fold.c	FUNCTION_4	IF_9
0x341	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       230	fold.c	FUNCTION_4	IF_11
0x345	        0x488b4008	                mov rax, qword [rax + 8]	       230	fold.c	FUNCTION_4	IF_11
0x349	          0x488b00	                    mov rax, qword [rax]	       230	fold.c	FUNCTION_4	IF_11
0x34c	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	       230	fold.c	FUNCTION_4	IF_11
0x350	            0x7d0f	                           jge 0x40003a1	       230	fold.c	FUNCTION_4	IF_11
0x352	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       231	fold.c	FUNCTION_4	IF_11
0x356	        0x488b4008	                mov rax, qword [rax + 8]	       231	fold.c	FUNCTION_4	IF_11
0x35a	          0x488b00	                    mov rax, qword [rax]	       231	fold.c	FUNCTION_4	IF_11
0x35d	        0x488945e0	             mov qword [rbp - 0x20], rax	       231	fold.c	FUNCTION_4	IF_11
0x361	      0x48837d9000	               cmp qword [rbp - 0x70], 0	       232	fold.c	FUNCTION_4	IF_12
0x366	            0x740b	                            je 0x40003b3	       232	fold.c	FUNCTION_4	IF_12
0x368	        0x488b4590	             mov rax, qword [rbp - 0x70]	       233	fold.c	FUNCTION_4	IF_12
0x36c	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       233	fold.c	FUNCTION_4	IF_12
0x370	          0x488910	                    mov qword [rax], rdx	       233	fold.c	FUNCTION_4	IF_12
0x373	      0x48837d9800	               cmp qword [rbp - 0x68], 0	       234	fold.c	FUNCTION_4	IF_13
0x378	            0x740b	                            je 0x40003c5	       234	fold.c	FUNCTION_4	IF_13
0x37a	        0x488b4598	             mov rax, qword [rbp - 0x68]	       235	fold.c	FUNCTION_4	IF_13
0x37e	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       235	fold.c	FUNCTION_4	IF_13
0x382	          0x488910	                    mov qword [rax], rdx	       235	fold.c	FUNCTION_4	IF_13
0x385	      0x48837d8000	               cmp qword [rbp - 0x80], 0	       236	fold.c	FUNCTION_4	IF_14
0x38a	            0x7431	                            je 0x40003fd	       236	fold.c	FUNCTION_4	IF_14
0x38c	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	       238	fold.c	FUNCTION_4	IF_14
0x38f	          0x8d5001	                      lea edx, [rax + 1]	       238	fold.c	FUNCTION_4	IF_14
0x392	        0x488b4580	             mov rax, qword [rbp - 0x80]	       238	fold.c	FUNCTION_4	IF_14
0x396	            0x8910	                    mov dword [rax], edx	       238	fold.c	FUNCTION_4	IF_14
0x398	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       239	fold.c	FUNCTION_4	IF_14
0x39c	            0x89c2	                            mov edx, eax	       239	fold.c	FUNCTION_4	IF_14
0x39e	        0x488b4580	             mov rax, qword [rbp - 0x80]	       239	fold.c	FUNCTION_4	IF_14
0x3a2	          0x895004	                mov dword [rax + 4], edx	       239	fold.c	FUNCTION_4	IF_14
0x3a5	        0x837dc800	               cmp dword [rbp - 0x38], 0	       240	fold.c	FUNCTION_4	IF_14
0x3a9	            0x7508	                           jne 0x40003f3	       240	fold.c	FUNCTION_4	IF_14
0x3ab	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	       240	fold.c	FUNCTION_4	IF_14
0x3ae	          0x83c001	                              add eax, 1	       240	fold.c	FUNCTION_4	IF_14
0x3b1	            0xeb03	                           jmp 0x40003f6	       240	fold.c	FUNCTION_4	IF_14
0x3b3	          0x8b45c8	             mov eax, dword [rbp - 0x38]	       240	fold.c	FUNCTION_4	IF_14
0x3b6	        0x488b5580	             mov rdx, qword [rbp - 0x80]	       240	fold.c	FUNCTION_4	IF_14
0x3ba	          0x894208	                mov dword [rdx + 8], eax	       240	fold.c	FUNCTION_4	IF_14
0x3bd	      0xb801000000	                              mov eax, 1	       242	fold.c	FUNCTION_4
0x3c2	        0x488b75f8	                mov rsi, qword [rbp - 8]	       243	fold.c	FUNCTION_4
0x3c6	    0x644833342528	                xor rsi, qword fs:[0x28]	       243	fold.c	FUNCTION_4
0x3cf	            0x7405	                            je 0x4000416	       243	fold.c	FUNCTION_4
0x3d1	      0xe800000000	                          call 0x4000416	       243	fold.c	FUNCTION_4
0x3d6	              0xc9	                                   leave	       243	fold.c	FUNCTION_4
0x3d7	              0xc3	                                     ret	       243	fold.c	FUNCTION_4
put_foldopen_recurse	SWITCH,0:ELSE,1:DO,0:FOR,1:WHILE,0:IF,8:functions,0:CALL,7	120
0x6697	              0x55	                                push rbp	      3545	fold.c	FUNCTION_75
0x6698	          0x4889e5	                            mov rbp, rsp	      3545	fold.c	FUNCTION_75
0x669b	        0x4883ec30	                           sub rsp, 0x30	      3545	fold.c	FUNCTION_75
0x669f	        0x48897de8	             mov qword [rbp - 0x18], rdi	      3545	fold.c	FUNCTION_75
0x66a3	        0x488975e0	             mov qword [rbp - 0x20], rsi	      3545	fold.c	FUNCTION_75
0x66a7	        0x488955d8	             mov qword [rbp - 0x28], rdx	      3545	fold.c	FUNCTION_75
0x66ab	        0x48894dd0	             mov qword [rbp - 0x30], rcx	      3545	fold.c	FUNCTION_75
0x66af	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3550	fold.c	FUNCTION_75
0x66b3	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3550	fold.c	FUNCTION_75
0x66b7	        0x488945f8	                mov qword [rbp - 8], rax	      3550	fold.c	FUNCTION_75
0x66bb	    0xc745f0000000	               mov dword [rbp - 0x10], 0	      3551	fold.c	FUNCTION_75	FOR_1
0x66c2	      0xe971010000	                           jmp 0x4006878	      3551	fold.c	FUNCTION_75	FOR_1
0x66c7	        0x488b45f8	                mov rax, qword [rbp - 8]	      3553	fold.c	FUNCTION_75	FOR_1	IF_1
0x66cb	         0xfb64028	           movzx eax, byte [rax + 0x28] 	      3553	fold.c	FUNCTION_75	FOR_1	IF_1
0x66cf	            0x3c02	                               cmp al, 2	      3553	fold.c	FUNCTION_75	FOR_1	IF_1
0x66d1	     0xf8458010000	                            je 0x400686f	      3553	fold.c	FUNCTION_75	FOR_1	IF_1
0x66d7	        0x488b45f8	                mov rax, qword [rbp - 8]	      3555	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2
0x66db	          0x8b4010	            mov eax, dword [rax + 0x10] 	      3555	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2
0x66de	            0x85c0	                           test eax, eax	      3555	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2
0x66e0	     0xf8ec5000000	                           jle 0x40067eb	      3555	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2
0x66e6	        0x488b45f8	                mov rax, qword [rbp - 8]	      3558	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_1
0x66ea	          0x488b10	                    mov rdx, qword [rax]	      3558	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_1
0x66ed	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      3558	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_1
0x66f1	          0x4801c2	                            add rdx, rax	      3558	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_1
0x66f4	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3558	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_1
0x66f8	      0xbe00000000	                              mov esi, 0	      3558	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_1
0x66fd	          0x4889c7	                            mov rdi, rax	      3558	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_1
0x6700	      0xb800000000	                              mov eax, 0	      3558	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_1
0x6705	      0xe800000000	                          call 0x400674a	      3558	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_1
0x670a	            0x85c0	                           test eax, eax	      3558	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_1
0x670c	            0x7825	                            js 0x4006773	      3558	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_1
0x670e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3559	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_2
0x6712	          0x4889c7	                            mov rdi, rax	      3559	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_2
0x6715	      0xe800000000	                          call 0x400675a	      3559	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_2
0x671a	            0x85c0	                           test eax, eax	      3559	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_2
0x671c	            0x7415	                            je 0x4006773	      3559	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_2
0x671e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3560	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_3
0x6722	      0xbe00000000	                              mov esi, 0	      3560	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_3
0x6727	          0x4889c7	                            mov rdi, rax	      3560	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_3
0x672a	      0xe800000000	                          call 0x400676f	      3560	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_3
0x672f	            0x85c0	                           test eax, eax	      3560	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_3
0x6731	            0x750a	                           jne 0x400677d	      3560	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_3
0x6733	      0xb800000000	                              mov eax, 0	      3561	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3
0x6738	      0xe90f010000	                           jmp 0x400688c	      3561	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3
0x673d	        0x488b45f8	                mov rax, qword [rbp - 8]	      3563	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_4
0x6741	          0x488b10	                    mov rdx, qword [rax]	      3563	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_4
0x6744	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      3562	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_4	CALL_4
0x6748	        0x488d0c02	                    lea rcx, [rdx + rax]	      3562	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_4	CALL_4
0x674c	        0x488b45f8	                mov rax, qword [rbp - 8]	      3562	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_4	CALL_4
0x6750	        0x488d5010	                   lea rdx, [rax + 0x10]	      3562	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_4	CALL_4
0x6754	        0x488b75e0	             mov rsi, qword [rbp - 0x20]	      3562	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_4	CALL_4
0x6758	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3562	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_4	CALL_4
0x675c	          0x4889c7	                            mov rdi, rax	      3562	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_4	CALL_4
0x675f	      0xe833ffffff	           call sym.put_foldopen_recurse	      3562	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_4	CALL_4
0x6764	            0x85c0	                           test eax, eax	      3562	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_4	CALL_4
0x6766	            0x750a	                           jne 0x40067b2	      3562	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_4	CALL_4
0x6768	      0xb800000000	                              mov eax, 0	      3565	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_4
0x676d	      0xe9da000000	                           jmp 0x400688c	      3565	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_4
0x6772	        0x488b45f8	                mov rax, qword [rbp - 8]	      3567	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_5
0x6776	         0xfb64028	           movzx eax, byte [rax + 0x28] 	      3567	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_5
0x677a	            0x3c01	                               cmp al, 1	      3567	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_5
0x677c	     0xf85ad000000	                           jne 0x400686f	      3567	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_5
0x6782	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	      3569	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_5	IF_6	CALL_5
0x6786	        0x488b4df8	                mov rcx, qword [rbp - 8]	      3569	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_5	IF_6	CALL_5
0x678a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3569	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_5	IF_6	CALL_5
0x678e	          0x4889ce	                            mov rsi, rcx	      3569	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_5	IF_6	CALL_5
0x6791	          0x4889c7	                            mov rdi, rax	      3569	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_5	IF_6	CALL_5
0x6794	      0xe8b5000000	            call sym.put_fold_open_close	      3569	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_5	IF_6	CALL_5
0x6799	            0x85c0	                           test eax, eax	      3569	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_5	IF_6	CALL_5
0x679b	     0xf858e000000	                           jne 0x400686f	      3569	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_5	IF_6	CALL_5
0x67a1	      0xb800000000	                              mov eax, 0	      3570	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_5	IF_6
0x67a6	      0xe9a1000000	                           jmp 0x400688c	      3570	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_5	IF_6
0x67ab	        0x488b45f8	                mov rax, qword [rbp - 8]	      3578	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	CALL_6
0x67af	          0x488b10	                    mov rdx, qword [rax]	      3578	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	CALL_6
0x67b2	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      3578	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	CALL_6
0x67b6	          0x4801c2	                            add rdx, rax	      3578	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	CALL_6
0x67b9	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      3578	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	CALL_6
0x67bd	          0x4889d6	                            mov rsi, rdx	      3578	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	CALL_6
0x67c0	          0x4889c7	                            mov rdi, rax	      3578	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	CALL_6
0x67c3	      0xe821b5ffff	                   call sym.foldLevelWin	      3578	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	CALL_6
0x67c8	          0x8945f4	              mov dword [rbp - 0xc], eax	      3578	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	CALL_6
0x67cb	        0x488b45f8	                mov rax, qword [rbp - 8]	      3579	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x67cf	         0xfb64028	           movzx eax, byte [rax + 0x28] 	      3579	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x67d3	            0x3c01	                               cmp al, 1	      3579	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x67d5	            0x7515	                           jne 0x400682c	      3579	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x67d7	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      3579	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x67db	    0x488b90e80100	           mov rdx, qword [rax + 0x1e8] 	      3579	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x67e2	          0x8b45f4	              mov eax, dword [rbp - 0xc]	      3579	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x67e5	            0x4898	                                    cdqe	      3579	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x67e7	          0x4839c2	                            cmp rdx, rax	      3579	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x67ea	            0x7d21	                           jge 0x400684d	      3579	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x67ec	        0x488b45f8	                mov rax, qword [rbp - 8]	      3580	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x67f0	         0xfb64028	           movzx eax, byte [rax + 0x28] 	      3580	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x67f4	            0x3c01	                               cmp al, 1	      3580	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x67f6	            0x7437	                            je 0x400686f	      3580	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x67f8	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      3580	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x67fc	    0x488b90e80100	           mov rdx, qword [rax + 0x1e8] 	      3580	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x6803	          0x8b45f4	              mov eax, dword [rbp - 0xc]	      3580	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x6806	            0x4898	                                    cdqe	      3580	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x6808	          0x4839c2	                            cmp rdx, rax	      3580	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x680b	            0x7d22	                           jge 0x400686f	      3580	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x680d	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	      3581	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7	IF_8	CALL_7
0x6811	        0x488b4df8	                mov rcx, qword [rbp - 8]	      3581	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7	IF_8	CALL_7
0x6815	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3581	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7	IF_8	CALL_7
0x6819	          0x4889ce	                            mov rsi, rcx	      3581	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7	IF_8	CALL_7
0x681c	          0x4889c7	                            mov rdi, rax	      3581	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7	IF_8	CALL_7
0x681f	      0xe82a000000	            call sym.put_fold_open_close	      3581	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7	IF_8	CALL_7
0x6824	            0x85c0	                           test eax, eax	      3581	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7	IF_8	CALL_7
0x6826	            0x7507	                           jne 0x400686f	      3581	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7	IF_8	CALL_7
0x6828	      0xb800000000	                              mov eax, 0	      3582	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7	IF_8
0x682d	            0xeb1d	                           jmp 0x400688c	      3582	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7	IF_8
0x682f	      0x488345f830	               add qword [rbp - 8], 0x30	      3585	fold.c	FUNCTION_75	FOR_1
0x6834	        0x8345f001	               add dword [rbp - 0x10], 1	      3551	fold.c	FUNCTION_75	FOR_1
0x6838	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3551	fold.c	FUNCTION_75	FOR_1
0x683c	            0x8b00	                    mov eax, dword [rax]	      3551	fold.c	FUNCTION_75	FOR_1
0x683e	          0x3b45f0	             cmp eax, dword [rbp - 0x10]	      3551	fold.c	FUNCTION_75	FOR_1
0x6841	     0xf8f80feffff	                            jg 0x4006707	      3551	fold.c	FUNCTION_75	FOR_1
0x6847	      0xb801000000	                              mov eax, 1	      3588	fold.c	FUNCTION_75
0x684c	              0xc9	                                   leave	      3589	fold.c	FUNCTION_75
0x684d	              0xc3	                                     ret	      3589	fold.c	FUNCTION_75
deleteFoldRecurse	SWITCH,0:ELSE,0:DO,0:FOR,1:WHILE,0:IF,0:functions,0:CALL,2	29
0x2524	              0x55	                                push rbp	      1453	fold.c	FUNCTION_44
0x2525	          0x4889e5	                            mov rbp, rsp	      1453	fold.c	FUNCTION_44
0x2528	        0x4883ec20	                           sub rsp, 0x20	      1453	fold.c	FUNCTION_44
0x252c	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1453	fold.c	FUNCTION_44
0x2530	    0xc745fc000000	                  mov dword [rbp - 4], 0	      1456	fold.c	FUNCTION_44	FOR_1
0x2537	            0xeb2e	                           jmp 0x40025a7	      1456	fold.c	FUNCTION_44	FOR_1
0x2539	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1457	fold.c	FUNCTION_44	CALL_1
0x253d	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      1457	fold.c	FUNCTION_44	CALL_1
0x2541	          0x8b45fc	                mov eax, dword [rbp - 4]	      1457	fold.c	FUNCTION_44	CALL_1
0x2544	          0x4863d0	                         movsxd rdx, eax	      1457	fold.c	FUNCTION_44	CALL_1
0x2547	          0x4889d0	                            mov rax, rdx	      1457	fold.c	FUNCTION_44	CALL_1
0x254a	          0x4801c0	                            add rax, rax	      1457	fold.c	FUNCTION_44	CALL_1
0x254d	          0x4801d0	                            add rax, rdx	      1457	fold.c	FUNCTION_44	CALL_1
0x2550	        0x48c1e004	                              shl rax, 4	      1457	fold.c	FUNCTION_44	CALL_1
0x2554	          0x4801c8	                            add rax, rcx	      1457	fold.c	FUNCTION_44	CALL_1
0x2557	        0x4883c010	                           add rax, 0x10	      1457	fold.c	FUNCTION_44	CALL_1
0x255b	          0x4889c7	                            mov rdi, rax	      1457	fold.c	FUNCTION_44	CALL_1
0x255e	      0xe800000000	                          call 0x40025a3	      1457	fold.c	FUNCTION_44	CALL_1
0x2563	        0x8345fc01	                  add dword [rbp - 4], 1	      1456	fold.c	FUNCTION_44	FOR_1
0x2567	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1456	fold.c	FUNCTION_44	FOR_1
0x256b	            0x8b00	                    mov eax, dword [rax]	      1456	fold.c	FUNCTION_44	FOR_1
0x256d	          0x3b45fc	                cmp eax, dword [rbp - 4]	      1456	fold.c	FUNCTION_44	FOR_1
0x2570	            0x7fc7	                            jg 0x4002579	      1456	fold.c	FUNCTION_44	FOR_1
0x2572	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1458	fold.c	FUNCTION_44	CALL_2
0x2576	          0x4889c7	                            mov rdi, rax	      1458	fold.c	FUNCTION_44	CALL_2
0x2579	      0xe800000000	                          call 0x40025be	      1458	fold.c	FUNCTION_44	CALL_2
0x257e	              0x90	                                     nop	      1459	fold.c	FUNCTION_44
0x257f	              0xc9	                                   leave	      1459	fold.c	FUNCTION_44
0x2580	              0xc3	                                     ret	      1459	fold.c	FUNCTION_44
foldmethodIsExpr	SWITCH,0:ELSE,0:DO,0:FOR,0:WHILE,0:IF,0:functions,0:CALL,0	12
0x563	              0x55	                                push rbp	       326	fold.c	FUNCTION_10
0x564	          0x4889e5	                            mov rbp, rsp	       326	fold.c	FUNCTION_10
0x567	        0x48897df8	                mov qword [rbp - 8], rdi	       326	fold.c	FUNCTION_10
0x56b	        0x488b45f8	                mov rax, qword [rbp - 8]	       327	fold.c	FUNCTION_10
0x56f	    0x488b80f80100	           mov rax, qword [rax + 0x1f8] 	       327	fold.c	FUNCTION_10
0x576	        0x4883c001	                              add rax, 1	       327	fold.c	FUNCTION_10
0x57a	           0xfb600	                   movzx eax, byte [rax]	       327	fold.c	FUNCTION_10
0x57d	            0x3c78	                            cmp al, 0x78	       327	fold.c	FUNCTION_10
0x57f	           0xf94c0	                                 sete al	       327	fold.c	FUNCTION_10
0x582	           0xfb6c0	                           movzx eax, al	       327	fold.c	FUNCTION_10
0x585	              0x5d	                                 pop rbp	       328	fold.c	FUNCTION_10
0x586	              0xc3	                                     ret	       328	fold.c	FUNCTION_10
find_wl_entry	SWITCH,0:ELSE,0:DO,0:FOR,1:WHILE,0:IF,3:functions,0:CALL,0	54
0x1807	              0x55	                                push rbp	      1014	fold.c	FUNCTION_32
0x1808	          0x4889e5	                            mov rbp, rsp	      1014	fold.c	FUNCTION_32
0x180b	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1014	fold.c	FUNCTION_32
0x180f	        0x488975e0	             mov qword [rbp - 0x20], rsi	      1014	fold.c	FUNCTION_32
0x1813	    0xc745fc000000	                  mov dword [rbp - 4], 0	      1017	fold.c	FUNCTION_32	FOR_1
0x181a	      0xe98e000000	                           jmp 0x40018ed	      1017	fold.c	FUNCTION_32	FOR_1
0x181f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1018	fold.c	FUNCTION_32	FOR_1	IF_1
0x1823	    0x488b88000100	           mov rcx, qword [rax + 0x100] 	      1018	fold.c	FUNCTION_32	FOR_1	IF_1
0x182a	          0x8b45fc	                mov eax, dword [rbp - 4]	      1018	fold.c	FUNCTION_32	FOR_1	IF_1
0x182d	          0x4863d0	                         movsxd rdx, eax	      1018	fold.c	FUNCTION_32	FOR_1	IF_1
0x1830	          0x4889d0	                            mov rax, rdx	      1018	fold.c	FUNCTION_32	FOR_1	IF_1
0x1833	          0x4801c0	                            add rax, rax	      1018	fold.c	FUNCTION_32	FOR_1	IF_1
0x1836	          0x4801d0	                            add rax, rdx	      1018	fold.c	FUNCTION_32	FOR_1	IF_1
0x1839	        0x48c1e003	                              shl rax, 3	      1018	fold.c	FUNCTION_32	FOR_1	IF_1
0x183d	          0x4801c8	                            add rax, rcx	      1018	fold.c	FUNCTION_32	FOR_1	IF_1
0x1840	         0xfb6400a	            movzx eax, byte [rax + 0xa] 	      1018	fold.c	FUNCTION_32	FOR_1	IF_1
0x1844	            0x84c0	                             test al, al	      1018	fold.c	FUNCTION_32	FOR_1	IF_1
0x1846	            0x7461	                            je 0x40018e9	      1018	fold.c	FUNCTION_32	FOR_1	IF_1
0x1848	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1020	fold.c	FUNCTION_32	FOR_1	IF_1	IF_2
0x184c	    0x488b88000100	           mov rcx, qword [rax + 0x100] 	      1020	fold.c	FUNCTION_32	FOR_1	IF_1	IF_2
0x1853	          0x8b45fc	                mov eax, dword [rbp - 4]	      1020	fold.c	FUNCTION_32	FOR_1	IF_1	IF_2
0x1856	          0x4863d0	                         movsxd rdx, eax	      1020	fold.c	FUNCTION_32	FOR_1	IF_1	IF_2
0x1859	          0x4889d0	                            mov rax, rdx	      1020	fold.c	FUNCTION_32	FOR_1	IF_1	IF_2
0x185c	          0x4801c0	                            add rax, rax	      1020	fold.c	FUNCTION_32	FOR_1	IF_1	IF_2
0x185f	          0x4801d0	                            add rax, rdx	      1020	fold.c	FUNCTION_32	FOR_1	IF_1	IF_2
0x1862	        0x48c1e003	                              shl rax, 3	      1020	fold.c	FUNCTION_32	FOR_1	IF_1	IF_2
0x1866	          0x4801c8	                            add rax, rcx	      1020	fold.c	FUNCTION_32	FOR_1	IF_1	IF_2
0x1869	          0x488b00	                    mov rax, qword [rax]	      1020	fold.c	FUNCTION_32	FOR_1	IF_1	IF_2
0x186c	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	      1020	fold.c	FUNCTION_32	FOR_1	IF_1	IF_2
0x1870	            0x7e07	                           jle 0x40018b9	      1020	fold.c	FUNCTION_32	FOR_1	IF_1	IF_2
0x1872	      0xb8ffffffff	                     mov eax, 0xffffffff	      1021	fold.c	FUNCTION_32	FOR_1	IF_1	IF_2
0x1877	            0xeb4c	                           jmp 0x4001905	      1021	fold.c	FUNCTION_32	FOR_1	IF_1	IF_2
0x1879	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1022	fold.c	FUNCTION_32	FOR_1	IF_1	IF_3
0x187d	    0x488b88000100	           mov rcx, qword [rax + 0x100] 	      1022	fold.c	FUNCTION_32	FOR_1	IF_1	IF_3
0x1884	          0x8b45fc	                mov eax, dword [rbp - 4]	      1022	fold.c	FUNCTION_32	FOR_1	IF_1	IF_3
0x1887	          0x4863d0	                         movsxd rdx, eax	      1022	fold.c	FUNCTION_32	FOR_1	IF_1	IF_3
0x188a	          0x4889d0	                            mov rax, rdx	      1022	fold.c	FUNCTION_32	FOR_1	IF_1	IF_3
0x188d	          0x4801c0	                            add rax, rax	      1022	fold.c	FUNCTION_32	FOR_1	IF_1	IF_3
0x1890	          0x4801d0	                            add rax, rdx	      1022	fold.c	FUNCTION_32	FOR_1	IF_1	IF_3
0x1893	        0x48c1e003	                              shl rax, 3	      1022	fold.c	FUNCTION_32	FOR_1	IF_1	IF_3
0x1897	          0x4801c8	                            add rax, rcx	      1022	fold.c	FUNCTION_32	FOR_1	IF_1	IF_3
0x189a	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1022	fold.c	FUNCTION_32	FOR_1	IF_1	IF_3
0x189e	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	      1022	fold.c	FUNCTION_32	FOR_1	IF_1	IF_3
0x18a2	            0x7c05	                            jl 0x40018e9	      1022	fold.c	FUNCTION_32	FOR_1	IF_1	IF_3
0x18a4	          0x8b45fc	                mov eax, dword [rbp - 4]	      1023	fold.c	FUNCTION_32	FOR_1	IF_1	IF_3
0x18a7	            0xeb1c	                           jmp 0x4001905	      1023	fold.c	FUNCTION_32	FOR_1	IF_1	IF_3
0x18a9	        0x8345fc01	                  add dword [rbp - 4], 1	      1017	fold.c	FUNCTION_32	FOR_1
0x18ad	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1017	fold.c	FUNCTION_32	FOR_1
0x18b1	    0x8b80f8000000	            mov eax, dword [rax + 0xf8] 	      1017	fold.c	FUNCTION_32	FOR_1
0x18b7	          0x3b45fc	                cmp eax, dword [rbp - 4]	      1017	fold.c	FUNCTION_32	FOR_1
0x18ba	     0xf8f5fffffff	                            jg 0x400185f	      1017	fold.c	FUNCTION_32	FOR_1
0x18c0	      0xb8ffffffff	                     mov eax, 0xffffffff	      1025	fold.c	FUNCTION_32
0x18c5	              0x5d	                                 pop rbp	      1026	fold.c	FUNCTION_32
0x18c6	              0xc3	                                     ret	      1026	fold.c	FUNCTION_32
checkupdate	SWITCH,0:ELSE,0:DO,0:FOR,0:WHILE,0:IF,1:functions,0:CALL,1	18
0x1d77	              0x55	                                push rbp	      1186	fold.c	FUNCTION_38
0x1d78	          0x4889e5	                            mov rbp, rsp	      1186	fold.c	FUNCTION_38
0x1d7b	        0x4883ec10	                           sub rsp, 0x10	      1186	fold.c	FUNCTION_38
0x1d7f	        0x48897df8	                mov qword [rbp - 8], rdi	      1186	fold.c	FUNCTION_38
0x1d83	        0x488b45f8	                mov rax, qword [rbp - 8]	      1187	fold.c	FUNCTION_38	IF_1
0x1d87	     0xfb680210100	          movzx eax, byte [rax + 0x121] 	      1187	fold.c	FUNCTION_38	IF_1
0x1d8e	            0x84c0	                             test al, al	      1187	fold.c	FUNCTION_38	IF_1
0x1d90	            0x7421	                            je 0x4001df3	      1187	fold.c	FUNCTION_38	IF_1
0x1d92	        0x488b45f8	                mov rax, qword [rbp - 8]	      1189	fold.c	FUNCTION_38	IF_1	CALL_1
0x1d96	      0xbaffffff7f	                     mov edx, 0x7fffffff	      1189	fold.c	FUNCTION_38	IF_1	CALL_1
0x1d9b	      0xbe01000000	                              mov esi, 1	      1189	fold.c	FUNCTION_38	IF_1	CALL_1
0x1da0	          0x4889c7	                            mov rdi, rax	      1189	fold.c	FUNCTION_38	IF_1	CALL_1
0x1da3	      0xe800000000	                          call 0x4001de8	      1189	fold.c	FUNCTION_38	IF_1	CALL_1
0x1da8	        0x488b45f8	                mov rax, qword [rbp - 8]	      1190	fold.c	FUNCTION_38	IF_1
0x1dac	    0xc68021010000	               mov byte [rax + 0x121], 0	      1190	fold.c	FUNCTION_38	IF_1
0x1db3	              0x90	                                     nop	      1192	fold.c	FUNCTION_38
0x1db4	              0xc9	                                   leave	      1192	fold.c	FUNCTION_38
0x1db5	              0xc3	                                     ret	      1192	fold.c	FUNCTION_38
foldmethodIsDiff	SWITCH,0:ELSE,0:DO,0:FOR,0:WHILE,0:IF,0:functions,0:CALL,0	11
0x5cb	              0x55	                                push rbp	       356	fold.c	FUNCTION_13
0x5cc	          0x4889e5	                            mov rbp, rsp	       356	fold.c	FUNCTION_13
0x5cf	        0x48897df8	                mov qword [rbp - 8], rdi	       356	fold.c	FUNCTION_13
0x5d3	        0x488b45f8	                mov rax, qword [rbp - 8]	       357	fold.c	FUNCTION_13
0x5d7	    0x488b80f80100	           mov rax, qword [rax + 0x1f8] 	       357	fold.c	FUNCTION_13
0x5de	           0xfb600	                   movzx eax, byte [rax]	       357	fold.c	FUNCTION_13
0x5e1	            0x3c64	                            cmp al, 0x64	       357	fold.c	FUNCTION_13
0x5e3	           0xf94c0	                                 sete al	       357	fold.c	FUNCTION_13
0x5e6	           0xfb6c0	                           movzx eax, al	       357	fold.c	FUNCTION_13
0x5e9	              0x5d	                                 pop rbp	       358	fold.c	FUNCTION_13
0x5ea	              0xc3	                                     ret	       358	fold.c	FUNCTION_13
copyFoldingState	SWITCH,0:ELSE,0:DO,0:FOR,0:WHILE,0:IF,0:functions,0:CALL,1	23
0x0	              0x55	                                push rbp	       104	fold.c	FUNCTION_1
0x1	          0x4889e5	                            mov rbp, rsp	       104	fold.c	FUNCTION_1
0x4	        0x4883ec10	                           sub rsp, 0x10	       104	fold.c	FUNCTION_1
0x8	        0x48897df8	                mov qword [rbp - 8], rdi	       104	fold.c	FUNCTION_1
0xc	        0x488975f0	             mov qword [rbp - 0x10], rsi	       104	fold.c	FUNCTION_1
0x10	        0x488b45f8	                mov rax, qword [rbp - 8]	       105	fold.c	FUNCTION_1
0x14	     0xfb690200100	          movzx edx, byte [rax + 0x120] 	       105	fold.c	FUNCTION_1
0x1b	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       105	fold.c	FUNCTION_1
0x1f	    0x889020010000	              mov byte [rax + 0x120], dl	       105	fold.c	FUNCTION_1
0x25	        0x488b45f8	                mov rax, qword [rbp - 8]	       106	fold.c	FUNCTION_1
0x29	     0xfb690210100	          movzx edx, byte [rax + 0x121] 	       106	fold.c	FUNCTION_1
0x30	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       106	fold.c	FUNCTION_1
0x34	    0x889021010000	              mov byte [rax + 0x121], dl	       106	fold.c	FUNCTION_1
0x3a	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       107	fold.c	FUNCTION_1	CALL_1
0x3e	    0x488d90080100	                  lea rdx, [rax + 0x108]	       107	fold.c	FUNCTION_1	CALL_1
0x45	        0x488b45f8	                mov rax, qword [rbp - 8]	       107	fold.c	FUNCTION_1	CALL_1
0x49	    0x480508010000	                          add rax, 0x108	       107	fold.c	FUNCTION_1	CALL_1
0x4f	          0x4889d6	                            mov rsi, rdx	       107	fold.c	FUNCTION_1	CALL_1
0x52	          0x4889c7	                            mov rdi, rax	       107	fold.c	FUNCTION_1	CALL_1
0x55	      0xe800000000	                          call 0x400009a	       107	fold.c	FUNCTION_1	CALL_1
0x5a	              0x90	                                     nop	       108	fold.c	FUNCTION_1
0x5b	              0xc9	                                   leave	       108	fold.c	FUNCTION_1
0x5c	              0xc3	                                     ret	       108	fold.c	FUNCTION_1
put_folds_recurse	SWITCH,0:ELSE,0:DO,0:FOR,1:WHILE,0:IF,2:functions,0:CALL,3	60
0x65c0	              0x55	                                push rbp	      3515	fold.c	FUNCTION_74
0x65c1	          0x4889e5	                            mov rbp, rsp	      3515	fold.c	FUNCTION_74
0x65c4	        0x4883ec30	                           sub rsp, 0x30	      3515	fold.c	FUNCTION_74
0x65c8	        0x48897de8	             mov qword [rbp - 0x18], rdi	      3515	fold.c	FUNCTION_74
0x65cc	        0x488975e0	             mov qword [rbp - 0x20], rsi	      3515	fold.c	FUNCTION_74
0x65d0	        0x488955d8	             mov qword [rbp - 0x28], rdx	      3515	fold.c	FUNCTION_74
0x65d4	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      3519	fold.c	FUNCTION_74
0x65d8	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3519	fold.c	FUNCTION_74
0x65dc	        0x488945f8	                mov qword [rbp - 8], rax	      3519	fold.c	FUNCTION_74
0x65e0	    0xc745f4000000	                mov dword [rbp - 0xc], 0	      3520	fold.c	FUNCTION_74	FOR_1
0x65e7	      0xe995000000	                           jmp 0x40066c1	      3520	fold.c	FUNCTION_74	FOR_1
0x65ec	        0x488b45f8	                mov rax, qword [rbp - 8]	      3523	fold.c	FUNCTION_74	FOR_1	IF_1	CALL_1
0x65f0	          0x488b10	                    mov rdx, qword [rax]	      3523	fold.c	FUNCTION_74	FOR_1	IF_1	CALL_1
0x65f3	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3523	fold.c	FUNCTION_74	FOR_1	IF_1	CALL_1
0x65f7	          0x4801c2	                            add rdx, rax	      3523	fold.c	FUNCTION_74	FOR_1	IF_1	CALL_1
0x65fa	        0x488b45f8	                mov rax, qword [rbp - 8]	      3523	fold.c	FUNCTION_74	FOR_1	IF_1	CALL_1
0x65fe	        0x488d4810	                   lea rcx, [rax + 0x10]	      3523	fold.c	FUNCTION_74	FOR_1	IF_1	CALL_1
0x6602	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3523	fold.c	FUNCTION_74	FOR_1	IF_1	CALL_1
0x6606	          0x4889ce	                            mov rsi, rcx	      3523	fold.c	FUNCTION_74	FOR_1	IF_1	CALL_1
0x6609	          0x4889c7	                            mov rdi, rax	      3523	fold.c	FUNCTION_74	FOR_1	IF_1	CALL_1
0x660c	      0xe8afffffff	              call sym.put_folds_recurse	      3523	fold.c	FUNCTION_74	FOR_1	IF_1	CALL_1
0x6611	            0x85c0	                           test eax, eax	      3523	fold.c	FUNCTION_74	FOR_1	IF_1	CALL_1
0x6613	            0x7507	                           jne 0x400665c	      3523	fold.c	FUNCTION_74	FOR_1	IF_1	CALL_1
0x6615	      0xb800000000	                              mov eax, 0	      3524	fold.c	FUNCTION_74	FOR_1	IF_1
0x661a	            0xeb79	                           jmp 0x40066d5	      3524	fold.c	FUNCTION_74	FOR_1	IF_1
0x661c	        0x488b45f8	                mov rax, qword [rbp - 8]	      3526	fold.c	FUNCTION_74	FOR_1	IF_2
0x6620	          0x488b10	                    mov rdx, qword [rax]	      3526	fold.c	FUNCTION_74	FOR_1	IF_2
0x6623	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3526	fold.c	FUNCTION_74	FOR_1	IF_2
0x6627	          0x4801c2	                            add rdx, rax	      3526	fold.c	FUNCTION_74	FOR_1	IF_2
0x662a	        0x488b45f8	                mov rax, qword [rbp - 8]	      3526	fold.c	FUNCTION_74	FOR_1	IF_2
0x662e	        0x488b4008	                mov rax, qword [rax + 8]	      3526	fold.c	FUNCTION_74	FOR_1	IF_2
0x6632	          0x4801d0	                            add rax, rdx	      3526	fold.c	FUNCTION_74	FOR_1	IF_2
0x6635	        0x488d48ff	                      lea rcx, [rax - 1]	      3525	fold.c	FUNCTION_74	FOR_1	IF_2	CALL_2
0x6639	        0x488b45f8	                mov rax, qword [rbp - 8]	      3525	fold.c	FUNCTION_74	FOR_1	IF_2	CALL_2
0x663d	          0x488b10	                    mov rdx, qword [rax]	      3525	fold.c	FUNCTION_74	FOR_1	IF_2	CALL_2
0x6640	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3525	fold.c	FUNCTION_74	FOR_1	IF_2	CALL_2
0x6644	          0x4801c2	                            add rdx, rax	      3525	fold.c	FUNCTION_74	FOR_1	IF_2	CALL_2
0x6647	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3525	fold.c	FUNCTION_74	FOR_1	IF_2	CALL_2
0x664b	      0xbe00000000	                              mov esi, 0	      3525	fold.c	FUNCTION_74	FOR_1	IF_2	CALL_2
0x6650	          0x4889c7	                            mov rdi, rax	      3525	fold.c	FUNCTION_74	FOR_1	IF_2	CALL_2
0x6653	      0xb800000000	                              mov eax, 0	      3525	fold.c	FUNCTION_74	FOR_1	IF_2	CALL_2
0x6658	      0xe800000000	                          call 0x400669d	      3525	fold.c	FUNCTION_74	FOR_1	IF_2	CALL_2
0x665d	            0x85c0	                           test eax, eax	      3525	fold.c	FUNCTION_74	FOR_1	IF_2	CALL_2
0x665f	            0x7810	                            js 0x40066b1	      3525	fold.c	FUNCTION_74	FOR_1	IF_2	CALL_2
0x6661	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3527	fold.c	FUNCTION_74	FOR_1	IF_2	CALL_3
0x6665	          0x4889c7	                            mov rdi, rax	      3527	fold.c	FUNCTION_74	FOR_1	IF_2	CALL_3
0x6668	      0xe800000000	                          call 0x40066ad	      3527	fold.c	FUNCTION_74	FOR_1	IF_2	CALL_3
0x666d	            0x85c0	                           test eax, eax	      3527	fold.c	FUNCTION_74	FOR_1	IF_2	CALL_3
0x666f	            0x7507	                           jne 0x40066b8	      3527	fold.c	FUNCTION_74	FOR_1	IF_2	CALL_3
0x6671	      0xb800000000	                              mov eax, 0	      3528	fold.c	FUNCTION_74	FOR_1	IF_2
0x6676	            0xeb1d	                           jmp 0x40066d5	      3528	fold.c	FUNCTION_74	FOR_1	IF_2
0x6678	      0x488345f830	               add qword [rbp - 8], 0x30	      3529	fold.c	FUNCTION_74	FOR_1
0x667d	        0x8345f401	                add dword [rbp - 0xc], 1	      3520	fold.c	FUNCTION_74	FOR_1
0x6681	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      3520	fold.c	FUNCTION_74	FOR_1
0x6685	            0x8b00	                    mov eax, dword [rax]	      3520	fold.c	FUNCTION_74	FOR_1
0x6687	          0x3b45f4	              cmp eax, dword [rbp - 0xc]	      3520	fold.c	FUNCTION_74	FOR_1
0x668a	     0xf8f5cffffff	                            jg 0x400662c	      3520	fold.c	FUNCTION_74	FOR_1
0x6690	      0xb801000000	                              mov eax, 1	      3531	fold.c	FUNCTION_74
0x6695	              0xc9	                                   leave	      3532	fold.c	FUNCTION_74
0x6696	              0xc3	                                     ret	      3532	fold.c	FUNCTION_74
get_foldtext	SWITCH,0:ELSE,2:DO,0:FOR,1:WHILE,0:IF,14:functions,0:CALL,14	212
0x31c6	              0x55	                                push rbp	      1878	fold.c	FUNCTION_56
0x31c7	          0x4889e5	                            mov rbp, rsp	      1878	fold.c	FUNCTION_56
0x31ca	        0x4883c480	             add rsp, 0xffffffffffffff80	      1878	fold.c	FUNCTION_56
0x31ce	        0x48897da8	             mov qword [rbp - 0x58], rdi	      1878	fold.c	FUNCTION_56
0x31d2	        0x488975a0	             mov qword [rbp - 0x60], rsi	      1878	fold.c	FUNCTION_56
0x31d6	        0x48895598	             mov qword [rbp - 0x68], rdx	      1878	fold.c	FUNCTION_56
0x31da	        0x48894d90	             mov qword [rbp - 0x70], rcx	      1878	fold.c	FUNCTION_56
0x31de	        0x4c894588	              mov qword [rbp - 0x78], r8	      1878	fold.c	FUNCTION_56
0x31e2	    0x64488b042528	                mov rax, qword fs:[0x28]	      1878	fold.c	FUNCTION_56
0x31eb	        0x488945f8	                mov qword [rbp - 8], rax	      1878	fold.c	FUNCTION_56
0x31ef	            0x31c0	                            xor eax, eax	      1878	fold.c	FUNCTION_56
0x31f1	    0x48c745c00000	               mov qword [rbp - 0x40], 0	      1879	fold.c	FUNCTION_56
0x31f9	    0x8b0500000000	            mov eax, dword [0x0400323f] 	      1883	fold.c	FUNCTION_56
0x31ff	          0x8945b8	             mov dword [rbp - 0x48], eax	      1883	fold.c	FUNCTION_56
0x3202	    0x488b05000000	            mov rax, qword [0x04003249] 	      1887	fold.c	FUNCTION_56	IF_1
0x3209	        0x483b45a8	             cmp rax, qword [rbp - 0x58]	      1887	fold.c	FUNCTION_56	IF_1
0x320d	            0x7525	                           jne 0x4003274	      1887	fold.c	FUNCTION_56	IF_1
0x320f	    0x488b05000000	            mov rax, qword [0x04003256] 	      1887	fold.c	FUNCTION_56	IF_1
0x3216	          0x4885c0	                           test rax, rax	      1887	fold.c	FUNCTION_56	IF_1
0x3219	            0x7419	                            je 0x4003274	      1887	fold.c	FUNCTION_56	IF_1
0x321b	    0x488b05000000	            mov rax, qword [0x04003262] 	      1888	fold.c	FUNCTION_56	IF_1
0x3222	        0x483b45a0	             cmp rax, qword [rbp - 0x60]	      1888	fold.c	FUNCTION_56	IF_1
0x3226	            0x7f0c	                            jg 0x4003274	      1888	fold.c	FUNCTION_56	IF_1
0x3228	    0x488b05000000	            mov rax, qword [0x0400326f] 	      1888	fold.c	FUNCTION_56	IF_1
0x322f	          0x4885c0	                           test rax, rax	      1888	fold.c	FUNCTION_56	IF_1
0x3232	            0x750a	                           jne 0x400327e	      1888	fold.c	FUNCTION_56	IF_1
0x3234	    0xc70500000000	               mov dword [0x0400327e], 0	      1890	fold.c	FUNCTION_56	IF_1
0x323e	    0x8b0500000000	            mov eax, dword [0x04003284] 	      1892	fold.c	FUNCTION_56	IF_2
0x3244	            0x85c0	                           test eax, eax	      1892	fold.c	FUNCTION_56	IF_2
0x3246	            0x750a	                           jne 0x4003292	      1892	fold.c	FUNCTION_56	IF_2
0x3248	    0xc70500000000	               mov dword [0x04003292], 0	      1894	fold.c	FUNCTION_56	IF_2
0x3252	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1896	fold.c	FUNCTION_56	IF_3
0x3256	    0x488b80200200	           mov rax, qword [rax + 0x220] 	      1896	fold.c	FUNCTION_56	IF_3
0x325d	           0xfb600	                   movzx eax, byte [rax]	      1896	fold.c	FUNCTION_56	IF_3
0x3260	            0x84c0	                             test al, al	      1896	fold.c	FUNCTION_56	IF_3
0x3262	     0xf844a020000	                            je 0x40034f2	      1896	fold.c	FUNCTION_56	IF_3
0x3268	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1904	fold.c	FUNCTION_56	IF_3	CALL_1
0x326c	          0x4889c6	                            mov rsi, rax	      1904	fold.c	FUNCTION_56	IF_3	CALL_1
0x326f	      0xbf16000000	                           mov edi, 0x16	      1904	fold.c	FUNCTION_56	IF_3	CALL_1
0x3274	      0xe800000000	                          call 0x40032b9	      1904	fold.c	FUNCTION_56	IF_3	CALL_1
0x3279	        0x488b4598	             mov rax, qword [rbp - 0x68]	      1905	fold.c	FUNCTION_56	IF_3	CALL_2
0x327d	          0x4889c6	                            mov rsi, rax	      1905	fold.c	FUNCTION_56	IF_3	CALL_2
0x3280	      0xbf17000000	                           mov edi, 0x17	      1905	fold.c	FUNCTION_56	IF_3	CALL_2
0x3285	      0xe800000000	                          call 0x40032ca	      1905	fold.c	FUNCTION_56	IF_3	CALL_2
0x328a	        0x488b4590	             mov rax, qword [rbp - 0x70]	      1909	fold.c	FUNCTION_56	IF_3
0x328e	            0x8b00	                    mov eax, dword [rax]	      1909	fold.c	FUNCTION_56	IF_3
0x3290	          0x8945b4	             mov dword [rbp - 0x4c], eax	      1909	fold.c	FUNCTION_56	IF_3
0x3293	        0x837db415	           cmp dword [rbp - 0x4c], 0x15 	      1910	fold.c	FUNCTION_56	IF_3	IF_4
0x3297	            0x7e07	                           jle 0x40032e0	      1910	fold.c	FUNCTION_56	IF_3	IF_4
0x3299	    0xc745b4150000	           mov dword [rbp - 0x4c], 0x15 	      1911	fold.c	FUNCTION_56	IF_3	IF_4
0x32a0	          0x8b45b4	             mov eax, dword [rbp - 0x4c]	      1912	fold.c	FUNCTION_56	IF_3	CALL_3
0x32a3	          0x4863d0	                         movsxd rdx, eax	      1912	fold.c	FUNCTION_56	IF_3	CALL_3
0x32a6	        0x488d45e0	                   lea rax, [rbp - 0x20]	      1912	fold.c	FUNCTION_56	IF_3	CALL_3
0x32aa	      0xbe2d000000	                           mov esi, 0x2d	      1912	fold.c	FUNCTION_56	IF_3	CALL_3
0x32af	          0x4889c7	                            mov rdi, rax	      1912	fold.c	FUNCTION_56	IF_3	CALL_3
0x32b2	      0xe800000000	                          call 0x40032f7	      1912	fold.c	FUNCTION_56	IF_3	CALL_3
0x32b7	          0x8b45b4	             mov eax, dword [rbp - 0x4c]	      1913	fold.c	FUNCTION_56	IF_3
0x32ba	            0x4898	                                    cdqe	      1913	fold.c	FUNCTION_56	IF_3
0x32bc	      0xc64405e000	          mov byte [rbp + rax - 0x20], 0	      1913	fold.c	FUNCTION_56	IF_3
0x32c1	        0x488d45e0	                   lea rax, [rbp - 0x20]	      1914	fold.c	FUNCTION_56	IF_3	CALL_4
0x32c5	      0xbaffffffff	                     mov edx, 0xffffffff	      1914	fold.c	FUNCTION_56	IF_3	CALL_4
0x32ca	          0x4889c6	                            mov rsi, rax	      1914	fold.c	FUNCTION_56	IF_3	CALL_4
0x32cd	      0xbf18000000	                           mov edi, 0x18	      1914	fold.c	FUNCTION_56	IF_3	CALL_4
0x32d2	      0xe800000000	                          call 0x4003317	      1914	fold.c	FUNCTION_56	IF_3	CALL_4
0x32d7	          0x8b45b4	             mov eax, dword [rbp - 0x4c]	      1915	fold.c	FUNCTION_56	IF_3	CALL_5
0x32da	            0x4898	                                    cdqe	      1915	fold.c	FUNCTION_56	IF_3	CALL_5
0x32dc	          0x4889c6	                            mov rsi, rax	      1915	fold.c	FUNCTION_56	IF_3	CALL_5
0x32df	      0xbf19000000	                           mov edi, 0x19	      1915	fold.c	FUNCTION_56	IF_3	CALL_5
0x32e4	      0xe800000000	                          call 0x4003329	      1915	fold.c	FUNCTION_56	IF_3	CALL_5
0x32e9	    0x8b0500000000	            mov eax, dword [0x0400332f] 	      1918	fold.c	FUNCTION_56	IF_3	IF_5
0x32ef	            0x85c0	                           test eax, eax	      1918	fold.c	FUNCTION_56	IF_3	IF_5
0x32f1	     0xf85a8000000	                           jne 0x40033df	      1918	fold.c	FUNCTION_56	IF_3	IF_5
0x32f7	    0x488b05000000	            mov rax, qword [0x0400333e] 	      1920	fold.c	FUNCTION_56	IF_3	IF_5
0x32fe	        0x488945d0	             mov qword [rbp - 0x30], rax	      1920	fold.c	FUNCTION_56	IF_3	IF_5
0x3302	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1921	fold.c	FUNCTION_56	IF_3	IF_5
0x3306	    0x488905000000	            mov qword [0x0400334d], rax 	      1921	fold.c	FUNCTION_56	IF_3	IF_5
0x330d	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1922	fold.c	FUNCTION_56	IF_3	IF_5
0x3311	        0x488b4008	                mov rax, qword [rax + 8]	      1922	fold.c	FUNCTION_56	IF_3	IF_5
0x3315	    0x488905000000	            mov qword [0x0400335c], rax 	      1922	fold.c	FUNCTION_56	IF_3	IF_5
0x331c	    0x8b0500000000	            mov eax, dword [0x04003362] 	      1924	fold.c	FUNCTION_56	IF_3	IF_5
0x3322	          0x83c001	                              add eax, 1	      1924	fold.c	FUNCTION_56	IF_3	IF_5
0x3325	    0x890500000000	            mov dword [0x0400336b], eax 	      1924	fold.c	FUNCTION_56	IF_3	IF_5
0x332b	      0xbe04000000	                              mov esi, 4	      1925	fold.c	FUNCTION_56	IF_3	IF_5	CALL_6
0x3330	      0xbf00000000	                              mov edi, 0	      1925	fold.c	FUNCTION_56	IF_3	IF_5	CALL_6
0x3335	      0xe800000000	                          call 0x400337a	      1925	fold.c	FUNCTION_56	IF_3	IF_5	CALL_6
0x333a	            0x89c2	                            mov edx, eax	      1925	fold.c	FUNCTION_56	IF_3	IF_5	CALL_6
0x333c	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1925	fold.c	FUNCTION_56	IF_3	IF_5	CALL_6
0x3340	    0x488b80200200	           mov rax, qword [rax + 0x220] 	      1925	fold.c	FUNCTION_56	IF_3	IF_5	CALL_6
0x3347	      0xbe00000000	                              mov esi, 0	      1925	fold.c	FUNCTION_56	IF_3	IF_5	CALL_6
0x334c	          0x4889c7	                            mov rdi, rax	      1925	fold.c	FUNCTION_56	IF_3	IF_5	CALL_6
0x334f	      0xe800000000	                          call 0x4003394	      1925	fold.c	FUNCTION_56	IF_3	IF_5	CALL_6
0x3354	        0x488945c0	             mov qword [rbp - 0x40], rax	      1925	fold.c	FUNCTION_56	IF_3	IF_5	CALL_6
0x3358	    0x8b0500000000	            mov eax, dword [0x0400339e] 	      1927	fold.c	FUNCTION_56	IF_3	IF_5
0x335e	          0x83e801	                              sub eax, 1	      1927	fold.c	FUNCTION_56	IF_3	IF_5
0x3361	    0x890500000000	            mov dword [0x040033a7], eax 	      1927	fold.c	FUNCTION_56	IF_3	IF_5
0x3367	      0x48837dc000	               cmp qword [rbp - 0x40], 0	      1929	fold.c	FUNCTION_56	IF_3	IF_5	IF_6
0x336c	            0x740a	                            je 0x40033b8	      1929	fold.c	FUNCTION_56	IF_3	IF_5	IF_6
0x336e	    0x8b0500000000	            mov eax, dword [0x040033b4] 	      1929	fold.c	FUNCTION_56	IF_3	IF_5	IF_6
0x3374	            0x85c0	                           test eax, eax	      1929	fold.c	FUNCTION_56	IF_3	IF_5	IF_6
0x3376	            0x740a	                            je 0x40033c2	      1929	fold.c	FUNCTION_56	IF_3	IF_5	IF_6
0x3378	    0xc70500000000	               mov dword [0x040033c2], 1	      1930	fold.c	FUNCTION_56	IF_3	IF_5	IF_6
0x3382	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1932	fold.c	FUNCTION_56	IF_3	IF_5
0x3386	    0x488905000000	            mov qword [0x040033cd], rax 	      1932	fold.c	FUNCTION_56	IF_3	IF_5
0x338d	    0x488b05000000	            mov rax, qword [0x040033d4] 	      1933	fold.c	FUNCTION_56	IF_3	IF_5
0x3394	        0x488b4008	                mov rax, qword [rax + 8]	      1933	fold.c	FUNCTION_56	IF_3	IF_5
0x3398	    0x488905000000	            mov qword [0x040033df], rax 	      1933	fold.c	FUNCTION_56	IF_3	IF_5
0x339f	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1935	fold.c	FUNCTION_56	IF_3
0x33a3	    0x488905000000	            mov qword [0x040033ea], rax 	      1935	fold.c	FUNCTION_56	IF_3
0x33aa	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1936	fold.c	FUNCTION_56	IF_3
0x33ae	    0x488905000000	            mov qword [0x040033f5], rax 	      1936	fold.c	FUNCTION_56	IF_3
0x33b5	      0xbaffffffff	                     mov edx, 0xffffffff	      1937	fold.c	FUNCTION_56	IF_3	CALL_8
0x33ba	      0xbe00000000	                              mov esi, 0	      1937	fold.c	FUNCTION_56	IF_3	CALL_8
0x33bf	      0xbf18000000	                           mov edi, 0x18	      1937	fold.c	FUNCTION_56	IF_3	CALL_8
0x33c4	      0xe800000000	                          call 0x4003409	      1937	fold.c	FUNCTION_56	IF_3	CALL_8
0x33c9	    0x8b0500000000	            mov eax, dword [0x0400340f] 	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x33cf	            0x85c0	                           test eax, eax	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x33d1	            0x750f	                           jne 0x4003422	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x33d3	        0x837db800	               cmp dword [rbp - 0x48], 0	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x33d7	            0x7409	                            je 0x4003422	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x33d9	          0x8b45b8	             mov eax, dword [rbp - 0x48]	      1940	fold.c	FUNCTION_56	IF_3	IF_7
0x33dc	    0x890500000000	            mov dword [0x04003422], eax 	      1940	fold.c	FUNCTION_56	IF_3	IF_7
0x33e2	      0x48837dc000	               cmp qword [rbp - 0x40], 0	      1942	fold.c	FUNCTION_56	IF_3	IF_8
0x33e7	     0xf84c5000000	                            je 0x40034f2	      1942	fold.c	FUNCTION_56	IF_3	IF_8
0x33ed	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      1946	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1
0x33f1	        0x488945c8	             mov qword [rbp - 0x38], rax	      1946	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1
0x33f5	            0xeb77	                           jmp 0x40034ae	      1946	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1
0x33f7	    0x8b0500000000	            mov eax, dword [0x0400343d] 	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x33fd	            0x85c0	                           test eax, eax	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x33ff	            0x7443	                            je 0x4003484	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x3401	    0x488b05000000	            mov rax, qword [0x04003448] 	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x3408	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x340c	          0x4889d7	                            mov rdi, rdx	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x340f	            0xffd0	                                call rax	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x3411	          0x8945bc	             mov dword [rbp - 0x44], eax	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x3414	        0x837dbc01	               cmp dword [rbp - 0x44], 1	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x3418	            0x7e2a	                           jle 0x4003484	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x341a	    0x488b05000000	            mov rax, qword [0x04003461] 	      1953	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9	IF_10	CALL_9
0x3421	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      1953	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9	IF_10	CALL_9
0x3425	          0x4889d7	                            mov rdi, rdx	      1953	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9	IF_10	CALL_9
0x3428	            0xffd0	                                call rax	      1953	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9	IF_10	CALL_9
0x342a	            0x89c7	                            mov edi, eax	      1953	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9	IF_10	CALL_9
0x342c	      0xe800000000	                          call 0x4003471	      1953	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9	IF_10	CALL_9
0x3431	            0x85c0	                           test eax, eax	      1953	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9	IF_10	CALL_9
0x3433	            0x744a	                            je 0x40034bf	      1953	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9	IF_10	CALL_9
0x3435	          0x8b45bc	             mov eax, dword [rbp - 0x44]	      1955	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x3438	            0x4898	                                    cdqe	      1955	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x343a	        0x4883e801	                              sub rax, 1	      1955	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x343e	        0x480145c8	            add qword [rbp - 0x38], rax 	      1955	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x3442	            0xeb25	                           jmp 0x40034a9	      1955	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x3444	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1959	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_1	IF_11
0x3448	           0xfb600	                   movzx eax, byte [rax]	      1959	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_1	IF_11
0x344b	            0x3c09	                               cmp al, 9	      1959	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_1	IF_11
0x344d	            0x7509	                           jne 0x4003498	      1959	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_1	IF_11
0x344f	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1960	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_1	IF_11
0x3453	          0xc60020	                    mov byte [rax], 0x20	      1960	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_1	IF_11
0x3456	            0xeb11	                           jmp 0x40034a9	      1960	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_1	IF_11
0x3458	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1961	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_2	IF_12	CALL_10
0x345c	          0x4889c7	                            mov rdi, rax	      1961	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_2	IF_12	CALL_10
0x345f	      0xe800000000	                          call 0x40034a4	      1961	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_2	IF_12	CALL_10
0x3464	          0x83f801	                              cmp eax, 1	      1961	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_2	IF_12	CALL_10
0x3467	            0x7f19	                            jg 0x40034c2	      1961	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_2	IF_12	CALL_10
0x3469	      0x488345c801	               add qword [rbp - 0x38], 1	      1946	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1
0x346e	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1946	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1
0x3472	           0xfb600	                   movzx eax, byte [rax]	      1946	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1
0x3475	            0x84c0	                             test al, al	      1946	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1
0x3477	     0xf857affffff	                           jne 0x4003437	      1946	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1
0x347d	            0xeb04	                           jmp 0x40034c3	      1946	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1
0x347f	              0x90	                                     nop	      1954	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9	IF_10
0x3480	            0xeb01	                           jmp 0x40034c3	      1954	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9	IF_10
0x3482	              0x90	                                     nop	      1962	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_2	IF_12
0x3483	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1964	fold.c	FUNCTION_56	IF_3	IF_8	IF_13
0x3487	           0xfb600	                   movzx eax, byte [rax]	      1964	fold.c	FUNCTION_56	IF_3	IF_8	IF_13
0x348a	            0x84c0	                             test al, al	      1964	fold.c	FUNCTION_56	IF_3	IF_8	IF_13
0x348c	            0x7424	                            je 0x40034f2	      1964	fold.c	FUNCTION_56	IF_3	IF_8	IF_13
0x348e	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      1966	fold.c	FUNCTION_56	IF_3	IF_8	IF_13	CALL_11
0x3492	          0x4889c7	                            mov rdi, rax	      1966	fold.c	FUNCTION_56	IF_3	IF_8	IF_13	CALL_11
0x3495	      0xe800000000	                          call 0x40034da	      1966	fold.c	FUNCTION_56	IF_3	IF_8	IF_13	CALL_11
0x349a	        0x488945c8	             mov qword [rbp - 0x38], rax	      1966	fold.c	FUNCTION_56	IF_3	IF_8	IF_13	CALL_11
0x349e	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      1967	fold.c	FUNCTION_56	IF_3	IF_8	IF_13	CALL_12
0x34a2	          0x4889c7	                            mov rdi, rax	      1967	fold.c	FUNCTION_56	IF_3	IF_8	IF_13	CALL_12
0x34a5	      0xe800000000	                          call 0x40034ea	      1967	fold.c	FUNCTION_56	IF_3	IF_8	IF_13	CALL_12
0x34aa	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1968	fold.c	FUNCTION_56	IF_3	IF_8	IF_13
0x34ae	        0x488945c0	             mov qword [rbp - 0x40], rax	      1968	fold.c	FUNCTION_56	IF_3	IF_8	IF_13
0x34b2	      0x48837dc000	               cmp qword [rbp - 0x40], 0	      1972	fold.c	FUNCTION_56	IF_14
0x34b7	            0x7551	                           jne 0x400354a	      1972	fold.c	FUNCTION_56	IF_14
0x34b9	        0x488b4598	             mov rax, qword [rbp - 0x68]	      1975	fold.c	FUNCTION_56	IF_14
0x34bd	        0x482b45a0	             sub rax, qword [rbp - 0x60]	      1975	fold.c	FUNCTION_56	IF_14
0x34c1	        0x4883c001	                              add rax, 1	      1975	fold.c	FUNCTION_56	IF_14
0x34c5	        0x488945d8	             mov qword [rbp - 0x28], rax	      1975	fold.c	FUNCTION_56	IF_14
0x34c9	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x34cd	          0x4889c2	                            mov rdx, rax	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x34d0	      0xbe00000000	                              mov esi, 0	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x34d5	      0xbf00000000	                              mov edi, 0	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x34da	      0xe800000000	                          call 0x400351f	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x34df	          0x4889c6	                            mov rsi, rax	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x34e2	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x34e6	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x34ea	          0x4889d1	                            mov rcx, rdx	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x34ed	          0x4889f2	                            mov rdx, rsi	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x34f0	      0xbe33000000	                           mov esi, 0x33	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x34f5	          0x4889c7	                            mov rdi, rax	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x34f8	      0xb800000000	                              mov eax, 0	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x34fd	      0xe800000000	                          call 0x4003542	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x3502	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1981	fold.c	FUNCTION_56	IF_14
0x3506	        0x488945c0	             mov qword [rbp - 0x40], rax	      1981	fold.c	FUNCTION_56	IF_14
0x350a	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      1983	fold.c	FUNCTION_56
0x350e	        0x488b4df8	                mov rcx, qword [rbp - 8]	      1984	fold.c	FUNCTION_56
0x3512	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      1984	fold.c	FUNCTION_56
0x351b	            0x7405	                            je 0x4003562	      1984	fold.c	FUNCTION_56
0x351d	      0xe800000000	                          call 0x4003562	      1984	fold.c	FUNCTION_56
0x3522	              0xc9	                                   leave	      1984	fold.c	FUNCTION_56
0x3523	              0xc3	                                     ret	      1984	fold.c	FUNCTION_56
foldtext_cleanup	SWITCH,0:ELSE,4:DO,0:FOR,2:WHILE,3:IF,10:functions,0:CALL,17	272
0x3524	              0x55	                                push rbp	      1992	fold.c	FUNCTION_57
0x3525	          0x4889e5	                            mov rbp, rsp	      1992	fold.c	FUNCTION_57
0x3528	        0x4883ec50	                           sub rsp, 0x50	      1992	fold.c	FUNCTION_57
0x352c	        0x48897db8	             mov qword [rbp - 0x48], rdi	      1992	fold.c	FUNCTION_57
0x3530	    0xc745cc000000	               mov dword [rbp - 0x34], 0	      1994	fold.c	FUNCTION_57
0x3537	    0xc745d0000000	               mov dword [rbp - 0x30], 0	      1996	fold.c	FUNCTION_57
0x353e	    0xc745d8000000	               mov dword [rbp - 0x28], 0	      2000	fold.c	FUNCTION_57
0x3545	    0xc745dc000000	               mov dword [rbp - 0x24], 0	      2001	fold.c	FUNCTION_57
0x354c	    0x488b05000000	            mov rax, qword [0x04003593] 	      2004	fold.c	FUNCTION_57	CALL_1
0x3553	    0x488b80381400	          mov rax, qword [rax + 0x1438] 	      2004	fold.c	FUNCTION_57	CALL_1
0x355a	          0x4889c7	                            mov rdi, rax	      2004	fold.c	FUNCTION_57	CALL_1
0x355d	      0xe800000000	                          call 0x40035a2	      2004	fold.c	FUNCTION_57	CALL_1
0x3562	        0x488945f8	                mov qword [rbp - 8], rax	      2004	fold.c	FUNCTION_57	CALL_1
0x3566	        0x488b45f8	                mov rax, qword [rbp - 8]	      2005	fold.c	FUNCTION_57	CALL_2
0x356a	          0x4889c7	                            mov rdi, rax	      2005	fold.c	FUNCTION_57	CALL_2
0x356d	      0xe800000000	                          call 0x40035b2	      2005	fold.c	FUNCTION_57	CALL_2
0x3572	          0x8945cc	             mov dword [rbp - 0x34], eax	      2005	fold.c	FUNCTION_57	CALL_2
0x3575	            0xeb04	                           jmp 0x40035bb	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x3577	        0x836dcc01	               sub dword [rbp - 0x34], 1	      2007	fold.c	FUNCTION_57	WHILE_1
0x357b	        0x837dcc00	               cmp dword [rbp - 0x34], 0	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x357f	            0x7e2e	                           jle 0x40035ef	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x3581	          0x8b45cc	             mov eax, dword [rbp - 0x34]	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x3584	            0x4898	                                    cdqe	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x3586	        0x488d50ff	                      lea rdx, [rax - 1]	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x358a	        0x488b45f8	                mov rax, qword [rbp - 8]	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x358e	          0x4801d0	                            add rax, rdx	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x3591	           0xfb600	                   movzx eax, byte [rax]	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x3594	            0x3c20	                            cmp al, 0x20	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x3596	            0x74df	                            je 0x40035b7	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x3598	          0x8b45cc	             mov eax, dword [rbp - 0x34]	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x359b	            0x4898	                                    cdqe	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x359d	        0x488d50ff	                      lea rdx, [rax - 1]	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x35a1	        0x488b45f8	                mov rax, qword [rbp - 8]	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x35a5	          0x4801d0	                            add rax, rdx	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x35a8	           0xfb600	                   movzx eax, byte [rax]	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x35ab	            0x3c09	                               cmp al, 9	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x35ad	            0x74c8	                            je 0x40035b7	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x35af	        0x488b45f8	                mov rax, qword [rbp - 8]	      2010	fold.c	FUNCTION_57	CALL_4
0x35b3	      0xbe00000000	                              mov esi, 0	      2010	fold.c	FUNCTION_57	CALL_4
0x35b8	          0x4889c7	                            mov rdi, rax	      2010	fold.c	FUNCTION_57	CALL_4
0x35bb	      0xe800000000	                          call 0x4003600	      2010	fold.c	FUNCTION_57	CALL_4
0x35c0	        0x488945e0	             mov qword [rbp - 0x20], rax	      2010	fold.c	FUNCTION_57	CALL_4
0x35c4	      0x48837de000	               cmp qword [rbp - 0x20], 0	      2011	fold.c	FUNCTION_57	IF_1
0x35c9	     0xf8490000000	                            je 0x400369f	      2011	fold.c	FUNCTION_57	IF_1
0x35cf	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      2013	fold.c	FUNCTION_57	IF_1
0x35d3	        0x488b45f8	                mov rax, qword [rbp - 8]	      2013	fold.c	FUNCTION_57	IF_1
0x35d7	          0x4829c2	                            sub rdx, rax	      2013	fold.c	FUNCTION_57	IF_1
0x35da	          0x4889d0	                            mov rax, rdx	      2013	fold.c	FUNCTION_57	IF_1
0x35dd	            0x89c2	                            mov edx, eax	      2013	fold.c	FUNCTION_57	IF_1
0x35df	          0x8b45cc	             mov eax, dword [rbp - 0x34]	      2013	fold.c	FUNCTION_57	IF_1
0x35e2	            0x29d0	                            sub eax, edx	      2013	fold.c	FUNCTION_57	IF_1
0x35e4	          0x8945d0	             mov dword [rbp - 0x30], eax	      2013	fold.c	FUNCTION_57	IF_1
0x35e7	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      2014	fold.c	FUNCTION_57	IF_1
0x35eb	        0x488b45f8	                mov rax, qword [rbp - 8]	      2014	fold.c	FUNCTION_57	IF_1
0x35ef	          0x4829c2	                            sub rdx, rax	      2014	fold.c	FUNCTION_57	IF_1
0x35f2	          0x4889d0	                            mov rax, rdx	      2014	fold.c	FUNCTION_57	IF_1
0x35f5	          0x8945cc	             mov dword [rbp - 0x34], eax	      2014	fold.c	FUNCTION_57	IF_1
0x35f8	            0xeb04	                           jmp 0x400363e	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x35fa	        0x836dcc01	               sub dword [rbp - 0x34], 1	      2018	fold.c	FUNCTION_57	IF_1	WHILE_2
0x35fe	        0x837dcc00	               cmp dword [rbp - 0x34], 0	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x3602	            0x7e2e	                           jle 0x4003672	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x3604	          0x8b45cc	             mov eax, dword [rbp - 0x34]	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x3607	            0x4898	                                    cdqe	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x3609	        0x488d50ff	                      lea rdx, [rax - 1]	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x360d	        0x488b45f8	                mov rax, qword [rbp - 8]	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x3611	          0x4801d0	                            add rax, rdx	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x3614	           0xfb600	                   movzx eax, byte [rax]	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x3617	            0x3c20	                            cmp al, 0x20	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x3619	            0x74df	                            je 0x400363a	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x361b	          0x8b45cc	             mov eax, dword [rbp - 0x34]	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x361e	            0x4898	                                    cdqe	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x3620	        0x488d50ff	                      lea rdx, [rax - 1]	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x3624	        0x488b45f8	                mov rax, qword [rbp - 8]	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x3628	          0x4801d0	                            add rax, rdx	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x362b	           0xfb600	                   movzx eax, byte [rax]	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x362e	            0x3c09	                               cmp al, 9	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x3630	            0x74c8	                            je 0x400363a	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x3632	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2021	fold.c	FUNCTION_57	IF_1	CALL_6
0x3636	        0x4883c002	                              add rax, 2	      2021	fold.c	FUNCTION_57	IF_1	CALL_6
0x363a	          0x4889c7	                            mov rdi, rax	      2021	fold.c	FUNCTION_57	IF_1	CALL_6
0x363d	      0xe800000000	                          call 0x4003682	      2021	fold.c	FUNCTION_57	IF_1	CALL_6
0x3642	        0x488945e8	             mov qword [rbp - 0x18], rax	      2021	fold.c	FUNCTION_57	IF_1	CALL_6
0x3646	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      2022	fold.c	FUNCTION_57	IF_1
0x364a	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2022	fold.c	FUNCTION_57	IF_1
0x364e	          0x4829c2	                            sub rdx, rax	      2022	fold.c	FUNCTION_57	IF_1
0x3651	          0x4889d0	                            mov rax, rdx	      2022	fold.c	FUNCTION_57	IF_1
0x3654	          0x2945d0	             sub dword [rbp - 0x30], eax	      2022	fold.c	FUNCTION_57	IF_1
0x3657	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2023	fold.c	FUNCTION_57	IF_1
0x365b	        0x488945e0	             mov qword [rbp - 0x20], rax	      2023	fold.c	FUNCTION_57	IF_1
0x365f	    0x488b05000000	            mov rax, qword [0x040036a6] 	      2025	fold.c	FUNCTION_57	CALL_7
0x3666	          0x4889c7	                            mov rdi, rax	      2025	fold.c	FUNCTION_57	CALL_7
0x3669	      0xe8162b0000	                    call sym.parseMarker	      2025	fold.c	FUNCTION_57	CALL_7
0x366e	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2027	fold.c	FUNCTION_57	FOR_1
0x3672	        0x488945e8	             mov qword [rbp - 0x18], rax	      2027	fold.c	FUNCTION_57	FOR_1
0x3676	      0xe945020000	                           jmp 0x4003900	      2027	fold.c	FUNCTION_57	FOR_1
0x367b	    0xc745d4000000	               mov dword [rbp - 0x2c], 0	      2029	fold.c	FUNCTION_57	FOR_1
0x3682	    0x8b0500000000	            mov eax, dword [0x040036c8] 	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x3688	          0x4863d0	                         movsxd rdx, eax	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x368b	    0x488b05000000	            mov rax, qword [0x040036d2] 	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x3692	    0x488b88280200	           mov rcx, qword [rax + 0x228] 	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x3699	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x369d	          0x4889ce	                            mov rsi, rcx	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x36a0	          0x4889c7	                            mov rdi, rax	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x36a3	      0xe800000000	                          call 0x40036e8	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x36a8	            0x85c0	                           test eax, eax	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x36aa	            0x750b	                           jne 0x40036f7	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x36ac	    0x8b0500000000	            mov eax, dword [0x040036f2] 	      2031	fold.c	FUNCTION_57	FOR_1	IF_2
0x36b2	          0x8945d4	             mov dword [rbp - 0x2c], eax	      2031	fold.c	FUNCTION_57	FOR_1	IF_2
0x36b5	            0xeb2c	                           jmp 0x4003723	      2031	fold.c	FUNCTION_57	FOR_1	IF_2
0x36b7	    0x8b0500000000	            mov eax, dword [0x040036fd] 	      2032	fold.c	FUNCTION_57	FOR_1	ELSE_1	IF_3	CALL_9
0x36bd	          0x4863d0	                         movsxd rdx, eax	      2032	fold.c	FUNCTION_57	FOR_1	ELSE_1	IF_3	CALL_9
0x36c0	    0x488b0d000000	            mov rcx, qword [0x04003707] 	      2032	fold.c	FUNCTION_57	FOR_1	ELSE_1	IF_3	CALL_9
0x36c7	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2032	fold.c	FUNCTION_57	FOR_1	ELSE_1	IF_3	CALL_9
0x36cb	          0x4889ce	                            mov rsi, rcx	      2032	fold.c	FUNCTION_57	FOR_1	ELSE_1	IF_3	CALL_9
0x36ce	          0x4889c7	                            mov rdi, rax	      2032	fold.c	FUNCTION_57	FOR_1	ELSE_1	IF_3	CALL_9
0x36d1	      0xe800000000	                          call 0x4003716	      2032	fold.c	FUNCTION_57	FOR_1	ELSE_1	IF_3	CALL_9
0x36d6	            0x85c0	                           test eax, eax	      2032	fold.c	FUNCTION_57	FOR_1	ELSE_1	IF_3	CALL_9
0x36d8	            0x7509	                           jne 0x4003723	      2032	fold.c	FUNCTION_57	FOR_1	ELSE_1	IF_3	CALL_9
0x36da	    0x8b0500000000	            mov eax, dword [0x04003720] 	      2033	fold.c	FUNCTION_57	FOR_1	ELSE_1	IF_3
0x36e0	          0x8945d4	             mov dword [rbp - 0x2c], eax	      2033	fold.c	FUNCTION_57	FOR_1	ELSE_1	IF_3
0x36e3	        0x837dd400	               cmp dword [rbp - 0x2c], 0	      2034	fold.c	FUNCTION_57	FOR_1	IF_4
0x36e7	     0xf8ecc000000	                           jle 0x40037f9	      2034	fold.c	FUNCTION_57	FOR_1	IF_4
0x36ed	          0x8b45d4	             mov eax, dword [rbp - 0x2c]	      2036	fold.c	FUNCTION_57	FOR_1	IF_4	IF_5	CALL_10
0x36f0	          0x4863d0	                         movsxd rdx, eax	      2036	fold.c	FUNCTION_57	FOR_1	IF_4	IF_5	CALL_10
0x36f3	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2036	fold.c	FUNCTION_57	FOR_1	IF_4	IF_5	CALL_10
0x36f7	          0x4801d0	                            add rax, rdx	      2036	fold.c	FUNCTION_57	FOR_1	IF_4	IF_5	CALL_10
0x36fa	           0xfb600	                   movzx eax, byte [rax]	      2036	fold.c	FUNCTION_57	FOR_1	IF_4	IF_5	CALL_10
0x36fd	           0xfb6c0	                           movzx eax, al	      2036	fold.c	FUNCTION_57	FOR_1	IF_4	IF_5	CALL_10
0x3700	          0x83e830	                           sub eax, 0x30	      2036	fold.c	FUNCTION_57	FOR_1	IF_4	IF_5	CALL_10
0x3703	          0x83f809	                              cmp eax, 9	      2036	fold.c	FUNCTION_57	FOR_1	IF_4	IF_5	CALL_10
0x3706	            0x7704	                            ja 0x400374c	      2036	fold.c	FUNCTION_57	FOR_1	IF_4	IF_5	CALL_10
0x3708	        0x8345d401	               add dword [rbp - 0x2c], 1	      2037	fold.c	FUNCTION_57	FOR_1	IF_4	IF_5
0x370c	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x3710	        0x488945f0	             mov qword [rbp - 0x10], rax	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x3714	            0xeb05	                           jmp 0x400375b	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x3716	      0x48836df001	               sub qword [rbp - 0x10], 1	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x371b	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x371f	        0x483b45b8	             cmp rax, qword [rbp - 0x48]	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x3723	            0x761e	                           jbe 0x4003783	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x3725	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x3729	        0x4883e801	                              sub rax, 1	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x372d	           0xfb600	                   movzx eax, byte [rax]	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x3730	            0x3c20	                            cmp al, 0x20	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x3732	            0x74e2	                            je 0x4003756	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x3734	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x3738	        0x4883e801	                              sub rax, 1	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x373c	           0xfb600	                   movzx eax, byte [rax]	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x373f	            0x3c09	                               cmp al, 9	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x3741	            0x74d3	                            je 0x4003756	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x3743	          0x8b45cc	             mov eax, dword [rbp - 0x34]	      2043	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x3746	          0x4863d0	                         movsxd rdx, eax	      2043	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x3749	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2043	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x374d	          0x4801d0	                            add rax, rdx	      2043	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x3750	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	      2043	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x3754	     0xf87d4000000	                            ja 0x400386e	      2043	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x375a	          0x8b45cc	             mov eax, dword [rbp - 0x34]	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x375d	          0x4863d0	                         movsxd rdx, eax	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x3760	          0x8b45cc	             mov eax, dword [rbp - 0x34]	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x3763	            0x4898	                                    cdqe	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x3765	          0x48f7d8	                                 neg rax	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x3768	          0x4889c1	                            mov rcx, rax	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x376b	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x376f	          0x4801c1	                            add rcx, rax	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x3772	        0x488b45f8	                mov rax, qword [rbp - 8]	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x3776	          0x4889c6	                            mov rsi, rax	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x3779	          0x4889cf	                            mov rdi, rcx	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x377c	      0xe800000000	                          call 0x40037c1	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x3781	            0x85c0	                           test eax, eax	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x3783	     0xf85a5000000	                           jne 0x400386e	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x3789	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      2046	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x378d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2046	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x3791	          0x4829c2	                            sub rdx, rax	      2046	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x3794	          0x4889d0	                            mov rax, rdx	      2046	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x3797	            0x89c2	                            mov edx, eax	      2046	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x3799	          0x8b45cc	             mov eax, dword [rbp - 0x34]	      2046	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x379c	             0x1d0	                            add eax, edx	      2046	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x379e	           0x145d4	             add dword [rbp - 0x2c], eax	      2046	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x37a1	          0x8b45cc	             mov eax, dword [rbp - 0x34]	      2047	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x37a4	            0x4898	                                    cdqe	      2047	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x37a6	          0x48f7d8	                                 neg rax	      2047	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x37a9	          0x4889c2	                            mov rdx, rax	      2047	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x37ac	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2047	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x37b0	          0x4801d0	                            add rax, rdx	      2047	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x37b3	        0x488945e8	             mov qword [rbp - 0x18], rax	      2047	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x37b7	            0xeb75	                           jmp 0x400386e	      2047	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x37b9	      0x48837de000	               cmp qword [rbp - 0x20], 0	      2050	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7
0x37be	            0x746e	                            je 0x400386e	      2050	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7
0x37c0	        0x837dd800	               cmp dword [rbp - 0x28], 0	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x37c4	            0x7532	                           jne 0x4003838	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x37c6	        0x837dcc00	               cmp dword [rbp - 0x34], 0	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x37ca	            0x7e2c	                           jle 0x4003838	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x37cc	          0x8b45cc	             mov eax, dword [rbp - 0x34]	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x37cf	          0x4863d0	                         movsxd rdx, eax	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x37d2	        0x488b4df8	                mov rcx, qword [rbp - 8]	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x37d6	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x37da	          0x4889ce	                            mov rsi, rcx	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x37dd	          0x4889c7	                            mov rdi, rax	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x37e0	      0xe800000000	                          call 0x4003825	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x37e5	            0x85c0	                           test eax, eax	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x37e7	            0x750f	                           jne 0x4003838	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x37e9	          0x8b45cc	             mov eax, dword [rbp - 0x34]	      2054	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8
0x37ec	          0x8945d4	             mov dword [rbp - 0x2c], eax	      2054	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8
0x37ef	    0xc745d8010000	               mov dword [rbp - 0x28], 1	      2055	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8
0x37f6	            0xeb36	                           jmp 0x400386e	      2055	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8
0x37f8	        0x837ddc00	               cmp dword [rbp - 0x24], 0	      2057	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9
0x37fc	            0x7530	                           jne 0x400386e	      2057	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9
0x37fe	        0x837dd000	               cmp dword [rbp - 0x30], 0	      2057	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9
0x3802	            0x7e2a	                           jle 0x400386e	      2057	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9
0x3804	          0x8b45d0	             mov eax, dword [rbp - 0x30]	      2058	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9	CALL_14
0x3807	          0x4863d0	                         movsxd rdx, eax	      2058	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9	CALL_14
0x380a	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	      2058	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9	CALL_14
0x380e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2058	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9	CALL_14
0x3812	          0x4889ce	                            mov rsi, rcx	      2058	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9	CALL_14
0x3815	          0x4889c7	                            mov rdi, rax	      2058	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9	CALL_14
0x3818	      0xe800000000	                          call 0x400385d	      2058	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9	CALL_14
0x381d	            0x85c0	                           test eax, eax	      2058	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9	CALL_14
0x381f	            0x750d	                           jne 0x400386e	      2058	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9	CALL_14
0x3821	          0x8b45d0	             mov eax, dword [rbp - 0x30]	      2060	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9
0x3824	          0x8945d4	             mov dword [rbp - 0x2c], eax	      2060	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9
0x3827	    0xc745dc010000	               mov dword [rbp - 0x24], 1	      2061	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9
0x382e	        0x837dd400	               cmp dword [rbp - 0x2c], 0	      2064	fold.c	FUNCTION_57	FOR_1	IF_10
0x3832	            0x7465	                            je 0x40038d9	      2064	fold.c	FUNCTION_57	FOR_1	IF_10
0x3834	            0xeb04	                           jmp 0x400387a	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x3836	        0x8345d401	               add dword [rbp - 0x2c], 1	      2067	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3
0x383a	          0x8b45d4	             mov eax, dword [rbp - 0x2c]	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x383d	          0x4863d0	                         movsxd rdx, eax	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x3840	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x3844	          0x4801d0	                            add rax, rdx	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x3847	           0xfb600	                   movzx eax, byte [rax]	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x384a	            0x3c20	                            cmp al, 0x20	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x384c	            0x74e8	                            je 0x4003876	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x384e	          0x8b45d4	             mov eax, dword [rbp - 0x2c]	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x3851	          0x4863d0	                         movsxd rdx, eax	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x3854	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x3858	          0x4801d0	                            add rax, rdx	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x385b	           0xfb600	                   movzx eax, byte [rax]	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x385e	            0x3c09	                               cmp al, 9	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x3860	            0x74d4	                            je 0x4003876	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x3862	          0x8b45d4	             mov eax, dword [rbp - 0x2c]	      2068	fold.c	FUNCTION_57	FOR_1	IF_10	CALL_16
0x3865	          0x4863d0	                         movsxd rdx, eax	      2068	fold.c	FUNCTION_57	FOR_1	IF_10	CALL_16
0x3868	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2068	fold.c	FUNCTION_57	FOR_1	IF_10	CALL_16
0x386c	          0x4801d0	                            add rax, rdx	      2068	fold.c	FUNCTION_57	FOR_1	IF_10	CALL_16
0x386f	          0x4889c7	                            mov rdi, rax	      2068	fold.c	FUNCTION_57	FOR_1	IF_10	CALL_16
0x3872	      0xe800000000	                          call 0x40038b7	      2068	fold.c	FUNCTION_57	FOR_1	IF_10	CALL_16
0x3877	        0x488d5001	                      lea rdx, [rax + 1]	      2068	fold.c	FUNCTION_57	FOR_1	IF_10	CALL_16
0x387b	          0x8b45d4	             mov eax, dword [rbp - 0x2c]	      2068	fold.c	FUNCTION_57	FOR_1	IF_10	CALL_16
0x387e	          0x4863c8	                         movsxd rcx, eax	      2068	fold.c	FUNCTION_57	FOR_1	IF_10	CALL_16
0x3881	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2068	fold.c	FUNCTION_57	FOR_1	IF_10	CALL_16
0x3885	          0x4801c1	                            add rcx, rax	      2068	fold.c	FUNCTION_57	FOR_1	IF_10	CALL_16
0x3888	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2068	fold.c	FUNCTION_57	FOR_1	IF_10	CALL_16
0x388c	          0x4889ce	                            mov rsi, rcx	      2068	fold.c	FUNCTION_57	FOR_1	IF_10	CALL_16
0x388f	          0x4889c7	                            mov rdi, rax	      2068	fold.c	FUNCTION_57	FOR_1	IF_10	CALL_16
0x3892	      0xe800000000	                          call 0x40038d7	      2068	fold.c	FUNCTION_57	FOR_1	IF_10	CALL_16
0x3897	            0xeb27	                           jmp 0x4003900	      2068	fold.c	FUNCTION_57	FOR_1	IF_10	CALL_16
0x3899	    0x8b0500000000	            mov eax, dword [0x040038df] 	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x389f	            0x85c0	                           test eax, eax	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x38a1	            0x7412	                            je 0x40038f5	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x38a3	    0x488b05000000	            mov rax, qword [0x040038ea] 	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x38aa	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x38ae	          0x4889d7	                            mov rdi, rdx	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x38b1	            0xffd0	                                call rax	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x38b3	            0xeb05	                           jmp 0x40038fa	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x38b5	      0xb801000000	                              mov eax, 1	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x38ba	            0x4898	                                    cdqe	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x38bc	        0x480145e8	            add qword [rbp - 0x18], rax 	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x38c0	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2027	fold.c	FUNCTION_57	FOR_1
0x38c4	           0xfb600	                   movzx eax, byte [rax]	      2027	fold.c	FUNCTION_57	FOR_1
0x38c7	            0x84c0	                             test al, al	      2027	fold.c	FUNCTION_57	FOR_1
0x38c9	     0xf85acfdffff	                           jne 0x40036bb	      2027	fold.c	FUNCTION_57	FOR_1
0x38cf	              0x90	                                     nop	      2075	fold.c	FUNCTION_57
0x38d0	              0xc9	                                   leave	      2075	fold.c	FUNCTION_57
0x38d1	              0xc3	                                     ret	      2075	fold.c	FUNCTION_57
check_closed	SWITCH,0:ELSE,1:DO,0:FOR,0:WHILE,0:IF,7:functions,0:CALL,1	61
0x2a1a	              0x55	                                push rbp	      1647	fold.c	FUNCTION_49
0x2a1b	          0x4889e5	                            mov rbp, rsp	      1647	fold.c	FUNCTION_49
0x2a1e	        0x4883ec40	                           sub rsp, 0x40	      1647	fold.c	FUNCTION_49
0x2a22	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1647	fold.c	FUNCTION_49
0x2a26	        0x488975e0	             mov qword [rbp - 0x20], rsi	      1647	fold.c	FUNCTION_49
0x2a2a	        0x488955d8	             mov qword [rbp - 0x28], rdx	      1647	fold.c	FUNCTION_49
0x2a2e	          0x894dd4	             mov dword [rbp - 0x2c], ecx	      1647	fold.c	FUNCTION_49
0x2a31	        0x4c8945c8	              mov qword [rbp - 0x38], r8	      1647	fold.c	FUNCTION_49
0x2a35	        0x4c894dc0	              mov qword [rbp - 0x40], r9	      1647	fold.c	FUNCTION_49
0x2a39	    0xc745fc000000	                  mov dword [rbp - 4], 0	      1648	fold.c	FUNCTION_49
0x2a40	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1652	fold.c	FUNCTION_49	IF_1
0x2a44	            0x8b00	                    mov eax, dword [rax]	      1652	fold.c	FUNCTION_49	IF_1
0x2a46	            0x85c0	                           test eax, eax	      1652	fold.c	FUNCTION_49	IF_1
0x2a48	            0x750c	                           jne 0x4002a96	      1652	fold.c	FUNCTION_49	IF_1
0x2a4a	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1652	fold.c	FUNCTION_49	IF_1
0x2a4e	         0xfb64028	           movzx eax, byte [rax + 0x28] 	      1652	fold.c	FUNCTION_49	IF_1
0x2a52	            0x3c02	                               cmp al, 2	      1652	fold.c	FUNCTION_49	IF_1
0x2a54	            0x7529	                           jne 0x4002abf	      1652	fold.c	FUNCTION_49	IF_1
0x2a56	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1654	fold.c	FUNCTION_49	IF_1
0x2a5a	    0xc70001000000	                      mov dword [rax], 1	      1654	fold.c	FUNCTION_49	IF_1
0x2a60	          0x8b45d4	             mov eax, dword [rbp - 0x2c]	      1655	fold.c	FUNCTION_49	IF_1	IF_2
0x2a63	          0x4863d0	                         movsxd rdx, eax	      1655	fold.c	FUNCTION_49	IF_1	IF_2
0x2a66	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1655	fold.c	FUNCTION_49	IF_1	IF_2
0x2a6a	    0x488b80e80100	           mov rax, qword [rax + 0x1e8] 	      1655	fold.c	FUNCTION_49	IF_1	IF_2
0x2a71	          0x4839c2	                            cmp rdx, rax	      1655	fold.c	FUNCTION_49	IF_1	IF_2
0x2a74	            0x7c1c	                            jl 0x4002ad2	      1655	fold.c	FUNCTION_49	IF_1	IF_2
0x2a76	    0xc745fc010000	                  mov dword [rbp - 4], 1	      1656	fold.c	FUNCTION_49	IF_1	IF_2
0x2a7d	            0xeb13	                           jmp 0x4002ad2	      1655	fold.c	FUNCTION_49	IF_1	IF_2
0x2a7f	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1658	fold.c	FUNCTION_49	ELSE_1	IF_3
0x2a83	         0xfb64028	           movzx eax, byte [rax + 0x28] 	      1658	fold.c	FUNCTION_49	ELSE_1	IF_3
0x2a87	            0x3c01	                               cmp al, 1	      1658	fold.c	FUNCTION_49	ELSE_1	IF_3
0x2a89	            0x7507	                           jne 0x4002ad2	      1658	fold.c	FUNCTION_49	ELSE_1	IF_3
0x2a8b	    0xc745fc010000	                  mov dword [rbp - 4], 1	      1659	fold.c	FUNCTION_49	ELSE_1	IF_3
0x2a92	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1662	fold.c	FUNCTION_49	IF_4
0x2a96	         0xfb64029	           movzx eax, byte [rax + 0x29] 	      1662	fold.c	FUNCTION_49	IF_4
0x2a9a	            0x3c02	                               cmp al, 2	      1662	fold.c	FUNCTION_49	IF_4
0x2a9c	            0x750a	                           jne 0x4002ae8	      1662	fold.c	FUNCTION_49	IF_4
0x2a9e	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1663	fold.c	FUNCTION_49	IF_4
0x2aa2	    0xc70001000000	                      mov dword [rax], 1	      1663	fold.c	FUNCTION_49	IF_4
0x2aa8	        0x837dfc00	                  cmp dword [rbp - 4], 0	      1664	fold.c	FUNCTION_49	IF_5
0x2aac	            0x743c	                            je 0x4002b2a	      1664	fold.c	FUNCTION_49	IF_5
0x2aae	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1666	fold.c	FUNCTION_49	IF_5	IF_6
0x2ab2	            0x8b00	                    mov eax, dword [rax]	      1666	fold.c	FUNCTION_49	IF_5	IF_6
0x2ab4	            0x85c0	                           test eax, eax	      1666	fold.c	FUNCTION_49	IF_5	IF_6
0x2ab6	            0x7408	                            je 0x4002b00	      1666	fold.c	FUNCTION_49	IF_5	IF_6
0x2ab8	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1667	fold.c	FUNCTION_49	IF_5	IF_6
0x2abc	        0xc6402902	                mov byte [rax + 0x29], 2	      1667	fold.c	FUNCTION_49	IF_5	IF_6
0x2ac0	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      1668	fold.c	FUNCTION_49	IF_5	CALL_1
0x2ac4	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	      1668	fold.c	FUNCTION_49	IF_5	CALL_1
0x2ac8	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1668	fold.c	FUNCTION_49	IF_5	CALL_1
0x2acc	          0x4889ce	                            mov rsi, rcx	      1668	fold.c	FUNCTION_49	IF_5	CALL_1
0x2acf	          0x4889c7	                            mov rdi, rax	      1668	fold.c	FUNCTION_49	IF_5	CALL_1
0x2ad2	      0xe818000000	                     call sym.checkSmall	      1668	fold.c	FUNCTION_49	IF_5	CALL_1
0x2ad7	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1669	fold.c	FUNCTION_49	IF_5	IF_7
0x2adb	         0xfb64029	           movzx eax, byte [rax + 0x29] 	      1669	fold.c	FUNCTION_49	IF_5	IF_7
0x2adf	            0x3c01	                               cmp al, 1	      1669	fold.c	FUNCTION_49	IF_5	IF_7
0x2ae1	            0x7507	                           jne 0x4002b2a	      1669	fold.c	FUNCTION_49	IF_5	IF_7
0x2ae3	    0xc745fc000000	                  mov dword [rbp - 4], 0	      1670	fold.c	FUNCTION_49	IF_5	IF_7
0x2aea	          0x8b45fc	                mov eax, dword [rbp - 4]	      1672	fold.c	FUNCTION_49
0x2aed	              0xc9	                                   leave	      1673	fold.c	FUNCTION_49
0x2aee	              0xc3	                                     ret	      1673	fold.c	FUNCTION_49
hasAnyFolding	SWITCH,0:ELSE,0:DO,0:FOR,0:WHILE,0:IF,0:functions,0:CALL,1	22
0x5d	              0x55	                                push rbp	       116	fold.c	FUNCTION_2
0x5e	          0x4889e5	                            mov rbp, rsp	       116	fold.c	FUNCTION_2
0x61	        0x4883ec10	                           sub rsp, 0x10	       116	fold.c	FUNCTION_2
0x65	        0x48897df8	                mov qword [rbp - 8], rdi	       116	fold.c	FUNCTION_2
0x69	        0x488b45f8	                mov rax, qword [rbp - 8]	       118	fold.c	FUNCTION_2
0x6d	    0x8b80d4010000	           mov eax, dword [rax + 0x1d4] 	       118	fold.c	FUNCTION_2
0x73	            0x85c0	                           test eax, eax	       119	fold.c	FUNCTION_2	CALL_1
0x75	            0x7425	                            je 0x40000dc	       119	fold.c	FUNCTION_2	CALL_1
0x77	        0x488b45f8	                mov rax, qword [rbp - 8]	       119	fold.c	FUNCTION_2	CALL_1
0x7b	          0x4889c7	                            mov rdi, rax	       119	fold.c	FUNCTION_2	CALL_1
0x7e	      0xe800000000	                          call 0x40000c3	       119	fold.c	FUNCTION_2	CALL_1
0x83	            0x85c0	                           test eax, eax	       119	fold.c	FUNCTION_2	CALL_1
0x85	            0x740e	                            je 0x40000d5	       119	fold.c	FUNCTION_2	CALL_1
0x87	        0x488b45f8	                mov rax, qword [rbp - 8]	       119	fold.c	FUNCTION_2	CALL_1
0x8b	    0x8b8008010000	           mov eax, dword [rax + 0x108] 	       119	fold.c	FUNCTION_2	CALL_1
0x91	            0x85c0	                           test eax, eax	       119	fold.c	FUNCTION_2	CALL_1
0x93	            0x7e07	                           jle 0x40000dc	       119	fold.c	FUNCTION_2	CALL_1
0x95	      0xb801000000	                              mov eax, 1	       119	fold.c	FUNCTION_2	CALL_1
0x9a	            0xeb05	                           jmp 0x40000e1	       119	fold.c	FUNCTION_2	CALL_1
0x9c	      0xb800000000	                              mov eax, 0	       119	fold.c	FUNCTION_2	CALL_1
0xa1	              0xc9	                                   leave	       120	fold.c	FUNCTION_2
0xa2	              0xc3	                                     ret	       120	fold.c	FUNCTION_2
foldFind	SWITCH,0:ELSE,2:DO,0:FOR,0:WHILE,1:IF,2:functions,0:CALL,0	97
0x1ba5	              0x55	                                push rbp	      1120	fold.c	FUNCTION_36
0x1ba6	          0x4889e5	                            mov rbp, rsp	      1120	fold.c	FUNCTION_36
0x1ba9	        0x48897dd8	             mov qword [rbp - 0x28], rdi	      1120	fold.c	FUNCTION_36
0x1bad	        0x488975d0	             mov qword [rbp - 0x30], rsi	      1120	fold.c	FUNCTION_36
0x1bb1	        0x488955c8	             mov qword [rbp - 0x38], rdx	      1120	fold.c	FUNCTION_36
0x1bb5	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1130	fold.c	FUNCTION_36
0x1bb9	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1130	fold.c	FUNCTION_36
0x1bbd	        0x488945f8	                mov qword [rbp - 8], rax	      1130	fold.c	FUNCTION_36
0x1bc1	    0x48c745e80000	               mov qword [rbp - 0x18], 0	      1131	fold.c	FUNCTION_36
0x1bc9	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1132	fold.c	FUNCTION_36
0x1bcd	            0x8b00	                    mov eax, dword [rax]	      1132	fold.c	FUNCTION_36
0x1bcf	          0x83e801	                              sub eax, 1	      1132	fold.c	FUNCTION_36
0x1bd2	            0x4898	                                    cdqe	      1132	fold.c	FUNCTION_36
0x1bd4	        0x488945f0	             mov qword [rbp - 0x10], rax	      1132	fold.c	FUNCTION_36
0x1bd8	      0xe9d5000000	                           jmp 0x4001cf2	      1133	fold.c	FUNCTION_36	WHILE_1
0x1bdd	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      1135	fold.c	FUNCTION_36	WHILE_1
0x1be1	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1135	fold.c	FUNCTION_36	WHILE_1
0x1be5	          0x4801d0	                            add rax, rdx	      1135	fold.c	FUNCTION_36	WHILE_1
0x1be8	          0x4889c2	                            mov rdx, rax	      1135	fold.c	FUNCTION_36	WHILE_1
0x1beb	        0x48c1ea3f	                           shr rdx, 0x3f	      1135	fold.c	FUNCTION_36	WHILE_1
0x1bef	          0x4801d0	                            add rax, rdx	      1135	fold.c	FUNCTION_36	WHILE_1
0x1bf2	          0x48d1f8	                              sar rax, 1	      1135	fold.c	FUNCTION_36	WHILE_1
0x1bf5	          0x8945e4	             mov dword [rbp - 0x1c], eax	      1135	fold.c	FUNCTION_36	WHILE_1
0x1bf8	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x1bfb	          0x4863d0	                         movsxd rdx, eax	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x1bfe	          0x4889d0	                            mov rax, rdx	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x1c01	          0x4801c0	                            add rax, rax	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x1c04	          0x4801d0	                            add rax, rdx	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x1c07	        0x48c1e004	                              shl rax, 4	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x1c0b	          0x4889c2	                            mov rdx, rax	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x1c0e	        0x488b45f8	                mov rax, qword [rbp - 8]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x1c12	          0x4801d0	                            add rax, rdx	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x1c15	          0x488b00	                    mov rax, qword [rax]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x1c18	        0x483b45d0	             cmp rax, qword [rbp - 0x30]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x1c1c	            0x7e11	                           jle 0x4001c6f	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x1c1e	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x1c21	          0x83e801	                              sub eax, 1	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x1c24	            0x4898	                                    cdqe	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x1c26	        0x488945f0	             mov qword [rbp - 0x10], rax	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x1c2a	      0xe983000000	                           jmp 0x4001cf2	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x1c2f	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x1c32	          0x4863d0	                         movsxd rdx, eax	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x1c35	          0x4889d0	                            mov rax, rdx	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x1c38	          0x4801c0	                            add rax, rax	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x1c3b	          0x4801d0	                            add rax, rdx	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x1c3e	        0x48c1e004	                              shl rax, 4	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x1c42	          0x4889c2	                            mov rdx, rax	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x1c45	        0x488b45f8	                mov rax, qword [rbp - 8]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x1c49	          0x4801d0	                            add rax, rdx	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x1c4c	          0x488b08	                    mov rcx, qword [rax]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x1c4f	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x1c52	          0x4863d0	                         movsxd rdx, eax	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x1c55	          0x4889d0	                            mov rax, rdx	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x1c58	          0x4801c0	                            add rax, rax	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x1c5b	          0x4801d0	                            add rax, rdx	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x1c5e	        0x48c1e004	                              shl rax, 4	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x1c62	          0x4889c2	                            mov rdx, rax	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x1c65	        0x488b45f8	                mov rax, qword [rbp - 8]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x1c69	          0x4801d0	                            add rax, rdx	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x1c6c	        0x488b4008	                mov rax, qword [rax + 8]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x1c70	          0x4801c8	                            add rax, rcx	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x1c73	        0x483b45d0	             cmp rax, qword [rbp - 0x30]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x1c77	            0x7f0e	                            jg 0x4001cc7	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x1c79	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x1c7c	          0x83c001	                              add eax, 1	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x1c7f	            0x4898	                                    cdqe	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x1c81	        0x488945e8	             mov qword [rbp - 0x18], rax	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x1c85	            0xeb2b	                           jmp 0x4001cf2	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x1c87	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      1145	fold.c	FUNCTION_36	WHILE_1	ELSE_2
0x1c8a	          0x4863d0	                         movsxd rdx, eax	      1145	fold.c	FUNCTION_36	WHILE_1	ELSE_2
0x1c8d	          0x4889d0	                            mov rax, rdx	      1145	fold.c	FUNCTION_36	WHILE_1	ELSE_2
0x1c90	          0x4801c0	                            add rax, rax	      1145	fold.c	FUNCTION_36	WHILE_1	ELSE_2
0x1c93	          0x4801d0	                            add rax, rdx	      1145	fold.c	FUNCTION_36	WHILE_1	ELSE_2
0x1c96	        0x48c1e004	                              shl rax, 4	      1145	fold.c	FUNCTION_36	WHILE_1	ELSE_2
0x1c9a	          0x4889c2	                            mov rdx, rax	      1145	fold.c	FUNCTION_36	WHILE_1	ELSE_2
0x1c9d	        0x488b45f8	                mov rax, qword [rbp - 8]	      1145	fold.c	FUNCTION_36	WHILE_1	ELSE_2
0x1ca1	          0x4801c2	                            add rdx, rax	      1145	fold.c	FUNCTION_36	WHILE_1	ELSE_2
0x1ca4	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1145	fold.c	FUNCTION_36	WHILE_1	ELSE_2
0x1ca8	          0x488910	                    mov qword [rax], rdx	      1145	fold.c	FUNCTION_36	WHILE_1	ELSE_2
0x1cab	      0xb801000000	                              mov eax, 1	      1146	fold.c	FUNCTION_36	WHILE_1	ELSE_2
0x1cb0	            0xeb35	                           jmp 0x4001d27	      1146	fold.c	FUNCTION_36	WHILE_1	ELSE_2
0x1cb2	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1133	fold.c	FUNCTION_36	WHILE_1
0x1cb6	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	      1133	fold.c	FUNCTION_36	WHILE_1
0x1cba	     0xf8e1dffffff	                           jle 0x4001c1d	      1133	fold.c	FUNCTION_36	WHILE_1
0x1cc0	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      1149	fold.c	FUNCTION_36
0x1cc4	          0x4889d0	                            mov rax, rdx	      1149	fold.c	FUNCTION_36
0x1cc7	          0x4801c0	                            add rax, rax	      1149	fold.c	FUNCTION_36
0x1cca	          0x4801d0	                            add rax, rdx	      1149	fold.c	FUNCTION_36
0x1ccd	        0x48c1e004	                              shl rax, 4	      1149	fold.c	FUNCTION_36
0x1cd1	          0x4889c2	                            mov rdx, rax	      1149	fold.c	FUNCTION_36
0x1cd4	        0x488b45f8	                mov rax, qword [rbp - 8]	      1149	fold.c	FUNCTION_36
0x1cd8	          0x4801c2	                            add rdx, rax	      1149	fold.c	FUNCTION_36
0x1cdb	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1149	fold.c	FUNCTION_36
0x1cdf	          0x488910	                    mov qword [rax], rdx	      1149	fold.c	FUNCTION_36
0x1ce2	      0xb800000000	                              mov eax, 0	      1150	fold.c	FUNCTION_36
0x1ce7	              0x5d	                                 pop rbp	      1151	fold.c	FUNCTION_36
0x1ce8	              0xc3	                                     ret	      1151	fold.c	FUNCTION_36
foldUpdateIEMSRecurse	SWITCH,0:ELSE,14:DO,0:FOR,1:WHILE,4:IF,46:functions,0:CALL,21	993
0x3f95	              0x55	                                push rbp	      2379	fold.c	FUNCTION_59
0x3f96	          0x4889e5	                            mov rbp, rsp	      2379	fold.c	FUNCTION_59
0x3f99	    0x4881ec900000	                           sub rsp, 0x90	      2379	fold.c	FUNCTION_59
0x3fa0	        0x48897d98	             mov qword [rbp - 0x68], rdi	      2379	fold.c	FUNCTION_59
0x3fa4	          0x897594	             mov dword [rbp - 0x6c], esi	      2379	fold.c	FUNCTION_59
0x3fa7	        0x48895588	             mov qword [rbp - 0x78], rdx	      2379	fold.c	FUNCTION_59
0x3fab	        0x48894d80	             mov qword [rbp - 0x80], rcx	      2379	fold.c	FUNCTION_59
0x3faf	    0x4c898578ffff	              mov qword [rbp - 0x88], r8	      2379	fold.c	FUNCTION_59
0x3fb6	    0x4c898d70ffff	              mov qword [rbp - 0x90], r9	      2379	fold.c	FUNCTION_59
0x3fbd	    0x64488b042528	                mov rax, qword fs:[0x28]	      2379	fold.c	FUNCTION_59
0x3fc6	        0x488945f8	                mov qword [rbp - 8], rax	      2379	fold.c	FUNCTION_59
0x3fca	            0x31c0	                            xor eax, eax	      2379	fold.c	FUNCTION_59
0x3fcc	    0x48c745b80000	               mov qword [rbp - 0x48], 0	      2381	fold.c	FUNCTION_59
0x3fd4	          0x8b4594	             mov eax, dword [rbp - 0x6c]	      2383	fold.c	FUNCTION_59
0x3fd7	          0x8945a8	             mov dword [rbp - 0x58], eax	      2383	fold.c	FUNCTION_59
0x3fda	        0x488b4588	             mov rax, qword [rbp - 0x78]	      2384	fold.c	FUNCTION_59
0x3fde	        0x488945d0	             mov qword [rbp - 0x30], rax	      2384	fold.c	FUNCTION_59
0x3fe2	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2385	fold.c	FUNCTION_59
0x3fe6	        0x488b4008	                mov rax, qword [rax + 8]	      2385	fold.c	FUNCTION_59
0x3fea	        0x488945e8	             mov qword [rbp - 0x18], rax	      2385	fold.c	FUNCTION_59
0x3fee	    0xc745b0000000	               mov dword [rbp - 0x50], 0	      2387	fold.c	FUNCTION_59
0x3ff5	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2388	fold.c	FUNCTION_59
0x3ff9	          0x488b00	                    mov rax, qword [rax]	      2388	fold.c	FUNCTION_59
0x3ffc	        0x488b4008	                mov rax, qword [rax + 8]	      2388	fold.c	FUNCTION_59
0x4000	          0x488b10	                    mov rdx, qword [rax]	      2388	fold.c	FUNCTION_59
0x4003	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2388	fold.c	FUNCTION_59
0x4007	        0x488b4010	            mov rax, qword [rax + 0x10] 	      2388	fold.c	FUNCTION_59
0x400b	          0x4829c2	                            sub rdx, rax	      2388	fold.c	FUNCTION_59
0x400e	          0x4889d0	                            mov rax, rdx	      2388	fold.c	FUNCTION_59
0x4011	        0x488945f0	             mov qword [rbp - 0x10], rax	      2388	fold.c	FUNCTION_59
0x4015	    0x4881bd78ffff	               cmp qword [rbp - 0x88], 0	      2397	fold.c	FUNCTION_59	IF_1
0x4020	            0x757b	                           jne 0x40040dd	      2397	fold.c	FUNCTION_59	IF_1
0x4022	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2397	fold.c	FUNCTION_59	IF_1
0x4026	          0x8b5028	            mov edx, dword [rax + 0x28] 	      2397	fold.c	FUNCTION_59	IF_1
0x4029	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2397	fold.c	FUNCTION_59	IF_1
0x402d	          0x8b4020	            mov eax, dword [rax + 0x20] 	      2397	fold.c	FUNCTION_59	IF_1
0x4030	          0x2b4594	             sub eax, dword [rbp - 0x6c]	      2397	fold.c	FUNCTION_59	IF_1
0x4033	            0x39c2	                            cmp edx, eax	      2397	fold.c	FUNCTION_59	IF_1
0x4035	            0x7f66	                            jg 0x40040dd	      2397	fold.c	FUNCTION_59	IF_1
0x4037	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2398	fold.c	FUNCTION_59	IF_1
0x403b	          0x8b4020	            mov eax, dword [rax + 0x20] 	      2398	fold.c	FUNCTION_59	IF_1
0x403e	            0x85c0	                           test eax, eax	      2398	fold.c	FUNCTION_59	IF_1
0x4040	            0x7e5b	                           jle 0x40040dd	      2398	fold.c	FUNCTION_59	IF_1
0x4042	        0x488b4588	             mov rax, qword [rbp - 0x78]	      2400	fold.c	FUNCTION_59	IF_1	CALL_1
0x4046	        0x488d48ff	                      lea rcx, [rax - 1]	      2400	fold.c	FUNCTION_59	IF_1	CALL_1
0x404a	        0x488d55b8	                   lea rdx, [rbp - 0x48]	      2400	fold.c	FUNCTION_59	IF_1	CALL_1
0x404e	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2400	fold.c	FUNCTION_59	IF_1	CALL_1
0x4052	          0x4889ce	                            mov rsi, rcx	      2400	fold.c	FUNCTION_59	IF_1	CALL_1
0x4055	          0x4889c7	                            mov rdi, rax	      2400	fold.c	FUNCTION_59	IF_1	CALL_1
0x4058	      0xe848dbffff	                       call sym.foldFind	      2400	fold.c	FUNCTION_59	IF_1	CALL_1
0x405d	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2401	fold.c	FUNCTION_59	IF_1	IF_2
0x4061	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      2401	fold.c	FUNCTION_59	IF_1	IF_2
0x4065	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2401	fold.c	FUNCTION_59	IF_1	IF_2
0x4069	            0x8b00	                    mov eax, dword [rax]	      2401	fold.c	FUNCTION_59	IF_1	IF_2
0x406b	          0x4863d0	                         movsxd rdx, eax	      2401	fold.c	FUNCTION_59	IF_1	IF_2
0x406e	          0x4889d0	                            mov rax, rdx	      2401	fold.c	FUNCTION_59	IF_1	IF_2
0x4071	          0x4801c0	                            add rax, rax	      2401	fold.c	FUNCTION_59	IF_1	IF_2
0x4074	          0x4801d0	                            add rax, rdx	      2401	fold.c	FUNCTION_59	IF_1	IF_2
0x4077	        0x48c1e004	                              shl rax, 4	      2401	fold.c	FUNCTION_59	IF_1	IF_2
0x407b	        0x488d1401	                    lea rdx, [rcx + rax]	      2401	fold.c	FUNCTION_59	IF_1	IF_2
0x407f	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2401	fold.c	FUNCTION_59	IF_1	IF_2
0x4083	          0x4839c2	                            cmp rdx, rax	      2401	fold.c	FUNCTION_59	IF_1	IF_2
0x4086	            0x760d	                           jbe 0x40040d5	      2401	fold.c	FUNCTION_59	IF_1	IF_2
0x4088	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2402	fold.c	FUNCTION_59	IF_1	IF_2
0x408c	          0x488b00	                    mov rax, qword [rax]	      2402	fold.c	FUNCTION_59	IF_1	IF_2
0x408f	        0x483b4588	             cmp rax, qword [rbp - 0x78]	      2402	fold.c	FUNCTION_59	IF_1	IF_2
0x4093	            0x7c08	                            jl 0x40040dd	      2402	fold.c	FUNCTION_59	IF_1	IF_2
0x4095	    0x48c745b80000	               mov qword [rbp - 0x48], 0	      2403	fold.c	FUNCTION_59	IF_1	IF_2
0x409d	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2417	fold.c	FUNCTION_59
0x40a1	        0x488b5008	                mov rdx, qword [rax + 8]	      2417	fold.c	FUNCTION_59
0x40a5	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2417	fold.c	FUNCTION_59
0x40a9	        0x48895018	             mov qword [rax + 0x18], rdx	      2417	fold.c	FUNCTION_59
0x40ad	      0xe9440a0000	                           jmp 0x4004b36	      2418	fold.c	FUNCTION_59	WHILE_1
0x40b2	      0xe800000000	                          call 0x40040f7	      2421	fold.c	FUNCTION_59	WHILE_1	CALL_2
0x40b7	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2427	fold.c	FUNCTION_59	WHILE_1
0x40bb	          0x8b4020	            mov eax, dword [rax + 0x20] 	      2427	fold.c	FUNCTION_59	WHILE_1
0x40be	          0x8945a8	             mov dword [rbp - 0x58], eax	      2427	fold.c	FUNCTION_59	WHILE_1
0x40c1	        0x837da814	           cmp dword [rbp - 0x58], 0x14 	      2428	fold.c	FUNCTION_59	WHILE_1	IF_3
0x40c5	            0x7e07	                           jle 0x400410e	      2428	fold.c	FUNCTION_59	WHILE_1	IF_3
0x40c7	    0xc745a8140000	           mov dword [rbp - 0x58], 0x14 	      2429	fold.c	FUNCTION_59	WHILE_1	IF_3
0x40ce	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2430	fold.c	FUNCTION_59	WHILE_1	IF_4
0x40d2	        0x488b4008	                mov rax, qword [rax + 8]	      2430	fold.c	FUNCTION_59	WHILE_1	IF_4
0x40d6	        0x483b45e8	             cmp rax, qword [rbp - 0x18]	      2430	fold.c	FUNCTION_59	WHILE_1	IF_4
0x40da	            0x7e26	                           jle 0x4004142	      2430	fold.c	FUNCTION_59	WHILE_1	IF_4
0x40dc	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2431	fold.c	FUNCTION_59	WHILE_1	IF_4
0x40e0	          0x8b4028	            mov eax, dword [rax + 0x28] 	      2431	fold.c	FUNCTION_59	WHILE_1	IF_4
0x40e3	          0x8b55a8	             mov edx, dword [rbp - 0x58]	      2431	fold.c	FUNCTION_59	WHILE_1	IF_4
0x40e6	            0x29c2	                            sub edx, eax	      2431	fold.c	FUNCTION_59	WHILE_1	IF_4
0x40e8	            0x89d0	                            mov eax, edx	      2431	fold.c	FUNCTION_59	WHILE_1	IF_4
0x40ea	          0x3b4594	             cmp eax, dword [rbp - 0x6c]	      2431	fold.c	FUNCTION_59	WHILE_1	IF_4
0x40ed	            0x7c0c	                            jl 0x400413b	      2431	fold.c	FUNCTION_59	WHILE_1	IF_4
0x40ef	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2431	fold.c	FUNCTION_59	WHILE_1	IF_4
0x40f3	          0x8b4030	            mov eax, dword [rax + 0x30] 	      2431	fold.c	FUNCTION_59	WHILE_1	IF_4
0x40f6	          0x3b4594	             cmp eax, dword [rbp - 0x6c]	      2431	fold.c	FUNCTION_59	WHILE_1	IF_4
0x40f9	            0x7f07	                            jg 0x4004142	      2431	fold.c	FUNCTION_59	WHILE_1	IF_4
0x40fb	    0xc745a8000000	               mov dword [rbp - 0x58], 0	      2432	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4102	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2434	fold.c	FUNCTION_59	WHILE_1	IF_5
0x4106	        0x488b4008	                mov rax, qword [rax + 8]	      2434	fold.c	FUNCTION_59	WHILE_1	IF_5
0x410a	    0x483b8570ffff	             cmp rax, qword [rbp - 0x90]	      2434	fold.c	FUNCTION_59	WHILE_1	IF_5
0x4111	     0xf8e43010000	                           jle 0x400429a	      2434	fold.c	FUNCTION_59	WHILE_1	IF_5
0x4117	        0x837db000	               cmp dword [rbp - 0x50], 0	      2434	fold.c	FUNCTION_59	WHILE_1	IF_5
0x411b	     0xf8539010000	                           jne 0x400429a	      2434	fold.c	FUNCTION_59	WHILE_1	IF_5
0x4121	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2434	fold.c	FUNCTION_59	WHILE_1	IF_5
0x4125	          0x4885c0	                           test rax, rax	      2434	fold.c	FUNCTION_59	WHILE_1	IF_5
0x4128	     0xf842c010000	                            je 0x400429a	      2434	fold.c	FUNCTION_59	WHILE_1	IF_5
0x412e	    0x4881bd78ffff	               cmp qword [rbp - 0x88], 0	      2442	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4139	            0x741e	                            je 0x4004199	      2442	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x413b	    0x4881bd78ffff	               cmp qword [rbp - 0x88], 0	      2443	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4146	            0x7411	                            je 0x4004199	      2443	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4148	    0x4881bd78ffff	               cmp qword [rbp - 0x88], 0	      2444	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4153	     0xf85ad090000	                           jne 0x4004b46	      2444	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4159	    0xc745ac000000	               mov dword [rbp - 0x54], 0	      2446	fold.c	FUNCTION_59	WHILE_1	IF_5
0x4160	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2447	fold.c	FUNCTION_59	WHILE_1	IF_5
0x4164	        0x488945c0	             mov qword [rbp - 0x40], rax	      2447	fold.c	FUNCTION_59	WHILE_1	IF_5
0x4168	          0x8b45a8	             mov eax, dword [rbp - 0x58]	      2448	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x416b	          0x3b4594	             cmp eax, dword [rbp - 0x6c]	      2448	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x416e	            0x7c49	                            jl 0x40041f9	      2448	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x4170	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2453	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x4174	        0x488b5008	                mov rdx, qword [rax + 8]	      2453	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x4178	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2453	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x417c	          0x488b00	                    mov rax, qword [rax]	      2453	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x417f	          0x4829c2	                            sub rdx, rax	      2453	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x4182	          0x4889d0	                            mov rax, rdx	      2453	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x4185	        0x488945c8	             mov qword [rbp - 0x38], rax	      2453	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x4189	            0xeb0f	                           jmp 0x40041da	      2454	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2	CALL_3
0x418b	        0x8345ac01	               add dword [rbp - 0x54], 1	      2456	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2
0x418f	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2457	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2
0x4193	          0x488b00	                    mov rax, qword [rax]	      2457	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2
0x4196	        0x482945c8	             sub qword [rbp - 0x38], rax	      2457	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2
0x419a	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2454	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2	CALL_3
0x419e	        0x488d4810	                   lea rcx, [rax + 0x10]	      2454	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2	CALL_3
0x41a2	        0x488d55c0	                   lea rdx, [rbp - 0x40]	      2454	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2	CALL_3
0x41a6	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2454	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2	CALL_3
0x41aa	          0x4889c6	                            mov rsi, rax	      2454	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2	CALL_3
0x41ad	          0x4889cf	                            mov rdi, rcx	      2454	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2	CALL_3
0x41b0	      0xe8f0d9ffff	                       call sym.foldFind	      2454	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2	CALL_3
0x41b5	            0x85c0	                           test eax, eax	      2454	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2	CALL_3
0x41b7	            0x75d2	                           jne 0x40041cb	      2454	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2	CALL_3
0x41b9	          0x8b5594	             mov edx, dword [rbp - 0x6c]	      2460	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8
0x41bc	          0x8b45ac	             mov eax, dword [rbp - 0x54]	      2460	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8
0x41bf	             0x1d0	                            add eax, edx	      2460	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8
0x41c1	          0x3b45a8	             cmp eax, dword [rbp - 0x58]	      2460	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8
0x41c4	            0x7e5e	                           jle 0x4004264	      2460	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8
0x41c6	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2462	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	CALL_4
0x41ca	        0x488b5008	                mov rdx, qword [rax + 8]	      2462	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	CALL_4
0x41ce	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2462	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	CALL_4
0x41d2	          0x488b00	                    mov rax, qword [rax]	      2462	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	CALL_4
0x41d5	          0x4889d6	                            mov rsi, rdx	      2462	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	CALL_4
0x41d8	          0x4829c6	                            sub rsi, rax	      2462	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	CALL_4
0x41db	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2462	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	CALL_4
0x41df	        0x488d4810	                   lea rcx, [rax + 0x10]	      2462	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	CALL_4
0x41e3	        0x488d45c0	                   lea rax, [rbp - 0x40]	      2462	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	CALL_4
0x41e7	          0x4889c2	                            mov rdx, rax	      2462	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	CALL_4
0x41ea	          0x4889cf	                            mov rdi, rcx	      2462	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	CALL_4
0x41ed	      0xe8b3d9ffff	                       call sym.foldFind	      2462	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	CALL_4
0x41f2	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2463	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x41f6	          0x4885c0	                           test rax, rax	      2463	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x41f9	            0x745f	                            je 0x400429a	      2463	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x41fb	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2464	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x41ff	          0x488b10	                    mov rdx, qword [rax]	      2464	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x4202	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2464	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x4206	        0x488b4008	                mov rax, qword [rax + 8]	      2464	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x420a	          0x4801d0	                            add rax, rdx	      2464	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x420d	        0x488d50ff	                      lea rdx, [rax - 1]	      2464	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x4211	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2464	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x4215	          0x488b00	                    mov rax, qword [rax]	      2464	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x4218	          0x4801d0	                            add rax, rdx	      2464	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x421b	    0x48898570ffff	             mov qword [rbp - 0x90], rax	      2464	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x4222	            0xeb36	                           jmp 0x400429a	      2464	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x4224	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2466	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x4228	          0x488b10	                    mov rdx, qword [rax]	      2466	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x422b	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2466	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x422f	        0x488b4008	                mov rax, qword [rax + 8]	      2466	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x4233	          0x4801c2	                            add rdx, rax	      2466	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x4236	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2466	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x423a	        0x488b4008	                mov rax, qword [rax + 8]	      2466	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x423e	          0x4839c2	                            cmp rdx, rax	      2466	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x4241	     0xf8fc3080000	                            jg 0x4004b4a	      2466	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x4247	          0x8b45a8	             mov eax, dword [rbp - 0x58]	      2466	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x424a	          0x3b4594	             cmp eax, dword [rbp - 0x6c]	      2466	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x424d	     0xf8cb7080000	                            jl 0x4004b4a	      2466	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x4253	    0xc745b0010000	               mov dword [rbp - 0x50], 1	      2467	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x425a	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2475	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x425e	          0x4885c0	                           test rax, rax	      2475	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4261	     0xf8507060000	                           jne 0x40048ae	      2475	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4267	          0x8b45a8	             mov eax, dword [rbp - 0x58]	      2476	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x426a	          0x3b4594	             cmp eax, dword [rbp - 0x6c]	      2476	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x426d	     0xf85ea050000	                           jne 0x400489d	      2476	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4273	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2477	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4277	        0x488b4018	            mov rax, qword [rax + 0x18] 	      2477	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x427b	    0x483b8570ffff	             cmp rax, qword [rbp - 0x90]	      2477	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4282	     0xf8dd5050000	                           jge 0x400489d	      2477	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4288	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2478	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x428c	          0x8b4028	            mov eax, dword [rax + 0x28] 	      2478	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x428f	            0x85c0	                           test eax, eax	      2478	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4291	     0xf85c6050000	                           jne 0x400489d	      2478	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4297	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2479	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x429b	          0x8b4030	            mov eax, dword [rax + 0x30] 	      2479	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x429e	          0x83f814	                           cmp eax, 0x14	      2479	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x42a1	     0xf8eb6050000	                           jle 0x400489d	      2479	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x42a7	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2480	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x42ab	        0x488b4008	                mov rax, qword [rax + 8]	      2480	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x42af	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	      2480	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x42b3	     0xf85b5050000	                           jne 0x40048ae	      2480	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x42b9	      0xe99f050000	                           jmp 0x400489d	      2486	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3
0x42be	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2490	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	IF_12
0x42c2	          0x8b4028	            mov eax, dword [rax + 0x28] 	      2490	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	IF_12
0x42c5	            0x85c0	                           test eax, eax	      2490	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	IF_12
0x42c7	            0x750c	                           jne 0x4004315	      2490	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	IF_12
0x42c9	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2490	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	IF_12
0x42cd	          0x8b4030	            mov eax, dword [rax + 0x30] 	      2490	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	IF_12
0x42d0	          0x83f814	                           cmp eax, 0x14	      2490	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	IF_12
0x42d3	            0x7f09	                            jg 0x400431e	      2490	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	IF_12
0x42d5	    0xc745b4000000	               mov dword [rbp - 0x4c], 0	      2491	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	IF_12
0x42dc	            0xeb07	                           jmp 0x4004325	      2491	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	IF_12
0x42de	    0xc745b4010000	               mov dword [rbp - 0x4c], 1	      2493	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3
0x42e5	        0x488d55b8	                   lea rdx, [rbp - 0x48]	      2498	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_5
0x42e9	        0x488b4d88	             mov rcx, qword [rbp - 0x78]	      2498	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_5
0x42ed	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2498	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_5
0x42f1	          0x4889ce	                            mov rsi, rcx	      2498	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_5
0x42f4	          0x4889c7	                            mov rdi, rax	      2498	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_5
0x42f7	      0xe8a9d8ffff	                       call sym.foldFind	      2498	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_5
0x42fc	            0x85c0	                           test eax, eax	      2498	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_5
0x42fe	     0xf85d1000000	                           jne 0x4004415	      2498	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_5
0x4304	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4308	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x430c	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4310	            0x8b00	                    mov eax, dword [rax]	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4312	          0x4863d0	                         movsxd rdx, eax	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4315	          0x4889d0	                            mov rax, rdx	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4318	          0x4801c0	                            add rax, rax	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x431b	          0x4801d0	                            add rax, rdx	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x431e	        0x48c1e004	                              shl rax, 4	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4322	        0x488d1401	                    lea rdx, [rcx + rax]	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4326	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x432a	          0x4839c2	                            cmp rdx, rax	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x432d	            0x7611	                           jbe 0x4004380	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x432f	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2500	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4333	          0x488b00	                    mov rax, qword [rax]	      2500	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4336	        0x483b45e8	             cmp rax, qword [rbp - 0x18]	      2500	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x433a	     0xf8e95000000	                           jle 0x4004415	      2500	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4340	          0x8b45b4	             mov eax, dword [rbp - 0x4c]	      2501	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_6
0x4343	            0x4898	                                    cdqe	      2501	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_6
0x4345	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      2501	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_6
0x4349	          0x4889d1	                            mov rcx, rdx	      2501	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_6
0x434c	          0x4829c1	                            sub rcx, rax	      2501	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_6
0x434f	        0x488d55b8	                   lea rdx, [rbp - 0x48]	      2501	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_6
0x4353	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2501	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_6
0x4357	          0x4889ce	                            mov rsi, rcx	      2501	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_6
0x435a	          0x4889c7	                            mov rdi, rax	      2501	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_6
0x435d	      0xe843d8ffff	                       call sym.foldFind	      2501	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_6
0x4362	            0x85c0	                           test eax, eax	      2501	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_6
0x4364	            0x756f	                           jne 0x4004415	      2501	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_6
0x4366	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2502	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x436a	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      2502	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x436e	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2502	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4372	            0x8b00	                    mov eax, dword [rax]	      2502	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4374	          0x4863d0	                         movsxd rdx, eax	      2502	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4377	          0x4889d0	                            mov rax, rdx	      2502	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x437a	          0x4801c0	                            add rax, rax	      2502	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x437d	          0x4801d0	                            add rax, rdx	      2502	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4380	        0x48c1e004	                              shl rax, 4	      2502	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4384	        0x488d1401	                    lea rdx, [rcx + rax]	      2502	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4388	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2502	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x438c	          0x4839c2	                            cmp rdx, rax	      2502	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x438f	     0xf869c030000	                           jbe 0x4004771	      2502	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4395	          0x8b45a8	             mov eax, dword [rbp - 0x58]	      2503	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4398	          0x3b4594	             cmp eax, dword [rbp - 0x6c]	      2503	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x439b	            0x7d14	                           jge 0x40043f1	      2503	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x439d	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2503	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x43a1	          0x488b10	                    mov rdx, qword [rax]	      2503	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x43a4	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2503	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x43a8	        0x488b4008	                mov rax, qword [rax + 8]	      2503	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x43ac	          0x4839c2	                            cmp rdx, rax	      2503	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x43af	            0x7c24	                            jl 0x4004415	      2503	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x43b1	          0x8b45a8	             mov eax, dword [rbp - 0x58]	      2504	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x43b4	          0x3b4594	             cmp eax, dword [rbp - 0x6c]	      2504	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x43b7	     0xf8c74030000	                            jl 0x4004771	      2504	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x43bd	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2505	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x43c1	          0x488b10	                    mov rdx, qword [rax]	      2505	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x43c4	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2505	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x43c8	        0x488b4018	            mov rax, qword [rax + 0x18] 	      2505	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x43cc	          0x4839c2	                            cmp rdx, rax	      2505	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x43cf	     0xf8f5c030000	                            jg 0x4004771	      2505	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x43d5	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2507	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14
0x43d9	          0x488b10	                    mov rdx, qword [rax]	      2507	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14
0x43dc	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2507	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14
0x43e0	        0x488b4008	                mov rax, qword [rax + 8]	      2507	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14
0x43e4	          0x4801c2	                            add rdx, rax	      2507	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14
0x43e7	          0x8b45b4	             mov eax, dword [rbp - 0x4c]	      2507	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14
0x43ea	            0x4898	                                    cdqe	      2507	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14
0x43ec	          0x4801d0	                            add rax, rdx	      2507	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14
0x43ef	        0x483b45e8	             cmp rax, qword [rbp - 0x18]	      2507	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14
0x43f3	     0xf8e97020000	                           jle 0x40046d0	      2507	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14
0x43f9	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2513	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_15
0x43fd	          0x488b00	                    mov rax, qword [rax]	      2513	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_15
0x4400	        0x483b45e8	             cmp rax, qword [rbp - 0x18]	      2513	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_15
0x4404	     0xf84e2010000	                            je 0x400462c	      2513	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_15
0x440a	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2517	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x440e	          0x488b00	                    mov rax, qword [rax]	      2517	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x4411	        0x483b4588	             cmp rax, qword [rbp - 0x78]	      2517	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x4415	     0xf8cb2000000	                            jl 0x400450d	      2517	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x441b	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2519	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17
0x441f	          0x488b00	                    mov rax, qword [rax]	      2519	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17
0x4422	        0x483b45e8	             cmp rax, qword [rbp - 0x18]	      2519	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17
0x4426	            0x7e2d	                           jle 0x4004495	      2519	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17
0x4428	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2523	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17
0x442c	          0x488b00	                    mov rax, qword [rax]	      2523	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17
0x442f	        0x482b45e8	             sub rax, qword [rbp - 0x18]	      2523	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17
0x4433	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      2521	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17	CALL_7
0x4437	        0x488d7a10	                   lea rdi, [rdx + 0x10]	      2521	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17	CALL_7
0x443b	    0x41b800000000	                              mov r8d, 0	      2521	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17	CALL_7
0x4441	          0x4889c1	                            mov rcx, rax	      2521	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17	CALL_7
0x4444	      0xbaffffff7f	                     mov edx, 0x7fffffff	      2521	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17	CALL_7
0x4449	      0xbe00000000	                              mov esi, 0	      2521	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17	CALL_7
0x444e	      0xe8cee1ffff	          call sym.foldMarkAdjustRecurse	      2521	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17	CALL_7
0x4453	            0xeb40	                           jmp 0x40044d5	      2521	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17	CALL_7
0x4455	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2530	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5
0x4459	          0x488b00	                    mov rax, qword [rax]	      2530	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5
0x445c	        0x482b45e8	             sub rax, qword [rbp - 0x18]	      2530	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5
0x4460	          0x4889c1	                            mov rcx, rax	      2530	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5
0x4463	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2528	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5
0x4467	          0x488b00	                    mov rax, qword [rax]	      2528	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5
0x446a	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      2528	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5
0x446e	          0x4829c2	                            sub rdx, rax	      2528	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5
0x4471	          0x4889d0	                            mov rax, rdx	      2528	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5
0x4474	        0x488d50ff	                      lea rdx, [rax - 1]	      2528	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5
0x4478	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2526	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5	CALL_8
0x447c	        0x4883c010	                           add rax, 0x10	      2526	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5	CALL_8
0x4480	          0x4989c8	                             mov r8, rcx	      2526	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5	CALL_8
0x4483	      0xb9ffffff7f	                     mov ecx, 0x7fffffff	      2526	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5	CALL_8
0x4488	      0xbe00000000	                              mov esi, 0	      2526	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5	CALL_8
0x448d	          0x4889c7	                            mov rdi, rax	      2526	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5	CALL_8
0x4490	      0xe88ce1ffff	          call sym.foldMarkAdjustRecurse	      2526	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5	CALL_8
0x4495	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2531	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x4499	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      2531	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x449d	        0x488b4a08	                mov rcx, qword [rdx + 8]	      2531	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x44a1	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      2531	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x44a5	          0x488b12	                    mov rdx, qword [rdx]	      2531	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x44a8	        0x482b55e8	             sub rdx, qword [rbp - 0x18]	      2531	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x44ac	          0x4801ca	                            add rdx, rcx	      2531	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x44af	        0x48895008	                mov qword [rax + 8], rdx	      2531	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x44b3	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2532	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x44b7	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      2532	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x44bb	          0x488910	                    mov qword [rax], rdx	      2532	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x44be	    0xc70500000000	               mov dword [0x04004508], 1	      2533	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x44c8	      0xe91f010000	                           jmp 0x400462c	      2533	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x44cd	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2535	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x44d1	          0x8b4028	            mov eax, dword [rax + 0x28] 	      2535	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x44d4	            0x85c0	                           test eax, eax	      2535	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x44d6	            0x7408	                            je 0x4004520	      2535	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x44d8	          0x8b45a8	             mov eax, dword [rbp - 0x58]	      2535	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x44db	          0x3b4594	             cmp eax, dword [rbp - 0x6c]	      2535	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x44de	            0x740e	                            je 0x400452e	      2535	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x44e0	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2536	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x44e4	        0x483b4588	             cmp rax, qword [rbp - 0x78]	      2536	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x44e8	     0xf84fe000000	                            je 0x400462c	      2536	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x44ee	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2557	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_19
0x44f2	        0x483b4588	             cmp rax, qword [rbp - 0x78]	      2557	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_19
0x44f6	            0x7412	                            je 0x400454a	      2557	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_19
0x44f8	        0x488b4588	             mov rax, qword [rbp - 0x78]	      2559	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_19
0x44fc	        0x488945d8	             mov qword [rbp - 0x28], rax	      2559	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_19
0x4500	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2560	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_19
0x4504	        0x488945e0	             mov qword [rbp - 0x20], rax	      2560	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_19
0x4508	            0xeb18	                           jmp 0x4004562	      2560	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_19
0x450a	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2564	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	ELSE_7
0x450e	        0x488b4008	                mov rax, qword [rax + 8]	      2564	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	ELSE_7
0x4512	        0x488945d8	             mov qword [rbp - 0x28], rax	      2564	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	ELSE_7
0x4516	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2565	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	ELSE_7
0x451a	        0x488b4008	                mov rax, qword [rax + 8]	      2565	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	ELSE_7
0x451e	        0x488945e0	             mov qword [rbp - 0x20], rax	      2565	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	ELSE_7
0x4522	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2568	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x4526	          0x488b00	                    mov rax, qword [rax]	      2568	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x4529	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x452d	          0x4829c2	                            sub rdx, rax	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x4530	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x4534	          0x488b00	                    mov rax, qword [rax]	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x4537	        0x488b4dd8	             mov rcx, qword [rbp - 0x28]	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x453b	          0x4829c1	                            sub rcx, rax	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x453e	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x4542	        0x4883c010	                           add rax, 0x10	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x4546	          0x4889ce	                            mov rsi, rcx	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x4549	          0x4889c7	                            mov rdi, rax	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x454c	      0xe8eb0c0000	                     call sym.foldRemove	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x4551	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2569	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x4555	          0x4889c2	                            mov rdx, rax	      2569	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x4558	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2569	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x455c	        0x488b4010	            mov rax, qword [rax + 0x10] 	      2569	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x4560	          0x4829c2	                            sub rdx, rax	      2569	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x4563	          0x4889d0	                            mov rax, rdx	      2569	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x4566	        0x48c1f804	                              sar rax, 4	      2569	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x456a	          0x4889c2	                            mov rdx, rax	      2569	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x456d	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	      2569	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x4577	        0x480fafc2	                           imul rax, rdx	      2569	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x457b	          0x8945ac	             mov dword [rbp - 0x54], eax	      2569	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x457e	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2570	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_10
0x4582	        0x488d48ff	                      lea rcx, [rax - 1]	      2570	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_10
0x4586	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      2570	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_10
0x458a	          0x8b75ac	             mov esi, dword [rbp - 0x54]	      2570	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_10
0x458d	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2570	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_10
0x4591	          0x4889c7	                            mov rdi, rax	      2570	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_10
0x4594	      0xe8f0090000	                      call sym.foldSplit	      2570	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_10
0x4599	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2571	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x459d	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      2571	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x45a1	          0x8b45ac	             mov eax, dword [rbp - 0x54]	      2571	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x45a4	            0x4898	                                    cdqe	      2571	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x45a6	        0x488d5001	                      lea rdx, [rax + 1]	      2571	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x45aa	          0x4889d0	                            mov rax, rdx	      2571	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x45ad	          0x4801c0	                            add rax, rax	      2571	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x45b0	          0x4801d0	                            add rax, rdx	      2571	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x45b3	        0x48c1e004	                              shl rax, 4	      2571	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x45b7	          0x4801c8	                            add rax, rcx	      2571	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x45ba	        0x488945b8	             mov qword [rbp - 0x48], rax	      2571	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x45be	    0x4881bd78ffff	               cmp qword [rbp - 0x88], 0	      2576	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_20
0x45c9	            0x741a	                            je 0x4004625	      2576	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_20
0x45cb	    0x4881bd78ffff	               cmp qword [rbp - 0x88], 0	      2577	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_20
0x45d6	            0x740d	                            je 0x4004625	      2577	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_20
0x45d8	    0x4881bd78ffff	               cmp qword [rbp - 0x88], 0	      2578	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_20
0x45e3	            0x7507	                           jne 0x400462c	      2578	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_20
0x45e5	    0xc745b0010000	               mov dword [rbp - 0x50], 1	      2579	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_20
0x45ec	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2582	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x45f0	          0x488b00	                    mov rax, qword [rax]	      2582	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x45f3	        0x483b4588	             cmp rax, qword [rbp - 0x78]	      2582	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x45f7	     0xf8570020000	                           jne 0x40048ad	      2582	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x45fd	        0x837db400	               cmp dword [rbp - 0x4c], 0	      2582	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x4601	     0xf8466020000	                            je 0x40048ad	      2582	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x4607	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2584	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x460b	          0x4889c2	                            mov rdx, rax	      2584	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x460e	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2584	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x4612	        0x488b4010	            mov rax, qword [rax + 0x10] 	      2584	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x4616	          0x4829c2	                            sub rdx, rax	      2584	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x4619	          0x4889d0	                            mov rax, rdx	      2584	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x461c	        0x48c1f804	                              sar rax, 4	      2584	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x4620	          0x4889c2	                            mov rdx, rax	      2584	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x4623	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	      2584	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x462d	        0x480fafc2	                           imul rax, rdx	      2584	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x4631	          0x8945ac	             mov dword [rbp - 0x54], eax	      2584	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x4634	        0x837dac00	               cmp dword [rbp - 0x54], 0	      2585	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22
0x4638	     0xf842f020000	                            je 0x40048ad	      2585	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22
0x463e	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2587	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22
0x4642	        0x4883e830	                           sub rax, 0x30	      2587	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22
0x4646	        0x488945c0	             mov qword [rbp - 0x40], rax	      2587	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22
0x464a	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2588	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23
0x464e	          0x488b10	                    mov rdx, qword [rax]	      2588	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23
0x4651	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2588	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23
0x4655	        0x488b4008	                mov rax, qword [rax + 8]	      2588	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23
0x4659	          0x4801c2	                            add rdx, rax	      2588	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23
0x465c	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2588	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23
0x4660	          0x488b00	                    mov rax, qword [rax]	      2588	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23
0x4663	          0x4839c2	                            cmp rdx, rax	      2588	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23
0x4666	     0xf8501020000	                           jne 0x40048ad	      2588	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23
0x466c	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      2590	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23	CALL_11
0x4670	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2590	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23	CALL_11
0x4674	        0x488b4d98	             mov rcx, qword [rbp - 0x68]	      2590	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23	CALL_11
0x4678	          0x4889ce	                            mov rsi, rcx	      2590	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23	CALL_11
0x467b	          0x4889c7	                            mov rdi, rax	      2590	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23	CALL_11
0x467e	      0xe8c2140000	                      call sym.foldMerge	      2590	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23	CALL_11
0x4683	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2591	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23
0x4687	        0x488945b8	             mov qword [rbp - 0x48], rax	      2591	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23
0x468b	      0xe9dd010000	                           jmp 0x40048ad	      2595	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14
0x4690	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2597	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24
0x4694	          0x488b00	                    mov rax, qword [rax]	      2597	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24
0x4697	        0x483b4588	             cmp rax, qword [rbp - 0x78]	      2597	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24
0x469b	            0x7c44	                            jl 0x4004721	      2597	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24
0x469d	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2603	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24
0x46a1	          0x4889c2	                            mov rdx, rax	      2603	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24
0x46a4	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2603	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24
0x46a8	        0x488b4010	            mov rax, qword [rax + 0x10] 	      2603	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24
0x46ac	          0x4829c2	                            sub rdx, rax	      2603	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24
0x46af	          0x4889d0	                            mov rax, rdx	      2603	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24
0x46b2	        0x48c1f804	                              sar rax, 4	      2603	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24
0x46b6	          0x4889c2	                            mov rdx, rax	      2603	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24
0x46b9	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	      2603	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24
0x46c3	        0x480fafc2	                           imul rax, rdx	      2603	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24
0x46c7	            0x89c1	                            mov ecx, eax	      2602	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24	CALL_12
0x46c9	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2602	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24	CALL_12
0x46cd	      0xba01000000	                              mov edx, 1	      2602	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24	CALL_12
0x46d2	            0x89ce	                            mov esi, ecx	      2602	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24	CALL_12
0x46d4	          0x4889c7	                            mov rdi, rax	      2602	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24	CALL_12
0x46d7	      0xe8cbdbffff	                call sym.deleteFoldEntry	      2602	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24	CALL_12
0x46dc	      0xe97c010000	                           jmp 0x400489d	      2602	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24	CALL_12
0x46e1	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2609	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8
0x46e5	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      2609	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8
0x46e9	          0x488b12	                    mov rdx, qword [rdx]	      2609	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8
0x46ec	        0x488b4d88	             mov rcx, qword [rbp - 0x78]	      2609	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8
0x46f0	          0x4829d1	                            sub rcx, rdx	      2609	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8
0x46f3	          0x4889ca	                            mov rdx, rcx	      2609	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8
0x46f6	        0x48895008	                mov qword [rax + 8], rdx	      2609	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8
0x46fa	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2611	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8
0x46fe	        0x488b4008	                mov rax, qword [rax + 8]	      2611	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8
0x4702	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      2610	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8	CALL_13
0x4706	        0x488d7a10	                   lea rdi, [rdx + 0x10]	      2610	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8	CALL_13
0x470a	    0x41b800000000	                              mov r8d, 0	      2610	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8	CALL_13
0x4710	      0xb9ffffff7f	                     mov ecx, 0x7fffffff	      2610	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8	CALL_13
0x4715	      0xbaffffff7f	                     mov edx, 0x7fffffff	      2610	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8	CALL_13
0x471a	          0x4889c6	                            mov rsi, rax	      2610	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8	CALL_13
0x471d	      0xe8ffdeffff	          call sym.foldMarkAdjustRecurse	      2610	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8	CALL_13
0x4722	    0xc70500000000	               mov dword [0x0400476c], 1	      2613	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8
0x472c	      0xe92c010000	                           jmp 0x400489d	      2597	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24
0x4731	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2620	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4735	          0x4889c2	                            mov rdx, rax	      2620	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4738	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2620	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x473c	        0x488b4010	            mov rax, qword [rax + 0x10] 	      2620	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4740	          0x4829c2	                            sub rdx, rax	      2620	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4743	          0x4889d0	                            mov rax, rdx	      2620	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4746	        0x48c1f804	                              sar rax, 4	      2620	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x474a	          0x4889c2	                            mov rdx, rax	      2620	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x474d	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	      2620	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4757	        0x480fafc2	                           imul rax, rdx	      2620	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x475b	          0x8945ac	             mov dword [rbp - 0x54], eax	      2620	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x475e	          0x8b55ac	             mov edx, dword [rbp - 0x54]	      2621	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_25	CALL_14
0x4761	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2621	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_25	CALL_14
0x4765	            0x89d6	                            mov esi, edx	      2621	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_25	CALL_14
0x4767	          0x4889c7	                            mov rdi, rax	      2621	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_25	CALL_14
0x476a	      0xe85b070000	                     call sym.foldInsert	      2621	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_25	CALL_14
0x476f	          0x83f801	                              cmp eax, 1	      2621	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_25	CALL_14
0x4772	            0x740c	                            je 0x40047c0	      2621	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_25	CALL_14
0x4774	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	      2622	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_25
0x477b	      0xe934070000	                           jmp 0x4004ef4	      2622	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_25
0x4780	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2623	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4784	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      2623	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4788	          0x8b45ac	             mov eax, dword [rbp - 0x54]	      2623	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x478b	          0x4863d0	                         movsxd rdx, eax	      2623	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x478e	          0x4889d0	                            mov rax, rdx	      2623	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4791	          0x4801c0	                            add rax, rax	      2623	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4794	          0x4801d0	                            add rax, rdx	      2623	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4797	        0x48c1e004	                              shl rax, 4	      2623	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x479b	          0x4801c8	                            add rax, rcx	      2623	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x479e	        0x488945b8	             mov qword [rbp - 0x48], rax	      2623	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x47a2	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2626	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x47a6	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      2626	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x47aa	          0x488910	                    mov qword [rax], rdx	      2626	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x47ad	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2627	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x47b1	    0x488b9570ffff	             mov rdx, qword [rbp - 0x90]	      2627	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x47b8	        0x482b55e8	             sub rdx, qword [rbp - 0x18]	      2627	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x47bc	        0x4883c201	                              add rdx, 1	      2627	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x47c0	        0x48895008	                mov qword [rax + 8], rdx	      2627	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x47c4	        0x837d1000	               cmp dword [rbp + 0x10], 0	      2631	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_26
0x47c8	            0x7518	                           jne 0x4004822	      2631	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_26
0x47ca	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2633	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_26
0x47ce	          0x488b00	                    mov rax, qword [rax]	      2633	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_26
0x47d1	    0xc68020010000	               mov byte [rax + 0x120], 1	      2633	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_26
0x47d8	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2634	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_26
0x47dc	        0xc6402800	                mov byte [rax + 0x28], 0	      2634	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_26
0x47e0	            0xeb39	                           jmp 0x400485b	      2634	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_26
0x47e2	        0x837dac00	               cmp dword [rbp - 0x54], 0	      2636	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27
0x47e6	            0x7f20	                            jg 0x4004848	      2636	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27
0x47e8	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2638	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27
0x47ec	          0x8b5510	            mov edx, dword [rbp + 0x10] 	      2638	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27
0x47ef	          0x885028	               mov byte [rax + 0x28], dl	      2638	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27
0x47f2	        0x837d1002	               cmp dword [rbp + 0x10], 2	      2639	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27	IF_28
0x47f6	            0x7423	                            je 0x400485b	      2639	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27	IF_28
0x47f8	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2640	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27	IF_28
0x47fc	          0x488b00	                    mov rax, qword [rax]	      2640	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27	IF_28
0x47ff	    0xc68020010000	               mov byte [rax + 0x120], 1	      2640	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27	IF_28
0x4806	            0xeb13	                           jmp 0x400485b	      2640	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27	IF_28
0x4808	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2643	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_11
0x480c	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      2643	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_11
0x4810	        0x4883ea30	                           sub rdx, 0x30	      2643	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_11
0x4814	         0xfb65228	           movzx edx, byte [rdx + 0x28] 	      2643	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_11
0x4818	          0x885028	               mov byte [rax + 0x28], dl	      2643	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_11
0x481b	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2644	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x481f	        0xc6402902	                mov byte [rax + 0x29], 2	      2644	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4823	    0x4881bd78ffff	               cmp qword [rbp - 0x88], 0	      2647	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_29
0x482e	            0x741a	                            je 0x400488a	      2647	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_29
0x4830	    0x4881bd78ffff	               cmp qword [rbp - 0x88], 0	      2648	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_29
0x483b	            0x740d	                            je 0x400488a	      2648	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_29
0x483d	    0x4881bd78ffff	               cmp qword [rbp - 0x88], 0	      2649	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_29
0x4848	            0x7507	                           jne 0x4004891	      2649	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_29
0x484a	    0xc745b0010000	               mov dword [rbp - 0x50], 1	      2650	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_29
0x4851	    0xc70500000000	               mov dword [0x0400489b], 1	      2651	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x485b	            0xeb11	                           jmp 0x40048ae	      2652	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x485d	    0x8b0500000000	            mov eax, dword [0x040048a3] 	      2486	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3
0x4863	            0x85c0	                           test eax, eax	      2486	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3
0x4865	     0xf8453faffff	                            je 0x40042fe	      2486	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3
0x486b	            0xeb01	                           jmp 0x40048ae	      2486	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3
0x486d	              0x90	                                     nop	      2595	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14
0x486e	          0x8b45a8	             mov eax, dword [rbp - 0x58]	      2657	fold.c	FUNCTION_59	WHILE_1	IF_30
0x4871	          0x3b4594	             cmp eax, dword [rbp - 0x6c]	      2657	fold.c	FUNCTION_59	WHILE_1	IF_30
0x4874	     0xf8c90020000	                            jl 0x4004b4a	      2657	fold.c	FUNCTION_59	WHILE_1	IF_30
0x487a	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2657	fold.c	FUNCTION_59	WHILE_1	IF_30
0x487e	        0x488b4008	                mov rax, qword [rax + 8]	      2657	fold.c	FUNCTION_59	WHILE_1	IF_30
0x4882	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	      2657	fold.c	FUNCTION_59	WHILE_1	IF_30
0x4886	     0xf8f7e020000	                            jg 0x4004b4a	      2657	fold.c	FUNCTION_59	WHILE_1	IF_30
0x488c	          0x8b45a8	             mov eax, dword [rbp - 0x58]	      2670	fold.c	FUNCTION_59	WHILE_1	IF_31
0x488f	          0x3b4594	             cmp eax, dword [rbp - 0x6c]	      2670	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4892	     0xf8e87010000	                           jle 0x4004a5f	      2670	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4898	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2670	fold.c	FUNCTION_59	WHILE_1	IF_31
0x489c	          0x4885c0	                           test rax, rax	      2670	fold.c	FUNCTION_59	WHILE_1	IF_31
0x489f	     0xf847a010000	                            je 0x4004a5f	      2670	fold.c	FUNCTION_59	WHILE_1	IF_31
0x48a5	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2676	fold.c	FUNCTION_59	WHILE_1	IF_31	IF_32
0x48a9	        0x488b4008	                mov rax, qword [rax + 8]	      2676	fold.c	FUNCTION_59	WHILE_1	IF_31	IF_32
0x48ad	    0x483b8570ffff	             cmp rax, qword [rbp - 0x90]	      2676	fold.c	FUNCTION_59	WHILE_1	IF_31	IF_32
0x48b4	            0x7e0f	                           jle 0x4004905	      2676	fold.c	FUNCTION_59	WHILE_1	IF_31	IF_32
0x48b6	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2677	fold.c	FUNCTION_59	WHILE_1	IF_31	IF_32
0x48ba	        0x488b4008	                mov rax, qword [rax + 8]	      2677	fold.c	FUNCTION_59	WHILE_1	IF_31	IF_32
0x48be	    0x48898570ffff	             mov qword [rbp - 0x90], rax	      2677	fold.c	FUNCTION_59	WHILE_1	IF_31	IF_32
0x48c5	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2681	fold.c	FUNCTION_59	WHILE_1	IF_31
0x48c9	        0x488b5018	            mov rdx, qword [rax + 0x18] 	      2681	fold.c	FUNCTION_59	WHILE_1	IF_31
0x48cd	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2681	fold.c	FUNCTION_59	WHILE_1	IF_31
0x48d1	          0x488b00	                    mov rax, qword [rax]	      2681	fold.c	FUNCTION_59	WHILE_1	IF_31
0x48d4	          0x4829c2	                            sub rdx, rax	      2681	fold.c	FUNCTION_59	WHILE_1	IF_31
0x48d7	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2681	fold.c	FUNCTION_59	WHILE_1	IF_31
0x48db	        0x48895008	                mov qword [rax + 8], rdx	      2681	fold.c	FUNCTION_59	WHILE_1	IF_31
0x48df	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2682	fold.c	FUNCTION_59	WHILE_1	IF_31
0x48e3	        0x488b5010	            mov rdx, qword [rax + 0x10] 	      2682	fold.c	FUNCTION_59	WHILE_1	IF_31
0x48e7	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2682	fold.c	FUNCTION_59	WHILE_1	IF_31
0x48eb	          0x488b00	                    mov rax, qword [rax]	      2682	fold.c	FUNCTION_59	WHILE_1	IF_31
0x48ee	          0x4801c2	                            add rdx, rax	      2682	fold.c	FUNCTION_59	WHILE_1	IF_31
0x48f1	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2682	fold.c	FUNCTION_59	WHILE_1	IF_31
0x48f5	        0x48895010	             mov qword [rax + 0x10], rdx	      2682	fold.c	FUNCTION_59	WHILE_1	IF_31
0x48f9	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2683	fold.c	FUNCTION_59	WHILE_1	IF_31
0x48fd	          0x4889c2	                            mov rdx, rax	      2683	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4900	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2683	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4904	        0x488b4010	            mov rax, qword [rax + 0x10] 	      2683	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4908	          0x4829c2	                            sub rdx, rax	      2683	fold.c	FUNCTION_59	WHILE_1	IF_31
0x490b	          0x4889d0	                            mov rax, rdx	      2683	fold.c	FUNCTION_59	WHILE_1	IF_31
0x490e	        0x48c1f804	                              sar rax, 4	      2683	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4912	          0x4889c2	                            mov rdx, rax	      2683	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4915	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	      2683	fold.c	FUNCTION_59	WHILE_1	IF_31
0x491f	        0x480fafc2	                           imul rax, rdx	      2683	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4923	          0x8945ac	             mov dword [rbp - 0x54], eax	      2683	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4926	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2686	fold.c	FUNCTION_59	WHILE_1	IF_31
0x492a	         0xfb64028	           movzx eax, byte [rax + 0x28] 	      2686	fold.c	FUNCTION_59	WHILE_1	IF_31
0x492e	           0xfbed0	                           movsx edx, al	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4931	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2686	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4935	          0x488b00	                    mov rax, qword [rax]	      2686	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4938	    0x488b8d70ffff	             mov rcx, qword [rbp - 0x90]	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x493f	          0x4829c1	                            sub rcx, rax	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4942	          0x4989c8	                             mov r8, rcx	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4945	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2685	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4949	          0x488b00	                    mov rax, qword [rax]	      2685	fold.c	FUNCTION_59	WHILE_1	IF_31
0x494c	        0x488b4dd0	             mov rcx, qword [rbp - 0x30]	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4950	          0x4829c1	                            sub rcx, rax	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4953	          0x4989ca	                            mov r10, rcx	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4956	          0x8b4594	             mov eax, dword [rbp - 0x6c]	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4959	          0x8d7001	                      lea esi, [rax + 1]	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x495c	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4960	        0x488d7810	                   lea rdi, [rax + 0x10]	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4964	    0x488b8d78ffff	             mov rcx, qword [rbp - 0x88]	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x496b	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x496f	        0x4883ec08	                              sub rsp, 8	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4973	              0x52	                                push rdx	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4974	          0x4d89c1	                              mov r9, r8	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4977	          0x4989c8	                             mov r8, rcx	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x497a	          0x4889c1	                            mov rcx, rax	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x497d	          0x4c89d2	                            mov rdx, r10	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4980	      0xe810f6ffff	          call sym.foldUpdateIEMSRecurse	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4985	        0x4883c410	                           add rsp, 0x10	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4989	    0x48898570ffff	             mov qword [rbp - 0x90], rax	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4990	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2687	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4994	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      2687	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4998	          0x8b45ac	             mov eax, dword [rbp - 0x54]	      2687	fold.c	FUNCTION_59	WHILE_1	IF_31
0x499b	          0x4863d0	                         movsxd rdx, eax	      2687	fold.c	FUNCTION_59	WHILE_1	IF_31
0x499e	          0x4889d0	                            mov rax, rdx	      2687	fold.c	FUNCTION_59	WHILE_1	IF_31
0x49a1	          0x4801c0	                            add rax, rax	      2687	fold.c	FUNCTION_59	WHILE_1	IF_31
0x49a4	          0x4801d0	                            add rax, rdx	      2687	fold.c	FUNCTION_59	WHILE_1	IF_31
0x49a7	        0x48c1e004	                              shl rax, 4	      2687	fold.c	FUNCTION_59	WHILE_1	IF_31
0x49ab	          0x4801c8	                            add rax, rcx	      2687	fold.c	FUNCTION_59	WHILE_1	IF_31
0x49ae	        0x488945b8	             mov qword [rbp - 0x48], rax	      2687	fold.c	FUNCTION_59	WHILE_1	IF_31
0x49b2	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2688	fold.c	FUNCTION_59	WHILE_1	IF_31
0x49b6	        0x488b5008	                mov rdx, qword [rax + 8]	      2688	fold.c	FUNCTION_59	WHILE_1	IF_31
0x49ba	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2688	fold.c	FUNCTION_59	WHILE_1	IF_31
0x49be	          0x488b00	                    mov rax, qword [rax]	      2688	fold.c	FUNCTION_59	WHILE_1	IF_31
0x49c1	          0x4801c2	                            add rdx, rax	      2688	fold.c	FUNCTION_59	WHILE_1	IF_31
0x49c4	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2688	fold.c	FUNCTION_59	WHILE_1	IF_31
0x49c8	        0x48895008	                mov qword [rax + 8], rdx	      2688	fold.c	FUNCTION_59	WHILE_1	IF_31
0x49cc	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2689	fold.c	FUNCTION_59	WHILE_1	IF_31
0x49d0	        0x488b5018	            mov rdx, qword [rax + 0x18] 	      2689	fold.c	FUNCTION_59	WHILE_1	IF_31
0x49d4	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2689	fold.c	FUNCTION_59	WHILE_1	IF_31
0x49d8	          0x488b00	                    mov rax, qword [rax]	      2689	fold.c	FUNCTION_59	WHILE_1	IF_31
0x49db	          0x4801c2	                            add rdx, rax	      2689	fold.c	FUNCTION_59	WHILE_1	IF_31
0x49de	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2689	fold.c	FUNCTION_59	WHILE_1	IF_31
0x49e2	        0x48895018	             mov qword [rax + 0x18], rdx	      2689	fold.c	FUNCTION_59	WHILE_1	IF_31
0x49e6	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2690	fold.c	FUNCTION_59	WHILE_1	IF_31
0x49ea	        0x488b5010	            mov rdx, qword [rax + 0x10] 	      2690	fold.c	FUNCTION_59	WHILE_1	IF_31
0x49ee	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2690	fold.c	FUNCTION_59	WHILE_1	IF_31
0x49f2	          0x488b00	                    mov rax, qword [rax]	      2690	fold.c	FUNCTION_59	WHILE_1	IF_31
0x49f5	          0x4829c2	                            sub rdx, rax	      2690	fold.c	FUNCTION_59	WHILE_1	IF_31
0x49f8	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2690	fold.c	FUNCTION_59	WHILE_1	IF_31
0x49fc	        0x48895010	             mov qword [rax + 0x10], rdx	      2690	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4a00	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2691	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4a04	          0x488b00	                    mov rax, qword [rax]	      2691	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4a07	    0x48018570ffff	            add qword [rbp - 0x90], rax 	      2691	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4a0e	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2692	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4a12	        0x488b4008	                mov rax, qword [rax + 8]	      2692	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4a16	        0x488945d0	             mov qword [rbp - 0x30], rax	      2692	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4a1a	      0xe9d7000000	                           jmp 0x4004b36	      2692	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4a1f	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2704	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4a23	        0x488b5018	            mov rdx, qword [rax + 0x18] 	      2704	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4a27	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2704	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4a2b	        0x48895008	                mov qword [rax + 8], rdx	      2704	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4a2f	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2705	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4a33	        0x488b4008	                mov rax, qword [rax + 8]	      2705	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4a37	        0x4883c001	                              add rax, 1	      2705	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4a3b	        0x488945c8	             mov qword [rbp - 0x38], rax	      2705	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4a3f	            0xeb73	                           jmp 0x4004af4	      2706	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4a41	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2709	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4a45	        0x488b4008	                mov rax, qword [rax + 8]	      2709	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4a49	    0x488905000000	            mov qword [0x04004a90], rax 	      2709	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4a50	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2710	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4a54	          0x8b4020	            mov eax, dword [rax + 0x20] 	      2710	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4a57	    0x890500000000	            mov dword [0x04004a9d], eax 	      2710	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4a5d	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2712	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_33
0x4a61	        0x488b4008	                mov rax, qword [rax + 8]	      2712	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_33
0x4a65	        0x488d5001	                      lea rdx, [rax + 1]	      2712	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_33
0x4a69	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2712	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_33
0x4a6d	        0x48895008	                mov qword [rax + 8], rdx	      2712	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_33
0x4a71	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2712	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_33
0x4a75	        0x488b4008	                mov rax, qword [rax + 8]	      2712	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_33
0x4a79	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	      2712	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_33
0x4a7d	            0x7f41	                            jg 0x4004b00	      2712	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_33
0x4a7f	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2714	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4a83	          0x8b5024	            mov edx, dword [rax + 0x24] 	      2714	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4a86	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2714	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4a8a	          0x895020	             mov dword [rax + 0x20], edx	      2714	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4a8d	        0x488b5580	             mov rdx, qword [rbp - 0x80]	      2715	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	CALL_16
0x4a91	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      2715	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	CALL_16
0x4a98	          0x4889d7	                            mov rdi, rdx	      2715	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	CALL_16
0x4a9b	            0xffd0	                                call rax	      2715	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	CALL_16
0x4a9d	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2716	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_34
0x4aa1	          0x8b4020	            mov eax, dword [rax + 0x20] 	      2716	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_34
0x4aa4	            0x85c0	                           test eax, eax	      2716	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_34
0x4aa6	            0x7919	                           jns 0x4004b01	      2716	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_34
0x4aa8	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2716	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_34
0x4aac	          0x8b4030	            mov eax, dword [rax + 0x30] 	      2716	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_34
0x4aaf	          0x83f814	                           cmp eax, 0x14	      2716	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_34
0x4ab2	            0x7e0d	                           jle 0x4004b01	      2716	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_34
0x4ab4	    0x8b0500000000	            mov eax, dword [0x04004afa] 	      2706	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4aba	            0x85c0	                           test eax, eax	      2706	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4abc	            0x7483	                            je 0x4004a81	      2706	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4abe	            0xeb01	                           jmp 0x4004b01	      2706	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4ac0	              0x90	                                     nop	      2713	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_33
0x4ac1	    0x48c705000000	               mov qword [0x04004b0c], 0	      2719	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4acc	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2720	fold.c	FUNCTION_59	WHILE_1	ELSE_12	IF_35
0x4ad0	        0x488b4008	                mov rax, qword [rax + 8]	      2720	fold.c	FUNCTION_59	WHILE_1	ELSE_12	IF_35
0x4ad4	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	      2720	fold.c	FUNCTION_59	WHILE_1	ELSE_12	IF_35
0x4ad8	            0x7f2f	                            jg 0x4004b49	      2720	fold.c	FUNCTION_59	WHILE_1	ELSE_12	IF_35
0x4ada	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2725	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4ade	        0x488b5008	                mov rdx, qword [rax + 8]	      2725	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4ae2	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2725	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4ae6	        0x48895018	             mov qword [rax + 0x18], rdx	      2725	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4aea	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2726	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4aee	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      2726	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4af2	        0x48895008	                mov qword [rax + 8], rdx	      2726	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4af6	    0x8b0500000000	            mov eax, dword [0x04004b3c] 	      2418	fold.c	FUNCTION_59	WHILE_1
0x4afc	            0x85c0	                           test eax, eax	      2418	fold.c	FUNCTION_59	WHILE_1
0x4afe	     0xf84aef5ffff	                            je 0x40040f2	      2418	fold.c	FUNCTION_59	WHILE_1
0x4b04	            0xeb04	                           jmp 0x4004b4a	      2418	fold.c	FUNCTION_59	WHILE_1
0x4b06	              0x90	                                     nop	      2445	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4b07	            0xeb01	                           jmp 0x4004b4a	      2445	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4b09	              0x90	                                     nop	      2721	fold.c	FUNCTION_59	WHILE_1	ELSE_12	IF_35
0x4b0a	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2730	fold.c	FUNCTION_59	IF_36
0x4b0e	          0x4885c0	                           test rax, rax	      2730	fold.c	FUNCTION_59	IF_36
0x4b11	            0x750c	                           jne 0x4004b5f	      2730	fold.c	FUNCTION_59	IF_36
0x4b13	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	      2731	fold.c	FUNCTION_59	IF_36
0x4b1a	      0xe995030000	                           jmp 0x4004ef4	      2731	fold.c	FUNCTION_59	IF_36
0x4b1f	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2740	fold.c	FUNCTION_59	IF_37
0x4b23	        0x488b5008	                mov rdx, qword [rax + 8]	      2740	fold.c	FUNCTION_59	IF_37
0x4b27	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2740	fold.c	FUNCTION_59	IF_37
0x4b2b	        0x488b4808	                mov rcx, qword [rax + 8]	      2740	fold.c	FUNCTION_59	IF_37
0x4b2f	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2740	fold.c	FUNCTION_59	IF_37
0x4b33	          0x488b00	                    mov rax, qword [rax]	      2740	fold.c	FUNCTION_59	IF_37
0x4b36	          0x4829c1	                            sub rcx, rax	      2740	fold.c	FUNCTION_59	IF_37
0x4b39	          0x4889c8	                            mov rax, rcx	      2740	fold.c	FUNCTION_59	IF_37
0x4b3c	          0x4839c2	                            cmp rdx, rax	      2740	fold.c	FUNCTION_59	IF_37
0x4b3f	            0x7d2f	                           jge 0x4004bb0	      2740	fold.c	FUNCTION_59	IF_37
0x4b41	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2742	fold.c	FUNCTION_59	IF_37
0x4b45	        0x488b5580	             mov rdx, qword [rbp - 0x80]	      2742	fold.c	FUNCTION_59	IF_37
0x4b49	        0x488b4a08	                mov rcx, qword [rdx + 8]	      2742	fold.c	FUNCTION_59	IF_37
0x4b4d	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      2742	fold.c	FUNCTION_59	IF_37
0x4b51	          0x488b12	                    mov rdx, qword [rdx]	      2742	fold.c	FUNCTION_59	IF_37
0x4b54	          0x4829d1	                            sub rcx, rdx	      2742	fold.c	FUNCTION_59	IF_37
0x4b57	          0x4889ca	                            mov rdx, rcx	      2742	fold.c	FUNCTION_59	IF_37
0x4b5a	        0x48895008	                mov qword [rax + 8], rdx	      2742	fold.c	FUNCTION_59	IF_37
0x4b5e	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2743	fold.c	FUNCTION_59	IF_37
0x4b62	        0xc6402902	                mov byte [rax + 0x29], 2	      2743	fold.c	FUNCTION_59	IF_37
0x4b66	    0xc70500000000	               mov dword [0x04004bb0], 1	      2744	fold.c	FUNCTION_59	IF_37
0x4b70	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2750	fold.c	FUNCTION_59
0x4b74	        0x488b4008	                mov rax, qword [rax + 8]	      2750	fold.c	FUNCTION_59
0x4b78	        0x488d50ff	                      lea rdx, [rax - 1]	      2750	fold.c	FUNCTION_59
0x4b7c	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2750	fold.c	FUNCTION_59
0x4b80	          0x488b00	                    mov rax, qword [rax]	      2750	fold.c	FUNCTION_59
0x4b83	          0x4829c2	                            sub rdx, rax	      2749	fold.c	FUNCTION_59	CALL_17
0x4b86	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2749	fold.c	FUNCTION_59	CALL_17
0x4b8a	          0x488b00	                    mov rax, qword [rax]	      2749	fold.c	FUNCTION_59	CALL_17
0x4b8d	        0x488b4dd0	             mov rcx, qword [rbp - 0x30]	      2749	fold.c	FUNCTION_59	CALL_17
0x4b91	          0x4829c1	                            sub rcx, rax	      2749	fold.c	FUNCTION_59	CALL_17
0x4b94	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2749	fold.c	FUNCTION_59	CALL_17
0x4b98	        0x4883c010	                           add rax, 0x10	      2749	fold.c	FUNCTION_59	CALL_17
0x4b9c	          0x4889ce	                            mov rsi, rcx	      2749	fold.c	FUNCTION_59	CALL_17
0x4b9f	          0x4889c7	                            mov rdi, rax	      2749	fold.c	FUNCTION_59	CALL_17
0x4ba2	      0xe895060000	                     call sym.foldRemove	      2749	fold.c	FUNCTION_59	CALL_17
0x4ba7	          0x8b45a8	             mov eax, dword [rbp - 0x58]	      2752	fold.c	FUNCTION_59	IF_38
0x4baa	          0x3b4594	             cmp eax, dword [rbp - 0x6c]	      2752	fold.c	FUNCTION_59	IF_38
0x4bad	     0xf8d45010000	                           jge 0x4004d38	      2752	fold.c	FUNCTION_59	IF_38
0x4bb3	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2755	fold.c	FUNCTION_59	IF_38	IF_39
0x4bb7	        0x488b5008	                mov rdx, qword [rax + 8]	      2755	fold.c	FUNCTION_59	IF_38	IF_39
0x4bbb	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2755	fold.c	FUNCTION_59	IF_38	IF_39
0x4bbf	        0x488b4808	                mov rcx, qword [rax + 8]	      2755	fold.c	FUNCTION_59	IF_38	IF_39
0x4bc3	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2755	fold.c	FUNCTION_59	IF_38	IF_39
0x4bc7	          0x488b00	                    mov rax, qword [rax]	      2755	fold.c	FUNCTION_59	IF_38	IF_39
0x4bca	          0x4829c1	                            sub rcx, rax	      2755	fold.c	FUNCTION_59	IF_38	IF_39
0x4bcd	          0x4889c8	                            mov rax, rcx	      2755	fold.c	FUNCTION_59	IF_38	IF_39
0x4bd0	          0x4839c2	                            cmp rdx, rax	      2755	fold.c	FUNCTION_59	IF_38	IF_39
0x4bd3	     0xf841f010000	                            je 0x4004d38	      2755	fold.c	FUNCTION_59	IF_38	IF_39
0x4bd9	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2757	fold.c	FUNCTION_59	IF_38	IF_39	IF_40
0x4bdd	          0x488b10	                    mov rdx, qword [rax]	      2757	fold.c	FUNCTION_59	IF_38	IF_39	IF_40
0x4be0	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2757	fold.c	FUNCTION_59	IF_38	IF_39	IF_40
0x4be4	        0x488b4008	                mov rax, qword [rax + 8]	      2757	fold.c	FUNCTION_59	IF_38	IF_39	IF_40
0x4be8	          0x4801d0	                            add rax, rdx	      2757	fold.c	FUNCTION_59	IF_38	IF_39	IF_40
0x4beb	        0x4883e801	                              sub rax, 1	      2757	fold.c	FUNCTION_59	IF_38	IF_39	IF_40
0x4bef	    0x483b8570ffff	             cmp rax, qword [rbp - 0x90]	      2757	fold.c	FUNCTION_59	IF_38	IF_39	IF_40
0x4bf6	     0xf8ed5000000	                           jle 0x4004d11	      2757	fold.c	FUNCTION_59	IF_38	IF_39	IF_40
0x4bfc	    0x4881bd78ffff	               cmp qword [rbp - 0x88], 0	      2760	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4c07	            0x741a	                            je 0x4004c63	      2760	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4c09	    0x4881bd78ffff	               cmp qword [rbp - 0x88], 0	      2761	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4c14	            0x740d	                            je 0x4004c63	      2761	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4c16	    0x4881bd78ffff	               cmp qword [rbp - 0x88], 0	      2762	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4c21	            0x753f	                           jne 0x4004ca2	      2762	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4c23	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2766	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4c27	          0x488b10	                    mov rdx, qword [rax]	      2766	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4c2a	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2766	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4c2e	        0x488b4008	                mov rax, qword [rax + 8]	      2766	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4c32	          0x4801d0	                            add rax, rdx	      2766	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4c35	        0x4883e801	                              sub rax, 1	      2766	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4c39	    0x48898570ffff	             mov qword [rbp - 0x90], rax	      2766	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4c40	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2767	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4c44	        0x488b5580	             mov rdx, qword [rbp - 0x80]	      2767	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4c48	        0x488b4a08	                mov rcx, qword [rdx + 8]	      2767	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4c4c	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      2767	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4c50	          0x488b12	                    mov rdx, qword [rdx]	      2767	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4c53	          0x4829d1	                            sub rcx, rdx	      2767	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4c56	          0x4889ca	                            mov rdx, rcx	      2767	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4c59	        0x48895008	                mov qword [rax + 8], rdx	      2767	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4c5d	      0xe98c000000	                           jmp 0x4004d2e	      2767	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4c62	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2773	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4c66	          0x4889c2	                            mov rdx, rax	      2773	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4c69	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2773	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4c6d	        0x488b4010	            mov rax, qword [rax + 0x10] 	      2773	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4c71	          0x4829c2	                            sub rdx, rax	      2773	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4c74	          0x4889d0	                            mov rax, rdx	      2773	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4c77	        0x48c1f804	                              sar rax, 4	      2773	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4c7b	          0x4889c2	                            mov rdx, rax	      2773	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4c7e	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	      2773	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4c88	        0x480fafc2	                           imul rax, rdx	      2773	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4c8c	          0x8945ac	             mov dword [rbp - 0x54], eax	      2773	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4c8f	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2774	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13	CALL_18
0x4c93	        0x488b5008	                mov rdx, qword [rax + 8]	      2774	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13	CALL_18
0x4c97	    0x488b8d70ffff	             mov rcx, qword [rbp - 0x90]	      2774	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13	CALL_18
0x4c9e	          0x8b75ac	             mov esi, dword [rbp - 0x54]	      2774	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13	CALL_18
0x4ca1	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2774	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13	CALL_18
0x4ca5	          0x4889c7	                            mov rdi, rax	      2774	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13	CALL_18
0x4ca8	      0xe8dc020000	                      call sym.foldSplit	      2774	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13	CALL_18
0x4cad	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2775	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4cb1	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      2775	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4cb5	          0x8b45ac	             mov eax, dword [rbp - 0x54]	      2775	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4cb8	          0x4863d0	                         movsxd rdx, eax	      2775	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4cbb	          0x4889d0	                            mov rax, rdx	      2775	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4cbe	          0x4801c0	                            add rax, rax	      2775	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4cc1	          0x4801d0	                            add rax, rdx	      2775	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4cc4	        0x48c1e004	                              shl rax, 4	      2775	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4cc8	          0x4801c8	                            add rax, rcx	      2775	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4ccb	        0x488945b8	             mov qword [rbp - 0x48], rax	      2775	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4ccf	            0xeb1d	                           jmp 0x4004d2e	      2775	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4cd1	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2779	fold.c	FUNCTION_59	IF_38	IF_39	ELSE_14
0x4cd5	        0x488b5580	             mov rdx, qword [rbp - 0x80]	      2779	fold.c	FUNCTION_59	IF_38	IF_39	ELSE_14
0x4cd9	        0x488b4a08	                mov rcx, qword [rdx + 8]	      2779	fold.c	FUNCTION_59	IF_38	IF_39	ELSE_14
0x4cdd	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      2779	fold.c	FUNCTION_59	IF_38	IF_39	ELSE_14
0x4ce1	          0x488b12	                    mov rdx, qword [rdx]	      2779	fold.c	FUNCTION_59	IF_38	IF_39	ELSE_14
0x4ce4	          0x4829d1	                            sub rcx, rdx	      2779	fold.c	FUNCTION_59	IF_38	IF_39	ELSE_14
0x4ce7	          0x4889ca	                            mov rdx, rcx	      2779	fold.c	FUNCTION_59	IF_38	IF_39	ELSE_14
0x4cea	        0x48895008	                mov qword [rax + 8], rdx	      2779	fold.c	FUNCTION_59	IF_38	IF_39	ELSE_14
0x4cee	    0xc70500000000	               mov dword [0x04004d38], 1	      2780	fold.c	FUNCTION_59	IF_38	IF_39	ELSE_14
0x4cf8	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2787	fold.c	FUNCTION_59	ELSE_14	FOR_1
0x4cfc	        0x4883c030	                           add rax, 0x30	      2787	fold.c	FUNCTION_59	ELSE_14	FOR_1
0x4d00	        0x488945c0	             mov qword [rbp - 0x40], rax	      2787	fold.c	FUNCTION_59	ELSE_14	FOR_1
0x4d04	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4d08	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4d0c	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4d10	            0x8b00	                    mov eax, dword [rax]	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4d12	          0x4863d0	                         movsxd rdx, eax	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4d15	          0x4889d0	                            mov rax, rdx	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4d18	          0x4801c0	                            add rax, rax	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4d1b	          0x4801d0	                            add rax, rdx	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4d1e	        0x48c1e004	                              shl rax, 4	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4d22	        0x488d1401	                    lea rdx, [rcx + rax]	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4d26	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4d2a	          0x4839c2	                            cmp rdx, rax	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4d2d	     0xf8652010000	                           jbe 0x4004ec5	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4d33	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2789	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4d37	          0x488b10	                    mov rdx, qword [rax]	      2789	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4d3a	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2789	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4d3e	        0x488b4008	                mov rax, qword [rax + 8]	      2789	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4d42	          0x4839c2	                            cmp rdx, rax	      2789	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4d45	     0xf8f3a010000	                            jg 0x4004ec5	      2789	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4d4b	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2791	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43
0x4d4f	          0x488b10	                    mov rdx, qword [rax]	      2791	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43
0x4d52	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2791	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43
0x4d56	        0x488b4008	                mov rax, qword [rax + 8]	      2791	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43
0x4d5a	          0x4801c2	                            add rdx, rax	      2791	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43
0x4d5d	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2791	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43
0x4d61	        0x488b4008	                mov rax, qword [rax + 8]	      2791	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43
0x4d65	          0x4839c2	                            cmp rdx, rax	      2791	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43
0x4d68	     0xf8ec8000000	                           jle 0x4004e76	      2791	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43
0x4d6e	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2793	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4d72	          0x488b10	                    mov rdx, qword [rax]	      2793	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4d75	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2793	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4d79	        0x488b4008	                mov rax, qword [rax + 8]	      2793	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4d7d	          0x4839c2	                            cmp rdx, rax	      2793	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4d80	     0xf8d8f000000	                           jge 0x4004e55	      2793	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4d86	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2798	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4d8a	          0x488b10	                    mov rdx, qword [rax]	      2798	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4d8d	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2798	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4d91	        0x488b4008	                mov rax, qword [rax + 8]	      2798	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4d95	          0x4889d1	                            mov rcx, rdx	      2798	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4d98	          0x4829c1	                            sub rcx, rax	      2798	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4d9b	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2797	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4d9f	        0x488b5008	                mov rdx, qword [rax + 8]	      2797	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4da3	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2797	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4da7	          0x488b00	                    mov rax, qword [rax]	      2797	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4daa	          0x4829c2	                            sub rdx, rax	      2797	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4dad	          0x4889d0	                            mov rax, rdx	      2797	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4db0	        0x488d50ff	                      lea rdx, [rax - 1]	      2797	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4db4	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2796	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44	CALL_19
0x4db8	        0x4883c010	                           add rax, 0x10	      2796	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44	CALL_19
0x4dbc	          0x4989c8	                             mov r8, rcx	      2796	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44	CALL_19
0x4dbf	      0xb9ffffff7f	                     mov ecx, 0x7fffffff	      2796	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44	CALL_19
0x4dc4	      0xbe00000000	                              mov esi, 0	      2796	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44	CALL_19
0x4dc9	          0x4889c7	                            mov rdi, rax	      2796	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44	CALL_19
0x4dcc	      0xe850d8ffff	          call sym.foldMarkAdjustRecurse	      2796	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44	CALL_19
0x4dd1	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2799	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4dd5	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      2799	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4dd9	        0x488b4a08	                mov rcx, qword [rdx + 8]	      2799	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4ddd	        0x488b5580	             mov rdx, qword [rbp - 0x80]	      2799	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4de1	        0x488b7208	                mov rsi, qword [rdx + 8]	      2799	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4de5	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      2799	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4de9	          0x488b12	                    mov rdx, qword [rdx]	      2799	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4dec	          0x4829d6	                            sub rsi, rdx	      2799	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4def	          0x4889f2	                            mov rdx, rsi	      2799	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4df2	          0x4829d1	                            sub rcx, rdx	      2799	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4df5	          0x4889ca	                            mov rdx, rcx	      2799	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4df8	        0x48895008	                mov qword [rax + 8], rdx	      2799	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4dfc	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2800	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4e00	        0x488b5580	             mov rdx, qword [rbp - 0x80]	      2800	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4e04	        0x488b5208	                mov rdx, qword [rdx + 8]	      2800	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4e08	          0x488910	                    mov qword [rax], rdx	      2800	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4e0b	    0xc70500000000	               mov dword [0x04004e55], 1	      2801	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4e15	          0x8b45a8	             mov eax, dword [rbp - 0x58]	      2804	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45
0x4e18	          0x3b4594	             cmp eax, dword [rbp - 0x6c]	      2804	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45
0x4e1b	            0x7c67	                            jl 0x4004ec4	      2804	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45
0x4e1d	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      2807	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45	CALL_20
0x4e21	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2807	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45	CALL_20
0x4e25	        0x488b4d98	             mov rcx, qword [rbp - 0x68]	      2807	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45	CALL_20
0x4e29	          0x4889ce	                            mov rsi, rcx	      2807	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45	CALL_20
0x4e2c	          0x4889c7	                            mov rdi, rax	      2807	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45	CALL_20
0x4e2f	      0xe8110d0000	                      call sym.foldMerge	      2807	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45	CALL_20
0x4e34	            0xeb4e	                           jmp 0x4004ec4	      2809	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43
0x4e36	    0xc70500000000	               mov dword [0x04004e80], 1	      2811	fold.c	FUNCTION_59	ELSE_14	FOR_1
0x4e40	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x4e44	          0x4889c2	                            mov rdx, rax	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x4e47	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x4e4b	        0x488b4010	            mov rax, qword [rax + 0x10] 	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x4e4f	          0x4829c2	                            sub rdx, rax	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x4e52	          0x4889d0	                            mov rax, rdx	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x4e55	        0x48c1f804	                              sar rax, 4	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x4e59	          0x4889c2	                            mov rdx, rax	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x4e5c	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x4e66	        0x480fafc2	                           imul rax, rdx	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x4e6a	            0x89c1	                            mov ecx, eax	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x4e6c	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x4e70	      0xba01000000	                              mov edx, 1	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x4e75	            0x89ce	                            mov esi, ecx	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x4e77	          0x4889c7	                            mov rdi, rax	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x4e7a	      0xe828d4ffff	                call sym.deleteFoldEntry	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x4e7f	      0xe974feffff	                           jmp 0x4004d38	      2813	fold.c	FUNCTION_59	ELSE_14	FOR_1
0x4e84	              0x90	                                     nop	      2809	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43
0x4e85	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2817	fold.c	FUNCTION_59	IF_46
0x4e89	        0x488b4008	                mov rax, qword [rax + 8]	      2817	fold.c	FUNCTION_59	IF_46
0x4e8d	        0x4883e801	                              sub rax, 1	      2817	fold.c	FUNCTION_59	IF_46
0x4e91	    0x483b8570ffff	             cmp rax, qword [rbp - 0x90]	      2817	fold.c	FUNCTION_59	IF_46
0x4e98	            0x7e13	                           jle 0x4004eed	      2817	fold.c	FUNCTION_59	IF_46
0x4e9a	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2818	fold.c	FUNCTION_59	IF_46
0x4e9e	        0x488b4008	                mov rax, qword [rax + 8]	      2818	fold.c	FUNCTION_59	IF_46
0x4ea2	        0x4883e801	                              sub rax, 1	      2818	fold.c	FUNCTION_59	IF_46
0x4ea6	    0x48898570ffff	             mov qword [rbp - 0x90], rax	      2818	fold.c	FUNCTION_59	IF_46
0x4ead	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	      2820	fold.c	FUNCTION_59
0x4eb4	        0x488b7df8	                mov rdi, qword [rbp - 8]	      2821	fold.c	FUNCTION_59
0x4eb8	    0x6448333c2528	                xor rdi, qword fs:[0x28]	      2821	fold.c	FUNCTION_59
0x4ec1	            0x7405	                            je 0x4004f08	      2821	fold.c	FUNCTION_59
0x4ec3	      0xe800000000	                          call 0x4004f08	      2821	fold.c	FUNCTION_59
0x4ec8	              0xc9	                                   leave	      2821	fold.c	FUNCTION_59
0x4ec9	              0xc3	                                     ret	      2821	fold.c	FUNCTION_59
setSmallMaybe	SWITCH,0:ELSE,0:DO,0:FOR,1:WHILE,0:IF,0:functions,0:CALL,0	26
0x2bc4	              0x55	                                push rbp	      1718	fold.c	FUNCTION_51
0x2bc5	          0x4889e5	                            mov rbp, rsp	      1718	fold.c	FUNCTION_51
0x2bc8	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1718	fold.c	FUNCTION_51
0x2bcc	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1722	fold.c	FUNCTION_51
0x2bd0	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1722	fold.c	FUNCTION_51
0x2bd4	        0x488945f8	                mov qword [rbp - 8], rax	      1722	fold.c	FUNCTION_51
0x2bd8	    0xc745f4000000	                mov dword [rbp - 0xc], 0	      1723	fold.c	FUNCTION_51	FOR_1
0x2bdf	            0xeb25	                           jmp 0x4002c46	      1723	fold.c	FUNCTION_51	FOR_1
0x2be1	          0x8b45f4	              mov eax, dword [rbp - 0xc]	      1724	fold.c	FUNCTION_51	FOR_1
0x2be4	          0x4863d0	                         movsxd rdx, eax	      1724	fold.c	FUNCTION_51	FOR_1
0x2be7	          0x4889d0	                            mov rax, rdx	      1724	fold.c	FUNCTION_51	FOR_1
0x2bea	          0x4801c0	                            add rax, rax	      1724	fold.c	FUNCTION_51	FOR_1
0x2bed	          0x4801d0	                            add rax, rdx	      1724	fold.c	FUNCTION_51	FOR_1
0x2bf0	        0x48c1e004	                              shl rax, 4	      1724	fold.c	FUNCTION_51	FOR_1
0x2bf4	          0x4889c2	                            mov rdx, rax	      1724	fold.c	FUNCTION_51	FOR_1
0x2bf7	        0x488b45f8	                mov rax, qword [rbp - 8]	      1724	fold.c	FUNCTION_51	FOR_1
0x2bfb	          0x4801d0	                            add rax, rdx	      1724	fold.c	FUNCTION_51	FOR_1
0x2bfe	        0xc6402902	                mov byte [rax + 0x29], 2	      1724	fold.c	FUNCTION_51	FOR_1
0x2c02	        0x8345f401	                add dword [rbp - 0xc], 1	      1723	fold.c	FUNCTION_51	FOR_1
0x2c06	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1723	fold.c	FUNCTION_51	FOR_1
0x2c0a	            0x8b00	                    mov eax, dword [rax]	      1723	fold.c	FUNCTION_51	FOR_1
0x2c0c	          0x3b45f4	              cmp eax, dword [rbp - 0xc]	      1723	fold.c	FUNCTION_51	FOR_1
0x2c0f	            0x7fd0	                            jg 0x4002c21	      1723	fold.c	FUNCTION_51	FOR_1
0x2c11	              0x90	                                     nop	      1725	fold.c	FUNCTION_51
0x2c12	              0x5d	                                 pop rbp	      1725	fold.c	FUNCTION_51
0x2c13	              0xc3	                                     ret	      1725	fold.c	FUNCTION_51
foldRemove	SWITCH,0:ELSE,1:DO,0:FOR,1:WHILE,0:IF,6:functions,0:CALL,5	158
0x523c	              0x55	                                push rbp	      2917	fold.c	FUNCTION_62
0x523d	          0x4889e5	                            mov rbp, rsp	      2917	fold.c	FUNCTION_62
0x5240	        0x4883ec30	                           sub rsp, 0x30	      2917	fold.c	FUNCTION_62
0x5244	        0x48897de8	             mov qword [rbp - 0x18], rdi	      2917	fold.c	FUNCTION_62
0x5248	        0x488975e0	             mov qword [rbp - 0x20], rsi	      2917	fold.c	FUNCTION_62
0x524c	        0x488955d8	             mov qword [rbp - 0x28], rdx	      2917	fold.c	FUNCTION_62
0x5250	    0x64488b042528	                mov rax, qword fs:[0x28]	      2917	fold.c	FUNCTION_62
0x5259	        0x488945f8	                mov qword [rbp - 8], rax	      2917	fold.c	FUNCTION_62
0x525d	            0x31c0	                            xor eax, eax	      2917	fold.c	FUNCTION_62
0x525f	    0x48c745f00000	               mov qword [rbp - 0x10], 0	      2918	fold.c	FUNCTION_62
0x5267	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      2920	fold.c	FUNCTION_62	IF_1
0x526b	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	      2920	fold.c	FUNCTION_62	IF_1
0x526f	     0xf8c16020000	                            jl 0x40054cb	      2920	fold.c	FUNCTION_62	IF_1
0x5275	        0x488d55f0	                   lea rdx, [rbp - 0x10]	      2926	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_1
0x5279	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	      2926	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_1
0x527d	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2926	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_1
0x5281	          0x4889ce	                            mov rsi, rcx	      2926	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_1
0x5284	          0x4889c7	                            mov rdi, rax	      2926	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_1
0x5287	      0xe819c9ffff	                       call sym.foldFind	      2926	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_1
0x528c	            0x85c0	                           test eax, eax	      2926	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_1
0x528e	     0xf84c6000000	                            je 0x400539a	      2926	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_1
0x5294	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2926	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_1
0x5298	          0x488b00	                    mov rax, qword [rax]	      2926	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_1
0x529b	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	      2926	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_1
0x529f	     0xf8db5000000	                           jge 0x400539a	      2926	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_1
0x52a5	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2929	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_2
0x52a9	          0x488b00	                    mov rax, qword [rax]	      2929	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_2
0x52ac	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      2929	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_2
0x52b0	          0x4829c2	                            sub rdx, rax	      2929	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_2
0x52b3	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2929	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_2
0x52b7	          0x488b00	                    mov rax, qword [rax]	      2929	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_2
0x52ba	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	      2929	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_2
0x52be	          0x4829c1	                            sub rcx, rax	      2929	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_2
0x52c1	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2929	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_2
0x52c5	        0x4883c010	                           add rax, 0x10	      2929	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_2
0x52c9	          0x4889ce	                            mov rsi, rcx	      2929	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_2
0x52cc	          0x4889c7	                            mov rdi, rax	      2929	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_2
0x52cf	      0xe868ffffff	                     call sym.foldRemove	      2929	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_2
0x52d4	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2930	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3
0x52d8	          0x488b10	                    mov rdx, qword [rax]	      2930	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3
0x52db	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2930	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3
0x52df	        0x488b4008	                mov rax, qword [rax + 8]	      2930	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3
0x52e3	          0x4801d0	                            add rax, rdx	      2930	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3
0x52e6	        0x4883e801	                              sub rax, 1	      2930	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3
0x52ea	        0x483b45d8	             cmp rax, qword [rbp - 0x28]	      2930	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3
0x52ee	            0x7e42	                           jle 0x4005372	      2930	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3
0x52f0	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2933	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3	CALL_3
0x52f4	          0x4889c2	                            mov rdx, rax	      2933	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3	CALL_3
0x52f7	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2933	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3	CALL_3
0x52fb	        0x488b4010	            mov rax, qword [rax + 0x10] 	      2933	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3	CALL_3
0x52ff	          0x4829c2	                            sub rdx, rax	      2933	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3	CALL_3
0x5302	          0x4889d0	                            mov rax, rdx	      2933	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3	CALL_3
0x5305	        0x48c1f804	                              sar rax, 4	      2933	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3	CALL_3
0x5309	          0x4889c2	                            mov rdx, rax	      2933	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3	CALL_3
0x530c	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	      2933	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3	CALL_3
0x5316	        0x480fafc2	                           imul rax, rdx	      2933	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3	CALL_3
0x531a	            0x89c6	                            mov esi, eax	      2933	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3	CALL_3
0x531c	        0x488b4dd8	             mov rcx, qword [rbp - 0x28]	      2933	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3	CALL_3
0x5320	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      2933	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3	CALL_3
0x5324	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2933	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3	CALL_3
0x5328	          0x4889c7	                            mov rdi, rax	      2933	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3	CALL_3
0x532b	      0xe859fcffff	                      call sym.foldSplit	      2933	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3	CALL_3
0x5330	            0xeb19	                           jmp 0x400538b	      2933	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3	CALL_3
0x5332	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2938	fold.c	FUNCTION_62	FOR_1	IF_2	ELSE_1
0x5336	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      2938	fold.c	FUNCTION_62	FOR_1	IF_2	ELSE_1
0x533a	          0x488b12	                    mov rdx, qword [rdx]	      2938	fold.c	FUNCTION_62	FOR_1	IF_2	ELSE_1
0x533d	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	      2938	fold.c	FUNCTION_62	FOR_1	IF_2	ELSE_1
0x5341	          0x4829d1	                            sub rcx, rdx	      2938	fold.c	FUNCTION_62	FOR_1	IF_2	ELSE_1
0x5344	          0x4889ca	                            mov rdx, rcx	      2938	fold.c	FUNCTION_62	FOR_1	IF_2	ELSE_1
0x5347	        0x48895008	                mov qword [rax + 8], rdx	      2938	fold.c	FUNCTION_62	FOR_1	IF_2	ELSE_1
0x534b	    0xc70500000000	               mov dword [0x04005395], 1	      2940	fold.c	FUNCTION_62	FOR_1	IF_2
0x5355	      0xe92c010000	                           jmp 0x40054c6	      2941	fold.c	FUNCTION_62	FOR_1	IF_2
0x535a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2943	fold.c	FUNCTION_62	FOR_1	IF_4
0x535e	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      2943	fold.c	FUNCTION_62	FOR_1	IF_4
0x5362	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2943	fold.c	FUNCTION_62	FOR_1	IF_4
0x5366	            0x8b00	                    mov eax, dword [rax]	      2943	fold.c	FUNCTION_62	FOR_1	IF_4
0x5368	          0x4863d0	                         movsxd rdx, eax	      2943	fold.c	FUNCTION_62	FOR_1	IF_4
0x536b	          0x4889d0	                            mov rax, rdx	      2943	fold.c	FUNCTION_62	FOR_1	IF_4
0x536e	          0x4801c0	                            add rax, rax	      2943	fold.c	FUNCTION_62	FOR_1	IF_4
0x5371	          0x4801d0	                            add rax, rdx	      2943	fold.c	FUNCTION_62	FOR_1	IF_4
0x5374	        0x48c1e004	                              shl rax, 4	      2943	fold.c	FUNCTION_62	FOR_1	IF_4
0x5378	        0x488d1401	                    lea rdx, [rcx + rax]	      2943	fold.c	FUNCTION_62	FOR_1	IF_4
0x537c	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2943	fold.c	FUNCTION_62	FOR_1	IF_4
0x5380	          0x4839c2	                            cmp rdx, rax	      2943	fold.c	FUNCTION_62	FOR_1	IF_4
0x5383	     0xf8603010000	                           jbe 0x40054cc	      2943	fold.c	FUNCTION_62	FOR_1	IF_4
0x5389	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2944	fold.c	FUNCTION_62	FOR_1	IF_4
0x538d	          0x488b00	                    mov rax, qword [rax]	      2944	fold.c	FUNCTION_62	FOR_1	IF_4
0x5390	        0x483b45d8	             cmp rax, qword [rbp - 0x28]	      2944	fold.c	FUNCTION_62	FOR_1	IF_4
0x5394	     0xf8ff2000000	                            jg 0x40054cc	      2944	fold.c	FUNCTION_62	FOR_1	IF_4
0x539a	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2949	fold.c	FUNCTION_62	FOR_1	IF_5
0x539e	          0x488b00	                    mov rax, qword [rax]	      2949	fold.c	FUNCTION_62	FOR_1	IF_5
0x53a1	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	      2949	fold.c	FUNCTION_62	FOR_1	IF_5
0x53a5	     0xf8ccafeffff	                            jl 0x40052b5	      2949	fold.c	FUNCTION_62	FOR_1	IF_5
0x53ab	    0xc70500000000	               mov dword [0x040053f5], 1	      2952	fold.c	FUNCTION_62	FOR_1	IF_5
0x53b5	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2953	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x53b9	          0x488b10	                    mov rdx, qword [rax]	      2953	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x53bc	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2953	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x53c0	        0x488b4008	                mov rax, qword [rax + 8]	      2953	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x53c4	          0x4801d0	                            add rax, rdx	      2953	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x53c7	        0x4883e801	                              sub rax, 1	      2953	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x53cb	        0x483b45d8	             cmp rax, qword [rbp - 0x28]	      2953	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x53cf	            0x7e76	                           jle 0x4005487	      2953	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x53d1	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2958	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x53d5	          0x488b00	                    mov rax, qword [rax]	      2958	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x53d8	        0x482b45d8	             sub rax, qword [rbp - 0x28]	      2958	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x53dc	        0x488d48ff	                      lea rcx, [rax - 1]	      2958	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x53e0	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2957	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x53e4	          0x488b00	                    mov rax, qword [rax]	      2957	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x53e7	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      2957	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x53eb	          0x4829c2	                            sub rdx, rax	      2957	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x53ee	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2956	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6	CALL_4
0x53f2	        0x4883c010	                           add rax, 0x10	      2956	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6	CALL_4
0x53f6	          0x4989c8	                             mov r8, rcx	      2956	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6	CALL_4
0x53f9	      0xb9ffffff7f	                     mov ecx, 0x7fffffff	      2956	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6	CALL_4
0x53fe	      0xbe00000000	                              mov esi, 0	      2956	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6	CALL_4
0x5403	          0x4889c7	                            mov rdi, rax	      2956	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6	CALL_4
0x5406	      0xe816d2ffff	          call sym.foldMarkAdjustRecurse	      2956	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6	CALL_4
0x540b	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2959	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x540f	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      2959	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x5413	        0x488b4a08	                mov rcx, qword [rdx + 8]	      2959	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x5417	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      2959	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x541b	          0x488b12	                    mov rdx, qword [rdx]	      2959	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x541e	        0x488b75d8	             mov rsi, qword [rbp - 0x28]	      2959	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x5422	          0x4829d6	                            sub rsi, rdx	      2959	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x5425	          0x4889f2	                            mov rdx, rsi	      2959	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x5428	        0x4883c201	                              add rdx, 1	      2959	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x542c	          0x4829d1	                            sub rcx, rdx	      2959	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x542f	          0x4889ca	                            mov rdx, rcx	      2959	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x5432	        0x48895008	                mov qword [rax + 8], rdx	      2959	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x5436	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2960	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x543a	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      2960	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x543e	        0x4883c201	                              add rdx, 1	      2960	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x5442	          0x488910	                    mov qword [rax], rdx	      2960	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x5445	            0xeb45	                           jmp 0x40054cc	      2961	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x5447	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2965	fold.c	FUNCTION_62	FOR_1	IF_5	CALL_5
0x544b	          0x4889c2	                            mov rdx, rax	      2965	fold.c	FUNCTION_62	FOR_1	IF_5	CALL_5
0x544e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2965	fold.c	FUNCTION_62	FOR_1	IF_5	CALL_5
0x5452	        0x488b4010	            mov rax, qword [rax + 0x10] 	      2965	fold.c	FUNCTION_62	FOR_1	IF_5	CALL_5
0x5456	          0x4829c2	                            sub rdx, rax	      2965	fold.c	FUNCTION_62	FOR_1	IF_5	CALL_5
0x5459	          0x4889d0	                            mov rax, rdx	      2965	fold.c	FUNCTION_62	FOR_1	IF_5	CALL_5
0x545c	        0x48c1f804	                              sar rax, 4	      2965	fold.c	FUNCTION_62	FOR_1	IF_5	CALL_5
0x5460	          0x4889c2	                            mov rdx, rax	      2965	fold.c	FUNCTION_62	FOR_1	IF_5	CALL_5
0x5463	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	      2965	fold.c	FUNCTION_62	FOR_1	IF_5	CALL_5
0x546d	        0x480fafc2	                           imul rax, rdx	      2965	fold.c	FUNCTION_62	FOR_1	IF_5	CALL_5
0x5471	            0x89c1	                            mov ecx, eax	      2965	fold.c	FUNCTION_62	FOR_1	IF_5	CALL_5
0x5473	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2965	fold.c	FUNCTION_62	FOR_1	IF_5	CALL_5
0x5477	      0xba01000000	                              mov edx, 1	      2965	fold.c	FUNCTION_62	FOR_1	IF_5	CALL_5
0x547c	            0x89ce	                            mov esi, ecx	      2965	fold.c	FUNCTION_62	FOR_1	IF_5	CALL_5
0x547e	          0x4889c7	                            mov rdi, rax	      2965	fold.c	FUNCTION_62	FOR_1	IF_5	CALL_5
0x5481	      0xe821ceffff	                call sym.deleteFoldEntry	      2965	fold.c	FUNCTION_62	FOR_1	IF_5	CALL_5
0x5486	      0xe9eafdffff	                           jmp 0x40052b5	      2967	fold.c	FUNCTION_62	FOR_1
0x548b	              0x90	                                     nop	      2921	fold.c	FUNCTION_62	IF_1
0x548c	        0x488b45f8	                mov rax, qword [rbp - 8]	      2968	fold.c	FUNCTION_62
0x5490	    0x644833042528	                xor rax, qword fs:[0x28]	      2968	fold.c	FUNCTION_62
0x5499	            0x7405	                            je 0x40054e0	      2968	fold.c	FUNCTION_62
0x549b	      0xe800000000	                          call 0x40054e0	      2968	fold.c	FUNCTION_62
0x54a0	              0xc9	                                   leave	      2968	fold.c	FUNCTION_62
0x54a1	              0xc3	                                     ret	      2968	fold.c	FUNCTION_62
foldCreate	SWITCH,0:ELSE,2:DO,0:FOR,3:WHILE,0:IF,15:functions,0:CALL,11	332
0xb97	              0x55	                                push rbp	       576	fold.c	FUNCTION_25
0xb98	          0x4889e5	                            mov rbp, rsp	       576	fold.c	FUNCTION_25
0xb9b	        0x4883ec70	                           sub rsp, 0x70	       576	fold.c	FUNCTION_25
0xb9f	        0x48897d98	             mov qword [rbp - 0x68], rdi	       576	fold.c	FUNCTION_25
0xba3	        0x48897590	             mov qword [rbp - 0x70], rsi	       576	fold.c	FUNCTION_25
0xba7	    0x64488b042528	                mov rax, qword fs:[0x28]	       576	fold.c	FUNCTION_25
0xbb0	        0x488945f8	                mov qword [rbp - 8], rax	       576	fold.c	FUNCTION_25
0xbb4	            0x31c0	                            xor eax, eax	       576	fold.c	FUNCTION_25
0xbb6	    0xc745b4000000	               mov dword [rbp - 0x4c], 0	       582	fold.c	FUNCTION_25
0xbbd	    0xc745b8000000	               mov dword [rbp - 0x48], 0	       583	fold.c	FUNCTION_25
0xbc4	    0xc745bc000000	               mov dword [rbp - 0x44], 0	       584	fold.c	FUNCTION_25
0xbcb	        0x488b4598	             mov rax, qword [rbp - 0x68]	       585	fold.c	FUNCTION_25
0xbcf	        0x488945d0	             mov qword [rbp - 0x30], rax	       585	fold.c	FUNCTION_25
0xbd3	        0x488b4590	             mov rax, qword [rbp - 0x70]	       586	fold.c	FUNCTION_25
0xbd7	        0x488945d8	             mov qword [rbp - 0x28], rax	       586	fold.c	FUNCTION_25
0xbdb	        0x488b4598	             mov rax, qword [rbp - 0x68]	       588	fold.c	FUNCTION_25	IF_1
0xbdf	        0x483b4590	             cmp rax, qword [rbp - 0x70]	       588	fold.c	FUNCTION_25	IF_1
0xbe3	            0x7e20	                           jle 0x4000c45	       588	fold.c	FUNCTION_25	IF_1
0xbe5	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       591	fold.c	FUNCTION_25	IF_1
0xbe9	        0x48894590	             mov qword [rbp - 0x70], rax	       591	fold.c	FUNCTION_25	IF_1
0xbed	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       592	fold.c	FUNCTION_25	IF_1
0xbf1	        0x48894598	             mov qword [rbp - 0x68], rax	       592	fold.c	FUNCTION_25	IF_1
0xbf5	        0x488b4598	             mov rax, qword [rbp - 0x68]	       593	fold.c	FUNCTION_25	IF_1
0xbf9	        0x488945d0	             mov qword [rbp - 0x30], rax	       593	fold.c	FUNCTION_25	IF_1
0xbfd	        0x488b4590	             mov rax, qword [rbp - 0x70]	       594	fold.c	FUNCTION_25	IF_1
0xc01	        0x488945d8	             mov qword [rbp - 0x28], rax	       594	fold.c	FUNCTION_25	IF_1
0xc05	    0x488b05000000	            mov rax, qword [0x04000c4c] 	       598	fold.c	FUNCTION_25	IF_2	CALL_1
0xc0c	          0x4889c7	                            mov rdi, rax	       598	fold.c	FUNCTION_25	IF_2	CALL_1
0xc0f	      0xe800000000	                          call 0x4000c54	       598	fold.c	FUNCTION_25	IF_2	CALL_1
0xc14	            0x85c0	                           test eax, eax	       598	fold.c	FUNCTION_25	IF_2	CALL_1
0xc16	            0x7418	                            je 0x4000c70	       598	fold.c	FUNCTION_25	IF_2	CALL_1
0xc18	        0x488b5590	             mov rdx, qword [rbp - 0x70]	       600	fold.c	FUNCTION_25	IF_2	CALL_2
0xc1c	        0x488b4598	             mov rax, qword [rbp - 0x68]	       600	fold.c	FUNCTION_25	IF_2	CALL_2
0xc20	          0x4889d6	                            mov rsi, rdx	       600	fold.c	FUNCTION_25	IF_2	CALL_2
0xc23	          0x4889c7	                            mov rdi, rax	       600	fold.c	FUNCTION_25	IF_2	CALL_2
0xc26	      0xe8e91f0000	              call sym.foldCreateMarkers	       600	fold.c	FUNCTION_25	IF_2	CALL_2
0xc2b	      0xe908040000	                           jmp 0x4001078	       600	fold.c	FUNCTION_25	IF_2	CALL_2
0xc30	    0x488b05000000	            mov rax, qword [0x04000c77] 	       604	fold.c	FUNCTION_25	CALL_3
0xc37	          0x4889c7	                            mov rdi, rax	       604	fold.c	FUNCTION_25	CALL_3
0xc3a	      0xe838110000	                    call sym.checkupdate	       604	fold.c	FUNCTION_25	CALL_3
0xc3f	    0x488b05000000	            mov rax, qword [0x04000c86] 	       607	fold.c	FUNCTION_25
0xc46	    0x480508010000	                          add rax, 0x108	       607	fold.c	FUNCTION_25
0xc4c	        0x488945c8	             mov qword [rbp - 0x38], rax	       607	fold.c	FUNCTION_25
0xc50	        0x488d55c0	                   lea rdx, [rbp - 0x40]	       610	fold.c	FUNCTION_25	FOR_1	IF_3	CALL_4
0xc54	        0x488b4dd0	             mov rcx, qword [rbp - 0x30]	       610	fold.c	FUNCTION_25	FOR_1	IF_3	CALL_4
0xc58	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       610	fold.c	FUNCTION_25	FOR_1	IF_3	CALL_4
0xc5c	          0x4889ce	                            mov rsi, rcx	       610	fold.c	FUNCTION_25	FOR_1	IF_3	CALL_4
0xc5f	          0x4889c7	                            mov rdi, rax	       610	fold.c	FUNCTION_25	FOR_1	IF_3	CALL_4
0xc62	      0xe83e0f0000	                       call sym.foldFind	       610	fold.c	FUNCTION_25	FOR_1	IF_3	CALL_4
0xc67	            0x85c0	                           test eax, eax	       610	fold.c	FUNCTION_25	FOR_1	IF_3	CALL_4
0xc69	     0xf8491000000	                            je 0x4000d40	       610	fold.c	FUNCTION_25	FOR_1	IF_3	CALL_4
0xc6f	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       612	fold.c	FUNCTION_25	FOR_1	IF_4
0xc73	          0x488b10	                    mov rdx, qword [rax]	       612	fold.c	FUNCTION_25	FOR_1	IF_4
0xc76	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       612	fold.c	FUNCTION_25	FOR_1	IF_4
0xc7a	        0x488b4008	                mov rax, qword [rax + 8]	       612	fold.c	FUNCTION_25	FOR_1	IF_4
0xc7e	          0x4801d0	                            add rax, rdx	       612	fold.c	FUNCTION_25	FOR_1	IF_4
0xc81	        0x483b45d8	             cmp rax, qword [rbp - 0x28]	       612	fold.c	FUNCTION_25	FOR_1	IF_4
0xc85	            0x7e7c	                           jle 0x4000d43	       612	fold.c	FUNCTION_25	FOR_1	IF_4
0xc87	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       615	fold.c	FUNCTION_25	FOR_1	IF_4
0xc8b	        0x4883c010	                           add rax, 0x10	       615	fold.c	FUNCTION_25	FOR_1	IF_4
0xc8f	        0x488945c8	             mov qword [rbp - 0x38], rax	       615	fold.c	FUNCTION_25	FOR_1	IF_4
0xc93	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       616	fold.c	FUNCTION_25	FOR_1	IF_4
0xc97	          0x488b00	                    mov rax, qword [rax]	       616	fold.c	FUNCTION_25	FOR_1	IF_4
0xc9a	        0x482945d0	             sub qword [rbp - 0x30], rax	       616	fold.c	FUNCTION_25	FOR_1	IF_4
0xc9e	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       617	fold.c	FUNCTION_25	FOR_1	IF_4
0xca2	          0x488b00	                    mov rax, qword [rax]	       617	fold.c	FUNCTION_25	FOR_1	IF_4
0xca5	        0x482945d8	             sub qword [rbp - 0x28], rax	       617	fold.c	FUNCTION_25	FOR_1	IF_4
0xca9	        0x837db400	               cmp dword [rbp - 0x4c], 0	       618	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5
0xcad	            0x750c	                           jne 0x4000cfb	       618	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5
0xcaf	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       618	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5
0xcb3	         0xfb64028	           movzx eax, byte [rax + 0x28] 	       618	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5
0xcb7	            0x3c02	                               cmp al, 2	       618	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5
0xcb9	            0x7529	                           jne 0x4000d24	       618	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5
0xcbb	    0xc745b4010000	               mov dword [rbp - 0x4c], 1	       620	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5
0xcc2	          0x8b45bc	             mov eax, dword [rbp - 0x44]	       621	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5	IF_6
0xcc5	          0x4863d0	                         movsxd rdx, eax	       621	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5	IF_6
0xcc8	    0x488b05000000	            mov rax, qword [0x04000d0f] 	       621	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5	IF_6
0xccf	    0x488b80e80100	           mov rax, qword [rax + 0x1e8] 	       621	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5	IF_6
0xcd6	          0x4839c2	                            cmp rdx, rax	       621	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5	IF_6
0xcd9	            0x7c1c	                            jl 0x4000d37	       621	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5	IF_6
0xcdb	    0xc745b8010000	               mov dword [rbp - 0x48], 1	       622	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5	IF_6
0xce2	            0xeb13	                           jmp 0x4000d37	       621	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5	IF_6
0xce4	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       624	fold.c	FUNCTION_25	FOR_1	IF_4	ELSE_1	IF_7
0xce8	         0xfb64028	           movzx eax, byte [rax + 0x28] 	       624	fold.c	FUNCTION_25	FOR_1	IF_4	ELSE_1	IF_7
0xcec	            0x3c01	                               cmp al, 1	       624	fold.c	FUNCTION_25	FOR_1	IF_4	ELSE_1	IF_7
0xcee	            0x7507	                           jne 0x4000d37	       624	fold.c	FUNCTION_25	FOR_1	IF_4	ELSE_1	IF_7
0xcf0	    0xc745b8010000	               mov dword [rbp - 0x48], 1	       625	fold.c	FUNCTION_25	FOR_1	IF_4	ELSE_1	IF_7
0xcf7	        0x8345bc01	               add dword [rbp - 0x44], 1	       626	fold.c	FUNCTION_25	FOR_1	IF_4
0xcfb	      0xe950ffffff	                           jmp 0x4000c90	       634	fold.c	FUNCTION_25	FOR_1
0xd00	              0x90	                                     nop	       611	fold.c	FUNCTION_25	FOR_1	IF_3
0xd01	            0xeb01	                           jmp 0x4000d44	       611	fold.c	FUNCTION_25	FOR_1	IF_3
0xd03	              0x90	                                     nop	       632	fold.c	FUNCTION_25	FOR_1	ELSE_2
0xd04	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       636	fold.c	FUNCTION_25
0xd08	          0x4889c2	                            mov rdx, rax	       636	fold.c	FUNCTION_25
0xd0b	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       636	fold.c	FUNCTION_25
0xd0f	        0x488b4010	            mov rax, qword [rax + 0x10] 	       636	fold.c	FUNCTION_25
0xd13	          0x4829c2	                            sub rdx, rax	       636	fold.c	FUNCTION_25
0xd16	          0x4889d0	                            mov rax, rdx	       636	fold.c	FUNCTION_25
0xd19	        0x48c1f804	                              sar rax, 4	       636	fold.c	FUNCTION_25
0xd1d	          0x4889c2	                            mov rdx, rax	       636	fold.c	FUNCTION_25
0xd20	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	       636	fold.c	FUNCTION_25
0xd2a	        0x480fafc2	                           imul rax, rdx	       636	fold.c	FUNCTION_25
0xd2e	          0x8945a8	             mov dword [rbp - 0x58], eax	       636	fold.c	FUNCTION_25
0xd31	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       637	fold.c	FUNCTION_25	IF_8	CALL_5
0xd35	      0xbe01000000	                              mov esi, 1	       637	fold.c	FUNCTION_25	IF_8	CALL_5
0xd3a	          0x4889c7	                            mov rdi, rax	       637	fold.c	FUNCTION_25	IF_8	CALL_5
0xd3d	      0xe800000000	                          call 0x4000d82	       637	fold.c	FUNCTION_25	IF_8	CALL_5
0xd42	          0x83f801	                              cmp eax, 1	       637	fold.c	FUNCTION_25	IF_8	CALL_5
0xd45	     0xf85ed020000	                           jne 0x4001078	       637	fold.c	FUNCTION_25	IF_8	CALL_5
0xd4b	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       639	fold.c	FUNCTION_25	IF_8
0xd4f	        0x488b4810	            mov rcx, qword [rax + 0x10] 	       639	fold.c	FUNCTION_25	IF_8
0xd53	          0x8b45a8	             mov eax, dword [rbp - 0x58]	       639	fold.c	FUNCTION_25	IF_8
0xd56	          0x4863d0	                         movsxd rdx, eax	       639	fold.c	FUNCTION_25	IF_8
0xd59	          0x4889d0	                            mov rax, rdx	       639	fold.c	FUNCTION_25	IF_8
0xd5c	          0x4801c0	                            add rax, rax	       639	fold.c	FUNCTION_25	IF_8
0xd5f	          0x4801d0	                            add rax, rdx	       639	fold.c	FUNCTION_25	IF_8
0xd62	        0x48c1e004	                              shl rax, 4	       639	fold.c	FUNCTION_25	IF_8
0xd66	          0x4801c8	                            add rax, rcx	       639	fold.c	FUNCTION_25	IF_8
0xd69	        0x488945c0	             mov qword [rbp - 0x40], rax	       639	fold.c	FUNCTION_25	IF_8
0xd6d	        0x488d45e0	                   lea rax, [rbp - 0x20]	       640	fold.c	FUNCTION_25	IF_8	CALL_6
0xd71	      0xba0a000000	                            mov edx, 0xa	       640	fold.c	FUNCTION_25	IF_8	CALL_6
0xd76	      0xbe30000000	                           mov esi, 0x30	       640	fold.c	FUNCTION_25	IF_8	CALL_6
0xd7b	          0x4889c7	                            mov rdi, rax	       640	fold.c	FUNCTION_25	IF_8	CALL_6
0xd7e	      0xe800000000	                          call 0x4000dc3	       640	fold.c	FUNCTION_25	IF_8	CALL_6
0xd83	    0xc745b0000000	               mov dword [rbp - 0x50], 0	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0xd8a	            0xeb27	                           jmp 0x4000df3	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0xd8c	        0x488b4dc0	             mov rcx, qword [rbp - 0x40]	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0xd90	          0x8b45b0	             mov eax, dword [rbp - 0x50]	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0xd93	          0x4863d0	                         movsxd rdx, eax	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0xd96	          0x4889d0	                            mov rax, rdx	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0xd99	          0x4801c0	                            add rax, rax	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0xd9c	          0x4801d0	                            add rax, rdx	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0xd9f	        0x48c1e004	                              shl rax, 4	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0xda3	          0x4801c8	                            add rax, rcx	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0xda6	          0x488b00	                    mov rax, qword [rax]	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0xda9	        0x483b45d8	             cmp rax, qword [rbp - 0x28]	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0xdad	            0x7f18	                            jg 0x4000e07	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0xdaf	        0x8345b001	               add dword [rbp - 0x50], 1	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0xdb3	          0x8b55a8	             mov edx, dword [rbp - 0x58]	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0xdb6	          0x8b45b0	             mov eax, dword [rbp - 0x50]	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0xdb9	             0x1c2	                            add edx, eax	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0xdbb	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0xdbf	            0x8b00	                    mov eax, dword [rax]	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0xdc1	            0x39c2	                            cmp edx, eax	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0xdc3	            0x7cc7	                            jl 0x4000dcc	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0xdc5	            0xeb01	                           jmp 0x4000e08	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0xdc7	              0x90	                                     nop	       645	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0xdc8	        0x837db000	               cmp dword [rbp - 0x50], 0	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0xdcc	     0xf8e5d010000	                           jle 0x4000f6f	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0xdd2	          0x8b55b0	             mov edx, dword [rbp - 0x50]	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0xdd5	        0x488d45e0	                   lea rax, [rbp - 0x20]	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0xdd9	            0x89d6	                            mov esi, edx	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0xddb	          0x4889c7	                            mov rdi, rax	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0xdde	      0xe800000000	                          call 0x4000e23	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0xde3	          0x83f801	                              cmp eax, 1	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0xde6	     0xf8543010000	                           jne 0x4000f6f	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0xdec	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       650	fold.c	FUNCTION_25	IF_8	IF_10	IF_11
0xdf0	          0x488b00	                    mov rax, qword [rax]	       650	fold.c	FUNCTION_25	IF_8	IF_10	IF_11
0xdf3	        0x483b45d0	             cmp rax, qword [rbp - 0x30]	       650	fold.c	FUNCTION_25	IF_8	IF_10	IF_11
0xdf7	            0x7d0b	                           jge 0x4000e44	       650	fold.c	FUNCTION_25	IF_8	IF_10	IF_11
0xdf9	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       651	fold.c	FUNCTION_25	IF_8	IF_10	IF_11
0xdfd	          0x488b00	                    mov rax, qword [rax]	       651	fold.c	FUNCTION_25	IF_8	IF_10	IF_11
0xe00	        0x488945d0	             mov qword [rbp - 0x30], rax	       651	fold.c	FUNCTION_25	IF_8	IF_10	IF_11
0xe04	        0x488b4dc0	             mov rcx, qword [rbp - 0x40]	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe08	          0x8b45b0	             mov eax, dword [rbp - 0x50]	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe0b	          0x4863d0	                         movsxd rdx, eax	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe0e	          0x4889d0	                            mov rax, rdx	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe11	          0x4801c0	                            add rax, rax	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe14	          0x4801d0	                            add rax, rdx	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe17	        0x48c1e004	                              shl rax, 4	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe1b	        0x4883e830	                           sub rax, 0x30	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe1f	          0x4801c8	                            add rax, rcx	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe22	          0x488b08	                    mov rcx, qword [rax]	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe25	        0x488b75c0	             mov rsi, qword [rbp - 0x40]	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe29	          0x8b45b0	             mov eax, dword [rbp - 0x50]	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe2c	          0x4863d0	                         movsxd rdx, eax	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe2f	          0x4889d0	                            mov rax, rdx	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe32	          0x4801c0	                            add rax, rax	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe35	          0x4801d0	                            add rax, rdx	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe38	        0x48c1e004	                              shl rax, 4	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe3c	        0x4883e830	                           sub rax, 0x30	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe40	          0x4801f0	                            add rax, rsi	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe43	        0x488b4008	                mov rax, qword [rax + 8]	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe47	          0x4801c8	                            add rax, rcx	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe4a	        0x4883e801	                              sub rax, 1	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe4e	        0x483b45d8	             cmp rax, qword [rbp - 0x28]	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe52	            0x7e4e	                           jle 0x4000ee2	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe54	        0x488b4dc0	             mov rcx, qword [rbp - 0x40]	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe58	          0x8b45b0	             mov eax, dword [rbp - 0x50]	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe5b	          0x4863d0	                         movsxd rdx, eax	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe5e	          0x4889d0	                            mov rax, rdx	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe61	          0x4801c0	                            add rax, rax	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe64	          0x4801d0	                            add rax, rdx	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe67	        0x48c1e004	                              shl rax, 4	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe6b	        0x4883e830	                           sub rax, 0x30	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe6f	          0x4801c8	                            add rax, rcx	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe72	          0x488b08	                    mov rcx, qword [rax]	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe75	        0x488b75c0	             mov rsi, qword [rbp - 0x40]	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe79	          0x8b45b0	             mov eax, dword [rbp - 0x50]	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe7c	          0x4863d0	                         movsxd rdx, eax	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe7f	          0x4889d0	                            mov rax, rdx	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe82	          0x4801c0	                            add rax, rax	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe85	          0x4801d0	                            add rax, rdx	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe88	        0x48c1e004	                              shl rax, 4	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe8c	        0x4883e830	                           sub rax, 0x30	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe90	          0x4801f0	                            add rax, rsi	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe93	        0x488b4008	                mov rax, qword [rax + 8]	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe97	          0x4801c8	                            add rax, rcx	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe9a	        0x4883e801	                              sub rax, 1	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xe9e	        0x488945d8	             mov qword [rbp - 0x28], rax	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0xea2	          0x8b45b0	             mov eax, dword [rbp - 0x50]	       658	fold.c	FUNCTION_25	IF_8	IF_10	CALL_8
0xea5	          0x4863d0	                         movsxd rdx, eax	       658	fold.c	FUNCTION_25	IF_8	IF_10	CALL_8
0xea8	          0x4889d0	                            mov rax, rdx	       658	fold.c	FUNCTION_25	IF_8	IF_10	CALL_8
0xeab	          0x4801c0	                            add rax, rax	       658	fold.c	FUNCTION_25	IF_8	IF_10	CALL_8
0xeae	          0x4801d0	                            add rax, rdx	       658	fold.c	FUNCTION_25	IF_8	IF_10	CALL_8
0xeb1	        0x48c1e004	                              shl rax, 4	       658	fold.c	FUNCTION_25	IF_8	IF_10	CALL_8
0xeb5	          0x4889c2	                            mov rdx, rax	       658	fold.c	FUNCTION_25	IF_8	IF_10	CALL_8
0xeb8	        0x488b4dc0	             mov rcx, qword [rbp - 0x40]	       658	fold.c	FUNCTION_25	IF_8	IF_10	CALL_8
0xebc	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       658	fold.c	FUNCTION_25	IF_8	IF_10	CALL_8
0xec0	          0x4889ce	                            mov rsi, rcx	       658	fold.c	FUNCTION_25	IF_8	IF_10	CALL_8
0xec3	          0x4889c7	                            mov rdi, rax	       658	fold.c	FUNCTION_25	IF_8	IF_10	CALL_8
0xec6	      0xe800000000	                          call 0x4000f0b	       658	fold.c	FUNCTION_25	IF_8	IF_10	CALL_8
0xecb	          0x8b55e0	             mov edx, dword [rbp - 0x20]	       659	fold.c	FUNCTION_25	IF_8	IF_10
0xece	          0x8b45b0	             mov eax, dword [rbp - 0x50]	       659	fold.c	FUNCTION_25	IF_8	IF_10
0xed1	             0x1d0	                            add eax, edx	       659	fold.c	FUNCTION_25	IF_8	IF_10
0xed3	          0x8945e0	             mov dword [rbp - 0x20], eax	       659	fold.c	FUNCTION_25	IF_8	IF_10
0xed6	          0x8b45b0	             mov eax, dword [rbp - 0x50]	       660	fold.c	FUNCTION_25	IF_8	IF_10
0xed9	           0x145a8	             add dword [rbp - 0x58], eax	       660	fold.c	FUNCTION_25	IF_8	IF_10
0xedc	    0xc745ac000000	               mov dword [rbp - 0x54], 0	       664	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0xee3	            0xeb42	                           jmp 0x4000f67	       664	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0xee5	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0xee9	          0x8b45ac	             mov eax, dword [rbp - 0x54]	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0xeec	          0x4863d0	                         movsxd rdx, eax	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0xeef	          0x4889d0	                            mov rax, rdx	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0xef2	          0x4801c0	                            add rax, rax	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0xef5	          0x4801d0	                            add rax, rdx	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0xef8	        0x48c1e004	                              shl rax, 4	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0xefc	          0x4801c1	                            add rcx, rax	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0xeff	        0x488b75f0	             mov rsi, qword [rbp - 0x10]	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0xf03	          0x8b45ac	             mov eax, dword [rbp - 0x54]	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0xf06	          0x4863d0	                         movsxd rdx, eax	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0xf09	          0x4889d0	                            mov rax, rdx	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0xf0c	          0x4801c0	                            add rax, rax	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0xf0f	          0x4801d0	                            add rax, rdx	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0xf12	        0x48c1e004	                              shl rax, 4	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0xf16	          0x4801f0	                            add rax, rsi	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0xf19	          0x488b00	                    mov rax, qword [rax]	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0xf1c	        0x482b45d0	             sub rax, qword [rbp - 0x30]	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0xf20	          0x488901	                    mov qword [rcx], rax	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0xf23	        0x8345ac01	               add dword [rbp - 0x54], 1	       664	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0xf27	          0x8b45ac	             mov eax, dword [rbp - 0x54]	       664	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0xf2a	          0x3b45b0	             cmp eax, dword [rbp - 0x50]	       664	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0xf2d	            0x7cb6	                            jl 0x4000f25	       664	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0xf2f	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       668	fold.c	FUNCTION_25	IF_8	IF_13
0xf33	            0x8b00	                    mov eax, dword [rax]	       668	fold.c	FUNCTION_25	IF_8	IF_13
0xf35	          0x3b45a8	             cmp eax, dword [rbp - 0x58]	       668	fold.c	FUNCTION_25	IF_8	IF_13
0xf38	            0x7e50	                           jle 0x4000fca	       668	fold.c	FUNCTION_25	IF_8	IF_13
0xf3a	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0xf3e	            0x8b00	                    mov eax, dword [rax]	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0xf40	          0x2b45a8	             sub eax, dword [rbp - 0x58]	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0xf43	          0x4863d0	                         movsxd rdx, eax	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0xf46	          0x4889d0	                            mov rax, rdx	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0xf49	          0x4801c0	                            add rax, rax	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0xf4c	          0x4801d0	                            add rax, rdx	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0xf4f	        0x48c1e004	                              shl rax, 4	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0xf53	          0x4889c6	                            mov rsi, rax	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0xf56	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0xf5a	        0x488b4810	            mov rcx, qword [rax + 0x10] 	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0xf5e	          0x8b45a8	             mov eax, dword [rbp - 0x58]	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0xf61	          0x4863d0	                         movsxd rdx, eax	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0xf64	          0x4889d0	                            mov rax, rdx	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0xf67	          0x4801c0	                            add rax, rax	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0xf6a	          0x4801d0	                            add rax, rdx	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0xf6d	        0x48c1e004	                              shl rax, 4	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0xf71	          0x4801c1	                            add rcx, rax	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0xf74	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0xf78	        0x4883c030	                           add rax, 0x30	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0xf7c	          0x4889f2	                            mov rdx, rsi	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0xf7f	          0x4889ce	                            mov rsi, rcx	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0xf82	          0x4889c7	                            mov rdi, rax	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0xf85	      0xe800000000	                          call 0x4000fca	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0xf8a	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       671	fold.c	FUNCTION_25	IF_8
0xf8e	            0x8b00	                    mov eax, dword [rax]	       671	fold.c	FUNCTION_25	IF_8
0xf90	          0x83c001	                              add eax, 1	       671	fold.c	FUNCTION_25	IF_8
0xf93	          0x2b45b0	             sub eax, dword [rbp - 0x50]	       671	fold.c	FUNCTION_25	IF_8
0xf96	            0x89c2	                            mov edx, eax	       671	fold.c	FUNCTION_25	IF_8
0xf98	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       671	fold.c	FUNCTION_25	IF_8
0xf9c	            0x8910	                    mov dword [rax], edx	       671	fold.c	FUNCTION_25	IF_8
0xf9e	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       674	fold.c	FUNCTION_25	IF_8
0xfa2	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       674	fold.c	FUNCTION_25	IF_8
0xfa6	        0x48895010	             mov qword [rax + 0x10], rdx	       674	fold.c	FUNCTION_25	IF_8
0xfaa	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       674	fold.c	FUNCTION_25	IF_8
0xfae	        0x48895018	             mov qword [rax + 0x18], rdx	       674	fold.c	FUNCTION_25	IF_8
0xfb2	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       674	fold.c	FUNCTION_25	IF_8
0xfb6	        0x48895020	             mov qword [rax + 0x20], rdx	       674	fold.c	FUNCTION_25	IF_8
0xfba	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       675	fold.c	FUNCTION_25	IF_8
0xfbe	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	       675	fold.c	FUNCTION_25	IF_8
0xfc2	          0x488910	                    mov qword [rax], rdx	       675	fold.c	FUNCTION_25	IF_8
0xfc5	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       676	fold.c	FUNCTION_25	IF_8
0xfc9	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       676	fold.c	FUNCTION_25	IF_8
0xfcd	        0x482b55d0	             sub rdx, qword [rbp - 0x30]	       676	fold.c	FUNCTION_25	IF_8
0xfd1	        0x4883c201	                              add rdx, 1	       676	fold.c	FUNCTION_25	IF_8
0xfd5	        0x48895008	                mov qword [rax + 8], rdx	       676	fold.c	FUNCTION_25	IF_8
0xfd9	        0x837db400	               cmp dword [rbp - 0x4c], 0	       681	fold.c	FUNCTION_25	IF_8	IF_14
0xfdd	            0x7430	                            je 0x400104f	       681	fold.c	FUNCTION_25	IF_8	IF_14
0xfdf	        0x837db800	               cmp dword [rbp - 0x48], 0	       681	fold.c	FUNCTION_25	IF_8	IF_14
0xfe3	            0x752a	                           jne 0x400104f	       681	fold.c	FUNCTION_25	IF_8	IF_14
0xfe5	          0x8b45bc	             mov eax, dword [rbp - 0x44]	       681	fold.c	FUNCTION_25	IF_8	IF_14
0xfe8	          0x4863d0	                         movsxd rdx, eax	       681	fold.c	FUNCTION_25	IF_8	IF_14
0xfeb	    0x488b05000000	            mov rax, qword [0x04001032] 	       681	fold.c	FUNCTION_25	IF_8	IF_14
0xff2	    0x488b80e80100	           mov rax, qword [rax + 0x1e8] 	       681	fold.c	FUNCTION_25	IF_8	IF_14
0xff9	          0x4839c2	                            cmp rdx, rax	       681	fold.c	FUNCTION_25	IF_8	IF_14
0xffc	            0x7d11	                           jge 0x400104f	       681	fold.c	FUNCTION_25	IF_8	IF_14
0xffe	        0x488b4598	             mov rax, qword [rbp - 0x68]	       682	fold.c	FUNCTION_25	IF_8	CALL_10
0x1002	      0xbe01000000	                              mov esi, 1	       682	fold.c	FUNCTION_25	IF_8	CALL_10
0x1007	          0x4889c7	                            mov rdi, rax	       682	fold.c	FUNCTION_25	IF_8	CALL_10
0x100a	      0xe800000000	                          call 0x400104f	       682	fold.c	FUNCTION_25	IF_8	CALL_10
0x100f	        0x837db400	               cmp dword [rbp - 0x4c], 0	       683	fold.c	FUNCTION_25	IF_8	IF_15
0x1013	            0x750e	                           jne 0x4001063	       683	fold.c	FUNCTION_25	IF_8	IF_15
0x1015	    0x488b05000000	            mov rax, qword [0x0400105c] 	       684	fold.c	FUNCTION_25	IF_8	IF_15
0x101c	    0xc68020010000	               mov byte [rax + 0x120], 1	       684	fold.c	FUNCTION_25	IF_8	IF_15
0x1023	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       685	fold.c	FUNCTION_25	IF_8
0x1027	        0xc6402801	                mov byte [rax + 0x28], 1	       685	fold.c	FUNCTION_25	IF_8
0x102b	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       686	fold.c	FUNCTION_25	IF_8
0x102f	        0xc6402902	                mov byte [rax + 0x29], 2	       686	fold.c	FUNCTION_25	IF_8
0x1033	      0xe800000000	                          call 0x4001078	       689	fold.c	FUNCTION_25	IF_8	CALL_11
0x1038	        0x488b45f8	                mov rax, qword [rbp - 8]	       691	fold.c	FUNCTION_25
0x103c	    0x644833042528	                xor rax, qword fs:[0x28]	       691	fold.c	FUNCTION_25
0x1045	            0x7405	                            je 0x400108c	       691	fold.c	FUNCTION_25
0x1047	      0xe800000000	                          call 0x400108c	       691	fold.c	FUNCTION_25
0x104c	              0xc9	                                   leave	       691	fold.c	FUNCTION_25
0x104d	              0xc3	                                     ret	       691	fold.c	FUNCTION_25
foldCheckClose	SWITCH,0:ELSE,0:DO,0:FOR,0:WHILE,0:IF,2:functions,0:CALL,3	26
0x951	              0x55	                                push rbp	       514	fold.c	FUNCTION_22
0x952	          0x4889e5	                            mov rbp, rsp	       514	fold.c	FUNCTION_22
0x955	    0x488b05000000	            mov rax, qword [0x0400099c] 	       515	fold.c	FUNCTION_22	IF_1
0x95c	           0xfb600	                   movzx eax, byte [rax]	       515	fold.c	FUNCTION_22	IF_1
0x95f	            0x84c0	                             test al, al	       515	fold.c	FUNCTION_22	IF_1
0x961	            0x744e	                            je 0x40009f1	       515	fold.c	FUNCTION_22	IF_1
0x963	    0x488b05000000	            mov rax, qword [0x040009aa] 	       517	fold.c	FUNCTION_22	IF_1	CALL_1
0x96a	          0x4889c7	                            mov rdi, rax	       517	fold.c	FUNCTION_22	IF_1	CALL_1
0x96d	      0xe805140000	                    call sym.checkupdate	       517	fold.c	FUNCTION_22	IF_1	CALL_1
0x972	    0x488b05000000	            mov rax, qword [0x040009b9] 	       519	fold.c	FUNCTION_22	IF_1	IF_2
0x979	    0x488b80e80100	           mov rax, qword [rax + 0x1e8] 	       519	fold.c	FUNCTION_22	IF_1	IF_2
0x980	            0x89c6	                            mov esi, eax	       518	fold.c	FUNCTION_22	IF_1	IF_2	CALL_2
0x982	    0x488b05000000	            mov rax, qword [0x040009c9] 	       518	fold.c	FUNCTION_22	IF_1	IF_2	CALL_2
0x989	        0x488b4038	            mov rax, qword [rax + 0x38] 	       518	fold.c	FUNCTION_22	IF_1	IF_2	CALL_2
0x98d	    0x488b15000000	            mov rdx, qword [0x040009d4] 	       518	fold.c	FUNCTION_22	IF_1	IF_2	CALL_2
0x994	    0x488d8a080100	                  lea rcx, [rdx + 0x108]	       518	fold.c	FUNCTION_22	IF_1	IF_2	CALL_2
0x99b	            0x89f2	                            mov edx, esi	       518	fold.c	FUNCTION_22	IF_1	IF_2	CALL_2
0x99d	          0x4889c6	                            mov rsi, rax	       518	fold.c	FUNCTION_22	IF_1	IF_2	CALL_2
0x9a0	          0x4889cf	                            mov rdi, rcx	       518	fold.c	FUNCTION_22	IF_1	IF_2	CALL_2
0x9a3	      0xe80c000000	                  call sym.checkCloseRec	       518	fold.c	FUNCTION_22	IF_1	IF_2	CALL_2
0x9a8	            0x85c0	                           test eax, eax	       518	fold.c	FUNCTION_22	IF_1	IF_2	CALL_2
0x9aa	            0x7405	                            je 0x40009f1	       518	fold.c	FUNCTION_22	IF_1	IF_2	CALL_2
0x9ac	      0xe800000000	                          call 0x40009f1	       520	fold.c	FUNCTION_22	IF_1	CALL_3
0x9b1	              0x90	                                     nop	       522	fold.c	FUNCTION_22
0x9b2	              0x5d	                                 pop rbp	       522	fold.c	FUNCTION_22
0x9b3	              0xc3	                                     ret	       522	fold.c	FUNCTION_22
foldLevel	SWITCH,0:ELSE,2:DO,0:FOR,0:WHILE,0:IF,4:functions,0:CALL,3	41
0x3d8	              0x55	                                push rbp	       251	fold.c	FUNCTION_5
0x3d9	          0x4889e5	                            mov rbp, rsp	       251	fold.c	FUNCTION_5
0x3dc	        0x4883ec10	                           sub rsp, 0x10	       251	fold.c	FUNCTION_5
0x3e0	        0x48897df8	                mov qword [rbp - 8], rdi	       251	fold.c	FUNCTION_5
0x3e4	    0x488b05000000	            mov rax, qword [0x0400042b] 	       254	fold.c	FUNCTION_5	IF_1
0x3eb	          0x4885c0	                           test rax, rax	       254	fold.c	FUNCTION_5	IF_1
0x3ee	            0x7511	                           jne 0x4000441	       254	fold.c	FUNCTION_5	IF_1
0x3f0	    0x488b05000000	            mov rax, qword [0x04000437] 	       255	fold.c	FUNCTION_5	CALL_1
0x3f7	          0x4889c7	                            mov rdi, rax	       255	fold.c	FUNCTION_5	CALL_1
0x3fa	      0xe878190000	                    call sym.checkupdate	       255	fold.c	FUNCTION_5	CALL_1
0x3ff	            0xeb40	                           jmp 0x4000481	       255	fold.c	FUNCTION_5	CALL_1
0x401	    0x488b05000000	            mov rax, qword [0x04000448] 	       256	fold.c	FUNCTION_5	ELSE_1	IF_2
0x408	        0x483945f8	                cmp qword [rbp - 8], rax	       256	fold.c	FUNCTION_5	ELSE_1	IF_2
0x40c	            0x7512	                           jne 0x4000460	       256	fold.c	FUNCTION_5	ELSE_1	IF_2
0x40e	    0x8b0500000000	            mov eax, dword [0x04000454] 	       256	fold.c	FUNCTION_5	ELSE_1	IF_2
0x414	            0x85c0	                           test eax, eax	       256	fold.c	FUNCTION_5	ELSE_1	IF_2
0x416	            0x7808	                            js 0x4000460	       256	fold.c	FUNCTION_5	ELSE_1	IF_2
0x418	    0x8b0500000000	            mov eax, dword [0x0400045e] 	       257	fold.c	FUNCTION_5	ELSE_1	IF_2
0x41e	            0xeb51	                           jmp 0x40004b1	       257	fold.c	FUNCTION_5	ELSE_1	IF_2
0x420	    0x488b05000000	            mov rax, qword [0x04000467] 	       258	fold.c	FUNCTION_5	ELSE_2	IF_3
0x427	        0x483945f8	                cmp qword [rbp - 8], rax	       258	fold.c	FUNCTION_5	ELSE_2	IF_3
0x42b	            0x7c14	                            jl 0x4000481	       258	fold.c	FUNCTION_5	ELSE_2	IF_3
0x42d	    0x488b05000000	            mov rax, qword [0x04000474] 	       258	fold.c	FUNCTION_5	ELSE_2	IF_3
0x434	        0x483945f8	                cmp qword [rbp - 8], rax	       258	fold.c	FUNCTION_5	ELSE_2	IF_3
0x438	            0x7f07	                            jg 0x4000481	       258	fold.c	FUNCTION_5	ELSE_2	IF_3
0x43a	      0xb8ffffffff	                     mov eax, 0xffffffff	       259	fold.c	FUNCTION_5	ELSE_2	IF_3
0x43f	            0xeb30	                           jmp 0x40004b1	       259	fold.c	FUNCTION_5	ELSE_2	IF_3
0x441	    0x488b05000000	            mov rax, qword [0x04000488] 	       262	fold.c	FUNCTION_5	IF_4	CALL_2
0x448	          0x4889c7	                            mov rdi, rax	       262	fold.c	FUNCTION_5	IF_4	CALL_2
0x44b	      0xe800000000	                          call 0x4000490	       262	fold.c	FUNCTION_5	IF_4	CALL_2
0x450	            0x85c0	                           test eax, eax	       262	fold.c	FUNCTION_5	IF_4	CALL_2
0x452	            0x7507	                           jne 0x400049b	       262	fold.c	FUNCTION_5	IF_4	CALL_2
0x454	      0xb800000000	                              mov eax, 0	       263	fold.c	FUNCTION_5	IF_4
0x459	            0xeb16	                           jmp 0x40004b1	       263	fold.c	FUNCTION_5	IF_4
0x45b	    0x488b05000000	            mov rax, qword [0x040004a2] 	       265	fold.c	FUNCTION_5	CALL_3
0x462	        0x488b55f8	                mov rdx, qword [rbp - 8]	       265	fold.c	FUNCTION_5	CALL_3
0x466	          0x4889d6	                            mov rsi, rdx	       265	fold.c	FUNCTION_5	CALL_3
0x469	          0x4889c7	                            mov rdi, rax	       265	fold.c	FUNCTION_5	CALL_3
0x46c	      0xe878180000	                   call sym.foldLevelWin	       265	fold.c	FUNCTION_5	CALL_3
0x471	              0xc9	                                   leave	       266	fold.c	FUNCTION_5
0x472	              0xc3	                                     ret	       266	fold.c	FUNCTION_5
newFoldLevel	SWITCH,0:ELSE,0:DO,0:FOR,0:WHILE,0:IF,1:functions,1:CALL,2	45
0x812	              0x55	                                push rbp	       465	fold.c	FUNCTION_20
0x813	          0x4889e5	                            mov rbp, rsp	       465	fold.c	FUNCTION_20
0x816	        0x4883ec10	                           sub rsp, 0x10	       465	fold.c	FUNCTION_20
0x81a	    0x488b05000000	            mov rax, qword [0x04000861] 	       466	fold.c	FUNCTION_20	CALL_1
0x821	          0x4889c7	                            mov rdi, rax	       466	fold.c	FUNCTION_20	CALL_1
0x824	      0xe89b000000	                call sym.newFoldLevelWin	       466	fold.c	FUNCTION_20	CALL_1
0x829	    0x488b05000000	            mov rax, qword [0x04000870] 	       469	fold.c	FUNCTION_20	IF_1	CALL_2
0x830	          0x4889c7	                            mov rdi, rax	       469	fold.c	FUNCTION_20	IF_1	CALL_2
0x833	      0xe800000000	                          call 0x4000878	       469	fold.c	FUNCTION_20	IF_1	CALL_2
0x838	            0x85c0	                           test eax, eax	       469	fold.c	FUNCTION_20	IF_1	CALL_2
0x83a	     0xf8481000000	                            je 0x4000901	       469	fold.c	FUNCTION_20	IF_1	CALL_2
0x840	    0x488b05000000	            mov rax, qword [0x04000887] 	       469	fold.c	FUNCTION_20	IF_1	CALL_2
0x847	    0x8b8088020000	           mov eax, dword [rax + 0x288] 	       469	fold.c	FUNCTION_20	IF_1	CALL_2
0x84d	            0x85c0	                           test eax, eax	       469	fold.c	FUNCTION_20	IF_1	CALL_2
0x84f	            0x7470	                            je 0x4000901	       469	fold.c	FUNCTION_20	IF_1	CALL_2
0x851	    0x488b05000000	            mov rax, qword [0x04000898] 	       476	fold.c	FUNCTION_20	IF_1
0x858	        0x488945f8	                mov qword [rbp - 8], rax	       476	fold.c	FUNCTION_20	IF_1
0x85c	            0xeb5c	                           jmp 0x40008fa	       476	fold.c	FUNCTION_20	IF_1
0x85e	    0x488b05000000	            mov rax, qword [0x040008a5] 	       478	fold.c	FUNCTION_20	FUNCTION_1	CALL_1
0x865	        0x483945f8	                cmp qword [rbp - 8], rax	       478	fold.c	FUNCTION_20	FUNCTION_1	CALL_1
0x869	            0x7443	                            je 0x40008ee	       478	fold.c	FUNCTION_20	FUNCTION_1	CALL_1
0x86b	        0x488b45f8	                mov rax, qword [rbp - 8]	       478	fold.c	FUNCTION_20	FUNCTION_1	CALL_1
0x86f	          0x4889c7	                            mov rdi, rax	       478	fold.c	FUNCTION_20	FUNCTION_1	CALL_1
0x872	      0xe800000000	                          call 0x40008b7	       478	fold.c	FUNCTION_20	FUNCTION_1	CALL_1
0x877	            0x85c0	                           test eax, eax	       478	fold.c	FUNCTION_20	FUNCTION_1	CALL_1
0x879	            0x7433	                            je 0x40008ee	       478	fold.c	FUNCTION_20	FUNCTION_1	CALL_1
0x87b	        0x488b45f8	                mov rax, qword [rbp - 8]	       478	fold.c	FUNCTION_20	FUNCTION_1	CALL_1
0x87f	    0x8b8088020000	           mov eax, dword [rax + 0x288] 	       478	fold.c	FUNCTION_20	FUNCTION_1	CALL_1
0x885	            0x85c0	                           test eax, eax	       478	fold.c	FUNCTION_20	FUNCTION_1	CALL_1
0x887	            0x7425	                            je 0x40008ee	       478	fold.c	FUNCTION_20	FUNCTION_1	CALL_1
0x889	    0x488b05000000	            mov rax, qword [0x040008d0] 	       480	fold.c	FUNCTION_20	FUNCTION_1
0x890	    0x488b90e80100	           mov rdx, qword [rax + 0x1e8] 	       480	fold.c	FUNCTION_20	FUNCTION_1
0x897	        0x488b45f8	                mov rax, qword [rbp - 8]	       480	fold.c	FUNCTION_20	FUNCTION_1
0x89b	    0x488990e80100	            mov qword [rax + 0x1e8], rdx	       480	fold.c	FUNCTION_20	FUNCTION_1
0x8a2	        0x488b45f8	                mov rax, qword [rbp - 8]	       481	fold.c	FUNCTION_20	FUNCTION_1	CALL_2
0x8a6	          0x4889c7	                            mov rdi, rax	       481	fold.c	FUNCTION_20	FUNCTION_1	CALL_2
0x8a9	      0xe816000000	                call sym.newFoldLevelWin	       481	fold.c	FUNCTION_20	FUNCTION_1	CALL_2
0x8ae	        0x488b45f8	                mov rax, qword [rbp - 8]	       476	fold.c	FUNCTION_20	IF_1
0x8b2	        0x488b4020	            mov rax, qword [rax + 0x20] 	       476	fold.c	FUNCTION_20	IF_1
0x8b6	        0x488945f8	                mov qword [rbp - 8], rax	       476	fold.c	FUNCTION_20	IF_1
0x8ba	      0x48837df800	                  cmp qword [rbp - 8], 0	       476	fold.c	FUNCTION_20	IF_1
0x8bf	            0x759d	                           jne 0x400089e	       476	fold.c	FUNCTION_20	IF_1
0x8c1	              0x90	                                     nop	       486	fold.c	FUNCTION_20
0x8c2	              0xc9	                                   leave	       486	fold.c	FUNCTION_20
0x8c3	              0xc3	                                     ret	       486	fold.c	FUNCTION_20
hasFolding	SWITCH,0:ELSE,0:DO,0:FOR,0:WHILE,0:IF,0:functions,0:CALL,1	16
0xa3	              0x55	                                push rbp	       131	fold.c	FUNCTION_3
0xa4	          0x4889e5	                            mov rbp, rsp	       131	fold.c	FUNCTION_3
0xa7	        0x4883ec20	                           sub rsp, 0x20	       131	fold.c	FUNCTION_3
0xab	        0x48897df8	                mov qword [rbp - 8], rdi	       131	fold.c	FUNCTION_3
0xaf	        0x488975f0	             mov qword [rbp - 0x10], rsi	       131	fold.c	FUNCTION_3
0xb3	        0x488955e8	             mov qword [rbp - 0x18], rdx	       131	fold.c	FUNCTION_3
0xb7	    0x488b05000000	            mov rax, qword [0x040000fe] 	       132	fold.c	FUNCTION_3	CALL_1
0xbe	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	       132	fold.c	FUNCTION_3	CALL_1
0xc2	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       132	fold.c	FUNCTION_3	CALL_1
0xc6	        0x488b75f8	                mov rsi, qword [rbp - 8]	       132	fold.c	FUNCTION_3	CALL_1
0xca	    0x41b900000000	                              mov r9d, 0	       132	fold.c	FUNCTION_3	CALL_1
0xd0	    0x41b801000000	                              mov r8d, 1	       132	fold.c	FUNCTION_3	CALL_1
0xd6	          0x4889c7	                            mov rdi, rax	       132	fold.c	FUNCTION_3	CALL_1
0xd9	      0xe800000000	                          call 0x400011e	       132	fold.c	FUNCTION_3	CALL_1
0xde	              0xc9	                                   leave	       133	fold.c	FUNCTION_3
0xdf	              0xc3	                                     ret	       133	fold.c	FUNCTION_3
parseMarker	SWITCH,0:ELSE,0:DO,0:FOR,0:WHILE,0:IF,0:functions,0:CALL,2	26
0x6184	              0x55	                                push rbp	      3357	fold.c	FUNCTION_70
0x6185	          0x4889e5	                            mov rbp, rsp	      3357	fold.c	FUNCTION_70
0x6188	        0x4883ec10	                           sub rsp, 0x10	      3357	fold.c	FUNCTION_70
0x618c	        0x48897df8	                mov qword [rbp - 8], rdi	      3357	fold.c	FUNCTION_70
0x6190	        0x488b45f8	                mov rax, qword [rbp - 8]	      3358	fold.c	FUNCTION_70	CALL_1
0x6194	    0x488b80280200	           mov rax, qword [rax + 0x228] 	      3358	fold.c	FUNCTION_70	CALL_1
0x619b	      0xbe2c000000	                           mov esi, 0x2c	      3358	fold.c	FUNCTION_70	CALL_1
0x61a0	          0x4889c7	                            mov rdi, rax	      3358	fold.c	FUNCTION_70	CALL_1
0x61a3	      0xe800000000	                          call 0x40061e8	      3358	fold.c	FUNCTION_70	CALL_1
0x61a8	    0x488905000000	            mov qword [0x040061ef], rax 	      3358	fold.c	FUNCTION_70	CALL_1
0x61af	    0x488b05000000	            mov rax, qword [0x040061f6] 	      3359	fold.c	FUNCTION_70
0x61b6	        0x488d5001	                      lea rdx, [rax + 1]	      3359	fold.c	FUNCTION_70
0x61ba	    0x488915000000	            mov qword [0x04006201], rdx 	      3359	fold.c	FUNCTION_70
0x61c1	          0x4889c2	                            mov rdx, rax	      3359	fold.c	FUNCTION_70
0x61c4	        0x488b45f8	                mov rax, qword [rbp - 8]	      3359	fold.c	FUNCTION_70
0x61c8	    0x488b80280200	           mov rax, qword [rax + 0x228] 	      3359	fold.c	FUNCTION_70
0x61cf	          0x4829c2	                            sub rdx, rax	      3359	fold.c	FUNCTION_70
0x61d2	          0x4889d0	                            mov rax, rdx	      3359	fold.c	FUNCTION_70
0x61d5	    0x890500000000	            mov dword [0x0400621b], eax 	      3359	fold.c	FUNCTION_70
0x61db	    0x488b05000000	            mov rax, qword [0x04006222] 	      3360	fold.c	FUNCTION_70	CALL_2
0x61e2	          0x4889c7	                            mov rdi, rax	      3360	fold.c	FUNCTION_70	CALL_2
0x61e5	      0xe800000000	                          call 0x400622a	      3360	fold.c	FUNCTION_70	CALL_2
0x61ea	    0x890500000000	            mov dword [0x04006230], eax 	      3360	fold.c	FUNCTION_70	CALL_2
0x61f0	              0x90	                                     nop	      3361	fold.c	FUNCTION_70
0x61f1	              0xc9	                                   leave	      3361	fold.c	FUNCTION_70
0x61f2	              0xc3	                                     ret	      3361	fold.c	FUNCTION_70
foldUpdateAll	SWITCH,0:ELSE,0:DO,0:FOR,0:WHILE,0:IF,0:functions,0:CALL,1	13
0x144d	              0x55	                                push rbp	       851	fold.c	FUNCTION_29
0x144e	          0x4889e5	                            mov rbp, rsp	       851	fold.c	FUNCTION_29
0x1451	        0x4883ec10	                           sub rsp, 0x10	       851	fold.c	FUNCTION_29
0x1455	        0x48897df8	                mov qword [rbp - 8], rdi	       851	fold.c	FUNCTION_29
0x1459	        0x488b45f8	                mov rax, qword [rbp - 8]	       852	fold.c	FUNCTION_29
0x145d	    0xc68021010000	               mov byte [rax + 0x121], 1	       852	fold.c	FUNCTION_29
0x1464	        0x488b45f8	                mov rax, qword [rbp - 8]	       853	fold.c	FUNCTION_29	CALL_1
0x1468	      0xbe28000000	                           mov esi, 0x28	       853	fold.c	FUNCTION_29	CALL_1
0x146d	          0x4889c7	                            mov rdi, rax	       853	fold.c	FUNCTION_29	CALL_1
0x1470	      0xe800000000	                          call 0x40014b5	       853	fold.c	FUNCTION_29	CALL_1
0x1475	              0x90	                                     nop	       854	fold.c	FUNCTION_29
0x1476	              0xc9	                                   leave	       854	fold.c	FUNCTION_29
0x1477	              0xc3	                                     ret	       854	fold.c	FUNCTION_29
openFold	SWITCH,0:ELSE,0:DO,0:FOR,0:WHILE,0:IF,0:functions,0:CALL,1	14
0x735	              0x55	                                push rbp	       425	fold.c	FUNCTION_17
0x736	          0x4889e5	                            mov rbp, rsp	       425	fold.c	FUNCTION_17
0x739	        0x4883ec10	                           sub rsp, 0x10	       425	fold.c	FUNCTION_17
0x73d	        0x48897df8	                mov qword [rbp - 8], rdi	       425	fold.c	FUNCTION_17
0x741	        0x488975f0	             mov qword [rbp - 0x10], rsi	       425	fold.c	FUNCTION_17
0x745	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	       426	fold.c	FUNCTION_17	CALL_1
0x749	        0x488b45f8	                mov rax, qword [rbp - 8]	       426	fold.c	FUNCTION_17	CALL_1
0x74d	      0xba01000000	                              mov edx, 1	       426	fold.c	FUNCTION_17	CALL_1
0x752	          0x4889ce	                            mov rsi, rcx	       426	fold.c	FUNCTION_17	CALL_1
0x755	          0x4889c7	                            mov rdi, rax	       426	fold.c	FUNCTION_17	CALL_1
0x758	      0xe859160000	                  call sym.setFoldRepeat	       426	fold.c	FUNCTION_17	CALL_1
0x75d	              0x90	                                     nop	       427	fold.c	FUNCTION_17
0x75e	              0xc9	                                   leave	       427	fold.c	FUNCTION_17
0x75f	              0xc3	                                     ret	       427	fold.c	FUNCTION_17
foldlevelMarker	SWITCH,0:ELSE,5:DO,0:FOR,0:WHILE,1:IF,9:functions,0:CALL,8	182
0x61f3	              0x55	                                push rbp	      3375	fold.c	FUNCTION_71
0x61f4	          0x4889e5	                            mov rbp, rsp	      3375	fold.c	FUNCTION_71
0x61f7	        0x4883ec30	                           sub rsp, 0x30	      3375	fold.c	FUNCTION_71
0x61fb	        0x48897dd8	             mov qword [rbp - 0x28], rdi	      3375	fold.c	FUNCTION_71
0x61ff	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3379	fold.c	FUNCTION_71
0x6203	          0x8b4020	            mov eax, dword [rax + 0x20] 	      3379	fold.c	FUNCTION_71
0x6206	          0x8945e0	             mov dword [rbp - 0x20], eax	      3379	fold.c	FUNCTION_71
0x6209	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3384	fold.c	FUNCTION_71
0x620d	          0x488b00	                    mov rax, qword [rax]	      3384	fold.c	FUNCTION_71
0x6210	    0x488b80280200	           mov rax, qword [rax + 0x228] 	      3384	fold.c	FUNCTION_71
0x6217	        0x488945f8	                mov qword [rbp - 8], rax	      3384	fold.c	FUNCTION_71
0x621b	        0x488b45f8	                mov rax, qword [rbp - 8]	      3385	fold.c	FUNCTION_71
0x621f	           0xfb600	                   movzx eax, byte [rax]	      3385	fold.c	FUNCTION_71
0x6222	           0xfb6c0	                           movzx eax, al	      3385	fold.c	FUNCTION_71
0x6225	          0x8945e4	             mov dword [rbp - 0x1c], eax	      3385	fold.c	FUNCTION_71
0x6228	      0x488345f801	                  add qword [rbp - 8], 1	      3386	fold.c	FUNCTION_71
0x622d	    0x488b05000000	            mov rax, qword [0x04006274] 	      3387	fold.c	FUNCTION_71
0x6234	           0xfb600	                   movzx eax, byte [rax]	      3387	fold.c	FUNCTION_71
0x6237	           0xfb6c0	                           movzx eax, al	      3387	fold.c	FUNCTION_71
0x623a	          0x8945e8	             mov dword [rbp - 0x18], eax	      3387	fold.c	FUNCTION_71
0x623d	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3390	fold.c	FUNCTION_71
0x6241	    0xc74028000000	               mov dword [rax + 0x28], 0	      3390	fold.c	FUNCTION_71
0x6248	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3391	fold.c	FUNCTION_71
0x624c	          0x8b5020	            mov edx, dword [rax + 0x20] 	      3391	fold.c	FUNCTION_71
0x624f	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3391	fold.c	FUNCTION_71
0x6253	          0x895024	             mov dword [rax + 0x24], edx	      3391	fold.c	FUNCTION_71
0x6256	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3393	fold.c	FUNCTION_71	CALL_1
0x625a	        0x488b5008	                mov rdx, qword [rax + 8]	      3393	fold.c	FUNCTION_71	CALL_1
0x625e	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3393	fold.c	FUNCTION_71	CALL_1
0x6262	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3393	fold.c	FUNCTION_71	CALL_1
0x6266	        0x488d0c02	                    lea rcx, [rdx + rax]	      3393	fold.c	FUNCTION_71	CALL_1
0x626a	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3393	fold.c	FUNCTION_71	CALL_1
0x626e	          0x488b00	                    mov rax, qword [rax]	      3393	fold.c	FUNCTION_71	CALL_1
0x6271	        0x488b4008	                mov rax, qword [rax + 8]	      3393	fold.c	FUNCTION_71	CALL_1
0x6275	      0xba00000000	                              mov edx, 0	      3393	fold.c	FUNCTION_71	CALL_1
0x627a	          0x4889ce	                            mov rsi, rcx	      3393	fold.c	FUNCTION_71	CALL_1
0x627d	          0x4889c7	                            mov rdi, rax	      3393	fold.c	FUNCTION_71	CALL_1
0x6280	      0xe800000000	                          call 0x40062c5	      3393	fold.c	FUNCTION_71	CALL_1
0x6285	        0x488945f0	             mov qword [rbp - 0x10], rax	      3393	fold.c	FUNCTION_71	CALL_1
0x6289	      0xe9c9010000	                           jmp 0x4006497	      3394	fold.c	FUNCTION_71	WHILE_1
0x628e	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3396	fold.c	FUNCTION_71	WHILE_1	IF_1
0x6292	           0xfb600	                   movzx eax, byte [rax]	      3396	fold.c	FUNCTION_71	WHILE_1	IF_1
0x6295	           0xfb6c0	                           movzx eax, al	      3396	fold.c	FUNCTION_71	WHILE_1	IF_1
0x6298	          0x3b45e4	             cmp eax, dword [rbp - 0x1c]	      3396	fold.c	FUNCTION_71	WHILE_1	IF_1
0x629b	     0xf85da000000	                           jne 0x40063bb	      3396	fold.c	FUNCTION_71	WHILE_1	IF_1
0x62a1	    0x8b0500000000	            mov eax, dword [0x040062e7] 	      3397	fold.c	FUNCTION_71	WHILE_1	IF_1	CALL_2
0x62a7	          0x83e801	                              sub eax, 1	      3397	fold.c	FUNCTION_71	WHILE_1	IF_1	CALL_2
0x62aa	          0x4863d0	                         movsxd rdx, eax	      3397	fold.c	FUNCTION_71	WHILE_1	IF_1	CALL_2
0x62ad	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3397	fold.c	FUNCTION_71	WHILE_1	IF_1	CALL_2
0x62b1	        0x488d4801	                      lea rcx, [rax + 1]	      3397	fold.c	FUNCTION_71	WHILE_1	IF_1	CALL_2
0x62b5	        0x488b45f8	                mov rax, qword [rbp - 8]	      3397	fold.c	FUNCTION_71	WHILE_1	IF_1	CALL_2
0x62b9	          0x4889c6	                            mov rsi, rax	      3397	fold.c	FUNCTION_71	WHILE_1	IF_1	CALL_2
0x62bc	          0x4889cf	                            mov rdi, rcx	      3397	fold.c	FUNCTION_71	WHILE_1	IF_1	CALL_2
0x62bf	      0xe800000000	                          call 0x4006304	      3397	fold.c	FUNCTION_71	WHILE_1	IF_1	CALL_2
0x62c4	            0x85c0	                           test eax, eax	      3397	fold.c	FUNCTION_71	WHILE_1	IF_1	CALL_2
0x62c6	     0xf85af000000	                           jne 0x40063bb	      3397	fold.c	FUNCTION_71	WHILE_1	IF_1	CALL_2
0x62cc	    0x8b0500000000	            mov eax, dword [0x04006312] 	      3400	fold.c	FUNCTION_71	WHILE_1	IF_1
0x62d2	            0x4898	                                    cdqe	      3400	fold.c	FUNCTION_71	WHILE_1	IF_1
0x62d4	        0x480145f0	            add qword [rbp - 0x10], rax 	      3400	fold.c	FUNCTION_71	WHILE_1	IF_1
0x62d8	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3401	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	CALL_3
0x62dc	           0xfb600	                   movzx eax, byte [rax]	      3401	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	CALL_3
0x62df	           0xfb6c0	                           movzx eax, al	      3401	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	CALL_3
0x62e2	          0x83e830	                           sub eax, 0x30	      3401	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	CALL_3
0x62e5	          0x83f809	                              cmp eax, 9	      3401	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	CALL_3
0x62e8	            0x7759	                            ja 0x4006383	      3401	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	CALL_3
0x62ea	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3403	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	CALL_4
0x62ee	          0x4889c7	                            mov rdi, rax	      3403	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	CALL_4
0x62f1	      0xe800000000	                          call 0x4006336	      3403	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	CALL_4
0x62f6	          0x8945ec	             mov dword [rbp - 0x14], eax	      3403	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	CALL_4
0x62f9	        0x837dec00	               cmp dword [rbp - 0x14], 0	      3404	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3
0x62fd	     0xf8e54010000	                           jle 0x4006497	      3404	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3
0x6303	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3406	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3
0x6307	          0x8b55ec	             mov edx, dword [rbp - 0x14]	      3406	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3
0x630a	          0x895020	             mov dword [rax + 0x20], edx	      3406	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3
0x630d	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3407	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3
0x6311	          0x8b55ec	             mov edx, dword [rbp - 0x14]	      3407	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3
0x6314	          0x895024	             mov dword [rax + 0x24], edx	      3407	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3
0x6317	          0x8b45ec	             mov eax, dword [rbp - 0x14]	      3408	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3	IF_4
0x631a	          0x3b45e0	             cmp eax, dword [rbp - 0x20]	      3408	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3	IF_4
0x631d	            0x7f10	                            jg 0x400636f	      3408	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3	IF_4
0x631f	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3409	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3	IF_4
0x6323	    0xc74028010000	               mov dword [rax + 0x28], 1	      3409	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3	IF_4
0x632a	      0xe928010000	                           jmp 0x4006497	      3409	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3	IF_4
0x632f	          0x8b45ec	             mov eax, dword [rbp - 0x14]	      3411	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3	ELSE_1
0x6332	          0x2b45e0	             sub eax, dword [rbp - 0x20]	      3411	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3	ELSE_1
0x6335	            0x89c2	                            mov edx, eax	      3411	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3	ELSE_1
0x6337	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3411	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3	ELSE_1
0x633b	          0x895028	             mov dword [rax + 0x28], edx	      3411	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3	ELSE_1
0x633e	      0xe914010000	                           jmp 0x4006497	      3411	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3	ELSE_1
0x6343	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3416	fold.c	FUNCTION_71	WHILE_1	IF_1	ELSE_1	ELSE_2
0x6347	          0x8b4020	            mov eax, dword [rax + 0x20] 	      3416	fold.c	FUNCTION_71	WHILE_1	IF_1	ELSE_1	ELSE_2
0x634a	          0x8d5001	                      lea edx, [rax + 1]	      3416	fold.c	FUNCTION_71	WHILE_1	IF_1	ELSE_1	ELSE_2
0x634d	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3416	fold.c	FUNCTION_71	WHILE_1	IF_1	ELSE_1	ELSE_2
0x6351	          0x895020	             mov dword [rax + 0x20], edx	      3416	fold.c	FUNCTION_71	WHILE_1	IF_1	ELSE_1	ELSE_2
0x6354	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3417	fold.c	FUNCTION_71	WHILE_1	IF_1	ELSE_1	ELSE_2
0x6358	          0x8b4024	            mov eax, dword [rax + 0x24] 	      3417	fold.c	FUNCTION_71	WHILE_1	IF_1	ELSE_1	ELSE_2
0x635b	          0x8d5001	                      lea edx, [rax + 1]	      3417	fold.c	FUNCTION_71	WHILE_1	IF_1	ELSE_1	ELSE_2
0x635e	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3417	fold.c	FUNCTION_71	WHILE_1	IF_1	ELSE_1	ELSE_2
0x6362	          0x895024	             mov dword [rax + 0x24], edx	      3417	fold.c	FUNCTION_71	WHILE_1	IF_1	ELSE_1	ELSE_2
0x6365	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3418	fold.c	FUNCTION_71	WHILE_1	IF_1	ELSE_1	ELSE_2
0x6369	          0x8b4028	            mov eax, dword [rax + 0x28] 	      3418	fold.c	FUNCTION_71	WHILE_1	IF_1	ELSE_1	ELSE_2
0x636c	          0x8d5001	                      lea edx, [rax + 1]	      3418	fold.c	FUNCTION_71	WHILE_1	IF_1	ELSE_1	ELSE_2
0x636f	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3418	fold.c	FUNCTION_71	WHILE_1	IF_1	ELSE_1	ELSE_2
0x6373	          0x895028	             mov dword [rax + 0x28], edx	      3418	fold.c	FUNCTION_71	WHILE_1	IF_1	ELSE_1	ELSE_2
0x6376	      0xe9dc000000	                           jmp 0x4006497	      3401	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	CALL_3
0x637b	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3421	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5
0x637f	           0xfb600	                   movzx eax, byte [rax]	      3421	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5
0x6382	           0xfb6c0	                           movzx eax, al	      3421	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5
0x6385	          0x3b45e8	             cmp eax, dword [rbp - 0x18]	      3421	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5
0x6388	     0xf85a2000000	                           jne 0x4006470	      3421	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5
0x638e	    0x8b0500000000	            mov eax, dword [0x040063d4] 	      3422	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	CALL_5
0x6394	          0x83e801	                              sub eax, 1	      3422	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	CALL_5
0x6397	            0x4898	                                    cdqe	      3422	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	CALL_5
0x6399	    0x488b15000000	            mov rdx, qword [0x040063e0] 	      3422	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	CALL_5
0x63a0	        0x488d7201	                      lea rsi, [rdx + 1]	      3422	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	CALL_5
0x63a4	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      3422	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	CALL_5
0x63a8	        0x488d4a01	                      lea rcx, [rdx + 1]	      3422	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	CALL_5
0x63ac	          0x4889c2	                            mov rdx, rax	      3422	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	CALL_5
0x63af	          0x4889cf	                            mov rdi, rcx	      3422	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	CALL_5
0x63b2	      0xe800000000	                          call 0x40063f7	      3422	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	CALL_5
0x63b7	            0x85c0	                           test eax, eax	      3422	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	CALL_5
0x63b9	            0x7575	                           jne 0x4006470	      3422	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	CALL_5
0x63bb	    0x8b0500000000	            mov eax, dword [0x04006401] 	      3425	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5
0x63c1	            0x4898	                                    cdqe	      3425	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5
0x63c3	        0x480145f0	            add qword [rbp - 0x10], rax 	      3425	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5
0x63c7	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3426	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	CALL_6
0x63cb	           0xfb600	                   movzx eax, byte [rax]	      3426	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	CALL_6
0x63ce	           0xfb6c0	                           movzx eax, al	      3426	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	CALL_6
0x63d1	          0x83e830	                           sub eax, 0x30	      3426	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	CALL_6
0x63d4	          0x83f809	                              cmp eax, 9	      3426	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	CALL_6
0x63d7	            0x7744	                            ja 0x400645d	      3426	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	CALL_6
0x63d9	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3428	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	CALL_7
0x63dd	          0x4889c7	                            mov rdi, rax	      3428	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	CALL_7
0x63e0	      0xe800000000	                          call 0x4006425	      3428	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	CALL_7
0x63e5	          0x8945ec	             mov dword [rbp - 0x14], eax	      3428	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	CALL_7
0x63e8	        0x837dec00	               cmp dword [rbp - 0x14], 0	      3429	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	IF_7
0x63ec	            0x7e69	                           jle 0x4006497	      3429	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	IF_7
0x63ee	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3431	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	IF_7
0x63f2	          0x8b55ec	             mov edx, dword [rbp - 0x14]	      3431	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	IF_7
0x63f5	          0x895020	             mov dword [rax + 0x20], edx	      3431	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	IF_7
0x63f8	          0x8b45ec	             mov eax, dword [rbp - 0x14]	      3432	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	IF_7
0x63fb	          0x8d50ff	                      lea edx, [rax - 1]	      3432	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	IF_7
0x63fe	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3432	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	IF_7
0x6402	          0x895024	             mov dword [rax + 0x24], edx	      3432	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	IF_7
0x6405	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3434	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	IF_7	IF_8
0x6409	          0x8b4024	            mov eax, dword [rax + 0x24] 	      3434	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	IF_7	IF_8
0x640c	          0x3b45e0	             cmp eax, dword [rbp - 0x20]	      3434	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	IF_7	IF_8
0x640f	            0x7e46	                           jle 0x4006497	      3434	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	IF_7	IF_8
0x6411	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3435	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	IF_7	IF_8
0x6415	          0x8b55e0	             mov edx, dword [rbp - 0x20]	      3435	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	IF_7	IF_8
0x6418	          0x895024	             mov dword [rax + 0x24], edx	      3435	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	IF_7	IF_8
0x641b	            0xeb3a	                           jmp 0x4006497	      3435	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	IF_7	IF_8
0x641d	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3439	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	ELSE_4
0x6421	          0x8b4024	            mov eax, dword [rax + 0x24] 	      3439	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	ELSE_4
0x6424	          0x8d50ff	                      lea edx, [rax - 1]	      3439	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	ELSE_4
0x6427	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3439	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	ELSE_4
0x642b	          0x895024	             mov dword [rax + 0x24], edx	      3439	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	ELSE_4
0x642e	            0xeb27	                           jmp 0x4006497	      3426	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	CALL_6
0x6430	    0x8b0500000000	            mov eax, dword [0x04006476] 	      3442	fold.c	FUNCTION_71	WHILE_1	CALL_8
0x6436	            0x85c0	                           test eax, eax	      3442	fold.c	FUNCTION_71	WHILE_1	CALL_8
0x6438	            0x7412	                            je 0x400648c	      3442	fold.c	FUNCTION_71	WHILE_1	CALL_8
0x643a	    0x488b05000000	            mov rax, qword [0x04006481] 	      3442	fold.c	FUNCTION_71	WHILE_1	CALL_8
0x6441	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      3442	fold.c	FUNCTION_71	WHILE_1	CALL_8
0x6445	          0x4889d7	                            mov rdi, rdx	      3442	fold.c	FUNCTION_71	WHILE_1	CALL_8
0x6448	            0xffd0	                                call rax	      3442	fold.c	FUNCTION_71	WHILE_1	CALL_8
0x644a	            0xeb05	                           jmp 0x4006491	      3442	fold.c	FUNCTION_71	WHILE_1	CALL_8
0x644c	      0xb801000000	                              mov eax, 1	      3442	fold.c	FUNCTION_71	WHILE_1	CALL_8
0x6451	            0x4898	                                    cdqe	      3442	fold.c	FUNCTION_71	WHILE_1	CALL_8
0x6453	        0x480145f0	            add qword [rbp - 0x10], rax 	      3442	fold.c	FUNCTION_71	WHILE_1	CALL_8
0x6457	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3394	fold.c	FUNCTION_71	WHILE_1
0x645b	           0xfb600	                   movzx eax, byte [rax]	      3394	fold.c	FUNCTION_71	WHILE_1
0x645e	            0x84c0	                             test al, al	      3394	fold.c	FUNCTION_71	WHILE_1
0x6460	     0xf8528feffff	                           jne 0x40062ce	      3394	fold.c	FUNCTION_71	WHILE_1
0x6466	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3446	fold.c	FUNCTION_71	IF_9
0x646a	          0x8b4024	            mov eax, dword [rax + 0x24] 	      3446	fold.c	FUNCTION_71	IF_9
0x646d	            0x85c0	                           test eax, eax	      3446	fold.c	FUNCTION_71	IF_9
0x646f	            0x790b	                           jns 0x40064bc	      3446	fold.c	FUNCTION_71	IF_9
0x6471	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3447	fold.c	FUNCTION_71	IF_9
0x6475	    0xc74024000000	               mov dword [rax + 0x24], 0	      3447	fold.c	FUNCTION_71	IF_9
0x647c	              0x90	                                     nop	      3448	fold.c	FUNCTION_71
0x647d	              0xc9	                                   leave	      3448	fold.c	FUNCTION_71
0x647e	              0xc3	                                     ret	      3448	fold.c	FUNCTION_71
foldOpenCursor	SWITCH,0:ELSE,0:DO,0:FOR,1:WHILE,0:IF,2:functions,0:CALL,3	36
0x78a	              0x55	                                push rbp	       445	fold.c	FUNCTION_19
0x78b	          0x4889e5	                            mov rbp, rsp	       445	fold.c	FUNCTION_19
0x78e	        0x4883ec10	                           sub rsp, 0x10	       445	fold.c	FUNCTION_19
0x792	    0x64488b042528	                mov rax, qword fs:[0x28]	       445	fold.c	FUNCTION_19
0x79b	        0x488945f8	                mov qword [rbp - 8], rax	       445	fold.c	FUNCTION_19
0x79f	            0x31c0	                            xor eax, eax	       445	fold.c	FUNCTION_19
0x7a1	    0x488b05000000	            mov rax, qword [0x040007e8] 	       448	fold.c	FUNCTION_19	CALL_1
0x7a8	          0x4889c7	                            mov rdi, rax	       448	fold.c	FUNCTION_19	CALL_1
0x7ab	      0xe8c7150000	                    call sym.checkupdate	       448	fold.c	FUNCTION_19	CALL_1
0x7b0	    0x488b05000000	            mov rax, qword [0x040007f7] 	       449	fold.c	FUNCTION_19	IF_1	CALL_2
0x7b7	          0x4889c7	                            mov rdi, rax	       449	fold.c	FUNCTION_19	IF_1	CALL_2
0x7ba	      0xe800000000	                          call 0x40007ff	       449	fold.c	FUNCTION_19	IF_1	CALL_2
0x7bf	            0x85c0	                           test eax, eax	       449	fold.c	FUNCTION_19	IF_1	CALL_2
0x7c1	            0x7438	                            je 0x400083b	       449	fold.c	FUNCTION_19	IF_1	CALL_2
0x7c3	    0xc745f4000000	                mov dword [rbp - 0xc], 0	       452	fold.c	FUNCTION_19	IF_1	FOR_1
0x7ca	    0x488b05000000	            mov rax, qword [0x04000811] 	       453	fold.c	FUNCTION_19	IF_1	FOR_1	CALL_3
0x7d1	        0x488b4038	            mov rax, qword [rax + 0x38] 	       453	fold.c	FUNCTION_19	IF_1	FOR_1	CALL_3
0x7d5	        0x488d55f4	                    lea rdx, [rbp - 0xc]	       453	fold.c	FUNCTION_19	IF_1	FOR_1	CALL_3
0x7d9	          0x4889d1	                            mov rcx, rdx	       453	fold.c	FUNCTION_19	IF_1	FOR_1	CALL_3
0x7dc	      0xba00000000	                              mov edx, 0	       453	fold.c	FUNCTION_19	IF_1	FOR_1	CALL_3
0x7e1	      0xbe01000000	                              mov esi, 1	       453	fold.c	FUNCTION_19	IF_1	FOR_1	CALL_3
0x7e6	          0x4889c7	                            mov rdi, rax	       453	fold.c	FUNCTION_19	IF_1	FOR_1	CALL_3
0x7e9	      0xe873160000	                  call sym.setManualFold	       453	fold.c	FUNCTION_19	IF_1	FOR_1	CALL_3
0x7ee	          0x8b45f4	              mov eax, dword [rbp - 0xc]	       454	fold.c	FUNCTION_19	IF_1	FOR_1	IF_2
0x7f1	          0x83e001	                              and eax, 1	       454	fold.c	FUNCTION_19	IF_1	FOR_1	IF_2
0x7f4	            0x85c0	                           test eax, eax	       454	fold.c	FUNCTION_19	IF_1	FOR_1	IF_2
0x7f6	            0x7402	                            je 0x400083a	       454	fold.c	FUNCTION_19	IF_1	FOR_1	IF_2
0x7f8	            0xebc9	                           jmp 0x4000803	       456	fold.c	FUNCTION_19	IF_1	FOR_1
0x7fa	              0x90	                                     nop	       455	fold.c	FUNCTION_19	IF_1	FOR_1	IF_2
0x7fb	              0x90	                                     nop	       457	fold.c	FUNCTION_19
0x7fc	        0x488b45f8	                mov rax, qword [rbp - 8]	       457	fold.c	FUNCTION_19
0x800	    0x644833042528	                xor rax, qword fs:[0x28]	       457	fold.c	FUNCTION_19
0x809	            0x7405	                            je 0x4000850	       457	fold.c	FUNCTION_19
0x80b	      0xe800000000	                          call 0x4000850	       457	fold.c	FUNCTION_19
0x810	              0xc9	                                   leave	       457	fold.c	FUNCTION_19
0x811	              0xc3	                                     ret	       457	fold.c	FUNCTION_19
foldmethodIsSyntax	SWITCH,0:ELSE,0:DO,0:FOR,0:WHILE,0:IF,0:functions,0:CALL,0	11
0x5ab	              0x55	                                push rbp	       346	fold.c	FUNCTION_12
0x5ac	          0x4889e5	                            mov rbp, rsp	       346	fold.c	FUNCTION_12
0x5af	        0x48897df8	                mov qword [rbp - 8], rdi	       346	fold.c	FUNCTION_12
0x5b3	        0x488b45f8	                mov rax, qword [rbp - 8]	       347	fold.c	FUNCTION_12
0x5b7	    0x488b80f80100	           mov rax, qword [rax + 0x1f8] 	       347	fold.c	FUNCTION_12
0x5be	           0xfb600	                   movzx eax, byte [rax]	       347	fold.c	FUNCTION_12
0x5c1	            0x3c73	                            cmp al, 0x73	       347	fold.c	FUNCTION_12
0x5c3	           0xf94c0	                                 sete al	       347	fold.c	FUNCTION_12
0x5c6	           0xfb6c0	                           movzx eax, al	       347	fold.c	FUNCTION_12
0x5c9	              0x5d	                                 pop rbp	       348	fold.c	FUNCTION_12
0x5ca	              0xc3	                                     ret	       348	fold.c	FUNCTION_12
closeFoldRecurse	SWITCH,0:ELSE,0:DO,0:FOR,0:WHILE,0:IF,0:functions,0:CALL,1	13
0x616	              0x55	                                push rbp	       377	fold.c	FUNCTION_15
0x617	          0x4889e5	                            mov rbp, rsp	       377	fold.c	FUNCTION_15
0x61a	        0x4883ec10	                           sub rsp, 0x10	       377	fold.c	FUNCTION_15
0x61e	        0x48897df8	                mov qword [rbp - 8], rdi	       377	fold.c	FUNCTION_15
0x622	        0x488b45f8	                mov rax, qword [rbp - 8]	       378	fold.c	FUNCTION_15	CALL_1
0x626	      0xb900000000	                              mov ecx, 0	       378	fold.c	FUNCTION_15	CALL_1
0x62b	      0xba01000000	                              mov edx, 1	       378	fold.c	FUNCTION_15	CALL_1
0x630	      0xbe00000000	                              mov esi, 0	       378	fold.c	FUNCTION_15	CALL_1
0x635	          0x4889c7	                            mov rdi, rax	       378	fold.c	FUNCTION_15	CALL_1
0x638	      0xe824180000	                  call sym.setManualFold	       378	fold.c	FUNCTION_15	CALL_1
0x63d	              0x90	                                     nop	       379	fold.c	FUNCTION_15
0x63e	              0xc9	                                   leave	       379	fold.c	FUNCTION_15
0x63f	              0xc3	                                     ret	       379	fold.c	FUNCTION_15
getDeepestNestingRecurse	SWITCH,0:ELSE,0:DO,0:FOR,1:WHILE,0:IF,1:functions,0:CALL,1	37
0x29a1	              0x55	                                push rbp	      1618	fold.c	FUNCTION_48
0x29a2	          0x4889e5	                            mov rbp, rsp	      1618	fold.c	FUNCTION_48
0x29a5	        0x4883ec30	                           sub rsp, 0x30	      1618	fold.c	FUNCTION_48
0x29a9	        0x48897dd8	             mov qword [rbp - 0x28], rdi	      1618	fold.c	FUNCTION_48
0x29ad	    0xc745f0000000	               mov dword [rbp - 0x10], 0	      1621	fold.c	FUNCTION_48
0x29b4	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1624	fold.c	FUNCTION_48
0x29b8	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1624	fold.c	FUNCTION_48
0x29bc	        0x488945f8	                mov qword [rbp - 8], rax	      1624	fold.c	FUNCTION_48
0x29c0	    0xc745ec000000	               mov dword [rbp - 0x14], 0	      1625	fold.c	FUNCTION_48	FOR_1
0x29c7	            0xeb41	                           jmp 0x4002a4a	      1625	fold.c	FUNCTION_48	FOR_1
0x29c9	          0x8b45ec	             mov eax, dword [rbp - 0x14]	      1627	fold.c	FUNCTION_48	FOR_1	CALL_1
0x29cc	          0x4863d0	                         movsxd rdx, eax	      1627	fold.c	FUNCTION_48	FOR_1	CALL_1
0x29cf	          0x4889d0	                            mov rax, rdx	      1627	fold.c	FUNCTION_48	FOR_1	CALL_1
0x29d2	          0x4801c0	                            add rax, rax	      1627	fold.c	FUNCTION_48	FOR_1	CALL_1
0x29d5	          0x4801d0	                            add rax, rdx	      1627	fold.c	FUNCTION_48	FOR_1	CALL_1
0x29d8	        0x48c1e004	                              shl rax, 4	      1627	fold.c	FUNCTION_48	FOR_1	CALL_1
0x29dc	          0x4889c2	                            mov rdx, rax	      1627	fold.c	FUNCTION_48	FOR_1	CALL_1
0x29df	        0x488b45f8	                mov rax, qword [rbp - 8]	      1627	fold.c	FUNCTION_48	FOR_1	CALL_1
0x29e3	          0x4801d0	                            add rax, rdx	      1627	fold.c	FUNCTION_48	FOR_1	CALL_1
0x29e6	        0x4883c010	                           add rax, 0x10	      1627	fold.c	FUNCTION_48	FOR_1	CALL_1
0x29ea	          0x4889c7	                            mov rdi, rax	      1627	fold.c	FUNCTION_48	FOR_1	CALL_1
0x29ed	      0xe8afffffff	       call sym.getDeepestNestingRecurse	      1627	fold.c	FUNCTION_48	FOR_1	CALL_1
0x29f2	          0x83c001	                              add eax, 1	      1627	fold.c	FUNCTION_48	FOR_1	CALL_1
0x29f5	          0x8945f4	              mov dword [rbp - 0xc], eax	      1627	fold.c	FUNCTION_48	FOR_1	CALL_1
0x29f8	          0x8b45f4	              mov eax, dword [rbp - 0xc]	      1628	fold.c	FUNCTION_48	FOR_1	IF_1
0x29fb	          0x3b45f0	             cmp eax, dword [rbp - 0x10]	      1628	fold.c	FUNCTION_48	FOR_1	IF_1
0x29fe	            0x7e06	                           jle 0x4002a46	      1628	fold.c	FUNCTION_48	FOR_1	IF_1
0x2a00	          0x8b45f4	              mov eax, dword [rbp - 0xc]	      1629	fold.c	FUNCTION_48	FOR_1	IF_1
0x2a03	          0x8945f0	             mov dword [rbp - 0x10], eax	      1629	fold.c	FUNCTION_48	FOR_1	IF_1
0x2a06	        0x8345ec01	               add dword [rbp - 0x14], 1	      1625	fold.c	FUNCTION_48	FOR_1
0x2a0a	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1625	fold.c	FUNCTION_48	FOR_1
0x2a0e	            0x8b00	                    mov eax, dword [rax]	      1625	fold.c	FUNCTION_48	FOR_1
0x2a10	          0x3b45ec	             cmp eax, dword [rbp - 0x14]	      1625	fold.c	FUNCTION_48	FOR_1
0x2a13	            0x7fb4	                            jg 0x4002a09	      1625	fold.c	FUNCTION_48	FOR_1
0x2a15	          0x8b45f0	             mov eax, dword [rbp - 0x10]	      1632	fold.c	FUNCTION_48
0x2a18	              0xc9	                                   leave	      1633	fold.c	FUNCTION_48
0x2a19	              0xc3	                                     ret	      1633	fold.c	FUNCTION_48
openFoldRecurse	SWITCH,0:ELSE,0:DO,0:FOR,0:WHILE,0:IF,0:functions,0:CALL,1	13
0x760	              0x55	                                push rbp	       435	fold.c	FUNCTION_18
0x761	          0x4889e5	                            mov rbp, rsp	       435	fold.c	FUNCTION_18
0x764	        0x4883ec10	                           sub rsp, 0x10	       435	fold.c	FUNCTION_18
0x768	        0x48897df8	                mov qword [rbp - 8], rdi	       435	fold.c	FUNCTION_18
0x76c	        0x488b45f8	                mov rax, qword [rbp - 8]	       436	fold.c	FUNCTION_18	CALL_1
0x770	      0xb900000000	                              mov ecx, 0	       436	fold.c	FUNCTION_18	CALL_1
0x775	      0xba01000000	                              mov edx, 1	       436	fold.c	FUNCTION_18	CALL_1
0x77a	      0xbe01000000	                              mov esi, 1	       436	fold.c	FUNCTION_18	CALL_1
0x77f	          0x4889c7	                            mov rdi, rax	       436	fold.c	FUNCTION_18	CALL_1
0x782	      0xe8da160000	                  call sym.setManualFold	       436	fold.c	FUNCTION_18	CALL_1
0x787	              0x90	                                     nop	       437	fold.c	FUNCTION_18
0x788	              0xc9	                                   leave	       437	fold.c	FUNCTION_18
0x789	              0xc3	                                     ret	       437	fold.c	FUNCTION_18
truncate_fold	SWITCH,0:ELSE,0:DO,0:FOR,0:WHILE,0:IF,0:functions,0:CALL,1	26
0x55be	              0x55	                                push rbp	      3024	fold.c	FUNCTION_64
0x55bf	          0x4889e5	                            mov rbp, rsp	      3024	fold.c	FUNCTION_64
0x55c2	        0x4883ec10	                           sub rsp, 0x10	      3024	fold.c	FUNCTION_64
0x55c6	        0x48897df8	                mov qword [rbp - 8], rdi	      3024	fold.c	FUNCTION_64
0x55ca	        0x488975f0	             mov qword [rbp - 0x10], rsi	      3024	fold.c	FUNCTION_64
0x55ce	      0x488345f001	               add qword [rbp - 0x10], 1	      3025	fold.c	FUNCTION_64
0x55d3	        0x488b45f8	                mov rax, qword [rbp - 8]	      3026	fold.c	FUNCTION_64	CALL_1
0x55d7	          0x488b00	                    mov rax, qword [rax]	      3026	fold.c	FUNCTION_64	CALL_1
0x55da	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      3026	fold.c	FUNCTION_64	CALL_1
0x55de	          0x4889d1	                            mov rcx, rdx	      3026	fold.c	FUNCTION_64	CALL_1
0x55e1	          0x4829c1	                            sub rcx, rax	      3026	fold.c	FUNCTION_64	CALL_1
0x55e4	        0x488b45f8	                mov rax, qword [rbp - 8]	      3026	fold.c	FUNCTION_64	CALL_1
0x55e8	        0x4883c010	                           add rax, 0x10	      3026	fold.c	FUNCTION_64	CALL_1
0x55ec	      0xbaffffff7f	                     mov edx, 0x7fffffff	      3026	fold.c	FUNCTION_64	CALL_1
0x55f1	          0x4889ce	                            mov rsi, rcx	      3026	fold.c	FUNCTION_64	CALL_1
0x55f4	          0x4889c7	                            mov rdi, rax	      3026	fold.c	FUNCTION_64	CALL_1
0x55f7	      0xe840fcffff	                     call sym.foldRemove	      3026	fold.c	FUNCTION_64	CALL_1
0x55fc	        0x488b45f8	                mov rax, qword [rbp - 8]	      3027	fold.c	FUNCTION_64
0x5600	          0x488b00	                    mov rax, qword [rax]	      3027	fold.c	FUNCTION_64
0x5603	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      3027	fold.c	FUNCTION_64
0x5607	          0x4829c2	                            sub rdx, rax	      3027	fold.c	FUNCTION_64
0x560a	        0x488b45f8	                mov rax, qword [rbp - 8]	      3027	fold.c	FUNCTION_64
0x560e	        0x48895008	                mov qword [rax + 8], rdx	      3027	fold.c	FUNCTION_64
0x5612	              0x90	                                     nop	      3028	fold.c	FUNCTION_64
0x5613	              0xc9	                                   leave	      3028	fold.c	FUNCTION_64
0x5614	              0xc3	                                     ret	      3028	fold.c	FUNCTION_64
foldmethodIsMarker	SWITCH,0:ELSE,0:DO,0:FOR,0:WHILE,0:IF,0:functions,0:CALL,0	12
0x587	              0x55	                                push rbp	       336	fold.c	FUNCTION_11
0x588	          0x4889e5	                            mov rbp, rsp	       336	fold.c	FUNCTION_11
0x58b	        0x48897df8	                mov qword [rbp - 8], rdi	       336	fold.c	FUNCTION_11
0x58f	        0x488b45f8	                mov rax, qword [rbp - 8]	       337	fold.c	FUNCTION_11
0x593	    0x488b80f80100	           mov rax, qword [rax + 0x1f8] 	       337	fold.c	FUNCTION_11
0x59a	        0x4883c002	                              add rax, 2	       337	fold.c	FUNCTION_11
0x59e	           0xfb600	                   movzx eax, byte [rax]	       337	fold.c	FUNCTION_11
0x5a1	            0x3c72	                            cmp al, 0x72	       337	fold.c	FUNCTION_11
0x5a3	           0xf94c0	                                 sete al	       337	fold.c	FUNCTION_11
0x5a6	           0xfb6c0	                           movzx eax, al	       337	fold.c	FUNCTION_11
0x5a9	              0x5d	                                 pop rbp	       338	fold.c	FUNCTION_11
0x5aa	              0xc3	                                     ret	       338	fold.c	FUNCTION_11
foldUpdateIEMS	SWITCH,0:ELSE,9:DO,0:FOR,1:WHILE,2:IF,29:functions,0:CALL,19	394
0x38d2	              0x55	                                push rbp	      2119	fold.c	FUNCTION_58
0x38d3	          0x4889e5	                            mov rbp, rsp	      2119	fold.c	FUNCTION_58
0x38d6	    0x4881ecb00000	                           sub rsp, 0xb0	      2119	fold.c	FUNCTION_58
0x38dd	    0x4889bd68ffff	             mov qword [rbp - 0x98], rdi	      2119	fold.c	FUNCTION_58
0x38e4	    0x4889b560ffff	             mov qword [rbp - 0xa0], rsi	      2119	fold.c	FUNCTION_58
0x38eb	    0x48899558ffff	             mov qword [rbp - 0xa8], rdx	      2119	fold.c	FUNCTION_58
0x38f2	    0x64488b042528	                mov rax, qword fs:[0x28]	      2119	fold.c	FUNCTION_58
0x38fb	        0x488945f8	                mov qword [rbp - 8], rax	      2119	fold.c	FUNCTION_58
0x38ff	            0x31c0	                            xor eax, eax	      2119	fold.c	FUNCTION_58
0x3901	    0x488b05000000	            mov rax, qword [0x04003948] 	      2128	fold.c	FUNCTION_58	IF_1
0x3908	          0x4885c0	                           test rax, rax	      2128	fold.c	FUNCTION_58	IF_1
0x390b	     0xf856d060000	                           jne 0x4003fbe	      2128	fold.c	FUNCTION_58	IF_1
0x3911	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2131	fold.c	FUNCTION_58	IF_2
0x3918	     0xfb680210100	          movzx eax, byte [rax + 0x121] 	      2131	fold.c	FUNCTION_58	IF_2
0x391f	            0x84c0	                             test al, al	      2131	fold.c	FUNCTION_58	IF_2
0x3921	            0x7443	                            je 0x40039a6	      2131	fold.c	FUNCTION_58	IF_2
0x3923	    0x48c78560ffff	               mov qword [rbp - 0xa0], 1	      2134	fold.c	FUNCTION_58	IF_2
0x392e	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2135	fold.c	FUNCTION_58	IF_2
0x3935	        0x488b4008	                mov rax, qword [rax + 8]	      2135	fold.c	FUNCTION_58	IF_2
0x3939	          0x488b00	                    mov rax, qword [rax]	      2135	fold.c	FUNCTION_58	IF_2
0x393c	    0x48898558ffff	             mov qword [rbp - 0xa8], rax	      2135	fold.c	FUNCTION_58	IF_2
0x3943	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2136	fold.c	FUNCTION_58	IF_2
0x394a	    0xc68021010000	               mov byte [rax + 0x121], 0	      2136	fold.c	FUNCTION_58	IF_2
0x3951	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2139	fold.c	FUNCTION_58	IF_2	CALL_1
0x3958	    0x480508010000	                          add rax, 0x108	      2139	fold.c	FUNCTION_58	IF_2	CALL_1
0x395e	          0x4889c7	                            mov rdi, rax	      2139	fold.c	FUNCTION_58	IF_2	CALL_1
0x3961	      0xe85ef2ffff	                  call sym.setSmallMaybe	      2139	fold.c	FUNCTION_58	IF_2	CALL_1
0x3966	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2144	fold.c	FUNCTION_58	IF_3	CALL_2
0x396d	          0x4889c7	                            mov rdi, rax	      2144	fold.c	FUNCTION_58	IF_3	CALL_2
0x3970	      0xe800000000	                          call 0x40039b5	      2144	fold.c	FUNCTION_58	IF_3	CALL_2
0x3975	            0x85c0	                           test eax, eax	      2144	fold.c	FUNCTION_58	IF_3	CALL_2
0x3977	            0x743c	                            je 0x40039f5	      2144	fold.c	FUNCTION_58	IF_3	CALL_2
0x3979	    0x8b0500000000	            mov eax, dword [0x040039bf] 	      2146	fold.c	FUNCTION_58	IF_3	IF_4
0x397f	            0x4898	                                    cdqe	      2146	fold.c	FUNCTION_58	IF_3	IF_4
0x3981	    0x483b8560ffff	             cmp rax, qword [rbp - 0xa0]	      2146	fold.c	FUNCTION_58	IF_3	IF_4
0x3988	            0x7d11	                           jge 0x40039db	      2146	fold.c	FUNCTION_58	IF_3	IF_4
0x398a	    0x8b0500000000	            mov eax, dword [0x040039d0] 	      2147	fold.c	FUNCTION_58	IF_3	IF_4
0x3990	            0x4898	                                    cdqe	      2147	fold.c	FUNCTION_58	IF_3	IF_4
0x3992	    0x48298560ffff	             sub qword [rbp - 0xa0], rax	      2147	fold.c	FUNCTION_58	IF_3	IF_4
0x3999	            0xeb0b	                           jmp 0x40039e6	      2147	fold.c	FUNCTION_58	IF_3	IF_4
0x399b	    0x48c78560ffff	               mov qword [rbp - 0xa0], 1	      2149	fold.c	FUNCTION_58	IF_3	ELSE_1
0x39a6	    0x8b0500000000	            mov eax, dword [0x040039ec] 	      2150	fold.c	FUNCTION_58	IF_3
0x39ac	            0x4898	                                    cdqe	      2150	fold.c	FUNCTION_58	IF_3
0x39ae	    0x48018558ffff	            add qword [rbp - 0xa8], rax 	      2150	fold.c	FUNCTION_58	IF_3
0x39b5	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2156	fold.c	FUNCTION_58	IF_5
0x39bc	        0x488b4008	                mov rax, qword [rax + 8]	      2156	fold.c	FUNCTION_58	IF_5
0x39c0	          0x488b00	                    mov rax, qword [rax]	      2156	fold.c	FUNCTION_58	IF_5
0x39c3	    0x483b8560ffff	             cmp rax, qword [rbp - 0xa0]	      2156	fold.c	FUNCTION_58	IF_5
0x39ca	            0x7d15	                           jge 0x4003a21	      2156	fold.c	FUNCTION_58	IF_5
0x39cc	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2157	fold.c	FUNCTION_58	IF_5
0x39d3	        0x488b4008	                mov rax, qword [rax + 8]	      2157	fold.c	FUNCTION_58	IF_5
0x39d7	          0x488b00	                    mov rax, qword [rax]	      2157	fold.c	FUNCTION_58	IF_5
0x39da	    0x48898560ffff	             mov qword [rbp - 0xa0], rax	      2157	fold.c	FUNCTION_58	IF_5
0x39e1	    0xc70500000000	               mov dword [0x04003a2b], 0	      2159	fold.c	FUNCTION_58
0x39eb	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2160	fold.c	FUNCTION_58
0x39f2	        0x488945c0	             mov qword [rbp - 0x40], rax	      2160	fold.c	FUNCTION_58
0x39f6	    0x48c745d00000	               mov qword [rbp - 0x30], 0	      2161	fold.c	FUNCTION_58
0x39fe	    0xc745e0000000	               mov dword [rbp - 0x20], 0	      2162	fold.c	FUNCTION_58
0x3a05	    0xc745e4ffffff	     mov dword [rbp - 0x1c], 0xffffffff 	      2163	fold.c	FUNCTION_58
0x3a0c	    0xc745e8000000	               mov dword [rbp - 0x18], 0	      2164	fold.c	FUNCTION_58
0x3a13	    0xc745ec150000	           mov dword [rbp - 0x14], 0x15 	      2165	fold.c	FUNCTION_58
0x3a1a	    0xc745f0150000	           mov dword [rbp - 0x10], 0x15 	      2166	fold.c	FUNCTION_58
0x3a21	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      2168	fold.c	FUNCTION_58
0x3a28	    0x488905000000	            mov qword [0x04003a6f], rax 	      2168	fold.c	FUNCTION_58
0x3a2f	    0x488b8558ffff	             mov rax, qword [rbp - 0xa8]	      2169	fold.c	FUNCTION_58
0x3a36	    0x488905000000	            mov qword [0x04003a7d], rax 	      2169	fold.c	FUNCTION_58
0x3a3d	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2171	fold.c	FUNCTION_58	IF_6	CALL_3
0x3a44	          0x4889c7	                            mov rdi, rax	      2171	fold.c	FUNCTION_58	IF_6	CALL_3
0x3a47	      0xe800000000	                          call 0x4003a8c	      2171	fold.c	FUNCTION_58	IF_6	CALL_3
0x3a4c	            0x85c0	                           test eax, eax	      2171	fold.c	FUNCTION_58	IF_6	CALL_3
0x3a4e	     0xf84ac000000	                            je 0x4003b40	      2171	fold.c	FUNCTION_58	IF_6	CALL_3
0x3a54	    0x48c745980000	               mov qword [rbp - 0x68], 0	      2173	fold.c	FUNCTION_58	IF_6
0x3a5c	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2176	fold.c	FUNCTION_58	IF_6	CALL_4
0x3a63	          0x4889c7	                            mov rdi, rax	      2176	fold.c	FUNCTION_58	IF_6	CALL_4
0x3a66	      0xe819270000	                    call sym.parseMarker	      2176	fold.c	FUNCTION_58	IF_6	CALL_4
0x3a6b	    0x4883bd60ffff	               cmp qword [rbp - 0xa0], 1	      2180	fold.c	FUNCTION_58	IF_6	IF_7
0x3a73	            0x7e6e	                           jle 0x4003b23	      2180	fold.c	FUNCTION_58	IF_6	IF_7
0x3a75	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      2183	fold.c	FUNCTION_58	IF_6	IF_7	CALL_5
0x3a7c	        0x488d50ff	                      lea rdx, [rax - 1]	      2183	fold.c	FUNCTION_58	IF_6	IF_7	CALL_5
0x3a80	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2183	fold.c	FUNCTION_58	IF_6	IF_7	CALL_5
0x3a87	          0x4889d6	                            mov rsi, rdx	      2183	fold.c	FUNCTION_58	IF_6	IF_7	CALL_5
0x3a8a	          0x4889c7	                            mov rdi, rax	      2183	fold.c	FUNCTION_58	IF_6	IF_7	CALL_5
0x3a8d	      0xe857e2ffff	                   call sym.foldLevelWin	      2183	fold.c	FUNCTION_58	IF_6	IF_7	CALL_5
0x3a92	    0x89857cffffff	             mov dword [rbp - 0x84], eax	      2183	fold.c	FUNCTION_58	IF_6	IF_7	CALL_5
0x3a98	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      2186	fold.c	FUNCTION_58	IF_6	IF_7
0x3a9f	        0x4883e801	                              sub rax, 1	      2186	fold.c	FUNCTION_58	IF_6	IF_7
0x3aa3	        0x488945c8	             mov qword [rbp - 0x38], rax	      2186	fold.c	FUNCTION_58	IF_6	IF_7
0x3aa7	    0x8b857cffffff	             mov eax, dword [rbp - 0x84]	      2187	fold.c	FUNCTION_58	IF_6	IF_7
0x3aad	          0x8945e0	             mov dword [rbp - 0x20], eax	      2187	fold.c	FUNCTION_58	IF_6	IF_7
0x3ab0	        0x488d55c0	                   lea rdx, [rbp - 0x40]	      2188	fold.c	FUNCTION_58	IF_6	IF_7	CALL_6
0x3ab4	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2188	fold.c	FUNCTION_58	IF_6	IF_7	CALL_6
0x3ab8	          0x4889d7	                            mov rdi, rdx	      2188	fold.c	FUNCTION_58	IF_6	IF_7	CALL_6
0x3abb	            0xffd0	                                call rax	      2188	fold.c	FUNCTION_58	IF_6	IF_7	CALL_6
0x3abd	          0x8b45e0	             mov eax, dword [rbp - 0x20]	      2193	fold.c	FUNCTION_58	IF_6	IF_7	IF_8
0x3ac0	    0x3b857cffffff	             cmp eax, dword [rbp - 0x84]	      2193	fold.c	FUNCTION_58	IF_6	IF_7	IF_8
0x3ac6	            0x7e15	                           jle 0x4003b1d	      2193	fold.c	FUNCTION_58	IF_6	IF_7	IF_8
0x3ac8	          0x8b55e0	             mov edx, dword [rbp - 0x20]	      2194	fold.c	FUNCTION_58	IF_6	IF_7	IF_8
0x3acb	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      2194	fold.c	FUNCTION_58	IF_6	IF_7	IF_8
0x3ace	            0x29c2	                            sub edx, eax	      2194	fold.c	FUNCTION_58	IF_6	IF_7	IF_8
0x3ad0	    0x8b857cffffff	             mov eax, dword [rbp - 0x84]	      2194	fold.c	FUNCTION_58	IF_6	IF_7	IF_8
0x3ad6	            0x29d0	                            sub eax, edx	      2194	fold.c	FUNCTION_58	IF_6	IF_7	IF_8
0x3ad8	          0x8945e0	             mov dword [rbp - 0x20], eax	      2194	fold.c	FUNCTION_58	IF_6	IF_7	IF_8
0x3adb	            0xeb06	                           jmp 0x4003b23	      2194	fold.c	FUNCTION_58	IF_6	IF_7	IF_8
0x3add	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      2196	fold.c	FUNCTION_58	IF_6	IF_7	ELSE_2
0x3ae0	          0x8945e0	             mov dword [rbp - 0x20], eax	      2196	fold.c	FUNCTION_58	IF_6	IF_7	ELSE_2
0x3ae3	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      2198	fold.c	FUNCTION_58	IF_6
0x3aea	        0x488945c8	             mov qword [rbp - 0x38], rax	      2198	fold.c	FUNCTION_58	IF_6
0x3aee	        0x488d55c0	                   lea rdx, [rbp - 0x40]	      2199	fold.c	FUNCTION_58	IF_6	CALL_7
0x3af2	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2199	fold.c	FUNCTION_58	IF_6	CALL_7
0x3af6	          0x4889d7	                            mov rdi, rdx	      2199	fold.c	FUNCTION_58	IF_6	CALL_7
0x3af9	            0xffd0	                                call rax	      2199	fold.c	FUNCTION_58	IF_6	CALL_7
0x3afb	      0xe9bd000000	                           jmp 0x4003bfd	      2199	fold.c	FUNCTION_58	IF_6	CALL_7
0x3b00	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      2203	fold.c	FUNCTION_58	ELSE_3
0x3b07	        0x488945c8	             mov qword [rbp - 0x38], rax	      2203	fold.c	FUNCTION_58	ELSE_3
0x3b0b	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2204	fold.c	FUNCTION_58	ELSE_3	IF_9	CALL_8
0x3b12	          0x4889c7	                            mov rdi, rax	      2204	fold.c	FUNCTION_58	ELSE_3	IF_9	CALL_8
0x3b15	      0xe800000000	                          call 0x4003b5a	      2204	fold.c	FUNCTION_58	ELSE_3	IF_9	CALL_8
0x3b1a	            0x85c0	                           test eax, eax	      2204	fold.c	FUNCTION_58	ELSE_3	IF_9	CALL_8
0x3b1c	            0x7420	                            je 0x4003b7e	      2204	fold.c	FUNCTION_58	ELSE_3	IF_9	CALL_8
0x3b1e	    0x48c745980000	               mov qword [rbp - 0x68], 0	      2206	fold.c	FUNCTION_58	ELSE_3	IF_9
0x3b26	    0x4883bd60ffff	               cmp qword [rbp - 0xa0], 1	      2209	fold.c	FUNCTION_58	ELSE_3	IF_9	IF_10
0x3b2e	            0x7e50	                           jle 0x4003bc0	      2209	fold.c	FUNCTION_58	ELSE_3	IF_9	IF_10
0x3b30	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2210	fold.c	FUNCTION_58	ELSE_3	IF_9	IF_10
0x3b34	        0x4883e801	                              sub rax, 1	      2210	fold.c	FUNCTION_58	ELSE_3	IF_9	IF_10
0x3b38	        0x488945c8	             mov qword [rbp - 0x38], rax	      2210	fold.c	FUNCTION_58	ELSE_3	IF_9	IF_10
0x3b3c	            0xeb42	                           jmp 0x4003bc0	      2210	fold.c	FUNCTION_58	ELSE_3	IF_9	IF_10
0x3b3e	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2212	fold.c	FUNCTION_58	ELSE_3	ELSE_4	IF_11	CALL_9
0x3b45	          0x4889c7	                            mov rdi, rax	      2212	fold.c	FUNCTION_58	ELSE_3	ELSE_4	IF_11	CALL_9
0x3b48	      0xe800000000	                          call 0x4003b8d	      2212	fold.c	FUNCTION_58	ELSE_3	ELSE_4	IF_11	CALL_9
0x3b4d	            0x85c0	                           test eax, eax	      2212	fold.c	FUNCTION_58	ELSE_3	ELSE_4	IF_11	CALL_9
0x3b4f	            0x740a	                            je 0x4003b9b	      2212	fold.c	FUNCTION_58	ELSE_3	ELSE_4	IF_11	CALL_9
0x3b51	    0x48c745980000	               mov qword [rbp - 0x68], 0	      2213	fold.c	FUNCTION_58	ELSE_3	ELSE_4	IF_11
0x3b59	            0xeb25	                           jmp 0x4003bc0	      2213	fold.c	FUNCTION_58	ELSE_3	ELSE_4	IF_11
0x3b5b	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2215	fold.c	FUNCTION_58	ELSE_3	ELSE_5	IF_12	CALL_10
0x3b62	          0x4889c7	                            mov rdi, rax	      2215	fold.c	FUNCTION_58	ELSE_3	ELSE_5	IF_12	CALL_10
0x3b65	      0xe800000000	                          call 0x4003baa	      2215	fold.c	FUNCTION_58	ELSE_3	ELSE_5	IF_12	CALL_10
0x3b6a	            0x85c0	                           test eax, eax	      2215	fold.c	FUNCTION_58	ELSE_3	ELSE_5	IF_12	CALL_10
0x3b6c	            0x740a	                            je 0x4003bb8	      2215	fold.c	FUNCTION_58	ELSE_3	ELSE_5	IF_12	CALL_10
0x3b6e	    0x48c745980000	               mov qword [rbp - 0x68], 0	      2216	fold.c	FUNCTION_58	ELSE_3	ELSE_5	IF_12
0x3b76	            0xeb08	                           jmp 0x4003bc0	      2216	fold.c	FUNCTION_58	ELSE_3	ELSE_5	IF_12
0x3b78	    0x48c745980000	               mov qword [rbp - 0x68], 0	      2219	fold.c	FUNCTION_58	ELSE_3	ELSE_6
0x3b80	    0xc745e0ffffff	     mov dword [rbp - 0x20], 0xffffffff 	      2223	fold.c	FUNCTION_58	ELSE_3	ELSE_6
0x3b87	            0xeb27	                           jmp 0x4003bf0	      2224	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1
0x3b89	    0xc745e4ffffff	     mov dword [rbp - 0x1c], 0xffffffff 	      2228	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1
0x3b90	        0x488d55c0	                   lea rdx, [rbp - 0x40]	      2229	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1	CALL_11
0x3b94	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2229	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1	CALL_11
0x3b98	          0x4889d7	                            mov rdi, rdx	      2229	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1	CALL_11
0x3b9b	            0xffd0	                                call rax	      2229	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1	CALL_11
0x3b9d	          0x8b45e0	             mov eax, dword [rbp - 0x20]	      2230	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1	IF_13
0x3ba0	            0x85c0	                           test eax, eax	      2230	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1	IF_13
0x3ba2	            0x7918	                           jns 0x4003bfc	      2230	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1	IF_13
0x3ba4	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2224	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1
0x3ba8	        0x4883e801	                              sub rax, 1	      2224	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1
0x3bac	        0x488945c8	             mov qword [rbp - 0x38], rax	      2224	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1
0x3bb0	    0x8b0500000000	            mov eax, dword [0x04003bf6] 	      2224	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1
0x3bb6	            0x85c0	                           test eax, eax	      2224	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1
0x3bb8	            0x74cf	                            je 0x4003bc9	      2224	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1
0x3bba	            0xeb01	                           jmp 0x4003bfd	      2224	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1
0x3bbc	              0x90	                                     nop	      2231	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1	IF_13
0x3bbd	    0x48817d980000	               cmp qword [rbp - 0x68], 0	      2242	fold.c	FUNCTION_58	IF_14
0x3bc5	     0xf85c6000000	                           jne 0x4003cd1	      2242	fold.c	FUNCTION_58	IF_14
0x3bcb	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2244	fold.c	FUNCTION_58	IF_14
0x3bd2	    0x480508010000	                          add rax, 0x108	      2244	fold.c	FUNCTION_58	IF_14
0x3bd8	        0x488945a0	             mov qword [rbp - 0x60], rax	      2244	fold.c	FUNCTION_58	IF_14
0x3bdc	    0x48c745800000	               mov qword [rbp - 0x80], 0	      2245	fold.c	FUNCTION_58	IF_14
0x3be4	    0xc78578ffffff	               mov dword [rbp - 0x88], 0	      2246	fold.c	FUNCTION_58	IF_14
0x3bee	    0x48c745a80000	               mov qword [rbp - 0x58], 0	      2247	fold.c	FUNCTION_58	IF_14
0x3bf6	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2248	fold.c	FUNCTION_58	IF_14
0x3bfa	        0x488945b0	             mov qword [rbp - 0x50], rax	      2248	fold.c	FUNCTION_58	IF_14
0x3bfe	            0xeb44	                           jmp 0x4003c84	      2250	fold.c	FUNCTION_58	IF_14	WHILE_1
0x3c00	        0x488d5580	                   lea rdx, [rbp - 0x80]	      2252	fold.c	FUNCTION_58	IF_14	WHILE_1	IF_15	CALL_12
0x3c04	        0x488b4db0	             mov rcx, qword [rbp - 0x50]	      2252	fold.c	FUNCTION_58	IF_14	WHILE_1	IF_15	CALL_12
0x3c08	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      2252	fold.c	FUNCTION_58	IF_14	WHILE_1	IF_15	CALL_12
0x3c0c	          0x4889ce	                            mov rsi, rcx	      2252	fold.c	FUNCTION_58	IF_14	WHILE_1	IF_15	CALL_12
0x3c0f	          0x4889c7	                            mov rdi, rax	      2252	fold.c	FUNCTION_58	IF_14	WHILE_1	IF_15	CALL_12
0x3c12	      0xe88edfffff	                       call sym.foldFind	      2252	fold.c	FUNCTION_58	IF_14	WHILE_1	IF_15	CALL_12
0x3c17	            0x85c0	                           test eax, eax	      2252	fold.c	FUNCTION_58	IF_14	WHILE_1	IF_15	CALL_12
0x3c19	            0x7436	                            je 0x4003c91	      2252	fold.c	FUNCTION_58	IF_14	WHILE_1	IF_15	CALL_12
0x3c1b	    0x838578ffffff	               add dword [rbp - 0x88], 1	      2254	fold.c	FUNCTION_58	IF_14	WHILE_1
0x3c22	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2256	fold.c	FUNCTION_58	IF_14	WHILE_1
0x3c26	          0x488b00	                    mov rax, qword [rax]	      2256	fold.c	FUNCTION_58	IF_14	WHILE_1
0x3c29	        0x480145a8	            add qword [rbp - 0x58], rax 	      2256	fold.c	FUNCTION_58	IF_14	WHILE_1
0x3c2d	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2257	fold.c	FUNCTION_58	IF_14	WHILE_1
0x3c31	        0x4883c010	                           add rax, 0x10	      2257	fold.c	FUNCTION_58	IF_14	WHILE_1
0x3c35	        0x488945a0	             mov qword [rbp - 0x60], rax	      2257	fold.c	FUNCTION_58	IF_14	WHILE_1
0x3c39	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2258	fold.c	FUNCTION_58	IF_14	WHILE_1
0x3c3d	          0x488b00	                    mov rax, qword [rax]	      2258	fold.c	FUNCTION_58	IF_14	WHILE_1
0x3c40	        0x482945b0	             sub qword [rbp - 0x50], rax	      2258	fold.c	FUNCTION_58	IF_14	WHILE_1
0x3c44	          0x8b45e0	             mov eax, dword [rbp - 0x20]	      2250	fold.c	FUNCTION_58	IF_14	WHILE_1
0x3c47	    0x3b8578ffffff	             cmp eax, dword [rbp - 0x88]	      2250	fold.c	FUNCTION_58	IF_14	WHILE_1
0x3c4d	            0x7fb1	                            jg 0x4003c40	      2250	fold.c	FUNCTION_58	IF_14	WHILE_1
0x3c4f	            0xeb01	                           jmp 0x4003c92	      2250	fold.c	FUNCTION_58	IF_14	WHILE_1
0x3c51	              0x90	                                     nop	      2253	fold.c	FUNCTION_58	IF_14	WHILE_1	IF_15
0x3c52	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2260	fold.c	FUNCTION_58	IF_14	IF_16
0x3c56	          0x4885c0	                           test rax, rax	      2260	fold.c	FUNCTION_58	IF_14	IF_16
0x3c59	            0x7436	                            je 0x4003cd1	      2260	fold.c	FUNCTION_58	IF_14	IF_16
0x3c5b	          0x8b45e0	             mov eax, dword [rbp - 0x20]	      2260	fold.c	FUNCTION_58	IF_14	IF_16
0x3c5e	    0x3b8578ffffff	             cmp eax, dword [rbp - 0x88]	      2260	fold.c	FUNCTION_58	IF_14	IF_16
0x3c64	            0x752b	                           jne 0x4003cd1	      2260	fold.c	FUNCTION_58	IF_14	IF_16
0x3c66	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2262	fold.c	FUNCTION_58	IF_14	IF_16
0x3c6a	        0x488b5008	                mov rdx, qword [rax + 8]	      2262	fold.c	FUNCTION_58	IF_14	IF_16
0x3c6e	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      2262	fold.c	FUNCTION_58	IF_14	IF_16
0x3c72	          0x4801d0	                            add rax, rdx	      2262	fold.c	FUNCTION_58	IF_14	IF_16
0x3c75	        0x488945b8	             mov qword [rbp - 0x48], rax	      2262	fold.c	FUNCTION_58	IF_14	IF_16
0x3c79	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2264	fold.c	FUNCTION_58	IF_14	IF_16	IF_17
0x3c7d	    0x483b8558ffff	             cmp rax, qword [rbp - 0xa8]	      2264	fold.c	FUNCTION_58	IF_14	IF_16	IF_17
0x3c84	            0x7e0b	                           jle 0x4003cd1	      2264	fold.c	FUNCTION_58	IF_14	IF_16	IF_17
0x3c86	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2265	fold.c	FUNCTION_58	IF_14	IF_16	IF_17
0x3c8a	    0x48898558ffff	             mov qword [rbp - 0xa8], rax	      2265	fold.c	FUNCTION_58	IF_14	IF_16	IF_17
0x3c91	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2269	fold.c	FUNCTION_58
0x3c95	        0x48894588	             mov qword [rbp - 0x78], rax	      2269	fold.c	FUNCTION_58
0x3c99	    0x488b8558ffff	             mov rax, qword [rbp - 0xa8]	      2270	fold.c	FUNCTION_58
0x3ca0	        0x48894590	             mov qword [rbp - 0x70], rax	      2270	fold.c	FUNCTION_58
0x3ca4	        0x488b4588	             mov rax, qword [rbp - 0x78]	      2272	fold.c	FUNCTION_58	IF_18
0x3ca8	        0x483b4590	             cmp rax, qword [rbp - 0x70]	      2272	fold.c	FUNCTION_58	IF_18
0x3cac	     0xf8eeb010000	                           jle 0x4003edd	      2272	fold.c	FUNCTION_58	IF_18
0x3cb2	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2272	fold.c	FUNCTION_58	IF_18
0x3cb9	        0x488b4008	                mov rax, qword [rax + 8]	      2272	fold.c	FUNCTION_58	IF_18
0x3cbd	          0x488b00	                    mov rax, qword [rax]	      2272	fold.c	FUNCTION_58	IF_18
0x3cc0	        0x483b4590	             cmp rax, qword [rbp - 0x70]	      2272	fold.c	FUNCTION_58	IF_18
0x3cc4	     0xf8ed3010000	                           jle 0x4003edd	      2272	fold.c	FUNCTION_58	IF_18
0x3cca	        0x488b4588	             mov rax, qword [rbp - 0x78]	      2273	fold.c	FUNCTION_58	IF_18
0x3cce	        0x48894590	             mov qword [rbp - 0x70], rax	      2273	fold.c	FUNCTION_58	IF_18
0x3cd2	      0xe9c6010000	                           jmp 0x4003edd	      2274	fold.c	FUNCTION_58	WHILE_2
0x3cd7	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      2278	fold.c	FUNCTION_58	WHILE_2	IF_19
0x3cdb	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2278	fold.c	FUNCTION_58	WHILE_2	IF_19
0x3ce2	        0x488b4008	                mov rax, qword [rax + 8]	      2278	fold.c	FUNCTION_58	WHILE_2	IF_19
0x3ce6	          0x488b00	                    mov rax, qword [rax]	      2278	fold.c	FUNCTION_58	WHILE_2	IF_19
0x3ce9	          0x4839c2	                            cmp rdx, rax	      2278	fold.c	FUNCTION_58	WHILE_2	IF_19
0x3cec	     0xf8fbb010000	                            jg 0x4003eed	      2278	fold.c	FUNCTION_58	WHILE_2	IF_19
0x3cf2	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2280	fold.c	FUNCTION_58	WHILE_2	IF_20
0x3cf6	        0x483b4590	             cmp rax, qword [rbp - 0x70]	      2280	fold.c	FUNCTION_58	WHILE_2	IF_20
0x3cfa	     0xf8efe000000	                           jle 0x4003e3e	      2280	fold.c	FUNCTION_58	WHILE_2	IF_20
0x3d00	    0x48817d980000	               cmp qword [rbp - 0x68], 0	      2285	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_21
0x3d08	            0x7418	                            je 0x4003d62	      2285	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_21
0x3d0a	    0x48817d980000	               cmp qword [rbp - 0x68], 0	      2286	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_21
0x3d12	            0x740e	                            je 0x4003d62	      2286	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_21
0x3d14	    0x48817d980000	               cmp qword [rbp - 0x68], 0	      2287	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_21
0x3d1c	     0xf858e010000	                           jne 0x4003ef0	      2287	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_21
0x3d22	        0x488b4588	             mov rax, qword [rbp - 0x78]	      2289	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x3d26	        0x483b4590	             cmp rax, qword [rbp - 0x70]	      2289	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x3d2a	            0x7f41	                            jg 0x4003dad	      2289	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x3d2c	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2290	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_13
0x3d33	    0x488d88080100	                  lea rcx, [rax + 0x108]	      2290	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_13
0x3d3a	        0x488d5580	                   lea rdx, [rbp - 0x80]	      2290	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_13
0x3d3e	        0x488b4590	             mov rax, qword [rbp - 0x70]	      2290	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_13
0x3d42	          0x4889c6	                            mov rsi, rax	      2290	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_13
0x3d45	          0x4889cf	                            mov rdi, rcx	      2290	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_13
0x3d48	      0xe858deffff	                       call sym.foldFind	      2290	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_13
0x3d4d	            0x85c0	                           test eax, eax	      2290	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_13
0x3d4f	            0x741c	                            je 0x4003dad	      2290	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_13
0x3d51	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2291	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x3d55	          0x488b10	                    mov rdx, qword [rax]	      2291	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x3d58	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2291	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x3d5c	        0x488b4008	                mov rax, qword [rax + 8]	      2291	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x3d60	          0x4801d0	                            add rax, rdx	      2291	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x3d63	        0x4883e801	                              sub rax, 1	      2291	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x3d67	        0x483b4590	             cmp rax, qword [rbp - 0x70]	      2291	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x3d6b	            0x7f3c	                            jg 0x4003de9	      2291	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x3d6d	          0x8b45e0	             mov eax, dword [rbp - 0x20]	      2292	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x3d70	            0x85c0	                           test eax, eax	      2292	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x3d72	            0x7551	                           jne 0x4003e05	      2292	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x3d74	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2293	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_14
0x3d78	    0x488b9568ffff	             mov rdx, qword [rbp - 0x98]	      2293	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_14
0x3d7f	    0x488d8a080100	                  lea rcx, [rdx + 0x108]	      2293	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_14
0x3d86	        0x488d5580	                   lea rdx, [rbp - 0x80]	      2293	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_14
0x3d8a	          0x4889c6	                            mov rsi, rax	      2293	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_14
0x3d8d	          0x4889cf	                            mov rdi, rcx	      2293	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_14
0x3d90	      0xe810deffff	                       call sym.foldFind	      2293	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_14
0x3d95	            0x85c0	                           test eax, eax	      2293	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_14
0x3d97	            0x742c	                            je 0x4003e05	      2293	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_14
0x3d99	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2294	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x3d9d	          0x488b10	                    mov rdx, qword [rax]	      2294	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x3da0	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2294	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x3da4	          0x4839c2	                            cmp rdx, rax	      2294	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x3da7	            0x7d1c	                           jge 0x4003e05	      2294	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x3da9	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2295	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x3dad	          0x488b10	                    mov rdx, qword [rax]	      2295	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x3db0	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2295	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x3db4	        0x488b4008	                mov rax, qword [rax + 8]	      2295	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x3db8	          0x4801d0	                            add rax, rdx	      2295	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x3dbb	        0x4883e801	                              sub rax, 1	      2295	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x3dbf	        0x48894590	             mov qword [rbp - 0x70], rax	      2295	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x3dc3	            0xeb39	                           jmp 0x4003e3e	      2295	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x3dc5	    0x48817d980000	               cmp qword [rbp - 0x68], 0	      2296	fold.c	FUNCTION_58	WHILE_2	IF_20	ELSE_7	IF_23
0x3dcd	     0xf85e1000000	                           jne 0x4003ef4	      2296	fold.c	FUNCTION_58	WHILE_2	IF_20	ELSE_7	IF_23
0x3dd3	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      2297	fold.c	FUNCTION_58	WHILE_2	IF_20	ELSE_7	IF_23	CALL_15
0x3dd7	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2297	fold.c	FUNCTION_58	WHILE_2	IF_20	ELSE_7	IF_23	CALL_15
0x3dde	          0x4889d6	                            mov rsi, rdx	      2297	fold.c	FUNCTION_58	WHILE_2	IF_20	ELSE_7	IF_23	CALL_15
0x3de1	          0x4889c7	                            mov rdi, rax	      2297	fold.c	FUNCTION_58	WHILE_2	IF_20	ELSE_7	IF_23	CALL_15
0x3de4	      0xe800dfffff	                   call sym.foldLevelWin	      2297	fold.c	FUNCTION_58	WHILE_2	IF_20	ELSE_7	IF_23	CALL_15
0x3de9	            0x89c2	                            mov edx, eax	      2297	fold.c	FUNCTION_58	WHILE_2	IF_20	ELSE_7	IF_23	CALL_15
0x3deb	          0x8b45e0	             mov eax, dword [rbp - 0x20]	      2297	fold.c	FUNCTION_58	WHILE_2	IF_20	ELSE_7	IF_23	CALL_15
0x3dee	            0x39c2	                            cmp edx, eax	      2297	fold.c	FUNCTION_58	WHILE_2	IF_20	ELSE_7	IF_23	CALL_15
0x3df0	     0xf84be000000	                            je 0x4003ef4	      2297	fold.c	FUNCTION_58	WHILE_2	IF_20	ELSE_7	IF_23	CALL_15
0x3df6	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2301	fold.c	FUNCTION_58	WHILE_2	IF_20	ELSE_7	IF_23
0x3dfa	        0x48894590	             mov qword [rbp - 0x70], rax	      2301	fold.c	FUNCTION_58	WHILE_2	IF_20	ELSE_7	IF_23
0x3dfe	          0x8b45e0	             mov eax, dword [rbp - 0x20]	      2307	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24
0x3e01	            0x85c0	                           test eax, eax	      2307	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24
0x3e03	            0x7e62	                           jle 0x4003ea7	      2307	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24
0x3e05	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2309	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24
0x3e09	    0x488905000000	            mov qword [0x04003e50], rax 	      2309	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24
0x3e10	        0x488b4590	             mov rax, qword [rbp - 0x70]	      2310	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24
0x3e14	    0x488905000000	            mov qword [0x04003e5b], rax 	      2310	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24
0x3e1b	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2311	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24	CALL_16
0x3e22	    0x488db8080100	                  lea rdi, [rax + 0x108]	      2311	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24	CALL_16
0x3e29	        0x488b7590	             mov rsi, qword [rbp - 0x70]	      2311	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24	CALL_16
0x3e2d	        0x488b4d98	             mov rcx, qword [rbp - 0x68]	      2311	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24	CALL_16
0x3e31	        0x488d55c0	                   lea rdx, [rbp - 0x40]	      2311	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24	CALL_16
0x3e35	        0x488b4588	             mov rax, qword [rbp - 0x78]	      2311	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24	CALL_16
0x3e39	        0x4883ec08	                              sub rsp, 8	      2311	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24	CALL_16
0x3e3d	            0x6a02	                                  push 2	      2311	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24	CALL_16
0x3e3f	          0x4989f1	                             mov r9, rsi	      2311	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24	CALL_16
0x3e42	          0x4989c8	                             mov r8, rcx	      2311	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24	CALL_16
0x3e45	          0x4889d1	                            mov rcx, rdx	      2311	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24	CALL_16
0x3e48	          0x4889c2	                            mov rdx, rax	      2311	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24	CALL_16
0x3e4b	      0xbe01000000	                              mov esi, 1	      2311	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24	CALL_16
0x3e50	      0xe840010000	          call sym.foldUpdateIEMSRecurse	      2311	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24	CALL_16
0x3e55	        0x4883c410	                           add rsp, 0x10	      2311	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24	CALL_16
0x3e59	        0x48894590	             mov qword [rbp - 0x70], rax	      2311	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24	CALL_16
0x3e5d	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2313	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24
0x3e61	        0x48894588	             mov qword [rbp - 0x78], rax	      2313	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24
0x3e65	            0xeb36	                           jmp 0x4003edd	      2313	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24
0x3e67	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      2317	fold.c	FUNCTION_58	WHILE_2	ELSE_9	IF_25
0x3e6b	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2317	fold.c	FUNCTION_58	WHILE_2	ELSE_9	IF_25
0x3e72	        0x488b4008	                mov rax, qword [rax + 8]	      2317	fold.c	FUNCTION_58	WHILE_2	ELSE_9	IF_25
0x3e76	          0x488b00	                    mov rax, qword [rax]	      2317	fold.c	FUNCTION_58	WHILE_2	ELSE_9	IF_25
0x3e79	          0x4839c2	                            cmp rdx, rax	      2317	fold.c	FUNCTION_58	WHILE_2	ELSE_9	IF_25
0x3e7c	            0x7435	                            je 0x4003ef3	      2317	fold.c	FUNCTION_58	WHILE_2	ELSE_9	IF_25
0x3e7e	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2319	fold.c	FUNCTION_58	WHILE_2	ELSE_9
0x3e82	        0x4883c001	                              add rax, 1	      2319	fold.c	FUNCTION_58	WHILE_2	ELSE_9
0x3e86	        0x488945c8	             mov qword [rbp - 0x38], rax	      2319	fold.c	FUNCTION_58	WHILE_2	ELSE_9
0x3e8a	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      2320	fold.c	FUNCTION_58	WHILE_2	ELSE_9
0x3e8d	          0x8945e0	             mov dword [rbp - 0x20], eax	      2320	fold.c	FUNCTION_58	WHILE_2	ELSE_9
0x3e90	        0x488d55c0	                   lea rdx, [rbp - 0x40]	      2321	fold.c	FUNCTION_58	WHILE_2	ELSE_9	CALL_17
0x3e94	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2321	fold.c	FUNCTION_58	WHILE_2	ELSE_9	CALL_17
0x3e98	          0x4889d7	                            mov rdi, rdx	      2321	fold.c	FUNCTION_58	WHILE_2	ELSE_9	CALL_17
0x3e9b	            0xffd0	                                call rax	      2321	fold.c	FUNCTION_58	WHILE_2	ELSE_9	CALL_17
0x3e9d	    0x8b0500000000	            mov eax, dword [0x04003ee3] 	      2274	fold.c	FUNCTION_58	WHILE_2
0x3ea3	            0x85c0	                           test eax, eax	      2274	fold.c	FUNCTION_58	WHILE_2
0x3ea5	     0xf842cfeffff	                            je 0x4003d17	      2274	fold.c	FUNCTION_58	WHILE_2
0x3eab	            0xeb07	                           jmp 0x4003ef4	      2274	fold.c	FUNCTION_58	WHILE_2
0x3ead	              0x90	                                     nop	      2279	fold.c	FUNCTION_58	WHILE_2	IF_19
0x3eae	            0xeb04	                           jmp 0x4003ef4	      2279	fold.c	FUNCTION_58	WHILE_2	IF_19
0x3eb0	              0x90	                                     nop	      2288	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_21
0x3eb1	            0xeb01	                           jmp 0x4003ef4	      2288	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_21
0x3eb3	              0x90	                                     nop	      2318	fold.c	FUNCTION_58	WHILE_2	ELSE_9	IF_25
0x3eb4	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2326	fold.c	FUNCTION_58	CALL_18
0x3ebb	    0x488d88080100	                  lea rcx, [rax + 0x108]	      2326	fold.c	FUNCTION_58	CALL_18
0x3ec2	        0x488b5590	             mov rdx, qword [rbp - 0x70]	      2326	fold.c	FUNCTION_58	CALL_18
0x3ec6	        0x488b4588	             mov rax, qword [rbp - 0x78]	      2326	fold.c	FUNCTION_58	CALL_18
0x3eca	          0x4889c6	                            mov rsi, rax	      2326	fold.c	FUNCTION_58	CALL_18
0x3ecd	          0x4889cf	                            mov rdi, rcx	      2326	fold.c	FUNCTION_58	CALL_18
0x3ed0	      0xe867130000	                     call sym.foldRemove	      2326	fold.c	FUNCTION_58	CALL_18
0x3ed5	    0x8b0500000000	            mov eax, dword [0x04003f1b] 	      2329	fold.c	FUNCTION_58	IF_26
0x3edb	            0x85c0	                           test eax, eax	      2329	fold.c	FUNCTION_58	IF_26
0x3edd	            0x7420	                            je 0x4003f3f	      2329	fold.c	FUNCTION_58	IF_26
0x3edf	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2329	fold.c	FUNCTION_58	IF_26
0x3ee6	    0x8b80d4010000	           mov eax, dword [rax + 0x1d4] 	      2329	fold.c	FUNCTION_58	IF_26
0x3eec	            0x85c0	                           test eax, eax	      2329	fold.c	FUNCTION_58	IF_26
0x3eee	            0x740f	                            je 0x4003f3f	      2329	fold.c	FUNCTION_58	IF_26
0x3ef0	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2330	fold.c	FUNCTION_58	CALL_19
0x3ef7	          0x4889c7	                            mov rdi, rax	      2330	fold.c	FUNCTION_58	CALL_19
0x3efa	      0xe800000000	                          call 0x4003f3f	      2330	fold.c	FUNCTION_58	CALL_19
0x3eff	        0x488b4590	             mov rax, qword [rbp - 0x70]	      2335	fold.c	FUNCTION_58	IF_27
0x3f03	    0x483b8558ffff	             cmp rax, qword [rbp - 0xa8]	      2335	fold.c	FUNCTION_58	IF_27
0x3f0a	            0x7465	                            je 0x4003fb1	      2335	fold.c	FUNCTION_58	IF_27
0x3f0c	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2337	fold.c	FUNCTION_58	IF_27	IF_28
0x3f13	    0x488b80300100	           mov rax, qword [rax + 0x130] 	      2337	fold.c	FUNCTION_58	IF_27	IF_28
0x3f1a	          0x4885c0	                           test rax, rax	      2337	fold.c	FUNCTION_58	IF_27	IF_28
0x3f1d	            0x7417	                            je 0x4003f76	      2337	fold.c	FUNCTION_58	IF_27	IF_28
0x3f1f	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2337	fold.c	FUNCTION_58	IF_27	IF_28
0x3f26	    0x488b80300100	           mov rax, qword [rax + 0x130] 	      2337	fold.c	FUNCTION_58	IF_27	IF_28
0x3f2d	    0x483b8560ffff	             cmp rax, qword [rbp - 0xa0]	      2337	fold.c	FUNCTION_58	IF_27	IF_28
0x3f34	            0x7e15	                           jle 0x4003f8b	      2337	fold.c	FUNCTION_58	IF_27	IF_28
0x3f36	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2338	fold.c	FUNCTION_58	IF_27	IF_28
0x3f3d	    0x488b9560ffff	             mov rdx, qword [rbp - 0xa0]	      2338	fold.c	FUNCTION_58	IF_27	IF_28
0x3f44	    0x488990300100	            mov qword [rax + 0x130], rdx	      2338	fold.c	FUNCTION_58	IF_27	IF_28
0x3f4b	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2339	fold.c	FUNCTION_58	IF_27	IF_29
0x3f52	    0x488b80380100	           mov rax, qword [rax + 0x138] 	      2339	fold.c	FUNCTION_58	IF_27	IF_29
0x3f59	        0x483b4590	             cmp rax, qword [rbp - 0x70]	      2339	fold.c	FUNCTION_58	IF_27	IF_29
0x3f5d	            0x7d12	                           jge 0x4003fb1	      2339	fold.c	FUNCTION_58	IF_27	IF_29
0x3f5f	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2340	fold.c	FUNCTION_58	IF_27	IF_29
0x3f66	        0x488b5590	             mov rdx, qword [rbp - 0x70]	      2340	fold.c	FUNCTION_58	IF_27	IF_29
0x3f6a	    0x488990380100	            mov qword [rax + 0x138], rdx	      2340	fold.c	FUNCTION_58	IF_27	IF_29
0x3f71	    0x48c705000000	               mov qword [0x04003fbc], 0	      2343	fold.c	FUNCTION_58
0x3f7c	            0xeb01	                           jmp 0x4003fbf	      2343	fold.c	FUNCTION_58
0x3f7e	              0x90	                                     nop	      2129	fold.c	FUNCTION_58	IF_1
0x3f7f	        0x488b45f8	                mov rax, qword [rbp - 8]	      2344	fold.c	FUNCTION_58
0x3f83	    0x644833042528	                xor rax, qword fs:[0x28]	      2344	fold.c	FUNCTION_58
0x3f8c	            0x7405	                            je 0x4003fd3	      2344	fold.c	FUNCTION_58
0x3f8e	      0xe800000000	                          call 0x4003fd3	      2344	fold.c	FUNCTION_58
0x3f93	              0xc9	                                   leave	      2344	fold.c	FUNCTION_58
0x3f94	              0xc3	                                     ret	      2344	fold.c	FUNCTION_58
foldInsert	SWITCH,0:ELSE,0:DO,0:FOR,0:WHILE,0:IF,2:functions,0:CALL,3	56
0x4eca	              0x55	                                push rbp	      2830	fold.c	FUNCTION_60
0x4ecb	          0x4889e5	                            mov rbp, rsp	      2830	fold.c	FUNCTION_60
0x4ece	        0x4883ec20	                           sub rsp, 0x20	      2830	fold.c	FUNCTION_60
0x4ed2	        0x48897de8	             mov qword [rbp - 0x18], rdi	      2830	fold.c	FUNCTION_60
0x4ed6	          0x8975e4	             mov dword [rbp - 0x1c], esi	      2830	fold.c	FUNCTION_60
0x4ed9	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2833	fold.c	FUNCTION_60	IF_1	CALL_1
0x4edd	      0xbe01000000	                              mov esi, 1	      2833	fold.c	FUNCTION_60	IF_1	CALL_1
0x4ee2	          0x4889c7	                            mov rdi, rax	      2833	fold.c	FUNCTION_60	IF_1	CALL_1
0x4ee5	      0xe800000000	                          call 0x4004f2a	      2833	fold.c	FUNCTION_60	IF_1	CALL_1
0x4eea	          0x83f801	                              cmp eax, 1	      2833	fold.c	FUNCTION_60	IF_1	CALL_1
0x4eed	            0x740a	                            je 0x4004f39	      2833	fold.c	FUNCTION_60	IF_1	CALL_1
0x4eef	      0xb800000000	                              mov eax, 0	      2834	fold.c	FUNCTION_60	IF_1
0x4ef4	      0xe98e000000	                           jmp 0x4004fc7	      2834	fold.c	FUNCTION_60	IF_1
0x4ef9	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2835	fold.c	FUNCTION_60
0x4efd	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      2835	fold.c	FUNCTION_60
0x4f01	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      2835	fold.c	FUNCTION_60
0x4f04	          0x4863d0	                         movsxd rdx, eax	      2835	fold.c	FUNCTION_60
0x4f07	          0x4889d0	                            mov rax, rdx	      2835	fold.c	FUNCTION_60
0x4f0a	          0x4801c0	                            add rax, rax	      2835	fold.c	FUNCTION_60
0x4f0d	          0x4801d0	                            add rax, rdx	      2835	fold.c	FUNCTION_60
0x4f10	        0x48c1e004	                              shl rax, 4	      2835	fold.c	FUNCTION_60
0x4f14	          0x4801c8	                            add rax, rcx	      2835	fold.c	FUNCTION_60
0x4f17	        0x488945f8	                mov qword [rbp - 8], rax	      2835	fold.c	FUNCTION_60
0x4f1b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2836	fold.c	FUNCTION_60	IF_2
0x4f1f	            0x8b00	                    mov eax, dword [rax]	      2836	fold.c	FUNCTION_60	IF_2
0x4f21	          0x3b45e4	             cmp eax, dword [rbp - 0x1c]	      2836	fold.c	FUNCTION_60	IF_2
0x4f24	            0x7e33	                           jle 0x4004f99	      2836	fold.c	FUNCTION_60	IF_2
0x4f26	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2837	fold.c	FUNCTION_60	CALL_2
0x4f2a	            0x8b00	                    mov eax, dword [rax]	      2837	fold.c	FUNCTION_60	CALL_2
0x4f2c	          0x2b45e4	             sub eax, dword [rbp - 0x1c]	      2837	fold.c	FUNCTION_60	CALL_2
0x4f2f	          0x4863d0	                         movsxd rdx, eax	      2837	fold.c	FUNCTION_60	CALL_2
0x4f32	          0x4889d0	                            mov rax, rdx	      2837	fold.c	FUNCTION_60	CALL_2
0x4f35	          0x4801c0	                            add rax, rax	      2837	fold.c	FUNCTION_60	CALL_2
0x4f38	          0x4801d0	                            add rax, rdx	      2837	fold.c	FUNCTION_60	CALL_2
0x4f3b	        0x48c1e004	                              shl rax, 4	      2837	fold.c	FUNCTION_60	CALL_2
0x4f3f	          0x4889c2	                            mov rdx, rax	      2837	fold.c	FUNCTION_60	CALL_2
0x4f42	        0x488b45f8	                mov rax, qword [rbp - 8]	      2837	fold.c	FUNCTION_60	CALL_2
0x4f46	        0x488d4830	                   lea rcx, [rax + 0x30]	      2837	fold.c	FUNCTION_60	CALL_2
0x4f4a	        0x488b45f8	                mov rax, qword [rbp - 8]	      2837	fold.c	FUNCTION_60	CALL_2
0x4f4e	          0x4889c6	                            mov rsi, rax	      2837	fold.c	FUNCTION_60	CALL_2
0x4f51	          0x4889cf	                            mov rdi, rcx	      2837	fold.c	FUNCTION_60	CALL_2
0x4f54	      0xe800000000	                          call 0x4004f99	      2837	fold.c	FUNCTION_60	CALL_2
0x4f59	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2838	fold.c	FUNCTION_60
0x4f5d	            0x8b00	                    mov eax, dword [rax]	      2838	fold.c	FUNCTION_60
0x4f5f	          0x8d5001	                      lea edx, [rax + 1]	      2838	fold.c	FUNCTION_60
0x4f62	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2838	fold.c	FUNCTION_60
0x4f66	            0x8910	                    mov dword [rax], edx	      2838	fold.c	FUNCTION_60
0x4f68	        0x488b45f8	                mov rax, qword [rbp - 8]	      2839	fold.c	FUNCTION_60	CALL_3
0x4f6c	        0x4883c010	                           add rax, 0x10	      2839	fold.c	FUNCTION_60	CALL_3
0x4f70	      0xba0a000000	                            mov edx, 0xa	      2839	fold.c	FUNCTION_60	CALL_3
0x4f75	      0xbe30000000	                           mov esi, 0x30	      2839	fold.c	FUNCTION_60	CALL_3
0x4f7a	          0x4889c7	                            mov rdi, rax	      2839	fold.c	FUNCTION_60	CALL_3
0x4f7d	      0xe800000000	                          call 0x4004fc2	      2839	fold.c	FUNCTION_60	CALL_3
0x4f82	      0xb801000000	                              mov eax, 1	      2840	fold.c	FUNCTION_60
0x4f87	              0xc9	                                   leave	      2841	fold.c	FUNCTION_60
0x4f88	              0xc3	                                     ret	      2841	fold.c	FUNCTION_60
foldMerge	SWITCH,0:ELSE,0:DO,0:FOR,1:WHILE,0:IF,2:functions,0:CALL,5	150
0x5b45	              0x55	                                push rbp	      3165	fold.c	FUNCTION_66
0x5b46	          0x4889e5	                            mov rbp, rsp	      3165	fold.c	FUNCTION_66
0x5b49	        0x4883ec50	                           sub rsp, 0x50	      3165	fold.c	FUNCTION_66
0x5b4d	        0x48897dc8	             mov qword [rbp - 0x38], rdi	      3165	fold.c	FUNCTION_66
0x5b51	        0x488975c0	             mov qword [rbp - 0x40], rsi	      3165	fold.c	FUNCTION_66
0x5b55	        0x488955b8	             mov qword [rbp - 0x48], rdx	      3165	fold.c	FUNCTION_66
0x5b59	    0x64488b042528	                mov rax, qword fs:[0x28]	      3165	fold.c	FUNCTION_66
0x5b62	        0x488945f8	                mov qword [rbp - 8], rax	      3165	fold.c	FUNCTION_66
0x5b66	            0x31c0	                            xor eax, eax	      3165	fold.c	FUNCTION_66
0x5b68	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3169	fold.c	FUNCTION_66
0x5b6c	        0x4883c010	                           add rax, 0x10	      3169	fold.c	FUNCTION_66
0x5b70	        0x488945e8	             mov qword [rbp - 0x18], rax	      3169	fold.c	FUNCTION_66
0x5b74	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      3170	fold.c	FUNCTION_66
0x5b78	        0x4883c010	                           add rax, 0x10	      3170	fold.c	FUNCTION_66
0x5b7c	        0x488945f0	             mov qword [rbp - 0x10], rax	      3170	fold.c	FUNCTION_66
0x5b80	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x5b84	        0x488b4008	                mov rax, qword [rax + 8]	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x5b88	        0x488d48ff	                      lea rcx, [rax - 1]	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x5b8c	        0x488d55d8	                   lea rdx, [rbp - 0x28]	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x5b90	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x5b94	          0x4889ce	                            mov rsi, rcx	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x5b97	          0x4889c7	                            mov rdi, rax	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x5b9a	      0xe806c0ffff	                       call sym.foldFind	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x5b9f	            0x85c0	                           test eax, eax	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x5ba1	            0x7430	                            je 0x4005c13	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x5ba3	        0x488d55e0	                   lea rdx, [rbp - 0x20]	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x5ba7	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x5bab	      0xbe00000000	                              mov esi, 0	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x5bb0	          0x4889c7	                            mov rdi, rax	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x5bb3	      0xe8edbfffff	                       call sym.foldFind	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x5bb8	            0x85c0	                           test eax, eax	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x5bba	            0x7417	                            je 0x4005c13	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x5bbc	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      3175	fold.c	FUNCTION_66	CALL_3
0x5bc0	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3175	fold.c	FUNCTION_66	CALL_3
0x5bc4	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	      3175	fold.c	FUNCTION_66	CALL_3
0x5bc8	          0x4889ce	                            mov rsi, rcx	      3175	fold.c	FUNCTION_66	CALL_3
0x5bcb	          0x4889c7	                            mov rdi, rax	      3175	fold.c	FUNCTION_66	CALL_3
0x5bce	      0xe872ffffff	                      call sym.foldMerge	      3175	fold.c	FUNCTION_66	CALL_3
0x5bd3	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3178	fold.c	FUNCTION_66	IF_2	CALL_4
0x5bd7	            0x8b00	                    mov eax, dword [rax]	      3178	fold.c	FUNCTION_66	IF_2	CALL_4
0x5bd9	            0x85c0	                           test eax, eax	      3178	fold.c	FUNCTION_66	IF_2	CALL_4
0x5bdb	     0xf8e15010000	                           jle 0x4005d36	      3178	fold.c	FUNCTION_66	IF_2	CALL_4
0x5be1	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3178	fold.c	FUNCTION_66	IF_2	CALL_4
0x5be5	            0x8b10	                    mov edx, dword [rax]	      3178	fold.c	FUNCTION_66	IF_2	CALL_4
0x5be7	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3178	fold.c	FUNCTION_66	IF_2	CALL_4
0x5beb	            0x89d6	                            mov esi, edx	      3178	fold.c	FUNCTION_66	IF_2	CALL_4
0x5bed	          0x4889c7	                            mov rdi, rax	      3178	fold.c	FUNCTION_66	IF_2	CALL_4
0x5bf0	      0xe800000000	                          call 0x4005c35	      3178	fold.c	FUNCTION_66	IF_2	CALL_4
0x5bf5	          0x83f801	                              cmp eax, 1	      3178	fold.c	FUNCTION_66	IF_2	CALL_4
0x5bf8	     0xf85f8000000	                           jne 0x4005d36	      3178	fold.c	FUNCTION_66	IF_2	CALL_4
0x5bfe	    0xc745d4000000	               mov dword [rbp - 0x2c], 0	      3180	fold.c	FUNCTION_66	IF_2	FOR_1
0x5c05	      0xe9d3000000	                           jmp 0x4005d1d	      3180	fold.c	FUNCTION_66	IF_2	FOR_1
0x5c0a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3182	fold.c	FUNCTION_66	IF_2	FOR_1
0x5c0e	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      3182	fold.c	FUNCTION_66	IF_2	FOR_1
0x5c12	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3182	fold.c	FUNCTION_66	IF_2	FOR_1
0x5c16	            0x8b00	                    mov eax, dword [rax]	      3182	fold.c	FUNCTION_66	IF_2	FOR_1
0x5c18	          0x4863d0	                         movsxd rdx, eax	      3182	fold.c	FUNCTION_66	IF_2	FOR_1
0x5c1b	          0x4889d0	                            mov rax, rdx	      3182	fold.c	FUNCTION_66	IF_2	FOR_1
0x5c1e	          0x4801c0	                            add rax, rax	      3182	fold.c	FUNCTION_66	IF_2	FOR_1
0x5c21	          0x4801d0	                            add rax, rdx	      3182	fold.c	FUNCTION_66	IF_2	FOR_1
0x5c24	        0x48c1e004	                              shl rax, 4	      3182	fold.c	FUNCTION_66	IF_2	FOR_1
0x5c28	          0x4801c8	                            add rax, rcx	      3182	fold.c	FUNCTION_66	IF_2	FOR_1
0x5c2b	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x5c2f	        0x488b7210	            mov rsi, qword [rdx + 0x10] 	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x5c33	          0x8b55d4	             mov edx, dword [rbp - 0x2c]	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x5c36	          0x4863ca	                         movsxd rcx, edx	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x5c39	          0x4889ca	                            mov rdx, rcx	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x5c3c	          0x4801d2	                            add rdx, rdx	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x5c3f	          0x4801ca	                            add rdx, rcx	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x5c42	        0x48c1e204	                              shl rdx, 4	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x5c46	          0x4801f2	                            add rdx, rsi	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x5c49	          0x488b0a	                    mov rcx, qword [rdx]	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x5c4c	          0x488908	                    mov qword [rax], rcx	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x5c4f	        0x488b4a08	                mov rcx, qword [rdx + 8]	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x5c53	        0x48894808	                mov qword [rax + 8], rcx	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x5c57	        0x488b4a10	            mov rcx, qword [rdx + 0x10] 	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x5c5b	        0x48894810	             mov qword [rax + 0x10], rcx	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x5c5f	        0x488b4a18	            mov rcx, qword [rdx + 0x18] 	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x5c63	        0x48894818	             mov qword [rax + 0x18], rcx	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x5c67	        0x488b4a20	            mov rcx, qword [rdx + 0x20] 	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x5c6b	        0x48894820	             mov qword [rax + 0x20], rcx	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x5c6f	        0x488b5228	            mov rdx, qword [rdx + 0x28] 	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x5c73	        0x48895028	             mov qword [rax + 0x28], rdx	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x5c77	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x5c7b	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x5c7f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x5c83	            0x8b00	                    mov eax, dword [rax]	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x5c85	          0x4863d0	                         movsxd rdx, eax	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x5c88	          0x4889d0	                            mov rax, rdx	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x5c8b	          0x4801c0	                            add rax, rax	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x5c8e	          0x4801d0	                            add rax, rdx	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x5c91	        0x48c1e004	                              shl rax, 4	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x5c95	          0x4801c1	                            add rcx, rax	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x5c98	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x5c9c	        0x488b7010	            mov rsi, qword [rax + 0x10] 	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x5ca0	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x5ca4	            0x8b00	                    mov eax, dword [rax]	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x5ca6	          0x4863d0	                         movsxd rdx, eax	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x5ca9	          0x4889d0	                            mov rax, rdx	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x5cac	          0x4801c0	                            add rax, rax	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x5caf	          0x4801d0	                            add rax, rdx	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x5cb2	        0x48c1e004	                              shl rax, 4	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x5cb6	          0x4801f0	                            add rax, rsi	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x5cb9	          0x488b10	                    mov rdx, qword [rax]	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x5cbc	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x5cc0	        0x488b4008	                mov rax, qword [rax + 8]	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x5cc4	          0x4801d0	                            add rax, rdx	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x5cc7	          0x488901	                    mov qword [rcx], rax	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x5cca	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3185	fold.c	FUNCTION_66	IF_2	FOR_1
0x5cce	            0x8b00	                    mov eax, dword [rax]	      3185	fold.c	FUNCTION_66	IF_2	FOR_1
0x5cd0	          0x8d5001	                      lea edx, [rax + 1]	      3185	fold.c	FUNCTION_66	IF_2	FOR_1
0x5cd3	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3185	fold.c	FUNCTION_66	IF_2	FOR_1
0x5cd7	            0x8910	                    mov dword [rax], edx	      3185	fold.c	FUNCTION_66	IF_2	FOR_1
0x5cd9	        0x8345d401	               add dword [rbp - 0x2c], 1	      3180	fold.c	FUNCTION_66	IF_2	FOR_1
0x5cdd	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3180	fold.c	FUNCTION_66	IF_2	FOR_1
0x5ce1	            0x8b00	                    mov eax, dword [rax]	      3180	fold.c	FUNCTION_66	IF_2	FOR_1
0x5ce3	          0x3b45d4	             cmp eax, dword [rbp - 0x2c]	      3180	fold.c	FUNCTION_66	IF_2	FOR_1
0x5ce6	     0xf8f1effffff	                            jg 0x4005c4a	      3180	fold.c	FUNCTION_66	IF_2	FOR_1
0x5cec	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3187	fold.c	FUNCTION_66	IF_2
0x5cf0	    0xc70000000000	                      mov dword [rax], 0	      3187	fold.c	FUNCTION_66	IF_2
0x5cf6	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3190	fold.c	FUNCTION_66
0x5cfa	        0x488b5008	                mov rdx, qword [rax + 8]	      3190	fold.c	FUNCTION_66
0x5cfe	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      3190	fold.c	FUNCTION_66
0x5d02	        0x488b4008	                mov rax, qword [rax + 8]	      3190	fold.c	FUNCTION_66
0x5d06	          0x4801c2	                            add rdx, rax	      3190	fold.c	FUNCTION_66
0x5d09	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3190	fold.c	FUNCTION_66
0x5d0d	        0x48895008	                mov qword [rax + 8], rdx	      3190	fold.c	FUNCTION_66
0x5d11	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      3191	fold.c	FUNCTION_66	CALL_5
0x5d15	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      3191	fold.c	FUNCTION_66	CALL_5
0x5d19	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3191	fold.c	FUNCTION_66	CALL_5
0x5d1d	          0x4829c2	                            sub rdx, rax	      3191	fold.c	FUNCTION_66	CALL_5
0x5d20	          0x4889d0	                            mov rax, rdx	      3191	fold.c	FUNCTION_66	CALL_5
0x5d23	        0x48c1f804	                              sar rax, 4	      3191	fold.c	FUNCTION_66	CALL_5
0x5d27	          0x4889c2	                            mov rdx, rax	      3191	fold.c	FUNCTION_66	CALL_5
0x5d2a	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	      3191	fold.c	FUNCTION_66	CALL_5
0x5d34	        0x480fafc2	                           imul rax, rdx	      3191	fold.c	FUNCTION_66	CALL_5
0x5d38	            0x89c1	                            mov ecx, eax	      3191	fold.c	FUNCTION_66	CALL_5
0x5d3a	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      3191	fold.c	FUNCTION_66	CALL_5
0x5d3e	      0xba01000000	                              mov edx, 1	      3191	fold.c	FUNCTION_66	CALL_5
0x5d43	            0x89ce	                            mov esi, ecx	      3191	fold.c	FUNCTION_66	CALL_5
0x5d45	          0x4889c7	                            mov rdi, rax	      3191	fold.c	FUNCTION_66	CALL_5
0x5d48	      0xe85ac5ffff	                call sym.deleteFoldEntry	      3191	fold.c	FUNCTION_66	CALL_5
0x5d4d	    0xc70500000000	               mov dword [0x04005d97], 1	      3192	fold.c	FUNCTION_66
0x5d57	              0x90	                                     nop	      3193	fold.c	FUNCTION_66
0x5d58	        0x488b45f8	                mov rax, qword [rbp - 8]	      3193	fold.c	FUNCTION_66
0x5d5c	    0x644833042528	                xor rax, qword fs:[0x28]	      3193	fold.c	FUNCTION_66
0x5d65	            0x7405	                            je 0x4005dac	      3193	fold.c	FUNCTION_66
0x5d67	      0xe800000000	                          call 0x4005dac	      3193	fold.c	FUNCTION_66
0x5d6c	              0xc9	                                   leave	      3193	fold.c	FUNCTION_66
0x5d6d	              0xc3	                                     ret	      3193	fold.c	FUNCTION_66
