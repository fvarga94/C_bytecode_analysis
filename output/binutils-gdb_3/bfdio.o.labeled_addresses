memory_bstat	SWITCH,0:ELSE,0:DO,0:functions,0:IF,0:CALL,1:FOR,0:WHILE,0	15
0x4000070	        0x488b5710	            mov rdx, qword [rdi + 0x10] 	       624	bfdio.c	FUNCTION_21
0x4000074	        0x488d7e08	                      lea rdi, [rsi + 8]	        90	string3.h	FUNCTION_26	CALL_6
0x4000078	          0x4889f1	                            mov rcx, rsi	        90	string3.h	FUNCTION_26	CALL_6
0x400007b	            0x31c0	                            xor eax, eax	        90	string3.h	FUNCTION_26	CALL_6
0x400007d	    0x48c706000000	                      mov qword [rsi], 0	        90	string3.h	FUNCTION_26	CALL_6
0x4000084	    0x48c786880000	               mov qword [rsi + 0x88], 0	        90	string3.h	FUNCTION_26	CALL_6
0x400008f	        0x4883e7f8	             and rdi, 0xfffffffffffffff8	        90	string3.h	FUNCTION_26	CALL_6
0x4000093	          0x4829f9	                            sub rcx, rdi	        90	string3.h	FUNCTION_26	CALL_6
0x4000096	    0x81c190000000	                           add ecx, 0x90	        90	string3.h	FUNCTION_26	CALL_6
0x400009c	          0xc1e903	                              shr ecx, 3	        90	string3.h	FUNCTION_26	CALL_6
0x400009f	          0xf348ab	              rep stosq qword [rdi], rax	        90	string3.h	FUNCTION_26	CALL_6
0x40000a2	          0x488b02	                    mov rax, qword [rdx]	       627	bfdio.c	FUNCTION_21
0x40000a5	        0x48894630	             mov qword [rsi + 0x30], rax	       627	bfdio.c	FUNCTION_21
0x40000a9	            0x31c0	                            xor eax, eax	       630	bfdio.c	FUNCTION_21
0x40000ab	              0xc3	                                     ret	       630	bfdio.c	FUNCTION_21
memory_btell	SWITCH,0:ELSE,0:DO,0:functions,0:IF,0:CALL,0:FOR,0:WHILE,0	2
0x4000040	        0x488b4730	            mov rax, qword [rdi + 0x30] 	       545	bfdio.c	FUNCTION_17
0x4000044	              0xc3	                                     ret	       546	bfdio.c	FUNCTION_17
memory_bclose	SWITCH,0:ELSE,0:DO,0:functions,0:IF,1:CALL,2:FOR,0:WHILE,0	17
0x40000b0	              0x55	                                push rbp	       604	bfdio.c	FUNCTION_19
0x40000b1	              0x53	                                push rbx	       604	bfdio.c	FUNCTION_19
0x40000b2	          0x4889fb	                            mov rbx, rdi	       604	bfdio.c	FUNCTION_19
0x40000b5	        0x4883ec08	                              sub rsp, 8	       604	bfdio.c	FUNCTION_19
0x40000b9	        0x488b6f10	            mov rbp, qword [rdi + 0x10] 	       605	bfdio.c	FUNCTION_19
0x40000bd	        0x488b7d08	                mov rdi, qword [rbp + 8]	       607	bfdio.c	FUNCTION_19	IF_1
0x40000c1	          0x4885ff	                           test rdi, rdi	       607	bfdio.c	FUNCTION_19	IF_1
0x40000c4	            0x7405	                            je 0x40000cb	       607	bfdio.c	FUNCTION_19	IF_1
0x40000c6	      0xe800000000	                          call 0x40000cb	       608	bfdio.c	FUNCTION_19	CALL_1
0x40000cb	          0x4889ef	                            mov rdi, rbp	       609	bfdio.c	FUNCTION_19	CALL_2
0x40000ce	      0xe800000000	                          call 0x40000d3	       609	bfdio.c	FUNCTION_19	CALL_2
0x40000d3	    0x48c743100000	               mov qword [rbx + 0x10], 0	       610	bfdio.c	FUNCTION_19
0x40000db	        0x4883c408	                              add rsp, 8	       613	bfdio.c	FUNCTION_19
0x40000df	            0x31c0	                            xor eax, eax	       613	bfdio.c	FUNCTION_19
0x40000e1	              0x5b	                                 pop rbx	       613	bfdio.c	FUNCTION_19
0x40000e2	              0x5d	                                 pop rbp	       613	bfdio.c	FUNCTION_19
0x40000e3	              0xc3	                                     ret	       613	bfdio.c	FUNCTION_19
bfd_flush	SWITCH,0:ELSE,0:DO,0:functions,0:IF,1:CALL,1:FOR,0:WHILE,0	8
0x40004a0	        0x488b4718	            mov rax, qword [rdi + 0x18] 	       254	bfdio.c	ELSE_1	FUNCTION_8	IF_1
0x40004a4	          0x4885c0	                           test rax, rax	       254	bfdio.c	ELSE_1	FUNCTION_8	IF_1
0x40004a7	            0x7407	                            je 0x40004b0	       254	bfdio.c	ELSE_1	FUNCTION_8	IF_1
0x40004a9	        0x488b4028	            mov rax, qword [rax + 0x28] 	       255	bfdio.c	ELSE_1	FUNCTION_8	CALL_1
0x40004ad	            0xffe0	                                 jmp rax	       255	bfdio.c	ELSE_1	FUNCTION_8	CALL_1
0x40004af	              0x90	                                     nop	       255	bfdio.c	ELSE_1	FUNCTION_8	CALL_1
0x40004b0	            0x31c0	                            xor eax, eax	       257	bfdio.c	ELSE_1	FUNCTION_8
0x40004b2	              0xc3	                                     ret	       257	bfdio.c	ELSE_1	FUNCTION_8
memory_bflush	SWITCH,0:ELSE,0:DO,0:functions,0:IF,0:CALL,0:FOR,0:WHILE,0	2
0x4000050	            0x31c0	                            xor eax, eax	       619	bfdio.c	FUNCTION_20
0x4000052	              0xc3	                                     ret	       619	bfdio.c	FUNCTION_20
bfd_tell	SWITCH,0:ELSE,1:DO,0:functions,0:IF,1:CALL,2:FOR,0:WHILE,1	34
0x4000430	              0x53	                                push rbx	       229	bfdio.c	FUNCTION_7
0x4000431	        0x488b4718	            mov rax, qword [rdi + 0x18] 	       232	bfdio.c	FUNCTION_7	IF_1
0x4000435	          0x4889fb	                            mov rbx, rdi	       229	bfdio.c	FUNCTION_7
0x4000438	          0x4885c0	                           test rax, rax	       232	bfdio.c	FUNCTION_7	IF_1
0x400043b	            0x744b	                            je 0x4000488	       232	bfdio.c	FUNCTION_7	IF_1
0x400043d	          0xff5010	                 call qword [rax + 0x10]	       235	bfdio.c	FUNCTION_7	IF_1	CALL_1
0x4000440	    0x488b8bd00000	            mov rcx, qword [rbx + 0xd0] 	       237	bfdio.c	FUNCTION_7	IF_1	WHILE_1
0x4000447	          0x4885c9	                           test rcx, rcx	       237	bfdio.c	FUNCTION_7	IF_1	WHILE_1
0x400044a	            0x7446	                            je 0x4000492	       237	bfdio.c	FUNCTION_7	IF_1	WHILE_1
0x400044c	        0xf6414801	               test byte [rcx + 0x48], 1	       238	bfdio.c	FUNCTION_7	IF_1	WHILE_1	CALL_2
0x4000450	          0x4889df	                            mov rdi, rbx	       238	bfdio.c	FUNCTION_7	IF_1	WHILE_1	CALL_2
0x4000453	            0x7417	                            je 0x400046c	       238	bfdio.c	FUNCTION_7	IF_1	WHILE_1	CALL_2
0x4000455	            0xeb3b	                           jmp 0x4000492	       238	bfdio.c	FUNCTION_7	IF_1	WHILE_1	CALL_2
0x4000457	    0x660f1f840000	                    nop word [rax + rax]	       238	bfdio.c	FUNCTION_7	IF_1	WHILE_1	CALL_2
0x4000460	        0xf6424801	               test byte [rdx + 0x48], 1	       238	bfdio.c	FUNCTION_7	IF_1	WHILE_1	CALL_2
0x4000464	          0x4889cf	                            mov rdi, rcx	       238	bfdio.c	FUNCTION_7	IF_1	WHILE_1	CALL_2
0x4000467	          0x4889d1	                            mov rcx, rdx	       238	bfdio.c	FUNCTION_7	IF_1	WHILE_1	CALL_2
0x400046a	            0x7513	                           jne 0x400047f	       238	bfdio.c	FUNCTION_7	IF_1	WHILE_1	CALL_2
0x400046c	        0x482b4758	             sub rax, qword [rdi + 0x58]	       240	bfdio.c	FUNCTION_7	IF_1	WHILE_1
0x4000470	    0x488b91d00000	            mov rdx, qword [rcx + 0xd0] 	       237	bfdio.c	FUNCTION_7	IF_1	WHILE_1
0x4000477	          0x4885d2	                           test rdx, rdx	       237	bfdio.c	FUNCTION_7	IF_1	WHILE_1
0x400047a	          0x4889c6	                            mov rsi, rax	       240	bfdio.c	FUNCTION_7	IF_1	WHILE_1
0x400047d	            0x75e1	                           jne 0x4000460	       237	bfdio.c	FUNCTION_7	IF_1	WHILE_1
0x400047f	        0x48897330	             mov qword [rbx + 0x30], rsi	       247	bfdio.c	FUNCTION_7	ELSE_1
0x4000483	              0x5b	                                 pop rbx	       249	bfdio.c	FUNCTION_7	ELSE_1
0x4000484	              0xc3	                                     ret	       249	bfdio.c	FUNCTION_7	ELSE_1
0x4000485	           0xf1f00	                         nop dword [rax]	       249	bfdio.c	FUNCTION_7	ELSE_1
0x4000488	            0x31f6	                            xor esi, esi	       249	bfdio.c	FUNCTION_7	ELSE_1
0x400048a	            0x31c0	                            xor eax, eax	       245	bfdio.c	FUNCTION_7	ELSE_1
0x400048c	        0x48897330	             mov qword [rbx + 0x30], rsi	       247	bfdio.c	FUNCTION_7	ELSE_1
0x4000490	              0x5b	                                 pop rbx	       249	bfdio.c	FUNCTION_7	ELSE_1
0x4000491	              0xc3	                                     ret	       249	bfdio.c	FUNCTION_7	ELSE_1
0x4000492	          0x4889c6	                            mov rsi, rax	       249	bfdio.c	FUNCTION_7	ELSE_1
0x4000495	            0xebe8	                           jmp 0x400047f	       249	bfdio.c	FUNCTION_7	ELSE_1
bfd_stat	SWITCH,0:ELSE,1:DO,0:functions,0:IF,2:CALL,2:FOR,0:WHILE,0	17
0x40004c0	        0x4883ec18	                           sub rsp, 0x18	       263	bfdio.c	FUNCTION_9
0x40004c4	        0x488b4718	            mov rax, qword [rdi + 0x18] 	       266	bfdio.c	FUNCTION_9	IF_1
0x40004c8	          0x4885c0	                           test rax, rax	       266	bfdio.c	FUNCTION_9	IF_1
0x40004cb	            0x7413	                            je 0x40004e0	       266	bfdio.c	FUNCTION_9	IF_1
0x40004cd	          0xff5030	                 call qword [rax + 0x30]	       267	bfdio.c	FUNCTION_9	CALL_1
0x40004d0	            0x85c0	                           test eax, eax	       271	bfdio.c	FUNCTION_9	IF_2
0x40004d2	            0x7811	                            js 0x40004e5	       271	bfdio.c	FUNCTION_9	IF_2
0x40004d4	        0x4883c418	                           add rsp, 0x18	       274	bfdio.c	FUNCTION_9
0x40004d8	              0xc3	                                     ret	       274	bfdio.c	FUNCTION_9
0x40004d9	     0xf1f80000000	                         nop dword [rax]	       274	bfdio.c	FUNCTION_9
0x40004e0	      0xb8ffffffff	                     mov eax, 0xffffffff	       269	bfdio.c	FUNCTION_9	ELSE_1
0x40004e5	      0xbf01000000	                              mov edi, 1	       272	bfdio.c	FUNCTION_9	CALL_2
0x40004ea	        0x8944240c	              mov dword [rsp + 0xc], eax	       272	bfdio.c	FUNCTION_9	CALL_2
0x40004ee	      0xe800000000	                          call 0x40004f3	       272	bfdio.c	FUNCTION_9	CALL_2
0x40004f3	        0x8b44240c	              mov eax, dword [rsp + 0xc]	       272	bfdio.c	FUNCTION_9	CALL_2
0x40004f7	        0x4883c418	                           add rsp, 0x18	       274	bfdio.c	FUNCTION_9
0x40004fb	              0xc3	                                     ret	       274	bfdio.c	FUNCTION_9
bfd_get_file_size	SWITCH,0:ELSE,0:DO,0:functions,0:IF,1:CALL,3:FOR,0:WHILE,0	30
0x4000750	    0x4881eca80000	                           sub rsp, 0xa8	       453	bfdio.c	FUNCTION_13
0x4000757	    0x64488b042528	                mov rax, qword fs:[0x28]	       453	bfdio.c	FUNCTION_13
0x4000760	    0x488984249800	             mov qword [rsp + 0x98], rax	       453	bfdio.c	FUNCTION_13
0x4000768	            0x31c0	                            xor eax, eax	       453	bfdio.c	FUNCTION_13
0x400076a	    0x488b87d00000	            mov rax, qword [rdi + 0xd0] 	       454	bfdio.c	FUNCTION_13	IF_1
0x4000771	          0x4885c0	                           test rax, rax	       454	bfdio.c	FUNCTION_13	IF_1
0x4000774	            0x7406	                            je 0x400077c	       454	bfdio.c	FUNCTION_13	IF_1
0x4000776	        0xf6404801	               test byte [rax + 0x48], 1	       455	bfdio.c	FUNCTION_13	IF_1	CALL_1
0x400077a	            0x743c	                            je 0x40007b8	       455	bfdio.c	FUNCTION_13	IF_1	CALL_1
0x400077c	        0x488b4718	            mov rax, qword [rdi + 0x18] 	       428	bfdio.c	FUNCTION_12	IF_1
0x4000780	          0x4885c0	                           test rax, rax	       428	bfdio.c	FUNCTION_12	IF_1
0x4000783	            0x742b	                            je 0x40007b0	       428	bfdio.c	FUNCTION_12	IF_1
0x4000785	          0x4889e6	                            mov rsi, rsp	       431	bfdio.c	FUNCTION_12	IF_2	CALL_1
0x4000788	          0xff5030	                 call qword [rax + 0x30]	       431	bfdio.c	FUNCTION_12	IF_2	CALL_1
0x400078b	            0x85c0	                           test eax, eax	       431	bfdio.c	FUNCTION_12	IF_2	CALL_1
0x400078d	            0x7521	                           jne 0x40007b0	       431	bfdio.c	FUNCTION_12	IF_2	CALL_1
0x400078f	      0x488b442430	            mov rax, qword [rsp + 0x30] 	       434	bfdio.c	FUNCTION_12
0x4000794	    0x488b94249800	            mov rdx, qword [rsp + 0x98] 	       459	bfdio.c	FUNCTION_13
0x400079c	    0x644833142528	                xor rdx, qword fs:[0x28]	       459	bfdio.c	FUNCTION_13
0x40007a5	            0x751e	                           jne 0x40007c5	       459	bfdio.c	FUNCTION_13
0x40007a7	    0x4881c4a80000	                           add rsp, 0xa8	       459	bfdio.c	FUNCTION_13
0x40007ae	              0xc3	                                     ret	       459	bfdio.c	FUNCTION_13
0x40007af	              0x90	                                     nop	       459	bfdio.c	FUNCTION_13
0x40007b0	            0x31c0	                            xor eax, eax	       429	bfdio.c	FUNCTION_12	IF_1
0x40007b2	            0xebe0	                           jmp 0x4000794	       429	bfdio.c	FUNCTION_12	IF_1
0x40007b4	         0xf1f4000	                         nop dword [rax]	       429	bfdio.c	FUNCTION_12	IF_1
0x40007b8	    0x488b87c80000	            mov rax, qword [rdi + 0xc8] 	       456	bfdio.c	FUNCTION_13	CALL_2
0x40007bf	        0x488b4008	                mov rax, qword [rax + 8]	       456	bfdio.c	FUNCTION_13	CALL_2
0x40007c3	            0xebcf	                           jmp 0x4000794	       456	bfdio.c	FUNCTION_13	CALL_2
0x40007c5	      0xe800000000	                          call 0x40007ca	       459	bfdio.c	FUNCTION_13
bfd_seek	SWITCH,0:ELSE,5:DO,0:functions,0:IF,8:CALL,7:FOR,0:WHILE,1	118
0x4000500	            0x4155	                                push r13	       281	bfdio.c	FUNCTION_10
0x4000502	            0x4154	                                push r12	       281	bfdio.c	FUNCTION_10
0x4000504	          0x4989f5	                            mov r13, rsi	       281	bfdio.c	FUNCTION_10
0x4000507	              0x55	                                push rbp	       281	bfdio.c	FUNCTION_10
0x4000508	              0x53	                                push rbx	       281	bfdio.c	FUNCTION_10
0x4000509	          0x4889fd	                            mov rbp, rdi	       281	bfdio.c	FUNCTION_10
0x400050c	            0x89d3	                            mov ebx, edx	       281	bfdio.c	FUNCTION_10
0x400050e	        0x4883ec08	                              sub rsp, 8	       281	bfdio.c	FUNCTION_10
0x4000512	          0x83fa01	                              cmp edx, 1	       288	bfdio.c	FUNCTION_10	CALL_1
0x4000515	            0x760f	                           jbe 0x4000526	       288	bfdio.c	FUNCTION_10	CALL_1
0x4000517	      0xbe20010000	                          mov esi, 0x120	       288	bfdio.c	FUNCTION_10	CALL_1
0x400051c	      0xbf00000000	                              mov edi, 0	       288	bfdio.c	FUNCTION_10	CALL_1
0x4000521	      0xe800000000	                          call 0x4000526	       288	bfdio.c	FUNCTION_10	CALL_1
0x4000526	          0x83fb01	                              cmp ebx, 1	       290	bfdio.c	FUNCTION_10	IF_1
0x4000529	            0x7515	                           jne 0x4000540	       290	bfdio.c	FUNCTION_10	IF_1
0x400052b	            0x31c0	                            xor eax, eax	       291	bfdio.c	FUNCTION_10	IF_1
0x400052d	          0x4d85ed	                           test r13, r13	       290	bfdio.c	FUNCTION_10	IF_1
0x4000530	            0x750e	                           jne 0x4000540	       290	bfdio.c	FUNCTION_10	IF_1
0x4000532	        0x4883c408	                              add rsp, 8	       357	bfdio.c	FUNCTION_10	ELSE_5
0x4000536	              0x5b	                                 pop rbx	       357	bfdio.c	FUNCTION_10	ELSE_5
0x4000537	              0x5d	                                 pop rbp	       357	bfdio.c	FUNCTION_10	ELSE_5
0x4000538	            0x415c	                                 pop r12	       357	bfdio.c	FUNCTION_10	ELSE_5
0x400053a	            0x415d	                                 pop r13	       357	bfdio.c	FUNCTION_10	ELSE_5
0x400053c	              0xc3	                                     ret	       357	bfdio.c	FUNCTION_10	ELSE_5
0x400053d	           0xf1f00	                         nop dword [rax]	       357	bfdio.c	FUNCTION_10	ELSE_5
0x4000540	    0x488b95d00000	            mov rdx, qword [rbp + 0xd0] 	       293	bfdio.c	FUNCTION_10	IF_2	CALL_2
0x4000547	          0x4885d2	                           test rdx, rdx	       293	bfdio.c	FUNCTION_10	IF_2	CALL_2
0x400054a	            0x7406	                            je 0x4000552	       293	bfdio.c	FUNCTION_10	IF_2	CALL_2
0x400054c	        0xf6424801	               test byte [rdx + 0x48], 1	       293	bfdio.c	FUNCTION_10	IF_2	CALL_2
0x4000550	            0x743e	                            je 0x4000590	       293	bfdio.c	FUNCTION_10	IF_2	CALL_2
0x4000552	            0x85db	                           test ebx, ebx	       295	bfdio.c	FUNCTION_10	IF_2	IF_3
0x4000554	     0xf84b6000000	                            je 0x4000610	       295	bfdio.c	FUNCTION_10	IF_2	IF_3
0x400055a	          0x4c89ee	                            mov rsi, r13	       313	bfdio.c	FUNCTION_10
0x400055d	        0x488b4518	            mov rax, qword [rbp + 0x18] 	       326	bfdio.c	FUNCTION_10	IF_5
0x4000561	          0x4885c0	                           test rax, rax	       326	bfdio.c	FUNCTION_10	IF_5
0x4000564	            0x746f	                            je 0x40005d5	       326	bfdio.c	FUNCTION_10	IF_5
0x4000566	            0x89da	                            mov edx, ebx	       327	bfdio.c	FUNCTION_10	CALL_4
0x4000568	          0x4889ef	                            mov rdi, rbp	       327	bfdio.c	FUNCTION_10	CALL_4
0x400056b	          0xff5018	                 call qword [rax + 0x18]	       327	bfdio.c	FUNCTION_10	CALL_4
0x400056e	            0x85c0	                           test eax, eax	       331	bfdio.c	FUNCTION_10	ELSE_2	IF_6
0x4000570	          0x4189c4	                           mov r12d, eax	       327	bfdio.c	FUNCTION_10	CALL_4
0x4000573	            0x7566	                           jne 0x40005db	       331	bfdio.c	FUNCTION_10	ELSE_2	IF_6
0x4000575	            0x85db	                           test ebx, ebx	       351	bfdio.c	FUNCTION_10	ELSE_4	IF_8
0x4000577	     0xf84bb000000	                            je 0x4000638	       351	bfdio.c	FUNCTION_10	ELSE_4	IF_8
0x400057d	        0x4c016d30	            add qword [rbp + 0x30], r13 	       354	bfdio.c	FUNCTION_10	ELSE_4	ELSE_5
0x4000581	        0x4883c408	                              add rsp, 8	       357	bfdio.c	FUNCTION_10	ELSE_5
0x4000585	            0x31c0	                            xor eax, eax	       354	bfdio.c	FUNCTION_10	ELSE_4	ELSE_5
0x4000587	              0x5b	                                 pop rbx	       357	bfdio.c	FUNCTION_10	ELSE_5
0x4000588	              0x5d	                                 pop rbp	       357	bfdio.c	FUNCTION_10	ELSE_5
0x4000589	            0x415c	                                 pop r12	       357	bfdio.c	FUNCTION_10	ELSE_5
0x400058b	            0x415d	                                 pop r13	       357	bfdio.c	FUNCTION_10	ELSE_5
0x400058d	              0xc3	                                     ret	       357	bfdio.c	FUNCTION_10	ELSE_5
0x400058e	            0x6690	                                     nop	       357	bfdio.c	FUNCTION_10	ELSE_5
0x4000590	            0x85db	                           test ebx, ebx	       314	bfdio.c	FUNCTION_10	IF_4
0x4000592	          0x4889e9	                            mov rcx, rbp	       314	bfdio.c	FUNCTION_10	IF_4
0x4000595	          0x4c89ee	                            mov rsi, r13	       314	bfdio.c	FUNCTION_10	IF_4
0x4000598	            0x75c3	                           jne 0x400055d	       314	bfdio.c	FUNCTION_10	IF_4
0x400059a	    0x488b82d00000	            mov rax, qword [rdx + 0xd0] 	       318	bfdio.c	FUNCTION_10	IF_4	WHILE_1
0x40005a1	        0x48037158	             add rsi, qword [rcx + 0x58]	       321	bfdio.c	FUNCTION_10	IF_4	WHILE_1
0x40005a5	          0x4885c0	                           test rax, rax	       318	bfdio.c	FUNCTION_10	IF_4	WHILE_1
0x40005a8	            0x74b3	                            je 0x400055d	       318	bfdio.c	FUNCTION_10	IF_4	WHILE_1
0x40005aa	    0x660f1f440000	                    nop word [rax + rax]	       318	bfdio.c	FUNCTION_10	IF_4	WHILE_1
0x40005b0	        0xf6404801	               test byte [rax + 0x48], 1	       319	bfdio.c	FUNCTION_10	IF_4	WHILE_1	CALL_3
0x40005b4	          0x4889d1	                            mov rcx, rdx	       319	bfdio.c	FUNCTION_10	IF_4	WHILE_1	CALL_3
0x40005b7	          0x4889c2	                            mov rdx, rax	       319	bfdio.c	FUNCTION_10	IF_4	WHILE_1	CALL_3
0x40005ba	            0x75a1	                           jne 0x400055d	       319	bfdio.c	FUNCTION_10	IF_4	WHILE_1	CALL_3
0x40005bc	    0x488b82d00000	            mov rax, qword [rdx + 0xd0] 	       318	bfdio.c	FUNCTION_10	IF_4	WHILE_1
0x40005c3	        0x48037158	             add rsi, qword [rcx + 0x58]	       321	bfdio.c	FUNCTION_10	IF_4	WHILE_1
0x40005c7	          0x4885c0	                           test rax, rax	       318	bfdio.c	FUNCTION_10	IF_4	WHILE_1
0x40005ca	            0x75e4	                           jne 0x40005b0	       318	bfdio.c	FUNCTION_10	IF_4	WHILE_1
0x40005cc	        0x488b4518	            mov rax, qword [rbp + 0x18] 	       326	bfdio.c	FUNCTION_10	IF_5
0x40005d0	          0x4885c0	                           test rax, rax	       326	bfdio.c	FUNCTION_10	IF_5
0x40005d3	            0x7591	                           jne 0x4000566	       326	bfdio.c	FUNCTION_10	IF_5
0x40005d5	    0x41bcffffffff	                    mov r12d, 0xffffffff	       329	bfdio.c	FUNCTION_10	ELSE_2
0x40005db	      0xe800000000	                          call 0x40005e0	       333	bfdio.c	FUNCTION_10	ELSE_2	IF_6
0x40005e0	          0x448b28	                   mov r13d, dword [rax]	       333	bfdio.c	FUNCTION_10	ELSE_2	IF_6
0x40005e3	          0x4889ef	                            mov rdi, rbp	       336	bfdio.c	FUNCTION_10	ELSE_2	IF_6	CALL_5
0x40005e6	          0x4889c3	                            mov rbx, rax	       333	bfdio.c	FUNCTION_10	ELSE_2	IF_6
0x40005e9	      0xe800000000	                          call 0x40005ee	       336	bfdio.c	FUNCTION_10	ELSE_2	IF_6	CALL_5
0x40005ee	        0x4183fd16	                          cmp r13d, 0x16	       340	bfdio.c	FUNCTION_10	ELSE_2	IF_6	IF_7
0x40005f2	            0x745c	                            je 0x4000650	       340	bfdio.c	FUNCTION_10	ELSE_2	IF_6	IF_7
0x40005f4	      0xbf01000000	                              mov edi, 1	       344	bfdio.c	FUNCTION_10	ELSE_2	IF_6	ELSE_3	CALL_7
0x40005f9	      0xe800000000	                          call 0x40005fe	       344	bfdio.c	FUNCTION_10	ELSE_2	IF_6	ELSE_3	CALL_7
0x40005fe	          0x44892b	                   mov dword [rbx], r13d	       345	bfdio.c	FUNCTION_10	ELSE_2	IF_6	ELSE_3
0x4000601	        0x4883c408	                              add rsp, 8	       357	bfdio.c	FUNCTION_10	ELSE_5
0x4000605	          0x4489e0	                           mov eax, r12d	       345	bfdio.c	FUNCTION_10	ELSE_2	IF_6	ELSE_3
0x4000608	              0x5b	                                 pop rbx	       357	bfdio.c	FUNCTION_10	ELSE_5
0x4000609	              0x5d	                                 pop rbp	       357	bfdio.c	FUNCTION_10	ELSE_5
0x400060a	            0x415c	                                 pop r12	       357	bfdio.c	FUNCTION_10	ELSE_5
0x400060c	            0x415d	                                 pop r13	       357	bfdio.c	FUNCTION_10	ELSE_5
0x400060e	              0xc3	                                     ret	       357	bfdio.c	FUNCTION_10	ELSE_5
0x400060f	              0x90	                                     nop	       357	bfdio.c	FUNCTION_10	ELSE_5
0x4000610	        0x4c396d30	            cmp qword [rbp + 0x30], r13 	       295	bfdio.c	FUNCTION_10	IF_2	IF_3
0x4000614	            0x7452	                            je 0x4000668	       295	bfdio.c	FUNCTION_10	IF_2	IF_3
0x4000616	          0x4885d2	                           test rdx, rdx	       318	bfdio.c	FUNCTION_10	IF_4	WHILE_1
0x4000619	     0xf843bffffff	                            je 0x400055a	       318	bfdio.c	FUNCTION_10	IF_4	WHILE_1
0x400061f	        0xf6424801	               test byte [rdx + 0x48], 1	       319	bfdio.c	FUNCTION_10	IF_4	WHILE_1	CALL_3
0x4000623	     0xf8531ffffff	                           jne 0x400055a	       319	bfdio.c	FUNCTION_10	IF_4	WHILE_1	CALL_3
0x4000629	          0x4889e9	                            mov rcx, rbp	       319	bfdio.c	FUNCTION_10	IF_4	WHILE_1	CALL_3
0x400062c	          0x4c89ee	                            mov rsi, r13	       319	bfdio.c	FUNCTION_10	IF_4	WHILE_1	CALL_3
0x400062f	            0xeb8b	                           jmp 0x40005bc	       319	bfdio.c	FUNCTION_10	IF_4	WHILE_1	CALL_3
0x4000631	     0xf1f80000000	                         nop dword [rax]	       319	bfdio.c	FUNCTION_10	IF_4	WHILE_1	CALL_3
0x4000638	        0x4c896d30	            mov qword [rbp + 0x30], r13 	       352	bfdio.c	FUNCTION_10	ELSE_4	IF_8
0x400063c	        0x4883c408	                              add rsp, 8	       357	bfdio.c	FUNCTION_10	ELSE_5
0x4000640	            0x31c0	                            xor eax, eax	       357	bfdio.c	FUNCTION_10	ELSE_5
0x4000642	              0x5b	                                 pop rbx	       357	bfdio.c	FUNCTION_10	ELSE_5
0x4000643	              0x5d	                                 pop rbp	       357	bfdio.c	FUNCTION_10	ELSE_5
0x4000644	            0x415c	                                 pop r12	       357	bfdio.c	FUNCTION_10	ELSE_5
0x4000646	            0x415d	                                 pop r13	       357	bfdio.c	FUNCTION_10	ELSE_5
0x4000648	              0xc3	                                     ret	       357	bfdio.c	FUNCTION_10	ELSE_5
0x4000649	     0xf1f80000000	                         nop dword [rax]	       357	bfdio.c	FUNCTION_10	ELSE_5
0x4000650	      0xbf12000000	                           mov edi, 0x12	       341	bfdio.c	FUNCTION_10	ELSE_2	IF_6	CALL_6
0x4000655	      0xe800000000	                          call 0x400065a	       341	bfdio.c	FUNCTION_10	ELSE_2	IF_6	CALL_6
0x400065a	          0x4489e0	                           mov eax, r12d	       341	bfdio.c	FUNCTION_10	ELSE_2	IF_6	CALL_6
0x400065d	      0xe9d0feffff	                           jmp 0x4000532	       341	bfdio.c	FUNCTION_10	ELSE_2	IF_6	CALL_6
0x4000662	    0x660f1f440000	                    nop word [rax + rax]	       341	bfdio.c	FUNCTION_10	ELSE_2	IF_6	CALL_6
0x4000668	            0x31c0	                            xor eax, eax	       291	bfdio.c	FUNCTION_10	IF_1
0x400066a	      0xe9c3feffff	                           jmp 0x4000532	       291	bfdio.c	FUNCTION_10	IF_1
memory_bwrite	SWITCH,0:ELSE,0:DO,0:functions,0:IF,4:CALL,3:FOR,0:WHILE,0	58
0x4000230	            0x4156	                                push r14	       515	bfdio.c	FUNCTION_16
0x4000232	            0x4155	                                push r13	       515	bfdio.c	FUNCTION_16
0x4000234	          0x4989f6	                            mov r14, rsi	       515	bfdio.c	FUNCTION_16
0x4000237	            0x4154	                                push r12	       515	bfdio.c	FUNCTION_16
0x4000239	              0x55	                                push rbp	       515	bfdio.c	FUNCTION_16
0x400023a	          0x4889d5	                            mov rbp, rdx	       515	bfdio.c	FUNCTION_16
0x400023d	              0x53	                                push rbx	       515	bfdio.c	FUNCTION_16
0x400023e	        0x4c8b6710	            mov r12, qword [rdi + 0x10] 	       516	bfdio.c	FUNCTION_16
0x4000242	        0x488b4f30	            mov rcx, qword [rdi + 0x30] 	       518	bfdio.c	FUNCTION_16	IF_1
0x4000246	        0x488d3411	                    lea rsi, [rcx + rdx]	       518	bfdio.c	FUNCTION_16	IF_1
0x400024a	        0x498b1424	                    mov rdx, qword [r12]	       518	bfdio.c	FUNCTION_16	IF_1
0x400024e	          0x4839d6	                            cmp rsi, rdx	       518	bfdio.c	FUNCTION_16	IF_1
0x4000251	            0x7619	                           jbe 0x400026c	       518	bfdio.c	FUNCTION_16	IF_1
0x4000253	        0x488d5e7f	                   lea rbx, [rsi + 0x7f]	       525	bfdio.c	FUNCTION_16	IF_1
0x4000257	        0x4883c27f	                           add rdx, 0x7f	       526	bfdio.c	FUNCTION_16	IF_1	IF_2
0x400025b	        0x49893424	                    mov qword [r12], rsi	       523	bfdio.c	FUNCTION_16	IF_1
0x400025f	        0x4883e280	             and rdx, 0xffffffffffffff80	       526	bfdio.c	FUNCTION_16	IF_1	IF_2
0x4000263	        0x4883e380	             and rbx, 0xffffffffffffff80	       525	bfdio.c	FUNCTION_16	IF_1
0x4000267	          0x4839da	                            cmp rdx, rbx	       526	bfdio.c	FUNCTION_16	IF_1	IF_2
0x400026a	            0x7224	                            jb 0x4000290	       526	bfdio.c	FUNCTION_16	IF_1	IF_2
0x400026c	      0x498b7c2408	                mov rdi, qword [r12 + 8]	       526	bfdio.c	FUNCTION_16	IF_1	IF_2
0x4000271	          0x4801cf	                            add rdi, rcx	        53	string3.h	FUNCTION_23	CALL_3
0x4000274	          0x4889ea	                            mov rdx, rbp	        53	string3.h	FUNCTION_23	CALL_3
0x4000277	          0x4c89f6	                            mov rsi, r14	        53	string3.h	FUNCTION_23	CALL_3
0x400027a	      0xe800000000	                          call 0x400027f	        53	string3.h	FUNCTION_23	CALL_3
0x400027f	          0x4889e8	                            mov rax, rbp	       539	bfdio.c	FUNCTION_16
0x4000282	              0x5b	                                 pop rbx	       540	bfdio.c	FUNCTION_16
0x4000283	              0x5d	                                 pop rbp	       540	bfdio.c	FUNCTION_16
0x4000284	            0x415c	                                 pop r12	       540	bfdio.c	FUNCTION_16
0x4000286	            0x415d	                                 pop r13	       540	bfdio.c	FUNCTION_16
0x4000288	            0x415e	                                 pop r14	       540	bfdio.c	FUNCTION_16
0x400028a	              0xc3	                                     ret	       540	bfdio.c	FUNCTION_16
0x400028b	       0xf1f440000	                   nop dword [rax + rax]	       540	bfdio.c	FUNCTION_16
0x4000290	          0x4989fd	                            mov r13, rdi	       540	bfdio.c	FUNCTION_16
0x4000293	      0x498b7c2408	                mov rdi, qword [r12 + 8]	       528	bfdio.c	FUNCTION_16	IF_1	IF_2	CALL_1
0x4000298	          0x4889de	                            mov rsi, rbx	       528	bfdio.c	FUNCTION_16	IF_1	IF_2	CALL_1
0x400029b	      0xe800000000	                          call 0x40002a0	       528	bfdio.c	FUNCTION_16	IF_1	IF_2	CALL_1
0x40002a0	          0x4885c0	                           test rax, rax	       529	bfdio.c	FUNCTION_16	IF_1	IF_2	IF_3
0x40002a3	          0x4889c7	                            mov rdi, rax	       528	bfdio.c	FUNCTION_16	IF_1	IF_2	CALL_1
0x40002a6	      0x4989442408	                mov qword [r12 + 8], rax	       528	bfdio.c	FUNCTION_16	IF_1	IF_2	CALL_1
0x40002ab	            0x7433	                            je 0x40002e0	       529	bfdio.c	FUNCTION_16	IF_1	IF_2	IF_3
0x40002ad	        0x498b0424	                    mov rax, qword [r12]	       534	bfdio.c	FUNCTION_16	IF_1	IF_2	IF_4
0x40002b1	          0x4839c3	                            cmp rbx, rax	       534	bfdio.c	FUNCTION_16	IF_1	IF_2	IF_4
0x40002b4	            0x770a	                            ja 0x40002c0	       534	bfdio.c	FUNCTION_16	IF_1	IF_2	IF_4
0x40002b6	        0x498b4d30	            mov rcx, qword [r13 + 0x30] 	       534	bfdio.c	FUNCTION_16	IF_1	IF_2	IF_4
0x40002ba	            0xebb5	                           jmp 0x4000271	       534	bfdio.c	FUNCTION_16	IF_1	IF_2	IF_4
0x40002bc	         0xf1f4000	                         nop dword [rax]	       534	bfdio.c	FUNCTION_16	IF_1	IF_2	IF_4
0x40002c0	          0x4829c3	                            sub rbx, rax	        90	string3.h	FUNCTION_26	CALL_6
0x40002c3	          0x4801c7	                            add rdi, rax	        90	string3.h	FUNCTION_26	CALL_6
0x40002c6	            0x31f6	                            xor esi, esi	        90	string3.h	FUNCTION_26	CALL_6
0x40002c8	          0x4889da	                            mov rdx, rbx	        90	string3.h	FUNCTION_26	CALL_6
0x40002cb	      0xe800000000	                          call 0x40002d0	        90	string3.h	FUNCTION_26	CALL_6
0x40002d0	      0x498b7c2408	                mov rdi, qword [r12 + 8]	        90	string3.h	FUNCTION_26	CALL_6
0x40002d5	            0xebdf	                           jmp 0x40002b6	        90	string3.h	FUNCTION_26	CALL_6
0x40002d7	    0x660f1f840000	                    nop word [rax + rax]	        90	string3.h	FUNCTION_26	CALL_6
0x40002e0	    0x49c704240000	                      mov qword [r12], 0	       531	bfdio.c	FUNCTION_16	IF_1	IF_2	IF_3
0x40002e8	            0x31c0	                            xor eax, eax	       532	bfdio.c	FUNCTION_16	IF_1	IF_2	IF_3
0x40002ea	            0xeb96	                           jmp 0x4000282	       532	bfdio.c	FUNCTION_16	IF_1	IF_2	IF_3
_bfd_real_fopen	SWITCH,0:ELSE,1:DO,0:functions,0:IF,1:CALL,13:FOR,1:WHILE,0	28
0x4000310	              0x55	                                push rbp	        86	bfdio.c	FUNCTION_4
0x4000311	              0x53	                                push rbx	        86	bfdio.c	FUNCTION_4
0x4000312	        0x4883ec08	                              sub rsp, 8	        86	bfdio.c	FUNCTION_4
0x4000316	      0xe800000000	                          call 0x400031b	       120	bfdio.c	FUNCTION_4	CALL_11
0x400031b	          0x4885c0	                           test rax, rax	        73	bfdio.c	FUNCTION_3	IF_1
0x400031e	          0x4889c3	                            mov rbx, rax	       120	bfdio.c	FUNCTION_4	CALL_11
0x4000321	            0x7431	                            je 0x4000354	        73	bfdio.c	FUNCTION_3	IF_1
0x4000323	          0x4889c7	                            mov rdi, rax	        75	bfdio.c	FUNCTION_3	IF_1	CALL_1
0x4000326	      0xe800000000	                          call 0x400032b	        75	bfdio.c	FUNCTION_3	IF_1	CALL_1
0x400032b	            0x31d2	                            xor edx, edx	        76	bfdio.c	FUNCTION_3	IF_1	CALL_2
0x400032d	            0x89c7	                            mov edi, eax	        76	bfdio.c	FUNCTION_3	IF_1	CALL_2
0x400032f	            0x89c5	                            mov ebp, eax	        75	bfdio.c	FUNCTION_3	IF_1	CALL_1
0x4000331	      0xbe01000000	                              mov esi, 1	        76	bfdio.c	FUNCTION_3	IF_1	CALL_2
0x4000336	            0x31c0	                            xor eax, eax	        76	bfdio.c	FUNCTION_3	IF_1	CALL_2
0x4000338	      0xe800000000	                          call 0x400033d	        76	bfdio.c	FUNCTION_3	IF_1	CALL_2
0x400033d	            0x85c0	                           test eax, eax	        77	bfdio.c	FUNCTION_3	IF_1	IF_2
0x400033f	            0x7813	                            js 0x4000354	        77	bfdio.c	FUNCTION_3	IF_1	IF_2
0x4000341	          0x83c801	                               or eax, 1	        78	bfdio.c	FUNCTION_3	IF_1	CALL_3
0x4000344	      0xbe02000000	                              mov esi, 2	        78	bfdio.c	FUNCTION_3	IF_1	CALL_3
0x4000349	            0x89ef	                            mov edi, ebp	        78	bfdio.c	FUNCTION_3	IF_1	CALL_3
0x400034b	            0x89c2	                            mov edx, eax	        78	bfdio.c	FUNCTION_3	IF_1	CALL_3
0x400034d	            0x31c0	                            xor eax, eax	        78	bfdio.c	FUNCTION_3	IF_1	CALL_3
0x400034f	      0xe800000000	                          call 0x4000354	        78	bfdio.c	FUNCTION_3	IF_1	CALL_3
0x4000354	        0x4883c408	                              add rsp, 8	       125	bfdio.c	FUNCTION_4
0x4000358	          0x4889d8	                            mov rax, rbx	       125	bfdio.c	FUNCTION_4
0x400035b	              0x5b	                                 pop rbx	       125	bfdio.c	FUNCTION_4
0x400035c	              0x5d	                                 pop rbp	       125	bfdio.c	FUNCTION_4
0x400035d	              0xc3	                                     ret	       125	bfdio.c	FUNCTION_4
_bfd_real_ftell	SWITCH,0:ELSE,0:DO,0:functions,0:IF,0:CALL,3:FOR,0:WHILE,0	1
0x40002f0	      0xe900000000	                           jmp 0x40002f5	        47	bfdio.c	FUNCTION_1	CALL_1
memory_bread	SWITCH,0:ELSE,1:DO,0:functions,0:IF,2:CALL,2:FOR,0:WHILE,0	37
0x40001c0	            0x4156	                                push r14	       495	bfdio.c	FUNCTION_15
0x40001c2	            0x4155	                                push r13	       495	bfdio.c	FUNCTION_15
0x40001c4	          0x4989f6	                            mov r14, rsi	       495	bfdio.c	FUNCTION_15
0x40001c7	            0x4154	                                push r12	       495	bfdio.c	FUNCTION_15
0x40001c9	              0x55	                                push rbp	       495	bfdio.c	FUNCTION_15
0x40001ca	              0x53	                                push rbx	       495	bfdio.c	FUNCTION_15
0x40001cb	        0x4c8b6710	            mov r12, qword [rdi + 0x10] 	       499	bfdio.c	FUNCTION_15
0x40001cf	          0x4889d3	                            mov rbx, rdx	       500	bfdio.c	FUNCTION_15
0x40001d2	        0x488b7730	            mov rsi, qword [rdi + 0x30] 	       501	bfdio.c	FUNCTION_15	IF_1
0x40001d6	          0x4989dd	                            mov r13, rbx	       501	bfdio.c	FUNCTION_15	IF_1
0x40001d9	        0x498b0424	                    mov rax, qword [r12]	       501	bfdio.c	FUNCTION_15	IF_1
0x40001dd	          0x4801f2	                            add rdx, rsi	       501	bfdio.c	FUNCTION_15	IF_1
0x40001e0	          0x4839c2	                            cmp rdx, rax	       501	bfdio.c	FUNCTION_15	IF_1
0x40001e3	            0x761f	                           jbe 0x4000204	       501	bfdio.c	FUNCTION_15	IF_1
0x40001e5	          0x4839c6	                            cmp rsi, rax	       503	bfdio.c	FUNCTION_15	IF_1	IF_2
0x40001e8	          0x4889fd	                            mov rbp, rdi	       503	bfdio.c	FUNCTION_15	IF_1	IF_2
0x40001eb	            0x7733	                            ja 0x4000220	       503	bfdio.c	FUNCTION_15	IF_1	IF_2
0x40001ed	          0x4829f0	                            sub rax, rsi	       506	bfdio.c	FUNCTION_15	IF_1	ELSE_1
0x40001f0	          0x4889c3	                            mov rbx, rax	       506	bfdio.c	FUNCTION_15	IF_1	ELSE_1
0x40001f3	          0x4989c5	                            mov r13, rax	       506	bfdio.c	FUNCTION_15	IF_1	ELSE_1
0x40001f6	      0xbf12000000	                           mov edi, 0x12	       507	bfdio.c	FUNCTION_15	IF_1	CALL_1
0x40001fb	      0xe800000000	                          call 0x4000200	       507	bfdio.c	FUNCTION_15	IF_1	CALL_1
0x4000200	        0x488b7530	            mov rsi, qword [rbp + 0x30] 	       507	bfdio.c	FUNCTION_15	IF_1	CALL_1
0x4000204	      0x4903742408	                add rsi, qword [r12 + 8]	        53	string3.h	FUNCTION_23	CALL_3
0x4000209	          0x4889da	                            mov rdx, rbx	        53	string3.h	FUNCTION_23	CALL_3
0x400020c	          0x4c89f7	                            mov rdi, r14	        53	string3.h	FUNCTION_23	CALL_3
0x400020f	      0xe800000000	                          call 0x4000214	        53	string3.h	FUNCTION_23	CALL_3
0x4000214	              0x5b	                                 pop rbx	       511	bfdio.c	FUNCTION_15
0x4000215	          0x4c89e8	                            mov rax, r13	       511	bfdio.c	FUNCTION_15
0x4000218	              0x5d	                                 pop rbp	       511	bfdio.c	FUNCTION_15
0x4000219	            0x415c	                                 pop r12	       511	bfdio.c	FUNCTION_15
0x400021b	            0x415d	                                 pop r13	       511	bfdio.c	FUNCTION_15
0x400021d	            0x415e	                                 pop r14	       511	bfdio.c	FUNCTION_15
0x400021f	              0xc3	                                     ret	       511	bfdio.c	FUNCTION_15
0x4000220	          0x4531ed	                          xor r13d, r13d	       511	bfdio.c	FUNCTION_15
0x4000223	            0x31db	                            xor ebx, ebx	       504	bfdio.c	FUNCTION_15	IF_1	IF_2
0x4000225	            0xebcf	                           jmp 0x40001f6	       504	bfdio.c	FUNCTION_15	IF_1	IF_2
bfd_bread	SWITCH,0:ELSE,1:DO,0:functions,0:IF,5:CALL,2:FOR,0:WHILE,0	35
0x4000360	              0x53	                                push rbx	       178	bfdio.c	FUNCTION_5
0x4000361	    0x488b82c80000	            mov rax, qword [rdx + 0xc8] 	       183	bfdio.c	FUNCTION_5	IF_1
0x4000368	          0x4889d3	                            mov rbx, rdx	       178	bfdio.c	FUNCTION_5
0x400036b	          0x4885c0	                           test rax, rax	       183	bfdio.c	FUNCTION_5	IF_1
0x400036e	            0x741e	                            je 0x400038e	       183	bfdio.c	FUNCTION_5	IF_1
0x4000370	        0x488b5230	            mov rdx, qword [rdx + 0x30] 	       187	bfdio.c	FUNCTION_5	IF_1	IF_2
0x4000374	        0x488b4808	                mov rcx, qword [rax + 8]	       185	bfdio.c	FUNCTION_5	IF_1	CALL_1
0x4000378	        0x488d0416	                    lea rax, [rsi + rdx]	       187	bfdio.c	FUNCTION_5	IF_1	IF_2
0x400037c	          0x4839c1	                            cmp rcx, rax	       187	bfdio.c	FUNCTION_5	IF_1	IF_2
0x400037f	            0x730d	                           jae 0x400038e	       187	bfdio.c	FUNCTION_5	IF_1	IF_2
0x4000381	            0x31c0	                            xor eax, eax	       190	bfdio.c	FUNCTION_5	IF_1	IF_2	IF_3
0x4000383	          0x4839d1	                            cmp rcx, rdx	       189	bfdio.c	FUNCTION_5	IF_1	IF_2	IF_3
0x4000386	            0x7630	                           jbe 0x40003b8	       189	bfdio.c	FUNCTION_5	IF_1	IF_2	IF_3
0x4000388	          0x4829d1	                            sub rcx, rdx	       191	bfdio.c	FUNCTION_5	IF_1	IF_2
0x400038b	          0x4889ce	                            mov rsi, rcx	       191	bfdio.c	FUNCTION_5	IF_1	IF_2
0x400038e	        0x488b4318	            mov rax, qword [rbx + 0x18] 	       195	bfdio.c	FUNCTION_5	IF_4
0x4000392	          0x4885c0	                           test rax, rax	       195	bfdio.c	FUNCTION_5	IF_4
0x4000395	            0x7429	                            je 0x40003c0	       195	bfdio.c	FUNCTION_5	IF_4
0x4000397	          0x4889f2	                            mov rdx, rsi	       196	bfdio.c	FUNCTION_5	CALL_2
0x400039a	          0x4889fe	                            mov rsi, rdi	       196	bfdio.c	FUNCTION_5	CALL_2
0x400039d	          0x4889df	                            mov rdi, rbx	       196	bfdio.c	FUNCTION_5	CALL_2
0x40003a0	            0xff10	                        call qword [rax]	       196	bfdio.c	FUNCTION_5	CALL_2
0x40003a2	          0x4889c2	                            mov rdx, rax	       196	bfdio.c	FUNCTION_5	CALL_2
0x40003a5	    0x48c7c0ffffff	             mov rax, 0xffffffffffffffff	       196	bfdio.c	FUNCTION_5	CALL_2
0x40003ac	          0x4839c2	                            cmp rdx, rax	       199	bfdio.c	FUNCTION_5	IF_5
0x40003af	            0x7407	                            je 0x40003b8	       199	bfdio.c	FUNCTION_5	IF_5
0x40003b1	        0x48015330	            add qword [rbx + 0x30], rdx 	       200	bfdio.c	FUNCTION_5	IF_5
0x40003b5	          0x4889d0	                            mov rax, rdx	       200	bfdio.c	FUNCTION_5	IF_5
0x40003b8	              0x5b	                                 pop rbx	       203	bfdio.c	FUNCTION_5
0x40003b9	              0xc3	                                     ret	       203	bfdio.c	FUNCTION_5
0x40003ba	    0x660f1f440000	                    nop word [rax + rax]	       203	bfdio.c	FUNCTION_5
0x40003c0	            0x31d2	                            xor edx, edx	       198	bfdio.c	FUNCTION_5	ELSE_1
0x40003c2	        0x48015330	            add qword [rbx + 0x30], rdx 	       200	bfdio.c	FUNCTION_5	IF_5
0x40003c6	          0x4889d0	                            mov rax, rdx	       200	bfdio.c	FUNCTION_5	IF_5
0x40003c9	            0xebed	                           jmp 0x40003b8	       200	bfdio.c	FUNCTION_5	IF_5
memory_bmmap	SWITCH,0:ELSE,0:DO,0:functions,0:IF,0:CALL,0:FOR,0:WHILE,0	2
0x4000060	    0x48c7c0ffffff	             mov rax, 0xffffffffffffffff	       640	bfdio.c	FUNCTION_22
0x4000067	              0xc3	                                     ret	       640	bfdio.c	FUNCTION_22
_bfd_real_fseek	SWITCH,0:ELSE,0:DO,0:functions,0:IF,0:CALL,3:FOR,0:WHILE,0	1
0x4000300	      0xe900000000	                           jmp 0x4000305	        59	bfdio.c	FUNCTION_2	CALL_1
memory_bseek	SWITCH,0:ELSE,2:DO,0:functions,0:IF,6:CALL,3:FOR,0:WHILE,0	57
0x40000f0	            0x85d2	                           test edx, edx	       556	bfdio.c	FUNCTION_18	IF_1
0x40000f2	            0x4154	                                push r12	       550	bfdio.c	FUNCTION_18
0x40000f4	              0x55	                                push rbp	       550	bfdio.c	FUNCTION_18
0x40000f5	              0x53	                                push rbx	       550	bfdio.c	FUNCTION_18
0x40000f6	        0x4c8b6710	            mov r12, qword [rdi + 0x10] 	       554	bfdio.c	FUNCTION_18
0x40000fa	            0x7404	                            je 0x4000100	       556	bfdio.c	FUNCTION_18	IF_1
0x40000fc	        0x48037730	             add rsi, qword [rdi + 0x30]	       559	bfdio.c	FUNCTION_18	ELSE_1
0x4000100	          0x4885f6	                           test rsi, rsi	       561	bfdio.c	FUNCTION_18	ELSE_1	IF_2
0x4000103	            0x7863	                            js 0x4000168	       561	bfdio.c	FUNCTION_18	ELSE_1	IF_2
0x4000105	        0x498b0424	                    mov rax, qword [r12]	       568	bfdio.c	FUNCTION_18	IF_3
0x4000109	          0x4839f0	                            cmp rax, rsi	       568	bfdio.c	FUNCTION_18	IF_3
0x400010c	            0x731f	                           jae 0x400012d	       568	bfdio.c	FUNCTION_18	IF_3
0x400010e	        0xf6474410	           test byte [rdi + 0x44], 0x10 	       570	bfdio.c	FUNCTION_18	IF_3	IF_4
0x4000112	            0x746e	                            je 0x4000182	       570	bfdio.c	FUNCTION_18	IF_3	IF_4
0x4000114	        0x488d687f	                   lea rbp, [rax + 0x7f]	       575	bfdio.c	FUNCTION_18	IF_3	IF_4
0x4000118	        0x488d5e7f	                   lea rbx, [rsi + 0x7f]	       578	bfdio.c	FUNCTION_18	IF_3	IF_4
0x400011c	        0x49893424	                    mov qword [r12], rsi	       576	bfdio.c	FUNCTION_18	IF_3	IF_4
0x4000120	        0x4883e580	             and rbp, 0xffffffffffffff80	       575	bfdio.c	FUNCTION_18	IF_3	IF_4
0x4000124	        0x4883e380	             and rbx, 0xffffffffffffff80	       578	bfdio.c	FUNCTION_18	IF_3	IF_4
0x4000128	          0x4839dd	                            cmp rbp, rbx	       579	bfdio.c	FUNCTION_18	IF_3	IF_4	IF_5
0x400012b	            0x720b	                            jb 0x4000138	       579	bfdio.c	FUNCTION_18	IF_3	IF_4	IF_5
0x400012d	            0x31c0	                            xor eax, eax	       599	bfdio.c	FUNCTION_18
0x400012f	              0x5b	                                 pop rbx	       600	bfdio.c	FUNCTION_18
0x4000130	              0x5d	                                 pop rbp	       600	bfdio.c	FUNCTION_18
0x4000131	            0x415c	                                 pop r12	       600	bfdio.c	FUNCTION_18
0x4000133	              0xc3	                                     ret	       600	bfdio.c	FUNCTION_18
0x4000134	         0xf1f4000	                         nop dword [rax]	       600	bfdio.c	FUNCTION_18
0x4000138	      0x498b7c2408	                mov rdi, qword [r12 + 8]	       581	bfdio.c	FUNCTION_18	IF_3	IF_4	IF_5	CALL_1
0x400013d	          0x4889de	                            mov rsi, rbx	       581	bfdio.c	FUNCTION_18	IF_3	IF_4	IF_5	CALL_1
0x4000140	      0xe800000000	                          call 0x4000145	       581	bfdio.c	FUNCTION_18	IF_3	IF_4	IF_5	CALL_1
0x4000145	          0x4885c0	                           test rax, rax	       582	bfdio.c	FUNCTION_18	IF_3	IF_4	IF_5	IF_6
0x4000148	      0x4989442408	                mov qword [r12 + 8], rax	       581	bfdio.c	FUNCTION_18	IF_3	IF_4	IF_5	CALL_1
0x400014d	            0x7453	                            je 0x40001a2	       582	bfdio.c	FUNCTION_18	IF_3	IF_4	IF_5	IF_6
0x400014f	          0x4829eb	                            sub rbx, rbp	        90	string3.h	FUNCTION_26	CALL_6
0x4000152	        0x488d3c28	                    lea rdi, [rax + rbp]	        90	string3.h	FUNCTION_26	CALL_6
0x4000156	            0x31f6	                            xor esi, esi	        90	string3.h	FUNCTION_26	CALL_6
0x4000158	          0x4889da	                            mov rdx, rbx	        90	string3.h	FUNCTION_26	CALL_6
0x400015b	      0xe800000000	                          call 0x4000160	        90	string3.h	FUNCTION_26	CALL_6
0x4000160	            0xebcb	                           jmp 0x400012d	        90	string3.h	FUNCTION_26	CALL_6
0x4000162	    0x660f1f440000	                    nop word [rax + rax]	        90	string3.h	FUNCTION_26	CALL_6
0x4000168	    0x48c747300000	               mov qword [rdi + 0x30], 0	       563	bfdio.c	FUNCTION_18	ELSE_1	IF_2
0x4000170	      0xe800000000	                          call 0x4000175	       564	bfdio.c	FUNCTION_18	ELSE_1	IF_2
0x4000175	    0xc70016000000	                   mov dword [rax], 0x16	       564	bfdio.c	FUNCTION_18	ELSE_1	IF_2
0x400017b	      0xb8ffffffff	                     mov eax, 0xffffffff	       565	bfdio.c	FUNCTION_18	ELSE_1	IF_2
0x4000180	            0xebad	                           jmp 0x400012f	       565	bfdio.c	FUNCTION_18	ELSE_1	IF_2
0x4000182	        0x48894730	             mov qword [rdi + 0x30], rax	       593	bfdio.c	FUNCTION_18	IF_3	ELSE_2
0x4000186	      0xe800000000	                          call 0x400018b	       594	bfdio.c	FUNCTION_18	IF_3	ELSE_2
0x400018b	      0xbf12000000	                           mov edi, 0x12	       595	bfdio.c	FUNCTION_18	IF_3	ELSE_2	CALL_3
0x4000190	    0xc70016000000	                   mov dword [rax], 0x16	       594	bfdio.c	FUNCTION_18	IF_3	ELSE_2
0x4000196	      0xe800000000	                          call 0x400019b	       595	bfdio.c	FUNCTION_18	IF_3	ELSE_2	CALL_3
0x400019b	      0xb8ffffffff	                     mov eax, 0xffffffff	       596	bfdio.c	FUNCTION_18	IF_3	ELSE_2
0x40001a0	            0xeb8d	                           jmp 0x400012f	       596	bfdio.c	FUNCTION_18	IF_3	ELSE_2
0x40001a2	      0xe800000000	                          call 0x40001a7	       584	bfdio.c	FUNCTION_18	IF_3	IF_4	IF_5	IF_6
0x40001a7	    0xc70016000000	                   mov dword [rax], 0x16	       584	bfdio.c	FUNCTION_18	IF_3	IF_4	IF_5	IF_6
0x40001ad	    0x49c704240000	                      mov qword [r12], 0	       585	bfdio.c	FUNCTION_18	IF_3	IF_4	IF_5	IF_6
0x40001b5	      0xb8ffffffff	                     mov eax, 0xffffffff	       586	bfdio.c	FUNCTION_18	IF_3	IF_4	IF_5	IF_6
0x40001ba	      0xe970ffffff	                           jmp 0x400012f	       586	bfdio.c	FUNCTION_18	IF_3	IF_4	IF_5	IF_6
bfd_get_mtime	SWITCH,0:ELSE,0:DO,0:functions,0:IF,3:CALL,1:FOR,0:WHILE,0	30
0x4000670	              0x53	                                push rbx	       374	bfdio.c	ELSE_5	FUNCTION_11
0x4000671	          0x4889fb	                            mov rbx, rdi	       374	bfdio.c	ELSE_5	FUNCTION_11
0x4000674	    0x4881eca00000	                           sub rsp, 0xa0	       374	bfdio.c	ELSE_5	FUNCTION_11
0x400067b	    0x64488b042528	                mov rax, qword fs:[0x28]	       374	bfdio.c	ELSE_5	FUNCTION_11
0x4000684	    0x488984249800	             mov qword [rsp + 0x98], rax	       374	bfdio.c	ELSE_5	FUNCTION_11
0x400068c	            0x31c0	                            xor eax, eax	       374	bfdio.c	ELSE_5	FUNCTION_11
0x400068e	        0xf6474710	           test byte [rdi + 0x47], 0x10 	       377	bfdio.c	ELSE_5	FUNCTION_11	IF_1
0x4000692	            0x7544	                           jne 0x40006d8	       377	bfdio.c	ELSE_5	FUNCTION_11	IF_1
0x4000694	        0x488b4718	            mov rax, qword [rdi + 0x18] 	       380	bfdio.c	ELSE_5	FUNCTION_11	IF_2
0x4000698	          0x4885c0	                           test rax, rax	       380	bfdio.c	ELSE_5	FUNCTION_11	IF_2
0x400069b	            0x7433	                            je 0x40006d0	       380	bfdio.c	ELSE_5	FUNCTION_11	IF_2
0x400069d	          0x4889e6	                            mov rsi, rsp	       383	bfdio.c	ELSE_5	FUNCTION_11	IF_3	CALL_1
0x40006a0	          0xff5030	                 call qword [rax + 0x30]	       383	bfdio.c	ELSE_5	FUNCTION_11	IF_3	CALL_1
0x40006a3	            0x85c0	                           test eax, eax	       383	bfdio.c	ELSE_5	FUNCTION_11	IF_3	CALL_1
0x40006a5	            0x7529	                           jne 0x40006d0	       383	bfdio.c	ELSE_5	FUNCTION_11	IF_3	CALL_1
0x40006a7	      0x488b442458	            mov rax, qword [rsp + 0x58] 	       386	bfdio.c	ELSE_5	FUNCTION_11
0x40006ac	        0x48894338	             mov qword [rbx + 0x38], rax	       386	bfdio.c	ELSE_5	FUNCTION_11
0x40006b0	    0x488b94249800	            mov rdx, qword [rsp + 0x98] 	       388	bfdio.c	ELSE_5	FUNCTION_11
0x40006b8	    0x644833142528	                xor rdx, qword fs:[0x28]	       388	bfdio.c	ELSE_5	FUNCTION_11
0x40006c1	            0x751b	                           jne 0x40006de	       388	bfdio.c	ELSE_5	FUNCTION_11
0x40006c3	    0x4881c4a00000	                           add rsp, 0xa0	       388	bfdio.c	ELSE_5	FUNCTION_11
0x40006ca	              0x5b	                                 pop rbx	       388	bfdio.c	ELSE_5	FUNCTION_11
0x40006cb	              0xc3	                                     ret	       388	bfdio.c	ELSE_5	FUNCTION_11
0x40006cc	         0xf1f4000	                         nop dword [rax]	       388	bfdio.c	ELSE_5	FUNCTION_11
0x40006d0	            0x31c0	                            xor eax, eax	       381	bfdio.c	ELSE_5	FUNCTION_11	IF_2
0x40006d2	            0xebdc	                           jmp 0x40006b0	       381	bfdio.c	ELSE_5	FUNCTION_11	IF_2
0x40006d4	         0xf1f4000	                         nop dword [rax]	       381	bfdio.c	ELSE_5	FUNCTION_11	IF_2
0x40006d8	        0x488b4738	            mov rax, qword [rdi + 0x38] 	       378	bfdio.c	ELSE_5	FUNCTION_11	IF_1
0x40006dc	            0xebd2	                           jmp 0x40006b0	       378	bfdio.c	ELSE_5	FUNCTION_11	IF_1
0x40006de	      0xe800000000	                          call 0x40006e3	       388	bfdio.c	ELSE_5	FUNCTION_11
bfd_bwrite	SWITCH,0:ELSE,1:DO,0:functions,0:IF,3:CALL,2:FOR,0:WHILE,0	30
0x40003d0	            0x4154	                                push r12	       207	bfdio.c	FUNCTION_6
0x40003d2	              0x55	                                push rbp	       207	bfdio.c	FUNCTION_6
0x40003d3	          0x4989f4	                            mov r12, rsi	       207	bfdio.c	FUNCTION_6
0x40003d6	              0x53	                                push rbx	       207	bfdio.c	FUNCTION_6
0x40003d7	        0x488b4218	            mov rax, qword [rdx + 0x18] 	       210	bfdio.c	FUNCTION_6	IF_1
0x40003db	          0x4889d5	                            mov rbp, rdx	       207	bfdio.c	FUNCTION_6
0x40003de	          0x4885c0	                           test rax, rax	       210	bfdio.c	FUNCTION_6	IF_1
0x40003e1	            0x743d	                            je 0x4000420	       210	bfdio.c	FUNCTION_6	IF_1
0x40003e3	          0x4889f2	                            mov rdx, rsi	       211	bfdio.c	FUNCTION_6	CALL_1
0x40003e6	          0x4889fe	                            mov rsi, rdi	       211	bfdio.c	FUNCTION_6	CALL_1
0x40003e9	          0x4889ef	                            mov rdi, rbp	       211	bfdio.c	FUNCTION_6	CALL_1
0x40003ec	          0xff5008	                    call qword [rax + 8]	       211	bfdio.c	FUNCTION_6	CALL_1
0x40003ef	        0x4883f8ff	             cmp rax, 0xffffffffffffffff	       215	bfdio.c	FUNCTION_6	IF_2
0x40003f3	          0x4889c3	                            mov rbx, rax	       211	bfdio.c	FUNCTION_6	CALL_1
0x40003f6	            0x7404	                            je 0x40003fc	       215	bfdio.c	FUNCTION_6	IF_2
0x40003f8	        0x48015d30	            add qword [rbp + 0x30], rbx 	       216	bfdio.c	FUNCTION_6	IF_2
0x40003fc	          0x4939dc	                            cmp r12, rbx	       217	bfdio.c	FUNCTION_6	IF_3
0x40003ff	            0x7415	                            je 0x4000416	       217	bfdio.c	FUNCTION_6	IF_3
0x4000401	      0xe800000000	                          call 0x4000406	       220	bfdio.c	FUNCTION_6	IF_3
0x4000406	      0xbf01000000	                              mov edi, 1	       222	bfdio.c	FUNCTION_6	IF_3	CALL_2
0x400040b	    0xc7001c000000	                   mov dword [rax], 0x1c	       220	bfdio.c	FUNCTION_6	IF_3
0x4000411	      0xe800000000	                          call 0x4000416	       222	bfdio.c	FUNCTION_6	IF_3	CALL_2
0x4000416	          0x4889d8	                            mov rax, rbx	       225	bfdio.c	FUNCTION_6
0x4000419	              0x5b	                                 pop rbx	       225	bfdio.c	FUNCTION_6
0x400041a	              0x5d	                                 pop rbp	       225	bfdio.c	FUNCTION_6
0x400041b	            0x415c	                                 pop r12	       225	bfdio.c	FUNCTION_6
0x400041d	              0xc3	                                     ret	       225	bfdio.c	FUNCTION_6
0x400041e	            0x6690	                                     nop	       225	bfdio.c	FUNCTION_6
0x4000420	            0x31db	                            xor ebx, ebx	       213	bfdio.c	FUNCTION_6	ELSE_1
0x4000422	            0xebd4	                           jmp 0x40003f8	       213	bfdio.c	FUNCTION_6	ELSE_1
bfd_mmap	SWITCH,0:ELSE,0:DO,0:functions,0:IF,1:CALL,1:FOR,0:WHILE,0	8
0x40007d0	        0x488b4718	            mov rax, qword [rdi + 0x18] 	       484	bfdio.c	FUNCTION_14	IF_1
0x40007d4	          0x4885c0	                           test rax, rax	       484	bfdio.c	FUNCTION_14	IF_1
0x40007d7	            0x7407	                            je 0x40007e0	       484	bfdio.c	FUNCTION_14	IF_1
0x40007d9	        0x488b4038	            mov rax, qword [rax + 0x38] 	       487	bfdio.c	FUNCTION_14	CALL_1
0x40007dd	            0xffe0	                                 jmp rax	       487	bfdio.c	FUNCTION_14	CALL_1
0x40007df	              0x90	                                     nop	       487	bfdio.c	FUNCTION_14	CALL_1
0x40007e0	    0x48c7c0ffffff	             mov rax, 0xffffffffffffffff	       489	bfdio.c	FUNCTION_14
0x40007e7	              0xc3	                                     ret	       489	bfdio.c	FUNCTION_14
