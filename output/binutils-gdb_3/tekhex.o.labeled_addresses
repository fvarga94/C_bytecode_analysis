tekhex_make_empty_symbol	WHILE,0:IF,1:functions,0:SWITCH,0:FOR,0:ELSE,0:CALL,1:DO,0	10
0x4000300	              0x53	                                push rbx	       914	tekhex.c	FUNCTION_21
0x4000301	      0xbe38000000	                           mov esi, 0x38	       916	tekhex.c	FUNCTION_21	CALL_1
0x4000306	          0x4889fb	                            mov rbx, rdi	       914	tekhex.c	FUNCTION_21
0x4000309	      0xe800000000	                          call 0x400030e	       916	tekhex.c	FUNCTION_21	CALL_1
0x400030e	          0x4885c0	                           test rax, rax	       919	tekhex.c	FUNCTION_21	IF_1
0x4000311	            0x740b	                            je 0x400031e	       919	tekhex.c	FUNCTION_21	IF_1
0x4000313	          0x488918	                    mov qword [rax], rbx	       921	tekhex.c	FUNCTION_21
0x4000316	    0x48c740300000	               mov qword [rax + 0x30], 0	       922	tekhex.c	FUNCTION_21
0x400031e	              0x5b	                                 pop rbx	       924	tekhex.c	FUNCTION_21
0x400031f	              0xc3	                                     ret	       924	tekhex.c	FUNCTION_21
getsym	WHILE,0:IF,2:functions,0:SWITCH,0:FOR,1:ELSE,0:CALL,1:DO,0	43
0x4000100	          0x488b06	                    mov rax, qword [rsi]	       300	tekhex.c	FUNCTION_3
0x4000103	              0x55	                                push rbp	       299	tekhex.c	FUNCTION_3
0x4000104	              0x53	                                push rbx	       299	tekhex.c	FUNCTION_3
0x4000105	        0x440fb600	                   movzx r8d, byte [rax]	       304	tekhex.c	FUNCTION_3	IF_1
0x4000109	    0x410fb6980000	                    movzx ebx, byte [r8]	       304	tekhex.c	FUNCTION_3	IF_1
0x4000111	          0x80fb63	                            cmp bl, 0x63	       304	tekhex.c	FUNCTION_3	IF_1
0x4000114	            0x7462	                            je 0x4000178	       304	tekhex.c	FUNCTION_3	IF_1
0x4000116	        0x488d6801	                      lea rbp, [rax + 1]	       307	tekhex.c	FUNCTION_3	CALL_1
0x400011a	            0x85db	                           test ebx, ebx	       309	tekhex.c	FUNCTION_3	IF_2
0x400011c	      0xb810000000	                           mov eax, 0x10	       309	tekhex.c	FUNCTION_3	IF_2
0x4000121	           0xf44d8	                          cmove ebx, eax	       309	tekhex.c	FUNCTION_3	IF_2
0x4000124	          0x4531c9	                            xor r9d, r9d	       309	tekhex.c	FUNCTION_3	IF_2
0x4000127	            0x31c0	                            xor eax, eax	       310	tekhex.c	FUNCTION_3	FOR_1
0x4000129	          0x4989ea	                            mov r10, rbp	       310	tekhex.c	FUNCTION_3	FOR_1
0x400012c	         0xf1f4000	                         nop dword [rax]	       310	tekhex.c	FUNCTION_3	FOR_1
0x4000130	          0x4939ca	                            cmp r10, rcx	       310	tekhex.c	FUNCTION_3	FOR_1
0x4000133	          0x4d89cb	                             mov r11, r9	       310	tekhex.c	FUNCTION_3	FOR_1
0x4000136	          0x4d89d0	                             mov r8, r10	       310	tekhex.c	FUNCTION_3	FOR_1
0x4000139	            0x7321	                           jae 0x400015c	       310	tekhex.c	FUNCTION_3	FOR_1
0x400013b	        0x450fb612	                  movzx r10d, byte [r10]	       311	tekhex.c	FUNCTION_3	FOR_1
0x400013f	          0x83c001	                              add eax, 1	       310	tekhex.c	FUNCTION_3	FOR_1
0x4000142	            0x39c3	                            cmp ebx, eax	       310	tekhex.c	FUNCTION_3	FOR_1
0x4000144	        0x4688140f	               mov byte [rdi + r9], r10b	       311	tekhex.c	FUNCTION_3	FOR_1
0x4000148	        0x4d8d4b01	                       lea r9, [r11 + 1]	       311	tekhex.c	FUNCTION_3	FOR_1
0x400014c	        0x4d8d5001	                       lea r10, [r8 + 1]	       311	tekhex.c	FUNCTION_3	FOR_1
0x4000150	            0x75de	                           jne 0x4000130	       310	tekhex.c	FUNCTION_3	FOR_1
0x4000152	          0x4189db	                           mov r11d, ebx	       310	tekhex.c	FUNCTION_3	FOR_1
0x4000155	            0x89d8	                            mov eax, ebx	       310	tekhex.c	FUNCTION_3	FOR_1
0x4000157	      0x4e8d441d00	                     lea r8, [rbp + r11]	       310	tekhex.c	FUNCTION_3	FOR_1
0x400015c	            0x39c3	                            cmp ebx, eax	       315	tekhex.c	FUNCTION_3
0x400015e	      0x42c6041f00	                 mov byte [rdi + r11], 0	       312	tekhex.c	FUNCTION_3
0x4000163	          0x4c8906	                     mov qword [rsi], r8	       313	tekhex.c	FUNCTION_3
0x4000166	           0xf94c0	                                 sete al	       315	tekhex.c	FUNCTION_3
0x4000169	            0x891a	                    mov dword [rdx], ebx	       314	tekhex.c	FUNCTION_3
0x400016b	           0xfb6c0	                           movzx eax, al	       315	tekhex.c	FUNCTION_3
0x400016e	              0x5b	                                 pop rbx	       316	tekhex.c	FUNCTION_3
0x400016f	              0x5d	                                 pop rbp	       316	tekhex.c	FUNCTION_3
0x4000170	              0xc3	                                     ret	       316	tekhex.c	FUNCTION_3
0x4000171	     0xf1f80000000	                         nop dword [rax]	       316	tekhex.c	FUNCTION_3
0x4000178	            0x31c0	                            xor eax, eax	       305	tekhex.c	FUNCTION_3	IF_1
0x400017a	              0x5b	                                 pop rbx	       316	tekhex.c	FUNCTION_3
0x400017b	              0x5d	                                 pop rbp	       316	tekhex.c	FUNCTION_3
0x400017c	              0xc3	                                     ret	       316	tekhex.c	FUNCTION_3
tekhex_set_arch_mach	WHILE,0:IF,0:functions,0:SWITCH,0:FOR,0:ELSE,0:CALL,1:DO,0	11
0x4000320	              0x53	                                push rbx	       690	tekhex.c	FUNCTION_14
0x4000321	            0x89f3	                            mov ebx, esi	       690	tekhex.c	FUNCTION_14
0x4000323	      0xe800000000	                          call 0x4000328	       692	tekhex.c	FUNCTION_14	CALL_1
0x4000328	            0x85db	                           test ebx, ebx	       692	tekhex.c	FUNCTION_14	CALL_1
0x400032a	           0xf94c2	                                 sete dl	       692	tekhex.c	FUNCTION_14	CALL_1
0x400032d	            0x85c0	                           test eax, eax	       692	tekhex.c	FUNCTION_14	CALL_1
0x400032f	           0xf95c0	                                setne al	       692	tekhex.c	FUNCTION_14	CALL_1
0x4000332	             0x9d0	                             or eax, edx	       692	tekhex.c	FUNCTION_14	CALL_1
0x4000334	           0xfb6c0	                           movzx eax, al	       692	tekhex.c	FUNCTION_14	CALL_1
0x4000337	              0x5b	                                 pop rbx	       694	tekhex.c	FUNCTION_14
0x4000338	              0xc3	                                     ret	       694	tekhex.c	FUNCTION_14
out	WHILE,0:IF,2:functions,0:SWITCH,0:FOR,1:ELSE,0:CALL,4:DO,0	84
0x4000350	            0x4155	                                push r13	       774	tekhex.c	FUNCTION_18
0x4000352	            0x4154	                                push r12	       774	tekhex.c	FUNCTION_18
0x4000354	          0x4989cd	                            mov r13, rcx	       781	tekhex.c	FUNCTION_18
0x4000357	              0x55	                                push rbp	       774	tekhex.c	FUNCTION_18
0x4000358	              0x53	                                push rbx	       774	tekhex.c	FUNCTION_18
0x4000359	          0x4929d5	                            sub r13, rdx	       781	tekhex.c	FUNCTION_18
0x400035c	          0x4889d5	                            mov rbp, rdx	       774	tekhex.c	FUNCTION_18
0x400035f	          0x4989fc	                            mov r12, rdi	       774	tekhex.c	FUNCTION_18
0x4000362	          0x4889cb	                            mov rbx, rcx	       774	tekhex.c	FUNCTION_18
0x4000365	        0x4883ec18	                           sub rsp, 0x18	       774	tekhex.c	FUNCTION_18
0x4000369	    0x64488b042528	                mov rax, qword fs:[0x28]	       774	tekhex.c	FUNCTION_18
0x4000372	      0x4889442408	                mov qword [rsp + 8], rax	       774	tekhex.c	FUNCTION_18
0x4000377	            0x31c0	                            xor eax, eax	       774	tekhex.c	FUNCTION_18
0x4000379	        0x498d4505	                      lea rax, [r13 + 5]	       781	tekhex.c	FUNCTION_18
0x400037d	        0xc6042425	                    mov byte [rsp], 0x25	       780	tekhex.c	FUNCTION_18
0x4000381	      0x4088742403	                 mov byte [rsp + 3], sil	       782	tekhex.c	FUNCTION_18
0x4000386	          0x4889c2	                            mov rdx, rax	       781	tekhex.c	FUNCTION_18
0x4000389	        0x48c1f804	                              sar rax, 4	       781	tekhex.c	FUNCTION_18
0x400038d	          0x83e20f	                            and edx, 0xf	       781	tekhex.c	FUNCTION_18
0x4000390	          0x83e00f	                            and eax, 0xf	       781	tekhex.c	FUNCTION_18
0x4000393	          0x4839e9	                            cmp rcx, rbp	       784	tekhex.c	FUNCTION_18	FOR_1
0x4000396	     0xfb6ba000000	                   movzx edi, byte [rdx]	       781	tekhex.c	FUNCTION_18
0x400039d	    0x440fb6800000	                   movzx r8d, byte [rax]	       781	tekhex.c	FUNCTION_18
0x40003a5	      0x40887c2402	                 mov byte [rsp + 2], dil	       781	tekhex.c	FUNCTION_18
0x40003aa	      0x4488442401	                 mov byte [rsp + 1], r8b	       781	tekhex.c	FUNCTION_18
0x40003af	     0xf86ac000000	                           jbe 0x4000461	       784	tekhex.c	FUNCTION_18	FOR_1
0x40003b5	          0x4889e8	                            mov rax, rbp	       784	tekhex.c	FUNCTION_18	FOR_1
0x40003b8	            0x31d2	                            xor edx, edx	       784	tekhex.c	FUNCTION_18	FOR_1
0x40003ba	    0x660f1f440000	                    nop word [rax + rax]	       784	tekhex.c	FUNCTION_18	FOR_1
0x40003c0	           0xfb608	                   movzx ecx, byte [rax]	       785	tekhex.c	FUNCTION_18	FOR_1
0x40003c3	        0x4883c001	                              add rax, 1	       784	tekhex.c	FUNCTION_18	FOR_1
0x40003c7	     0xfbe89000000	                   movsx ecx, byte [rcx]	       785	tekhex.c	FUNCTION_18	FOR_1
0x40003ce	             0x1ca	                            add edx, ecx	       785	tekhex.c	FUNCTION_18	FOR_1
0x40003d0	          0x4839c3	                            cmp rbx, rax	       784	tekhex.c	FUNCTION_18	FOR_1
0x40003d3	            0x75eb	                           jne 0x40003c0	       784	tekhex.c	FUNCTION_18	FOR_1
0x40003d5	    0x410fbe800000	                    movsx eax, byte [r8]	       787	tekhex.c	FUNCTION_18
0x40003dd	        0x400fb6f6	                          movzx esi, sil	       789	tekhex.c	FUNCTION_18
0x40003e1	             0x1c2	                            add edx, eax	       787	tekhex.c	FUNCTION_18
0x40003e3	     0xfbe87000000	                   movsx eax, byte [rdi]	       788	tekhex.c	FUNCTION_18
0x40003ea	          0x4889e7	                            mov rdi, rsp	       791	tekhex.c	FUNCTION_18	IF_1	CALL_1
0x40003ed	             0x1c2	                            add edx, eax	       788	tekhex.c	FUNCTION_18
0x40003ef	     0xfbe86000000	                   movsx eax, byte [rsi]	       789	tekhex.c	FUNCTION_18
0x40003f6	      0xbe06000000	                              mov esi, 6	       791	tekhex.c	FUNCTION_18	IF_1	CALL_1
0x40003fb	             0x1c2	                            add edx, eax	       789	tekhex.c	FUNCTION_18
0x40003fd	            0x89d0	                            mov eax, edx	       790	tekhex.c	FUNCTION_18
0x40003ff	          0xc1fa04	                              sar edx, 4	       790	tekhex.c	FUNCTION_18
0x4000402	          0x83e00f	                            and eax, 0xf	       790	tekhex.c	FUNCTION_18
0x4000405	          0x83e20f	                            and edx, 0xf	       790	tekhex.c	FUNCTION_18
0x4000408	     0xfb680000000	                   movzx eax, byte [rax]	       790	tekhex.c	FUNCTION_18
0x400040f	        0x88442405	                  mov byte [rsp + 5], al	       790	tekhex.c	FUNCTION_18
0x4000413	     0xfb682000000	                   movzx eax, byte [rdx]	       790	tekhex.c	FUNCTION_18
0x400041a	          0x4c89e2	                            mov rdx, r12	       791	tekhex.c	FUNCTION_18	IF_1	CALL_1
0x400041d	        0x88442404	                  mov byte [rsp + 4], al	       790	tekhex.c	FUNCTION_18
0x4000421	      0xe800000000	                          call 0x4000426	       791	tekhex.c	FUNCTION_18	IF_1	CALL_1
0x4000426	        0x4883f806	                              cmp rax, 6	       791	tekhex.c	FUNCTION_18	IF_1	CALL_1
0x400042a	            0x753c	                           jne 0x4000468	       791	tekhex.c	FUNCTION_18	IF_1	CALL_1
0x400042c	        0x4983c501	                              add r13, 1	       794	tekhex.c	FUNCTION_18
0x4000430	          0xc6030a	                     mov byte [rbx], 0xa	       793	tekhex.c	FUNCTION_18
0x4000433	          0x4c89e2	                            mov rdx, r12	       795	tekhex.c	FUNCTION_18	IF_2	CALL_3
0x4000436	          0x4c89ee	                            mov rsi, r13	       795	tekhex.c	FUNCTION_18	IF_2	CALL_3
0x4000439	          0x4889ef	                            mov rdi, rbp	       795	tekhex.c	FUNCTION_18	IF_2	CALL_3
0x400043c	      0xe800000000	                          call 0x4000441	       795	tekhex.c	FUNCTION_18	IF_2	CALL_3
0x4000441	          0x4939c5	                            cmp r13, rax	       795	tekhex.c	FUNCTION_18	IF_2	CALL_3
0x4000444	            0x753b	                           jne 0x4000481	       795	tekhex.c	FUNCTION_18	IF_2	CALL_3
0x4000446	      0x488b442408	                mov rax, qword [rsp + 8]	       797	tekhex.c	FUNCTION_18
0x400044b	    0x644833042528	                xor rax, qword fs:[0x28]	       797	tekhex.c	FUNCTION_18
0x4000454	            0x7526	                           jne 0x400047c	       797	tekhex.c	FUNCTION_18
0x4000456	        0x4883c418	                           add rsp, 0x18	       797	tekhex.c	FUNCTION_18
0x400045a	              0x5b	                                 pop rbx	       797	tekhex.c	FUNCTION_18
0x400045b	              0x5d	                                 pop rbp	       797	tekhex.c	FUNCTION_18
0x400045c	            0x415c	                                 pop r12	       797	tekhex.c	FUNCTION_18
0x400045e	            0x415d	                                 pop r13	       797	tekhex.c	FUNCTION_18
0x4000460	              0xc3	                                     ret	       797	tekhex.c	FUNCTION_18
0x4000461	            0x31d2	                            xor edx, edx	       775	tekhex.c	FUNCTION_18
0x4000463	      0xe96dffffff	                           jmp 0x40003d5	       775	tekhex.c	FUNCTION_18
0x4000468	      0xba00000000	                              mov edx, 0	       792	tekhex.c	FUNCTION_18	CALL_2
0x400046d	      0xbe18030000	                          mov esi, 0x318	       792	tekhex.c	FUNCTION_18	CALL_2
0x4000472	      0xbf00000000	                              mov edi, 0	       792	tekhex.c	FUNCTION_18	CALL_2
0x4000477	      0xe800000000	                          call 0x400047c	       792	tekhex.c	FUNCTION_18	CALL_2
0x400047c	      0xe800000000	                          call 0x4000481	       797	tekhex.c	FUNCTION_18
0x4000481	      0xba00000000	                              mov edx, 0	       796	tekhex.c	FUNCTION_18	CALL_4
0x4000486	      0xbe1c030000	                          mov esi, 0x31c	       796	tekhex.c	FUNCTION_18	CALL_4
0x400048b	      0xbf00000000	                              mov edi, 0	       796	tekhex.c	FUNCTION_18	CALL_4
0x4000490	      0xe800000000	                          call 0x4000495	       796	tekhex.c	FUNCTION_18	CALL_4
writevalue	WHILE,1:IF,1:functions,0:SWITCH,0:FOR,1:ELSE,0:CALL,0:DO,0	40
0x40001d0	          0x4c8b07	                     mov r8, qword [rdi]	       718	tekhex.c	FUNCTION_16
0x40001d3	      0xb91c000000	                           mov ecx, 0x1c	       722	tekhex.c	FUNCTION_16	FOR_1
0x40001d8	      0xb808000000	                              mov eax, 8	       722	tekhex.c	FUNCTION_16	FOR_1
0x40001dd	           0xf1f00	                         nop dword [rax]	       722	tekhex.c	FUNCTION_16	FOR_1
0x40001e0	          0x4889f2	                            mov rdx, rsi	       724	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x40001e3	          0x48d3ea	                             shr rdx, cl	       724	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x40001e6	          0x83e20f	                            and edx, 0xf	       724	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x40001e9	            0x7525	                           jne 0x4000210	       724	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x40001eb	          0x83e801	                              sub eax, 1	       722	tekhex.c	FUNCTION_16	FOR_1
0x40001ee	          0x83e904	                              sub ecx, 4	       722	tekhex.c	FUNCTION_16	FOR_1
0x40001f1	          0x83f801	                              cmp eax, 1	       722	tekhex.c	FUNCTION_16	FOR_1
0x40001f4	            0x75ea	                           jne 0x40001e0	       722	tekhex.c	FUNCTION_16	FOR_1
0x40001f6	        0x41c60031	                     mov byte [r8], 0x31	       738	tekhex.c	FUNCTION_16
0x40001fa	      0x41c6400130	                 mov byte [r8 + 1], 0x30	       739	tekhex.c	FUNCTION_16
0x40001ff	        0x4983c002	                               add r8, 2	       739	tekhex.c	FUNCTION_16
0x4000203	          0x4c8907	                     mov qword [rdi], r8	       739	tekhex.c	FUNCTION_16
0x4000206	              0xc3	                                     ret	       739	tekhex.c	FUNCTION_16
0x4000207	    0x660f1f840000	                    nop word [rax + rax]	       739	tekhex.c	FUNCTION_16
0x4000210	          0x8d5030	                   lea edx, [rax + 0x30]	       726	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x4000213	        0x4d8d5001	                       lea r10, [r8 + 1]	       726	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x4000217	          0x4189c9	                            mov r9d, ecx	       726	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x400021a	          0x418810	                       mov byte [r8], dl	       726	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x400021d	    0x8d1485000000	                        lea edx, [rax*4]	       726	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x4000224	          0x4d89d0	                             mov r8, r10	       726	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x4000227	          0x4129d1	                            sub r9d, edx	       726	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x400022a	    0x660f1f440000	                    nop word [rax + rax]	       726	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x4000230	          0x4889f2	                            mov rdx, rsi	       729	tekhex.c	FUNCTION_16	FOR_1	IF_1	WHILE_1
0x4000233	        0x4983c001	                               add r8, 1	       729	tekhex.c	FUNCTION_16	FOR_1	IF_1	WHILE_1
0x4000237	          0x48d3ea	                             shr rdx, cl	       729	tekhex.c	FUNCTION_16	FOR_1	IF_1	WHILE_1
0x400023a	          0x83e904	                              sub ecx, 4	       730	tekhex.c	FUNCTION_16	FOR_1	IF_1	WHILE_1
0x400023d	          0x83e20f	                            and edx, 0xf	       729	tekhex.c	FUNCTION_16	FOR_1	IF_1	WHILE_1
0x4000240	     0xfb692000000	                   movzx edx, byte [rdx]	       729	tekhex.c	FUNCTION_16	FOR_1	IF_1	WHILE_1
0x4000247	        0x418850ff	                   mov byte [r8 - 1], dl	       729	tekhex.c	FUNCTION_16	FOR_1	IF_1	WHILE_1
0x400024b	          0x4439c9	                            cmp ecx, r9d	       727	tekhex.c	FUNCTION_16	FOR_1	IF_1	WHILE_1
0x400024e	            0x75e0	                           jne 0x4000230	       727	tekhex.c	FUNCTION_16	FOR_1	IF_1	WHILE_1
0x4000250	          0x83e801	                              sub eax, 1	       733	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x4000253	            0x4898	                                    cdqe	       733	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x4000255	      0x498d440201	                lea rax, [r10 + rax + 1]	       733	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x400025a	          0x488907	                    mov qword [rdi], rax	       733	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x400025d	              0xc3	                                     ret	       734	tekhex.c	FUNCTION_16	FOR_1	IF_1
find_chunk	WHILE,1:IF,2:functions,0:SWITCH,0:FOR,0:ELSE,0:CALL,1:DO,0	41
0x4000270	    0x488b87f80000	            mov rax, qword [rdi + 0xf8] 	       321	tekhex.c	FUNCTION_4
0x4000277	            0x4154	                                push r12	       320	tekhex.c	FUNCTION_4
0x4000279	    0x4881e600e0ff	             and rsi, 0xffffffffffffe000	       323	tekhex.c	FUNCTION_4
0x4000280	              0x55	                                push rbp	       320	tekhex.c	FUNCTION_4
0x4000281	              0x53	                                push rbx	       320	tekhex.c	FUNCTION_4
0x4000282	          0x4889f5	                            mov rbp, rsi	       323	tekhex.c	FUNCTION_4
0x4000285	        0x488b4018	            mov rax, qword [rax + 0x18] 	       321	tekhex.c	FUNCTION_4
0x4000289	          0x4885c0	                           test rax, rax	       324	tekhex.c	FUNCTION_4	WHILE_1
0x400028c	            0x750e	                           jne 0x400029c	       324	tekhex.c	FUNCTION_4	WHILE_1
0x400028e	            0xeb20	                           jmp 0x40002b0	       324	tekhex.c	FUNCTION_4	WHILE_1
0x4000290	    0x488b80082100	          mov rax, qword [rax + 0x2108] 	       325	tekhex.c	FUNCTION_4	WHILE_1
0x4000297	          0x4885c0	                           test rax, rax	       324	tekhex.c	FUNCTION_4	WHILE_1
0x400029a	            0x7414	                            je 0x40002b0	       324	tekhex.c	FUNCTION_4	WHILE_1
0x400029c	    0x483ba8002100	          cmp rbp, qword [rax + 0x2100] 	       324	tekhex.c	FUNCTION_4	WHILE_1
0x40002a3	            0x75eb	                           jne 0x4000290	       324	tekhex.c	FUNCTION_4	WHILE_1
0x40002a5	          0x4889c3	                            mov rbx, rax	       324	tekhex.c	FUNCTION_4	WHILE_1
0x40002a8	          0x4889d8	                            mov rax, rbx	       341	tekhex.c	FUNCTION_4
0x40002ab	              0x5b	                                 pop rbx	       341	tekhex.c	FUNCTION_4
0x40002ac	              0x5d	                                 pop rbp	       341	tekhex.c	FUNCTION_4
0x40002ad	            0x415c	                                 pop r12	       341	tekhex.c	FUNCTION_4
0x40002af	              0xc3	                                     ret	       341	tekhex.c	FUNCTION_4
0x40002b0	            0x31db	                            xor ebx, ebx	       341	tekhex.c	FUNCTION_4
0x40002b2	            0x85d2	                           test edx, edx	       327	tekhex.c	FUNCTION_4	IF_1
0x40002b4	            0x74f2	                            je 0x40002a8	       327	tekhex.c	FUNCTION_4	IF_1
0x40002b6	      0xbe10210000	                         mov esi, 0x2110	       330	tekhex.c	FUNCTION_4	IF_1
0x40002bb	          0x4989fc	                            mov r12, rdi	       330	tekhex.c	FUNCTION_4	IF_1
0x40002be	      0xe800000000	                          call 0x40002c3	       330	tekhex.c	FUNCTION_4	IF_1
0x40002c3	          0x4885c0	                           test rax, rax	       333	tekhex.c	FUNCTION_4	IF_1	IF_2
0x40002c6	            0x74e0	                            je 0x40002a8	       333	tekhex.c	FUNCTION_4	IF_1	IF_2
0x40002c8	    0x498b9424f800	            mov rdx, qword [r12 + 0xf8] 	       336	tekhex.c	FUNCTION_4	IF_1
0x40002d0	          0x4889c3	                            mov rbx, rax	       338	tekhex.c	FUNCTION_4	IF_1
0x40002d3	        0x488b5218	            mov rdx, qword [rdx + 0x18] 	       336	tekhex.c	FUNCTION_4	IF_1
0x40002d7	    0x4889a8002100	          mov qword [rax + 0x2100], rbp 	       337	tekhex.c	FUNCTION_4	IF_1
0x40002de	    0x488990082100	          mov qword [rax + 0x2108], rdx 	       336	tekhex.c	FUNCTION_4	IF_1
0x40002e5	    0x498b9424f800	            mov rdx, qword [r12 + 0xf8] 	       338	tekhex.c	FUNCTION_4	IF_1
0x40002ed	        0x48894218	             mov qword [rdx + 0x18], rax	       338	tekhex.c	FUNCTION_4	IF_1
0x40002f1	          0x4889d8	                            mov rax, rbx	       341	tekhex.c	FUNCTION_4
0x40002f4	              0x5b	                                 pop rbx	       341	tekhex.c	FUNCTION_4
0x40002f5	              0x5d	                                 pop rbp	       341	tekhex.c	FUNCTION_4
0x40002f6	            0x415c	                                 pop r12	       341	tekhex.c	FUNCTION_4
0x40002f8	              0xc3	                                     ret	       341	tekhex.c	FUNCTION_4
tekhex_get_section_contents	WHILE,0:IF,1:functions,0:SWITCH,0:FOR,0:ELSE,0:CALL,1:DO,0	12
0x4000b50	        0xf6462003	               test byte [rsi + 0x20], 3	       677	tekhex.c	FUNCTION_13	IF_1
0x4000b54	            0x750a	                           jne 0x4000b60	       677	tekhex.c	FUNCTION_13	IF_1
0x4000b56	            0x31c0	                            xor eax, eax	       677	tekhex.c	FUNCTION_13	IF_1
0x4000b58	              0xc3	                                     ret	       677	tekhex.c	FUNCTION_13	IF_1
0x4000b59	     0xf1f80000000	                         nop dword [rax]	       677	tekhex.c	FUNCTION_13	IF_1
0x4000b60	        0x4883ec08	                              sub rsp, 8	       676	tekhex.c	FUNCTION_13
0x4000b64	        0x4883c628	                           add rsi, 0x28	       676	tekhex.c	FUNCTION_13
0x4000b68	    0x41b901000000	                              mov r9d, 1	       679	tekhex.c	FUNCTION_13	IF_1	CALL_1
0x4000b6e	      0xe86dfeffff	   call sym.move_section_contents.isra.0	       679	tekhex.c	FUNCTION_13	IF_1	CALL_1
0x4000b73	      0xb801000000	                              mov eax, 1	       680	tekhex.c	FUNCTION_13	IF_1
0x4000b78	        0x4883c408	                              add rsp, 8	       684	tekhex.c	FUNCTION_13
0x4000b7c	              0xc3	                                     ret	       684	tekhex.c	FUNCTION_13
tekhex_sizeof_headers	WHILE,0:IF,0:functions,0:SWITCH,0:FOR,0:ELSE,0:CALL,0:DO,0	2
0x4000260	            0x31c0	                            xor eax, eax	       910	tekhex.c	FUNCTION_20
0x4000262	              0xc3	                                     ret	       910	tekhex.c	FUNCTION_20
tekhex_get_symbol_info	WHILE,0:IF,0:functions,0:SWITCH,0:FOR,0:ELSE,0:CALL,1:DO,0	3
0x4000340	          0x4889f7	                            mov rdi, rsi	       930	tekhex.c	FUNCTION_22
0x4000343	          0x4889d6	                            mov rsi, rdx	       931	tekhex.c	FUNCTION_22	CALL_1
0x4000346	      0xe900000000	                           jmp 0x400034b	       931	tekhex.c	FUNCTION_22	CALL_1
writesym	WHILE,1:IF,2:functions,0:SWITCH,0:FOR,0:ELSE,2:CALL,1:DO,0	46
0x40004a0	          0x4885f6	                           test rsi, rsi	       747	tekhex.c	FUNCTION_17	CALL_1
0x40004a3	            0x4154	                                push r12	       745	tekhex.c	FUNCTION_17
0x40004a5	              0x55	                                push rbp	       745	tekhex.c	FUNCTION_17
0x40004a6	          0x4889fd	                            mov rbp, rdi	       745	tekhex.c	FUNCTION_17
0x40004a9	              0x53	                                push rbx	       745	tekhex.c	FUNCTION_17
0x40004aa	          0x4c8b27	                    mov r12, qword [rdi]	       746	tekhex.c	FUNCTION_17
0x40004ad	            0x7471	                            je 0x4000520	       747	tekhex.c	FUNCTION_17	CALL_1
0x40004af	          0x4889f7	                            mov rdi, rsi	       747	tekhex.c	FUNCTION_17	CALL_1
0x40004b2	          0x4889f3	                            mov rbx, rsi	       747	tekhex.c	FUNCTION_17	CALL_1
0x40004b5	      0xe800000000	                          call 0x40004ba	       747	tekhex.c	FUNCTION_17	CALL_1
0x40004ba	          0x83f80f	                            cmp eax, 0xf	       749	tekhex.c	FUNCTION_17	IF_1
0x40004bd	            0x7e41	                           jle 0x4000500	       749	tekhex.c	FUNCTION_17	IF_1
0x40004bf	      0x498d7c2401	                      lea rdi, [r12 + 1]	       751	tekhex.c	FUNCTION_17	IF_1
0x40004c4	      0x41c6042430	                    mov byte [r12], 0x30	       751	tekhex.c	FUNCTION_17	IF_1
0x40004c9	      0xb80f000000	                            mov eax, 0xf	       751	tekhex.c	FUNCTION_17	IF_1
0x40004ce	            0x89c1	                            mov ecx, eax	       751	tekhex.c	FUNCTION_17	IF_1
0x40004d0	          0x4889f8	                            mov rax, rdi	       745	tekhex.c	FUNCTION_17
0x40004d3	        0x4883c101	                              add rcx, 1	       745	tekhex.c	FUNCTION_17
0x40004d7	        0x488d340b	                    lea rsi, [rbx + rcx]	       745	tekhex.c	FUNCTION_17
0x40004db	       0xf1f440000	                   nop dword [rax + rax]	       745	tekhex.c	FUNCTION_17
0x40004e0	        0x4883c301	                              add rbx, 1	       767	tekhex.c	FUNCTION_17	WHILE_1
0x40004e4	         0xfb653ff	               movzx edx, byte [rbx - 1]	       767	tekhex.c	FUNCTION_17	WHILE_1
0x40004e8	        0x4883c001	                              add rax, 1	       767	tekhex.c	FUNCTION_17	WHILE_1
0x40004ec	          0x4839de	                            cmp rsi, rbx	       766	tekhex.c	FUNCTION_17	WHILE_1
0x40004ef	          0x8850ff	                  mov byte [rax - 1], dl	       767	tekhex.c	FUNCTION_17	WHILE_1
0x40004f2	            0x75ec	                           jne 0x40004e0	       766	tekhex.c	FUNCTION_17	WHILE_1
0x40004f4	          0x4801f9	                            add rcx, rdi	       769	tekhex.c	FUNCTION_17
0x40004f7	        0x48894d00	                    mov qword [rbp], rcx	       769	tekhex.c	FUNCTION_17
0x40004fb	              0x5b	                                 pop rbx	       770	tekhex.c	FUNCTION_17
0x40004fc	              0x5d	                                 pop rbp	       770	tekhex.c	FUNCTION_17
0x40004fd	            0x415c	                                 pop r12	       770	tekhex.c	FUNCTION_17
0x40004ff	              0xc3	                                     ret	       770	tekhex.c	FUNCTION_17
0x4000500	            0x85c0	                           test eax, eax	       756	tekhex.c	FUNCTION_17	ELSE_1	IF_2
0x4000502	            0x741c	                            je 0x4000520	       756	tekhex.c	FUNCTION_17	ELSE_1	IF_2
0x4000504	          0x4863d0	                         movsxd rdx, eax	       763	tekhex.c	FUNCTION_17	ELSE_1	ELSE_2
0x4000507	      0x498d7c2401	                      lea rdi, [r12 + 1]	       763	tekhex.c	FUNCTION_17	ELSE_1	ELSE_2
0x400050c	          0x83e801	                              sub eax, 1	       763	tekhex.c	FUNCTION_17	ELSE_1	ELSE_2
0x400050f	     0xfb692000000	                   movzx edx, byte [rdx]	       763	tekhex.c	FUNCTION_17	ELSE_1	ELSE_2
0x4000516	        0x41881424	                      mov byte [r12], dl	       763	tekhex.c	FUNCTION_17	ELSE_1	ELSE_2
0x400051a	            0xebb2	                           jmp 0x40004ce	       763	tekhex.c	FUNCTION_17	ELSE_1	ELSE_2
0x400051c	         0xf1f4000	                         nop dword [rax]	       763	tekhex.c	FUNCTION_17	ELSE_1	ELSE_2
0x4000520	      0x498d7c2401	                      lea rdi, [r12 + 1]	       758	tekhex.c	FUNCTION_17	ELSE_1	IF_2
0x4000525	      0x41c6042431	                    mov byte [r12], 0x31	       758	tekhex.c	FUNCTION_17	ELSE_1	IF_2
0x400052a	            0x31c0	                            xor eax, eax	       758	tekhex.c	FUNCTION_17	ELSE_1	IF_2
0x400052c	      0xbb00000000	                              mov ebx, 0	       759	tekhex.c	FUNCTION_17	ELSE_1	IF_2
0x4000531	            0xeb9b	                           jmp 0x40004ce	       759	tekhex.c	FUNCTION_17	ELSE_1	IF_2
first_phase	WHILE,2:IF,25:functions,0:SWITCH,2:FOR,0:ELSE,5:CALL,18:DO,0	274
0x4000590	            0x4157	                                push r15	       361	tekhex.c	FUNCTION_6
0x4000592	            0x4156	                                push r14	       361	tekhex.c	FUNCTION_6
0x4000594	            0x4155	                                push r13	       361	tekhex.c	FUNCTION_6
0x4000596	            0x4154	                                push r12	       361	tekhex.c	FUNCTION_6
0x4000598	              0x55	                                push rbp	       361	tekhex.c	FUNCTION_6
0x4000599	              0x53	                                push rbx	       361	tekhex.c	FUNCTION_6
0x400059a	          0x4889fd	                            mov rbp, rdi	       361	tekhex.c	FUNCTION_6
0x400059d	          0x4889cb	                            mov rbx, rcx	       361	tekhex.c	FUNCTION_6
0x40005a0	        0x4883ec58	                           sub rsp, 0x58	       361	tekhex.c	FUNCTION_6
0x40005a4	    0x64488b042528	                mov rax, qword fs:[0x28]	       361	tekhex.c	FUNCTION_6
0x40005ad	      0x4889442448	             mov qword [rsp + 0x48], rax	       361	tekhex.c	FUNCTION_6
0x40005b2	            0x31c0	                            xor eax, eax	       361	tekhex.c	FUNCTION_6
0x40005b4	          0x83fe33	                           cmp esi, 0x33	       367	tekhex.c	FUNCTION_6	SWITCH_1
0x40005b7	      0x4889542418	             mov qword [rsp + 0x18], rdx	       361	tekhex.c	FUNCTION_6
0x40005bc	     0xf84e6000000	                            je 0x40006a8	       367	tekhex.c	FUNCTION_6	SWITCH_1
0x40005c2	          0x83fe36	                           cmp esi, 0x36	       367	tekhex.c	FUNCTION_6	SWITCH_1
0x40005c5	            0x7429	                            je 0x40005f0	       367	tekhex.c	FUNCTION_6	SWITCH_1
0x40005c7	      0xb801000000	                              mov eax, 1	       505	tekhex.c	FUNCTION_6
0x40005cc	      0x488b5c2448	            mov rbx, qword [rsp + 0x48] 	       506	tekhex.c	FUNCTION_6
0x40005d1	    0x6448331c2528	                xor rbx, qword fs:[0x28]	       506	tekhex.c	FUNCTION_6
0x40005da	     0xf85f7030000	                           jne 0x40009d7	       506	tekhex.c	FUNCTION_6
0x40005e0	        0x4883c458	                           add rsp, 0x58	       506	tekhex.c	FUNCTION_6
0x40005e4	              0x5b	                                 pop rbx	       506	tekhex.c	FUNCTION_6
0x40005e5	              0x5d	                                 pop rbp	       506	tekhex.c	FUNCTION_6
0x40005e6	            0x415c	                                 pop r12	       506	tekhex.c	FUNCTION_6
0x40005e8	            0x415d	                                 pop r13	       506	tekhex.c	FUNCTION_6
0x40005ea	            0x415e	                                 pop r14	       506	tekhex.c	FUNCTION_6
0x40005ec	            0x415f	                                 pop r15	       506	tekhex.c	FUNCTION_6
0x40005ee	              0xc3	                                     ret	       506	tekhex.c	FUNCTION_6
0x40005ef	              0x90	                                     nop	       506	tekhex.c	FUNCTION_6
0x40005f0	      0x488d742428	                   lea rsi, [rsp + 0x28]	       374	tekhex.c	FUNCTION_6	SWITCH_1	IF_1	CALL_1
0x40005f5	      0x488d7c2418	                   lea rdi, [rsp + 0x18]	       374	tekhex.c	FUNCTION_6	SWITCH_1	IF_1	CALL_1
0x40005fa	          0x4889ca	                            mov rdx, rcx	       374	tekhex.c	FUNCTION_6	SWITCH_1	IF_1	CALL_1
0x40005fd	      0xe83efaffff	                       call sym.getvalue	       374	tekhex.c	FUNCTION_6	SWITCH_1	IF_1	CALL_1
0x4000602	            0x85c0	                           test eax, eax	       374	tekhex.c	FUNCTION_6	SWITCH_1	IF_1	CALL_1
0x4000604	            0x74c6	                            je 0x40005cc	       374	tekhex.c	FUNCTION_6	SWITCH_1	IF_1	CALL_1
0x4000606	      0x488b542418	            mov rdx, qword [rsp + 0x18] 	       377	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x400060b	           0xfb602	                   movzx eax, byte [rdx]	       377	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x400060e	          0x4889d1	                            mov rcx, rdx	       377	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x4000611	            0x84c0	                             test al, al	       377	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x4000613	            0x74b2	                            je 0x40005c7	       377	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x4000615	        0x4883eb01	                              sub rbx, 1	       377	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x4000619	          0x4839d3	                            cmp rbx, rdx	       377	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x400061c	            0x76a9	                           jbe 0x40005c7	       377	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x400061e	      0x4c8b642428	            mov r12, qword [rsp + 0x28] 	       377	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x4000623	            0xeb30	                           jmp 0x4000655	       377	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x4000625	           0xf1f00	                         nop dword [rax]	       377	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x4000628	        0x488d4a02	                      lea rcx, [rdx + 2]	       380	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x400062c	          0x4889d0	                            mov rax, rdx	       380	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x400062f	        0x4983c401	                              add r12, 1	       381	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x4000633	      0x4c89642428	             mov qword [rsp + 0x28], r12	       381	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x4000638	      0x48894c2418	             mov qword [rsp + 0x18], rcx	       380	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x400063d	         0xfb64002	               movzx eax, byte [rax + 2]	       377	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x4000641	          0x4889ca	                            mov rdx, rcx	       380	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x4000644	            0x84c0	                             test al, al	       377	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x4000646	     0xf847bffffff	                            je 0x40005c7	       377	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x400064c	          0x4839cb	                            cmp rbx, rcx	       377	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x400064f	     0xf8672ffffff	                           jbe 0x40005c7	       377	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x4000655	         0xfb64901	               movzx ecx, byte [rcx + 1]	       379	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1	CALL_2
0x4000659	     0xfb680000000	                   movzx eax, byte [rax]	       379	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1	CALL_2
0x4000660	     0xfb689000000	                   movzx ecx, byte [rcx]	       379	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1	CALL_2
0x4000667	          0xc1e004	                              shl eax, 4	       379	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1	CALL_2
0x400066a	             0x1c8	                            add eax, ecx	       346	tekhex.c	FUNCTION_5	IF_1
0x400066c	          0x4189c5	                           mov r13d, eax	       346	tekhex.c	FUNCTION_5	IF_1
0x400066f	            0x74b7	                            je 0x4000628	       346	tekhex.c	FUNCTION_5	IF_1
0x4000671	      0xba01000000	                              mov edx, 1	       349	tekhex.c	FUNCTION_5	IF_1	CALL_1
0x4000676	          0x4c89e6	                            mov rsi, r12	       349	tekhex.c	FUNCTION_5	IF_1	CALL_1
0x4000679	          0x4889ef	                            mov rdi, rbp	       349	tekhex.c	FUNCTION_5	IF_1	CALL_1
0x400067c	    0x4181e4ff1f00	                        and r12d, 0x1fff	       351	tekhex.c	FUNCTION_5	IF_1
0x4000683	      0xe8e8fbffff	                     call sym.find_chunk	       349	tekhex.c	FUNCTION_5	IF_1	CALL_1
0x4000688	        0x46882c20	              mov byte [rax + r12], r13b	       351	tekhex.c	FUNCTION_5	IF_1
0x400068c	        0x49c1ec05	                              shr r12, 5	       352	tekhex.c	FUNCTION_5	IF_1
0x4000690	      0x488b542418	            mov rdx, qword [rsp + 0x18] 	       352	tekhex.c	FUNCTION_5	IF_1
0x4000695	    0x42c684200020	       mov byte [rax + r12 + 0x2000], 1 	       352	tekhex.c	FUNCTION_5	IF_1
0x400069e	      0x4c8b642428	            mov r12, qword [rsp + 0x28] 	       352	tekhex.c	FUNCTION_5	IF_1
0x40006a3	            0xeb83	                           jmp 0x4000628	       352	tekhex.c	FUNCTION_5	IF_1
0x40006a5	           0xf1f00	                         nop dword [rax]	       352	tekhex.c	FUNCTION_5	IF_1
0x40006a8	      0x488d542424	                   lea rdx, [rsp + 0x24]	       388	tekhex.c	FUNCTION_6	SWITCH_1	IF_2	CALL_3
0x40006ad	      0x488d742418	                   lea rsi, [rsp + 0x18]	       388	tekhex.c	FUNCTION_6	SWITCH_1	IF_2	CALL_3
0x40006b2	      0x488d7c2430	                   lea rdi, [rsp + 0x30]	       388	tekhex.c	FUNCTION_6	SWITCH_1	IF_2	CALL_3
0x40006b7	      0xe844faffff	                         call sym.getsym	       388	tekhex.c	FUNCTION_6	SWITCH_1	IF_2	CALL_3
0x40006bc	            0x85c0	                           test eax, eax	       388	tekhex.c	FUNCTION_6	SWITCH_1	IF_2	CALL_3
0x40006be	            0x7510	                           jne 0x40006d0	       388	tekhex.c	FUNCTION_6	SWITCH_1	IF_2	CALL_3
0x40006c0	            0x31c0	                            xor eax, eax	       389	tekhex.c	FUNCTION_6	SWITCH_1	IF_2
0x40006c2	      0xe905ffffff	                           jmp 0x40005cc	       389	tekhex.c	FUNCTION_6	SWITCH_1	IF_2
0x40006c7	    0x660f1f840000	                    nop word [rax + rax]	       389	tekhex.c	FUNCTION_6	SWITCH_1	IF_2
0x40006d0	      0x488d742430	                   lea rsi, [rsp + 0x30]	       390	tekhex.c	FUNCTION_6	SWITCH_1	CALL_4
0x40006d5	          0x4889ef	                            mov rdi, rbp	       390	tekhex.c	FUNCTION_6	SWITCH_1	CALL_4
0x40006d8	      0xe800000000	                          call 0x40006dd	       390	tekhex.c	FUNCTION_6	SWITCH_1	CALL_4
0x40006dd	          0x4885c0	                           test rax, rax	       391	tekhex.c	FUNCTION_6	SWITCH_1	IF_3
0x40006e0	          0x4989c4	                            mov r12, rax	       390	tekhex.c	FUNCTION_6	SWITCH_1	CALL_4
0x40006e3	     0xf8478020000	                            je 0x4000961	       391	tekhex.c	FUNCTION_6	SWITCH_1	IF_3
0x40006e9	      0x498d442428	                   lea rax, [r12 + 0x28]	       409	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_6	CALL_8
0x40006ee	    0x48c744241000	               mov qword [rsp + 0x10], 0	       402	tekhex.c	FUNCTION_6	SWITCH_1
0x40006f7	    0x41bd01000000	                             mov r13d, 1	       402	tekhex.c	FUNCTION_6	SWITCH_1
0x40006fd	      0x4889442408	                mov qword [rsp + 8], rax	       409	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_6	CALL_8
0x4000702	      0x488b442418	            mov rax, qword [rsp + 0x18] 	       403	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2
0x4000707	          0x4839c3	                            cmp rbx, rax	       403	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2
0x400070a	     0xf86b7feffff	                           jbe 0x40005c7	       403	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2
0x4000710	           0xfb608	                   movzx ecx, byte [rax]	       403	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2
0x4000713	            0x84c9	                             test cl, cl	       403	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2
0x4000715	     0xf84acfeffff	                            je 0x40005c7	       403	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2
0x400071b	          0x83e930	                           sub ecx, 0x30	       403	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2
0x400071e	          0x80f908	                               cmp cl, 8	       403	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2
0x4000721	            0x779d	                            ja 0x40006c0	       403	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2
0x4000723	          0x4c89ea	                            mov rdx, r13	       403	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2
0x4000726	          0x48d3e2	                             shl rdx, cl	       403	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2
0x4000729	    0xf7c2dd010000	                         test edx, 0x1dd	       403	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2
0x400072f	     0xf859b000000	                           jne 0x40007d0	       403	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2
0x4000735	          0x83e202	                              and edx, 2	       403	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2
0x4000738	            0x7486	                            je 0x40006c0	       403	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2
0x400073a	      0x488b742408	                mov rsi, qword [rsp + 8]	       409	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_6	CALL_8
0x400073f	      0x488d7c2418	                   lea rdi, [rsp + 0x18]	       409	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_6	CALL_8
0x4000744	        0x4883c001	                              add rax, 1	       408	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000748	          0x4889da	                            mov rdx, rbx	       409	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_6	CALL_8
0x400074b	      0x4889442418	             mov qword [rsp + 0x18], rax	       408	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000750	      0xe8ebf8ffff	                       call sym.getvalue	       409	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_6	CALL_8
0x4000755	            0x85c0	                           test eax, eax	       409	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_6	CALL_8
0x4000757	     0xf8463ffffff	                            je 0x40006c0	       409	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_6	CALL_8
0x400075d	      0x488d742428	                   lea rsi, [rsp + 0x28]	       411	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_7	CALL_9
0x4000762	      0x488d7c2418	                   lea rdi, [rsp + 0x18]	       411	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_7	CALL_9
0x4000767	          0x4889da	                            mov rdx, rbx	       411	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_7	CALL_9
0x400076a	      0xe8d1f8ffff	                       call sym.getvalue	       411	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_7	CALL_9
0x400076f	            0x85c0	                           test eax, eax	       411	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_7	CALL_9
0x4000771	     0xf8449ffffff	                            je 0x40006c0	       411	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_7	CALL_9
0x4000777	      0x498b542428	            mov rdx, qword [r12 + 0x28] 	       413	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_8
0x400077c	      0x488b442428	            mov rax, qword [rsp + 0x28] 	       413	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_8
0x4000781	          0x4839c2	                            cmp rdx, rax	       413	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_8
0x4000784	            0x762a	                           jbe 0x40007b0	       413	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_8
0x4000786	      0x4889542428	             mov qword [rsp + 0x28], rdx	       414	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_8
0x400078b	    0x49c744243800	               mov qword [r12 + 0x38], 0	       415	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000794	      0x488b442418	            mov rax, qword [rsp + 0x18] 	       403	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2
0x4000799	    0x41c744242003	          mov dword [r12 + 0x20], 0x103 	       420	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40007a2	          0x4839c3	                            cmp rbx, rax	       403	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2
0x40007a5	     0xf8765ffffff	                            ja 0x4000710	       403	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2
0x40007ab	      0xe917feffff	                           jmp 0x40005c7	       403	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2
0x40007b0	          0x4829d0	                            sub rax, rdx	       415	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40007b3	      0xa900000080	                    test eax, 0x80000000	       418	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_9
0x40007b8	      0x4989442438	             mov qword [r12 + 0x38], rax	       415	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40007bd	            0x74d5	                            je 0x4000794	       418	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_9
0x40007bf	            0x31c0	                            xor eax, eax	       389	tekhex.c	FUNCTION_6	SWITCH_1	IF_2
0x40007c1	      0xe906feffff	                           jmp 0x40005cc	       389	tekhex.c	FUNCTION_6	SWITCH_1	IF_2
0x40007c6	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       389	tekhex.c	FUNCTION_6	SWITCH_1	IF_2
0x40007d0	      0xbe38000000	                           mov esi, 0x38	       432	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40007d5	          0x4889ef	                            mov rdi, rbp	       432	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40007d8	      0xe800000000	                          call 0x40007dd	       432	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40007dd	          0x4989c7	                            mov r15, rax	       432	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40007e0	      0x488b442418	            mov rax, qword [rsp + 0x18] 	       434	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40007e5	          0x4d85ff	                           test r15, r15	       436	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_10
0x40007e8	        0x440fb630	                  movzx r14d, byte [rax]	       434	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40007ec	     0xf84cefeffff	                            je 0x40006c0	       436	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_10
0x40007f2	        0x4883c001	                              add rax, 1	       439	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40007f6	          0x49892f	                    mov qword [r15], rbp	       438	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40007f9	    0x8385b8000000	               add dword [rbp + 0xb8], 1	       440	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000800	      0x4889442418	             mov qword [rsp + 0x18], rax	       439	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000805	    0x488b85f80000	            mov rax, qword [rbp + 0xf8] 	       442	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x400080c	      0x488d742418	                   lea rsi, [rsp + 0x18]	       444	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_11	CALL_11
0x4000811	    0x814d44000200	            or dword [rbp + 0x44], 0x200	       441	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000818	      0x488d7c2430	                   lea rdi, [rsp + 0x30]	       444	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_11	CALL_11
0x400081d	          0x4889d9	                            mov rcx, rbx	       444	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_11	CALL_11
0x4000820	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       442	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000824	        0x49895730	             mov qword [r15 + 0x30], rdx	       442	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000828	      0x488d542424	                   lea rdx, [rsp + 0x24]	       444	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_11	CALL_11
0x400082d	        0x4c897810	             mov qword [rax + 0x10], r15	       443	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000831	      0xe8caf8ffff	                         call sym.getsym	       444	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_11	CALL_11
0x4000836	            0x85c0	                           test eax, eax	       444	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_11	CALL_11
0x4000838	     0xf8482feffff	                            je 0x40006c0	       444	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_11	CALL_11
0x400083e	        0x8b742424	            mov esi, dword [rsp + 0x24] 	       447	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	CALL_12
0x4000842	          0x4889ef	                            mov rdi, rbp	       447	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	CALL_12
0x4000845	        0x4883c601	                              add rsi, 1	       447	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	CALL_12
0x4000849	      0xe800000000	                          call 0x400084e	       447	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	CALL_12
0x400084e	          0x4885c0	                           test rax, rax	       448	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_12
0x4000851	        0x49894708	                mov qword [r15 + 8], rax	       446	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000855	     0xf8465feffff	                            je 0x40006c0	       448	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_12
0x400085b	        0x8b542424	            mov edx, dword [rsp + 0x24] 	        53	string3.h	FUNCTION_24	CALL_3
0x400085f	      0x488d742430	                   lea rsi, [rsp + 0x30]	        53	string3.h	FUNCTION_24	CALL_3
0x4000864	          0x4889c7	                            mov rdi, rax	        53	string3.h	FUNCTION_24	CALL_3
0x4000867	          0x83c201	                              add edx, 1	        53	string3.h	FUNCTION_24	CALL_3
0x400086a	      0xe800000000	                          call 0x400086f	        53	string3.h	FUNCTION_24	CALL_3
0x400086f	            0x31c0	                            xor eax, eax	       453	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_13
0x4000871	        0x4180fe34	                          cmp r14b, 0x34	       453	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_13
0x4000875	        0x4d896720	             mov qword [r15 + 0x20], r12	       451	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000879	           0xf9ec0	                                setle al	       453	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_13
0x400087c	          0x83c001	                              add eax, 1	       453	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_13
0x400087f	        0x41894718	             mov dword [r15 + 0x18], eax	       453	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_13
0x4000883	          0x4489f0	                           mov eax, r14d	       456	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_14
0x4000886	          0x83e0fb	                     and eax, 0xfffffffb	       456	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_14
0x4000889	            0x3c32	                            cmp al, 0x32	       456	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_14
0x400088b	            0x753b	                           jne 0x40008c8	       456	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_14
0x400088d	    0x49c747200000	               mov qword [r15 + 0x20], 0	       457	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_14
0x4000895	      0x488d742428	                   lea rsi, [rsp + 0x28]	       494	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_25	CALL_18
0x400089a	      0x488d7c2418	                   lea rdi, [rsp + 0x18]	       494	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_25	CALL_18
0x400089f	          0x4889da	                            mov rdx, rbx	       494	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_25	CALL_18
0x40008a2	      0xe899f7ffff	                       call sym.getvalue	       494	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_25	CALL_18
0x40008a7	            0x85c0	                           test eax, eax	       494	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_25	CALL_18
0x40008a9	     0xf8411feffff	                            je 0x40006c0	       494	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_25	CALL_18
0x40008af	      0x488b442428	            mov rax, qword [rsp + 0x28] 	       496	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40008b4	      0x492b442428	             sub rax, qword [r12 + 0x28]	       496	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40008b9	        0x49894710	             mov qword [r15 + 0x10], rax	       496	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40008bd	      0xe940feffff	                           jmp 0x4000702	       497	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40008c2	    0x660f1f440000	                    nop word [rax + rax]	       497	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40008c8	            0x3c33	                            cmp al, 0x33	       458	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15
0x40008ca	            0x7524	                           jne 0x40008f0	       458	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15
0x40008cc	      0x418b442420	            mov eax, dword [r12 + 0x20] 	       460	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	IF_16
0x40008d1	            0xa820	                           test al, 0x20	       460	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	IF_16
0x40008d3	            0x743b	                            je 0x4000910	       460	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	IF_16
0x40008d5	    0x48837c241000	               cmp qword [rsp + 0x10], 0	       464	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	IF_17
0x40008db	     0xf84ce000000	                            je 0x40009af	       464	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	IF_17
0x40008e1	      0x488b442410	            mov rax, qword [rsp + 0x10] 	       491	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5
0x40008e6	        0x49894720	             mov qword [r15 + 0x20], rax	       491	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5
0x40008ea	            0xeba9	                           jmp 0x4000895	       491	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5
0x40008ec	         0xf1f4000	                         nop dword [rax]	       491	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5
0x40008f0	        0x4183ee34	                          sub r14d, 0x34	       476	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20
0x40008f4	    0x4181e6fb0000	                          and r14d, 0xfb	       476	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20
0x40008fb	            0x7598	                           jne 0x4000895	       476	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20
0x40008fd	      0x418b442420	            mov eax, dword [r12 + 0x20] 	       478	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	IF_21
0x4000902	            0xa810	                           test al, 0x10	       478	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	IF_21
0x4000904	            0x7517	                           jne 0x400091d	       478	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	IF_21
0x4000906	          0x83c820	                            or eax, 0x20	       479	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	IF_21
0x4000909	      0x4189442420	             mov dword [r12 + 0x20], eax	       479	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	IF_21
0x400090e	            0xeb85	                           jmp 0x4000895	       479	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	IF_21
0x4000910	          0x83c810	                            or eax, 0x10	       461	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	IF_16
0x4000913	      0x4189442420	             mov dword [r12 + 0x20], eax	       461	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	IF_16
0x4000918	      0xe978ffffff	                           jmp 0x4000895	       461	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	IF_16
0x400091d	    0x48837c241000	               cmp qword [rsp + 0x10], 0	       482	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_22
0x4000923	            0x75bc	                           jne 0x40008e1	       482	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_22
0x4000925	            0x31ff	                            xor edi, edi	       484	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	CALL_16
0x4000927	          0x4c89e6	                            mov rsi, r12	       484	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	CALL_16
0x400092a	      0xe800000000	                          call 0x400092f	       484	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	CALL_16
0x400092f	          0x4885c0	                           test rax, rax	       485	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_23
0x4000932	      0x4889442410	             mov qword [rsp + 0x10], rax	       484	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	CALL_16
0x4000937	            0x75a8	                           jne 0x40008e1	       485	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_23
0x4000939	      0x418b542420	            mov edx, dword [r12 + 0x20] 	       486	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_23	CALL_17
0x400093e	          0x83e2cf	                     and edx, 0xffffffcf	       486	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_23	CALL_17
0x4000941	          0x83ca20	                            or edx, 0x20	       486	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_23	CALL_17
0x4000944	        0x498b3424	                    mov rsi, qword [r12]	       486	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_23	CALL_17
0x4000948	          0x4889ef	                            mov rdi, rbp	       486	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_23	CALL_17
0x400094b	      0xe800000000	                          call 0x4000950	       486	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_23	CALL_17
0x4000950	          0x4885c0	                           test rax, rax	       489	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_24
0x4000953	      0x4889442410	             mov qword [rsp + 0x10], rax	       486	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_23	CALL_17
0x4000958	            0x7587	                           jne 0x40008e1	       489	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_24
0x400095a	            0x31c0	                            xor eax, eax	       389	tekhex.c	FUNCTION_6	SWITCH_1	IF_2
0x400095c	      0xe96bfcffff	                           jmp 0x40005cc	       389	tekhex.c	FUNCTION_6	SWITCH_1	IF_2
0x4000961	        0x8b742424	            mov esi, dword [rsp + 0x24] 	       393	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	CALL_5
0x4000965	          0x4889ef	                            mov rdi, rbp	       393	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	CALL_5
0x4000968	        0x4883c601	                              add rsi, 1	       393	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	CALL_5
0x400096c	      0xe800000000	                          call 0x4000971	       393	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	CALL_5
0x4000971	          0x4885c0	                           test rax, rax	       395	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	IF_4
0x4000974	          0x4889c1	                            mov rcx, rax	       393	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	CALL_5
0x4000977	     0xf8443fdffff	                            je 0x40006c0	       395	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	IF_4
0x400097d	        0x8b442424	            mov eax, dword [rsp + 0x24] 	        53	string3.h	FUNCTION_24	CALL_3
0x4000981	      0x488d742430	                   lea rsi, [rsp + 0x30]	        53	string3.h	FUNCTION_24	CALL_3
0x4000986	          0x4889cf	                            mov rdi, rcx	        53	string3.h	FUNCTION_24	CALL_3
0x4000989	          0x8d5001	                      lea edx, [rax + 1]	        53	string3.h	FUNCTION_24	CALL_3
0x400098c	      0xe800000000	                          call 0x4000991	        53	string3.h	FUNCTION_24	CALL_3
0x4000991	          0x4889ef	                            mov rdi, rbp	       398	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	CALL_7
0x4000994	          0x4889c6	                            mov rsi, rax	       398	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	CALL_7
0x4000997	      0xe800000000	                          call 0x400099c	       398	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	CALL_7
0x400099c	          0x4885c0	                           test rax, rax	       399	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	IF_5
0x400099f	          0x4989c4	                            mov r12, rax	       398	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	CALL_7
0x40009a2	     0xf8541fdffff	                           jne 0x40006e9	       399	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	IF_5
0x40009a8	            0x31c0	                            xor eax, eax	       389	tekhex.c	FUNCTION_6	SWITCH_1	IF_2
0x40009aa	      0xe91dfcffff	                           jmp 0x40005cc	       389	tekhex.c	FUNCTION_6	SWITCH_1	IF_2
0x40009af	            0x31ff	                            xor edi, edi	       466	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	CALL_14
0x40009b1	          0x4c89e6	                            mov rsi, r12	       466	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	CALL_14
0x40009b4	      0xe800000000	                          call 0x40009b9	       466	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	CALL_14
0x40009b9	          0x4885c0	                           test rax, rax	       467	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	IF_18
0x40009bc	      0x4889442410	             mov qword [rsp + 0x10], rax	       466	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	CALL_14
0x40009c1	     0xf851affffff	                           jne 0x40008e1	       467	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	IF_18
0x40009c7	      0x418b542420	            mov edx, dword [r12 + 0x20] 	       468	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	IF_18	CALL_15
0x40009cc	          0x83e2cf	                     and edx, 0xffffffcf	       468	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	IF_18	CALL_15
0x40009cf	          0x83ca10	                            or edx, 0x10	       468	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	IF_18	CALL_15
0x40009d2	      0xe96dffffff	                           jmp 0x4000944	       468	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	IF_18	CALL_15
0x40009d7	      0xe800000000	                          call 0x40009dc	       506	tekhex.c	FUNCTION_6
tekhex_write_object_contents	WHILE,0:IF,4:functions,0:SWITCH,1:FOR,5:ELSE,0:CALL,15:DO,0	188
0x4000c60	            0x4156	                                push r14	       801	tekhex.c	FUNCTION_19
0x4000c62	            0x4155	                                push r13	       801	tekhex.c	FUNCTION_19
0x4000c64	            0x4154	                                push r12	       801	tekhex.c	FUNCTION_19
0x4000c66	              0x55	                                push rbp	       801	tekhex.c	FUNCTION_19
0x4000c67	          0x4889fd	                            mov rbp, rdi	       801	tekhex.c	FUNCTION_19
0x4000c6a	              0x53	                                push rbx	       801	tekhex.c	FUNCTION_19
0x4000c6b	        0x4883c480	             add rsp, 0xffffffffffffff80	       801	tekhex.c	FUNCTION_19
0x4000c6f	    0x64488b042528	                mov rax, qword fs:[0x28]	       801	tekhex.c	FUNCTION_19
0x4000c78	      0x4889442478	             mov qword [rsp + 0x78], rax	       801	tekhex.c	FUNCTION_19
0x4000c7d	            0x31c0	                            xor eax, eax	       801	tekhex.c	FUNCTION_19
0x4000c7f	    0x8b0500000000	            mov eax, dword [0x04000c85] 	       210	tekhex.c	FUNCTION_1	IF_1
0x4000c85	            0x85c0	                           test eax, eax	       210	tekhex.c	FUNCTION_1	IF_1
0x4000c87	     0xf84cf020000	                            je 0x4000f5c	       210	tekhex.c	FUNCTION_1	IF_1
0x4000c8d	    0x488b85f80000	            mov rax, qword [rbp + 0xf8] 	       810	tekhex.c	FUNCTION_19	FOR_1
0x4000c94	      0x488d5c2410	                   lea rbx, [rsp + 0x10]	       822	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1
0x4000c99	        0x4c8b6018	            mov r12, qword [rax + 0x18] 	       810	tekhex.c	FUNCTION_19	FOR_1
0x4000c9d	          0x4d85e4	                           test r12, r12	       810	tekhex.c	FUNCTION_19	FOR_1
0x4000ca0	     0xf84cf000000	                            je 0x4000d75	       810	tekhex.c	FUNCTION_19	FOR_1
0x4000ca6	          0x4531ed	                          xor r13d, r13d	       801	tekhex.c	FUNCTION_19
0x4000ca9	            0xeb16	                           jmp 0x4000cc1	       801	tekhex.c	FUNCTION_19
0x4000cab	       0xf1f440000	                   nop dword [rax + rax]	       801	tekhex.c	FUNCTION_19
0x4000cb0	        0x4983c520	                           add r13, 0x20	       801	tekhex.c	FUNCTION_19
0x4000cb4	    0x4981fd002000	                         cmp r13, 0x2000	       818	tekhex.c	FUNCTION_19	FOR_1	FOR_2
0x4000cbb	     0xf84a3000000	                            je 0x4000d64	       818	tekhex.c	FUNCTION_19	FOR_1	FOR_2
0x4000cc1	          0x4489e8	                           mov eax, r13d	       820	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1
0x4000cc4	          0xc1f805	                              sar eax, 5	       820	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1
0x4000cc7	            0x4898	                                    cdqe	       820	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1
0x4000cc9	    0x4180bc040020	        cmp byte [r12 + rax + 0x2000], 0	       820	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1
0x4000cd2	            0x74dc	                            je 0x4000cb0	       820	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1
0x4000cd4	          0x4c89ee	                            mov rsi, r13	       824	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	CALL_2
0x4000cd7	    0x4903b4240021	           add rsi, qword [r12 + 0x2100]	       824	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	CALL_2
0x4000cdf	      0x488d7c2408	                      lea rdi, [rsp + 8]	       824	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	CALL_2
0x4000ce4	      0x48895c2408	                mov qword [rsp + 8], rbx	       822	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1
0x4000ce9	      0xe8e2f4ffff	                     call sym.writevalue	       824	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	CALL_2
0x4000cee	      0x488b4c2408	                mov rcx, qword [rsp + 8]	       824	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	CALL_2
0x4000cf3	        0x418d7d20	                   lea edi, [r13 + 0x20]	       824	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	CALL_2
0x4000cf7	          0x4489ea	                           mov edx, r13d	       824	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	CALL_2
0x4000cfa	    0x660f1f440000	                    nop word [rax + rax]	       824	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	CALL_2
0x4000d00	          0x4863f2	                         movsxd rsi, edx	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x4000d03	          0x83c201	                              add edx, 1	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x4000d06	      0x410fb60434	             movzx eax, byte [r12 + rsi]	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x4000d0b	          0x83e00f	                            and eax, 0xf	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x4000d0e	     0xfb680000000	                   movzx eax, byte [rax]	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x4000d15	          0x884101	                  mov byte [rcx + 1], al	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x4000d18	      0x410fb60434	             movzx eax, byte [r12 + rsi]	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x4000d1d	          0xc0e804	                               shr al, 4	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x4000d20	          0x83e00f	                            and eax, 0xf	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x4000d23	            0x39fa	                            cmp edx, edi	       825	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x4000d25	     0xfb688000000	                   movzx ecx, byte [rax]	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x4000d2c	      0x488b442408	                mov rax, qword [rsp + 8]	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x4000d31	            0x8808	                      mov byte [rax], cl	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x4000d33	      0x488b442408	                mov rax, qword [rsp + 8]	       828	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x4000d38	        0x488d4802	                      lea rcx, [rax + 2]	       828	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x4000d3c	      0x48894c2408	                mov qword [rsp + 8], rcx	       828	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x4000d41	            0x75bd	                           jne 0x4000d00	       825	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x4000d43	          0x4889da	                            mov rdx, rbx	       830	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	CALL_3
0x4000d46	      0xbe36000000	                           mov esi, 0x36	       830	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	CALL_3
0x4000d4b	          0x4889ef	                            mov rdi, rbp	       830	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	CALL_3
0x4000d4e	        0x4983c520	                           add r13, 0x20	       830	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	CALL_3
0x4000d52	      0xe8f9f5ffff	                            call sym.out	       830	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	CALL_3
0x4000d57	    0x4981fd002000	                         cmp r13, 0x2000	       818	tekhex.c	FUNCTION_19	FOR_1	FOR_2
0x4000d5e	     0xf855dffffff	                           jne 0x4000cc1	       818	tekhex.c	FUNCTION_19	FOR_1	FOR_2
0x4000d64	    0x4d8ba4240821	          mov r12, qword [r12 + 0x2108] 	       812	tekhex.c	FUNCTION_19	FOR_1
0x4000d6c	          0x4d85e4	                           test r12, r12	       810	tekhex.c	FUNCTION_19	FOR_1
0x4000d6f	     0xf8531ffffff	                           jne 0x4000ca6	       810	tekhex.c	FUNCTION_19	FOR_1
0x4000d75	    0x488b9d900000	            mov rbx, qword [rbp + 0x90] 	       836	tekhex.c	FUNCTION_19	FOR_4
0x4000d7c	      0x4c8d642410	                   lea r12, [rsp + 0x10]	       836	tekhex.c	FUNCTION_19	FOR_4
0x4000d81	          0x4885db	                           test rbx, rbx	       836	tekhex.c	FUNCTION_19	FOR_4
0x4000d84	            0x7461	                            je 0x4000de7	       836	tekhex.c	FUNCTION_19	FOR_4
0x4000d86	      0x4c89642408	                mov qword [rsp + 8], r12	       838	tekhex.c	FUNCTION_19	FOR_4
0x4000d8b	          0x488b33	                    mov rsi, qword [rbx]	       840	tekhex.c	FUNCTION_19	FOR_4	CALL_4
0x4000d8e	      0x488d7c2408	                      lea rdi, [rsp + 8]	       840	tekhex.c	FUNCTION_19	FOR_4	CALL_4
0x4000d93	      0xe808f7ffff	                       call sym.writesym	       840	tekhex.c	FUNCTION_19	FOR_4	CALL_4
0x4000d98	      0x488b442408	                mov rax, qword [rsp + 8]	       841	tekhex.c	FUNCTION_19	FOR_4
0x4000d9d	      0x488d7c2408	                      lea rdi, [rsp + 8]	       842	tekhex.c	FUNCTION_19	FOR_4	CALL_5
0x4000da2	        0x488d5001	                      lea rdx, [rax + 1]	       841	tekhex.c	FUNCTION_19	FOR_4
0x4000da6	      0x4889542408	                mov qword [rsp + 8], rdx	       841	tekhex.c	FUNCTION_19	FOR_4
0x4000dab	          0xc60031	                    mov byte [rax], 0x31	       841	tekhex.c	FUNCTION_19	FOR_4
0x4000dae	        0x488b7328	            mov rsi, qword [rbx + 0x28] 	       842	tekhex.c	FUNCTION_19	FOR_4	CALL_5
0x4000db2	      0xe819f4ffff	                     call sym.writevalue	       842	tekhex.c	FUNCTION_19	FOR_4	CALL_5
0x4000db7	        0x488b7338	            mov rsi, qword [rbx + 0x38] 	       843	tekhex.c	FUNCTION_19	FOR_4	CALL_6
0x4000dbb	        0x48037328	             add rsi, qword [rbx + 0x28]	       843	tekhex.c	FUNCTION_19	FOR_4	CALL_6
0x4000dbf	      0x488d7c2408	                      lea rdi, [rsp + 8]	       843	tekhex.c	FUNCTION_19	FOR_4	CALL_6
0x4000dc4	      0xe807f4ffff	                     call sym.writevalue	       843	tekhex.c	FUNCTION_19	FOR_4	CALL_6
0x4000dc9	      0x488b4c2408	                mov rcx, qword [rsp + 8]	       844	tekhex.c	FUNCTION_19	FOR_4	CALL_7
0x4000dce	          0x4c89e2	                            mov rdx, r12	       844	tekhex.c	FUNCTION_19	FOR_4	CALL_7
0x4000dd1	      0xbe33000000	                           mov esi, 0x33	       844	tekhex.c	FUNCTION_19	FOR_4	CALL_7
0x4000dd6	          0x4889ef	                            mov rdi, rbp	       844	tekhex.c	FUNCTION_19	FOR_4	CALL_7
0x4000dd9	      0xe872f5ffff	                            call sym.out	       844	tekhex.c	FUNCTION_19	FOR_4	CALL_7
0x4000dde	        0x488b5b10	            mov rbx, qword [rbx + 0x10] 	       836	tekhex.c	FUNCTION_19	FOR_4
0x4000de2	          0x4885db	                           test rbx, rbx	       836	tekhex.c	FUNCTION_19	FOR_4
0x4000de5	            0x759f	                           jne 0x4000d86	       836	tekhex.c	FUNCTION_19	FOR_4
0x4000de7	    0x4c8ba5b00000	            mov r12, qword [rbp + 0xb0] 	       848	tekhex.c	FUNCTION_19	IF_2
0x4000dee	          0x4d85e4	                           test r12, r12	       848	tekhex.c	FUNCTION_19	IF_2
0x4000df1	     0xf84a2000000	                            je 0x4000e99	       848	tekhex.c	FUNCTION_19	IF_2
0x4000df7	        0x498b3c24	                    mov rdi, qword [r12]	       850	tekhex.c	FUNCTION_19	IF_2	FOR_5
0x4000dfb	          0x4885ff	                           test rdi, rdi	       850	tekhex.c	FUNCTION_19	IF_2	FOR_5
0x4000dfe	     0xf8495000000	                            je 0x4000e99	       850	tekhex.c	FUNCTION_19	IF_2	FOR_5
0x4000e04	      0x4c8d6c2410	                   lea r13, [rsp + 0x10]	       858	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3
0x4000e09	      0xe800000000	                          call 0x4000e0e	       852	tekhex.c	FUNCTION_19	IF_2	FOR_5	CALL_8
0x4000e0e	          0x83f83f	                           cmp eax, 0x3f	       854	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3
0x4000e11	            0x89c3	                            mov ebx, eax	       852	tekhex.c	FUNCTION_19	IF_2	FOR_5	CALL_8
0x4000e13	            0x7473	                            je 0x4000e88	       854	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3
0x4000e15	        0x4d8b3424	                    mov r14, qword [r12]	       857	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3
0x4000e19	      0x4c896c2408	                mov qword [rsp + 8], r13	       858	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3
0x4000e1e	      0x488d7c2408	                      lea rdi, [rsp + 8]	       860	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_9
0x4000e23	          0x83eb41	                           sub ebx, 0x41	       862	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000e26	        0x498b4620	            mov rax, qword [r14 + 0x20] 	       860	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_9
0x4000e2a	          0x488b30	                    mov rsi, qword [rax]	       860	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_9
0x4000e2d	      0xe86ef6ffff	                       call sym.writesym	       860	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_9
0x4000e32	          0x83fb33	                           cmp ebx, 0x33	       862	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000e35	            0x7718	                            ja 0x4000e4f	       862	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000e37	    0xff24dd000000	                       jmp qword [rbx*8]	       862	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000e3e	      0x488b442408	                mov rax, qword [rsp + 8]	       884	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000e43	        0x488d5001	                      lea rdx, [rax + 1]	       884	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000e47	      0x4889542408	                mov qword [rsp + 8], rdx	       884	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000e4c	          0xc60037	                    mov byte [rax], 0x37	       884	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000e4f	        0x498b7608	                mov rsi, qword [r14 + 8]	       892	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_11
0x4000e53	      0x488d7c2408	                      lea rdi, [rsp + 8]	       892	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_11
0x4000e58	      0xe843f6ffff	                       call sym.writesym	       892	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_11
0x4000e5d	        0x498b4620	            mov rax, qword [r14 + 0x20] 	       893	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_12
0x4000e61	        0x498b7610	            mov rsi, qword [r14 + 0x10] 	       893	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_12
0x4000e65	      0x488d7c2408	                      lea rdi, [rsp + 8]	       893	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_12
0x4000e6a	        0x48037028	             add rsi, qword [rax + 0x28]	       893	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_12
0x4000e6e	      0xe85df3ffff	                     call sym.writevalue	       893	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_12
0x4000e73	      0x488b4c2408	                mov rcx, qword [rsp + 8]	       894	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_13
0x4000e78	          0x4c89ea	                            mov rdx, r13	       894	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_13
0x4000e7b	      0xbe33000000	                           mov esi, 0x33	       894	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_13
0x4000e80	          0x4889ef	                            mov rdi, rbp	       894	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_13
0x4000e83	      0xe8c8f4ffff	                            call sym.out	       894	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_13
0x4000e88	        0x4983c408	                              add r12, 8	       850	tekhex.c	FUNCTION_19	IF_2	FOR_5
0x4000e8c	        0x498b3c24	                    mov rdi, qword [r12]	       850	tekhex.c	FUNCTION_19	IF_2	FOR_5
0x4000e90	          0x4885ff	                           test rdi, rdi	       850	tekhex.c	FUNCTION_19	IF_2	FOR_5
0x4000e93	     0xf8570ffffff	                           jne 0x4000e09	       850	tekhex.c	FUNCTION_19	IF_2	FOR_5
0x4000e99	          0x4889ea	                            mov rdx, rbp	       900	tekhex.c	FUNCTION_19	IF_4	CALL_14
0x4000e9c	      0xbe09000000	                              mov esi, 9	       900	tekhex.c	FUNCTION_19	IF_4	CALL_14
0x4000ea1	      0xbf00000000	                              mov edi, 0	       900	tekhex.c	FUNCTION_19	IF_4	CALL_14
0x4000ea6	      0xe800000000	                          call 0x4000eab	       900	tekhex.c	FUNCTION_19	IF_4	CALL_14
0x4000eab	        0x4883f809	                              cmp rax, 9	       900	tekhex.c	FUNCTION_19	IF_4	CALL_14
0x4000eaf	     0xf85b1000000	                           jne 0x4000f66	       900	tekhex.c	FUNCTION_19	IF_4	CALL_14
0x4000eb5	      0xb801000000	                              mov eax, 1	       902	tekhex.c	FUNCTION_19
0x4000eba	            0xeb26	                           jmp 0x4000ee2	       902	tekhex.c	FUNCTION_19
0x4000ebc	         0xf1f4000	                         nop dword [rax]	       902	tekhex.c	FUNCTION_19
0x4000ec0	      0x488b442408	                mov rax, qword [rsp + 8]	       881	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000ec5	        0x488d5001	                      lea rdx, [rax + 1]	       881	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000ec9	      0x4889542408	                mov qword [rsp + 8], rdx	       881	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000ece	          0xc60033	                    mov byte [rax], 0x33	       881	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000ed1	      0xe979ffffff	                           jmp 0x4000e4f	       882	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000ed6	      0xbf03000000	                              mov edi, 3	       888	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1	CALL_10
0x4000edb	      0xe800000000	                          call 0x4000ee0	       888	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1	CALL_10
0x4000ee0	            0x31c0	                            xor eax, eax	       889	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000ee2	      0x488b5c2478	            mov rbx, qword [rsp + 0x78] 	       903	tekhex.c	FUNCTION_19
0x4000ee7	    0x6448331c2528	                xor rbx, qword fs:[0x28]	       903	tekhex.c	FUNCTION_19
0x4000ef0	            0x7565	                           jne 0x4000f57	       903	tekhex.c	FUNCTION_19
0x4000ef2	        0x4883ec80	             sub rsp, 0xffffffffffffff80	       903	tekhex.c	FUNCTION_19
0x4000ef6	              0x5b	                                 pop rbx	       903	tekhex.c	FUNCTION_19
0x4000ef7	              0x5d	                                 pop rbp	       903	tekhex.c	FUNCTION_19
0x4000ef8	            0x415c	                                 pop r12	       903	tekhex.c	FUNCTION_19
0x4000efa	            0x415d	                                 pop r13	       903	tekhex.c	FUNCTION_19
0x4000efc	            0x415e	                                 pop r14	       903	tekhex.c	FUNCTION_19
0x4000efe	              0xc3	                                     ret	       903	tekhex.c	FUNCTION_19
0x4000eff	      0x488b442408	                mov rax, qword [rsp + 8]	       873	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000f04	        0x488d5001	                      lea rdx, [rax + 1]	       873	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000f08	      0x4889542408	                mov qword [rsp + 8], rdx	       873	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000f0d	          0xc60034	                    mov byte [rax], 0x34	       873	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000f10	      0xe93affffff	                           jmp 0x4000e4f	       874	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000f15	      0x488b442408	                mov rax, qword [rsp + 8]	       865	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000f1a	        0x488d5001	                      lea rdx, [rax + 1]	       865	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000f1e	      0x4889542408	                mov qword [rsp + 8], rdx	       865	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000f23	          0xc60032	                    mov byte [rax], 0x32	       865	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000f26	      0xe924ffffff	                           jmp 0x4000e4f	       866	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000f2b	      0x488b442408	                mov rax, qword [rsp + 8]	       878	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000f30	        0x488d5001	                      lea rdx, [rax + 1]	       878	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000f34	      0x4889542408	                mov qword [rsp + 8], rdx	       878	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000f39	          0xc60038	                    mov byte [rax], 0x38	       878	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000f3c	      0xe90effffff	                           jmp 0x4000e4f	       879	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000f41	      0x488b442408	                mov rax, qword [rsp + 8]	       868	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000f46	        0x488d5001	                      lea rdx, [rax + 1]	       868	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000f4a	      0x4889542408	                mov qword [rsp + 8], rdx	       868	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000f4f	          0xc60036	                    mov byte [rax], 0x36	       868	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000f52	      0xe9f8feffff	                           jmp 0x4000e4f	       869	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4000f57	      0xe800000000	                          call 0x4000f5c	       903	tekhex.c	FUNCTION_19
0x4000f5c	      0xe87ffcffff	             call sym.tekhex_init.part.2	       903	tekhex.c	FUNCTION_19
0x4000f61	      0xe927fdffff	                           jmp 0x4000c8d	       903	tekhex.c	FUNCTION_19
0x4000f66	      0xba00000000	                              mov edx, 0	       901	tekhex.c	FUNCTION_19	CALL_15
0x4000f6b	      0xbe85030000	                          mov esi, 0x385	       901	tekhex.c	FUNCTION_19	CALL_15
0x4000f70	      0xbf00000000	                              mov edi, 0	       901	tekhex.c	FUNCTION_19	CALL_15
0x4000f75	      0xe800000000	                          call 0x4000f7a	       901	tekhex.c	FUNCTION_19	CALL_15
tekhex_get_symtab_upper_bound	WHILE,0:IF,0:functions,0:SWITCH,0:FOR,0:ELSE,0:CALL,0:DO,0	4
0x40001c0	    0x8b87b8000000	            mov eax, dword [rdi + 0xb8] 	       580	tekhex.c	FUNCTION_9
0x40001c6	          0x83c001	                              add eax, 1	       580	tekhex.c	FUNCTION_9
0x40001c9	        0x48c1e003	                              shl rax, 3	       580	tekhex.c	FUNCTION_9
0x40001cd	              0xc3	                                     ret	       582	tekhex.c	FUNCTION_9
tekhex_canonicalize_symtab	WHILE,1:IF,0:functions,0:SWITCH,0:FOR,0:ELSE,0:CALL,2:DO,0	15
0x4000180	    0x488b87f80000	            mov rax, qword [rdi + 0xf8] 	       564	tekhex.c	FUNCTION_8
0x4000187	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       564	tekhex.c	FUNCTION_8
0x400018b	    0x8b87b8000000	            mov eax, dword [rdi + 0xb8] 	       565	tekhex.c	FUNCTION_8	CALL_1
0x4000191	          0x4885d2	                           test rdx, rdx	       568	tekhex.c	FUNCTION_8	WHILE_1
0x4000194	          0x4889c1	                            mov rcx, rax	       565	tekhex.c	FUNCTION_8	CALL_1
0x4000197	    0x48c704c60000	              mov qword [rsi + rax*8], 0	       567	tekhex.c	FUNCTION_8
0x400019f	            0x741a	                            je 0x40001bb	       568	tekhex.c	FUNCTION_8	WHILE_1
0x40001a1	     0xf1f80000000	                         nop dword [rax]	       568	tekhex.c	FUNCTION_8	WHILE_1
0x40001a8	          0x8d79ff	                      lea edi, [rcx - 1]	       570	tekhex.c	FUNCTION_8	WHILE_1
0x40001ab	        0x488914fe	            mov qword [rsi + rdi*8], rdx	       570	tekhex.c	FUNCTION_8	WHILE_1
0x40001af	        0x488b5230	            mov rdx, qword [rdx + 0x30] 	       571	tekhex.c	FUNCTION_8	WHILE_1
0x40001b3	          0x4889f9	                            mov rcx, rdi	       570	tekhex.c	FUNCTION_8	WHILE_1
0x40001b6	          0x4885d2	                           test rdx, rdx	       568	tekhex.c	FUNCTION_8	WHILE_1
0x40001b9	            0x75ed	                           jne 0x40001a8	       568	tekhex.c	FUNCTION_8	WHILE_1
0x40001bb	            0xf3c3	                                     ret	       575	tekhex.c	FUNCTION_8
tekhex_mkobject	WHILE,0:IF,1:functions,0:SWITCH,0:FOR,0:ELSE,0:CALL,1:DO,0	18
0x4000540	              0x53	                                push rbx	       586	tekhex.c	FUNCTION_10
0x4000541	      0xbe20000000	                           mov esi, 0x20	       589	tekhex.c	FUNCTION_10	CALL_1
0x4000546	          0x4889fb	                            mov rbx, rdi	       586	tekhex.c	FUNCTION_10
0x4000549	      0xe800000000	                          call 0x400054e	       589	tekhex.c	FUNCTION_10	CALL_1
0x400054e	          0x4885c0	                           test rax, rax	       590	tekhex.c	FUNCTION_10	IF_1
0x4000551	            0x742d	                            je 0x4000580	       590	tekhex.c	FUNCTION_10	IF_1
0x4000553	    0x488983f80000	             mov qword [rbx + 0xf8], rax	       592	tekhex.c	FUNCTION_10
0x400055a	    0xc74008010000	                  mov dword [rax + 8], 1	       593	tekhex.c	FUNCTION_10
0x4000561	    0x48c700000000	                      mov qword [rax], 0	       594	tekhex.c	FUNCTION_10
0x4000568	    0x48c740100000	               mov qword [rax + 0x10], 0	       595	tekhex.c	FUNCTION_10
0x4000570	    0x48c740180000	               mov qword [rax + 0x18], 0	       596	tekhex.c	FUNCTION_10
0x4000578	      0xb801000000	                              mov eax, 1	       597	tekhex.c	FUNCTION_10
0x400057d	              0x5b	                                 pop rbx	       598	tekhex.c	FUNCTION_10
0x400057e	              0xc3	                                     ret	       598	tekhex.c	FUNCTION_10
0x400057f	              0x90	                                     nop	       598	tekhex.c	FUNCTION_10
0x4000580	            0x31c0	                            xor eax, eax	       591	tekhex.c	FUNCTION_10	IF_1
0x4000582	              0x5b	                                 pop rbx	       598	tekhex.c	FUNCTION_10
0x4000583	              0xc3	                                     ret	       598	tekhex.c	FUNCTION_10
tekhex_set_section_contents	WHILE,0:IF,1:functions,0:SWITCH,0:FOR,0:ELSE,0:CALL,1:DO,0	12
0x4000b20	        0xf6462003	               test byte [rsi + 0x20], 3	       705	tekhex.c	FUNCTION_15	IF_1
0x4000b24	            0x750a	                           jne 0x4000b30	       705	tekhex.c	FUNCTION_15	IF_1
0x4000b26	            0x31c0	                            xor eax, eax	       705	tekhex.c	FUNCTION_15	IF_1
0x4000b28	              0xc3	                                     ret	       705	tekhex.c	FUNCTION_15	IF_1
0x4000b29	     0xf1f80000000	                         nop dword [rax]	       705	tekhex.c	FUNCTION_15	IF_1
0x4000b30	        0x4883ec08	                              sub rsp, 8	       704	tekhex.c	FUNCTION_15
0x4000b34	        0x4883c628	                           add rsi, 0x28	       704	tekhex.c	FUNCTION_15
0x4000b38	          0x4531c9	                            xor r9d, r9d	       707	tekhex.c	FUNCTION_15	IF_1	CALL_1
0x4000b3b	      0xe8a0feffff	   call sym.move_section_contents.isra.0	       707	tekhex.c	FUNCTION_15	IF_1	CALL_1
0x4000b40	      0xb801000000	                              mov eax, 1	       709	tekhex.c	FUNCTION_15	IF_1
0x4000b45	        0x4883c408	                              add rsp, 8	       713	tekhex.c	FUNCTION_15
0x4000b49	              0xc3	                                     ret	       713	tekhex.c	FUNCTION_15
getvalue	WHILE,1:IF,4:functions,0:SWITCH,0:FOR,0:ELSE,0:CALL,2:DO,0	51
0x4000040	          0x4c8b0f	                     mov r9, qword [rdi]	       272	tekhex.c	FUNCTION_2
0x4000043	          0x4531db	                          xor r11d, r11d	       277	tekhex.c	FUNCTION_2	IF_1
0x4000046	          0x4939d1	                             cmp r9, rdx	       276	tekhex.c	FUNCTION_2	IF_1
0x4000049	     0xf838d000000	                           jae 0x40000dc	       276	tekhex.c	FUNCTION_2	IF_1
0x400004f	        0x410fb601	                    movzx eax, byte [r9]	       279	tekhex.c	FUNCTION_2	IF_2
0x4000053	     0xfb688000000	                   movzx ecx, byte [rax]	       279	tekhex.c	FUNCTION_2	IF_2
0x400005a	          0x80f963	                            cmp cl, 0x63	       279	tekhex.c	FUNCTION_2	IF_2
0x400005d	            0x747d	                            je 0x40000dc	       279	tekhex.c	FUNCTION_2	IF_2
0x400005f	        0x440fb6d1	                          movzx r10d, cl	       282	tekhex.c	FUNCTION_2	CALL_1
0x4000063	        0x4d8d4101	                        lea r8, [r9 + 1]	       282	tekhex.c	FUNCTION_2	CALL_1
0x4000067	        0x418d4aff	                      lea ecx, [r10 - 1]	       282	tekhex.c	FUNCTION_2	CALL_1
0x400006b	          0x4585d2	                         test r10d, r10d	       282	tekhex.c	FUNCTION_2	CALL_1
0x400006e	    0x41ba0f000000	                           mov r10d, 0xf	       282	tekhex.c	FUNCTION_2	CALL_1
0x4000074	        0x440f45d1	                        cmovne r10d, ecx	       282	tekhex.c	FUNCTION_2	CALL_1
0x4000078	          0x4c39c2	                             cmp rdx, r8	       285	tekhex.c	FUNCTION_2	WHILE_1
0x400007b	            0x7672	                           jbe 0x40000ef	       285	tekhex.c	FUNCTION_2	WHILE_1
0x400007d	      0x410fb64101	                movzx eax, byte [r9 + 1]	       287	tekhex.c	FUNCTION_2	WHILE_1	IF_4
0x4000082	        0x4183ea01	                             sub r10d, 1	       287	tekhex.c	FUNCTION_2	WHILE_1	IF_4
0x4000086	     0xfb688000000	                   movzx ecx, byte [rax]	       287	tekhex.c	FUNCTION_2	WHILE_1	IF_4
0x400008d	            0x31c0	                            xor eax, eax	       287	tekhex.c	FUNCTION_2	WHILE_1	IF_4
0x400008f	          0x80f963	                            cmp cl, 0x63	       287	tekhex.c	FUNCTION_2	WHILE_1	IF_4
0x4000092	            0x7525	                           jne 0x40000b9	       287	tekhex.c	FUNCTION_2	WHILE_1	IF_4
0x4000094	            0xeb46	                           jmp 0x40000dc	       287	tekhex.c	FUNCTION_2	WHILE_1	IF_4
0x4000096	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       287	tekhex.c	FUNCTION_2	WHILE_1	IF_4
0x40000a0	          0x4c39c2	                             cmp rdx, r8	       285	tekhex.c	FUNCTION_2	WHILE_1
0x40000a3	            0x743b	                            je 0x40000e0	       285	tekhex.c	FUNCTION_2	WHILE_1
0x40000a5	        0x410fb608	                    movzx ecx, byte [r8]	       287	tekhex.c	FUNCTION_2	WHILE_1	IF_4
0x40000a9	        0x4183ea01	                             sub r10d, 1	       287	tekhex.c	FUNCTION_2	WHILE_1	IF_4
0x40000ad	     0xfb689000000	                   movzx ecx, byte [rcx]	       287	tekhex.c	FUNCTION_2	WHILE_1	IF_4
0x40000b4	          0x80f963	                            cmp cl, 0x63	       287	tekhex.c	FUNCTION_2	WHILE_1	IF_4
0x40000b7	            0x742f	                            je 0x40000e8	       287	tekhex.c	FUNCTION_2	WHILE_1	IF_4
0x40000b9	        0x48c1e004	                              shl rax, 4	       289	tekhex.c	FUNCTION_2	WHILE_1	CALL_2
0x40000bd	        0x4983c001	                               add r8, 1	       289	tekhex.c	FUNCTION_2	WHILE_1	CALL_2
0x40000c1	          0x4989c1	                             mov r9, rax	       289	tekhex.c	FUNCTION_2	WHILE_1	CALL_2
0x40000c4	           0xfb6c1	                           movzx eax, cl	       289	tekhex.c	FUNCTION_2	WHILE_1	CALL_2
0x40000c7	          0x4c09c8	                              or rax, r9	       289	tekhex.c	FUNCTION_2	WHILE_1	CALL_2
0x40000ca	        0x4183faff	            cmp r10d, 0xffffffffffffffff	       285	tekhex.c	FUNCTION_2	WHILE_1
0x40000ce	            0x75d0	                           jne 0x40000a0	       285	tekhex.c	FUNCTION_2	WHILE_1
0x40000d0	    0x41bb01000000	                             mov r11d, 1	       285	tekhex.c	FUNCTION_2	WHILE_1
0x40000d6	          0x4c8907	                     mov qword [rdi], r8	       292	tekhex.c	FUNCTION_2
0x40000d9	          0x488906	                    mov qword [rsi], rax	       293	tekhex.c	FUNCTION_2
0x40000dc	          0x4489d8	                           mov eax, r11d	       295	tekhex.c	FUNCTION_2
0x40000df	              0xc3	                                     ret	       295	tekhex.c	FUNCTION_2
0x40000e0	          0x4531db	                          xor r11d, r11d	       295	tekhex.c	FUNCTION_2
0x40000e3	            0xebf1	                           jmp 0x40000d6	       295	tekhex.c	FUNCTION_2
0x40000e5	           0xf1f00	                         nop dword [rax]	       295	tekhex.c	FUNCTION_2
0x40000e8	          0x4531db	                          xor r11d, r11d	       277	tekhex.c	FUNCTION_2	IF_1
0x40000eb	          0x4489d8	                           mov eax, r11d	       295	tekhex.c	FUNCTION_2
0x40000ee	              0xc3	                                     ret	       295	tekhex.c	FUNCTION_2
0x40000ef	            0x31c0	                            xor eax, eax	       285	tekhex.c	FUNCTION_2	WHILE_1
0x40000f1	            0xebe3	                           jmp 0x40000d6	       285	tekhex.c	FUNCTION_2	WHILE_1
