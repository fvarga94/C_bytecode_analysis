remove_whitespace_and_extra_commas	functions,0:WHILE,1:CALL,6:DO,0:SWITCH,0:IF,5:FOR,3:ELSE,0	98
0x4000080	          0x4885ff	                           test rdi, rdi	       667	disassemble.c	FUNCTION_4	IF_1
0x4000083	     0xf8425010000	                            je 0x40001ae	       667	disassemble.c	FUNCTION_4	IF_1
0x4000089	            0x4156	                                push r14	       663	disassemble.c	FUNCTION_4
0x400008b	            0x4155	                                push r13	       663	disassemble.c	FUNCTION_4
0x400008d	            0x4154	                                push r12	       663	disassemble.c	FUNCTION_4
0x400008f	              0x55	                                push rbp	       663	disassemble.c	FUNCTION_4
0x4000090	          0x4989fc	                            mov r12, rdi	       663	disassemble.c	FUNCTION_4
0x4000093	              0x53	                                push rbx	       663	disassemble.c	FUNCTION_4
0x4000094	      0xe800000000	                          call 0x4000099	       671	disassemble.c	FUNCTION_4	FOR_1	CALL_1
0x4000099	          0x4885c0	                           test rax, rax	       671	disassemble.c	FUNCTION_4	FOR_1	CALL_1
0x400009c	            0x7443	                            je 0x40000e1	       671	disassemble.c	FUNCTION_4	FOR_1	CALL_1
0x400009e	        0x488d50ff	                      lea rdx, [rax - 1]	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x40000a2	        0x498d3414	                    lea rsi, [r12 + rdx]	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x40000a6	           0xfb63e	                   movzx edi, byte [rsi]	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x40000a9	    0xf6843f000000	            test byte [rdi + rdi], 0x40 	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x40000b1	            0x7506	                           jne 0x40000b9	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x40000b3	        0x4080ff2c	                           cmp dil, 0x2c	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x40000b7	            0x7528	                           jne 0x40000e1	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x40000b9	          0x4829c6	                            sub rsi, rax	       675	disassemble.c	FUNCTION_4	FOR_1
0x40000bc	         0xf1f4000	                         nop dword [rax]	       675	disassemble.c	FUNCTION_4	FOR_1
0x40000c0	          0x4885d2	                           test rdx, rdx	       671	disassemble.c	FUNCTION_4	FOR_1	CALL_1
0x40000c3	      0xc644160100	             mov byte [rsi + rdx + 1], 0	       675	disassemble.c	FUNCTION_4	FOR_1
0x40000c8	            0x7417	                            je 0x40000e1	       671	disassemble.c	FUNCTION_4	FOR_1	CALL_1
0x40000ca	        0x4883ea01	                              sub rdx, 1	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x40000ce	      0x410fb60414	             movzx eax, byte [r12 + rdx]	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x40000d3	    0xf68400000000	            test byte [rax + rax], 0x40 	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x40000db	            0x75e3	                           jne 0x40000c0	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x40000dd	            0x3c2c	                            cmp al, 0x2c	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x40000df	            0x74df	                            je 0x40000c0	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x40000e1	      0x410fb61424	                   movzx edx, byte [r12]	       679	disassemble.c	FUNCTION_4	FOR_2
0x40000e6	          0x4c89e1	                            mov rcx, r12	       679	disassemble.c	FUNCTION_4	FOR_2
0x40000e9	            0x84d2	                             test dl, dl	       679	disassemble.c	FUNCTION_4	FOR_2
0x40000eb	     0xf84b2000000	                            je 0x40001a3	       679	disassemble.c	FUNCTION_4	FOR_2
0x40000f1	     0xf1f80000000	                         nop dword [rax]	       679	disassemble.c	FUNCTION_4	FOR_2
0x40000f8	    0xf68412000000	            test byte [rdx + rdx], 0x40 	       680	disassemble.c	FUNCTION_4	FOR_2	IF_3	CALL_3
0x4000100	            0x7403	                            je 0x4000105	       680	disassemble.c	FUNCTION_4	FOR_2	IF_3	CALL_3
0x4000102	          0xc6012c	                    mov byte [rcx], 0x2c	       681	disassemble.c	FUNCTION_4	FOR_2	IF_3
0x4000105	        0x4883c101	                              add rcx, 1	       679	disassemble.c	FUNCTION_4	FOR_2
0x4000109	           0xfb611	                   movzx edx, byte [rcx]	       679	disassemble.c	FUNCTION_4	FOR_2
0x400010c	            0x84d2	                             test dl, dl	       679	disassemble.c	FUNCTION_4	FOR_2
0x400010e	            0x75e8	                           jne 0x40000f8	       679	disassemble.c	FUNCTION_4	FOR_2
0x4000110	      0x410fb61424	                   movzx edx, byte [r12]	       684	disassemble.c	FUNCTION_4	FOR_3
0x4000115	            0x84d2	                             test dl, dl	       684	disassemble.c	FUNCTION_4	FOR_3
0x4000117	     0xf8486000000	                            je 0x40001a3	       684	disassemble.c	FUNCTION_4	FOR_3
0x400011d	          0x4c89e3	                            mov rbx, r12	       684	disassemble.c	FUNCTION_4	FOR_3
0x4000120	            0xeb0e	                           jmp 0x4000130	       684	disassemble.c	FUNCTION_4	FOR_3
0x4000122	    0x660f1f440000	                    nop word [rax + rax]	       684	disassemble.c	FUNCTION_4	FOR_3
0x4000128	        0x4883c301	                              add rbx, 1	       684	disassemble.c	FUNCTION_4	FOR_3
0x400012c	            0x84d2	                             test dl, dl	       684	disassemble.c	FUNCTION_4	FOR_3
0x400012e	            0x7460	                            je 0x4000190	       684	disassemble.c	FUNCTION_4	FOR_3
0x4000130	          0x80fa2c	                            cmp dl, 0x2c	       685	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x4000133	         0xfb65301	               movzx edx, byte [rbx + 1]	       685	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x4000137	            0x75ef	                           jne 0x4000128	       685	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x4000139	          0x80fa2c	                            cmp dl, 0x2c	       685	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x400013c	            0x7405	                            je 0x4000143	       685	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x400013e	          0x4939dc	                            cmp r12, rbx	       685	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x4000141	            0x75e5	                           jne 0x4000128	       685	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x4000143	        0x4c8d6b01	                      lea r13, [rbx + 1]	       687	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x4000147	          0x80fa2c	                            cmp dl, 0x2c	       688	disassemble.c	FUNCTION_4	FOR_3	IF_4	WHILE_1
0x400014a	          0x4c89ed	                            mov rbp, r13	       688	disassemble.c	FUNCTION_4	FOR_3	IF_4	WHILE_1
0x400014d	            0x750b	                           jne 0x400015a	       688	disassemble.c	FUNCTION_4	FOR_3	IF_4	WHILE_1
0x400014f	              0x90	                                     nop	       688	disassemble.c	FUNCTION_4	FOR_3	IF_4	WHILE_1
0x4000150	        0x4883c501	                              add rbp, 1	       689	disassemble.c	FUNCTION_4	FOR_3	IF_4	WHILE_1
0x4000154	        0x807d002c	                    cmp byte [rbp], 0x2c	       688	disassemble.c	FUNCTION_4	FOR_3	IF_4	WHILE_1
0x4000158	            0x74f6	                            je 0x4000150	       688	disassemble.c	FUNCTION_4	FOR_3	IF_4	WHILE_1
0x400015a	          0x4889ef	                            mov rdi, rbp	       690	disassemble.c	FUNCTION_4	FOR_3	IF_4	CALL_4
0x400015d	      0xe800000000	                          call 0x4000162	       690	disassemble.c	FUNCTION_4	FOR_3	IF_4	CALL_4
0x4000162	          0x4939dc	                            cmp r12, rbx	       691	disassemble.c	FUNCTION_4	FOR_3	IF_4	IF_5
0x4000165	          0x4989c6	                            mov r14, rax	       690	disassemble.c	FUNCTION_4	FOR_3	IF_4	CALL_4
0x4000168	          0x4889c2	                            mov rdx, rax	        59	string3.h	FUNCTION_7	CALL_3
0x400016b	        0x4d0f44ec	                          cmove r13, r12	       691	disassemble.c	FUNCTION_4	FOR_3	IF_4	IF_5
0x400016f	          0x4889ee	                            mov rsi, rbp	        59	string3.h	FUNCTION_7	CALL_3
0x4000172	          0x4c89ef	                            mov rdi, r13	        59	string3.h	FUNCTION_7	CALL_3
0x4000175	          0x4c89eb	                            mov rbx, r13	       694	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x4000178	      0xe800000000	                          call 0x400017d	        59	string3.h	FUNCTION_7	CALL_3
0x400017d	    0x43c644350000	                 mov byte [r13 + r14], 0	       694	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x4000183	      0x410fb65501	               movzx edx, byte [r13 + 1]	       694	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x4000188	        0x4883c301	                              add rbx, 1	       684	disassemble.c	FUNCTION_4	FOR_3
0x400018c	            0x84d2	                             test dl, dl	       684	disassemble.c	FUNCTION_4	FOR_3
0x400018e	            0x75a0	                           jne 0x4000130	       684	disassemble.c	FUNCTION_4	FOR_3
0x4000190	      0x41803c2400	                       cmp byte [r12], 0	       696	disassemble.c	FUNCTION_4	CALL_6
0x4000195	            0x740c	                            je 0x40001a3	       696	disassemble.c	FUNCTION_4	CALL_6
0x4000197	              0x5b	                                 pop rbx	       697	disassemble.c	FUNCTION_4
0x4000198	          0x4c89e0	                            mov rax, r12	       697	disassemble.c	FUNCTION_4
0x400019b	              0x5d	                                 pop rbp	       697	disassemble.c	FUNCTION_4
0x400019c	            0x415c	                                 pop r12	       697	disassemble.c	FUNCTION_4
0x400019e	            0x415d	                                 pop r13	       697	disassemble.c	FUNCTION_4
0x40001a0	            0x415e	                                 pop r14	       697	disassemble.c	FUNCTION_4
0x40001a2	              0xc3	                                     ret	       697	disassemble.c	FUNCTION_4
0x40001a3	              0x5b	                                 pop rbx	       697	disassemble.c	FUNCTION_4
0x40001a4	            0x31c0	                            xor eax, eax	       668	disassemble.c	FUNCTION_4	IF_1
0x40001a6	              0x5d	                                 pop rbp	       697	disassemble.c	FUNCTION_4
0x40001a7	            0x415c	                                 pop r12	       697	disassemble.c	FUNCTION_4
0x40001a9	            0x415d	                                 pop r13	       697	disassemble.c	FUNCTION_4
0x40001ab	            0x415e	                                 pop r14	       697	disassemble.c	FUNCTION_4
0x40001ad	              0xc3	                                     ret	       697	disassemble.c	FUNCTION_4
0x40001ae	            0x31c0	                            xor eax, eax	       668	disassemble.c	FUNCTION_4	IF_1
0x40001b0	              0xc3	                                     ret	       697	disassemble.c	FUNCTION_4
disassembler_usage	functions,0:WHILE,0:CALL,10:DO,0:SWITCH,0:IF,0:FOR,0:ELSE,0	1
0x4000060	      0xe900000000	                           jmp 0x4000065	       561	disassemble.c	ELSE_8	FUNCTION_2	CALL_8
disassembler_options_cmp	functions,0:WHILE,0:CALL,0:DO,1:SWITCH,0:IF,3:FOR,0:ELSE,0	26
0x40001c0	        0x4883c601	                              add rsi, 1	       704	disassemble.c	FUNCTION_5
0x40001c4	            0x31c9	                            xor ecx, ecx	       714	disassemble.c	FUNCTION_5	DO_1	IF_2
0x40001c6	        0x4883c701	                              add rdi, 1	       709	disassemble.c	FUNCTION_5	DO_1
0x40001ca	         0xfb647ff	               movzx eax, byte [rdi - 1]	       709	disassemble.c	FUNCTION_5	DO_1
0x40001ce	            0x3c2c	                            cmp al, 0x2c	       710	disassemble.c	FUNCTION_5	DO_1	IF_1
0x40001d0	            0x741e	                            je 0x40001f0	       710	disassemble.c	FUNCTION_5	DO_1	IF_1
0x40001d2	         0xfb656ff	               movzx edx, byte [rsi - 1]	       712	disassemble.c	FUNCTION_5	DO_1
0x40001d6	          0x80fa2c	                            cmp dl, 0x2c	       714	disassemble.c	FUNCTION_5	DO_1	IF_2
0x40001d9	           0xf44d1	                          cmove edx, ecx	       714	disassemble.c	FUNCTION_5	DO_1	IF_2
0x40001dc	            0x84c0	                             test al, al	       715	disassemble.c	FUNCTION_5	DO_1	IF_3
0x40001de	            0x7419	                            je 0x40001f9	       715	disassemble.c	FUNCTION_5	DO_1	IF_3
0x40001e0	        0x4883c601	                              add rsi, 1	       715	disassemble.c	FUNCTION_5	DO_1	IF_3
0x40001e4	            0x38c2	                              cmp dl, al	       718	disassemble.c	FUNCTION_5
0x40001e6	            0x74de	                            je 0x40001c6	       718	disassemble.c	FUNCTION_5
0x40001e8	            0x29d0	                            sub eax, edx	       720	disassemble.c	FUNCTION_5
0x40001ea	              0xc3	                                     ret	       720	disassemble.c	FUNCTION_5
0x40001eb	       0xf1f440000	                   nop dword [rax + rax]	       720	disassemble.c	FUNCTION_5
0x40001f0	         0xfb656ff	               movzx edx, byte [rsi - 1]	       712	disassemble.c	FUNCTION_5	DO_1
0x40001f4	          0x80fa2c	                            cmp dl, 0x2c	       713	disassemble.c	FUNCTION_5	DO_1	IF_2
0x40001f7	            0x7407	                            je 0x4000200	       713	disassemble.c	FUNCTION_5	DO_1	IF_2
0x40001f9	           0xfb6c2	                           movzx eax, dl	       713	disassemble.c	FUNCTION_5	DO_1	IF_2
0x40001fc	            0xf7d8	                                 neg eax	       713	disassemble.c	FUNCTION_5	DO_1	IF_2
0x40001fe	              0xc3	                                     ret	       713	disassemble.c	FUNCTION_5	DO_1	IF_2
0x40001ff	              0x90	                                     nop	       713	disassemble.c	FUNCTION_5	DO_1	IF_2
0x4000200	            0x31c0	                            xor eax, eax	       713	disassemble.c	FUNCTION_5	DO_1	IF_2
0x4000202	              0xc3	                                     ret	       716	disassemble.c	FUNCTION_5	DO_1	IF_3
disassemble_init_for_target	functions,0:WHILE,0:CALL,6:DO,0:SWITCH,1:IF,3:FOR,0:ELSE,1	1
0x4000070	            0xf3c3	                                     ret	       575	disassemble.c	FUNCTION_3
disassembler	functions,0:WHILE,0:CALL,3:DO,0:SWITCH,1:IF,8:FOR,0:ELSE,8	6
0x4000040	          0x83ef08	                              sub edi, 8	       115	disassemble.c	FUNCTION_1	SWITCH_1
0x4000043	      0xba00000000	                              mov edx, 0	       533	disassemble.c	FUNCTION_1	ELSE_8
0x4000048	      0xb800000000	                              mov eax, 0	       533	disassemble.c	FUNCTION_1	ELSE_8
0x400004d	          0x83ff03	                              cmp edi, 3	       533	disassemble.c	FUNCTION_1	ELSE_8
0x4000050	        0x480f47c2	                          cmova rax, rdx	       533	disassemble.c	FUNCTION_1	ELSE_8
0x4000054	              0xc3	                                     ret	       534	disassemble.c	FUNCTION_1	ELSE_8
