warn	FOR,0:DO,0:WHILE,0:SWITCH,0:IF,0:CALL,5:ELSE,0:functions,0	54
0x40005f0	              0x55	                                push rbp	        49	elfcomm.c	FUNCTION_2
0x40005f1	              0x53	                                push rbx	        49	elfcomm.c	FUNCTION_2
0x40005f2	          0x4889fb	                            mov rbx, rdi	        49	elfcomm.c	FUNCTION_2
0x40005f5	    0x4881ecd80000	                           sub rsp, 0xd8	        49	elfcomm.c	FUNCTION_2
0x40005fc	            0x84c0	                             test al, al	        49	elfcomm.c	FUNCTION_2
0x40005fe	      0x4889742428	             mov qword [rsp + 0x28], rsi	        49	elfcomm.c	FUNCTION_2
0x4000603	      0x4889542430	             mov qword [rsp + 0x30], rdx	        49	elfcomm.c	FUNCTION_2
0x4000608	      0x48894c2438	             mov qword [rsp + 0x38], rcx	        49	elfcomm.c	FUNCTION_2
0x400060d	      0x4c89442440	              mov qword [rsp + 0x40], r8	        49	elfcomm.c	FUNCTION_2
0x4000612	      0x4c894c2448	              mov qword [rsp + 0x48], r9	        49	elfcomm.c	FUNCTION_2
0x4000617	            0x7437	                            je 0x4000650	        49	elfcomm.c	FUNCTION_2
0x4000619	       0xf29442450	       movaps xmmword [rsp + 0x50], xmm0	        49	elfcomm.c	FUNCTION_2
0x400061e	       0xf294c2460	       movaps xmmword [rsp + 0x60], xmm1	        49	elfcomm.c	FUNCTION_2
0x4000623	       0xf29542470	       movaps xmmword [rsp + 0x70], xmm2	        49	elfcomm.c	FUNCTION_2
0x4000628	     0xf299c248000	       movaps xmmword [rsp + 0x80], xmm3	        49	elfcomm.c	FUNCTION_2
0x4000630	     0xf29a4249000	       movaps xmmword [rsp + 0x90], xmm4	        49	elfcomm.c	FUNCTION_2
0x4000638	     0xf29ac24a000	       movaps xmmword [rsp + 0xa0], xmm5	        49	elfcomm.c	FUNCTION_2
0x4000640	     0xf29b424b000	       movaps xmmword [rsp + 0xb0], xmm6	        49	elfcomm.c	FUNCTION_2
0x4000648	     0xf29bc24c000	       movaps xmmword [rsp + 0xc0], xmm7	        49	elfcomm.c	FUNCTION_2
0x4000650	    0x64488b042528	                mov rax, qword fs:[0x28]	        49	elfcomm.c	FUNCTION_2
0x4000659	      0x4889442418	             mov qword [rsp + 0x18], rax	        49	elfcomm.c	FUNCTION_2
0x400065e	            0x31c0	                            xor eax, eax	        49	elfcomm.c	FUNCTION_2
0x4000660	    0x488b3d000000	            mov rdi, qword [0x04000667] 	        53	elfcomm.c	FUNCTION_2	CALL_1
0x4000667	      0xe800000000	                          call 0x400066c	        53	elfcomm.c	FUNCTION_2	CALL_1
0x400066c	    0x488d8424f000	                   lea rax, [rsp + 0xf0]	        55	elfcomm.c	FUNCTION_2	CALL_2
0x4000674	            0x31ff	                            xor edi, edi	        56	elfcomm.c	FUNCTION_2	CALL_3
0x4000676	    0x488b2d000000	            mov rbp, qword [0x0400067d] 	        56	elfcomm.c	FUNCTION_2	CALL_3
0x400067d	      0xba05000000	                              mov edx, 5	        56	elfcomm.c	FUNCTION_2	CALL_3
0x4000682	      0xbe00000000	                              mov esi, 0	        56	elfcomm.c	FUNCTION_2	CALL_3
0x4000687	    0xc70424080000	                      mov dword [rsp], 8	        55	elfcomm.c	FUNCTION_2	CALL_2
0x400068e	      0x4889442408	                mov qword [rsp + 8], rax	        55	elfcomm.c	FUNCTION_2	CALL_2
0x4000693	      0x488d442420	                   lea rax, [rsp + 0x20]	        55	elfcomm.c	FUNCTION_2	CALL_2
0x4000698	    0xc74424043000	               mov dword [rsp + 4], 0x30	        55	elfcomm.c	FUNCTION_2	CALL_2
0x40006a0	      0x4889442410	             mov qword [rsp + 0x10], rax	        55	elfcomm.c	FUNCTION_2	CALL_2
0x40006a5	      0xe800000000	                          call 0x40006aa	        56	elfcomm.c	FUNCTION_2	CALL_3
0x40006aa	    0x488b3d000000	            mov rdi, qword [0x040006b1] 	        97	stdio2.h	CALL_10
0x40006b1	          0x4889c2	                            mov rdx, rax	        97	stdio2.h	CALL_10
0x40006b4	          0x4889e9	                            mov rcx, rbp	        97	stdio2.h	CALL_10
0x40006b7	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_10
0x40006bc	            0x31c0	                            xor eax, eax	        97	stdio2.h	CALL_10
0x40006be	      0xe800000000	                          call 0x40006c3	        97	stdio2.h	CALL_10
0x40006c3	    0x488b3d000000	            mov rdi, qword [0x040006ca] 	       127	stdio2.h	FUNCTION_22	CALL_1
0x40006ca	          0x4889e1	                            mov rcx, rsp	       127	stdio2.h	FUNCTION_22	CALL_1
0x40006cd	          0x4889da	                            mov rdx, rbx	       127	stdio2.h	FUNCTION_22	CALL_1
0x40006d0	      0xbe01000000	                              mov esi, 1	       127	stdio2.h	FUNCTION_22	CALL_1
0x40006d5	      0xe800000000	                          call 0x40006da	       127	stdio2.h	FUNCTION_22	CALL_1
0x40006da	      0x488b442418	            mov rax, qword [rsp + 0x18] 	        59	elfcomm.c	FUNCTION_2
0x40006df	    0x644833042528	                xor rax, qword fs:[0x28]	        59	elfcomm.c	FUNCTION_2
0x40006e8	            0x750a	                           jne 0x40006f4	        59	elfcomm.c	FUNCTION_2
0x40006ea	    0x4881c4d80000	                           add rsp, 0xd8	        59	elfcomm.c	FUNCTION_2
0x40006f1	              0x5b	                                 pop rbx	        59	elfcomm.c	FUNCTION_2
0x40006f2	              0x5d	                                 pop rbp	        59	elfcomm.c	FUNCTION_2
0x40006f3	              0xc3	                                     ret	        59	elfcomm.c	FUNCTION_2
0x40006f4	      0xe800000000	                          call 0x40006f9	        59	elfcomm.c	FUNCTION_2
process_archive_index_and_symbols	FOR,1:DO,0:WHILE,0:SWITCH,0:IF,13:CALL,39:ELSE,1:functions,0	225
0x4000260	            0x4157	                                push r15	       466	elfcomm.c	FUNCTION_10
0x4000262	            0x4156	                                push r14	       466	elfcomm.c	FUNCTION_10
0x4000264	            0x4155	                                push r13	       466	elfcomm.c	FUNCTION_10
0x4000266	            0x4154	                                push r12	       466	elfcomm.c	FUNCTION_10
0x4000268	          0x4189d5	                           mov r13d, edx	       466	elfcomm.c	FUNCTION_10
0x400026b	              0x55	                                push rbp	       466	elfcomm.c	FUNCTION_10
0x400026c	              0x53	                                push rbx	       466	elfcomm.c	FUNCTION_10
0x400026d	          0x4189f4	                           mov r12d, esi	       466	elfcomm.c	FUNCTION_10
0x4000270	          0x4889fb	                            mov rbx, rdi	       466	elfcomm.c	FUNCTION_10
0x4000273	            0x31f6	                            xor esi, esi	       473	elfcomm.c	FUNCTION_10	CALL_1
0x4000275	    0x4881c7880000	                           add rdi, 0x88	       473	elfcomm.c	FUNCTION_10	CALL_1
0x400027c	        0x4883ec28	                           sub rsp, 0x28	       466	elfcomm.c	FUNCTION_10
0x4000280	      0x440fb6770a	           movzx r14d, byte [rdi + 0xa] 	       471	elfcomm.c	FUNCTION_10
0x4000285	      0xba0a000000	                            mov edx, 0xa	       473	elfcomm.c	FUNCTION_10	CALL_1
0x400028a	        0xc6470a00	                 mov byte [rdi + 0xa], 0	       472	elfcomm.c	FUNCTION_10
0x400028e	    0x64488b042528	                mov rax, qword fs:[0x28]	       466	elfcomm.c	FUNCTION_10
0x4000297	      0x4889442418	             mov qword [rsp + 0x18], rax	       466	elfcomm.c	FUNCTION_10
0x400029c	            0x31c0	                            xor eax, eax	       466	elfcomm.c	FUNCTION_10
0x400029e	      0xe800000000	                          call 0x40002a3	       473	elfcomm.c	FUNCTION_10	CALL_1
0x40002a3	          0x4885c0	                           test rax, rax	       476	elfcomm.c	FUNCTION_10	IF_1
0x40002a6	          0x4889c5	                            mov rbp, rax	       473	elfcomm.c	FUNCTION_10	CALL_1
0x40002a9	    0x4488b3920000	             mov byte [rbx + 0x92], r14b	       474	elfcomm.c	FUNCTION_10
0x40002b0	     0xf887a010000	                            js 0x4000430	       476	elfcomm.c	FUNCTION_10	IF_1
0x40002b6	          0x83e001	                              and eax, 1	       483	elfcomm.c	FUNCTION_10
0x40002b9	          0x4801c5	                            add rbp, rax	       483	elfcomm.c	FUNCTION_10
0x40002bc	        0x488b4348	            mov rax, qword [rbx + 0x48] 	       485	elfcomm.c	FUNCTION_10
0x40002c0	          0x4585ed	                         test r13d, r13d	       487	elfcomm.c	FUNCTION_10	IF_2
0x40002c3	      0x488d44053c	            lea rax, [rbp + rax + 0x3c] 	       485	elfcomm.c	FUNCTION_10
0x40002c8	        0x48894348	             mov qword [rbx + 0x48], rax	       485	elfcomm.c	FUNCTION_10
0x40002cc	     0xf8486000000	                            je 0x4000358	       487	elfcomm.c	FUNCTION_10	IF_2
0x40002d2	        0x4183fc08	                             cmp r12d, 8	       505	elfcomm.c	FUNCTION_10	ELSE_1	CALL_7
0x40002d6	     0xf87ef020000	                            ja 0x40005cb	       505	elfcomm.c	FUNCTION_10	ELSE_1	CALL_7
0x40002dc	          0x4589e5	                          mov r13d, r12d	       508	elfcomm.c	FUNCTION_10	ELSE_1	IF_4
0x40002df	          0x4c39ed	                            cmp rbp, r13	       508	elfcomm.c	FUNCTION_10	ELSE_1	IF_4
0x40002e2	     0xf82c0000000	                            jb 0x40003a8	       508	elfcomm.c	FUNCTION_10	ELSE_1	IF_4
0x40002e8	        0x4c8b4308	                 mov r8, qword [rbx + 8]	       290	stdio2.h	FUNCTION_31	IF_1	CALL_5
0x40002ec	      0x488d7c2410	                   lea rdi, [rsp + 0x10]	       290	stdio2.h	FUNCTION_31	IF_1	CALL_5
0x40002f1	          0x4c89e9	                            mov rcx, r13	       290	stdio2.h	FUNCTION_31	IF_1	CALL_5
0x40002f4	      0xba01000000	                              mov edx, 1	       290	stdio2.h	FUNCTION_31	IF_1	CALL_5
0x40002f9	      0xbe08000000	                              mov esi, 8	       290	stdio2.h	FUNCTION_31	IF_1	CALL_5
0x40002fe	      0xe800000000	                          call 0x4000303	       290	stdio2.h	FUNCTION_31	IF_1	CALL_5
0x4000303	          0x4939c5	                            cmp r13, rax	       516	elfcomm.c	FUNCTION_10	ELSE_1	IF_5
0x4000306	     0xf84c4000000	                            je 0x40003d0	       516	elfcomm.c	FUNCTION_10	ELSE_1	IF_5
0x400030c	          0x488b1b	                    mov rbx, qword [rbx]	       547	elfcomm.c	FUNCTION_10	ELSE_1	IF_8	CALL_22
0x400030f	      0xba05000000	                              mov edx, 5	       547	elfcomm.c	FUNCTION_10	ELSE_1	IF_8	CALL_22
0x4000314	      0xbe00000000	                              mov esi, 0	       547	elfcomm.c	FUNCTION_10	ELSE_1	IF_8	CALL_22
0x4000319	            0x31ff	                            xor edi, edi	       588	elfcomm.c	FUNCTION_10	ELSE_1	IF_12	CALL_36
0x400031b	      0xe800000000	                          call 0x4000320	       588	elfcomm.c	FUNCTION_10	ELSE_1	IF_12	CALL_36
0x4000320	          0x4889de	                            mov rsi, rbx	       588	elfcomm.c	FUNCTION_10	ELSE_1	IF_12	CALL_36
0x4000323	          0x4889c7	                            mov rdi, rax	       588	elfcomm.c	FUNCTION_10	ELSE_1	IF_12	CALL_36
0x4000326	            0x31c0	                            xor eax, eax	       588	elfcomm.c	FUNCTION_10	ELSE_1	IF_12	CALL_36
0x4000328	      0xe800000000	                          call 0x400032d	       588	elfcomm.c	FUNCTION_10	ELSE_1	IF_12	CALL_36
0x400032d	            0x31c0	                            xor eax, eax	       511	elfcomm.c	FUNCTION_10	ELSE_1	IF_4
0x400032f	      0x488b4c2418	            mov rcx, qword [rsp + 0x18] 	       604	elfcomm.c	FUNCTION_10
0x4000334	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       604	elfcomm.c	FUNCTION_10
0x400033d	     0xf8583020000	                           jne 0x40005c6	       604	elfcomm.c	FUNCTION_10
0x4000343	        0x4883c428	                           add rsp, 0x28	       604	elfcomm.c	FUNCTION_10
0x4000347	              0x5b	                                 pop rbx	       604	elfcomm.c	FUNCTION_10
0x4000348	              0x5d	                                 pop rbp	       604	elfcomm.c	FUNCTION_10
0x4000349	            0x415c	                                 pop r12	       604	elfcomm.c	FUNCTION_10
0x400034b	            0x415d	                                 pop r13	       604	elfcomm.c	FUNCTION_10
0x400034d	            0x415e	                                 pop r14	       604	elfcomm.c	FUNCTION_10
0x400034f	            0x415f	                                 pop r15	       604	elfcomm.c	FUNCTION_10
0x4000351	              0xc3	                                     ret	       604	elfcomm.c	FUNCTION_10
0x4000352	    0x660f1f440000	                    nop word [rax + rax]	       604	elfcomm.c	FUNCTION_10
0x4000358	        0x488b7b08	                mov rdi, qword [rbx + 8]	       489	elfcomm.c	FUNCTION_10	IF_2	IF_3	CALL_4
0x400035c	      0xba01000000	                              mov edx, 1	       489	elfcomm.c	FUNCTION_10	IF_2	IF_3	CALL_4
0x4000361	          0x4889ee	                            mov rsi, rbp	       489	elfcomm.c	FUNCTION_10	IF_2	IF_3	CALL_4
0x4000364	      0xe800000000	                          call 0x4000369	       489	elfcomm.c	FUNCTION_10	IF_2	IF_3	CALL_4
0x4000369	            0x85c0	                           test eax, eax	       489	elfcomm.c	FUNCTION_10	IF_2	IF_3	CALL_4
0x400036b	     0xf85ef000000	                           jne 0x4000460	       489	elfcomm.c	FUNCTION_10	IF_2	IF_3	CALL_4
0x4000371	        0x488b4b08	                mov rcx, qword [rbx + 8]	       295	stdio2.h	FUNCTION_31	CALL_9
0x4000375	        0x488d7b58	                   lea rdi, [rbx + 0x58]	       595	elfcomm.c	FUNCTION_10	CALL_37
0x4000379	      0xba3c000000	                           mov edx, 0x3c	       295	stdio2.h	FUNCTION_31	CALL_9
0x400037e	      0xbe01000000	                              mov esi, 1	       295	stdio2.h	FUNCTION_31	CALL_9
0x4000383	      0xe800000000	                          call 0x4000388	       295	stdio2.h	FUNCTION_31	CALL_9
0x4000388	        0x4883f83c	                           cmp rax, 0x3c	       596	elfcomm.c	FUNCTION_10	IF_13
0x400038c	            0x7432	                            je 0x40003c0	       596	elfcomm.c	FUNCTION_10	IF_13
0x400038e	          0x4885c0	                           test rax, rax	       596	elfcomm.c	FUNCTION_10	IF_13
0x4000391	            0x742d	                            je 0x40003c0	       596	elfcomm.c	FUNCTION_10	IF_13
0x4000393	          0x488b1b	                    mov rbx, qword [rbx]	       598	elfcomm.c	FUNCTION_10	IF_13	CALL_39
0x4000396	      0xba05000000	                              mov edx, 5	       598	elfcomm.c	FUNCTION_10	IF_13	CALL_39
0x400039b	      0xbe00000000	                              mov esi, 0	       598	elfcomm.c	FUNCTION_10	IF_13	CALL_39
0x40003a0	      0xe974ffffff	                           jmp 0x4000319	       598	elfcomm.c	FUNCTION_10	IF_13	CALL_39
0x40003a5	           0xf1f00	                         nop dword [rax]	       598	elfcomm.c	FUNCTION_10	IF_13	CALL_39
0x40003a8	          0x488b1b	                    mov rbx, qword [rbx]	       510	elfcomm.c	FUNCTION_10	ELSE_1	IF_4	CALL_9
0x40003ab	      0xba05000000	                              mov edx, 5	       510	elfcomm.c	FUNCTION_10	ELSE_1	IF_4	CALL_9
0x40003b0	      0xbe00000000	                              mov esi, 0	       510	elfcomm.c	FUNCTION_10	ELSE_1	IF_4	CALL_9
0x40003b5	      0xe95fffffff	                           jmp 0x4000319	       510	elfcomm.c	FUNCTION_10	ELSE_1	IF_4	CALL_9
0x40003ba	    0x660f1f440000	                    nop word [rax + rax]	       510	elfcomm.c	FUNCTION_10	ELSE_1	IF_4	CALL_9
0x40003c0	      0xb801000000	                              mov eax, 1	       603	elfcomm.c	FUNCTION_10
0x40003c5	      0xe965ffffff	                           jmp 0x400032f	       603	elfcomm.c	FUNCTION_10
0x40003ca	    0x660f1f440000	                    nop word [rax + rax]	       603	elfcomm.c	FUNCTION_10
0x40003d0	      0x488d7c2410	                   lea rdi, [rsp + 0x10]	       522	elfcomm.c	FUNCTION_10	ELSE_1	CALL_13
0x40003d5	          0x4489e6	                           mov esi, r12d	       522	elfcomm.c	FUNCTION_10	ELSE_1	CALL_13
0x40003d8	          0x4c29ed	                            sub rbp, r13	       523	elfcomm.c	FUNCTION_10	ELSE_1
0x40003db	      0xe800000000	                          call 0x40003e0	       522	elfcomm.c	FUNCTION_10	ELSE_1	CALL_13
0x40003e0	          0x4c89ef	                            mov rdi, r13	       525	elfcomm.c	FUNCTION_10	ELSE_1	IF_6
0x40003e3	          0x4989c7	                            mov r15, rax	       522	elfcomm.c	FUNCTION_10	ELSE_1	CALL_13
0x40003e6	        0x48894310	             mov qword [rbx + 0x10], rax	       522	elfcomm.c	FUNCTION_10	ELSE_1	CALL_13
0x40003ea	        0x480faff8	                           imul rdi, rax	       525	elfcomm.c	FUNCTION_10	ELSE_1	IF_6
0x40003ee	          0x4839fd	                            cmp rbp, rdi	       527	elfcomm.c	FUNCTION_10	ELSE_1	IF_6
0x40003f1	            0x7209	                            jb 0x40003fc	       527	elfcomm.c	FUNCTION_10	ELSE_1	IF_6
0x40003f3	          0x4839e8	                            cmp rax, rbp	       527	elfcomm.c	FUNCTION_10	ELSE_1	IF_6
0x40003f6	     0xf867c000000	                           jbe 0x4000478	       527	elfcomm.c	FUNCTION_10	ELSE_1	IF_6
0x40003fc	          0x488b1b	                    mov rbx, qword [rbx]	       529	elfcomm.c	FUNCTION_10	ELSE_1	IF_6	CALL_15
0x40003ff	            0x31ff	                            xor edi, edi	       529	elfcomm.c	FUNCTION_10	ELSE_1	IF_6	CALL_15
0x4000401	      0xba05000000	                              mov edx, 5	       529	elfcomm.c	FUNCTION_10	ELSE_1	IF_6	CALL_15
0x4000406	      0xbe00000000	                              mov esi, 0	       529	elfcomm.c	FUNCTION_10	ELSE_1	IF_6	CALL_15
0x400040b	      0xe800000000	                          call 0x4000410	       529	elfcomm.c	FUNCTION_10	ELSE_1	IF_6	CALL_15
0x4000410	          0x4989e8	                             mov r8, rbp	       529	elfcomm.c	FUNCTION_10	ELSE_1	IF_6	CALL_15
0x4000413	          0x4889c7	                            mov rdi, rax	       529	elfcomm.c	FUNCTION_10	ELSE_1	IF_6	CALL_15
0x4000416	          0x4489e1	                           mov ecx, r12d	       529	elfcomm.c	FUNCTION_10	ELSE_1	IF_6	CALL_15
0x4000419	          0x4c89fa	                            mov rdx, r15	       529	elfcomm.c	FUNCTION_10	ELSE_1	IF_6	CALL_15
0x400041c	          0x4889de	                            mov rsi, rbx	       529	elfcomm.c	FUNCTION_10	ELSE_1	IF_6	CALL_15
0x400041f	            0x31c0	                            xor eax, eax	       529	elfcomm.c	FUNCTION_10	ELSE_1	IF_6	CALL_15
0x4000421	      0xe800000000	                          call 0x4000426	       529	elfcomm.c	FUNCTION_10	ELSE_1	IF_6	CALL_15
0x4000426	      0xe902ffffff	                           jmp 0x400032d	       531	elfcomm.c	FUNCTION_10	ELSE_1	IF_6
0x400042b	       0xf1f440000	                   nop dword [rax + rax]	       531	elfcomm.c	FUNCTION_10	ELSE_1	IF_6
0x4000430	          0x488b1b	                    mov rbx, qword [rbx]	       478	elfcomm.c	FUNCTION_10	IF_1	CALL_3
0x4000433	      0xba05000000	                              mov edx, 5	       478	elfcomm.c	FUNCTION_10	IF_1	CALL_3
0x4000438	      0xbe00000000	                              mov esi, 0	       478	elfcomm.c	FUNCTION_10	IF_1	CALL_3
0x400043d	            0x31ff	                            xor edi, edi	       478	elfcomm.c	FUNCTION_10	IF_1	CALL_3
0x400043f	      0xe800000000	                          call 0x4000444	       478	elfcomm.c	FUNCTION_10	IF_1	CALL_3
0x4000444	          0x4889ea	                            mov rdx, rbp	       478	elfcomm.c	FUNCTION_10	IF_1	CALL_3
0x4000447	          0x4889c7	                            mov rdi, rax	       478	elfcomm.c	FUNCTION_10	IF_1	CALL_3
0x400044a	          0x4889de	                            mov rsi, rbx	       478	elfcomm.c	FUNCTION_10	IF_1	CALL_3
0x400044d	            0x31c0	                            xor eax, eax	       478	elfcomm.c	FUNCTION_10	IF_1	CALL_3
0x400044f	      0xe800000000	                          call 0x4000454	       478	elfcomm.c	FUNCTION_10	IF_1	CALL_3
0x4000454	            0x31c0	                            xor eax, eax	       480	elfcomm.c	FUNCTION_10	IF_1
0x4000456	      0xe9d4feffff	                           jmp 0x400032f	       480	elfcomm.c	FUNCTION_10	IF_1
0x400045b	       0xf1f440000	                   nop dword [rax + rax]	       480	elfcomm.c	FUNCTION_10	IF_1
0x4000460	          0x488b1b	                    mov rbx, qword [rbx]	       491	elfcomm.c	FUNCTION_10	IF_2	IF_3	CALL_6
0x4000463	      0xba05000000	                              mov edx, 5	       491	elfcomm.c	FUNCTION_10	IF_2	IF_3	CALL_6
0x4000468	      0xbe00000000	                              mov esi, 0	       491	elfcomm.c	FUNCTION_10	IF_2	IF_3	CALL_6
0x400046d	      0xe9a7feffff	                           jmp 0x4000319	       491	elfcomm.c	FUNCTION_10	IF_2	IF_3	CALL_6
0x4000472	    0x660f1f440000	                    nop word [rax + rax]	       491	elfcomm.c	FUNCTION_10	IF_2	IF_3	CALL_6
0x4000478	      0xe800000000	                          call 0x400047d	       535	elfcomm.c	FUNCTION_10	ELSE_1
0x400047d	          0x4885c0	                           test rax, rax	       537	elfcomm.c	FUNCTION_10	ELSE_1	IF_7
0x4000480	        0x48890424	                    mov qword [rsp], rax	       535	elfcomm.c	FUNCTION_10	ELSE_1
0x4000484	      0xba05000000	                              mov edx, 5	       539	elfcomm.c	FUNCTION_10	ELSE_1	IF_7	CALL_18
0x4000489	      0xbe00000000	                              mov esi, 0	       539	elfcomm.c	FUNCTION_10	ELSE_1	IF_7	CALL_18
0x400048e	     0xf8407010000	                            je 0x400059b	       537	elfcomm.c	FUNCTION_10	ELSE_1	IF_7
0x4000494	        0x4c8b3424	                    mov r14, qword [rsp]	       295	stdio2.h	FUNCTION_31	CALL_9
0x4000498	        0x488b4b08	                mov rcx, qword [rbx + 8]	       295	stdio2.h	FUNCTION_31	CALL_9
0x400049c	          0x4c89fa	                            mov rdx, r15	       295	stdio2.h	FUNCTION_31	CALL_9
0x400049f	          0x4c89ee	                            mov rsi, r13	       295	stdio2.h	FUNCTION_31	CALL_9
0x40004a2	          0x4c89f7	                            mov rdi, r14	       295	stdio2.h	FUNCTION_31	CALL_9
0x40004a5	      0xe800000000	                          call 0x40004aa	       295	stdio2.h	FUNCTION_31	CALL_9
0x40004aa	        0x4c8b7b10	            mov r15, qword [rbx + 0x10] 	       544	elfcomm.c	FUNCTION_10	ELSE_1	IF_8
0x40004ae	          0x4939c7	                            cmp r15, rax	       544	elfcomm.c	FUNCTION_10	ELSE_1	IF_8
0x40004b1	            0x740d	                            je 0x40004c0	       544	elfcomm.c	FUNCTION_10	ELSE_1	IF_8
0x40004b3	          0x4c89f7	                            mov rdi, r14	       546	elfcomm.c	FUNCTION_10	ELSE_1	IF_8	CALL_20
0x40004b6	      0xe800000000	                          call 0x40004bb	       546	elfcomm.c	FUNCTION_10	ELSE_1	IF_8	CALL_20
0x40004bb	      0xe94cfeffff	                           jmp 0x400030c	       546	elfcomm.c	FUNCTION_10	ELSE_1	IF_8	CALL_20
0x40004c0	          0x4c89e8	                            mov rax, r13	       551	elfcomm.c	FUNCTION_10	ELSE_1
0x40004c3	    0x4a8d3cfd0000	                        lea rdi, [r15*8]	       555	elfcomm.c	FUNCTION_10	ELSE_1	CALL_23
0x40004cb	        0x490fafc7	                           imul rax, r15	       551	elfcomm.c	FUNCTION_10	ELSE_1
0x40004cf	          0x4829c5	                            sub rbp, rax	       551	elfcomm.c	FUNCTION_10	ELSE_1
0x40004d2	      0x48896c2408	                mov qword [rsp + 8], rbp	       551	elfcomm.c	FUNCTION_10	ELSE_1
0x40004d7	      0xe800000000	                          call 0x40004dc	       555	elfcomm.c	FUNCTION_10	ELSE_1	CALL_23
0x40004dc	          0x4885c0	                           test rax, rax	       556	elfcomm.c	FUNCTION_10	ELSE_1	IF_9
0x40004df	        0x48894318	             mov qword [rbx + 0x18], rax	       554	elfcomm.c	FUNCTION_10	ELSE_1
0x40004e3	     0xf84c8000000	                            je 0x40005b1	       556	elfcomm.c	FUNCTION_10	ELSE_1	IF_9
0x40004e9	          0x4d85ff	                           test r15, r15	       563	elfcomm.c	FUNCTION_10	ELSE_1	FOR_1
0x40004ec	            0x7435	                            je 0x4000523	       563	elfcomm.c	FUNCTION_10	ELSE_1	FOR_1
0x40004ee	        0x488b2c24	                    mov rbp, qword [rsp]	       563	elfcomm.c	FUNCTION_10	ELSE_1	FOR_1
0x40004f2	          0x4531ff	                          xor r15d, r15d	       563	elfcomm.c	FUNCTION_10	ELSE_1	FOR_1
0x40004f5	            0xeb0d	                           jmp 0x4000504	       563	elfcomm.c	FUNCTION_10	ELSE_1	FOR_1
0x40004f7	    0x660f1f840000	                    nop word [rax + rax]	       563	elfcomm.c	FUNCTION_10	ELSE_1	FOR_1
0x4000500	        0x488b4318	            mov rax, qword [rbx + 0x18] 	       563	elfcomm.c	FUNCTION_10	ELSE_1	FOR_1
0x4000504	        0x4e8d34f8	                  lea r14, [rax + r15*8]	       564	elfcomm.c	FUNCTION_10	ELSE_1	FOR_1
0x4000508	          0x4889ef	                            mov rdi, rbp	       565	elfcomm.c	FUNCTION_10	ELSE_1	FOR_1	CALL_27
0x400050b	          0x4489e6	                           mov esi, r12d	       565	elfcomm.c	FUNCTION_10	ELSE_1	FOR_1	CALL_27
0x400050e	      0xe800000000	                          call 0x4000513	       565	elfcomm.c	FUNCTION_10	ELSE_1	FOR_1	CALL_27
0x4000513	        0x4983c701	                              add r15, 1	       563	elfcomm.c	FUNCTION_10	ELSE_1	FOR_1
0x4000517	          0x498906	                    mov qword [r14], rax	       564	elfcomm.c	FUNCTION_10	ELSE_1	FOR_1
0x400051a	          0x4c01ed	                            add rbp, r13	       564	elfcomm.c	FUNCTION_10	ELSE_1	FOR_1
0x400051d	        0x4c397b10	            cmp qword [rbx + 0x10], r15 	       563	elfcomm.c	FUNCTION_10	ELSE_1	FOR_1
0x4000521	            0x77dd	                            ja 0x4000500	       563	elfcomm.c	FUNCTION_10	ELSE_1	FOR_1
0x4000523	        0x488b3c24	                    mov rdi, qword [rsp]	       567	elfcomm.c	FUNCTION_10	ELSE_1	CALL_28
0x4000527	      0xe800000000	                          call 0x400052c	       567	elfcomm.c	FUNCTION_10	ELSE_1	CALL_28
0x400052c	    0x48837c240800	                  cmp qword [rsp + 8], 0	       570	elfcomm.c	FUNCTION_10	ELSE_1	IF_10
0x4000532	            0x7512	                           jne 0x4000546	       570	elfcomm.c	FUNCTION_10	ELSE_1	IF_10
0x4000534	          0x488b1b	                    mov rbx, qword [rbx]	       572	elfcomm.c	FUNCTION_10	ELSE_1	IF_10	CALL_30
0x4000537	      0xba05000000	                              mov edx, 5	       572	elfcomm.c	FUNCTION_10	ELSE_1	IF_10	CALL_30
0x400053c	      0xbe00000000	                              mov esi, 0	       572	elfcomm.c	FUNCTION_10	ELSE_1	IF_10	CALL_30
0x4000541	      0xe9d3fdffff	                           jmp 0x4000319	       572	elfcomm.c	FUNCTION_10	ELSE_1	IF_10	CALL_30
0x4000546	      0x488b7c2408	                mov rdi, qword [rsp + 8]	       577	elfcomm.c	FUNCTION_10	ELSE_1	CALL_31
0x400054b	      0xe800000000	                          call 0x4000550	       577	elfcomm.c	FUNCTION_10	ELSE_1	CALL_31
0x4000550	          0x4885c0	                           test rax, rax	       578	elfcomm.c	FUNCTION_10	ELSE_1	IF_11
0x4000553	        0x48894320	             mov qword [rbx + 0x20], rax	       577	elfcomm.c	FUNCTION_10	ELSE_1	CALL_31
0x4000557	            0x7438	                            je 0x4000591	       578	elfcomm.c	FUNCTION_10	ELSE_1	IF_11
0x4000559	      0x4c8b7c2408	                mov r15, qword [rsp + 8]	       584	elfcomm.c	FUNCTION_10	ELSE_1
0x400055e	        0x488b4b08	                mov rcx, qword [rbx + 8]	       295	stdio2.h	FUNCTION_31	CALL_9
0x4000562	      0xbe01000000	                              mov esi, 1	       295	stdio2.h	FUNCTION_31	CALL_9
0x4000567	          0x4889c7	                            mov rdi, rax	       295	stdio2.h	FUNCTION_31	CALL_9
0x400056a	        0x4c897b28	             mov qword [rbx + 0x28], r15	       584	elfcomm.c	FUNCTION_10	ELSE_1
0x400056e	          0x4c89fa	                            mov rdx, r15	       295	stdio2.h	FUNCTION_31	CALL_9
0x4000571	      0xe800000000	                          call 0x4000576	       295	stdio2.h	FUNCTION_31	CALL_9
0x4000576	          0x4939c7	                            cmp r15, rax	       586	elfcomm.c	FUNCTION_10	ELSE_1	IF_12
0x4000579	     0xf84f2fdffff	                            je 0x4000371	       586	elfcomm.c	FUNCTION_10	ELSE_1	IF_12
0x400057f	          0x488b1b	                    mov rbx, qword [rbx]	       588	elfcomm.c	FUNCTION_10	ELSE_1	IF_12	CALL_36
0x4000582	      0xba05000000	                              mov edx, 5	       588	elfcomm.c	FUNCTION_10	ELSE_1	IF_12	CALL_36
0x4000587	      0xbe00000000	                              mov esi, 0	       588	elfcomm.c	FUNCTION_10	ELSE_1	IF_12	CALL_36
0x400058c	      0xe988fdffff	                           jmp 0x4000319	       588	elfcomm.c	FUNCTION_10	ELSE_1	IF_12	CALL_36
0x4000591	      0xba05000000	                              mov edx, 5	       580	elfcomm.c	FUNCTION_10	ELSE_1	IF_11	CALL_33
0x4000596	      0xbe00000000	                              mov esi, 0	       580	elfcomm.c	FUNCTION_10	ELSE_1	IF_11	CALL_33
0x400059b	            0x31ff	                            xor edi, edi	       580	elfcomm.c	FUNCTION_10	ELSE_1	IF_11	CALL_33
0x400059d	      0xe800000000	                          call 0x40005a2	       580	elfcomm.c	FUNCTION_10	ELSE_1	IF_11	CALL_33
0x40005a2	          0x4889c7	                            mov rdi, rax	       580	elfcomm.c	FUNCTION_10	ELSE_1	IF_11	CALL_33
0x40005a5	            0x31c0	                            xor eax, eax	       580	elfcomm.c	FUNCTION_10	ELSE_1	IF_11	CALL_33
0x40005a7	      0xe800000000	                          call 0x40005ac	       580	elfcomm.c	FUNCTION_10	ELSE_1	IF_11	CALL_33
0x40005ac	      0xe97cfdffff	                           jmp 0x400032d	       581	elfcomm.c	FUNCTION_10	ELSE_1	IF_11
0x40005b1	        0x488b3c24	                    mov rdi, qword [rsp]	       558	elfcomm.c	FUNCTION_10	ELSE_1	IF_9	CALL_24
0x40005b5	      0xe800000000	                          call 0x40005ba	       558	elfcomm.c	FUNCTION_10	ELSE_1	IF_9	CALL_24
0x40005ba	      0xba05000000	                              mov edx, 5	       559	elfcomm.c	FUNCTION_10	ELSE_1	IF_9	CALL_26
0x40005bf	      0xbe00000000	                              mov esi, 0	       559	elfcomm.c	FUNCTION_10	ELSE_1	IF_9	CALL_26
0x40005c4	            0xebd5	                           jmp 0x400059b	       559	elfcomm.c	FUNCTION_10	ELSE_1	IF_9	CALL_26
0x40005c6	      0xe800000000	                          call 0x40005cb	       604	elfcomm.c	FUNCTION_10
0x40005cb	      0xb900000000	                              mov ecx, 0	       505	elfcomm.c	FUNCTION_10	ELSE_1	CALL_7
0x40005d0	      0xbaf9010000	                          mov edx, 0x1f9	       505	elfcomm.c	FUNCTION_10	ELSE_1	CALL_7
0x40005d5	      0xbe00000000	                              mov esi, 0	       505	elfcomm.c	FUNCTION_10	ELSE_1	CALL_7
0x40005da	      0xbf00000000	                              mov edi, 0	       505	elfcomm.c	FUNCTION_10	ELSE_1	CALL_7
0x40005df	      0xe800000000	                          call 0x40005e4	       505	elfcomm.c	FUNCTION_10	ELSE_1	CALL_7
byte_get_64	FOR,0:DO,0:WHILE,0:SWITCH,0:IF,1:CALL,4:ELSE,1:functions,0	32
0x4000980	    0x48813d000000	               cmp qword [0x0400098b], 0	       378	elfcomm.c	FUNCTION_8	IF_1
0x400098b	            0x4154	                                push r12	       377	elfcomm.c	FUNCTION_8
0x400098d	          0x4989f4	                            mov r12, rsi	       377	elfcomm.c	FUNCTION_8
0x4000990	              0x55	                                push rbp	       377	elfcomm.c	FUNCTION_8
0x4000991	          0x4889d5	                            mov rbp, rdx	       377	elfcomm.c	FUNCTION_8
0x4000994	              0x53	                                push rbx	       377	elfcomm.c	FUNCTION_8
0x4000995	          0x4889fb	                            mov rbx, rdi	       377	elfcomm.c	FUNCTION_8
0x4000998	            0x742e	                            je 0x40009c8	       378	elfcomm.c	FUNCTION_8	IF_1
0x400099a	        0x488d7f04	                      lea rdi, [rdi + 4]	       385	elfcomm.c	FUNCTION_8	ELSE_1	CALL_3
0x400099e	      0xbe04000000	                              mov esi, 4	       385	elfcomm.c	FUNCTION_8	ELSE_1	CALL_3
0x40009a3	      0xe800000000	                          call 0x40009a8	       385	elfcomm.c	FUNCTION_8	ELSE_1	CALL_3
0x40009a8	          0x4889df	                            mov rdi, rbx	       386	elfcomm.c	FUNCTION_8	ELSE_1	CALL_4
0x40009ab	        0x49890424	                    mov qword [r12], rax	       385	elfcomm.c	FUNCTION_8	ELSE_1	CALL_3
0x40009af	      0xbe04000000	                              mov esi, 4	       386	elfcomm.c	FUNCTION_8	ELSE_1	CALL_4
0x40009b4	      0xe800000000	                          call 0x40009b9	       386	elfcomm.c	FUNCTION_8	ELSE_1	CALL_4
0x40009b9	        0x48894500	                    mov qword [rbp], rax	       386	elfcomm.c	FUNCTION_8	ELSE_1	CALL_4
0x40009bd	              0x5b	                                 pop rbx	       389	elfcomm.c	FUNCTION_8
0x40009be	              0x5d	                                 pop rbp	       389	elfcomm.c	FUNCTION_8
0x40009bf	            0x415c	                                 pop r12	       389	elfcomm.c	FUNCTION_8
0x40009c1	              0xc3	                                     ret	       389	elfcomm.c	FUNCTION_8
0x40009c2	    0x660f1f440000	                    nop word [rax + rax]	       389	elfcomm.c	FUNCTION_8
0x40009c8	      0xbe04000000	                              mov esi, 4	       380	elfcomm.c	FUNCTION_8	IF_1	CALL_1
0x40009cd	      0xe800000000	                          call 0x40009d2	       380	elfcomm.c	FUNCTION_8	IF_1	CALL_1
0x40009d2	        0x488d7b04	                      lea rdi, [rbx + 4]	       381	elfcomm.c	FUNCTION_8	IF_1	CALL_2
0x40009d6	        0x49890424	                    mov qword [r12], rax	       380	elfcomm.c	FUNCTION_8	IF_1	CALL_1
0x40009da	      0xbe04000000	                              mov esi, 4	       381	elfcomm.c	FUNCTION_8	IF_1	CALL_2
0x40009df	      0xe800000000	                          call 0x40009e4	       381	elfcomm.c	FUNCTION_8	IF_1	CALL_2
0x40009e4	        0x48894500	                    mov qword [rbp], rax	       381	elfcomm.c	FUNCTION_8	IF_1	CALL_2
0x40009e8	              0x5b	                                 pop rbx	       389	elfcomm.c	FUNCTION_8
0x40009e9	              0x5d	                                 pop rbp	       389	elfcomm.c	FUNCTION_8
0x40009ea	            0x415c	                                 pop r12	       389	elfcomm.c	FUNCTION_8
0x40009ec	              0xc3	                                     ret	       389	elfcomm.c	FUNCTION_8
adjust_relative_path	FOR,0:DO,0:WHILE,0:SWITCH,0:IF,5:CALL,13:ELSE,1:functions,0	80
0x40009f0	            0x4157	                                push r15	       398	elfcomm.c	FUNCTION_9
0x40009f2	            0x4156	                                push r14	       398	elfcomm.c	FUNCTION_9
0x40009f4	          0x4989ff	                            mov r15, rdi	       398	elfcomm.c	FUNCTION_9
0x40009f7	            0x4155	                                push r13	       398	elfcomm.c	FUNCTION_9
0x40009f9	            0x4154	                                push r12	       398	elfcomm.c	FUNCTION_9
0x40009fb	          0x4989f5	                            mov r13, rsi	       398	elfcomm.c	FUNCTION_9
0x40009fe	              0x55	                                push rbp	       398	elfcomm.c	FUNCTION_9
0x40009ff	              0x53	                                push rbx	       398	elfcomm.c	FUNCTION_9
0x4000a00	          0x4989d4	                            mov r12, rdx	       398	elfcomm.c	FUNCTION_9
0x4000a03	        0x4883ec08	                              sub rsp, 8	       398	elfcomm.c	FUNCTION_9
0x4000a07	      0xe800000000	                          call 0x4000a0c	       400	elfcomm.c	FUNCTION_9	CALL_1
0x4000a0c	      0x41807d002f	                    cmp byte [r13], 0x2f	       409	elfcomm.c	FUNCTION_9	IF_1	CALL_2
0x4000a11	            0x746d	                            je 0x4000a80	       409	elfcomm.c	FUNCTION_9	IF_1	CALL_2
0x4000a13	          0x4939c7	                            cmp r15, rax	       409	elfcomm.c	FUNCTION_9	IF_1	CALL_2
0x4000a16	            0x7468	                            je 0x4000a80	       409	elfcomm.c	FUNCTION_9	IF_1	CALL_2
0x4000a18	          0x4c29f8	                            sub rax, r15	       427	elfcomm.c	FUNCTION_9	ELSE_1
0x4000a1b	        0x4e8d3420	                    lea r14, [rax + r12]	       429	elfcomm.c	FUNCTION_9	ELSE_1
0x4000a1f	          0x4889c3	                            mov rbx, rax	       427	elfcomm.c	FUNCTION_9	ELSE_1
0x4000a22	        0x498d7e01	                      lea rdi, [r14 + 1]	       429	elfcomm.c	FUNCTION_9	ELSE_1
0x4000a26	          0x4839f8	                            cmp rax, rdi	       432	elfcomm.c	FUNCTION_9	ELSE_1	IF_4
0x4000a29	     0xf8781000000	                            ja 0x4000ab0	       432	elfcomm.c	FUNCTION_9	ELSE_1	IF_4
0x4000a2f	          0x4939fc	                            cmp r12, rdi	       432	elfcomm.c	FUNCTION_9	ELSE_1	IF_4
0x4000a32	            0x777c	                            ja 0x4000ab0	       432	elfcomm.c	FUNCTION_9	ELSE_1	IF_4
0x4000a34	      0xe800000000	                          call 0x4000a39	       439	elfcomm.c	FUNCTION_9	ELSE_1	CALL_9
0x4000a39	          0x4885c0	                           test rax, rax	       440	elfcomm.c	FUNCTION_9	ELSE_1	IF_5
0x4000a3c	          0x4889c5	                            mov rbp, rax	       439	elfcomm.c	FUNCTION_9	ELSE_1	CALL_9
0x4000a3f	     0xf8493000000	                            je 0x4000ad8	       440	elfcomm.c	FUNCTION_9	ELSE_1	IF_5
0x4000a45	          0x4889da	                            mov rdx, rbx	        53	string3.h	FUNCTION_34	CALL_3
0x4000a48	          0x4c89fe	                            mov rsi, r15	        53	string3.h	FUNCTION_34	CALL_3
0x4000a4b	          0x4889c7	                            mov rdi, rax	        53	string3.h	FUNCTION_34	CALL_3
0x4000a4e	      0xe800000000	                          call 0x4000a53	        53	string3.h	FUNCTION_34	CALL_3
0x4000a53	      0x488d7c1d00	                    lea rdi, [rbp + rbx]	        53	string3.h	FUNCTION_34	CALL_3
0x4000a58	          0x4c89e2	                            mov rdx, r12	        53	string3.h	FUNCTION_34	CALL_3
0x4000a5b	          0x4c89ee	                            mov rsi, r13	        53	string3.h	FUNCTION_34	CALL_3
0x4000a5e	      0xe800000000	                          call 0x4000a63	        53	string3.h	FUNCTION_34	CALL_3
0x4000a63	    0x42c644350000	                 mov byte [rbp + r14], 0	       447	elfcomm.c	FUNCTION_9	ELSE_1
0x4000a69	        0x4883c408	                              add rsp, 8	       450	elfcomm.c	FUNCTION_9
0x4000a6d	          0x4889e8	                            mov rax, rbp	       450	elfcomm.c	FUNCTION_9
0x4000a70	              0x5b	                                 pop rbx	       450	elfcomm.c	FUNCTION_9
0x4000a71	              0x5d	                                 pop rbp	       450	elfcomm.c	FUNCTION_9
0x4000a72	            0x415c	                                 pop r12	       450	elfcomm.c	FUNCTION_9
0x4000a74	            0x415d	                                 pop r13	       450	elfcomm.c	FUNCTION_9
0x4000a76	            0x415e	                                 pop r14	       450	elfcomm.c	FUNCTION_9
0x4000a78	            0x415f	                                 pop r15	       450	elfcomm.c	FUNCTION_9
0x4000a7a	              0xc3	                                     ret	       450	elfcomm.c	FUNCTION_9
0x4000a7b	       0xf1f440000	                   nop dword [rax + rax]	       450	elfcomm.c	FUNCTION_9
0x4000a80	          0x4c89e7	                            mov rdi, r12	       412	elfcomm.c	FUNCTION_9	IF_1	IF_2
0x4000a83	            0x31ed	                            xor ebp, ebp	       413	elfcomm.c	FUNCTION_9	IF_1	IF_2
0x4000a85	        0x4883c701	                              add rdi, 1	       412	elfcomm.c	FUNCTION_9	IF_1	IF_2
0x4000a89	            0x74de	                            je 0x4000a69	       412	elfcomm.c	FUNCTION_9	IF_1	IF_2
0x4000a8b	      0xe800000000	                          call 0x4000a90	       414	elfcomm.c	FUNCTION_9	IF_1	CALL_3
0x4000a90	          0x4885c0	                           test rax, rax	       415	elfcomm.c	FUNCTION_9	IF_1	IF_3
0x4000a93	            0x7443	                            je 0x4000ad8	       415	elfcomm.c	FUNCTION_9	IF_1	IF_3
0x4000a95	          0x4c89e2	                            mov rdx, r12	        53	string3.h	FUNCTION_34	CALL_3
0x4000a98	          0x4c89ee	                            mov rsi, r13	        53	string3.h	FUNCTION_34	CALL_3
0x4000a9b	          0x4889c7	                            mov rdi, rax	        53	string3.h	FUNCTION_34	CALL_3
0x4000a9e	      0xe800000000	                          call 0x4000aa3	        53	string3.h	FUNCTION_34	CALL_3
0x4000aa3	      0x42c6042000	                 mov byte [rax + r12], 0	       421	elfcomm.c	FUNCTION_9	IF_1
0x4000aa8	          0x4889c5	                            mov rbp, rax	       421	elfcomm.c	FUNCTION_9	IF_1
0x4000aab	            0xebbc	                           jmp 0x4000a69	       421	elfcomm.c	FUNCTION_9	IF_1
0x4000aad	           0xf1f00	                         nop dword [rax]	       421	elfcomm.c	FUNCTION_9	IF_1
0x4000ab0	      0xba05000000	                              mov edx, 5	       434	elfcomm.c	FUNCTION_9	ELSE_1	IF_4	CALL_8
0x4000ab5	      0xbe00000000	                              mov esi, 0	       434	elfcomm.c	FUNCTION_9	ELSE_1	IF_4	CALL_8
0x4000aba	            0x31ff	                            xor edi, edi	       434	elfcomm.c	FUNCTION_9	ELSE_1	IF_4	CALL_8
0x4000abc	      0xe800000000	                          call 0x4000ac1	       434	elfcomm.c	FUNCTION_9	ELSE_1	IF_4	CALL_8
0x4000ac1	          0x4c89e6	                            mov rsi, r12	       434	elfcomm.c	FUNCTION_9	ELSE_1	IF_4	CALL_8
0x4000ac4	          0x4889c7	                            mov rdi, rax	       434	elfcomm.c	FUNCTION_9	ELSE_1	IF_4	CALL_8
0x4000ac7	            0x31c0	                            xor eax, eax	       434	elfcomm.c	FUNCTION_9	ELSE_1	IF_4	CALL_8
0x4000ac9	      0xe800000000	                          call 0x4000ace	       434	elfcomm.c	FUNCTION_9	ELSE_1	IF_4	CALL_8
0x4000ace	            0x31ed	                            xor ebp, ebp	       436	elfcomm.c	FUNCTION_9	ELSE_1	IF_4
0x4000ad0	            0xeb97	                           jmp 0x4000a69	       436	elfcomm.c	FUNCTION_9	ELSE_1	IF_4
0x4000ad2	    0x660f1f440000	                    nop word [rax + rax]	       436	elfcomm.c	FUNCTION_9	ELSE_1	IF_4
0x4000ad8	            0x31ff	                            xor edi, edi	       442	elfcomm.c	FUNCTION_9	ELSE_1	IF_5	CALL_11
0x4000ada	      0xba05000000	                              mov edx, 5	       442	elfcomm.c	FUNCTION_9	ELSE_1	IF_5	CALL_11
0x4000adf	      0xbe00000000	                              mov esi, 0	       442	elfcomm.c	FUNCTION_9	ELSE_1	IF_5	CALL_11
0x4000ae4	      0xe800000000	                          call 0x4000ae9	       442	elfcomm.c	FUNCTION_9	ELSE_1	IF_5	CALL_11
0x4000ae9	          0x4889c7	                            mov rdi, rax	       442	elfcomm.c	FUNCTION_9	ELSE_1	IF_5	CALL_11
0x4000aec	            0x31c0	                            xor eax, eax	       442	elfcomm.c	FUNCTION_9	ELSE_1	IF_5	CALL_11
0x4000aee	      0xe800000000	                          call 0x4000af3	       442	elfcomm.c	FUNCTION_9	ELSE_1	IF_5	CALL_11
0x4000af3	      0xe971ffffff	                           jmp 0x4000a69	       443	elfcomm.c	FUNCTION_9	ELSE_1	IF_5
make_qualified_name	FOR,0:DO,0:WHILE,0:SWITCH,0:IF,6:CALL,8:ELSE,4:functions,0	104
0x40011e0	            0x4157	                                push r15	       890	elfcomm.c	FUNCTION_16
0x40011e2	            0x4156	                                push r14	       890	elfcomm.c	FUNCTION_16
0x40011e4	          0x4989ff	                            mov r15, rdi	       890	elfcomm.c	FUNCTION_16
0x40011e7	            0x4155	                                push r13	       890	elfcomm.c	FUNCTION_16
0x40011e9	            0x4154	                                push r12	       890	elfcomm.c	FUNCTION_16
0x40011eb	            0x31ff	                            xor edi, edi	       891	elfcomm.c	FUNCTION_16	CALL_1
0x40011ed	              0x55	                                push rbp	       890	elfcomm.c	FUNCTION_16
0x40011ee	              0x53	                                push rbx	       890	elfcomm.c	FUNCTION_16
0x40011ef	          0x4989d4	                            mov r12, rdx	       890	elfcomm.c	FUNCTION_16
0x40011f2	          0x4989f5	                            mov r13, rsi	       890	elfcomm.c	FUNCTION_16
0x40011f5	      0xba05000000	                              mov edx, 5	       891	elfcomm.c	FUNCTION_16	CALL_1
0x40011fa	      0xbe00000000	                              mov esi, 0	       891	elfcomm.c	FUNCTION_16	CALL_1
0x40011ff	        0x4883ec18	                           sub rsp, 0x18	       890	elfcomm.c	FUNCTION_16
0x4001203	      0xe800000000	                          call 0x4001208	       891	elfcomm.c	FUNCTION_16	CALL_1
0x4001208	          0x498b2f	                    mov rbp, qword [r15]	       895	elfcomm.c	FUNCTION_16	CALL_3
0x400120b	          0x4989c6	                            mov r14, rax	       891	elfcomm.c	FUNCTION_16	CALL_1
0x400120e	          0x4889ef	                            mov rdi, rbp	       895	elfcomm.c	FUNCTION_16	CALL_3
0x4001211	      0xe800000000	                          call 0x4001216	       895	elfcomm.c	FUNCTION_16	CALL_3
0x4001216	          0x4c89e7	                            mov rdi, r12	       895	elfcomm.c	FUNCTION_16	CALL_3
0x4001219	          0x4889c3	                            mov rbx, rax	       895	elfcomm.c	FUNCTION_16	CALL_3
0x400121c	      0xe800000000	                          call 0x4001221	       895	elfcomm.c	FUNCTION_16	CALL_3
0x4001221	        0x418b4f50	            mov ecx, dword [r15 + 0x50] 	       896	elfcomm.c	FUNCTION_16	IF_1
0x4001225	          0x4801c3	                            add rbx, rax	       895	elfcomm.c	FUNCTION_16	CALL_3
0x4001228	        0x488d7303	                      lea rsi, [rbx + 3]	       895	elfcomm.c	FUNCTION_16	CALL_3
0x400122c	            0x85c9	                           test ecx, ecx	       896	elfcomm.c	FUNCTION_16	IF_1
0x400122e	            0x7460	                            je 0x4001290	       896	elfcomm.c	FUNCTION_16	IF_1
0x4001230	      0x49837f4000	               cmp qword [r15 + 0x40], 0	       897	elfcomm.c	FUNCTION_16	IF_1
0x4001235	     0xf84ad000000	                            je 0x40012e8	       897	elfcomm.c	FUNCTION_16	IF_1
0x400123b	        0x498b7d00	                    mov rdi, qword [r13]	       900	elfcomm.c	FUNCTION_16	IF_1	IF_2
0x400123f	          0x4885ff	                           test rdi, rdi	       900	elfcomm.c	FUNCTION_16	IF_1	IF_2
0x4001242	     0xf84f0000000	                            je 0x4001338	       900	elfcomm.c	FUNCTION_16	IF_1	IF_2
0x4001248	      0xe800000000	                          call 0x400124d	       903	elfcomm.c	FUNCTION_16	IF_1	CALL_5
0x400124d	      0x4c8d7c0305	                lea r15, [rbx + rax + 5]	       903	elfcomm.c	FUNCTION_16	IF_1	CALL_5
0x4001252	          0x4c89ff	                            mov rdi, r15	       906	elfcomm.c	FUNCTION_16	CALL_6
0x4001255	      0xe800000000	                          call 0x400125a	       906	elfcomm.c	FUNCTION_16	CALL_6
0x400125a	          0x4885c0	                           test rax, rax	       907	elfcomm.c	FUNCTION_16	IF_3
0x400125d	          0x4889c3	                            mov rbx, rax	       906	elfcomm.c	FUNCTION_16	CALL_6
0x4001260	     0xf84ad000000	                            je 0x4001313	       907	elfcomm.c	FUNCTION_16	IF_3
0x4001266	        0x498b4500	                    mov rax, qword [r13]	       916	elfcomm.c	FUNCTION_16	IF_4	IF_5
0x400126a	          0x4885c0	                           test rax, rax	       916	elfcomm.c	FUNCTION_16	IF_4	IF_5
0x400126d	     0xf84cd000000	                            je 0x4001340	       916	elfcomm.c	FUNCTION_16	IF_4	IF_5
0x4001273	            0x4154	                                push r12	        64	stdio2.h	FUNCTION_19	CALL_1
0x4001275	              0x50	                                push rax	        64	stdio2.h	FUNCTION_19	CALL_1
0x4001276	          0x4989e9	                             mov r9, rbp	        64	stdio2.h	FUNCTION_19	CALL_1
0x4001279	    0x41b800000000	                              mov r8d, 0	        64	stdio2.h	FUNCTION_19	CALL_1
0x400127f	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	        64	stdio2.h	FUNCTION_19	CALL_1
0x4001286	      0xba01000000	                              mov edx, 1	        64	stdio2.h	FUNCTION_19	CALL_1
0x400128b	          0x4c89fe	                            mov rsi, r15	        64	stdio2.h	FUNCTION_19	CALL_1
0x400128e	            0xeb35	                           jmp 0x40012c5	        64	stdio2.h	FUNCTION_19	CALL_1
0x4001290	          0x4889f7	                            mov rdi, rsi	       906	elfcomm.c	FUNCTION_16	CALL_6
0x4001293	      0x4889742408	                mov qword [rsp + 8], rsi	       906	elfcomm.c	FUNCTION_16	CALL_6
0x4001298	      0xe800000000	                          call 0x400129d	       906	elfcomm.c	FUNCTION_16	CALL_6
0x400129d	          0x4885c0	                           test rax, rax	       907	elfcomm.c	FUNCTION_16	IF_3
0x40012a0	          0x4889c3	                            mov rbx, rax	       906	elfcomm.c	FUNCTION_16	CALL_6
0x40012a3	      0x488b742408	                mov rsi, qword [rsp + 8]	       907	elfcomm.c	FUNCTION_16	IF_3
0x40012a8	            0x7469	                            je 0x4001313	       907	elfcomm.c	FUNCTION_16	IF_3
0x40012aa	        0x4883ec08	                              sub rsp, 8	        64	stdio2.h	FUNCTION_19	CALL_1
0x40012ae	          0x4989e9	                             mov r9, rbp	        64	stdio2.h	FUNCTION_19	CALL_1
0x40012b1	    0x41b800000000	                              mov r8d, 0	        64	stdio2.h	FUNCTION_19	CALL_1
0x40012b7	            0x4154	                                push r12	        64	stdio2.h	FUNCTION_19	CALL_1
0x40012b9	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	        64	stdio2.h	FUNCTION_19	CALL_1
0x40012c0	      0xba01000000	                              mov edx, 1	        64	stdio2.h	FUNCTION_19	CALL_1
0x40012c5	          0x4889df	                            mov rdi, rbx	        64	stdio2.h	FUNCTION_19	CALL_1
0x40012c8	            0x31c0	                            xor eax, eax	        64	stdio2.h	FUNCTION_19	CALL_1
0x40012ca	      0xe800000000	                          call 0x40012cf	        64	stdio2.h	FUNCTION_19	CALL_1
0x40012cf	              0x58	                                 pop rax	        64	stdio2.h	FUNCTION_19	CALL_1
0x40012d0	              0x5a	                                 pop rdx	        64	stdio2.h	FUNCTION_19	CALL_1
0x40012d1	          0x4889d8	                            mov rax, rbx	        64	stdio2.h	FUNCTION_19	CALL_1
0x40012d4	        0x4883c418	                           add rsp, 0x18	       929	elfcomm.c	FUNCTION_16
0x40012d8	              0x5b	                                 pop rbx	       929	elfcomm.c	FUNCTION_16
0x40012d9	              0x5d	                                 pop rbp	       929	elfcomm.c	FUNCTION_16
0x40012da	            0x415c	                                 pop r12	       929	elfcomm.c	FUNCTION_16
0x40012dc	            0x415d	                                 pop r13	       929	elfcomm.c	FUNCTION_16
0x40012de	            0x415e	                                 pop r14	       929	elfcomm.c	FUNCTION_16
0x40012e0	            0x415f	                                 pop r15	       929	elfcomm.c	FUNCTION_16
0x40012e2	              0xc3	                                     ret	       929	elfcomm.c	FUNCTION_16
0x40012e3	       0xf1f440000	                   nop dword [rax + rax]	       929	elfcomm.c	FUNCTION_16
0x40012e8	          0x4889f7	                            mov rdi, rsi	       906	elfcomm.c	FUNCTION_16	CALL_6
0x40012eb	      0x4889742408	                mov qword [rsp + 8], rsi	       906	elfcomm.c	FUNCTION_16	CALL_6
0x40012f0	      0xe800000000	                          call 0x40012f5	       906	elfcomm.c	FUNCTION_16	CALL_6
0x40012f5	          0x4885c0	                           test rax, rax	       907	elfcomm.c	FUNCTION_16	IF_3
0x40012f8	          0x4889c3	                            mov rbx, rax	       906	elfcomm.c	FUNCTION_16	CALL_6
0x40012fb	      0x488b742408	                mov rsi, qword [rsp + 8]	       907	elfcomm.c	FUNCTION_16	IF_3
0x4001300	            0x7411	                            je 0x4001313	       907	elfcomm.c	FUNCTION_16	IF_3
0x4001302	        0x4883ec08	                              sub rsp, 8	        64	stdio2.h	FUNCTION_19	CALL_1
0x4001306	          0x4989e9	                             mov r9, rbp	        64	stdio2.h	FUNCTION_19	CALL_1
0x4001309	    0x41b800000000	                              mov r8d, 0	        64	stdio2.h	FUNCTION_19	CALL_1
0x400130f	            0x4154	                                push r12	        64	stdio2.h	FUNCTION_19	CALL_1
0x4001311	            0xeba6	                           jmp 0x40012b9	        64	stdio2.h	FUNCTION_19	CALL_1
0x4001313	      0xba05000000	                              mov edx, 5	       909	elfcomm.c	FUNCTION_16	IF_3	CALL_8
0x4001318	      0xbe00000000	                              mov esi, 0	       909	elfcomm.c	FUNCTION_16	IF_3	CALL_8
0x400131d	            0x31ff	                            xor edi, edi	       909	elfcomm.c	FUNCTION_16	IF_3	CALL_8
0x400131f	      0xe800000000	                          call 0x4001324	       909	elfcomm.c	FUNCTION_16	IF_3	CALL_8
0x4001324	          0x4889c7	                            mov rdi, rax	       909	elfcomm.c	FUNCTION_16	IF_3	CALL_8
0x4001327	            0x31c0	                            xor eax, eax	       909	elfcomm.c	FUNCTION_16	IF_3	CALL_8
0x4001329	      0xe800000000	                          call 0x400132e	       909	elfcomm.c	FUNCTION_16	IF_3	CALL_8
0x400132e	            0x31c0	                            xor eax, eax	       910	elfcomm.c	FUNCTION_16	IF_3
0x4001330	            0xeba2	                           jmp 0x40012d4	       910	elfcomm.c	FUNCTION_16	IF_3
0x4001332	    0x660f1f440000	                    nop word [rax + rax]	       910	elfcomm.c	FUNCTION_16	IF_3
0x4001338	          0x4c89f7	                            mov rdi, r14	       903	elfcomm.c	FUNCTION_16	IF_1	CALL_5
0x400133b	      0xe908ffffff	                           jmp 0x4001248	       903	elfcomm.c	FUNCTION_16	IF_1	CALL_5
0x4001340	            0x4154	                                push r12	        64	stdio2.h	FUNCTION_19	CALL_1
0x4001342	            0x4156	                                push r14	        64	stdio2.h	FUNCTION_19	CALL_1
0x4001344	      0xe92dffffff	                           jmp 0x4001276	        64	stdio2.h	FUNCTION_19	CALL_1
error	FOR,0:DO,0:WHILE,0:SWITCH,0:IF,0:CALL,5:ELSE,0:functions,0	54
0x4000040	              0x55	                                push rbp	        35	elfcomm.c	FUNCTION_1
0x4000041	              0x53	                                push rbx	        35	elfcomm.c	FUNCTION_1
0x4000042	          0x4889fb	                            mov rbx, rdi	        35	elfcomm.c	FUNCTION_1
0x4000045	    0x4881ecd80000	                           sub rsp, 0xd8	        35	elfcomm.c	FUNCTION_1
0x400004c	            0x84c0	                             test al, al	        35	elfcomm.c	FUNCTION_1
0x400004e	      0x4889742428	             mov qword [rsp + 0x28], rsi	        35	elfcomm.c	FUNCTION_1
0x4000053	      0x4889542430	             mov qword [rsp + 0x30], rdx	        35	elfcomm.c	FUNCTION_1
0x4000058	      0x48894c2438	             mov qword [rsp + 0x38], rcx	        35	elfcomm.c	FUNCTION_1
0x400005d	      0x4c89442440	              mov qword [rsp + 0x40], r8	        35	elfcomm.c	FUNCTION_1
0x4000062	      0x4c894c2448	              mov qword [rsp + 0x48], r9	        35	elfcomm.c	FUNCTION_1
0x4000067	            0x7437	                            je 0x40000a0	        35	elfcomm.c	FUNCTION_1
0x4000069	       0xf29442450	       movaps xmmword [rsp + 0x50], xmm0	        35	elfcomm.c	FUNCTION_1
0x400006e	       0xf294c2460	       movaps xmmword [rsp + 0x60], xmm1	        35	elfcomm.c	FUNCTION_1
0x4000073	       0xf29542470	       movaps xmmword [rsp + 0x70], xmm2	        35	elfcomm.c	FUNCTION_1
0x4000078	     0xf299c248000	       movaps xmmword [rsp + 0x80], xmm3	        35	elfcomm.c	FUNCTION_1
0x4000080	     0xf29a4249000	       movaps xmmword [rsp + 0x90], xmm4	        35	elfcomm.c	FUNCTION_1
0x4000088	     0xf29ac24a000	       movaps xmmword [rsp + 0xa0], xmm5	        35	elfcomm.c	FUNCTION_1
0x4000090	     0xf29b424b000	       movaps xmmword [rsp + 0xb0], xmm6	        35	elfcomm.c	FUNCTION_1
0x4000098	     0xf29bc24c000	       movaps xmmword [rsp + 0xc0], xmm7	        35	elfcomm.c	FUNCTION_1
0x40000a0	    0x64488b042528	                mov rax, qword fs:[0x28]	        35	elfcomm.c	FUNCTION_1
0x40000a9	      0x4889442418	             mov qword [rsp + 0x18], rax	        35	elfcomm.c	FUNCTION_1
0x40000ae	            0x31c0	                            xor eax, eax	        35	elfcomm.c	FUNCTION_1
0x40000b0	    0x488b3d000000	            mov rdi, qword [0x040000b7] 	        39	elfcomm.c	FUNCTION_1	CALL_1
0x40000b7	      0xe800000000	                          call 0x40000bc	        39	elfcomm.c	FUNCTION_1	CALL_1
0x40000bc	    0x488d8424f000	                   lea rax, [rsp + 0xf0]	        41	elfcomm.c	FUNCTION_1	CALL_2
0x40000c4	            0x31ff	                            xor edi, edi	        42	elfcomm.c	FUNCTION_1	CALL_3
0x40000c6	    0x488b2d000000	            mov rbp, qword [0x040000cd] 	        42	elfcomm.c	FUNCTION_1	CALL_3
0x40000cd	      0xba05000000	                              mov edx, 5	        42	elfcomm.c	FUNCTION_1	CALL_3
0x40000d2	      0xbe00000000	                              mov esi, 0	        42	elfcomm.c	FUNCTION_1	CALL_3
0x40000d7	    0xc70424080000	                      mov dword [rsp], 8	        41	elfcomm.c	FUNCTION_1	CALL_2
0x40000de	      0x4889442408	                mov qword [rsp + 8], rax	        41	elfcomm.c	FUNCTION_1	CALL_2
0x40000e3	      0x488d442420	                   lea rax, [rsp + 0x20]	        41	elfcomm.c	FUNCTION_1	CALL_2
0x40000e8	    0xc74424043000	               mov dword [rsp + 4], 0x30	        41	elfcomm.c	FUNCTION_1	CALL_2
0x40000f0	      0x4889442410	             mov qword [rsp + 0x10], rax	        41	elfcomm.c	FUNCTION_1	CALL_2
0x40000f5	      0xe800000000	                          call 0x40000fa	        42	elfcomm.c	FUNCTION_1	CALL_3
0x40000fa	    0x488b3d000000	            mov rdi, qword [0x04000101] 	        97	stdio2.h	CALL_10
0x4000101	          0x4889c2	                            mov rdx, rax	        97	stdio2.h	CALL_10
0x4000104	          0x4889e9	                            mov rcx, rbp	        97	stdio2.h	CALL_10
0x4000107	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_10
0x400010c	            0x31c0	                            xor eax, eax	        97	stdio2.h	CALL_10
0x400010e	      0xe800000000	                          call 0x4000113	        97	stdio2.h	CALL_10
0x4000113	    0x488b3d000000	            mov rdi, qword [0x0400011a] 	       127	stdio2.h	FUNCTION_22	CALL_1
0x400011a	          0x4889e1	                            mov rcx, rsp	       127	stdio2.h	FUNCTION_22	CALL_1
0x400011d	          0x4889da	                            mov rdx, rbx	       127	stdio2.h	FUNCTION_22	CALL_1
0x4000120	      0xbe01000000	                              mov esi, 1	       127	stdio2.h	FUNCTION_22	CALL_1
0x4000125	      0xe800000000	                          call 0x400012a	       127	stdio2.h	FUNCTION_22	CALL_1
0x400012a	      0x488b442418	            mov rax, qword [rsp + 0x18] 	        45	elfcomm.c	FUNCTION_1
0x400012f	    0x644833042528	                xor rax, qword fs:[0x28]	        45	elfcomm.c	FUNCTION_1
0x4000138	            0x750a	                           jne 0x4000144	        45	elfcomm.c	FUNCTION_1
0x400013a	    0x4881c4d80000	                           add rsp, 0xd8	        45	elfcomm.c	FUNCTION_1
0x4000141	              0x5b	                                 pop rbx	        45	elfcomm.c	FUNCTION_1
0x4000142	              0x5d	                                 pop rbp	        45	elfcomm.c	FUNCTION_1
0x4000143	              0xc3	                                     ret	        45	elfcomm.c	FUNCTION_1
0x4000144	      0xe800000000	                          call 0x4000149	        45	elfcomm.c	FUNCTION_1
release_archive	FOR,0:DO,0:WHILE,0:SWITCH,0:IF,4:CALL,4:ELSE,0:functions,0	22
0x4000e00	              0x53	                                push rbx	       738	elfcomm.c	FUNCTION_13
0x4000e01	          0x4889fb	                            mov rbx, rdi	       738	elfcomm.c	FUNCTION_13
0x4000e04	          0x488b3f	                    mov rdi, qword [rdi]	       739	elfcomm.c	FUNCTION_13	IF_1
0x4000e07	          0x4885ff	                           test rdi, rdi	       739	elfcomm.c	FUNCTION_13	IF_1
0x4000e0a	            0x7405	                            je 0x4000e11	       739	elfcomm.c	FUNCTION_13	IF_1
0x4000e0c	      0xe800000000	                          call 0x4000e11	       740	elfcomm.c	FUNCTION_13	CALL_1
0x4000e11	        0x488b7b18	            mov rdi, qword [rbx + 0x18] 	       741	elfcomm.c	FUNCTION_13	IF_2
0x4000e15	          0x4885ff	                           test rdi, rdi	       741	elfcomm.c	FUNCTION_13	IF_2
0x4000e18	            0x7405	                            je 0x4000e1f	       741	elfcomm.c	FUNCTION_13	IF_2
0x4000e1a	      0xe800000000	                          call 0x4000e1f	       742	elfcomm.c	FUNCTION_13	CALL_2
0x4000e1f	        0x488b7b20	            mov rdi, qword [rbx + 0x20] 	       743	elfcomm.c	FUNCTION_13	IF_3
0x4000e23	          0x4885ff	                           test rdi, rdi	       743	elfcomm.c	FUNCTION_13	IF_3
0x4000e26	            0x7405	                            je 0x4000e2d	       743	elfcomm.c	FUNCTION_13	IF_3
0x4000e28	      0xe800000000	                          call 0x4000e2d	       744	elfcomm.c	FUNCTION_13	CALL_3
0x4000e2d	        0x488b7b30	            mov rdi, qword [rbx + 0x30] 	       745	elfcomm.c	FUNCTION_13	IF_4
0x4000e31	          0x4885ff	                           test rdi, rdi	       745	elfcomm.c	FUNCTION_13	IF_4
0x4000e34	            0x740a	                            je 0x4000e40	       745	elfcomm.c	FUNCTION_13	IF_4
0x4000e36	              0x5b	                                 pop rbx	       747	elfcomm.c	FUNCTION_13
0x4000e37	      0xe900000000	                           jmp 0x4000e3c	       746	elfcomm.c	FUNCTION_13	CALL_4
0x4000e3c	         0xf1f4000	                         nop dword [rax]	       746	elfcomm.c	FUNCTION_13	CALL_4
0x4000e40	              0x5b	                                 pop rbx	       747	elfcomm.c	FUNCTION_13
0x4000e41	              0xc3	                                     ret	       747	elfcomm.c	FUNCTION_13
byte_get_big_endian	FOR,0:DO,0:WHILE,0:SWITCH,1:IF,8:CALL,3:ELSE,4:functions,0	86
0x4000150	          0x83fe08	                              cmp esi, 8	       236	elfcomm.c	FUNCTION_6	SWITCH_1
0x4000153	              0x53	                                push rbx	       235	elfcomm.c	FUNCTION_6
0x4000154	     0xf87d6000000	                            ja 0x4000230	       236	elfcomm.c	FUNCTION_6	SWITCH_1
0x400015a	            0x89f0	                            mov eax, esi	       236	elfcomm.c	FUNCTION_6	SWITCH_1
0x400015c	    0xff24c5000000	                       jmp qword [rax*8]	       236	elfcomm.c	FUNCTION_6	SWITCH_1
0x4000163	       0xf1f440000	                   nop dword [rax + rax]	       236	elfcomm.c	FUNCTION_6	SWITCH_1
0x4000168	          0x488b07	                    mov rax, qword [rdi]	       236	elfcomm.c	FUNCTION_6	SWITCH_1
0x400016b	              0x5b	                                 pop rbx	       341	elfcomm.c	FUNCTION_6
0x400016c	          0x480fc8	                               bswap rax	       341	elfcomm.c	FUNCTION_6
0x400016f	              0xc3	                                     ret	       341	elfcomm.c	FUNCTION_6
0x4000170	           0xfb607	                   movzx eax, byte [rdi]	       239	elfcomm.c	FUNCTION_6	SWITCH_1
0x4000173	              0x5b	                                 pop rbx	       341	elfcomm.c	FUNCTION_6
0x4000174	              0xc3	                                     ret	       341	elfcomm.c	FUNCTION_6
0x4000175	           0xf1f00	                         nop dword [rax]	       341	elfcomm.c	FUNCTION_6
0x4000178	           0xfb707	                   movzx eax, word [rdi]	       242	elfcomm.c	FUNCTION_6	SWITCH_1
0x400017b	              0x5b	                                 pop rbx	       341	elfcomm.c	FUNCTION_6
0x400017c	        0x66c1c008	                               rol ax, 8	       242	elfcomm.c	FUNCTION_6	SWITCH_1
0x4000180	           0xfb7c0	                           movzx eax, ax	       242	elfcomm.c	FUNCTION_6	SWITCH_1
0x4000183	              0xc3	                                     ret	       341	elfcomm.c	FUNCTION_6
0x4000184	         0xf1f4000	                         nop dword [rax]	       341	elfcomm.c	FUNCTION_6
0x4000188	         0xfb64701	               movzx eax, byte [rdi + 1]	       245	elfcomm.c	FUNCTION_6	SWITCH_1
0x400018c	              0x5b	                                 pop rbx	       341	elfcomm.c	FUNCTION_6
0x400018d	        0x48c1e008	                              shl rax, 8	       245	elfcomm.c	FUNCTION_6	SWITCH_1
0x4000191	          0x4889c2	                            mov rdx, rax	       245	elfcomm.c	FUNCTION_6	SWITCH_1
0x4000194	           0xfb607	                   movzx eax, byte [rdi]	       245	elfcomm.c	FUNCTION_6	SWITCH_1
0x4000197	        0x48c1e010	                           shl rax, 0x10	       245	elfcomm.c	FUNCTION_6	SWITCH_1
0x400019b	          0x4809d0	                             or rax, rdx	       245	elfcomm.c	FUNCTION_6	SWITCH_1
0x400019e	         0xfb65702	               movzx edx, byte [rdi + 2]	       245	elfcomm.c	FUNCTION_6	SWITCH_1
0x40001a2	          0x4809d0	                             or rax, rdx	       245	elfcomm.c	FUNCTION_6	SWITCH_1
0x40001a5	              0xc3	                                     ret	       341	elfcomm.c	FUNCTION_6
0x40001a6	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       341	elfcomm.c	FUNCTION_6
0x40001b0	            0x8b07	                    mov eax, dword [rdi]	       341	elfcomm.c	FUNCTION_6
0x40001b2	              0x5b	                                 pop rbx	       341	elfcomm.c	FUNCTION_6
0x40001b3	             0xfc8	                               bswap eax	       341	elfcomm.c	FUNCTION_6
0x40001b5	            0x89c0	                            mov eax, eax	       341	elfcomm.c	FUNCTION_6
0x40001b7	              0xc3	                                     ret	       341	elfcomm.c	FUNCTION_6
0x40001b8	     0xf1f84000000	                   nop dword [rax + rax]	       341	elfcomm.c	FUNCTION_6
0x40001c0	          0x8b5701	                mov edx, dword [rdi + 1]	       341	elfcomm.c	FUNCTION_6
0x40001c3	           0xfb607	                   movzx eax, byte [rdi]	       257	elfcomm.c	FUNCTION_6	SWITCH_1	IF_1
0x40001c6	              0x5b	                                 pop rbx	       341	elfcomm.c	FUNCTION_6
0x40001c7	             0xfca	                               bswap edx	       341	elfcomm.c	FUNCTION_6
0x40001c9	        0x48c1e020	                           shl rax, 0x20	       257	elfcomm.c	FUNCTION_6	SWITCH_1	IF_1
0x40001cd	            0x89d2	                            mov edx, edx	       257	elfcomm.c	FUNCTION_6	SWITCH_1	IF_1
0x40001cf	          0x4809d0	                             or rax, rdx	       257	elfcomm.c	FUNCTION_6	SWITCH_1	IF_1
0x40001d2	              0xc3	                                     ret	       341	elfcomm.c	FUNCTION_6
0x40001d3	       0xf1f440000	                   nop dword [rax + rax]	       341	elfcomm.c	FUNCTION_6
0x40001d8	         0xfb64701	               movzx eax, byte [rdi + 1]	       276	elfcomm.c	FUNCTION_6	SWITCH_1	IF_3
0x40001dc	          0x8b5702	                mov edx, dword [rdi + 2]	       276	elfcomm.c	FUNCTION_6	SWITCH_1	IF_3
0x40001df	              0x5b	                                 pop rbx	       341	elfcomm.c	FUNCTION_6
0x40001e0	             0xfca	                               bswap edx	       341	elfcomm.c	FUNCTION_6
0x40001e2	        0x48c1e020	                           shl rax, 0x20	       276	elfcomm.c	FUNCTION_6	SWITCH_1	IF_3
0x40001e6	            0x89d2	                            mov edx, edx	       276	elfcomm.c	FUNCTION_6	SWITCH_1	IF_3
0x40001e8	          0x4889c1	                            mov rcx, rax	       276	elfcomm.c	FUNCTION_6	SWITCH_1	IF_3
0x40001eb	           0xfb607	                   movzx eax, byte [rdi]	       276	elfcomm.c	FUNCTION_6	SWITCH_1	IF_3
0x40001ee	        0x48c1e028	                           shl rax, 0x28	       276	elfcomm.c	FUNCTION_6	SWITCH_1	IF_3
0x40001f2	          0x4809c8	                             or rax, rcx	       276	elfcomm.c	FUNCTION_6	SWITCH_1	IF_3
0x40001f5	          0x4809d0	                             or rax, rdx	       276	elfcomm.c	FUNCTION_6	SWITCH_1	IF_3
0x40001f8	              0xc3	                                     ret	       341	elfcomm.c	FUNCTION_6
0x40001f9	     0xf1f80000000	                         nop dword [rax]	       341	elfcomm.c	FUNCTION_6
0x4000200	         0xfb64702	               movzx eax, byte [rdi + 2]	       296	elfcomm.c	FUNCTION_6	SWITCH_1	IF_5
0x4000204	         0xfb64f01	               movzx ecx, byte [rdi + 1]	       296	elfcomm.c	FUNCTION_6	SWITCH_1	IF_5
0x4000208	          0x8b5703	                mov edx, dword [rdi + 3]	       296	elfcomm.c	FUNCTION_6	SWITCH_1	IF_5
0x400020b	              0x5b	                                 pop rbx	       341	elfcomm.c	FUNCTION_6
0x400020c	        0x48c1e020	                           shl rax, 0x20	       296	elfcomm.c	FUNCTION_6	SWITCH_1	IF_5
0x4000210	             0xfca	                               bswap edx	       296	elfcomm.c	FUNCTION_6	SWITCH_1	IF_5
0x4000212	          0x4889c6	                            mov rsi, rax	       296	elfcomm.c	FUNCTION_6	SWITCH_1	IF_5
0x4000215	          0x4889c8	                            mov rax, rcx	       296	elfcomm.c	FUNCTION_6	SWITCH_1	IF_5
0x4000218	           0xfb60f	                   movzx ecx, byte [rdi]	       296	elfcomm.c	FUNCTION_6	SWITCH_1	IF_5
0x400021b	        0x48c1e028	                           shl rax, 0x28	       296	elfcomm.c	FUNCTION_6	SWITCH_1	IF_5
0x400021f	            0x89d2	                            mov edx, edx	       296	elfcomm.c	FUNCTION_6	SWITCH_1	IF_5
0x4000221	          0x4809f0	                             or rax, rsi	       296	elfcomm.c	FUNCTION_6	SWITCH_1	IF_5
0x4000224	        0x48c1e130	                           shl rcx, 0x30	       296	elfcomm.c	FUNCTION_6	SWITCH_1	IF_5
0x4000228	          0x4809c8	                             or rax, rcx	       296	elfcomm.c	FUNCTION_6	SWITCH_1	IF_5
0x400022b	          0x4809d0	                             or rax, rdx	       296	elfcomm.c	FUNCTION_6	SWITCH_1	IF_5
0x400022e	              0xc3	                                     ret	       341	elfcomm.c	FUNCTION_6
0x400022f	              0x90	                                     nop	       341	elfcomm.c	FUNCTION_6
0x4000230	            0x89f3	                            mov ebx, esi	       341	elfcomm.c	FUNCTION_6
0x4000232	      0xba05000000	                              mov edx, 5	       338	elfcomm.c	FUNCTION_6	SWITCH_1	CALL_2
0x4000237	      0xbe00000000	                              mov esi, 0	       338	elfcomm.c	FUNCTION_6	SWITCH_1	CALL_2
0x400023c	            0x31ff	                            xor edi, edi	       338	elfcomm.c	FUNCTION_6	SWITCH_1	CALL_2
0x400023e	      0xe800000000	                          call 0x4000243	       338	elfcomm.c	FUNCTION_6	SWITCH_1	CALL_2
0x4000243	            0x89de	                            mov esi, ebx	       338	elfcomm.c	FUNCTION_6	SWITCH_1	CALL_2
0x4000245	          0x4889c7	                            mov rdi, rax	       338	elfcomm.c	FUNCTION_6	SWITCH_1	CALL_2
0x4000248	            0x31c0	                            xor eax, eax	       338	elfcomm.c	FUNCTION_6	SWITCH_1	CALL_2
0x400024a	      0xe800000000	                          call 0x400024f	       338	elfcomm.c	FUNCTION_6	SWITCH_1	CALL_2
0x400024f	      0xe800000000	                          call 0x4000254	       339	elfcomm.c	FUNCTION_6	SWITCH_1	CALL_3
byte_put_little_endian	FOR,0:DO,0:WHILE,0:SWITCH,1:IF,0:CALL,3:ELSE,0:functions,0	41
0x4000700	          0x83fa08	                              cmp edx, 8	        66	elfcomm.c	FUNCTION_3	SWITCH_1
0x4000703	              0x53	                                push rbx	        65	elfcomm.c	FUNCTION_3
0x4000704	            0x775a	                            ja 0x4000760	        66	elfcomm.c	FUNCTION_3	SWITCH_1
0x4000706	            0x89d0	                            mov eax, edx	        66	elfcomm.c	FUNCTION_3	SWITCH_1
0x4000708	    0xff24c5000000	                       jmp qword [rax*8]	        66	elfcomm.c	FUNCTION_3	SWITCH_1
0x400070f	              0x90	                                     nop	        66	elfcomm.c	FUNCTION_3	SWITCH_1
0x4000710	          0x4889f0	                            mov rax, rsi	        69	elfcomm.c	FUNCTION_3	SWITCH_1
0x4000713	        0x48c1e838	                           shr rax, 0x38	        69	elfcomm.c	FUNCTION_3	SWITCH_1
0x4000717	          0x884707	                  mov byte [rdi + 7], al	        69	elfcomm.c	FUNCTION_3	SWITCH_1
0x400071a	          0x4889f0	                            mov rax, rsi	        70	elfcomm.c	FUNCTION_3	SWITCH_1
0x400071d	        0x48c1e830	                           shr rax, 0x30	        70	elfcomm.c	FUNCTION_3	SWITCH_1
0x4000721	          0x884706	                  mov byte [rdi + 6], al	        70	elfcomm.c	FUNCTION_3	SWITCH_1
0x4000724	          0x4889f0	                            mov rax, rsi	        71	elfcomm.c	FUNCTION_3	SWITCH_1
0x4000727	        0x48c1e828	                           shr rax, 0x28	        71	elfcomm.c	FUNCTION_3	SWITCH_1
0x400072b	          0x884705	                  mov byte [rdi + 5], al	        71	elfcomm.c	FUNCTION_3	SWITCH_1
0x400072e	          0x4889f0	                            mov rax, rsi	        72	elfcomm.c	FUNCTION_3	SWITCH_1
0x4000731	        0x48c1e820	                           shr rax, 0x20	        72	elfcomm.c	FUNCTION_3	SWITCH_1
0x4000735	          0x884704	                  mov byte [rdi + 4], al	        72	elfcomm.c	FUNCTION_3	SWITCH_1
0x4000738	          0x4889f0	                            mov rax, rsi	        75	elfcomm.c	FUNCTION_3	SWITCH_1
0x400073b	        0x48c1e818	                           shr rax, 0x18	        75	elfcomm.c	FUNCTION_3	SWITCH_1
0x400073f	          0x884703	                  mov byte [rdi + 3], al	        75	elfcomm.c	FUNCTION_3	SWITCH_1
0x4000742	          0x4889f0	                            mov rax, rsi	        78	elfcomm.c	FUNCTION_3	SWITCH_1
0x4000745	        0x48c1e810	                           shr rax, 0x10	        78	elfcomm.c	FUNCTION_3	SWITCH_1
0x4000749	          0x884702	                  mov byte [rdi + 2], al	        78	elfcomm.c	FUNCTION_3	SWITCH_1
0x400074c	          0x4889f0	                            mov rax, rsi	        81	elfcomm.c	FUNCTION_3	SWITCH_1
0x400074f	        0x48c1e808	                              shr rax, 8	        81	elfcomm.c	FUNCTION_3	SWITCH_1
0x4000753	          0x884701	                  mov byte [rdi + 1], al	        81	elfcomm.c	FUNCTION_3	SWITCH_1
0x4000756	          0x408837	                     mov byte [rdi], sil	        84	elfcomm.c	FUNCTION_3	SWITCH_1
0x4000759	              0x5b	                                 pop rbx	        91	elfcomm.c	FUNCTION_3
0x400075a	              0xc3	                                     ret	        91	elfcomm.c	FUNCTION_3
0x400075b	       0xf1f440000	                   nop dword [rax + rax]	        91	elfcomm.c	FUNCTION_3
0x4000760	            0x89d3	                            mov ebx, edx	        91	elfcomm.c	FUNCTION_3
0x4000762	      0xbe00000000	                              mov esi, 0	        88	elfcomm.c	FUNCTION_3	SWITCH_1	CALL_2
0x4000767	      0xba05000000	                              mov edx, 5	        88	elfcomm.c	FUNCTION_3	SWITCH_1	CALL_2
0x400076c	            0x31ff	                            xor edi, edi	        88	elfcomm.c	FUNCTION_3	SWITCH_1	CALL_2
0x400076e	      0xe800000000	                          call 0x4000773	        88	elfcomm.c	FUNCTION_3	SWITCH_1	CALL_2
0x4000773	            0x89de	                            mov esi, ebx	        88	elfcomm.c	FUNCTION_3	SWITCH_1	CALL_2
0x4000775	          0x4889c7	                            mov rdi, rax	        88	elfcomm.c	FUNCTION_3	SWITCH_1	CALL_2
0x4000778	            0x31c0	                            xor eax, eax	        88	elfcomm.c	FUNCTION_3	SWITCH_1	CALL_2
0x400077a	      0xe800000000	                          call 0x400077f	        88	elfcomm.c	FUNCTION_3	SWITCH_1	CALL_2
0x400077f	      0xe800000000	                          call 0x4000784	        89	elfcomm.c	FUNCTION_3	SWITCH_1	CALL_3
byte_put_big_endian	FOR,0:DO,0:WHILE,0:SWITCH,1:IF,0:CALL,3:ELSE,0:functions,0	37
0x4000790	          0x83fa08	                              cmp edx, 8	        96	elfcomm.c	FUNCTION_4	SWITCH_1
0x4000793	              0x53	                                push rbx	        95	elfcomm.c	FUNCTION_4
0x4000794	            0x89d3	                            mov ebx, edx	        95	elfcomm.c	FUNCTION_4
0x4000796	            0x7758	                            ja 0x40007f0	        96	elfcomm.c	FUNCTION_4	SWITCH_1
0x4000798	            0x89d0	                            mov eax, edx	        96	elfcomm.c	FUNCTION_4	SWITCH_1
0x400079a	    0xff24c5000000	                       jmp qword [rax*8]	        96	elfcomm.c	FUNCTION_4	SWITCH_1
0x40007a1	     0xf1f80000000	                         nop dword [rax]	        96	elfcomm.c	FUNCTION_4	SWITCH_1
0x40007a8	          0x4889f0	                            mov rax, rsi	       100	elfcomm.c	FUNCTION_4	SWITCH_1
0x40007ab	        0x40887707	                 mov byte [rdi + 7], sil	        99	elfcomm.c	FUNCTION_4	SWITCH_1
0x40007af	        0x48c1e808	                              shr rax, 8	       100	elfcomm.c	FUNCTION_4	SWITCH_1
0x40007b3	          0x884706	                  mov byte [rdi + 6], al	       100	elfcomm.c	FUNCTION_4	SWITCH_1
0x40007b6	          0x4889f0	                            mov rax, rsi	       101	elfcomm.c	FUNCTION_4	SWITCH_1
0x40007b9	        0x48c1e810	                           shr rax, 0x10	       101	elfcomm.c	FUNCTION_4	SWITCH_1
0x40007bd	          0x884705	                  mov byte [rdi + 5], al	       101	elfcomm.c	FUNCTION_4	SWITCH_1
0x40007c0	          0x4889f0	                            mov rax, rsi	       102	elfcomm.c	FUNCTION_4	SWITCH_1
0x40007c3	        0x48c1ee20	                           shr rsi, 0x20	       104	elfcomm.c	FUNCTION_4	SWITCH_1
0x40007c7	        0x48c1e818	                           shr rax, 0x18	       102	elfcomm.c	FUNCTION_4	SWITCH_1
0x40007cb	          0x884704	                  mov byte [rdi + 4], al	       102	elfcomm.c	FUNCTION_4	SWITCH_1
0x40007ce	        0x40887703	                 mov byte [rdi + 3], sil	       107	elfcomm.c	FUNCTION_4	SWITCH_1
0x40007d2	        0x48c1ee08	                              shr rsi, 8	       108	elfcomm.c	FUNCTION_4	SWITCH_1
0x40007d6	        0x40887702	                 mov byte [rdi + 2], sil	       111	elfcomm.c	FUNCTION_4	SWITCH_1
0x40007da	        0x48c1ee08	                              shr rsi, 8	       112	elfcomm.c	FUNCTION_4	SWITCH_1
0x40007de	        0x40887701	                 mov byte [rdi + 1], sil	       115	elfcomm.c	FUNCTION_4	SWITCH_1
0x40007e2	        0x48c1ee08	                              shr rsi, 8	       116	elfcomm.c	FUNCTION_4	SWITCH_1
0x40007e6	          0x408837	                     mov byte [rdi], sil	       119	elfcomm.c	FUNCTION_4	SWITCH_1
0x40007e9	              0x5b	                                 pop rbx	       126	elfcomm.c	FUNCTION_4
0x40007ea	              0xc3	                                     ret	       126	elfcomm.c	FUNCTION_4
0x40007eb	       0xf1f440000	                   nop dword [rax + rax]	       126	elfcomm.c	FUNCTION_4
0x40007f0	      0xba05000000	                              mov edx, 5	       123	elfcomm.c	FUNCTION_4	SWITCH_1	CALL_2
0x40007f5	      0xbe00000000	                              mov esi, 0	       123	elfcomm.c	FUNCTION_4	SWITCH_1	CALL_2
0x40007fa	            0x31ff	                            xor edi, edi	       123	elfcomm.c	FUNCTION_4	SWITCH_1	CALL_2
0x40007fc	      0xe800000000	                          call 0x4000801	       123	elfcomm.c	FUNCTION_4	SWITCH_1	CALL_2
0x4000801	            0x89de	                            mov esi, ebx	       123	elfcomm.c	FUNCTION_4	SWITCH_1	CALL_2
0x4000803	          0x4889c7	                            mov rdi, rax	       123	elfcomm.c	FUNCTION_4	SWITCH_1	CALL_2
0x4000806	            0x31c0	                            xor eax, eax	       123	elfcomm.c	FUNCTION_4	SWITCH_1	CALL_2
0x4000808	      0xe800000000	                          call 0x400080d	       123	elfcomm.c	FUNCTION_4	SWITCH_1	CALL_2
0x400080d	      0xe800000000	                          call 0x4000812	       124	elfcomm.c	FUNCTION_4	SWITCH_1	CALL_3
byte_get_little_endian	FOR,0:DO,0:WHILE,0:SWITCH,1:IF,8:CALL,3:ELSE,4:functions,0	75
0x4000820	          0x83fe08	                              cmp esi, 8	       133	elfcomm.c	FUNCTION_5	SWITCH_1
0x4000823	              0x53	                                push rbx	       132	elfcomm.c	FUNCTION_5
0x4000824	     0xf87b6000000	                            ja 0x40008e0	       133	elfcomm.c	FUNCTION_5	SWITCH_1
0x400082a	            0x89f0	                            mov eax, esi	       133	elfcomm.c	FUNCTION_5	SWITCH_1
0x400082c	    0xff24c5000000	                       jmp qword [rax*8]	       133	elfcomm.c	FUNCTION_5	SWITCH_1
0x4000833	       0xf1f440000	                   nop dword [rax + rax]	       133	elfcomm.c	FUNCTION_5	SWITCH_1
0x4000838	          0x488b07	                    mov rax, qword [rdi]	       209	elfcomm.c	FUNCTION_5	SWITCH_1	IF_7
0x400083b	              0x5b	                                 pop rbx	       231	elfcomm.c	FUNCTION_5
0x400083c	              0xc3	                                     ret	       231	elfcomm.c	FUNCTION_5
0x400083d	           0xf1f00	                         nop dword [rax]	       231	elfcomm.c	FUNCTION_5
0x4000840	           0xfb607	                   movzx eax, byte [rdi]	       136	elfcomm.c	FUNCTION_5	SWITCH_1
0x4000843	              0x5b	                                 pop rbx	       231	elfcomm.c	FUNCTION_5
0x4000844	              0xc3	                                     ret	       231	elfcomm.c	FUNCTION_5
0x4000845	           0xf1f00	                         nop dword [rax]	       231	elfcomm.c	FUNCTION_5
0x4000848	           0xfb707	                   movzx eax, word [rdi]	       139	elfcomm.c	FUNCTION_5	SWITCH_1
0x400084b	              0x5b	                                 pop rbx	       231	elfcomm.c	FUNCTION_5
0x400084c	              0xc3	                                     ret	       231	elfcomm.c	FUNCTION_5
0x400084d	           0xf1f00	                         nop dword [rax]	       231	elfcomm.c	FUNCTION_5
0x4000850	         0xfb64701	               movzx eax, byte [rdi + 1]	       143	elfcomm.c	FUNCTION_5	SWITCH_1
0x4000854	              0x5b	                                 pop rbx	       231	elfcomm.c	FUNCTION_5
0x4000855	        0x48c1e008	                              shl rax, 8	       143	elfcomm.c	FUNCTION_5	SWITCH_1
0x4000859	          0x4889c2	                            mov rdx, rax	       143	elfcomm.c	FUNCTION_5	SWITCH_1
0x400085c	         0xfb64702	               movzx eax, byte [rdi + 2]	       143	elfcomm.c	FUNCTION_5	SWITCH_1
0x4000860	        0x48c1e010	                           shl rax, 0x10	       143	elfcomm.c	FUNCTION_5	SWITCH_1
0x4000864	          0x4809d0	                             or rax, rdx	       143	elfcomm.c	FUNCTION_5	SWITCH_1
0x4000867	           0xfb617	                   movzx edx, byte [rdi]	       143	elfcomm.c	FUNCTION_5	SWITCH_1
0x400086a	          0x4809d0	                             or rax, rdx	       143	elfcomm.c	FUNCTION_5	SWITCH_1
0x400086d	              0xc3	                                     ret	       231	elfcomm.c	FUNCTION_5
0x400086e	            0x6690	                                     nop	       231	elfcomm.c	FUNCTION_5
0x4000870	            0x8b07	                    mov eax, dword [rdi]	       148	elfcomm.c	FUNCTION_5	SWITCH_1
0x4000872	              0x5b	                                 pop rbx	       231	elfcomm.c	FUNCTION_5
0x4000873	              0xc3	                                     ret	       231	elfcomm.c	FUNCTION_5
0x4000874	         0xf1f4000	                         nop dword [rax]	       231	elfcomm.c	FUNCTION_5
0x4000878	         0xfb64704	               movzx eax, byte [rdi + 4]	       155	elfcomm.c	FUNCTION_5	SWITCH_1	IF_1
0x400087c	            0x8b17	                    mov edx, dword [rdi]	       155	elfcomm.c	FUNCTION_5	SWITCH_1	IF_1
0x400087e	              0x5b	                                 pop rbx	       231	elfcomm.c	FUNCTION_5
0x400087f	        0x48c1e020	                           shl rax, 0x20	       155	elfcomm.c	FUNCTION_5	SWITCH_1	IF_1
0x4000883	          0x4809d0	                             or rax, rdx	       155	elfcomm.c	FUNCTION_5	SWITCH_1	IF_1
0x4000886	              0xc3	                                     ret	       231	elfcomm.c	FUNCTION_5
0x4000887	    0x660f1f840000	                    nop word [rax + rax]	       231	elfcomm.c	FUNCTION_5
0x4000890	         0xfb64704	               movzx eax, byte [rdi + 4]	       172	elfcomm.c	FUNCTION_5	SWITCH_1	IF_3
0x4000894	              0x5b	                                 pop rbx	       231	elfcomm.c	FUNCTION_5
0x4000895	        0x48c1e020	                           shl rax, 0x20	       172	elfcomm.c	FUNCTION_5	SWITCH_1	IF_3
0x4000899	          0x4889c2	                            mov rdx, rax	       172	elfcomm.c	FUNCTION_5	SWITCH_1	IF_3
0x400089c	         0xfb64705	               movzx eax, byte [rdi + 5]	       172	elfcomm.c	FUNCTION_5	SWITCH_1	IF_3
0x40008a0	        0x48c1e028	                           shl rax, 0x28	       172	elfcomm.c	FUNCTION_5	SWITCH_1	IF_3
0x40008a4	          0x4809d0	                             or rax, rdx	       172	elfcomm.c	FUNCTION_5	SWITCH_1	IF_3
0x40008a7	            0x8b17	                    mov edx, dword [rdi]	       172	elfcomm.c	FUNCTION_5	SWITCH_1	IF_3
0x40008a9	          0x4809d0	                             or rax, rdx	       172	elfcomm.c	FUNCTION_5	SWITCH_1	IF_3
0x40008ac	              0xc3	                                     ret	       231	elfcomm.c	FUNCTION_5
0x40008ad	           0xf1f00	                         nop dword [rax]	       231	elfcomm.c	FUNCTION_5
0x40008b0	         0xfb64704	               movzx eax, byte [rdi + 4]	       190	elfcomm.c	FUNCTION_5	SWITCH_1	IF_5
0x40008b4	              0x5b	                                 pop rbx	       231	elfcomm.c	FUNCTION_5
0x40008b5	        0x48c1e020	                           shl rax, 0x20	       190	elfcomm.c	FUNCTION_5	SWITCH_1	IF_5
0x40008b9	          0x4889c2	                            mov rdx, rax	       190	elfcomm.c	FUNCTION_5	SWITCH_1	IF_5
0x40008bc	         0xfb64705	               movzx eax, byte [rdi + 5]	       190	elfcomm.c	FUNCTION_5	SWITCH_1	IF_5
0x40008c0	        0x48c1e028	                           shl rax, 0x28	       190	elfcomm.c	FUNCTION_5	SWITCH_1	IF_5
0x40008c4	          0x4809d0	                             or rax, rdx	       190	elfcomm.c	FUNCTION_5	SWITCH_1	IF_5
0x40008c7	            0x8b17	                    mov edx, dword [rdi]	       190	elfcomm.c	FUNCTION_5	SWITCH_1	IF_5
0x40008c9	          0x4809d0	                             or rax, rdx	       190	elfcomm.c	FUNCTION_5	SWITCH_1	IF_5
0x40008cc	         0xfb65706	               movzx edx, byte [rdi + 6]	       190	elfcomm.c	FUNCTION_5	SWITCH_1	IF_5
0x40008d0	        0x48c1e230	                           shl rdx, 0x30	       190	elfcomm.c	FUNCTION_5	SWITCH_1	IF_5
0x40008d4	          0x4809d0	                             or rax, rdx	       190	elfcomm.c	FUNCTION_5	SWITCH_1	IF_5
0x40008d7	              0xc3	                                     ret	       231	elfcomm.c	FUNCTION_5
0x40008d8	     0xf1f84000000	                   nop dword [rax + rax]	       231	elfcomm.c	FUNCTION_5
0x40008e0	            0x89f3	                            mov ebx, esi	       231	elfcomm.c	FUNCTION_5
0x40008e2	      0xba05000000	                              mov edx, 5	       228	elfcomm.c	FUNCTION_5	SWITCH_1	CALL_2
0x40008e7	      0xbe00000000	                              mov esi, 0	       228	elfcomm.c	FUNCTION_5	SWITCH_1	CALL_2
0x40008ec	            0x31ff	                            xor edi, edi	       228	elfcomm.c	FUNCTION_5	SWITCH_1	CALL_2
0x40008ee	      0xe800000000	                          call 0x40008f3	       228	elfcomm.c	FUNCTION_5	SWITCH_1	CALL_2
0x40008f3	            0x89de	                            mov esi, ebx	       228	elfcomm.c	FUNCTION_5	SWITCH_1	CALL_2
0x40008f5	          0x4889c7	                            mov rdi, rax	       228	elfcomm.c	FUNCTION_5	SWITCH_1	CALL_2
0x40008f8	            0x31c0	                            xor eax, eax	       228	elfcomm.c	FUNCTION_5	SWITCH_1	CALL_2
0x40008fa	      0xe800000000	                          call 0x40008ff	       228	elfcomm.c	FUNCTION_5	SWITCH_1	CALL_2
0x40008ff	      0xe800000000	                          call 0x4000904	       229	elfcomm.c	FUNCTION_5	SWITCH_1	CALL_3
get_archive_member_name_at	FOR,0:DO,0:WHILE,0:SWITCH,0:IF,3:CALL,10:ELSE,0:functions,0	54
0x4000ec0	              0x55	                                push rbp	       856	elfcomm.c	FUNCTION_15
0x4000ec1	              0x53	                                push rbx	       856	elfcomm.c	FUNCTION_15
0x4000ec2	          0x4889fb	                            mov rbx, rdi	       856	elfcomm.c	FUNCTION_15
0x4000ec5	          0x4889d5	                            mov rbp, rdx	       856	elfcomm.c	FUNCTION_15
0x4000ec8	            0x31d2	                            xor edx, edx	       859	elfcomm.c	FUNCTION_15	IF_1	CALL_1
0x4000eca	        0x4883ec08	                              sub rsp, 8	       856	elfcomm.c	FUNCTION_15
0x4000ece	        0x488b7f08	                mov rdi, qword [rdi + 8]	       859	elfcomm.c	FUNCTION_15	IF_1	CALL_1
0x4000ed2	      0xe800000000	                          call 0x4000ed7	       859	elfcomm.c	FUNCTION_15	IF_1	CALL_1
0x4000ed7	            0x85c0	                           test eax, eax	       859	elfcomm.c	FUNCTION_15	IF_1	CALL_1
0x4000ed9	     0xf8591000000	                           jne 0x4000f70	       859	elfcomm.c	FUNCTION_15	IF_1	CALL_1
0x4000edf	        0x488b4b08	                mov rcx, qword [rbx + 8]	       295	stdio2.h	FUNCTION_31	CALL_9
0x4000ee3	        0x488d7b58	                   lea rdi, [rbx + 0x58]	       864	elfcomm.c	FUNCTION_15	CALL_4
0x4000ee7	      0xba3c000000	                           mov edx, 0x3c	       295	stdio2.h	FUNCTION_31	CALL_9
0x4000eec	      0xbe01000000	                              mov esi, 1	       295	stdio2.h	FUNCTION_31	CALL_9
0x4000ef1	      0xe800000000	                          call 0x4000ef6	       295	stdio2.h	FUNCTION_31	CALL_9
0x4000ef6	        0x4883f83c	                           cmp rax, 0x3c	       865	elfcomm.c	FUNCTION_15	IF_2
0x4000efa	            0x752c	                           jne 0x4000f28	       865	elfcomm.c	FUNCTION_15	IF_2
0x4000efc	    0x488dbb920000	                   lea rdi, [rbx + 0x92]	       870	elfcomm.c	FUNCTION_15	IF_3	CALL_7
0x4000f03	      0xba02000000	                              mov edx, 2	       870	elfcomm.c	FUNCTION_15	IF_3	CALL_7
0x4000f08	      0xbe00000000	                              mov esi, 0	       870	elfcomm.c	FUNCTION_15	IF_3	CALL_7
0x4000f0d	      0xe800000000	                          call 0x4000f12	       870	elfcomm.c	FUNCTION_15	IF_3	CALL_7
0x4000f12	            0x85c0	                           test eax, eax	       870	elfcomm.c	FUNCTION_15	IF_3	CALL_7
0x4000f14	            0x7542	                           jne 0x4000f58	       870	elfcomm.c	FUNCTION_15	IF_3	CALL_7
0x4000f16	        0x4883c408	                              add rsp, 8	       878	elfcomm.c	FUNCTION_15
0x4000f1a	          0x4889ee	                            mov rsi, rbp	       877	elfcomm.c	FUNCTION_15	CALL_10
0x4000f1d	          0x4889df	                            mov rdi, rbx	       877	elfcomm.c	FUNCTION_15	CALL_10
0x4000f20	              0x5b	                                 pop rbx	       878	elfcomm.c	FUNCTION_15
0x4000f21	              0x5d	                                 pop rbp	       878	elfcomm.c	FUNCTION_15
0x4000f22	            0xeb5c	         jmp sym.get_archive_member_name	       877	elfcomm.c	FUNCTION_15	CALL_10
0x4000f24	         0xf1f4000	                         nop dword [rax]	       877	elfcomm.c	FUNCTION_15	CALL_10
0x4000f28	          0x488b1b	                    mov rbx, qword [rbx]	       867	elfcomm.c	FUNCTION_15	IF_2	CALL_6
0x4000f2b	      0xba05000000	                              mov edx, 5	       867	elfcomm.c	FUNCTION_15	IF_2	CALL_6
0x4000f30	      0xbe00000000	                              mov esi, 0	       867	elfcomm.c	FUNCTION_15	IF_2	CALL_6
0x4000f35	            0x31ff	                            xor edi, edi	       872	elfcomm.c	FUNCTION_15	IF_3	CALL_9
0x4000f37	      0xe800000000	                          call 0x4000f3c	       872	elfcomm.c	FUNCTION_15	IF_3	CALL_9
0x4000f3c	          0x4889de	                            mov rsi, rbx	       872	elfcomm.c	FUNCTION_15	IF_3	CALL_9
0x4000f3f	          0x4889c7	                            mov rdi, rax	       872	elfcomm.c	FUNCTION_15	IF_3	CALL_9
0x4000f42	            0x31c0	                            xor eax, eax	       872	elfcomm.c	FUNCTION_15	IF_3	CALL_9
0x4000f44	      0xe800000000	                          call 0x4000f49	       872	elfcomm.c	FUNCTION_15	IF_3	CALL_9
0x4000f49	        0x4883c408	                              add rsp, 8	       878	elfcomm.c	FUNCTION_15
0x4000f4d	            0x31c0	                            xor eax, eax	       878	elfcomm.c	FUNCTION_15
0x4000f4f	              0x5b	                                 pop rbx	       878	elfcomm.c	FUNCTION_15
0x4000f50	              0x5d	                                 pop rbp	       878	elfcomm.c	FUNCTION_15
0x4000f51	              0xc3	                                     ret	       878	elfcomm.c	FUNCTION_15
0x4000f52	    0x660f1f440000	                    nop word [rax + rax]	       878	elfcomm.c	FUNCTION_15
0x4000f58	          0x488b1b	                    mov rbx, qword [rbx]	       872	elfcomm.c	FUNCTION_15	IF_3	CALL_9
0x4000f5b	      0xba05000000	                              mov edx, 5	       872	elfcomm.c	FUNCTION_15	IF_3	CALL_9
0x4000f60	      0xbe00000000	                              mov esi, 0	       872	elfcomm.c	FUNCTION_15	IF_3	CALL_9
0x4000f65	            0xebce	                           jmp 0x4000f35	       872	elfcomm.c	FUNCTION_15	IF_3	CALL_9
0x4000f67	    0x660f1f840000	                    nop word [rax + rax]	       872	elfcomm.c	FUNCTION_15	IF_3	CALL_9
0x4000f70	          0x488b1b	                    mov rbx, qword [rbx]	       861	elfcomm.c	FUNCTION_15	IF_1	CALL_3
0x4000f73	      0xba05000000	                              mov edx, 5	       861	elfcomm.c	FUNCTION_15	IF_1	CALL_3
0x4000f78	      0xbe00000000	                              mov esi, 0	       861	elfcomm.c	FUNCTION_15	IF_1	CALL_3
0x4000f7d	            0xebb6	                           jmp 0x4000f35	       861	elfcomm.c	FUNCTION_15	IF_1	CALL_3
byte_get_signed	FOR,0:DO,0:WHILE,0:SWITCH,1:IF,0:CALL,2:ELSE,0:functions,0	29
0x4000910	              0x53	                                push rbx	       345	elfcomm.c	FUNCTION_7
0x4000911	            0x89f3	                            mov ebx, esi	       345	elfcomm.c	FUNCTION_7
0x4000913	            0x89de	                            mov esi, ebx	       346	elfcomm.c	FUNCTION_7	CALL_1
0x4000915	    0xff1500000000	                 call qword [0x0400091b]	       346	elfcomm.c	FUNCTION_7	CALL_1
0x400091b	          0x83fb08	                              cmp ebx, 8	       348	elfcomm.c	FUNCTION_7	SWITCH_1
0x400091e	            0x7750	                            ja 0x4000970	       348	elfcomm.c	FUNCTION_7	SWITCH_1
0x4000920	    0xff24dd000000	                       jmp qword [rbx*8]	       348	elfcomm.c	FUNCTION_7	SWITCH_1
0x4000927	    0x660f1f840000	                    nop word [rax + rax]	       348	elfcomm.c	FUNCTION_7	SWITCH_1
0x4000930	    0x483500008000	                       xor rax, 0x800000	       355	elfcomm.c	FUNCTION_7	SWITCH_1
0x4000936	    0x482d00008000	                       sub rax, 0x800000	       355	elfcomm.c	FUNCTION_7	SWITCH_1
0x400093c	              0x5b	                                 pop rbx	       370	elfcomm.c	FUNCTION_7
0x400093d	              0xc3	                                     ret	       370	elfcomm.c	FUNCTION_7
0x400093e	            0x6690	                                     nop	       370	elfcomm.c	FUNCTION_7
0x4000940	      0xba00000080	                     mov edx, 0x80000000	       357	elfcomm.c	FUNCTION_7	SWITCH_1
0x4000945	          0x4831d0	                            xor rax, rdx	       357	elfcomm.c	FUNCTION_7	SWITCH_1
0x4000948	    0x480500000080	             add rax, 0xffffffff80000000	       357	elfcomm.c	FUNCTION_7	SWITCH_1
0x400094e	              0x5b	                                 pop rbx	       370	elfcomm.c	FUNCTION_7
0x400094f	              0xc3	                                     ret	       370	elfcomm.c	FUNCTION_7
0x4000950	            0x3480	                            xor al, 0x80	       351	elfcomm.c	FUNCTION_7	SWITCH_1
0x4000952	        0x4883c080	             add rax, 0xffffffffffffff80	       351	elfcomm.c	FUNCTION_7	SWITCH_1
0x4000956	              0x5b	                                 pop rbx	       370	elfcomm.c	FUNCTION_7
0x4000957	              0xc3	                                     ret	       370	elfcomm.c	FUNCTION_7
0x4000958	     0xf1f84000000	                   nop dword [rax + rax]	       370	elfcomm.c	FUNCTION_7
0x4000960	          0x80f480	                            xor ah, 0x80	       353	elfcomm.c	FUNCTION_7	SWITCH_1
0x4000963	    0x482d00800000	                         sub rax, 0x8000	       353	elfcomm.c	FUNCTION_7	SWITCH_1
0x4000969	              0x5b	                                 pop rbx	       370	elfcomm.c	FUNCTION_7
0x400096a	              0xc3	                                     ret	       370	elfcomm.c	FUNCTION_7
0x400096b	       0xf1f440000	                   nop dword [rax + rax]	       370	elfcomm.c	FUNCTION_7
0x4000970	      0xe800000000	                          call 0x4000975	       368	elfcomm.c	FUNCTION_7	SWITCH_1	CALL_2
setup_archive	FOR,0:DO,0:WHILE,0:SWITCH,0:IF,14:CALL,26:ELSE,2:functions,0	179
0x4000b00	            0x4157	                                push r15	       612	elfcomm.c	FUNCTION_11
0x4000b02	            0x4156	                                push r14	       612	elfcomm.c	FUNCTION_11
0x4000b04	          0x4589c7	                           mov r15d, r8d	       612	elfcomm.c	FUNCTION_11
0x4000b07	            0x4155	                                push r13	       612	elfcomm.c	FUNCTION_11
0x4000b09	            0x4154	                                push r12	       612	elfcomm.c	FUNCTION_11
0x4000b0b	          0x4189cc	                           mov r12d, ecx	       612	elfcomm.c	FUNCTION_11
0x4000b0e	              0x55	                                push rbp	       612	elfcomm.c	FUNCTION_11
0x4000b0f	              0x53	                                push rbx	       612	elfcomm.c	FUNCTION_11
0x4000b10	          0x4889d5	                            mov rbp, rdx	       612	elfcomm.c	FUNCTION_11
0x4000b13	          0x4889fb	                            mov rbx, rdi	       612	elfcomm.c	FUNCTION_11
0x4000b16	          0x4889f7	                            mov rdi, rsi	       615	elfcomm.c	FUNCTION_11	CALL_1
0x4000b19	          0x4989f5	                            mov r13, rsi	       612	elfcomm.c	FUNCTION_11
0x4000b1c	        0x4883ec08	                              sub rsp, 8	       612	elfcomm.c	FUNCTION_11
0x4000b20	      0xe800000000	                          call 0x4000b25	       615	elfcomm.c	FUNCTION_11	CALL_1
0x4000b25	            0x31d2	                            xor edx, edx	       629	elfcomm.c	FUNCTION_11	IF_1	CALL_2
0x4000b27	      0xbe08000000	                              mov esi, 8	       629	elfcomm.c	FUNCTION_11	IF_1	CALL_2
0x4000b2c	          0x488903	                    mov qword [rbx], rax	       615	elfcomm.c	FUNCTION_11	CALL_1
0x4000b2f	        0x48896b08	                mov qword [rbx + 8], rbp	       616	elfcomm.c	FUNCTION_11
0x4000b33	    0x48c743100000	               mov qword [rbx + 0x10], 0	       617	elfcomm.c	FUNCTION_11
0x4000b3b	          0x4889ef	                            mov rdi, rbp	       629	elfcomm.c	FUNCTION_11	IF_1	CALL_2
0x4000b3e	    0x48c743180000	               mov qword [rbx + 0x18], 0	       618	elfcomm.c	FUNCTION_11
0x4000b46	    0x48c743200000	               mov qword [rbx + 0x20], 0	       619	elfcomm.c	FUNCTION_11
0x4000b4e	    0x48c743280000	               mov qword [rbx + 0x28], 0	       620	elfcomm.c	FUNCTION_11
0x4000b56	    0x48c743300000	               mov qword [rbx + 0x30], 0	       621	elfcomm.c	FUNCTION_11
0x4000b5e	    0x48c743380000	               mov qword [rbx + 0x38], 0	       622	elfcomm.c	FUNCTION_11
0x4000b66	    0x48c743400000	               mov qword [rbx + 0x40], 0	       623	elfcomm.c	FUNCTION_11
0x4000b6e	        0x44896350	            mov dword [rbx + 0x50], r12d	       624	elfcomm.c	FUNCTION_11
0x4000b72	    0xc74354000000	               mov dword [rbx + 0x54], 0	       625	elfcomm.c	FUNCTION_11
0x4000b79	    0x48c743480800	               mov qword [rbx + 0x48], 8	       626	elfcomm.c	FUNCTION_11
0x4000b81	      0xe800000000	                          call 0x4000b86	       629	elfcomm.c	FUNCTION_11	IF_1	CALL_2
0x4000b86	            0x85c0	                           test eax, eax	       629	elfcomm.c	FUNCTION_11	IF_1	CALL_2
0x4000b88	      0xba05000000	                              mov edx, 5	       631	elfcomm.c	FUNCTION_11	IF_1	CALL_4
0x4000b8d	      0xbe00000000	                              mov esi, 0	       631	elfcomm.c	FUNCTION_11	IF_1	CALL_4
0x4000b92	            0x7546	                           jne 0x4000bda	       629	elfcomm.c	FUNCTION_11	IF_1	CALL_2
0x4000b94	        0x4c8d7358	                   lea r14, [rbx + 0x58]	       634	elfcomm.c	FUNCTION_11	CALL_5
0x4000b98	          0x4889e9	                            mov rcx, rbp	       295	stdio2.h	FUNCTION_31	CALL_9
0x4000b9b	      0xba3c000000	                           mov edx, 0x3c	       295	stdio2.h	FUNCTION_31	CALL_9
0x4000ba0	      0xbe01000000	                              mov esi, 1	       295	stdio2.h	FUNCTION_31	CALL_9
0x4000ba5	          0x4189c4	                           mov r12d, eax	       295	stdio2.h	FUNCTION_31	CALL_9
0x4000ba8	          0x4c89f7	                            mov rdi, r14	       295	stdio2.h	FUNCTION_31	CALL_9
0x4000bab	      0xe800000000	                          call 0x4000bb0	       295	stdio2.h	FUNCTION_31	CALL_9
0x4000bb0	        0x4883f83c	                           cmp rax, 0x3c	       635	elfcomm.c	FUNCTION_11	IF_2
0x4000bb4	            0x744a	                            je 0x4000c00	       635	elfcomm.c	FUNCTION_11	IF_2
0x4000bb6	          0x4885c0	                           test rax, rax	       637	elfcomm.c	FUNCTION_11	IF_2	IF_3
0x4000bb9	            0x7515	                           jne 0x4000bd0	       637	elfcomm.c	FUNCTION_11	IF_2	IF_3
0x4000bbb	        0x4883c408	                              add rsp, 8	       707	elfcomm.c	FUNCTION_11
0x4000bbf	          0x4489e0	                           mov eax, r12d	       707	elfcomm.c	FUNCTION_11
0x4000bc2	              0x5b	                                 pop rbx	       707	elfcomm.c	FUNCTION_11
0x4000bc3	              0x5d	                                 pop rbp	       707	elfcomm.c	FUNCTION_11
0x4000bc4	            0x415c	                                 pop r12	       707	elfcomm.c	FUNCTION_11
0x4000bc6	            0x415d	                                 pop r13	       707	elfcomm.c	FUNCTION_11
0x4000bc8	            0x415e	                                 pop r14	       707	elfcomm.c	FUNCTION_11
0x4000bca	            0x415f	                                 pop r15	       707	elfcomm.c	FUNCTION_11
0x4000bcc	              0xc3	                                     ret	       707	elfcomm.c	FUNCTION_11
0x4000bcd	           0xf1f00	                         nop dword [rax]	       707	elfcomm.c	FUNCTION_11
0x4000bd0	      0xba05000000	                              mov edx, 5	       640	elfcomm.c	FUNCTION_11	IF_2	CALL_7
0x4000bd5	      0xbe00000000	                              mov esi, 0	       640	elfcomm.c	FUNCTION_11	IF_2	CALL_7
0x4000bda	            0x31ff	                            xor edi, edi	       640	elfcomm.c	FUNCTION_11	IF_2	CALL_7
0x4000bdc	    0x41bc01000000	                             mov r12d, 1	       641	elfcomm.c	FUNCTION_11	IF_2
0x4000be2	      0xe800000000	                          call 0x4000be7	       640	elfcomm.c	FUNCTION_11	IF_2	CALL_7
0x4000be7	          0x4c89ee	                            mov rsi, r13	       640	elfcomm.c	FUNCTION_11	IF_2	CALL_7
0x4000bea	          0x4889c7	                            mov rdi, rax	       640	elfcomm.c	FUNCTION_11	IF_2	CALL_7
0x4000bed	            0x31c0	                            xor eax, eax	       640	elfcomm.c	FUNCTION_11	IF_2	CALL_7
0x4000bef	      0xe800000000	                          call 0x4000bf4	       640	elfcomm.c	FUNCTION_11	IF_2	CALL_7
0x4000bf4	            0xebc5	                           jmp 0x4000bbb	       641	elfcomm.c	FUNCTION_11	IF_2
0x4000bf6	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       641	elfcomm.c	FUNCTION_11	IF_2
0x4000c00	      0xbf00000000	                              mov edi, 0	       645	elfcomm.c	FUNCTION_11	IF_4	CALL_8
0x4000c05	      0xb910000000	                           mov ecx, 0x10	       645	elfcomm.c	FUNCTION_11	IF_4	CALL_8
0x4000c0a	          0x4c89f6	                            mov rsi, r14	       645	elfcomm.c	FUNCTION_11	IF_4	CALL_8
0x4000c0d	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	       645	elfcomm.c	FUNCTION_11	IF_4	CALL_8
0x4000c0f	     0xf84e3000000	                            je 0x4000cf8	       645	elfcomm.c	FUNCTION_11	IF_4	CALL_8
0x4000c15	      0xbf00000000	                              mov edi, 0	       650	elfcomm.c	FUNCTION_11	ELSE_1	IF_6	CALL_10
0x4000c1a	      0xb910000000	                           mov ecx, 0x10	       650	elfcomm.c	FUNCTION_11	ELSE_1	IF_6	CALL_10
0x4000c1f	          0x4c89f6	                            mov rsi, r14	       650	elfcomm.c	FUNCTION_11	ELSE_1	IF_6	CALL_10
0x4000c22	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	       650	elfcomm.c	FUNCTION_11	ELSE_1	IF_6	CALL_10
0x4000c24	     0xf841e010000	                            je 0x4000d48	       650	elfcomm.c	FUNCTION_11	ELSE_1	IF_6	CALL_10
0x4000c2a	          0x4585ff	                         test r15d, r15d	       656	elfcomm.c	FUNCTION_11	ELSE_2	IF_8
0x4000c2d	     0xf853d010000	                           jne 0x4000d70	       656	elfcomm.c	FUNCTION_11	ELSE_2	IF_8
0x4000c33	      0xbf00000000	                              mov edi, 0	       659	elfcomm.c	FUNCTION_11	IF_9	CALL_13
0x4000c38	      0xb910000000	                           mov ecx, 0x10	       659	elfcomm.c	FUNCTION_11	IF_9	CALL_13
0x4000c3d	          0x4c89f6	                            mov rsi, r14	       659	elfcomm.c	FUNCTION_11	IF_9	CALL_13
0x4000c40	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	       659	elfcomm.c	FUNCTION_11	IF_9	CALL_13
0x4000c42	     0xf8573ffffff	                           jne 0x4000bbb	       659	elfcomm.c	FUNCTION_11	IF_9	CALL_13
0x4000c48	    0x440fb6b39200	          movzx r14d, byte [rbx + 0x92] 	       662	elfcomm.c	FUNCTION_11	IF_9
0x4000c50	    0x488dbb880000	                   lea rdi, [rbx + 0x88]	       664	elfcomm.c	FUNCTION_11	IF_9	CALL_14
0x4000c57	            0x31f6	                            xor esi, esi	       664	elfcomm.c	FUNCTION_11	IF_9	CALL_14
0x4000c59	      0xba0a000000	                            mov edx, 0xa	       664	elfcomm.c	FUNCTION_11	IF_9	CALL_14
0x4000c5e	    0xc68392000000	                mov byte [rbx + 0x92], 0	       663	elfcomm.c	FUNCTION_11	IF_9
0x4000c65	      0xe800000000	                          call 0x4000c6a	       664	elfcomm.c	FUNCTION_11	IF_9	CALL_14
0x4000c6a	        0x4883f807	                              cmp rax, 7	       667	elfcomm.c	FUNCTION_11	IF_9	IF_10
0x4000c6e	          0x4989c4	                            mov r12, rax	       664	elfcomm.c	FUNCTION_11	IF_9	CALL_14
0x4000c71	        0x48894338	             mov qword [rbx + 0x38], rax	       664	elfcomm.c	FUNCTION_11	IF_9	CALL_14
0x4000c75	    0x4488b3920000	             mov byte [rbx + 0x92], r14b	       665	elfcomm.c	FUNCTION_11	IF_9
0x4000c7c	      0xba05000000	                              mov edx, 5	       669	elfcomm.c	FUNCTION_11	IF_9	IF_10	CALL_16
0x4000c81	      0xbe00000000	                              mov esi, 0	       669	elfcomm.c	FUNCTION_11	IF_9	IF_10	CALL_16
0x4000c86	     0xf869e000000	                           jbe 0x4000d2a	       667	elfcomm.c	FUNCTION_11	IF_9	IF_10
0x4000c8c	          0x4885c0	                           test rax, rax	       674	elfcomm.c	FUNCTION_11	IF_9	IF_11
0x4000c8f	     0xf888b000000	                            js 0x4000d20	       674	elfcomm.c	FUNCTION_11	IF_9	IF_11
0x4000c95	        0x488b4348	            mov rax, qword [rbx + 0x48] 	       681	elfcomm.c	FUNCTION_11	IF_9
0x4000c99	      0x498d7c2401	                      lea rdi, [r12 + 1]	       684	elfcomm.c	FUNCTION_11	IF_9	CALL_19
0x4000c9e	      0x498d44043c	            lea rax, [r12 + rax + 0x3c] 	       681	elfcomm.c	FUNCTION_11	IF_9
0x4000ca3	        0x48894348	             mov qword [rbx + 0x48], rax	       681	elfcomm.c	FUNCTION_11	IF_9
0x4000ca7	      0xe800000000	                          call 0x4000cac	       684	elfcomm.c	FUNCTION_11	IF_9	CALL_19
0x4000cac	          0x4885c0	                           test rax, rax	       685	elfcomm.c	FUNCTION_11	IF_9	IF_12
0x4000caf	        0x48894330	             mov qword [rbx + 0x30], rax	       684	elfcomm.c	FUNCTION_11	IF_9	CALL_19
0x4000cb3	     0xf8418010000	                            je 0x4000dd1	       685	elfcomm.c	FUNCTION_11	IF_9	IF_12
0x4000cb9	          0x4889e9	                            mov rcx, rbp	       295	stdio2.h	FUNCTION_31	CALL_9
0x4000cbc	      0xba01000000	                              mov edx, 1	       295	stdio2.h	FUNCTION_31	CALL_9
0x4000cc1	          0x4c89e6	                            mov rsi, r12	       295	stdio2.h	FUNCTION_31	CALL_9
0x4000cc4	          0x4889c7	                            mov rdi, rax	       295	stdio2.h	FUNCTION_31	CALL_9
0x4000cc7	      0xe800000000	                          call 0x4000ccc	       295	stdio2.h	FUNCTION_31	CALL_9
0x4000ccc	        0x4883f801	                              cmp rax, 1	       691	elfcomm.c	FUNCTION_11	IF_9	IF_13	CALL_22
0x4000cd0	     0xf85ca000000	                           jne 0x4000da0	       691	elfcomm.c	FUNCTION_11	IF_9	IF_13	CALL_22
0x4000cd6	        0x488b4338	            mov rax, qword [rbx + 0x38] 	       700	elfcomm.c	FUNCTION_11	IF_9	IF_14
0x4000cda	            0xa801	                              test al, 1	       700	elfcomm.c	FUNCTION_11	IF_9	IF_14
0x4000cdc	     0xf85de000000	                           jne 0x4000dc0	       700	elfcomm.c	FUNCTION_11	IF_9	IF_14
0x4000ce2	        0x488b5330	            mov rdx, qword [rbx + 0x30] 	       703	elfcomm.c	FUNCTION_11	IF_9
0x4000ce6	          0x4531e4	                          xor r12d, r12d	       706	elfcomm.c	FUNCTION_11
0x4000ce9	        0xc6040200	                 mov byte [rdx + rax], 0	       703	elfcomm.c	FUNCTION_11	IF_9
0x4000ced	      0xe9c9feffff	                           jmp 0x4000bbb	       703	elfcomm.c	FUNCTION_11	IF_9
0x4000cf2	    0x660f1f440000	                    nop word [rax + rax]	       703	elfcomm.c	FUNCTION_11	IF_9
0x4000cf8	          0x4489fa	                           mov edx, r15d	       647	elfcomm.c	FUNCTION_11	IF_4	IF_5	CALL_9
0x4000cfb	      0xbe04000000	                              mov esi, 4	       647	elfcomm.c	FUNCTION_11	IF_4	IF_5	CALL_9
0x4000d00	          0x4889df	                            mov rdi, rbx	       647	elfcomm.c	FUNCTION_11	IF_4	IF_5	CALL_9
0x4000d03	      0xe858f5ffff	call sym.process_archive_index_and_symbols	       647	elfcomm.c	FUNCTION_11	IF_4	IF_5	CALL_9
0x4000d08	            0x85c0	                           test eax, eax	       647	elfcomm.c	FUNCTION_11	IF_4	IF_5	CALL_9
0x4000d0a	     0xf8523ffffff	                           jne 0x4000c33	       647	elfcomm.c	FUNCTION_11	IF_4	IF_5	CALL_9
0x4000d10	    0x41bc01000000	                             mov r12d, 1	       678	elfcomm.c	FUNCTION_11	IF_9	IF_11
0x4000d16	      0xe9a0feffff	                           jmp 0x4000bbb	       678	elfcomm.c	FUNCTION_11	IF_9	IF_11
0x4000d1b	       0xf1f440000	                   nop dword [rax + rax]	       678	elfcomm.c	FUNCTION_11	IF_9	IF_11
0x4000d20	      0xba05000000	                              mov edx, 5	       676	elfcomm.c	FUNCTION_11	IF_9	IF_11	CALL_18
0x4000d25	      0xbe00000000	                              mov esi, 0	       676	elfcomm.c	FUNCTION_11	IF_9	IF_11	CALL_18
0x4000d2a	            0x31ff	                            xor edi, edi	       676	elfcomm.c	FUNCTION_11	IF_9	IF_11	CALL_18
0x4000d2c	      0xe800000000	                          call 0x4000d31	       676	elfcomm.c	FUNCTION_11	IF_9	IF_11	CALL_18
0x4000d31	          0x4c89e2	                            mov rdx, r12	       676	elfcomm.c	FUNCTION_11	IF_9	IF_11	CALL_18
0x4000d34	          0x4889c7	                            mov rdi, rax	       676	elfcomm.c	FUNCTION_11	IF_9	IF_11	CALL_18
0x4000d37	          0x4c89ee	                            mov rsi, r13	       676	elfcomm.c	FUNCTION_11	IF_9	IF_11	CALL_18
0x4000d3a	            0x31c0	                            xor eax, eax	       676	elfcomm.c	FUNCTION_11	IF_9	IF_11	CALL_18
0x4000d3c	      0xe800000000	                          call 0x4000d41	       676	elfcomm.c	FUNCTION_11	IF_9	IF_11	CALL_18
0x4000d41	            0xebcd	                           jmp 0x4000d10	       676	elfcomm.c	FUNCTION_11	IF_9	IF_11	CALL_18
0x4000d43	       0xf1f440000	                   nop dword [rax + rax]	       676	elfcomm.c	FUNCTION_11	IF_9	IF_11	CALL_18
0x4000d48	    0xc74354010000	               mov dword [rbx + 0x54], 1	       652	elfcomm.c	FUNCTION_11	ELSE_1	IF_6
0x4000d4f	          0x4489fa	                           mov edx, r15d	       653	elfcomm.c	FUNCTION_11	ELSE_1	IF_6	IF_7	CALL_11
0x4000d52	      0xbe08000000	                              mov esi, 8	       653	elfcomm.c	FUNCTION_11	ELSE_1	IF_6	IF_7	CALL_11
0x4000d57	          0x4889df	                            mov rdi, rbx	       653	elfcomm.c	FUNCTION_11	ELSE_1	IF_6	IF_7	CALL_11
0x4000d5a	      0xe801f5ffff	call sym.process_archive_index_and_symbols	       653	elfcomm.c	FUNCTION_11	ELSE_1	IF_6	IF_7	CALL_11
0x4000d5f	            0x85c0	                           test eax, eax	       653	elfcomm.c	FUNCTION_11	ELSE_1	IF_6	IF_7	CALL_11
0x4000d61	     0xf85ccfeffff	                           jne 0x4000c33	       653	elfcomm.c	FUNCTION_11	ELSE_1	IF_6	IF_7	CALL_11
0x4000d67	            0xeba7	                           jmp 0x4000d10	       653	elfcomm.c	FUNCTION_11	ELSE_1	IF_6	IF_7	CALL_11
0x4000d69	     0xf1f80000000	                         nop dword [rax]	       653	elfcomm.c	FUNCTION_11	ELSE_1	IF_6	IF_7	CALL_11
0x4000d70	            0x31ff	                            xor edi, edi	       657	elfcomm.c	FUNCTION_11	ELSE_2	IF_8
0x4000d72	      0xba05000000	                              mov edx, 5	       657	elfcomm.c	FUNCTION_11	ELSE_2	IF_8
0x4000d77	      0xbe00000000	                              mov esi, 0	       657	elfcomm.c	FUNCTION_11	ELSE_2	IF_8
0x4000d7c	      0xe800000000	                          call 0x4000d81	       657	elfcomm.c	FUNCTION_11	ELSE_2	IF_8
0x4000d81	          0x4c89ea	                            mov rdx, r13	       104	stdio2.h	CALL_13
0x4000d84	          0x4889c6	                            mov rsi, rax	       104	stdio2.h	CALL_13
0x4000d87	      0xbf01000000	                              mov edi, 1	       104	stdio2.h	CALL_13
0x4000d8c	            0x31c0	                            xor eax, eax	       104	stdio2.h	CALL_13
0x4000d8e	      0xe800000000	                          call 0x4000d93	       104	stdio2.h	CALL_13
0x4000d93	      0xe99bfeffff	                           jmp 0x4000c33	       104	stdio2.h	CALL_13
0x4000d98	     0xf1f84000000	                   nop dword [rax + rax]	       104	stdio2.h	CALL_13
0x4000da0	        0x488b7b30	            mov rdi, qword [rbx + 0x30] 	       693	elfcomm.c	FUNCTION_11	IF_9	IF_13	CALL_23
0x4000da4	      0xe800000000	                          call 0x4000da9	       693	elfcomm.c	FUNCTION_11	IF_9	IF_13	CALL_23
0x4000da9	    0x48c743300000	               mov qword [rbx + 0x30], 0	       694	elfcomm.c	FUNCTION_11	IF_9	IF_13
0x4000db1	      0xba05000000	                              mov edx, 5	       695	elfcomm.c	FUNCTION_11	IF_9	IF_13	CALL_25
0x4000db6	      0xbe00000000	                              mov esi, 0	       695	elfcomm.c	FUNCTION_11	IF_9	IF_13	CALL_25
0x4000dbb	      0xe91afeffff	                           jmp 0x4000bda	       695	elfcomm.c	FUNCTION_11	IF_9	IF_13	CALL_25
0x4000dc0	          0x4889ef	                            mov rdi, rbp	       701	elfcomm.c	FUNCTION_11	IF_9	CALL_26
0x4000dc3	      0xe800000000	                          call 0x4000dc8	       701	elfcomm.c	FUNCTION_11	IF_9	CALL_26
0x4000dc8	        0x488b4338	            mov rax, qword [rbx + 0x38] 	       701	elfcomm.c	FUNCTION_11	IF_9	CALL_26
0x4000dcc	      0xe911ffffff	                           jmp 0x4000ce2	       701	elfcomm.c	FUNCTION_11	IF_9	CALL_26
0x4000dd1	            0x31ff	                            xor edi, edi	       687	elfcomm.c	FUNCTION_11	IF_9	IF_12	CALL_21
0x4000dd3	      0xba05000000	                              mov edx, 5	       687	elfcomm.c	FUNCTION_11	IF_9	IF_12	CALL_21
0x4000dd8	      0xbe00000000	                              mov esi, 0	       687	elfcomm.c	FUNCTION_11	IF_9	IF_12	CALL_21
0x4000ddd	      0xe800000000	                          call 0x4000de2	       687	elfcomm.c	FUNCTION_11	IF_9	IF_12	CALL_21
0x4000de2	          0x4889c7	                            mov rdi, rax	       687	elfcomm.c	FUNCTION_11	IF_9	IF_12	CALL_21
0x4000de5	            0x31c0	                            xor eax, eax	       687	elfcomm.c	FUNCTION_11	IF_9	IF_12	CALL_21
0x4000de7	      0xe800000000	                          call 0x4000dec	       687	elfcomm.c	FUNCTION_11	IF_9	IF_12	CALL_21
0x4000dec	      0xe91fffffff	                           jmp 0x4000d10	       687	elfcomm.c	FUNCTION_11	IF_9	IF_12	CALL_21
