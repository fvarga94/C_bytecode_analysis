vax_operandname	functions,0:WHILE,0:CALL,1:DO,0:SWITCH,1:IF,0:ELSE,0:FOR,0	70
0x4000040	          0x83ff14	                           cmp edi, 0x14	       124	vax.c	FUNCTION_2	SWITCH_1
0x4000043	     0xf8757010000	                            ja 0x40001a0	       124	vax.c	FUNCTION_2	SWITCH_1
0x4000049	            0x89ff	                            mov edi, edi	       124	vax.c	FUNCTION_2	SWITCH_1
0x400004b	    0xff24fd000000	                       jmp qword [rdi*8]	       124	vax.c	FUNCTION_2	SWITCH_1
0x4000052	    0x660f1f440000	                    nop word [rax + rax]	       124	vax.c	FUNCTION_2	SWITCH_1
0x4000058	      0xb800000000	                              mov eax, 0	       131	vax.c	FUNCTION_2	SWITCH_1
0x400005d	              0xc3	                                     ret	       171	vax.c	FUNCTION_2
0x400005e	            0x6690	                                     nop	       171	vax.c	FUNCTION_2
0x4000060	      0xb800000000	                              mov eax, 0	       129	vax.c	FUNCTION_2	SWITCH_1
0x4000065	              0xc3	                                     ret	       129	vax.c	FUNCTION_2	SWITCH_1
0x4000066	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       129	vax.c	FUNCTION_2	SWITCH_1
0x4000070	      0xb800000000	                              mov eax, 0	       127	vax.c	FUNCTION_2	SWITCH_1
0x4000075	              0xc3	                                     ret	       127	vax.c	FUNCTION_2	SWITCH_1
0x4000076	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       127	vax.c	FUNCTION_2	SWITCH_1
0x4000080	      0xb800000000	                              mov eax, 0	       167	vax.c	FUNCTION_2	SWITCH_1
0x4000085	              0xc3	                                     ret	       167	vax.c	FUNCTION_2	SWITCH_1
0x4000086	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       167	vax.c	FUNCTION_2	SWITCH_1
0x4000090	      0xb800000000	                              mov eax, 0	       165	vax.c	FUNCTION_2	SWITCH_1
0x4000095	              0xc3	                                     ret	       165	vax.c	FUNCTION_2	SWITCH_1
0x4000096	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       165	vax.c	FUNCTION_2	SWITCH_1
0x40000a0	      0xb800000000	                              mov eax, 0	       155	vax.c	FUNCTION_2	SWITCH_1
0x40000a5	              0xc3	                                     ret	       155	vax.c	FUNCTION_2	SWITCH_1
0x40000a6	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       155	vax.c	FUNCTION_2	SWITCH_1
0x40000b0	      0xb800000000	                              mov eax, 0	       153	vax.c	FUNCTION_2	SWITCH_1
0x40000b5	              0xc3	                                     ret	       153	vax.c	FUNCTION_2	SWITCH_1
0x40000b6	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       153	vax.c	FUNCTION_2	SWITCH_1
0x40000c0	      0xb800000000	                              mov eax, 0	       147	vax.c	FUNCTION_2	SWITCH_1
0x40000c5	              0xc3	                                     ret	       147	vax.c	FUNCTION_2	SWITCH_1
0x40000c6	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       147	vax.c	FUNCTION_2	SWITCH_1
0x40000d0	      0xb800000000	                              mov eax, 0	       145	vax.c	FUNCTION_2	SWITCH_1
0x40000d5	              0xc3	                                     ret	       145	vax.c	FUNCTION_2	SWITCH_1
0x40000d6	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       145	vax.c	FUNCTION_2	SWITCH_1
0x40000e0	      0xb800000000	                              mov eax, 0	       159	vax.c	FUNCTION_2	SWITCH_1
0x40000e5	              0xc3	                                     ret	       159	vax.c	FUNCTION_2	SWITCH_1
0x40000e6	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       159	vax.c	FUNCTION_2	SWITCH_1
0x40000f0	      0xb800000000	                              mov eax, 0	       157	vax.c	FUNCTION_2	SWITCH_1
0x40000f5	              0xc3	                                     ret	       157	vax.c	FUNCTION_2	SWITCH_1
0x40000f6	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       157	vax.c	FUNCTION_2	SWITCH_1
0x4000100	      0xb800000000	                              mov eax, 0	       163	vax.c	FUNCTION_2	SWITCH_1
0x4000105	              0xc3	                                     ret	       163	vax.c	FUNCTION_2	SWITCH_1
0x4000106	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       163	vax.c	FUNCTION_2	SWITCH_1
0x4000110	      0xb800000000	                              mov eax, 0	       161	vax.c	FUNCTION_2	SWITCH_1
0x4000115	              0xc3	                                     ret	       161	vax.c	FUNCTION_2	SWITCH_1
0x4000116	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       161	vax.c	FUNCTION_2	SWITCH_1
0x4000120	      0xb800000000	                              mov eax, 0	       151	vax.c	FUNCTION_2	SWITCH_1
0x4000125	              0xc3	                                     ret	       151	vax.c	FUNCTION_2	SWITCH_1
0x4000126	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       151	vax.c	FUNCTION_2	SWITCH_1
0x4000130	      0xb800000000	                              mov eax, 0	       149	vax.c	FUNCTION_2	SWITCH_1
0x4000135	              0xc3	                                     ret	       149	vax.c	FUNCTION_2	SWITCH_1
0x4000136	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       149	vax.c	FUNCTION_2	SWITCH_1
0x4000140	      0xb800000000	                              mov eax, 0	       143	vax.c	FUNCTION_2	SWITCH_1
0x4000145	              0xc3	                                     ret	       143	vax.c	FUNCTION_2	SWITCH_1
0x4000146	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       143	vax.c	FUNCTION_2	SWITCH_1
0x4000150	      0xb800000000	                              mov eax, 0	       141	vax.c	FUNCTION_2	SWITCH_1
0x4000155	              0xc3	                                     ret	       141	vax.c	FUNCTION_2	SWITCH_1
0x4000156	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       141	vax.c	FUNCTION_2	SWITCH_1
0x4000160	      0xb800000000	                              mov eax, 0	       139	vax.c	FUNCTION_2	SWITCH_1
0x4000165	              0xc3	                                     ret	       139	vax.c	FUNCTION_2	SWITCH_1
0x4000166	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       139	vax.c	FUNCTION_2	SWITCH_1
0x4000170	      0xb800000000	                              mov eax, 0	       137	vax.c	FUNCTION_2	SWITCH_1
0x4000175	              0xc3	                                     ret	       137	vax.c	FUNCTION_2	SWITCH_1
0x4000176	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       137	vax.c	FUNCTION_2	SWITCH_1
0x4000180	      0xb800000000	                              mov eax, 0	       135	vax.c	FUNCTION_2	SWITCH_1
0x4000185	              0xc3	                                     ret	       135	vax.c	FUNCTION_2	SWITCH_1
0x4000186	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       135	vax.c	FUNCTION_2	SWITCH_1
0x4000190	      0xb800000000	                              mov eax, 0	       133	vax.c	FUNCTION_2	SWITCH_1
0x4000195	              0xc3	                                     ret	       133	vax.c	FUNCTION_2	SWITCH_1
0x4000196	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       133	vax.c	FUNCTION_2	SWITCH_1
0x40001a0	        0x4883ec08	                              sub rsp, 8	       122	vax.c	FUNCTION_2
0x40001a4	      0xe800000000	                          call 0x40001a9	       170	vax.c	FUNCTION_2	CALL_1
vax_find_call	functions,0:WHILE,0:CALL,18:DO,0:SWITCH,2:IF,5:ELSE,0:FOR,1	205
0x4000330	            0x4157	                                push r15	       233	vax.c	FUNCTION_5
0x4000332	            0x4156	                                push r14	       233	vax.c	FUNCTION_5
0x4000334	            0x4155	                                push r13	       233	vax.c	FUNCTION_5
0x4000336	            0x4154	                                push r12	       233	vax.c	FUNCTION_5
0x4000338	          0x4989fd	                            mov r13, rdi	       233	vax.c	FUNCTION_5
0x400033b	              0x55	                                push rbp	       233	vax.c	FUNCTION_5
0x400033c	              0x53	                                push rbx	       233	vax.c	FUNCTION_5
0x400033d	          0x4889f5	                            mov rbp, rsi	       233	vax.c	FUNCTION_5
0x4000340	          0x4989d4	                            mov r12, rdx	       233	vax.c	FUNCTION_5
0x4000343	        0x4883ec18	                           sub rsp, 0x18	       233	vax.c	FUNCTION_5
0x4000347	    0x8b0500000000	            mov eax, dword [0x0400034d] 	       242	vax.c	FUNCTION_5	IF_1
0x400034d	            0x85c0	                           test eax, eax	       242	vax.c	FUNCTION_5	IF_1
0x400034f	     0xf84bb010000	                            je 0x4000510	       242	vax.c	FUNCTION_5	IF_1
0x4000355	    0xf60500000000	               test byte [0x0400035c], 1	       250	vax.c	FUNCTION_5	CALL_2
0x400035c	     0xf858e010000	                           jne 0x40004f0	       250	vax.c	FUNCTION_5	CALL_2
0x4000362	          0x4c39e5	                            cmp rbp, r12	       253	vax.c	FUNCTION_5	FOR_1
0x4000365	            0x721a	                            jb 0x4000381	       253	vax.c	FUNCTION_5	FOR_1
0x4000367	      0xe924010000	                           jmp 0x4000490	       253	vax.c	FUNCTION_5	FOR_1
0x400036c	         0xf1f4000	                         nop dword [rax]	       253	vax.c	FUNCTION_5	FOR_1
0x4000370	      0xb801000000	                              mov eax, 1	       267	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_1
0x4000375	          0x4801c5	                            add rbp, rax	       253	vax.c	FUNCTION_5	FOR_1
0x4000378	          0x4939ec	                            cmp r12, rbp	       253	vax.c	FUNCTION_5	FOR_1
0x400037b	     0xf860f010000	                           jbe 0x4000490	       253	vax.c	FUNCTION_5	FOR_1
0x4000381	    0x488b05000000	            mov rax, qword [0x04000388] 	       257	vax.c	FUNCTION_5	FOR_1
0x4000388	          0x4889eb	                            mov rbx, rbp	       256	vax.c	FUNCTION_5	FOR_1
0x400038b	        0x482b5828	             sub rbx, qword [rax + 0x28]	       256	vax.c	FUNCTION_5	FOR_1
0x400038f	    0x48031d000000	             add rbx, qword [0x04000396]	       256	vax.c	FUNCTION_5	FOR_1
0x4000396	          0x803bfb	                    cmp byte [rbx], 0xfb	       258	vax.c	FUNCTION_5	FOR_1	IF_2
0x4000399	            0x75d5	                           jne 0x4000370	       258	vax.c	FUNCTION_5	FOR_1	IF_2
0x400039b	    0xf60500000000	               test byte [0x040003a2], 1	       264	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_3
0x40003a2	     0xf85f8000000	                           jne 0x40004a0	       264	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_3
0x40003a8	         0xfb67b01	               movzx edi, byte [rbx + 1]	       266	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_4
0x40003ac	      0xe8fffdffff	         call sym.vax_operandmode.isra.0	       266	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_4
0x40003b1	            0x85c0	                           test eax, eax	       267	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_1
0x40003b3	            0x7405	                            je 0x40003ba	       267	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_1
0x40003b5	          0x83f80d	                            cmp eax, 0xd	       267	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_1
0x40003b8	            0x75b6	                           jne 0x4000370	       267	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_1
0x40003ba	        0x488d7b01	                      lea rdi, [rbx + 1]	       275	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_5
0x40003be	      0xe8edfeffff	              call sym.vax_operandlength	       275	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_5
0x40003c3	        0x4c8d7001	                      lea r14, [rax + 1]	       275	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_5
0x40003c7	          0x4c01f3	                            add rbx, r14	       276	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_6
0x40003ca	           0xfb63b	                   movzx edi, byte [rbx]	       276	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_6
0x40003cd	      0xe8defdffff	         call sym.vax_operandmode.isra.0	       276	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_6
0x40003d2	            0x89c1	                            mov ecx, eax	       276	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_6
0x40003d4	          0x83f914	                           cmp ecx, 0x14	       276	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_6
0x40003d7	            0x7797	                            ja 0x4000370	       276	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_6
0x40003d9	      0xb801000000	                              mov eax, 1	       276	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_6
0x40003de	          0x48d3e0	                             shl rax, cl	       276	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_6
0x40003e1	          0x4989c7	                            mov r15, rax	       276	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_6
0x40003e4	    0x4181e7081515	                      and r15d, 0x151508	       276	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_6
0x40003eb	     0xf85cf010000	                           jne 0x40005c0	       276	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_6
0x40003f1	      0xa900800a00	                       test eax, 0xa8000	       276	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_6
0x40003f6	     0xf84d1000000	                            je 0x40004cd	       276	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_6
0x40003fc	           0xfb63b	                   movzx edi, byte [rbx]	       213	vax.c	FUNCTION_4	CALL_1
0x40003ff	      0xe8acfdffff	         call sym.vax_operandmode.isra.0	       213	vax.c	FUNCTION_4	CALL_1
0x4000404	          0x83f811	                           cmp eax, 0x11	       216	vax.c	FUNCTION_4	SWITCH_1
0x4000407	        0x488d7b01	                      lea rdi, [rbx + 1]	       215	vax.c	FUNCTION_4
0x400040b	     0xf84e5010000	                            je 0x40005f6	       216	vax.c	FUNCTION_4	SWITCH_1
0x4000411	          0x83f813	                           cmp eax, 0x13	       216	vax.c	FUNCTION_4	SWITCH_1
0x4000414	     0xf84c5010000	                            je 0x40005df	       216	vax.c	FUNCTION_4	SWITCH_1
0x400041a	          0x83f80f	                            cmp eax, 0xf	       216	vax.c	FUNCTION_4	SWITCH_1
0x400041d	     0xf84ea010000	                            je 0x400060d	       216	vax.c	FUNCTION_4	SWITCH_1
0x4000423	    0x488b0d000000	            mov rcx, qword [0x0400042a] 	        97	stdio2.h	CALL_14
0x400042a	      0xba1f000000	                           mov edx, 0x1f	        97	stdio2.h	CALL_14
0x400042f	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_14
0x4000434	      0xbf00000000	                              mov edi, 0	        97	stdio2.h	CALL_14
0x4000439	      0xe800000000	                          call 0x400043e	        97	stdio2.h	CALL_14
0x400043e	          0x4901ef	                            add r15, rbp	       308	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	CALL_12
0x4000441	          0x4489ff	                           mov edi, r15d	       309	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	CALL_13
0x4000444	      0xe800000000	                          call 0x4000449	       309	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	CALL_13
0x4000449	            0x85c0	                           test eax, eax	       309	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	CALL_13
0x400044b	     0xf847c000000	                            je 0x40004cd	       309	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	CALL_13
0x4000451	          0x4c89fe	                            mov rsi, r15	       311	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	CALL_14
0x4000454	      0xbf00000000	                              mov edi, 0	       311	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	CALL_14
0x4000459	      0xe800000000	                          call 0x400045e	       311	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	CALL_14
0x400045e	          0x4885c0	                           test rax, rax	       312	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4
0x4000461	          0x4889c1	                            mov rcx, rax	       311	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	CALL_14
0x4000464	            0x7467	                            je 0x40004cd	       312	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4
0x4000466	    0xf60500000000	               test byte [0x0400046d], 1	       314	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	CALL_15
0x400046d	     0xf85b2010000	                           jne 0x4000625	       314	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	CALL_15
0x4000473	          0x4c3b38	                    cmp r15, qword [rax]	       321	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	IF_5
0x4000476	     0xf85f4feffff	                           jne 0x4000370	       321	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	IF_5
0x400047c	            0x31d2	                            xor edx, edx	       326	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	IF_5	CALL_16
0x400047e	          0x4889ce	                            mov rsi, rcx	       326	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	IF_5	CALL_16
0x4000481	      0xe941010000	                           jmp 0x40005c7	       326	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	IF_5	CALL_16
0x4000486	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       326	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	IF_5	CALL_16
0x4000490	        0x4883c418	                           add rsp, 0x18	       350	vax.c	FUNCTION_5
0x4000494	              0x5b	                                 pop rbx	       350	vax.c	FUNCTION_5
0x4000495	              0x5d	                                 pop rbp	       350	vax.c	FUNCTION_5
0x4000496	            0x415c	                                 pop r12	       350	vax.c	FUNCTION_5
0x4000498	            0x415d	                                 pop r13	       350	vax.c	FUNCTION_5
0x400049a	            0x415e	                                 pop r14	       350	vax.c	FUNCTION_5
0x400049c	            0x415f	                                 pop r15	       350	vax.c	FUNCTION_5
0x400049e	              0xc3	                                     ret	       350	vax.c	FUNCTION_5
0x400049f	              0x90	                                     nop	       350	vax.c	FUNCTION_5
0x40004a0	          0x4889ea	                            mov rdx, rbp	       104	stdio2.h	CALL_17
0x40004a3	      0xbe00000000	                              mov esi, 0	       104	stdio2.h	CALL_17
0x40004a8	      0xbf01000000	                              mov edi, 1	       104	stdio2.h	CALL_17
0x40004ad	            0x31c0	                            xor eax, eax	       104	stdio2.h	CALL_17
0x40004af	      0xe800000000	                          call 0x40004b4	       104	stdio2.h	CALL_17
0x40004b4	         0xfb67b01	               movzx edi, byte [rbx + 1]	       266	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_4
0x40004b8	      0xe8f3fcffff	         call sym.vax_operandmode.isra.0	       266	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_4
0x40004bd	            0x85c0	                           test eax, eax	       267	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_1
0x40004bf	          0x4189c7	                           mov r15d, eax	       266	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_4
0x40004c2	     0xf8480000000	                            je 0x4000548	       267	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_1
0x40004c8	          0x83f80d	                            cmp eax, 0xd	       267	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_1
0x40004cb	            0x747b	                            je 0x4000548	       267	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_1
0x40004cd	    0xf60500000000	               test byte [0x040004d4], 1	       344	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	CALL_18
0x40004d4	     0xf8496feffff	                            je 0x4000370	       344	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	CALL_18
0x40004da	      0xbf00000000	                              mov edi, 0	       104	stdio2.h	CALL_17
0x40004df	      0xe800000000	                          call 0x40004e4	       104	stdio2.h	CALL_17
0x40004e4	      0xb801000000	                              mov eax, 1	       104	stdio2.h	CALL_17
0x40004e9	      0xe987feffff	                           jmp 0x4000375	       104	stdio2.h	CALL_17
0x40004ee	            0x6690	                                     nop	       104	stdio2.h	CALL_17
0x40004f0	        0x498b5510	            mov rdx, qword [r13 + 0x10] 	       104	stdio2.h	CALL_17
0x40004f4	          0x4d89e0	                             mov r8, r12	       104	stdio2.h	CALL_17
0x40004f7	          0x4889e9	                            mov rcx, rbp	       104	stdio2.h	CALL_17
0x40004fa	      0xbe00000000	                              mov esi, 0	       104	stdio2.h	CALL_17
0x40004ff	      0xbf01000000	                              mov edi, 1	       104	stdio2.h	CALL_17
0x4000504	            0x31c0	                            xor eax, eax	       104	stdio2.h	CALL_17
0x4000506	      0xe800000000	                          call 0x400050b	       104	stdio2.h	CALL_17
0x400050b	      0xe952feffff	                           jmp 0x4000362	       104	stdio2.h	CALL_17
0x4000510	      0xbf00000000	                              mov edi, 0	       245	vax.c	FUNCTION_5	IF_1	CALL_1
0x4000515	    0xc70500000000	               mov dword [0x0400051f], 1	       244	vax.c	FUNCTION_5	IF_1
0x400051f	      0xe800000000	                          call 0x4000524	       245	vax.c	FUNCTION_5	IF_1	CALL_1
0x4000524	    0xf20f10050000	         movsd xmm0, qword [0x0400052c] 	       246	vax.c	FUNCTION_5	IF_1
0x400052c	    0x48c705000000	               mov qword [0x04000537], 0	       247	vax.c	FUNCTION_5	IF_1
0x4000537	    0xf20f11050000	         movsd qword [0x0400053f], xmm0 	       246	vax.c	FUNCTION_5	IF_1
0x400053f	      0xe911feffff	                           jmp 0x4000355	       246	vax.c	FUNCTION_5	IF_1
0x4000544	         0xf1f4000	                         nop dword [rax]	       246	vax.c	FUNCTION_5	IF_1
0x4000548	        0x488d7b01	                      lea rdi, [rbx + 1]	       275	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_5
0x400054c	      0xe85ffdffff	              call sym.vax_operandlength	       275	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_5
0x4000551	        0x4c8d7001	                      lea r14, [rax + 1]	       275	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_5
0x4000555	          0x4c01f3	                            add rbx, r14	       276	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_6
0x4000558	           0xfb63b	                   movzx edi, byte [rbx]	       276	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_6
0x400055b	      0xe850fcffff	         call sym.vax_operandmode.isra.0	       276	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_6
0x4000560	    0xf60500000000	               test byte [0x04000567], 1	       277	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_7
0x4000567	            0x89c1	                            mov ecx, eax	       276	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_6
0x4000569	     0xf8465feffff	                            je 0x40003d4	       277	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_7
0x400056f	          0x4489ff	                           mov edi, r15d	       277	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_7
0x4000572	        0x89442408	                mov dword [rsp + 8], eax	       277	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_7
0x4000576	      0xe8c5faffff	                call sym.vax_operandname	       277	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_7
0x400057b	      0xbe00000000	                              mov esi, 0	       104	stdio2.h	CALL_17
0x4000580	          0x4889c2	                            mov rdx, rax	       104	stdio2.h	CALL_17
0x4000583	      0xbf01000000	                              mov edi, 1	       104	stdio2.h	CALL_17
0x4000588	            0x31c0	                            xor eax, eax	       104	stdio2.h	CALL_17
0x400058a	      0xe800000000	                          call 0x400058f	       104	stdio2.h	CALL_17
0x400058f	        0x8b4c2408	                mov ecx, dword [rsp + 8]	       277	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_7
0x4000593	            0x89cf	                            mov edi, ecx	       277	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_7
0x4000595	      0xe8a6faffff	                call sym.vax_operandname	       277	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_7
0x400059a	      0xbe00000000	                              mov esi, 0	       104	stdio2.h	CALL_17
0x400059f	          0x4889c2	                            mov rdx, rax	       104	stdio2.h	CALL_17
0x40005a2	      0xbf01000000	                              mov edi, 1	       104	stdio2.h	CALL_17
0x40005a7	            0x31c0	                            xor eax, eax	       104	stdio2.h	CALL_17
0x40005a9	      0xe800000000	                          call 0x40005ae	       104	stdio2.h	CALL_17
0x40005ae	        0x8b4c2408	                mov ecx, dword [rsp + 8]	       104	stdio2.h	CALL_17
0x40005b2	          0x83f914	                           cmp ecx, 0x14	       104	stdio2.h	CALL_17
0x40005b5	     0xf8712ffffff	                            ja 0x40004cd	       104	stdio2.h	CALL_17
0x40005bb	      0xe919feffff	                           jmp 0x40003d9	       104	stdio2.h	CALL_17
0x40005c0	            0x31d2	                            xor edx, edx	       297	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	CALL_10
0x40005c2	      0xbe00000000	                              mov esi, 0	       297	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	CALL_10
0x40005c7	          0x4c89ef	                            mov rdi, r13	       326	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	IF_5	CALL_16
0x40005ca	      0xe800000000	                          call 0x40005cf	       326	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	IF_5	CALL_16
0x40005cf	          0x4889df	                            mov rdi, rbx	       327	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	IF_5	CALL_17
0x40005d2	      0xe8d9fcffff	              call sym.vax_operandlength	       327	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	IF_5	CALL_17
0x40005d7	          0x4c01f0	                            add rax, r14	       327	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	IF_5	CALL_17
0x40005da	      0xe996fdffff	                           jmp 0x4000375	       328	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	IF_5
0x40005df	    0x488b05000000	            mov rax, qword [0x040005e6] 	       226	vax.c	FUNCTION_4	SWITCH_1	CALL_4
0x40005e6	        0x488b4008	                mov rax, qword [rax + 8]	       226	vax.c	FUNCTION_4	SWITCH_1	CALL_4
0x40005ea	          0xff5040	                 call qword [rax + 0x40]	       226	vax.c	FUNCTION_4	SWITCH_1	CALL_4
0x40005ed	        0x4c8d7804	                      lea r15, [rax + 4]	       226	vax.c	FUNCTION_4	SWITCH_1	CALL_4
0x40005f1	      0xe948feffff	                           jmp 0x400043e	       226	vax.c	FUNCTION_4	SWITCH_1	CALL_4
0x40005f6	    0x488b05000000	            mov rax, qword [0x040005fd] 	       224	vax.c	FUNCTION_4	SWITCH_1	CALL_3
0x40005fd	        0x488b4008	                mov rax, qword [rax + 8]	       224	vax.c	FUNCTION_4	SWITCH_1	CALL_3
0x4000601	          0xff5058	                 call qword [rax + 0x58]	       224	vax.c	FUNCTION_4	SWITCH_1	CALL_3
0x4000604	        0x4c8d7802	                      lea r15, [rax + 2]	       224	vax.c	FUNCTION_4	SWITCH_1	CALL_3
0x4000608	      0xe931feffff	                           jmp 0x400043e	       224	vax.c	FUNCTION_4	SWITCH_1	CALL_3
0x400060d	         0xfb64301	               movzx eax, byte [rbx + 1]	       224	vax.c	FUNCTION_4	SWITCH_1	CALL_3
0x4000611	        0x448d7880	                  lea r15d, [rax - 0x80]	       224	vax.c	FUNCTION_4	SWITCH_1	CALL_3
0x4000615	        0x450fb6ff	                        movzx r15d, r15b	       224	vax.c	FUNCTION_4	SWITCH_1	CALL_3
0x4000619	        0x4183ef7f	                          sub r15d, 0x7f	       224	vax.c	FUNCTION_4	SWITCH_1	CALL_3
0x400061d	          0x4d63ff	                        movsxd r15, r15d	       224	vax.c	FUNCTION_4	SWITCH_1	CALL_3
0x4000620	      0xe919feffff	                           jmp 0x400043e	       224	vax.c	FUNCTION_4	SWITCH_1	CALL_3
0x4000625	      0x4889442408	                mov qword [rsp + 8], rax	       224	vax.c	FUNCTION_4	SWITCH_1	CALL_3
0x400062a	          0x4c89fa	                            mov rdx, r15	       104	stdio2.h	CALL_17
0x400062d	      0xbe00000000	                              mov esi, 0	       104	stdio2.h	CALL_17
0x4000632	      0xbf01000000	                              mov edi, 1	       104	stdio2.h	CALL_17
0x4000637	            0x31c0	                            xor eax, eax	       104	stdio2.h	CALL_17
0x4000639	      0xe800000000	                          call 0x400063e	       104	stdio2.h	CALL_17
0x400063e	      0x488b4c2408	                mov rcx, qword [rsp + 8]	       104	stdio2.h	CALL_17
0x4000643	      0xbe00000000	                              mov esi, 0	       104	stdio2.h	CALL_17
0x4000648	      0xbf01000000	                              mov edi, 1	       104	stdio2.h	CALL_17
0x400064d	            0x31c0	                            xor eax, eax	       104	stdio2.h	CALL_17
0x400064f	        0x488b5110	            mov rdx, qword [rcx + 0x10] 	       104	stdio2.h	CALL_17
0x4000653	      0xe800000000	                          call 0x4000658	       104	stdio2.h	CALL_17
0x4000658	      0x488b4c2408	                mov rcx, qword [rsp + 8]	       104	stdio2.h	CALL_17
0x400065d	            0x31c0	                            xor eax, eax	       104	stdio2.h	CALL_17
0x400065f	      0xbe00000000	                              mov esi, 0	       104	stdio2.h	CALL_17
0x4000664	      0xbf01000000	                              mov edi, 1	       104	stdio2.h	CALL_17
0x4000669	          0x488b11	                    mov rdx, qword [rcx]	       104	stdio2.h	CALL_17
0x400066c	      0xe800000000	                          call 0x4000671	       104	stdio2.h	CALL_17
0x4000671	      0x488b4c2408	                mov rcx, qword [rsp + 8]	       321	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	IF_5
0x4000676	          0x4c3b39	                    cmp r15, qword [rcx]	       321	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	IF_5
0x4000679	     0xf854efeffff	                           jne 0x40004cd	       321	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	IF_5
0x400067f	      0xe9f8fdffff	                           jmp 0x400047c	       321	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	IF_5
vax_operandlength	functions,0:WHILE,0:CALL,3:DO,0:SWITCH,1:IF,0:ELSE,0:FOR,0	36
0x40002b0	            0x31d2	                            xor edx, edx	       175	vax.c	FUNCTION_3
0x40002b2	          0x4889f9	                            mov rcx, rdi	       175	vax.c	FUNCTION_3
0x40002b5	        0x4883ec08	                              sub rsp, 8	       175	vax.c	FUNCTION_3
0x40002b9	         0xfb63c11	             movzx edi, byte [rcx + rdx]	       177	vax.c	FUNCTION_3	SWITCH_1	CALL_1
0x40002bd	      0xe8eefeffff	         call sym.vax_operandmode.isra.0	       177	vax.c	FUNCTION_3	SWITCH_1	CALL_1
0x40002c2	          0x83f814	                           cmp eax, 0x14	       177	vax.c	FUNCTION_3	SWITCH_1	CALL_1
0x40002c5	            0x7741	                            ja 0x4000308	       177	vax.c	FUNCTION_3	SWITCH_1	CALL_1
0x40002c7	            0x89c0	                            mov eax, eax	       177	vax.c	FUNCTION_3	SWITCH_1	CALL_1
0x40002c9	    0xff24c5000000	                       jmp qword [rax*8]	       177	vax.c	FUNCTION_3	SWITCH_1	CALL_1
0x40002d0	      0xb803000000	                              mov eax, 3	       195	vax.c	FUNCTION_3	SWITCH_1
0x40002d5	        0x4883c408	                              add rsp, 8	       208	vax.c	FUNCTION_3
0x40002d9	          0x4801d0	                            add rax, rdx	       208	vax.c	FUNCTION_3
0x40002dc	              0xc3	                                     ret	       208	vax.c	FUNCTION_3
0x40002dd	           0xf1f00	                         nop dword [rax]	       208	vax.c	FUNCTION_3
0x40002e0	      0xb802000000	                              mov eax, 2	       190	vax.c	FUNCTION_3	SWITCH_1
0x40002e5	        0x4883c408	                              add rsp, 8	       208	vax.c	FUNCTION_3
0x40002e9	          0x4801d0	                            add rax, rdx	       208	vax.c	FUNCTION_3
0x40002ec	              0xc3	                                     ret	       208	vax.c	FUNCTION_3
0x40002ed	           0xf1f00	                         nop dword [rax]	       208	vax.c	FUNCTION_3
0x40002f0	        0x4883c201	                              add rdx, 1	       208	vax.c	FUNCTION_3
0x40002f4	         0xfb63c11	             movzx edi, byte [rcx + rdx]	       177	vax.c	FUNCTION_3	SWITCH_1	CALL_1
0x40002f8	      0xe8b3feffff	         call sym.vax_operandmode.isra.0	       177	vax.c	FUNCTION_3	SWITCH_1	CALL_1
0x40002fd	          0x83f814	                           cmp eax, 0x14	       177	vax.c	FUNCTION_3	SWITCH_1	CALL_1
0x4000300	            0x76c5	                           jbe 0x40002c7	       177	vax.c	FUNCTION_3	SWITCH_1	CALL_1
0x4000302	    0x660f1f440000	                    nop word [rax + rax]	       177	vax.c	FUNCTION_3	SWITCH_1	CALL_1
0x4000308	      0xe800000000	                          call 0x400030d	       207	vax.c	FUNCTION_3	CALL_3
0x400030d	           0xf1f00	                         nop dword [rax]	       207	vax.c	FUNCTION_3	CALL_3
0x4000310	      0xb801000000	                              mov eax, 1	       185	vax.c	FUNCTION_3	SWITCH_1
0x4000315	        0x4883c408	                              add rsp, 8	       208	vax.c	FUNCTION_3
0x4000319	          0x4801d0	                            add rax, rdx	       208	vax.c	FUNCTION_3
0x400031c	              0xc3	                                     ret	       208	vax.c	FUNCTION_3
0x400031d	           0xf1f00	                         nop dword [rax]	       208	vax.c	FUNCTION_3
0x4000320	      0xb805000000	                              mov eax, 5	       202	vax.c	FUNCTION_3	SWITCH_1
0x4000325	        0x4883c408	                              add rsp, 8	       208	vax.c	FUNCTION_3
0x4000329	          0x4801d0	                            add rax, rdx	       208	vax.c	FUNCTION_3
0x400032c	              0xc3	                                     ret	       208	vax.c	FUNCTION_3
