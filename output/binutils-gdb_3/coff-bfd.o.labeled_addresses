bfd_coff_get_syment	WHILE,0:CALL,3:SWITCH,0:DO,0:functions,0:IF,2:ELSE,0:FOR,0	40
0x4000040	        0x4883ec08	                              sub rsp, 8	        34	coff-bfd.c	FUNCTION_1
0x4000044	          0x488b0e	                    mov rcx, qword [rsi]	        37	coff-bfd.c	FUNCTION_1	CALL_1
0x4000047	        0x488b4108	                mov rax, qword [rcx + 8]	        37	coff-bfd.c	FUNCTION_1	CALL_1
0x400004b	          0x8b4008	                mov eax, dword [rax + 8]	        37	coff-bfd.c	FUNCTION_1	CALL_1
0x400004e	          0x83e802	                              sub eax, 2	        37	coff-bfd.c	FUNCTION_1	CALL_1
0x4000051	          0x83e0fd	                     and eax, 0xfffffffd	        37	coff-bfd.c	FUNCTION_1	CALL_1
0x4000054	            0x756a	                           jne 0x40000c0	        37	coff-bfd.c	FUNCTION_1	CALL_1
0x4000056	    0x4883b9f80000	               cmp qword [rcx + 0xf8], 0	        37	coff-bfd.c	FUNCTION_1	CALL_1
0x400005e	            0x7460	                            je 0x40000c0	        37	coff-bfd.c	FUNCTION_1	CALL_1
0x4000060	        0x488b4630	            mov rax, qword [rsi + 0x30] 	        38	coff-bfd.c	FUNCTION_1	IF_1
0x4000064	          0x4885c0	                           test rax, rax	        38	coff-bfd.c	FUNCTION_1	IF_1
0x4000067	            0x7457	                            je 0x40000c0	        38	coff-bfd.c	FUNCTION_1	IF_1
0x4000069	          0x8b4830	            mov ecx, dword [rax + 0x30] 	        39	coff-bfd.c	FUNCTION_1	IF_1
0x400006c	            0x85c9	                           test ecx, ecx	        39	coff-bfd.c	FUNCTION_1	IF_1
0x400006e	            0x7450	                            je 0x40000c0	        39	coff-bfd.c	FUNCTION_1	IF_1
0x4000070	        0x488b4808	                mov rcx, qword [rax + 8]	        45	coff-bfd.c	FUNCTION_1
0x4000074	          0x48890a	                    mov qword [rdx], rcx	        45	coff-bfd.c	FUNCTION_1
0x4000077	        0x488b4810	            mov rcx, qword [rax + 0x10] 	        45	coff-bfd.c	FUNCTION_1
0x400007b	        0x48894a08	                mov qword [rdx + 8], rcx	        45	coff-bfd.c	FUNCTION_1
0x400007f	        0x488b4818	            mov rcx, qword [rax + 0x18] 	        45	coff-bfd.c	FUNCTION_1
0x4000083	        0x48894a10	             mov qword [rdx + 0x10], rcx	        45	coff-bfd.c	FUNCTION_1
0x4000087	        0x488b4820	            mov rcx, qword [rax + 0x20] 	        45	coff-bfd.c	FUNCTION_1
0x400008b	        0x48894a18	             mov qword [rdx + 0x18], rcx	        45	coff-bfd.c	FUNCTION_1
0x400008f	        0x488b4028	            mov rax, qword [rax + 0x28] 	        45	coff-bfd.c	FUNCTION_1
0x4000093	        0x48894220	             mov qword [rdx + 0x20], rax	        45	coff-bfd.c	FUNCTION_1
0x4000097	        0x488b4e30	            mov rcx, qword [rsi + 0x30] 	        47	coff-bfd.c	FUNCTION_1	IF_2
0x400009b	      0xb801000000	                              mov eax, 1	        53	coff-bfd.c	FUNCTION_1
0x40000a0	        0xf6410401	                  test byte [rcx + 4], 1	        47	coff-bfd.c	FUNCTION_1	IF_2
0x40000a4	            0x740f	                            je 0x40000b5	        47	coff-bfd.c	FUNCTION_1	IF_2
0x40000a6	    0x488b8ff80000	            mov rcx, qword [rdi + 0xf8] 	        49	coff-bfd.c	FUNCTION_1	CALL_3
0x40000ad	        0x488b4920	            mov rcx, qword [rcx + 0x20] 	        48	coff-bfd.c	FUNCTION_1	IF_2
0x40000b1	        0x48294a10	             sub qword [rdx + 0x10], rcx	        48	coff-bfd.c	FUNCTION_1	IF_2
0x40000b5	        0x4883c408	                              add rsp, 8	        54	coff-bfd.c	FUNCTION_1
0x40000b9	              0xc3	                                     ret	        54	coff-bfd.c	FUNCTION_1
0x40000ba	    0x660f1f440000	                    nop word [rax + rax]	        54	coff-bfd.c	FUNCTION_1
0x40000c0	      0xbf05000000	                              mov edi, 5	        41	coff-bfd.c	FUNCTION_1	IF_1	CALL_2
0x40000c5	      0xe800000000	                          call 0x40000ca	        41	coff-bfd.c	FUNCTION_1	IF_1	CALL_2
0x40000ca	            0x31c0	                            xor eax, eax	        42	coff-bfd.c	FUNCTION_1	IF_1
0x40000cc	        0x4883c408	                              add rsp, 8	        54	coff-bfd.c	FUNCTION_1
0x40000d0	              0xc3	                                     ret	        54	coff-bfd.c	FUNCTION_1
bfd_coff_get_auxent	WHILE,0:CALL,6:SWITCH,0:DO,0:functions,0:IF,4:ELSE,0:FOR,0	89
0x40000e0	              0x55	                                push rbp	        63	coff-bfd.c	FUNCTION_2
0x40000e1	              0x53	                                push rbx	        63	coff-bfd.c	FUNCTION_2
0x40000e2	          0x4889fd	                            mov rbp, rdi	        63	coff-bfd.c	FUNCTION_2
0x40000e5	        0x4883ec18	                           sub rsp, 0x18	        63	coff-bfd.c	FUNCTION_2
0x40000e9	          0x488b3e	                    mov rdi, qword [rsi]	        67	coff-bfd.c	FUNCTION_2	CALL_1
0x40000ec	        0x488b4708	                mov rax, qword [rdi + 8]	        67	coff-bfd.c	FUNCTION_2	CALL_1
0x40000f0	          0x8b4008	                mov eax, dword [rax + 8]	        67	coff-bfd.c	FUNCTION_2	CALL_1
0x40000f3	          0x83e802	                              sub eax, 2	        67	coff-bfd.c	FUNCTION_2	CALL_1
0x40000f6	          0x83e0fd	                     and eax, 0xfffffffd	        67	coff-bfd.c	FUNCTION_2	CALL_1
0x40000f9	     0xf8511010000	                           jne 0x4000210	        67	coff-bfd.c	FUNCTION_2	CALL_1
0x40000ff	    0x4883bff80000	               cmp qword [rdi + 0xf8], 0	        67	coff-bfd.c	FUNCTION_2	CALL_1
0x4000107	     0xf8403010000	                            je 0x4000210	        67	coff-bfd.c	FUNCTION_2	CALL_1
0x400010d	        0x488b4630	            mov rax, qword [rsi + 0x30] 	        70	coff-bfd.c	FUNCTION_2	IF_1
0x4000111	          0x4885c0	                           test rax, rax	        70	coff-bfd.c	FUNCTION_2	IF_1
0x4000114	     0xf84f6000000	                            je 0x4000210	        70	coff-bfd.c	FUNCTION_2	IF_1
0x400011a	          0x8b7030	            mov esi, dword [rax + 0x30] 	        71	coff-bfd.c	FUNCTION_2	IF_1
0x400011d	            0x85f6	                           test esi, esi	        71	coff-bfd.c	FUNCTION_2	IF_1
0x400011f	     0xf84eb000000	                            je 0x4000210	        71	coff-bfd.c	FUNCTION_2	IF_1
0x4000125	         0xfb67029	           movzx esi, byte [rax + 0x29] 	        72	coff-bfd.c	FUNCTION_2	IF_1
0x4000129	            0x39d6	                            cmp esi, edx	        72	coff-bfd.c	FUNCTION_2	IF_1
0x400012b	     0xf8edf000000	                           jle 0x4000210	        72	coff-bfd.c	FUNCTION_2	IF_1
0x4000131	          0x4863d2	                         movsxd rdx, edx	        78	coff-bfd.c	FUNCTION_2
0x4000134	        0x488d5a01	                      lea rbx, [rdx + 1]	        78	coff-bfd.c	FUNCTION_2
0x4000138	    0x488d14dd0000	                        lea rdx, [rbx*8]	        78	coff-bfd.c	FUNCTION_2
0x4000140	        0x48c1e306	                              shl rbx, 6	        78	coff-bfd.c	FUNCTION_2
0x4000144	          0x4829d3	                            sub rbx, rdx	        78	coff-bfd.c	FUNCTION_2
0x4000147	          0x4801c3	                            add rbx, rax	        78	coff-bfd.c	FUNCTION_2
0x400014a	          0x8b4330	            mov eax, dword [rbx + 0x30] 	        80	coff-bfd.c	FUNCTION_2	CALL_3
0x400014d	            0x85c0	                           test eax, eax	        80	coff-bfd.c	FUNCTION_2	CALL_3
0x400014f	     0xf85d3000000	                           jne 0x4000228	        80	coff-bfd.c	FUNCTION_2	CALL_3
0x4000155	        0x488b4308	                mov rax, qword [rbx + 8]	        81	coff-bfd.c	FUNCTION_2
0x4000159	          0x488901	                    mov qword [rcx], rax	        81	coff-bfd.c	FUNCTION_2
0x400015c	        0x488b5310	            mov rdx, qword [rbx + 0x10] 	        81	coff-bfd.c	FUNCTION_2
0x4000160	        0x48895108	                mov qword [rcx + 8], rdx	        81	coff-bfd.c	FUNCTION_2
0x4000164	        0x488b5318	            mov rdx, qword [rbx + 0x18] 	        81	coff-bfd.c	FUNCTION_2
0x4000168	        0x48895110	             mov qword [rcx + 0x10], rdx	        81	coff-bfd.c	FUNCTION_2
0x400016c	        0x488b5320	            mov rdx, qword [rbx + 0x20] 	        81	coff-bfd.c	FUNCTION_2
0x4000170	        0x48895118	             mov qword [rcx + 0x18], rdx	        81	coff-bfd.c	FUNCTION_2
0x4000174	        0x488b5328	            mov rdx, qword [rbx + 0x28] 	        81	coff-bfd.c	FUNCTION_2
0x4000178	        0x48895120	             mov qword [rcx + 0x20], rdx	        81	coff-bfd.c	FUNCTION_2
0x400017c	         0xfb65304	               movzx edx, byte [rbx + 4]	        83	coff-bfd.c	FUNCTION_2	IF_2
0x4000180	          0xf6c202	                              test dl, 2	        83	coff-bfd.c	FUNCTION_2	IF_2
0x4000183	            0x7424	                            je 0x40001a9	        83	coff-bfd.c	FUNCTION_2	IF_2
0x4000185	    0x488b95f80000	            mov rdx, qword [rbp + 0xf8] 	        86	coff-bfd.c	FUNCTION_2	CALL_4
0x400018c	        0x482b4220	             sub rax, qword [rdx + 0x20]	        84	coff-bfd.c	FUNCTION_2	IF_2
0x4000190	    0x48bab76ddbb6	          movabs rdx, 0x6db6db6db6db6db7	        84	coff-bfd.c	FUNCTION_2	IF_2
0x400019a	        0x48c1f803	                              sar rax, 3	        84	coff-bfd.c	FUNCTION_2	IF_2
0x400019e	        0x480fafc2	                           imul rax, rdx	        84	coff-bfd.c	FUNCTION_2	IF_2
0x40001a2	          0x488901	                    mov qword [rcx], rax	        84	coff-bfd.c	FUNCTION_2	IF_2
0x40001a5	         0xfb65304	               movzx edx, byte [rbx + 4]	        84	coff-bfd.c	FUNCTION_2	IF_2
0x40001a9	          0xf6c204	                              test dl, 4	        88	coff-bfd.c	FUNCTION_2	IF_3
0x40001ac	            0x7429	                            je 0x40001d7	        88	coff-bfd.c	FUNCTION_2	IF_3
0x40001ae	    0x488b95f80000	            mov rdx, qword [rbp + 0xf8] 	        91	coff-bfd.c	FUNCTION_2	CALL_5
0x40001b5	        0x488b4118	            mov rax, qword [rcx + 0x18] 	        89	coff-bfd.c	FUNCTION_2	IF_3
0x40001b9	        0x482b4220	             sub rax, qword [rdx + 0x20]	        89	coff-bfd.c	FUNCTION_2	IF_3
0x40001bd	    0x48bab76ddbb6	          movabs rdx, 0x6db6db6db6db6db7	        89	coff-bfd.c	FUNCTION_2	IF_3
0x40001c7	        0x48c1f803	                              sar rax, 3	        89	coff-bfd.c	FUNCTION_2	IF_3
0x40001cb	        0x480fafc2	                           imul rax, rdx	        89	coff-bfd.c	FUNCTION_2	IF_3
0x40001cf	        0x48894118	             mov qword [rcx + 0x18], rax	        89	coff-bfd.c	FUNCTION_2	IF_3
0x40001d3	         0xfb65304	               movzx edx, byte [rbx + 4]	        89	coff-bfd.c	FUNCTION_2	IF_3
0x40001d7	          0x83e208	                              and edx, 8	        93	coff-bfd.c	FUNCTION_2	IF_4
0x40001da	      0xb801000000	                              mov eax, 1	        98	coff-bfd.c	FUNCTION_2
0x40001df	            0x743b	                            je 0x400021c	        93	coff-bfd.c	FUNCTION_2	IF_4
0x40001e1	    0x488bb5f80000	            mov rsi, qword [rbp + 0xf8] 	        96	coff-bfd.c	FUNCTION_2	CALL_6
0x40001e8	          0x488b11	                    mov rdx, qword [rcx]	        94	coff-bfd.c	FUNCTION_2	IF_4
0x40001eb	        0x482b5620	             sub rdx, qword [rsi + 0x20]	        94	coff-bfd.c	FUNCTION_2	IF_4
0x40001ef	    0x48beb76ddbb6	          movabs rsi, 0x6db6db6db6db6db7	        94	coff-bfd.c	FUNCTION_2	IF_4
0x40001f9	        0x48c1fa03	                              sar rdx, 3	        94	coff-bfd.c	FUNCTION_2	IF_4
0x40001fd	        0x480fafd6	                           imul rdx, rsi	        94	coff-bfd.c	FUNCTION_2	IF_4
0x4000201	          0x488911	                    mov qword [rcx], rdx	        94	coff-bfd.c	FUNCTION_2	IF_4
0x4000204	        0x4883c418	                           add rsp, 0x18	        99	coff-bfd.c	FUNCTION_2
0x4000208	              0x5b	                                 pop rbx	        99	coff-bfd.c	FUNCTION_2
0x4000209	              0x5d	                                 pop rbp	        99	coff-bfd.c	FUNCTION_2
0x400020a	              0xc3	                                     ret	        99	coff-bfd.c	FUNCTION_2
0x400020b	       0xf1f440000	                   nop dword [rax + rax]	        99	coff-bfd.c	FUNCTION_2
0x4000210	      0xbf05000000	                              mov edi, 5	        74	coff-bfd.c	FUNCTION_2	IF_1	CALL_2
0x4000215	      0xe800000000	                          call 0x400021a	        74	coff-bfd.c	FUNCTION_2	IF_1	CALL_2
0x400021a	            0x31c0	                            xor eax, eax	        75	coff-bfd.c	FUNCTION_2	IF_1
0x400021c	        0x4883c418	                           add rsp, 0x18	        99	coff-bfd.c	FUNCTION_2
0x4000220	              0x5b	                                 pop rbx	        99	coff-bfd.c	FUNCTION_2
0x4000221	              0x5d	                                 pop rbp	        99	coff-bfd.c	FUNCTION_2
0x4000222	              0xc3	                                     ret	        99	coff-bfd.c	FUNCTION_2
0x4000223	       0xf1f440000	                   nop dword [rax + rax]	        99	coff-bfd.c	FUNCTION_2
0x4000228	      0xbe50000000	                           mov esi, 0x50	        80	coff-bfd.c	FUNCTION_2	CALL_3
0x400022d	      0xbf00000000	                              mov edi, 0	        80	coff-bfd.c	FUNCTION_2	CALL_3
0x4000232	      0x48894c2408	                mov qword [rsp + 8], rcx	        80	coff-bfd.c	FUNCTION_2	CALL_3
0x4000237	      0xe800000000	                          call 0x400023c	        80	coff-bfd.c	FUNCTION_2	CALL_3
0x400023c	      0x488b4c2408	                mov rcx, qword [rsp + 8]	        80	coff-bfd.c	FUNCTION_2	CALL_3
0x4000241	      0xe90fffffff	                           jmp 0x4000155	        80	coff-bfd.c	FUNCTION_2	CALL_3
