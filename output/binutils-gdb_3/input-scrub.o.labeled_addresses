bump_line_counters	CALL,0:FOR,0:ELSE,0:functions,0:DO,0:IF,2:SWITCH,0:WHILE,0	11
0x40006e0	    0x48833d000000	cmp qword [0x040006e8], 0xffffffffffffffff	       426	input-scrub.c	FUNCTION_12	IF_1
0x40006e8	            0x7406	                            je 0x40006f0	       426	input-scrub.c	FUNCTION_12	IF_1
0x40006ea	            0xf3c3	                                     ret	       426	input-scrub.c	FUNCTION_12	IF_1
0x40006ec	         0xf1f4000	                         nop dword [rax]	       426	input-scrub.c	FUNCTION_12	IF_1
0x40006f0	    0x8b0500000000	            mov eax, dword [0x040006f6] 	       429	input-scrub.c	FUNCTION_12	IF_1	IF_2
0x40006f6	    0x830500000000	               add dword [0x040006fd], 1	       428	input-scrub.c	FUNCTION_12	IF_1
0x40006fd	            0x85c0	                           test eax, eax	       429	input-scrub.c	FUNCTION_12	IF_1	IF_2
0x40006ff	            0x78e9	                            js 0x40006ea	       429	input-scrub.c	FUNCTION_12	IF_1	IF_2
0x4000701	          0x83c001	                              add eax, 1	       430	input-scrub.c	FUNCTION_12	IF_1	IF_2
0x4000704	    0x890500000000	            mov dword [0x0400070a], eax 	       430	input-scrub.c	FUNCTION_12	IF_1	IF_2
0x400070a	              0xc3	                                     ret	       430	input-scrub.c	FUNCTION_12	IF_1	IF_2
input_scrub_push	CALL,4:FOR,0:ELSE,0:functions,0:DO,0:IF,0:SWITCH,0:WHILE,0	47
0x4000090	              0x55	                                push rbp	       154	input-scrub.c	FUNCTION_2
0x4000091	              0x53	                                push rbx	       154	input-scrub.c	FUNCTION_2
0x4000092	          0x4889fd	                            mov rbp, rdi	       154	input-scrub.c	FUNCTION_2
0x4000095	      0xbf80000000	                           mov edi, 0x80	       157	input-scrub.c	FUNCTION_2	CALL_1
0x400009a	        0x4883ec08	                              sub rsp, 8	       154	input-scrub.c	FUNCTION_2
0x400009e	      0xe800000000	                          call 0x40000a3	       157	input-scrub.c	FUNCTION_2	CALL_1
0x40000a3	          0x4889c3	                            mov rbx, rax	       157	input-scrub.c	FUNCTION_2	CALL_1
0x40000a6	        0x48896878	             mov qword [rax + 0x78], rbp	       159	input-scrub.c	FUNCTION_2
0x40000aa	    0x488b05000000	            mov rax, qword [0x040000b1] 	       160	input-scrub.c	FUNCTION_2
0x40000b1	          0x488903	                    mov qword [rbx], rax	       160	input-scrub.c	FUNCTION_2
0x40000b4	    0x488b05000000	            mov rax, qword [0x040000bb] 	       161	input-scrub.c	FUNCTION_2
0x40000bb	        0x48894308	                mov qword [rbx + 8], rax	       161	input-scrub.c	FUNCTION_2
0x40000bf	    0x488b05000000	            mov rax, qword [0x040000c6] 	       162	input-scrub.c	FUNCTION_2
0x40000c6	        0x48894310	             mov qword [rbx + 0x10], rax	       162	input-scrub.c	FUNCTION_2
0x40000ca	    0x488b05000000	            mov rax, qword [0x040000d1] 	       163	input-scrub.c	FUNCTION_2
0x40000d1	        0x48894320	             mov qword [rbx + 0x20], rax	       163	input-scrub.c	FUNCTION_2
0x40000d5	    0x488b05000000	            mov rax, qword [0x040000dc] 	       164	input-scrub.c	FUNCTION_2
0x40000dc	        0x48894328	             mov qword [rbx + 0x28], rax	       164	input-scrub.c	FUNCTION_2
0x40000e0	    0x488b05000000	            mov rax, qword [0x040000e7] 	       165	input-scrub.c	FUNCTION_2
0x40000e7	        0x48894330	             mov qword [rbx + 0x30], rax	       165	input-scrub.c	FUNCTION_2
0x40000eb	    0x8b0500000000	            mov eax, dword [0x040000f1] 	       166	input-scrub.c	FUNCTION_2
0x40000f1	          0x894338	             mov dword [rbx + 0x38], eax	       166	input-scrub.c	FUNCTION_2
0x40000f4	    0x8b0500000000	            mov eax, dword [0x040000fa] 	       167	input-scrub.c	FUNCTION_2
0x40000fa	          0x89433c	             mov dword [rbx + 0x3c], eax	       167	input-scrub.c	FUNCTION_2
0x40000fd	    0x488b05000000	            mov rax, qword [0x04000104] 	       168	input-scrub.c	FUNCTION_2
0x4000104	        0x48894340	             mov qword [rbx + 0x40], rax	       168	input-scrub.c	FUNCTION_2
0x4000108	    0x488b05000000	            mov rax, qword [0x0400010f] 	       169	input-scrub.c	FUNCTION_2
0x400010f	        0x48894348	             mov qword [rbx + 0x48], rax	       169	input-scrub.c	FUNCTION_2
0x4000113	    0x488b05000000	            mov rax, qword [0x0400011a] 	       169	input-scrub.c	FUNCTION_2
0x400011a	        0x48894350	             mov qword [rbx + 0x50], rax	       169	input-scrub.c	FUNCTION_2
0x400011e	    0x488b05000000	            mov rax, qword [0x04000125] 	       169	input-scrub.c	FUNCTION_2
0x4000125	        0x48894358	             mov qword [rbx + 0x58], rax	       169	input-scrub.c	FUNCTION_2
0x4000129	    0x8b0500000000	            mov eax, dword [0x0400012f] 	       170	input-scrub.c	FUNCTION_2
0x400012f	          0x894360	             mov dword [rbx + 0x60], eax	       170	input-scrub.c	FUNCTION_2
0x4000132	     0xfb605000000	           movzx eax, byte [0x04000139] 	        53	string3.h	FUNCTION_17	CALL_3
0x4000139	          0x884318	               mov byte [rbx + 0x18], al	        53	string3.h	FUNCTION_17	CALL_3
0x400013c	    0x488b05000000	            mov rax, qword [0x04000143] 	       172	input-scrub.c	FUNCTION_2
0x4000143	        0x48894368	             mov qword [rbx + 0x68], rax	       172	input-scrub.c	FUNCTION_2
0x4000147	      0xe800000000	                          call 0x400014c	       173	input-scrub.c	FUNCTION_2	CALL_3
0x400014c	    0x48c705000000	mov qword [0x04000157], 0xffffffffffffffff 	       175	input-scrub.c	FUNCTION_2
0x4000157	        0x48894370	             mov qword [rbx + 0x70], rax	       173	input-scrub.c	FUNCTION_2	CALL_3
0x400015b	      0xe8e0feffff	             call sym.input_scrub_reinit	       177	input-scrub.c	FUNCTION_2	CALL_4
0x4000160	        0x4883c408	                              add rsp, 8	       180	input-scrub.c	FUNCTION_2
0x4000164	          0x4889d8	                            mov rax, rbx	       180	input-scrub.c	FUNCTION_2
0x4000167	              0x5b	                                 pop rbx	       180	input-scrub.c	FUNCTION_2
0x4000168	              0x5d	                                 pop rbp	       180	input-scrub.c	FUNCTION_2
0x4000169	              0xc3	                                     ret	       180	input-scrub.c	FUNCTION_2
input_scrub_begin	CALL,6:FOR,0:ELSE,0:functions,0:DO,0:IF,0:SWITCH,0:WHILE,0	7
0x4000170	        0x4883ec08	                              sub rsp, 8	       211	input-scrub.c	FUNCTION_4
0x4000174	    0x48c705000000	               mov qword [0x0400017f], 0	       216	input-scrub.c	FUNCTION_4
0x400017f	    0x48c705000000	               mov qword [0x0400018a], 0	       217	input-scrub.c	FUNCTION_4
0x400018a	      0xe8b1feffff	             call sym.input_scrub_reinit	       218	input-scrub.c	FUNCTION_4	CALL_5
0x400018f	            0x31ff	                            xor edi, edi	       219	input-scrub.c	FUNCTION_4	CALL_6
0x4000191	        0x4883c408	                              add rsp, 8	       220	input-scrub.c	FUNCTION_4
0x4000195	      0xe900000000	                           jmp 0x400019a	       219	input-scrub.c	FUNCTION_4	CALL_6
input_scrub_reinit	CALL,4:FOR,0:ELSE,0:functions,0:DO,0:IF,0:SWITCH,0:WHILE,0	13
0x4000040	        0x4883ec08	                              sub rsp, 8	       138	input-scrub.c	FUNCTION_1
0x4000044	      0xe800000000	                          call 0x4000049	       139	input-scrub.c	FUNCTION_1	CALL_1
0x4000049	    0xc70500000000	     mov dword [0x04000053], 0xffffffff 	       140	input-scrub.c	FUNCTION_1
0x4000053	    0x48c705000000	               mov qword [0x0400005e], 0	       141	input-scrub.c	FUNCTION_1
0x400005e	      0xe800000000	                          call 0x4000063	       143	input-scrub.c	FUNCTION_1	CALL_2
0x4000063	          0x4801c0	                            add rax, rax	       143	input-scrub.c	FUNCTION_1	CALL_2
0x4000066	        0x488d7803	                      lea rdi, [rax + 3]	       144	input-scrub.c	FUNCTION_1	CALL_3
0x400006a	    0x488905000000	            mov qword [0x04000071], rax 	       143	input-scrub.c	FUNCTION_1	CALL_2
0x4000071	      0xe800000000	                          call 0x4000076	       144	input-scrub.c	FUNCTION_1	CALL_3
0x4000076	    0x488905000000	            mov qword [0x0400007d], rax 	       144	input-scrub.c	FUNCTION_1	CALL_3
0x400007d	          0xc6000a	                     mov byte [rax], 0xa	        53	string3.h	FUNCTION_17	CALL_3
0x4000080	        0x4883c408	                              add rsp, 8	       146	input-scrub.c	FUNCTION_1
0x4000084	              0xc3	                                     ret	       146	input-scrub.c	FUNCTION_1
as_where	CALL,1:FOR,0:ELSE,0:functions,0:DO,0:IF,2:SWITCH,0:WHILE,0	30
0x4000820	    0x488b05000000	            mov rax, qword [0x04000827] 	       512	input-scrub.c	FUNCTION_16	IF_1
0x4000827	          0x4885c0	                           test rax, rax	       512	input-scrub.c	FUNCTION_16	IF_1
0x400082a	            0x7414	                            je 0x4000840	       512	input-scrub.c	FUNCTION_16	IF_1
0x400082c	          0x4885ff	                           test rdi, rdi	       513	input-scrub.c	FUNCTION_16	IF_1
0x400082f	            0x7420	                            je 0x4000851	       513	input-scrub.c	FUNCTION_16	IF_1
0x4000831	    0x8b1500000000	            mov edx, dword [0x04000837] 	       513	input-scrub.c	FUNCTION_16	IF_1
0x4000837	            0x85d2	                           test edx, edx	       513	input-scrub.c	FUNCTION_16	IF_1
0x4000839	            0x781d	                            js 0x4000858	       513	input-scrub.c	FUNCTION_16	IF_1
0x400083b	            0x8917	                    mov dword [rdi], edx	       498	input-scrub.c	FUNCTION_15	IF_1	IF_2
0x400083d	              0xc3	                                     ret	       498	input-scrub.c	FUNCTION_15	IF_1	IF_2
0x400083e	            0x6690	                                     nop	       498	input-scrub.c	FUNCTION_15	IF_1	IF_2
0x4000840	    0x488b05000000	            mov rax, qword [0x04000847] 	       495	input-scrub.c	FUNCTION_15	IF_1
0x4000847	          0x4885c0	                           test rax, rax	       495	input-scrub.c	FUNCTION_15	IF_1
0x400084a	            0x7424	                            je 0x4000870	       495	input-scrub.c	FUNCTION_15	IF_1
0x400084c	          0x4885ff	                           test rdi, rdi	       497	input-scrub.c	FUNCTION_15	IF_1	IF_2
0x400084f	            0x7513	                           jne 0x4000864	       497	input-scrub.c	FUNCTION_15	IF_1	IF_2
0x4000851	            0xf3c3	                                     ret	       521	input-scrub.c	FUNCTION_16
0x4000853	       0xf1f440000	                   nop dword [rax + rax]	       521	input-scrub.c	FUNCTION_16
0x4000858	    0x488b05000000	            mov rax, qword [0x0400085f] 	       495	input-scrub.c	FUNCTION_15	IF_1
0x400085f	          0x4885c0	                           test rax, rax	       495	input-scrub.c	FUNCTION_15	IF_1
0x4000862	            0x7411	                            je 0x4000875	       495	input-scrub.c	FUNCTION_15	IF_1
0x4000864	    0x8b1500000000	            mov edx, dword [0x0400086a] 	       498	input-scrub.c	FUNCTION_15	IF_1	IF_2
0x400086a	            0x8917	                    mov dword [rdi], edx	       498	input-scrub.c	FUNCTION_15	IF_1	IF_2
0x400086c	              0xc3	                                     ret	       498	input-scrub.c	FUNCTION_15	IF_1	IF_2
0x400086d	           0xf1f00	                         nop dword [rax]	       498	input-scrub.c	FUNCTION_15	IF_1	IF_2
0x4000870	          0x4885ff	                           test rdi, rdi	       502	input-scrub.c	FUNCTION_15	IF_3
0x4000873	            0x74dc	                            je 0x4000851	       502	input-scrub.c	FUNCTION_15	IF_3
0x4000875	    0xc70700000000	                      mov dword [rdi], 0	       503	input-scrub.c	FUNCTION_15	IF_3
0x400087b	            0x31c0	                            xor eax, eax	       504	input-scrub.c	FUNCTION_15
0x400087d	              0xc3	                                     ret	       504	input-scrub.c	FUNCTION_15
input_scrub_new_file	CALL,2:FOR,0:ELSE,0:functions,0:DO,0:IF,0:SWITCH,0:WHILE,0	20
0x40002b0	            0x31f6	                            xor esi, esi	       239	input-scrub.c	FUNCTION_6	CALL_1
0x40002b2	    0x803d00000000	                cmp byte [0x040002b9], 0	       239	input-scrub.c	FUNCTION_6	CALL_1
0x40002b9	              0x53	                                push rbx	       238	input-scrub.c	FUNCTION_6
0x40002ba	          0x4889fb	                            mov rbx, rdi	       238	input-scrub.c	FUNCTION_6
0x40002bd	        0x400f94c6	                                sete sil	       239	input-scrub.c	FUNCTION_6	CALL_1
0x40002c1	      0xe800000000	                          call 0x40002c6	       239	input-scrub.c	FUNCTION_6	CALL_1
0x40002c6	          0x803b00	                       cmp byte [rbx], 0	       240	input-scrub.c	FUNCTION_6	CALL_2
0x40002c9	          0x4889d8	                            mov rax, rbx	       240	input-scrub.c	FUNCTION_6	CALL_2
0x40002cc	            0x7511	                           jne 0x40002df	       240	input-scrub.c	FUNCTION_6	CALL_2
0x40002ce	      0xba05000000	                              mov edx, 5	       240	input-scrub.c	FUNCTION_6	CALL_2
0x40002d3	      0xbe00000000	                              mov esi, 0	       240	input-scrub.c	FUNCTION_6	CALL_2
0x40002d8	            0x31ff	                            xor edi, edi	       240	input-scrub.c	FUNCTION_6	CALL_2
0x40002da	      0xe800000000	                          call 0x40002df	       240	input-scrub.c	FUNCTION_6	CALL_2
0x40002df	    0x488905000000	            mov qword [0x040002e6], rax 	       240	input-scrub.c	FUNCTION_6	CALL_2
0x40002e6	    0x488b05000000	            mov rax, qword [0x040002ed] 	       244	input-scrub.c	FUNCTION_6
0x40002ed	    0xc70500000000	               mov dword [0x040002f7], 0	       241	input-scrub.c	FUNCTION_6
0x40002f7	    0x48c705000000	               mov qword [0x04000302], 0	       243	input-scrub.c	FUNCTION_6
0x4000302	              0x5b	                                 pop rbx	       245	input-scrub.c	FUNCTION_6
0x4000303	        0x4883c001	                              add rax, 1	       244	input-scrub.c	FUNCTION_6
0x4000307	              0xc3	                                     ret	       245	input-scrub.c	FUNCTION_6
input_scrub_pop	CALL,4:FOR,0:ELSE,0:functions,0:DO,0:IF,0:SWITCH,0:WHILE,0	45
0x40001e0	              0x55	                                push rbp	       184	input-scrub.c	FUNCTION_3
0x40001e1	              0x53	                                push rbx	       184	input-scrub.c	FUNCTION_3
0x40001e2	          0x4889fb	                            mov rbx, rdi	       184	input-scrub.c	FUNCTION_3
0x40001e5	        0x4883ec08	                              sub rsp, 8	       184	input-scrub.c	FUNCTION_3
0x40001e9	      0xe800000000	                          call 0x40001ee	       187	input-scrub.c	FUNCTION_3	CALL_1
0x40001ee	        0x488b7b70	            mov rdi, qword [rbx + 0x70] 	       189	input-scrub.c	FUNCTION_3	CALL_2
0x40001f2	      0xe800000000	                          call 0x40001f7	       189	input-scrub.c	FUNCTION_3	CALL_2
0x40001f7	          0x488b03	                    mov rax, qword [rbx]	       191	input-scrub.c	FUNCTION_3
0x40001fa	        0x488b6b78	            mov rbp, qword [rbx + 0x78] 	       190	input-scrub.c	FUNCTION_3
0x40001fe	          0x4889df	                            mov rdi, rbx	       205	input-scrub.c	FUNCTION_3	CALL_4
0x4000201	    0x488905000000	            mov qword [0x04000208], rax 	       191	input-scrub.c	FUNCTION_3
0x4000208	        0x488b4320	            mov rax, qword [rbx + 0x20] 	       192	input-scrub.c	FUNCTION_3
0x400020c	    0x488905000000	            mov qword [0x04000213], rax 	       192	input-scrub.c	FUNCTION_3
0x4000213	        0x488b4328	            mov rax, qword [rbx + 0x28] 	       193	input-scrub.c	FUNCTION_3
0x4000217	    0x488905000000	            mov qword [0x0400021e], rax 	       193	input-scrub.c	FUNCTION_3
0x400021e	        0x488b4330	            mov rax, qword [rbx + 0x30] 	       194	input-scrub.c	FUNCTION_3
0x4000222	    0x488905000000	            mov qword [0x04000229], rax 	       194	input-scrub.c	FUNCTION_3
0x4000229	          0x8b4338	            mov eax, dword [rbx + 0x38] 	       195	input-scrub.c	FUNCTION_3
0x400022c	    0x890500000000	            mov dword [0x04000232], eax 	       195	input-scrub.c	FUNCTION_3
0x4000232	          0x8b433c	            mov eax, dword [rbx + 0x3c] 	       196	input-scrub.c	FUNCTION_3
0x4000235	    0x890500000000	            mov dword [0x0400023b], eax 	       196	input-scrub.c	FUNCTION_3
0x400023b	        0x488b4340	            mov rax, qword [rbx + 0x40] 	       197	input-scrub.c	FUNCTION_3
0x400023f	    0x488905000000	            mov qword [0x04000246], rax 	       197	input-scrub.c	FUNCTION_3
0x4000246	        0x488b4348	            mov rax, qword [rbx + 0x48] 	       198	input-scrub.c	FUNCTION_3
0x400024a	    0x488905000000	            mov qword [0x04000251], rax 	       198	input-scrub.c	FUNCTION_3
0x4000251	        0x488b4350	            mov rax, qword [rbx + 0x50] 	       198	input-scrub.c	FUNCTION_3
0x4000255	    0x488905000000	            mov qword [0x0400025c], rax 	       198	input-scrub.c	FUNCTION_3
0x400025c	        0x488b4358	            mov rax, qword [rbx + 0x58] 	       198	input-scrub.c	FUNCTION_3
0x4000260	    0x488905000000	            mov qword [0x04000267], rax 	       198	input-scrub.c	FUNCTION_3
0x4000267	          0x8b4360	            mov eax, dword [rbx + 0x60] 	       199	input-scrub.c	FUNCTION_3
0x400026a	    0x890500000000	            mov dword [0x04000270], eax 	       199	input-scrub.c	FUNCTION_3
0x4000270	        0x488b4308	                mov rax, qword [rbx + 8]	       200	input-scrub.c	FUNCTION_3
0x4000274	    0x488905000000	            mov qword [0x0400027b], rax 	       200	input-scrub.c	FUNCTION_3
0x400027b	        0x488b4310	            mov rax, qword [rbx + 0x10] 	       201	input-scrub.c	FUNCTION_3
0x400027f	    0x488905000000	            mov qword [0x04000286], rax 	       201	input-scrub.c	FUNCTION_3
0x4000286	        0x488b4368	            mov rax, qword [rbx + 0x68] 	       202	input-scrub.c	FUNCTION_3
0x400028a	    0x488905000000	            mov qword [0x04000291], rax 	       202	input-scrub.c	FUNCTION_3
0x4000291	         0xfb64318	           movzx eax, byte [rbx + 0x18] 	       202	input-scrub.c	FUNCTION_3
0x4000295	    0x880500000000	               mov byte [0x0400029b], al	       202	input-scrub.c	FUNCTION_3
0x400029b	      0xe800000000	                          call 0x40002a0	       205	input-scrub.c	FUNCTION_3	CALL_4
0x40002a0	        0x4883c408	                              add rsp, 8	       207	input-scrub.c	FUNCTION_3
0x40002a4	          0x4889e8	                            mov rax, rbp	       207	input-scrub.c	FUNCTION_3
0x40002a7	              0x5b	                                 pop rbx	       207	input-scrub.c	FUNCTION_3
0x40002a8	              0x5d	                                 pop rbp	       207	input-scrub.c	FUNCTION_3
0x40002a9	              0xc3	                                     ret	       207	input-scrub.c	FUNCTION_3
input_scrub_include_file	CALL,2:FOR,0:ELSE,0:functions,0:DO,0:IF,0:SWITCH,0:WHILE,0	8
0x4000310	              0x53	                                push rbx	       253	input-scrub.c	FUNCTION_7
0x4000311	          0x4889fb	                            mov rbx, rdi	       253	input-scrub.c	FUNCTION_7
0x4000314	          0x4889f7	                            mov rdi, rsi	       254	input-scrub.c	FUNCTION_7	CALL_1
0x4000317	      0xe874fdffff	               call sym.input_scrub_push	       254	input-scrub.c	FUNCTION_7	CALL_1
0x400031c	          0x4889df	                            mov rdi, rbx	       255	input-scrub.c	FUNCTION_7	CALL_2
0x400031f	    0x488905000000	            mov qword [0x04000326], rax 	       254	input-scrub.c	FUNCTION_7	CALL_1
0x4000326	              0x5b	                                 pop rbx	       256	input-scrub.c	FUNCTION_7
0x4000327	            0xeb87	            jmp sym.input_scrub_new_file	       255	input-scrub.c	FUNCTION_7	CALL_2
seen_at_least_1_file	CALL,0:FOR,0:ELSE,0:functions,0:DO,0:IF,0:SWITCH,0:WHILE,0	4
0x40006d0	            0x31c0	                            xor eax, eax	       420	input-scrub.c	FUNCTION_11
0x40006d2	    0x48833d000000	               cmp qword [0x040006da], 0	       420	input-scrub.c	FUNCTION_11
0x40006da	           0xf95c0	                                setne al	       420	input-scrub.c	FUNCTION_11
0x40006dd	              0xc3	                                     ret	       421	input-scrub.c	FUNCTION_11
new_logical_line	CALL,1:FOR,0:ELSE,0:functions,0:DO,0:IF,0:SWITCH,0:WHILE,0	2
0x40007e0	            0x31d2	                            xor edx, edx	       486	input-scrub.c	ELSE_2	FUNCTION_14	CALL_1
0x40007e2	      0xe929ffffff	          jmp sym.new_logical_line_flags	       486	input-scrub.c	ELSE_2	FUNCTION_14	CALL_1
input_scrub_end	CALL,2:FOR,0:ELSE,0:functions,0:DO,0:IF,1:SWITCH,0:WHILE,0	10
0x40001a0	    0x488b3d000000	            mov rdi, qword [0x040001a7] 	       225	input-scrub.c	FUNCTION_5	IF_1
0x40001a7	          0x4885ff	                           test rdi, rdi	       225	input-scrub.c	FUNCTION_5	IF_1
0x40001aa	            0x7424	                            je 0x40001d0	       225	input-scrub.c	FUNCTION_5	IF_1
0x40001ac	        0x4883ec08	                              sub rsp, 8	       224	input-scrub.c	FUNCTION_5
0x40001b0	      0xe800000000	                          call 0x40001b5	       227	input-scrub.c	FUNCTION_5	IF_1	CALL_1
0x40001b5	    0x48c705000000	               mov qword [0x040001c0], 0	       228	input-scrub.c	FUNCTION_5	IF_1
0x40001c0	        0x4883c408	                              add rsp, 8	       231	input-scrub.c	FUNCTION_5
0x40001c4	      0xe900000000	                           jmp 0x40001c9	       229	input-scrub.c	FUNCTION_5	IF_1	CALL_2
0x40001c9	     0xf1f80000000	                         nop dword [rax]	       229	input-scrub.c	FUNCTION_5	IF_1	CALL_2
0x40001d0	            0xf3c3	                                     ret	       229	input-scrub.c	FUNCTION_5	IF_1	CALL_2
input_scrub_close	CALL,1:FOR,0:ELSE,0:functions,0:DO,0:IF,0:SWITCH,0:WHILE,0	6
0x4000410	        0x4883ec08	                              sub rsp, 8	       304	input-scrub.c	FUNCTION_9
0x4000414	      0xe800000000	                          call 0x4000419	       305	input-scrub.c	FUNCTION_9	CALL_1
0x4000419	    0xc70500000000	               mov dword [0x04000423], 0	       306	input-scrub.c	FUNCTION_9
0x4000423	    0xc70500000000	     mov dword [0x0400042d], 0xffffffff 	       307	input-scrub.c	FUNCTION_9
0x400042d	        0x4883c408	                              add rsp, 8	       308	input-scrub.c	FUNCTION_9
0x4000431	              0xc3	                                     ret	       308	input-scrub.c	FUNCTION_9
input_scrub_next_buffer	CALL,15:FOR,1:ELSE,1:functions,0:DO,0:IF,10:SWITCH,0:WHILE,1	147
0x4000440	    0x488b15000000	            mov rdx, qword [0x04000447] 	       315	input-scrub.c	FUNCTION_10	IF_1
0x4000447	            0x4154	                                push r12	       312	input-scrub.c	FUNCTION_10
0x4000449	              0x55	                                push rbp	       312	input-scrub.c	FUNCTION_10
0x400044a	          0x4889fd	                            mov rbp, rdi	       312	input-scrub.c	FUNCTION_10
0x400044d	              0x53	                                push rbx	       312	input-scrub.c	FUNCTION_10
0x400044e	        0x4883faff	             cmp rdx, 0xffffffffffffffff	       315	input-scrub.c	FUNCTION_10	IF_1
0x4000452	     0xf8498000000	                            je 0x40004f0	       315	input-scrub.c	FUNCTION_10	IF_1
0x4000458	    0x488b0d000000	            mov rcx, qword [0x0400045f] 	       317	input-scrub.c	FUNCTION_10	IF_1	IF_2
0x400045f	          0x4839ca	                            cmp rdx, rcx	       317	input-scrub.c	FUNCTION_10	IF_1	IF_2
0x4000462	            0x7334	                           jae 0x4000498	       317	input-scrub.c	FUNCTION_10	IF_1	IF_2
0x4000464	    0x488b35000000	            mov rsi, qword [0x0400046b] 	       337	input-scrub.c	FUNCTION_10	IF_1
0x400046b	    0x48c705000000	               mov qword [0x04000476], 0	       338	input-scrub.c	FUNCTION_10	IF_1
0x4000476	    0x48890d000000	            mov qword [0x0400047d], rcx 	       340	input-scrub.c	FUNCTION_10	IF_1
0x400047d	        0x488d040e	                    lea rax, [rsi + rcx]	       337	input-scrub.c	FUNCTION_10	IF_1
0x4000481	          0x4801f2	                            add rdx, rsi	       339	input-scrub.c	FUNCTION_10	IF_1
0x4000484	          0x488917	                    mov qword [rdi], rdx	       339	input-scrub.c	FUNCTION_10	IF_1
0x4000487	    0x488905000000	            mov qword [0x0400048e], rax 	       337	input-scrub.c	FUNCTION_10	IF_1
0x400048e	              0x5b	                                 pop rbx	       412	input-scrub.c	FUNCTION_10
0x400048f	              0x5d	                                 pop rbp	       412	input-scrub.c	FUNCTION_10
0x4000490	            0x415c	                                 pop r12	       412	input-scrub.c	FUNCTION_10
0x4000492	              0xc3	                                     ret	       412	input-scrub.c	FUNCTION_10
0x4000493	       0xf1f440000	                   nop dword [rax + rax]	       412	input-scrub.c	FUNCTION_10
0x4000498	      0xbf00000000	                              mov edi, 0	       319	input-scrub.c	FUNCTION_10	IF_1	IF_2	CALL_1
0x400049d	      0xe800000000	                          call 0x40004a2	       319	input-scrub.c	FUNCTION_10	IF_1	IF_2	CALL_1
0x40004a2	    0x8b1500000000	            mov edx, dword [0x040004a8] 	       320	input-scrub.c	FUNCTION_10	IF_1	IF_2	IF_3
0x40004a8	            0x85d2	                           test edx, edx	       320	input-scrub.c	FUNCTION_10	IF_1	IF_2	IF_3
0x40004aa	     0xf8520010000	                           jne 0x40005d0	       320	input-scrub.c	FUNCTION_10	IF_1	IF_2	IF_3
0x40004b0	    0x488b3d000000	            mov rdi, qword [0x040004b7] 	       332	input-scrub.c	FUNCTION_10	IF_1	IF_2	IF_4
0x40004b7	    0x832d00000000	               sub dword [0x040004be], 1	       329	input-scrub.c	FUNCTION_10	IF_1	IF_2
0x40004be	            0x31c0	                            xor eax, eax	       329	input-scrub.c	FUNCTION_10	IF_1	IF_2
0x40004c0	    0x48c705000000	               mov qword [0x040004cb], 0	       330	input-scrub.c	FUNCTION_10	IF_1	IF_2
0x40004cb	    0x48c705000000	               mov qword [0x040004d6], 0	       331	input-scrub.c	FUNCTION_10	IF_1	IF_2
0x40004d6	          0x4885ff	                           test rdi, rdi	       332	input-scrub.c	FUNCTION_10	IF_1	IF_2	IF_4
0x40004d9	            0x74b3	                            je 0x400048e	       332	input-scrub.c	FUNCTION_10	IF_1	IF_2	IF_4
0x40004db	      0xe800fdffff	                call sym.input_scrub_pop	       409	input-scrub.c	FUNCTION_10	CALL_15
0x40004e0	        0x48894500	                    mov qword [rbp], rax	       409	input-scrub.c	FUNCTION_10	CALL_15
0x40004e4	    0x488b05000000	            mov rax, qword [0x040004eb] 	       409	input-scrub.c	FUNCTION_10	CALL_15
0x40004eb	              0x5b	                                 pop rbx	       412	input-scrub.c	FUNCTION_10
0x40004ec	              0x5d	                                 pop rbp	       412	input-scrub.c	FUNCTION_10
0x40004ed	            0x415c	                                 pop r12	       412	input-scrub.c	FUNCTION_10
0x40004ef	              0xc3	                                     ret	       412	input-scrub.c	FUNCTION_10
0x40004f0	    0x488b1d000000	            mov rbx, qword [0x040004f7] 	       344	input-scrub.c	FUNCTION_10	IF_5
0x40004f7	    0x4c8b25000000	            mov r12, qword [0x040004fe] 	       346	input-scrub.c	FUNCTION_10	IF_5	CALL_5
0x40004fe	          0x4885db	                           test rbx, rbx	       344	input-scrub.c	FUNCTION_10	IF_5
0x4000501	      0x498d4c2401	                      lea rcx, [r12 + 1]	        59	string3.h	FUNCTION_18	CALL_3
0x4000506	     0xf85d4000000	                           jne 0x40005e0	       344	input-scrub.c	FUNCTION_10	IF_5
0x400050c	      0x498d5c1c01	                lea rbx, [r12 + rbx + 1]	       353	input-scrub.c	FUNCTION_10	WHILE_1
0x4000511	        0x48894d00	                    mov qword [rbp], rcx	       355	input-scrub.c	FUNCTION_10	WHILE_1
0x4000515	          0x4889df	                            mov rdi, rbx	       356	input-scrub.c	FUNCTION_10	WHILE_1	CALL_7
0x4000518	      0xe800000000	                          call 0x400051d	       356	input-scrub.c	FUNCTION_10	WHILE_1	CALL_7
0x400051d	          0x4885c0	                           test rax, rax	       357	input-scrub.c	FUNCTION_10	WHILE_1	IF_6
0x4000520	     0xf84ea000000	                            je 0x4000610	       357	input-scrub.c	FUNCTION_10	WHILE_1	IF_6
0x4000526	        0x8078ff0a	                 cmp byte [rax - 1], 0xa	       374	input-scrub.c	FUNCTION_10	WHILE_1	ELSE_1	FOR_1
0x400052a	          0xc60000	                       mov byte [rax], 0	       371	input-scrub.c	FUNCTION_10	WHILE_1	ELSE_1
0x400052d	        0x488d50ff	                      lea rdx, [rax - 1]	       374	input-scrub.c	FUNCTION_10	WHILE_1	ELSE_1	FOR_1
0x4000531	     0xf84cf000000	                            je 0x4000606	       374	input-scrub.c	FUNCTION_10	WHILE_1	ELSE_1	FOR_1
0x4000537	          0x4839d3	                            cmp rbx, rdx	       375	input-scrub.c	FUNCTION_10	WHILE_1	ELSE_1	FOR_1	IF_8
0x400053a	        0x488d7bff	                      lea rdi, [rbx - 1]	       375	input-scrub.c	FUNCTION_10	WHILE_1	ELSE_1	FOR_1	IF_8
0x400053e	            0x7610	                           jbe 0x4000550	       375	input-scrub.c	FUNCTION_10	WHILE_1	ELSE_1	FOR_1	IF_8
0x4000540	            0xeb46	                           jmp 0x4000588	       375	input-scrub.c	FUNCTION_10	WHILE_1	ELSE_1	FOR_1	IF_8
0x4000542	    0x660f1f440000	                    nop word [rax + rax]	       375	input-scrub.c	FUNCTION_10	WHILE_1	ELSE_1	FOR_1	IF_8
0x4000548	          0x4839cf	                            cmp rdi, rcx	       375	input-scrub.c	FUNCTION_10	WHILE_1	ELSE_1	FOR_1	IF_8
0x400054b	          0x4889ca	                            mov rdx, rcx	       375	input-scrub.c	FUNCTION_10	WHILE_1	ELSE_1	FOR_1	IF_8
0x400054e	            0x7438	                            je 0x4000588	       375	input-scrub.c	FUNCTION_10	WHILE_1	ELSE_1	FOR_1	IF_8
0x4000550	        0x807aff0a	                 cmp byte [rdx - 1], 0xa	       374	input-scrub.c	FUNCTION_10	WHILE_1	ELSE_1	FOR_1
0x4000554	        0x488d4aff	                      lea rcx, [rdx - 1]	       374	input-scrub.c	FUNCTION_10	WHILE_1	ELSE_1	FOR_1
0x4000558	            0x75ee	                           jne 0x4000548	       374	input-scrub.c	FUNCTION_10	WHILE_1	ELSE_1	FOR_1
0x400055a	           0xfb612	                   movzx edx, byte [rdx]	       374	input-scrub.c	FUNCTION_10	WHILE_1	ELSE_1	FOR_1
0x400055d	        0x4883c101	                              add rcx, 1	       377	input-scrub.c	FUNCTION_10	WHILE_1	ELSE_1
0x4000561	          0x4829c8	                            sub rax, rcx	       377	input-scrub.c	FUNCTION_10	WHILE_1	ELSE_1
0x4000564	    0x488905000000	            mov qword [0x0400056b], rax 	       382	input-scrub.c	FUNCTION_10	WHILE_1
0x400056b	    0x881500000000	               mov byte [0x04000571], dl	       382	input-scrub.c	FUNCTION_10	WHILE_1
0x4000571	          0x4889c8	                            mov rax, rcx	       387	input-scrub.c	FUNCTION_10	WHILE_1
0x4000574	          0xc60100	                       mov byte [rcx], 0	        53	string3.h	FUNCTION_17	CALL_3
0x4000577	    0x48890d000000	            mov qword [0x0400057e], rcx 	       381	input-scrub.c	FUNCTION_10	WHILE_1
0x400057e	              0x5b	                                 pop rbx	       412	input-scrub.c	FUNCTION_10
0x400057f	              0x5d	                                 pop rbp	       412	input-scrub.c	FUNCTION_10
0x4000580	            0x415c	                                 pop r12	       412	input-scrub.c	FUNCTION_10
0x4000582	              0xc3	                                     ret	       412	input-scrub.c	FUNCTION_10
0x4000583	       0xf1f440000	                   nop dword [rax + rax]	       412	input-scrub.c	FUNCTION_10
0x4000588	    0x488b35000000	            mov rsi, qword [0x0400058f] 	       391	input-scrub.c	FUNCTION_10	WHILE_1
0x400058f	    0x4c8b25000000	            mov r12, qword [0x04000596] 	       392	input-scrub.c	FUNCTION_10	WHILE_1	IF_9	CALL_12
0x4000596	        0x488d5601	                      lea rdx, [rsi + 1]	       391	input-scrub.c	FUNCTION_10	WHILE_1
0x400059a	          0x4829d0	                            sub rax, rdx	       391	input-scrub.c	FUNCTION_10	WHILE_1
0x400059d	    0x488905000000	            mov qword [0x040005a4], rax 	       391	input-scrub.c	FUNCTION_10	WHILE_1
0x40005a4	      0xe800000000	                          call 0x40005a9	       392	input-scrub.c	FUNCTION_10	WHILE_1	IF_9	CALL_12
0x40005a9	    0x488b1d000000	            mov rbx, qword [0x040005b0] 	       392	input-scrub.c	FUNCTION_10	WHILE_1	IF_9	CALL_12
0x40005b0	          0x4929c4	                            sub r12, rax	       392	input-scrub.c	FUNCTION_10	WHILE_1	IF_9	CALL_12
0x40005b3	          0x4939dc	                            cmp r12, rbx	       392	input-scrub.c	FUNCTION_10	WHILE_1	IF_9	CALL_12
0x40005b6	     0xf828e000000	                            jb 0x400064a	       392	input-scrub.c	FUNCTION_10	WHILE_1	IF_9	CALL_12
0x40005bc	    0x4c8b25000000	            mov r12, qword [0x040005c3] 	       392	input-scrub.c	FUNCTION_10	WHILE_1	IF_9	CALL_12
0x40005c3	      0x498d4c2401	                      lea rcx, [r12 + 1]	       392	input-scrub.c	FUNCTION_10	WHILE_1	IF_9	CALL_12
0x40005c8	      0xe93fffffff	                           jmp 0x400050c	       392	input-scrub.c	FUNCTION_10	WHILE_1	IF_9	CALL_12
0x40005cd	           0xf1f00	                         nop dword [rax]	       392	input-scrub.c	FUNCTION_10	WHILE_1	IF_9	CALL_12
0x40005d0	    0x8b3d00000000	            mov edi, dword [0x040005d6] 	       322	input-scrub.c	FUNCTION_10	IF_1	IF_2	IF_3	CALL_2
0x40005d6	      0xe800000000	                          call 0x40005db	       322	input-scrub.c	FUNCTION_10	IF_1	IF_2	IF_3	CALL_2
0x40005db	      0xe9d0feffff	                           jmp 0x40004b0	       322	input-scrub.c	FUNCTION_10	IF_1	IF_2	IF_3	CALL_2
0x40005e0	    0x488b35000000	            mov rsi, qword [0x040005e7] 	        59	string3.h	FUNCTION_18	CALL_3
0x40005e7	          0x4889cf	                            mov rdi, rcx	        59	string3.h	FUNCTION_18	CALL_3
0x40005ea	          0x4889da	                            mov rdx, rbx	        59	string3.h	FUNCTION_18	CALL_3
0x40005ed	      0xe800000000	                          call 0x40005f2	        59	string3.h	FUNCTION_18	CALL_3
0x40005f2	          0x4889c1	                            mov rcx, rax	        59	string3.h	FUNCTION_18	CALL_3
0x40005f5	     0xfb605000000	           movzx eax, byte [0x040005fc] 	        53	string3.h	FUNCTION_17	CALL_3
0x40005fc	      0x4188442401	                  mov byte [r12 + 1], al	        53	string3.h	FUNCTION_17	CALL_3
0x4000601	      0xe906ffffff	                           jmp 0x400050c	        53	string3.h	FUNCTION_17	CALL_3
0x4000606	          0x4889d1	                            mov rcx, rdx	       374	input-scrub.c	FUNCTION_10	WHILE_1	ELSE_1	FOR_1
0x4000609	            0x31d2	                            xor edx, edx	       374	input-scrub.c	FUNCTION_10	WHILE_1	ELSE_1	FOR_1
0x400060b	      0xe94dffffff	                           jmp 0x400055d	       374	input-scrub.c	FUNCTION_10	WHILE_1	ELSE_1	FOR_1
0x4000610	    0x48833d000000	               cmp qword [0x04000618], 0	       359	input-scrub.c	FUNCTION_10	WHILE_1	IF_6	IF_7
0x4000618	            0x756b	                           jne 0x4000685	       359	input-scrub.c	FUNCTION_10	WHILE_1	IF_6	IF_7
0x400061a	    0x8b0500000000	            mov eax, dword [0x04000620] 	       404	input-scrub.c	FUNCTION_10	CALL_14
0x4000620	            0x85c0	                           test eax, eax	       404	input-scrub.c	FUNCTION_10	CALL_14
0x4000622	     0xf859a000000	                           jne 0x40006c2	       404	input-scrub.c	FUNCTION_10	CALL_14
0x4000628	    0x488b3d000000	            mov rdi, qword [0x0400062f] 	       408	input-scrub.c	FUNCTION_10	IF_10
0x400062f	            0x31c0	                            xor eax, eax	       408	input-scrub.c	FUNCTION_10	IF_10
0x4000631	    0x48c705000000	               mov qword [0x0400063c], 0	       407	input-scrub.c	FUNCTION_10
0x400063c	          0x4885ff	                           test rdi, rdi	       408	input-scrub.c	FUNCTION_10	IF_10
0x400063f	     0xf8596feffff	                           jne 0x40004db	       408	input-scrub.c	FUNCTION_10	IF_10
0x4000645	      0xe944feffff	                           jmp 0x400048e	       408	input-scrub.c	FUNCTION_10	IF_10
0x400064a	    0x488b05000000	            mov rax, qword [0x04000651] 	       396	input-scrub.c	FUNCTION_10	WHILE_1	IF_9
0x4000651	    0x488b3d000000	            mov rdi, qword [0x04000658] 	       397	input-scrub.c	FUNCTION_10	WHILE_1	IF_9	CALL_13
0x4000658	          0x4801c0	                            add rax, rax	       396	input-scrub.c	FUNCTION_10	WHILE_1	IF_9
0x400065b	        0x488d7003	                      lea rsi, [rax + 3]	       397	input-scrub.c	FUNCTION_10	WHILE_1	IF_9	CALL_13
0x400065f	    0x488905000000	            mov qword [0x04000666], rax 	       396	input-scrub.c	FUNCTION_10	WHILE_1	IF_9
0x4000666	      0xe800000000	                          call 0x400066b	       397	input-scrub.c	FUNCTION_10	WHILE_1	IF_9	CALL_13
0x400066b	    0x488b1d000000	            mov rbx, qword [0x04000672] 	       397	input-scrub.c	FUNCTION_10	WHILE_1	IF_9	CALL_13
0x4000672	    0x488905000000	            mov qword [0x04000679], rax 	       397	input-scrub.c	FUNCTION_10	WHILE_1	IF_9	CALL_13
0x4000679	          0x4989c4	                            mov r12, rax	       397	input-scrub.c	FUNCTION_10	WHILE_1	IF_9	CALL_13
0x400067c	        0x488d4801	                      lea rcx, [rax + 1]	       397	input-scrub.c	FUNCTION_10	WHILE_1	IF_9	CALL_13
0x4000680	      0xe987feffff	                           jmp 0x400050c	       397	input-scrub.c	FUNCTION_10	WHILE_1	IF_9	CALL_13
0x4000685	      0xba05000000	                              mov edx, 5	       363	input-scrub.c	FUNCTION_10	WHILE_1	IF_6	CALL_9
0x400068a	      0xbe00000000	                              mov esi, 0	       363	input-scrub.c	FUNCTION_10	WHILE_1	IF_6	CALL_9
0x400068f	            0x31ff	                            xor edi, edi	       363	input-scrub.c	FUNCTION_10	WHILE_1	IF_6	CALL_9
0x4000691	      0xe800000000	                          call 0x4000696	       363	input-scrub.c	FUNCTION_10	WHILE_1	IF_6	CALL_9
0x4000696	          0x4889c7	                            mov rdi, rax	       363	input-scrub.c	FUNCTION_10	WHILE_1	IF_6	CALL_9
0x4000699	            0x31c0	                            xor eax, eax	       363	input-scrub.c	FUNCTION_10	WHILE_1	IF_6	CALL_9
0x400069b	      0xe800000000	                          call 0x40006a0	       363	input-scrub.c	FUNCTION_10	WHILE_1	IF_6	CALL_9
0x40006a0	    0x488b15000000	            mov rdx, qword [0x040006a7] 	       364	input-scrub.c	FUNCTION_10	WHILE_1	IF_6
0x40006a7	    0x488b05000000	            mov rax, qword [0x040006ae] 	       364	input-scrub.c	FUNCTION_10	WHILE_1	IF_6
0x40006ae	      0x488d4c0202	                lea rcx, [rdx + rax + 2]	       365	input-scrub.c	FUNCTION_10	WHILE_1	IF_6
0x40006b3	      0xc64402010a	           mov byte [rdx + rax + 1], 0xa	       365	input-scrub.c	FUNCTION_10	WHILE_1	IF_6
0x40006b8	            0x31c0	                            xor eax, eax	       365	input-scrub.c	FUNCTION_10	WHILE_1	IF_6
0x40006ba	           0xfb611	                   movzx edx, byte [rcx]	       365	input-scrub.c	FUNCTION_10	WHILE_1	IF_6
0x40006bd	      0xe9a2feffff	                           jmp 0x4000564	       365	input-scrub.c	FUNCTION_10	WHILE_1	IF_6
0x40006c2	            0x31ff	                            xor edi, edi	       404	input-scrub.c	FUNCTION_10	CALL_14
0x40006c4	      0xe800000000	                          call 0x40006c9	       404	input-scrub.c	FUNCTION_10	CALL_14
0x40006c9	      0xe95affffff	                           jmp 0x4000628	       404	input-scrub.c	FUNCTION_10	CALL_14
input_scrub_include_sb	CALL,8:FOR,0:ELSE,0:functions,0:DO,0:IF,3:SWITCH,0:WHILE,0	53
0x4000330	              0x55	                                push rbp	       263	input-scrub.c	FUNCTION_8
0x4000331	              0x53	                                push rbx	       263	input-scrub.c	FUNCTION_8
0x4000332	        0x4883ec08	                              sub rsp, 8	       263	input-scrub.c	FUNCTION_8
0x4000336	    0x8b0500000000	            mov eax, dword [0x0400033c] 	       266	input-scrub.c	FUNCTION_8	IF_1
0x400033c	    0x3b0500000000	            cmp eax, dword [0x04000342] 	       266	input-scrub.c	FUNCTION_8	IF_1
0x4000342	     0xf8fac000000	                            jg 0x40003f4	       266	input-scrub.c	FUNCTION_8	IF_1
0x4000348	          0x83c001	                              add eax, 1	       268	input-scrub.c	FUNCTION_8
0x400034b	          0x4889fb	                            mov rbx, rdi	       268	input-scrub.c	FUNCTION_8
0x400034e	          0x4889f7	                            mov rdi, rsi	       277	input-scrub.c	FUNCTION_8	CALL_4
0x4000351	            0x89d5	                            mov ebp, edx	       277	input-scrub.c	FUNCTION_8	CALL_4
0x4000353	    0x890500000000	            mov dword [0x04000359], eax 	       268	input-scrub.c	FUNCTION_8
0x4000359	      0xe832fdffff	               call sym.input_scrub_push	       277	input-scrub.c	FUNCTION_8	CALL_4
0x400035e	        0x488b7308	                mov rsi, qword [rbx + 8]	       280	input-scrub.c	FUNCTION_8
0x4000362	    0x488905000000	            mov qword [0x04000369], rax 	       277	input-scrub.c	FUNCTION_8	CALL_4
0x4000369	          0x4885f6	                           test rsi, rsi	       280	input-scrub.c	FUNCTION_8
0x400036c	            0x7432	                            je 0x40003a0	       280	input-scrub.c	FUNCTION_8
0x400036e	          0x488b03	                    mov rax, qword [rbx]	       280	input-scrub.c	FUNCTION_8
0x4000371	          0x80380a	                     cmp byte [rax], 0xa	       280	input-scrub.c	FUNCTION_8
0x4000374	            0x742a	                            je 0x40003a0	       280	input-scrub.c	FUNCTION_8
0x4000376	        0x4883c601	                              add rsi, 1	       281	input-scrub.c	FUNCTION_8	CALL_5
0x400037a	      0xbf00000000	                              mov edi, 0	       281	input-scrub.c	FUNCTION_8	CALL_5
0x400037f	      0xe800000000	                          call 0x4000384	       281	input-scrub.c	FUNCTION_8	CALL_5
0x4000384	      0xbe0a000000	                            mov esi, 0xa	       286	input-scrub.c	FUNCTION_8	IF_3	CALL_6
0x4000389	      0xbf00000000	                              mov edi, 0	       286	input-scrub.c	FUNCTION_8	IF_3	CALL_6
0x400038e	    0x892d00000000	            mov dword [0x04000394], ebp 	       282	input-scrub.c	FUNCTION_8
0x4000394	      0xe800000000	                          call 0x4000399	       286	input-scrub.c	FUNCTION_8	IF_3	CALL_6
0x4000399	            0xeb15	                           jmp 0x40003b0	       286	input-scrub.c	FUNCTION_8	IF_3	CALL_6
0x400039b	       0xf1f440000	                   nop dword [rax + rax]	       286	input-scrub.c	FUNCTION_8	IF_3	CALL_6
0x40003a0	      0xbf00000000	                              mov edi, 0	       281	input-scrub.c	FUNCTION_8	CALL_5
0x40003a5	      0xe800000000	                          call 0x40003aa	       281	input-scrub.c	FUNCTION_8	CALL_5
0x40003aa	    0x892d00000000	            mov dword [0x040003b0], ebp 	       282	input-scrub.c	FUNCTION_8
0x40003b0	          0x4889de	                            mov rsi, rbx	       288	input-scrub.c	FUNCTION_8	CALL_7
0x40003b3	      0xbf00000000	                              mov edi, 0	       288	input-scrub.c	FUNCTION_8	CALL_7
0x40003b8	      0xe800000000	                          call 0x40003bd	       288	input-scrub.c	FUNCTION_8	CALL_7
0x40003bd	      0xbf00000000	                              mov edi, 0	       292	input-scrub.c	FUNCTION_8	CALL_8
0x40003c2	      0xe800000000	                          call 0x40003c7	       292	input-scrub.c	FUNCTION_8	CALL_8
0x40003c7	    0x488b05000000	            mov rax, qword [0x040003ce] 	       298	input-scrub.c	FUNCTION_8
0x40003ce	    0x48c705000000	               mov qword [0x040003d9], 1	       294	input-scrub.c	FUNCTION_8
0x40003d9	          0x8b503c	            mov edx, dword [rax + 0x3c] 	       298	input-scrub.c	FUNCTION_8
0x40003dc	        0x488b4030	            mov rax, qword [rax + 0x30] 	       299	input-scrub.c	FUNCTION_8
0x40003e0	    0x891500000000	            mov dword [0x040003e6], edx 	       298	input-scrub.c	FUNCTION_8
0x40003e6	    0x488905000000	            mov qword [0x040003ed], rax 	       299	input-scrub.c	FUNCTION_8
0x40003ed	        0x4883c408	                              add rsp, 8	       300	input-scrub.c	FUNCTION_8
0x40003f1	              0x5b	                                 pop rbx	       300	input-scrub.c	FUNCTION_8
0x40003f2	              0x5d	                                 pop rbp	       300	input-scrub.c	FUNCTION_8
0x40003f3	              0xc3	                                     ret	       300	input-scrub.c	FUNCTION_8
0x40003f4	            0x31ff	                            xor edi, edi	       267	input-scrub.c	FUNCTION_8	CALL_2
0x40003f6	      0xba05000000	                              mov edx, 5	       267	input-scrub.c	FUNCTION_8	CALL_2
0x40003fb	      0xbe00000000	                              mov esi, 0	       267	input-scrub.c	FUNCTION_8	CALL_2
0x4000400	      0xe800000000	                          call 0x4000405	       267	input-scrub.c	FUNCTION_8	CALL_2
0x4000405	          0x4889c7	                            mov rdi, rax	       267	input-scrub.c	FUNCTION_8	CALL_2
0x4000408	            0x31c0	                            xor eax, eax	       267	input-scrub.c	FUNCTION_8	CALL_2
0x400040a	      0xe800000000	                          call 0x400040f	       267	input-scrub.c	FUNCTION_8	CALL_2
