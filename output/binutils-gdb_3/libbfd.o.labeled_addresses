bfd_getl32	WHILE,0:IF,0:SWITCH,0:FOR,0:DO,0:functions,0:ELSE,0:CALL,0	2
0x40005e0	            0x8b07	                    mov eax, dword [rdi]	       660	libbfd.c	FUNCTION_45
0x40005e2	              0xc3	                                     ret	       661	libbfd.c	FUNCTION_45
_bfd_uint_bfd_0	WHILE,0:IF,0:SWITCH,0:FOR,0:DO,0:functions,0:ELSE,0:CALL,0	2
0x4000140	            0x31c0	                            xor eax, eax	       148	libbfd.c	FUNCTION_14
0x4000142	              0xc3	                                     ret	       148	libbfd.c	FUNCTION_14
bfd_put_bits	WHILE,0:IF,1:SWITCH,0:FOR,1:DO,0:functions,0:ELSE,0:CALL,1	27
0x40007e0	          0xf6c207	                              test dl, 7	       845	libbfd.c	FUNCTION_56	IF_1
0x40007e3	            0x753c	                           jne 0x4000821	       845	libbfd.c	FUNCTION_56	IF_1
0x40007e5	          0x8d4207	                      lea eax, [rdx + 7]	       848	libbfd.c	FUNCTION_56
0x40007e8	            0x85d2	                           test edx, edx	       848	libbfd.c	FUNCTION_56
0x40007ea	           0xf48d0	                          cmovs edx, eax	       848	libbfd.c	FUNCTION_56
0x40007ed	          0x4531c0	                            xor r8d, r8d	       849	libbfd.c	FUNCTION_56	FOR_1
0x40007f0	          0xc1fa03	                              sar edx, 3	       848	libbfd.c	FUNCTION_56
0x40007f3	            0x85d2	                           test edx, edx	       849	libbfd.c	FUNCTION_56	FOR_1
0x40007f5	        0x448d4aff	                      lea r9d, [rdx - 1]	       849	libbfd.c	FUNCTION_56	FOR_1
0x40007f9	            0x7e24	                           jle 0x400081f	       849	libbfd.c	FUNCTION_56	FOR_1
0x40007fb	       0xf1f440000	                   nop dword [rax + rax]	       849	libbfd.c	FUNCTION_56	FOR_1
0x4000800	          0x4489c8	                            mov eax, r9d	       849	libbfd.c	FUNCTION_56	FOR_1
0x4000803	          0x4429c0	                            sub eax, r8d	       849	libbfd.c	FUNCTION_56	FOR_1
0x4000806	            0x85c9	                           test ecx, ecx	       849	libbfd.c	FUNCTION_56	FOR_1
0x4000808	        0x410f44c0	                          cmove eax, r8d	       849	libbfd.c	FUNCTION_56	FOR_1
0x400080c	        0x4183c001	                              add r8d, 1	       849	libbfd.c	FUNCTION_56	FOR_1
0x4000810	            0x4898	                                    cdqe	       853	libbfd.c	FUNCTION_56	FOR_1
0x4000812	        0x40883c06	               mov byte [rsi + rax], dil	       853	libbfd.c	FUNCTION_56	FOR_1
0x4000816	        0x48c1ef08	                              shr rdi, 8	       854	libbfd.c	FUNCTION_56	FOR_1
0x400081a	          0x4439c2	                            cmp edx, r8d	       849	libbfd.c	FUNCTION_56	FOR_1
0x400081d	            0x75e1	                           jne 0x4000800	       849	libbfd.c	FUNCTION_56	FOR_1
0x400081f	            0xf3c3	                                     ret	       849	libbfd.c	FUNCTION_56	FOR_1
0x4000821	        0x4883ec08	                              sub rsp, 8	       840	libbfd.c	FUNCTION_56
0x4000825	      0xba00000000	                              mov edx, 0	       846	libbfd.c	FUNCTION_56	CALL_1
0x400082a	      0xbe4e030000	                          mov esi, 0x34e	       846	libbfd.c	FUNCTION_56	CALL_1
0x400082f	      0xbf00000000	                              mov edi, 0	       846	libbfd.c	FUNCTION_56	CALL_1
0x4000834	      0xe800000000	                          call 0x4000839	       846	libbfd.c	FUNCTION_56	CALL_1
bfd_getl16	WHILE,0:IF,0:SWITCH,0:FOR,0:DO,0:functions,0:ELSE,0:CALL,0	2
0x4000520	           0xfb707	                   movzx eax, word [rdi]	       583	libbfd.c	FUNCTION_37
0x4000523	              0xc3	                                     ret	       584	libbfd.c	FUNCTION_37
bfd_realloc2	WHILE,0:IF,1:SWITCH,0:FOR,0:DO,0:functions,0:ELSE,0:CALL,2	22
0x40003a0	          0x4889d1	                            mov rcx, rdx	       325	libbfd.c	FUNCTION_31
0x40003a3	          0x4889f2	                            mov rdx, rsi	       327	libbfd.c	FUNCTION_31	IF_1
0x40003a6	      0xb8ffffffff	                     mov eax, 0xffffffff	       327	libbfd.c	FUNCTION_31	IF_1
0x40003ab	          0x4809ca	                             or rdx, rcx	       327	libbfd.c	FUNCTION_31	IF_1
0x40003ae	          0x4839c2	                            cmp rdx, rax	       327	libbfd.c	FUNCTION_31	IF_1
0x40003b1	            0x7616	                           jbe 0x40003c9	       327	libbfd.c	FUNCTION_31	IF_1
0x40003b3	          0x4885c9	                           test rcx, rcx	       327	libbfd.c	FUNCTION_31	IF_1
0x40003b6	            0x7411	                            je 0x40003c9	       327	libbfd.c	FUNCTION_31	IF_1
0x40003b8	            0x31d2	                            xor edx, edx	       328	libbfd.c	FUNCTION_31	IF_1
0x40003ba	    0x48c7c0ffffff	             mov rax, 0xffffffffffffffff	       328	libbfd.c	FUNCTION_31	IF_1
0x40003c1	          0x48f7f1	                                 div rcx	       328	libbfd.c	FUNCTION_31	IF_1
0x40003c4	          0x4839c6	                            cmp rsi, rax	       328	libbfd.c	FUNCTION_31	IF_1
0x40003c7	            0x770f	                            ja 0x40003d8	       328	libbfd.c	FUNCTION_31	IF_1
0x40003c9	        0x480faff1	                           imul rsi, rcx	       334	libbfd.c	FUNCTION_31	CALL_2
0x40003cd	      0xe95effffff	                     jmp sym.bfd_realloc	       334	libbfd.c	FUNCTION_31	CALL_2
0x40003d2	    0x660f1f440000	                    nop word [rax + rax]	       334	libbfd.c	FUNCTION_31	CALL_2
0x40003d8	        0x4883ec08	                              sub rsp, 8	       325	libbfd.c	FUNCTION_31
0x40003dc	      0xbf06000000	                              mov edi, 6	       330	libbfd.c	FUNCTION_31	IF_1	CALL_1
0x40003e1	      0xe800000000	                          call 0x40003e6	       330	libbfd.c	FUNCTION_31	IF_1	CALL_1
0x40003e6	            0x31c0	                            xor eax, eax	       335	libbfd.c	FUNCTION_31
0x40003e8	        0x4883c408	                              add rsp, 8	       335	libbfd.c	FUNCTION_31
0x40003ec	              0xc3	                                     ret	       335	libbfd.c	FUNCTION_31
bfd_getl_signed_64	WHILE,0:IF,0:SWITCH,0:FOR,0:DO,0:functions,0:ELSE,0:CALL,1	14
0x40006c0	          0x8b4704	                mov eax, dword [rdi + 4]	       769	libbfd.c	FUNCTION_51
0x40006c3	         0xfb65703	               movzx edx, byte [rdi + 3]	       770	libbfd.c	FUNCTION_51
0x40006c7	        0x48c1e008	                              shl rax, 8	       769	libbfd.c	FUNCTION_51
0x40006cb	          0x4809d0	                             or rax, rdx	       770	libbfd.c	FUNCTION_51
0x40006ce	         0xfb65702	               movzx edx, byte [rdi + 2]	       771	libbfd.c	FUNCTION_51
0x40006d2	        0x48c1e008	                              shl rax, 8	       770	libbfd.c	FUNCTION_51
0x40006d6	          0x4809d0	                             or rax, rdx	       771	libbfd.c	FUNCTION_51
0x40006d9	         0xfb65701	               movzx edx, byte [rdi + 1]	       772	libbfd.c	FUNCTION_51
0x40006dd	        0x48c1e008	                              shl rax, 8	       771	libbfd.c	FUNCTION_51
0x40006e1	          0x4809d0	                             or rax, rdx	       772	libbfd.c	FUNCTION_51
0x40006e4	           0xfb617	                   movzx edx, byte [rdi]	       775	libbfd.c	FUNCTION_51
0x40006e7	        0x48c1e008	                              shl rax, 8	       772	libbfd.c	FUNCTION_51
0x40006eb	          0x4809d0	                             or rax, rdx	       775	libbfd.c	FUNCTION_51
0x40006ee	              0xc3	                                     ret	       780	libbfd.c	FUNCTION_51
bfd_realloc	WHILE,0:IF,3:SWITCH,0:FOR,0:DO,0:functions,0:ELSE,0:CALL,4	35
0x4000330	          0x4885ff	                           test rdi, rdi	       302	libbfd.c	FUNCTION_30	IF_1
0x4000333	            0x745b	                            je 0x4000390	       302	libbfd.c	FUNCTION_30	IF_1
0x4000335	              0x55	                                push rbp	       298	libbfd.c	FUNCTION_30
0x4000336	              0x53	                                push rbx	       298	libbfd.c	FUNCTION_30
0x4000337	          0x4889f3	                            mov rbx, rsi	       298	libbfd.c	FUNCTION_30
0x400033a	        0x4883ec08	                              sub rsp, 8	       298	libbfd.c	FUNCTION_30
0x400033e	          0x4885f6	                           test rsi, rsi	       305	libbfd.c	FUNCTION_30	IF_2
0x4000341	            0x783d	                            js 0x4000380	       305	libbfd.c	FUNCTION_30	IF_2
0x4000343	      0xe800000000	                          call 0x4000348	       313	libbfd.c	FUNCTION_30	CALL_3
0x4000348	          0x4885c0	                           test rax, rax	       315	libbfd.c	FUNCTION_30	IF_3
0x400034b	          0x4889c5	                            mov rbp, rax	       313	libbfd.c	FUNCTION_30	CALL_3
0x400034e	            0x7520	                           jne 0x4000370	       315	libbfd.c	FUNCTION_30	IF_3
0x4000350	          0x4885db	                           test rbx, rbx	       315	libbfd.c	FUNCTION_30	IF_3
0x4000353	            0x741b	                            je 0x4000370	       315	libbfd.c	FUNCTION_30	IF_3
0x4000355	      0xbf06000000	                              mov edi, 6	       316	libbfd.c	FUNCTION_30	CALL_4
0x400035a	      0xe800000000	                          call 0x400035f	       316	libbfd.c	FUNCTION_30	CALL_4
0x400035f	        0x4883c408	                              add rsp, 8	       319	libbfd.c	FUNCTION_30
0x4000363	          0x4889e8	                            mov rax, rbp	       316	libbfd.c	FUNCTION_30	CALL_4
0x4000366	              0x5b	                                 pop rbx	       319	libbfd.c	FUNCTION_30
0x4000367	              0x5d	                                 pop rbp	       319	libbfd.c	FUNCTION_30
0x4000368	              0xc3	                                     ret	       319	libbfd.c	FUNCTION_30
0x4000369	     0xf1f80000000	                         nop dword [rax]	       319	libbfd.c	FUNCTION_30
0x4000370	          0x4889e8	                            mov rax, rbp	       313	libbfd.c	FUNCTION_30	CALL_3
0x4000373	        0x4883c408	                              add rsp, 8	       319	libbfd.c	FUNCTION_30
0x4000377	              0x5b	                                 pop rbx	       319	libbfd.c	FUNCTION_30
0x4000378	              0x5d	                                 pop rbp	       319	libbfd.c	FUNCTION_30
0x4000379	              0xc3	                                     ret	       319	libbfd.c	FUNCTION_30
0x400037a	    0x660f1f440000	                    nop word [rax + rax]	       319	libbfd.c	FUNCTION_30
0x4000380	      0xbf06000000	                              mov edi, 6	       309	libbfd.c	FUNCTION_30	IF_2	CALL_2
0x4000385	      0xe800000000	                          call 0x400038a	       309	libbfd.c	FUNCTION_30	IF_2	CALL_2
0x400038a	            0x31c0	                            xor eax, eax	       310	libbfd.c	FUNCTION_30	IF_2
0x400038c	            0xebe5	                           jmp 0x4000373	       310	libbfd.c	FUNCTION_30	IF_2
0x400038e	            0x6690	                                     nop	       310	libbfd.c	FUNCTION_30	IF_2
0x4000390	          0x4889f7	                            mov rdi, rsi	       303	libbfd.c	FUNCTION_30	CALL_1
0x4000393	      0xe9e8feffff	                      jmp sym.bfd_malloc	       303	libbfd.c	FUNCTION_30	CALL_1
_bfd_generic_get_section_contents	WHILE,0:IF,5:SWITCH,0:FOR,0:DO,0:functions,0:ELSE,1:CALL,8	82
0x40008a0	          0x4d85c0	                             test r8, r8	       891	libbfd.c	FUNCTION_58	IF_1
0x40008a3	      0xb801000000	                              mov eax, 1	       892	libbfd.c	FUNCTION_58	IF_1
0x40008a8	     0xf84c8000000	                            je 0x4000976	       891	libbfd.c	FUNCTION_58	IF_1
0x40008ae	            0x4155	                                push r13	       889	libbfd.c	FUNCTION_58
0x40008b0	            0x4154	                                push r12	       889	libbfd.c	FUNCTION_58
0x40008b2	          0x4989d5	                            mov r13, rdx	       889	libbfd.c	FUNCTION_58
0x40008b5	              0x55	                                push rbp	       889	libbfd.c	FUNCTION_58
0x40008b6	              0x53	                                push rbx	       889	libbfd.c	FUNCTION_58
0x40008b7	          0x4d89c4	                             mov r12, r8	       889	libbfd.c	FUNCTION_58
0x40008ba	          0x4889f3	                            mov rbx, rsi	       889	libbfd.c	FUNCTION_58
0x40008bd	          0x4889fd	                            mov rbp, rdi	       889	libbfd.c	FUNCTION_58
0x40008c0	        0x4883ec08	                              sub rsp, 8	       889	libbfd.c	FUNCTION_58
0x40008c4	        0xf6462430	           test byte [rsi + 0x24], 0x30 	       894	libbfd.c	FUNCTION_58	IF_2
0x40008c8	     0xf85c2000000	                           jne 0x4000990	       894	libbfd.c	FUNCTION_58	IF_2
0x40008ce	         0xfb64744	           movzx eax, byte [rdi + 0x44] 	       909	libbfd.c	FUNCTION_58	IF_3
0x40008d2	          0x83e018	                           and eax, 0x18	       909	libbfd.c	FUNCTION_58	IF_3
0x40008d5	            0x3c10	                            cmp al, 0x10	       909	libbfd.c	FUNCTION_58	IF_3
0x40008d7	     0xf84a3000000	                            je 0x4000980	       909	libbfd.c	FUNCTION_58	IF_3
0x40008dd	        0x488b4640	            mov rax, qword [rsi + 0x40] 	       909	libbfd.c	FUNCTION_58	IF_3
0x40008e1	          0x4885c0	                           test rax, rax	       909	libbfd.c	FUNCTION_58	IF_3
0x40008e4	     0xf8496000000	                            je 0x4000980	       909	libbfd.c	FUNCTION_58	IF_3
0x40008ea	          0x4c89e2	                            mov rdx, r12	       914	libbfd.c	FUNCTION_58	ELSE_1	IF_4
0x40008ed	          0x4801ca	                            add rdx, rcx	       914	libbfd.c	FUNCTION_58	ELSE_1	IF_4
0x40008f0	            0x726e	                            jb 0x4000960	       914	libbfd.c	FUNCTION_58	ELSE_1	IF_4
0x40008f2	          0x4839d0	                            cmp rax, rdx	       914	libbfd.c	FUNCTION_58	ELSE_1	IF_4
0x40008f5	            0x7269	                            jb 0x4000960	       914	libbfd.c	FUNCTION_58	ELSE_1	IF_4
0x40008f7	    0x488b85d00000	            mov rax, qword [rbp + 0xd0] 	       915	libbfd.c	FUNCTION_58	ELSE_1	IF_4
0x40008fe	          0x4885c0	                           test rax, rax	       915	libbfd.c	FUNCTION_58	ELSE_1	IF_4
0x4000901	            0x7406	                            je 0x4000909	       915	libbfd.c	FUNCTION_58	ELSE_1	IF_4
0x4000903	        0xf6404801	               test byte [rax + 0x48], 1	       916	libbfd.c	FUNCTION_58	ELSE_1	IF_4	CALL_4
0x4000907	            0x7437	                            je 0x4000940	       916	libbfd.c	FUNCTION_58	ELSE_1	IF_4	CALL_4
0x4000909	          0x4889ce	                            mov rsi, rcx	       916	libbfd.c	FUNCTION_58	ELSE_1	IF_4	CALL_4
0x400090c	    0x4803b3900000	             add rsi, qword [rbx + 0x90]	       916	libbfd.c	FUNCTION_58	ELSE_1	IF_4	CALL_4
0x4000913	            0x31d2	                            xor edx, edx	       924	libbfd.c	FUNCTION_58	IF_5	CALL_7
0x4000915	          0x4889ef	                            mov rdi, rbp	       924	libbfd.c	FUNCTION_58	IF_5	CALL_7
0x4000918	      0xe800000000	                          call 0x400091d	       924	libbfd.c	FUNCTION_58	IF_5	CALL_7
0x400091d	            0x89c2	                            mov edx, eax	       924	libbfd.c	FUNCTION_58	IF_5	CALL_7
0x400091f	            0x31c0	                            xor eax, eax	       926	libbfd.c	FUNCTION_58	IF_5
0x4000921	            0x85d2	                           test edx, edx	       924	libbfd.c	FUNCTION_58	IF_5	CALL_7
0x4000923	            0x7547	                           jne 0x400096c	       924	libbfd.c	FUNCTION_58	IF_5	CALL_7
0x4000925	          0x4889ea	                            mov rdx, rbp	       925	libbfd.c	FUNCTION_58	IF_5	CALL_8
0x4000928	          0x4c89e6	                            mov rsi, r12	       925	libbfd.c	FUNCTION_58	IF_5	CALL_8
0x400092b	          0x4c89ef	                            mov rdi, r13	       925	libbfd.c	FUNCTION_58	IF_5	CALL_8
0x400092e	      0xe800000000	                          call 0x4000933	       925	libbfd.c	FUNCTION_58	IF_5	CALL_8
0x4000933	          0x4939c4	                            cmp r12, rax	       892	libbfd.c	FUNCTION_58	IF_1
0x4000936	           0xf94c0	                                 sete al	       892	libbfd.c	FUNCTION_58	IF_1
0x4000939	           0xfb6c0	                           movzx eax, al	       892	libbfd.c	FUNCTION_58	IF_1
0x400093c	            0xeb2e	                           jmp 0x400096c	       892	libbfd.c	FUNCTION_58	IF_1
0x400093e	            0x6690	                                     nop	       892	libbfd.c	FUNCTION_58	IF_1
0x4000940	    0x48038b900000	             add rcx, qword [rbx + 0x90]	       917	libbfd.c	FUNCTION_58	ELSE_1	IF_4
0x4000947	    0x488b85c80000	            mov rax, qword [rbp + 0xc8] 	       918	libbfd.c	FUNCTION_58	ELSE_1	IF_4	CALL_5
0x400094e	        0x4a8d1421	                    lea rdx, [rcx + r12]	       917	libbfd.c	FUNCTION_58	ELSE_1	IF_4
0x4000952	        0x483b5008	                cmp rdx, qword [rax + 8]	       917	libbfd.c	FUNCTION_58	ELSE_1	IF_4
0x4000956	          0x4889ce	                            mov rsi, rcx	       917	libbfd.c	FUNCTION_58	ELSE_1	IF_4
0x4000959	            0x76b8	                           jbe 0x4000913	       917	libbfd.c	FUNCTION_58	ELSE_1	IF_4
0x400095b	       0xf1f440000	                   nop dword [rax + rax]	       917	libbfd.c	FUNCTION_58	ELSE_1	IF_4
0x4000960	      0xbf05000000	                              mov edi, 5	       920	libbfd.c	FUNCTION_58	ELSE_1	IF_4	CALL_6
0x4000965	      0xe800000000	                          call 0x400096a	       920	libbfd.c	FUNCTION_58	ELSE_1	IF_4	CALL_6
0x400096a	            0x31c0	                            xor eax, eax	       921	libbfd.c	FUNCTION_58	ELSE_1	IF_4
0x400096c	        0x4883c408	                              add rsp, 8	       929	libbfd.c	FUNCTION_58
0x4000970	              0x5b	                                 pop rbx	       929	libbfd.c	FUNCTION_58
0x4000971	              0x5d	                                 pop rbp	       929	libbfd.c	FUNCTION_58
0x4000972	            0x415c	                                 pop r12	       929	libbfd.c	FUNCTION_58
0x4000974	            0x415d	                                 pop r13	       929	libbfd.c	FUNCTION_58
0x4000976	            0xf3c3	                                     ret	       929	libbfd.c	FUNCTION_58
0x4000978	     0xf1f84000000	                   nop dword [rax + rax]	       929	libbfd.c	FUNCTION_58
0x4000980	        0x488b4338	            mov rax, qword [rbx + 0x38] 	       912	libbfd.c	FUNCTION_58	ELSE_1
0x4000984	      0xe961ffffff	                           jmp 0x40008ea	       912	libbfd.c	FUNCTION_58	ELSE_1
0x4000989	     0xf1f80000000	                         nop dword [rax]	       912	libbfd.c	FUNCTION_58	ELSE_1
0x4000990	      0xba05000000	                              mov edx, 5	       898	libbfd.c	FUNCTION_58	IF_2	CALL_2
0x4000995	      0xbe00000000	                              mov esi, 0	       898	libbfd.c	FUNCTION_58	IF_2	CALL_2
0x400099a	      0xbf00000000	                              mov edi, 0	       898	libbfd.c	FUNCTION_58	IF_2	CALL_2
0x400099f	      0xe800000000	                          call 0x40009a4	       898	libbfd.c	FUNCTION_58	IF_2	CALL_2
0x40009a4	          0x4889da	                            mov rdx, rbx	       896	libbfd.c	FUNCTION_58	IF_2	CALL_1
0x40009a7	          0x4889c7	                            mov rdi, rax	       896	libbfd.c	FUNCTION_58	IF_2	CALL_1
0x40009aa	          0x4889ee	                            mov rsi, rbp	       896	libbfd.c	FUNCTION_58	IF_2	CALL_1
0x40009ad	            0x31c0	                            xor eax, eax	       896	libbfd.c	FUNCTION_58	IF_2	CALL_1
0x40009af	      0xe800000000	                          call 0x40009b4	       896	libbfd.c	FUNCTION_58	IF_2	CALL_1
0x40009b4	      0xbf05000000	                              mov edi, 5	       900	libbfd.c	FUNCTION_58	IF_2	CALL_3
0x40009b9	      0xe800000000	                          call 0x40009be	       900	libbfd.c	FUNCTION_58	IF_2	CALL_3
0x40009be	            0x31c0	                            xor eax, eax	       901	libbfd.c	FUNCTION_58	IF_2
0x40009c0	            0xebaa	                           jmp 0x400096c	       901	libbfd.c	FUNCTION_58	IF_2
bfd_getb64	WHILE,0:IF,0:SWITCH,0:FOR,0:DO,0:functions,0:ELSE,0:CALL,1	16
0x4000610	            0x8b07	                    mov eax, dword [rdi]	       691	libbfd.c	FUNCTION_48
0x4000612	         0xfb65704	               movzx edx, byte [rdi + 4]	       700	libbfd.c	FUNCTION_48
0x4000616	             0xfc8	                               bswap eax	       700	libbfd.c	FUNCTION_48
0x4000618	            0x89c0	                            mov eax, eax	       700	libbfd.c	FUNCTION_48
0x400061a	        0x48c1e008	                              shl rax, 8	       699	libbfd.c	FUNCTION_48
0x400061e	          0x4809d0	                             or rax, rdx	       700	libbfd.c	FUNCTION_48
0x4000621	         0xfb65705	               movzx edx, byte [rdi + 5]	       701	libbfd.c	FUNCTION_48
0x4000625	        0x48c1e008	                              shl rax, 8	       700	libbfd.c	FUNCTION_48
0x4000629	          0x4809d0	                             or rax, rdx	       701	libbfd.c	FUNCTION_48
0x400062c	         0xfb65706	               movzx edx, byte [rdi + 6]	       702	libbfd.c	FUNCTION_48
0x4000630	        0x48c1e008	                              shl rax, 8	       701	libbfd.c	FUNCTION_48
0x4000634	          0x4809d0	                             or rax, rdx	       702	libbfd.c	FUNCTION_48
0x4000637	         0xfb65707	               movzx edx, byte [rdi + 7]	       705	libbfd.c	FUNCTION_48
0x400063b	        0x48c1e008	                              shl rax, 8	       702	libbfd.c	FUNCTION_48
0x400063f	          0x4809d0	                             or rax, rdx	       705	libbfd.c	FUNCTION_48
0x4000642	              0xc3	                                     ret	       710	libbfd.c	FUNCTION_48
bfd_zmalloc	WHILE,0:IF,1:SWITCH,0:FOR,0:DO,0:functions,0:ELSE,0:CALL,2	19
0x4000420	              0x55	                                push rbp	       355	libbfd.c	FUNCTION_33
0x4000421	              0x53	                                push rbx	       355	libbfd.c	FUNCTION_33
0x4000422	          0x4889fd	                            mov rbp, rdi	       355	libbfd.c	FUNCTION_33
0x4000425	        0x4883ec08	                              sub rsp, 8	       355	libbfd.c	FUNCTION_33
0x4000429	      0xe800000000	                          call 0x400042e	       356	libbfd.c	FUNCTION_33	CALL_1
0x400042e	          0x4885c0	                           test rax, rax	       358	libbfd.c	FUNCTION_33	IF_1
0x4000431	          0x4889c3	                            mov rbx, rax	       356	libbfd.c	FUNCTION_33	CALL_1
0x4000434	            0x7412	                            je 0x4000448	       358	libbfd.c	FUNCTION_33	IF_1
0x4000436	          0x4885ed	                           test rbp, rbp	       358	libbfd.c	FUNCTION_33	IF_1
0x4000439	            0x740d	                            je 0x4000448	       358	libbfd.c	FUNCTION_33	IF_1
0x400043b	          0x4889ea	                            mov rdx, rbp	        90	string3.h	FUNCTION_71	CALL_6
0x400043e	            0x31f6	                            xor esi, esi	        90	string3.h	FUNCTION_71	CALL_6
0x4000440	          0x4889c7	                            mov rdi, rax	        90	string3.h	FUNCTION_71	CALL_6
0x4000443	      0xe800000000	                          call 0x4000448	        90	string3.h	FUNCTION_71	CALL_6
0x4000448	        0x4883c408	                              add rsp, 8	       362	libbfd.c	FUNCTION_33
0x400044c	          0x4889d8	                            mov rax, rbx	       362	libbfd.c	FUNCTION_33
0x400044f	              0x5b	                                 pop rbx	       362	libbfd.c	FUNCTION_33
0x4000450	              0x5d	                                 pop rbp	       362	libbfd.c	FUNCTION_33
0x4000451	              0xc3	                                     ret	       362	libbfd.c	FUNCTION_33
bfd_malloc	WHILE,0:IF,2:SWITCH,0:FOR,0:DO,0:functions,0:ELSE,0:CALL,3	33
0x4000280	              0x55	                                push rbp	       259	libbfd.c	FUNCTION_28
0x4000281	              0x53	                                push rbx	       259	libbfd.c	FUNCTION_28
0x4000282	        0x4883ec08	                              sub rsp, 8	       259	libbfd.c	FUNCTION_28
0x4000286	          0x4885ff	                           test rdi, rdi	       263	libbfd.c	FUNCTION_28	IF_1
0x4000289	            0x783d	                            js 0x40002c8	       263	libbfd.c	FUNCTION_28	IF_1
0x400028b	          0x4889fb	                            mov rbx, rdi	       263	libbfd.c	FUNCTION_28	IF_1
0x400028e	      0xe800000000	                          call 0x4000293	       271	libbfd.c	FUNCTION_28	CALL_2
0x4000293	          0x4885c0	                           test rax, rax	       272	libbfd.c	FUNCTION_28	IF_2
0x4000296	          0x4889c5	                            mov rbp, rax	       271	libbfd.c	FUNCTION_28	CALL_2
0x4000299	            0x751d	                           jne 0x40002b8	       272	libbfd.c	FUNCTION_28	IF_2
0x400029b	          0x4885db	                           test rbx, rbx	       272	libbfd.c	FUNCTION_28	IF_2
0x400029e	            0x7418	                            je 0x40002b8	       272	libbfd.c	FUNCTION_28	IF_2
0x40002a0	      0xbf06000000	                              mov edi, 6	       273	libbfd.c	FUNCTION_28	CALL_3
0x40002a5	      0xe800000000	                          call 0x40002aa	       273	libbfd.c	FUNCTION_28	CALL_3
0x40002aa	        0x4883c408	                              add rsp, 8	       276	libbfd.c	FUNCTION_28
0x40002ae	          0x4889e8	                            mov rax, rbp	       273	libbfd.c	FUNCTION_28	CALL_3
0x40002b1	              0x5b	                                 pop rbx	       276	libbfd.c	FUNCTION_28
0x40002b2	              0x5d	                                 pop rbp	       276	libbfd.c	FUNCTION_28
0x40002b3	              0xc3	                                     ret	       276	libbfd.c	FUNCTION_28
0x40002b4	         0xf1f4000	                         nop dword [rax]	       276	libbfd.c	FUNCTION_28
0x40002b8	        0x4883c408	                              add rsp, 8	       276	libbfd.c	FUNCTION_28
0x40002bc	          0x4889e8	                            mov rax, rbp	       271	libbfd.c	FUNCTION_28	CALL_2
0x40002bf	              0x5b	                                 pop rbx	       276	libbfd.c	FUNCTION_28
0x40002c0	              0x5d	                                 pop rbp	       276	libbfd.c	FUNCTION_28
0x40002c1	              0xc3	                                     ret	       276	libbfd.c	FUNCTION_28
0x40002c2	    0x660f1f440000	                    nop word [rax + rax]	       276	libbfd.c	FUNCTION_28
0x40002c8	      0xbf06000000	                              mov edi, 6	       267	libbfd.c	FUNCTION_28	IF_1	CALL_1
0x40002cd	      0xe800000000	                          call 0x40002d2	       267	libbfd.c	FUNCTION_28	IF_1	CALL_1
0x40002d2	        0x4883c408	                              add rsp, 8	       276	libbfd.c	FUNCTION_28
0x40002d6	            0x31c0	                            xor eax, eax	       268	libbfd.c	FUNCTION_28	IF_1
0x40002d8	              0x5b	                                 pop rbx	       276	libbfd.c	FUNCTION_28
0x40002d9	              0x5d	                                 pop rbp	       276	libbfd.c	FUNCTION_28
0x40002da	              0xc3	                                     ret	       276	libbfd.c	FUNCTION_28
_bfd_bool_bfd_asymbol_false	WHILE,0:IF,0:SWITCH,0:FOR,0:DO,0:functions,0:ELSE,0:CALL,0	2
0x4000050	            0x31c0	                            xor eax, eax	        54	libbfd.c	FUNCTION_2
0x4000052	              0xc3	                                     ret	        54	libbfd.c	FUNCTION_2
_bfd_norelocs_get_reloc_upper_bound	WHILE,0:IF,0:SWITCH,0:FOR,0:DO,0:functions,0:ELSE,0:CALL,0	2
0x40001b0	      0xb808000000	                              mov eax, 8	       188	libbfd.c	FUNCTION_20
0x40001b5	              0xc3	                                     ret	       188	libbfd.c	FUNCTION_20
_bfd_generic_get_section_contents_in_window	WHILE,0:IF,6:SWITCH,0:FOR,0:DO,0:functions,0:ELSE,1:CALL,9	5
0x40009d0	        0x4883ec08	                              sub rsp, 8	       938	libbfd.c	FUNCTION_59
0x40009d4	      0xba00000000	                              mov edx, 0	       984	libbfd.c	FUNCTION_59	CALL_9
0x40009d9	      0xbed8030000	                          mov esi, 0x3d8	       984	libbfd.c	FUNCTION_59	CALL_9
0x40009de	      0xbf00000000	                              mov edi, 0	       984	libbfd.c	FUNCTION_59	CALL_9
0x40009e3	      0xe800000000	                          call 0x40009e8	       984	libbfd.c	FUNCTION_59	CALL_9
bfd_get_bits	WHILE,0:IF,1:SWITCH,0:FOR,1:DO,0:functions,0:ELSE,0:CALL,1	31
0x4000840	        0x40f6c607	                             test sil, 7	       866	libbfd.c	FUNCTION_57	IF_1
0x4000844	            0x7542	                           jne 0x4000888	       866	libbfd.c	FUNCTION_57	IF_1
0x4000846	          0x8d4607	                      lea eax, [rsi + 7]	       870	libbfd.c	FUNCTION_57
0x4000849	            0x85f6	                           test esi, esi	       870	libbfd.c	FUNCTION_57
0x400084b	           0xf48f0	                          cmovs esi, eax	       870	libbfd.c	FUNCTION_57
0x400084e	          0xc1fe03	                              sar esi, 3	       870	libbfd.c	FUNCTION_57
0x4000851	            0x85f6	                           test esi, esi	       871	libbfd.c	FUNCTION_57	FOR_1
0x4000853	            0x7e30	                           jle 0x4000885	       871	libbfd.c	FUNCTION_57	FOR_1
0x4000855	        0x448d4eff	                      lea r9d, [rsi - 1]	       871	libbfd.c	FUNCTION_57	FOR_1
0x4000859	          0x4531c0	                            xor r8d, r8d	       871	libbfd.c	FUNCTION_57	FOR_1
0x400085c	            0x31c0	                            xor eax, eax	       871	libbfd.c	FUNCTION_57	FOR_1
0x400085e	            0x6690	                                     nop	       871	libbfd.c	FUNCTION_57	FOR_1
0x4000860	          0x4489c9	                            mov ecx, r9d	       871	libbfd.c	FUNCTION_57	FOR_1
0x4000863	          0x4429c1	                            sub ecx, r8d	       871	libbfd.c	FUNCTION_57	FOR_1
0x4000866	            0x85d2	                           test edx, edx	       871	libbfd.c	FUNCTION_57	FOR_1
0x4000868	        0x410f45c8	                         cmovne ecx, r8d	       871	libbfd.c	FUNCTION_57	FOR_1
0x400086c	        0x48c1e008	                              shl rax, 8	       875	libbfd.c	FUNCTION_57	FOR_1
0x4000870	        0x4183c001	                              add r8d, 1	       871	libbfd.c	FUNCTION_57	FOR_1
0x4000874	          0x4863c9	                         movsxd rcx, ecx	       875	libbfd.c	FUNCTION_57	FOR_1
0x4000877	         0xfb60c0f	             movzx ecx, byte [rdi + rcx]	       875	libbfd.c	FUNCTION_57	FOR_1
0x400087b	          0x4809c8	                             or rax, rcx	       875	libbfd.c	FUNCTION_57	FOR_1
0x400087e	          0x4439c6	                            cmp esi, r8d	       871	libbfd.c	FUNCTION_57	FOR_1
0x4000881	            0x75dd	                           jne 0x4000860	       871	libbfd.c	FUNCTION_57	FOR_1
0x4000883	            0xf3c3	                                     ret	       871	libbfd.c	FUNCTION_57	FOR_1
0x4000885	            0x31c0	                            xor eax, eax	       869	libbfd.c	FUNCTION_57
0x4000887	              0xc3	                                     ret	       879	libbfd.c	FUNCTION_57
0x4000888	        0x4883ec08	                              sub rsp, 8	       860	libbfd.c	FUNCTION_57
0x400088c	      0xba00000000	                              mov edx, 0	       867	libbfd.c	FUNCTION_57	CALL_1
0x4000891	      0xbe63030000	                          mov esi, 0x363	       867	libbfd.c	FUNCTION_57	CALL_1
0x4000896	      0xbf00000000	                              mov edi, 0	       867	libbfd.c	FUNCTION_57	CALL_1
0x400089b	      0xe800000000	call sym._bfd_generic_get_section_contents	       867	libbfd.c	FUNCTION_57	CALL_1
bfd_log2	WHILE,0:IF,1:SWITCH,0:FOR,0:DO,1:functions,0:ELSE,0:CALL,0	12
0x4000a50	        0x4883ff01	                              cmp rdi, 1	      1026	libbfd.c	FUNCTION_61	IF_1
0x4000a54	            0x761a	                           jbe 0x4000a70	      1026	libbfd.c	FUNCTION_61	IF_1
0x4000a56	        0x4883ef01	                              sub rdi, 1	      1028	libbfd.c	FUNCTION_61
0x4000a5a	            0x31c0	                            xor eax, eax	      1024	libbfd.c	FUNCTION_61
0x4000a5c	         0xf1f4000	                         nop dword [rax]	      1024	libbfd.c	FUNCTION_61
0x4000a60	          0x83c001	                              add eax, 1	      1030	libbfd.c	FUNCTION_61	DO_1
0x4000a63	          0x48d1ef	                              shr rdi, 1	      1031	libbfd.c	FUNCTION_61
0x4000a66	            0x75f8	                           jne 0x4000a60	      1031	libbfd.c	FUNCTION_61
0x4000a68	            0xf3c3	                                     ret	      1031	libbfd.c	FUNCTION_61
0x4000a6a	    0x660f1f440000	                    nop word [rax + rax]	      1031	libbfd.c	FUNCTION_61
0x4000a70	            0x31c0	                            xor eax, eax	      1027	libbfd.c	FUNCTION_61	IF_1
0x4000a72	              0xc3	                                     ret	      1033	libbfd.c	FUNCTION_61
_bfd_norelocs_canonicalize_reloc	WHILE,0:IF,0:SWITCH,0:FOR,0:DO,0:functions,0:ELSE,0:CALL,0	3
0x40001c0	    0x48c702000000	                      mov qword [rdx], 0	       196	libbfd.c	FUNCTION_21
0x40001c7	            0x31c0	                            xor eax, eax	       198	libbfd.c	FUNCTION_21
0x40001c9	              0xc3	                                     ret	       198	libbfd.c	FUNCTION_21
_bfd_warn_deprecated	WHILE,0:IF,2:SWITCH,0:FOR,0:DO,0:functions,0:ELSE,1:CALL,4	55
0x4000aa0	          0x4889c8	                            mov rax, rcx	      1055	libbfd.c	FUNCTION_63	IF_1
0x4000aa3	    0x480b05000000	              or rax, qword [0x04000aaa]	      1055	libbfd.c	FUNCTION_63	IF_1
0x4000aaa	        0x4883f8ff	             cmp rax, 0xffffffffffffffff	      1055	libbfd.c	FUNCTION_63	IF_1
0x4000aae	     0xf8485000000	                            je 0x4000b39	      1055	libbfd.c	FUNCTION_63	IF_1
0x4000ab4	            0x4155	                                push r13	      1051	libbfd.c	FUNCTION_63
0x4000ab6	            0x4154	                                push r12	      1051	libbfd.c	FUNCTION_63
0x4000ab8	          0x4989cc	                            mov r12, rcx	      1051	libbfd.c	FUNCTION_63
0x4000abb	              0x55	                                push rbp	      1051	libbfd.c	FUNCTION_63
0x4000abc	              0x53	                                push rbx	      1051	libbfd.c	FUNCTION_63
0x4000abd	          0x4889fb	                            mov rbx, rdi	      1051	libbfd.c	FUNCTION_63
0x4000ac0	          0x4189d5	                           mov r13d, edx	      1051	libbfd.c	FUNCTION_63
0x4000ac3	          0x4889f5	                            mov rbp, rsi	      1051	libbfd.c	FUNCTION_63
0x4000ac6	        0x4883ec08	                              sub rsp, 8	      1051	libbfd.c	FUNCTION_63
0x4000aca	    0x488b3d000000	            mov rdi, qword [0x04000ad1] 	      1057	libbfd.c	FUNCTION_63	IF_1	CALL_1
0x4000ad1	      0xe800000000	                          call 0x4000ad6	      1057	libbfd.c	FUNCTION_63	IF_1	CALL_1
0x4000ad6	          0x4d85e4	                           test r12, r12	      1060	libbfd.c	FUNCTION_63	IF_1	IF_2
0x4000ad9	      0xba05000000	                              mov edx, 5	      1062	libbfd.c	FUNCTION_63	IF_1	IF_2	CALL_2
0x4000ade	            0x7460	                            je 0x4000b40	      1060	libbfd.c	FUNCTION_63	IF_1	IF_2
0x4000ae0	      0xbe00000000	                              mov esi, 0	      1062	libbfd.c	FUNCTION_63	IF_1	IF_2	CALL_2
0x4000ae5	      0xbf00000000	                              mov edi, 0	      1062	libbfd.c	FUNCTION_63	IF_1	IF_2	CALL_2
0x4000aea	      0xe800000000	                          call 0x4000aef	      1062	libbfd.c	FUNCTION_63	IF_1	IF_2	CALL_2
0x4000aef	        0x4883ec08	                              sub rsp, 8	        97	stdio2.h	CALL_12
0x4000af3	    0x488b3d000000	            mov rdi, qword [0x04000afa] 	        97	stdio2.h	CALL_12
0x4000afa	          0x4889c2	                            mov rdx, rax	        97	stdio2.h	CALL_12
0x4000afd	            0x4154	                                push r12	        97	stdio2.h	CALL_12
0x4000aff	          0x4589e9	                           mov r9d, r13d	        97	stdio2.h	CALL_12
0x4000b02	          0x4989e8	                             mov r8, rbp	        97	stdio2.h	CALL_12
0x4000b05	          0x4889d9	                            mov rcx, rbx	        97	stdio2.h	CALL_12
0x4000b08	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_12
0x4000b0d	            0x31c0	                            xor eax, eax	        97	stdio2.h	CALL_12
0x4000b0f	      0xe800000000	                          call 0x4000b14	        97	stdio2.h	CALL_12
0x4000b14	              0x58	                                 pop rax	        97	stdio2.h	CALL_12
0x4000b15	              0x5a	                                 pop rdx	        97	stdio2.h	CALL_12
0x4000b16	    0x488b3d000000	            mov rdi, qword [0x04000b1d] 	      1066	libbfd.c	FUNCTION_63	IF_1	CALL_4
0x4000b1d	      0xe800000000	                          call 0x4000b22	      1066	libbfd.c	FUNCTION_63	IF_1	CALL_4
0x4000b22	          0x4c89e1	                            mov rcx, r12	      1067	libbfd.c	FUNCTION_63	IF_1
0x4000b25	          0x48f7d1	                                 not rcx	      1067	libbfd.c	FUNCTION_63	IF_1
0x4000b28	    0x48090d000000	              or qword [0x04000b2f], rcx	      1067	libbfd.c	FUNCTION_63	IF_1
0x4000b2f	        0x4883c408	                              add rsp, 8	      1069	libbfd.c	FUNCTION_63
0x4000b33	              0x5b	                                 pop rbx	      1069	libbfd.c	FUNCTION_63
0x4000b34	              0x5d	                                 pop rbp	      1069	libbfd.c	FUNCTION_63
0x4000b35	            0x415c	                                 pop r12	      1069	libbfd.c	FUNCTION_63
0x4000b37	            0x415d	                                 pop r13	      1069	libbfd.c	FUNCTION_63
0x4000b39	            0xf3c3	                                     ret	      1069	libbfd.c	FUNCTION_63
0x4000b3b	       0xf1f440000	                   nop dword [rax + rax]	      1069	libbfd.c	FUNCTION_63
0x4000b40	      0xbe00000000	                              mov esi, 0	      1065	libbfd.c	FUNCTION_63	IF_1	CALL_3
0x4000b45	      0xbf00000000	                              mov edi, 0	      1065	libbfd.c	FUNCTION_63	IF_1	CALL_3
0x4000b4a	      0xe800000000	                          call 0x4000b4f	      1065	libbfd.c	FUNCTION_63	IF_1	CALL_3
0x4000b4f	    0x488b3d000000	            mov rdi, qword [0x04000b56] 	        97	stdio2.h	CALL_12
0x4000b56	          0x4889c2	                            mov rdx, rax	        97	stdio2.h	CALL_12
0x4000b59	          0x4889d9	                            mov rcx, rbx	        97	stdio2.h	CALL_12
0x4000b5c	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_12
0x4000b61	            0x31c0	                            xor eax, eax	        97	stdio2.h	CALL_12
0x4000b63	      0xe800000000	                          call 0x4000b68	        97	stdio2.h	CALL_12
0x4000b68	            0xebac	                           jmp 0x4000b16	        97	stdio2.h	CALL_12
_bfd_long_bfd_n1_error	WHILE,0:IF,0:SWITCH,0:FOR,0:DO,0:functions,0:ELSE,0:CALL,1	6
0x4000160	        0x4883ec08	                              sub rsp, 8	       161	libbfd.c	FUNCTION_16
0x4000164	      0xbf05000000	                              mov edi, 5	       162	libbfd.c	FUNCTION_16	CALL_1
0x4000169	      0xe800000000	                          call 0x400016e	       162	libbfd.c	FUNCTION_16	CALL_1
0x400016e	    0x48c7c0ffffff	             mov rax, 0xffffffffffffffff	       164	libbfd.c	FUNCTION_16
0x4000175	        0x4883c408	                              add rsp, 8	       164	libbfd.c	FUNCTION_16
0x4000179	              0xc3	                                     ret	       164	libbfd.c	FUNCTION_16
bfd_write_bigendian_4byte_int	WHILE,0:IF,0:SWITCH,0:FOR,0:DO,0:functions,0:ELSE,0:CALL,2	27
0x40004a0	        0x4883ec18	                           sub rsp, 0x18	       398	libbfd.c	FUNCTION_35
0x40004a4	          0x4889fa	                            mov rdx, rdi	       398	libbfd.c	FUNCTION_35
0x40004a7	    0x64488b042528	                mov rax, qword fs:[0x28]	       398	libbfd.c	FUNCTION_35
0x40004b0	      0x4889442408	                mov qword [rsp + 8], rax	       398	libbfd.c	FUNCTION_35
0x40004b5	            0x31c0	                            xor eax, eax	       398	libbfd.c	FUNCTION_35
0x40004b7	            0x89f0	                            mov eax, esi	       400	libbfd.c	FUNCTION_35	CALL_1
0x40004b9	      0x4088742403	                 mov byte [rsp + 3], sil	       789	libbfd.c	FUNCTION_52
0x40004be	          0x4889e7	                            mov rdi, rsp	       401	libbfd.c	FUNCTION_35	CALL_2
0x40004c1	          0x4889c1	                            mov rcx, rax	       786	libbfd.c	FUNCTION_52
0x40004c4	      0xbe04000000	                              mov esi, 4	       401	libbfd.c	FUNCTION_35	CALL_2
0x40004c9	        0x48c1e918	                           shr rcx, 0x18	       786	libbfd.c	FUNCTION_52
0x40004cd	          0x880c24	                      mov byte [rsp], cl	       786	libbfd.c	FUNCTION_52
0x40004d0	          0x4889c1	                            mov rcx, rax	       787	libbfd.c	FUNCTION_52
0x40004d3	        0x48c1e808	                              shr rax, 8	       788	libbfd.c	FUNCTION_52
0x40004d7	        0x48c1e910	                           shr rcx, 0x10	       787	libbfd.c	FUNCTION_52
0x40004db	        0x88442402	                  mov byte [rsp + 2], al	       788	libbfd.c	FUNCTION_52
0x40004df	        0x884c2401	                  mov byte [rsp + 1], cl	       787	libbfd.c	FUNCTION_52
0x40004e3	      0xe800000000	                          call 0x40004e8	       401	libbfd.c	FUNCTION_35	CALL_2
0x40004e8	        0x4883f804	                              cmp rax, 4	       401	libbfd.c	FUNCTION_35	CALL_2
0x40004ec	           0xf94c0	                                 sete al	       401	libbfd.c	FUNCTION_35	CALL_2
0x40004ef	      0x488b7c2408	                mov rdi, qword [rsp + 8]	       402	libbfd.c	FUNCTION_35
0x40004f4	    0x6448333c2528	                xor rdi, qword fs:[0x28]	       402	libbfd.c	FUNCTION_35
0x40004fd	            0x7508	                           jne 0x4000507	       402	libbfd.c	FUNCTION_35
0x40004ff	           0xfb6c0	                           movzx eax, al	       402	libbfd.c	FUNCTION_35
0x4000502	        0x4883c418	                           add rsp, 0x18	       402	libbfd.c	FUNCTION_35
0x4000506	              0xc3	                                     ret	       402	libbfd.c	FUNCTION_35
0x4000507	      0xe800000000	                          call 0x400050c	       402	libbfd.c	FUNCTION_35
bfd_putb64	WHILE,0:IF,0:SWITCH,0:FOR,0:DO,0:functions,0:ELSE,0:CALL,1	23
0x4000740	          0x4889f8	                            mov rax, rdi	       807	libbfd.c	FUNCTION_54
0x4000743	        0x40887e07	                 mov byte [rsi + 7], dil	       814	libbfd.c	FUNCTION_54
0x4000747	        0x48c1e838	                           shr rax, 0x38	       807	libbfd.c	FUNCTION_54
0x400074b	            0x8806	                      mov byte [rsi], al	       807	libbfd.c	FUNCTION_54
0x400074d	          0x4889f8	                            mov rax, rdi	       808	libbfd.c	FUNCTION_54
0x4000750	        0x48c1e830	                           shr rax, 0x30	       808	libbfd.c	FUNCTION_54
0x4000754	          0x884601	                  mov byte [rsi + 1], al	       808	libbfd.c	FUNCTION_54
0x4000757	          0x4889f8	                            mov rax, rdi	       809	libbfd.c	FUNCTION_54
0x400075a	        0x48c1e828	                           shr rax, 0x28	       809	libbfd.c	FUNCTION_54
0x400075e	          0x884602	                  mov byte [rsi + 2], al	       809	libbfd.c	FUNCTION_54
0x4000761	          0x4889f8	                            mov rax, rdi	       810	libbfd.c	FUNCTION_54
0x4000764	        0x48c1e820	                           shr rax, 0x20	       810	libbfd.c	FUNCTION_54
0x4000768	          0x884603	                  mov byte [rsi + 3], al	       810	libbfd.c	FUNCTION_54
0x400076b	          0x4889f8	                            mov rax, rdi	       811	libbfd.c	FUNCTION_54
0x400076e	        0x48c1e818	                           shr rax, 0x18	       811	libbfd.c	FUNCTION_54
0x4000772	          0x884604	                  mov byte [rsi + 4], al	       811	libbfd.c	FUNCTION_54
0x4000775	          0x4889f8	                            mov rax, rdi	       812	libbfd.c	FUNCTION_54
0x4000778	        0x48c1e810	                           shr rax, 0x10	       812	libbfd.c	FUNCTION_54
0x400077c	          0x884605	                  mov byte [rsi + 5], al	       812	libbfd.c	FUNCTION_54
0x400077f	          0x4889f8	                            mov rax, rdi	       813	libbfd.c	FUNCTION_54
0x4000782	        0x48c1e808	                              shr rax, 8	       813	libbfd.c	FUNCTION_54
0x4000786	          0x884606	                  mov byte [rsi + 6], al	       813	libbfd.c	FUNCTION_54
0x4000789	              0xc3	                                     ret	       814	libbfd.c	FUNCTION_54
bfd_getb_signed_32	WHILE,0:IF,0:SWITCH,0:FOR,0:DO,0:functions,0:ELSE,0:CALL,0	5
0x40005f0	            0x8b07	                    mov eax, dword [rdi]	       665	libbfd.c	FUNCTION_46
0x40005f2	             0xfc8	                               bswap eax	       665	libbfd.c	FUNCTION_46
0x40005f4	       0x500000080	                     add eax, 0x80000000	       673	libbfd.c	FUNCTION_46
0x40005f9	    0x480500000080	             add rax, 0xffffffff80000000	       673	libbfd.c	FUNCTION_46
0x40005ff	              0xc3	                                     ret	       674	libbfd.c	FUNCTION_46
bfd_realloc_or_free	WHILE,0:IF,1:SWITCH,0:FOR,0:DO,0:functions,0:ELSE,0:CALL,2	15
0x40003f0	              0x53	                                push rbx	       342	libbfd.c	FUNCTION_32
0x40003f1	          0x4889fb	                            mov rbx, rdi	       342	libbfd.c	FUNCTION_32
0x40003f4	        0x4883ec10	                           sub rsp, 0x10	       342	libbfd.c	FUNCTION_32
0x40003f8	      0xe800000000	                          call 0x40003fd	       343	libbfd.c	FUNCTION_32	CALL_1
0x40003fd	          0x4885c0	                           test rax, rax	       345	libbfd.c	FUNCTION_32	IF_1
0x4000400	            0x7517	                           jne 0x4000419	       345	libbfd.c	FUNCTION_32	IF_1
0x4000402	          0x4885db	                           test rbx, rbx	       345	libbfd.c	FUNCTION_32	IF_1
0x4000405	            0x7412	                            je 0x4000419	       345	libbfd.c	FUNCTION_32	IF_1
0x4000407	          0x4889df	                            mov rdi, rbx	       346	libbfd.c	FUNCTION_32	CALL_2
0x400040a	      0x4889442408	                mov qword [rsp + 8], rax	       346	libbfd.c	FUNCTION_32	CALL_2
0x400040f	      0xe800000000	                          call 0x4000414	       346	libbfd.c	FUNCTION_32	CALL_2
0x4000414	      0x488b442408	                mov rax, qword [rsp + 8]	       346	libbfd.c	FUNCTION_32	CALL_2
0x4000419	        0x4883c410	                           add rsp, 0x10	       349	libbfd.c	FUNCTION_32
0x400041d	              0x5b	                                 pop rbx	       349	libbfd.c	FUNCTION_32
0x400041e	              0xc3	                                     ret	       349	libbfd.c	FUNCTION_32
bfd_getl64	WHILE,0:IF,0:SWITCH,0:FOR,0:DO,0:functions,0:ELSE,0:CALL,1	14
0x4000650	          0x8b4704	                mov eax, dword [rdi + 4]	       722	libbfd.c	FUNCTION_49
0x4000653	         0xfb65703	               movzx edx, byte [rdi + 3]	       723	libbfd.c	FUNCTION_49
0x4000657	        0x48c1e008	                              shl rax, 8	       722	libbfd.c	FUNCTION_49
0x400065b	          0x4809d0	                             or rax, rdx	       723	libbfd.c	FUNCTION_49
0x400065e	         0xfb65702	               movzx edx, byte [rdi + 2]	       724	libbfd.c	FUNCTION_49
0x4000662	        0x48c1e008	                              shl rax, 8	       723	libbfd.c	FUNCTION_49
0x4000666	          0x4809d0	                             or rax, rdx	       724	libbfd.c	FUNCTION_49
0x4000669	         0xfb65701	               movzx edx, byte [rdi + 1]	       725	libbfd.c	FUNCTION_49
0x400066d	        0x48c1e008	                              shl rax, 8	       724	libbfd.c	FUNCTION_49
0x4000671	          0x4809d0	                             or rax, rdx	       725	libbfd.c	FUNCTION_49
0x4000674	           0xfb617	                   movzx edx, byte [rdi]	       728	libbfd.c	FUNCTION_49
0x4000677	        0x48c1e008	                              shl rax, 8	       725	libbfd.c	FUNCTION_49
0x400067b	          0x4809d0	                             or rax, rdx	       728	libbfd.c	FUNCTION_49
0x400067e	              0xc3	                                     ret	       734	libbfd.c	FUNCTION_49
_bfd_generic_init_private_section_data	WHILE,0:IF,0:SWITCH,0:FOR,0:DO,0:functions,0:ELSE,0:CALL,0	2
0x4000cb0	      0xb801000000	                              mov eax, 1	      1176	libbfd.c	FUNCTION_67
0x4000cb5	              0xc3	                                     ret	      1176	libbfd.c	FUNCTION_67
_bfd_read_signed_leb128	WHILE,0:IF,1:SWITCH,0:FOR,0:DO,1:functions,0:ELSE,0:CALL,1	23
0x4000c60	          0x4531c9	                            xor r9d, r9d	      1152	libbfd.c	FUNCTION_66
0x4000c63	            0x31c9	                            xor ecx, ecx	      1151	libbfd.c	FUNCTION_66
0x4000c65	            0x31c0	                            xor eax, eax	      1150	libbfd.c	FUNCTION_66
0x4000c67	    0x660f1f840000	                    nop word [rax + rax]	      1150	libbfd.c	FUNCTION_66
0x4000c70	        0x440fb606	                   movzx r8d, byte [rsi]	      1155	libbfd.c	FUNCTION_66	DO_1	CALL_1
0x4000c74	        0x4183c101	                              add r9d, 1	      1157	libbfd.c	FUNCTION_66	DO_1
0x4000c78	        0x4883c601	                              add rsi, 1	      1156	libbfd.c	FUNCTION_66	DO_1
0x4000c7c	          0x4c89c7	                             mov rdi, r8	      1158	libbfd.c	FUNCTION_66	DO_1
0x4000c7f	          0x83e77f	                           and edi, 0x7f	      1158	libbfd.c	FUNCTION_66	DO_1
0x4000c82	          0x48d3e7	                             shl rdi, cl	      1158	libbfd.c	FUNCTION_66	DO_1
0x4000c85	          0x83c107	                              add ecx, 7	      1159	libbfd.c	FUNCTION_66	DO_1
0x4000c88	          0x4809f8	                             or rax, rdi	      1158	libbfd.c	FUNCTION_66	DO_1
0x4000c8b	          0x4584c0	                           test r8b, r8b	      1161	libbfd.c	FUNCTION_66
0x4000c8e	            0x78e0	                            js 0x4000c70	      1161	libbfd.c	FUNCTION_66
0x4000c90	          0x83f93f	                           cmp ecx, 0x3f	      1162	libbfd.c	FUNCTION_66	IF_1
0x4000c93	            0x7713	                            ja 0x4000ca8	      1162	libbfd.c	FUNCTION_66	IF_1
0x4000c95	        0x4183e040	                           and r8d, 0x40	      1162	libbfd.c	FUNCTION_66	IF_1
0x4000c99	            0x740d	                            je 0x4000ca8	      1162	libbfd.c	FUNCTION_66	IF_1
0x4000c9b	    0x48c7c6ffffff	             mov rsi, 0xffffffffffffffff	      1163	libbfd.c	FUNCTION_66	IF_1
0x4000ca2	          0x48d3e6	                             shl rsi, cl	      1163	libbfd.c	FUNCTION_66	IF_1
0x4000ca5	          0x4809f0	                             or rax, rsi	      1163	libbfd.c	FUNCTION_66	IF_1
0x4000ca8	          0x44890a	                    mov dword [rdx], r9d	      1164	libbfd.c	FUNCTION_66
0x4000cab	              0xc3	                                     ret	      1166	libbfd.c	FUNCTION_66
_bfd_dummy_target	WHILE,0:IF,0:SWITCH,0:FOR,0:DO,0:functions,0:ELSE,0:CALL,1	6
0x4000260	        0x4883ec08	                              sub rsp, 8	       250	libbfd.c	FUNCTION_27
0x4000264	      0xbf03000000	                              mov edi, 3	       251	libbfd.c	FUNCTION_27	CALL_1
0x4000269	      0xe800000000	                          call 0x400026e	       251	libbfd.c	FUNCTION_27	CALL_1
0x400026e	            0x31c0	                            xor eax, eax	       253	libbfd.c	FUNCTION_27
0x4000270	        0x4883c408	                              add rsp, 8	       253	libbfd.c	FUNCTION_27
0x4000274	              0xc3	                                     ret	       253	libbfd.c	FUNCTION_27
bfd_getl_signed_16	WHILE,0:IF,0:SWITCH,0:FOR,0:DO,0:functions,0:ELSE,0:CALL,0	5
0x4000550	           0xfb707	                   movzx eax, word [rdi]	       595	libbfd.c	FUNCTION_39
0x4000553	        0x66050080	                          add ax, 0x8000	       595	libbfd.c	FUNCTION_39
0x4000557	           0xfb7c0	                           movzx eax, ax	       597	libbfd.c	FUNCTION_39
0x400055a	    0x482d00800000	                         sub rax, 0x8000	       597	libbfd.c	FUNCTION_39
0x4000560	              0xc3	                                     ret	       598	libbfd.c	FUNCTION_39
_bfd_norelocs_set_reloc	WHILE,0:IF,0:SWITCH,0:FOR,0:DO,0:functions,0:ELSE,0:CALL,0	1
0x40001d0	            0xf3c3	                                     ret	       205	libbfd.c	FUNCTION_22
bfd_putl64	WHILE,0:IF,0:SWITCH,0:FOR,0:DO,0:functions,0:ELSE,0:CALL,1	23
0x4000790	          0x4889f8	                            mov rax, rdi	       825	libbfd.c	FUNCTION_55
0x4000793	          0x40883e	                     mov byte [rsi], dil	       832	libbfd.c	FUNCTION_55
0x4000796	        0x48c1e838	                           shr rax, 0x38	       825	libbfd.c	FUNCTION_55
0x400079a	          0x884607	                  mov byte [rsi + 7], al	       825	libbfd.c	FUNCTION_55
0x400079d	          0x4889f8	                            mov rax, rdi	       826	libbfd.c	FUNCTION_55
0x40007a0	        0x48c1e830	                           shr rax, 0x30	       826	libbfd.c	FUNCTION_55
0x40007a4	          0x884606	                  mov byte [rsi + 6], al	       826	libbfd.c	FUNCTION_55
0x40007a7	          0x4889f8	                            mov rax, rdi	       827	libbfd.c	FUNCTION_55
0x40007aa	        0x48c1e828	                           shr rax, 0x28	       827	libbfd.c	FUNCTION_55
0x40007ae	          0x884605	                  mov byte [rsi + 5], al	       827	libbfd.c	FUNCTION_55
0x40007b1	          0x4889f8	                            mov rax, rdi	       828	libbfd.c	FUNCTION_55
0x40007b4	        0x48c1e820	                           shr rax, 0x20	       828	libbfd.c	FUNCTION_55
0x40007b8	          0x884604	                  mov byte [rsi + 4], al	       828	libbfd.c	FUNCTION_55
0x40007bb	          0x4889f8	                            mov rax, rdi	       829	libbfd.c	FUNCTION_55
0x40007be	        0x48c1e818	                           shr rax, 0x18	       829	libbfd.c	FUNCTION_55
0x40007c2	          0x884603	                  mov byte [rsi + 3], al	       829	libbfd.c	FUNCTION_55
0x40007c5	          0x4889f8	                            mov rax, rdi	       830	libbfd.c	FUNCTION_55
0x40007c8	        0x48c1e810	                           shr rax, 0x10	       830	libbfd.c	FUNCTION_55
0x40007cc	          0x884602	                  mov byte [rsi + 2], al	       830	libbfd.c	FUNCTION_55
0x40007cf	          0x4889f8	                            mov rax, rdi	       831	libbfd.c	FUNCTION_55
0x40007d2	        0x48c1e808	                              shr rax, 8	       831	libbfd.c	FUNCTION_55
0x40007d6	          0x884601	                  mov byte [rsi + 1], al	       831	libbfd.c	FUNCTION_55
0x40007d9	              0xc3	                                     ret	       832	libbfd.c	FUNCTION_55
bfd_getb32	WHILE,0:IF,0:SWITCH,0:FOR,0:DO,0:functions,0:ELSE,0:CALL,0	4
0x40005d0	            0x8b07	                    mov eax, dword [rdi]	       639	libbfd.c	FUNCTION_44
0x40005d2	             0xfc8	                               bswap eax	       639	libbfd.c	FUNCTION_44
0x40005d4	            0x89c0	                            mov eax, eax	       647	libbfd.c	FUNCTION_44
0x40005d6	              0xc3	                                     ret	       648	libbfd.c	FUNCTION_44
bfd_getb16	WHILE,0:IF,0:SWITCH,0:FOR,0:DO,0:functions,0:ELSE,0:CALL,0	4
0x4000510	           0xfb707	                   movzx eax, word [rdi]	       576	libbfd.c	FUNCTION_36
0x4000513	        0x66c1c008	                               rol ax, 8	       576	libbfd.c	FUNCTION_36
0x4000517	           0xfb7c0	                           movzx eax, ax	       576	libbfd.c	FUNCTION_36
0x400051a	              0xc3	                                     ret	       577	libbfd.c	FUNCTION_36
bfd_malloc2	WHILE,0:IF,1:SWITCH,0:FOR,0:DO,0:functions,0:ELSE,0:CALL,2	21
0x40002e0	          0x4889fa	                            mov rdx, rdi	       284	libbfd.c	FUNCTION_29	IF_1
0x40002e3	      0xb8ffffffff	                     mov eax, 0xffffffff	       284	libbfd.c	FUNCTION_29	IF_1
0x40002e8	          0x4809f2	                             or rdx, rsi	       284	libbfd.c	FUNCTION_29	IF_1
0x40002eb	          0x4839c2	                            cmp rdx, rax	       284	libbfd.c	FUNCTION_29	IF_1
0x40002ee	            0x7616	                           jbe 0x4000306	       284	libbfd.c	FUNCTION_29	IF_1
0x40002f0	          0x4885f6	                           test rsi, rsi	       284	libbfd.c	FUNCTION_29	IF_1
0x40002f3	            0x7411	                            je 0x4000306	       284	libbfd.c	FUNCTION_29	IF_1
0x40002f5	            0x31d2	                            xor edx, edx	       285	libbfd.c	FUNCTION_29	IF_1
0x40002f7	    0x48c7c0ffffff	             mov rax, 0xffffffffffffffff	       285	libbfd.c	FUNCTION_29	IF_1
0x40002fe	          0x48f7f6	                                 div rsi	       285	libbfd.c	FUNCTION_29	IF_1
0x4000301	          0x4839c7	                            cmp rdi, rax	       285	libbfd.c	FUNCTION_29	IF_1
0x4000304	            0x770a	                            ja 0x4000310	       285	libbfd.c	FUNCTION_29	IF_1
0x4000306	        0x480faffe	                           imul rdi, rsi	       291	libbfd.c	FUNCTION_29	CALL_2
0x400030a	      0xe971ffffff	                      jmp sym.bfd_malloc	       291	libbfd.c	FUNCTION_29	CALL_2
0x400030f	              0x90	                                     nop	       291	libbfd.c	FUNCTION_29	CALL_2
0x4000310	        0x4883ec08	                              sub rsp, 8	       282	libbfd.c	FUNCTION_29
0x4000314	      0xbf06000000	                              mov edi, 6	       287	libbfd.c	FUNCTION_29	IF_1	CALL_1
0x4000319	      0xe800000000	                          call 0x400031e	       287	libbfd.c	FUNCTION_29	IF_1	CALL_1
0x400031e	            0x31c0	                            xor eax, eax	       292	libbfd.c	FUNCTION_29
0x4000320	        0x4883c408	                              add rsp, 8	       292	libbfd.c	FUNCTION_29
0x4000324	              0xc3	                                     ret	       292	libbfd.c	FUNCTION_29
_bfd_long_bfd_0	WHILE,0:IF,0:SWITCH,0:FOR,0:DO,0:functions,0:ELSE,0:CALL,0	2
0x4000150	            0x31c0	                            xor eax, eax	       154	libbfd.c	FUNCTION_15
0x4000152	              0xc3	                                     ret	       154	libbfd.c	FUNCTION_15
bfd_putl24	WHILE,0:IF,0:SWITCH,0:FOR,0:DO,0:functions,0:ELSE,0:CALL,0	7
0x40005b0	          0x4889f8	                            mov rax, rdi	       632	libbfd.c	FUNCTION_43
0x40005b3	          0x40883e	                     mov byte [rsi], dil	       631	libbfd.c	FUNCTION_43
0x40005b6	        0x48c1ef10	                           shr rdi, 0x10	       633	libbfd.c	FUNCTION_43
0x40005ba	        0x48c1e808	                              shr rax, 8	       632	libbfd.c	FUNCTION_43
0x40005be	        0x40887e02	                 mov byte [rsi + 2], dil	       633	libbfd.c	FUNCTION_43
0x40005c2	          0x884601	                  mov byte [rsi + 1], al	       632	libbfd.c	FUNCTION_43
0x40005c5	              0xc3	                                     ret	       633	libbfd.c	FUNCTION_43
bfd_putl16	WHILE,0:IF,0:SWITCH,0:FOR,0:DO,0:functions,0:ELSE,0:CALL,0	4
0x4000580	          0x40883e	                     mov byte [rsi], dil	       612	libbfd.c	FUNCTION_41
0x4000583	        0x48c1ef08	                              shr rdi, 8	       613	libbfd.c	FUNCTION_41
0x4000587	        0x40887e01	                 mov byte [rsi + 1], dil	       613	libbfd.c	FUNCTION_41
0x400058b	              0xc3	                                     ret	       613	libbfd.c	FUNCTION_41
_bfd_bool_bfd_uint_true	WHILE,0:IF,0:SWITCH,0:FOR,0:DO,0:functions,0:ELSE,0:CALL,0	2
0x40000d0	      0xb801000000	                              mov eax, 1	       101	libbfd.c	FUNCTION_8
0x40000d5	              0xc3	                                     ret	       101	libbfd.c	FUNCTION_8
_bfd_generic_set_section_contents	WHILE,0:IF,2:SWITCH,0:FOR,0:DO,0:functions,0:ELSE,0:CALL,2	30
0x40009f0	          0x4d85c0	                             test r8, r8	       999	libbfd.c	FUNCTION_60	IF_1
0x40009f3	      0xb801000000	                              mov eax, 1	      1000	libbfd.c	FUNCTION_60	IF_1
0x40009f8	            0x7506	                           jne 0x4000a00	       999	libbfd.c	FUNCTION_60	IF_1
0x40009fa	              0xc3	                                     ret	      1007	libbfd.c	FUNCTION_60
0x40009fb	       0xf1f440000	                   nop dword [rax + rax]	      1007	libbfd.c	FUNCTION_60
0x4000a00	            0x4154	                                push r12	       998	libbfd.c	FUNCTION_60
0x4000a02	              0x55	                                push rbp	       998	libbfd.c	FUNCTION_60
0x4000a03	          0x4889d5	                            mov rbp, rdx	       998	libbfd.c	FUNCTION_60
0x4000a06	              0x53	                                push rbx	       998	libbfd.c	FUNCTION_60
0x4000a07	    0x48038e900000	             add rcx, qword [rsi + 0x90]	      1002	libbfd.c	FUNCTION_60	IF_2	CALL_1
0x4000a0e	            0x31d2	                            xor edx, edx	      1002	libbfd.c	FUNCTION_60	IF_2	CALL_1
0x4000a10	          0x4c89c3	                             mov rbx, r8	      1002	libbfd.c	FUNCTION_60	IF_2	CALL_1
0x4000a13	          0x4989fc	                            mov r12, rdi	      1002	libbfd.c	FUNCTION_60	IF_2	CALL_1
0x4000a16	          0x4889ce	                            mov rsi, rcx	      1002	libbfd.c	FUNCTION_60	IF_2	CALL_1
0x4000a19	      0xe800000000	                          call 0x4000a1e	      1002	libbfd.c	FUNCTION_60	IF_2	CALL_1
0x4000a1e	            0x89c2	                            mov edx, eax	      1002	libbfd.c	FUNCTION_60	IF_2	CALL_1
0x4000a20	            0x31c0	                            xor eax, eax	      1004	libbfd.c	FUNCTION_60	IF_2
0x4000a22	            0x85d2	                           test edx, edx	      1002	libbfd.c	FUNCTION_60	IF_2	CALL_1
0x4000a24	            0x7517	                           jne 0x4000a3d	      1002	libbfd.c	FUNCTION_60	IF_2	CALL_1
0x4000a26	          0x4c89e2	                            mov rdx, r12	      1003	libbfd.c	FUNCTION_60	IF_2	CALL_2
0x4000a29	          0x4889de	                            mov rsi, rbx	      1003	libbfd.c	FUNCTION_60	IF_2	CALL_2
0x4000a2c	          0x4889ef	                            mov rdi, rbp	      1003	libbfd.c	FUNCTION_60	IF_2	CALL_2
0x4000a2f	      0xe800000000	                          call 0x4000a34	      1003	libbfd.c	FUNCTION_60	IF_2	CALL_2
0x4000a34	          0x4839c3	                            cmp rbx, rax	      1000	libbfd.c	FUNCTION_60	IF_1
0x4000a37	           0xf94c0	                                 sete al	      1000	libbfd.c	FUNCTION_60	IF_1
0x4000a3a	           0xfb6c0	                           movzx eax, al	      1000	libbfd.c	FUNCTION_60	IF_1
0x4000a3d	              0x5b	                                 pop rbx	      1007	libbfd.c	FUNCTION_60
0x4000a3e	              0x5d	                                 pop rbp	      1007	libbfd.c	FUNCTION_60
0x4000a3f	            0x415c	                                 pop r12	      1007	libbfd.c	FUNCTION_60
0x4000a41	              0xc3	                                     ret	      1007	libbfd.c	FUNCTION_60
bfd_getb_signed_64	WHILE,0:IF,0:SWITCH,0:FOR,0:DO,0:functions,0:ELSE,0:CALL,1	16
0x4000680	            0x8b07	                    mov eax, dword [rdi]	       738	libbfd.c	FUNCTION_50
0x4000682	         0xfb65704	               movzx edx, byte [rdi + 4]	       747	libbfd.c	FUNCTION_50
0x4000686	             0xfc8	                               bswap eax	       747	libbfd.c	FUNCTION_50
0x4000688	            0x89c0	                            mov eax, eax	       747	libbfd.c	FUNCTION_50
0x400068a	        0x48c1e008	                              shl rax, 8	       746	libbfd.c	FUNCTION_50
0x400068e	          0x4809d0	                             or rax, rdx	       747	libbfd.c	FUNCTION_50
0x4000691	         0xfb65705	               movzx edx, byte [rdi + 5]	       748	libbfd.c	FUNCTION_50
0x4000695	        0x48c1e008	                              shl rax, 8	       747	libbfd.c	FUNCTION_50
0x4000699	          0x4809d0	                             or rax, rdx	       748	libbfd.c	FUNCTION_50
0x400069c	         0xfb65706	               movzx edx, byte [rdi + 6]	       749	libbfd.c	FUNCTION_50
0x40006a0	        0x48c1e008	                              shl rax, 8	       748	libbfd.c	FUNCTION_50
0x40006a4	          0x4809d0	                             or rax, rdx	       749	libbfd.c	FUNCTION_50
0x40006a7	         0xfb65707	               movzx edx, byte [rdi + 7]	       752	libbfd.c	FUNCTION_50
0x40006ab	        0x48c1e008	                              shl rax, 8	       749	libbfd.c	FUNCTION_50
0x40006af	          0x4809d0	                             or rax, rdx	       752	libbfd.c	FUNCTION_50
0x40006b2	              0xc3	                                     ret	       757	libbfd.c	FUNCTION_50
bfd_putb24	WHILE,0:IF,0:SWITCH,0:FOR,0:DO,0:functions,0:ELSE,0:CALL,0	8
0x4000590	          0x4889f8	                            mov rax, rdi	       621	libbfd.c	FUNCTION_42
0x4000593	        0x40887e02	                 mov byte [rsi + 2], dil	       623	libbfd.c	FUNCTION_42
0x4000597	        0x48c1e810	                           shr rax, 0x10	       621	libbfd.c	FUNCTION_42
0x400059b	            0x8806	                      mov byte [rsi], al	       621	libbfd.c	FUNCTION_42
0x400059d	          0x4889f8	                            mov rax, rdi	       622	libbfd.c	FUNCTION_42
0x40005a0	        0x48c1e808	                              shr rax, 8	       622	libbfd.c	FUNCTION_42
0x40005a4	          0x884601	                  mov byte [rsi + 1], al	       622	libbfd.c	FUNCTION_42
0x40005a7	              0xc3	                                     ret	       623	libbfd.c	FUNCTION_42
bfd_putb16	WHILE,0:IF,0:SWITCH,0:FOR,0:DO,0:functions,0:ELSE,0:CALL,0	5
0x4000570	          0x4889f8	                            mov rax, rdi	       604	libbfd.c	FUNCTION_40
0x4000573	        0x40887e01	                 mov byte [rsi + 1], dil	       605	libbfd.c	FUNCTION_40
0x4000577	        0x48c1e808	                              shr rax, 8	       604	libbfd.c	FUNCTION_40
0x400057b	            0x8806	                      mov byte [rsi], al	       604	libbfd.c	FUNCTION_40
0x400057d	              0xc3	                                     ret	       605	libbfd.c	FUNCTION_40
bfd_getb_signed_16	WHILE,0:IF,0:SWITCH,0:FOR,0:DO,0:functions,0:ELSE,0:CALL,0	6
0x4000530	           0xfb707	                   movzx eax, word [rdi]	       588	libbfd.c	FUNCTION_38
0x4000533	        0x66c1c008	                               rol ax, 8	       588	libbfd.c	FUNCTION_38
0x4000537	        0x66050080	                          add ax, 0x8000	       588	libbfd.c	FUNCTION_38
0x400053b	           0xfb7c0	                           movzx eax, ax	       590	libbfd.c	FUNCTION_38
0x400053e	    0x482d00800000	                         sub rax, 0x8000	       590	libbfd.c	FUNCTION_38
0x4000544	              0xc3	                                     ret	       591	libbfd.c	FUNCTION_38
_bfd_bool_bfd_true	WHILE,0:IF,0:SWITCH,0:FOR,0:DO,0:functions,0:ELSE,0:CALL,0	2
0x40000a0	      0xb801000000	                              mov eax, 1	        80	libbfd.c	FUNCTION_5
0x40000a5	              0xc3	                                     ret	        80	libbfd.c	FUNCTION_5
_bfd_safe_read_leb128	WHILE,1:IF,3:SWITCH,0:FOR,0:DO,0:functions,0:ELSE,0:CALL,1	50
0x4000bb0	          0x4c39c6	                             cmp rsi, r8	      1116	libbfd.c	FUNCTION_65	WHILE_1
0x4000bb3	          0x4189cb	                           mov r11d, ecx	      1110	libbfd.c	FUNCTION_65
0x4000bb6	            0x737b	                           jae 0x4000c33	      1116	libbfd.c	FUNCTION_65	WHILE_1
0x4000bb8	        0x440fb60e	                   movzx r9d, byte [rsi]	      1118	libbfd.c	FUNCTION_65	WHILE_1	CALL_1
0x4000bbc	        0x4883c601	                              add rsi, 1	      1119	libbfd.c	FUNCTION_65	WHILE_1
0x4000bc0	          0x4c89c8	                             mov rax, r9	      1122	libbfd.c	FUNCTION_65	WHILE_1
0x4000bc3	          0x83e07f	                           and eax, 0x7f	      1122	libbfd.c	FUNCTION_65	WHILE_1
0x4000bc6	          0x4584c9	                           test r9b, r9b	      1125	libbfd.c	FUNCTION_65	WHILE_1	IF_1
0x4000bc9	            0x7979	                           jns 0x4000c44	      1125	libbfd.c	FUNCTION_65	WHILE_1	IF_1
0x4000bcb	      0xb907000000	                              mov ecx, 7	      1125	libbfd.c	FUNCTION_65	WHILE_1	IF_1
0x4000bd0	    0x41ba01000000	                             mov r10d, 1	      1125	libbfd.c	FUNCTION_65	WHILE_1	IF_1
0x4000bd6	            0xeb28	                           jmp 0x4000c00	      1125	libbfd.c	FUNCTION_65	WHILE_1	IF_1
0x4000bd8	     0xf1f84000000	                   nop dword [rax + rax]	      1125	libbfd.c	FUNCTION_65	WHILE_1	IF_1
0x4000be0	        0x440fb60e	                   movzx r9d, byte [rsi]	      1118	libbfd.c	FUNCTION_65	WHILE_1	CALL_1
0x4000be4	        0x4183c201	                             add r10d, 1	      1120	libbfd.c	FUNCTION_65	WHILE_1
0x4000be8	        0x4883c601	                              add rsi, 1	      1119	libbfd.c	FUNCTION_65	WHILE_1
0x4000bec	          0x4c89cf	                             mov rdi, r9	      1122	libbfd.c	FUNCTION_65	WHILE_1
0x4000bef	          0x83e77f	                           and edi, 0x7f	      1122	libbfd.c	FUNCTION_65	WHILE_1
0x4000bf2	          0x48d3e7	                             shl rdi, cl	      1122	libbfd.c	FUNCTION_65	WHILE_1
0x4000bf5	          0x83c107	                              add ecx, 7	      1124	libbfd.c	FUNCTION_65	WHILE_1
0x4000bf8	          0x4809f8	                             or rax, rdi	      1122	libbfd.c	FUNCTION_65	WHILE_1
0x4000bfb	          0x4584c9	                           test r9b, r9b	      1125	libbfd.c	FUNCTION_65	WHILE_1	IF_1
0x4000bfe	            0x7905	                           jns 0x4000c05	      1125	libbfd.c	FUNCTION_65	WHILE_1	IF_1
0x4000c00	          0x4939f0	                             cmp r8, rsi	      1116	libbfd.c	FUNCTION_65	WHILE_1
0x4000c03	            0x75db	                           jne 0x4000be0	      1116	libbfd.c	FUNCTION_65	WHILE_1
0x4000c05	          0x83f93f	                           cmp ecx, 0x3f	      1116	libbfd.c	FUNCTION_65	WHILE_1
0x4000c08	        0x400f96c6	                               setbe sil	      1116	libbfd.c	FUNCTION_65	WHILE_1
0x4000c0c	          0x4885d2	                           test rdx, rdx	      1129	libbfd.c	FUNCTION_65	IF_2
0x4000c0f	            0x7403	                            je 0x4000c14	      1129	libbfd.c	FUNCTION_65	IF_2
0x4000c11	          0x448912	                   mov dword [rdx], r10d	      1130	libbfd.c	FUNCTION_65	IF_2
0x4000c14	          0x4585db	                         test r11d, r11d	      1132	libbfd.c	FUNCTION_65	IF_3
0x4000c17	            0x7418	                            je 0x4000c31	      1132	libbfd.c	FUNCTION_65	IF_3
0x4000c19	          0x4084f6	                           test sil, sil	      1132	libbfd.c	FUNCTION_65	IF_3
0x4000c1c	            0x7413	                            je 0x4000c31	      1132	libbfd.c	FUNCTION_65	IF_3
0x4000c1e	        0x4183e140	                           and r9d, 0x40	      1132	libbfd.c	FUNCTION_65	IF_3
0x4000c22	            0x740d	                            je 0x4000c31	      1132	libbfd.c	FUNCTION_65	IF_3
0x4000c24	    0x48c7c2ffffff	             mov rdx, 0xffffffffffffffff	      1133	libbfd.c	FUNCTION_65	IF_3
0x4000c2b	          0x48d3e2	                             shl rdx, cl	      1133	libbfd.c	FUNCTION_65	IF_3
0x4000c2e	          0x4809d0	                             or rax, rdx	      1133	libbfd.c	FUNCTION_65	IF_3
0x4000c31	            0xf3c3	                                     ret	      1136	libbfd.c	FUNCTION_65
0x4000c33	      0xbe01000000	                              mov esi, 1	      1116	libbfd.c	FUNCTION_65	WHILE_1
0x4000c38	          0x4531c9	                            xor r9d, r9d	      1114	libbfd.c	FUNCTION_65
0x4000c3b	            0x31c9	                            xor ecx, ecx	      1113	libbfd.c	FUNCTION_65
0x4000c3d	          0x4531d2	                          xor r10d, r10d	      1112	libbfd.c	FUNCTION_65
0x4000c40	            0x31c0	                            xor eax, eax	      1111	libbfd.c	FUNCTION_65
0x4000c42	            0xebc8	                           jmp 0x4000c0c	      1111	libbfd.c	FUNCTION_65
0x4000c44	      0xbe01000000	                              mov esi, 1	      1125	libbfd.c	FUNCTION_65	WHILE_1	IF_1
0x4000c49	      0xb907000000	                              mov ecx, 7	      1124	libbfd.c	FUNCTION_65	WHILE_1
0x4000c4e	    0x41ba01000000	                             mov r10d, 1	      1120	libbfd.c	FUNCTION_65	WHILE_1
0x4000c54	            0xebb6	                           jmp 0x4000c0c	      1120	libbfd.c	FUNCTION_65	WHILE_1
_bfd_void_bfd	WHILE,0:IF,0:SWITCH,0:FOR,0:DO,0:functions,0:ELSE,0:CALL,0	1
0x4000180	            0xf3c3	                                     ret	       168	libbfd.c	FUNCTION_17
bfd_zmalloc2	WHILE,0:IF,2:SWITCH,0:FOR,0:DO,0:functions,0:ELSE,0:CALL,2	21
0x4000460	            0x4154	                                push r12	       369	libbfd.c	FUNCTION_34
0x4000462	              0x55	                                push rbp	       369	libbfd.c	FUNCTION_34
0x4000463	          0x4989fc	                            mov r12, rdi	       369	libbfd.c	FUNCTION_34
0x4000466	              0x53	                                push rbx	       369	libbfd.c	FUNCTION_34
0x4000467	          0x4889f3	                            mov rbx, rsi	       369	libbfd.c	FUNCTION_34
0x400046a	      0xe800000000	                          call 0x400046f	       370	libbfd.c	FUNCTION_34	CALL_1
0x400046f	          0x4885c0	                           test rax, rax	       372	libbfd.c	FUNCTION_34	IF_1
0x4000472	          0x4889c5	                            mov rbp, rax	       370	libbfd.c	FUNCTION_34	CALL_1
0x4000475	            0x7416	                            je 0x400048d	       372	libbfd.c	FUNCTION_34	IF_1
0x4000477	          0x4c89e2	                            mov rdx, r12	       374	libbfd.c	FUNCTION_34	IF_1
0x400047a	        0x480fafd3	                           imul rdx, rbx	       374	libbfd.c	FUNCTION_34	IF_1
0x400047e	          0x4885d2	                           test rdx, rdx	       376	libbfd.c	FUNCTION_34	IF_1	IF_2
0x4000481	            0x740a	                            je 0x400048d	       376	libbfd.c	FUNCTION_34	IF_1	IF_2
0x4000483	            0x31f6	                            xor esi, esi	        90	string3.h	FUNCTION_71	CALL_6
0x4000485	          0x4889c7	                            mov rdi, rax	        90	string3.h	FUNCTION_71	CALL_6
0x4000488	      0xe800000000	                          call 0x400048d	        90	string3.h	FUNCTION_71	CALL_6
0x400048d	          0x4889e8	                            mov rax, rbp	       381	libbfd.c	FUNCTION_34
0x4000490	              0x5b	                                 pop rbx	       381	libbfd.c	FUNCTION_34
0x4000491	              0x5d	                                 pop rbp	       381	libbfd.c	FUNCTION_34
0x4000492	            0x415c	                                 pop r12	       381	libbfd.c	FUNCTION_34
0x4000494	              0xc3	                                     ret	       381	libbfd.c	FUNCTION_34
bfd_getl_signed_32	WHILE,0:IF,0:SWITCH,0:FOR,0:DO,0:functions,0:ELSE,0:CALL,0	4
0x4000600	            0x8b07	                    mov eax, dword [rdi]	       678	libbfd.c	FUNCTION_47
0x4000602	       0x500000080	                     add eax, 0x80000000	       686	libbfd.c	FUNCTION_47
0x4000607	    0x480500000080	             add rax, 0xffffffff80000000	       686	libbfd.c	FUNCTION_47
0x400060d	              0xc3	                                     ret	       687	libbfd.c	FUNCTION_47
bfd_generic_is_local_label_name	WHILE,0:IF,0:SWITCH,0:FOR,0:DO,0:functions,0:ELSE,0:CALL,1	9
0x4000a80	        0x488b4708	                mov rax, qword [rdi + 8]	      1038	libbfd.c	FUNCTION_62	CALL_1
0x4000a84	      0xba2e000000	                           mov edx, 0x2e	      1038	libbfd.c	FUNCTION_62	CALL_1
0x4000a89	        0x80781c5f	            cmp byte [rax + 0x1c], 0x5f 	      1038	libbfd.c	FUNCTION_62	CALL_1
0x4000a8d	      0xb84c000000	                           mov eax, 0x4c	      1038	libbfd.c	FUNCTION_62	CALL_1
0x4000a92	           0xf45c2	                         cmovne eax, edx	      1038	libbfd.c	FUNCTION_62	CALL_1
0x4000a95	            0x3806	                      cmp byte [rsi], al	      1040	libbfd.c	FUNCTION_62
0x4000a97	           0xf94c0	                                 sete al	      1040	libbfd.c	FUNCTION_62
0x4000a9a	           0xfb6c0	                           movzx eax, al	      1040	libbfd.c	FUNCTION_62
0x4000a9d	              0xc3	                                     ret	      1041	libbfd.c	FUNCTION_62
_bfd_read_unsigned_leb128	WHILE,0:IF,0:SWITCH,0:FOR,0:DO,1:functions,0:ELSE,0:CALL,1	16
0x4000b70	            0x31c9	                            xor ecx, ecx	      1084	libbfd.c	FUNCTION_64
0x4000b72	          0x4531c9	                            xor r9d, r9d	      1085	libbfd.c	FUNCTION_64
0x4000b75	            0x31c0	                            xor eax, eax	      1083	libbfd.c	FUNCTION_64
0x4000b77	    0x660f1f840000	                    nop word [rax + rax]	      1083	libbfd.c	FUNCTION_64
0x4000b80	        0x440fb606	                   movzx r8d, byte [rsi]	      1088	libbfd.c	FUNCTION_64	DO_1	CALL_1
0x4000b84	        0x4183c101	                              add r9d, 1	      1090	libbfd.c	FUNCTION_64	DO_1
0x4000b88	        0x4883c601	                              add rsi, 1	      1089	libbfd.c	FUNCTION_64	DO_1
0x4000b8c	          0x4c89c7	                             mov rdi, r8	      1091	libbfd.c	FUNCTION_64	DO_1
0x4000b8f	          0x83e77f	                           and edi, 0x7f	      1091	libbfd.c	FUNCTION_64	DO_1
0x4000b92	          0x48d3e7	                             shl rdi, cl	      1091	libbfd.c	FUNCTION_64	DO_1
0x4000b95	          0x83c107	                              add ecx, 7	      1092	libbfd.c	FUNCTION_64	DO_1
0x4000b98	          0x4809f8	                             or rax, rdi	      1091	libbfd.c	FUNCTION_64	DO_1
0x4000b9b	          0x4584c0	                           test r8b, r8b	      1094	libbfd.c	FUNCTION_64
0x4000b9e	            0x78e0	                            js 0x4000b80	      1094	libbfd.c	FUNCTION_64
0x4000ba0	          0x44890a	                    mov dword [rdx], r9d	      1095	libbfd.c	FUNCTION_64
0x4000ba3	              0xc3	                                     ret	      1097	libbfd.c	FUNCTION_64
bfd_putl32	WHILE,0:IF,0:SWITCH,0:FOR,0:DO,0:functions,0:ELSE,0:CALL,0	10
0x4000720	          0x4889f8	                            mov rax, rdi	       797	libbfd.c	FUNCTION_53
0x4000723	          0x40883e	                     mov byte [rsi], dil	       796	libbfd.c	FUNCTION_53
0x4000726	        0x48c1e808	                              shr rax, 8	       797	libbfd.c	FUNCTION_53
0x400072a	          0x884601	                  mov byte [rsi + 1], al	       797	libbfd.c	FUNCTION_53
0x400072d	          0x4889f8	                            mov rax, rdi	       798	libbfd.c	FUNCTION_53
0x4000730	        0x48c1ef18	                           shr rdi, 0x18	       799	libbfd.c	FUNCTION_53
0x4000734	        0x48c1e810	                           shr rax, 0x10	       798	libbfd.c	FUNCTION_53
0x4000738	        0x40887e03	                 mov byte [rsi + 3], dil	       799	libbfd.c	FUNCTION_53
0x400073c	          0x884602	                  mov byte [rsi + 2], al	       798	libbfd.c	FUNCTION_53
0x400073f	              0xc3	                                     ret	       799	libbfd.c	FUNCTION_53
