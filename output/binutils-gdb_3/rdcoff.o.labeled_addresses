parse_coff	CALL,43:functions,0:DO,0:ELSE,5:FOR,1:WHILE,2:SWITCH,1:IF,28	380
0x4000bd0	            0x4157	                                push r15	       660	rdcoff.c	FUNCTION_8
0x4000bd2	            0x4156	                                push r14	       660	rdcoff.c	FUNCTION_8
0x4000bd4	            0x4155	                                push r13	       660	rdcoff.c	FUNCTION_8
0x4000bd6	            0x4154	                                push r12	       660	rdcoff.c	FUNCTION_8
0x4000bd8	          0x4989f5	                            mov r13, rsi	       660	rdcoff.c	FUNCTION_8
0x4000bdb	              0x55	                                push rbp	       660	rdcoff.c	FUNCTION_8
0x4000bdc	              0x53	                                push rbx	       660	rdcoff.c	FUNCTION_8
0x4000bdd	          0x4889fb	                            mov rbx, rdi	       660	rdcoff.c	FUNCTION_8
0x4000be0	          0x4889cd	                            mov rbp, rcx	       660	rdcoff.c	FUNCTION_8
0x4000be3	    0x4881ec680100	                          sub rsp, 0x168	       660	rdcoff.c	FUNCTION_8
0x4000bea	      0x4889542408	                mov qword [rsp + 8], rdx	       660	rdcoff.c	FUNCTION_8
0x4000bef	      0x4889542448	             mov qword [rsp + 0x48], rdx	       674	rdcoff.c	FUNCTION_8
0x4000bf4	    0x488d8424c800	                   lea rax, [rsp + 0xc8]	       674	rdcoff.c	FUNCTION_8
0x4000bfc	    0x64488b3c2528	                mov rdi, qword fs:[0x28]	       660	rdcoff.c	FUNCTION_8
0x4000c05	    0x4889bc245801	            mov qword [rsp + 0x158], rdi	       660	rdcoff.c	FUNCTION_8
0x4000c0d	            0x31ff	                            xor edi, edi	       660	rdcoff.c	FUNCTION_8
0x4000c0f	    0x488d94245001	                  lea rdx, [rsp + 0x150]	       660	rdcoff.c	FUNCTION_8
0x4000c17	      0x4889742440	             mov qword [rsp + 0x40], rsi	       673	rdcoff.c	FUNCTION_8
0x4000c1c	    0x48c744245000	               mov qword [rsp + 0x50], 0	       675	rdcoff.c	FUNCTION_8
0x4000c25	    0x48c744245800	               mov qword [rsp + 0x58], 0	       676	rdcoff.c	FUNCTION_8
0x4000c2e	    0x48c78424c000	               mov qword [rsp + 0xc0], 0	       678	rdcoff.c	FUNCTION_8
0x4000c3a	    0x660f1f440000	                    nop word [rax + rax]	       678	rdcoff.c	FUNCTION_8
0x4000c40	    0x48c700000000	                      mov qword [rax], 0	       680	rdcoff.c	FUNCTION_8	FOR_1
0x4000c47	        0x4883c008	                              add rax, 8	       680	rdcoff.c	FUNCTION_8	FOR_1
0x4000c4b	          0x4839c2	                            cmp rdx, rax	       679	rdcoff.c	FUNCTION_8	FOR_1
0x4000c4e	            0x75f0	                           jne 0x4000c40	       679	rdcoff.c	FUNCTION_8	FOR_1
0x4000c50	    0x48837c240800	                  cmp qword [rsp + 8], 0	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4000c56	     0xf8e14020000	                           jle 0x4000e70	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4000c5c	            0x31c0	                            xor eax, eax	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4000c5e	    0xc74424140000	               mov dword [rsp + 0x14], 0	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4000c66	    0x48c744242800	               mov qword [rsp + 0x28], 0	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4000c6f	    0x48c744243000	               mov qword [rsp + 0x30], 0	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4000c78	    0xc744243c0000	               mov dword [rsp + 0x3c], 0	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4000c80	    0xc74424380000	               mov dword [rsp + 0x38], 0	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4000c88	    0x48c744242000	               mov qword [rsp + 0x20], 0	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4000c91	    0x48c70424ffff	     mov qword [rsp], 0xffffffffffffffff	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4000c99	      0xe9ba000000	                           jmp 0x4000d58	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4000c9e	            0x6690	                                     nop	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4000ca0	            0x3c05	                               cmp al, 5	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000ca2	     0xf84a0000000	                            je 0x4000d48	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000ca8	     0xf8782030000	                            ja 0x4001030	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000cae	            0x3c02	                               cmp al, 2	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000cb0	     0xf8462030000	                            je 0x4001018	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000cb6	            0x3c03	                               cmp al, 3	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000cb8	     0xf85ee020000	                           jne 0x4000fac	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000cbe	    0x440fb744247e	           movzx r8d, word [rsp + 0x7e] 	       759	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_7
0x4000cc4	        0x664585c0	                           test r8w, r8w	       759	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_7
0x4000cc8	            0x747e	                            je 0x4000d48	       759	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_7
0x4000cca	    0x488b8bf80000	            mov rcx, qword [rbx + 0xf8] 	       764	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_14
0x4000cd1	          0x4489c6	                            mov esi, r8d	       764	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_14
0x4000cd4	      0xbf02000000	                              mov edi, 2	       764	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_14
0x4000cd9	        0x66237140	               and si, word [rcx + 0x40]	       764	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_14
0x4000cdd	          0x8b493c	            mov ecx, dword [rcx + 0x3c] 	       764	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_14
0x4000ce0	          0x48d3e7	                             shl rdi, cl	       764	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_14
0x4000ce3	           0xfb7f6	                           movzx esi, si	       764	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_14
0x4000ce6	          0x4839fe	                            cmp rsi, rdi	       764	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_14
0x4000ce9	     0xf8539030000	                           jne 0x4001028	       764	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_14
0x4000cef	    0x80bc24810000	                cmp byte [rsp + 0x81], 0	       769	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	IF_9
0x4000cf7	        0x89442438	             mov dword [rsp + 0x38], eax	       767	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8
0x4000cfb	        0x410fb7c0	                          movzx eax, r8w	       768	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8
0x4000cff	        0x8944243c	             mov dword [rsp + 0x3c], eax	       768	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8
0x4000d03	    0x48c744243000	               mov qword [rsp + 0x30], 0	       772	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	ELSE_2
0x4000d0c	            0x741b	                            je 0x4000d29	       769	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	IF_9
0x4000d0e	      0x498b442420	            mov rax, qword [r12 + 0x20] 	       770	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_15
0x4000d13	      0x498b742410	            mov rsi, qword [r12 + 0x10] 	       770	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_15
0x4000d18	        0x48037028	             add rsi, qword [rax + 0x28]	       770	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_15
0x4000d1c	    0x4803b4249800	             add rsi, qword [rsp + 0x98]	       770	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_15
0x4000d24	      0x4889742430	             mov qword [rsp + 0x30], rsi	       770	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_15
0x4000d29	        0x488b4308	                mov rax, qword [rbx + 8]	       773	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_16
0x4000d2d	          0x4c89e6	                            mov rsi, r12	       773	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_16
0x4000d30	          0x4889df	                            mov rdi, rbx	       773	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_16
0x4000d33	    0xff9030020000	                call qword [rax + 0x230]	       773	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_16
0x4000d39	      0x4c89742420	             mov qword [rsp + 0x20], r14	       708	rdcoff.c	FUNCTION_8	WHILE_1	CALL_6
0x4000d3e	      0x4889442428	             mov qword [rsp + 0x28], rax	       773	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_16
0x4000d43	       0xf1f440000	                   nop dword [rax + rax]	       773	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_16
0x4000d48	      0x488b442450	            mov rax, qword [rsp + 0x50] 	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4000d4d	      0x4839442408	                cmp qword [rsp + 8], rax	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4000d52	     0xf8e18010000	                           jle 0x4000e70	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4000d58	      0x4d8b64c500	            mov r12, qword [r13 + rax*8]	       699	rdcoff.c	FUNCTION_8	WHILE_1
0x4000d5d	      0x488d542460	                   lea rdx, [rsp + 0x60]	       701	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_1
0x4000d62	          0x4889df	                            mov rdi, rbx	       701	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_1
0x4000d65	          0x4c89e6	                            mov rsi, r12	       701	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_1
0x4000d68	      0xe800000000	                          call 0x4000d6d	       701	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_1
0x4000d6d	            0x85c0	                           test eax, eax	       701	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_1
0x4000d6f	     0xf842b040000	                            je 0x40011a0	       701	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_1
0x4000d75	     0xfb694248100	           movzx edx, byte [rsp + 0x81] 	       713	rdcoff.c	FUNCTION_8	WHILE_1
0x4000d7d	      0x4c8b7c2458	            mov r15, qword [rsp + 0x58] 	       710	rdcoff.c	FUNCTION_8	WHILE_1
0x4000d82	          0x4531c9	                            xor r9d, r9d	       718	rdcoff.c	FUNCTION_8	WHILE_1	IF_2
0x4000d85	      0x4d8b742408	                mov r14, qword [r12 + 8]	       708	rdcoff.c	FUNCTION_8	WHILE_1	CALL_6
0x4000d8a	    0x488344245001	               add qword [rsp + 0x50], 1	       712	rdcoff.c	FUNCTION_8	WHILE_1
0x4000d90	          0x4889d0	                            mov rax, rdx	       713	rdcoff.c	FUNCTION_8	WHILE_1
0x4000d93	      0x498d541701	                lea rdx, [r15 + rdx + 1]	       713	rdcoff.c	FUNCTION_8	WHILE_1
0x4000d98	            0x84c0	                             test al, al	       717	rdcoff.c	FUNCTION_8	WHILE_1	IF_2
0x4000d9a	      0x4889542458	             mov qword [rsp + 0x58], rdx	       713	rdcoff.c	FUNCTION_8	WHILE_1
0x4000d9f	     0xf85db000000	                           jne 0x4000e80	       717	rdcoff.c	FUNCTION_8	WHILE_1	IF_2
0x4000da5	        0x4c393c24	                    cmp qword [rsp], r15	       730	rdcoff.c	FUNCTION_8	WHILE_1	IF_4
0x4000da9	     0xf8400010000	                            je 0x4000eaf	       730	rdcoff.c	FUNCTION_8	WHILE_1	IF_4
0x4000daf	     0xfb684248000	           movzx eax, byte [rsp + 0x80] 	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000db7	            0x3c64	                            cmp al, 0x64	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000db9	     0xf8481010000	                            je 0x4000f40	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000dbf	     0xf86dbfeffff	                           jbe 0x4000ca0	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000dc5	            0x3c6a	                            cmp al, 0x6a	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000dc7	     0xf87d3010000	                            ja 0x4000fa0	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000dcd	            0x3c68	                            cmp al, 0x68	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000dcf	     0xf8373ffffff	                           jae 0x4000d48	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000dd5	            0x3c65	                            cmp al, 0x65	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000dd7	     0xf8533010000	                           jne 0x4000f10	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000ddd	        0x41803e2e	                    cmp byte [r14], 0x2e	       786	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_19
0x4000de1	     0xf8561ffffff	                           jne 0x4000d48	       786	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_19
0x4000de7	      0x410fb64601	               movzx eax, byte [r14 + 1]	       786	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_19
0x4000dec	            0x3c62	                            cmp al, 0x62	       786	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_19
0x4000dee	     0xf8494020000	                            je 0x4001088	       786	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_19
0x4000df4	            0x3c65	                            cmp al, 0x65	       836	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	CALL_30
0x4000df6	     0xf854cffffff	                           jne 0x4000d48	       836	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	CALL_30
0x4000dfc	      0x41807e0266	                cmp byte [r14 + 2], 0x66	       836	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	CALL_30
0x4000e01	     0xf8541ffffff	                           jne 0x4000d48	       836	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	CALL_30
0x4000e07	      0x41807e0300	                   cmp byte [r14 + 3], 0	       836	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	CALL_30
0x4000e0c	     0xf8536ffffff	                           jne 0x4000d48	       836	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	CALL_30
0x4000e12	      0x448b442414	            mov r8d, dword [rsp + 0x14] 	       838	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20
0x4000e17	          0x4585c0	                           test r8d, r8d	       838	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20
0x4000e1a	     0xf845e040000	                            je 0x400127e	       838	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20
0x4000e20	      0x498b442420	            mov rax, qword [r12 + 0x20] 	       844	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_21	CALL_33
0x4000e25	      0x498b742410	            mov rsi, qword [r12 + 0x10] 	       844	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_21	CALL_33
0x4000e2a	          0x4889ef	                            mov rdi, rbp	       846	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_22	CALL_35
0x4000e2d	        0x48037028	             add rsi, qword [rax + 0x28]	       844	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_21	CALL_33
0x4000e31	      0x488b442430	            mov rax, qword [rsp + 0x30] 	       846	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_22	CALL_35
0x4000e36	          0x4839c6	                            cmp rsi, rax	       846	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_22	CALL_35
0x4000e39	        0x480f42f0	                          cmovb rsi, rax	       846	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_22	CALL_35
0x4000e3d	      0xe800000000	                          call 0x4000e42	       846	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_22	CALL_35
0x4000e42	            0x85c0	                           test eax, eax	       846	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_22	CALL_35
0x4000e44	     0xf8496000000	                            je 0x4000ee0	       846	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_22	CALL_35
0x4000e4a	      0x488b442450	            mov rax, qword [rsp + 0x50] 	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4000e4f	      0x4839442408	                cmp qword [rsp + 8], rax	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4000e54	    0xc74424140000	               mov dword [rsp + 0x14], 0	       850	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19
0x4000e5c	    0x48c744243000	               mov qword [rsp + 0x30], 0	       849	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19
0x4000e65	     0xf8fedfeffff	                            jg 0x4000d58	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4000e6b	       0xf1f440000	                   nop dword [rax + rax]	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4000e70	      0xb801000000	                              mov eax, 1	       879	rdcoff.c	FUNCTION_8
0x4000e75	            0xeb6b	                           jmp 0x4000ee2	       879	rdcoff.c	FUNCTION_8
0x4000e77	    0x660f1f840000	                    nop word [rax + rax]	       879	rdcoff.c	FUNCTION_8
0x4000e80	    0x488d8c249000	                   lea rcx, [rsp + 0x90]	       721	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_7
0x4000e88	            0x31d2	                            xor edx, edx	       721	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_7
0x4000e8a	          0x4c89e6	                            mov rsi, r12	       721	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_7
0x4000e8d	          0x4889df	                            mov rdi, rbx	       721	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_7
0x4000e90	      0xe800000000	                          call 0x4000e95	       721	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_7
0x4000e95	            0x85c0	                           test eax, eax	       721	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_7
0x4000e97	     0xf84a0030000	                            je 0x400123d	       721	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_7
0x4000e9d	        0x4c393c24	                    cmp qword [rsp], r15	       730	rdcoff.c	FUNCTION_8	WHILE_1	IF_4
0x4000ea1	    0x4c8d8c249000	                    lea r9, [rsp + 0x90]	       727	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1
0x4000ea9	     0xf8500ffffff	                           jne 0x4000daf	       730	rdcoff.c	FUNCTION_8	WHILE_1	IF_4
0x4000eaf	    0x80bc24800000	            cmp byte [rsp + 0x80], 0x67 	       730	rdcoff.c	FUNCTION_8	WHILE_1	IF_4
0x4000eb7	      0x4c894c2418	              mov qword [rsp + 0x18], r9	       730	rdcoff.c	FUNCTION_8	WHILE_1	IF_4
0x4000ebc	            0x7462	                            je 0x4000f20	       730	rdcoff.c	FUNCTION_8	WHILE_1	IF_4
0x4000ebe	      0xbe00000000	                              mov esi, 0	       734	rdcoff.c	FUNCTION_8	WHILE_1	IF_4	IF_5	CALL_12
0x4000ec3	          0x4889ef	                            mov rdi, rbp	       734	rdcoff.c	FUNCTION_8	WHILE_1	IF_4	IF_5	CALL_12
0x4000ec6	      0xe800000000	                          call 0x4000ecb	       734	rdcoff.c	FUNCTION_8	WHILE_1	IF_4	IF_5	CALL_12
0x4000ecb	            0x85c0	                           test eax, eax	       734	rdcoff.c	FUNCTION_8	WHILE_1	IF_4	IF_5	CALL_12
0x4000ecd	      0x4c8b4c2418	              mov r9, qword [rsp + 0x18]	       734	rdcoff.c	FUNCTION_8	WHILE_1	IF_4	IF_5	CALL_12
0x4000ed2	     0xf85d7feffff	                           jne 0x4000daf	       734	rdcoff.c	FUNCTION_8	WHILE_1	IF_4	IF_5	CALL_12
0x4000ed8	     0xf1f84000000	                   nop dword [rax + rax]	       734	rdcoff.c	FUNCTION_8	WHILE_1	IF_4	IF_5	CALL_12
0x4000ee0	            0x31c0	                            xor eax, eax	       705	rdcoff.c	FUNCTION_8	WHILE_1	IF_1
0x4000ee2	    0x488b9c245801	           mov rbx, qword [rsp + 0x158] 	       880	rdcoff.c	FUNCTION_8
0x4000eea	    0x6448331c2528	                xor rbx, qword fs:[0x28]	       880	rdcoff.c	FUNCTION_8
0x4000ef3	     0xf8591030000	                           jne 0x400128a	       880	rdcoff.c	FUNCTION_8
0x4000ef9	    0x4881c4680100	                          add rsp, 0x168	       880	rdcoff.c	FUNCTION_8
0x4000f00	              0x5b	                                 pop rbx	       880	rdcoff.c	FUNCTION_8
0x4000f01	              0x5d	                                 pop rbp	       880	rdcoff.c	FUNCTION_8
0x4000f02	            0x415c	                                 pop r12	       880	rdcoff.c	FUNCTION_8
0x4000f04	            0x415d	                                 pop r13	       880	rdcoff.c	FUNCTION_8
0x4000f06	            0x415e	                                 pop r14	       880	rdcoff.c	FUNCTION_8
0x4000f08	            0x415f	                                 pop r15	       880	rdcoff.c	FUNCTION_8
0x4000f0a	              0xc3	                                     ret	       880	rdcoff.c	FUNCTION_8
0x4000f0b	       0xf1f440000	                   nop dword [rax + rax]	       880	rdcoff.c	FUNCTION_8
0x4000f10	            0x3c67	                            cmp al, 0x67	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000f12	     0xf8594000000	                           jne 0x4000fac	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000f18	     0xf1f84000000	                   nop dword [rax + rax]	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000f20	      0x488b442470	            mov rax, qword [rsp + 0x70] 	       751	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000f25	          0x4c89f6	                            mov rsi, r14	       752	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_6	CALL_13
0x4000f28	          0x4889ef	                            mov rdi, rbp	       752	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_6	CALL_13
0x4000f2b	        0x48890424	                    mov qword [rsp], rax	       751	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000f2f	      0xe800000000	                          call 0x4000f34	       752	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_6	CALL_13
0x4000f34	            0x85c0	                           test eax, eax	       752	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_6	CALL_13
0x4000f36	     0xf850cfeffff	                           jne 0x4000d48	       752	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_6	CALL_13
0x4000f3c	            0xeba2	                           jmp 0x4000ee0	       752	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_6	CALL_13
0x4000f3e	            0x6690	                                     nop	       752	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_6	CALL_13
0x4000f40	        0x41803e2e	                    cmp byte [r14], 0x2e	       855	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	CALL_36
0x4000f44	     0xf85fefdffff	                           jne 0x4000d48	       855	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	CALL_36
0x4000f4a	      0x410fb64601	               movzx eax, byte [r14 + 1]	       855	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	CALL_36
0x4000f4f	            0x3c62	                            cmp al, 0x62	       855	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	CALL_36
0x4000f51	     0xf84f1000000	                            je 0x4001048	       855	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	CALL_36
0x4000f57	            0x3c65	                            cmp al, 0x65	       860	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	CALL_39
0x4000f59	     0xf85e9fdffff	                           jne 0x4000d48	       860	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	CALL_39
0x4000f5f	      0x41807e0262	                cmp byte [r14 + 2], 0x62	       860	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	CALL_39
0x4000f64	     0xf85defdffff	                           jne 0x4000d48	       860	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	CALL_39
0x4000f6a	      0x41807e0300	                   cmp byte [r14 + 3], 0	       860	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	CALL_39
0x4000f6f	     0xf85d3fdffff	                           jne 0x4000d48	       860	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	CALL_39
0x4000f75	      0x498b442420	            mov rax, qword [r12 + 0x20] 	       862	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	IF_26	CALL_41
0x4000f7a	      0x498b742410	            mov rsi, qword [r12 + 0x10] 	       862	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	IF_26	CALL_41
0x4000f7f	          0x4889ef	                            mov rdi, rbp	       862	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	IF_26	CALL_41
0x4000f82	        0x48037028	             add rsi, qword [rax + 0x28]	       862	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	IF_26	CALL_41
0x4000f86	      0xe800000000	                          call 0x4000f8b	       862	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	IF_26	CALL_41
0x4000f8b	            0x85c0	                           test eax, eax	       862	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	IF_26	CALL_41
0x4000f8d	     0xf85b5fdffff	                           jne 0x4000d48	       862	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	IF_26	CALL_41
0x4000f93	      0xe948ffffff	                           jmp 0x4000ee0	       862	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	IF_26	CALL_41
0x4000f98	     0xf1f84000000	                   nop dword [rax + rax]	       862	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	IF_26	CALL_41
0x4000fa0	            0x3c7f	                            cmp al, 0x7f	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000fa2	            0x7474	                            je 0x4001018	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000fa4	            0x3cff	                            cmp al, 0xff	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000fa6	     0xf849cfdffff	                            je 0x4000d48	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000fac	              0x55	                                push rbp	       868	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_42
0x4000fad	            0x6a01	                                  push 1	       868	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_42
0x4000faf	    0x440fb784248e	           movzx r8d, word [rsp + 0x8e] 	       868	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_42
0x4000fb8	    0x488d9424d000	                   lea rdx, [rsp + 0xd0]	       868	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_42
0x4000fc0	      0x488d742450	                   lea rsi, [rsp + 0x50]	       868	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_42
0x4000fc5	          0x4889df	                            mov rdi, rbx	       868	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_42
0x4000fc8	          0x4c89f9	                            mov rcx, r15	       868	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_42
0x4000fcb	      0xe830f3ffff	                call sym.parse_coff_type	       868	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_42
0x4000fd0	          0x4885c0	                           test rax, rax	       870	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_27
0x4000fd3	          0x4989c1	                             mov r9, rax	       868	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_42
0x4000fd6	              0x5e	                                 pop rsi	       870	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_27
0x4000fd7	              0x5f	                                 pop rdi	       870	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_27
0x4000fd8	     0xf8402ffffff	                            je 0x4000ee0	       870	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_27
0x4000fde	        0x4883ec08	                              sub rsp, 8	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4000fe2	          0x4c89fa	                            mov rdx, r15	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4000fe5	          0x4989e8	                             mov r8, rbp	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4000fe8	        0x8b44241c	            mov eax, dword [rsp + 0x1c] 	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4000fec	          0x4c89e6	                            mov rsi, r12	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4000fef	              0x50	                                push rax	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4000ff0	     0xfb68c249000	           movzx ecx, byte [rsp + 0x90] 	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4000ff8	    0x488dbc24d000	                   lea rdi, [rsp + 0xd0]	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4001000	      0xe85bf1ffff	       call sym.parse_coff_symbol.isra.4	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4001005	            0x85c0	                           test eax, eax	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4001007	              0x5a	                                 pop rdx	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4001008	              0x59	                                 pop rcx	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4001009	     0xf8539fdffff	                           jne 0x4000d48	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x400100f	      0xe9ccfeffff	                           jmp 0x4000ee0	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4001014	         0xf1f4000	                         nop dword [rax]	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4001018	    0x440fb744247e	           movzx r8d, word [rsp + 0x7e] 	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x400101e	      0xe9a7fcffff	                           jmp 0x4000cca	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4001023	       0xf1f440000	                   nop dword [rax + rax]	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4001028	              0x55	                                push rbp	       776	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_17
0x4001029	            0x6a01	                                  push 1	       776	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_17
0x400102b	            0xeb8b	                           jmp 0x4000fb8	       776	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_17
0x400102d	           0xf1f00	                         nop dword [rax]	       776	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_17
0x4001030	            0x3c07	                               cmp al, 7	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4001032	     0xf8410fdffff	                            je 0x4000d48	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4001038	            0x3c0e	                             cmp al, 0xe	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x400103a	     0xf856cffffff	                           jne 0x4000fac	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4001040	      0xe903fdffff	                           jmp 0x4000d48	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4001045	           0xf1f00	                         nop dword [rax]	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4001048	      0x41807e0262	                cmp byte [r14 + 2], 0x62	       855	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	CALL_36
0x400104d	     0xf85f5fcffff	                           jne 0x4000d48	       855	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	CALL_36
0x4001053	      0x41807e0300	                   cmp byte [r14 + 3], 0	       855	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	CALL_36
0x4001058	     0xf85eafcffff	                           jne 0x4000d48	       855	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	CALL_36
0x400105e	      0x498b442420	            mov rax, qword [r12 + 0x20] 	       857	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	IF_24	CALL_38
0x4001063	      0x498b742410	            mov rsi, qword [r12 + 0x10] 	       857	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	IF_24	CALL_38
0x4001068	          0x4889ef	                            mov rdi, rbp	       857	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	IF_24	CALL_38
0x400106b	        0x48037028	             add rsi, qword [rax + 0x28]	       857	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	IF_24	CALL_38
0x400106f	      0xe800000000	                          call 0x4001074	       857	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	IF_24	CALL_38
0x4001074	            0x85c0	                           test eax, eax	       857	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	IF_24	CALL_38
0x4001076	     0xf85ccfcffff	                           jne 0x4000d48	       857	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	IF_24	CALL_38
0x400107c	      0xe95ffeffff	                           jmp 0x4000ee0	       857	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	IF_24	CALL_38
0x4001081	     0xf1f80000000	                         nop dword [rax]	       857	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	IF_24	CALL_38
0x4001088	      0x41807e0266	                cmp byte [r14 + 2], 0x66	       786	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_19
0x400108d	     0xf85b5fcffff	                           jne 0x4000d48	       786	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_19
0x4001093	      0x41807e0300	                   cmp byte [r14 + 3], 0	       786	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_19
0x4001098	     0xf85aafcffff	                           jne 0x4000d48	       786	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_19
0x400109e	    0x48837c242000	               cmp qword [rsp + 0x20], 0	       788	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_13
0x40010a4	     0xf84b1010000	                            je 0x400125b	       788	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_13
0x40010aa	    0x488b93f80000	            mov rdx, qword [rbx + 0xf8] 	       796	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_23
0x40010b1	      0x448b44243c	            mov r8d, dword [rsp + 0x3c] 	       796	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_23
0x40010b6	          0x4889df	                            mov rdi, rbx	       795	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_22
0x40010b9	          0x8b4a44	            mov ecx, dword [rdx + 0x44] 	       796	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_23
0x40010bc	          0x4489c0	                            mov eax, r8d	       796	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_23
0x40010bf	            0xd3f8	                             sar eax, cl	       796	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_23
0x40010c1	          0x4c89f9	                            mov rcx, r15	       795	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_22
0x40010c4	          0x4131c0	                            xor r8d, eax	       795	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_22
0x40010c7	        0x44234238	             and r8d, dword [rdx + 0x38]	       795	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_22
0x40010cb	              0x55	                                push rbp	       795	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_22
0x40010cc	            0x6a00	                                  push 0	       795	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_22
0x40010ce	    0x488d9424d000	                   lea rdx, [rsp + 0xd0]	       795	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_22
0x40010d6	      0x488d742450	                   lea rsi, [rsp + 0x50]	       795	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_22
0x40010db	          0x4131c0	                            xor r8d, eax	       795	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_22
0x40010de	      0xe81df2ffff	                call sym.parse_coff_type	       795	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_22
0x40010e3	          0x4885c0	                           test rax, rax	       797	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_14
0x40010e6	            0x4159	                                  pop r9	       797	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_14
0x40010e8	            0x415a	                                 pop r10	       797	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_14
0x40010ea	     0xf84f0fdffff	                            je 0x4000ee0	       797	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_14
0x40010f0	      0x498b542420	            mov rdx, qword [r12 + 0x20] 	       802	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15	CALL_26
0x40010f5	        0x8b7c2438	            mov edi, dword [rsp + 0x38] 	       644	rdcoff.c	FUNCTION_7	SWITCH_1
0x40010f9	      0x4d8b442410	              mov r8, qword [r12 + 0x10]	       800	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15	CALL_24
0x40010fe	        0x4c034228	              add r8, qword [rdx + 0x28]	       800	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15	CALL_24
0x4001102	          0x83ff02	                              cmp edi, 2	       644	rdcoff.c	FUNCTION_7	SWITCH_1
0x4001105	     0xf84cd000000	                            je 0x40011d8	       644	rdcoff.c	FUNCTION_7	SWITCH_1
0x400110b	            0x31c9	                            xor ecx, ecx	       652	rdcoff.c	FUNCTION_7
0x400110d	          0x83ff7f	                           cmp edi, 0x7f	       644	rdcoff.c	FUNCTION_7	SWITCH_1
0x4001110	     0xf84c2000000	                            je 0x40011d8	       644	rdcoff.c	FUNCTION_7	SWITCH_1
0x4001116	      0x488b742420	            mov rsi, qword [rsp + 0x20] 	       800	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15	CALL_24
0x400111b	          0x4889c2	                            mov rdx, rax	       800	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15	CALL_24
0x400111e	          0x4889ef	                            mov rdi, rbp	       800	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15	CALL_24
0x4001121	      0xe800000000	                          call 0x4001126	       800	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15	CALL_24
0x4001126	            0x85c0	                           test eax, eax	       800	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15	CALL_24
0x4001128	     0xf84b2fdffff	                            je 0x4000ee0	       800	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15	CALL_24
0x400112e	    0x48837c242800	               cmp qword [rsp + 0x28], 0	       805	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16
0x4001134	     0xf84dd000000	                            je 0x4001217	       805	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16
0x400113a	          0x4531f6	                          xor r14d, r14d	       811	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	IF_17
0x400113d	    0x80bc24810000	                cmp byte [rsp + 0x81], 0	       810	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	IF_17
0x4001145	            0x740d	                            je 0x4001154	       810	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	IF_17
0x4001147	    0x440fb7b42498	          movzx r14d, word [rsp + 0x98] 	       813	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	ELSE_3
0x4001150	        0x4183ee01	                             sub r14d, 1	       813	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	ELSE_3
0x4001154	      0x498b442420	            mov rax, qword [r12 + 0x20] 	       815	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	CALL_28
0x4001159	        0x4c8b7828	            mov r15, qword [rax + 0x28] 	       815	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	CALL_28
0x400115d	      0x488b442428	            mov rax, qword [rsp + 0x28] 	       817	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16
0x4001162	        0x4c8d6010	                   lea r12, [rax + 0x10]	       817	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16
0x4001166	          0x8b4010	            mov eax, dword [rax + 0x10] 	       819	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2
0x4001169	            0x85c0	                           test eax, eax	       819	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2
0x400116b	            0x750f	                           jne 0x400117c	       819	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2
0x400116d	            0xeb79	                           jmp 0x40011e8	       819	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2
0x400116f	              0x90	                                     nop	       819	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2
0x4001170	        0x4983c410	                           add r12, 0x10	       825	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2
0x4001174	        0x418b0424	                    mov eax, dword [r12]	       819	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2
0x4001178	            0x85c0	                           test eax, eax	       819	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2
0x400117a	            0x746c	                            je 0x40011e8	       819	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2
0x400117c	          0x4c89fa	                            mov rdx, r15	       821	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2	IF_18	CALL_29
0x400117f	      0x4903542408	                add rdx, qword [r12 + 8]	       821	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2	IF_18	CALL_29
0x4001184	        0x418d3406	                    lea esi, [r14 + rax]	       821	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2	IF_18	CALL_29
0x4001188	          0x4889ef	                            mov rdi, rbp	       821	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2	IF_18	CALL_29
0x400118b	      0xe800000000	                          call 0x4001190	       821	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2	IF_18	CALL_29
0x4001190	            0x85c0	                           test eax, eax	       821	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2	IF_18	CALL_29
0x4001192	            0x75dc	                           jne 0x4001170	       821	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2	IF_18	CALL_29
0x4001194	      0xe947fdffff	                           jmp 0x4000ee0	       821	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2	IF_18	CALL_29
0x4001199	     0xf1f80000000	                         nop dword [rax]	       821	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2	IF_18	CALL_29
0x40011a0	      0xe800000000	                          call 0x40011a5	       703	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_3
0x40011a5	            0x89c7	                            mov edi, eax	       703	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_3
0x40011a7	      0xe800000000	                          call 0x40011ac	       703	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_3
0x40011ac	      0xba05000000	                              mov edx, 5	       703	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_3
0x40011b1	          0x4889c3	                            mov rbx, rax	       703	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_3
0x40011b4	      0xbe00000000	                              mov esi, 0	       703	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_3
0x40011b9	            0x31ff	                            xor edi, edi	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x40011bb	      0xe800000000	                          call 0x40011c0	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x40011c0	          0x4889de	                            mov rsi, rbx	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x40011c3	          0x4889c7	                            mov rdi, rax	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x40011c6	            0x31c0	                            xor eax, eax	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x40011c8	      0xe800000000	                          call 0x40011cd	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x40011cd	      0xe90efdffff	                           jmp 0x4000ee0	       725	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3
0x40011d2	    0x660f1f440000	                    nop word [rax + rax]	       725	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3
0x40011d8	      0xb901000000	                              mov ecx, 1	       648	rdcoff.c	FUNCTION_7	SWITCH_1
0x40011dd	      0xe934ffffff	                           jmp 0x4001116	       648	rdcoff.c	FUNCTION_7	SWITCH_1
0x40011e2	    0x660f1f440000	                    nop word [rax + rax]	       648	rdcoff.c	FUNCTION_7	SWITCH_1
0x40011e8	    0xc74424140100	               mov dword [rsp + 0x14], 1	       834	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12
0x40011f0	    0x48c744242800	               mov qword [rsp + 0x28], 0	       830	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12
0x40011f9	    0xc744243c0000	               mov dword [rsp + 0x3c], 0	       832	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12
0x4001201	    0xc74424380000	               mov dword [rsp + 0x38], 0	       831	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12
0x4001209	    0x48c744242000	               mov qword [rsp + 0x20], 0	       829	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12
0x4001212	      0xe931fbffff	                           jmp 0x4000d48	       829	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12
0x4001217	    0xc74424140100	               mov dword [rsp + 0x14], 1	       834	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12
0x400121f	    0xc744243c0000	               mov dword [rsp + 0x3c], 0	       832	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12
0x4001227	    0xc74424380000	               mov dword [rsp + 0x38], 0	       831	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12
0x400122f	    0x48c744242000	               mov qword [rsp + 0x20], 0	       829	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12
0x4001238	      0xe90bfbffff	                           jmp 0x4000d48	       829	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12
0x400123d	      0xe800000000	                          call 0x4001242	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x4001242	            0x89c7	                            mov edi, eax	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x4001244	      0xe800000000	                          call 0x4001249	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x4001249	      0xba05000000	                              mov edx, 5	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x400124e	          0x4889c3	                            mov rbx, rax	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x4001251	      0xbe00000000	                              mov esi, 0	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x4001256	      0xe95effffff	                           jmp 0x40011b9	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x400125b	      0xba05000000	                              mov edx, 5	       790	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_13	CALL_21
0x4001260	      0xbe00000000	                              mov esi, 0	       790	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_13	CALL_21
0x4001265	            0x31ff	                            xor edi, edi	       840	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20	CALL_32
0x4001267	      0xe800000000	                          call 0x400126c	       840	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20	CALL_32
0x400126c	          0x4c89fe	                            mov rsi, r15	       840	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20	CALL_32
0x400126f	          0x4889c7	                            mov rdi, rax	       840	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20	CALL_32
0x4001272	            0x31c0	                            xor eax, eax	       840	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20	CALL_32
0x4001274	      0xe800000000	                          call 0x4001279	       840	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20	CALL_32
0x4001279	      0xe962fcffff	                           jmp 0x4000ee0	       841	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20
0x400127e	      0xba05000000	                              mov edx, 5	       840	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20	CALL_32
0x4001283	      0xbe00000000	                              mov esi, 0	       840	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20	CALL_32
0x4001288	            0xebdb	                           jmp 0x4001265	       840	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20	CALL_32
0x400128a	      0xe800000000	                   call section_end..bss	       880	rdcoff.c	FUNCTION_8
parse_coff_type	CALL,16:functions,0:DO,0:ELSE,5:FOR,1:WHILE,0:SWITCH,0:IF,8	411
0x4000300	            0x4157	                                push r15	       145	rdcoff.c	FUNCTION_2
0x4000302	            0x4156	                                push r14	       145	rdcoff.c	FUNCTION_2
0x4000304	          0x4989f6	                            mov r14, rsi	       145	rdcoff.c	FUNCTION_2
0x4000307	            0x4155	                                push r13	       145	rdcoff.c	FUNCTION_2
0x4000309	            0x4154	                                push r12	       145	rdcoff.c	FUNCTION_2
0x400030b	          0x4989cf	                            mov r15, rcx	       145	rdcoff.c	FUNCTION_2
0x400030e	              0x55	                                push rbp	       145	rdcoff.c	FUNCTION_2
0x400030f	              0x53	                                push rbx	       145	rdcoff.c	FUNCTION_2
0x4000310	          0x4d63e8	                         movsxd r13, r8d	       145	rdcoff.c	FUNCTION_2
0x4000313	          0x4889d5	                            mov rbp, rdx	       145	rdcoff.c	FUNCTION_2
0x4000316	          0x4889fb	                            mov rbx, rdi	       145	rdcoff.c	FUNCTION_2
0x4000319	          0x4c89ca	                             mov rdx, r9	       145	rdcoff.c	FUNCTION_2
0x400031c	        0x4883ec68	                           sub rsp, 0x68	       145	rdcoff.c	FUNCTION_2
0x4000320	    0x64488b042528	                mov rax, qword fs:[0x28]	       145	rdcoff.c	FUNCTION_2
0x4000329	      0x4889442458	             mov qword [rsp + 0x58], rax	       145	rdcoff.c	FUNCTION_2
0x400032e	            0x31c0	                            xor eax, eax	       145	rdcoff.c	FUNCTION_2
0x4000330	    0x488b87f80000	            mov rax, qword [rdi + 0xf8] 	       148	rdcoff.c	FUNCTION_2	IF_1
0x4000337	    0x4c8ba424a800	            mov r12, qword [rsp + 0xa8] 	       145	rdcoff.c	FUNCTION_2
0x400033f	          0x8b7038	            mov esi, dword [rax + 0x38] 	       148	rdcoff.c	FUNCTION_2	IF_1
0x4000342	            0x89f1	                            mov ecx, esi	       148	rdcoff.c	FUNCTION_2	IF_1
0x4000344	            0xf7d1	                                 not ecx	       148	rdcoff.c	FUNCTION_2	IF_1
0x4000346	          0x4485e9	                          test ecx, r13d	       148	rdcoff.c	FUNCTION_2	IF_1
0x4000349	     0xf84d9000000	                            je 0x4000428	       148	rdcoff.c	FUNCTION_2	IF_1
0x400034f	          0x8b4844	            mov ecx, dword [rax + 0x44] 	       152	rdcoff.c	FUNCTION_2	IF_1	CALL_1
0x4000352	          0x4489ef	                           mov edi, r13d	       152	rdcoff.c	FUNCTION_2	IF_1	CALL_1
0x4000355	          0x4589e8	                           mov r8d, r13d	       152	rdcoff.c	FUNCTION_2	IF_1	CALL_1
0x4000358	            0xd3ff	                             sar edi, cl	       152	rdcoff.c	FUNCTION_2	IF_1	CALL_1
0x400035a	          0x8b483c	            mov ecx, dword [rax + 0x3c] 	       154	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_2
0x400035d	          0x4131f8	                            xor r8d, edi	       152	rdcoff.c	FUNCTION_2	IF_1	CALL_1
0x4000360	          0x4421c6	                            and esi, r8d	       152	rdcoff.c	FUNCTION_2	IF_1	CALL_1
0x4000363	            0x31fe	                            xor esi, edi	       152	rdcoff.c	FUNCTION_2	IF_1	CALL_1
0x4000365	          0x4489ef	                           mov edi, r13d	       154	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_2
0x4000368	          0x237840	             and edi, dword [rax + 0x40]	       154	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_2
0x400036b	      0xb801000000	                              mov eax, 1	       154	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_2
0x4000370	          0x4189f0	                            mov r8d, esi	       152	rdcoff.c	FUNCTION_2	IF_1	CALL_1
0x4000373	          0x48d3e0	                             shl rax, cl	       154	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_2
0x4000376	          0x4839c7	                            cmp rdi, rax	       154	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_2
0x4000379	     0xf8431010000	                            je 0x40004b0	       154	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_2
0x400037f	      0xb802000000	                              mov eax, 2	       160	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_5
0x4000384	          0x48d3e0	                             shl rax, cl	       160	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_5
0x4000387	          0x4839c7	                            cmp rdi, rax	       160	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_5
0x400038a	     0xf8418040000	                            je 0x40007a8	       160	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_5
0x4000390	      0xb803000000	                              mov eax, 3	       167	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_8
0x4000395	          0x48d3e0	                             shl rax, cl	       167	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_8
0x4000398	          0x4839c7	                            cmp rdi, rax	       167	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_8
0x400039b	     0xf85df030000	                           jne 0x4000780	       167	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_8
0x40003a1	          0x4d85c9	                             test r9, r9	       171	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	IF_5
0x40003a4	    0x49c7c5ffffff	             mov r13, 0xffffffffffffffff	       171	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	IF_5
0x40003ab	            0x7438	                            je 0x40003e5	       171	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	IF_5
0x40003ad	      0x450fb76910	           movzx r13d, word [r9 + 0x10] 	       184	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3
0x40003b2	        0x498d4110	                    lea rax, [r9 + 0x10]	       183	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3
0x40003b6	        0x664585ed	                         test r13w, r13w	       185	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x40003ba	            0x741b	                            je 0x40003d7	       185	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x40003bc	            0x31c9	                            xor ecx, ecx	       185	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x40003be	         0xfb77802	               movzx edi, word [rax + 2]	       186	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x40003c2	          0x83c101	                              add ecx, 1	       185	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x40003c5	        0x4883c002	                              add rax, 2	       185	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x40003c9	        0x668978fe	                  mov word [rax - 2], di	       186	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x40003cd	          0x6685ff	                             test di, di	       185	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x40003d0	            0x7405	                            je 0x40003d7	       185	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x40003d2	          0x83f903	                              cmp ecx, 3	       185	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x40003d5	            0x75e7	                           jne 0x40003be	       185	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x40003d7	          0x4531c9	                            xor r9d, r9d	       187	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3
0x40003da	        0x4183ed01	                             sub r13d, 1	       187	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3
0x40003de	        0x66448908	                     mov word [rax], r9w	       187	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3
0x40003e2	          0x4d63ed	                        movsxd r13, r13d	       187	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3
0x40003e5	            0x4154	                                push r12	       190	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_9
0x40003e7	            0x6a00	                                  push 0	       190	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_9
0x40003e9	          0x4889df	                            mov rdi, rbx	       190	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_9
0x40003ec	          0x4989d1	                             mov r9, rdx	       190	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_9
0x40003ef	          0x4c89f6	                            mov rsi, r14	       190	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_9
0x40003f2	          0x4889ea	                            mov rdx, rbp	       190	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_9
0x40003f5	          0x4c89f9	                            mov rcx, r15	       190	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_9
0x40003f8	      0xe803ffffff	                call sym.parse_coff_type	       190	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_9
0x40003fd	        0x488b5528	            mov rdx, qword [rbp + 0x28] 	       249	rdcoff.c	FUNCTION_3	IF_1
0x4000401	          0x4889c3	                            mov rbx, rax	       190	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_9
0x4000404	              0x5e	                                 pop rsi	       249	rdcoff.c	FUNCTION_3	IF_1
0x4000405	              0x5f	                                 pop rdi	       249	rdcoff.c	FUNCTION_3	IF_1
0x4000406	          0x4885d2	                           test rdx, rdx	       249	rdcoff.c	FUNCTION_3	IF_1
0x4000409	     0xf84d1030000	                            je 0x40007e0	       249	rdcoff.c	FUNCTION_3	IF_1
0x400040f	          0x4531c9	                            xor r9d, r9d	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x4000412	          0x4d89e8	                             mov r8, r13	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x4000415	            0x31c9	                            xor ecx, ecx	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x4000417	          0x4889de	                            mov rsi, rbx	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x400041a	          0x4c89e7	                            mov rdi, r12	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x400041d	      0xe800000000	                          call 0x4000422	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x4000422	            0xeb28	                           jmp 0x400044c	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x4000424	         0xf1f4000	                         nop dword [rax]	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x4000428	          0x4d85c9	                             test r9, r9	       209	rdcoff.c	FUNCTION_2	IF_6
0x400042b	            0x7443	                            je 0x4000470	       209	rdcoff.c	FUNCTION_2	IF_6
0x400042d	          0x498b31	                     mov rsi, qword [r9]	       209	rdcoff.c	FUNCTION_2	IF_6
0x4000430	          0x4885f6	                           test rsi, rsi	       209	rdcoff.c	FUNCTION_2	IF_6
0x4000433	            0x7e3b	                           jle 0x4000470	       209	rdcoff.c	FUNCTION_2	IF_6
0x4000435	          0x4889ef	                            mov rdi, rbp	       215	rdcoff.c	FUNCTION_2	IF_6	CALL_14
0x4000438	      0xe803fcffff	                  call sym.coff_get_slot	       215	rdcoff.c	FUNCTION_2	IF_6	CALL_14
0x400043d	          0x4889c6	                            mov rsi, rax	       215	rdcoff.c	FUNCTION_2	IF_6	CALL_14
0x4000440	          0x488b00	                    mov rax, qword [rax]	       216	rdcoff.c	FUNCTION_2	IF_6	IF_7
0x4000443	          0x4885c0	                           test rax, rax	       216	rdcoff.c	FUNCTION_2	IF_6	IF_7
0x4000446	     0xf840c040000	                            je 0x4000858	       216	rdcoff.c	FUNCTION_2	IF_6	IF_7
0x400044c	      0x488b5c2458	            mov rbx, qword [rsp + 0x58] 	       233	rdcoff.c	FUNCTION_2
0x4000451	    0x6448331c2528	                xor rbx, qword fs:[0x28]	       233	rdcoff.c	FUNCTION_2
0x400045a	     0xf85c1040000	                           jne 0x4000921	       233	rdcoff.c	FUNCTION_2
0x4000460	        0x4883c468	                           add rsp, 0x68	       233	rdcoff.c	FUNCTION_2
0x4000464	              0x5b	                                 pop rbx	       233	rdcoff.c	FUNCTION_2
0x4000465	              0x5d	                                 pop rbp	       233	rdcoff.c	FUNCTION_2
0x4000466	            0x415c	                                 pop r12	       233	rdcoff.c	FUNCTION_2
0x4000468	            0x415d	                                 pop r13	       233	rdcoff.c	FUNCTION_2
0x400046a	            0x415e	                                 pop r14	       233	rdcoff.c	FUNCTION_2
0x400046c	            0x415f	                                 pop r15	       233	rdcoff.c	FUNCTION_2
0x400046e	              0xc3	                                     ret	       233	rdcoff.c	FUNCTION_2
0x400046f	              0x90	                                     nop	       233	rdcoff.c	FUNCTION_2
0x4000470	    0x8b8c24a00000	            mov ecx, dword [rsp + 0xa0] 	       229	rdcoff.c	FUNCTION_2	IF_8
0x4000477	      0xb800000000	                              mov eax, 0	       229	rdcoff.c	FUNCTION_2	IF_8
0x400047c	            0x85c9	                           test ecx, ecx	       229	rdcoff.c	FUNCTION_2	IF_8
0x400047e	        0x480f44d0	                          cmove rdx, rax	       229	rdcoff.c	FUNCTION_2	IF_8
0x4000482	        0x4183fd10	                          cmp r13d, 0x10	       247	rdcoff.c	FUNCTION_3	IF_1
0x4000486	            0x770d	                            ja 0x4000495	       247	rdcoff.c	FUNCTION_3	IF_1
0x4000488	          0x4963c5	                        movsxd rax, r13d	       249	rdcoff.c	FUNCTION_3	IF_1
0x400048b	      0x488b44c508	       mov rax, qword [rbp + rax*8 + 8] 	       249	rdcoff.c	FUNCTION_3	IF_1
0x4000490	          0x4885c0	                           test rax, rax	       249	rdcoff.c	FUNCTION_3	IF_1
0x4000493	            0x75b7	                           jne 0x400044c	       249	rdcoff.c	FUNCTION_3	IF_1
0x4000495	        0x4183fd10	                          cmp r13d, 0x10	       255	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000499	     0xf87d0020000	                            ja 0x400076f	       255	rdcoff.c	FUNCTION_3	SWITCH_1
0x400049f	          0x4489e8	                           mov eax, r13d	       255	rdcoff.c	FUNCTION_3	SWITCH_1
0x40004a2	    0xff24c5000000	                       jmp qword [rax*8]	       255	rdcoff.c	FUNCTION_3	SWITCH_1
0x40004a9	     0xf1f80000000	                         nop dword [rax]	       255	rdcoff.c	FUNCTION_3	SWITCH_1
0x40004b0	            0x4154	                                push r12	       156	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_3
0x40004b2	    0x8b8424a80000	            mov eax, dword [rsp + 0xa8] 	       156	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_3
0x40004b9	          0x4889ea	                            mov rdx, rbp	       156	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_3
0x40004bc	          0x4889df	                            mov rdi, rbx	       156	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_3
0x40004bf	          0x4c89f9	                            mov rcx, r15	       156	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_3
0x40004c2	          0x4c89f6	                            mov rsi, r14	       156	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_3
0x40004c5	              0x50	                                push rax	       156	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_3
0x40004c6	      0xe835feffff	                call sym.parse_coff_type	       156	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_3
0x40004cb	          0x4c89e7	                            mov rdi, r12	       158	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_4
0x40004ce	          0x4889c6	                            mov rsi, rax	       158	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_4
0x40004d1	      0xe800000000	                          call 0x40004d6	       158	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_4
0x40004d6	              0x5b	                                 pop rbx	       158	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_4
0x40004d7	              0x5d	                                 pop rbp	       158	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_4
0x40004d8	      0xe96fffffff	                           jmp 0x400044c	       158	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_4
0x40004dd	      0xbe0c000000	                            mov esi, 0xc	       299	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_9
0x40004e2	          0x4c89e7	                            mov rdi, r12	       299	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_9
0x40004e5	      0xe800000000	                          call 0x40004ea	       299	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_9
0x40004ea	      0xbe00000000	                              mov esi, 0	       300	rdcoff.c	FUNCTION_3	SWITCH_1
0x40004ef	          0x4889c2	                            mov rdx, rax	       299	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_9
0x40004f2	    0x660f1f440000	                    nop word [rax + rax]	       299	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_9
0x40004f8	          0x4c89e7	                            mov rdi, r12	       365	rdcoff.c	FUNCTION_3	CALL_23
0x40004fb	      0xe800000000	                          call 0x4000500	       365	rdcoff.c	FUNCTION_3	CALL_23
0x4000500	        0x4183fd10	                          cmp r13d, 0x10	       369	rdcoff.c	FUNCTION_3	IF_6
0x4000504	     0xf8742ffffff	                            ja 0x400044c	       369	rdcoff.c	FUNCTION_3	IF_6
0x400050a	      0x4a8944ed08	       mov qword [rbp + r13*8 + 8], rax 	       370	rdcoff.c	FUNCTION_3	IF_6
0x400050f	      0xe938ffffff	                           jmp 0x400044c	       370	rdcoff.c	FUNCTION_3	IF_6
0x4000514	      0xba01000000	                              mov edx, 1	       319	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_13
0x4000519	      0xbe04000000	                              mov esi, 4	       319	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_13
0x400051e	          0x4c89e7	                            mov rdi, r12	       319	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_13
0x4000521	      0xe800000000	                          call 0x4000526	       319	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_13
0x4000526	      0xbe00000000	                              mov esi, 0	       320	rdcoff.c	FUNCTION_3	SWITCH_1
0x400052b	          0x4889c2	                            mov rdx, rax	       319	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_13
0x400052e	            0xebc8	                           jmp 0x40004f8	       319	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_13
0x4000530	      0xba01000000	                              mov edx, 1	       314	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_12
0x4000535	      0xbe04000000	                              mov esi, 4	       314	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_12
0x400053a	          0x4c89e7	                            mov rdi, r12	       314	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_12
0x400053d	      0xe800000000	                          call 0x4000542	       314	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_12
0x4000542	      0xbe00000000	                              mov esi, 0	       315	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000547	          0x4889c2	                            mov rdx, rax	       314	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_12
0x400054a	            0xebac	                           jmp 0x40004f8	       314	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_12
0x400054c	      0xba01000000	                              mov edx, 1	       309	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_11
0x4000551	      0xbe02000000	                              mov esi, 2	       309	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_11
0x4000556	          0x4c89e7	                            mov rdi, r12	       309	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_11
0x4000559	      0xe800000000	                          call 0x400055e	       309	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_11
0x400055e	      0xbe00000000	                              mov esi, 0	       310	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000563	          0x4889c2	                            mov rdx, rax	       309	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_11
0x4000566	            0xeb90	                           jmp 0x40004f8	       309	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_11
0x4000568	      0xba01000000	                              mov edx, 1	       304	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_10
0x400056d	      0xbe01000000	                              mov esi, 1	       304	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_10
0x4000572	          0x4c89e7	                            mov rdi, r12	       304	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_10
0x4000575	      0xe800000000	                          call 0x400057a	       304	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_10
0x400057a	      0xbe00000000	                              mov esi, 0	       305	rdcoff.c	FUNCTION_3	SWITCH_1
0x400057f	          0x4889c2	                            mov rdx, rax	       304	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_10
0x4000582	      0xe971ffffff	                           jmp 0x40004f8	       304	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_10
0x4000587	          0x4885d2	                           test rdx, rdx	       351	rdcoff.c	FUNCTION_3	SWITCH_1	IF_4
0x400058a	     0xf8468030000	                            je 0x40008f8	       351	rdcoff.c	FUNCTION_3	SWITCH_1	IF_4
0x4000590	        0x488b4218	            mov rax, qword [rdx + 0x18] 	       351	rdcoff.c	FUNCTION_3	SWITCH_1	IF_4
0x4000594	      0xbf50000000	                           mov edi, 0x50	       499	rdcoff.c	FUNCTION_5	CALL_1
0x4000599	        0x48890424	                    mov qword [rsp], rax	       499	rdcoff.c	FUNCTION_5	CALL_1
0x400059d	      0xe800000000	                          call 0x40005a2	       499	rdcoff.c	FUNCTION_5	CALL_1
0x40005a2	      0xbf50000000	                           mov edi, 0x50	       500	rdcoff.c	FUNCTION_5	CALL_2
0x40005a7	      0x4889442418	             mov qword [rsp + 0x18], rax	       499	rdcoff.c	FUNCTION_5	CALL_1
0x40005ac	      0xe800000000	                          call 0x40005b1	       500	rdcoff.c	FUNCTION_5	CALL_2
0x40005b1	      0x4889442410	             mov qword [rsp + 0x10], rax	       500	rdcoff.c	FUNCTION_5	CALL_2
0x40005b6	        0x498b4618	            mov rax, qword [r14 + 0x18] 	       500	rdcoff.c	FUNCTION_5	CALL_2
0x40005ba	    0xc74424280a00	             mov dword [rsp + 0x28], 0xa	       498	rdcoff.c	FUNCTION_5
0x40005c2	    0xc744240c0000	                mov dword [rsp + 0xc], 0	       501	rdcoff.c	FUNCTION_5
0x40005ca	    0x660f1f440000	                    nop word [rax + rax]	       501	rdcoff.c	FUNCTION_5
0x40005d0	        0x483b0424	                    cmp rax, qword [rsp]	       505	rdcoff.c	FUNCTION_5	WHILE_1
0x40005d4	            0x7d53	                           jge 0x4000629	       505	rdcoff.c	FUNCTION_5	WHILE_1
0x40005d6	        0x498b4610	            mov rax, qword [r14 + 0x10] 	       506	rdcoff.c	FUNCTION_5	WHILE_1
0x40005da	        0x493b4608	                cmp rax, qword [r14 + 8]	       506	rdcoff.c	FUNCTION_5	WHILE_1
0x40005de	            0x7d49	                           jge 0x4000629	       506	rdcoff.c	FUNCTION_5	WHILE_1
0x40005e0	          0x498b16	                    mov rdx, qword [r14]	       511	rdcoff.c	FUNCTION_5	WHILE_1
0x40005e3	          0x4889df	                            mov rdi, rbx	       513	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_3
0x40005e6	        0x4c8b2cc2	            mov r13, qword [rdx + rax*8]	       511	rdcoff.c	FUNCTION_5	WHILE_1
0x40005ea	      0x488d542430	                   lea rdx, [rsp + 0x30]	       513	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_3
0x40005ef	          0x4c89ee	                            mov rsi, r13	       513	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_3
0x40005f2	      0xe800000000	                          call 0x40005f7	       513	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_3
0x40005f7	            0x85c0	                           test eax, eax	       513	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_3
0x40005f9	     0xf84b1020000	                            je 0x40008b0	       513	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_3
0x40005ff	       0xfb6542451	           movzx edx, byte [rsp + 0x51] 	       521	rdcoff.c	FUNCTION_5	WHILE_1
0x4000604	        0x498b4618	            mov rax, qword [r14 + 0x18] 	       521	rdcoff.c	FUNCTION_5	WHILE_1
0x4000608	      0x4983461001	               add qword [r14 + 0x10], 1	       520	rdcoff.c	FUNCTION_5	WHILE_1
0x400060d	      0x488d440201	                lea rax, [rdx + rax + 1]	       521	rdcoff.c	FUNCTION_5	WHILE_1
0x4000612	       0xfb6542450	           movzx edx, byte [rsp + 0x50] 	       523	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1
0x4000617	        0x49894618	             mov qword [r14 + 0x18], rax	       521	rdcoff.c	FUNCTION_5	WHILE_1
0x400061b	          0x80fa10	                            cmp dl, 0x10	       523	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1
0x400061e	     0xf84ec010000	                            je 0x4000810	       523	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1
0x4000624	          0x80fa66	                            cmp dl, 0x66	       523	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1
0x4000627	            0x75a7	                           jne 0x40005d0	       523	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1
0x4000629	      0x4c636c240c	          movsxd r13, dword [rsp + 0xc] 	       546	rdcoff.c	FUNCTION_5
0x400062e	      0x488b442418	            mov rax, qword [rsp + 0x18] 	       546	rdcoff.c	FUNCTION_5
0x4000633	          0x4c89e7	                            mov rdi, r12	       548	rdcoff.c	FUNCTION_5	CALL_12
0x4000636	      0x488b542410	            mov rdx, qword [rsp + 0x10] 	       548	rdcoff.c	FUNCTION_5	CALL_12
0x400063b	          0x4889c6	                            mov rsi, rax	       548	rdcoff.c	FUNCTION_5	CALL_12
0x400063e	    0x4ac704e80000	              mov qword [rax + r13*8], 0	       546	rdcoff.c	FUNCTION_5
0x4000646	      0xe800000000	                          call 0x400064b	       548	rdcoff.c	FUNCTION_5	CALL_12
0x400064b	          0x4889c3	                            mov rbx, rax	       548	rdcoff.c	FUNCTION_5	CALL_12
0x400064e	          0x4c89fe	                            mov rsi, r15	       357	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_22
0x4000651	          0x4889ef	                            mov rdi, rbp	       357	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_22
0x4000654	      0xe8e7f9ffff	                  call sym.coff_get_slot	       357	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_22
0x4000659	          0x488918	                    mov qword [rax], rbx	       358	rdcoff.c	FUNCTION_3	SWITCH_1
0x400065c	          0x4889d8	                            mov rax, rbx	       370	rdcoff.c	FUNCTION_3	IF_6
0x400065f	      0xe9e8fdffff	                           jmp 0x400044c	       370	rdcoff.c	FUNCTION_3	IF_6
0x4000664	          0x4885d2	                           test rdx, rdx	       338	rdcoff.c	FUNCTION_3	SWITCH_1	IF_3
0x4000667	     0xf8477020000	                            je 0x40008e4	       338	rdcoff.c	FUNCTION_3	SWITCH_1	IF_3
0x400066d	        0x4883ec08	                              sub rsp, 8	       341	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_2	CALL_18
0x4000671	        0x4c8b4a18	              mov r9, qword [rdx + 0x18]	       341	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_2	CALL_18
0x4000675	        0x4c8d420a	                     lea r8, [rdx + 0xa]	       341	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_2	CALL_18
0x4000679	            0x4154	                                push r12	       341	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_2	CALL_18
0x400067b	      0xb909000000	                              mov ecx, 9	       341	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_2	CALL_18
0x4000680	          0x4889ea	                            mov rdx, rbp	       341	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_2	CALL_18
0x4000683	          0x4889df	                            mov rdi, rbx	       341	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_2	CALL_18
0x4000686	          0x4c89f6	                            mov rsi, r14	       341	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_2	CALL_18
0x4000689	      0xe8a2020000	  call sym.parse_coff_struct_type.isra.3	       341	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_2	CALL_18
0x400068e	          0x4889c3	                            mov rbx, rax	       341	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_2	CALL_18
0x4000691	              0x58	                                 pop rax	       341	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_2	CALL_18
0x4000692	              0x5a	                                 pop rdx	       341	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_2	CALL_18
0x4000693	            0xebb9	                           jmp 0x400064e	       341	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_2	CALL_18
0x4000695	            0x31d2	                            xor edx, edx	       268	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_3
0x4000697	      0xbe01000000	                              mov esi, 1	       268	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_3
0x400069c	          0x4c89e7	                            mov rdi, r12	       268	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_3
0x400069f	      0xe800000000	                          call 0x40006a4	       268	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_3
0x40006a4	      0xbe00000000	                              mov esi, 0	       269	rdcoff.c	FUNCTION_3	SWITCH_1
0x40006a9	          0x4889c2	                            mov rdx, rax	       268	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_3
0x40006ac	      0xe947feffff	                           jmp 0x40004f8	       268	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_3
0x40006b1	      0xbe04000000	                              mov esi, 4	       289	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_7
0x40006b6	          0x4c89e7	                            mov rdi, r12	       289	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_7
0x40006b9	      0xe800000000	                          call 0x40006be	       289	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_7
0x40006be	      0xbe00000000	                              mov esi, 0	       290	rdcoff.c	FUNCTION_3	SWITCH_1
0x40006c3	          0x4889c2	                            mov rdx, rax	       289	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_7
0x40006c6	      0xe92dfeffff	                           jmp 0x40004f8	       289	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_7
0x40006cb	            0x31d2	                            xor edx, edx	       284	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_6
0x40006cd	      0xbe04000000	                              mov esi, 4	       284	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_6
0x40006d2	          0x4c89e7	                            mov rdi, r12	       284	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_6
0x40006d5	      0xe800000000	                          call 0x40006da	       284	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_6
0x40006da	      0xbe00000000	                              mov esi, 0	       285	rdcoff.c	FUNCTION_3	SWITCH_1
0x40006df	          0x4889c2	                            mov rdx, rax	       284	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_6
0x40006e2	      0xe911feffff	                           jmp 0x40004f8	       284	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_6
0x40006e7	            0x31d2	                            xor edx, edx	       279	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_5
0x40006e9	      0xbe04000000	                              mov esi, 4	       279	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_5
0x40006ee	          0x4c89e7	                            mov rdi, r12	       279	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_5
0x40006f1	      0xe800000000	                          call 0x40006f6	       279	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_5
0x40006f6	      0xbe00000000	                              mov esi, 0	       280	rdcoff.c	FUNCTION_3	SWITCH_1
0x40006fb	          0x4889c2	                            mov rdx, rax	       279	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_5
0x40006fe	      0xe9f5fdffff	                           jmp 0x40004f8	       279	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_5
0x4000703	            0x31d2	                            xor edx, edx	       273	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_4
0x4000705	      0xbe02000000	                              mov esi, 2	       273	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_4
0x400070a	          0x4c89e7	                            mov rdi, r12	       273	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_4
0x400070d	      0xe800000000	                          call 0x4000712	       273	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_4
0x4000712	      0xbe00000000	                              mov esi, 0	       274	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000717	          0x4889c2	                            mov rdx, rax	       273	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_4
0x400071a	      0xe9d9fdffff	                           jmp 0x40004f8	       273	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_4
0x400071f	          0x4885d2	                           test rdx, rdx	       324	rdcoff.c	FUNCTION_3	SWITCH_1	IF_2
0x4000722	     0xf84e2010000	                            je 0x400090a	       324	rdcoff.c	FUNCTION_3	SWITCH_1	IF_2
0x4000728	        0x4883ec08	                              sub rsp, 8	       328	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_1	CALL_15
0x400072c	        0x4c8b4a18	              mov r9, qword [rdx + 0x18]	       328	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_1	CALL_15
0x4000730	        0x4c8d420a	                     lea r8, [rdx + 0xa]	       328	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_1	CALL_15
0x4000734	            0x4154	                                push r12	       328	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_1	CALL_15
0x4000736	      0xb908000000	                              mov ecx, 8	       328	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_1	CALL_15
0x400073b	      0xe940ffffff	                           jmp 0x4000680	       328	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_1	CALL_15
0x4000740	      0xbe08000000	                              mov esi, 8	       294	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_8
0x4000745	          0x4c89e7	                            mov rdi, r12	       294	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_8
0x4000748	      0xe800000000	                          call 0x400074d	       294	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_8
0x400074d	      0xbe00000000	                              mov esi, 0	       295	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000752	          0x4889c2	                            mov rdx, rax	       294	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_8
0x4000755	      0xe99efdffff	                           jmp 0x40004f8	       294	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_8
0x400075a	          0x4c89e7	                            mov rdi, r12	       263	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_2
0x400075d	      0xe800000000	                          call 0x4000762	       263	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_2
0x4000762	      0xbe00000000	                              mov esi, 0	       264	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000767	          0x4889c2	                            mov rdx, rax	       263	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_2
0x400076a	      0xe989fdffff	                           jmp 0x40004f8	       263	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_2
0x400076f	          0x4c89e7	                            mov rdi, r12	       258	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_1
0x4000772	      0xe800000000	                          call 0x4000777	       258	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_1
0x4000777	      0xe984fdffff	                           jmp 0x4000500	       258	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_1
0x400077c	         0xf1f4000	                         nop dword [rax]	       258	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_1
0x4000780	      0xba05000000	                              mov edx, 5	       202	rdcoff.c	FUNCTION_2	IF_1	ELSE_4	CALL_13
0x4000785	      0xbe00000000	                              mov esi, 0	       202	rdcoff.c	FUNCTION_2	IF_1	ELSE_4	CALL_13
0x400078a	            0x31ff	                            xor edi, edi	       202	rdcoff.c	FUNCTION_2	IF_1	ELSE_4	CALL_13
0x400078c	      0xe800000000	                          call 0x4000791	       202	rdcoff.c	FUNCTION_2	IF_1	ELSE_4	CALL_13
0x4000791	          0x4489ee	                           mov esi, r13d	       202	rdcoff.c	FUNCTION_2	IF_1	ELSE_4	CALL_13
0x4000794	          0x4889c7	                            mov rdi, rax	       202	rdcoff.c	FUNCTION_2	IF_1	ELSE_4	CALL_13
0x4000797	            0x31c0	                            xor eax, eax	       202	rdcoff.c	FUNCTION_2	IF_1	ELSE_4	CALL_13
0x4000799	      0xe800000000	                          call 0x400079e	       202	rdcoff.c	FUNCTION_2	IF_1	ELSE_4	CALL_13
0x400079e	            0x31c0	                            xor eax, eax	       203	rdcoff.c	FUNCTION_2	IF_1	ELSE_4
0x40007a0	      0xe9a7fcffff	                           jmp 0x400044c	       203	rdcoff.c	FUNCTION_2	IF_1	ELSE_4
0x40007a5	           0xf1f00	                         nop dword [rax]	       203	rdcoff.c	FUNCTION_2	IF_1	ELSE_4
0x40007a8	            0x4154	                                push r12	       162	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_6
0x40007aa	    0x8b8424a80000	            mov eax, dword [rsp + 0xa8] 	       162	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_6
0x40007b1	          0x4c89f9	                            mov rcx, r15	       162	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_6
0x40007b4	          0x4889ea	                            mov rdx, rbp	       162	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_6
0x40007b7	          0x4c89f6	                            mov rsi, r14	       162	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_6
0x40007ba	          0x4889df	                            mov rdi, rbx	       162	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_6
0x40007bd	              0x50	                                push rax	       162	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_6
0x40007be	      0xe83dfbffff	                call sym.parse_coff_type	       162	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_6
0x40007c3	            0x31c9	                            xor ecx, ecx	       164	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_7
0x40007c5	            0x31d2	                            xor edx, edx	       164	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_7
0x40007c7	          0x4889c6	                            mov rsi, rax	       164	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_7
0x40007ca	          0x4c89e7	                            mov rdi, r12	       164	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_7
0x40007cd	      0xe800000000	                          call 0x40007d2	       164	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_7
0x40007d2	            0x415a	                                 pop r10	       164	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_7
0x40007d4	            0x415b	                                 pop r11	       164	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_7
0x40007d6	      0xe971fcffff	                           jmp 0x400044c	       164	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_7
0x40007db	       0xf1f440000	                   nop dword [rax + rax]	       164	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_7
0x40007e0	      0xbe04000000	                              mov esi, 4	       279	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_5
0x40007e5	          0x4c89e7	                            mov rdi, r12	       279	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_5
0x40007e8	      0xe800000000	                          call 0x40007ed	       279	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_5
0x40007ed	      0xbe00000000	                              mov esi, 0	       365	rdcoff.c	FUNCTION_3	CALL_23
0x40007f2	          0x4889c2	                            mov rdx, rax	       365	rdcoff.c	FUNCTION_3	CALL_23
0x40007f5	          0x4c89e7	                            mov rdi, r12	       365	rdcoff.c	FUNCTION_3	CALL_23
0x40007f8	      0xe800000000	                          call 0x40007fd	       365	rdcoff.c	FUNCTION_3	CALL_23
0x40007fd	        0x48894528	            mov qword [rbp + 0x28], rax 	       370	rdcoff.c	FUNCTION_3	IF_6
0x4000801	          0x4889c2	                            mov rdx, rax	       370	rdcoff.c	FUNCTION_3	IF_6
0x4000804	      0xe906fcffff	                           jmp 0x400040f	       370	rdcoff.c	FUNCTION_3	IF_6
0x4000809	     0xf1f80000000	                         nop dword [rax]	       370	rdcoff.c	FUNCTION_3	IF_6
0x4000810	        0x8b44240c	              mov eax, dword [rsp + 0xc]	       526	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x4000814	          0x8d5001	                      lea edx, [rax + 1]	       526	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x4000817	        0x39542428	            cmp dword [rsp + 0x28], edx 	       526	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x400081b	            0x7e4a	                           jle 0x4000867	       526	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x400081d	      0x48634c240c	          movsxd rcx, dword [rsp + 0xc] 	       535	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_10
0x4000822	        0x498b4508	                mov rax, qword [r13 + 8]	       535	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_10
0x4000826	      0x488b742418	            mov rsi, qword [rsp + 0x18] 	       535	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_10
0x400082b	        0x8954240c	              mov dword [rsp + 0xc], edx	       526	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x400082f	        0x488904ce	            mov qword [rsi + rcx*8], rax	       535	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_10
0x4000833	        0x498b7520	            mov rsi, qword [r13 + 0x20] 	       536	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_11
0x4000837	        0x498b4510	            mov rax, qword [r13 + 0x10] 	       536	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_11
0x400083b	        0x48034628	             add rax, qword [rsi + 0x28]	       536	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_11
0x400083f	      0x488b742410	            mov rsi, qword [rsp + 0x10] 	       536	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_11
0x4000844	        0x488904ce	            mov qword [rsi + rcx*8], rax	       536	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_11
0x4000848	        0x498b4618	            mov rax, qword [r14 + 0x18] 	       536	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_11
0x400084c	      0xe97ffdffff	                           jmp 0x40005d0	       536	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_11
0x4000851	     0xf1f80000000	                         nop dword [rax]	       536	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_11
0x4000858	            0x31d2	                            xor edx, edx	       219	rdcoff.c	FUNCTION_2	IF_6	CALL_15
0x400085a	          0x4c89e7	                            mov rdi, r12	       219	rdcoff.c	FUNCTION_2	IF_6	CALL_15
0x400085d	      0xe800000000	                          call 0x4000862	       219	rdcoff.c	FUNCTION_2	IF_6	CALL_15
0x4000862	      0xe9e5fbffff	                           jmp 0x400044c	       219	rdcoff.c	FUNCTION_2	IF_6	CALL_15
0x4000867	      0x834424280a	             add dword [rsp + 0x28], 0xa	       528	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x400086c	      0x488b7c2418	            mov rdi, qword [rsp + 0x18] 	       529	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x4000871	      0x4c63442428	          movsxd r8, dword [rsp + 0x28] 	       528	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x4000876	        0x8954242c	             mov dword [rsp + 0x2c], edx	       528	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x400087a	        0x49c1e003	                               shl r8, 3	       530	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2	CALL_8
0x400087e	          0x4c89c6	                             mov rsi, r8	       529	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x4000881	      0x4c89442420	              mov qword [rsp + 0x20], r8	       529	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x4000886	      0xe800000000	                          call 0x400088b	       529	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x400088b	      0x4c8b442420	              mov r8, qword [rsp + 0x20]	       531	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x4000890	      0x488b7c2410	            mov rdi, qword [rsp + 0x10] 	       531	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x4000895	      0x4889442418	             mov qword [rsp + 0x18], rax	       529	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x400089a	          0x4c89c6	                             mov rsi, r8	       531	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x400089d	      0xe800000000	                          call 0x40008a2	       531	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x40008a2	        0x8b54242c	            mov edx, dword [rsp + 0x2c] 	       531	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x40008a6	      0x4889442410	             mov qword [rsp + 0x10], rax	       531	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x40008ab	      0xe96dffffff	                           jmp 0x400081d	       531	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x40008b0	      0xe800000000	                          call 0x40008b5	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x40008b5	            0x89c7	                            mov edi, eax	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x40008b7	      0xe800000000	                          call 0x40008bc	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x40008bc	      0xba05000000	                              mov edx, 5	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x40008c1	          0x4889c3	                            mov rbx, rax	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x40008c4	      0xbe00000000	                              mov esi, 0	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x40008c9	            0x31ff	                            xor edi, edi	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x40008cb	      0xe800000000	                          call 0x40008d0	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x40008d0	          0x4889de	                            mov rsi, rbx	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x40008d3	          0x4889c7	                            mov rdi, rax	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x40008d6	            0x31c0	                            xor eax, eax	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x40008d8	      0xe800000000	                          call 0x40008dd	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x40008dd	            0x31db	                            xor ebx, ebx	       517	rdcoff.c	FUNCTION_5	WHILE_1	IF_1
0x40008df	      0xe96afdffff	                           jmp 0x400064e	       517	rdcoff.c	FUNCTION_5	WHILE_1	IF_1
0x40008e4	            0x31c9	                            xor ecx, ecx	       339	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_17
0x40008e6	            0x31f6	                            xor esi, esi	       339	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_17
0x40008e8	          0x4c89e7	                            mov rdi, r12	       339	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_17
0x40008eb	      0xe800000000	                          call 0x40008f0	       339	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_17
0x40008f0	          0x4889c3	                            mov rbx, rax	       339	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_17
0x40008f3	      0xe956fdffff	                           jmp 0x400064e	       339	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_17
0x40008f8	            0x31f6	                            xor esi, esi	       352	rdcoff.c	FUNCTION_3	SWITCH_1	IF_4	CALL_20
0x40008fa	          0x4c89e7	                            mov rdi, r12	       352	rdcoff.c	FUNCTION_3	SWITCH_1	IF_4	CALL_20
0x40008fd	      0xe800000000	                          call 0x4000902	       352	rdcoff.c	FUNCTION_3	SWITCH_1	IF_4	CALL_20
0x4000902	          0x4889c3	                            mov rbx, rax	       352	rdcoff.c	FUNCTION_3	SWITCH_1	IF_4	CALL_20
0x4000905	      0xe944fdffff	                           jmp 0x400064e	       352	rdcoff.c	FUNCTION_3	SWITCH_1	IF_4	CALL_20
0x400090a	            0x31c9	                            xor ecx, ecx	       325	rdcoff.c	FUNCTION_3	SWITCH_1	IF_2	CALL_14
0x400090c	      0xbe01000000	                              mov esi, 1	       325	rdcoff.c	FUNCTION_3	SWITCH_1	IF_2	CALL_14
0x4000911	          0x4c89e7	                            mov rdi, r12	       325	rdcoff.c	FUNCTION_3	SWITCH_1	IF_2	CALL_14
0x4000914	      0xe800000000	                          call 0x4000919	       325	rdcoff.c	FUNCTION_3	SWITCH_1	IF_2	CALL_14
0x4000919	          0x4889c3	                            mov rbx, rax	       325	rdcoff.c	FUNCTION_3	SWITCH_1	IF_2	CALL_14
0x400091c	      0xe92dfdffff	                           jmp 0x400064e	       325	rdcoff.c	FUNCTION_3	SWITCH_1	IF_2	CALL_14
0x4000921	      0xe800000000	                          call 0x4000926	       233	rdcoff.c	FUNCTION_2
