ar_emul_parse_arg	FOR,0:WHILE,0:functions,0:DO,0:CALL,1:ELSE,0:IF,1:SWITCH,0	7
0x40002c0	    0x488b05000000	            mov rax, qword [0x040002c7] 	       138	binemul.c	FUNCTION_9	IF_1
0x40002c7	          0x4885c0	                           test rax, rax	       138	binemul.c	FUNCTION_9	IF_1
0x40002ca	            0x7404	                            je 0x40002d0	       138	binemul.c	FUNCTION_9	IF_1
0x40002cc	            0xffe0	                                 jmp rax	       139	binemul.c	FUNCTION_9	CALL_1
0x40002ce	            0x6690	                                     nop	       139	binemul.c	FUNCTION_9	CALL_1
0x40002d0	            0x31c0	                            xor eax, eax	       142	binemul.c	FUNCTION_9
0x40002d2	              0xc3	                                     ret	       142	binemul.c	FUNCTION_9
ar_emul_default_parse_arg	FOR,0:WHILE,0:functions,0:DO,0:CALL,0:ELSE,0:IF,0:SWITCH,0	2
0x40002e0	            0x31c0	                            xor eax, eax	       148	binemul.c	FUNCTION_10
0x40002e2	              0xc3	                                     ret	       148	binemul.c	FUNCTION_10
ar_emul_default_usage	FOR,0:WHILE,0:functions,0:DO,0:CALL,2:ELSE,0:IF,0:SWITCH,0	21
0x4000070	              0x53	                                push rbx	        35	binemul.c	FUNCTION_2
0x4000071	      0xba05000000	                              mov edx, 5	        36	binemul.c	FUNCTION_2	CALL_1
0x4000076	          0x4889fb	                            mov rbx, rdi	        35	binemul.c	FUNCTION_2
0x4000079	      0xbe00000000	                              mov esi, 0	        36	binemul.c	FUNCTION_2	CALL_1
0x400007e	            0x31ff	                            xor edi, edi	        36	binemul.c	FUNCTION_2	CALL_1
0x4000080	      0xe800000000	                          call 0x4000085	        36	binemul.c	FUNCTION_2	CALL_1
0x4000085	          0x4889df	                            mov rdi, rbx	        97	stdio2.h	CALL_9
0x4000088	          0x4889c2	                            mov rdx, rax	        97	stdio2.h	CALL_9
0x400008b	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_9
0x4000090	            0x31c0	                            xor eax, eax	        97	stdio2.h	CALL_9
0x4000092	      0xe800000000	                          call 0x4000097	        97	stdio2.h	CALL_9
0x4000097	      0xba05000000	                              mov edx, 5	        38	binemul.c	FUNCTION_2	CALL_2
0x400009c	      0xbe00000000	                              mov esi, 0	        38	binemul.c	FUNCTION_2	CALL_2
0x40000a1	            0x31ff	                            xor edi, edi	        38	binemul.c	FUNCTION_2	CALL_2
0x40000a3	      0xe800000000	                          call 0x40000a8	        38	binemul.c	FUNCTION_2	CALL_2
0x40000a8	          0x4889df	                            mov rdi, rbx	        97	stdio2.h	CALL_9
0x40000ab	          0x4889c2	                            mov rdx, rax	        97	stdio2.h	CALL_9
0x40000ae	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_9
0x40000b3	              0x5b	                                 pop rbx	        39	binemul.c	FUNCTION_2
0x40000b4	            0x31c0	                            xor eax, eax	        97	stdio2.h	CALL_9
0x40000b6	      0xe900000000	                           jmp 0x40000bb	        97	stdio2.h	CALL_9
any_ok	FOR,0:WHILE,0:functions,0:DO,0:CALL,0:ELSE,0:IF,0:SWITCH,0	2
0x4000040	      0xb801000000	                              mov eax, 1	        56	binemul.c	FUNCTION_4
0x4000045	              0xc3	                                     ret	        56	binemul.c	FUNCTION_4
ar_emul_default_replace	FOR,0:WHILE,0:functions,0:DO,0:CALL,3:ELSE,0:IF,0:SWITCH,0	33
0x4000250	            0x4155	                                push r13	       121	binemul.c	FUNCTION_8
0x4000252	            0x4154	                                push r12	       121	binemul.c	FUNCTION_8
0x4000254	          0x4989f4	                            mov r12, rsi	       121	binemul.c	FUNCTION_8
0x4000257	              0x55	                                push rbp	       121	binemul.c	FUNCTION_8
0x4000258	              0x53	                                push rbx	       121	binemul.c	FUNCTION_8
0x4000259	          0x4889fd	                            mov rbp, rdi	       121	binemul.c	FUNCTION_8
0x400025c	          0x4889d6	                            mov rsi, rdx	       124	binemul.c	FUNCTION_8	CALL_1
0x400025f	          0x4c89e7	                            mov rdi, r12	       124	binemul.c	FUNCTION_8	CALL_1
0x4000262	          0x4189cd	                           mov r13d, ecx	       121	binemul.c	FUNCTION_8
0x4000265	        0x4883ec08	                              sub rsp, 8	       121	binemul.c	FUNCTION_8
0x4000269	      0xe800000000	                          call 0x400026e	       124	binemul.c	FUNCTION_8	CALL_1
0x400026e	          0x4885c0	                           test rax, rax	       125	binemul.c	FUNCTION_8	CALL_2
0x4000271	            0x743b	                            je 0x40002ae	       125	binemul.c	FUNCTION_8	CALL_2
0x4000273	          0x4585ed	                         test r13d, r13d	       127	binemul.c	FUNCTION_8	CALL_3
0x4000276	          0x4889c3	                            mov rbx, rax	       127	binemul.c	FUNCTION_8	CALL_3
0x4000279	            0x7414	                            je 0x400028f	       127	binemul.c	FUNCTION_8	CALL_3
0x400027b	          0x4c89e2	                            mov rdx, r12	       104	stdio2.h	CALL_12
0x400027e	      0xbe00000000	                              mov esi, 0	       104	stdio2.h	CALL_12
0x4000283	      0xbf01000000	                              mov edi, 1	       104	stdio2.h	CALL_12
0x4000288	            0x31c0	                            xor eax, eax	       104	stdio2.h	CALL_12
0x400028a	      0xe800000000	                          call 0x400028f	       104	stdio2.h	CALL_12
0x400028f	        0x488b4500	                    mov rax, qword [rbp]	       129	binemul.c	FUNCTION_8
0x4000293	    0x488983d80000	             mov qword [rbx + 0xd8], rax	       129	binemul.c	FUNCTION_8
0x400029a	        0x48895d00	                    mov qword [rbp], rbx	       130	binemul.c	FUNCTION_8
0x400029e	        0x4883c408	                              add rsp, 8	       133	binemul.c	FUNCTION_8
0x40002a2	              0x5b	                                 pop rbx	       133	binemul.c	FUNCTION_8
0x40002a3	      0xb801000000	                              mov eax, 1	       133	binemul.c	FUNCTION_8
0x40002a8	              0x5d	                                 pop rbp	       133	binemul.c	FUNCTION_8
0x40002a9	            0x415c	                                 pop r12	       133	binemul.c	FUNCTION_8
0x40002ab	            0x415d	                                 pop r13	       133	binemul.c	FUNCTION_8
0x40002ad	              0xc3	                                     ret	       133	binemul.c	FUNCTION_8
0x40002ae	          0x4c89e7	                            mov rdi, r12	       125	binemul.c	FUNCTION_8	CALL_2
0x40002b1	      0xe800000000	                          call 0x40002b6	       125	binemul.c	FUNCTION_8	CALL_2
ar_emul_append	FOR,0:WHILE,0:functions,0:DO,0:CALL,1:ELSE,0:IF,1:SWITCH,0	7
0x40000c0	    0x488b05000000	            mov rax, qword [0x040000c7] 	        45	binemul.c	FUNCTION_3	IF_1
0x40000c7	          0x4885c0	                           test rax, rax	        45	binemul.c	FUNCTION_3	IF_1
0x40000ca	            0x7404	                            je 0x40000d0	        45	binemul.c	FUNCTION_3	IF_1
0x40000cc	            0xffe0	                                 jmp rax	        46	binemul.c	FUNCTION_3	IF_1	CALL_1
0x40000ce	            0x6690	                                     nop	        46	binemul.c	FUNCTION_3	IF_1	CALL_1
0x40000d0	            0x31c0	                            xor eax, eax	        50	binemul.c	FUNCTION_3
0x40000d2	              0xc3	                                     ret	        50	binemul.c	FUNCTION_3
ar_emul_replace	FOR,0:WHILE,0:functions,0:DO,0:CALL,1:ELSE,0:IF,1:SWITCH,0	7
0x4000230	    0x488b05000000	            mov rax, qword [0x04000237] 	       111	binemul.c	FUNCTION_7	IF_1
0x4000237	          0x4885c0	                           test rax, rax	       111	binemul.c	FUNCTION_7	IF_1
0x400023a	            0x7404	                            je 0x4000240	       111	binemul.c	FUNCTION_7	IF_1
0x400023c	            0xffe0	                                 jmp rax	       112	binemul.c	FUNCTION_7	IF_1	CALL_1
0x400023e	            0x6690	                                     nop	       112	binemul.c	FUNCTION_7	IF_1	CALL_1
0x4000240	            0x31c0	                            xor eax, eax	       116	binemul.c	FUNCTION_7
0x4000242	              0xc3	                                     ret	       116	binemul.c	FUNCTION_7
ar_emul_default_append	FOR,0:WHILE,0:functions,0:DO,0:CALL,3:ELSE,0:IF,0:SWITCH,0	27
0x40001e0	            0x4155	                                push r13	        99	binemul.c	FUNCTION_6
0x40001e2	            0x4154	                                push r12	        99	binemul.c	FUNCTION_6
0x40001e4	          0x4589c5	                           mov r13d, r8d	        99	binemul.c	FUNCTION_6
0x40001e7	              0x55	                                push rbp	        99	binemul.c	FUNCTION_6
0x40001e8	              0x53	                                push rbx	        99	binemul.c	FUNCTION_6
0x40001e9	          0x4889f3	                            mov rbx, rsi	        99	binemul.c	FUNCTION_6
0x40001ec	          0x4889fd	                            mov rbp, rdi	        99	binemul.c	FUNCTION_6
0x40001ef	          0x4889d6	                            mov rsi, rdx	        99	binemul.c	FUNCTION_6
0x40001f2	          0x4889df	                            mov rdi, rbx	       102	binemul.c	FUNCTION_6	CALL_1
0x40001f5	        0x4883ec08	                              sub rsp, 8	        99	binemul.c	FUNCTION_6
0x40001f9	          0x4189cc	                           mov r12d, ecx	        99	binemul.c	FUNCTION_6
0x40001fc	      0xe800000000	                          call 0x4000201	       102	binemul.c	FUNCTION_6	CALL_1
0x4000201	          0x4885c0	                           test rax, rax	       103	binemul.c	FUNCTION_6	CALL_2
0x4000204	            0x7421	                            je 0x4000227	       103	binemul.c	FUNCTION_6	CALL_2
0x4000206	        0x4883c408	                              add rsp, 8	       105	binemul.c	FUNCTION_6
0x400020a	          0x4489e9	                           mov ecx, r13d	       104	binemul.c	FUNCTION_6	CALL_3
0x400020d	          0x4489e2	                           mov edx, r12d	       104	binemul.c	FUNCTION_6	CALL_3
0x4000210	              0x5b	                                 pop rbx	       105	binemul.c	FUNCTION_6
0x4000211	          0x4889ef	                            mov rdi, rbp	       104	binemul.c	FUNCTION_6	CALL_3
0x4000214	    0x41b800000000	                              mov r8d, 0	       104	binemul.c	FUNCTION_6	CALL_3
0x400021a	          0x4889c6	                            mov rsi, rax	       104	binemul.c	FUNCTION_6	CALL_3
0x400021d	              0x5d	                                 pop rbp	       105	binemul.c	FUNCTION_6
0x400021e	            0x415c	                                 pop r12	       105	binemul.c	FUNCTION_6
0x4000220	            0x415d	                                 pop r13	       105	binemul.c	FUNCTION_6
0x4000222	      0xe9b9feffff	               jmp sym.do_ar_emul_append	       104	binemul.c	FUNCTION_6	CALL_3
0x4000227	          0x4889df	                            mov rdi, rbx	       103	binemul.c	FUNCTION_6	CALL_2
0x400022a	      0xe800000000	                          call 0x400022f	       103	binemul.c	FUNCTION_6	CALL_2
ar_emul_usage	FOR,0:WHILE,0:functions,0:DO,0:CALL,1:ELSE,0:IF,1:SWITCH,0	6
0x4000050	    0x488b05000000	            mov rax, qword [0x04000057] 	        29	binemul.c	FUNCTION_1	IF_1
0x4000057	          0x4885c0	                           test rax, rax	        29	binemul.c	FUNCTION_1	IF_1
0x400005a	            0x7404	                            je 0x4000060	        29	binemul.c	FUNCTION_1	IF_1
0x400005c	            0xffe0	                                 jmp rax	        30	binemul.c	FUNCTION_1	CALL_1
0x400005e	            0x6690	                                     nop	        30	binemul.c	FUNCTION_1	CALL_1
0x4000060	            0xf3c3	                                     ret	        30	binemul.c	FUNCTION_1	CALL_1
