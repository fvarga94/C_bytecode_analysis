bfd_convert_section_size	SWITCH,0:functions,0:WHILE,0:IF,5:FOR,0:DO,0:ELSE,1:CALL,5	29
0x4001b60	        0xf6474610	           test byte [rdi + 0x46], 0x10 	      2472	bfd.c	FUNCTION_42	IF_1
0x4001b64	          0x4989c9	                             mov r9, rcx	      2473	bfd.c	FUNCTION_42	IF_1
0x4001b67	            0x750a	                           jne 0x4001b73	      2472	bfd.c	FUNCTION_42	IF_1
0x4001b69	        0x488b4708	                mov rax, qword [rdi + 8]	      2476	bfd.c	FUNCTION_42	IF_2	CALL_1
0x4001b6d	        0x83780805	                  cmp dword [rax + 8], 5	      2476	bfd.c	FUNCTION_42	IF_2	CALL_1
0x4001b71	            0x740d	                            je 0x4001b80	      2476	bfd.c	FUNCTION_42	IF_2	CALL_1
0x4001b73	          0x4c89c8	                             mov rax, r9	      2497	bfd.c	FUNCTION_42
0x4001b76	              0xc3	                                     ret	      2497	bfd.c	FUNCTION_42
0x4001b77	    0x660f1f840000	                    nop word [rax + rax]	      2497	bfd.c	FUNCTION_42
0x4001b80	        0x488b5208	                mov rdx, qword [rdx + 8]	      2477	bfd.c	FUNCTION_42	IF_2	CALL_2
0x4001b84	        0x837a0805	                  cmp dword [rdx + 8], 5	      2477	bfd.c	FUNCTION_42	IF_2	CALL_2
0x4001b88	            0x75e9	                           jne 0x4001b73	      2477	bfd.c	FUNCTION_42	IF_2	CALL_2
0x4001b8a	    0x488b80680300	           mov rax, qword [rax + 0x368] 	      2481	bfd.c	FUNCTION_42	IF_3	CALL_3
0x4001b91	    0x4c8b80000300	            mov r8, qword [rax + 0x300] 	      2481	bfd.c	FUNCTION_42	IF_3	CALL_3
0x4001b98	    0x488b82680300	           mov rax, qword [rdx + 0x368] 	      2482	bfd.c	FUNCTION_42	IF_3	CALL_4
0x4001b9f	    0x488b80000300	           mov rax, qword [rax + 0x300] 	      2482	bfd.c	FUNCTION_42	IF_3	CALL_4
0x4001ba6	         0xfb6400c	            movzx eax, byte [rax + 0xc] 	      2481	bfd.c	FUNCTION_42	IF_3	CALL_3
0x4001baa	        0x4138400c	                 cmp byte [r8 + 0xc], al	      2481	bfd.c	FUNCTION_42	IF_3	CALL_3
0x4001bae	            0x74c3	                            je 0x4001b73	      2481	bfd.c	FUNCTION_42	IF_3	CALL_3
0x4001bb0	      0xe800000000	                          call 0x4001bb5	      2486	bfd.c	FUNCTION_42	CALL_5
0x4001bb5	            0x4898	                                    cdqe	      2486	bfd.c	FUNCTION_42	CALL_5
0x4001bb7	          0x4885c0	                           test rax, rax	      2487	bfd.c	FUNCTION_42	IF_4
0x4001bba	            0x74b7	                            je 0x4001b73	      2487	bfd.c	FUNCTION_42	IF_4
0x4001bbc	        0x498d510c	                     lea rdx, [r9 + 0xc]	      2492	bfd.c	FUNCTION_42	IF_5
0x4001bc0	        0x498d49f4	                     lea rcx, [r9 - 0xc]	      2492	bfd.c	FUNCTION_42	IF_5
0x4001bc4	        0x4883f80c	                            cmp rax, 0xc	      2492	bfd.c	FUNCTION_42	IF_5
0x4001bc8	        0x480f45d1	                         cmovne rdx, rcx	      2492	bfd.c	FUNCTION_42	IF_5
0x4001bcc	          0x4989d1	                             mov r9, rdx	      2492	bfd.c	FUNCTION_42	IF_5
0x4001bcf	            0xeba2	                           jmp 0x4001b73	      2492	bfd.c	FUNCTION_42	IF_5
bfd_set_start_address	SWITCH,0:functions,0:WHILE,0:IF,0:FOR,0:DO,0:ELSE,0:CALL,0	3
0x40011d0	    0x4889b7a80000	             mov qword [rdi + 0xa8], rsi	      1550	bfd.c	FUNCTION_21
0x40011d7	      0xb801000000	                              mov eax, 1	      1552	bfd.c	FUNCTION_21
0x40011dc	              0xc3	                                     ret	      1552	bfd.c	FUNCTION_21
bfd_set_assert_handler	SWITCH,0:functions,0:WHILE,0:IF,0:FOR,0:DO,0:ELSE,0:CALL,0	3
0x40002e0	    0x488b05000000	            mov rax, qword [0x040002e7] 	      1283	bfd.c	FUNCTION_13
0x40002e7	    0x48893d000000	            mov qword [0x040002ee], rdi 	      1284	bfd.c	FUNCTION_13
0x40002ee	              0xc3	                                     ret	      1286	bfd.c	FUNCTION_13
bfd_assert	SWITCH,0:functions,0:WHILE,0:IF,0:FOR,0:DO,0:ELSE,0:CALL,1	19
0x40003e0	            0x4154	                                push r12	      1426	bfd.c	FUNCTION_17
0x40003e2	              0x55	                                push rbp	      1426	bfd.c	FUNCTION_17
0x40003e3	          0x4189f4	                           mov r12d, esi	      1426	bfd.c	FUNCTION_17
0x40003e6	              0x53	                                push rbx	      1426	bfd.c	FUNCTION_17
0x40003e7	    0x488b1d000000	            mov rbx, qword [0x040003ee] 	      1428	bfd.c	FUNCTION_17	CALL_1
0x40003ee	          0x4889fd	                            mov rbp, rdi	      1426	bfd.c	FUNCTION_17
0x40003f1	      0xba05000000	                              mov edx, 5	      1428	bfd.c	FUNCTION_17	CALL_1
0x40003f6	      0xbe00000000	                              mov esi, 0	      1428	bfd.c	FUNCTION_17	CALL_1
0x40003fb	      0xbf00000000	                              mov edi, 0	      1428	bfd.c	FUNCTION_17	CALL_1
0x4000400	      0xe800000000	                          call 0x4000405	      1428	bfd.c	FUNCTION_17	CALL_1
0x4000405	          0x4489e1	                           mov ecx, r12d	      1428	bfd.c	FUNCTION_17	CALL_1
0x4000408	          0x4889ea	                            mov rdx, rbp	      1428	bfd.c	FUNCTION_17	CALL_1
0x400040b	          0x4889c7	                            mov rdi, rax	      1428	bfd.c	FUNCTION_17	CALL_1
0x400040e	          0x4889d8	                            mov rax, rbx	      1428	bfd.c	FUNCTION_17	CALL_1
0x4000411	      0xbe00000000	                              mov esi, 0	      1428	bfd.c	FUNCTION_17	CALL_1
0x4000416	              0x5b	                                 pop rbx	      1430	bfd.c	FUNCTION_17
0x4000417	              0x5d	                                 pop rbp	      1430	bfd.c	FUNCTION_17
0x4000418	            0x415c	                                 pop r12	      1430	bfd.c	FUNCTION_17
0x400041a	            0xffe0	                                 jmp rax	      1428	bfd.c	FUNCTION_17	CALL_1
error_handler_internal	SWITCH,1:functions,0:WHILE,0:IF,1:FOR,2:DO,0:ELSE,1:CALL,12	675
0x4000530	            0x4157	                                push r15	      1092	bfd.c	FUNCTION_8
0x4000532	            0x4156	                                push r14	      1092	bfd.c	FUNCTION_8
0x4000534	            0x4155	                                push r13	      1092	bfd.c	FUNCTION_8
0x4000536	            0x4154	                                push r12	      1092	bfd.c	FUNCTION_8
0x4000538	          0x4989f5	                            mov r13, rsi	      1092	bfd.c	FUNCTION_8
0x400053b	              0x55	                                push rbp	      1092	bfd.c	FUNCTION_8
0x400053c	              0x53	                                push rbx	      1092	bfd.c	FUNCTION_8
0x400053d	    0x4881ec380100	                          sub rsp, 0x138	      1092	bfd.c	FUNCTION_8
0x4000544	      0x488d5c2410	                   lea rbx, [rsp + 0x10]	      1092	bfd.c	FUNCTION_8
0x4000549	    0x488d9424a000	                   lea rdx, [rsp + 0xa0]	      1092	bfd.c	FUNCTION_8
0x4000551	        0x48893c24	                    mov qword [rsp], rdi	      1092	bfd.c	FUNCTION_8
0x4000555	    0x64488b042528	                mov rax, qword fs:[0x28]	      1092	bfd.c	FUNCTION_8
0x400055e	    0x488984242801	            mov qword [rsp + 0x128], rax	      1092	bfd.c	FUNCTION_8
0x4000566	            0x31c0	                            xor eax, eax	      1092	bfd.c	FUNCTION_8
0x4000568	          0x4889d8	                            mov rax, rbx	      1092	bfd.c	FUNCTION_8
0x400056b	       0xf1f440000	                   nop dword [rax + rax]	      1092	bfd.c	FUNCTION_8
0x4000570	    0xc70000000000	                      mov dword [rax], 0	      1097	bfd.c	FUNCTION_8	FOR_1
0x4000576	        0x4883c010	                           add rax, 0x10	      1097	bfd.c	FUNCTION_8	FOR_1
0x400057a	          0x4839d0	                            cmp rax, rdx	      1096	bfd.c	FUNCTION_8	FOR_1
0x400057d	            0x75f1	                           jne 0x4000570	      1096	bfd.c	FUNCTION_8	FOR_1
0x400057f	        0x488b0424	                    mov rax, qword [rsp]	      1096	bfd.c	FUNCTION_8	FOR_1
0x4000583	          0x4531e4	                          xor r12d, r12d	      1096	bfd.c	FUNCTION_8	FOR_1
0x4000586	           0xfb610	                   movzx edx, byte [rax]	       916	bfd.c	FUNCTION_7	WHILE_1
0x4000589	            0x84d2	                             test dl, dl	       916	bfd.c	FUNCTION_7	WHILE_1
0x400058b	            0x7417	                            je 0x40005a4	       916	bfd.c	FUNCTION_7	WHILE_1
0x400058d	          0x80fa25	                            cmp dl, 0x25	       918	bfd.c	FUNCTION_7	WHILE_1	IF_1
0x4000590	            0x744e	                            je 0x40005e0	       918	bfd.c	FUNCTION_7	WHILE_1	IF_1
0x4000592	      0xbe25000000	                           mov esi, 0x25	       920	bfd.c	FUNCTION_7	WHILE_1	IF_1	CALL_1
0x4000597	          0x4889c7	                            mov rdi, rax	       920	bfd.c	FUNCTION_7	WHILE_1	IF_1	CALL_1
0x400059a	      0xe800000000	                          call 0x400059f	       920	bfd.c	FUNCTION_7	WHILE_1	IF_1	CALL_1
0x400059f	          0x4885c0	                           test rax, rax	       921	bfd.c	FUNCTION_7	WHILE_1	IF_1	IF_2
0x40005a2	            0x75e2	                           jne 0x4000586	       921	bfd.c	FUNCTION_7	WHILE_1	IF_1	IF_2
0x40005a4	          0x4585e4	                         test r12d, r12d	      1100	bfd.c	FUNCTION_8	FOR_2
0x40005a7	     0xf84a0020000	                            je 0x400084d	      1100	bfd.c	FUNCTION_8	FOR_2
0x40005ad	      0x418d4424ff	                      lea eax, [r12 - 1]	      1100	bfd.c	FUNCTION_8	FOR_2
0x40005b2	      0x488d4c2410	                   lea rcx, [rsp + 0x10]	      1100	bfd.c	FUNCTION_8	FOR_2
0x40005b7	        0x4883c001	                              add rax, 1	      1100	bfd.c	FUNCTION_8	FOR_2
0x40005bb	        0x48c1e004	                              shl rax, 4	      1100	bfd.c	FUNCTION_8	FOR_2
0x40005bf	          0x4801c8	                            add rax, rcx	      1100	bfd.c	FUNCTION_8	FOR_2
0x40005c2	    0x660f1f440000	                    nop word [rax + rax]	      1100	bfd.c	FUNCTION_8	FOR_2
0x40005c8	          0x833b06	                      cmp dword [rbx], 6	      1102	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x40005cb	     0xf87d7030000	                            ja 0x40009a8	      1102	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x40005d1	            0x8b13	                    mov edx, dword [rbx]	      1102	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x40005d3	    0xff24d5000000	                       jmp qword [rdx*8]	      1102	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x40005da	    0x660f1f440000	                    nop word [rax + rax]	      1102	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x40005e0	      0x440fb67001	              movzx r14d, byte [rax + 1]	       924	bfd.c	FUNCTION_7	WHILE_1	ELSE_1	IF_3
0x40005e5	        0x4180fe25	                          cmp r14b, 0x25	       924	bfd.c	FUNCTION_7	WHILE_1	ELSE_1	IF_3
0x40005e9	     0xf8419010000	                            je 0x4000708	       924	bfd.c	FUNCTION_7	WHILE_1	ELSE_1	IF_3
0x40005ef	        0x4180fe30	                          cmp r14b, 0x30	       936	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4	CALL_2
0x40005f3	        0x4c8d7801	                      lea r15, [rax + 1]	       932	bfd.c	FUNCTION_7	WHILE_1	ELSE_2
0x40005f7	     0xf841b010000	                            je 0x4000718	       936	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4	CALL_2
0x40005fd	        0x410fb6f6	                         movzx esi, r14b	       936	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4	CALL_2
0x4000601	        0x410fbeee	                         movsx ebp, r14b	       936	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4	CALL_2
0x4000605	    0xc744240cffff	      mov dword [rsp + 0xc], 0xffffffff 	       935	bfd.c	FUNCTION_7	WHILE_1	ELSE_2
0x400060d	    0xf68436000000	                test byte [rsi + rsi], 4	       936	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4	CALL_2
0x4000615	            0x742c	                            je 0x4000643	       936	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4	CALL_2
0x4000617	        0x80780224	                cmp byte [rax + 2], 0x24	       936	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4	CALL_2
0x400061b	            0x7526	                           jne 0x4000643	       936	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4	CALL_2
0x400061d	          0x8d4dcf	                   lea ecx, [rbp - 0x31]	       938	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4
0x4000620	         0xfbe6803	               movsx ebp, byte [rax + 3]	       938	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4
0x4000624	        0x4c8d7803	                      lea r15, [rax + 3]	       939	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4
0x4000628	        0x894c240c	              mov dword [rsp + 0xc], ecx	       938	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4
0x400062c	          0x4189ee	                           mov r14d, ebp	       938	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4
0x400062f	            0xeb12	                           jmp 0x4000643	       938	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4
0x4000631	     0xf1f80000000	                         nop dword [rax]	       938	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4
0x4000638	        0x4983c701	                              add r15, 1	       944	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_2
0x400063c	        0x410fbe2f	                   movsx ebp, byte [r15]	       944	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_2
0x4000640	          0x4189ee	                           mov r14d, ebp	       944	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_2
0x4000643	            0x89ee	                            mov esi, ebp	       943	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_2	CALL_3
0x4000645	      0xbf00000000	                              mov edi, 0	       943	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_2	CALL_3
0x400064a	      0xe800000000	                          call 0x400064f	       943	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_2	CALL_3
0x400064f	          0x4885c0	                           test rax, rax	       943	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_2	CALL_3
0x4000652	            0x75e4	                           jne 0x4000638	       943	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_2	CALL_3
0x4000654	        0x4180fe2a	                          cmp r14b, 0x2a	       946	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5
0x4000658	     0xf841a010000	                            je 0x4000778	       946	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5
0x400065e	        0x400fb6ed	                          movzx ebp, bpl	       964	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	ELSE_3	WHILE_3	CALL_6
0x4000662	    0xf6842d000000	                test byte [rbp + rbp], 4	       964	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	ELSE_3	WHILE_3	CALL_6
0x400066a	            0x7419	                            je 0x4000685	       964	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	ELSE_3	WHILE_3	CALL_6
0x400066c	         0xf1f4000	                         nop dword [rax]	       964	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	ELSE_3	WHILE_3	CALL_6
0x4000670	        0x4983c701	                              add r15, 1	       965	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	ELSE_3	WHILE_3
0x4000674	        0x410fb607	                   movzx eax, byte [r15]	       964	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	ELSE_3	WHILE_3	CALL_6
0x4000678	    0xf68400000000	                test byte [rax + rax], 4	       964	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	ELSE_3	WHILE_3	CALL_6
0x4000680	          0x4989c6	                            mov r14, rax	       964	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	ELSE_3	WHILE_3	CALL_6
0x4000683	            0x75eb	                           jne 0x4000670	       964	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	ELSE_3	WHILE_3	CALL_6
0x4000685	        0x4180fe2e	                          cmp r14b, 0x2e	       968	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8
0x4000689	     0xf84a1000000	                            je 0x4000730	       968	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8
0x400068f	    0xc74424080000	                  mov dword [rsp + 8], 0	      1003	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x4000697	            0x31ed	                            xor ebp, ebp	      1003	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x4000699	        0x410fbef6	                         movsx esi, r14b	       992	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	CALL_10
0x400069d	      0xbf00000000	                              mov edi, 0	       992	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	CALL_10
0x40006a2	      0xe800000000	                          call 0x40006a7	       992	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	CALL_10
0x40006a7	          0x4885c0	                           test rax, rax	       992	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	CALL_10
0x40006aa	     0xf8428030000	                            je 0x40009d8	       992	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	CALL_10
0x40006b0	        0x4180fe68	                          cmp r14b, 0x68	       994	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x40006b4	            0x742a	                            je 0x40006e0	       994	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x40006b6	        0x4180fe6c	                          cmp r14b, 0x6c	       994	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x40006ba	            0x7444	                            je 0x4000700	       994	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x40006bc	        0x4180fe4c	                          cmp r14b, 0x4c	       994	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x40006c0	            0x7436	                            je 0x40006f8	       994	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x40006c2	      0xba00000000	                              mov edx, 0	      1006	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1	CALL_11
0x40006c7	      0xbeee030000	                          mov esi, 0x3ee	      1006	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1	CALL_11
0x40006cc	      0xbf00000000	                              mov edi, 0	      1006	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1	CALL_11
0x40006d1	      0xe800000000	                          call 0x40006d6	      1006	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1	CALL_11
0x40006d6	    0x662e0f1f8400	                 nop word cs:[rax + rax]	      1006	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1	CALL_11
0x40006e0	    0xc74424080100	                  mov dword [rsp + 8], 1	       997	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x40006e8	        0x4983c701	                              add r15, 1	      1008	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5
0x40006ec	        0x450fb637	                  movzx r14d, byte [r15]	      1008	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5
0x40006f0	            0xeba7	                           jmp 0x4000699	      1008	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5
0x40006f2	    0x660f1f440000	                    nop word [rax + rax]	      1008	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5
0x40006f8	      0xbd02000000	                              mov ebp, 2	      1003	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x40006fd	            0xebe9	                           jmp 0x40006e8	      1003	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x40006ff	              0x90	                                     nop	      1003	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x4000700	          0x83c501	                              add ebp, 1	      1000	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x4000703	            0xebe3	                           jmp 0x40006e8	      1000	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x4000705	           0xf1f00	                         nop dword [rax]	      1000	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x4000708	        0x4883c002	                              add rax, 2	       925	bfd.c	FUNCTION_7	WHILE_1	ELSE_1	IF_3
0x400070c	      0xe975feffff	                           jmp 0x4000586	       925	bfd.c	FUNCTION_7	WHILE_1	ELSE_1	IF_3
0x4000711	     0xf1f80000000	                         nop dword [rax]	       925	bfd.c	FUNCTION_7	WHILE_1	ELSE_1	IF_3
0x4000718	    0xc744240cffff	      mov dword [rsp + 0xc], 0xffffffff 	       935	bfd.c	FUNCTION_7	WHILE_1	ELSE_2
0x4000720	      0xbd30000000	                           mov ebp, 0x30	       935	bfd.c	FUNCTION_7	WHILE_1	ELSE_2
0x4000725	      0xe919ffffff	                           jmp 0x4000643	       935	bfd.c	FUNCTION_7	WHILE_1	ELSE_2
0x400072a	    0x660f1f440000	                    nop word [rax + rax]	       935	bfd.c	FUNCTION_7	WHILE_1	ELSE_2
0x4000730	      0x450fb67701	              movzx r14d, byte [r15 + 1]	       971	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x4000735	        0x4180fe2a	                          cmp r14b, 0x2a	       971	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x4000739	     0xf848a000000	                            je 0x40007c9	       971	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x400073f	        0x410fb6c6	                         movzx eax, r14b	       989	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	ELSE_4	WHILE_4	CALL_9
0x4000743	        0x4983c701	                              add r15, 1	       970	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8
0x4000747	    0xf68400000000	                test byte [rax + rax], 4	       989	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	ELSE_4	WHILE_4	CALL_9
0x400074f	     0xf843affffff	                            je 0x400068f	       989	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	ELSE_4	WHILE_4	CALL_9
0x4000755	           0xf1f00	                         nop dword [rax]	       989	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	ELSE_4	WHILE_4	CALL_9
0x4000758	        0x4983c701	                              add r15, 1	       990	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	ELSE_4	WHILE_4
0x400075c	        0x410fb607	                   movzx eax, byte [r15]	       989	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	ELSE_4	WHILE_4	CALL_9
0x4000760	    0xf68400000000	                test byte [rax + rax], 4	       989	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	ELSE_4	WHILE_4	CALL_9
0x4000768	          0x4989c6	                            mov r14, rax	       989	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	ELSE_4	WHILE_4	CALL_9
0x400076b	            0x75eb	                           jne 0x4000758	       989	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	ELSE_4	WHILE_4	CALL_9
0x400076d	      0xe91dffffff	                           jmp 0x400068f	       989	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	ELSE_4	WHILE_4	CALL_9
0x4000772	    0x660f1f440000	                    nop word [rax + rax]	       989	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	ELSE_4	WHILE_4	CALL_9
0x4000778	      0x410fb64f01	               movzx ecx, byte [r15 + 1]	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x400077d	        0x498d7701	                      lea rsi, [r15 + 1]	       950	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5
0x4000781	          0x4489e0	                           mov eax, r12d	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x4000784	          0x80f930	                            cmp cl, 0x30	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x4000787	            0x741b	                            je 0x40007a4	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x4000789	           0xfbef9	                           movsx edi, cl	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x400078c	           0xfb6c9	                           movzx ecx, cl	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x400078f	    0xf68409000000	                test byte [rcx + rcx], 4	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x4000797	            0x740b	                            je 0x40007a4	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x4000799	      0x41807f0224	                cmp byte [r15 + 2], 0x24	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x400079e	     0xf84e7020000	                            je 0x4000a8b	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x40007a4	          0x83f808	                              cmp eax, 8	       957	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_7
0x40007a7	     0xf8749080000	                            ja 0x4000ff6	       957	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_7
0x40007ad	        0x48c1e004	                              shl rax, 4	       959	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5
0x40007b1	        0x4183c401	                             add r12d, 1	       960	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5
0x40007b5	        0x440fb636	                  movzx r14d, byte [rsi]	       960	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5
0x40007b9	    0xc74404100100	         mov dword [rsp + rax + 0x10], 1	       959	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5
0x40007c1	          0x4989f7	                            mov r15, rsi	       960	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5
0x40007c4	      0xe9bcfeffff	                           jmp 0x4000685	       960	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5
0x40007c9	      0x410fb64f02	               movzx ecx, byte [r15 + 2]	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x40007ce	        0x498d7702	                      lea rsi, [r15 + 2]	       975	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x40007d2	          0x4489e0	                           mov eax, r12d	       976	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x40007d5	          0x80f930	                            cmp cl, 0x30	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x40007d8	            0x741e	                            je 0x40007f8	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x40007da	           0xfbef9	                           movsx edi, cl	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x40007dd	           0xfb6c9	                           movzx ecx, cl	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x40007e0	    0xf68409000000	                test byte [rcx + rcx], 4	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x40007e8	            0x740e	                            je 0x40007f8	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x40007ea	      0x41807f0324	                cmp byte [r15 + 3], 0x24	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x40007ef	            0x7507	                           jne 0x40007f8	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x40007f1	          0x8d47cf	                   lea eax, [rdi - 0x31]	       979	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10
0x40007f4	        0x498d7704	                      lea rsi, [r15 + 4]	       980	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10
0x40007f8	          0x83f808	                              cmp eax, 8	       982	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_11
0x40007fb	     0xf8709080000	                            ja 0x400100a	       982	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_11
0x4000801	        0x48c1e004	                              shl rax, 4	       984	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x4000805	        0x4183c401	                             add r12d, 1	       985	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x4000809	        0x440fb636	                  movzx r14d, byte [rsi]	       985	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x400080d	    0xc74404100100	         mov dword [rsp + rax + 0x10], 1	       984	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x4000815	          0x4989f7	                            mov r15, rsi	       985	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x4000818	      0xe972feffff	                           jmp 0x400068f	       985	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x400081d	           0xf1f00	                         nop dword [rax]	       985	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x4000820	        0x418b5500	                    mov edx, dword [r13]	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x4000824	          0x83fa2f	                           cmp edx, 0x2f	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x4000827	     0xf8793010000	                            ja 0x40009c0	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x400082d	            0x89d1	                            mov ecx, edx	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x400082f	        0x49034d10	             add rcx, qword [r13 + 0x10]	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x4000833	          0x83c208	                              add edx, 8	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x4000836	        0x41895500	                    mov dword [r13], edx	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x400083a	          0x488b11	                    mov rdx, qword [rcx]	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x400083d	          0x488913	                    mov qword [rbx], rdx	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x4000840	        0x4883c310	                           add rbx, 0x10	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x4000844	          0x4839d8	                            cmp rax, rbx	      1100	bfd.c	FUNCTION_8	FOR_2
0x4000847	     0xf857bfdffff	                           jne 0x40005c8	      1100	bfd.c	FUNCTION_8	FOR_2
0x400084d	    0x488b3d000000	            mov rdi, qword [0x04000854] 	      1128	bfd.c	FUNCTION_8	CALL_9
0x4000854	      0xe800000000	                          call 0x4000859	      1128	bfd.c	FUNCTION_8	CALL_9
0x4000859	    0x488b0d000000	            mov rcx, qword [0x04000860] 	      1130	bfd.c	FUNCTION_8	IF_1
0x4000860	          0x4885c9	                           test rcx, rcx	      1130	bfd.c	FUNCTION_8	IF_1
0x4000863	     0xf846d040000	                            je 0x4000cd6	      1130	bfd.c	FUNCTION_8	IF_1
0x4000869	    0x488b3d000000	            mov rdi, qword [0x04000870] 	        97	stdio2.h	CALL_34
0x4000870	      0xba00000000	                              mov edx, 0	        97	stdio2.h	CALL_34
0x4000875	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_34
0x400087a	            0x31c0	                            xor eax, eax	        97	stdio2.h	CALL_34
0x400087c	      0xe800000000	                          call 0x4000881	        97	stdio2.h	CALL_34
0x4000881	    0x488b2d000000	            mov rbp, qword [0x04000888] 	      1135	bfd.c	FUNCTION_8	CALL_10
0x4000888	    0xc744240c0000	                mov dword [rsp + 0xc], 0	       661	bfd.c	FUNCTION_6
0x4000890	        0x488b0424	                    mov rax, qword [rsp]	       663	bfd.c	FUNCTION_6	WHILE_1
0x4000894	           0xfb600	                   movzx eax, byte [rax]	       663	bfd.c	FUNCTION_6	WHILE_1
0x4000897	            0x84c0	                             test al, al	       663	bfd.c	FUNCTION_6	WHILE_1
0x4000899	            0x744b	                            je 0x40008e6	       663	bfd.c	FUNCTION_6	WHILE_1
0x400089b	            0x3c25	                            cmp al, 0x25	       667	bfd.c	FUNCTION_6	WHILE_1	IF_1
0x400089d	     0xf8408020000	                            je 0x4000aab	       667	bfd.c	FUNCTION_6	WHILE_1	IF_1
0x40008a3	        0x488b1c24	                    mov rbx, qword [rsp]	       670	bfd.c	FUNCTION_6	WHILE_1	IF_1	CALL_1
0x40008a7	      0xbe25000000	                           mov esi, 0x25	       670	bfd.c	FUNCTION_6	WHILE_1	IF_1	CALL_1
0x40008ac	          0x4889df	                            mov rdi, rbx	       670	bfd.c	FUNCTION_6	WHILE_1	IF_1	CALL_1
0x40008af	      0xe800000000	                          call 0x40008b4	       670	bfd.c	FUNCTION_6	WHILE_1	IF_1	CALL_1
0x40008b4	          0x4885c0	                           test rax, rax	       671	bfd.c	FUNCTION_6	WHILE_1	IF_1	IF_2
0x40008b7	     0xf8423030000	                            je 0x4000be0	       671	bfd.c	FUNCTION_6	WHILE_1	IF_1	IF_2
0x40008bd	          0x4829d8	                            sub rax, rbx	        97	stdio2.h	CALL_34
0x40008c0	          0x4989d8	                             mov r8, rbx	        97	stdio2.h	CALL_34
0x40008c3	      0xba00000000	                              mov edx, 0	        97	stdio2.h	CALL_34
0x40008c8	          0x4889c1	                            mov rcx, rax	        97	stdio2.h	CALL_34
0x40008cb	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_34
0x40008d0	          0x4889ef	                            mov rdi, rbp	        97	stdio2.h	CALL_34
0x40008d3	            0x31c0	                            xor eax, eax	        97	stdio2.h	CALL_34
0x40008d5	      0xe800000000	                          call 0x40008da	        97	stdio2.h	CALL_34
0x40008da	          0x4863d0	                         movsxd rdx, eax	       675	bfd.c	FUNCTION_6	WHILE_1	IF_1
0x40008dd	        0x48011424	                    add qword [rsp], rdx	       675	bfd.c	FUNCTION_6	WHILE_1	IF_1
0x40008e1	          0x83f8ff	             cmp eax, 0xffffffffffffffff	       900	bfd.c	FUNCTION_6	WHILE_1	IF_21
0x40008e4	            0x75aa	                           jne 0x4000890	       900	bfd.c	FUNCTION_6	WHILE_1	IF_21
0x40008e6	    0x488b35000000	            mov rsi, qword [0x040008ed] 	      1139	bfd.c	FUNCTION_8	CALL_11
0x40008ed	      0xbf0a000000	                            mov edi, 0xa	      1139	bfd.c	FUNCTION_8	CALL_11
0x40008f2	      0xe800000000	                          call 0x40008f7	      1139	bfd.c	FUNCTION_8	CALL_11
0x40008f7	    0x488b3d000000	            mov rdi, qword [0x040008fe] 	      1140	bfd.c	FUNCTION_8	CALL_12
0x40008fe	      0xe800000000	                          call 0x4000903	      1140	bfd.c	FUNCTION_8	CALL_12
0x4000903	    0x488b84242801	           mov rax, qword [rsp + 0x128] 	      1141	bfd.c	FUNCTION_8
0x400090b	    0x644833042528	                xor rax, qword fs:[0x28]	      1141	bfd.c	FUNCTION_8
0x4000914	     0xf8504070000	                           jne 0x400101e	      1141	bfd.c	FUNCTION_8
0x400091a	    0x4881c4380100	                          add rsp, 0x138	      1141	bfd.c	FUNCTION_8
0x4000921	              0x5b	                                 pop rbx	      1141	bfd.c	FUNCTION_8
0x4000922	              0x5d	                                 pop rbp	      1141	bfd.c	FUNCTION_8
0x4000923	            0x415c	                                 pop r12	      1141	bfd.c	FUNCTION_8
0x4000925	            0x415d	                                 pop r13	      1141	bfd.c	FUNCTION_8
0x4000927	            0x415e	                                 pop r14	      1141	bfd.c	FUNCTION_8
0x4000929	            0x415f	                                 pop r15	      1141	bfd.c	FUNCTION_8
0x400092b	              0xc3	                                     ret	      1141	bfd.c	FUNCTION_8
0x400092c	         0xf1f4000	                         nop dword [rax]	      1141	bfd.c	FUNCTION_8
0x4000930	        0x418b5500	                    mov edx, dword [r13]	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4000934	          0x83fa2f	                           cmp edx, 0x2f	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4000937	     0xf87c4000000	                            ja 0x4000a01	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x400093d	            0x89d1	                            mov ecx, edx	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x400093f	        0x49034d10	             add rcx, qword [r13 + 0x10]	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4000943	          0x83c208	                              add edx, 8	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4000946	        0x41895500	                    mov dword [r13], edx	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x400094a	            0x8b11	                    mov edx, dword [rcx]	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x400094c	            0x8913	                    mov dword [rbx], edx	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x400094e	      0xe9edfeffff	                           jmp 0x4000840	      1106	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x4000953	       0xf1f440000	                   nop dword [rax + rax]	      1106	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x4000958	        0x418b5504	                mov edx, dword [r13 + 4]	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x400095c	    0x81faaf000000	                           cmp edx, 0xaf	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x4000962	     0xf87aa000000	                            ja 0x4000a12	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x4000968	            0x89d1	                            mov ecx, edx	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x400096a	        0x49034d10	             add rcx, qword [r13 + 0x10]	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x400096e	          0x83c210	                           add edx, 0x10	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x4000971	        0x41895504	                mov dword [r13 + 4], edx	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x4000975	        0xf20f1001	                 movsd xmm0, qword [rcx]	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x4000979	        0xf20f1103	                 movsd qword [rbx], xmm0	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x400097d	      0xe9befeffff	                           jmp 0x4000840	      1115	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x4000982	    0x660f1f440000	                    nop word [rax + rax]	      1115	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x4000988	        0x498b4d08	                mov rcx, qword [r13 + 8]	      1117	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_6
0x400098c	        0x488d510f	                    lea rdx, [rcx + 0xf]	      1117	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_6
0x4000990	        0x4883e2f0	             and rdx, 0xfffffffffffffff0	      1117	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_6
0x4000994	        0x488d4a10	                   lea rcx, [rdx + 0x10]	      1117	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_6
0x4000998	        0x49894d08	                mov qword [r13 + 8], rcx	      1117	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_6
0x400099c	            0xdb2a	                         fld xword [rdx]	      1117	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_6
0x400099e	            0xdb3b	                        fstp xword [rbx]	      1117	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_6
0x40009a0	      0xe99bfeffff	                           jmp 0x4000840	      1118	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x40009a5	           0xf1f00	                         nop dword [rax]	      1118	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x40009a8	      0xba00000000	                              mov edx, 0	      1123	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_8
0x40009ad	      0xbe63040000	                          mov esi, 0x463	      1123	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_8
0x40009b2	      0xbf00000000	                              mov edi, 0	      1123	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_8
0x40009b7	      0xe800000000	                          call 0x40009bc	      1123	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_8
0x40009bc	         0xf1f4000	                         nop dword [rax]	      1123	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_8
0x40009c0	        0x498b4d08	                mov rcx, qword [r13 + 8]	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x40009c4	        0x488d5108	                      lea rdx, [rcx + 8]	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x40009c8	        0x49895508	                mov qword [r13 + 8], rdx	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x40009cc	      0xe969feffff	                           jmp 0x400083a	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x40009d1	     0xf1f80000000	                         nop dword [rax]	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x40009d8	        0x8b4c240c	              mov ecx, dword [rsp + 0xc]	      1013	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_12
0x40009dc	        0x498d4701	                      lea rax, [r15 + 1]	      1011	bfd.c	FUNCTION_7	WHILE_1	ELSE_2
0x40009e0	            0x85c9	                           test ecx, ecx	      1013	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_12
0x40009e2	        0x410f48cc	                         cmovs ecx, r12d	      1013	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_12
0x40009e6	        0x894c240c	              mov dword [rsp + 0xc], ecx	      1013	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_12
0x40009ea	        0x418d4ebb	                   lea ecx, [r14 - 0x45]	      1016	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2
0x40009ee	          0x80f933	                            cmp cl, 0x33	      1016	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2
0x40009f1	     0xf87a0000000	                            ja 0x4000a97	      1016	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2
0x40009f7	           0xfb6c9	                           movzx ecx, cl	      1016	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2
0x40009fa	    0xff24cd000000	                       jmp qword [rcx*8]	      1016	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2
0x4000a01	        0x498b4d08	                mov rcx, qword [r13 + 8]	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4000a05	        0x488d5108	                      lea rdx, [rcx + 8]	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4000a09	        0x49895508	                mov qword [r13 + 8], rdx	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4000a0d	      0xe938ffffff	                           jmp 0x400094a	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4000a12	        0x498b4d08	                mov rcx, qword [r13 + 8]	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x4000a16	        0x488d5108	                      lea rdx, [rcx + 8]	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x4000a1a	        0x49895508	                mov qword [r13 + 8], rdx	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x4000a1e	      0xe952ffffff	                           jmp 0x4000975	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x4000a23	      0xb906000000	                              mov ecx, 6	      1069	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2
0x4000a28	      0x837c240c08	                cmp dword [rsp + 0xc], 8	      1080	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_16
0x4000a2d	     0xf87af050000	                            ja 0x4000fe2	      1080	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_16
0x4000a33	        0x8b54240c	              mov edx, dword [rsp + 0xc]	      1082	bfd.c	FUNCTION_7	WHILE_1	ELSE_2
0x4000a37	        0x4183c401	                             add r12d, 1	      1083	bfd.c	FUNCTION_7	WHILE_1	ELSE_2
0x4000a3b	        0x48c1e204	                              shl rdx, 4	      1082	bfd.c	FUNCTION_7	WHILE_1	ELSE_2
0x4000a3f	        0x894c1410	       mov dword [rsp + rdx + 0x10], ecx	      1082	bfd.c	FUNCTION_7	WHILE_1	ELSE_2
0x4000a43	      0xe93efbffff	                           jmp 0x4000586	      1082	bfd.c	FUNCTION_7	WHILE_1	ELSE_2
0x4000a48	      0x410fb64f01	               movzx ecx, byte [r15 + 1]	      1072	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_15
0x4000a4d	        0x498d5702	                      lea rdx, [r15 + 2]	      1073	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_15
0x4000a51	          0x8d71bf	                   lea esi, [rcx - 0x41]	      1072	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_15
0x4000a54	      0xb906000000	                              mov ecx, 6	      1074	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2
0x4000a59	        0x4080fe01	                              cmp sil, 1	      1073	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_15
0x4000a5d	        0x480f46c2	                         cmovbe rax, rdx	      1073	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_15
0x4000a61	            0xebc5	                           jmp 0x4000a28	      1073	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_15
0x4000a63	        0x8b742408	                mov esi, dword [rsp + 8]	      1026	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_13
0x4000a67	      0xb901000000	                              mov ecx, 1	      1027	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_13
0x4000a6c	            0x85f6	                           test esi, esi	      1026	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_13
0x4000a6e	            0x75b8	                           jne 0x4000a28	      1026	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_13
0x4000a70	            0x85ed	                           test ebp, ebp	      1030	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	ELSE_5	SWITCH_3
0x4000a72	            0x74b4	                            je 0x4000a28	      1030	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	ELSE_5	SWITCH_3
0x4000a74	            0x31c9	                            xor ecx, ecx	      1041	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	ELSE_5	SWITCH_3
0x4000a76	          0x83fd01	                              cmp ebp, 1	      1041	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	ELSE_5	SWITCH_3
0x4000a79	           0xf95c1	                                setne cl	      1041	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	ELSE_5	SWITCH_3
0x4000a7c	          0x83c102	                              add ecx, 2	      1041	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	ELSE_5	SWITCH_3
0x4000a7f	            0xeba7	                           jmp 0x4000a28	      1041	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	ELSE_5	SWITCH_3
0x4000a81	          0x83fd01	                              cmp ebp, 1	      1057	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_14
0x4000a84	            0x19c9	                            sbb ecx, ecx	      1057	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_14
0x4000a86	          0x83c105	                              add ecx, 5	      1057	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_14
0x4000a89	            0xeb9d	                           jmp 0x4000a28	      1057	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_14
0x4000a8b	          0x8d47cf	                   lea eax, [rdi - 0x31]	       954	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6
0x4000a8e	        0x498d7703	                      lea rsi, [r15 + 3]	       955	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6
0x4000a92	      0xe90dfdffff	                           jmp 0x40007a4	       955	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6
0x4000a97	      0xba00000000	                              mov edx, 0	      1077	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	CALL_12
0x4000a9c	      0xbe35040000	                          mov esi, 0x435	      1077	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	CALL_12
0x4000aa1	      0xbf00000000	                              mov edi, 0	      1077	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	CALL_12
0x4000aa6	      0xe800000000	                          call 0x4000aab	      1077	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	CALL_12
0x4000aab	        0x488b0424	                    mov rax, qword [rsp]	       677	bfd.c	FUNCTION_6	WHILE_1	ELSE_2	IF_3
0x4000aaf	      0x440fb66001	              movzx r12d, byte [rax + 1]	       677	bfd.c	FUNCTION_6	WHILE_1	ELSE_2	IF_3
0x4000ab4	        0x4180fc25	                          cmp r12b, 0x25	       677	bfd.c	FUNCTION_6	WHILE_1	ELSE_2	IF_3
0x4000ab8	     0xf8482030000	                            je 0x4000e40	       677	bfd.c	FUNCTION_6	WHILE_1	ELSE_2	IF_3
0x4000abe	        0x488b0c24	                    mov rcx, qword [rsp]	       691	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x4000ac2	        0x4180fc30	                          cmp r12b, 0x30	       695	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4	CALL_3
0x4000ac6	    0xc68424a00000	            mov byte [rsp + 0xa0], 0x25 	       691	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x4000ace	        0x4c8d7901	                      lea r15, [rcx + 1]	       691	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x4000ad2	     0xf84eb010000	                            je 0x4000cc3	       695	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4	CALL_3
0x4000ad8	        0x410fb6c4	                         movzx eax, r12b	       695	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4	CALL_3
0x4000adc	        0x450fbeec	                        movsx r13d, r12b	       695	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4	CALL_3
0x4000ae0	    0xc7442408ffff	        mov dword [rsp + 8], 0xffffffff 	       694	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x4000ae8	    0xf68400000000	                test byte [rax + rax], 4	       695	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4	CALL_3
0x4000af0	            0x740a	                            je 0x4000afc	       695	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4	CALL_3
0x4000af2	        0x80790224	                cmp byte [rcx + 2], 0x24	       695	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4	CALL_3
0x4000af6	     0xf845b030000	                            je 0x4000e57	       695	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4	CALL_3
0x4000afc	    0x488d9c24a100	                   lea rbx, [rsp + 0xa1]	       694	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x4000b04	            0xeb1d	                           jmp 0x4000b23	       694	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x4000b06	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       694	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x4000b10	        0x4983c701	                              add r15, 1	       703	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2
0x4000b14	        0x450fbe2f	                  movsx r13d, byte [r15]	       703	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2
0x4000b18	        0x4883c301	                              add rbx, 1	       703	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2
0x4000b1c	        0x448863ff	                mov byte [rbx - 1], r12b	       703	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2
0x4000b20	          0x4589ec	                          mov r12d, r13d	       703	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2
0x4000b23	          0x4489ee	                           mov esi, r13d	       702	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2	CALL_4
0x4000b26	      0xbf00000000	                              mov edi, 0	       702	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2	CALL_4
0x4000b2b	      0xe800000000	                          call 0x4000b30	       702	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2	CALL_4
0x4000b30	          0x4885c0	                           test rax, rax	       702	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2	CALL_4
0x4000b33	            0x75db	                           jne 0x4000b10	       702	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2	CALL_4
0x4000b35	        0x4180fc2a	                          cmp r12b, 0x2a	       705	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5
0x4000b39	     0xf840f010000	                            je 0x4000c4e	       705	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5
0x4000b3f	        0x450fb6ed	                        movzx r13d, r13b	       723	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3	CALL_7
0x4000b43	    0x43f6842d0000	                test byte [r13 + r13], 4	       723	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3	CALL_7
0x4000b4c	            0x741f	                            je 0x4000b6d	       723	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3	CALL_7
0x4000b4e	            0x6690	                                     nop	       723	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3	CALL_7
0x4000b50	        0x4983c701	                              add r15, 1	       724	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3
0x4000b54	        0x410fb607	                   movzx eax, byte [r15]	       723	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3	CALL_7
0x4000b58	        0x4883c301	                              add rbx, 1	       724	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3
0x4000b5c	        0x448863ff	                mov byte [rbx - 1], r12b	       724	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3
0x4000b60	    0xf68400000000	                test byte [rax + rax], 4	       723	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3	CALL_7
0x4000b68	          0x4989c4	                            mov r12, rax	       723	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3	CALL_7
0x4000b6b	            0x75e3	                           jne 0x4000b50	       723	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3	CALL_7
0x4000b6d	        0x4180fc2e	                          cmp r12b, 0x2e	       727	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7
0x4000b71	     0xf8486000000	                            je 0x4000bfd	       727	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7
0x4000b77	          0x4531f6	                          xor r14d, r14d	       763	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000b7a	          0x4531ed	                          xor r13d, r13d	       763	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000b7d	        0x410fbef4	                         movsx esi, r12b	       752	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	CALL_11
0x4000b81	      0xbf00000000	                              mov edi, 0	       752	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	CALL_11
0x4000b86	      0xe800000000	                          call 0x4000b8b	       752	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	CALL_11
0x4000b8b	          0x4885c0	                           test rax, rax	       752	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	CALL_11
0x4000b8e	     0xf8462010000	                            je 0x4000cf6	       752	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	CALL_11
0x4000b94	        0x4180fc68	                          cmp r12b, 0x68	       754	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000b98	            0x7420	                            je 0x4000bba	       754	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000b9a	        0x4180fc6c	                          cmp r12b, 0x6c	       754	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000b9e	            0x743a	                            je 0x4000bda	       754	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000ba0	        0x4180fc4c	                          cmp r12b, 0x4c	       754	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000ba4	            0x742c	                            je 0x4000bd2	       754	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000ba6	      0xba00000000	                              mov edx, 0	       766	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1	CALL_12
0x4000bab	      0xbefe020000	                          mov esi, 0x2fe	       766	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1	CALL_12
0x4000bb0	      0xbf00000000	                              mov edi, 0	       766	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1	CALL_12
0x4000bb5	      0xe800000000	                          call 0x4000bba	       766	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1	CALL_12
0x4000bba	    0x41be01000000	                             mov r14d, 1	       757	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000bc0	        0x4883c301	                              add rbx, 1	       768	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5
0x4000bc4	        0x4983c701	                              add r15, 1	       768	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5
0x4000bc8	        0x448863ff	                mov byte [rbx - 1], r12b	       768	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5
0x4000bcc	        0x450fb627	                  movzx r12d, byte [r15]	       768	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5
0x4000bd0	            0xebab	                           jmp 0x4000b7d	       768	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5
0x4000bd2	    0x41bd02000000	                             mov r13d, 2	       763	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000bd8	            0xebe6	                           jmp 0x4000bc0	       763	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000bda	        0x4183c501	                             add r13d, 1	       760	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000bde	            0xebe0	                           jmp 0x4000bc0	       760	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000be0	        0x488b0c24	                    mov rcx, qword [rsp]	        97	stdio2.h	CALL_34
0x4000be4	      0xba00000000	                              mov edx, 0	        97	stdio2.h	CALL_34
0x4000be9	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_34
0x4000bee	          0x4889ef	                            mov rdi, rbp	        97	stdio2.h	CALL_34
0x4000bf1	            0x31c0	                            xor eax, eax	        97	stdio2.h	CALL_34
0x4000bf3	      0xe800000000	                          call 0x4000bf8	        97	stdio2.h	CALL_34
0x4000bf8	      0xe9ddfcffff	                           jmp 0x40008da	        97	stdio2.h	CALL_34
0x4000bfd	      0x450fb66701	              movzx r12d, byte [r15 + 1]	       731	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8
0x4000c02	        0x4c8d7301	                      lea r14, [rbx + 1]	       730	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7
0x4000c06	          0xc6032e	                    mov byte [rbx], 0x2e	       730	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7
0x4000c09	        0x4180fc2a	                          cmp r12b, 0x2a	       731	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8
0x4000c0d	     0xf845d020000	                            je 0x4000e70	       731	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8
0x4000c13	        0x410fb6c4	                         movzx eax, r12b	       749	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4	CALL_10
0x4000c17	        0x4983c701	                              add r15, 1	       730	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7
0x4000c1b	          0x4c89f3	                            mov rbx, r14	       749	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4	CALL_10
0x4000c1e	    0xf68400000000	                test byte [rax + rax], 4	       749	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4	CALL_10
0x4000c26	     0xf844bffffff	                            je 0x4000b77	       749	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4	CALL_10
0x4000c2c	        0x4983c701	                              add r15, 1	       750	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4
0x4000c30	        0x410fb607	                   movzx eax, byte [r15]	       749	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4	CALL_10
0x4000c34	        0x4883c301	                              add rbx, 1	       750	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4
0x4000c38	        0x448863ff	                mov byte [rbx - 1], r12b	       750	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4
0x4000c3c	    0xf68400000000	                test byte [rax + rax], 4	       749	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4	CALL_10
0x4000c44	          0x4989c4	                            mov r12, rax	       749	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4	CALL_10
0x4000c47	            0x75e3	                           jne 0x4000c2c	       749	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4	CALL_10
0x4000c49	      0xe929ffffff	                           jmp 0x4000b77	       749	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4	CALL_10
0x4000c4e	      0x410fb65701	               movzx edx, byte [r15 + 1]	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_5
0x4000c53	        0x8b4c240c	              mov ecx, dword [rsp + 0xc]	       711	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5
0x4000c57	        0x4d8d6f01	                      lea r13, [r15 + 1]	       710	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5
0x4000c5b	            0x89c8	                            mov eax, ecx	       711	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5
0x4000c5d	          0x80fa30	                            cmp dl, 0x30	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_5
0x4000c60	            0x741b	                            je 0x4000c7d	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_5
0x4000c62	           0xfbef2	                           movsx esi, dl	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_5
0x4000c65	           0xfb6d2	                           movzx edx, dl	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_5
0x4000c68	    0xf68412000000	                test byte [rdx + rdx], 4	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_5
0x4000c70	            0x740b	                            je 0x4000c7d	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_5
0x4000c72	      0x41807f0224	                cmp byte [r15 + 2], 0x24	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_5
0x4000c77	     0xf8468020000	                            je 0x4000ee5	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_5
0x4000c7d	        0x48c1e004	                              shl rax, 4	       717	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	CALL_6
0x4000c81	          0x4889df	                            mov rdi, rbx	        33	stdio2.h	FUNCTION_56	CALL_1
0x4000c84	      0xb900000000	                              mov ecx, 0	        33	stdio2.h	FUNCTION_56	CALL_1
0x4000c89	        0x8b540410	      mov edx, dword [rsp + rax + 0x10] 	        33	stdio2.h	FUNCTION_56	CALL_1
0x4000c8d	      0x448b440410	      mov r8d, dword [rsp + rax + 0x10] 	        33	stdio2.h	FUNCTION_56	CALL_1
0x4000c92	      0xbe01000000	                              mov esi, 1	        33	stdio2.h	FUNCTION_56	CALL_1
0x4000c97	            0x31c0	                            xor eax, eax	        33	stdio2.h	FUNCTION_56	CALL_1
0x4000c99	      0x8344240c01	                add dword [rsp + 0xc], 1	       718	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5
0x4000c9e	          0x4d89ef	                            mov r15, r13	       719	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5
0x4000ca1	          0xc1fa1f	                           sar edx, 0x1f	        33	stdio2.h	FUNCTION_56	CALL_1
0x4000ca4	          0x4131d0	                            xor r8d, edx	        33	stdio2.h	FUNCTION_56	CALL_1
0x4000ca7	          0x4129d0	                            sub r8d, edx	        33	stdio2.h	FUNCTION_56	CALL_1
0x4000caa	      0xba7f000000	                           mov edx, 0x7f	        33	stdio2.h	FUNCTION_56	CALL_1
0x4000caf	      0xe800000000	                          call 0x4000cb4	        33	stdio2.h	FUNCTION_56	CALL_1
0x4000cb4	            0x4898	                                    cdqe	       719	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5
0x4000cb6	      0x450fb66500	                  movzx r12d, byte [r13]	       719	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5
0x4000cbb	          0x4801c3	                            add rbx, rax	       719	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5
0x4000cbe	      0xe9aafeffff	                           jmp 0x4000b6d	       719	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5
0x4000cc3	    0xc7442408ffff	        mov dword [rsp + 8], 0xffffffff 	       694	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x4000ccb	    0x41bd30000000	                          mov r13d, 0x30	       694	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x4000cd1	      0xe926feffff	                           jmp 0x4000afc	       694	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x4000cd6	    0x488b0d000000	            mov rcx, qword [0x04000cdd] 	        97	stdio2.h	CALL_34
0x4000cdd	      0xba05000000	                              mov edx, 5	        97	stdio2.h	CALL_34
0x4000ce2	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_34
0x4000ce7	      0xbf00000000	                              mov edi, 0	        97	stdio2.h	CALL_34
0x4000cec	      0xe800000000	                          call 0x4000cf1	        97	stdio2.h	CALL_34
0x4000cf1	      0xe98bfbffff	                           jmp 0x4000881	        97	stdio2.h	CALL_34
0x4000cf6	        0x498d4701	                      lea rax, [r15 + 1]	       772	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x4000cfa	      0x418d5424bb	                   lea edx, [r12 - 0x45]	       777	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x4000cff	          0x448823	                    mov byte [rbx], r12b	       772	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x4000d02	        0xc6430100	                   mov byte [rbx + 1], 0	       773	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x4000d06	        0x48890424	                    mov qword [rsp], rax	       772	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x4000d0a	        0x8b442408	                mov eax, dword [rsp + 8]	       775	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_10
0x4000d0e	            0x85c0	                           test eax, eax	       775	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_10
0x4000d10	       0xf4844240c	            cmovs eax, dword [rsp + 0xc]	       775	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_10
0x4000d15	          0x80fa33	                            cmp dl, 0x33	       777	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x4000d18	        0x89442408	                mov dword [rsp + 8], eax	       775	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_10
0x4000d1c	     0xf87d4000000	                            ja 0x4000df6	       777	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x4000d22	           0xfb6d2	                           movzx edx, dl	       777	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x4000d25	    0xff24d5000000	                       jmp qword [rdx*8]	       777	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x4000d2c	        0x8b442408	                mov eax, dword [rsp + 8]	       893	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_13
0x4000d30	    0x488d9424a000	                   lea rdx, [rsp + 0xa0]	        97	stdio2.h	CALL_34
0x4000d38	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_34
0x4000d3d	          0x4889ef	                            mov rdi, rbp	        97	stdio2.h	CALL_34
0x4000d40	        0x48c1e004	                              shl rax, 4	       893	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_13
0x4000d44	      0x488b4c0410	      mov rcx, qword [rsp + rax + 0x10] 	        97	stdio2.h	CALL_34
0x4000d49	            0x31c0	                            xor eax, eax	        97	stdio2.h	CALL_34
0x4000d4b	      0xe800000000	                          call 0x4000d50	        97	stdio2.h	CALL_34
0x4000d50	      0x8344240c01	                add dword [rsp + 0xc], 1	       898	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x4000d55	      0xe987fbffff	                           jmp 0x40008e1	       898	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x4000d5a	      0x410fb64701	               movzx eax, byte [r15 + 1]	       845	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13
0x4000d5f	            0x3c41	                            cmp al, 0x41	       845	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13
0x4000d61	     0xf84ef010000	                            je 0x4000f56	       845	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13
0x4000d67	            0x3c42	                            cmp al, 0x42	       874	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18
0x4000d69	            0x75c1	                           jne 0x4000d2c	       874	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18
0x4000d6b	        0x498d4702	                      lea rax, [r15 + 2]	       878	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18
0x4000d6f	        0x48890424	                    mov qword [rsp], rax	       878	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18
0x4000d73	        0x8b442408	                mov eax, dword [rsp + 8]	       879	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18
0x4000d77	        0x48c1e004	                              shl rax, 4	       879	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18
0x4000d7b	      0x488b440410	      mov rax, qword [rsp + rax + 0x10] 	       879	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18
0x4000d80	          0x4885c0	                           test rax, rax	       880	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	IF_19
0x4000d83	     0xf84b9010000	                            je 0x4000f42	       880	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	IF_19
0x4000d89	    0x488b90d00000	            mov rdx, qword [rax + 0xd0] 	       884	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	ELSE_11	IF_20
0x4000d90	          0x4885d2	                           test rdx, rdx	       884	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	ELSE_11	IF_20
0x4000d93	            0x740a	                            je 0x4000d9f	       884	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	ELSE_11	IF_20
0x4000d95	        0xf6424801	               test byte [rdx + 0x48], 1	       885	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	ELSE_11	IF_20	CALL_20
0x4000d99	     0xf8484010000	                            je 0x4000f23	       885	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	ELSE_11	IF_20	CALL_20
0x4000d9f	          0x488b08	                    mov rcx, qword [rax]	        97	stdio2.h	CALL_34
0x4000da2	      0xba00000000	                              mov edx, 0	        97	stdio2.h	CALL_34
0x4000da7	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_34
0x4000dac	          0x4889ef	                            mov rdi, rbp	        97	stdio2.h	CALL_34
0x4000daf	            0x31c0	                            xor eax, eax	        97	stdio2.h	CALL_34
0x4000db1	      0xe800000000	                          call 0x4000db6	        97	stdio2.h	CALL_34
0x4000db6	            0xeb98	                           jmp 0x4000d50	        97	stdio2.h	CALL_34
0x4000db8	     0xf1f84000000	                   nop dword [rax + rax]	        97	stdio2.h	CALL_34
0x4000dc0	        0x8b442408	                mov eax, dword [rsp + 8]	       829	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_12
0x4000dc4	        0x48c1e004	                              shl rax, 4	       829	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_12
0x4000dc8	          0x4585ed	                         test r13d, r13d	       828	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_12
0x4000dcb	     0xf8520010000	                           jne 0x4000ef1	       828	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_12
0x4000dd1	    0xf20f10440410	   movsd xmm0, qword [rsp + rax + 0x10] 	        97	stdio2.h	CALL_34
0x4000dd7	    0x488d9424a000	                   lea rdx, [rsp + 0xa0]	        97	stdio2.h	CALL_34
0x4000ddf	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_34
0x4000de4	          0x4889ef	                            mov rdi, rbp	        97	stdio2.h	CALL_34
0x4000de7	      0xb801000000	                              mov eax, 1	        97	stdio2.h	CALL_34
0x4000dec	      0xe800000000	                          call 0x4000df1	        97	stdio2.h	CALL_34
0x4000df1	      0xe95affffff	                           jmp 0x4000d50	        97	stdio2.h	CALL_34
0x4000df6	      0xba00000000	                              mov edx, 0	       896	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	CALL_21
0x4000dfb	      0xbe80030000	                          mov esi, 0x380	       896	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	CALL_21
0x4000e00	      0xbf00000000	                              mov edi, 0	       896	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	CALL_21
0x4000e05	      0xe800000000	                          call 0x4000e0a	       896	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	CALL_21
0x4000e0a	          0x4585f6	                         test r14d, r14d	       790	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_11
0x4000e0d	            0x7509	                           jne 0x4000e18	       790	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_11
0x4000e0f	          0x4585ed	                         test r13d, r13d	       794	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x4000e12	     0xf8514ffffff	                           jne 0x4000d2c	       794	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x4000e18	        0x8b442408	                mov eax, dword [rsp + 8]	       797	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x4000e1c	    0x488d9424a000	                   lea rdx, [rsp + 0xa0]	        97	stdio2.h	CALL_34
0x4000e24	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_34
0x4000e29	          0x4889ef	                            mov rdi, rbp	        97	stdio2.h	CALL_34
0x4000e2c	        0x48c1e004	                              shl rax, 4	       797	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x4000e30	        0x8b4c0410	      mov ecx, dword [rsp + rax + 0x10] 	        97	stdio2.h	CALL_34
0x4000e34	            0x31c0	                            xor eax, eax	        97	stdio2.h	CALL_34
0x4000e36	      0xe800000000	                          call 0x4000e3b	        97	stdio2.h	CALL_34
0x4000e3b	      0xe910ffffff	                           jmp 0x4000d50	        97	stdio2.h	CALL_34
0x4000e40	          0x4889ee	                            mov rsi, rbp	       679	bfd.c	FUNCTION_6	WHILE_1	ELSE_2	IF_3	CALL_2
0x4000e43	      0xbf25000000	                           mov edi, 0x25	       679	bfd.c	FUNCTION_6	WHILE_1	ELSE_2	IF_3	CALL_2
0x4000e48	      0xe800000000	                          call 0x4000e4d	       679	bfd.c	FUNCTION_6	WHILE_1	ELSE_2	IF_3	CALL_2
0x4000e4d	      0x4883042402	                      add qword [rsp], 2	       681	bfd.c	FUNCTION_6	WHILE_1	ELSE_2	IF_3
0x4000e52	      0xe939faffff	                           jmp 0x4000890	       681	bfd.c	FUNCTION_6	WHILE_1	ELSE_2	IF_3
0x4000e57	        0x418d45cf	                   lea eax, [r13 - 0x31]	       697	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4
0x4000e5b	      0x440fbe6903	              movsx r13d, byte [rcx + 3]	       697	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4
0x4000e60	        0x4c8d7903	                      lea r15, [rcx + 3]	       698	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4
0x4000e64	        0x89442408	                mov dword [rsp + 8], eax	       697	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4
0x4000e68	          0x4589ec	                          mov r12d, r13d	       697	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4
0x4000e6b	      0xe98cfcffff	                           jmp 0x4000afc	       697	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4
0x4000e70	      0x410fb65702	               movzx edx, byte [r15 + 2]	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_8
0x4000e75	        0x8b4c240c	              mov ecx, dword [rsp + 0xc]	       737	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8
0x4000e79	        0x4d8d6f02	                      lea r13, [r15 + 2]	       736	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8
0x4000e7d	            0x89c8	                            mov eax, ecx	       737	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8
0x4000e7f	          0x80fa30	                            cmp dl, 0x30	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_8
0x4000e82	            0x7417	                            je 0x4000e9b	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_8
0x4000e84	           0xfbef2	                           movsx esi, dl	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_8
0x4000e87	           0xfb6d2	                           movzx edx, dl	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_8
0x4000e8a	    0xf68412000000	                test byte [rdx + rdx], 4	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_8
0x4000e92	            0x7407	                            je 0x4000e9b	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_8
0x4000e94	      0x41807f0324	                cmp byte [r15 + 3], 0x24	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_8
0x4000e99	            0x747c	                            je 0x4000f17	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_8
0x4000e9b	        0x48c1e004	                              shl rax, 4	       743	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	CALL_9
0x4000e9f	      0xb900000000	                              mov ecx, 0	        33	stdio2.h	FUNCTION_56	CALL_1
0x4000ea4	      0xbe01000000	                              mov esi, 1	        33	stdio2.h	FUNCTION_56	CALL_1
0x4000ea9	        0x8b540410	      mov edx, dword [rsp + rax + 0x10] 	        33	stdio2.h	FUNCTION_56	CALL_1
0x4000ead	      0x448b440410	      mov r8d, dword [rsp + rax + 0x10] 	        33	stdio2.h	FUNCTION_56	CALL_1
0x4000eb2	          0x4c89f7	                            mov rdi, r14	        33	stdio2.h	FUNCTION_56	CALL_1
0x4000eb5	            0x31c0	                            xor eax, eax	        33	stdio2.h	FUNCTION_56	CALL_1
0x4000eb7	      0x8344240c01	                add dword [rsp + 0xc], 1	       744	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8
0x4000ebc	          0x4d89ef	                            mov r15, r13	       745	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8
0x4000ebf	          0xc1fa1f	                           sar edx, 0x1f	        33	stdio2.h	FUNCTION_56	CALL_1
0x4000ec2	          0x4131d0	                            xor r8d, edx	        33	stdio2.h	FUNCTION_56	CALL_1
0x4000ec5	          0x4129d0	                            sub r8d, edx	        33	stdio2.h	FUNCTION_56	CALL_1
0x4000ec8	    0x48c7c2ffffff	             mov rdx, 0xffffffffffffffff	        33	stdio2.h	FUNCTION_56	CALL_1
0x4000ecf	      0xe800000000	                          call 0x4000ed4	        33	stdio2.h	FUNCTION_56	CALL_1
0x4000ed4	          0x4c63c8	                          movsxd r9, eax	       745	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8
0x4000ed7	      0x450fb66500	                  movzx r12d, byte [r13]	       745	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8
0x4000edc	        0x4b8d1c0e	                     lea rbx, [r14 + r9]	       745	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8
0x4000ee0	      0xe992fcffff	                           jmp 0x4000b77	       745	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8
0x4000ee5	          0x8d46cf	                   lea eax, [rsi - 0x31]	       714	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6
0x4000ee8	        0x4d8d6f03	                      lea r13, [r15 + 3]	       715	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6
0x4000eec	      0xe98cfdffff	                           jmp 0x4000c7d	       715	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6
0x4000ef1	        0xff740418	           push qword [rsp + rax + 0x18]	        97	stdio2.h	CALL_34
0x4000ef5	        0xff740418	           push qword [rsp + rax + 0x18]	        97	stdio2.h	CALL_34
0x4000ef9	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_34
0x4000efe	          0x4889ef	                            mov rdi, rbp	        97	stdio2.h	CALL_34
0x4000f01	            0x31c0	                            xor eax, eax	        97	stdio2.h	CALL_34
0x4000f03	    0x488d9424b000	                   lea rdx, [rsp + 0xb0]	        97	stdio2.h	CALL_34
0x4000f0b	      0xe800000000	                          call 0x4000f10	        97	stdio2.h	CALL_34
0x4000f10	              0x5a	                                 pop rdx	        97	stdio2.h	CALL_34
0x4000f11	              0x59	                                 pop rcx	        97	stdio2.h	CALL_34
0x4000f12	      0xe939feffff	                           jmp 0x4000d50	        97	stdio2.h	CALL_34
0x4000f17	          0x8d46cf	                   lea eax, [rsi - 0x31]	       740	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9
0x4000f1a	        0x4d8d6f04	                      lea r13, [r15 + 4]	       741	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9
0x4000f1e	      0xe978ffffff	                           jmp 0x4000e9b	       741	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9
0x4000f23	          0x4c8b00	                     mov r8, qword [rax]	        97	stdio2.h	CALL_34
0x4000f26	          0x488b0a	                    mov rcx, qword [rdx]	        97	stdio2.h	CALL_34
0x4000f29	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_34
0x4000f2e	      0xba00000000	                              mov edx, 0	        97	stdio2.h	CALL_34
0x4000f33	          0x4889ef	                            mov rdi, rbp	        97	stdio2.h	CALL_34
0x4000f36	            0x31c0	                            xor eax, eax	        97	stdio2.h	CALL_34
0x4000f38	      0xe800000000	                          call 0x4000f3d	        97	stdio2.h	CALL_34
0x4000f3d	      0xe90efeffff	                           jmp 0x4000d50	        97	stdio2.h	CALL_34
0x4000f42	      0xba00000000	                              mov edx, 0	       883	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	CALL_19
0x4000f47	      0xbe73030000	                          mov esi, 0x373	       883	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	CALL_19
0x4000f4c	      0xbf00000000	                              mov edi, 0	       883	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	CALL_19
0x4000f51	      0xe800000000	                          call 0x4000f56	       883	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	CALL_19
0x4000f56	        0x498d4702	                      lea rax, [r15 + 2]	       852	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13
0x4000f5a	        0x48890424	                    mov qword [rsp], rax	       852	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13
0x4000f5e	        0x8b442408	                mov eax, dword [rsp + 8]	       853	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13
0x4000f62	        0x48c1e004	                              shl rax, 4	       853	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13
0x4000f66	      0x488b440410	      mov rax, qword [rsp + rax + 0x10] 	       853	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13
0x4000f6b	          0x4885c0	                           test rax, rax	       854	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_14
0x4000f6e	     0xf84da000000	                            je 0x400104e	       854	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_14
0x4000f74	    0x488b90f00000	            mov rdx, qword [rax + 0xf0] 	       858	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13
0x4000f7b	          0x4885d2	                           test rdx, rdx	       859	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15
0x4000f7e	     0xf841bfeffff	                            je 0x4000d9f	       859	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15
0x4000f84	        0x488b5208	                mov rdx, qword [rdx + 8]	       860	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15	CALL_14
0x4000f88	          0x8b5208	                mov edx, dword [rdx + 8]	       860	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15	CALL_14
0x4000f8b	          0x83fa05	                              cmp edx, 5	       860	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15	CALL_14
0x4000f8e	     0xf848f000000	                            je 0x4001023	       860	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15	CALL_14
0x4000f94	          0x83fa02	                              cmp edx, 2	       865	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_17
0x4000f97	     0xf8502feffff	                           jne 0x4000d9f	       865	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_17
0x4000f9d	    0x488b90e00000	            mov rdx, qword [rax + 0xe0] 	       866	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_18
0x4000fa4	          0x4885d2	                           test rdx, rdx	       866	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_18
0x4000fa7	     0xf84f2fdffff	                            je 0x4000d9f	       866	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_18
0x4000fad	        0x488b5240	            mov rdx, qword [rdx + 0x40] 	       866	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_18
0x4000fb1	          0x4885d2	                           test rdx, rdx	       866	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_18
0x4000fb4	     0xf84e5fdffff	                            je 0x4000d9f	       866	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_18
0x4000fba	          0x4c8b02	                     mov r8, qword [rdx]	       868	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16
0x4000fbd	          0x4d85c0	                             test r8, r8	       869	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_17
0x4000fc0	     0xf84d9fdffff	                            je 0x4000d9f	       869	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_17
0x4000fc6	          0x488b08	                    mov rcx, qword [rax]	        97	stdio2.h	CALL_34
0x4000fc9	      0xba00000000	                              mov edx, 0	        97	stdio2.h	CALL_34
0x4000fce	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_34
0x4000fd3	          0x4889ef	                            mov rdi, rbp	        97	stdio2.h	CALL_34
0x4000fd6	            0x31c0	                            xor eax, eax	        97	stdio2.h	CALL_34
0x4000fd8	      0xe800000000	                          call 0x4000fdd	        97	stdio2.h	CALL_34
0x4000fdd	      0xe96efdffff	                           jmp 0x4000d50	        97	stdio2.h	CALL_34
0x4000fe2	      0xba00000000	                              mov edx, 0	      1081	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	CALL_13
0x4000fe7	      0xbe39040000	                          mov esi, 0x439	      1081	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	CALL_13
0x4000fec	      0xbf00000000	                              mov edi, 0	      1081	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	CALL_13
0x4000ff1	      0xe800000000	                          call 0x4000ff6	      1081	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	CALL_13
0x4000ff6	      0xba00000000	                              mov edx, 0	       958	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	CALL_5
0x4000ffb	      0xbebe030000	                          mov esi, 0x3be	       958	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	CALL_5
0x4001000	      0xbf00000000	                              mov edi, 0	       958	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	CALL_5
0x4001005	      0xe800000000	                          call 0x400100a	       958	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	CALL_5
0x400100a	      0xba00000000	                              mov edx, 0	       983	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	CALL_8
0x400100f	      0xbed7030000	                          mov esi, 0x3d7	       983	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	CALL_8
0x4001014	      0xbf00000000	                              mov edi, 0	       983	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	CALL_8
0x4001019	      0xe800000000	                          call 0x400101e	       983	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	CALL_8
0x400101e	      0xe800000000	                          call 0x4001023	      1141	bfd.c	FUNCTION_8
0x4001023	    0x488b90e00000	            mov rdx, qword [rax + 0xe0] 	       861	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15	CALL_15
0x400102a	    0x4883bac00000	               cmp qword [rdx + 0xc0], 0	       861	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15	CALL_15
0x4001032	     0xf8467fdffff	                            je 0x4000d9f	       861	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15	CALL_15
0x4001038	        0xf6402302	               test byte [rax + 0x23], 2	       862	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15
0x400103c	     0xf855dfdffff	                           jne 0x4000d9f	       862	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15
0x4001042	    0x4c8b82b00000	              mov r8, qword [rdx + 0xb0]	       863	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	CALL_16
0x4001049	      0xe96fffffff	                           jmp 0x4000fbd	       863	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	CALL_16
0x400104e	      0xba00000000	                              mov edx, 0	       857	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	CALL_13
0x4001053	      0xbe59030000	                          mov esi, 0x359	       857	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	CALL_13
0x4001058	      0xbf00000000	                              mov edi, 0	       857	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	CALL_13
0x400105d	      0xe800000000	                          call 0x4001062	       857	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	CALL_13
bfd_emul_set_commonpagesize	SWITCH,0:functions,0:WHILE,0:IF,1:FOR,0:DO,0:ELSE,0:CALL,2	23
0x4001670	              0x53	                                push rbx	      2192	bfd.c	ELSE_1	FUNCTION_37
0x4001671	          0x4889f3	                            mov rbx, rsi	      2192	bfd.c	ELSE_1	FUNCTION_37
0x4001674	            0x31f6	                            xor esi, esi	      2195	bfd.c	ELSE_1	FUNCTION_37	CALL_1
0x4001676	      0xe800000000	                          call 0x400167b	      2195	bfd.c	ELSE_1	FUNCTION_37	CALL_1
0x400167b	          0x4885c0	                           test rax, rax	      2196	bfd.c	ELSE_1	FUNCTION_37	IF_1
0x400167e	            0x7436	                            je 0x40016b6	      2196	bfd.c	ELSE_1	FUNCTION_37	IF_1
0x4001680	          0x4889c2	                            mov rdx, rax	      2196	bfd.c	ELSE_1	FUNCTION_37	IF_1
0x4001683	            0xeb14	                           jmp 0x4001699	      2196	bfd.c	ELSE_1	FUNCTION_37	IF_1
0x4001685	           0xf1f00	                         nop dword [rax]	      2196	bfd.c	ELSE_1	FUNCTION_37	IF_1
0x4001688	    0x488b92600300	           mov rdx, qword [rdx + 0x360] 	      2111	bfd.c	FUNCTION_34	IF_2
0x400168f	          0x4885d2	                           test rdx, rdx	      2112	bfd.c	FUNCTION_34	IF_2
0x4001692	            0x7422	                            je 0x40016b6	      2112	bfd.c	FUNCTION_34	IF_2
0x4001694	          0x4839d0	                            cmp rax, rdx	      2112	bfd.c	FUNCTION_34	IF_2
0x4001697	            0x741d	                            je 0x40016b6	      2112	bfd.c	FUNCTION_34	IF_2
0x4001699	        0x837a0805	                  cmp dword [rdx + 8], 5	      2103	bfd.c	FUNCTION_34	IF_1
0x400169d	            0x75e9	                           jne 0x4001688	      2103	bfd.c	FUNCTION_34	IF_1
0x400169f	    0x488b8a680300	           mov rcx, qword [rdx + 0x368] 	      2108	bfd.c	FUNCTION_34	IF_1
0x40016a6	    0x488b92600300	           mov rdx, qword [rdx + 0x360] 	      2111	bfd.c	FUNCTION_34	IF_2
0x40016ad	          0x4885d2	                           test rdx, rdx	      2112	bfd.c	FUNCTION_34	IF_2
0x40016b0	        0x48895920	             mov qword [rcx + 0x20], rbx	      2108	bfd.c	FUNCTION_34	IF_1
0x40016b4	            0x75de	                           jne 0x4001694	      2112	bfd.c	FUNCTION_34	IF_2
0x40016b6	              0x5b	                                 pop rbx	      2200	bfd.c	ELSE_1	FUNCTION_37
0x40016b7	              0xc3	                                     ret	      2200	bfd.c	ELSE_1	FUNCTION_37
bfd_alt_mach_code	SWITCH,1:functions,0:WHILE,0:IF,3:FOR,0:DO,0:ELSE,0:CALL,5	30
0x4001520	        0x488b5708	                mov rdx, qword [rdi + 8]	      2037	bfd.c	FUNCTION_32	IF_1	CALL_1
0x4001524	            0x31c0	                            xor eax, eax	      2068	bfd.c	FUNCTION_32
0x4001526	        0x837a0805	                  cmp dword [rdx + 8], 5	      2037	bfd.c	FUNCTION_32	IF_1	CALL_1
0x400152a	            0x7404	                            je 0x4001530	      2037	bfd.c	FUNCTION_32	IF_1	CALL_1
0x400152c	            0xf3c3	                                     ret	      2069	bfd.c	FUNCTION_32
0x400152e	            0x6690	                                     nop	      2069	bfd.c	FUNCTION_32
0x4001530	          0x83fe01	                              cmp esi, 1	      2041	bfd.c	FUNCTION_32	IF_1	SWITCH_1
0x4001533	            0x7443	                            je 0x4001578	      2041	bfd.c	FUNCTION_32	IF_1	SWITCH_1
0x4001535	          0x83fe02	                              cmp esi, 2	      2041	bfd.c	FUNCTION_32	IF_1	SWITCH_1
0x4001538	            0x7426	                            je 0x4001560	      2041	bfd.c	FUNCTION_32	IF_1	SWITCH_1
0x400153a	            0x85f6	                           test esi, esi	      2041	bfd.c	FUNCTION_32	IF_1	SWITCH_1
0x400153c	            0x75ee	                           jne 0x400152c	      2041	bfd.c	FUNCTION_32	IF_1	SWITCH_1
0x400153e	    0x488b82680300	           mov rax, qword [rdx + 0x368] 	      2044	bfd.c	FUNCTION_32	IF_1	SWITCH_1	CALL_2
0x4001545	          0x8b5008	                mov edx, dword [rax + 8]	      2044	bfd.c	FUNCTION_32	IF_1	SWITCH_1	CALL_2
0x4001548	    0x488b87f80000	            mov rax, qword [rdi + 0xf8] 	      2063	bfd.c	FUNCTION_32	IF_1	CALL_5
0x400154f	        0x6689503a	               mov word [rax + 0x3a], dx	      2063	bfd.c	FUNCTION_32	IF_1	CALL_5
0x4001553	      0xb801000000	                              mov eax, 1	      2065	bfd.c	FUNCTION_32	IF_1
0x4001558	              0xc3	                                     ret	      2069	bfd.c	FUNCTION_32
0x4001559	     0xf1f80000000	                         nop dword [rax]	      2069	bfd.c	FUNCTION_32
0x4001560	    0x488b92680300	           mov rdx, qword [rdx + 0x368] 	      2054	bfd.c	FUNCTION_32	IF_1	SWITCH_1	CALL_4
0x4001567	    0x8b92fc020000	           mov edx, dword [rdx + 0x2fc] 	      2054	bfd.c	FUNCTION_32	IF_1	SWITCH_1	CALL_4
0x400156d	            0x85d2	                           test edx, edx	      2055	bfd.c	FUNCTION_32	IF_1	SWITCH_1	IF_3
0x400156f	            0x75d7	                           jne 0x4001548	      2055	bfd.c	FUNCTION_32	IF_1	SWITCH_1	IF_3
0x4001571	            0xf3c3	                                     ret	      2069	bfd.c	FUNCTION_32
0x4001573	       0xf1f440000	                   nop dword [rax + rax]	      2069	bfd.c	FUNCTION_32
0x4001578	    0x488b92680300	           mov rdx, qword [rdx + 0x368] 	      2048	bfd.c	FUNCTION_32	IF_1	SWITCH_1	CALL_3
0x400157f	    0x8b92f8020000	           mov edx, dword [rdx + 0x2f8] 	      2048	bfd.c	FUNCTION_32	IF_1	SWITCH_1	CALL_3
0x4001585	            0x85d2	                           test edx, edx	      2049	bfd.c	FUNCTION_32	IF_1	SWITCH_1	IF_2
0x4001587	            0x75bf	                           jne 0x4001548	      2049	bfd.c	FUNCTION_32	IF_1	SWITCH_1	IF_2
0x4001589	            0xf3c3	                                     ret	      2049	bfd.c	FUNCTION_32	IF_1	SWITCH_1	IF_2
bfd_get_sign_extend_vma	SWITCH,0:functions,0:WHILE,0:IF,3:FOR,0:DO,0:ELSE,0:CALL,14	71
0x40010b0	        0x488b4708	                mov rax, qword [rdi + 8]	      1505	bfd.c	FUNCTION_20	IF_1	CALL_1
0x40010b4	        0x83780805	                  cmp dword [rax + 8], 5	      1505	bfd.c	FUNCTION_20	IF_1	CALL_1
0x40010b8	     0xf84f2000000	                            je 0x40011b0	      1505	bfd.c	FUNCTION_20	IF_1	CALL_1
0x40010be	          0x488b10	                    mov rdx, qword [rax]	      1508	bfd.c	FUNCTION_20	CALL_3
0x40010c1	      0xb909000000	                              mov ecx, 9	      1515	bfd.c	FUNCTION_20	IF_2	CALL_4
0x40010c6	      0xbf00000000	                              mov edi, 0	      1515	bfd.c	FUNCTION_20	IF_2	CALL_4
0x40010cb	      0xb801000000	                              mov eax, 1	      1524	bfd.c	FUNCTION_20	IF_2
0x40010d0	          0x4889d6	                            mov rsi, rdx	      1515	bfd.c	FUNCTION_20	IF_2	CALL_4
0x40010d3	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	      1515	bfd.c	FUNCTION_20	IF_2	CALL_4
0x40010d5	        0x400f97c6	                                seta sil	      1515	bfd.c	FUNCTION_20	IF_2	CALL_4
0x40010d9	           0xf92c1	                                 setb cl	      1515	bfd.c	FUNCTION_20	IF_2	CALL_4
0x40010dc	          0x4038ce	                             cmp sil, cl	      1515	bfd.c	FUNCTION_20	IF_2	CALL_4
0x40010df	     0xf84bf000000	                            je 0x40011a4	      1515	bfd.c	FUNCTION_20	IF_2	CALL_4
0x40010e5	      0xbf00000000	                              mov edi, 0	      1516	bfd.c	FUNCTION_20	IF_2	CALL_5
0x40010ea	      0xb908000000	                              mov ecx, 8	      1516	bfd.c	FUNCTION_20	IF_2	CALL_5
0x40010ef	          0x4889d6	                            mov rsi, rdx	      1516	bfd.c	FUNCTION_20	IF_2	CALL_5
0x40010f2	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	      1516	bfd.c	FUNCTION_20	IF_2	CALL_5
0x40010f4	     0xf84aa000000	                            je 0x40011a4	      1516	bfd.c	FUNCTION_20	IF_2	CALL_5
0x40010fa	      0xbf00000000	                              mov edi, 0	      1517	bfd.c	FUNCTION_20	IF_2	CALL_6
0x40010ff	      0xb909000000	                              mov ecx, 9	      1517	bfd.c	FUNCTION_20	IF_2	CALL_6
0x4001104	          0x4889d6	                            mov rsi, rdx	      1517	bfd.c	FUNCTION_20	IF_2	CALL_6
0x4001107	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	      1517	bfd.c	FUNCTION_20	IF_2	CALL_6
0x4001109	     0xf8495000000	                            je 0x40011a4	      1517	bfd.c	FUNCTION_20	IF_2	CALL_6
0x400110f	      0xbf00000000	                              mov edi, 0	      1518	bfd.c	FUNCTION_20	IF_2	CALL_7
0x4001114	      0xb90a000000	                            mov ecx, 0xa	      1518	bfd.c	FUNCTION_20	IF_2	CALL_7
0x4001119	          0x4889d6	                            mov rsi, rdx	      1518	bfd.c	FUNCTION_20	IF_2	CALL_7
0x400111c	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	      1518	bfd.c	FUNCTION_20	IF_2	CALL_7
0x400111e	     0xf8480000000	                            je 0x40011a4	      1518	bfd.c	FUNCTION_20	IF_2	CALL_7
0x4001124	      0xbf00000000	                              mov edi, 0	      1519	bfd.c	FUNCTION_20	IF_2	CALL_8
0x4001129	      0xb90b000000	                            mov ecx, 0xb	      1519	bfd.c	FUNCTION_20	IF_2	CALL_8
0x400112e	          0x4889d6	                            mov rsi, rdx	      1519	bfd.c	FUNCTION_20	IF_2	CALL_8
0x4001131	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	      1519	bfd.c	FUNCTION_20	IF_2	CALL_8
0x4001133	            0x746f	                            je 0x40011a4	      1519	bfd.c	FUNCTION_20	IF_2	CALL_8
0x4001135	      0xbf00000000	                              mov edi, 0	      1520	bfd.c	FUNCTION_20	IF_2	CALL_9
0x400113a	      0xb914000000	                           mov ecx, 0x14	      1520	bfd.c	FUNCTION_20	IF_2	CALL_9
0x400113f	          0x4889d6	                            mov rsi, rdx	      1520	bfd.c	FUNCTION_20	IF_2	CALL_9
0x4001142	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	      1520	bfd.c	FUNCTION_20	IF_2	CALL_9
0x4001144	            0x745e	                            je 0x40011a4	      1520	bfd.c	FUNCTION_20	IF_2	CALL_9
0x4001146	      0xbf00000000	                              mov edi, 0	      1521	bfd.c	FUNCTION_20	IF_2	CALL_10
0x400114b	      0xb915000000	                           mov ecx, 0x15	      1521	bfd.c	FUNCTION_20	IF_2	CALL_10
0x4001150	          0x4889d6	                            mov rsi, rdx	      1521	bfd.c	FUNCTION_20	IF_2	CALL_10
0x4001153	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	      1521	bfd.c	FUNCTION_20	IF_2	CALL_10
0x4001155	            0x744d	                            je 0x40011a4	      1521	bfd.c	FUNCTION_20	IF_2	CALL_10
0x4001157	      0xbf00000000	                              mov edi, 0	      1522	bfd.c	FUNCTION_20	IF_2	CALL_11
0x400115c	      0xb90f000000	                            mov ecx, 0xf	      1522	bfd.c	FUNCTION_20	IF_2	CALL_11
0x4001161	          0x4889d6	                            mov rsi, rdx	      1522	bfd.c	FUNCTION_20	IF_2	CALL_11
0x4001164	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	      1522	bfd.c	FUNCTION_20	IF_2	CALL_11
0x4001166	            0x743c	                            je 0x40011a4	      1522	bfd.c	FUNCTION_20	IF_2	CALL_11
0x4001168	      0xbf00000000	                              mov edi, 0	      1523	bfd.c	FUNCTION_20	IF_2	CALL_12
0x400116d	      0xb912000000	                           mov ecx, 0x12	      1523	bfd.c	FUNCTION_20	IF_2	CALL_12
0x4001172	          0x4889d6	                            mov rsi, rdx	      1523	bfd.c	FUNCTION_20	IF_2	CALL_12
0x4001175	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	      1523	bfd.c	FUNCTION_20	IF_2	CALL_12
0x4001177	            0x742b	                            je 0x40011a4	      1523	bfd.c	FUNCTION_20	IF_2	CALL_12
0x4001179	          0x4889d6	                            mov rsi, rdx	      1526	bfd.c	FUNCTION_20	IF_3	CALL_13
0x400117c	      0xbf00000000	                              mov edi, 0	      1526	bfd.c	FUNCTION_20	IF_3	CALL_13
0x4001181	      0xb906000000	                              mov ecx, 6	      1526	bfd.c	FUNCTION_20	IF_3	CALL_13
0x4001186	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	      1526	bfd.c	FUNCTION_20	IF_3	CALL_13
0x4001188	           0xf97c0	                                 seta al	      1526	bfd.c	FUNCTION_20	IF_3	CALL_13
0x400118b	           0xf92c2	                                 setb dl	      1526	bfd.c	FUNCTION_20	IF_3	CALL_13
0x400118e	            0x29d0	                            sub eax, edx	      1526	bfd.c	FUNCTION_20	IF_3	CALL_13
0x4001190	           0xfbec0	                           movsx eax, al	      1526	bfd.c	FUNCTION_20	IF_3	CALL_13
0x4001193	            0x85c0	                           test eax, eax	      1526	bfd.c	FUNCTION_20	IF_3	CALL_13
0x4001195	            0x740d	                            je 0x40011a4	      1526	bfd.c	FUNCTION_20	IF_3	CALL_13
0x4001197	    0xc70500000000	               mov dword [0x040011a1], 3	       506	bfd.c	FUNCTION_2
0x40011a1	          0x83c8ff	                      or eax, 0xffffffff	      1530	bfd.c	FUNCTION_20
0x40011a4	            0xf3c3	                                     ret	      1531	bfd.c	FUNCTION_20
0x40011a6	    0x662e0f1f8400	                 nop word cs:[rax + rax]	      1531	bfd.c	FUNCTION_20
0x40011b0	    0x488b80680300	           mov rax, qword [rax + 0x368] 	      1506	bfd.c	FUNCTION_20	CALL_2
0x40011b7	     0xfb680890300	          movzx eax, byte [rax + 0x389] 	      1506	bfd.c	FUNCTION_20	CALL_2
0x40011be	          0x83e001	                              and eax, 1	      1506	bfd.c	FUNCTION_20	CALL_2
0x40011c1	              0xc3	                                     ret	      1506	bfd.c	FUNCTION_20	CALL_2
bfd_set_error_program_name	SWITCH,0:functions,0:WHILE,0:IF,0:FOR,0:DO,0:ELSE,0:CALL,0	2
0x40002d0	    0x48893d000000	            mov qword [0x040002d7], rdi 	      1220	bfd.c	FUNCTION_11
0x40002d7	              0xc3	                                     ret	      1220	bfd.c	FUNCTION_11
_bfd_error_handler	SWITCH,0:functions,0:WHILE,0:IF,0:FOR,0:DO,0:ELSE,0:CALL,3	33
0x40001f0	    0x4881ecd80000	                           sub rsp, 0xd8	      1173	bfd.c	FUNCTION_9
0x40001f7	            0x84c0	                             test al, al	      1173	bfd.c	FUNCTION_9
0x40001f9	      0x4889742428	             mov qword [rsp + 0x28], rsi	      1173	bfd.c	FUNCTION_9
0x40001fe	      0x4889542430	             mov qword [rsp + 0x30], rdx	      1173	bfd.c	FUNCTION_9
0x4000203	      0x48894c2438	             mov qword [rsp + 0x38], rcx	      1173	bfd.c	FUNCTION_9
0x4000208	      0x4c89442440	              mov qword [rsp + 0x40], r8	      1173	bfd.c	FUNCTION_9
0x400020d	      0x4c894c2448	              mov qword [rsp + 0x48], r9	      1173	bfd.c	FUNCTION_9
0x4000212	            0x7437	                            je 0x400024b	      1173	bfd.c	FUNCTION_9
0x4000214	       0xf29442450	       movaps xmmword [rsp + 0x50], xmm0	      1173	bfd.c	FUNCTION_9
0x4000219	       0xf294c2460	       movaps xmmword [rsp + 0x60], xmm1	      1173	bfd.c	FUNCTION_9
0x400021e	       0xf29542470	       movaps xmmword [rsp + 0x70], xmm2	      1173	bfd.c	FUNCTION_9
0x4000223	     0xf299c248000	       movaps xmmword [rsp + 0x80], xmm3	      1173	bfd.c	FUNCTION_9
0x400022b	     0xf29a4249000	       movaps xmmword [rsp + 0x90], xmm4	      1173	bfd.c	FUNCTION_9
0x4000233	     0xf29ac24a000	       movaps xmmword [rsp + 0xa0], xmm5	      1173	bfd.c	FUNCTION_9
0x400023b	     0xf29b424b000	       movaps xmmword [rsp + 0xb0], xmm6	      1173	bfd.c	FUNCTION_9
0x4000243	     0xf29bc24c000	       movaps xmmword [rsp + 0xc0], xmm7	      1173	bfd.c	FUNCTION_9
0x400024b	    0x64488b042528	                mov rax, qword fs:[0x28]	      1173	bfd.c	FUNCTION_9
0x4000254	      0x4889442418	             mov qword [rsp + 0x18], rax	      1173	bfd.c	FUNCTION_9
0x4000259	            0x31c0	                            xor eax, eax	      1173	bfd.c	FUNCTION_9
0x400025b	    0x488d8424e000	                   lea rax, [rsp + 0xe0]	      1176	bfd.c	FUNCTION_9	CALL_1
0x4000263	          0x4889e6	                            mov rsi, rsp	      1177	bfd.c	FUNCTION_9	CALL_2
0x4000266	      0x4889442408	                mov qword [rsp + 8], rax	      1176	bfd.c	FUNCTION_9	CALL_1
0x400026b	      0x488d442420	                   lea rax, [rsp + 0x20]	      1176	bfd.c	FUNCTION_9	CALL_1
0x4000270	    0xc70424080000	                      mov dword [rsp], 8	      1176	bfd.c	FUNCTION_9	CALL_1
0x4000277	    0xc74424043000	               mov dword [rsp + 4], 0x30	      1176	bfd.c	FUNCTION_9	CALL_1
0x400027f	      0x4889442410	             mov qword [rsp + 0x10], rax	      1176	bfd.c	FUNCTION_9	CALL_1
0x4000284	    0xff1500000000	                 call qword [0x0400028a]	      1177	bfd.c	FUNCTION_9	CALL_2
0x400028a	      0x488b442418	            mov rax, qword [rsp + 0x18] 	      1179	bfd.c	FUNCTION_9
0x400028f	    0x644833042528	                xor rax, qword fs:[0x28]	      1179	bfd.c	FUNCTION_9
0x4000298	            0x7508	                           jne 0x40002a2	      1179	bfd.c	FUNCTION_9
0x400029a	    0x4881c4d80000	                           add rsp, 0xd8	      1179	bfd.c	FUNCTION_9
0x40002a1	              0xc3	                                     ret	      1179	bfd.c	FUNCTION_9
0x40002a2	      0xe800000000	                          call 0x40002a7	      1179	bfd.c	FUNCTION_9
_bfd_get_gp_value	SWITCH,0:functions,0:WHILE,0:IF,4:FOR,0:DO,0:ELSE,1:CALL,2	25
0x4001260	          0x4885ff	                           test rdi, rdi	      1613	bfd.c	FUNCTION_24	IF_1
0x4001263	            0x743b	                            je 0x40012a0	      1613	bfd.c	FUNCTION_24	IF_1
0x4001265	         0xfb65744	           movzx edx, byte [rdi + 0x44] 	      1615	bfd.c	FUNCTION_24	IF_2
0x4001269	            0x31c0	                            xor eax, eax	      1614	bfd.c	FUNCTION_24	IF_1
0x400126b	          0x83e207	                              and edx, 7	      1615	bfd.c	FUNCTION_24	IF_2
0x400126e	          0x80fa01	                               cmp dl, 1	      1615	bfd.c	FUNCTION_24	IF_2
0x4001271	            0x7405	                            je 0x4001278	      1615	bfd.c	FUNCTION_24	IF_2
0x4001273	            0xf3c3	                                     ret	      1624	bfd.c	FUNCTION_24
0x4001275	           0xf1f00	                         nop dword [rax]	      1624	bfd.c	FUNCTION_24
0x4001278	        0x488b5708	                mov rdx, qword [rdi + 8]	      1618	bfd.c	FUNCTION_24	IF_3
0x400127c	          0x8b5208	                mov edx, dword [rdx + 8]	      1618	bfd.c	FUNCTION_24	IF_3
0x400127f	          0x83fa03	                              cmp edx, 3	      1618	bfd.c	FUNCTION_24	IF_3
0x4001282	            0x7424	                            je 0x40012a8	      1618	bfd.c	FUNCTION_24	IF_3
0x4001284	          0x83fa05	                              cmp edx, 5	      1620	bfd.c	FUNCTION_24	ELSE_1	IF_4
0x4001287	            0x75ea	                           jne 0x4001273	      1620	bfd.c	FUNCTION_24	ELSE_1	IF_4
0x4001289	    0x488b87f80000	            mov rax, qword [rdi + 0xf8] 	      1621	bfd.c	FUNCTION_24	ELSE_1	IF_4
0x4001290	    0x488b80f00200	           mov rax, qword [rax + 0x2f0] 	      1621	bfd.c	FUNCTION_24	ELSE_1	IF_4
0x4001297	              0xc3	                                     ret	      1621	bfd.c	FUNCTION_24	ELSE_1	IF_4
0x4001298	     0xf1f84000000	                   nop dword [rax + rax]	      1621	bfd.c	FUNCTION_24	ELSE_1	IF_4
0x40012a0	            0x31c0	                            xor eax, eax	      1614	bfd.c	FUNCTION_24	IF_1
0x40012a2	              0xc3	                                     ret	      1624	bfd.c	FUNCTION_24
0x40012a3	       0xf1f440000	                   nop dword [rax + rax]	      1624	bfd.c	FUNCTION_24
0x40012a8	    0x488b87f80000	            mov rax, qword [rdi + 0xf8] 	      1619	bfd.c	FUNCTION_24	CALL_1
0x40012af	        0x488b4020	            mov rax, qword [rax + 0x20] 	      1619	bfd.c	FUNCTION_24	CALL_1
0x40012b3	              0xc3	                                     ret	      1619	bfd.c	FUNCTION_24	CALL_1
bfd_record_phdr	SWITCH,0:functions,0:WHILE,0:IF,3:FOR,1:DO,0:ELSE,0:CALL,4	84
0x4001370	        0x4c8b5708	                mov r10, qword [rdi + 8]	      1945	bfd.c	FUNCTION_28	IF_1	CALL_1
0x4001374	      0xb801000000	                              mov eax, 1	      1946	bfd.c	FUNCTION_28	IF_1
0x4001379	      0x41837a0805	                  cmp dword [r10 + 8], 5	      1945	bfd.c	FUNCTION_28	IF_1	CALL_1
0x400137e	            0x7408	                            je 0x4001388	      1945	bfd.c	FUNCTION_28	IF_1	CALL_1
0x4001380	              0xc3	                                     ret	      1970	bfd.c	FUNCTION_28
0x4001381	     0xf1f80000000	                         nop dword [rax]	      1970	bfd.c	FUNCTION_28
0x4001388	            0x4157	                                push r15	      1941	bfd.c	FUNCTION_28
0x400138a	            0x4156	                                push r14	      1941	bfd.c	FUNCTION_28
0x400138c	          0x4989f6	                            mov r14, rsi	      1941	bfd.c	FUNCTION_28
0x400138f	            0x4155	                                push r13	      1941	bfd.c	FUNCTION_28
0x4001391	            0x4154	                                push r12	      1941	bfd.c	FUNCTION_28
0x4001393	          0x4989ff	                            mov r15, rdi	      1941	bfd.c	FUNCTION_28
0x4001396	              0x55	                                push rbp	      1941	bfd.c	FUNCTION_28
0x4001397	              0x53	                                push rbx	      1941	bfd.c	FUNCTION_28
0x4001398	            0x89d5	                            mov ebp, edx	      1941	bfd.c	FUNCTION_28
0x400139a	          0x4d89cc	                             mov r12, r9	      1941	bfd.c	FUNCTION_28
0x400139d	          0x4489c3	                            mov ebx, r8d	      1941	bfd.c	FUNCTION_28
0x40013a0	        0x4883ec18	                           sub rsp, 0x18	      1941	bfd.c	FUNCTION_28
0x40013a4	        0x8b542460	            mov edx, dword [rsp + 0x60] 	      1949	bfd.c	FUNCTION_28
0x40013a8	        0x894c2408	                mov dword [rsp + 8], ecx	      1949	bfd.c	FUNCTION_28
0x40013ac	    0x4c8d2cd50000	                        lea r13, [rdx*8]	      1949	bfd.c	FUNCTION_28
0x40013b4	        0x498d7548	                   lea rsi, [r13 + 0x48]	      1950	bfd.c	FUNCTION_28	CALL_2
0x40013b8	      0xe800000000	                          call 0x40013bd	      1950	bfd.c	FUNCTION_28	CALL_2
0x40013bd	          0x4885c0	                           test rax, rax	      1951	bfd.c	FUNCTION_28	IF_2
0x40013c0	          0x4889c1	                            mov rcx, rax	      1950	bfd.c	FUNCTION_28	CALL_2
0x40013c3	     0xf84af000000	                            je 0x4001478	      1951	bfd.c	FUNCTION_28	IF_2
0x40013c9	        0x4c897008	                mov qword [rax + 8], r14	      1954	bfd.c	FUNCTION_28
0x40013cd	         0xfb65140	           movzx edx, byte [rcx + 0x40] 	      1957	bfd.c	FUNCTION_28
0x40013d1	          0x83e501	                              and ebp, 1	      1957	bfd.c	FUNCTION_28
0x40013d4	        0x8b442408	                mov eax, dword [rsp + 8]	      1955	bfd.c	FUNCTION_28
0x40013d8	          0x83e301	                              and ebx, 1	      1958	bfd.c	FUNCTION_28
0x40013db	        0x4c896118	             mov qword [rcx + 0x18], r12	      1956	bfd.c	FUNCTION_28
0x40013df	             0x1db	                            add ebx, ebx	      1958	bfd.c	FUNCTION_28
0x40013e1	          0x83e2fc	                     and edx, 0xfffffffc	      1957	bfd.c	FUNCTION_28
0x40013e4	             0x9d5	                             or ebp, edx	      1958	bfd.c	FUNCTION_28
0x40013e6	       0xfb6542450	           movzx edx, byte [rsp + 0x50] 	      1959	bfd.c	FUNCTION_28
0x40013eb	        0x48894110	             mov qword [rcx + 0x10], rax	      1955	bfd.c	FUNCTION_28
0x40013ef	       0xfb6442458	           movzx eax, byte [rsp + 0x58] 	      1960	bfd.c	FUNCTION_28
0x40013f4	             0x9dd	                             or ebp, ebx	      1958	bfd.c	FUNCTION_28
0x40013f6	          0x83e5cf	                     and ebp, 0xffffffcf	      1959	bfd.c	FUNCTION_28
0x40013f9	          0x83e201	                              and edx, 1	      1959	bfd.c	FUNCTION_28
0x40013fc	          0xc1e204	                              shl edx, 4	      1959	bfd.c	FUNCTION_28
0x40013ff	          0x83e001	                              and eax, 1	      1960	bfd.c	FUNCTION_28
0x4001402	          0xc1e005	                              shl eax, 5	      1960	bfd.c	FUNCTION_28
0x4001405	             0x9d5	                             or ebp, edx	      1960	bfd.c	FUNCTION_28
0x4001407	             0x9c5	                             or ebp, eax	      1960	bfd.c	FUNCTION_28
0x4001409	        0x8b442460	            mov eax, dword [rsp + 0x60] 	      1961	bfd.c	FUNCTION_28
0x400140d	        0x40886940	              mov byte [rcx + 0x40], bpl	      1960	bfd.c	FUNCTION_28
0x4001411	            0x85c0	                           test eax, eax	      1962	bfd.c	FUNCTION_28	IF_3
0x4001413	          0x894144	             mov dword [rcx + 0x44], eax	      1961	bfd.c	FUNCTION_28
0x4001416	            0x7540	                           jne 0x4001458	      1962	bfd.c	FUNCTION_28	IF_3
0x4001418	    0x498b87f80000	            mov rax, qword [r15 + 0xf8] 	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
0x400141f	    0x488b80980c00	           mov rax, qword [rax + 0xc98] 	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
0x4001426	          0x488b10	                    mov rdx, qword [rax]	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
0x4001429	          0x4885d2	                           test rdx, rdx	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
0x400142c	            0x7505	                           jne 0x4001433	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
0x400142e	            0xeb4c	                           jmp 0x400147c	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
0x4001430	          0x4889c2	                            mov rdx, rax	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
0x4001433	          0x488b02	                    mov rax, qword [rdx]	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
0x4001436	          0x4885c0	                           test rax, rax	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
0x4001439	            0x75f5	                           jne 0x4001430	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
0x400143b	          0x48890a	                    mov qword [rdx], rcx	      1967	bfd.c	FUNCTION_28
0x400143e	      0xb801000000	                              mov eax, 1	      1969	bfd.c	FUNCTION_28
0x4001443	        0x4883c418	                           add rsp, 0x18	      1970	bfd.c	FUNCTION_28
0x4001447	              0x5b	                                 pop rbx	      1970	bfd.c	FUNCTION_28
0x4001448	              0x5d	                                 pop rbp	      1970	bfd.c	FUNCTION_28
0x4001449	            0x415c	                                 pop r12	      1970	bfd.c	FUNCTION_28
0x400144b	            0x415d	                                 pop r13	      1970	bfd.c	FUNCTION_28
0x400144d	            0x415e	                                 pop r14	      1970	bfd.c	FUNCTION_28
0x400144f	            0x415f	                                 pop r15	      1970	bfd.c	FUNCTION_28
0x4001451	              0xc3	                                     ret	      1970	bfd.c	FUNCTION_28
0x4001452	    0x660f1f440000	                    nop word [rax + rax]	      1970	bfd.c	FUNCTION_28
0x4001458	      0x488b742468	            mov rsi, qword [rsp + 0x68] 	        53	string3.h	FUNCTION_44	CALL_3
0x400145d	        0x488d7948	                   lea rdi, [rcx + 0x48]	        53	string3.h	FUNCTION_44	CALL_3
0x4001461	          0x4c89ea	                            mov rdx, r13	        53	string3.h	FUNCTION_44	CALL_3
0x4001464	      0x48894c2408	                mov qword [rsp + 8], rcx	        53	string3.h	FUNCTION_44	CALL_3
0x4001469	      0xe800000000	                          call 0x400146e	        53	string3.h	FUNCTION_44	CALL_3
0x400146e	      0x488b4c2408	                mov rcx, qword [rsp + 8]	        53	string3.h	FUNCTION_44	CALL_3
0x4001473	            0xeba3	                           jmp 0x4001418	        53	string3.h	FUNCTION_44	CALL_3
0x4001475	           0xf1f00	                         nop dword [rax]	        53	string3.h	FUNCTION_44	CALL_3
0x4001478	            0x31c0	                            xor eax, eax	      1952	bfd.c	FUNCTION_28	IF_2
0x400147a	            0xebc7	                           jmp 0x4001443	      1952	bfd.c	FUNCTION_28	IF_2
0x400147c	          0x4889c2	                            mov rdx, rax	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
0x400147f	            0xebba	                           jmp 0x400143b	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
bfd_canonicalize_reloc	SWITCH,0:functions,0:WHILE,0:IF,1:FOR,0:DO,0:ELSE,0:CALL,2	11
0x4000330	         0xfb64744	           movzx eax, byte [rdi + 0x44] 	      1352	bfd.c	FUNCTION_15	IF_1
0x4000334	          0x83e007	                              and eax, 7	      1352	bfd.c	FUNCTION_15	IF_1
0x4000337	            0x3c01	                               cmp al, 1	      1352	bfd.c	FUNCTION_15	IF_1
0x4000339	            0x7515	                           jne 0x4000350	      1352	bfd.c	FUNCTION_15	IF_1
0x400033b	        0x488b4708	                mov rax, qword [rdi + 8]	      1358	bfd.c	FUNCTION_15	CALL_2
0x400033f	    0x488b80700200	           mov rax, qword [rax + 0x270] 	      1358	bfd.c	FUNCTION_15	CALL_2
0x4000346	            0xffe0	                                 jmp rax	      1358	bfd.c	FUNCTION_15	CALL_2
0x4000348	     0xf1f84000000	                   nop dword [rax + rax]	      1358	bfd.c	FUNCTION_15	CALL_2
0x4000350	    0xc70500000000	               mov dword [0x0400035a], 5	       506	bfd.c	FUNCTION_2
0x400035a	    0x48c7c0ffffff	             mov rax, 0xffffffffffffffff	      1360	bfd.c	FUNCTION_15
0x4000361	              0xc3	                                     ret	      1360	bfd.c	FUNCTION_15
bfd_set_error_handler	SWITCH,0:functions,0:WHILE,0:IF,0:FOR,0:DO,0:ELSE,0:CALL,0	3
0x40002c0	    0x488b05000000	            mov rax, qword [0x040002c7] 	      1198	bfd.c	FUNCTION_10
0x40002c7	    0x48893d000000	            mov qword [0x040002ce], rdi 	      1199	bfd.c	FUNCTION_10
0x40002ce	              0xc3	                                     ret	      1201	bfd.c	FUNCTION_10
bfd_convert_section_contents	SWITCH,0:functions,0:WHILE,0:IF,9:FOR,0:DO,0:ELSE,3:CALL,23	132
0x4001be0	            0x4157	                                push r15	      2519	bfd.c	FUNCTION_43
0x4001be2	            0x4156	                                push r14	      2519	bfd.c	FUNCTION_43
0x4001be4	    0x41bf01000000	                             mov r15d, 1	      2527	bfd.c	FUNCTION_43	IF_1
0x4001bea	            0x4155	                                push r13	      2519	bfd.c	FUNCTION_43
0x4001bec	            0x4154	                                push r12	      2519	bfd.c	FUNCTION_43
0x4001bee	              0x55	                                push rbp	      2519	bfd.c	FUNCTION_43
0x4001bef	              0x53	                                push rbx	      2519	bfd.c	FUNCTION_43
0x4001bf0	        0x4883ec28	                           sub rsp, 0x28	      2519	bfd.c	FUNCTION_43
0x4001bf4	        0xf6474610	           test byte [rdi + 0x46], 0x10 	      2526	bfd.c	FUNCTION_43	IF_1
0x4001bf8	            0x750e	                           jne 0x4001c08	      2526	bfd.c	FUNCTION_43	IF_1
0x4001bfa	        0x488b4708	                mov rax, qword [rdi + 8]	      2530	bfd.c	FUNCTION_43	IF_2	CALL_1
0x4001bfe	        0x83780805	                  cmp dword [rax + 8], 5	      2530	bfd.c	FUNCTION_43	IF_2	CALL_1
0x4001c02	        0x48890424	                    mov qword [rsp], rax	      2530	bfd.c	FUNCTION_43	IF_2	CALL_1
0x4001c06	            0x7418	                            je 0x4001c20	      2530	bfd.c	FUNCTION_43	IF_2	CALL_1
0x4001c08	        0x4883c428	                           add rsp, 0x28	      2608	bfd.c	FUNCTION_43
0x4001c0c	          0x4489f8	                           mov eax, r15d	      2608	bfd.c	FUNCTION_43
0x4001c0f	              0x5b	                                 pop rbx	      2608	bfd.c	FUNCTION_43
0x4001c10	              0x5d	                                 pop rbp	      2608	bfd.c	FUNCTION_43
0x4001c11	            0x415c	                                 pop r12	      2608	bfd.c	FUNCTION_43
0x4001c13	            0x415d	                                 pop r13	      2608	bfd.c	FUNCTION_43
0x4001c15	            0x415e	                                 pop r14	      2608	bfd.c	FUNCTION_43
0x4001c17	            0x415f	                                 pop r15	      2608	bfd.c	FUNCTION_43
0x4001c19	              0xc3	                                     ret	      2608	bfd.c	FUNCTION_43
0x4001c1a	    0x660f1f440000	                    nop word [rax + rax]	      2608	bfd.c	FUNCTION_43
0x4001c20	        0x488b4208	                mov rax, qword [rdx + 8]	      2531	bfd.c	FUNCTION_43	IF_2	CALL_2
0x4001c24	        0x83780805	                  cmp dword [rax + 8], 5	      2531	bfd.c	FUNCTION_43	IF_2	CALL_2
0x4001c28	            0x75de	                           jne 0x4001c08	      2531	bfd.c	FUNCTION_43	IF_2	CALL_2
0x4001c2a	        0x488b1c24	                    mov rbx, qword [rsp]	      2535	bfd.c	FUNCTION_43	IF_3	CALL_3
0x4001c2e	    0x488b80680300	           mov rax, qword [rax + 0x368] 	      2536	bfd.c	FUNCTION_43	IF_3	CALL_4
0x4001c35	    0x4c8b9b680300	           mov r11, qword [rbx + 0x368] 	      2535	bfd.c	FUNCTION_43	IF_3	CALL_3
0x4001c3c	    0x488b80000300	           mov rax, qword [rax + 0x300] 	      2536	bfd.c	FUNCTION_43	IF_3	CALL_4
0x4001c43	    0x4d8b9b000300	           mov r11, qword [r11 + 0x300] 	      2535	bfd.c	FUNCTION_43	IF_3	CALL_3
0x4001c4a	         0xfb6400c	            movzx eax, byte [rax + 0xc] 	      2535	bfd.c	FUNCTION_43	IF_3	CALL_3
0x4001c4e	        0x4138430c	                cmp byte [r11 + 0xc], al	      2535	bfd.c	FUNCTION_43	IF_3	CALL_3
0x4001c52	            0x74b4	                            je 0x4001c08	      2535	bfd.c	FUNCTION_43	IF_3	CALL_3
0x4001c54	      0x4c89442408	                 mov qword [rsp + 8], r8	      2535	bfd.c	FUNCTION_43	IF_3	CALL_3
0x4001c59	          0x4989cc	                            mov r12, rcx	      2535	bfd.c	FUNCTION_43	IF_3	CALL_3
0x4001c5c	          0x4889d5	                            mov rbp, rdx	      2535	bfd.c	FUNCTION_43	IF_3	CALL_3
0x4001c5f	          0x4989f5	                            mov r13, rsi	      2535	bfd.c	FUNCTION_43	IF_3	CALL_3
0x4001c62	          0x4889fb	                            mov rbx, rdi	      2535	bfd.c	FUNCTION_43	IF_3	CALL_3
0x4001c65	      0xe800000000	                          call 0x4001c6a	      2540	bfd.c	FUNCTION_43	CALL_5
0x4001c6a	          0x4c63f0	                         movsxd r14, eax	      2540	bfd.c	FUNCTION_43	CALL_5
0x4001c6d	          0x4d85f6	                           test r14, r14	      2541	bfd.c	FUNCTION_43	IF_4
0x4001c70	            0x7496	                            je 0x4001c08	      2541	bfd.c	FUNCTION_43	IF_4
0x4001c72	        0x4d8b3c24	                    mov r15, qword [r12]	      2544	bfd.c	FUNCTION_43
0x4001c76	        0x4983fe0c	                            cmp r14, 0xc	      2549	bfd.c	FUNCTION_43	IF_5
0x4001c7a	        0x488b0424	                    mov rax, qword [rsp]	      2552	bfd.c	FUNCTION_43	IF_5	CALL_6
0x4001c7e	          0x4c89ff	                            mov rdi, r15	      2552	bfd.c	FUNCTION_43	IF_5	CALL_6
0x4001c81	     0xf8499000000	                            je 0x4001d20	      2549	bfd.c	FUNCTION_43	IF_5
0x4001c87	          0xff5038	                 call qword [rax + 0x38]	      2563	bfd.c	FUNCTION_43	ELSE_1	CALL_9
0x4001c8a	        0x488b4308	                mov rax, qword [rbx + 8]	      2564	bfd.c	FUNCTION_43	ELSE_1	CALL_10
0x4001c8e	        0x4d8d4708	                       lea r8, [r15 + 8]	      2564	bfd.c	FUNCTION_43	ELSE_1	CALL_10
0x4001c92	          0x4c89c7	                             mov rdi, r8	      2564	bfd.c	FUNCTION_43	ELSE_1	CALL_10
0x4001c95	      0x4c89442418	              mov qword [rsp + 0x18], r8	      2564	bfd.c	FUNCTION_43	ELSE_1	CALL_10
0x4001c9a	          0xff5020	                 call qword [rax + 0x20]	      2564	bfd.c	FUNCTION_43	ELSE_1	CALL_10
0x4001c9d	        0x48890424	                    mov qword [rsp], rax	      2564	bfd.c	FUNCTION_43	ELSE_1	CALL_10
0x4001ca1	        0x488b4308	                mov rax, qword [rbx + 8]	      2565	bfd.c	FUNCTION_43	ELSE_1	CALL_11
0x4001ca5	        0x498d7f10	                   lea rdi, [r15 + 0x10]	      2565	bfd.c	FUNCTION_43	ELSE_1	CALL_11
0x4001ca9	          0xff5020	                 call qword [rax + 0x20]	      2565	bfd.c	FUNCTION_43	ELSE_1	CALL_11
0x4001cac	        0x488b5508	                mov rdx, qword [rbp + 8]	      2583	bfd.c	FUNCTION_43	IF_8	CALL_14
0x4001cb0	      0x4889442410	             mov qword [rsp + 0x10], rax	      2565	bfd.c	FUNCTION_43	ELSE_1	CALL_11
0x4001cb5	          0x4c89fe	                            mov rsi, r15	      2583	bfd.c	FUNCTION_43	IF_8	CALL_14
0x4001cb8	        0x4d8b6d38	            mov r13, qword [r13 + 0x38] 	      2571	bfd.c	FUNCTION_43	CALL_12
0x4001cbc	      0xbf01000000	                              mov edi, 1	      2583	bfd.c	FUNCTION_43	IF_8	CALL_14
0x4001cc1	          0xff5248	                 call qword [rdx + 0x48]	      2583	bfd.c	FUNCTION_43	IF_8	CALL_14
0x4001cc4	        0x488b5508	                mov rdx, qword [rbp + 8]	      2584	bfd.c	FUNCTION_43	IF_8	CALL_15
0x4001cc8	        0x498d7704	                      lea rsi, [r15 + 4]	      2584	bfd.c	FUNCTION_43	IF_8	CALL_15
0x4001ccc	        0x488b3c24	                    mov rdi, qword [rsp]	      2584	bfd.c	FUNCTION_43	IF_8	CALL_15
0x4001cd0	          0x4d29f5	                            sub r13, r14	      2571	bfd.c	FUNCTION_43	CALL_12
0x4001cd3	        0x498d5d0c	                    lea rbx, [r13 + 0xc]	      2571	bfd.c	FUNCTION_43	CALL_12
0x4001cd7	          0xff5248	                 call qword [rdx + 0x48]	      2584	bfd.c	FUNCTION_43	IF_8	CALL_15
0x4001cda	        0x488b5508	                mov rdx, qword [rbp + 8]	      2585	bfd.c	FUNCTION_43	IF_8	CALL_16
0x4001cde	      0x4c8b442418	              mov r8, qword [rsp + 0x18]	      2585	bfd.c	FUNCTION_43	IF_8	CALL_16
0x4001ce3	      0x488b442410	            mov rax, qword [rsp + 0x10] 	      2585	bfd.c	FUNCTION_43	IF_8	CALL_16
0x4001ce8	          0x4c89c6	                             mov rsi, r8	      2585	bfd.c	FUNCTION_43	IF_8	CALL_16
0x4001ceb	          0x4889c7	                            mov rdi, rax	      2585	bfd.c	FUNCTION_43	IF_8	CALL_16
0x4001cee	          0xff5248	                 call qword [rdx + 0x48]	      2585	bfd.c	FUNCTION_43	IF_8	CALL_16
0x4001cf1	          0x4c89f6	                            mov rsi, r14	        59	string3.h	FUNCTION_45	CALL_3
0x4001cf4	        0x49033424	                    add rsi, qword [r12]	        59	string3.h	FUNCTION_45	CALL_3
0x4001cf8	        0x498d7f0c	                    lea rdi, [r15 + 0xc]	        59	string3.h	FUNCTION_45	CALL_3
0x4001cfc	          0x4c89ea	                            mov rdx, r13	        59	string3.h	FUNCTION_45	CALL_3
0x4001cff	      0xe800000000	                          call 0x4001d04	        59	string3.h	FUNCTION_45	CALL_3
0x4001d04	      0x488b442408	                mov rax, qword [rsp + 8]	      2606	bfd.c	FUNCTION_43
0x4001d09	    0x41bf01000000	                             mov r15d, 1	      2607	bfd.c	FUNCTION_43
0x4001d0f	          0x488918	                    mov qword [rax], rbx	      2606	bfd.c	FUNCTION_43
0x4001d12	      0xe9f1feffff	                           jmp 0x4001c08	      2607	bfd.c	FUNCTION_43
0x4001d17	    0x660f1f840000	                    nop word [rax + rax]	      2607	bfd.c	FUNCTION_43
0x4001d20	          0xff5038	                 call qword [rax + 0x38]	      2552	bfd.c	FUNCTION_43	IF_5	CALL_6
0x4001d23	        0x488b4308	                mov rax, qword [rbx + 8]	      2553	bfd.c	FUNCTION_43	IF_5	CALL_7
0x4001d27	        0x498d7f04	                      lea rdi, [r15 + 4]	      2553	bfd.c	FUNCTION_43	IF_5	CALL_7
0x4001d2b	          0xff5038	                 call qword [rax + 0x38]	      2553	bfd.c	FUNCTION_43	IF_5	CALL_7
0x4001d2e	          0x4989c6	                            mov r14, rax	      2553	bfd.c	FUNCTION_43	IF_5	CALL_7
0x4001d31	        0x488b4308	                mov rax, qword [rbx + 8]	      2554	bfd.c	FUNCTION_43	IF_5	CALL_8
0x4001d35	        0x498d7f08	                      lea rdi, [r15 + 8]	      2554	bfd.c	FUNCTION_43	IF_5	CALL_8
0x4001d39	          0xff5038	                 call qword [rax + 0x38]	      2554	bfd.c	FUNCTION_43	IF_5	CALL_8
0x4001d3c	        0x498b5d38	            mov rbx, qword [r13 + 0x38] 	      2571	bfd.c	FUNCTION_43	CALL_12
0x4001d40	          0x4989c7	                            mov r15, rax	      2554	bfd.c	FUNCTION_43	IF_5	CALL_8
0x4001d43	        0x488d43f4	                    lea rax, [rbx - 0xc]	      2571	bfd.c	FUNCTION_43	CALL_12
0x4001d47	        0x4883c30c	                            add rbx, 0xc	      2571	bfd.c	FUNCTION_43	CALL_12
0x4001d4b	          0x4889df	                            mov rdi, rbx	      2574	bfd.c	FUNCTION_43	IF_6	CALL_13
0x4001d4e	        0x48890424	                    mov qword [rsp], rax	      2571	bfd.c	FUNCTION_43	CALL_12
0x4001d52	      0xe800000000	                          call 0x4001d57	      2574	bfd.c	FUNCTION_43	IF_6	CALL_13
0x4001d57	          0x4885c0	                           test rax, rax	      2575	bfd.c	FUNCTION_43	IF_6	IF_7
0x4001d5a	          0x4989c5	                            mov r13, rax	      2574	bfd.c	FUNCTION_43	IF_6	CALL_13
0x4001d5d	            0x745f	                            je 0x4001dbe	      2575	bfd.c	FUNCTION_43	IF_6	IF_7
0x4001d5f	        0x488b4508	                mov rax, qword [rbp + 8]	      2590	bfd.c	FUNCTION_43	ELSE_2	CALL_17
0x4001d63	          0x4c89ee	                            mov rsi, r13	      2590	bfd.c	FUNCTION_43	ELSE_2	CALL_17
0x4001d66	      0xbf01000000	                              mov edi, 1	      2590	bfd.c	FUNCTION_43	ELSE_2	CALL_17
0x4001d6b	          0xff5048	                 call qword [rax + 0x48]	      2590	bfd.c	FUNCTION_43	ELSE_2	CALL_17
0x4001d6e	        0x488b4508	                mov rax, qword [rbp + 8]	      2591	bfd.c	FUNCTION_43	ELSE_2	CALL_18
0x4001d72	        0x498d7504	                      lea rsi, [r13 + 4]	      2591	bfd.c	FUNCTION_43	ELSE_2	CALL_18
0x4001d76	            0x31ff	                            xor edi, edi	      2591	bfd.c	FUNCTION_43	ELSE_2	CALL_18
0x4001d78	          0xff5048	                 call qword [rax + 0x48]	      2591	bfd.c	FUNCTION_43	ELSE_2	CALL_18
0x4001d7b	        0x488b4508	                mov rax, qword [rbp + 8]	      2592	bfd.c	FUNCTION_43	ELSE_2	CALL_19
0x4001d7f	        0x498d7508	                      lea rsi, [r13 + 8]	      2592	bfd.c	FUNCTION_43	ELSE_2	CALL_19
0x4001d83	          0x4c89f7	                            mov rdi, r14	      2592	bfd.c	FUNCTION_43	ELSE_2	CALL_19
0x4001d86	          0xff5030	                 call qword [rax + 0x30]	      2592	bfd.c	FUNCTION_43	ELSE_2	CALL_19
0x4001d89	        0x488b4508	                mov rax, qword [rbp + 8]	      2593	bfd.c	FUNCTION_43	ELSE_2	CALL_20
0x4001d8d	        0x498d7510	                   lea rsi, [r13 + 0x10]	      2593	bfd.c	FUNCTION_43	ELSE_2	CALL_20
0x4001d91	          0x4c89ff	                            mov rdi, r15	      2593	bfd.c	FUNCTION_43	ELSE_2	CALL_20
0x4001d94	          0xff5030	                 call qword [rax + 0x30]	      2593	bfd.c	FUNCTION_43	ELSE_2	CALL_20
0x4001d97	        0x498b0424	                    mov rax, qword [r12]	        53	string3.h	FUNCTION_44	CALL_3
0x4001d9b	        0x488b1424	                    mov rdx, qword [rsp]	        53	string3.h	FUNCTION_44	CALL_3
0x4001d9f	        0x498d7d18	                   lea rdi, [r13 + 0x18]	        53	string3.h	FUNCTION_44	CALL_3
0x4001da3	        0x488d700c	                    lea rsi, [rax + 0xc]	        53	string3.h	FUNCTION_44	CALL_3
0x4001da7	      0xe800000000	                          call 0x4001dac	        53	string3.h	FUNCTION_44	CALL_3
0x4001dac	        0x498b3c24	                    mov rdi, qword [r12]	      2602	bfd.c	FUNCTION_43	ELSE_3	CALL_23
0x4001db0	      0xe800000000	                          call 0x4001db5	      2602	bfd.c	FUNCTION_43	ELSE_3	CALL_23
0x4001db5	        0x4d892c24	                    mov qword [r12], r13	      2603	bfd.c	FUNCTION_43	ELSE_3
0x4001db9	      0xe946ffffff	                           jmp 0x4001d04	      2603	bfd.c	FUNCTION_43	ELSE_3
0x4001dbe	          0x4531ff	                          xor r15d, r15d	      2576	bfd.c	FUNCTION_43	IF_6	IF_7
0x4001dc1	      0xe942feffff	                           jmp 0x4001c08	      2576	bfd.c	FUNCTION_43	IF_6	IF_7
bfd_get_arch_size	SWITCH,0:functions,0:WHILE,0:IF,1:FOR,0:DO,0:ELSE,0:CALL,2	16
0x4001070	        0x488b4708	                mov rax, qword [rdi + 8]	      1473	bfd.c	FUNCTION_19	IF_1
0x4001074	        0x83780805	                  cmp dword [rax + 8], 5	      1473	bfd.c	FUNCTION_19	IF_1
0x4001078	            0x741e	                            je 0x4001098	      1473	bfd.c	FUNCTION_19	IF_1
0x400107a	        0x4883ec08	                              sub rsp, 8	      1472	bfd.c	FUNCTION_19
0x400107e	      0xe800000000	                          call 0x4001083	      1476	bfd.c	FUNCTION_19	CALL_2
0x4001083	          0x83f821	                           cmp eax, 0x21	      1476	bfd.c	FUNCTION_19	CALL_2
0x4001086	            0x19c0	                            sbb eax, eax	      1476	bfd.c	FUNCTION_19	CALL_2
0x4001088	        0x4883c408	                              add rsp, 8	      1477	bfd.c	FUNCTION_19
0x400108c	          0x83e0e0	                     and eax, 0xffffffe0	      1476	bfd.c	FUNCTION_19	CALL_2
0x400108f	          0x83c040	                           add eax, 0x40	      1476	bfd.c	FUNCTION_19	CALL_2
0x4001092	              0xc3	                                     ret	      1477	bfd.c	FUNCTION_19
0x4001093	       0xf1f440000	                   nop dword [rax + rax]	      1477	bfd.c	FUNCTION_19
0x4001098	    0x488b80680300	           mov rax, qword [rax + 0x368] 	      1474	bfd.c	FUNCTION_19	CALL_1
0x400109f	    0x488b80000300	           mov rax, qword [rax + 0x300] 	      1474	bfd.c	FUNCTION_19	CALL_1
0x40010a6	         0xfb6400a	            movzx eax, byte [rax + 0xa] 	      1474	bfd.c	FUNCTION_19	CALL_1
0x40010aa	              0xc3	                                     ret	      1477	bfd.c	FUNCTION_19
bfd_get_relocated_section_contents	SWITCH,0:functions,0:WHILE,0:IF,2:FOR,0:DO,0:ELSE,1:CALL,0	10
0x4001340	        0x837a0801	                  cmp dword [rdx + 8], 1	      1914	bfd.c	FUNCTION_27	IF_1
0x4001344	          0x4889f8	                            mov rax, rdi	      1921	bfd.c	FUNCTION_27	ELSE_1
0x4001347	            0x7512	                           jne 0x400135b	      1914	bfd.c	FUNCTION_27	IF_1
0x4001349	        0x488b4220	            mov rax, qword [rdx + 0x20] 	      1916	bfd.c	FUNCTION_27	IF_1
0x400134d	    0x488b80f00000	            mov rax, qword [rax + 0xf0] 	      1916	bfd.c	FUNCTION_27	IF_1
0x4001354	          0x4885c0	                           test rax, rax	      1921	bfd.c	FUNCTION_27	ELSE_1
0x4001357	        0x480f44c7	                          cmove rax, rdi	      1921	bfd.c	FUNCTION_27	ELSE_1
0x400135b	        0x488b4008	                mov rax, qword [rax + 8]	      1923	bfd.c	FUNCTION_27
0x400135f	    0x488b80a80200	           mov rax, qword [rax + 0x2a8] 	      1925	bfd.c	FUNCTION_27
0x4001366	            0xffe0	                                 jmp rax	      1925	bfd.c	FUNCTION_27
bfd_scan_vma	SWITCH,0:functions,0:WHILE,1:IF,13:FOR,0:DO,0:ELSE,3:CALL,6	1
0x4001330	      0xe900000000	                           jmp 0x4001335	      1673	bfd.c	FUNCTION_26	CALL_1
bfd_set_file_flags	SWITCH,0:functions,0:WHILE,0:IF,3:FOR,0:DO,0:ELSE,0:CALL,6	30
0x4000370	         0xfb64744	           movzx eax, byte [rdi + 0x44] 	      1402	bfd.c	FUNCTION_16	IF_1
0x4000374	            0x89c2	                            mov edx, eax	      1402	bfd.c	FUNCTION_16	IF_1
0x4000376	          0x83e207	                              and edx, 7	      1402	bfd.c	FUNCTION_16	IF_1
0x4000379	          0x80fa01	                               cmp dl, 1	      1402	bfd.c	FUNCTION_16	IF_1
0x400037c	            0x7412	                            je 0x4000390	      1402	bfd.c	FUNCTION_16	IF_1
0x400037e	    0xc70500000000	               mov dword [0x04000388], 3	       506	bfd.c	FUNCTION_2
0x4000388	            0x31c0	                            xor eax, eax	      1405	bfd.c	FUNCTION_16	IF_1
0x400038a	              0xc3	                                     ret	      1405	bfd.c	FUNCTION_16	IF_1
0x400038b	       0xf1f440000	                   nop dword [rax + rax]	      1405	bfd.c	FUNCTION_16	IF_1
0x4000390	          0x83e008	                              and eax, 8	      1408	bfd.c	FUNCTION_16	IF_2	CALL_2
0x4000393	            0x3c08	                               cmp al, 8	      1408	bfd.c	FUNCTION_16	IF_2	CALL_2
0x4000395	            0x7425	                            je 0x40003bc	      1408	bfd.c	FUNCTION_16	IF_2	CALL_2
0x4000397	          0x8b5744	            mov edx, dword [rdi + 0x44] 	      1414	bfd.c	FUNCTION_16	CALL_4
0x400039a	            0x89f0	                            mov eax, esi	      1414	bfd.c	FUNCTION_16	CALL_4
0x400039c	      0x25ffff0f00	                        and eax, 0xfffff	      1414	bfd.c	FUNCTION_16	CALL_4
0x40003a1	          0xc1e005	                              shl eax, 5	      1414	bfd.c	FUNCTION_16	CALL_4
0x40003a4	    0x81e21f0000fe	                     and edx, 0xfe00001f	      1414	bfd.c	FUNCTION_16	CALL_4
0x40003aa	             0x9d0	                             or eax, edx	      1414	bfd.c	FUNCTION_16	CALL_4
0x40003ac	          0x894744	             mov dword [rdi + 0x44], eax	      1414	bfd.c	FUNCTION_16	CALL_4
0x40003af	        0x488b4708	                mov rax, qword [rdi + 8]	      1415	bfd.c	FUNCTION_16	IF_3	CALL_5
0x40003b3	          0x8b4814	            mov ecx, dword [rax + 0x14] 	      1415	bfd.c	FUNCTION_16	IF_3	CALL_5
0x40003b6	            0x21f1	                            and ecx, esi	      1415	bfd.c	FUNCTION_16	IF_3	CALL_5
0x40003b8	            0x39ce	                            cmp esi, ecx	      1415	bfd.c	FUNCTION_16	IF_3	CALL_5
0x40003ba	            0x7414	                            je 0x40003d0	      1415	bfd.c	FUNCTION_16	IF_3	CALL_5
0x40003bc	    0xc70500000000	               mov dword [0x040003c6], 5	       506	bfd.c	FUNCTION_2
0x40003c6	            0x31c0	                            xor eax, eax	      1411	bfd.c	FUNCTION_16	IF_2
0x40003c8	              0xc3	                                     ret	      1411	bfd.c	FUNCTION_16	IF_2
0x40003c9	     0xf1f80000000	                         nop dword [rax]	      1411	bfd.c	FUNCTION_16	IF_2
0x40003d0	      0xb801000000	                              mov eax, 1	      1421	bfd.c	FUNCTION_16
0x40003d5	              0xc3	                                     ret	      1422	bfd.c	FUNCTION_16
_bfd_set_gp_value	SWITCH,0:functions,0:WHILE,0:IF,4:FOR,0:DO,0:ELSE,1:CALL,3	26
0x40012c0	          0x4885ff	                           test rdi, rdi	      1631	bfd.c	FUNCTION_25	IF_1
0x40012c3	            0x7447	                            je 0x400130c	      1631	bfd.c	FUNCTION_25	IF_1
0x40012c5	         0xfb64744	           movzx eax, byte [rdi + 0x44] 	      1633	bfd.c	FUNCTION_25	IF_2
0x40012c9	          0x83e007	                              and eax, 7	      1633	bfd.c	FUNCTION_25	IF_2
0x40012cc	            0x3c01	                               cmp al, 1	      1633	bfd.c	FUNCTION_25	IF_2
0x40012ce	            0x7408	                            je 0x40012d8	      1633	bfd.c	FUNCTION_25	IF_2
0x40012d0	            0xf3c3	                                     ret	      1633	bfd.c	FUNCTION_25	IF_2
0x40012d2	    0x660f1f440000	                    nop word [rax + rax]	      1633	bfd.c	FUNCTION_25	IF_2
0x40012d8	        0x488b4708	                mov rax, qword [rdi + 8]	      1636	bfd.c	FUNCTION_25	IF_3
0x40012dc	          0x8b4008	                mov eax, dword [rax + 8]	      1636	bfd.c	FUNCTION_25	IF_3
0x40012df	          0x83f803	                              cmp eax, 3	      1636	bfd.c	FUNCTION_25	IF_3
0x40012e2	            0x741c	                            je 0x4001300	      1636	bfd.c	FUNCTION_25	IF_3
0x40012e4	          0x83f805	                              cmp eax, 5	      1638	bfd.c	FUNCTION_25	ELSE_1	IF_4
0x40012e7	            0x75e7	                           jne 0x40012d0	      1638	bfd.c	FUNCTION_25	ELSE_1	IF_4
0x40012e9	    0x488b87f80000	            mov rax, qword [rdi + 0xf8] 	      1639	bfd.c	FUNCTION_25	ELSE_1	IF_4
0x40012f0	    0x4889b0f00200	            mov qword [rax + 0x2f0], rsi	      1639	bfd.c	FUNCTION_25	ELSE_1	IF_4
0x40012f7	              0xc3	                                     ret	      1639	bfd.c	FUNCTION_25	ELSE_1	IF_4
0x40012f8	     0xf1f84000000	                   nop dword [rax + rax]	      1639	bfd.c	FUNCTION_25	ELSE_1	IF_4
0x4001300	    0x488b87f80000	            mov rax, qword [rdi + 0xf8] 	      1637	bfd.c	FUNCTION_25	CALL_2
0x4001307	        0x48897020	             mov qword [rax + 0x20], rsi	      1637	bfd.c	FUNCTION_25	CALL_2
0x400130b	              0xc3	                                     ret	      1637	bfd.c	FUNCTION_25	CALL_2
0x400130c	              0x50	                                push rax	      1630	bfd.c	FUNCTION_25
0x400130d	      0xba00000000	                              mov edx, 0	      1632	bfd.c	FUNCTION_25	CALL_1
0x4001312	      0xbe60060000	                          mov esi, 0x660	      1632	bfd.c	FUNCTION_25	CALL_1
0x4001317	      0xbf00000000	                              mov edi, 0	      1632	bfd.c	FUNCTION_25	CALL_1
0x400131c	      0xe800000000	                          call 0x4001321	      1632	bfd.c	FUNCTION_25	CALL_1
bfd_set_input_error	SWITCH,0:functions,0:WHILE,0:IF,1:FOR,0:DO,0:ELSE,0:CALL,1	11
0x40004f0	          0x83fe13	                           cmp esi, 0x13	       533	bfd.c	FUNCTION_3	IF_1
0x40004f3	    0xc70500000000	           mov dword [0x040004fd], 0x14 	       530	bfd.c	FUNCTION_3
0x40004fd	    0x48893d000000	            mov qword [0x04000504], rdi 	       531	bfd.c	FUNCTION_3
0x4000504	    0x893500000000	            mov dword [0x0400050a], esi 	       532	bfd.c	FUNCTION_3
0x400050a	            0x7702	                            ja 0x400050e	       533	bfd.c	FUNCTION_3	IF_1
0x400050c	            0xf3c3	                                     ret	       533	bfd.c	FUNCTION_3	IF_1
0x400050e	              0x50	                                push rax	       527	bfd.c	FUNCTION_3
0x400050f	      0xba00000000	                              mov edx, 0	       534	bfd.c	FUNCTION_3	CALL_1
0x4000514	      0xbe16020000	                          mov esi, 0x216	       534	bfd.c	FUNCTION_3	CALL_1
0x4000519	      0xbf00000000	                              mov edi, 0	       534	bfd.c	FUNCTION_3	CALL_1
0x400051e	      0xe800000000	                          call 0x4000523	       534	bfd.c	FUNCTION_3	CALL_1
bfd_get_reloc_upper_bound	SWITCH,0:functions,0:WHILE,0:IF,1:FOR,0:DO,0:ELSE,0:CALL,2	11
0x40002f0	         0xfb64744	           movzx eax, byte [rdi + 0x44] 	      1316	bfd.c	FUNCTION_14	IF_1
0x40002f4	          0x83e007	                              and eax, 7	      1316	bfd.c	FUNCTION_14	IF_1
0x40002f7	            0x3c01	                               cmp al, 1	      1316	bfd.c	FUNCTION_14	IF_1
0x40002f9	            0x7515	                           jne 0x4000310	      1316	bfd.c	FUNCTION_14	IF_1
0x40002fb	        0x488b4708	                mov rax, qword [rdi + 8]	      1322	bfd.c	FUNCTION_14	CALL_2
0x40002ff	    0x488b80680200	           mov rax, qword [rax + 0x268] 	      1322	bfd.c	FUNCTION_14	CALL_2
0x4000306	            0xffe0	                                 jmp rax	      1322	bfd.c	FUNCTION_14	CALL_2
0x4000308	     0xf1f84000000	                   nop dword [rax + rax]	      1322	bfd.c	FUNCTION_14	CALL_2
0x4000310	    0xc70500000000	               mov dword [0x0400031a], 5	       506	bfd.c	FUNCTION_2
0x400031a	    0x48c7c0ffffff	             mov rax, 0xffffffffffffffff	      1323	bfd.c	FUNCTION_14
0x4000321	              0xc3	                                     ret	      1323	bfd.c	FUNCTION_14
bfd_emul_get_maxpagesize	SWITCH,0:functions,0:WHILE,0:IF,1:FOR,0:DO,0:ELSE,0:CALL,2	17
0x4001590	        0x4883ec08	                              sub rsp, 8	      2088	bfd.c	FUNCTION_33
0x4001594	            0x31f6	                            xor esi, esi	      2091	bfd.c	FUNCTION_33	CALL_1
0x4001596	      0xe800000000	                          call 0x400159b	      2091	bfd.c	FUNCTION_33	CALL_1
0x400159b	          0x4885c0	                           test rax, rax	      2092	bfd.c	FUNCTION_33	IF_1
0x400159e	            0x7420	                            je 0x40015c0	      2092	bfd.c	FUNCTION_33	IF_1
0x40015a0	          0x4889c2	                            mov rdx, rax	      2092	bfd.c	FUNCTION_33	IF_1
0x40015a3	            0x31c0	                            xor eax, eax	      2096	bfd.c	FUNCTION_33
0x40015a5	        0x837a0805	                  cmp dword [rdx + 8], 5	      2093	bfd.c	FUNCTION_33	IF_1
0x40015a9	            0x750b	                           jne 0x40015b6	      2093	bfd.c	FUNCTION_33	IF_1
0x40015ab	    0x488b82680300	           mov rax, qword [rdx + 0x368] 	      2094	bfd.c	FUNCTION_33	CALL_2
0x40015b2	        0x488b4010	            mov rax, qword [rax + 0x10] 	      2094	bfd.c	FUNCTION_33	CALL_2
0x40015b6	        0x4883c408	                              add rsp, 8	      2097	bfd.c	FUNCTION_33
0x40015ba	              0xc3	                                     ret	      2097	bfd.c	FUNCTION_33
0x40015bb	       0xf1f440000	                   nop dword [rax + rax]	      2097	bfd.c	FUNCTION_33
0x40015c0	            0x31c0	                            xor eax, eax	      2096	bfd.c	FUNCTION_33
0x40015c2	        0x4883c408	                              add rsp, 8	      2097	bfd.c	FUNCTION_33
0x40015c6	              0xc3	                                     ret	      2097	bfd.c	FUNCTION_33
bfd_get_gp_size	SWITCH,0:functions,0:WHILE,0:IF,3:FOR,0:DO,0:ELSE,1:CALL,2	19
0x40011e0	         0xfb65744	           movzx edx, byte [rdi + 0x44] 	      1570	bfd.c	FUNCTION_22	IF_1
0x40011e4	            0x31c0	                            xor eax, eax	      1577	bfd.c	FUNCTION_22
0x40011e6	          0x83e207	                              and edx, 7	      1570	bfd.c	FUNCTION_22	IF_1
0x40011e9	          0x80fa01	                               cmp dl, 1	      1570	bfd.c	FUNCTION_22	IF_1
0x40011ec	            0x7402	                            je 0x40011f0	      1570	bfd.c	FUNCTION_22	IF_1
0x40011ee	            0xf3c3	                                     ret	      1578	bfd.c	FUNCTION_22
0x40011f0	        0x488b5708	                mov rdx, qword [rdi + 8]	      1572	bfd.c	FUNCTION_22	IF_1	IF_2
0x40011f4	          0x8b5208	                mov edx, dword [rdx + 8]	      1572	bfd.c	FUNCTION_22	IF_1	IF_2
0x40011f7	          0x83fa03	                              cmp edx, 3	      1572	bfd.c	FUNCTION_22	IF_1	IF_2
0x40011fa	            0x7414	                            je 0x4001210	      1572	bfd.c	FUNCTION_22	IF_1	IF_2
0x40011fc	          0x83fa05	                              cmp edx, 5	      1574	bfd.c	FUNCTION_22	IF_1	ELSE_1	IF_3
0x40011ff	            0x75ed	                           jne 0x40011ee	      1574	bfd.c	FUNCTION_22	IF_1	ELSE_1	IF_3
0x4001201	    0x488b87f80000	            mov rax, qword [rdi + 0xf8] 	      1575	bfd.c	FUNCTION_22	IF_1	ELSE_1	IF_3
0x4001208	    0x8b80f8020000	           mov eax, dword [rax + 0x2f8] 	      1575	bfd.c	FUNCTION_22	IF_1	ELSE_1	IF_3
0x400120e	              0xc3	                                     ret	      1578	bfd.c	FUNCTION_22
0x400120f	              0x90	                                     nop	      1578	bfd.c	FUNCTION_22
0x4001210	    0x488b87f80000	            mov rax, qword [rdi + 0xf8] 	      1573	bfd.c	FUNCTION_22	IF_1	CALL_1
0x4001217	          0x8b4028	            mov eax, dword [rax + 0x28] 	      1573	bfd.c	FUNCTION_22	IF_1	CALL_1
0x400121a	              0xc3	                                     ret	      1573	bfd.c	FUNCTION_22	IF_1	CALL_1
bfd_get_compression_header_size	SWITCH,0:functions,0:WHILE,0:IF,5:FOR,0:DO,0:ELSE,2:CALL,3	22
0x4001b10	        0x488b5708	                mov rdx, qword [rdi + 8]	      2433	bfd.c	FUNCTION_41	IF_1	CALL_1
0x4001b14	            0x31c0	                            xor eax, eax	      2449	bfd.c	FUNCTION_41
0x4001b16	        0x837a0805	                  cmp dword [rdx + 8], 5	      2433	bfd.c	FUNCTION_41	IF_1	CALL_1
0x4001b1a	            0x7404	                            je 0x4001b20	      2433	bfd.c	FUNCTION_41	IF_1	CALL_1
0x4001b1c	            0xf3c3	                                     ret	      2450	bfd.c	FUNCTION_41
0x4001b1e	            0x6690	                                     nop	      2450	bfd.c	FUNCTION_41
0x4001b20	          0x4885f6	                           test rsi, rsi	      2435	bfd.c	FUNCTION_41	IF_1	IF_2
0x4001b23	            0x7433	                            je 0x4001b58	      2435	bfd.c	FUNCTION_41	IF_1	IF_2
0x4001b25	    0x488b8ee00000	            mov rcx, qword [rsi + 0xe0] 	      2440	bfd.c	FUNCTION_41	IF_1	ELSE_1	IF_4	CALL_2
0x4001b2c	        0xf6410908	                  test byte [rcx + 9], 8	      2440	bfd.c	FUNCTION_41	IF_1	ELSE_1	IF_4	CALL_2
0x4001b30	            0x74ea	                            je 0x4001b1c	      2440	bfd.c	FUNCTION_41	IF_1	ELSE_1	IF_4	CALL_2
0x4001b32	    0x488b82680300	           mov rax, qword [rdx + 0x368] 	      2443	bfd.c	FUNCTION_41	IF_1	IF_5	CALL_3
0x4001b39	      0xba18000000	                           mov edx, 0x18	      2446	bfd.c	FUNCTION_41	IF_1	ELSE_2
0x4001b3e	    0x488b80000300	           mov rax, qword [rax + 0x300] 	      2443	bfd.c	FUNCTION_41	IF_1	IF_5	CALL_3
0x4001b45	        0x80780c01	                 cmp byte [rax + 0xc], 1	      2446	bfd.c	FUNCTION_41	IF_1	ELSE_2
0x4001b49	      0xb80c000000	                            mov eax, 0xc	      2446	bfd.c	FUNCTION_41	IF_1	ELSE_2
0x4001b4e	           0xf45c2	                         cmovne eax, edx	      2446	bfd.c	FUNCTION_41	IF_1	ELSE_2
0x4001b51	              0xc3	                                     ret	      2450	bfd.c	FUNCTION_41
0x4001b52	    0x660f1f440000	                    nop word [rax + rax]	      2450	bfd.c	FUNCTION_41
0x4001b58	        0xf6474640	           test byte [rdi + 0x46], 0x40 	      2437	bfd.c	FUNCTION_41	IF_1	IF_2	IF_3
0x4001b5c	            0x75d4	                           jne 0x4001b32	      2437	bfd.c	FUNCTION_41	IF_1	IF_2	IF_3
0x4001b5e	            0xf3c3	                                     ret	      2437	bfd.c	FUNCTION_41	IF_1	IF_2	IF_3
bfd_perror	SWITCH,0:functions,0:WHILE,0:IF,1:FOR,0:DO,0:ELSE,1:CALL,6	31
0x4000170	              0x53	                                push rbx	       594	bfd.c	FUNCTION_5
0x4000171	          0x4889fb	                            mov rbx, rdi	       594	bfd.c	FUNCTION_5
0x4000174	    0x488b3d000000	            mov rdi, qword [0x0400017b] 	       595	bfd.c	FUNCTION_5	CALL_1
0x400017b	      0xe800000000	                          call 0x4000180	       595	bfd.c	FUNCTION_5	CALL_1
0x4000180	          0x4885db	                           test rbx, rbx	       596	bfd.c	FUNCTION_5	IF_1
0x4000183	    0x8b3d00000000	            mov edi, dword [0x04000189] 	       597	bfd.c	FUNCTION_5	CALL_3
0x4000189	            0x7405	                            je 0x4000190	       596	bfd.c	FUNCTION_5	IF_1
0x400018b	          0x803b00	                       cmp byte [rbx], 0	       596	bfd.c	FUNCTION_5	IF_1
0x400018e	            0x7530	                           jne 0x40001c0	       596	bfd.c	FUNCTION_5	IF_1
0x4000190	      0xe800000000	                          call 0x4000195	       597	bfd.c	FUNCTION_5	CALL_3
0x4000195	    0x488b3d000000	            mov rdi, qword [0x0400019c] 	        97	stdio2.h	CALL_34
0x400019c	          0x4889c1	                            mov rcx, rax	        97	stdio2.h	CALL_34
0x400019f	      0xba00000000	                              mov edx, 0	        97	stdio2.h	CALL_34
0x40001a4	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_34
0x40001a9	            0x31c0	                            xor eax, eax	        97	stdio2.h	CALL_34
0x40001ab	      0xe800000000	                          call 0x40001b0	        97	stdio2.h	CALL_34
0x40001b0	              0x5b	                                 pop rbx	       601	bfd.c	FUNCTION_5
0x40001b1	    0x488b3d000000	            mov rdi, qword [0x040001b8] 	       600	bfd.c	FUNCTION_5	CALL_6
0x40001b8	      0xe900000000	                           jmp 0x40001bd	       600	bfd.c	FUNCTION_5	CALL_6
0x40001bd	           0xf1f00	                         nop dword [rax]	       600	bfd.c	FUNCTION_5	CALL_6
0x40001c0	      0xe800000000	                          call 0x40001c5	       599	bfd.c	FUNCTION_5	CALL_5
0x40001c5	    0x488b3d000000	            mov rdi, qword [0x040001cc] 	        97	stdio2.h	CALL_34
0x40001cc	          0x4989c0	                             mov r8, rax	       599	bfd.c	FUNCTION_5	CALL_5
0x40001cf	          0x4889d9	                            mov rcx, rbx	        97	stdio2.h	CALL_34
0x40001d2	      0xba00000000	                              mov edx, 0	        97	stdio2.h	CALL_34
0x40001d7	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_34
0x40001dc	            0x31c0	                            xor eax, eax	        97	stdio2.h	CALL_34
0x40001de	      0xe800000000	                          call 0x40001e3	        97	stdio2.h	CALL_34
0x40001e3	              0x5b	                                 pop rbx	       601	bfd.c	FUNCTION_5
0x40001e4	    0x488b3d000000	            mov rdi, qword [0x040001eb] 	       600	bfd.c	FUNCTION_5	CALL_6
0x40001eb	      0xe900000000	              jmp sym._bfd_error_handler	       600	bfd.c	FUNCTION_5	CALL_6
bfd_fprintf_vma	SWITCH,0:functions,0:WHILE,0:IF,1:FOR,0:DO,0:ELSE,0:CALL,2	19
0x40014e0	              0x55	                                push rbp	      2007	bfd.c	FUNCTION_31
0x40014e1	              0x53	                                push rbx	      2007	bfd.c	FUNCTION_31
0x40014e2	          0x4889f5	                            mov rbp, rsi	      2007	bfd.c	FUNCTION_31
0x40014e5	          0x4889d3	                            mov rbx, rdx	      2007	bfd.c	FUNCTION_31
0x40014e8	        0x4883ec08	                              sub rsp, 8	      2007	bfd.c	FUNCTION_31
0x40014ec	      0xe84febffff	                        call sym.is32bit	      2009	bfd.c	FUNCTION_31	IF_1	CALL_1
0x40014f1	            0x85c0	                           test eax, eax	      2009	bfd.c	FUNCTION_31	IF_1	CALL_1
0x40014f3	            0x89d9	                            mov ecx, ebx	        97	stdio2.h	CALL_34
0x40014f5	      0xba00000000	                              mov edx, 0	        97	stdio2.h	CALL_34
0x40014fa	            0x7508	                           jne 0x4001504	      2009	bfd.c	FUNCTION_31	IF_1	CALL_1
0x40014fc	          0x4889d9	                            mov rcx, rbx	        97	stdio2.h	CALL_34
0x40014ff	      0xba00000000	                              mov edx, 0	        97	stdio2.h	CALL_34
0x4001504	        0x4883c408	                              add rsp, 8	      2016	bfd.c	FUNCTION_31
0x4001508	          0x4889ef	                            mov rdi, rbp	        97	stdio2.h	CALL_34
0x400150b	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_34
0x4001510	              0x5b	                                 pop rbx	      2016	bfd.c	FUNCTION_31
0x4001511	              0x5d	                                 pop rbp	      2016	bfd.c	FUNCTION_31
0x4001512	            0x31c0	                            xor eax, eax	        97	stdio2.h	CALL_34
0x4001514	      0xe900000000	                           jmp 0x4001519	        97	stdio2.h	CALL_34
bfd_set_gp_size	SWITCH,0:functions,0:WHILE,0:IF,3:FOR,0:DO,0:ELSE,1:CALL,2	19
0x4001220	         0xfb64744	           movzx eax, byte [rdi + 0x44] 	      1597	bfd.c	FUNCTION_23	IF_1
0x4001224	          0x83e007	                              and eax, 7	      1597	bfd.c	FUNCTION_23	IF_1
0x4001227	            0x3c01	                               cmp al, 1	      1597	bfd.c	FUNCTION_23	IF_1
0x4001229	            0x7405	                            je 0x4001230	      1597	bfd.c	FUNCTION_23	IF_1
0x400122b	            0xf3c3	                                     ret	      1597	bfd.c	FUNCTION_23	IF_1
0x400122d	           0xf1f00	                         nop dword [rax]	      1597	bfd.c	FUNCTION_23	IF_1
0x4001230	        0x488b4708	                mov rax, qword [rdi + 8]	      1600	bfd.c	FUNCTION_23	IF_2
0x4001234	          0x8b4008	                mov eax, dword [rax + 8]	      1600	bfd.c	FUNCTION_23	IF_2
0x4001237	          0x83f803	                              cmp eax, 3	      1600	bfd.c	FUNCTION_23	IF_2
0x400123a	            0x7414	                            je 0x4001250	      1600	bfd.c	FUNCTION_23	IF_2
0x400123c	          0x83f805	                              cmp eax, 5	      1602	bfd.c	FUNCTION_23	ELSE_1	IF_3
0x400123f	            0x75ea	                           jne 0x400122b	      1602	bfd.c	FUNCTION_23	ELSE_1	IF_3
0x4001241	    0x488b87f80000	            mov rax, qword [rdi + 0xf8] 	      1603	bfd.c	FUNCTION_23	ELSE_1	IF_3
0x4001248	    0x89b0f8020000	            mov dword [rax + 0x2f8], esi	      1603	bfd.c	FUNCTION_23	ELSE_1	IF_3
0x400124e	              0xc3	                                     ret	      1603	bfd.c	FUNCTION_23	ELSE_1	IF_3
0x400124f	              0x90	                                     nop	      1603	bfd.c	FUNCTION_23	ELSE_1	IF_3
0x4001250	    0x488b87f80000	            mov rax, qword [rdi + 0xf8] 	      1601	bfd.c	FUNCTION_23	CALL_1
0x4001257	          0x897028	             mov dword [rax + 0x28], esi	      1601	bfd.c	FUNCTION_23	CALL_1
0x400125a	              0xc3	                                     ret	      1601	bfd.c	FUNCTION_23	CALL_1
bfd_sprintf_vma	SWITCH,0:functions,0:WHILE,0:IF,1:FOR,0:DO,0:ELSE,0:CALL,2	20
0x4001490	              0x55	                                push rbp	      1994	bfd.c	FUNCTION_30
0x4001491	              0x53	                                push rbx	      1994	bfd.c	FUNCTION_30
0x4001492	          0x4889d5	                            mov rbp, rdx	      1994	bfd.c	FUNCTION_30
0x4001495	          0x4889f3	                            mov rbx, rsi	      1994	bfd.c	FUNCTION_30
0x4001498	        0x4883ec08	                              sub rsp, 8	      1994	bfd.c	FUNCTION_30
0x400149c	      0xe89febffff	                        call sym.is32bit	      1996	bfd.c	FUNCTION_30	IF_1	CALL_1
0x40014a1	            0x85c0	                           test eax, eax	      1996	bfd.c	FUNCTION_30	IF_1	CALL_1
0x40014a3	          0x4189e8	                            mov r8d, ebp	        33	stdio2.h	FUNCTION_56	CALL_1
0x40014a6	      0xb900000000	                              mov ecx, 0	        33	stdio2.h	FUNCTION_56	CALL_1
0x40014ab	            0x7508	                           jne 0x40014b5	      1996	bfd.c	FUNCTION_30	IF_1	CALL_1
0x40014ad	          0x4989e8	                             mov r8, rbp	        33	stdio2.h	FUNCTION_56	CALL_1
0x40014b0	      0xb900000000	                              mov ecx, 0	        33	stdio2.h	FUNCTION_56	CALL_1
0x40014b5	        0x4883c408	                              add rsp, 8	      2003	bfd.c	FUNCTION_30
0x40014b9	          0x4889df	                            mov rdi, rbx	        33	stdio2.h	FUNCTION_56	CALL_1
0x40014bc	    0x48c7c2ffffff	             mov rdx, 0xffffffffffffffff	        33	stdio2.h	FUNCTION_56	CALL_1
0x40014c3	              0x5b	                                 pop rbx	      2003	bfd.c	FUNCTION_30
0x40014c4	              0x5d	                                 pop rbp	      2003	bfd.c	FUNCTION_30
0x40014c5	      0xbe01000000	                              mov esi, 1	        33	stdio2.h	FUNCTION_56	CALL_1
0x40014ca	            0x31c0	                            xor eax, eax	        33	stdio2.h	FUNCTION_56	CALL_1
0x40014cc	      0xe900000000	                           jmp 0x40014d1	        33	stdio2.h	FUNCTION_56	CALL_1
bfd_check_compression_header	SWITCH,0:functions,0:WHILE,0:IF,3:FOR,0:DO,0:ELSE,1:CALL,9	63
0x4001a40	        0x488b4708	                mov rax, qword [rdi + 8]	      2386	bfd.c	FUNCTION_40	IF_1	CALL_1
0x4001a44	        0x83780805	                  cmp dword [rax + 8], 5	      2386	bfd.c	FUNCTION_40	IF_1	CALL_1
0x4001a48	            0x7406	                            je 0x4001a50	      2386	bfd.c	FUNCTION_40	IF_1	CALL_1
0x4001a4a	            0x31c0	                            xor eax, eax	      2413	bfd.c	FUNCTION_40
0x4001a4c	              0xc3	                                     ret	      2414	bfd.c	FUNCTION_40
0x4001a4d	           0xf1f00	                         nop dword [rax]	      2414	bfd.c	FUNCTION_40
0x4001a50	    0x4c8b82e00000	              mov r8, qword [rdx + 0xe0]	      2387	bfd.c	FUNCTION_40	IF_1	CALL_2
0x4001a57	      0x41f6400908	                   test byte [r8 + 9], 8	      2387	bfd.c	FUNCTION_40	IF_1	CALL_2
0x4001a5c	            0x74ec	                            je 0x4001a4a	      2387	bfd.c	FUNCTION_40	IF_1	CALL_2
0x4001a5e	            0x4157	                                push r15	      2385	bfd.c	FUNCTION_40
0x4001a60	            0x4156	                                push r14	      2385	bfd.c	FUNCTION_40
0x4001a62	            0x4155	                                push r13	      2385	bfd.c	FUNCTION_40
0x4001a64	            0x4154	                                push r12	      2385	bfd.c	FUNCTION_40
0x4001a66	          0x4989d4	                            mov r12, rdx	      2385	bfd.c	FUNCTION_40
0x4001a69	              0x55	                                push rbp	      2385	bfd.c	FUNCTION_40
0x4001a6a	              0x53	                                push rbx	      2385	bfd.c	FUNCTION_40
0x4001a6b	          0x4889cd	                            mov rbp, rcx	      2385	bfd.c	FUNCTION_40
0x4001a6e	          0x4889fb	                            mov rbx, rdi	      2385	bfd.c	FUNCTION_40
0x4001a71	          0x4989f5	                            mov r13, rsi	      2385	bfd.c	FUNCTION_40
0x4001a74	          0x4889f7	                            mov rdi, rsi	      2394	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_4
0x4001a77	        0x4883ec08	                              sub rsp, 8	      2385	bfd.c	FUNCTION_40
0x4001a7b	    0x488b90680300	           mov rdx, qword [rax + 0x368] 	      2391	bfd.c	FUNCTION_40	IF_1	IF_2
0x4001a82	    0x488b92000300	           mov rdx, qword [rdx + 0x300] 	      2391	bfd.c	FUNCTION_40	IF_1	IF_2
0x4001a89	        0x807a0c01	                 cmp byte [rdx + 0xc], 1	      2391	bfd.c	FUNCTION_40	IF_1	IF_2
0x4001a8d	            0x7451	                            je 0x4001ae0	      2391	bfd.c	FUNCTION_40	IF_1	IF_2
0x4001a8f	          0xff5038	                 call qword [rax + 0x38]	      2401	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_7
0x4001a92	          0x4189c7	                           mov r15d, eax	      2401	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_7
0x4001a95	        0x488b4308	                mov rax, qword [rbx + 8]	      2402	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_8
0x4001a99	        0x498d7d08	                      lea rdi, [r13 + 8]	      2402	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_8
0x4001a9d	          0xff5020	                 call qword [rax + 0x20]	      2402	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_8
0x4001aa0	          0x4989c6	                            mov r14, rax	      2402	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_8
0x4001aa3	        0x488b4308	                mov rax, qword [rbx + 8]	      2403	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_9
0x4001aa7	        0x498d7d10	                   lea rdi, [r13 + 0x10]	      2403	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_9
0x4001aab	          0xff5020	                 call qword [rax + 0x20]	      2403	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_9
0x4001aae	        0x4183ff01	                             cmp r15d, 1	      2405	bfd.c	FUNCTION_40	IF_1	IF_3
0x4001ab2	            0x7414	                            je 0x4001ac8	      2405	bfd.c	FUNCTION_40	IF_1	IF_3
0x4001ab4	            0x31c0	                            xor eax, eax	      2413	bfd.c	FUNCTION_40
0x4001ab6	        0x4883c408	                              add rsp, 8	      2414	bfd.c	FUNCTION_40
0x4001aba	              0x5b	                                 pop rbx	      2414	bfd.c	FUNCTION_40
0x4001abb	              0x5d	                                 pop rbp	      2414	bfd.c	FUNCTION_40
0x4001abc	            0x415c	                                 pop r12	      2414	bfd.c	FUNCTION_40
0x4001abe	            0x415d	                                 pop r13	      2414	bfd.c	FUNCTION_40
0x4001ac0	            0x415e	                                 pop r14	      2414	bfd.c	FUNCTION_40
0x4001ac2	            0x415f	                                 pop r15	      2414	bfd.c	FUNCTION_40
0x4001ac4	              0xc3	                                     ret	      2414	bfd.c	FUNCTION_40
0x4001ac5	           0xf1f00	                         nop dword [rax]	      2414	bfd.c	FUNCTION_40
0x4001ac8	      0x418b4c2470	            mov ecx, dword [r12 + 0x70] 	      2406	bfd.c	FUNCTION_40	IF_1	IF_3
0x4001acd	          0x41d3e7	                            shl r15d, cl	      2406	bfd.c	FUNCTION_40	IF_1	IF_3
0x4001ad0	          0x4c39f8	                            cmp rax, r15	      2406	bfd.c	FUNCTION_40	IF_1	IF_3
0x4001ad3	            0x75df	                           jne 0x4001ab4	      2406	bfd.c	FUNCTION_40	IF_1	IF_3
0x4001ad5	        0x4c897500	                    mov qword [rbp], r14	      2408	bfd.c	FUNCTION_40	IF_1	IF_3
0x4001ad9	      0xb801000000	                              mov eax, 1	      2409	bfd.c	FUNCTION_40	IF_1	IF_3
0x4001ade	            0xebd6	                           jmp 0x4001ab6	      2409	bfd.c	FUNCTION_40	IF_1	IF_3
0x4001ae0	          0xff5038	                 call qword [rax + 0x38]	      2394	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_4
0x4001ae3	          0x4189c7	                           mov r15d, eax	      2394	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_4
0x4001ae6	        0x488b4308	                mov rax, qword [rbx + 8]	      2395	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_5
0x4001aea	        0x498d7d04	                      lea rdi, [r13 + 4]	      2395	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_5
0x4001aee	          0xff5038	                 call qword [rax + 0x38]	      2395	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_5
0x4001af1	          0x4989c6	                            mov r14, rax	      2395	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_5
0x4001af4	        0x488b4308	                mov rax, qword [rbx + 8]	      2396	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_6
0x4001af8	        0x498d7d08	                      lea rdi, [r13 + 8]	      2396	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_6
0x4001afc	          0xff5038	                 call qword [rax + 0x38]	      2396	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_6
0x4001aff	            0xebad	                           jmp 0x4001aae	      2396	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_6
bfd_update_compression_header	SWITCH,0:functions,0:WHILE,0:IF,4:FOR,0:DO,0:ELSE,3:CALL,14	80
0x4001910	            0x4154	                                push r12	      2313	bfd.c	FUNCTION_39
0x4001912	              0x55	                                push rbp	      2313	bfd.c	FUNCTION_39
0x4001913	              0x53	                                push rbx	      2313	bfd.c	FUNCTION_39
0x4001914	          0x8b4744	            mov eax, dword [rdi + 0x44] 	      2314	bfd.c	FUNCTION_39	IF_1
0x4001917	          0xc1e805	                              shr eax, 5	      2314	bfd.c	FUNCTION_39	IF_1
0x400191a	      0x25ffff0f00	                        and eax, 0xfffff	      2314	bfd.c	FUNCTION_39	IF_1
0x400191f	          0xf6c440	                           test ah, 0x40	      2314	bfd.c	FUNCTION_39	IF_1
0x4001922	     0xf84f7000000	                            je 0x4001a1f	      2314	bfd.c	FUNCTION_39	IF_1
0x4001928	        0x488b4f08	                mov rcx, qword [rdi + 8]	      2316	bfd.c	FUNCTION_39	IF_1	IF_2	CALL_1
0x400192c	          0x4889fb	                            mov rbx, rdi	      2316	bfd.c	FUNCTION_39	IF_1	IF_2	CALL_1
0x400192f	        0x83790805	                  cmp dword [rcx + 8], 5	      2316	bfd.c	FUNCTION_39	IF_1	IF_2	CALL_1
0x4001933	            0x740b	                            je 0x4001940	      2316	bfd.c	FUNCTION_39	IF_1	IF_2	CALL_1
0x4001935	              0x5b	                                 pop rbx	      2361	bfd.c	FUNCTION_39
0x4001936	              0x5d	                                 pop rbp	      2361	bfd.c	FUNCTION_39
0x4001937	            0x415c	                                 pop r12	      2361	bfd.c	FUNCTION_39
0x4001939	              0xc3	                                     ret	      2361	bfd.c	FUNCTION_39
0x400193a	    0x660f1f440000	                    nop word [rax + rax]	      2361	bfd.c	FUNCTION_39
0x4001940	      0xa900000200	                       test eax, 0x20000	      2318	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3
0x4001945	          0x4889f5	                            mov rbp, rsi	      2318	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3
0x4001948	          0x4989d4	                            mov r12, rdx	      2318	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3
0x400194b	     0xf84a7000000	                            je 0x40019f8	      2318	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3
0x4001951	    0x488bb1680300	           mov rsi, qword [rcx + 0x368] 	      2320	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3
0x4001958	    0x488b82e00000	            mov rax, qword [rdx + 0xe0] 	      2324	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	CALL_3
0x400195f	      0xbf01000000	                              mov edi, 1	      2330	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_4
0x4001964	    0x488148080008	               or qword [rax + 8], 0x800	      2324	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	CALL_3
0x400196c	    0x488b86000300	           mov rax, qword [rsi + 0x300] 	      2326	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4
0x4001973	          0x4889ee	                            mov rsi, rbp	      2330	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_4
0x4001976	        0x80780c01	                 cmp byte [rax + 0xc], 1	      2326	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4
0x400197a	            0x7444	                            je 0x40019c0	      2326	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4
0x400197c	          0xff5148	                 call qword [rcx + 0x48]	      2339	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_7
0x400197f	        0x488b4308	                mov rax, qword [rbx + 8]	      2340	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_8
0x4001983	        0x488d7504	                      lea rsi, [rbp + 4]	      2340	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_8
0x4001987	            0x31ff	                            xor edi, edi	      2340	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_8
0x4001989	          0xff5048	                 call qword [rax + 0x48]	      2340	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_8
0x400198c	        0x488b4308	                mov rax, qword [rbx + 8]	      2341	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_9
0x4001990	        0x488d7508	                      lea rsi, [rbp + 8]	      2341	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_9
0x4001994	      0x498b7c2438	            mov rdi, qword [r12 + 0x38] 	      2341	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_9
0x4001999	          0xff5030	                 call qword [rax + 0x30]	      2341	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_9
0x400199c	      0x418b4c2470	            mov ecx, dword [r12 + 0x70] 	      2342	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_10
0x40019a1	        0x488b4308	                mov rax, qword [rbx + 8]	      2342	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_10
0x40019a5	      0xbf01000000	                              mov edi, 1	      2342	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_10
0x40019aa	              0x5b	                                 pop rbx	      2361	bfd.c	FUNCTION_39
0x40019ab	        0x488d7510	                   lea rsi, [rbp + 0x10]	      2342	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_10
0x40019af	            0xd3e7	                             shl edi, cl	      2342	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_10
0x40019b1	        0x488b4030	            mov rax, qword [rax + 0x30] 	      2342	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_10
0x40019b5	              0x5d	                                 pop rbp	      2361	bfd.c	FUNCTION_39
0x40019b6	            0x415c	                                 pop r12	      2361	bfd.c	FUNCTION_39
0x40019b8	          0x4863ff	                         movsxd rdi, edi	      2342	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_10
0x40019bb	            0xffe0	                                 jmp rax	      2342	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_10
0x40019bd	           0xf1f00	                         nop dword [rax]	      2342	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_10
0x40019c0	          0xff5148	                 call qword [rcx + 0x48]	      2330	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_4
0x40019c3	        0x488b4308	                mov rax, qword [rbx + 8]	      2331	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_5
0x40019c7	        0x488d7504	                      lea rsi, [rbp + 4]	      2331	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_5
0x40019cb	      0x498b7c2438	            mov rdi, qword [r12 + 0x38] 	      2331	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_5
0x40019d0	          0xff5048	                 call qword [rax + 0x48]	      2331	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_5
0x40019d3	      0x418b4c2470	            mov ecx, dword [r12 + 0x70] 	      2332	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_6
0x40019d8	        0x488b4308	                mov rax, qword [rbx + 8]	      2332	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_6
0x40019dc	      0xbf01000000	                              mov edi, 1	      2332	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_6
0x40019e1	              0x5b	                                 pop rbx	      2361	bfd.c	FUNCTION_39
0x40019e2	        0x488d7508	                      lea rsi, [rbp + 8]	      2332	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_6
0x40019e6	            0xd3e7	                             shl edi, cl	      2332	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_6
0x40019e8	        0x488b4048	            mov rax, qword [rax + 0x48] 	      2332	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_6
0x40019ec	              0x5d	                                 pop rbp	      2361	bfd.c	FUNCTION_39
0x40019ed	            0x415c	                                 pop r12	      2361	bfd.c	FUNCTION_39
0x40019ef	          0x4863ff	                         movsxd rdi, edi	      2332	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_6
0x40019f2	            0xffe0	                                 jmp rax	      2332	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_6
0x40019f4	         0xf1f4000	                         nop dword [rax]	      2332	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_6
0x40019f8	    0x488b82e00000	            mov rax, qword [rdx + 0xe0] 	      2349	bfd.c	FUNCTION_39	IF_1	IF_2	ELSE_2	CALL_11
0x40019ff	        0x488d7604	                      lea rsi, [rsi + 4]	      2355	bfd.c	FUNCTION_39	IF_1	IF_2	ELSE_2	CALL_13
0x4001a03	    0x48816008fff7	 and qword [rax + 8], 0xfffffffffffff7ff	      2349	bfd.c	FUNCTION_39	IF_1	IF_2	ELSE_2	CALL_11
0x4001a0b	    0xc746fc5a4c49	        mov dword [rsi - 4], 0x42494c5a 	        53	string3.h	FUNCTION_44	CALL_3
0x4001a12	              0x5b	                                 pop rbx	      2361	bfd.c	FUNCTION_39
0x4001a13	              0x5d	                                 pop rbp	      2361	bfd.c	FUNCTION_39
0x4001a14	            0x415c	                                 pop r12	      2361	bfd.c	FUNCTION_39
0x4001a16	        0x488b7a38	            mov rdi, qword [rdx + 0x38] 	      2355	bfd.c	FUNCTION_39	IF_1	IF_2	ELSE_2	CALL_13
0x4001a1a	      0xe900000000	                           jmp 0x4001a1f	      2355	bfd.c	FUNCTION_39	IF_1	IF_2	ELSE_2	CALL_13
0x4001a1f	      0xba00000000	                              mov edx, 0	      2360	bfd.c	FUNCTION_39	CALL_14
0x4001a24	      0xbe38090000	                          mov esi, 0x938	      2360	bfd.c	FUNCTION_39	CALL_14
0x4001a29	      0xbf00000000	                              mov edi, 0	      2360	bfd.c	FUNCTION_39	CALL_14
0x4001a2e	      0xe800000000	                          call 0x4001a33	      2360	bfd.c	FUNCTION_39	CALL_14
bfd_emul_set_maxpagesize	SWITCH,0:functions,0:WHILE,0:IF,1:FOR,0:DO,0:ELSE,0:CALL,2	23
0x40015d0	              0x53	                                push rbx	      2132	bfd.c	FUNCTION_35
0x40015d1	          0x4889f3	                            mov rbx, rsi	      2132	bfd.c	FUNCTION_35
0x40015d4	            0x31f6	                            xor esi, esi	      2135	bfd.c	FUNCTION_35	CALL_1
0x40015d6	      0xe800000000	                          call 0x40015db	      2135	bfd.c	FUNCTION_35	CALL_1
0x40015db	          0x4885c0	                           test rax, rax	      2136	bfd.c	FUNCTION_35	IF_1
0x40015de	            0x7436	                            je 0x4001616	      2136	bfd.c	FUNCTION_35	IF_1
0x40015e0	          0x4889c2	                            mov rdx, rax	      2136	bfd.c	FUNCTION_35	IF_1
0x40015e3	            0xeb14	                           jmp 0x40015f9	      2136	bfd.c	FUNCTION_35	IF_1
0x40015e5	           0xf1f00	                         nop dword [rax]	      2136	bfd.c	FUNCTION_35	IF_1
0x40015e8	    0x488b92600300	           mov rdx, qword [rdx + 0x360] 	      2111	bfd.c	FUNCTION_34	IF_2
0x40015ef	          0x4885d2	                           test rdx, rdx	      2112	bfd.c	FUNCTION_34	IF_2
0x40015f2	            0x7422	                            je 0x4001616	      2112	bfd.c	FUNCTION_34	IF_2
0x40015f4	          0x4839d0	                            cmp rax, rdx	      2112	bfd.c	FUNCTION_34	IF_2
0x40015f7	            0x741d	                            je 0x4001616	      2112	bfd.c	FUNCTION_34	IF_2
0x40015f9	        0x837a0805	                  cmp dword [rdx + 8], 5	      2103	bfd.c	FUNCTION_34	IF_1
0x40015fd	            0x75e9	                           jne 0x40015e8	      2103	bfd.c	FUNCTION_34	IF_1
0x40015ff	    0x488b8a680300	           mov rcx, qword [rdx + 0x368] 	      2108	bfd.c	FUNCTION_34	IF_1
0x4001606	    0x488b92600300	           mov rdx, qword [rdx + 0x360] 	      2111	bfd.c	FUNCTION_34	IF_2
0x400160d	          0x4885d2	                           test rdx, rdx	      2112	bfd.c	FUNCTION_34	IF_2
0x4001610	        0x48895910	             mov qword [rcx + 0x10], rbx	      2108	bfd.c	FUNCTION_34	IF_1
0x4001614	            0x75de	                           jne 0x40015f4	      2112	bfd.c	FUNCTION_34	IF_2
0x4001616	              0x5b	                                 pop rbx	      2140	bfd.c	FUNCTION_35
0x4001617	              0xc3	                                     ret	      2140	bfd.c	FUNCTION_35
bfd_demangle	SWITCH,0:functions,0:WHILE,1:IF,10:FOR,0:DO,0:ELSE,0:CALL,16	169
0x40016c0	            0x4157	                                push r15	      2219	bfd.c	FUNCTION_38
0x40016c2	            0x4156	                                push r14	      2219	bfd.c	FUNCTION_38
0x40016c4	            0x4155	                                push r13	      2219	bfd.c	FUNCTION_38
0x40016c6	            0x4154	                                push r12	      2219	bfd.c	FUNCTION_38
0x40016c8	          0x4189d5	                           mov r13d, edx	      2219	bfd.c	FUNCTION_38
0x40016cb	              0x55	                                push rbp	      2219	bfd.c	FUNCTION_38
0x40016cc	              0x53	                                push rbx	      2219	bfd.c	FUNCTION_38
0x40016cd	          0x4889f3	                            mov rbx, rsi	      2219	bfd.c	FUNCTION_38
0x40016d0	        0x4883ec18	                           sub rsp, 0x18	      2219	bfd.c	FUNCTION_38
0x40016d4	          0x4885ff	                           test rdi, rdi	      2227	bfd.c	FUNCTION_38	CALL_1
0x40016d7	           0xfb606	                   movzx eax, byte [rsi]	      2226	bfd.c	FUNCTION_38
0x40016da	     0xf8421010000	                            je 0x4001801	      2227	bfd.c	FUNCTION_38	CALL_1
0x40016e0	            0x84c0	                             test al, al	      2226	bfd.c	FUNCTION_38
0x40016e2	     0xf8510010000	                           jne 0x40017f8	      2226	bfd.c	FUNCTION_38
0x40016e8	          0x4889f5	                            mov rbp, rsi	      2226	bfd.c	FUNCTION_38
0x40016eb	          0x4989f7	                            mov r15, rsi	      2226	bfd.c	FUNCTION_38
0x40016ee	    0x48c704240000	                      mov qword [rsp], 0	      2226	bfd.c	FUNCTION_38
0x40016f6	    0xc74424080000	                  mov dword [rsp + 8], 0	      2226	bfd.c	FUNCTION_38
0x40016fe	      0xbe40000000	                           mov esi, 0x40	      2242	bfd.c	FUNCTION_38	CALL_2
0x4001703	          0x4c89ff	                            mov rdi, r15	      2242	bfd.c	FUNCTION_38	CALL_2
0x4001706	      0xe800000000	                          call 0x400170b	      2242	bfd.c	FUNCTION_38	CALL_2
0x400170b	          0x4885c0	                           test rax, rax	      2243	bfd.c	FUNCTION_38	IF_2
0x400170e	          0x4989c4	                            mov r12, rax	      2242	bfd.c	FUNCTION_38	CALL_2
0x4001711	     0xf8499010000	                            je 0x40018b0	      2243	bfd.c	FUNCTION_38	IF_2
0x4001717	          0x4829e8	                            sub rax, rbp	      2245	bfd.c	FUNCTION_38	IF_2	CALL_3
0x400171a	        0x488d7801	                      lea rdi, [rax + 1]	      2245	bfd.c	FUNCTION_38	IF_2	CALL_3
0x400171e	          0x4889c5	                            mov rbp, rax	      2245	bfd.c	FUNCTION_38	IF_2	CALL_3
0x4001721	      0xe800000000	                          call 0x4001726	      2245	bfd.c	FUNCTION_38	IF_2	CALL_3
0x4001726	          0x4885c0	                           test rax, rax	      2246	bfd.c	FUNCTION_38	IF_2	IF_3
0x4001729	          0x4989c6	                            mov r14, rax	      2245	bfd.c	FUNCTION_38	IF_2	CALL_3
0x400172c	     0xf8476010000	                            je 0x40018a8	      2246	bfd.c	FUNCTION_38	IF_2	IF_3
0x4001732	          0x4889ea	                            mov rdx, rbp	        53	string3.h	FUNCTION_44	CALL_3
0x4001735	          0x4c89fe	                            mov rsi, r15	        53	string3.h	FUNCTION_44	CALL_3
0x4001738	          0x4889c7	                            mov rdi, rax	        53	string3.h	FUNCTION_44	CALL_3
0x400173b	      0xe800000000	                          call 0x4001740	        53	string3.h	FUNCTION_44	CALL_3
0x4001740	          0x4489ee	                           mov esi, r13d	      2253	bfd.c	FUNCTION_38	CALL_5
0x4001743	          0x4c89f7	                            mov rdi, r14	      2253	bfd.c	FUNCTION_38	CALL_5
0x4001746	      0x41c6042e00	                 mov byte [r14 + rbp], 0	      2249	bfd.c	FUNCTION_38	IF_2
0x400174b	      0xe800000000	                          call 0x4001750	      2253	bfd.c	FUNCTION_38	CALL_5
0x4001750	          0x4c89f7	                            mov rdi, r14	      2256	bfd.c	FUNCTION_38	CALL_6
0x4001753	          0x4989c5	                            mov r13, rax	      2253	bfd.c	FUNCTION_38	CALL_5
0x4001756	      0xe800000000	                          call 0x400175b	      2256	bfd.c	FUNCTION_38	CALL_6
0x400175b	          0x4d85ed	                           test r13, r13	      2258	bfd.c	FUNCTION_38	IF_5
0x400175e	     0xf84fc000000	                            je 0x4001860	      2258	bfd.c	FUNCTION_38	IF_5
0x4001764	          0x4c89ef	                            mov rdi, r13	      2279	bfd.c	FUNCTION_38	IF_8	CALL_10
0x4001767	      0xe800000000	                          call 0x400176c	      2279	bfd.c	FUNCTION_38	IF_8	CALL_10
0x400176c	          0x4989c7	                            mov r15, rax	      2279	bfd.c	FUNCTION_38	IF_8	CALL_10
0x400176f	          0x4c89e7	                            mov rdi, r12	      2282	bfd.c	FUNCTION_38	IF_8	CALL_11
0x4001772	      0xe800000000	                          call 0x4001777	      2282	bfd.c	FUNCTION_38	IF_8	CALL_11
0x4001777	        0x4c8b3424	                    mov r14, qword [rsp]	      2283	bfd.c	FUNCTION_38	IF_8	CALL_12
0x400177b	        0x4883c001	                              add rax, 1	      2282	bfd.c	FUNCTION_38	IF_8	CALL_11
0x400177f	          0x4889c7	                            mov rdi, rax	      2282	bfd.c	FUNCTION_38	IF_8	CALL_11
0x4001782	        0x48893c24	                    mov qword [rsp], rdi	      2283	bfd.c	FUNCTION_38	IF_8	CALL_12
0x4001786	          0x4c89f0	                            mov rax, r14	      2283	bfd.c	FUNCTION_38	IF_8	CALL_12
0x4001789	          0x4c01f8	                            add rax, r15	      2283	bfd.c	FUNCTION_38	IF_8	CALL_12
0x400178c	          0x4801c7	                            add rdi, rax	      2283	bfd.c	FUNCTION_38	IF_8	CALL_12
0x400178f	      0x4889442408	                mov qword [rsp + 8], rax	      2283	bfd.c	FUNCTION_38	IF_8	CALL_12
0x4001794	      0xe800000000	                          call 0x4001799	      2283	bfd.c	FUNCTION_38	IF_8	CALL_12
0x4001799	          0x4885c0	                           test rax, rax	      2284	bfd.c	FUNCTION_38	IF_8	IF_10
0x400179c	          0x4889c5	                            mov rbp, rax	      2283	bfd.c	FUNCTION_38	IF_8	CALL_12
0x400179f	            0x7436	                            je 0x40017d7	      2284	bfd.c	FUNCTION_38	IF_8	IF_10
0x40017a1	          0x4c89f2	                            mov rdx, r14	        53	string3.h	FUNCTION_44	CALL_3
0x40017a4	          0x4889de	                            mov rsi, rbx	        53	string3.h	FUNCTION_44	CALL_3
0x40017a7	          0x4889c7	                            mov rdi, rax	        53	string3.h	FUNCTION_44	CALL_3
0x40017aa	      0xe800000000	                          call 0x40017af	        53	string3.h	FUNCTION_44	CALL_3
0x40017af	          0x4c89f7	                            mov rdi, r14	        53	string3.h	FUNCTION_44	CALL_3
0x40017b2	          0x4c89fa	                            mov rdx, r15	        53	string3.h	FUNCTION_44	CALL_3
0x40017b5	          0x4c89ee	                            mov rsi, r13	        53	string3.h	FUNCTION_44	CALL_3
0x40017b8	          0x4801ef	                            add rdi, rbp	        53	string3.h	FUNCTION_44	CALL_3
0x40017bb	      0xe800000000	                          call 0x40017c0	        53	string3.h	FUNCTION_44	CALL_3
0x40017c0	      0x488b442408	                mov rax, qword [rsp + 8]	        53	string3.h	FUNCTION_44	CALL_3
0x40017c5	        0x488b1424	                    mov rdx, qword [rsp]	        53	string3.h	FUNCTION_44	CALL_3
0x40017c9	          0x4c89e6	                            mov rsi, r12	        53	string3.h	FUNCTION_44	CALL_3
0x40017cc	          0x4801e8	                            add rax, rbp	        53	string3.h	FUNCTION_44	CALL_3
0x40017cf	          0x4889c7	                            mov rdi, rax	        53	string3.h	FUNCTION_44	CALL_3
0x40017d2	      0xe800000000	                          call 0x40017d7	        53	string3.h	FUNCTION_44	CALL_3
0x40017d7	          0x4c89ef	                            mov rdi, r13	      2290	bfd.c	FUNCTION_38	IF_8	CALL_16
0x40017da	      0xe800000000	                          call 0x40017df	      2290	bfd.c	FUNCTION_38	IF_8	CALL_16
0x40017df	          0x4889e8	                            mov rax, rbp	      2283	bfd.c	FUNCTION_38	IF_8	CALL_12
0x40017e2	        0x4883c418	                           add rsp, 0x18	      2295	bfd.c	FUNCTION_38
0x40017e6	              0x5b	                                 pop rbx	      2295	bfd.c	FUNCTION_38
0x40017e7	              0x5d	                                 pop rbp	      2295	bfd.c	FUNCTION_38
0x40017e8	            0x415c	                                 pop r12	      2295	bfd.c	FUNCTION_38
0x40017ea	            0x415d	                                 pop r13	      2295	bfd.c	FUNCTION_38
0x40017ec	            0x415e	                                 pop r14	      2295	bfd.c	FUNCTION_38
0x40017ee	            0x415f	                                 pop r15	      2295	bfd.c	FUNCTION_38
0x40017f0	              0xc3	                                     ret	      2295	bfd.c	FUNCTION_38
0x40017f1	     0xf1f80000000	                         nop dword [rax]	      2295	bfd.c	FUNCTION_38
0x40017f8	        0x488b5708	                mov rdx, qword [rdi + 8]	      2227	bfd.c	FUNCTION_38	CALL_1
0x40017fc	          0x3a421c	               cmp al, byte [rdx + 0x1c]	      2227	bfd.c	FUNCTION_38	CALL_1
0x40017ff	            0x7447	                            je 0x4001848	      2227	bfd.c	FUNCTION_38	CALL_1
0x4001801	    0xc74424080000	                  mov dword [rsp + 8], 0	      2227	bfd.c	FUNCTION_38	CALL_1
0x4001809	            0x3c2e	                            cmp al, 0x2e	      2236	bfd.c	FUNCTION_38	WHILE_1
0x400180b	            0x7408	                            je 0x4001815	      2236	bfd.c	FUNCTION_38	WHILE_1
0x400180d	            0x3c24	                            cmp al, 0x24	      2236	bfd.c	FUNCTION_38	WHILE_1
0x400180f	     0xf85dc000000	                           jne 0x40018f1	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4001815	          0x4989df	                            mov r15, rbx	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4001818	     0xf1f84000000	                   nop dword [rax + rax]	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4001820	        0x4983c701	                              add r15, 1	      2237	bfd.c	FUNCTION_38	WHILE_1
0x4001824	        0x410fb607	                   movzx eax, byte [r15]	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4001828	            0x3c2e	                            cmp al, 0x2e	      2236	bfd.c	FUNCTION_38	WHILE_1
0x400182a	            0x74f4	                            je 0x4001820	      2236	bfd.c	FUNCTION_38	WHILE_1
0x400182c	            0x3c24	                            cmp al, 0x24	      2236	bfd.c	FUNCTION_38	WHILE_1
0x400182e	            0x74f0	                            je 0x4001820	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4001830	          0x4c89f8	                            mov rax, r15	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4001833	          0x4c89fd	                            mov rbp, r15	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4001836	          0x4829d8	                            sub rax, rbx	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4001839	        0x48890424	                    mov qword [rsp], rax	      2236	bfd.c	FUNCTION_38	WHILE_1
0x400183d	      0xe9bcfeffff	                           jmp 0x40016fe	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4001842	    0x660f1f440000	                    nop word [rax + rax]	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4001848	         0xfb64601	               movzx eax, byte [rsi + 1]	      2236	bfd.c	FUNCTION_38	WHILE_1
0x400184c	        0x4883c301	                              add rbx, 1	      2229	bfd.c	FUNCTION_38	IF_1
0x4001850	    0xc74424080100	                  mov dword [rsp + 8], 1	      2227	bfd.c	FUNCTION_38	CALL_1
0x4001858	            0xebaf	                           jmp 0x4001809	      2227	bfd.c	FUNCTION_38	CALL_1
0x400185a	    0x660f1f440000	                    nop word [rax + rax]	      2227	bfd.c	FUNCTION_38	CALL_1
0x4001860	        0x8b442408	                mov eax, dword [rsp + 8]	      2260	bfd.c	FUNCTION_38	IF_5	IF_6
0x4001864	            0x85c0	                           test eax, eax	      2260	bfd.c	FUNCTION_38	IF_5	IF_6
0x4001866	            0x7440	                            je 0x40018a8	      2260	bfd.c	FUNCTION_38	IF_5	IF_6
0x4001868	          0x4889df	                            mov rdi, rbx	      2262	bfd.c	FUNCTION_38	IF_5	IF_6	CALL_7
0x400186b	      0xe800000000	                          call 0x4001870	      2262	bfd.c	FUNCTION_38	IF_5	IF_6	CALL_7
0x4001870	        0x4c8d6001	                      lea r12, [rax + 1]	      2262	bfd.c	FUNCTION_38	IF_5	IF_6	CALL_7
0x4001874	          0x4c89e7	                            mov rdi, r12	      2263	bfd.c	FUNCTION_38	IF_5	IF_6	CALL_8
0x4001877	      0xe800000000	                          call 0x400187c	      2263	bfd.c	FUNCTION_38	IF_5	IF_6	CALL_8
0x400187c	          0x4885c0	                           test rax, rax	      2264	bfd.c	FUNCTION_38	IF_5	IF_6	IF_7
0x400187f	          0x4889c5	                            mov rbp, rax	      2263	bfd.c	FUNCTION_38	IF_5	IF_6	CALL_8
0x4001882	            0x7424	                            je 0x40018a8	      2264	bfd.c	FUNCTION_38	IF_5	IF_6	IF_7
0x4001884	          0x4c89e2	                            mov rdx, r12	        53	string3.h	FUNCTION_44	CALL_3
0x4001887	          0x4889de	                            mov rsi, rbx	        53	string3.h	FUNCTION_44	CALL_3
0x400188a	          0x4889c7	                            mov rdi, rax	        53	string3.h	FUNCTION_44	CALL_3
0x400188d	      0xe800000000	                          call 0x4001892	        53	string3.h	FUNCTION_44	CALL_3
0x4001892	        0x4883c418	                           add rsp, 0x18	      2295	bfd.c	FUNCTION_38
0x4001896	          0x4889e8	                            mov rax, rbp	      2267	bfd.c	FUNCTION_38	IF_5	IF_6
0x4001899	              0x5b	                                 pop rbx	      2295	bfd.c	FUNCTION_38
0x400189a	              0x5d	                                 pop rbp	      2295	bfd.c	FUNCTION_38
0x400189b	            0x415c	                                 pop r12	      2295	bfd.c	FUNCTION_38
0x400189d	            0x415d	                                 pop r13	      2295	bfd.c	FUNCTION_38
0x400189f	            0x415e	                                 pop r14	      2295	bfd.c	FUNCTION_38
0x40018a1	            0x415f	                                 pop r15	      2295	bfd.c	FUNCTION_38
0x40018a3	              0xc3	                                     ret	      2295	bfd.c	FUNCTION_38
0x40018a4	         0xf1f4000	                         nop dword [rax]	      2295	bfd.c	FUNCTION_38
0x40018a8	            0x31c0	                            xor eax, eax	      2265	bfd.c	FUNCTION_38	IF_5	IF_6	IF_7
0x40018aa	      0xe933ffffff	                           jmp 0x40017e2	      2265	bfd.c	FUNCTION_38	IF_5	IF_6	IF_7
0x40018af	              0x90	                                     nop	      2265	bfd.c	FUNCTION_38	IF_5	IF_6	IF_7
0x40018b0	          0x4489ee	                           mov esi, r13d	      2253	bfd.c	FUNCTION_38	CALL_5
0x40018b3	          0x4c89ff	                            mov rdi, r15	      2253	bfd.c	FUNCTION_38	CALL_5
0x40018b6	      0xe800000000	                          call 0x40018bb	      2253	bfd.c	FUNCTION_38	CALL_5
0x40018bb	          0x4885c0	                           test rax, rax	      2258	bfd.c	FUNCTION_38	IF_5
0x40018be	          0x4989c5	                            mov r13, rax	      2253	bfd.c	FUNCTION_38	CALL_5
0x40018c1	            0x749d	                            je 0x4001860	      2258	bfd.c	FUNCTION_38	IF_5
0x40018c3	      0x48833c2400	                      cmp qword [rsp], 0	      2273	bfd.c	FUNCTION_38	IF_8
0x40018c8	            0x7512	                           jne 0x40018dc	      2273	bfd.c	FUNCTION_38	IF_8
0x40018ca	        0x4883c418	                           add rsp, 0x18	      2295	bfd.c	FUNCTION_38
0x40018ce	          0x4c89e8	                            mov rax, r13	      2295	bfd.c	FUNCTION_38
0x40018d1	              0x5b	                                 pop rbx	      2295	bfd.c	FUNCTION_38
0x40018d2	              0x5d	                                 pop rbp	      2295	bfd.c	FUNCTION_38
0x40018d3	            0x415c	                                 pop r12	      2295	bfd.c	FUNCTION_38
0x40018d5	            0x415d	                                 pop r13	      2295	bfd.c	FUNCTION_38
0x40018d7	            0x415e	                                 pop r14	      2295	bfd.c	FUNCTION_38
0x40018d9	            0x415f	                                 pop r15	      2295	bfd.c	FUNCTION_38
0x40018db	              0xc3	                                     ret	      2295	bfd.c	FUNCTION_38
0x40018dc	          0x4c89ef	                            mov rdi, r13	      2279	bfd.c	FUNCTION_38	IF_8	CALL_10
0x40018df	      0xe800000000	                          call 0x40018e4	      2279	bfd.c	FUNCTION_38	IF_8	CALL_10
0x40018e4	          0x4989c7	                            mov r15, rax	      2279	bfd.c	FUNCTION_38	IF_8	CALL_10
0x40018e7	      0x4d8d640500	                    lea r12, [r13 + rax]	      2281	bfd.c	FUNCTION_38	IF_8	IF_9
0x40018ec	      0xe97efeffff	                           jmp 0x400176f	      2281	bfd.c	FUNCTION_38	IF_8	IF_9
0x40018f1	          0x4889dd	                            mov rbp, rbx	      2281	bfd.c	FUNCTION_38	IF_8	IF_9
0x40018f4	          0x4989df	                            mov r15, rbx	      2236	bfd.c	FUNCTION_38	WHILE_1
0x40018f7	    0x48c704240000	                      mov qword [rsp], 0	      2236	bfd.c	FUNCTION_38	WHILE_1
0x40018ff	      0xe9fafdffff	                           jmp 0x40016fe	      2236	bfd.c	FUNCTION_38	WHILE_1
_bfd_abort	SWITCH,0:functions,0:WHILE,0:IF,1:FOR,0:DO,0:ELSE,1:CALL,7	39
0x4000420	          0x4885d2	                           test rdx, rdx	      1438	bfd.c	FUNCTION_18	IF_1
0x4000423	            0x4154	                                push r12	      1437	bfd.c	FUNCTION_18
0x4000425	          0x4189f4	                           mov r12d, esi	      1437	bfd.c	FUNCTION_18
0x4000428	              0x55	                                push rbp	      1437	bfd.c	FUNCTION_18
0x4000429	          0x4889fd	                            mov rbp, rdi	      1437	bfd.c	FUNCTION_18
0x400042c	              0x53	                                push rbx	      1437	bfd.c	FUNCTION_18
0x400042d	            0x7457	                            je 0x4000486	      1438	bfd.c	FUNCTION_18	IF_1
0x400042f	          0x4889d3	                            mov rbx, rdx	      1438	bfd.c	FUNCTION_18	IF_1
0x4000432	      0xbe00000000	                              mov esi, 0	      1441	bfd.c	FUNCTION_18	IF_1	CALL_2
0x4000437	      0xba05000000	                              mov edx, 5	      1441	bfd.c	FUNCTION_18	IF_1	CALL_2
0x400043c	      0xbf00000000	                              mov edi, 0	      1441	bfd.c	FUNCTION_18	IF_1	CALL_2
0x4000441	      0xe800000000	                          call 0x4000446	      1441	bfd.c	FUNCTION_18	IF_1	CALL_2
0x4000446	          0x4989d8	                             mov r8, rbx	      1439	bfd.c	FUNCTION_18	IF_1	CALL_1
0x4000449	          0x4889c7	                            mov rdi, rax	      1439	bfd.c	FUNCTION_18	IF_1	CALL_1
0x400044c	          0x4489e1	                           mov ecx, r12d	      1439	bfd.c	FUNCTION_18	IF_1	CALL_1
0x400044f	          0x4889ea	                            mov rdx, rbp	      1439	bfd.c	FUNCTION_18	IF_1	CALL_1
0x4000452	      0xbe00000000	                              mov esi, 0	      1439	bfd.c	FUNCTION_18	IF_1	CALL_1
0x4000457	            0x31c0	                            xor eax, eax	      1439	bfd.c	FUNCTION_18	IF_1	CALL_1
0x4000459	      0xe800000000	                          call 0x400045e	      1439	bfd.c	FUNCTION_18	IF_1	CALL_1
0x400045e	      0xba05000000	                              mov edx, 5	      1448	bfd.c	FUNCTION_18	CALL_6
0x4000463	      0xbe00000000	                              mov esi, 0	      1448	bfd.c	FUNCTION_18	CALL_6
0x4000468	      0xbf00000000	                              mov edi, 0	      1448	bfd.c	FUNCTION_18	CALL_6
0x400046d	      0xe800000000	                          call 0x4000472	      1448	bfd.c	FUNCTION_18	CALL_6
0x4000472	          0x4889c7	                            mov rdi, rax	      1448	bfd.c	FUNCTION_18	CALL_6
0x4000475	            0x31c0	                            xor eax, eax	      1448	bfd.c	FUNCTION_18	CALL_6
0x4000477	      0xe800000000	                          call 0x400047c	      1448	bfd.c	FUNCTION_18	CALL_6
0x400047c	      0xbf01000000	                              mov edi, 1	      1449	bfd.c	FUNCTION_18	CALL_7
0x4000481	      0xe800000000	                          call 0x4000486	      1449	bfd.c	FUNCTION_18	CALL_7
0x4000486	      0xba05000000	                              mov edx, 5	      1446	bfd.c	FUNCTION_18	ELSE_1	CALL_4
0x400048b	      0xbe00000000	                              mov esi, 0	      1446	bfd.c	FUNCTION_18	ELSE_1	CALL_4
0x4000490	      0xbf00000000	                              mov edi, 0	      1446	bfd.c	FUNCTION_18	ELSE_1	CALL_4
0x4000495	      0xe800000000	                          call 0x400049a	      1446	bfd.c	FUNCTION_18	ELSE_1	CALL_4
0x400049a	          0x4489e1	                           mov ecx, r12d	      1444	bfd.c	FUNCTION_18	ELSE_1	CALL_3
0x400049d	          0x4889c7	                            mov rdi, rax	      1444	bfd.c	FUNCTION_18	ELSE_1	CALL_3
0x40004a0	          0x4889ea	                            mov rdx, rbp	      1444	bfd.c	FUNCTION_18	ELSE_1	CALL_3
0x40004a3	      0xbe00000000	                              mov esi, 0	      1444	bfd.c	FUNCTION_18	ELSE_1	CALL_3
0x40004a8	            0x31c0	                            xor eax, eax	      1444	bfd.c	FUNCTION_18	ELSE_1	CALL_3
0x40004aa	      0xe800000000	                          call 0x40004af	      1444	bfd.c	FUNCTION_18	ELSE_1	CALL_3
0x40004af	            0xebad	                           jmp 0x400045e	      1444	bfd.c	FUNCTION_18	ELSE_1	CALL_3
bfd_emul_get_commonpagesize	SWITCH,0:functions,0:WHILE,0:IF,2:FOR,0:DO,0:ELSE,1:CALL,2	27
0x4001620	              0x53	                                push rbx	      2159	bfd.c	FUNCTION_36
0x4001621	            0x89f3	                            mov ebx, esi	      2159	bfd.c	FUNCTION_36
0x4001623	            0x31f6	                            xor esi, esi	      2162	bfd.c	FUNCTION_36	CALL_1
0x4001625	      0xe800000000	                          call 0x400162a	      2162	bfd.c	FUNCTION_36	CALL_1
0x400162a	          0x4885c0	                           test rax, rax	      2163	bfd.c	FUNCTION_36	IF_1
0x400162d	            0x7431	                            je 0x4001660	      2163	bfd.c	FUNCTION_36	IF_1
0x400162f	          0x4889c2	                            mov rdx, rax	      2163	bfd.c	FUNCTION_36	IF_1
0x4001632	            0x31c0	                            xor eax, eax	      2174	bfd.c	FUNCTION_36	ELSE_1
0x4001634	        0x837a0805	                  cmp dword [rdx + 8], 5	      2164	bfd.c	FUNCTION_36	IF_1
0x4001638	            0x7406	                            je 0x4001640	      2164	bfd.c	FUNCTION_36	IF_1
0x400163a	              0x5b	                                 pop rbx	      2175	bfd.c	FUNCTION_36	ELSE_1
0x400163b	              0xc3	                                     ret	      2175	bfd.c	FUNCTION_36	ELSE_1
0x400163c	         0xf1f4000	                         nop dword [rax]	      2175	bfd.c	FUNCTION_36	ELSE_1
0x4001640	            0x85db	                           test ebx, ebx	      2169	bfd.c	FUNCTION_36	IF_1	IF_2
0x4001642	    0x488b82680300	           mov rax, qword [rdx + 0x368] 	      2168	bfd.c	FUNCTION_36	IF_1	CALL_2
0x4001649	            0x750d	                           jne 0x4001658	      2169	bfd.c	FUNCTION_36	IF_1	IF_2
0x400164b	        0x488b4020	            mov rax, qword [rax + 0x20] 	      2172	bfd.c	FUNCTION_36	IF_1	ELSE_1
0x400164f	              0x5b	                                 pop rbx	      2175	bfd.c	FUNCTION_36	ELSE_1
0x4001650	              0xc3	                                     ret	      2175	bfd.c	FUNCTION_36	ELSE_1
0x4001651	     0xf1f80000000	                         nop dword [rax]	      2175	bfd.c	FUNCTION_36	ELSE_1
0x4001658	        0x488b4028	            mov rax, qword [rax + 0x28] 	      2170	bfd.c	FUNCTION_36	IF_1	IF_2
0x400165c	              0x5b	                                 pop rbx	      2175	bfd.c	FUNCTION_36	ELSE_1
0x400165d	              0xc3	                                     ret	      2175	bfd.c	FUNCTION_36	ELSE_1
0x400165e	            0x6690	                                     nop	      2175	bfd.c	FUNCTION_36	ELSE_1
0x4001660	            0x31c0	                            xor eax, eax	      2174	bfd.c	FUNCTION_36	ELSE_1
0x4001662	              0x5b	                                 pop rbx	      2175	bfd.c	FUNCTION_36	ELSE_1
0x4001663	              0xc3	                                     ret	      2175	bfd.c	FUNCTION_36	ELSE_1
_bfd_default_assert_handler	SWITCH,0:functions,0:WHILE,0:IF,0:FOR,0:DO,0:ELSE,0:CALL,1	2
0x40002b0	            0x31c0	                            xor eax, eax	      1257	bfd.c	FUNCTION_12	CALL_1
0x40002b2	      0xe939ffffff	              jmp sym._bfd_error_handler	      1257	bfd.c	FUNCTION_12	CALL_1
