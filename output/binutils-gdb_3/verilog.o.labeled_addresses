verilog_set_section_contents	WHILE,0:ELSE,1:SWITCH,0:DO,0:CALL,3:FOR,1:IF,5:functions,0	86
0x4000040	            0x4157	                                push r15	       112	verilog.c	FUNCTION_2
0x4000042	            0x4156	                                push r14	       112	verilog.c	FUNCTION_2
0x4000044	          0x4d89c7	                             mov r15, r8	       112	verilog.c	FUNCTION_2
0x4000047	            0x4155	                                push r13	       112	verilog.c	FUNCTION_2
0x4000049	            0x4154	                                push r12	       112	verilog.c	FUNCTION_2
0x400004b	          0x4989f5	                            mov r13, rsi	       112	verilog.c	FUNCTION_2
0x400004e	              0x55	                                push rbp	       112	verilog.c	FUNCTION_2
0x400004f	              0x53	                                push rbx	       112	verilog.c	FUNCTION_2
0x4000050	      0xbe20000000	                           mov esi, 0x20	       116	verilog.c	FUNCTION_2	CALL_1
0x4000055	          0x4889fb	                            mov rbx, rdi	       112	verilog.c	FUNCTION_2
0x4000058	          0x4989cc	                            mov r12, rcx	       112	verilog.c	FUNCTION_2
0x400005b	        0x4883ec18	                           sub rsp, 0x18	       112	verilog.c	FUNCTION_2
0x400005f	    0x4c8bb7f80000	            mov r14, qword [rdi + 0xf8] 	       113	verilog.c	FUNCTION_2
0x4000066	      0x4889542408	                mov qword [rsp + 8], rdx	       112	verilog.c	FUNCTION_2
0x400006b	      0xe800000000	                          call 0x4000070	       116	verilog.c	FUNCTION_2	CALL_1
0x4000070	          0x4885c0	                           test rax, rax	       117	verilog.c	FUNCTION_2	IF_1
0x4000073	     0xf84af000000	                            je 0x4000128	       117	verilog.c	FUNCTION_2	IF_1
0x4000079	          0x4d85ff	                           test r15, r15	       120	verilog.c	FUNCTION_2	IF_2
0x400007c	            0x740f	                            je 0x400008d	       120	verilog.c	FUNCTION_2	IF_2
0x400007e	          0x4889c5	                            mov rbp, rax	       120	verilog.c	FUNCTION_2	IF_2
0x4000081	        0x418b4520	            mov eax, dword [r13 + 0x20] 	       122	verilog.c	FUNCTION_2	IF_2
0x4000085	          0x83e003	                              and eax, 3	       122	verilog.c	FUNCTION_2	IF_2
0x4000088	          0x83f803	                              cmp eax, 3	       122	verilog.c	FUNCTION_2	IF_2
0x400008b	            0x741b	                            je 0x40000a8	       122	verilog.c	FUNCTION_2	IF_2
0x400008d	      0xb801000000	                              mov eax, 1	       158	verilog.c	FUNCTION_2
0x4000092	        0x4883c418	                           add rsp, 0x18	       159	verilog.c	FUNCTION_2
0x4000096	              0x5b	                                 pop rbx	       159	verilog.c	FUNCTION_2
0x4000097	              0x5d	                                 pop rbp	       159	verilog.c	FUNCTION_2
0x4000098	            0x415c	                                 pop r12	       159	verilog.c	FUNCTION_2
0x400009a	            0x415d	                                 pop r13	       159	verilog.c	FUNCTION_2
0x400009c	            0x415e	                                 pop r14	       159	verilog.c	FUNCTION_2
0x400009e	            0x415f	                                 pop r15	       159	verilog.c	FUNCTION_2
0x40000a0	              0xc3	                                     ret	       159	verilog.c	FUNCTION_2
0x40000a1	     0xf1f80000000	                         nop dword [rax]	       159	verilog.c	FUNCTION_2
0x40000a8	          0x4c89fe	                            mov rsi, r15	       126	verilog.c	FUNCTION_2	IF_2	CALL_2
0x40000ab	          0x4889df	                            mov rdi, rbx	       126	verilog.c	FUNCTION_2	IF_2	CALL_2
0x40000ae	      0xe800000000	                          call 0x40000b3	       126	verilog.c	FUNCTION_2	IF_2	CALL_2
0x40000b3	          0x4885c0	                           test rax, rax	       127	verilog.c	FUNCTION_2	IF_2	IF_3
0x40000b6	            0x7470	                            je 0x4000128	       127	verilog.c	FUNCTION_2	IF_2	IF_3
0x40000b8	      0x488b742408	                mov rsi, qword [rsp + 8]	        53	string3.h	FUNCTION_9	CALL_3
0x40000bd	          0x4c89fa	                            mov rdx, r15	        53	string3.h	FUNCTION_9	CALL_3
0x40000c0	          0x4889c7	                            mov rdi, rax	        53	string3.h	FUNCTION_9	CALL_3
0x40000c3	      0xe800000000	                          call 0x40000c8	        53	string3.h	FUNCTION_9	CALL_3
0x40000c8	        0x4d036530	             add r12, qword [r13 + 0x30]	       132	verilog.c	FUNCTION_2	IF_2
0x40000cc	        0x48894508	                mov qword [rbp + 8], rax	       131	verilog.c	FUNCTION_2	IF_2
0x40000d0	        0x498b4608	                mov rax, qword [r14 + 8]	       137	verilog.c	FUNCTION_2	IF_2	IF_4
0x40000d4	        0x4c897d18	            mov qword [rbp + 0x18], r15 	       133	verilog.c	FUNCTION_2	IF_2
0x40000d8	          0x4885c0	                           test rax, rax	       137	verilog.c	FUNCTION_2	IF_2	IF_4
0x40000db	        0x4c896510	            mov qword [rbp + 0x10], r12 	       132	verilog.c	FUNCTION_2	IF_2
0x40000df	            0x7406	                            je 0x40000e7	       137	verilog.c	FUNCTION_2	IF_2	IF_4
0x40000e1	        0x4c3b6010	            cmp r12, qword [rax + 0x10] 	       138	verilog.c	FUNCTION_2	IF_2	IF_4
0x40000e5	            0x7359	                           jae 0x4000140	       138	verilog.c	FUNCTION_2	IF_2	IF_4
0x40000e7	          0x498b06	                    mov rax, qword [r14]	       148	verilog.c	FUNCTION_2	IF_2	ELSE_1	FOR_1
0x40000ea	          0x4c89f2	                            mov rdx, r14	       148	verilog.c	FUNCTION_2	IF_2	ELSE_1	FOR_1
0x40000ed	          0x4885c0	                           test rax, rax	       148	verilog.c	FUNCTION_2	IF_2	ELSE_1	FOR_1
0x40000f0	            0x7511	                           jne 0x4000103	       148	verilog.c	FUNCTION_2	IF_2	ELSE_1	FOR_1
0x40000f2	            0xeb15	                           jmp 0x4000109	       148	verilog.c	FUNCTION_2	IF_2	ELSE_1	FOR_1
0x40000f4	         0xf1f4000	                         nop dword [rax]	       148	verilog.c	FUNCTION_2	IF_2	ELSE_1	FOR_1
0x40000f8	          0x4889c2	                            mov rdx, rax	       150	verilog.c	FUNCTION_2	IF_2	ELSE_1	FOR_1
0x40000fb	          0x488b00	                    mov rax, qword [rax]	       150	verilog.c	FUNCTION_2	IF_2	ELSE_1	FOR_1
0x40000fe	          0x4885c0	                           test rax, rax	       148	verilog.c	FUNCTION_2	IF_2	ELSE_1	FOR_1
0x4000101	            0x7406	                            je 0x4000109	       148	verilog.c	FUNCTION_2	IF_2	ELSE_1	FOR_1
0x4000103	        0x4c3b6010	            cmp r12, qword [rax + 0x10] 	       149	verilog.c	FUNCTION_2	IF_2	ELSE_1	FOR_1
0x4000107	            0x77ef	                            ja 0x40000f8	       149	verilog.c	FUNCTION_2	IF_2	ELSE_1	FOR_1
0x4000109	        0x48894500	                    mov qword [rbp], rax	       152	verilog.c	FUNCTION_2	IF_2	ELSE_1
0x400010d	          0x48892a	                    mov qword [rdx], rbp	       153	verilog.c	FUNCTION_2	IF_2	ELSE_1
0x4000110	      0x48837d0000	                      cmp qword [rbp], 0	       154	verilog.c	FUNCTION_2	IF_2	ELSE_1	IF_5
0x4000115	     0xf8572ffffff	                           jne 0x400008d	       154	verilog.c	FUNCTION_2	IF_2	ELSE_1	IF_5
0x400011b	        0x49896e08	                mov qword [r14 + 8], rbp	       155	verilog.c	FUNCTION_2	IF_2	ELSE_1	IF_5
0x400011f	      0xe969ffffff	                           jmp 0x400008d	       155	verilog.c	FUNCTION_2	IF_2	ELSE_1	IF_5
0x4000124	         0xf1f4000	                         nop dword [rax]	       155	verilog.c	FUNCTION_2	IF_2	ELSE_1	IF_5
0x4000128	        0x4883c418	                           add rsp, 0x18	       159	verilog.c	FUNCTION_2
0x400012c	            0x31c0	                            xor eax, eax	       118	verilog.c	FUNCTION_2	IF_1
0x400012e	              0x5b	                                 pop rbx	       159	verilog.c	FUNCTION_2
0x400012f	              0x5d	                                 pop rbp	       159	verilog.c	FUNCTION_2
0x4000130	            0x415c	                                 pop r12	       159	verilog.c	FUNCTION_2
0x4000132	            0x415d	                                 pop r13	       159	verilog.c	FUNCTION_2
0x4000134	            0x415e	                                 pop r14	       159	verilog.c	FUNCTION_2
0x4000136	            0x415f	                                 pop r15	       159	verilog.c	FUNCTION_2
0x4000138	              0xc3	                                     ret	       159	verilog.c	FUNCTION_2
0x4000139	     0xf1f80000000	                         nop dword [rax]	       159	verilog.c	FUNCTION_2
0x4000140	          0x488928	                    mov qword [rax], rbp	       140	verilog.c	FUNCTION_2	IF_2	IF_4
0x4000143	    0x48c745000000	                      mov qword [rbp], 0	       141	verilog.c	FUNCTION_2	IF_2	IF_4
0x400014b	      0xb801000000	                              mov eax, 1	       158	verilog.c	FUNCTION_2
0x4000150	        0x49896e08	                mov qword [r14 + 8], rbp	       142	verilog.c	FUNCTION_2	IF_2	IF_4
0x4000154	      0xe939ffffff	                           jmp 0x4000092	       142	verilog.c	FUNCTION_2	IF_2	IF_4
verilog_set_arch_mach	WHILE,0:ELSE,0:SWITCH,0:DO,0:CALL,1:FOR,0:IF,1:functions,0	7
0x4000160	            0x85f6	                           test esi, esi	        97	verilog.c	FUNCTION_1	IF_1
0x4000162	            0x7514	                           jne 0x4000178	        97	verilog.c	FUNCTION_1	IF_1
0x4000164	    0x48c787c00000	               mov qword [rdi + 0xc0], 0	       100	verilog.c	FUNCTION_1
0x400016f	      0xb801000000	                              mov eax, 1	       102	verilog.c	FUNCTION_1
0x4000174	              0xc3	                                     ret	       102	verilog.c	FUNCTION_1
0x4000175	           0xf1f00	                         nop dword [rax]	       102	verilog.c	FUNCTION_1
0x4000178	      0xe900000000	                           jmp 0x400017d	        98	verilog.c	FUNCTION_1	CALL_1
verilog_mkobject	WHILE,0:ELSE,0:SWITCH,0:DO,0:CALL,2:FOR,0:IF,1:functions,0	24
0x4000180	    0x8b0500000000	            mov eax, dword [0x04000186] 	       266	verilog.c	FUNCTION_7	IF_1
0x4000186	              0x53	                                push rbx	       277	verilog.c	FUNCTION_8
0x4000187	          0x4889fb	                            mov rbx, rdi	       277	verilog.c	FUNCTION_8
0x400018a	            0x85c0	                           test eax, eax	       266	verilog.c	FUNCTION_7	IF_1
0x400018c	            0x7432	                            je 0x40001c0	       266	verilog.c	FUNCTION_7	IF_1
0x400018e	      0xbe10000000	                           mov esi, 0x10	       282	verilog.c	FUNCTION_8	CALL_2
0x4000193	          0x4889df	                            mov rdi, rbx	       282	verilog.c	FUNCTION_8	CALL_2
0x4000196	      0xe800000000	                          call 0x400019b	       282	verilog.c	FUNCTION_8	CALL_2
0x400019b	          0x4885c0	                           test rax, rax	       283	verilog.c	FUNCTION_8	IF_1
0x400019e	            0x7438	                            je 0x40001d8	       283	verilog.c	FUNCTION_8	IF_1
0x40001a0	    0x488983f80000	             mov qword [rbx + 0xf8], rax	       286	verilog.c	FUNCTION_8
0x40001a7	    0x48c700000000	                      mov qword [rax], 0	       287	verilog.c	FUNCTION_8
0x40001ae	    0x48c740080000	                  mov qword [rax + 8], 0	       288	verilog.c	FUNCTION_8
0x40001b6	      0xb801000000	                              mov eax, 1	       290	verilog.c	FUNCTION_8
0x40001bb	              0x5b	                                 pop rbx	       291	verilog.c	FUNCTION_8
0x40001bc	              0xc3	                                     ret	       291	verilog.c	FUNCTION_8
0x40001bd	           0xf1f00	                         nop dword [rax]	       291	verilog.c	FUNCTION_8
0x40001c0	    0xc70500000000	               mov dword [0x040001ca], 1	       268	verilog.c	FUNCTION_7	IF_1
0x40001ca	      0xe800000000	                          call 0x40001cf	       269	verilog.c	FUNCTION_7	IF_1	CALL_1
0x40001cf	            0xebbd	                           jmp 0x400018e	       269	verilog.c	FUNCTION_7	IF_1	CALL_1
0x40001d1	     0xf1f80000000	                         nop dword [rax]	       269	verilog.c	FUNCTION_7	IF_1	CALL_1
0x40001d8	            0x31c0	                            xor eax, eax	       284	verilog.c	FUNCTION_8	IF_1
0x40001da	              0x5b	                                 pop rbx	       291	verilog.c	FUNCTION_8
0x40001db	              0xc3	                                     ret	       291	verilog.c	FUNCTION_8
verilog_write_object_contents	WHILE,1:ELSE,0:SWITCH,0:DO,0:CALL,1:FOR,0:IF,1:functions,0	133
0x40001e0	            0x4157	                                push r15	       243	verilog.c	FUNCTION_6
0x40001e2	            0x4156	                                push r14	       243	verilog.c	FUNCTION_6
0x40001e4	            0x4155	                                push r13	       243	verilog.c	FUNCTION_6
0x40001e6	            0x4154	                                push r12	       243	verilog.c	FUNCTION_6
0x40001e8	              0x55	                                push rbp	       243	verilog.c	FUNCTION_6
0x40001e9	              0x53	                                push rbx	       243	verilog.c	FUNCTION_6
0x40001ea	        0x4883ec58	                           sub rsp, 0x58	       243	verilog.c	FUNCTION_6
0x40001ee	    0x488b87f80000	            mov rax, qword [rdi + 0xf8] 	       248	verilog.c	FUNCTION_6
0x40001f5	    0x64488b0c2528	                mov rcx, qword fs:[0x28]	       243	verilog.c	FUNCTION_6
0x40001fe	      0x48894c2448	             mov qword [rsp + 0x48], rcx	       243	verilog.c	FUNCTION_6
0x4000203	            0x31c9	                            xor ecx, ecx	       243	verilog.c	FUNCTION_6
0x4000205	      0x48897c2408	                mov qword [rsp + 8], rdi	       243	verilog.c	FUNCTION_6
0x400020a	          0x488b18	                    mov rbx, qword [rax]	       248	verilog.c	FUNCTION_6
0x400020d	          0x4885db	                           test rbx, rbx	       250	verilog.c	FUNCTION_6	WHILE_1
0x4000210	     0xf8493010000	                            je 0x40003a9	       250	verilog.c	FUNCTION_6	WHILE_1
0x4000216	      0x4c8d642410	                   lea r12, [rsp + 0x10]	       250	verilog.c	FUNCTION_6	WHILE_1
0x400021b	        0x488b4310	            mov rax, qword [rbx + 0x10] 	       221	verilog.c	FUNCTION_5	CALL_1
0x400021f	        0x4c8b7b08	                mov r15, qword [rbx + 8]	       219	verilog.c	FUNCTION_5
0x4000223	      0xbe0b000000	                            mov esi, 0xb	       182	verilog.c	FUNCTION_3	CALL_1
0x4000228	          0x4c89e7	                            mov rdi, r12	       182	verilog.c	FUNCTION_3	CALL_1
0x400022b	      0xc644241040	            mov byte [rsp + 0x10], 0x40 	       169	verilog.c	FUNCTION_3
0x4000230	      0xc64424190d	              mov byte [rsp + 0x19], 0xd	       178	verilog.c	FUNCTION_3
0x4000235	      0xc644241a0a	              mov byte [rsp + 0x1a], 0xa	       179	verilog.c	FUNCTION_3
0x400023a	          0x4889c2	                            mov rdx, rax	       170	verilog.c	FUNCTION_3
0x400023d	        0x48c1ea18	                           shr rdx, 0x18	       170	verilog.c	FUNCTION_3
0x4000241	          0x83e20f	                            and edx, 0xf	       170	verilog.c	FUNCTION_3
0x4000244	     0xfb692000000	                   movzx edx, byte [rdx]	       170	verilog.c	FUNCTION_3
0x400024b	        0x88542412	               mov byte [rsp + 0x12], dl	       170	verilog.c	FUNCTION_3
0x400024f	          0x4889c2	                            mov rdx, rax	       170	verilog.c	FUNCTION_3
0x4000252	        0x48c1ea1c	                           shr rdx, 0x1c	       170	verilog.c	FUNCTION_3
0x4000256	          0x83e20f	                            and edx, 0xf	       170	verilog.c	FUNCTION_3
0x4000259	     0xfb692000000	                   movzx edx, byte [rdx]	       170	verilog.c	FUNCTION_3
0x4000260	        0x88542411	               mov byte [rsp + 0x11], dl	       170	verilog.c	FUNCTION_3
0x4000264	          0x4889c2	                            mov rdx, rax	       172	verilog.c	FUNCTION_3
0x4000267	        0x48c1ea10	                           shr rdx, 0x10	       172	verilog.c	FUNCTION_3
0x400026b	          0x83e20f	                            and edx, 0xf	       172	verilog.c	FUNCTION_3
0x400026e	     0xfb692000000	                   movzx edx, byte [rdx]	       172	verilog.c	FUNCTION_3
0x4000275	        0x88542414	               mov byte [rsp + 0x14], dl	       172	verilog.c	FUNCTION_3
0x4000279	          0x4889c2	                            mov rdx, rax	       172	verilog.c	FUNCTION_3
0x400027c	        0x48c1ea14	                           shr rdx, 0x14	       172	verilog.c	FUNCTION_3
0x4000280	          0x83e20f	                            and edx, 0xf	       172	verilog.c	FUNCTION_3
0x4000283	     0xfb692000000	                   movzx edx, byte [rdx]	       172	verilog.c	FUNCTION_3
0x400028a	        0x88542413	               mov byte [rsp + 0x13], dl	       172	verilog.c	FUNCTION_3
0x400028e	          0x4889c2	                            mov rdx, rax	       174	verilog.c	FUNCTION_3
0x4000291	        0x48c1ea08	                              shr rdx, 8	       174	verilog.c	FUNCTION_3
0x4000295	          0x83e20f	                            and edx, 0xf	       174	verilog.c	FUNCTION_3
0x4000298	     0xfb692000000	                   movzx edx, byte [rdx]	       174	verilog.c	FUNCTION_3
0x400029f	        0x88542416	               mov byte [rsp + 0x16], dl	       174	verilog.c	FUNCTION_3
0x40002a3	          0x4889c2	                            mov rdx, rax	       174	verilog.c	FUNCTION_3
0x40002a6	        0x48c1ea0c	                            shr rdx, 0xc	       174	verilog.c	FUNCTION_3
0x40002aa	          0x83e20f	                            and edx, 0xf	       174	verilog.c	FUNCTION_3
0x40002ad	     0xfb692000000	                   movzx edx, byte [rdx]	       174	verilog.c	FUNCTION_3
0x40002b4	        0x88542415	               mov byte [rsp + 0x15], dl	       174	verilog.c	FUNCTION_3
0x40002b8	          0x4889c2	                            mov rdx, rax	       176	verilog.c	FUNCTION_3
0x40002bb	        0x48c1e804	                              shr rax, 4	       176	verilog.c	FUNCTION_3
0x40002bf	          0x83e20f	                            and edx, 0xf	       176	verilog.c	FUNCTION_3
0x40002c2	          0x83e00f	                            and eax, 0xf	       176	verilog.c	FUNCTION_3
0x40002c5	     0xfb692000000	                   movzx edx, byte [rdx]	       176	verilog.c	FUNCTION_3
0x40002cc	     0xfb680000000	                   movzx eax, byte [rax]	       176	verilog.c	FUNCTION_3
0x40002d3	        0x88542418	               mov byte [rsp + 0x18], dl	       176	verilog.c	FUNCTION_3
0x40002d7	      0x488b542408	                mov rdx, qword [rsp + 8]	       182	verilog.c	FUNCTION_3	CALL_1
0x40002dc	        0x88442417	               mov byte [rsp + 0x17], al	       176	verilog.c	FUNCTION_3
0x40002e0	      0xe800000000	                          call 0x40002e5	       182	verilog.c	FUNCTION_3	CALL_1
0x40002e5	        0x4c8b7318	            mov r14, qword [rbx + 0x18] 	       222	verilog.c	FUNCTION_5	WHILE_1
0x40002e9	          0x4d85f6	                           test r14, r14	       222	verilog.c	FUNCTION_5	WHILE_1
0x40002ec	     0xf84ab000000	                            je 0x400039d	       222	verilog.c	FUNCTION_5	WHILE_1
0x40002f2	            0x31ed	                            xor ebp, ebp	       222	verilog.c	FUNCTION_5	WHILE_1
0x40002f4	         0xf1f4000	                         nop dword [rax]	       222	verilog.c	FUNCTION_5	WHILE_1
0x40002f8	          0x4129ee	                           sub r14d, ebp	       224	verilog.c	FUNCTION_5	WHILE_1
0x40002fb	      0xb810000000	                           mov eax, 0x10	       224	verilog.c	FUNCTION_5	WHILE_1
0x4000300	        0x4183fe10	                          cmp r14d, 0x10	       224	verilog.c	FUNCTION_5	WHILE_1
0x4000304	        0x440f47f0	                         cmova r14d, eax	       224	verilog.c	FUNCTION_5	WHILE_1
0x4000308	          0x4589f5	                          mov r13d, r14d	       229	verilog.c	FUNCTION_5	WHILE_1	IF_2	CALL_2
0x400030b	          0x4d01fd	                            add r13, r15	       229	verilog.c	FUNCTION_5	WHILE_1	IF_2	CALL_2
0x400030e	          0x4d39fd	                            cmp r13, r15	       200	verilog.c	FUNCTION_4	FOR_1
0x4000311	     0xf86b6000000	                           jbe 0x40003cd	       200	verilog.c	FUNCTION_4	FOR_1
0x4000317	          0x4c89fe	                            mov rsi, r15	       200	verilog.c	FUNCTION_4	FOR_1
0x400031a	          0x4c89e2	                            mov rdx, r12	       200	verilog.c	FUNCTION_4	FOR_1
0x400031d	           0xf1f00	                         nop dword [rax]	       200	verilog.c	FUNCTION_4	FOR_1
0x4000320	           0xfb606	                   movzx eax, byte [rsi]	       202	verilog.c	FUNCTION_4	FOR_1
0x4000323	        0x4883c601	                              add rsi, 1	       200	verilog.c	FUNCTION_4	FOR_1
0x4000327	        0x4883c203	                              add rdx, 3	       200	verilog.c	FUNCTION_4	FOR_1
0x400032b	          0x4889c7	                            mov rdi, rax	       202	verilog.c	FUNCTION_4	FOR_1
0x400032e	          0xc0e804	                               shr al, 4	       202	verilog.c	FUNCTION_4	FOR_1
0x4000331	          0x83e70f	                            and edi, 0xf	       202	verilog.c	FUNCTION_4	FOR_1
0x4000334	          0x83e00f	                            and eax, 0xf	       202	verilog.c	FUNCTION_4	FOR_1
0x4000337	     0xfb6bf000000	                   movzx edi, byte [rdi]	       202	verilog.c	FUNCTION_4	FOR_1
0x400033e	     0xfb680000000	                   movzx eax, byte [rax]	       202	verilog.c	FUNCTION_4	FOR_1
0x4000345	        0x40887afe	                 mov byte [rdx - 2], dil	       202	verilog.c	FUNCTION_4	FOR_1
0x4000349	          0x8842fd	                  mov byte [rdx - 3], al	       202	verilog.c	FUNCTION_4	FOR_1
0x400034c	          0x4939f5	                            cmp r13, rsi	       200	verilog.c	FUNCTION_4	FOR_1
0x400034f	        0xc642ff20	                mov byte [rdx - 1], 0x20	       204	verilog.c	FUNCTION_4	FOR_1
0x4000353	            0x75cb	                           jne 0x4000320	       200	verilog.c	FUNCTION_4	FOR_1
0x4000355	          0x4c89e8	                            mov rax, r13	       200	verilog.c	FUNCTION_4	FOR_1
0x4000358	          0x4c29f8	                            sub rax, r15	       200	verilog.c	FUNCTION_4	FOR_1
0x400035b	        0x488d3440	                  lea rsi, [rax + rax*2]	       200	verilog.c	FUNCTION_4	FOR_1
0x400035f	          0x4c01e6	                            add rsi, r12	       200	verilog.c	FUNCTION_4	FOR_1
0x4000362	        0x4c8d7e02	                      lea r15, [rsi + 2]	       207	verilog.c	FUNCTION_4
0x4000366	      0x488b542408	                mov rdx, qword [rsp + 8]	       210	verilog.c	FUNCTION_4	CALL_1
0x400036b	          0xc6060d	                     mov byte [rsi], 0xd	       206	verilog.c	FUNCTION_4
0x400036e	        0xc646010a	                 mov byte [rsi + 1], 0xa	       207	verilog.c	FUNCTION_4
0x4000372	          0x4c89e7	                            mov rdi, r12	       210	verilog.c	FUNCTION_4	CALL_1
0x4000375	          0x4d29e7	                            sub r15, r12	       208	verilog.c	FUNCTION_4
0x4000378	          0x4c89fe	                            mov rsi, r15	       210	verilog.c	FUNCTION_4	CALL_1
0x400037b	      0xe800000000	                          call 0x4000380	       210	verilog.c	FUNCTION_4	CALL_1
0x4000380	          0x4939c7	                            cmp r15, rax	       229	verilog.c	FUNCTION_5	WHILE_1	IF_2	CALL_2
0x4000383	            0x754d	                           jne 0x40003d2	       229	verilog.c	FUNCTION_5	WHILE_1	IF_2	CALL_2
0x4000385	      0x428d443500	                    lea eax, [rbp + r14]	       234	verilog.c	FUNCTION_5	WHILE_1
0x400038a	        0x4c8b7318	            mov r14, qword [rbx + 0x18] 	       222	verilog.c	FUNCTION_5	WHILE_1
0x400038e	          0x4d89ef	                            mov r15, r13	       229	verilog.c	FUNCTION_5	WHILE_1	IF_2	CALL_2
0x4000391	          0x4889c5	                            mov rbp, rax	       234	verilog.c	FUNCTION_5	WHILE_1
0x4000394	          0x4939c6	                            cmp r14, rax	       222	verilog.c	FUNCTION_5	WHILE_1
0x4000397	     0xf875bffffff	                            ja 0x40002f8	       222	verilog.c	FUNCTION_5	WHILE_1
0x400039d	          0x488b1b	                    mov rbx, qword [rbx]	       254	verilog.c	FUNCTION_6	WHILE_1
0x40003a0	          0x4885db	                           test rbx, rbx	       250	verilog.c	FUNCTION_6	WHILE_1
0x40003a3	     0xf8572feffff	                           jne 0x400021b	       250	verilog.c	FUNCTION_6	WHILE_1
0x40003a9	      0xb801000000	                              mov eax, 1	       256	verilog.c	FUNCTION_6
0x40003ae	      0x488b4c2448	            mov rcx, qword [rsp + 0x48] 	       257	verilog.c	FUNCTION_6
0x40003b3	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       257	verilog.c	FUNCTION_6
0x40003bc	            0x7518	                           jne 0x40003d6	       257	verilog.c	FUNCTION_6
0x40003be	        0x4883c458	                           add rsp, 0x58	       257	verilog.c	FUNCTION_6
0x40003c2	              0x5b	                                 pop rbx	       257	verilog.c	FUNCTION_6
0x40003c3	              0x5d	                                 pop rbp	       257	verilog.c	FUNCTION_6
0x40003c4	            0x415c	                                 pop r12	       257	verilog.c	FUNCTION_6
0x40003c6	            0x415d	                                 pop r13	       257	verilog.c	FUNCTION_6
0x40003c8	            0x415e	                                 pop r14	       257	verilog.c	FUNCTION_6
0x40003ca	            0x415f	                                 pop r15	       257	verilog.c	FUNCTION_6
0x40003cc	              0xc3	                                     ret	       257	verilog.c	FUNCTION_6
0x40003cd	          0x4c89e6	                            mov rsi, r12	       196	verilog.c	FUNCTION_4
0x40003d0	            0xeb90	                           jmp 0x4000362	       196	verilog.c	FUNCTION_4
0x40003d2	            0x31c0	                            xor eax, eax	       253	verilog.c	FUNCTION_6	WHILE_1	IF_1
0x40003d4	            0xebd8	                           jmp 0x40003ae	       253	verilog.c	FUNCTION_6	WHILE_1	IF_1
0x40003d6	      0xe800000000	                  call section_end..data	       257	verilog.c	FUNCTION_6
