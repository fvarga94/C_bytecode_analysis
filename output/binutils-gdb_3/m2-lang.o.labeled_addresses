m2_printstr	ELSE,1:WHILE,1:FOR,1:CALL,9:functions,0:SWITCH,0:DO,0:IF,7	159
0x40001e0	            0x4157	                                push r15	       108	m2-lang.c	FUNCTION_3
0x40001e2	            0x4156	                                push r14	       108	m2-lang.c	FUNCTION_3
0x40001e4	            0x4155	                                push r13	       108	m2-lang.c	FUNCTION_3
0x40001e6	            0x4154	                                push r12	       108	m2-lang.c	FUNCTION_3
0x40001e8	              0x55	                                push rbp	       108	m2-lang.c	FUNCTION_3
0x40001e9	              0x53	                                push rbx	       108	m2-lang.c	FUNCTION_3
0x40001ea	        0x4883ec38	                           sub rsp, 0x38	       108	m2-lang.c	FUNCTION_3
0x40001ee	            0x85c9	                           test ecx, ecx	       114	m2-lang.c	FUNCTION_3	IF_1
0x40001f0	      0x48897c2408	                mov qword [rsp + 8], rdi	       108	m2-lang.c	FUNCTION_3
0x40001f5	      0x4889742410	             mov qword [rsp + 0x10], rsi	       108	m2-lang.c	FUNCTION_3
0x40001fa	      0x44894c242c	             mov dword [rsp + 0x2c], r9d	       108	m2-lang.c	FUNCTION_3
0x40001ff	      0x488b6c2470	            mov rbp, qword [rsp + 0x70] 	       108	m2-lang.c	FUNCTION_3
0x4000204	     0xf842a020000	                            je 0x4000434	       114	m2-lang.c	FUNCTION_3	IF_1
0x400020a	          0x4189cc	                           mov r12d, ecx	       114	m2-lang.c	FUNCTION_3	IF_1
0x400020d	          0x8b4d1c	            mov ecx, dword [rbp + 0x1c] 	       120	m2-lang.c	FUNCTION_3	FOR_1
0x4000210	            0x85c9	                           test ecx, ecx	       120	m2-lang.c	FUNCTION_3	FOR_1
0x4000212	     0xf842b020000	                            je 0x4000443	       120	m2-lang.c	FUNCTION_3	FOR_1
0x4000218	          0x4531ed	                          xor r13d, r13d	       128	m2-lang.c	FUNCTION_3	FOR_1
0x400021b	          0x4531ff	                          xor r15d, r15d	       128	m2-lang.c	FUNCTION_3	FOR_1
0x400021e	            0x31db	                            xor ebx, ebx	       128	m2-lang.c	FUNCTION_3	FOR_1
0x4000220	          0x4989d6	                            mov r14, rdx	       128	m2-lang.c	FUNCTION_3	FOR_1
0x4000223	      0xe800000000	                          call 0x4000228	       128	m2-lang.c	FUNCTION_3	FOR_1
0x4000228	     0xf1f84000000	                   nop dword [rax + rax]	       128	m2-lang.c	FUNCTION_3	FOR_1
0x4000230	        0x458d4f01	                      lea r9d, [r15 + 1]	       136	m2-lang.c	FUNCTION_3	FOR_1
0x4000234	          0x4539cc	                           cmp r12d, r9d	       138	m2-lang.c	FUNCTION_3	FOR_1	WHILE_1
0x4000237	     0xf86d6000000	                           jbe 0x4000313	       138	m2-lang.c	FUNCTION_3	FOR_1	WHILE_1
0x400023d	          0x4489ca	                            mov edx, r9d	       138	m2-lang.c	FUNCTION_3	FOR_1	WHILE_1
0x4000240	          0x4489c9	                            mov ecx, r9d	       138	m2-lang.c	FUNCTION_3	FOR_1	WHILE_1
0x4000243	      0x410fb63c16	             movzx edi, byte [r14 + rdx]	       138	m2-lang.c	FUNCTION_3	FOR_1	WHILE_1
0x4000248	          0x4489fa	                           mov edx, r15d	       138	m2-lang.c	FUNCTION_3	FOR_1	WHILE_1
0x400024b	          0x4c01f2	                            add rdx, r14	       138	m2-lang.c	FUNCTION_3	FOR_1	WHILE_1
0x400024e	          0x403a3a	                     cmp dil, byte [rdx]	       138	m2-lang.c	FUNCTION_3	FOR_1	WHILE_1
0x4000251	            0x7415	                            je 0x4000268	       138	m2-lang.c	FUNCTION_3	FOR_1	WHILE_1
0x4000253	      0xe9bd010000	                           jmp 0x4000415	       138	m2-lang.c	FUNCTION_3	FOR_1	WHILE_1
0x4000258	     0xf1f84000000	                   nop dword [rax + rax]	       138	m2-lang.c	FUNCTION_3	FOR_1	WHILE_1
0x4000260	            0x89ce	                            mov esi, ecx	       138	m2-lang.c	FUNCTION_3	FOR_1	WHILE_1
0x4000262	        0x41383c36	               cmp byte [r14 + rsi], dil	       138	m2-lang.c	FUNCTION_3	FOR_1	WHILE_1
0x4000266	            0x750e	                           jne 0x4000276	       138	m2-lang.c	FUNCTION_3	FOR_1	WHILE_1
0x4000268	          0x83c101	                              add ecx, 1	       140	m2-lang.c	FUNCTION_3	FOR_1	WHILE_1
0x400026b	          0x4189cb	                           mov r11d, ecx	       141	m2-lang.c	FUNCTION_3	FOR_1	WHILE_1
0x400026e	          0x4529fb	                          sub r11d, r15d	       141	m2-lang.c	FUNCTION_3	FOR_1	WHILE_1
0x4000271	          0x4139cc	                           cmp r12d, ecx	       138	m2-lang.c	FUNCTION_3	FOR_1	WHILE_1
0x4000274	            0x77ea	                            ja 0x4000260	       138	m2-lang.c	FUNCTION_3	FOR_1	WHILE_1
0x4000276	        0x44395d20	           cmp dword [rbp + 0x20], r11d 	       144	m2-lang.c	FUNCTION_3	FOR_1	IF_3
0x400027a	     0xf83b0000000	                           jae 0x4000330	       144	m2-lang.c	FUNCTION_3	FOR_1	IF_3
0x4000280	          0x4585ed	                         test r13d, r13d	       146	m2-lang.c	FUNCTION_3	FOR_1	IF_3	IF_4
0x4000283	     0xf8517010000	                           jne 0x40003a0	       146	m2-lang.c	FUNCTION_3	FOR_1	IF_3	IF_4
0x4000289	      0x4c8b7c2408	                mov r15, qword [rsp + 8]	       151	m2-lang.c	FUNCTION_3	FOR_1	IF_3	CALL_4
0x400028e	           0xfb63a	                   movzx edi, byte [rdx]	       151	m2-lang.c	FUNCTION_3	FOR_1	IF_3	CALL_4
0x4000291	          0x4531ed	                          xor r13d, r13d	       151	m2-lang.c	FUNCTION_3	FOR_1	IF_3	CALL_4
0x4000294	      0x488b742410	            mov rsi, qword [rsp + 0x10] 	       151	m2-lang.c	FUNCTION_3	FOR_1	IF_3	CALL_4
0x4000299	        0x894c2428	             mov dword [rsp + 0x28], ecx	       151	m2-lang.c	FUNCTION_3	FOR_1	IF_3	CALL_4
0x400029d	      0x44895c2418	            mov dword [rsp + 0x18], r11d	       151	m2-lang.c	FUNCTION_3	FOR_1	IF_3	CALL_4
0x40002a2	          0x4c89fa	                            mov rdx, r15	       151	m2-lang.c	FUNCTION_3	FOR_1	IF_3	CALL_4
0x40002a5	      0xe896fdffff	 call sym.m2_printchar_int_type__ui_file	       151	m2-lang.c	FUNCTION_3	FOR_1	IF_3	CALL_4
0x40002aa	      0x448b5c2418	           mov r11d, dword [rsp + 0x18] 	       152	m2-lang.c	FUNCTION_3	FOR_1	IF_3	CALL_5
0x40002af	          0x4c89ff	                            mov rdi, r15	       152	m2-lang.c	FUNCTION_3	FOR_1	IF_3	CALL_5
0x40002b2	            0x31c0	                            xor eax, eax	       152	m2-lang.c	FUNCTION_3	FOR_1	IF_3	CALL_5
0x40002b4	      0xbe00000000	                              mov esi, 0	       152	m2-lang.c	FUNCTION_3	FOR_1	IF_3	CALL_5
0x40002b9	          0x4489da	                           mov edx, r11d	       152	m2-lang.c	FUNCTION_3	FOR_1	IF_3	CALL_5
0x40002bc	      0xe800000000	                          call 0x40002c1	       152	m2-lang.c	FUNCTION_3	FOR_1	IF_3	CALL_5
0x40002c1	        0x8b4c2428	            mov ecx, dword [rsp + 0x28] 	       152	m2-lang.c	FUNCTION_3	FOR_1	IF_3	CALL_5
0x40002c5	           0x35d20	             add ebx, dword [rbp + 0x20]	       154	m2-lang.c	FUNCTION_3	FOR_1	IF_3
0x40002c8	      0xba01000000	                              mov edx, 1	       155	m2-lang.c	FUNCTION_3	FOR_1	IF_3
0x40002cd	          0x4189cf	                           mov r15d, ecx	       155	m2-lang.c	FUNCTION_3	FOR_1	IF_3
0x40002d0	          0x4539e7	                          cmp r15d, r12d	       120	m2-lang.c	FUNCTION_3	FOR_1
0x40002d3	     0xf839d000000	                           jae 0x4000376	       120	m2-lang.c	FUNCTION_3	FOR_1
0x40002d9	          0x3b5d1c	            cmp ebx, dword [rbp + 0x1c] 	       120	m2-lang.c	FUNCTION_3	FOR_1
0x40002dc	        0x89542428	             mov dword [rsp + 0x28], edx	       120	m2-lang.c	FUNCTION_3	FOR_1
0x40002e0	     0xf8390000000	                           jae 0x4000376	       120	m2-lang.c	FUNCTION_3	FOR_1
0x40002e6	      0xe800000000	                          call 0x40002eb	       128	m2-lang.c	FUNCTION_3	FOR_1
0x40002eb	        0x8b542428	            mov edx, dword [rsp + 0x28] 	       130	m2-lang.c	FUNCTION_3	FOR_1	IF_2
0x40002ef	            0x85d2	                           test edx, edx	       130	m2-lang.c	FUNCTION_3	FOR_1	IF_2
0x40002f1	     0xf8439ffffff	                            je 0x4000230	       130	m2-lang.c	FUNCTION_3	FOR_1	IF_2
0x40002f7	      0x488b742408	                mov rsi, qword [rsp + 8]	       132	m2-lang.c	FUNCTION_3	FOR_1	IF_2	CALL_2
0x40002fc	      0xbf00000000	                              mov edi, 0	       132	m2-lang.c	FUNCTION_3	FOR_1	IF_2	CALL_2
0x4000301	      0xe800000000	                          call 0x4000306	       132	m2-lang.c	FUNCTION_3	FOR_1	IF_2	CALL_2
0x4000306	        0x458d4f01	                      lea r9d, [r15 + 1]	       136	m2-lang.c	FUNCTION_3	FOR_1
0x400030a	          0x4539cc	                           cmp r12d, r9d	       138	m2-lang.c	FUNCTION_3	FOR_1	WHILE_1
0x400030d	     0xf872affffff	                            ja 0x400023d	       138	m2-lang.c	FUNCTION_3	FOR_1	WHILE_1
0x4000313	    0x41bb01000000	                             mov r11d, 1	       137	m2-lang.c	FUNCTION_3	FOR_1
0x4000319	        0x44395d20	           cmp dword [rbp + 0x20], r11d 	       144	m2-lang.c	FUNCTION_3	FOR_1	IF_3
0x400031d	          0x4489f8	                           mov eax, r15d	       144	m2-lang.c	FUNCTION_3	FOR_1	IF_3
0x4000320	        0x498d1406	                    lea rdx, [r14 + rax]	       144	m2-lang.c	FUNCTION_3	FOR_1	IF_3
0x4000324	          0x4489c9	                            mov ecx, r9d	       138	m2-lang.c	FUNCTION_3	FOR_1	WHILE_1
0x4000327	     0xf8253ffffff	                            jb 0x4000280	       144	m2-lang.c	FUNCTION_3	FOR_1	IF_3
0x400032d	           0xf1f00	                         nop dword [rax]	       144	m2-lang.c	FUNCTION_3	FOR_1	IF_3
0x4000330	          0x4585ed	                         test r13d, r13d	       159	m2-lang.c	FUNCTION_3	FOR_1	ELSE_1	IF_5
0x4000333	     0xf8497000000	                            je 0x40003d0	       159	m2-lang.c	FUNCTION_3	FOR_1	ELSE_1	IF_5
0x4000339	    0x488b05000000	            mov rax, qword [0x04000340] 	       164	m2-lang.c	FUNCTION_3	FOR_1	ELSE_1	CALL_7
0x4000340	           0xfb63a	                   movzx edi, byte [rdx]	       164	m2-lang.c	FUNCTION_3	FOR_1	ELSE_1	CALL_7
0x4000343	      0xb922000000	                           mov ecx, 0x22	       164	m2-lang.c	FUNCTION_3	FOR_1	ELSE_1	CALL_7
0x4000348	      0x44894c2428	             mov dword [rsp + 0x28], r9d	       164	m2-lang.c	FUNCTION_3	FOR_1	ELSE_1	CALL_7
0x400034d	      0x488b542408	                mov rdx, qword [rsp + 8]	       164	m2-lang.c	FUNCTION_3	FOR_1	ELSE_1	CALL_7
0x4000352	          0x83c301	                              add ebx, 1	       165	m2-lang.c	FUNCTION_3	FOR_1	ELSE_1
0x4000355	      0x488b742410	            mov rsi, qword [rsp + 0x10] 	       164	m2-lang.c	FUNCTION_3	FOR_1	ELSE_1	CALL_7
0x400035a	    0x41bd01000000	                             mov r13d, 1	       165	m2-lang.c	FUNCTION_3	FOR_1	ELSE_1
0x4000360	          0xff5060	                 call qword [rax + 0x60]	       164	m2-lang.c	FUNCTION_3	FOR_1	ELSE_1	CALL_7
0x4000363	      0x448b4c2428	            mov r9d, dword [rsp + 0x28] 	       136	m2-lang.c	FUNCTION_3	FOR_1
0x4000368	            0x31d2	                            xor edx, edx	       165	m2-lang.c	FUNCTION_3	FOR_1	ELSE_1
0x400036a	          0x4589cf	                           mov r15d, r9d	       136	m2-lang.c	FUNCTION_3	FOR_1
0x400036d	          0x4539e7	                          cmp r15d, r12d	       120	m2-lang.c	FUNCTION_3	FOR_1
0x4000370	     0xf8263ffffff	                            jb 0x40002d9	       120	m2-lang.c	FUNCTION_3	FOR_1
0x4000376	          0x4585ed	                         test r13d, r13d	       170	m2-lang.c	FUNCTION_3	IF_6
0x4000379	     0xf85a1000000	                           jne 0x4000420	       170	m2-lang.c	FUNCTION_3	IF_6
0x400037f	        0x8b44242c	            mov eax, dword [rsp + 0x2c] 	       173	m2-lang.c	FUNCTION_3	IF_7
0x4000383	            0x85c0	                           test eax, eax	       173	m2-lang.c	FUNCTION_3	IF_7
0x4000385	            0x7571	                           jne 0x40003f8	       173	m2-lang.c	FUNCTION_3	IF_7
0x4000387	          0x4539fc	                          cmp r12d, r15d	       173	m2-lang.c	FUNCTION_3	IF_7
0x400038a	            0x776c	                            ja 0x40003f8	       173	m2-lang.c	FUNCTION_3	IF_7
0x400038c	        0x4883c438	                           add rsp, 0x38	       175	m2-lang.c	FUNCTION_3
0x4000390	              0x5b	                                 pop rbx	       175	m2-lang.c	FUNCTION_3
0x4000391	              0x5d	                                 pop rbp	       175	m2-lang.c	FUNCTION_3
0x4000392	            0x415c	                                 pop r12	       175	m2-lang.c	FUNCTION_3
0x4000394	            0x415d	                                 pop r13	       175	m2-lang.c	FUNCTION_3
0x4000396	            0x415e	                                 pop r14	       175	m2-lang.c	FUNCTION_3
0x4000398	            0x415f	                                 pop r15	       175	m2-lang.c	FUNCTION_3
0x400039a	              0xc3	                                     ret	       175	m2-lang.c	FUNCTION_3
0x400039b	       0xf1f440000	                   nop dword [rax + rax]	       175	m2-lang.c	FUNCTION_3
0x40003a0	      0x488b742408	                mov rsi, qword [rsp + 8]	       148	m2-lang.c	FUNCTION_3	FOR_1	IF_3	IF_4	CALL_3
0x40003a5	      0xbf00000000	                              mov edi, 0	       148	m2-lang.c	FUNCTION_3	FOR_1	IF_3	IF_4	CALL_3
0x40003aa	      0x4889542420	             mov qword [rsp + 0x20], rdx	       148	m2-lang.c	FUNCTION_3	FOR_1	IF_3	IF_4	CALL_3
0x40003af	      0x44895c2418	            mov dword [rsp + 0x18], r11d	       148	m2-lang.c	FUNCTION_3	FOR_1	IF_3	IF_4	CALL_3
0x40003b4	        0x894c2428	             mov dword [rsp + 0x28], ecx	       148	m2-lang.c	FUNCTION_3	FOR_1	IF_3	IF_4	CALL_3
0x40003b8	      0xe800000000	                          call 0x40003bd	       148	m2-lang.c	FUNCTION_3	FOR_1	IF_3	IF_4	CALL_3
0x40003bd	      0x488b542420	            mov rdx, qword [rsp + 0x20] 	       148	m2-lang.c	FUNCTION_3	FOR_1	IF_3	IF_4	CALL_3
0x40003c2	      0x448b5c2418	           mov r11d, dword [rsp + 0x18] 	       148	m2-lang.c	FUNCTION_3	FOR_1	IF_3	IF_4	CALL_3
0x40003c7	        0x8b4c2428	            mov ecx, dword [rsp + 0x28] 	       148	m2-lang.c	FUNCTION_3	FOR_1	IF_3	IF_4	CALL_3
0x40003cb	      0xe9b9feffff	                           jmp 0x4000289	       148	m2-lang.c	FUNCTION_3	FOR_1	IF_3	IF_4	CALL_3
0x40003d0	      0x488b742408	                mov rsi, qword [rsp + 8]	       161	m2-lang.c	FUNCTION_3	FOR_1	ELSE_1	IF_5	CALL_6
0x40003d5	      0xbf00000000	                              mov edi, 0	       161	m2-lang.c	FUNCTION_3	FOR_1	ELSE_1	IF_5	CALL_6
0x40003da	      0x4889542418	             mov qword [rsp + 0x18], rdx	       161	m2-lang.c	FUNCTION_3	FOR_1	ELSE_1	IF_5	CALL_6
0x40003df	      0x44894c2428	             mov dword [rsp + 0x28], r9d	       161	m2-lang.c	FUNCTION_3	FOR_1	ELSE_1	IF_5	CALL_6
0x40003e4	      0xe800000000	                          call 0x40003e9	       161	m2-lang.c	FUNCTION_3	FOR_1	ELSE_1	IF_5	CALL_6
0x40003e9	      0x488b542418	            mov rdx, qword [rsp + 0x18] 	       161	m2-lang.c	FUNCTION_3	FOR_1	ELSE_1	IF_5	CALL_6
0x40003ee	      0x448b4c2428	            mov r9d, dword [rsp + 0x28] 	       161	m2-lang.c	FUNCTION_3	FOR_1	ELSE_1	IF_5	CALL_6
0x40003f3	      0xe941ffffff	                           jmp 0x4000339	       161	m2-lang.c	FUNCTION_3	FOR_1	ELSE_1	IF_5	CALL_6
0x40003f8	      0x488b742408	                mov rsi, qword [rsp + 8]	       174	m2-lang.c	FUNCTION_3	CALL_9
0x40003fd	      0xbf00000000	                              mov edi, 0	       174	m2-lang.c	FUNCTION_3	CALL_9
0x4000402	        0x4883c438	                           add rsp, 0x38	       175	m2-lang.c	FUNCTION_3
0x4000406	              0x5b	                                 pop rbx	       175	m2-lang.c	FUNCTION_3
0x4000407	              0x5d	                                 pop rbp	       175	m2-lang.c	FUNCTION_3
0x4000408	            0x415c	                                 pop r12	       175	m2-lang.c	FUNCTION_3
0x400040a	            0x415d	                                 pop r13	       175	m2-lang.c	FUNCTION_3
0x400040c	            0x415e	                                 pop r14	       175	m2-lang.c	FUNCTION_3
0x400040e	            0x415f	                                 pop r15	       175	m2-lang.c	FUNCTION_3
0x4000410	      0xe900000000	                           jmp 0x4000415	       174	m2-lang.c	FUNCTION_3	CALL_9
0x4000415	    0x41bb01000000	                             mov r11d, 1	       137	m2-lang.c	FUNCTION_3	FOR_1
0x400041b	      0xe956feffff	                           jmp 0x4000276	       137	m2-lang.c	FUNCTION_3	FOR_1
0x4000420	      0x488b742408	                mov rsi, qword [rsp + 8]	       171	m2-lang.c	FUNCTION_3	CALL_8
0x4000425	      0xbf00000000	                              mov edi, 0	       171	m2-lang.c	FUNCTION_3	CALL_8
0x400042a	      0xe800000000	                          call 0x400042f	       171	m2-lang.c	FUNCTION_3	CALL_8
0x400042f	      0xe94bffffff	                           jmp 0x400037f	       171	m2-lang.c	FUNCTION_3	CALL_8
0x4000434	      0xe800000000	                          call 0x4000439	       116	m2-lang.c	FUNCTION_3	IF_1	CALL_1
0x4000439	      0xbf00000000	                              mov edi, 0	       116	m2-lang.c	FUNCTION_3	IF_1	CALL_1
0x400043e	          0x488b30	                    mov rsi, qword [rax]	       116	m2-lang.c	FUNCTION_3	IF_1	CALL_1
0x4000441	            0xebbf	                           jmp 0x4000402	       116	m2-lang.c	FUNCTION_3	IF_1	CALL_1
0x4000443	          0x4531ff	                          xor r15d, r15d	       120	m2-lang.c	FUNCTION_3	FOR_1
0x4000446	      0xe934ffffff	                           jmp 0x400037f	       120	m2-lang.c	FUNCTION_3	FOR_1
build_m2_types	ELSE,0:WHILE,0:FOR,0:CALL,11:functions,0:SWITCH,0:DO,0:IF,0	96
0x4000740	            0x4154	                                push r12	       408	m2-lang.c	FUNCTION_6
0x4000742	              0x55	                                push rbp	       408	m2-lang.c	FUNCTION_6
0x4000743	          0x4889fd	                            mov rbp, rdi	       408	m2-lang.c	FUNCTION_6
0x4000746	              0x53	                                push rbx	       408	m2-lang.c	FUNCTION_6
0x4000747	        0x4883ec10	                           sub rsp, 0x10	       408	m2-lang.c	FUNCTION_6
0x400074b	      0xe800000000	                          call 0x4000750	       410	m2-lang.c	FUNCTION_6	CALL_1
0x4000750	        0x488b7020	            mov rsi, qword [rax + 0x20] 	        33	gdb_obstack.h	FUNCTION_9
0x4000754	        0x488b5018	            mov rdx, qword [rax + 0x18] 	        33	gdb_obstack.h	FUNCTION_9
0x4000758	          0x4889f1	                            mov rcx, rsi	        33	gdb_obstack.h	FUNCTION_9
0x400075b	          0x4829d1	                            sub rcx, rdx	        33	gdb_obstack.h	FUNCTION_9
0x400075e	        0x4883f927	                           cmp rcx, 0x27	        33	gdb_obstack.h	FUNCTION_9
0x4000762	     0xf8620010000	                           jbe 0x4000888	        33	gdb_obstack.h	FUNCTION_9
0x4000768	        0x488b5810	            mov rbx, qword [rax + 0x10] 	        33	gdb_obstack.h	FUNCTION_9
0x400076c	        0x4883c228	                           add rdx, 0x28	        33	gdb_obstack.h	FUNCTION_9
0x4000770	        0x48895018	             mov qword [rax + 0x18], rdx	        33	gdb_obstack.h	FUNCTION_9
0x4000774	          0x4839da	                            cmp rdx, rbx	        33	gdb_obstack.h	FUNCTION_9
0x4000777	     0xf8433010000	                            je 0x40008b0	        33	gdb_obstack.h	FUNCTION_9
0x400077d	        0x488b4830	            mov rcx, qword [rax + 0x30] 	        33	gdb_obstack.h	FUNCTION_9
0x4000781	          0x4989f0	                             mov r8, rsi	        33	gdb_obstack.h	FUNCTION_9
0x4000784	          0x4801ca	                            add rdx, rcx	        33	gdb_obstack.h	FUNCTION_9
0x4000787	          0x48f7d1	                                 not rcx	        33	gdb_obstack.h	FUNCTION_9
0x400078a	          0x4821ca	                            and rdx, rcx	        33	gdb_obstack.h	FUNCTION_9
0x400078d	        0x488b4808	                mov rcx, qword [rax + 8]	        33	gdb_obstack.h	FUNCTION_9
0x4000791	          0x4889d7	                            mov rdi, rdx	        33	gdb_obstack.h	FUNCTION_9
0x4000794	        0x48895018	             mov qword [rax + 0x18], rdx	        33	gdb_obstack.h	FUNCTION_9
0x4000798	          0x4829cf	                            sub rdi, rcx	        33	gdb_obstack.h	FUNCTION_9
0x400079b	          0x4929c8	                             sub r8, rcx	        33	gdb_obstack.h	FUNCTION_9
0x400079e	          0x4c39c7	                             cmp rdi, r8	        33	gdb_obstack.h	FUNCTION_9
0x40007a1	            0x7607	                           jbe 0x40007aa	        33	gdb_obstack.h	FUNCTION_9
0x40007a3	        0x48897018	             mov qword [rax + 0x18], rsi	        33	gdb_obstack.h	FUNCTION_9
0x40007a7	          0x4889f2	                            mov rdx, rsi	        33	gdb_obstack.h	FUNCTION_9
0x40007aa	        0x48895010	             mov qword [rax + 0x10], rdx	        33	gdb_obstack.h	FUNCTION_9
0x40007ae	          0x4889ef	                            mov rdi, rbp	       414	m2-lang.c	FUNCTION_6	CALL_3
0x40007b1	    0x48c703000000	                      mov qword [rbx], 0	        90	string3.h	FUNCTION_20	CALL_6
0x40007b8	    0x48c743080000	                  mov qword [rbx + 8], 0	        90	string3.h	FUNCTION_20	CALL_6
0x40007c0	    0x48c743100000	               mov qword [rbx + 0x10], 0	        90	string3.h	FUNCTION_20	CALL_6
0x40007c8	    0x48c743180000	               mov qword [rbx + 0x18], 0	        90	string3.h	FUNCTION_20	CALL_6
0x40007d0	    0x48c743200000	               mov qword [rbx + 0x20], 0	        90	string3.h	FUNCTION_20	CALL_6
0x40007d8	      0xe800000000	                          call 0x40007dd	       414	m2-lang.c	FUNCTION_6	CALL_3
0x40007dd	      0xb900000000	                              mov ecx, 0	       414	m2-lang.c	FUNCTION_6	CALL_3
0x40007e2	            0x31d2	                            xor edx, edx	       414	m2-lang.c	FUNCTION_6	CALL_3
0x40007e4	            0x89c6	                            mov esi, eax	       414	m2-lang.c	FUNCTION_6	CALL_3
0x40007e6	          0x4889ef	                            mov rdi, rbp	       414	m2-lang.c	FUNCTION_6	CALL_3
0x40007e9	      0xe800000000	                          call 0x40007ee	       414	m2-lang.c	FUNCTION_6	CALL_3
0x40007ee	          0x4889ef	                            mov rdi, rbp	       416	m2-lang.c	FUNCTION_6	CALL_5
0x40007f1	        0x48894308	                mov qword [rbx + 8], rax	       414	m2-lang.c	FUNCTION_6	CALL_3
0x40007f5	      0xe800000000	                          call 0x40007fa	       416	m2-lang.c	FUNCTION_6	CALL_5
0x40007fa	      0xb900000000	                              mov ecx, 0	       416	m2-lang.c	FUNCTION_6	CALL_5
0x40007ff	      0xba01000000	                              mov edx, 1	       416	m2-lang.c	FUNCTION_6	CALL_5
0x4000804	            0x89c6	                            mov esi, eax	       416	m2-lang.c	FUNCTION_6	CALL_5
0x4000806	          0x4889ef	                            mov rdi, rbp	       416	m2-lang.c	FUNCTION_6	CALL_5
0x4000809	      0xe800000000	                          call 0x400080e	       416	m2-lang.c	FUNCTION_6	CALL_5
0x400080e	          0x4889ef	                            mov rdi, rbp	       418	m2-lang.c	FUNCTION_6	CALL_7
0x4000811	        0x48894310	             mov qword [rbx + 0x10], rax	       416	m2-lang.c	FUNCTION_6	CALL_5
0x4000815	      0xe800000000	                          call 0x400081a	       418	m2-lang.c	FUNCTION_6	CALL_7
0x400081a	          0x4889ef	                            mov rdi, rbp	       418	m2-lang.c	FUNCTION_6	CALL_7
0x400081d	          0x4989c4	                            mov r12, rax	       418	m2-lang.c	FUNCTION_6	CALL_7
0x4000820	      0xe800000000	                          call 0x4000825	       418	m2-lang.c	FUNCTION_6	CALL_7
0x4000825	          0x4c89e1	                            mov rcx, r12	       418	m2-lang.c	FUNCTION_6	CALL_7
0x4000828	          0x4889ef	                            mov rdi, rbp	       418	m2-lang.c	FUNCTION_6	CALL_7
0x400082b	      0xba00000000	                              mov edx, 0	       418	m2-lang.c	FUNCTION_6	CALL_7
0x4000830	            0x89c6	                            mov esi, eax	       418	m2-lang.c	FUNCTION_6	CALL_7
0x4000832	      0xe800000000	                          call 0x4000837	       418	m2-lang.c	FUNCTION_6	CALL_7
0x4000837	      0xb900000000	                              mov ecx, 0	       421	m2-lang.c	FUNCTION_6	CALL_9
0x400083c	      0xba01000000	                              mov edx, 1	       421	m2-lang.c	FUNCTION_6	CALL_9
0x4000841	      0xbe08000000	                              mov esi, 8	       421	m2-lang.c	FUNCTION_6	CALL_9
0x4000846	          0x4889ef	                            mov rdi, rbp	       421	m2-lang.c	FUNCTION_6	CALL_9
0x4000849	        0x48894318	             mov qword [rbx + 0x18], rax	       419	m2-lang.c	FUNCTION_6	CALL_8
0x400084d	      0xe800000000	                          call 0x4000852	       421	m2-lang.c	FUNCTION_6	CALL_9
0x4000852	          0x4889ef	                            mov rdi, rbp	       423	m2-lang.c	FUNCTION_6	CALL_11
0x4000855	          0x488903	                    mov qword [rbx], rax	       421	m2-lang.c	FUNCTION_6	CALL_9
0x4000858	      0xe800000000	                          call 0x400085d	       423	m2-lang.c	FUNCTION_6	CALL_11
0x400085d	          0x4889ef	                            mov rdi, rbp	       423	m2-lang.c	FUNCTION_6	CALL_11
0x4000860	      0xb900000000	                              mov ecx, 0	       423	m2-lang.c	FUNCTION_6	CALL_11
0x4000865	      0xba01000000	                              mov edx, 1	       423	m2-lang.c	FUNCTION_6	CALL_11
0x400086a	            0x89c6	                            mov esi, eax	       423	m2-lang.c	FUNCTION_6	CALL_11
0x400086c	      0xe800000000	                          call 0x4000871	       423	m2-lang.c	FUNCTION_6	CALL_11
0x4000871	        0x48894320	             mov qword [rbx + 0x20], rax	       423	m2-lang.c	FUNCTION_6	CALL_11
0x4000875	        0x4883c410	                           add rsp, 0x10	       426	m2-lang.c	FUNCTION_6
0x4000879	          0x4889d8	                            mov rax, rbx	       426	m2-lang.c	FUNCTION_6
0x400087c	              0x5b	                                 pop rbx	       426	m2-lang.c	FUNCTION_6
0x400087d	              0x5d	                                 pop rbp	       426	m2-lang.c	FUNCTION_6
0x400087e	            0x415c	                                 pop r12	       426	m2-lang.c	FUNCTION_6
0x4000880	              0xc3	                                     ret	       426	m2-lang.c	FUNCTION_6
0x4000881	     0xf1f80000000	                         nop dword [rax]	       426	m2-lang.c	FUNCTION_6
0x4000888	      0xbe28000000	                           mov esi, 0x28	        33	gdb_obstack.h	FUNCTION_9
0x400088d	          0x4889c7	                            mov rdi, rax	        33	gdb_obstack.h	FUNCTION_9
0x4000890	      0x4889442408	                mov qword [rsp + 8], rax	        33	gdb_obstack.h	FUNCTION_9
0x4000895	      0xe800000000	                          call 0x400089a	        33	gdb_obstack.h	FUNCTION_9
0x400089a	      0x488b442408	                mov rax, qword [rsp + 8]	        33	gdb_obstack.h	FUNCTION_9
0x400089f	        0x488b5018	            mov rdx, qword [rax + 0x18] 	        33	gdb_obstack.h	FUNCTION_9
0x40008a3	        0x488b7020	            mov rsi, qword [rax + 0x20] 	        33	gdb_obstack.h	FUNCTION_9
0x40008a7	      0xe9bcfeffff	                           jmp 0x4000768	        33	gdb_obstack.h	FUNCTION_9
0x40008ac	         0xf1f4000	                         nop dword [rax]	        33	gdb_obstack.h	FUNCTION_9
0x40008b0	        0x80485002	                 or byte [rax + 0x50], 2	        33	gdb_obstack.h	FUNCTION_9
0x40008b4	      0xe9c4feffff	                           jmp 0x400077d	        33	gdb_obstack.h	FUNCTION_9
m2_printchar	ELSE,0:WHILE,0:FOR,0:CALL,3:functions,0:SWITCH,0:DO,0:IF,0	21
0x4000040	            0x4154	                                push r12	        91	m2-lang.c	FUNCTION_2
0x4000042	              0x55	                                push rbp	        91	m2-lang.c	FUNCTION_2
0x4000043	          0x4989f4	                            mov r12, rsi	        91	m2-lang.c	FUNCTION_2
0x4000046	              0x53	                                push rbx	        91	m2-lang.c	FUNCTION_2
0x4000047	            0x89fd	                            mov ebp, edi	        91	m2-lang.c	FUNCTION_2
0x4000049	          0x4889d6	                            mov rsi, rdx	        92	m2-lang.c	FUNCTION_2	CALL_1
0x400004c	      0xbf00000000	                              mov edi, 0	        92	m2-lang.c	FUNCTION_2	CALL_1
0x4000051	          0x4889d3	                            mov rbx, rdx	        91	m2-lang.c	FUNCTION_2
0x4000054	      0xe800000000	                          call 0x4000059	        92	m2-lang.c	FUNCTION_2	CALL_1
0x4000059	    0x488b05000000	            mov rax, qword [0x04000060] 	        93	m2-lang.c	FUNCTION_2	CALL_2
0x4000060	          0x4c89e6	                            mov rsi, r12	        93	m2-lang.c	FUNCTION_2	CALL_2
0x4000063	            0x89ef	                            mov edi, ebp	        93	m2-lang.c	FUNCTION_2	CALL_2
0x4000065	          0x4889da	                            mov rdx, rbx	        93	m2-lang.c	FUNCTION_2	CALL_2
0x4000068	      0xb927000000	                           mov ecx, 0x27	        93	m2-lang.c	FUNCTION_2	CALL_2
0x400006d	          0xff5060	                 call qword [rax + 0x60]	        93	m2-lang.c	FUNCTION_2	CALL_2
0x4000070	          0x4889de	                            mov rsi, rbx	        94	m2-lang.c	FUNCTION_2	CALL_3
0x4000073	      0xbf00000000	                              mov edi, 0	        94	m2-lang.c	FUNCTION_2	CALL_3
0x4000078	              0x5b	                                 pop rbx	        95	m2-lang.c	FUNCTION_2
0x4000079	              0x5d	                                 pop rbp	        95	m2-lang.c	FUNCTION_2
0x400007a	            0x415c	                                 pop r12	        95	m2-lang.c	FUNCTION_2
0x400007c	      0xe900000000	                           jmp 0x4000081	        94	m2-lang.c	FUNCTION_2	CALL_3
evaluate_subexp_modula2	ELSE,4:WHILE,0:FOR,0:CALL,45:functions,0:SWITCH,1:DO,0:IF,10	200
0x4000450	            0x4157	                                push r15	       180	m2-lang.c	FUNCTION_4
0x4000452	            0x4156	                                push r14	       180	m2-lang.c	FUNCTION_4
0x4000454	            0x4155	                                push r13	       180	m2-lang.c	FUNCTION_4
0x4000456	            0x4154	                                push r12	       180	m2-lang.c	FUNCTION_4
0x4000458	          0x4989f5	                            mov r13, rsi	       180	m2-lang.c	FUNCTION_4
0x400045b	              0x55	                                push rbp	       180	m2-lang.c	FUNCTION_4
0x400045c	              0x53	                                push rbx	       180	m2-lang.c	FUNCTION_4
0x400045d	          0x4889d3	                            mov rbx, rdx	       180	m2-lang.c	FUNCTION_4
0x4000460	          0x4889fd	                            mov rbp, rdi	       180	m2-lang.c	FUNCTION_4
0x4000463	          0x4189cc	                           mov r12d, ecx	       180	m2-lang.c	FUNCTION_4
0x4000466	        0x4883ec28	                           sub rsp, 0x28	       180	m2-lang.c	FUNCTION_4
0x400046a	    0x64488b042528	                mov rax, qword fs:[0x28]	       180	m2-lang.c	FUNCTION_4
0x4000473	      0x4889442418	             mov qword [rsp + 0x18], rax	       180	m2-lang.c	FUNCTION_4
0x4000478	            0x31c0	                            xor eax, eax	       180	m2-lang.c	FUNCTION_4
0x400047a	          0x486302	                 movsxd rax, dword [rdx]	       181	m2-lang.c	FUNCTION_4
0x400047d	          0x4889c2	                            mov rdx, rax	       181	m2-lang.c	FUNCTION_4
0x4000480	        0x4883c001	                              add rax, 1	       181	m2-lang.c	FUNCTION_4
0x4000484	        0x48c1e004	                              shl rax, 4	       181	m2-lang.c	FUNCTION_4
0x4000488	        0x8b440608	         mov eax, dword [rsi + rax + 8] 	       186	m2-lang.c	FUNCTION_4	SWITCH_1
0x400048c	          0x83f817	                           cmp eax, 0x17	       186	m2-lang.c	FUNCTION_4	SWITCH_1
0x400048f	     0xf84e3000000	                            je 0x4000578	       186	m2-lang.c	FUNCTION_4	SWITCH_1
0x4000495	          0x83f84b	                           cmp eax, 0x4b	       186	m2-lang.c	FUNCTION_4	SWITCH_1
0x4000498	            0x7436	                            je 0x40004d0	       186	m2-lang.c	FUNCTION_4	SWITCH_1
0x400049a	          0x4489e1	                           mov ecx, r12d	       265	m2-lang.c	FUNCTION_4	SWITCH_1	CALL_43
0x400049d	          0x4889da	                            mov rdx, rbx	       265	m2-lang.c	FUNCTION_4	SWITCH_1	CALL_43
0x40004a0	          0x4c89ee	                            mov rsi, r13	       265	m2-lang.c	FUNCTION_4	SWITCH_1	CALL_43
0x40004a3	          0x4889ef	                            mov rdi, rbp	       265	m2-lang.c	FUNCTION_4	SWITCH_1	CALL_43
0x40004a6	      0xe800000000	                          call 0x40004ab	       265	m2-lang.c	FUNCTION_4	SWITCH_1	CALL_43
0x40004ab	      0x488b4c2418	            mov rcx, qword [rsp + 0x18] 	       270	m2-lang.c	FUNCTION_4
0x40004b0	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       270	m2-lang.c	FUNCTION_4
0x40004b9	     0xf856d020000	                           jne 0x400072c	       270	m2-lang.c	FUNCTION_4
0x40004bf	        0x4883c428	                           add rsp, 0x28	       270	m2-lang.c	FUNCTION_4
0x40004c3	              0x5b	                                 pop rbx	       270	m2-lang.c	FUNCTION_4
0x40004c4	              0x5d	                                 pop rbp	       270	m2-lang.c	FUNCTION_4
0x40004c5	            0x415c	                                 pop r12	       270	m2-lang.c	FUNCTION_4
0x40004c7	            0x415d	                                 pop r13	       270	m2-lang.c	FUNCTION_4
0x40004c9	            0x415e	                                 pop r14	       270	m2-lang.c	FUNCTION_4
0x40004cb	            0x415f	                                 pop r15	       270	m2-lang.c	FUNCTION_4
0x40004cd	              0xc3	                                     ret	       270	m2-lang.c	FUNCTION_4
0x40004ce	            0x6690	                                     nop	       270	m2-lang.c	FUNCTION_4
0x40004d0	          0x83c201	                              add edx, 1	       189	m2-lang.c	FUNCTION_4	SWITCH_1
0x40004d3	          0x4c89ef	                            mov rdi, r13	       190	m2-lang.c	FUNCTION_4	SWITCH_1	CALL_1
0x40004d6	          0x4889de	                            mov rsi, rbx	       190	m2-lang.c	FUNCTION_4	SWITCH_1	CALL_1
0x40004d9	            0x8913	                    mov dword [rbx], edx	       189	m2-lang.c	FUNCTION_4	SWITCH_1
0x40004db	        0x4183ec01	                             sub r12d, 1	       192	m2-lang.c	FUNCTION_4	SWITCH_1	IF_1
0x40004df	            0x89ca	                            mov edx, ecx	       190	m2-lang.c	FUNCTION_4	SWITCH_1	CALL_1
0x40004e1	      0xe800000000	                          call 0x40004e6	       190	m2-lang.c	FUNCTION_4	SWITCH_1	CALL_1
0x40004e6	        0x4183fc01	                             cmp r12d, 1	       192	m2-lang.c	FUNCTION_4	SWITCH_1	IF_1
0x40004ea	          0x4889c7	                            mov rdi, rax	       190	m2-lang.c	FUNCTION_4	SWITCH_1	CALL_1
0x40004ed	            0x76bc	                           jbe 0x40004ab	       192	m2-lang.c	FUNCTION_4	SWITCH_1	IF_1
0x40004ef	      0xe800000000	                          call 0x40004f4	       196	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_1	CALL_2
0x40004f4	          0x4889c7	                            mov rdi, rax	       197	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_1	CALL_4
0x40004f7	          0x4889c3	                            mov rbx, rax	       196	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_1	CALL_2
0x40004fa	      0xe800000000	                          call 0x40004ff	       197	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_1	CALL_4
0x40004ff	          0x4889c7	                            mov rdi, rax	       197	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_1	CALL_4
0x4000502	      0xe800000000	                          call 0x4000507	       197	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_1	CALL_4
0x4000507	          0x4889c7	                            mov rdi, rax	       199	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_1	IF_2	CALL_5
0x400050a	          0x4889c5	                            mov rbp, rax	       197	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_1	CALL_4
0x400050d	      0xe800000000	                          call 0x4000512	       199	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_1	IF_2	CALL_5
0x4000512	            0x89c2	                            mov edx, eax	       199	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_1	IF_2	CALL_5
0x4000514	          0x4889d8	                            mov rax, rbx	       196	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_1	CALL_2
0x4000517	            0x85d2	                           test edx, edx	       199	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_1	IF_2	CALL_5
0x4000519	            0x7490	                            je 0x40004ab	       199	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_1	IF_2	CALL_5
0x400051b	      0x48895c2410	             mov qword [rsp + 0x10], rbx	       201	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_1	IF_2
0x4000520	        0x488b4528	            mov rax, qword [rbp + 0x28] 	       203	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_1	IF_2	CALL_6
0x4000524	      0xbf00000000	                              mov edi, 0	       206	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_1	IF_2	CALL_8
0x4000529	        0x488b4020	            mov rax, qword [rax + 0x20] 	       203	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_1	IF_2	CALL_6
0x400052d	        0x488b6830	            mov rbp, qword [rax + 0x30] 	       203	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_1	IF_2	CALL_6
0x4000531	      0xe800000000	                          call 0x4000536	       206	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_1	IF_2	CALL_8
0x4000536	      0x488d7c2410	                   lea rdi, [rsp + 0x10]	       207	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_1	IF_2
0x400053b	            0x31c9	                            xor ecx, ecx	       207	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_1	IF_2
0x400053d	            0x31f6	                            xor esi, esi	       207	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_1	IF_2
0x400053f	          0x4989c0	                             mov r8, rax	       206	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_1	IF_2	CALL_8
0x4000542	      0xba00000000	                              mov edx, 0	       207	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_1	IF_2
0x4000547	      0xe800000000	                          call 0x400054c	       207	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_1	IF_2
0x400054c	          0x4889c7	                            mov rdi, rax	       209	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_1	IF_2	IF_3	CALL_9
0x400054f	          0x4889c3	                            mov rbx, rax	       207	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_1	IF_2
0x4000552	      0xe800000000	                          call 0x4000557	       209	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_1	IF_2	IF_3	CALL_9
0x4000557	          0x4839c5	                            cmp rbp, rax	       209	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_1	IF_2	IF_3	CALL_9
0x400055a	            0x740e	                            je 0x400056a	       209	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_1	IF_2	IF_3	CALL_9
0x400055c	          0x4889de	                            mov rsi, rbx	       210	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_1	IF_2	CALL_10
0x400055f	          0x4889ef	                            mov rdi, rbp	       210	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_1	IF_2	CALL_10
0x4000562	      0xe800000000	                          call 0x4000567	       210	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_1	IF_2	CALL_10
0x4000567	          0x4889c3	                            mov rbx, rax	       210	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_1	IF_2	CALL_10
0x400056a	          0x4889d8	                            mov rax, rbx	       210	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_1	IF_2	CALL_10
0x400056d	      0xe939ffffff	                           jmp 0x40004ab	       210	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_1	IF_2	CALL_10
0x4000572	    0x660f1f440000	                    nop word [rax + rax]	       210	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_1	IF_2	CALL_10
0x4000578	          0x83c201	                              add edx, 1	       216	m2-lang.c	FUNCTION_4	SWITCH_1
0x400057b	          0x4889de	                            mov rsi, rbx	       217	m2-lang.c	FUNCTION_4	SWITCH_1	CALL_11
0x400057e	          0x4c89ef	                            mov rdi, r13	       217	m2-lang.c	FUNCTION_4	SWITCH_1	CALL_11
0x4000581	            0x8913	                    mov dword [rbx], edx	       216	m2-lang.c	FUNCTION_4	SWITCH_1
0x4000583	            0x89ca	                            mov edx, ecx	       217	m2-lang.c	FUNCTION_4	SWITCH_1	CALL_11
0x4000585	      0xe800000000	                          call 0x400058a	       217	m2-lang.c	FUNCTION_4	SWITCH_1	CALL_11
0x400058a	          0x4489e2	                           mov edx, r12d	       218	m2-lang.c	FUNCTION_4	SWITCH_1	CALL_12
0x400058d	          0x4889de	                            mov rsi, rbx	       218	m2-lang.c	FUNCTION_4	SWITCH_1	CALL_12
0x4000590	          0x4c89ef	                            mov rdi, r13	       218	m2-lang.c	FUNCTION_4	SWITCH_1	CALL_12
0x4000593	          0x4989c6	                            mov r14, rax	       217	m2-lang.c	FUNCTION_4	SWITCH_1	CALL_11
0x4000596	      0xe800000000	                          call 0x400059b	       218	m2-lang.c	FUNCTION_4	SWITCH_1	CALL_12
0x400059b	        0x4183fc01	                             cmp r12d, 1	       219	m2-lang.c	FUNCTION_4	SWITCH_1	IF_4
0x400059f	      0x4889442408	                mov qword [rsp + 8], rax	       218	m2-lang.c	FUNCTION_4	SWITCH_1	CALL_12
0x40005a4	     0xf8496000000	                            je 0x4000640	       219	m2-lang.c	FUNCTION_4	SWITCH_1	IF_4
0x40005aa	          0x4c89f7	                            mov rdi, r14	       225	m2-lang.c	FUNCTION_4	SWITCH_1	CALL_13
0x40005ad	      0xe800000000	                          call 0x40005b2	       225	m2-lang.c	FUNCTION_4	SWITCH_1	CALL_13
0x40005b2	          0x4889c7	                            mov rdi, rax	       226	m2-lang.c	FUNCTION_4	SWITCH_1	CALL_15
0x40005b5	          0x4989c7	                            mov r15, rax	       225	m2-lang.c	FUNCTION_4	SWITCH_1	CALL_13
0x40005b8	      0xe800000000	                          call 0x40005bd	       226	m2-lang.c	FUNCTION_4	SWITCH_1	CALL_15
0x40005bd	          0x4889c7	                            mov rdi, rax	       226	m2-lang.c	FUNCTION_4	SWITCH_1	CALL_15
0x40005c0	      0xe800000000	                          call 0x40005c5	       226	m2-lang.c	FUNCTION_4	SWITCH_1	CALL_15
0x40005c5	          0x4889c7	                            mov rdi, rax	       228	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5	CALL_16
0x40005c8	          0x4989c6	                            mov r14, rax	       226	m2-lang.c	FUNCTION_4	SWITCH_1	CALL_15
0x40005cb	      0xe800000000	                          call 0x40005d0	       228	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5	CALL_16
0x40005d0	            0x85c0	                           test eax, eax	       228	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5	CALL_16
0x40005d2	            0x743c	                            je 0x4000610	       228	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5	CALL_16
0x40005d4	      0x4c897c2410	             mov qword [rsp + 0x10], r15	       230	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5
0x40005d9	        0x498b4628	            mov rax, qword [r14 + 0x28] 	       231	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5	CALL_17
0x40005dd	        0x488b4020	            mov rax, qword [rax + 0x20] 	       231	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5	CALL_17
0x40005e1	        0x4c8b7010	            mov r14, qword [rax + 0x10] 	       231	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5	CALL_17
0x40005e5	          0x4d85f6	                           test r14, r14	       232	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5	IF_6	CALL_18
0x40005e8	            0x740d	                            je 0x40005f7	       232	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5	IF_6	CALL_18
0x40005ea	        0x498b4628	            mov rax, qword [r14 + 0x28] 	       232	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5	IF_6	CALL_18
0x40005ee	          0x803801	                       cmp byte [rax], 1	       232	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5	IF_6	CALL_18
0x40005f1	     0xf84a9000000	                            je 0x40006a0	       232	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5	IF_6	CALL_18
0x40005f7	      0xbf00000000	                              mov edi, 0	       234	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5	IF_6	CALL_20
0x40005fc	      0xe800000000	                          call 0x4000601	       234	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5	IF_6	CALL_20
0x4000601	          0x4889c7	                            mov rdi, rax	       235	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5	IF_6
0x4000604	            0x31c0	                            xor eax, eax	       235	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5	IF_6
0x4000606	      0xe800000000	                          call 0x400060b	       235	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5	IF_6
0x400060b	      0xe98afeffff	                           jmp 0x400049a	       235	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5	IF_6
0x4000610	        0x498b4628	            mov rax, qword [r14 + 0x28] 	       250	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_2	IF_8	CALL_31
0x4000614	          0x803802	                       cmp byte [rax], 2	       250	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_2	IF_8	CALL_31
0x4000617	            0x7447	                            je 0x4000660	       250	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_2	IF_8	CALL_31
0x4000619	        0x488b5808	                mov rbx, qword [rax + 8]	       252	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_2	IF_8	IF_9	CALL_32
0x400061d	          0x4885db	                           test rbx, rbx	       252	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_2	IF_8	IF_9	CALL_32
0x4000620	            0x7466	                            je 0x4000688	       252	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_2	IF_8	IF_9	CALL_32
0x4000622	      0xbf00000000	                              mov edi, 0	       253	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_2	IF_8	IF_9	CALL_34
0x4000627	      0xe800000000	                          call 0x400062c	       253	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_2	IF_8	IF_9	CALL_34
0x400062c	          0x4889de	                            mov rsi, rbx	       254	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_2	IF_8	CALL_35
0x400062f	          0x4889c7	                            mov rdi, rax	       254	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_2	IF_8	CALL_35
0x4000632	            0x31c0	                            xor eax, eax	       254	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_2	IF_8	CALL_35
0x4000634	      0xe800000000	                          call 0x4000639	       254	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_2	IF_8	CALL_35
0x4000639	     0xf1f80000000	                         nop dword [rax]	       254	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_2	IF_8	CALL_35
0x4000640	        0x498b7d08	                mov rdi, qword [r13 + 8]	       269	m2-lang.c	FUNCTION_4	CALL_45
0x4000644	      0xe800000000	                          call 0x4000649	       269	m2-lang.c	FUNCTION_4	CALL_45
0x4000649	        0x488b7818	            mov rdi, qword [rax + 0x18] 	       269	m2-lang.c	FUNCTION_4	CALL_45
0x400064d	      0xbe01000000	                              mov esi, 1	       269	m2-lang.c	FUNCTION_4	CALL_45
0x4000652	      0xe800000000	                          call 0x4000657	       269	m2-lang.c	FUNCTION_4	CALL_45
0x4000657	      0xe94ffeffff	                           jmp 0x40004ab	       269	m2-lang.c	FUNCTION_4	CALL_45
0x400065c	         0xf1f4000	                         nop dword [rax]	       269	m2-lang.c	FUNCTION_4	CALL_45
0x4000660	        0x4183fc02	                             cmp r12d, 2	       259	m2-lang.c	FUNCTION_4	SWITCH_1	IF_10
0x4000664	     0xf84a6000000	                            je 0x4000710	       259	m2-lang.c	FUNCTION_4	SWITCH_1	IF_10
0x400066a	      0x488b7c2408	                mov rdi, qword [rsp + 8]	       262	m2-lang.c	FUNCTION_4	SWITCH_1	CALL_42
0x400066f	      0xe800000000	                          call 0x4000674	       262	m2-lang.c	FUNCTION_4	SWITCH_1	CALL_42
0x4000674	          0x4c89ff	                            mov rdi, r15	       262	m2-lang.c	FUNCTION_4	SWITCH_1	CALL_42
0x4000677	          0x4889c6	                            mov rsi, rax	       262	m2-lang.c	FUNCTION_4	SWITCH_1	CALL_42
0x400067a	      0xe800000000	                          call 0x400067f	       262	m2-lang.c	FUNCTION_4	SWITCH_1	CALL_42
0x400067f	      0xe927feffff	                           jmp 0x40004ab	       262	m2-lang.c	FUNCTION_4	SWITCH_1	CALL_42
0x4000684	         0xf1f4000	                         nop dword [rax]	       262	m2-lang.c	FUNCTION_4	SWITCH_1	CALL_42
0x4000688	      0xbf00000000	                              mov edi, 0	       256	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_2	IF_8	CALL_37
0x400068d	      0xe800000000	                          call 0x4000692	       256	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_2	IF_8	CALL_37
0x4000692	          0x4889c7	                            mov rdi, rax	       256	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_2	IF_8	CALL_37
0x4000695	            0x31c0	                            xor eax, eax	       256	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_2	IF_8	CALL_37
0x4000697	      0xe800000000	                          call 0x400069c	       256	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_2	IF_8	CALL_37
0x400069c	         0xf1f4000	                         nop dword [rax]	       256	m2-lang.c	FUNCTION_4	SWITCH_1	ELSE_2	IF_8	CALL_37
0x40006a0	      0xbf00000000	                              mov edi, 0	       240	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5	CALL_23
0x40006a5	      0xe800000000	                          call 0x40006aa	       240	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5	CALL_23
0x40006aa	      0x488d7c2410	                   lea rdi, [rsp + 0x10]	       241	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5
0x40006af	            0x31c9	                            xor ecx, ecx	       241	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5
0x40006b1	            0x31f6	                            xor esi, esi	       241	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5
0x40006b3	          0x4989c0	                             mov r8, rax	       240	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5	CALL_23
0x40006b6	      0xba00000000	                              mov edx, 0	       241	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5
0x40006bb	      0xe800000000	                          call 0x40006c0	       241	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5
0x40006c0	          0x4889c7	                            mov rdi, rax	       243	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5	IF_7	CALL_24
0x40006c3	          0x4889c3	                            mov rbx, rax	       241	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5
0x40006c6	      0xe800000000	                          call 0x40006cb	       243	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5	IF_7	CALL_24
0x40006cb	          0x4939c6	                            cmp r14, rax	       243	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5	IF_7	CALL_24
0x40006ce	            0x740e	                            je 0x40006de	       243	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5	IF_7	CALL_24
0x40006d0	          0x4889de	                            mov rsi, rbx	       244	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5	CALL_25
0x40006d3	          0x4c89f7	                            mov rdi, r14	       244	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5	CALL_25
0x40006d6	      0xe800000000	                          call 0x40006db	       244	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5	CALL_25
0x40006db	          0x4889c3	                            mov rbx, rax	       244	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5	CALL_25
0x40006de	          0x4889df	                            mov rdi, rbx	       246	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5	CALL_27
0x40006e1	      0xe800000000	                          call 0x40006e6	       246	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5	CALL_27
0x40006e6	          0x4889c7	                            mov rdi, rax	       246	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5	CALL_27
0x40006e9	      0xe800000000	                          call 0x40006ee	       246	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5	CALL_27
0x40006ee	      0x488b7c2408	                mov rdi, qword [rsp + 8]	       247	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5	CALL_30
0x40006f3	      0xe800000000	                          call 0x40006f8	       247	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5	CALL_30
0x40006f8	          0x4889df	                            mov rdi, rbx	       247	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5	CALL_30
0x40006fb	          0x4889c6	                            mov rsi, rax	       247	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5	CALL_30
0x40006fe	      0xe800000000	                          call 0x4000703	       247	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5	CALL_30
0x4000703	          0x4889c7	                            mov rdi, rax	       247	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5	CALL_30
0x4000706	      0xe800000000	                          call 0x400070b	       247	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5	CALL_30
0x400070b	      0xe99bfdffff	                           jmp 0x40004ab	       247	m2-lang.c	FUNCTION_4	SWITCH_1	IF_5	CALL_30
0x4000710	          0x4c89ff	                            mov rdi, r15	       260	m2-lang.c	FUNCTION_4	SWITCH_1	CALL_40
0x4000713	      0xe800000000	                          call 0x4000718	       260	m2-lang.c	FUNCTION_4	SWITCH_1	CALL_40
0x4000718	        0x498b5628	            mov rdx, qword [r14 + 0x28] 	       260	m2-lang.c	FUNCTION_4	SWITCH_1	CALL_40
0x400071c	            0x8b30	                    mov esi, dword [rax]	       260	m2-lang.c	FUNCTION_4	SWITCH_1	CALL_40
0x400071e	        0x488b7a18	            mov rdi, qword [rdx + 0x18] 	       260	m2-lang.c	FUNCTION_4	SWITCH_1	CALL_40
0x4000722	      0xe800000000	                          call 0x4000727	       260	m2-lang.c	FUNCTION_4	SWITCH_1	CALL_40
0x4000727	      0xe97ffdffff	                           jmp 0x40004ab	       260	m2-lang.c	FUNCTION_4	SWITCH_1	CALL_40
0x400072c	      0xe800000000	                          call 0x4000731	       270	m2-lang.c	FUNCTION_4
m2_emit_char	ELSE,1:WHILE,0:FOR,0:CALL,11:functions,0:SWITCH,1:DO,0:IF,2	86
0x4000090	          0x4989d0	                             mov r8, rdx	        42	m2-lang.c	FUNCTION_1
0x4000093	        0x400fb6d7	                          movzx edx, dil	        44	m2-lang.c	FUNCTION_1
0x4000097	              0x53	                                push rbx	        42	m2-lang.c	FUNCTION_1
0x4000098	          0x8d4281	                   lea eax, [rdx - 0x7f]	        46	m2-lang.c	FUNCTION_1	IF_1	CALL_1
0x400009b	        0x4883ec10	                           sub rsp, 0x10	        42	m2-lang.c	FUNCTION_1
0x400009f	          0x83f820	                           cmp eax, 0x20	        46	m2-lang.c	FUNCTION_1	IF_1	CALL_1
0x40000a2	            0x7614	                           jbe 0x40000b8	        46	m2-lang.c	FUNCTION_1	IF_1	CALL_1
0x40000a4	          0x83fa1f	                           cmp edx, 0x1f	        46	m2-lang.c	FUNCTION_1	IF_1	CALL_1
0x40000a7	            0x7e0f	                           jle 0x40000b8	        46	m2-lang.c	FUNCTION_1	IF_1	CALL_1
0x40000a9	    0x8b0500000000	            mov eax, dword [0x040000af] 	        46	m2-lang.c	FUNCTION_1	IF_1	CALL_1
0x40000af	            0x85c0	                           test eax, eax	        46	m2-lang.c	FUNCTION_1	IF_1	CALL_1
0x40000b1	            0x741d	                            je 0x40000d0	        46	m2-lang.c	FUNCTION_1	IF_1	CALL_1
0x40000b3	          0x83fa7f	                           cmp edx, 0x7f	        46	m2-lang.c	FUNCTION_1	IF_1	CALL_1
0x40000b6	            0x7e18	                           jle 0x40000d0	        46	m2-lang.c	FUNCTION_1	IF_1	CALL_1
0x40000b8	          0x8d42f9	                      lea eax, [rdx - 7]	        56	m2-lang.c	FUNCTION_1	ELSE_1	SWITCH_1
0x40000bb	          0x83f814	                           cmp eax, 0x14	        56	m2-lang.c	FUNCTION_1	ELSE_1	SWITCH_1
0x40000be	     0xf87e4000000	                            ja 0x40001a8	        56	m2-lang.c	FUNCTION_1	ELSE_1	SWITCH_1
0x40000c4	    0xff24c5000000	                       jmp qword [rax*8]	        56	m2-lang.c	FUNCTION_1	ELSE_1	SWITCH_1
0x40000cb	       0xf1f440000	                   nop dword [rax + rax]	        56	m2-lang.c	FUNCTION_1	ELSE_1	SWITCH_1
0x40000d0	          0x83fa5c	                           cmp edx, 0x5c	        48	m2-lang.c	FUNCTION_1	IF_1	IF_2
0x40000d3	          0x4c89c3	                             mov rbx, r8	        48	m2-lang.c	FUNCTION_1	IF_1	IF_2
0x40000d6	     0xf84e4000000	                            je 0x40001c0	        48	m2-lang.c	FUNCTION_1	IF_1	IF_2
0x40000dc	            0x39ca	                            cmp edx, ecx	        48	m2-lang.c	FUNCTION_1	IF_1	IF_2
0x40000de	     0xf84dc000000	                            je 0x40001c0	        48	m2-lang.c	FUNCTION_1	IF_1	IF_2
0x40000e4	        0x4883c410	                           add rsp, 0x10	        84	m2-lang.c	FUNCTION_1
0x40000e8	          0x4889df	                            mov rdi, rbx	        52	m2-lang.c	FUNCTION_1	IF_1	CALL_3
0x40000eb	      0xbe00000000	                              mov esi, 0	        52	m2-lang.c	FUNCTION_1	IF_1	CALL_3
0x40000f0	              0x5b	                                 pop rbx	        84	m2-lang.c	FUNCTION_1
0x40000f1	            0x31c0	                            xor eax, eax	        52	m2-lang.c	FUNCTION_1	IF_1	CALL_3
0x40000f3	      0xe900000000	                           jmp 0x40000f8	        52	m2-lang.c	FUNCTION_1	IF_1	CALL_3
0x40000f8	     0xf1f84000000	                   nop dword [rax + rax]	        52	m2-lang.c	FUNCTION_1	IF_1	CALL_3
0x4000100	        0x4883c410	                           add rsp, 0x10	        84	m2-lang.c	FUNCTION_1
0x4000104	          0x4c89c6	                             mov rsi, r8	        74	m2-lang.c	FUNCTION_1	ELSE_1	SWITCH_1	CALL_9
0x4000107	      0xbf00000000	                              mov edi, 0	        74	m2-lang.c	FUNCTION_1	ELSE_1	SWITCH_1	CALL_9
0x400010c	              0x5b	                                 pop rbx	        84	m2-lang.c	FUNCTION_1
0x400010d	      0xe900000000	                           jmp 0x4000112	        74	m2-lang.c	FUNCTION_1	ELSE_1	SWITCH_1	CALL_9
0x4000112	    0x660f1f440000	                    nop word [rax + rax]	        74	m2-lang.c	FUNCTION_1	ELSE_1	SWITCH_1	CALL_9
0x4000118	        0x4883c410	                           add rsp, 0x10	        84	m2-lang.c	FUNCTION_1
0x400011c	          0x4c89c6	                             mov rsi, r8	        77	m2-lang.c	FUNCTION_1	ELSE_1	SWITCH_1	CALL_10
0x400011f	      0xbf00000000	                              mov edi, 0	        77	m2-lang.c	FUNCTION_1	ELSE_1	SWITCH_1	CALL_10
0x4000124	              0x5b	                                 pop rbx	        84	m2-lang.c	FUNCTION_1
0x4000125	      0xe900000000	                           jmp 0x400012a	        77	m2-lang.c	FUNCTION_1	ELSE_1	SWITCH_1	CALL_10
0x400012a	    0x660f1f440000	                    nop word [rax + rax]	        77	m2-lang.c	FUNCTION_1	ELSE_1	SWITCH_1	CALL_10
0x4000130	        0x4883c410	                           add rsp, 0x10	        84	m2-lang.c	FUNCTION_1
0x4000134	          0x4c89c6	                             mov rsi, r8	        62	m2-lang.c	FUNCTION_1	ELSE_1	SWITCH_1	CALL_5
0x4000137	      0xbf00000000	                              mov edi, 0	        62	m2-lang.c	FUNCTION_1	ELSE_1	SWITCH_1	CALL_5
0x400013c	              0x5b	                                 pop rbx	        84	m2-lang.c	FUNCTION_1
0x400013d	      0xe900000000	                           jmp 0x4000142	        62	m2-lang.c	FUNCTION_1	ELSE_1	SWITCH_1	CALL_5
0x4000142	    0x660f1f440000	                    nop word [rax + rax]	        62	m2-lang.c	FUNCTION_1	ELSE_1	SWITCH_1	CALL_5
0x4000148	        0x4883c410	                           add rsp, 0x10	        84	m2-lang.c	FUNCTION_1
0x400014c	          0x4c89c6	                             mov rsi, r8	        65	m2-lang.c	FUNCTION_1	ELSE_1	SWITCH_1	CALL_6
0x400014f	      0xbf00000000	                              mov edi, 0	        65	m2-lang.c	FUNCTION_1	ELSE_1	SWITCH_1	CALL_6
0x4000154	              0x5b	                                 pop rbx	        84	m2-lang.c	FUNCTION_1
0x4000155	      0xe900000000	                           jmp 0x400015a	        65	m2-lang.c	FUNCTION_1	ELSE_1	SWITCH_1	CALL_6
0x400015a	    0x660f1f440000	                    nop word [rax + rax]	        65	m2-lang.c	FUNCTION_1	ELSE_1	SWITCH_1	CALL_6
0x4000160	        0x4883c410	                           add rsp, 0x10	        84	m2-lang.c	FUNCTION_1
0x4000164	          0x4c89c6	                             mov rsi, r8	        59	m2-lang.c	FUNCTION_1	ELSE_1	SWITCH_1	CALL_4
0x4000167	      0xbf00000000	                              mov edi, 0	        59	m2-lang.c	FUNCTION_1	ELSE_1	SWITCH_1	CALL_4
0x400016c	              0x5b	                                 pop rbx	        84	m2-lang.c	FUNCTION_1
0x400016d	      0xe900000000	                           jmp 0x4000172	        59	m2-lang.c	FUNCTION_1	ELSE_1	SWITCH_1	CALL_4
0x4000172	    0x660f1f440000	                    nop word [rax + rax]	        59	m2-lang.c	FUNCTION_1	ELSE_1	SWITCH_1	CALL_4
0x4000178	        0x4883c410	                           add rsp, 0x10	        84	m2-lang.c	FUNCTION_1
0x400017c	          0x4c89c6	                             mov rsi, r8	        68	m2-lang.c	FUNCTION_1	ELSE_1	SWITCH_1	CALL_7
0x400017f	      0xbf00000000	                              mov edi, 0	        68	m2-lang.c	FUNCTION_1	ELSE_1	SWITCH_1	CALL_7
0x4000184	              0x5b	                                 pop rbx	        84	m2-lang.c	FUNCTION_1
0x4000185	      0xe900000000	                           jmp 0x400018a	        68	m2-lang.c	FUNCTION_1	ELSE_1	SWITCH_1	CALL_7
0x400018a	    0x660f1f440000	                    nop word [rax + rax]	        68	m2-lang.c	FUNCTION_1	ELSE_1	SWITCH_1	CALL_7
0x4000190	        0x4883c410	                           add rsp, 0x10	        84	m2-lang.c	FUNCTION_1
0x4000194	          0x4c89c6	                             mov rsi, r8	        71	m2-lang.c	FUNCTION_1	ELSE_1	SWITCH_1	CALL_8
0x4000197	      0xbf00000000	                              mov edi, 0	        71	m2-lang.c	FUNCTION_1	ELSE_1	SWITCH_1	CALL_8
0x400019c	              0x5b	                                 pop rbx	        84	m2-lang.c	FUNCTION_1
0x400019d	      0xe900000000	                           jmp 0x40001a2	        71	m2-lang.c	FUNCTION_1	ELSE_1	SWITCH_1	CALL_8
0x40001a2	    0x660f1f440000	                    nop word [rax + rax]	        71	m2-lang.c	FUNCTION_1	ELSE_1	SWITCH_1	CALL_8
0x40001a8	        0x4883c410	                           add rsp, 0x10	        84	m2-lang.c	FUNCTION_1
0x40001ac	      0xbe00000000	                              mov esi, 0	        80	m2-lang.c	FUNCTION_1	ELSE_1	SWITCH_1	CALL_11
0x40001b1	          0x4c89c7	                             mov rdi, r8	        80	m2-lang.c	FUNCTION_1	ELSE_1	SWITCH_1	CALL_11
0x40001b4	              0x5b	                                 pop rbx	        84	m2-lang.c	FUNCTION_1
0x40001b5	            0x31c0	                            xor eax, eax	        80	m2-lang.c	FUNCTION_1	ELSE_1	SWITCH_1	CALL_11
0x40001b7	      0xe900000000	                           jmp 0x40001bc	        80	m2-lang.c	FUNCTION_1	ELSE_1	SWITCH_1	CALL_11
0x40001bc	         0xf1f4000	                         nop dword [rax]	        80	m2-lang.c	FUNCTION_1	ELSE_1	SWITCH_1	CALL_11
0x40001c0	          0x4889de	                            mov rsi, rbx	        50	m2-lang.c	FUNCTION_1	IF_1	IF_2	CALL_2
0x40001c3	      0xbf00000000	                              mov edi, 0	        50	m2-lang.c	FUNCTION_1	IF_1	IF_2	CALL_2
0x40001c8	        0x8954240c	              mov dword [rsp + 0xc], edx	        50	m2-lang.c	FUNCTION_1	IF_1	IF_2	CALL_2
0x40001cc	      0xe800000000	                          call 0x40001d1	        50	m2-lang.c	FUNCTION_1	IF_1	IF_2	CALL_2
0x40001d1	        0x8b54240c	              mov edx, dword [rsp + 0xc]	        50	m2-lang.c	FUNCTION_1	IF_1	IF_2	CALL_2
0x40001d5	      0xe90affffff	                           jmp 0x40000e4	        50	m2-lang.c	FUNCTION_1	IF_1	IF_2	CALL_2
_initialize_m2_language	ELSE,0:WHILE,0:FOR,0:CALL,1:functions,0:SWITCH,0:DO,0:IF,0	6
0x4000a10	        0x4883ec08	                              sub rsp, 8	       441	m2-lang.c	FUNCTION_8
0x4000a14	      0xbf00000000	                              mov edi, 0	       442	m2-lang.c	FUNCTION_8	CALL_1
0x4000a19	      0xe800000000	                          call 0x4000a1e	       442	m2-lang.c	FUNCTION_8	CALL_1
0x4000a1e	    0x488905000000	            mov qword [0x04000a25], rax 	       442	m2-lang.c	FUNCTION_8	CALL_1
0x4000a25	        0x4883c408	                              add rsp, 8	       443	m2-lang.c	FUNCTION_8
0x4000a29	              0xc3	                                     ret	       443	m2-lang.c	FUNCTION_8
m2_language_arch_info	ELSE,0:WHILE,0:FOR,0:CALL,2:functions,0:SWITCH,0:DO,0:IF,0	84
0x40008c0	            0x4154	                                push r12	       323	m2-lang.c	FUNCTION_5
0x40008c2	              0x55	                                push rbp	       323	m2-lang.c	FUNCTION_5
0x40008c3	          0x4989fc	                            mov r12, rdi	       323	m2-lang.c	FUNCTION_5
0x40008c6	              0x53	                                push rbx	       323	m2-lang.c	FUNCTION_5
0x40008c7	          0x4889f3	                            mov rbx, rsi	       323	m2-lang.c	FUNCTION_5
0x40008ca	        0x4883ec10	                           sub rsp, 0x10	       323	m2-lang.c	FUNCTION_5
0x40008ce	    0x488b35000000	            mov rsi, qword [0x040008d5] 	       433	m2-lang.c	FUNCTION_7	CALL_1
0x40008d5	      0xe800000000	                          call 0x40008da	       433	m2-lang.c	FUNCTION_7	CALL_1
0x40008da	          0x4889c5	                            mov rbp, rax	       433	m2-lang.c	FUNCTION_7	CALL_1
0x40008dd	          0x488b00	                    mov rax, qword [rax]	       326	m2-lang.c	FUNCTION_5
0x40008e0	          0x4c89e7	                            mov rdi, r12	       328	m2-lang.c	FUNCTION_5	CALL_2
0x40008e3	        0x48894310	             mov qword [rbx + 0x10], rax	       326	m2-lang.c	FUNCTION_5
0x40008e7	      0xe800000000	                          call 0x40008ec	       328	m2-lang.c	FUNCTION_5	CALL_2
0x40008ec	        0x488b7820	            mov rdi, qword [rax + 0x20] 	        44	gdb_obstack.h	FUNCTION_10
0x40008f0	        0x488b5018	            mov rdx, qword [rax + 0x18] 	        44	gdb_obstack.h	FUNCTION_10
0x40008f4	          0x4889f9	                            mov rcx, rdi	        44	gdb_obstack.h	FUNCTION_10
0x40008f7	          0x4829d1	                            sub rcx, rdx	        44	gdb_obstack.h	FUNCTION_10
0x40008fa	        0x4883f92f	                           cmp rcx, 0x2f	        44	gdb_obstack.h	FUNCTION_10
0x40008fe	     0xf86c4000000	                           jbe 0x40009c8	        44	gdb_obstack.h	FUNCTION_10
0x4000904	        0x488b7010	            mov rsi, qword [rax + 0x10] 	        44	gdb_obstack.h	FUNCTION_10
0x4000908	        0x4883c230	                           add rdx, 0x30	        44	gdb_obstack.h	FUNCTION_10
0x400090c	        0x48895018	             mov qword [rax + 0x18], rdx	        44	gdb_obstack.h	FUNCTION_10
0x4000910	          0x4839f2	                            cmp rdx, rsi	        44	gdb_obstack.h	FUNCTION_10
0x4000913	     0xf84d7000000	                            je 0x40009f0	        44	gdb_obstack.h	FUNCTION_10
0x4000919	        0x488b4830	            mov rcx, qword [rax + 0x30] 	        44	gdb_obstack.h	FUNCTION_10
0x400091d	          0x4989f9	                             mov r9, rdi	        44	gdb_obstack.h	FUNCTION_10
0x4000920	          0x4801ca	                            add rdx, rcx	        44	gdb_obstack.h	FUNCTION_10
0x4000923	          0x48f7d1	                                 not rcx	        44	gdb_obstack.h	FUNCTION_10
0x4000926	          0x4821ca	                            and rdx, rcx	        44	gdb_obstack.h	FUNCTION_10
0x4000929	        0x488b4808	                mov rcx, qword [rax + 8]	        44	gdb_obstack.h	FUNCTION_10
0x400092d	          0x4989d0	                             mov r8, rdx	        44	gdb_obstack.h	FUNCTION_10
0x4000930	        0x48895018	             mov qword [rax + 0x18], rdx	        44	gdb_obstack.h	FUNCTION_10
0x4000934	          0x4929c8	                             sub r8, rcx	        44	gdb_obstack.h	FUNCTION_10
0x4000937	          0x4929c9	                             sub r9, rcx	        44	gdb_obstack.h	FUNCTION_10
0x400093a	          0x4d39c8	                              cmp r8, r9	        44	gdb_obstack.h	FUNCTION_10
0x400093d	            0x7607	                           jbe 0x4000946	        44	gdb_obstack.h	FUNCTION_10
0x400093f	        0x48897818	             mov qword [rax + 0x18], rdi	        44	gdb_obstack.h	FUNCTION_10
0x4000943	          0x4889fa	                            mov rdx, rdi	        44	gdb_obstack.h	FUNCTION_10
0x4000946	        0x488d7e08	                      lea rdi, [rsi + 8]	        90	string3.h	FUNCTION_20	CALL_6
0x400094a	          0x4889f1	                            mov rcx, rsi	        90	string3.h	FUNCTION_20	CALL_6
0x400094d	        0x48895010	             mov qword [rax + 0x10], rdx	        44	gdb_obstack.h	FUNCTION_10
0x4000951	            0x31c0	                            xor eax, eax	        90	string3.h	FUNCTION_20	CALL_6
0x4000953	    0x48c706000000	                      mov qword [rsi], 0	        90	string3.h	FUNCTION_20	CALL_6
0x400095a	    0x48c746280000	               mov qword [rsi + 0x28], 0	        90	string3.h	FUNCTION_20	CALL_6
0x4000962	        0x4883e7f8	             and rdi, 0xfffffffffffffff8	        90	string3.h	FUNCTION_20	CALL_6
0x4000966	          0x4829f9	                            sub rcx, rdi	        90	string3.h	FUNCTION_20	CALL_6
0x4000969	          0x83c130	                           add ecx, 0x30	        90	string3.h	FUNCTION_20	CALL_6
0x400096c	          0xc1e903	                              shr ecx, 3	        90	string3.h	FUNCTION_20	CALL_6
0x400096f	          0xf348ab	              rep stosq qword [rdi], rax	        90	string3.h	FUNCTION_20	CALL_6
0x4000972	          0x488933	                    mov qword [rbx], rsi	       329	m2-lang.c	FUNCTION_5
0x4000975	        0x488b4500	                    mov rax, qword [rbp]	       332	m2-lang.c	FUNCTION_5
0x4000979	          0x488906	                    mov qword [rsi], rax	       332	m2-lang.c	FUNCTION_5
0x400097c	        0x488b5508	                mov rdx, qword [rbp + 8]	       334	m2-lang.c	FUNCTION_5
0x4000980	          0x488b03	                    mov rax, qword [rbx]	       333	m2-lang.c	FUNCTION_5
0x4000983	        0x48895008	                mov qword [rax + 8], rdx	       334	m2-lang.c	FUNCTION_5
0x4000987	        0x488b5510	            mov rdx, qword [rbp + 0x10] 	       336	m2-lang.c	FUNCTION_5
0x400098b	          0x488b03	                    mov rax, qword [rbx]	       335	m2-lang.c	FUNCTION_5
0x400098e	        0x48895010	             mov qword [rax + 0x10], rdx	       336	m2-lang.c	FUNCTION_5
0x4000992	        0x488b5518	            mov rdx, qword [rbp + 0x18] 	       338	m2-lang.c	FUNCTION_5
0x4000996	          0x488b03	                    mov rax, qword [rbx]	       337	m2-lang.c	FUNCTION_5
0x4000999	        0x48895018	             mov qword [rax + 0x18], rdx	       338	m2-lang.c	FUNCTION_5
0x400099d	        0x488b5520	            mov rdx, qword [rbp + 0x20] 	       340	m2-lang.c	FUNCTION_5
0x40009a1	          0x488b03	                    mov rax, qword [rbx]	       339	m2-lang.c	FUNCTION_5
0x40009a4	        0x48895020	             mov qword [rax + 0x20], rdx	       340	m2-lang.c	FUNCTION_5
0x40009a8	        0x488b4520	            mov rax, qword [rbp + 0x20] 	       343	m2-lang.c	FUNCTION_5
0x40009ac	    0x48c743180000	               mov qword [rbx + 0x18], 0	       342	m2-lang.c	FUNCTION_5
0x40009b4	        0x48894320	             mov qword [rbx + 0x20], rax	       343	m2-lang.c	FUNCTION_5
0x40009b8	        0x4883c410	                           add rsp, 0x10	       344	m2-lang.c	FUNCTION_5
0x40009bc	              0x5b	                                 pop rbx	       344	m2-lang.c	FUNCTION_5
0x40009bd	              0x5d	                                 pop rbp	       344	m2-lang.c	FUNCTION_5
0x40009be	            0x415c	                                 pop r12	       344	m2-lang.c	FUNCTION_5
0x40009c0	              0xc3	                                     ret	       344	m2-lang.c	FUNCTION_5
0x40009c1	     0xf1f80000000	                         nop dword [rax]	       344	m2-lang.c	FUNCTION_5
0x40009c8	          0x4889c7	                            mov rdi, rax	        44	gdb_obstack.h	FUNCTION_10
0x40009cb	      0xbe30000000	                           mov esi, 0x30	        44	gdb_obstack.h	FUNCTION_10
0x40009d0	      0x4889442408	                mov qword [rsp + 8], rax	        44	gdb_obstack.h	FUNCTION_10
0x40009d5	      0xe800000000	                          call 0x40009da	        44	gdb_obstack.h	FUNCTION_10
0x40009da	      0x488b442408	                mov rax, qword [rsp + 8]	        44	gdb_obstack.h	FUNCTION_10
0x40009df	        0x488b5018	            mov rdx, qword [rax + 0x18] 	        44	gdb_obstack.h	FUNCTION_10
0x40009e3	        0x488b7820	            mov rdi, qword [rax + 0x20] 	        44	gdb_obstack.h	FUNCTION_10
0x40009e7	      0xe918ffffff	                           jmp 0x4000904	        44	gdb_obstack.h	FUNCTION_10
0x40009ec	         0xf1f4000	                         nop dword [rax]	        44	gdb_obstack.h	FUNCTION_10
0x40009f0	        0x80485002	                 or byte [rax + 0x50], 2	        44	gdb_obstack.h	FUNCTION_10
0x40009f4	      0xe920ffffff	                           jmp 0x4000919	        44	gdb_obstack.h	FUNCTION_10
