start_multi_file_filter_fn	ELSE,0:FOR,0:WHILE,0:IF,0:CALL,1:functions,0:SWITCH,0:DO,0	18
0x4001c03	              0x55	                                push rbp	       762	convert.c	FUNCTION_21
0x4001c04	          0x4889e5	                            mov rbp, rsp	       762	convert.c	FUNCTION_21
0x4001c07	        0x4883ec20	                           sub rsp, 0x20	       762	convert.c	FUNCTION_21
0x4001c0b	        0x48897de8	             mov qword [rbp - 0x18], rdi	       762	convert.c	FUNCTION_21
0x4001c0f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       770	convert.c	FUNCTION_21
0x4001c13	        0x488945f8	                mov qword [rbp - 8], rax	       770	convert.c	FUNCTION_21
0x4001c17	        0x488b45f8	                mov rax, qword [rbp - 8]	       771	convert.c	FUNCTION_21	CALL_1
0x4001c1b	        0x488d5078	                   lea rdx, [rax + 0x78]	       771	convert.c	FUNCTION_21	CALL_1
0x4001c1f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       771	convert.c	FUNCTION_21	CALL_1
0x4001c23	          0x4989d1	                             mov r9, rdx	       771	convert.c	FUNCTION_21	CALL_1
0x4001c26	    0x41b800000000	                              mov r8d, 0	       771	convert.c	FUNCTION_21	CALL_1
0x4001c2c	      0xb900000000	                              mov ecx, 0	       771	convert.c	FUNCTION_21	CALL_1
0x4001c31	      0xba00000000	                              mov edx, 0	       771	convert.c	FUNCTION_21	CALL_1
0x4001c36	      0xbe00000000	                              mov esi, 0	       771	convert.c	FUNCTION_21	CALL_1
0x4001c3b	          0x4889c7	                            mov rdi, rax	       771	convert.c	FUNCTION_21	CALL_1
0x4001c3e	      0xe800000000	                          call 0x4001c43	       771	convert.c	FUNCTION_21	CALL_1
0x4001c43	              0xc9	                                   leave	       774	convert.c	FUNCTION_21
0x4001c44	              0xc3	                                     ret	       774	convert.c	FUNCTION_21
apply_single_file_filter	ELSE,0:FOR,0:WHILE,0:IF,5:CALL,8:functions,0:SWITCH,0:DO,0	102
0x4001a14	              0x55	                                push rbp	       706	convert.c	FUNCTION_20
0x4001a15	          0x4889e5	                            mov rbp, rsp	       706	convert.c	FUNCTION_20
0x4001a18	    0x4881ecd00000	                           sub rsp, 0xd0	       706	convert.c	FUNCTION_20
0x4001a1f	    0x4889bd58ffff	             mov qword [rbp - 0xa8], rdi	       706	convert.c	FUNCTION_20
0x4001a26	    0x4889b550ffff	             mov qword [rbp - 0xb0], rsi	       706	convert.c	FUNCTION_20
0x4001a2d	    0x48899548ffff	             mov qword [rbp - 0xb8], rdx	       706	convert.c	FUNCTION_20
0x4001a34	    0x898d44ffffff	             mov dword [rbp - 0xbc], ecx	       706	convert.c	FUNCTION_20
0x4001a3a	    0x4c898538ffff	              mov qword [rbp - 0xc8], r8	       706	convert.c	FUNCTION_20
0x4001a41	    0x4c898d30ffff	              mov qword [rbp - 0xd0], r9	       706	convert.c	FUNCTION_20
0x4001a48	    0x64488b042528	                mov rax, qword fs:[0x28]	       706	convert.c	FUNCTION_20
0x4001a51	        0x488945f8	                mov qword [rbp - 8], rax	       706	convert.c	FUNCTION_20
0x4001a55	            0x31c0	                            xor eax, eax	       706	convert.c	FUNCTION_20
0x4001a57	    0xc7856cffffff	               mov dword [rbp - 0x94], 0	       713	convert.c	FUNCTION_20
0x4001a61	    0x48c78570ffff	               mov qword [rbp - 0x90], 0	       714	convert.c	FUNCTION_20
0x4001a6c	    0x48c78578ffff	               mov qword [rbp - 0x88], 0	       714	convert.c	FUNCTION_20
0x4001a77	    0x48c745800000	               mov qword [rbp - 0x80], 0	       714	convert.c	FUNCTION_20
0x4001a7f	        0x488d45c0	                   lea rax, [rbp - 0x40]	       718	convert.c	FUNCTION_20	CALL_1
0x4001a83	      0xba30000000	                           mov edx, 0x30	       718	convert.c	FUNCTION_20	CALL_1
0x4001a88	      0xbe00000000	                              mov esi, 0	       718	convert.c	FUNCTION_20	CALL_1
0x4001a8d	          0x4889c7	                            mov rdi, rax	       718	convert.c	FUNCTION_20	CALL_1
0x4001a90	      0xe800000000	                          call 0x4001a95	       718	convert.c	FUNCTION_20	CALL_1
0x4001a95	    0x48c745c00000	               mov qword [rbp - 0x40], 0	       719	convert.c	FUNCTION_20
0x4001a9d	        0x488d4590	                   lea rax, [rbp - 0x70]	       720	convert.c	FUNCTION_20
0x4001aa1	        0x488945c8	             mov qword [rbp - 0x38], rax	       720	convert.c	FUNCTION_20
0x4001aa5	    0xc745d4ffffff	     mov dword [rbp - 0x2c], 0xffffffff 	       721	convert.c	FUNCTION_20
0x4001aac	    0x488b8550ffff	             mov rax, qword [rbp - 0xb0]	       722	convert.c	FUNCTION_20
0x4001ab3	        0x48894590	             mov qword [rbp - 0x70], rax	       722	convert.c	FUNCTION_20
0x4001ab7	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       723	convert.c	FUNCTION_20
0x4001abe	        0x48894598	             mov qword [rbp - 0x68], rax	       723	convert.c	FUNCTION_20
0x4001ac2	    0x8b8544ffffff	             mov eax, dword [rbp - 0xbc]	       724	convert.c	FUNCTION_20
0x4001ac8	          0x8945a0	             mov dword [rbp - 0x60], eax	       724	convert.c	FUNCTION_20
0x4001acb	    0x488b8530ffff	             mov rax, qword [rbp - 0xd0]	       725	convert.c	FUNCTION_20
0x4001ad2	        0x488945a8	             mov qword [rbp - 0x58], rax	       725	convert.c	FUNCTION_20
0x4001ad6	    0x488b8558ffff	             mov rax, qword [rbp - 0xa8]	       726	convert.c	FUNCTION_20
0x4001add	        0x488945b0	             mov qword [rbp - 0x50], rax	       726	convert.c	FUNCTION_20
0x4001ae1	      0xbf00000000	                              mov edi, 0	       728	convert.c	FUNCTION_20	CALL_2
0x4001ae6	      0xe800000000	                          call 0x4001aeb	       728	convert.c	FUNCTION_20	CALL_2
0x4001aeb	        0x488d45c0	                   lea rax, [rbp - 0x40]	       729	convert.c	FUNCTION_20	IF_1	CALL_3
0x4001aef	          0x4889c7	                            mov rdi, rax	       729	convert.c	FUNCTION_20	IF_1	CALL_3
0x4001af2	      0xe800000000	                          call 0x4001af7	       729	convert.c	FUNCTION_20	IF_1	CALL_3
0x4001af7	            0x85c0	                           test eax, eax	       729	convert.c	FUNCTION_20	IF_1	CALL_3
0x4001af9	            0x740a	                            je 0x4001b05	       729	convert.c	FUNCTION_20	IF_1	CALL_3
0x4001afb	      0xb800000000	                              mov eax, 0	       730	convert.c	FUNCTION_20	IF_1
0x4001b00	      0xe9e8000000	                           jmp 0x4001bed	       730	convert.c	FUNCTION_20	IF_1
0x4001b05	          0x8b4dd4	             mov ecx, dword [rbp - 0x2c]	       732	convert.c	FUNCTION_20	IF_2	CALL_4
0x4001b08	    0x488b9548ffff	             mov rdx, qword [rbp - 0xb8]	       732	convert.c	FUNCTION_20	IF_2	CALL_4
0x4001b0f	    0x488d8570ffff	                   lea rax, [rbp - 0x90]	       732	convert.c	FUNCTION_20	IF_2	CALL_4
0x4001b16	            0x89ce	                            mov esi, ecx	       732	convert.c	FUNCTION_20	IF_2	CALL_4
0x4001b18	          0x4889c7	                            mov rdi, rax	       732	convert.c	FUNCTION_20	IF_2	CALL_4
0x4001b1b	      0xe800000000	                          call 0x4001b20	       732	convert.c	FUNCTION_20	IF_2	CALL_4
0x4001b20	          0x4885c0	                           test rax, rax	       732	convert.c	FUNCTION_20	IF_2	CALL_4
0x4001b23	            0x7924	                           jns 0x4001b49	       732	convert.c	FUNCTION_20	IF_2	CALL_4
0x4001b25	    0x488b8530ffff	             mov rax, qword [rbp - 0xd0]	       733	convert.c	FUNCTION_20	IF_2
0x4001b2c	          0x4889c6	                            mov rsi, rax	       733	convert.c	FUNCTION_20	IF_2
0x4001b2f	      0xbf00000000	                              mov edi, 0	       733	convert.c	FUNCTION_20	IF_2
0x4001b34	      0xb800000000	                              mov eax, 0	       733	convert.c	FUNCTION_20	IF_2
0x4001b39	      0xe800000000	                          call 0x4001b3e	       733	convert.c	FUNCTION_20	IF_2
0x4001b3e	      0xe8fde4ffff	                    call sym.const_error	       733	convert.c	FUNCTION_20	IF_2
0x4001b43	    0x89856cffffff	             mov dword [rbp - 0x94], eax	       733	convert.c	FUNCTION_20	IF_2
0x4001b49	          0x8b45d4	             mov eax, dword [rbp - 0x2c]	       735	convert.c	FUNCTION_20	IF_3	CALL_5
0x4001b4c	            0x89c7	                            mov edi, eax	       735	convert.c	FUNCTION_20	IF_3	CALL_5
0x4001b4e	      0xe800000000	                          call 0x4001b53	       735	convert.c	FUNCTION_20	IF_3	CALL_5
0x4001b53	            0x85c0	                           test eax, eax	       735	convert.c	FUNCTION_20	IF_3	CALL_5
0x4001b55	            0x7424	                            je 0x4001b7b	       735	convert.c	FUNCTION_20	IF_3	CALL_5
0x4001b57	    0x488b8530ffff	             mov rax, qword [rbp - 0xd0]	       736	convert.c	FUNCTION_20	IF_3
0x4001b5e	          0x4889c6	                            mov rsi, rax	       736	convert.c	FUNCTION_20	IF_3
0x4001b61	      0xbf00000000	                              mov edi, 0	       736	convert.c	FUNCTION_20	IF_3
0x4001b66	      0xb800000000	                              mov eax, 0	       736	convert.c	FUNCTION_20	IF_3
0x4001b6b	      0xe800000000	                          call 0x4001b70	       736	convert.c	FUNCTION_20	IF_3
0x4001b70	      0xe8cbe4ffff	                    call sym.const_error	       736	convert.c	FUNCTION_20	IF_3
0x4001b75	    0x89856cffffff	             mov dword [rbp - 0x94], eax	       736	convert.c	FUNCTION_20	IF_3
0x4001b7b	        0x488d45c0	                   lea rax, [rbp - 0x40]	       738	convert.c	FUNCTION_20	IF_4	CALL_6
0x4001b7f	          0x4889c7	                            mov rdi, rax	       738	convert.c	FUNCTION_20	IF_4	CALL_6
0x4001b82	      0xe800000000	                          call 0x4001b87	       738	convert.c	FUNCTION_20	IF_4	CALL_6
0x4001b87	            0x85c0	                           test eax, eax	       738	convert.c	FUNCTION_20	IF_4	CALL_6
0x4001b89	            0x7424	                            je 0x4001baf	       738	convert.c	FUNCTION_20	IF_4	CALL_6
0x4001b8b	    0x488b8530ffff	             mov rax, qword [rbp - 0xd0]	       739	convert.c	FUNCTION_20	IF_4
0x4001b92	          0x4889c6	                            mov rsi, rax	       739	convert.c	FUNCTION_20	IF_4
0x4001b95	      0xbf00000000	                              mov edi, 0	       739	convert.c	FUNCTION_20	IF_4
0x4001b9a	      0xb800000000	                              mov eax, 0	       739	convert.c	FUNCTION_20	IF_4
0x4001b9f	      0xe800000000	                          call 0x4001ba4	       739	convert.c	FUNCTION_20	IF_4
0x4001ba4	      0xe897e4ffff	                    call sym.const_error	       739	convert.c	FUNCTION_20	IF_4
0x4001ba9	    0x89856cffffff	             mov dword [rbp - 0x94], eax	       739	convert.c	FUNCTION_20	IF_4
0x4001baf	    0x83bd6cffffff	               cmp dword [rbp - 0x94], 0	       742	convert.c	FUNCTION_20	IF_5
0x4001bb6	            0x7519	                           jne 0x4001bd1	       742	convert.c	FUNCTION_20	IF_5
0x4001bb8	    0x488d9570ffff	                   lea rdx, [rbp - 0x90]	       743	convert.c	FUNCTION_20	IF_5	CALL_7
0x4001bbf	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       743	convert.c	FUNCTION_20	IF_5	CALL_7
0x4001bc6	          0x4889d6	                            mov rsi, rdx	       743	convert.c	FUNCTION_20	IF_5	CALL_7
0x4001bc9	          0x4889c7	                            mov rdi, rax	       743	convert.c	FUNCTION_20	IF_5	CALL_7
0x4001bcc	      0xe8d0e4ffff	                    call sym.strbuf_swap	       743	convert.c	FUNCTION_20	IF_5	CALL_7
0x4001bd1	    0x488d8570ffff	                   lea rax, [rbp - 0x90]	       745	convert.c	FUNCTION_20	CALL_8
0x4001bd8	          0x4889c7	                            mov rdi, rax	       745	convert.c	FUNCTION_20	CALL_8
0x4001bdb	      0xe800000000	                          call 0x4001be0	       745	convert.c	FUNCTION_20	CALL_8
0x4001be0	    0x83bd6cffffff	               cmp dword [rbp - 0x94], 0	       746	convert.c	FUNCTION_20
0x4001be7	           0xf94c0	                                 sete al	       746	convert.c	FUNCTION_20
0x4001bea	           0xfb6c0	                           movzx eax, al	       746	convert.c	FUNCTION_20
0x4001bed	        0x488b4df8	                mov rcx, qword [rbp - 8]	       747	convert.c	FUNCTION_20
0x4001bf1	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       747	convert.c	FUNCTION_20
0x4001bfa	            0x7405	                            je 0x4001c01	       747	convert.c	FUNCTION_20
0x4001bfc	      0xe800000000	                          call 0x4001c01	       747	convert.c	FUNCTION_20
0x4001c01	              0xc9	                                   leave	       747	convert.c	FUNCTION_20
0x4001c02	              0xc3	                                     ret	       747	convert.c	FUNCTION_20
git_path_check_crlf	ELSE,4:FOR,0:WHILE,0:IF,5:CALL,5:functions,0:SWITCH,0:DO,0	36
0x4002cff	              0x55	                                push rbp	      1236	convert.c	FUNCTION_31
0x4002d00	          0x4889e5	                            mov rbp, rsp	      1236	convert.c	FUNCTION_31
0x4002d03	        0x4883ec20	                           sub rsp, 0x20	      1236	convert.c	FUNCTION_31
0x4002d07	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1236	convert.c	FUNCTION_31
0x4002d0b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1237	convert.c	FUNCTION_31
0x4002d0f	        0x488b4008	                mov rax, qword [rax + 8]	      1237	convert.c	FUNCTION_31
0x4002d13	        0x488945f8	                mov qword [rbp - 8], rax	      1237	convert.c	FUNCTION_31
0x4002d17	    0x48817df80000	                  cmp qword [rbp - 8], 0	      1239	convert.c	FUNCTION_31	IF_1	CALL_1
0x4002d1f	            0x7507	                           jne 0x4002d28	      1239	convert.c	FUNCTION_31	IF_1	CALL_1
0x4002d21	      0xb802000000	                              mov eax, 2	      1240	convert.c	FUNCTION_31	IF_1
0x4002d26	            0xeb55	                           jmp 0x4002d7d	      1240	convert.c	FUNCTION_31	IF_1
0x4002d28	    0x48817df80000	                  cmp qword [rbp - 8], 0	      1241	convert.c	FUNCTION_31	ELSE_1	IF_2	CALL_2
0x4002d30	            0x7507	                           jne 0x4002d39	      1241	convert.c	FUNCTION_31	ELSE_1	IF_2	CALL_2
0x4002d32	      0xb801000000	                              mov eax, 1	      1242	convert.c	FUNCTION_31	ELSE_1	IF_2
0x4002d37	            0xeb44	                           jmp 0x4002d7d	      1242	convert.c	FUNCTION_31	ELSE_1	IF_2
0x4002d39	      0x48837df800	                  cmp qword [rbp - 8], 0	      1243	convert.c	FUNCTION_31	ELSE_2	IF_3	CALL_3
0x4002d3e	            0x7438	                            je 0x4002d78	      1243	convert.c	FUNCTION_31	ELSE_2	IF_3	CALL_3
0x4002d40	        0x488b45f8	                mov rax, qword [rbp - 8]	      1245	convert.c	FUNCTION_31	ELSE_3	IF_4	CALL_4
0x4002d44	      0xbe00000000	                              mov esi, 0	      1245	convert.c	FUNCTION_31	ELSE_3	IF_4	CALL_4
0x4002d49	          0x4889c7	                            mov rdi, rax	      1245	convert.c	FUNCTION_31	ELSE_3	IF_4	CALL_4
0x4002d4c	      0xe800000000	                          call 0x4002d51	      1245	convert.c	FUNCTION_31	ELSE_3	IF_4	CALL_4
0x4002d51	            0x85c0	                           test eax, eax	      1245	convert.c	FUNCTION_31	ELSE_3	IF_4	CALL_4
0x4002d53	            0x7507	                           jne 0x4002d5c	      1245	convert.c	FUNCTION_31	ELSE_3	IF_4	CALL_4
0x4002d55	      0xb803000000	                              mov eax, 3	      1246	convert.c	FUNCTION_31	ELSE_3	IF_4
0x4002d5a	            0xeb21	                           jmp 0x4002d7d	      1246	convert.c	FUNCTION_31	ELSE_3	IF_4
0x4002d5c	        0x488b45f8	                mov rax, qword [rbp - 8]	      1247	convert.c	FUNCTION_31	ELSE_4	IF_5	CALL_5
0x4002d60	      0xbe00000000	                              mov esi, 0	      1247	convert.c	FUNCTION_31	ELSE_4	IF_5	CALL_5
0x4002d65	          0x4889c7	                            mov rdi, rax	      1247	convert.c	FUNCTION_31	ELSE_4	IF_5	CALL_5
0x4002d68	      0xe800000000	                          call 0x4002d6d	      1247	convert.c	FUNCTION_31	ELSE_4	IF_5	CALL_5
0x4002d6d	            0x85c0	                           test eax, eax	      1247	convert.c	FUNCTION_31	ELSE_4	IF_5	CALL_5
0x4002d6f	            0x7507	                           jne 0x4002d78	      1247	convert.c	FUNCTION_31	ELSE_4	IF_5	CALL_5
0x4002d71	      0xb805000000	                              mov eax, 5	      1248	convert.c	FUNCTION_31	ELSE_4	IF_5
0x4002d76	            0xeb05	                           jmp 0x4002d7d	      1248	convert.c	FUNCTION_31	ELSE_4	IF_5
0x4002d78	      0xb800000000	                              mov eax, 0	      1249	convert.c	FUNCTION_31
0x4002d7d	              0xc9	                                   leave	      1250	convert.c	FUNCTION_31
0x4002d7e	              0xc3	                                     ret	      1250	convert.c	FUNCTION_31
strbuf_setlen	ELSE,1:FOR,0:WHILE,0:IF,2:CALL,2:functions,0:SWITCH,0:DO,0	43
0x400016b	              0x55	                                push rbp	       161	strbuf.h	FUNCTION_63
0x400016c	          0x4889e5	                            mov rbp, rsp	       161	strbuf.h	FUNCTION_63
0x400016f	        0x4883ec10	                           sub rsp, 0x10	       161	strbuf.h	FUNCTION_63
0x4000173	        0x48897df8	                mov qword [rbp - 8], rdi	       161	strbuf.h	FUNCTION_63
0x4000177	        0x488975f0	             mov qword [rbp - 0x10], rsi	       161	strbuf.h	FUNCTION_63
0x400017b	        0x488b45f8	                mov rax, qword [rbp - 8]	       162	strbuf.h	FUNCTION_63	IF_1
0x400017f	          0x488b00	                    mov rax, qword [rax]	       162	strbuf.h	FUNCTION_63	IF_1
0x4000182	          0x4885c0	                           test rax, rax	       162	strbuf.h	FUNCTION_63	IF_1
0x4000185	            0x740d	                            je 0x4000194	       162	strbuf.h	FUNCTION_63	IF_1
0x4000187	        0x488b45f8	                mov rax, qword [rbp - 8]	       162	strbuf.h	FUNCTION_63	IF_1
0x400018b	          0x488b00	                    mov rax, qword [rax]	       162	strbuf.h	FUNCTION_63	IF_1
0x400018e	        0x4883e801	                              sub rax, 1	       162	strbuf.h	FUNCTION_63	IF_1
0x4000192	            0xeb05	                           jmp 0x4000199	       162	strbuf.h	FUNCTION_63	IF_1
0x4000194	      0xb800000000	                              mov eax, 0	       162	strbuf.h	FUNCTION_63	IF_1
0x4000199	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	       162	strbuf.h	FUNCTION_63	IF_1
0x400019d	            0x730f	                           jae 0x40001ae	       162	strbuf.h	FUNCTION_63	IF_1
0x400019f	      0xbf00000000	                              mov edi, 0	       163	strbuf.h	FUNCTION_63	CALL_1
0x40001a4	      0xb800000000	                              mov eax, 0	       163	strbuf.h	FUNCTION_63	CALL_1
0x40001a9	      0xe800000000	                          call 0x40001ae	       163	strbuf.h	FUNCTION_63	CALL_1
0x40001ae	        0x488b45f8	                mov rax, qword [rbp - 8]	       164	strbuf.h	FUNCTION_63
0x40001b2	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       164	strbuf.h	FUNCTION_63
0x40001b6	        0x48895008	                mov qword [rax + 8], rdx	       164	strbuf.h	FUNCTION_63
0x40001ba	        0x488b45f8	                mov rax, qword [rbp - 8]	       165	strbuf.h	FUNCTION_63	IF_2
0x40001be	        0x488b4010	            mov rax, qword [rax + 0x10] 	       165	strbuf.h	FUNCTION_63	IF_2
0x40001c2	    0x483d00000000	                              cmp rax, 0	       165	strbuf.h	FUNCTION_63	IF_2
0x40001c8	            0x7414	                            je 0x40001de	       165	strbuf.h	FUNCTION_63	IF_2
0x40001ca	        0x488b45f8	                mov rax, qword [rbp - 8]	       166	strbuf.h	FUNCTION_63	IF_2
0x40001ce	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       166	strbuf.h	FUNCTION_63	IF_2
0x40001d2	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       166	strbuf.h	FUNCTION_63	IF_2
0x40001d6	          0x4801d0	                            add rax, rdx	       166	strbuf.h	FUNCTION_63	IF_2
0x40001d9	          0xc60000	                       mov byte [rax], 0	       166	strbuf.h	FUNCTION_63	IF_2
0x40001dc	            0xeb24	                           jmp 0x4000202	       169	strbuf.h	FUNCTION_63
0x40001de	     0xfb605000000	           movzx eax, byte [0x040001e5] 	       168	strbuf.h	FUNCTION_63	CALL_2
0x40001e5	            0x84c0	                             test al, al	       168	strbuf.h	FUNCTION_63	CALL_2
0x40001e7	            0x7419	                            je 0x4000202	       168	strbuf.h	FUNCTION_63	CALL_2
0x40001e9	      0xb900000000	                              mov ecx, 0	       168	strbuf.h	FUNCTION_63	CALL_2
0x40001ee	      0xbaa8000000	                           mov edx, 0xa8	       168	strbuf.h	FUNCTION_63	CALL_2
0x40001f3	      0xbe00000000	                              mov esi, 0	       168	strbuf.h	FUNCTION_63	CALL_2
0x40001f8	      0xbf00000000	                              mov edi, 0	       168	strbuf.h	FUNCTION_63	CALL_2
0x40001fd	      0xe800000000	                          call 0x4000202	       168	strbuf.h	FUNCTION_63	CALL_2
0x4000202	              0x90	                                     nop	       169	strbuf.h	FUNCTION_63
0x4000203	              0xc9	                                   leave	       169	strbuf.h	FUNCTION_63
0x4000204	              0xc3	                                     ret	       169	strbuf.h	FUNCTION_63
get_stream_filter	ELSE,1:FOR,0:WHILE,0:IF,5:CALL,6:functions,0:SWITCH,0:DO,0	76
0x4004391	              0x55	                                push rbp	      1930	convert.c	FUNCTION_58
0x4004392	          0x4889e5	                            mov rbp, rsp	      1930	convert.c	FUNCTION_58
0x4004395	        0x4883ec50	                           sub rsp, 0x50	      1930	convert.c	FUNCTION_58
0x4004399	        0x48897db8	             mov qword [rbp - 0x48], rdi	      1930	convert.c	FUNCTION_58
0x400439d	        0x488975b0	             mov qword [rbp - 0x50], rsi	      1930	convert.c	FUNCTION_58
0x40043a1	    0x64488b042528	                mov rax, qword fs:[0x28]	      1930	convert.c	FUNCTION_58
0x40043aa	        0x488945f8	                mov qword [rbp - 8], rax	      1930	convert.c	FUNCTION_58
0x40043ae	            0x31c0	                            xor eax, eax	      1930	convert.c	FUNCTION_58
0x40043b0	    0x48c745c80000	               mov qword [rbp - 0x38], 0	      1932	convert.c	FUNCTION_58
0x40043b8	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      1934	convert.c	FUNCTION_58	CALL_1
0x40043bc	        0x488d45d0	                   lea rax, [rbp - 0x30]	      1934	convert.c	FUNCTION_58	CALL_1
0x40043c0	          0x4889d6	                            mov rsi, rdx	      1934	convert.c	FUNCTION_58	CALL_1
0x40043c3	          0x4889c7	                            mov rdi, rax	      1934	convert.c	FUNCTION_58	CALL_1
0x40043c6	      0xe8b7eaffff	                  call sym.convert_attrs	      1934	convert.c	FUNCTION_58	CALL_1
0x40043cb	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1935	convert.c	FUNCTION_58	IF_1
0x40043cf	          0x4885c0	                           test rax, rax	      1935	convert.c	FUNCTION_58	IF_1
0x40043d2	            0x7431	                            je 0x4004405	      1935	convert.c	FUNCTION_58	IF_1
0x40043d4	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1935	convert.c	FUNCTION_58	IF_1
0x40043d8	        0x488b4020	            mov rax, qword [rax + 0x20] 	      1935	convert.c	FUNCTION_58	IF_1
0x40043dc	          0x4885c0	                           test rax, rax	      1935	convert.c	FUNCTION_58	IF_1
0x40043df	            0x751a	                           jne 0x40043fb	      1935	convert.c	FUNCTION_58	IF_1
0x40043e1	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1935	convert.c	FUNCTION_58	IF_1
0x40043e5	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1935	convert.c	FUNCTION_58	IF_1
0x40043e9	          0x4885c0	                           test rax, rax	      1935	convert.c	FUNCTION_58	IF_1
0x40043ec	            0x750d	                           jne 0x40043fb	      1935	convert.c	FUNCTION_58	IF_1
0x40043ee	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1935	convert.c	FUNCTION_58	IF_1
0x40043f2	        0x488b4018	            mov rax, qword [rax + 0x18] 	      1935	convert.c	FUNCTION_58	IF_1
0x40043f6	          0x4885c0	                           test rax, rax	      1935	convert.c	FUNCTION_58	IF_1
0x40043f9	            0x740a	                            je 0x4004405	      1935	convert.c	FUNCTION_58	IF_1
0x40043fb	      0xb800000000	                              mov eax, 0	      1936	convert.c	FUNCTION_58	IF_1
0x4004400	      0xe983000000	                           jmp 0x4004488	      1936	convert.c	FUNCTION_58	IF_1
0x4004405	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1938	convert.c	FUNCTION_58	IF_2
0x4004409	          0x4885c0	                           test rax, rax	      1938	convert.c	FUNCTION_58	IF_2
0x400440c	            0x7407	                            je 0x4004415	      1938	convert.c	FUNCTION_58	IF_2
0x400440e	      0xb800000000	                              mov eax, 0	      1939	convert.c	FUNCTION_58	IF_2
0x4004413	            0xeb73	                           jmp 0x4004488	      1939	convert.c	FUNCTION_58	IF_2
0x4004415	          0x8b45dc	             mov eax, dword [rbp - 0x24]	      1941	convert.c	FUNCTION_58	IF_3
0x4004418	          0x83f805	                              cmp eax, 5	      1941	convert.c	FUNCTION_58	IF_3
0x400441b	            0x7408	                            je 0x4004425	      1941	convert.c	FUNCTION_58	IF_3
0x400441d	          0x8b45dc	             mov eax, dword [rbp - 0x24]	      1941	convert.c	FUNCTION_58	IF_3
0x4004420	          0x83f807	                              cmp eax, 7	      1941	convert.c	FUNCTION_58	IF_3
0x4004423	            0x7507	                           jne 0x400442c	      1941	convert.c	FUNCTION_58	IF_3
0x4004425	      0xb800000000	                              mov eax, 0	      1942	convert.c	FUNCTION_58	IF_3
0x400442a	            0xeb5c	                           jmp 0x4004488	      1942	convert.c	FUNCTION_58	IF_3
0x400442c	          0x8b45e0	             mov eax, dword [rbp - 0x20]	      1944	convert.c	FUNCTION_58	IF_4
0x400442f	            0x85c0	                           test eax, eax	      1944	convert.c	FUNCTION_58	IF_4
0x4004431	            0x7410	                            je 0x4004443	      1944	convert.c	FUNCTION_58	IF_4
0x4004433	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1945	convert.c	FUNCTION_58	CALL_2
0x4004437	          0x4889c7	                            mov rdi, rax	      1945	convert.c	FUNCTION_58	CALL_2
0x400443a	      0xe8d6feffff	                   call sym.ident_filter	      1945	convert.c	FUNCTION_58	CALL_2
0x400443f	        0x488945c8	             mov qword [rbp - 0x38], rax	      1945	convert.c	FUNCTION_58	CALL_2
0x4004443	          0x8b45dc	             mov eax, dword [rbp - 0x24]	      1947	convert.c	FUNCTION_58	IF_5	CALL_3
0x4004446	            0x89c7	                            mov edi, eax	      1947	convert.c	FUNCTION_58	IF_5	CALL_3
0x4004448	      0xe8d3c2ffff	                     call sym.output_eol	      1947	convert.c	FUNCTION_58	IF_5	CALL_3
0x400444d	          0x83f801	                              cmp eax, 1	      1947	convert.c	FUNCTION_58	IF_5	CALL_3
0x4004450	            0x751d	                           jne 0x400446f	      1947	convert.c	FUNCTION_58	IF_5	CALL_3
0x4004452	      0xe8b0f6ffff	              call sym.lf_to_crlf_filter	      1948	convert.c	FUNCTION_58	CALL_5
0x4004457	          0x4889c2	                            mov rdx, rax	      1948	convert.c	FUNCTION_58	CALL_5
0x400445a	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1948	convert.c	FUNCTION_58	CALL_5
0x400445e	          0x4889d6	                            mov rsi, rdx	      1948	convert.c	FUNCTION_58	CALL_5
0x4004461	          0x4889c7	                            mov rdi, rax	      1948	convert.c	FUNCTION_58	CALL_5
0x4004464	      0xe8d8f9ffff	                 call sym.cascade_filter	      1948	convert.c	FUNCTION_58	CALL_5
0x4004469	        0x488945c8	             mov qword [rbp - 0x38], rax	      1948	convert.c	FUNCTION_58	CALL_5
0x400446d	            0xeb15	                           jmp 0x4004484	      1948	convert.c	FUNCTION_58	CALL_5
0x400446f	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1950	convert.c	FUNCTION_58	CALL_6
0x4004473	      0xbe00000000	                              mov esi, 0	      1950	convert.c	FUNCTION_58	CALL_6
0x4004478	          0x4889c7	                            mov rdi, rax	      1950	convert.c	FUNCTION_58	CALL_6
0x400447b	      0xe8c1f9ffff	                 call sym.cascade_filter	      1950	convert.c	FUNCTION_58	CALL_6
0x4004480	        0x488945c8	             mov qword [rbp - 0x38], rax	      1950	convert.c	FUNCTION_58	CALL_6
0x4004484	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1952	convert.c	FUNCTION_58
0x4004488	        0x488b4df8	                mov rcx, qword [rbp - 8]	      1953	convert.c	FUNCTION_58
0x400448c	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      1953	convert.c	FUNCTION_58
0x4004495	            0x7405	                            je 0x400449c	      1953	convert.c	FUNCTION_58
0x4004497	      0xe800000000	                          call 0x400449c	      1953	convert.c	FUNCTION_58
0x400449c	              0xc9	                                   leave	      1953	convert.c	FUNCTION_58
0x400449d	              0xc3	                                     ret	      1953	convert.c	FUNCTION_58
get_convert_attr_ascii	ELSE,0:FOR,0:WHILE,0:IF,0:CALL,1:functions,0:SWITCH,1:DO,0	41
0x400317c	              0x55	                                push rbp	      1362	convert.c	FUNCTION_37
0x400317d	          0x4889e5	                            mov rbp, rsp	      1362	convert.c	FUNCTION_37
0x4003180	        0x4883ec40	                           sub rsp, 0x40	      1362	convert.c	FUNCTION_37
0x4003184	        0x48897dc8	             mov qword [rbp - 0x38], rdi	      1362	convert.c	FUNCTION_37
0x4003188	    0x64488b042528	                mov rax, qword fs:[0x28]	      1362	convert.c	FUNCTION_37
0x4003191	        0x488945f8	                mov qword [rbp - 8], rax	      1362	convert.c	FUNCTION_37
0x4003195	            0x31c0	                            xor eax, eax	      1362	convert.c	FUNCTION_37
0x4003197	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      1365	convert.c	FUNCTION_37	CALL_1
0x400319b	        0x488d45d0	                   lea rax, [rbp - 0x30]	      1365	convert.c	FUNCTION_37	CALL_1
0x400319f	          0x4889d6	                            mov rsi, rdx	      1365	convert.c	FUNCTION_37	CALL_1
0x40031a2	          0x4889c7	                            mov rdi, rax	      1365	convert.c	FUNCTION_37	CALL_1
0x40031a5	      0xe8d8fcffff	                  call sym.convert_attrs	      1365	convert.c	FUNCTION_37	CALL_1
0x40031aa	          0x8b45d8	             mov eax, dword [rbp - 0x28]	      1366	convert.c	FUNCTION_37	SWITCH_1
0x40031ad	          0x83f807	                              cmp eax, 7	      1366	convert.c	FUNCTION_37	SWITCH_1
0x40031b0	            0x7744	                            ja 0x40031f6	      1366	convert.c	FUNCTION_37	SWITCH_1
0x40031b2	            0x89c0	                            mov eax, eax	      1366	convert.c	FUNCTION_37	SWITCH_1
0x40031b4	    0x488b04c50000	                  mov rax, qword [rax*8]	      1366	convert.c	FUNCTION_37	SWITCH_1
0x40031bc	            0xffe0	                                 jmp rax	      1366	convert.c	FUNCTION_37	SWITCH_1
0x40031be	      0xb800000000	                              mov eax, 0	      1368	convert.c	FUNCTION_37	SWITCH_1
0x40031c3	            0xeb36	                           jmp 0x40031fb	      1368	convert.c	FUNCTION_37	SWITCH_1
0x40031c5	      0xb800000000	                              mov eax, 0	      1370	convert.c	FUNCTION_37	SWITCH_1
0x40031ca	            0xeb2f	                           jmp 0x40031fb	      1370	convert.c	FUNCTION_37	SWITCH_1
0x40031cc	      0xb800000000	                              mov eax, 0	      1372	convert.c	FUNCTION_37	SWITCH_1
0x40031d1	            0xeb28	                           jmp 0x40031fb	      1372	convert.c	FUNCTION_37	SWITCH_1
0x40031d3	      0xb800000000	                              mov eax, 0	      1374	convert.c	FUNCTION_37	SWITCH_1
0x40031d8	            0xeb21	                           jmp 0x40031fb	      1374	convert.c	FUNCTION_37	SWITCH_1
0x40031da	      0xb800000000	                              mov eax, 0	      1376	convert.c	FUNCTION_37	SWITCH_1
0x40031df	            0xeb1a	                           jmp 0x40031fb	      1376	convert.c	FUNCTION_37	SWITCH_1
0x40031e1	      0xb800000000	                              mov eax, 0	      1378	convert.c	FUNCTION_37	SWITCH_1
0x40031e6	            0xeb13	                           jmp 0x40031fb	      1378	convert.c	FUNCTION_37	SWITCH_1
0x40031e8	      0xb800000000	                              mov eax, 0	      1380	convert.c	FUNCTION_37	SWITCH_1
0x40031ed	            0xeb0c	                           jmp 0x40031fb	      1380	convert.c	FUNCTION_37	SWITCH_1
0x40031ef	      0xb800000000	                              mov eax, 0	      1382	convert.c	FUNCTION_37	SWITCH_1
0x40031f4	            0xeb05	                           jmp 0x40031fb	      1382	convert.c	FUNCTION_37	SWITCH_1
0x40031f6	      0xb800000000	                              mov eax, 0	      1384	convert.c	FUNCTION_37
0x40031fb	        0x488b4df8	                mov rcx, qword [rbp - 8]	      1385	convert.c	FUNCTION_37
0x40031ff	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      1385	convert.c	FUNCTION_37
0x4003208	            0x7405	                            je 0x400320f	      1385	convert.c	FUNCTION_37
0x400320a	      0xe800000000	                          call 0x400320f	      1385	convert.c	FUNCTION_37
0x400320f	              0xc9	                                   leave	      1385	convert.c	FUNCTION_37
0x4003210	              0xc3	                                     ret	      1385	convert.c	FUNCTION_37
strbuf_swap	ELSE,0:FOR,0:WHILE,0:IF,0:CALL,0:functions,0:SWITCH,0:DO,0	39
0x40000a1	              0x55	                                push rbp	       126	strbuf.h	FUNCTION_61
0x40000a2	          0x4889e5	                            mov rbp, rsp	       126	strbuf.h	FUNCTION_61
0x40000a5	        0x4883ec40	                           sub rsp, 0x40	       126	strbuf.h	FUNCTION_61
0x40000a9	        0x48897dc8	             mov qword [rbp - 0x38], rdi	       126	strbuf.h	FUNCTION_61
0x40000ad	        0x488975c0	             mov qword [rbp - 0x40], rsi	       126	strbuf.h	FUNCTION_61
0x40000b1	    0x64488b042528	                mov rax, qword fs:[0x28]	       126	strbuf.h	FUNCTION_61
0x40000ba	        0x488945f8	                mov qword [rbp - 8], rax	       126	strbuf.h	FUNCTION_61
0x40000be	            0x31c0	                            xor eax, eax	       126	strbuf.h	FUNCTION_61
0x40000c0	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       127	strbuf.h	FUNCTION_61
0x40000c4	        0x488945d0	             mov qword [rbp - 0x30], rax	       127	strbuf.h	FUNCTION_61
0x40000c8	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       127	strbuf.h	FUNCTION_61
0x40000cc	        0x488945d8	             mov qword [rbp - 0x28], rax	       127	strbuf.h	FUNCTION_61
0x40000d0	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       127	strbuf.h	FUNCTION_61
0x40000d4	          0x488b10	                    mov rdx, qword [rax]	       127	strbuf.h	FUNCTION_61
0x40000d7	        0x488955e0	             mov qword [rbp - 0x20], rdx	       127	strbuf.h	FUNCTION_61
0x40000db	        0x488b5008	                mov rdx, qword [rax + 8]	       127	strbuf.h	FUNCTION_61
0x40000df	        0x488955e8	             mov qword [rbp - 0x18], rdx	       127	strbuf.h	FUNCTION_61
0x40000e3	        0x488b4010	            mov rax, qword [rax + 0x10] 	       127	strbuf.h	FUNCTION_61
0x40000e7	        0x488945f0	             mov qword [rbp - 0x10], rax	       127	strbuf.h	FUNCTION_61
0x40000eb	        0x488b4dd8	             mov rcx, qword [rbp - 0x28]	       127	strbuf.h	FUNCTION_61
0x40000ef	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       127	strbuf.h	FUNCTION_61
0x40000f3	      0xba18000000	                           mov edx, 0x18	       127	strbuf.h	FUNCTION_61
0x40000f8	          0x4889ce	                            mov rsi, rcx	       127	strbuf.h	FUNCTION_61
0x40000fb	          0x4889c7	                            mov rdi, rax	       127	strbuf.h	FUNCTION_61
0x40000fe	      0xe800000000	                          call 0x4000103	       127	strbuf.h	FUNCTION_61
0x4000103	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       127	strbuf.h	FUNCTION_61
0x4000107	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       127	strbuf.h	FUNCTION_61
0x400010b	          0x488910	                    mov qword [rax], rdx	       127	strbuf.h	FUNCTION_61
0x400010e	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       127	strbuf.h	FUNCTION_61
0x4000112	        0x48895008	                mov qword [rax + 8], rdx	       127	strbuf.h	FUNCTION_61
0x4000116	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       127	strbuf.h	FUNCTION_61
0x400011a	        0x48895010	             mov qword [rax + 0x10], rdx	       127	strbuf.h	FUNCTION_61
0x400011e	              0x90	                                     nop	       128	strbuf.h	FUNCTION_61
0x400011f	        0x488b45f8	                mov rax, qword [rbp - 8]	       128	strbuf.h	FUNCTION_61
0x4000123	    0x644833042528	                xor rax, qword fs:[0x28]	       128	strbuf.h	FUNCTION_61
0x400012c	            0x7405	                            je 0x4000133	       128	strbuf.h	FUNCTION_61
0x400012e	      0xe800000000	                          call 0x4000133	       128	strbuf.h	FUNCTION_61
0x4000133	              0xc9	                                   leave	       128	strbuf.h	FUNCTION_61
0x4000134	              0xc3	                                     ret	       128	strbuf.h	FUNCTION_61
convert_attrs	ELSE,4:FOR,0:WHILE,0:IF,12:CALL,10:functions,0:SWITCH,0:DO,0	161
0x4002e82	              0x55	                                push rbp	      1294	convert.c	FUNCTION_35
0x4002e83	          0x4889e5	                            mov rbp, rsp	      1294	convert.c	FUNCTION_35
0x4002e86	        0x4883ec20	                           sub rsp, 0x20	      1294	convert.c	FUNCTION_35
0x4002e8a	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1294	convert.c	FUNCTION_35
0x4002e8e	        0x488975e0	             mov qword [rbp - 0x20], rsi	      1294	convert.c	FUNCTION_35
0x4002e92	    0x488b05000000	            mov rax, qword [0x04002e99] 	      1297	convert.c	FUNCTION_35	IF_1
0x4002e99	          0x4885c0	                           test rax, rax	      1297	convert.c	FUNCTION_35	IF_1
0x4002e9c	            0x7555	                           jne 0x4002ef3	      1297	convert.c	FUNCTION_35	IF_1
0x4002e9e	        0x4883ec08	                              sub rsp, 8	      1298	convert.c	FUNCTION_35	IF_1	CALL_1
0x4002ea2	            0x6a00	                                  push 0	      1298	convert.c	FUNCTION_35	IF_1	CALL_1
0x4002ea4	    0x41b900000000	                              mov r9d, 0	      1298	convert.c	FUNCTION_35	IF_1	CALL_1
0x4002eaa	    0x41b800000000	                              mov r8d, 0	      1298	convert.c	FUNCTION_35	IF_1	CALL_1
0x4002eb0	      0xb900000000	                              mov ecx, 0	      1298	convert.c	FUNCTION_35	IF_1	CALL_1
0x4002eb5	      0xba00000000	                              mov edx, 0	      1298	convert.c	FUNCTION_35	IF_1	CALL_1
0x4002eba	      0xbe00000000	                              mov esi, 0	      1298	convert.c	FUNCTION_35	IF_1	CALL_1
0x4002ebf	      0xbf00000000	                              mov edi, 0	      1298	convert.c	FUNCTION_35	IF_1	CALL_1
0x4002ec4	      0xb800000000	                              mov eax, 0	      1298	convert.c	FUNCTION_35	IF_1	CALL_1
0x4002ec9	      0xe800000000	                          call 0x4002ece	      1298	convert.c	FUNCTION_35	IF_1	CALL_1
0x4002ece	        0x4883c410	                           add rsp, 0x10	      1298	convert.c	FUNCTION_35	IF_1	CALL_1
0x4002ed2	    0x488905000000	            mov qword [0x04002ed9], rax 	      1298	convert.c	FUNCTION_35	IF_1	CALL_1
0x4002ed9	    0x48c705000000	               mov qword [0x04002ee4], 0	      1301	convert.c	FUNCTION_35	IF_1
0x4002ee4	      0xbe00000000	                              mov esi, 0	      1302	convert.c	FUNCTION_35	IF_1	CALL_2
0x4002ee9	      0xbf00000000	                              mov edi, 0	      1302	convert.c	FUNCTION_35	IF_1	CALL_2
0x4002eee	      0xe800000000	                          call 0x4002ef3	      1302	convert.c	FUNCTION_35	IF_1	CALL_2
0x4002ef3	    0x488b15000000	            mov rdx, qword [0x04002efa] 	      1305	convert.c	FUNCTION_35	IF_2	CALL_3
0x4002efa	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1305	convert.c	FUNCTION_35	IF_2	CALL_3
0x4002efe	          0x4889d6	                            mov rsi, rdx	      1305	convert.c	FUNCTION_35	IF_2	CALL_3
0x4002f01	          0x4889c7	                            mov rdi, rax	      1305	convert.c	FUNCTION_35	IF_2	CALL_3
0x4002f04	      0xe800000000	                          call 0x4002f09	      1305	convert.c	FUNCTION_35	IF_2	CALL_3
0x4002f09	            0x85c0	                           test eax, eax	      1305	convert.c	FUNCTION_35	IF_2	CALL_3
0x4002f0b	     0xf8519010000	                           jne 0x400302a	      1305	convert.c	FUNCTION_35	IF_2	CALL_3
0x4002f11	    0x488b05000000	            mov rax, qword [0x04002f18] 	      1306	convert.c	FUNCTION_35	IF_2
0x4002f18	        0x488b4008	                mov rax, qword [rax + 8]	      1306	convert.c	FUNCTION_35	IF_2
0x4002f1c	        0x488945f8	                mov qword [rbp - 8], rax	      1306	convert.c	FUNCTION_35	IF_2
0x4002f20	        0x488b45f8	                mov rax, qword [rbp - 8]	      1307	convert.c	FUNCTION_35	IF_2	CALL_4
0x4002f24	        0x4883c040	                           add rax, 0x40	      1307	convert.c	FUNCTION_35	IF_2	CALL_4
0x4002f28	          0x4889c7	                            mov rdi, rax	      1307	convert.c	FUNCTION_35	IF_2	CALL_4
0x4002f2b	      0xe8cffdffff	            call sym.git_path_check_crlf	      1307	convert.c	FUNCTION_35	IF_2	CALL_4
0x4002f30	            0x89c2	                            mov edx, eax	      1307	convert.c	FUNCTION_35	IF_2	CALL_4
0x4002f32	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1307	convert.c	FUNCTION_35	IF_2	CALL_4
0x4002f36	          0x89500c	              mov dword [rax + 0xc], edx	      1307	convert.c	FUNCTION_35	IF_2	CALL_4
0x4002f39	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1308	convert.c	FUNCTION_35	IF_2	IF_3
0x4002f3d	          0x8b400c	              mov eax, dword [rax + 0xc]	      1308	convert.c	FUNCTION_35	IF_2	IF_3
0x4002f40	            0x85c0	                           test eax, eax	      1308	convert.c	FUNCTION_35	IF_2	IF_3
0x4002f42	            0x7515	                           jne 0x4002f59	      1308	convert.c	FUNCTION_35	IF_2	IF_3
0x4002f44	        0x488b45f8	                mov rax, qword [rbp - 8]	      1309	convert.c	FUNCTION_35	IF_2	CALL_5
0x4002f48	          0x4889c7	                            mov rdi, rax	      1309	convert.c	FUNCTION_35	IF_2	CALL_5
0x4002f4b	      0xe8affdffff	            call sym.git_path_check_crlf	      1309	convert.c	FUNCTION_35	IF_2	CALL_5
0x4002f50	            0x89c2	                            mov edx, eax	      1309	convert.c	FUNCTION_35	IF_2	CALL_5
0x4002f52	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1309	convert.c	FUNCTION_35	IF_2	CALL_5
0x4002f56	          0x89500c	              mov dword [rax + 0xc], edx	      1309	convert.c	FUNCTION_35	IF_2	CALL_5
0x4002f59	        0x488b45f8	                mov rax, qword [rbp - 8]	      1310	convert.c	FUNCTION_35	IF_2	CALL_6
0x4002f5d	        0x4883c010	                           add rax, 0x10	      1310	convert.c	FUNCTION_35	IF_2	CALL_6
0x4002f61	          0x4889c7	                            mov rdi, rax	      1310	convert.c	FUNCTION_35	IF_2	CALL_6
0x4002f64	      0xe8f5feffff	           call sym.git_path_check_ident	      1310	convert.c	FUNCTION_35	IF_2	CALL_6
0x4002f69	            0x89c2	                            mov edx, eax	      1310	convert.c	FUNCTION_35	IF_2	CALL_6
0x4002f6b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1310	convert.c	FUNCTION_35	IF_2	CALL_6
0x4002f6f	          0x895010	             mov dword [rax + 0x10], edx	      1310	convert.c	FUNCTION_35	IF_2	CALL_6
0x4002f72	        0x488b45f8	                mov rax, qword [rbp - 8]	      1311	convert.c	FUNCTION_35	IF_2	CALL_7
0x4002f76	        0x4883c020	                           add rax, 0x20	      1311	convert.c	FUNCTION_35	IF_2	CALL_7
0x4002f7a	          0x4889c7	                            mov rdi, rax	      1311	convert.c	FUNCTION_35	IF_2	CALL_7
0x4002f7d	      0xe85bfeffff	         call sym.git_path_check_convert	      1311	convert.c	FUNCTION_35	IF_2	CALL_7
0x4002f82	          0x4889c2	                            mov rdx, rax	      1311	convert.c	FUNCTION_35	IF_2	CALL_7
0x4002f85	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1311	convert.c	FUNCTION_35	IF_2	CALL_7
0x4002f89	          0x488910	                    mov qword [rax], rdx	      1311	convert.c	FUNCTION_35	IF_2	CALL_7
0x4002f8c	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1312	convert.c	FUNCTION_35	IF_2	IF_4
0x4002f90	          0x8b400c	              mov eax, dword [rax + 0xc]	      1312	convert.c	FUNCTION_35	IF_2	IF_4
0x4002f93	          0x83f801	                              cmp eax, 1	      1312	convert.c	FUNCTION_35	IF_2	IF_4
0x4002f96	            0x7475	                            je 0x400300d	      1312	convert.c	FUNCTION_35	IF_2	IF_4
0x4002f98	        0x488b45f8	                mov rax, qword [rbp - 8]	      1313	convert.c	FUNCTION_35	IF_2	IF_4	CALL_8
0x4002f9c	        0x4883c030	                           add rax, 0x30	      1313	convert.c	FUNCTION_35	IF_2	IF_4	CALL_8
0x4002fa0	          0x4889c7	                            mov rdi, rax	      1313	convert.c	FUNCTION_35	IF_2	IF_4	CALL_8
0x4002fa3	      0xe8d7fdffff	             call sym.git_path_check_eol	      1313	convert.c	FUNCTION_35	IF_2	IF_4	CALL_8
0x4002fa8	          0x8945f4	              mov dword [rbp - 0xc], eax	      1313	convert.c	FUNCTION_35	IF_2	IF_4	CALL_8
0x4002fab	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1314	convert.c	FUNCTION_35	IF_2	IF_4	IF_5
0x4002faf	          0x8b400c	              mov eax, dword [rax + 0xc]	      1314	convert.c	FUNCTION_35	IF_2	IF_4	IF_5
0x4002fb2	          0x83f805	                              cmp eax, 5	      1314	convert.c	FUNCTION_35	IF_2	IF_4	IF_5
0x4002fb5	            0x7513	                           jne 0x4002fca	      1314	convert.c	FUNCTION_35	IF_2	IF_4	IF_5
0x4002fb7	        0x837df402	                cmp dword [rbp - 0xc], 2	      1314	convert.c	FUNCTION_35	IF_2	IF_4	IF_5
0x4002fbb	            0x750d	                           jne 0x4002fca	      1314	convert.c	FUNCTION_35	IF_2	IF_4	IF_5
0x4002fbd	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1315	convert.c	FUNCTION_35	IF_2	IF_4	IF_5
0x4002fc1	    0xc7400c060000	                mov dword [rax + 0xc], 6	      1315	convert.c	FUNCTION_35	IF_2	IF_4	IF_5
0x4002fc8	            0xeb43	                           jmp 0x400300d	      1315	convert.c	FUNCTION_35	IF_2	IF_4	IF_5
0x4002fca	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1316	convert.c	FUNCTION_35	IF_2	IF_4	ELSE_1	IF_6
0x4002fce	          0x8b400c	              mov eax, dword [rax + 0xc]	      1316	convert.c	FUNCTION_35	IF_2	IF_4	ELSE_1	IF_6
0x4002fd1	          0x83f805	                              cmp eax, 5	      1316	convert.c	FUNCTION_35	IF_2	IF_4	ELSE_1	IF_6
0x4002fd4	            0x7513	                           jne 0x4002fe9	      1316	convert.c	FUNCTION_35	IF_2	IF_4	ELSE_1	IF_6
0x4002fd6	        0x837df401	                cmp dword [rbp - 0xc], 1	      1316	convert.c	FUNCTION_35	IF_2	IF_4	ELSE_1	IF_6
0x4002fda	            0x750d	                           jne 0x4002fe9	      1316	convert.c	FUNCTION_35	IF_2	IF_4	ELSE_1	IF_6
0x4002fdc	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1317	convert.c	FUNCTION_35	IF_2	IF_4	ELSE_1	IF_6
0x4002fe0	    0xc7400c070000	                mov dword [rax + 0xc], 7	      1317	convert.c	FUNCTION_35	IF_2	IF_4	ELSE_1	IF_6
0x4002fe7	            0xeb24	                           jmp 0x400300d	      1317	convert.c	FUNCTION_35	IF_2	IF_4	ELSE_1	IF_6
0x4002fe9	        0x837df402	                cmp dword [rbp - 0xc], 2	      1318	convert.c	FUNCTION_35	IF_2	IF_4	ELSE_2	IF_7
0x4002fed	            0x750d	                           jne 0x4002ffc	      1318	convert.c	FUNCTION_35	IF_2	IF_4	ELSE_2	IF_7
0x4002fef	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1319	convert.c	FUNCTION_35	IF_2	IF_4	ELSE_2	IF_7
0x4002ff3	    0xc7400c030000	                mov dword [rax + 0xc], 3	      1319	convert.c	FUNCTION_35	IF_2	IF_4	ELSE_2	IF_7
0x4002ffa	            0xeb11	                           jmp 0x400300d	      1319	convert.c	FUNCTION_35	IF_2	IF_4	ELSE_2	IF_7
0x4002ffc	        0x837df401	                cmp dword [rbp - 0xc], 1	      1320	convert.c	FUNCTION_35	IF_2	IF_4	ELSE_3	IF_8
0x4003000	            0x750b	                           jne 0x400300d	      1320	convert.c	FUNCTION_35	IF_2	IF_4	ELSE_3	IF_8
0x4003002	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1321	convert.c	FUNCTION_35	IF_2	IF_4	ELSE_3	IF_8
0x4003006	    0xc7400c040000	                mov dword [rax + 0xc], 4	      1321	convert.c	FUNCTION_35	IF_2	IF_4	ELSE_3	IF_8
0x400300d	        0x488b45f8	                mov rax, qword [rbp - 8]	      1323	convert.c	FUNCTION_35	IF_2	CALL_9
0x4003011	        0x4883c050	                           add rax, 0x50	      1323	convert.c	FUNCTION_35	IF_2	CALL_9
0x4003015	          0x4889c7	                            mov rdi, rax	      1323	convert.c	FUNCTION_35	IF_2	CALL_9
0x4003018	      0xe85ffcffff	        call sym.git_path_check_encoding	      1323	convert.c	FUNCTION_35	IF_2	CALL_9
0x400301d	          0x4889c2	                            mov rdx, rax	      1323	convert.c	FUNCTION_35	IF_2	CALL_9
0x4003020	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1323	convert.c	FUNCTION_35	IF_2	CALL_9
0x4003024	        0x48895018	             mov qword [rax + 0x18], rdx	      1323	convert.c	FUNCTION_35	IF_2	CALL_9
0x4003028	            0xeb21	                           jmp 0x400304b	      1323	convert.c	FUNCTION_35	IF_2	CALL_9
0x400302a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1325	convert.c	FUNCTION_35	ELSE_4
0x400302e	    0x48c700000000	                      mov qword [rax], 0	      1325	convert.c	FUNCTION_35	ELSE_4
0x4003035	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1326	convert.c	FUNCTION_35	ELSE_4
0x4003039	    0xc7400c000000	                mov dword [rax + 0xc], 0	      1326	convert.c	FUNCTION_35	ELSE_4
0x4003040	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1327	convert.c	FUNCTION_35	ELSE_4
0x4003044	    0xc74010000000	               mov dword [rax + 0x10], 0	      1327	convert.c	FUNCTION_35	ELSE_4
0x400304b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1331	convert.c	FUNCTION_35
0x400304f	          0x8b500c	              mov edx, dword [rax + 0xc]	      1331	convert.c	FUNCTION_35
0x4003052	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1331	convert.c	FUNCTION_35
0x4003056	          0x895008	                mov dword [rax + 8], edx	      1331	convert.c	FUNCTION_35
0x4003059	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1332	convert.c	FUNCTION_35	IF_9
0x400305d	          0x8b400c	              mov eax, dword [rax + 0xc]	      1332	convert.c	FUNCTION_35	IF_9
0x4003060	          0x83f802	                              cmp eax, 2	      1332	convert.c	FUNCTION_35	IF_9
0x4003063	            0x751c	                           jne 0x4003081	      1332	convert.c	FUNCTION_35	IF_9
0x4003065	      0xe875d6ffff	               call sym.text_eol_is_crlf	      1333	convert.c	FUNCTION_35	CALL_10
0x400306a	            0x85c0	                           test eax, eax	      1333	convert.c	FUNCTION_35	CALL_10
0x400306c	            0x7407	                            je 0x4003075	      1333	convert.c	FUNCTION_35	CALL_10
0x400306e	      0xba04000000	                              mov edx, 4	      1333	convert.c	FUNCTION_35	CALL_10
0x4003073	            0xeb05	                           jmp 0x400307a	      1333	convert.c	FUNCTION_35	CALL_10
0x4003075	      0xba03000000	                              mov edx, 3	      1333	convert.c	FUNCTION_35	CALL_10
0x400307a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1333	convert.c	FUNCTION_35	CALL_10
0x400307e	          0x89500c	              mov dword [rax + 0xc], edx	      1333	convert.c	FUNCTION_35	CALL_10
0x4003081	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1334	convert.c	FUNCTION_35	IF_10
0x4003085	          0x8b400c	              mov eax, dword [rax + 0xc]	      1334	convert.c	FUNCTION_35	IF_10
0x4003088	            0x85c0	                           test eax, eax	      1334	convert.c	FUNCTION_35	IF_10
0x400308a	            0x7515	                           jne 0x40030a1	      1334	convert.c	FUNCTION_35	IF_10
0x400308c	    0x8b0500000000	            mov eax, dword [0x04003092] 	      1334	convert.c	FUNCTION_35	IF_10
0x4003092	            0x85c0	                           test eax, eax	      1334	convert.c	FUNCTION_35	IF_10
0x4003094	            0x750b	                           jne 0x40030a1	      1334	convert.c	FUNCTION_35	IF_10
0x4003096	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1335	convert.c	FUNCTION_35	IF_10
0x400309a	    0xc7400c010000	                mov dword [rax + 0xc], 1	      1335	convert.c	FUNCTION_35	IF_10
0x40030a1	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1336	convert.c	FUNCTION_35	IF_11
0x40030a5	          0x8b400c	              mov eax, dword [rax + 0xc]	      1336	convert.c	FUNCTION_35	IF_11
0x40030a8	            0x85c0	                           test eax, eax	      1336	convert.c	FUNCTION_35	IF_11
0x40030aa	            0x7516	                           jne 0x40030c2	      1336	convert.c	FUNCTION_35	IF_11
0x40030ac	    0x8b0500000000	            mov eax, dword [0x040030b2] 	      1336	convert.c	FUNCTION_35	IF_11
0x40030b2	          0x83f801	                              cmp eax, 1	      1336	convert.c	FUNCTION_35	IF_11
0x40030b5	            0x750b	                           jne 0x40030c2	      1336	convert.c	FUNCTION_35	IF_11
0x40030b7	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1337	convert.c	FUNCTION_35	IF_11
0x40030bb	    0xc7400c070000	                mov dword [rax + 0xc], 7	      1337	convert.c	FUNCTION_35	IF_11
0x40030c2	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1338	convert.c	FUNCTION_35	IF_12
0x40030c6	          0x8b400c	              mov eax, dword [rax + 0xc]	      1338	convert.c	FUNCTION_35	IF_12
0x40030c9	            0x85c0	                           test eax, eax	      1338	convert.c	FUNCTION_35	IF_12
0x40030cb	            0x7516	                           jne 0x40030e3	      1338	convert.c	FUNCTION_35	IF_12
0x40030cd	    0x8b0500000000	            mov eax, dword [0x040030d3] 	      1338	convert.c	FUNCTION_35	IF_12
0x40030d3	          0x83f8ff	             cmp eax, 0xffffffffffffffff	      1338	convert.c	FUNCTION_35	IF_12
0x40030d6	            0x750b	                           jne 0x40030e3	      1338	convert.c	FUNCTION_35	IF_12
0x40030d8	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1339	convert.c	FUNCTION_35	IF_12
0x40030dc	    0xc7400c060000	                mov dword [rax + 0xc], 6	      1339	convert.c	FUNCTION_35	IF_12
0x40030e3	              0x90	                                     nop	      1340	convert.c	FUNCTION_35
0x40030e4	              0xc9	                                   leave	      1340	convert.c	FUNCTION_35
0x40030e5	              0xc3	                                     ret	      1340	convert.c	FUNCTION_35
output_eol	ELSE,0:FOR,0:WHILE,0:IF,0:CALL,2:functions,0:SWITCH,1:DO,0	34
0x4000720	              0x55	                                push rbp	       175	convert.c	FUNCTION_8
0x4000721	          0x4889e5	                            mov rbp, rsp	       175	convert.c	FUNCTION_8
0x4000724	        0x4883ec10	                           sub rsp, 0x10	       175	convert.c	FUNCTION_8
0x4000728	          0x897dfc	                mov dword [rbp - 4], edi	       175	convert.c	FUNCTION_8
0x400072b	        0x837dfc07	                  cmp dword [rbp - 4], 7	       176	convert.c	FUNCTION_8	SWITCH_1
0x400072f	            0x7747	                            ja 0x4000778	       176	convert.c	FUNCTION_8	SWITCH_1
0x4000731	          0x8b45fc	                mov eax, dword [rbp - 4]	       176	convert.c	FUNCTION_8	SWITCH_1
0x4000734	    0x488b04c50000	                  mov rax, qword [rax*8]	       176	convert.c	FUNCTION_8	SWITCH_1
0x400073c	            0xffe0	                                 jmp rax	       176	convert.c	FUNCTION_8	SWITCH_1
0x400073e	      0xb800000000	                              mov eax, 0	       178	convert.c	FUNCTION_8	SWITCH_1
0x4000743	            0xeb4d	                           jmp 0x4000792	       178	convert.c	FUNCTION_8	SWITCH_1
0x4000745	      0xb801000000	                              mov eax, 1	       180	convert.c	FUNCTION_8	SWITCH_1
0x400074a	            0xeb46	                           jmp 0x4000792	       180	convert.c	FUNCTION_8	SWITCH_1
0x400074c	      0xb802000000	                              mov eax, 2	       182	convert.c	FUNCTION_8	SWITCH_1
0x4000751	            0xeb3f	                           jmp 0x4000792	       182	convert.c	FUNCTION_8	SWITCH_1
0x4000753	      0xb801000000	                              mov eax, 1	       185	convert.c	FUNCTION_8	SWITCH_1
0x4000758	            0xeb38	                           jmp 0x4000792	       185	convert.c	FUNCTION_8	SWITCH_1
0x400075a	      0xb802000000	                              mov eax, 2	       187	convert.c	FUNCTION_8	SWITCH_1
0x400075f	            0xeb31	                           jmp 0x4000792	       187	convert.c	FUNCTION_8	SWITCH_1
0x4000761	      0xe879ffffff	               call sym.text_eol_is_crlf	       191	convert.c	FUNCTION_8	SWITCH_1	CALL_1
0x4000766	            0x85c0	                           test eax, eax	       191	convert.c	FUNCTION_8	SWITCH_1	CALL_1
0x4000768	            0x7407	                            je 0x4000771	       191	convert.c	FUNCTION_8	SWITCH_1	CALL_1
0x400076a	      0xb801000000	                              mov eax, 1	       191	convert.c	FUNCTION_8	SWITCH_1	CALL_1
0x400076f	            0xeb21	                           jmp 0x4000792	       191	convert.c	FUNCTION_8	SWITCH_1	CALL_1
0x4000771	      0xb802000000	                              mov eax, 2	       191	convert.c	FUNCTION_8	SWITCH_1	CALL_1
0x4000776	            0xeb1a	                           jmp 0x4000792	       191	convert.c	FUNCTION_8	SWITCH_1	CALL_1
0x4000778	          0x8b45fc	                mov eax, dword [rbp - 4]	       193	convert.c	FUNCTION_8	CALL_2
0x400077b	            0x89c6	                            mov esi, eax	       193	convert.c	FUNCTION_8	CALL_2
0x400077d	      0xbf00000000	                              mov edi, 0	       193	convert.c	FUNCTION_8	CALL_2
0x4000782	      0xb800000000	                              mov eax, 0	       193	convert.c	FUNCTION_8	CALL_2
0x4000787	      0xe800000000	                          call 0x400078c	       193	convert.c	FUNCTION_8	CALL_2
0x400078c	    0x8b0500000000	            mov eax, dword [0x04000792] 	       194	convert.c	FUNCTION_8
0x4000792	              0xc9	                                   leave	       195	convert.c	FUNCTION_8
0x4000793	              0xc3	                                     ret	       195	convert.c	FUNCTION_8
git_path_check_encoding	ELSE,0:FOR,0:WHILE,0:IF,3:CALL,7:functions,0:SWITCH,0:DO,0	36
0x4002c7c	              0x55	                                push rbp	      1218	convert.c	FUNCTION_30
0x4002c7d	          0x4889e5	                            mov rbp, rsp	      1218	convert.c	FUNCTION_30
0x4002c80	        0x4883ec20	                           sub rsp, 0x20	      1218	convert.c	FUNCTION_30
0x4002c84	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1218	convert.c	FUNCTION_30
0x4002c88	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1219	convert.c	FUNCTION_30
0x4002c8c	        0x488b4008	                mov rax, qword [rax + 8]	      1219	convert.c	FUNCTION_30
0x4002c90	        0x488945f8	                mov qword [rbp - 8], rax	      1219	convert.c	FUNCTION_30
0x4002c94	      0x48837df800	                  cmp qword [rbp - 8], 0	      1221	convert.c	FUNCTION_30	IF_1	CALL_2
0x4002c99	            0x740b	                            je 0x4002ca6	      1221	convert.c	FUNCTION_30	IF_1	CALL_2
0x4002c9b	        0x488b45f8	                mov rax, qword [rbp - 8]	      1221	convert.c	FUNCTION_30	IF_1	CALL_2
0x4002c9f	           0xfb600	                   movzx eax, byte [rax]	      1221	convert.c	FUNCTION_30	IF_1	CALL_2
0x4002ca2	            0x84c0	                             test al, al	      1221	convert.c	FUNCTION_30	IF_1	CALL_2
0x4002ca4	            0x7507	                           jne 0x4002cad	      1221	convert.c	FUNCTION_30	IF_1	CALL_2
0x4002ca6	      0xb800000000	                              mov eax, 0	      1222	convert.c	FUNCTION_30	IF_1
0x4002cab	            0xeb50	                           jmp 0x4002cfd	      1222	convert.c	FUNCTION_30	IF_1
0x4002cad	    0x48817df80000	                  cmp qword [rbp - 8], 0	      1224	convert.c	FUNCTION_30	IF_2	CALL_4
0x4002cb5	            0x740a	                            je 0x4002cc1	      1224	convert.c	FUNCTION_30	IF_2	CALL_4
0x4002cb7	    0x48817df80000	                  cmp qword [rbp - 8], 0	      1224	convert.c	FUNCTION_30	IF_2	CALL_4
0x4002cbf	            0x7517	                           jne 0x4002cd8	      1224	convert.c	FUNCTION_30	IF_2	CALL_4
0x4002cc1	      0xbf00000000	                              mov edi, 0	      1225	convert.c	FUNCTION_30	IF_2	CALL_6
0x4002cc6	      0xe8ddd5ffff	                               call sym.	      1225	convert.c	FUNCTION_30	IF_2	CALL_6
0x4002ccb	          0x4889c7	                            mov rdi, rax	      1225	convert.c	FUNCTION_30	IF_2	CALL_6
0x4002cce	      0xb800000000	                              mov eax, 0	      1225	convert.c	FUNCTION_30	IF_2	CALL_6
0x4002cd3	      0xe800000000	                          call 0x4002cd8	      1225	convert.c	FUNCTION_30	IF_2	CALL_6
0x4002cd8	    0x488b15000000	            mov rdx, qword [0x04002cdf] 	      1229	convert.c	FUNCTION_30	IF_3	CALL_7
0x4002cdf	        0x488b45f8	                mov rax, qword [rbp - 8]	      1229	convert.c	FUNCTION_30	IF_3	CALL_7
0x4002ce3	          0x4889d6	                            mov rsi, rdx	      1229	convert.c	FUNCTION_30	IF_3	CALL_7
0x4002ce6	          0x4889c7	                            mov rdi, rax	      1229	convert.c	FUNCTION_30	IF_3	CALL_7
0x4002ce9	      0xe800000000	                          call 0x4002cee	      1229	convert.c	FUNCTION_30	IF_3	CALL_7
0x4002cee	            0x85c0	                           test eax, eax	      1229	convert.c	FUNCTION_30	IF_3	CALL_7
0x4002cf0	            0x7407	                            je 0x4002cf9	      1229	convert.c	FUNCTION_30	IF_3	CALL_7
0x4002cf2	      0xb800000000	                              mov eax, 0	      1230	convert.c	FUNCTION_30	IF_3
0x4002cf7	            0xeb04	                           jmp 0x4002cfd	      1230	convert.c	FUNCTION_30	IF_3
0x4002cf9	        0x488b45f8	                mov rax, qword [rbp - 8]	      1232	convert.c	FUNCTION_30
0x4002cfd	              0xc9	                                   leave	      1233	convert.c	FUNCTION_30
0x4002cfe	              0xc3	                                     ret	      1233	convert.c	FUNCTION_30
crlf_to_worktree	ELSE,1:FOR,1:WHILE,0:IF,5:CALL,11:functions,0:SWITCH,0:DO,0	125
0x4001519	              0x55	                                push rbp	       595	convert.c	FUNCTION_18
0x400151a	          0x4889e5	                            mov rbp, rsp	       595	convert.c	FUNCTION_18
0x400151d	        0x4883ec60	                           sub rsp, 0x60	       595	convert.c	FUNCTION_18
0x4001521	        0x48897dc8	             mov qword [rbp - 0x38], rdi	       595	convert.c	FUNCTION_18
0x4001525	        0x488975c0	             mov qword [rbp - 0x40], rsi	       595	convert.c	FUNCTION_18
0x4001529	        0x488955b8	             mov qword [rbp - 0x48], rdx	       595	convert.c	FUNCTION_18
0x400152d	        0x48894db0	             mov qword [rbp - 0x50], rcx	       595	convert.c	FUNCTION_18
0x4001531	        0x448945ac	             mov dword [rbp - 0x54], r8d	       595	convert.c	FUNCTION_18
0x4001535	    0x64488b042528	                mov rax, qword fs:[0x28]	       595	convert.c	FUNCTION_18
0x400153e	        0x488945f8	                mov qword [rbp - 8], rax	       595	convert.c	FUNCTION_18
0x4001542	            0x31c0	                            xor eax, eax	       595	convert.c	FUNCTION_18
0x4001544	    0x48c745d00000	               mov qword [rbp - 0x30], 0	       596	convert.c	FUNCTION_18
0x400154c	      0x48837db800	               cmp qword [rbp - 0x48], 0	       599	convert.c	FUNCTION_18	IF_1	CALL_1
0x4001551	            0x740f	                            je 0x4001562	       599	convert.c	FUNCTION_18	IF_1	CALL_1
0x4001553	          0x8b45ac	             mov eax, dword [rbp - 0x54]	       599	convert.c	FUNCTION_18	IF_1	CALL_1
0x4001556	            0x89c7	                            mov edi, eax	       599	convert.c	FUNCTION_18	IF_1	CALL_1
0x4001558	      0xe8c3f1ffff	                     call sym.output_eol	       599	convert.c	FUNCTION_18	IF_1	CALL_1
0x400155d	          0x83f801	                              cmp eax, 1	       599	convert.c	FUNCTION_18	IF_1	CALL_1
0x4001560	            0x740a	                            je 0x400156c	       599	convert.c	FUNCTION_18	IF_1	CALL_1
0x4001562	      0xb800000000	                              mov eax, 0	       600	convert.c	FUNCTION_18	IF_1
0x4001567	      0xe96b010000	                           jmp 0x40016d7	       600	convert.c	FUNCTION_18	IF_1
0x400156c	        0x488d55e0	                   lea rdx, [rbp - 0x20]	       602	convert.c	FUNCTION_18	CALL_2
0x4001570	        0x488b4db8	             mov rcx, qword [rbp - 0x48]	       602	convert.c	FUNCTION_18	CALL_2
0x4001574	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       602	convert.c	FUNCTION_18	CALL_2
0x4001578	          0x4889ce	                            mov rsi, rcx	       602	convert.c	FUNCTION_18	CALL_2
0x400157b	          0x4889c7	                            mov rdi, rax	       602	convert.c	FUNCTION_18	CALL_2
0x400157e	      0xe881edffff	                   call sym.gather_stats	       602	convert.c	FUNCTION_18	CALL_2
0x4001583	          0x8b55ac	             mov edx, dword [rbp - 0x54]	       603	convert.c	FUNCTION_18	IF_2	CALL_3
0x4001586	        0x488d4de0	                   lea rcx, [rbp - 0x20]	       603	convert.c	FUNCTION_18	IF_2	CALL_3
0x400158a	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       603	convert.c	FUNCTION_18	IF_2	CALL_3
0x400158e	          0x4889ce	                            mov rsi, rcx	       603	convert.c	FUNCTION_18	IF_2	CALL_3
0x4001591	          0x4889c7	                            mov rdi, rax	       603	convert.c	FUNCTION_18	IF_2	CALL_3
0x4001594	      0xe8bff3ffff	        call sym.will_convert_lf_to_crlf	       603	convert.c	FUNCTION_18	IF_2	CALL_3
0x4001599	            0x85c0	                           test eax, eax	       603	convert.c	FUNCTION_18	IF_2	CALL_3
0x400159b	            0x750a	                           jne 0x40015a7	       603	convert.c	FUNCTION_18	IF_2	CALL_3
0x400159d	      0xb800000000	                              mov eax, 0	       604	convert.c	FUNCTION_18	IF_2
0x40015a2	      0xe930010000	                           jmp 0x40016d7	       604	convert.c	FUNCTION_18	IF_2
0x40015a7	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       607	convert.c	FUNCTION_18	IF_3
0x40015ab	        0x488b4010	            mov rax, qword [rax + 0x10] 	       607	convert.c	FUNCTION_18	IF_3
0x40015af	        0x483b45c0	             cmp rax, qword [rbp - 0x40]	       607	convert.c	FUNCTION_18	IF_3
0x40015b3	            0x7515	                           jne 0x40015ca	       607	convert.c	FUNCTION_18	IF_3
0x40015b5	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       608	convert.c	FUNCTION_18	CALL_4
0x40015b9	      0xbe00000000	                              mov esi, 0	       608	convert.c	FUNCTION_18	CALL_4
0x40015be	          0x4889c7	                            mov rdi, rax	       608	convert.c	FUNCTION_18	CALL_4
0x40015c1	      0xe800000000	                          call 0x40015c6	       608	convert.c	FUNCTION_18	CALL_4
0x40015c6	        0x488945d0	             mov qword [rbp - 0x30], rax	       608	convert.c	FUNCTION_18	CALL_4
0x40015ca	          0x8b45e8	             mov eax, dword [rbp - 0x18]	       610	convert.c	FUNCTION_18	CALL_5
0x40015cd	            0x89c2	                            mov edx, eax	       610	convert.c	FUNCTION_18	CALL_5
0x40015cf	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       610	convert.c	FUNCTION_18	CALL_5
0x40015d3	          0x4801c2	                            add rdx, rax	       610	convert.c	FUNCTION_18	CALL_5
0x40015d6	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       610	convert.c	FUNCTION_18	CALL_5
0x40015da	          0x4889d6	                            mov rsi, rdx	       610	convert.c	FUNCTION_18	CALL_5
0x40015dd	          0x4889c7	                            mov rdi, rax	       610	convert.c	FUNCTION_18	CALL_5
0x40015e0	      0xe800000000	                          call 0x40015e5	       610	convert.c	FUNCTION_18	CALL_5
0x40015e5	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	       612	convert.c	FUNCTION_18	FOR_1	CALL_6
0x40015e9	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       612	convert.c	FUNCTION_18	FOR_1	CALL_6
0x40015ed	      0xbe0a000000	                            mov esi, 0xa	       612	convert.c	FUNCTION_18	FOR_1	CALL_6
0x40015f2	          0x4889c7	                            mov rdi, rax	       612	convert.c	FUNCTION_18	FOR_1	CALL_6
0x40015f5	      0xe800000000	                          call 0x40015fa	       612	convert.c	FUNCTION_18	FOR_1	CALL_6
0x40015fa	        0x488945d8	             mov qword [rbp - 0x28], rax	       612	convert.c	FUNCTION_18	FOR_1	CALL_6
0x40015fe	      0x48837dd800	               cmp qword [rbp - 0x28], 0	       613	convert.c	FUNCTION_18	FOR_1	IF_4
0x4001603	     0xf84a5000000	                            je 0x40016ae	       613	convert.c	FUNCTION_18	FOR_1	IF_4
0x4001609	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       615	convert.c	FUNCTION_18	FOR_1	IF_5
0x400160d	        0x483b45c0	             cmp rax, qword [rbp - 0x40]	       615	convert.c	FUNCTION_18	FOR_1	IF_5
0x4001611	            0x763c	                           jbe 0x400164f	       615	convert.c	FUNCTION_18	FOR_1	IF_5
0x4001613	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       615	convert.c	FUNCTION_18	FOR_1	IF_5
0x4001617	        0x4883e801	                              sub rax, 1	       615	convert.c	FUNCTION_18	FOR_1	IF_5
0x400161b	           0xfb600	                   movzx eax, byte [rax]	       615	convert.c	FUNCTION_18	FOR_1	IF_5
0x400161e	            0x3c0d	                             cmp al, 0xd	       615	convert.c	FUNCTION_18	FOR_1	IF_5
0x4001620	            0x752d	                           jne 0x400164f	       615	convert.c	FUNCTION_18	FOR_1	IF_5
0x4001622	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       616	convert.c	FUNCTION_18	FOR_1	IF_5	CALL_7
0x4001626	        0x4883c001	                              add rax, 1	       616	convert.c	FUNCTION_18	FOR_1	IF_5	CALL_7
0x400162a	          0x4889c2	                            mov rdx, rax	       616	convert.c	FUNCTION_18	FOR_1	IF_5	CALL_7
0x400162d	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       616	convert.c	FUNCTION_18	FOR_1	IF_5	CALL_7
0x4001631	          0x4829c2	                            sub rdx, rax	       616	convert.c	FUNCTION_18	FOR_1	IF_5	CALL_7
0x4001634	          0x4889d0	                            mov rax, rdx	       616	convert.c	FUNCTION_18	FOR_1	IF_5	CALL_7
0x4001637	          0x4889c2	                            mov rdx, rax	       616	convert.c	FUNCTION_18	FOR_1	IF_5	CALL_7
0x400163a	        0x488b4dc0	             mov rcx, qword [rbp - 0x40]	       616	convert.c	FUNCTION_18	FOR_1	IF_5	CALL_7
0x400163e	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       616	convert.c	FUNCTION_18	FOR_1	IF_5	CALL_7
0x4001642	          0x4889ce	                            mov rsi, rcx	       616	convert.c	FUNCTION_18	FOR_1	IF_5	CALL_7
0x4001645	          0x4889c7	                            mov rdi, rax	       616	convert.c	FUNCTION_18	FOR_1	IF_5	CALL_7
0x4001648	      0xe800000000	                          call 0x400164d	       616	convert.c	FUNCTION_18	FOR_1	IF_5	CALL_7
0x400164d	            0xeb35	                           jmp 0x4001684	       616	convert.c	FUNCTION_18	FOR_1	IF_5	CALL_7
0x400164f	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       618	convert.c	FUNCTION_18	FOR_1	ELSE_1	CALL_8
0x4001653	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       618	convert.c	FUNCTION_18	FOR_1	ELSE_1	CALL_8
0x4001657	          0x4829c2	                            sub rdx, rax	       618	convert.c	FUNCTION_18	FOR_1	ELSE_1	CALL_8
0x400165a	          0x4889d0	                            mov rax, rdx	       618	convert.c	FUNCTION_18	FOR_1	ELSE_1	CALL_8
0x400165d	          0x4889c2	                            mov rdx, rax	       618	convert.c	FUNCTION_18	FOR_1	ELSE_1	CALL_8
0x4001660	        0x488b4dc0	             mov rcx, qword [rbp - 0x40]	       618	convert.c	FUNCTION_18	FOR_1	ELSE_1	CALL_8
0x4001664	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       618	convert.c	FUNCTION_18	FOR_1	ELSE_1	CALL_8
0x4001668	          0x4889ce	                            mov rsi, rcx	       618	convert.c	FUNCTION_18	FOR_1	ELSE_1	CALL_8
0x400166b	          0x4889c7	                            mov rdi, rax	       618	convert.c	FUNCTION_18	FOR_1	ELSE_1	CALL_8
0x400166e	      0xe800000000	                          call 0x4001673	       618	convert.c	FUNCTION_18	FOR_1	ELSE_1	CALL_8
0x4001673	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       619	convert.c	FUNCTION_18	FOR_1	ELSE_1	CALL_9
0x4001677	      0xbe00000000	                              mov esi, 0	       619	convert.c	FUNCTION_18	FOR_1	ELSE_1	CALL_9
0x400167c	          0x4889c7	                            mov rdi, rax	       619	convert.c	FUNCTION_18	FOR_1	ELSE_1	CALL_9
0x400167f	      0xe8efebffff	                  call sym.strbuf_addstr	       619	convert.c	FUNCTION_18	FOR_1	ELSE_1	CALL_9
0x4001684	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       621	convert.c	FUNCTION_18	FOR_1
0x4001688	        0x4883c001	                              add rax, 1	       621	convert.c	FUNCTION_18	FOR_1
0x400168c	          0x4889c2	                            mov rdx, rax	       621	convert.c	FUNCTION_18	FOR_1
0x400168f	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       621	convert.c	FUNCTION_18	FOR_1
0x4001693	          0x4829c2	                            sub rdx, rax	       621	convert.c	FUNCTION_18	FOR_1
0x4001696	          0x4889d0	                            mov rax, rdx	       621	convert.c	FUNCTION_18	FOR_1
0x4001699	        0x482945b8	             sub qword [rbp - 0x48], rax	       621	convert.c	FUNCTION_18	FOR_1
0x400169d	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       622	convert.c	FUNCTION_18	FOR_1
0x40016a1	        0x4883c001	                              add rax, 1	       622	convert.c	FUNCTION_18	FOR_1
0x40016a5	        0x488945c0	             mov qword [rbp - 0x40], rax	       622	convert.c	FUNCTION_18	FOR_1
0x40016a9	      0xe937ffffff	                           jmp 0x40015e5	       623	convert.c	FUNCTION_18	FOR_1
0x40016ae	              0x90	                                     nop	       614	convert.c	FUNCTION_18	FOR_1	IF_4
0x40016af	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	       624	convert.c	FUNCTION_18	CALL_10
0x40016b3	        0x488b4dc0	             mov rcx, qword [rbp - 0x40]	       624	convert.c	FUNCTION_18	CALL_10
0x40016b7	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       624	convert.c	FUNCTION_18	CALL_10
0x40016bb	          0x4889ce	                            mov rsi, rcx	       624	convert.c	FUNCTION_18	CALL_10
0x40016be	          0x4889c7	                            mov rdi, rax	       624	convert.c	FUNCTION_18	CALL_10
0x40016c1	      0xe800000000	                          call 0x40016c6	       624	convert.c	FUNCTION_18	CALL_10
0x40016c6	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       626	convert.c	FUNCTION_18	CALL_11
0x40016ca	          0x4889c7	                            mov rdi, rax	       626	convert.c	FUNCTION_18	CALL_11
0x40016cd	      0xe800000000	                          call 0x40016d2	       626	convert.c	FUNCTION_18	CALL_11
0x40016d2	      0xb801000000	                              mov eax, 1	       627	convert.c	FUNCTION_18
0x40016d7	        0x488b75f8	                mov rsi, qword [rbp - 8]	       628	convert.c	FUNCTION_18
0x40016db	    0x644833342528	                xor rsi, qword fs:[0x28]	       628	convert.c	FUNCTION_18
0x40016e4	            0x7405	                            je 0x40016eb	       628	convert.c	FUNCTION_18
0x40016e6	      0xe800000000	                          call 0x40016eb	       628	convert.c	FUNCTION_18
0x40016eb	              0xc9	                                   leave	       628	convert.c	FUNCTION_18
0x40016ec	              0xc3	                                     ret	       628	convert.c	FUNCTION_18
ident_free_fn	ELSE,0:FOR,0:WHILE,0:IF,0:CALL,2:functions,0:SWITCH,0:DO,0	16
0x40042e2	              0x55	                                push rbp	      1898	convert.c	FUNCTION_56
0x40042e3	          0x4889e5	                            mov rbp, rsp	      1898	convert.c	FUNCTION_56
0x40042e6	        0x4883ec20	                           sub rsp, 0x20	      1898	convert.c	FUNCTION_56
0x40042ea	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1898	convert.c	FUNCTION_56
0x40042ee	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1899	convert.c	FUNCTION_56
0x40042f2	        0x488945f8	                mov qword [rbp - 8], rax	      1899	convert.c	FUNCTION_56
0x40042f6	        0x488b45f8	                mov rax, qword [rbp - 8]	      1900	convert.c	FUNCTION_56	CALL_1
0x40042fa	        0x4883c008	                              add rax, 8	      1900	convert.c	FUNCTION_56	CALL_1
0x40042fe	          0x4889c7	                            mov rdi, rax	      1900	convert.c	FUNCTION_56	CALL_1
0x4004301	      0xe800000000	                          call 0x4004306	      1900	convert.c	FUNCTION_56	CALL_1
0x4004306	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1901	convert.c	FUNCTION_56	CALL_2
0x400430a	          0x4889c7	                            mov rdi, rax	      1901	convert.c	FUNCTION_56	CALL_2
0x400430d	      0xe800000000	                          call 0x4004312	      1901	convert.c	FUNCTION_56	CALL_2
0x4004312	              0x90	                                     nop	      1902	convert.c	FUNCTION_56
0x4004313	              0xc9	                                   leave	      1902	convert.c	FUNCTION_56
0x4004314	              0xc3	                                     ret	      1902	convert.c	FUNCTION_56
has_crlf_in_index	ELSE,0:FOR,0:WHILE,0:IF,3:CALL,4:functions,0:SWITCH,0:DO,0	53
0x4000893	              0x55	                                push rbp	       225	convert.c	FUNCTION_10
0x4000894	          0x4889e5	                            mov rbp, rsp	       225	convert.c	FUNCTION_10
0x4000897	        0x4883ec40	                           sub rsp, 0x40	       225	convert.c	FUNCTION_10
0x400089b	        0x48897dc8	             mov qword [rbp - 0x38], rdi	       225	convert.c	FUNCTION_10
0x400089f	        0x488975c0	             mov qword [rbp - 0x40], rsi	       225	convert.c	FUNCTION_10
0x40008a3	    0x64488b042528	                mov rax, qword fs:[0x28]	       225	convert.c	FUNCTION_10
0x40008ac	        0x488945f8	                mov qword [rbp - 8], rax	       225	convert.c	FUNCTION_10
0x40008b0	            0x31c0	                            xor eax, eax	       225	convert.c	FUNCTION_10
0x40008b2	    0xc745d8000000	               mov dword [rbp - 0x28], 0	       229	convert.c	FUNCTION_10
0x40008b9	        0x488d55e0	                   lea rdx, [rbp - 0x20]	       231	convert.c	FUNCTION_10	CALL_1
0x40008bd	        0x488b4dc0	             mov rcx, qword [rbp - 0x40]	       231	convert.c	FUNCTION_10	CALL_1
0x40008c1	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       231	convert.c	FUNCTION_10	CALL_1
0x40008c5	          0x4889ce	                            mov rsi, rcx	       231	convert.c	FUNCTION_10	CALL_1
0x40008c8	          0x4889c7	                            mov rdi, rax	       231	convert.c	FUNCTION_10	CALL_1
0x40008cb	      0xe800000000	                          call 0x40008d0	       231	convert.c	FUNCTION_10	CALL_1
0x40008d0	        0x488945e8	             mov qword [rbp - 0x18], rax	       231	convert.c	FUNCTION_10	CALL_1
0x40008d4	      0x48837de800	               cmp qword [rbp - 0x18], 0	       232	convert.c	FUNCTION_10	IF_1
0x40008d9	            0x7507	                           jne 0x40008e2	       232	convert.c	FUNCTION_10	IF_1
0x40008db	      0xb800000000	                              mov eax, 0	       233	convert.c	FUNCTION_10	IF_1
0x40008e0	            0xeb60	                           jmp 0x4000942	       233	convert.c	FUNCTION_10	IF_1
0x40008e2	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       235	convert.c	FUNCTION_10	CALL_2
0x40008e6	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       235	convert.c	FUNCTION_10	CALL_2
0x40008ea	      0xbe0d000000	                            mov esi, 0xd	       235	convert.c	FUNCTION_10	CALL_2
0x40008ef	          0x4889c7	                            mov rdi, rax	       235	convert.c	FUNCTION_10	CALL_2
0x40008f2	      0xe800000000	                          call 0x40008f7	       235	convert.c	FUNCTION_10	CALL_2
0x40008f7	        0x488945f0	             mov qword [rbp - 0x10], rax	       235	convert.c	FUNCTION_10	CALL_2
0x40008fb	      0x48837df000	               cmp qword [rbp - 0x10], 0	       236	convert.c	FUNCTION_10	IF_2
0x4000900	            0x7431	                            je 0x4000933	       236	convert.c	FUNCTION_10	IF_2
0x4000902	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       238	convert.c	FUNCTION_10	IF_2	CALL_3
0x4000906	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       238	convert.c	FUNCTION_10	IF_2	CALL_3
0x400090a	          0x4889d6	                            mov rsi, rdx	       238	convert.c	FUNCTION_10	IF_2	CALL_3
0x400090d	          0x4889c7	                            mov rdi, rax	       238	convert.c	FUNCTION_10	IF_2	CALL_3
0x4000910	      0xe8bdfbffff	           call sym.gather_convert_stats	       238	convert.c	FUNCTION_10	IF_2	CALL_3
0x4000915	          0x8945dc	             mov dword [rbp - 0x24], eax	       238	convert.c	FUNCTION_10	IF_2	CALL_3
0x4000918	          0x8b45dc	             mov eax, dword [rbp - 0x24]	       239	convert.c	FUNCTION_10	IF_2	IF_3
0x400091b	          0x83e004	                              and eax, 4	       239	convert.c	FUNCTION_10	IF_2	IF_3
0x400091e	            0x85c0	                           test eax, eax	       239	convert.c	FUNCTION_10	IF_2	IF_3
0x4000920	            0x7511	                           jne 0x4000933	       239	convert.c	FUNCTION_10	IF_2	IF_3
0x4000922	          0x8b45dc	             mov eax, dword [rbp - 0x24]	       240	convert.c	FUNCTION_10	IF_2	IF_3
0x4000925	          0x83e002	                              and eax, 2	       240	convert.c	FUNCTION_10	IF_2	IF_3
0x4000928	            0x85c0	                           test eax, eax	       239	convert.c	FUNCTION_10	IF_2	IF_3
0x400092a	            0x7407	                            je 0x4000933	       239	convert.c	FUNCTION_10	IF_2	IF_3
0x400092c	    0xc745d8010000	               mov dword [rbp - 0x28], 1	       241	convert.c	FUNCTION_10	IF_2	IF_3
0x4000933	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       243	convert.c	FUNCTION_10	CALL_4
0x4000937	          0x4889c7	                            mov rdi, rax	       243	convert.c	FUNCTION_10	CALL_4
0x400093a	      0xe800000000	                          call 0x400093f	       243	convert.c	FUNCTION_10	CALL_4
0x400093f	          0x8b45d8	             mov eax, dword [rbp - 0x28]	       244	convert.c	FUNCTION_10
0x4000942	        0x488b4df8	                mov rcx, qword [rbp - 8]	       245	convert.c	FUNCTION_10
0x4000946	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       245	convert.c	FUNCTION_10
0x400094f	            0x7405	                            je 0x4000956	       245	convert.c	FUNCTION_10
0x4000951	      0xe800000000	                          call 0x4000956	       245	convert.c	FUNCTION_10
0x4000956	              0xc9	                                   leave	       245	convert.c	FUNCTION_10
0x4000957	              0xc3	                                     ret	       245	convert.c	FUNCTION_10
cascade_filter_fn	ELSE,0:FOR,0:WHILE,1:IF,8:CALL,3:functions,0:SWITCH,0:DO,0	187
0x4003b33	              0x55	                                push rbp	      1684	convert.c	FUNCTION_50
0x4003b34	          0x4889e5	                            mov rbp, rsp	      1684	convert.c	FUNCTION_50
0x4003b37	        0x4883ec70	                           sub rsp, 0x70	      1684	convert.c	FUNCTION_50
0x4003b3b	        0x48897db8	             mov qword [rbp - 0x48], rdi	      1684	convert.c	FUNCTION_50
0x4003b3f	        0x488975b0	             mov qword [rbp - 0x50], rsi	      1684	convert.c	FUNCTION_50
0x4003b43	        0x488955a8	             mov qword [rbp - 0x58], rdx	      1684	convert.c	FUNCTION_50
0x4003b47	        0x48894da0	             mov qword [rbp - 0x60], rcx	      1684	convert.c	FUNCTION_50
0x4003b4b	        0x4c894598	              mov qword [rbp - 0x68], r8	      1684	convert.c	FUNCTION_50
0x4003b4f	    0x64488b042528	                mov rax, qword fs:[0x28]	      1684	convert.c	FUNCTION_50
0x4003b58	        0x488945f8	                mov qword [rbp - 8], rax	      1684	convert.c	FUNCTION_50
0x4003b5c	            0x31c0	                            xor eax, eax	      1684	convert.c	FUNCTION_50
0x4003b5e	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1685	convert.c	FUNCTION_50
0x4003b62	        0x488945e0	             mov qword [rbp - 0x20], rax	      1685	convert.c	FUNCTION_50
0x4003b66	    0x48c745d80000	               mov qword [rbp - 0x28], 0	      1686	convert.c	FUNCTION_50
0x4003b6e	        0x488b4598	             mov rax, qword [rbp - 0x68]	      1687	convert.c	FUNCTION_50
0x4003b72	          0x488b00	                    mov rax, qword [rax]	      1687	convert.c	FUNCTION_50
0x4003b75	        0x488945e8	             mov qword [rbp - 0x18], rax	      1687	convert.c	FUNCTION_50
0x4003b79	      0xe93c020000	                           jmp 0x4003dba	      1693	convert.c	FUNCTION_50	WHILE_1
0x4003b7e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1694	convert.c	FUNCTION_50	WHILE_1
0x4003b82	        0x482b45d8	             sub rax, qword [rbp - 0x28]	      1694	convert.c	FUNCTION_50	WHILE_1
0x4003b86	        0x488945d0	             mov qword [rbp - 0x30], rax	      1694	convert.c	FUNCTION_50	WHILE_1
0x4003b8a	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1697	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003b8e	    0x8b901c040000	           mov edx, dword [rax + 0x41c] 	      1697	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003b94	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1697	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003b98	    0x8b8018040000	           mov eax, dword [rax + 0x418] 	      1697	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003b9e	            0x39c2	                            cmp edx, eax	      1697	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003ba0	     0xf8dbe000000	                           jge 0x4003c64	      1697	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003ba6	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1698	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003baa	    0x8b9018040000	           mov edx, dword [rax + 0x418] 	      1698	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003bb0	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1698	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003bb4	    0x8b801c040000	           mov eax, dword [rax + 0x41c] 	      1698	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003bba	            0x29c2	                            sub edx, eax	      1698	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003bbc	            0x89d0	                            mov eax, edx	      1698	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003bbe	            0x4898	                                    cdqe	      1698	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003bc0	        0x488945c8	             mov qword [rbp - 0x38], rax	      1698	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003bc4	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	      1699	convert.c	FUNCTION_50	WHILE_1	IF_1	IF_2	CALL_1
0x4003bc8	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1699	convert.c	FUNCTION_50	WHILE_1	IF_1	IF_2	CALL_1
0x4003bcc	        0x488d0c02	                    lea rcx, [rdx + rax]	      1699	convert.c	FUNCTION_50	WHILE_1	IF_1	IF_2	CALL_1
0x4003bd0	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1700	convert.c	FUNCTION_50	WHILE_1	IF_1	IF_2
0x4003bd4	        0x488d5018	                   lea rdx, [rax + 0x18]	      1700	convert.c	FUNCTION_50	WHILE_1	IF_1	IF_2
0x4003bd8	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1700	convert.c	FUNCTION_50	WHILE_1	IF_1	IF_2
0x4003bdc	    0x8b801c040000	           mov eax, dword [rax + 0x41c] 	      1700	convert.c	FUNCTION_50	WHILE_1	IF_1	IF_2
0x4003be2	            0x4898	                                    cdqe	      1699	convert.c	FUNCTION_50	WHILE_1	IF_1	IF_2	CALL_1
0x4003be4	        0x488d3402	                    lea rsi, [rdx + rax]	      1699	convert.c	FUNCTION_50	WHILE_1	IF_1	IF_2	CALL_1
0x4003be8	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1699	convert.c	FUNCTION_50	WHILE_1	IF_1	IF_2	CALL_1
0x4003bec	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1699	convert.c	FUNCTION_50	WHILE_1	IF_1	IF_2	CALL_1
0x4003bf0	        0x488d7dd0	                   lea rdi, [rbp - 0x30]	      1699	convert.c	FUNCTION_50	WHILE_1	IF_1	IF_2	CALL_1
0x4003bf4	        0x488d55c8	                   lea rdx, [rbp - 0x38]	      1699	convert.c	FUNCTION_50	WHILE_1	IF_1	IF_2	CALL_1
0x4003bf8	          0x4989f8	                             mov r8, rdi	      1699	convert.c	FUNCTION_50	WHILE_1	IF_1	IF_2	CALL_1
0x4003bfb	          0x4889c7	                            mov rdi, rax	      1699	convert.c	FUNCTION_50	WHILE_1	IF_1	IF_2	CALL_1
0x4003bfe	      0xe800000000	                          call 0x4003c03	      1699	convert.c	FUNCTION_50	WHILE_1	IF_1	IF_2	CALL_1
0x4003c03	            0x85c0	                           test eax, eax	      1699	convert.c	FUNCTION_50	WHILE_1	IF_1	IF_2	CALL_1
0x4003c05	            0x740a	                            je 0x4003c11	      1699	convert.c	FUNCTION_50	WHILE_1	IF_1	IF_2	CALL_1
0x4003c07	      0xb8ffffffff	                     mov eax, 0xffffffff	      1702	convert.c	FUNCTION_50	WHILE_1	IF_1	IF_2
0x4003c0c	      0xe9d7010000	                           jmp 0x4003de8	      1702	convert.c	FUNCTION_50	WHILE_1	IF_1	IF_2
0x4003c11	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1703	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003c15	    0x8b801c040000	           mov eax, dword [rax + 0x41c] 	      1703	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003c1b	            0x89c1	                            mov ecx, eax	      1703	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003c1d	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1703	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003c21	    0x8b9018040000	           mov edx, dword [rax + 0x418] 	      1703	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003c27	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1703	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003c2b	    0x8b801c040000	           mov eax, dword [rax + 0x41c] 	      1703	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003c31	            0x29c2	                            sub edx, eax	      1703	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003c33	            0x89d0	                            mov eax, edx	      1703	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003c35	            0x89c2	                            mov edx, eax	      1703	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003c37	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1703	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003c3b	            0x29c2	                            sub edx, eax	      1703	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003c3d	            0x89d0	                            mov eax, edx	      1703	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003c3f	             0x1c8	                            add eax, ecx	      1703	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003c41	            0x89c2	                            mov edx, eax	      1703	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003c43	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1703	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003c47	    0x89901c040000	            mov dword [rax + 0x41c], edx	      1703	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003c4d	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1704	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003c51	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      1704	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003c55	          0x4829c2	                            sub rdx, rax	      1704	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003c58	          0x4889d0	                            mov rax, rdx	      1704	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003c5b	        0x488945d8	             mov qword [rbp - 0x28], rax	      1704	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003c5f	      0xe956010000	                           jmp 0x4003dba	      1705	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003c64	      0x48837db000	               cmp qword [rbp - 0x50], 0	      1709	convert.c	FUNCTION_50	WHILE_1
0x4003c69	            0x7409	                            je 0x4003c74	      1709	convert.c	FUNCTION_50	WHILE_1
0x4003c6b	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1709	convert.c	FUNCTION_50	WHILE_1
0x4003c6f	          0x488b00	                    mov rax, qword [rax]	      1709	convert.c	FUNCTION_50	WHILE_1
0x4003c72	            0xeb05	                           jmp 0x4003c79	      1709	convert.c	FUNCTION_50	WHILE_1
0x4003c74	      0xb800000000	                              mov eax, 0	      1709	convert.c	FUNCTION_50	WHILE_1
0x4003c79	        0x488945c8	             mov qword [rbp - 0x38], rax	      1709	convert.c	FUNCTION_50	WHILE_1
0x4003c7d	      0x48837db000	               cmp qword [rbp - 0x50], 0	      1710	convert.c	FUNCTION_50	WHILE_1	IF_3
0x4003c82	            0x740d	                            je 0x4003c91	      1710	convert.c	FUNCTION_50	WHILE_1	IF_3
0x4003c84	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1710	convert.c	FUNCTION_50	WHILE_1	IF_3
0x4003c88	          0x4885c0	                           test rax, rax	      1710	convert.c	FUNCTION_50	WHILE_1	IF_3
0x4003c8b	     0xf8439010000	                            je 0x4003dca	      1710	convert.c	FUNCTION_50	WHILE_1	IF_3
0x4003c91	    0x48c745d00004	          mov qword [rbp - 0x30], 0x400 	      1712	convert.c	FUNCTION_50	WHILE_1
0x4003c99	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1715	convert.c	FUNCTION_50	WHILE_1	IF_4
0x4003c9d	        0x488d4818	                   lea rcx, [rax + 0x18]	      1715	convert.c	FUNCTION_50	WHILE_1	IF_4
0x4003ca1	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1713	convert.c	FUNCTION_50	WHILE_1	IF_4	CALL_2
0x4003ca5	        0x488b4008	                mov rax, qword [rax + 8]	      1713	convert.c	FUNCTION_50	WHILE_1	IF_4	CALL_2
0x4003ca9	        0x488d7dd0	                   lea rdi, [rbp - 0x30]	      1713	convert.c	FUNCTION_50	WHILE_1	IF_4	CALL_2
0x4003cad	        0x488d55c8	                   lea rdx, [rbp - 0x38]	      1713	convert.c	FUNCTION_50	WHILE_1	IF_4	CALL_2
0x4003cb1	        0x488b75b0	             mov rsi, qword [rbp - 0x50]	      1713	convert.c	FUNCTION_50	WHILE_1	IF_4	CALL_2
0x4003cb5	          0x4989f8	                             mov r8, rdi	      1713	convert.c	FUNCTION_50	WHILE_1	IF_4	CALL_2
0x4003cb8	          0x4889c7	                            mov rdi, rax	      1713	convert.c	FUNCTION_50	WHILE_1	IF_4	CALL_2
0x4003cbb	      0xe800000000	                          call 0x4003cc0	      1713	convert.c	FUNCTION_50	WHILE_1	IF_4	CALL_2
0x4003cc0	            0x85c0	                           test eax, eax	      1713	convert.c	FUNCTION_50	WHILE_1	IF_4	CALL_2
0x4003cc2	            0x740a	                            je 0x4003cce	      1713	convert.c	FUNCTION_50	WHILE_1	IF_4	CALL_2
0x4003cc4	      0xb8ffffffff	                     mov eax, 0xffffffff	      1716	convert.c	FUNCTION_50	WHILE_1	IF_4
0x4003cc9	      0xe91a010000	                           jmp 0x4003de8	      1716	convert.c	FUNCTION_50	WHILE_1	IF_4
0x4003cce	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1717	convert.c	FUNCTION_50	WHILE_1
0x4003cd2	      0xba00040000	                          mov edx, 0x400	      1717	convert.c	FUNCTION_50	WHILE_1
0x4003cd7	            0x29c2	                            sub edx, eax	      1717	convert.c	FUNCTION_50	WHILE_1
0x4003cd9	            0x89d0	                            mov eax, edx	      1717	convert.c	FUNCTION_50	WHILE_1
0x4003cdb	            0x89c2	                            mov edx, eax	      1717	convert.c	FUNCTION_50	WHILE_1
0x4003cdd	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1717	convert.c	FUNCTION_50	WHILE_1
0x4003ce1	    0x899018040000	            mov dword [rax + 0x418], edx	      1717	convert.c	FUNCTION_50	WHILE_1
0x4003ce7	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1718	convert.c	FUNCTION_50	WHILE_1
0x4003ceb	    0xc7801c040000	              mov dword [rax + 0x41c], 0	      1718	convert.c	FUNCTION_50	WHILE_1
0x4003cf5	      0x48837db000	               cmp qword [rbp - 0x50], 0	      1719	convert.c	FUNCTION_50	WHILE_1	IF_5
0x4003cfa	            0x7432	                            je 0x4003d2e	      1719	convert.c	FUNCTION_50	WHILE_1	IF_5
0x4003cfc	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1720	convert.c	FUNCTION_50	WHILE_1	IF_5
0x4003d00	          0x488b10	                    mov rdx, qword [rax]	      1720	convert.c	FUNCTION_50	WHILE_1	IF_5
0x4003d03	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1720	convert.c	FUNCTION_50	WHILE_1	IF_5
0x4003d07	          0x4829c2	                            sub rdx, rax	      1720	convert.c	FUNCTION_50	WHILE_1	IF_5
0x4003d0a	          0x4889d0	                            mov rax, rdx	      1720	convert.c	FUNCTION_50	WHILE_1	IF_5
0x4003d0d	        0x488945f0	             mov qword [rbp - 0x10], rax	      1720	convert.c	FUNCTION_50	WHILE_1	IF_5
0x4003d11	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1721	convert.c	FUNCTION_50	WHILE_1	IF_5
0x4003d15	          0x488b00	                    mov rax, qword [rax]	      1721	convert.c	FUNCTION_50	WHILE_1	IF_5
0x4003d18	        0x482b45f0	             sub rax, qword [rbp - 0x10]	      1721	convert.c	FUNCTION_50	WHILE_1	IF_5
0x4003d1c	          0x4889c2	                            mov rdx, rax	      1721	convert.c	FUNCTION_50	WHILE_1	IF_5
0x4003d1f	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1721	convert.c	FUNCTION_50	WHILE_1	IF_5
0x4003d23	          0x488910	                    mov qword [rax], rdx	      1721	convert.c	FUNCTION_50	WHILE_1	IF_5
0x4003d26	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1722	convert.c	FUNCTION_50	WHILE_1	IF_5
0x4003d2a	        0x480145b0	            add qword [rbp - 0x50], rax 	      1722	convert.c	FUNCTION_50	WHILE_1	IF_5
0x4003d2e	      0x48837db000	               cmp qword [rbp - 0x50], 0	      1726	convert.c	FUNCTION_50	WHILE_1	IF_6
0x4003d33	     0xf8581000000	                           jne 0x4003dba	      1726	convert.c	FUNCTION_50	WHILE_1	IF_6
0x4003d39	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1726	convert.c	FUNCTION_50	WHILE_1	IF_6
0x4003d3d	    0x8b8018040000	           mov eax, dword [rax + 0x418] 	      1726	convert.c	FUNCTION_50	WHILE_1	IF_6
0x4003d43	            0x85c0	                           test eax, eax	      1726	convert.c	FUNCTION_50	WHILE_1	IF_6
0x4003d45	            0x7402	                            je 0x4003d49	      1726	convert.c	FUNCTION_50	WHILE_1	IF_6
0x4003d47	            0xeb71	                           jmp 0x4003dba	      1727	convert.c	FUNCTION_50	WHILE_1	IF_6
0x4003d49	    0x48c745c80000	               mov qword [rbp - 0x38], 0	      1730	convert.c	FUNCTION_50	WHILE_1
0x4003d51	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1731	convert.c	FUNCTION_50	WHILE_1
0x4003d55	        0x482b45d8	             sub rax, qword [rbp - 0x28]	      1731	convert.c	FUNCTION_50	WHILE_1
0x4003d59	        0x488945d0	             mov qword [rbp - 0x30], rax	      1731	convert.c	FUNCTION_50	WHILE_1
0x4003d5d	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	      1732	convert.c	FUNCTION_50	WHILE_1	IF_7	CALL_3
0x4003d61	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1732	convert.c	FUNCTION_50	WHILE_1	IF_7	CALL_3
0x4003d65	        0x488d0c02	                    lea rcx, [rdx + rax]	      1732	convert.c	FUNCTION_50	WHILE_1	IF_7	CALL_3
0x4003d69	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1732	convert.c	FUNCTION_50	WHILE_1	IF_7	CALL_3
0x4003d6d	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1732	convert.c	FUNCTION_50	WHILE_1	IF_7	CALL_3
0x4003d71	        0x488d75d0	                   lea rsi, [rbp - 0x30]	      1732	convert.c	FUNCTION_50	WHILE_1	IF_7	CALL_3
0x4003d75	        0x488d55c8	                   lea rdx, [rbp - 0x38]	      1732	convert.c	FUNCTION_50	WHILE_1	IF_7	CALL_3
0x4003d79	          0x4989f0	                             mov r8, rsi	      1732	convert.c	FUNCTION_50	WHILE_1	IF_7	CALL_3
0x4003d7c	      0xbe00000000	                              mov esi, 0	      1732	convert.c	FUNCTION_50	WHILE_1	IF_7	CALL_3
0x4003d81	          0x4889c7	                            mov rdi, rax	      1732	convert.c	FUNCTION_50	WHILE_1	IF_7	CALL_3
0x4003d84	      0xe800000000	                          call 0x4003d89	      1732	convert.c	FUNCTION_50	WHILE_1	IF_7	CALL_3
0x4003d89	            0x85c0	                           test eax, eax	      1732	convert.c	FUNCTION_50	WHILE_1	IF_7	CALL_3
0x4003d8b	            0x7407	                            je 0x4003d94	      1732	convert.c	FUNCTION_50	WHILE_1	IF_7	CALL_3
0x4003d8d	      0xb8ffffffff	                     mov eax, 0xffffffff	      1735	convert.c	FUNCTION_50	WHILE_1	IF_7
0x4003d92	            0xeb54	                           jmp 0x4003de8	      1735	convert.c	FUNCTION_50	WHILE_1	IF_7
0x4003d94	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1736	convert.c	FUNCTION_50	WHILE_1	IF_8
0x4003d98	        0x482b45d8	             sub rax, qword [rbp - 0x28]	      1736	convert.c	FUNCTION_50	WHILE_1	IF_8
0x4003d9c	          0x4889c2	                            mov rdx, rax	      1736	convert.c	FUNCTION_50	WHILE_1	IF_8
0x4003d9f	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1736	convert.c	FUNCTION_50	WHILE_1	IF_8
0x4003da3	          0x4839c2	                            cmp rdx, rax	      1736	convert.c	FUNCTION_50	WHILE_1	IF_8
0x4003da6	            0x7425	                            je 0x4003dcd	      1736	convert.c	FUNCTION_50	WHILE_1	IF_8
0x4003da8	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1738	convert.c	FUNCTION_50	WHILE_1
0x4003dac	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      1738	convert.c	FUNCTION_50	WHILE_1
0x4003db0	          0x4829c2	                            sub rdx, rax	      1738	convert.c	FUNCTION_50	WHILE_1
0x4003db3	          0x4889d0	                            mov rax, rdx	      1738	convert.c	FUNCTION_50	WHILE_1
0x4003db6	        0x488945d8	             mov qword [rbp - 0x28], rax	      1738	convert.c	FUNCTION_50	WHILE_1
0x4003dba	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1693	convert.c	FUNCTION_50	WHILE_1
0x4003dbe	        0x483b45e8	             cmp rax, qword [rbp - 0x18]	      1693	convert.c	FUNCTION_50	WHILE_1
0x4003dc2	     0xf82b6fdffff	                            jb 0x4003b7e	      1693	convert.c	FUNCTION_50	WHILE_1
0x4003dc8	            0xeb04	                           jmp 0x4003dce	      1693	convert.c	FUNCTION_50	WHILE_1
0x4003dca	              0x90	                                     nop	      1711	convert.c	FUNCTION_50	WHILE_1	IF_3
0x4003dcb	            0xeb01	                           jmp 0x4003dce	      1711	convert.c	FUNCTION_50	WHILE_1	IF_3
0x4003dcd	              0x90	                                     nop	      1737	convert.c	FUNCTION_50	WHILE_1	IF_8
0x4003dce	        0x488b4598	             mov rax, qword [rbp - 0x68]	      1740	convert.c	FUNCTION_50
0x4003dd2	          0x488b00	                    mov rax, qword [rax]	      1740	convert.c	FUNCTION_50
0x4003dd5	        0x482b45d8	             sub rax, qword [rbp - 0x28]	      1740	convert.c	FUNCTION_50
0x4003dd9	          0x4889c2	                            mov rdx, rax	      1740	convert.c	FUNCTION_50
0x4003ddc	        0x488b4598	             mov rax, qword [rbp - 0x68]	      1740	convert.c	FUNCTION_50
0x4003de0	          0x488910	                    mov qword [rax], rdx	      1740	convert.c	FUNCTION_50
0x4003de3	      0xb800000000	                              mov eax, 0	      1741	convert.c	FUNCTION_50
0x4003de8	        0x488b7df8	                mov rdi, qword [rbp - 8]	      1742	convert.c	FUNCTION_50
0x4003dec	    0x6448333c2528	                xor rdi, qword fs:[0x28]	      1742	convert.c	FUNCTION_50
0x4003df5	            0x7405	                            je 0x4003dfc	      1742	convert.c	FUNCTION_50
0x4003df7	      0xe800000000	                          call 0x4003dfc	      1742	convert.c	FUNCTION_50
0x4003dfc	              0xc9	                                   leave	      1742	convert.c	FUNCTION_50
0x4003dfd	              0xc3	                                     ret	      1742	convert.c	FUNCTION_50
count_ident	ELSE,0:FOR,0:WHILE,2:IF,7:CALL,1:functions,0:SWITCH,0:DO,0	59
0x400264f	              0x55	                                push rbp	      1049	convert.c	FUNCTION_27
0x4002650	          0x4889e5	                            mov rbp, rsp	      1049	convert.c	FUNCTION_27
0x4002653	        0x4883ec20	                           sub rsp, 0x20	      1049	convert.c	FUNCTION_27
0x4002657	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1049	convert.c	FUNCTION_27
0x400265b	        0x488975e0	             mov qword [rbp - 0x20], rsi	      1049	convert.c	FUNCTION_27
0x400265f	    0xc745fc000000	                  mov dword [rbp - 4], 0	      1053	convert.c	FUNCTION_27
0x4002666	      0xe9a2000000	                           jmp 0x400270d	      1056	convert.c	FUNCTION_27	WHILE_1
0x400266b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1057	convert.c	FUNCTION_27	WHILE_1
0x400266f	        0x488d5001	                      lea rdx, [rax + 1]	      1057	convert.c	FUNCTION_27	WHILE_1
0x4002673	        0x488955e8	             mov qword [rbp - 0x18], rdx	      1057	convert.c	FUNCTION_27	WHILE_1
0x4002677	           0xfb600	                   movzx eax, byte [rax]	      1057	convert.c	FUNCTION_27	WHILE_1
0x400267a	          0x8845fb	                  mov byte [rbp - 5], al	      1057	convert.c	FUNCTION_27	WHILE_1
0x400267d	      0x48836de001	               sub qword [rbp - 0x20], 1	      1058	convert.c	FUNCTION_27	WHILE_1
0x4002682	        0x807dfb24	                cmp byte [rbp - 5], 0x24	      1059	convert.c	FUNCTION_27	WHILE_1	IF_1
0x4002686	            0x7405	                            je 0x400268d	      1059	convert.c	FUNCTION_27	WHILE_1	IF_1
0x4002688	      0xe980000000	                           jmp 0x400270d	      1060	convert.c	FUNCTION_27	WHILE_1	IF_1
0x400268d	      0x48837de002	               cmp qword [rbp - 0x20], 2	      1061	convert.c	FUNCTION_27	WHILE_1	IF_2
0x4002692	     0xf8682000000	                           jbe 0x400271a	      1061	convert.c	FUNCTION_27	WHILE_1	IF_2
0x4002698	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1063	convert.c	FUNCTION_27	WHILE_1	IF_3	CALL_1
0x400269c	      0xba02000000	                              mov edx, 2	      1063	convert.c	FUNCTION_27	WHILE_1	IF_3	CALL_1
0x40026a1	          0x4889c6	                            mov rsi, rax	      1063	convert.c	FUNCTION_27	WHILE_1	IF_3	CALL_1
0x40026a4	      0xbf00000000	                              mov edi, 0	      1063	convert.c	FUNCTION_27	WHILE_1	IF_3	CALL_1
0x40026a9	      0xe800000000	                          call 0x40026ae	      1063	convert.c	FUNCTION_27	WHILE_1	IF_3	CALL_1
0x40026ae	            0x85c0	                           test eax, eax	      1063	convert.c	FUNCTION_27	WHILE_1	IF_3	CALL_1
0x40026b0	            0x7402	                            je 0x40026b4	      1063	convert.c	FUNCTION_27	WHILE_1	IF_3	CALL_1
0x40026b2	            0xeb59	                           jmp 0x400270d	      1064	convert.c	FUNCTION_27	WHILE_1	IF_3
0x40026b4	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1065	convert.c	FUNCTION_27	WHILE_1
0x40026b8	         0xfb64002	               movzx eax, byte [rax + 2]	      1065	convert.c	FUNCTION_27	WHILE_1
0x40026bc	          0x8845fb	                  mov byte [rbp - 5], al	      1065	convert.c	FUNCTION_27	WHILE_1
0x40026bf	      0x488345e803	               add qword [rbp - 0x18], 3	      1066	convert.c	FUNCTION_27	WHILE_1
0x40026c4	      0x48836de003	               sub qword [rbp - 0x20], 3	      1067	convert.c	FUNCTION_27	WHILE_1
0x40026c9	        0x807dfb24	                cmp byte [rbp - 5], 0x24	      1068	convert.c	FUNCTION_27	WHILE_1	IF_4
0x40026cd	            0x7504	                           jne 0x40026d3	      1068	convert.c	FUNCTION_27	WHILE_1	IF_4
0x40026cf	        0x8345fc01	                  add dword [rbp - 4], 1	      1069	convert.c	FUNCTION_27	WHILE_1	IF_4
0x40026d3	        0x807dfb3a	                cmp byte [rbp - 5], 0x3a	      1070	convert.c	FUNCTION_27	WHILE_1	IF_5
0x40026d7	            0x742d	                            je 0x4002706	      1070	convert.c	FUNCTION_27	WHILE_1	IF_5
0x40026d9	            0xeb32	                           jmp 0x400270d	      1071	convert.c	FUNCTION_27	WHILE_1	IF_5
0x40026db	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1077	convert.c	FUNCTION_27	WHILE_1	WHILE_2
0x40026df	        0x488d5001	                      lea rdx, [rax + 1]	      1077	convert.c	FUNCTION_27	WHILE_1	WHILE_2
0x40026e3	        0x488955e8	             mov qword [rbp - 0x18], rdx	      1077	convert.c	FUNCTION_27	WHILE_1	WHILE_2
0x40026e7	           0xfb600	                   movzx eax, byte [rax]	      1077	convert.c	FUNCTION_27	WHILE_1	WHILE_2
0x40026ea	          0x8845fb	                  mov byte [rbp - 5], al	      1077	convert.c	FUNCTION_27	WHILE_1	WHILE_2
0x40026ed	      0x48836de001	               sub qword [rbp - 0x20], 1	      1078	convert.c	FUNCTION_27	WHILE_1	WHILE_2
0x40026f2	        0x807dfb24	                cmp byte [rbp - 5], 0x24	      1079	convert.c	FUNCTION_27	WHILE_1	WHILE_2	IF_6
0x40026f6	            0x7506	                           jne 0x40026fe	      1079	convert.c	FUNCTION_27	WHILE_1	WHILE_2	IF_6
0x40026f8	        0x8345fc01	                  add dword [rbp - 4], 1	      1080	convert.c	FUNCTION_27	WHILE_1	WHILE_2	IF_6
0x40026fc	            0xeb0f	                           jmp 0x400270d	      1081	convert.c	FUNCTION_27	WHILE_1	WHILE_2	IF_6
0x40026fe	        0x807dfb0a	                 cmp byte [rbp - 5], 0xa	      1083	convert.c	FUNCTION_27	WHILE_1	WHILE_2	IF_7
0x4002702	            0x7502	                           jne 0x4002706	      1083	convert.c	FUNCTION_27	WHILE_1	WHILE_2	IF_7
0x4002704	            0xeb07	                           jmp 0x400270d	      1084	convert.c	FUNCTION_27	WHILE_1	WHILE_2	IF_7
0x4002706	      0x48837de000	               cmp qword [rbp - 0x20], 0	      1076	convert.c	FUNCTION_27	WHILE_1	WHILE_2
0x400270b	            0x75ce	                           jne 0x40026db	      1076	convert.c	FUNCTION_27	WHILE_1	WHILE_2
0x400270d	      0x48837de000	               cmp qword [rbp - 0x20], 0	      1056	convert.c	FUNCTION_27	WHILE_1
0x4002712	     0xf8553ffffff	                           jne 0x400266b	      1056	convert.c	FUNCTION_27	WHILE_1
0x4002718	            0xeb01	                           jmp 0x400271b	      1056	convert.c	FUNCTION_27	WHILE_1
0x400271a	              0x90	                                     nop	      1062	convert.c	FUNCTION_27	WHILE_1	IF_2
0x400271b	          0x8b45fc	                mov eax, dword [rbp - 4]	      1087	convert.c	FUNCTION_27
0x400271e	              0xc9	                                   leave	      1088	convert.c	FUNCTION_27
0x400271f	              0xc3	                                     ret	      1088	convert.c	FUNCTION_27
convert_to_git_filter_fd	ELSE,0:FOR,0:WHILE,0:IF,1:CALL,8:functions,0:SWITCH,0:DO,0	103
0x40033cb	              0x55	                                push rbp	      1424	convert.c	FUNCTION_39
0x40033cc	          0x4889e5	                            mov rbp, rsp	      1424	convert.c	FUNCTION_39
0x40033cf	        0x4883ec50	                           sub rsp, 0x50	      1424	convert.c	FUNCTION_39
0x40033d3	        0x48897dc8	             mov qword [rbp - 0x38], rdi	      1424	convert.c	FUNCTION_39
0x40033d7	        0x488975c0	             mov qword [rbp - 0x40], rsi	      1424	convert.c	FUNCTION_39
0x40033db	          0x8955bc	             mov dword [rbp - 0x44], edx	      1424	convert.c	FUNCTION_39
0x40033de	        0x48894db0	             mov qword [rbp - 0x50], rcx	      1424	convert.c	FUNCTION_39
0x40033e2	        0x448945b8	             mov dword [rbp - 0x48], r8d	      1424	convert.c	FUNCTION_39
0x40033e6	    0x64488b042528	                mov rax, qword fs:[0x28]	      1424	convert.c	FUNCTION_39
0x40033ef	        0x488945f8	                mov qword [rbp - 8], rax	      1424	convert.c	FUNCTION_39
0x40033f3	            0x31c0	                            xor eax, eax	      1424	convert.c	FUNCTION_39
0x40033f5	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      1426	convert.c	FUNCTION_39	CALL_1
0x40033f9	        0x488d45d0	                   lea rax, [rbp - 0x30]	      1426	convert.c	FUNCTION_39	CALL_1
0x40033fd	          0x4889d6	                            mov rsi, rdx	      1426	convert.c	FUNCTION_39	CALL_1
0x4003400	          0x4889c7	                            mov rdi, rax	      1426	convert.c	FUNCTION_39	CALL_1
0x4003403	      0xe87afaffff	                  call sym.convert_attrs	      1426	convert.c	FUNCTION_39	CALL_1
0x4003408	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1428	convert.c	FUNCTION_39	CALL_2
0x400340c	          0x4885c0	                           test rax, rax	      1428	convert.c	FUNCTION_39	CALL_2
0x400340f	            0x7519	                           jne 0x400342a	      1428	convert.c	FUNCTION_39	CALL_2
0x4003411	      0xb900000000	                              mov ecx, 0	      1428	convert.c	FUNCTION_39	CALL_2
0x4003416	      0xba94050000	                          mov edx, 0x594	      1428	convert.c	FUNCTION_39	CALL_2
0x400341b	      0xbe00000000	                              mov esi, 0	      1428	convert.c	FUNCTION_39	CALL_2
0x4003420	      0xbf00000000	                              mov edi, 0	      1428	convert.c	FUNCTION_39	CALL_2
0x4003425	      0xe800000000	                          call 0x400342a	      1428	convert.c	FUNCTION_39	CALL_2
0x400342a	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1429	convert.c	FUNCTION_39	CALL_3
0x400342e	        0x488b4018	            mov rax, qword [rax + 0x18] 	      1429	convert.c	FUNCTION_39	CALL_3
0x4003432	          0x4885c0	                           test rax, rax	      1429	convert.c	FUNCTION_39	CALL_3
0x4003435	            0x7526	                           jne 0x400345d	      1429	convert.c	FUNCTION_39	CALL_3
0x4003437	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1429	convert.c	FUNCTION_39	CALL_3
0x400343b	        0x488b4020	            mov rax, qword [rax + 0x20] 	      1429	convert.c	FUNCTION_39	CALL_3
0x400343f	          0x4885c0	                           test rax, rax	      1429	convert.c	FUNCTION_39	CALL_3
0x4003442	            0x7519	                           jne 0x400345d	      1429	convert.c	FUNCTION_39	CALL_3
0x4003444	      0xb900000000	                              mov ecx, 0	      1429	convert.c	FUNCTION_39	CALL_3
0x4003449	      0xba95050000	                          mov edx, 0x595	      1429	convert.c	FUNCTION_39	CALL_3
0x400344e	      0xbe00000000	                              mov esi, 0	      1429	convert.c	FUNCTION_39	CALL_3
0x4003453	      0xbf00000000	                              mov edi, 0	      1429	convert.c	FUNCTION_39	CALL_3
0x4003458	      0xe800000000	                          call 0x400345d	      1429	convert.c	FUNCTION_39	CALL_3
0x400345d	        0x488b75d0	             mov rsi, qword [rbp - 0x30]	      1431	convert.c	FUNCTION_39	IF_1	CALL_4
0x4003461	        0x488b4db0	             mov rcx, qword [rbp - 0x50]	      1431	convert.c	FUNCTION_39	IF_1	CALL_4
0x4003465	          0x8b55bc	             mov edx, dword [rbp - 0x44]	      1431	convert.c	FUNCTION_39	IF_1	CALL_4
0x4003468	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      1431	convert.c	FUNCTION_39	IF_1	CALL_4
0x400346c	            0x6a00	                                  push 0	      1431	convert.c	FUNCTION_39	IF_1	CALL_4
0x400346e	            0x6a01	                                  push 1	      1431	convert.c	FUNCTION_39	IF_1	CALL_4
0x4003470	          0x4989f1	                             mov r9, rsi	      1431	convert.c	FUNCTION_39	IF_1	CALL_4
0x4003473	          0x4989c8	                             mov r8, rcx	      1431	convert.c	FUNCTION_39	IF_1	CALL_4
0x4003476	            0x89d1	                            mov ecx, edx	      1431	convert.c	FUNCTION_39	IF_1	CALL_4
0x4003478	      0xba00000000	                              mov edx, 0	      1431	convert.c	FUNCTION_39	IF_1	CALL_4
0x400347d	      0xbe00000000	                              mov esi, 0	      1431	convert.c	FUNCTION_39	IF_1	CALL_4
0x4003482	          0x4889c7	                            mov rdi, rax	      1431	convert.c	FUNCTION_39	IF_1	CALL_4
0x4003485	      0xe899eeffff	                   call sym.apply_filter	      1431	convert.c	FUNCTION_39	IF_1	CALL_4
0x400348a	        0x4883c410	                           add rsp, 0x10	      1431	convert.c	FUNCTION_39	IF_1	CALL_4
0x400348e	            0x85c0	                           test eax, eax	      1431	convert.c	FUNCTION_39	IF_1	CALL_4
0x4003490	            0x751d	                           jne 0x40034af	      1431	convert.c	FUNCTION_39	IF_1	CALL_4
0x4003492	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1432	convert.c	FUNCTION_39	CALL_5
0x4003496	          0x488b10	                    mov rdx, qword [rax]	      1432	convert.c	FUNCTION_39	CALL_5
0x4003499	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      1432	convert.c	FUNCTION_39	CALL_5
0x400349d	          0x4889c6	                            mov rsi, rax	      1432	convert.c	FUNCTION_39	CALL_5
0x40034a0	      0xbf00000000	                              mov edi, 0	      1432	convert.c	FUNCTION_39	CALL_5
0x40034a5	      0xb800000000	                              mov eax, 0	      1432	convert.c	FUNCTION_39	CALL_5
0x40034aa	      0xe800000000	                          call 0x40034af	      1432	convert.c	FUNCTION_39	CALL_5
0x40034af	        0x488b7de8	             mov rdi, qword [rbp - 0x18]	      1434	convert.c	FUNCTION_39	CALL_6
0x40034b3	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1434	convert.c	FUNCTION_39	CALL_6
0x40034b7	        0x488b5008	                mov rdx, qword [rax + 8]	      1434	convert.c	FUNCTION_39	CALL_6
0x40034bb	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1434	convert.c	FUNCTION_39	CALL_6
0x40034bf	        0x488b7010	            mov rsi, qword [rax + 0x10] 	      1434	convert.c	FUNCTION_39	CALL_6
0x40034c3	        0x448b45b8	             mov r8d, dword [rbp - 0x48]	      1434	convert.c	FUNCTION_39	CALL_6
0x40034c7	        0x488b4db0	             mov rcx, qword [rbp - 0x50]	      1434	convert.c	FUNCTION_39	CALL_6
0x40034cb	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      1434	convert.c	FUNCTION_39	CALL_6
0x40034cf	          0x4589c1	                            mov r9d, r8d	      1434	convert.c	FUNCTION_39	CALL_6
0x40034d2	          0x4989f8	                             mov r8, rdi	      1434	convert.c	FUNCTION_39	CALL_6
0x40034d5	          0x4889c7	                            mov rdi, rax	      1434	convert.c	FUNCTION_39	CALL_6
0x40034d8	      0xe8fad9ffff	                  call sym.encode_to_git	      1434	convert.c	FUNCTION_39	CALL_6
0x40034dd	        0x448b4ddc	             mov r9d, dword [rbp - 0x24]	      1435	convert.c	FUNCTION_39	CALL_7
0x40034e1	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1435	convert.c	FUNCTION_39	CALL_7
0x40034e5	        0x488b4808	                mov rcx, qword [rax + 8]	      1435	convert.c	FUNCTION_39	CALL_7
0x40034e9	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1435	convert.c	FUNCTION_39	CALL_7
0x40034ed	        0x488b5010	            mov rdx, qword [rax + 0x10] 	      1435	convert.c	FUNCTION_39	CALL_7
0x40034f1	        0x4c8b45b0	              mov r8, qword [rbp - 0x50]	      1435	convert.c	FUNCTION_39	CALL_7
0x40034f5	        0x488b75c0	             mov rsi, qword [rbp - 0x40]	      1435	convert.c	FUNCTION_39	CALL_7
0x40034f9	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1435	convert.c	FUNCTION_39	CALL_7
0x40034fd	        0x4883ec08	                              sub rsp, 8	      1435	convert.c	FUNCTION_39	CALL_7
0x4003501	          0x8b7db8	             mov edi, dword [rbp - 0x48]	      1435	convert.c	FUNCTION_39	CALL_7
0x4003504	              0x57	                                push rdi	      1435	convert.c	FUNCTION_39	CALL_7
0x4003505	          0x4889c7	                            mov rdi, rax	      1435	convert.c	FUNCTION_39	CALL_7
0x4003508	      0xe859ddffff	                    call sym.crlf_to_git	      1435	convert.c	FUNCTION_39	CALL_7
0x400350d	        0x4883c410	                           add rsp, 0x10	      1435	convert.c	FUNCTION_39	CALL_7
0x4003511	          0x8b7de0	             mov edi, dword [rbp - 0x20]	      1436	convert.c	FUNCTION_39	CALL_8
0x4003514	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1436	convert.c	FUNCTION_39	CALL_8
0x4003518	        0x488b5008	                mov rdx, qword [rax + 8]	      1436	convert.c	FUNCTION_39	CALL_8
0x400351c	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1436	convert.c	FUNCTION_39	CALL_8
0x4003520	        0x488b7010	            mov rsi, qword [rax + 0x10] 	      1436	convert.c	FUNCTION_39	CALL_8
0x4003524	        0x488b4db0	             mov rcx, qword [rbp - 0x50]	      1436	convert.c	FUNCTION_39	CALL_8
0x4003528	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      1436	convert.c	FUNCTION_39	CALL_8
0x400352c	          0x4189f8	                            mov r8d, edi	      1436	convert.c	FUNCTION_39	CALL_8
0x400352f	          0x4889c7	                            mov rdi, rax	      1436	convert.c	FUNCTION_39	CALL_8
0x4003532	      0xe8e9f1ffff	                   call sym.ident_to_git	      1436	convert.c	FUNCTION_39	CALL_8
0x4003537	              0x90	                                     nop	      1437	convert.c	FUNCTION_39
0x4003538	        0x488b45f8	                mov rax, qword [rbp - 8]	      1437	convert.c	FUNCTION_39
0x400353c	    0x644833042528	                xor rax, qword fs:[0x28]	      1437	convert.c	FUNCTION_39
0x4003545	            0x7405	                            je 0x400354c	      1437	convert.c	FUNCTION_39
0x4003547	      0xe800000000	                          call 0x400354c	      1437	convert.c	FUNCTION_39
0x400354c	              0xc9	                                   leave	      1437	convert.c	FUNCTION_39
0x400354d	              0xc3	                                     ret	      1437	convert.c	FUNCTION_39
apply_filter	ELSE,2:FOR,0:WHILE,0:IF,6:CALL,2:functions,0:SWITCH,0:DO,0	92
0x4002323	              0x55	                                push rbp	       977	convert.c	FUNCTION_25
0x4002324	          0x4889e5	                            mov rbp, rsp	       977	convert.c	FUNCTION_25
0x4002327	        0x4883ec40	                           sub rsp, 0x40	       977	convert.c	FUNCTION_25
0x400232b	        0x48897de8	             mov qword [rbp - 0x18], rdi	       977	convert.c	FUNCTION_25
0x400232f	        0x488975e0	             mov qword [rbp - 0x20], rsi	       977	convert.c	FUNCTION_25
0x4002333	        0x488955d8	             mov qword [rbp - 0x28], rdx	       977	convert.c	FUNCTION_25
0x4002337	          0x894dd4	             mov dword [rbp - 0x2c], ecx	       977	convert.c	FUNCTION_25
0x400233a	        0x4c8945c8	              mov qword [rbp - 0x38], r8	       977	convert.c	FUNCTION_25
0x400233e	        0x4c894dc0	              mov qword [rbp - 0x40], r9	       977	convert.c	FUNCTION_25
0x4002342	    0x48c745f80000	                  mov qword [rbp - 8], 0	       978	convert.c	FUNCTION_25
0x400234a	      0x48837dc000	               cmp qword [rbp - 0x40], 0	       980	convert.c	FUNCTION_25	IF_1
0x400234f	            0x750a	                           jne 0x400235b	       980	convert.c	FUNCTION_25	IF_1
0x4002351	      0xb800000000	                              mov eax, 0	       981	convert.c	FUNCTION_25	IF_1
0x4002356	      0xe9fd000000	                           jmp 0x4002458	       981	convert.c	FUNCTION_25	IF_1
0x400235b	      0x48837dc800	               cmp qword [rbp - 0x38], 0	       983	convert.c	FUNCTION_25	IF_2
0x4002360	            0x750a	                           jne 0x400236c	       983	convert.c	FUNCTION_25	IF_2
0x4002362	      0xb801000000	                              mov eax, 1	       984	convert.c	FUNCTION_25	IF_2
0x4002367	      0xe9ec000000	                           jmp 0x4002458	       984	convert.c	FUNCTION_25	IF_2
0x400236c	          0x8b4510	            mov eax, dword [rbp + 0x10] 	       986	convert.c	FUNCTION_25	IF_3
0x400236f	          0x83e001	                              and eax, 1	       986	convert.c	FUNCTION_25	IF_3
0x4002372	            0x85c0	                           test eax, eax	       986	convert.c	FUNCTION_25	IF_3
0x4002374	            0x7428	                            je 0x400239e	       986	convert.c	FUNCTION_25	IF_3
0x4002376	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       986	convert.c	FUNCTION_25	IF_3
0x400237a	        0x488b4020	            mov rax, qword [rax + 0x20] 	       986	convert.c	FUNCTION_25	IF_3
0x400237e	          0x4885c0	                           test rax, rax	       986	convert.c	FUNCTION_25	IF_3
0x4002381	            0x751b	                           jne 0x400239e	       986	convert.c	FUNCTION_25	IF_3
0x4002383	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       986	convert.c	FUNCTION_25	IF_3
0x4002387	        0x488b4018	            mov rax, qword [rax + 0x18] 	       986	convert.c	FUNCTION_25	IF_3
0x400238b	          0x4885c0	                           test rax, rax	       986	convert.c	FUNCTION_25	IF_3
0x400238e	            0x740e	                            je 0x400239e	       986	convert.c	FUNCTION_25	IF_3
0x4002390	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       987	convert.c	FUNCTION_25	IF_3
0x4002394	        0x488b4018	            mov rax, qword [rax + 0x18] 	       987	convert.c	FUNCTION_25	IF_3
0x4002398	        0x488945f8	                mov qword [rbp - 8], rax	       987	convert.c	FUNCTION_25	IF_3
0x400239c	            0xeb30	                           jmp 0x40023ce	       987	convert.c	FUNCTION_25	IF_3
0x400239e	          0x8b4510	            mov eax, dword [rbp + 0x10] 	       988	convert.c	FUNCTION_25	ELSE_1	IF_4
0x40023a1	          0x83e002	                              and eax, 2	       988	convert.c	FUNCTION_25	ELSE_1	IF_4
0x40023a4	            0x85c0	                           test eax, eax	       988	convert.c	FUNCTION_25	ELSE_1	IF_4
0x40023a6	            0x7426	                            je 0x40023ce	       988	convert.c	FUNCTION_25	ELSE_1	IF_4
0x40023a8	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       988	convert.c	FUNCTION_25	ELSE_1	IF_4
0x40023ac	        0x488b4020	            mov rax, qword [rax + 0x20] 	       988	convert.c	FUNCTION_25	ELSE_1	IF_4
0x40023b0	          0x4885c0	                           test rax, rax	       988	convert.c	FUNCTION_25	ELSE_1	IF_4
0x40023b3	            0x7519	                           jne 0x40023ce	       988	convert.c	FUNCTION_25	ELSE_1	IF_4
0x40023b5	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       988	convert.c	FUNCTION_25	ELSE_1	IF_4
0x40023b9	        0x488b4010	            mov rax, qword [rax + 0x10] 	       988	convert.c	FUNCTION_25	ELSE_1	IF_4
0x40023bd	          0x4885c0	                           test rax, rax	       988	convert.c	FUNCTION_25	ELSE_1	IF_4
0x40023c0	            0x740c	                            je 0x40023ce	       988	convert.c	FUNCTION_25	ELSE_1	IF_4
0x40023c2	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       989	convert.c	FUNCTION_25	ELSE_1	IF_4
0x40023c6	        0x488b4010	            mov rax, qword [rax + 0x10] 	       989	convert.c	FUNCTION_25	ELSE_1	IF_4
0x40023ca	        0x488945f8	                mov qword [rbp - 8], rax	       989	convert.c	FUNCTION_25	ELSE_1	IF_4
0x40023ce	      0x48837df800	                  cmp qword [rbp - 8], 0	       991	convert.c	FUNCTION_25	IF_5
0x40023d3	            0x7432	                            je 0x4002407	       991	convert.c	FUNCTION_25	IF_5
0x40023d5	        0x488b45f8	                mov rax, qword [rbp - 8]	       991	convert.c	FUNCTION_25	IF_5
0x40023d9	           0xfb600	                   movzx eax, byte [rax]	       991	convert.c	FUNCTION_25	IF_5
0x40023dc	            0x84c0	                             test al, al	       991	convert.c	FUNCTION_25	IF_5
0x40023de	            0x7427	                            je 0x4002407	       991	convert.c	FUNCTION_25	IF_5
0x40023e0	        0x4c8b45f8	                 mov r8, qword [rbp - 8]	       992	convert.c	FUNCTION_25	CALL_1
0x40023e4	        0x488b7dc8	             mov rdi, qword [rbp - 0x38]	       992	convert.c	FUNCTION_25	CALL_1
0x40023e8	          0x8b4dd4	             mov ecx, dword [rbp - 0x2c]	       992	convert.c	FUNCTION_25	CALL_1
0x40023eb	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       992	convert.c	FUNCTION_25	CALL_1
0x40023ef	        0x488b75e0	             mov rsi, qword [rbp - 0x20]	       992	convert.c	FUNCTION_25	CALL_1
0x40023f3	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       992	convert.c	FUNCTION_25	CALL_1
0x40023f7	          0x4d89c1	                              mov r9, r8	       992	convert.c	FUNCTION_25	CALL_1
0x40023fa	          0x4989f8	                             mov r8, rdi	       992	convert.c	FUNCTION_25	CALL_1
0x40023fd	          0x4889c7	                            mov rdi, rax	       992	convert.c	FUNCTION_25	CALL_1
0x4002400	      0xe80ff6ffff	       call sym.apply_single_file_filter	       992	convert.c	FUNCTION_25	CALL_1
0x4002405	            0xeb51	                           jmp 0x4002458	       992	convert.c	FUNCTION_25	CALL_1
0x4002407	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       993	convert.c	FUNCTION_25	ELSE_2	IF_6
0x400240b	        0x488b4020	            mov rax, qword [rax + 0x20] 	       993	convert.c	FUNCTION_25	ELSE_2	IF_6
0x400240f	          0x4885c0	                           test rax, rax	       993	convert.c	FUNCTION_25	ELSE_2	IF_6
0x4002412	            0x743f	                            je 0x4002453	       993	convert.c	FUNCTION_25	ELSE_2	IF_6
0x4002414	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       993	convert.c	FUNCTION_25	ELSE_2	IF_6
0x4002418	        0x488b4020	            mov rax, qword [rax + 0x20] 	       993	convert.c	FUNCTION_25	ELSE_2	IF_6
0x400241c	           0xfb600	                   movzx eax, byte [rax]	       993	convert.c	FUNCTION_25	ELSE_2	IF_6
0x400241f	            0x84c0	                             test al, al	       993	convert.c	FUNCTION_25	ELSE_2	IF_6
0x4002421	            0x7430	                            je 0x4002453	       993	convert.c	FUNCTION_25	ELSE_2	IF_6
0x4002423	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       994	convert.c	FUNCTION_25	ELSE_2	IF_6	CALL_2
0x4002427	        0x4c8b4820	              mov r9, qword [rax + 0x20]	       994	convert.c	FUNCTION_25	ELSE_2	IF_6	CALL_2
0x400242b	        0x4c8b45c8	              mov r8, qword [rbp - 0x38]	       994	convert.c	FUNCTION_25	ELSE_2	IF_6	CALL_2
0x400242f	          0x8b4dd4	             mov ecx, dword [rbp - 0x2c]	       994	convert.c	FUNCTION_25	ELSE_2	IF_6	CALL_2
0x4002432	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       994	convert.c	FUNCTION_25	ELSE_2	IF_6	CALL_2
0x4002436	        0x488b75e0	             mov rsi, qword [rbp - 0x20]	       994	convert.c	FUNCTION_25	ELSE_2	IF_6	CALL_2
0x400243a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       994	convert.c	FUNCTION_25	ELSE_2	IF_6	CALL_2
0x400243e	          0xff7518	                 push qword [rbp + 0x18]	       994	convert.c	FUNCTION_25	ELSE_2	IF_6	CALL_2
0x4002441	          0x8b7d10	            mov edi, dword [rbp + 0x10] 	       994	convert.c	FUNCTION_25	ELSE_2	IF_6	CALL_2
0x4002444	              0x57	                                push rdi	       994	convert.c	FUNCTION_25	ELSE_2	IF_6	CALL_2
0x4002445	          0x4889c7	                            mov rdi, rax	       994	convert.c	FUNCTION_25	ELSE_2	IF_6	CALL_2
0x4002448	      0xe899f8ffff	        call sym.apply_multi_file_filter	       994	convert.c	FUNCTION_25	ELSE_2	IF_6	CALL_2
0x400244d	        0x4883c410	                           add rsp, 0x10	       994	convert.c	FUNCTION_25	ELSE_2	IF_6	CALL_2
0x4002451	            0xeb05	                           jmp 0x4002458	       994	convert.c	FUNCTION_25	ELSE_2	IF_6	CALL_2
0x4002453	      0xb800000000	                              mov eax, 0	       997	convert.c	FUNCTION_25
0x4002458	              0xc9	                                   leave	       998	convert.c	FUNCTION_25
0x4002459	              0xc3	                                     ret	       998	convert.c	FUNCTION_25
_	ELSE,0:FOR,0:WHILE,0:IF,1:CALL,0:functions,0:SWITCH,0:DO,0	15
0x40002a8	              0x55	                                push rbp	        51	gettext.h	FUNCTION_74
0x40002a9	          0x4889e5	                            mov rbp, rsp	        51	gettext.h	FUNCTION_74
0x40002ac	        0x4883ec10	                           sub rsp, 0x10	        51	gettext.h	FUNCTION_74
0x40002b0	        0x48897df8	                mov qword [rbp - 8], rdi	        51	gettext.h	FUNCTION_74
0x40002b4	        0x488b45f8	                mov rax, qword [rbp - 8]	        52	gettext.h	FUNCTION_74	IF_1
0x40002b8	           0xfb600	                   movzx eax, byte [rax]	        52	gettext.h	FUNCTION_74	IF_1
0x40002bb	            0x84c0	                             test al, al	        52	gettext.h	FUNCTION_74	IF_1
0x40002bd	            0x7507	                           jne 0x40002c6	        52	gettext.h	FUNCTION_74	IF_1
0x40002bf	      0xb800000000	                              mov eax, 0	        53	gettext.h	FUNCTION_74	IF_1
0x40002c4	            0xeb0c	                           jmp 0x40002d2	        53	gettext.h	FUNCTION_74	IF_1
0x40002c6	        0x488b45f8	                mov rax, qword [rbp - 8]	        54	gettext.h	FUNCTION_74
0x40002ca	          0x4889c7	                            mov rdi, rax	        54	gettext.h	FUNCTION_74
0x40002cd	      0xe800000000	                          call 0x40002d2	        54	gettext.h	FUNCTION_74
0x40002d2	              0xc9	                                   leave	        55	gettext.h	FUNCTION_74
0x40002d3	              0xc3	                                     ret	        55	gettext.h	FUNCTION_74
convert_to_working_tree_internal	ELSE,0:FOR,0:WHILE,0:IF,5:CALL,6:functions,0:SWITCH,0:DO,0	121
0x400354e	              0x55	                                push rbp	      1442	convert.c	FUNCTION_40
0x400354f	          0x4889e5	                            mov rbp, rsp	      1442	convert.c	FUNCTION_40
0x4003552	        0x4883ec70	                           sub rsp, 0x70	      1442	convert.c	FUNCTION_40
0x4003556	        0x48897db8	             mov qword [rbp - 0x48], rdi	      1442	convert.c	FUNCTION_40
0x400355a	        0x488975b0	             mov qword [rbp - 0x50], rsi	      1442	convert.c	FUNCTION_40
0x400355e	        0x488955a8	             mov qword [rbp - 0x58], rdx	      1442	convert.c	FUNCTION_40
0x4003562	        0x48894da0	             mov qword [rbp - 0x60], rcx	      1442	convert.c	FUNCTION_40
0x4003566	        0x4489459c	             mov dword [rbp - 0x64], r8d	      1442	convert.c	FUNCTION_40
0x400356a	        0x4c894d90	              mov qword [rbp - 0x70], r9	      1442	convert.c	FUNCTION_40
0x400356e	    0x64488b042528	                mov rax, qword fs:[0x28]	      1442	convert.c	FUNCTION_40
0x4003577	        0x488945f8	                mov qword [rbp - 8], rax	      1442	convert.c	FUNCTION_40
0x400357b	            0x31c0	                            xor eax, eax	      1442	convert.c	FUNCTION_40
0x400357d	    0xc745c8000000	               mov dword [rbp - 0x38], 0	      1443	convert.c	FUNCTION_40
0x4003584	    0xc745cc000000	               mov dword [rbp - 0x34], 0	      1443	convert.c	FUNCTION_40
0x400358b	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      1446	convert.c	FUNCTION_40	CALL_1
0x400358f	        0x488d45d0	                   lea rax, [rbp - 0x30]	      1446	convert.c	FUNCTION_40	CALL_1
0x4003593	          0x4889d6	                            mov rsi, rdx	      1446	convert.c	FUNCTION_40	CALL_1
0x4003596	          0x4889c7	                            mov rdi, rax	      1446	convert.c	FUNCTION_40	CALL_1
0x4003599	      0xe8e4f8ffff	                  call sym.convert_attrs	      1446	convert.c	FUNCTION_40	CALL_1
0x400359e	          0x8b7de0	             mov edi, dword [rbp - 0x20]	      1448	convert.c	FUNCTION_40	CALL_2
0x40035a1	        0x488b4da0	             mov rcx, qword [rbp - 0x60]	      1448	convert.c	FUNCTION_40	CALL_2
0x40035a5	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      1448	convert.c	FUNCTION_40	CALL_2
0x40035a9	        0x488b75b0	             mov rsi, qword [rbp - 0x50]	      1448	convert.c	FUNCTION_40	CALL_2
0x40035ad	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1448	convert.c	FUNCTION_40	CALL_2
0x40035b1	          0x4189f8	                            mov r8d, edi	      1448	convert.c	FUNCTION_40	CALL_2
0x40035b4	          0x4889c7	                            mov rdi, rax	      1448	convert.c	FUNCTION_40	CALL_2
0x40035b7	      0xe8b1f3ffff	              call sym.ident_to_worktree	      1448	convert.c	FUNCTION_40	CALL_2
0x40035bc	           0x945c8	              or dword [rbp - 0x38], eax	      1448	convert.c	FUNCTION_40	CALL_2
0x40035bf	        0x837dc800	               cmp dword [rbp - 0x38], 0	      1449	convert.c	FUNCTION_40	IF_1
0x40035c3	            0x7418	                            je 0x40035dd	      1449	convert.c	FUNCTION_40	IF_1
0x40035c5	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1450	convert.c	FUNCTION_40	IF_1
0x40035c9	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1450	convert.c	FUNCTION_40	IF_1
0x40035cd	        0x488945b0	             mov qword [rbp - 0x50], rax	      1450	convert.c	FUNCTION_40	IF_1
0x40035d1	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1451	convert.c	FUNCTION_40	IF_1
0x40035d5	        0x488b4008	                mov rax, qword [rax + 8]	      1451	convert.c	FUNCTION_40	IF_1
0x40035d9	        0x488945a8	             mov qword [rbp - 0x58], rax	      1451	convert.c	FUNCTION_40	IF_1
0x40035dd	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1458	convert.c	FUNCTION_40	IF_2
0x40035e1	          0x4885c0	                           test rax, rax	      1458	convert.c	FUNCTION_40	IF_2
0x40035e4	            0x741a	                            je 0x4003600	      1458	convert.c	FUNCTION_40	IF_2
0x40035e6	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1458	convert.c	FUNCTION_40	IF_2
0x40035ea	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1458	convert.c	FUNCTION_40	IF_2
0x40035ee	          0x4885c0	                           test rax, rax	      1458	convert.c	FUNCTION_40	IF_2
0x40035f1	            0x7513	                           jne 0x4003606	      1458	convert.c	FUNCTION_40	IF_2
0x40035f3	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1458	convert.c	FUNCTION_40	IF_2
0x40035f7	        0x488b4020	            mov rax, qword [rax + 0x20] 	      1458	convert.c	FUNCTION_40	IF_2
0x40035fb	          0x4885c0	                           test rax, rax	      1458	convert.c	FUNCTION_40	IF_2
0x40035fe	            0x7506	                           jne 0x4003606	      1458	convert.c	FUNCTION_40	IF_2
0x4003600	        0x837d9c00	               cmp dword [rbp - 0x64], 0	      1458	convert.c	FUNCTION_40	IF_2
0x4003604	            0x753f	                           jne 0x4003645	      1458	convert.c	FUNCTION_40	IF_2
0x4003606	          0x8b7ddc	             mov edi, dword [rbp - 0x24]	      1459	convert.c	FUNCTION_40	IF_2	CALL_3
0x4003609	        0x488b4da0	             mov rcx, qword [rbp - 0x60]	      1459	convert.c	FUNCTION_40	IF_2	CALL_3
0x400360d	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      1459	convert.c	FUNCTION_40	IF_2	CALL_3
0x4003611	        0x488b75b0	             mov rsi, qword [rbp - 0x50]	      1459	convert.c	FUNCTION_40	IF_2	CALL_3
0x4003615	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1459	convert.c	FUNCTION_40	IF_2	CALL_3
0x4003619	          0x4189f8	                            mov r8d, edi	      1459	convert.c	FUNCTION_40	IF_2	CALL_3
0x400361c	          0x4889c7	                            mov rdi, rax	      1459	convert.c	FUNCTION_40	IF_2	CALL_3
0x400361f	      0xe8f5deffff	               call sym.crlf_to_worktree	      1459	convert.c	FUNCTION_40	IF_2	CALL_3
0x4003624	           0x945c8	              or dword [rbp - 0x38], eax	      1459	convert.c	FUNCTION_40	IF_2	CALL_3
0x4003627	        0x837dc800	               cmp dword [rbp - 0x38], 0	      1460	convert.c	FUNCTION_40	IF_2	IF_3
0x400362b	            0x7418	                            je 0x4003645	      1460	convert.c	FUNCTION_40	IF_2	IF_3
0x400362d	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1461	convert.c	FUNCTION_40	IF_2	IF_3
0x4003631	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1461	convert.c	FUNCTION_40	IF_2	IF_3
0x4003635	        0x488945b0	             mov qword [rbp - 0x50], rax	      1461	convert.c	FUNCTION_40	IF_2	IF_3
0x4003639	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1462	convert.c	FUNCTION_40	IF_2	IF_3
0x400363d	        0x488b4008	                mov rax, qword [rax + 8]	      1462	convert.c	FUNCTION_40	IF_2	IF_3
0x4003641	        0x488945a8	             mov qword [rbp - 0x58], rax	      1462	convert.c	FUNCTION_40	IF_2	IF_3
0x4003645	        0x488b7de8	             mov rdi, qword [rbp - 0x18]	      1466	convert.c	FUNCTION_40	CALL_4
0x4003649	        0x488b4da0	             mov rcx, qword [rbp - 0x60]	      1466	convert.c	FUNCTION_40	CALL_4
0x400364d	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      1466	convert.c	FUNCTION_40	CALL_4
0x4003651	        0x488b75b0	             mov rsi, qword [rbp - 0x50]	      1466	convert.c	FUNCTION_40	CALL_4
0x4003655	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1466	convert.c	FUNCTION_40	CALL_4
0x4003659	          0x4989f8	                             mov r8, rdi	      1466	convert.c	FUNCTION_40	CALL_4
0x400365c	          0x4889c7	                            mov rdi, rax	      1466	convert.c	FUNCTION_40	CALL_4
0x400365f	      0xe820dbffff	             call sym.encode_to_worktree	      1466	convert.c	FUNCTION_40	CALL_4
0x4003664	           0x945c8	              or dword [rbp - 0x38], eax	      1466	convert.c	FUNCTION_40	CALL_4
0x4003667	        0x837dc800	               cmp dword [rbp - 0x38], 0	      1467	convert.c	FUNCTION_40	IF_4
0x400366b	            0x7418	                            je 0x4003685	      1467	convert.c	FUNCTION_40	IF_4
0x400366d	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1468	convert.c	FUNCTION_40	IF_4
0x4003671	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1468	convert.c	FUNCTION_40	IF_4
0x4003675	        0x488945b0	             mov qword [rbp - 0x50], rax	      1468	convert.c	FUNCTION_40	IF_4
0x4003679	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1469	convert.c	FUNCTION_40	IF_4
0x400367d	        0x488b4008	                mov rax, qword [rax + 8]	      1469	convert.c	FUNCTION_40	IF_4
0x4003681	        0x488945a8	             mov qword [rbp - 0x58], rax	      1469	convert.c	FUNCTION_40	IF_4
0x4003685	        0x488b7dd0	             mov rdi, qword [rbp - 0x30]	      1472	convert.c	FUNCTION_40	CALL_5
0x4003689	        0x488b4da0	             mov rcx, qword [rbp - 0x60]	      1472	convert.c	FUNCTION_40	CALL_5
0x400368d	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      1472	convert.c	FUNCTION_40	CALL_5
0x4003691	        0x488b75b0	             mov rsi, qword [rbp - 0x50]	      1472	convert.c	FUNCTION_40	CALL_5
0x4003695	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1472	convert.c	FUNCTION_40	CALL_5
0x4003699	          0xff7590	                 push qword [rbp - 0x70]	      1472	convert.c	FUNCTION_40	CALL_5
0x400369c	            0x6a02	                                  push 2	      1472	convert.c	FUNCTION_40	CALL_5
0x400369e	          0x4989f9	                             mov r9, rdi	      1472	convert.c	FUNCTION_40	CALL_5
0x40036a1	          0x4989c8	                             mov r8, rcx	      1472	convert.c	FUNCTION_40	CALL_5
0x40036a4	      0xb9ffffffff	                     mov ecx, 0xffffffff	      1472	convert.c	FUNCTION_40	CALL_5
0x40036a9	          0x4889c7	                            mov rdi, rax	      1472	convert.c	FUNCTION_40	CALL_5
0x40036ac	      0xe872ecffff	                   call sym.apply_filter	      1472	convert.c	FUNCTION_40	CALL_5
0x40036b1	        0x4883c410	                           add rsp, 0x10	      1472	convert.c	FUNCTION_40	CALL_5
0x40036b5	          0x8945cc	             mov dword [rbp - 0x34], eax	      1472	convert.c	FUNCTION_40	CALL_5
0x40036b8	        0x837dcc00	               cmp dword [rbp - 0x34], 0	      1474	convert.c	FUNCTION_40	IF_5
0x40036bc	            0x7531	                           jne 0x40036ef	      1474	convert.c	FUNCTION_40	IF_5
0x40036be	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1474	convert.c	FUNCTION_40	IF_5
0x40036c2	          0x4885c0	                           test rax, rax	      1474	convert.c	FUNCTION_40	IF_5
0x40036c5	            0x7428	                            je 0x40036ef	      1474	convert.c	FUNCTION_40	IF_5
0x40036c7	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1474	convert.c	FUNCTION_40	IF_5
0x40036cb	          0x8b4028	            mov eax, dword [rax + 0x28] 	      1474	convert.c	FUNCTION_40	IF_5
0x40036ce	            0x85c0	                           test eax, eax	      1474	convert.c	FUNCTION_40	IF_5
0x40036d0	            0x741d	                            je 0x40036ef	      1474	convert.c	FUNCTION_40	IF_5
0x40036d2	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1475	convert.c	FUNCTION_40	CALL_6
0x40036d6	          0x488b10	                    mov rdx, qword [rax]	      1475	convert.c	FUNCTION_40	CALL_6
0x40036d9	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1475	convert.c	FUNCTION_40	CALL_6
0x40036dd	          0x4889c6	                            mov rsi, rax	      1475	convert.c	FUNCTION_40	CALL_6
0x40036e0	      0xbf00000000	                              mov edi, 0	      1475	convert.c	FUNCTION_40	CALL_6
0x40036e5	      0xb800000000	                              mov eax, 0	      1475	convert.c	FUNCTION_40	CALL_6
0x40036ea	      0xe800000000	                          call 0x40036ef	      1475	convert.c	FUNCTION_40	CALL_6
0x40036ef	          0x8b45c8	             mov eax, dword [rbp - 0x38]	      1477	convert.c	FUNCTION_40
0x40036f2	           0xb45cc	              or eax, dword [rbp - 0x34]	      1477	convert.c	FUNCTION_40
0x40036f5	        0x488b4df8	                mov rcx, qword [rbp - 8]	      1478	convert.c	FUNCTION_40
0x40036f9	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      1478	convert.c	FUNCTION_40
0x4003702	            0x7405	                            je 0x4003709	      1478	convert.c	FUNCTION_40
0x4003704	      0xe800000000	                          call 0x4003709	      1478	convert.c	FUNCTION_40
0x4003709	              0xc9	                                   leave	      1478	convert.c	FUNCTION_40
0x400370a	              0xc3	                                     ret	      1478	convert.c	FUNCTION_40
encode_to_git	ELSE,1:FOR,0:WHILE,0:IF,7:CALL,14:functions,0:SWITCH,0:DO,0	173
0x4000ed7	              0x55	                                push rbp	       390	convert.c	FUNCTION_15
0x4000ed8	          0x4889e5	                            mov rbp, rsp	       390	convert.c	FUNCTION_15
0x4000edb	        0x4883ec70	                           sub rsp, 0x70	       390	convert.c	FUNCTION_15
0x4000edf	        0x48897db8	             mov qword [rbp - 0x48], rdi	       390	convert.c	FUNCTION_15
0x4000ee3	        0x488975b0	             mov qword [rbp - 0x50], rsi	       390	convert.c	FUNCTION_15
0x4000ee7	        0x488955a8	             mov qword [rbp - 0x58], rdx	       390	convert.c	FUNCTION_15
0x4000eeb	        0x48894da0	             mov qword [rbp - 0x60], rcx	       390	convert.c	FUNCTION_15
0x4000eef	        0x4c894598	              mov qword [rbp - 0x68], r8	       390	convert.c	FUNCTION_15
0x4000ef3	        0x44894d94	             mov dword [rbp - 0x6c], r9d	       390	convert.c	FUNCTION_15
0x4000ef7	    0x64488b042528	                mov rax, qword fs:[0x28]	       390	convert.c	FUNCTION_15
0x4000f00	        0x488945f8	                mov qword [rbp - 8], rax	       390	convert.c	FUNCTION_15
0x4000f04	            0x31c0	                            xor eax, eax	       390	convert.c	FUNCTION_15
0x4000f06	          0x8b4594	             mov eax, dword [rbp - 0x6c]	       393	convert.c	FUNCTION_15
0x4000f09	          0x83e010	                           and eax, 0x10	       393	convert.c	FUNCTION_15
0x4000f0c	          0x8945d4	             mov dword [rbp - 0x2c], eax	       393	convert.c	FUNCTION_15
0x4000f0f	      0x48837d9800	               cmp qword [rbp - 0x68], 0	       399	convert.c	FUNCTION_15	IF_1
0x4000f14	            0x740e	                            je 0x4000f24	       399	convert.c	FUNCTION_15	IF_1
0x4000f16	      0x48837db000	               cmp qword [rbp - 0x50], 0	       399	convert.c	FUNCTION_15	IF_1
0x4000f1b	            0x7411	                            je 0x4000f2e	       399	convert.c	FUNCTION_15	IF_1
0x4000f1d	      0x48837da800	               cmp qword [rbp - 0x58], 0	       399	convert.c	FUNCTION_15	IF_1
0x4000f22	            0x750a	                           jne 0x4000f2e	       399	convert.c	FUNCTION_15	IF_1
0x4000f24	      0xb800000000	                              mov eax, 0	       400	convert.c	FUNCTION_15	IF_1
0x4000f29	      0xe940020000	                           jmp 0x400116e	       400	convert.c	FUNCTION_15	IF_1
0x4000f2e	      0x48837da000	               cmp qword [rbp - 0x60], 0	       408	convert.c	FUNCTION_15	IF_2
0x4000f33	            0x7511	                           jne 0x4000f46	       408	convert.c	FUNCTION_15	IF_2
0x4000f35	      0x48837db000	               cmp qword [rbp - 0x50], 0	       408	convert.c	FUNCTION_15	IF_2
0x4000f3a	            0x750a	                           jne 0x4000f46	       408	convert.c	FUNCTION_15	IF_2
0x4000f3c	      0xb801000000	                              mov eax, 1	       409	convert.c	FUNCTION_15	IF_2
0x4000f41	      0xe928020000	                           jmp 0x400116e	       409	convert.c	FUNCTION_15	IF_2
0x4000f46	          0x8b7dd4	             mov edi, dword [rbp - 0x2c]	       411	convert.c	FUNCTION_15	IF_3	CALL_1
0x4000f49	        0x488b4da8	             mov rcx, qword [rbp - 0x58]	       411	convert.c	FUNCTION_15	IF_3	CALL_1
0x4000f4d	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	       411	convert.c	FUNCTION_15	IF_3	CALL_1
0x4000f51	        0x488b7598	             mov rsi, qword [rbp - 0x68]	       411	convert.c	FUNCTION_15	IF_3	CALL_1
0x4000f55	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       411	convert.c	FUNCTION_15	IF_3	CALL_1
0x4000f59	          0x4189f8	                            mov r8d, edi	       411	convert.c	FUNCTION_15	IF_3	CALL_1
0x4000f5c	          0x4889c7	                            mov rdi, rax	       411	convert.c	FUNCTION_15	IF_3	CALL_1
0x4000f5f	      0xe883faffff	              call sym.validate_encoding	       411	convert.c	FUNCTION_15	IF_3	CALL_1
0x4000f64	            0x85c0	                           test eax, eax	       411	convert.c	FUNCTION_15	IF_3	CALL_1
0x4000f66	            0x740a	                            je 0x4000f72	       411	convert.c	FUNCTION_15	IF_3	CALL_1
0x4000f68	      0xb800000000	                              mov eax, 0	       412	convert.c	FUNCTION_15	IF_3
0x4000f6d	      0xe9fc010000	                           jmp 0x400116e	       412	convert.c	FUNCTION_15	IF_3
0x4000f72	        0x488b75a8	             mov rsi, qword [rbp - 0x58]	       414	convert.c	FUNCTION_15	CALL_2
0x4000f76	        0x488b4db0	             mov rcx, qword [rbp - 0x50]	       414	convert.c	FUNCTION_15	CALL_2
0x4000f7a	        0x488b5598	             mov rdx, qword [rbp - 0x68]	       414	convert.c	FUNCTION_15	CALL_2
0x4000f7e	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       414	convert.c	FUNCTION_15	CALL_2
0x4000f82	          0x4989f0	                             mov r8, rsi	       414	convert.c	FUNCTION_15	CALL_2
0x4000f85	          0x4889c6	                            mov rsi, rax	       414	convert.c	FUNCTION_15	CALL_2
0x4000f88	      0xbf00000000	                              mov edi, 0	       414	convert.c	FUNCTION_15	CALL_2
0x4000f8d	      0xe8aefcffff	                 call sym.trace_encoding	       414	convert.c	FUNCTION_15	CALL_2
0x4000f92	    0x488b15000000	            mov rdx, qword [0x04000f99] 	       415	convert.c	FUNCTION_15	CALL_3
0x4000f99	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       415	convert.c	FUNCTION_15	CALL_3
0x4000f9d	            0x89c7	                            mov edi, eax	       415	convert.c	FUNCTION_15	CALL_3
0x4000f9f	        0x488d75cc	                   lea rsi, [rbp - 0x34]	       415	convert.c	FUNCTION_15	CALL_3
0x4000fa3	        0x488b4d98	             mov rcx, qword [rbp - 0x68]	       415	convert.c	FUNCTION_15	CALL_3
0x4000fa7	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       415	convert.c	FUNCTION_15	CALL_3
0x4000fab	          0x4989f0	                             mov r8, rsi	       415	convert.c	FUNCTION_15	CALL_3
0x4000fae	            0x89fe	                            mov esi, edi	       415	convert.c	FUNCTION_15	CALL_3
0x4000fb0	          0x4889c7	                            mov rdi, rax	       415	convert.c	FUNCTION_15	CALL_3
0x4000fb3	      0xe800000000	                          call 0x4000fb8	       415	convert.c	FUNCTION_15	CALL_3
0x4000fb8	        0x488945d8	             mov qword [rbp - 0x28], rax	       415	convert.c	FUNCTION_15	CALL_3
0x4000fbc	      0x48837dd800	               cmp qword [rbp - 0x28], 0	       417	convert.c	FUNCTION_15	IF_4
0x4000fc1	            0x7563	                           jne 0x4001026	       417	convert.c	FUNCTION_15	IF_4
0x4000fc3	      0xbf00000000	                              mov edi, 0	       424	convert.c	FUNCTION_15	IF_4	CALL_4
0x4000fc8	      0xe8dbf2ffff	                               call sym.	       424	convert.c	FUNCTION_15	IF_4	CALL_4
0x4000fcd	        0x488945e0	             mov qword [rbp - 0x20], rax	       424	convert.c	FUNCTION_15	IF_4	CALL_4
0x4000fd1	        0x837dd400	               cmp dword [rbp - 0x2c], 0	       425	convert.c	FUNCTION_15	IF_4	IF_5
0x4000fd5	            0x7420	                            je 0x4000ff7	       425	convert.c	FUNCTION_15	IF_4	IF_5
0x4000fd7	    0x488b0d000000	            mov rcx, qword [0x04000fde] 	       426	convert.c	FUNCTION_15	IF_4	CALL_5
0x4000fde	        0x488b5598	             mov rdx, qword [rbp - 0x68]	       426	convert.c	FUNCTION_15	IF_4	CALL_5
0x4000fe2	        0x488b75b8	             mov rsi, qword [rbp - 0x48]	       426	convert.c	FUNCTION_15	IF_4	CALL_5
0x4000fe6	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       426	convert.c	FUNCTION_15	IF_4	CALL_5
0x4000fea	          0x4889c7	                            mov rdi, rax	       426	convert.c	FUNCTION_15	IF_4	CALL_5
0x4000fed	      0xb800000000	                              mov eax, 0	       426	convert.c	FUNCTION_15	IF_4	CALL_5
0x4000ff2	      0xe800000000	                          call 0x4000ff7	       426	convert.c	FUNCTION_15	IF_4	CALL_5
0x4000ff7	    0x488b0d000000	            mov rcx, qword [0x04000ffe] 	       428	convert.c	FUNCTION_15	IF_4	ELSE_1
0x4000ffe	        0x488b5598	             mov rdx, qword [rbp - 0x68]	       428	convert.c	FUNCTION_15	IF_4	ELSE_1
0x4001002	        0x488b75b8	             mov rsi, qword [rbp - 0x48]	       428	convert.c	FUNCTION_15	IF_4	ELSE_1
0x4001006	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       428	convert.c	FUNCTION_15	IF_4	ELSE_1
0x400100a	          0x4889c7	                            mov rdi, rax	       428	convert.c	FUNCTION_15	IF_4	ELSE_1
0x400100d	      0xb800000000	                              mov eax, 0	       428	convert.c	FUNCTION_15	IF_4	ELSE_1
0x4001012	      0xe800000000	                          call 0x4001017	       428	convert.c	FUNCTION_15	IF_4	ELSE_1
0x4001017	      0xe824f0ffff	                    call sym.const_error	       428	convert.c	FUNCTION_15	IF_4	ELSE_1
0x400101c	      0xb800000000	                              mov eax, 0	       429	convert.c	FUNCTION_15	IF_4	ELSE_1
0x4001021	      0xe948010000	                           jmp 0x400116e	       429	convert.c	FUNCTION_15	IF_4	ELSE_1
0x4001026	          0x8b45cc	             mov eax, dword [rbp - 0x34]	       432	convert.c	FUNCTION_15	CALL_6
0x4001029	          0x4863f0	                         movsxd rsi, eax	       432	convert.c	FUNCTION_15	CALL_6
0x400102c	    0x488b15000000	            mov rdx, qword [0x04001033] 	       432	convert.c	FUNCTION_15	CALL_6
0x4001033	        0x488b4dd8	             mov rcx, qword [rbp - 0x28]	       432	convert.c	FUNCTION_15	CALL_6
0x4001037	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       432	convert.c	FUNCTION_15	CALL_6
0x400103b	          0x4989f0	                             mov r8, rsi	       432	convert.c	FUNCTION_15	CALL_6
0x400103e	          0x4889c6	                            mov rsi, rax	       432	convert.c	FUNCTION_15	CALL_6
0x4001041	      0xbf00000000	                              mov edi, 0	       432	convert.c	FUNCTION_15	CALL_6
0x4001046	      0xe8f5fbffff	                 call sym.trace_encoding	       432	convert.c	FUNCTION_15	CALL_6
0x400104b	        0x837dd400	               cmp dword [rbp - 0x2c], 0	       453	convert.c	FUNCTION_15	IF_6	CALL_7
0x400104f	     0xf84f5000000	                            je 0x400114a	       453	convert.c	FUNCTION_15	IF_6	CALL_7
0x4001055	        0x488b4598	             mov rax, qword [rbp - 0x68]	       453	convert.c	FUNCTION_15	IF_6	CALL_7
0x4001059	          0x4889c7	                            mov rdi, rax	       453	convert.c	FUNCTION_15	IF_6	CALL_7
0x400105c	      0xe86afdffff	                call sym.check_roundtrip	       453	convert.c	FUNCTION_15	IF_6	CALL_7
0x4001061	            0x85c0	                           test eax, eax	       453	convert.c	FUNCTION_15	IF_6	CALL_7
0x4001063	     0xf84e1000000	                            je 0x400114a	       453	convert.c	FUNCTION_15	IF_6	CALL_7
0x4001069	    0x488b0d000000	            mov rcx, qword [0x04001070] 	       457	convert.c	FUNCTION_15	IF_6	CALL_8
0x4001070	          0x8b75cc	             mov esi, dword [rbp - 0x34]	       457	convert.c	FUNCTION_15	IF_6	CALL_8
0x4001073	        0x488d7dd0	                   lea rdi, [rbp - 0x30]	       457	convert.c	FUNCTION_15	IF_6	CALL_8
0x4001077	        0x488b5598	             mov rdx, qword [rbp - 0x68]	       457	convert.c	FUNCTION_15	IF_6	CALL_8
0x400107b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       457	convert.c	FUNCTION_15	IF_6	CALL_8
0x400107f	          0x4989f8	                             mov r8, rdi	       457	convert.c	FUNCTION_15	IF_6	CALL_8
0x4001082	          0x4889c7	                            mov rdi, rax	       457	convert.c	FUNCTION_15	IF_6	CALL_8
0x4001085	      0xe800000000	                          call 0x400108a	       457	convert.c	FUNCTION_15	IF_6	CALL_8
0x400108a	        0x488945e8	             mov qword [rbp - 0x18], rax	       457	convert.c	FUNCTION_15	IF_6	CALL_8
0x400108e	      0xbf00000000	                              mov edi, 0	       461	convert.c	FUNCTION_15	IF_6
0x4001093	      0xe83cf2ffff	                  call sym.trace_pass_fl	       461	convert.c	FUNCTION_15	IF_6
0x4001098	            0x85c0	                           test eax, eax	       461	convert.c	FUNCTION_15	IF_6
0x400109a	            0x7425	                            je 0x40010c1	       461	convert.c	FUNCTION_15	IF_6
0x400109c	        0x488b4598	             mov rax, qword [rbp - 0x68]	       461	convert.c	FUNCTION_15	IF_6
0x40010a0	          0x4989c0	                             mov r8, rax	       461	convert.c	FUNCTION_15	IF_6
0x40010a3	      0xb900000000	                              mov ecx, 0	       461	convert.c	FUNCTION_15	IF_6
0x40010a8	      0xba00000000	                              mov edx, 0	       461	convert.c	FUNCTION_15	IF_6
0x40010ad	      0xbecd010000	                          mov esi, 0x1cd	       461	convert.c	FUNCTION_15	IF_6
0x40010b2	      0xbf00000000	                              mov edi, 0	       461	convert.c	FUNCTION_15	IF_6
0x40010b7	      0xb800000000	                              mov eax, 0	       461	convert.c	FUNCTION_15	IF_6
0x40010bc	      0xe800000000	                          call 0x40010c1	       461	convert.c	FUNCTION_15	IF_6
0x40010c1	          0x8b45d0	             mov eax, dword [rbp - 0x30]	       462	convert.c	FUNCTION_15	IF_6	CALL_9
0x40010c4	          0x4863f0	                         movsxd rsi, eax	       462	convert.c	FUNCTION_15	IF_6	CALL_9
0x40010c7	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	       462	convert.c	FUNCTION_15	IF_6	CALL_9
0x40010cb	        0x488b5598	             mov rdx, qword [rbp - 0x68]	       462	convert.c	FUNCTION_15	IF_6	CALL_9
0x40010cf	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       462	convert.c	FUNCTION_15	IF_6	CALL_9
0x40010d3	          0x4989f0	                             mov r8, rsi	       462	convert.c	FUNCTION_15	IF_6	CALL_9
0x40010d6	          0x4889c6	                            mov rsi, rax	       462	convert.c	FUNCTION_15	IF_6	CALL_9
0x40010d9	      0xbf00000000	                              mov edi, 0	       462	convert.c	FUNCTION_15	IF_6	CALL_9
0x40010de	      0xe85dfbffff	                 call sym.trace_encoding	       462	convert.c	FUNCTION_15	IF_6	CALL_9
0x40010e3	      0x48837de800	               cmp qword [rbp - 0x18], 0	       465	convert.c	FUNCTION_15	IF_6	IF_7
0x40010e8	            0x7426	                            je 0x4001110	       465	convert.c	FUNCTION_15	IF_6	IF_7
0x40010ea	          0x8b45d0	             mov eax, dword [rbp - 0x30]	       465	convert.c	FUNCTION_15	IF_6	IF_7
0x40010ed	            0x4898	                                    cdqe	       465	convert.c	FUNCTION_15	IF_6	IF_7
0x40010ef	        0x483b45a8	             cmp rax, qword [rbp - 0x58]	       465	convert.c	FUNCTION_15	IF_6	IF_7
0x40010f3	            0x751b	                           jne 0x4001110	       465	convert.c	FUNCTION_15	IF_6	IF_7
0x40010f5	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	       466	convert.c	FUNCTION_15	IF_6	IF_7	CALL_10
0x40010f9	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	       466	convert.c	FUNCTION_15	IF_6	IF_7	CALL_10
0x40010fd	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       466	convert.c	FUNCTION_15	IF_6	IF_7	CALL_10
0x4001101	          0x4889ce	                            mov rsi, rcx	       466	convert.c	FUNCTION_15	IF_6	IF_7	CALL_10
0x4001104	          0x4889c7	                            mov rdi, rax	       466	convert.c	FUNCTION_15	IF_6	IF_7	CALL_10
0x4001107	      0xe800000000	                          call 0x400110c	       466	convert.c	FUNCTION_15	IF_6	IF_7	CALL_10
0x400110c	            0x85c0	                           test eax, eax	       465	convert.c	FUNCTION_15	IF_6	IF_7
0x400110e	            0x742e	                            je 0x400113e	       465	convert.c	FUNCTION_15	IF_6	IF_7
0x4001110	      0xbf00000000	                              mov edi, 0	       467	convert.c	FUNCTION_15	IF_6	IF_7	CALL_11
0x4001115	      0xe88ef1ffff	                               call sym.	       467	convert.c	FUNCTION_15	IF_6	IF_7	CALL_11
0x400111a	        0x488945f0	             mov qword [rbp - 0x10], rax	       467	convert.c	FUNCTION_15	IF_6	IF_7	CALL_11
0x400111e	    0x488b0d000000	            mov rcx, qword [0x04001125] 	       469	convert.c	FUNCTION_15	IF_6	IF_7	CALL_12
0x4001125	        0x488b5598	             mov rdx, qword [rbp - 0x68]	       469	convert.c	FUNCTION_15	IF_6	IF_7	CALL_12
0x4001129	        0x488b75b8	             mov rsi, qword [rbp - 0x48]	       469	convert.c	FUNCTION_15	IF_6	IF_7	CALL_12
0x400112d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       469	convert.c	FUNCTION_15	IF_6	IF_7	CALL_12
0x4001131	          0x4889c7	                            mov rdi, rax	       469	convert.c	FUNCTION_15	IF_6	IF_7	CALL_12
0x4001134	      0xb800000000	                              mov eax, 0	       469	convert.c	FUNCTION_15	IF_6	IF_7	CALL_12
0x4001139	      0xe800000000	                          call 0x400113e	       469	convert.c	FUNCTION_15	IF_6	IF_7	CALL_12
0x400113e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       472	convert.c	FUNCTION_15	IF_6	CALL_13
0x4001142	          0x4889c7	                            mov rdi, rax	       472	convert.c	FUNCTION_15	IF_6	CALL_13
0x4001145	      0xe800000000	                          call 0x400114a	       472	convert.c	FUNCTION_15	IF_6	CALL_13
0x400114a	          0x8b45cc	             mov eax, dword [rbp - 0x34]	       475	convert.c	FUNCTION_15	CALL_14
0x400114d	          0x83c001	                              add eax, 1	       475	convert.c	FUNCTION_15	CALL_14
0x4001150	          0x4863c8	                         movsxd rcx, eax	       475	convert.c	FUNCTION_15	CALL_14
0x4001153	          0x8b45cc	             mov eax, dword [rbp - 0x34]	       475	convert.c	FUNCTION_15	CALL_14
0x4001156	          0x4863d0	                         movsxd rdx, eax	       475	convert.c	FUNCTION_15	CALL_14
0x4001159	        0x488b75d8	             mov rsi, qword [rbp - 0x28]	       475	convert.c	FUNCTION_15	CALL_14
0x400115d	        0x488b45a0	             mov rax, qword [rbp - 0x60]	       475	convert.c	FUNCTION_15	CALL_14
0x4001161	          0x4889c7	                            mov rdi, rax	       475	convert.c	FUNCTION_15	CALL_14
0x4001164	      0xe800000000	                          call 0x4001169	       475	convert.c	FUNCTION_15	CALL_14
0x4001169	      0xb801000000	                              mov eax, 1	       476	convert.c	FUNCTION_15
0x400116e	        0x488b7df8	                mov rdi, qword [rbp - 8]	       477	convert.c	FUNCTION_15
0x4001172	    0x6448333c2528	                xor rdi, qword fs:[0x28]	       477	convert.c	FUNCTION_15
0x400117b	            0x7405	                            je 0x4001182	       477	convert.c	FUNCTION_15
0x400117d	      0xe800000000	                          call 0x4001182	       477	convert.c	FUNCTION_15
0x4001182	              0xc9	                                   leave	       477	convert.c	FUNCTION_15
0x4001183	              0xc3	                                     ret	       477	convert.c	FUNCTION_15
apply_multi_file_filter	ELSE,6:FOR,0:WHILE,0:IF,20:CALL,31:functions,0:SWITCH,0:DO,0	287
0x4001ce6	              0x55	                                push rbp	       803	convert.c	FUNCTION_23
0x4001ce7	          0x4889e5	                            mov rbp, rsp	       803	convert.c	FUNCTION_23
0x4001cea	    0x4881eca00000	                           sub rsp, 0xa0	       803	convert.c	FUNCTION_23
0x4001cf1	        0x48897d98	             mov qword [rbp - 0x68], rdi	       803	convert.c	FUNCTION_23
0x4001cf5	        0x48897590	             mov qword [rbp - 0x70], rsi	       803	convert.c	FUNCTION_23
0x4001cf9	        0x48895588	             mov qword [rbp - 0x78], rdx	       803	convert.c	FUNCTION_23
0x4001cfd	          0x894d84	             mov dword [rbp - 0x7c], ecx	       803	convert.c	FUNCTION_23
0x4001d00	    0x4c898578ffff	              mov qword [rbp - 0x88], r8	       803	convert.c	FUNCTION_23
0x4001d07	    0x4c898d70ffff	              mov qword [rbp - 0x90], r9	       803	convert.c	FUNCTION_23
0x4001d0e	        0x488b4518	            mov rax, qword [rbp + 0x18] 	       803	convert.c	FUNCTION_23
0x4001d12	    0x48898568ffff	             mov qword [rbp - 0x98], rax	       803	convert.c	FUNCTION_23
0x4001d19	    0x64488b042528	                mov rax, qword fs:[0x28]	       803	convert.c	FUNCTION_23
0x4001d22	        0x488945f8	                mov qword [rbp - 8], rax	       803	convert.c	FUNCTION_23
0x4001d26	            0x31c0	                            xor eax, eax	       803	convert.c	FUNCTION_23
0x4001d28	    0xc745a4000000	               mov dword [rbp - 0x5c], 0	       805	convert.c	FUNCTION_23
0x4001d2f	    0x48c745c00000	               mov qword [rbp - 0x40], 0	       808	convert.c	FUNCTION_23
0x4001d37	    0x48c745c80000	               mov qword [rbp - 0x38], 0	       808	convert.c	FUNCTION_23
0x4001d3f	    0x48c745d00000	               mov qword [rbp - 0x30], 0	       808	convert.c	FUNCTION_23
0x4001d47	    0x48c745e00000	               mov qword [rbp - 0x20], 0	       809	convert.c	FUNCTION_23
0x4001d4f	    0x48c745e80000	               mov qword [rbp - 0x18], 0	       809	convert.c	FUNCTION_23
0x4001d57	    0x48c745f00000	               mov qword [rbp - 0x10], 0	       809	convert.c	FUNCTION_23
0x4001d5f	    0x8b0500000000	            mov eax, dword [0x04001d65] 	       812	convert.c	FUNCTION_23	IF_1
0x4001d65	            0x85c0	                           test eax, eax	       812	convert.c	FUNCTION_23	IF_1
0x4001d67	            0x752d	                           jne 0x4001d96	       812	convert.c	FUNCTION_23	IF_1
0x4001d69	    0xc70500000000	               mov dword [0x04001d73], 1	       813	convert.c	FUNCTION_23	IF_1
0x4001d73	      0xb900000000	                              mov ecx, 0	       814	convert.c	FUNCTION_23	IF_1	CALL_1
0x4001d78	      0xba00000000	                              mov edx, 0	       814	convert.c	FUNCTION_23	IF_1	CALL_1
0x4001d7d	      0xbe00000000	                              mov esi, 0	       814	convert.c	FUNCTION_23	IF_1	CALL_1
0x4001d82	      0xbf00000000	                              mov edi, 0	       814	convert.c	FUNCTION_23	IF_1	CALL_1
0x4001d87	      0xe800000000	                          call 0x4001d8c	       814	convert.c	FUNCTION_23	IF_1	CALL_1
0x4001d8c	    0x48c745a80000	               mov qword [rbp - 0x58], 0	       815	convert.c	FUNCTION_23	IF_1
0x4001d94	            0xeb18	                           jmp 0x4001dae	       815	convert.c	FUNCTION_23	IF_1
0x4001d96	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       817	convert.c	FUNCTION_23	ELSE_1	CALL_2
0x4001d9d	          0x4889c6	                            mov rsi, rax	       817	convert.c	FUNCTION_23	ELSE_1	CALL_2
0x4001da0	      0xbf00000000	                              mov edi, 0	       817	convert.c	FUNCTION_23	ELSE_1	CALL_2
0x4001da5	      0xe800000000	                          call 0x4001daa	       817	convert.c	FUNCTION_23	ELSE_1	CALL_2
0x4001daa	        0x488945a8	             mov qword [rbp - 0x58], rax	       817	convert.c	FUNCTION_23	ELSE_1	CALL_2
0x4001dae	      0xbf00000000	                              mov edi, 0	       820	convert.c	FUNCTION_23	CALL_3
0x4001db3	      0xe800000000	                          call 0x4001db8	       820	convert.c	FUNCTION_23	CALL_3
0x4001db8	      0x48837da800	               cmp qword [rbp - 0x58], 0	       822	convert.c	FUNCTION_23	IF_2
0x4001dbd	            0x7550	                           jne 0x4001e0f	       822	convert.c	FUNCTION_23	IF_2
0x4001dbf	      0xbf80000000	                           mov edi, 0x80	       823	convert.c	FUNCTION_23	IF_2	CALL_4
0x4001dc4	      0xe800000000	                          call 0x4001dc9	       823	convert.c	FUNCTION_23	IF_2	CALL_4
0x4001dc9	        0x488945a8	             mov qword [rbp - 0x58], rax	       823	convert.c	FUNCTION_23	IF_2	CALL_4
0x4001dcd	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       824	convert.c	FUNCTION_23	IF_2
0x4001dd1	    0xc74078000000	               mov dword [rax + 0x78], 0	       824	convert.c	FUNCTION_23	IF_2
0x4001dd8	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       826	convert.c	FUNCTION_23	IF_2	IF_3	CALL_5
0x4001ddc	    0x488b9570ffff	             mov rdx, qword [rbp - 0x90]	       826	convert.c	FUNCTION_23	IF_2	IF_3	CALL_5
0x4001de3	      0xb900000000	                              mov ecx, 0	       826	convert.c	FUNCTION_23	IF_2	IF_3	CALL_5
0x4001de8	          0x4889c6	                            mov rsi, rax	       826	convert.c	FUNCTION_23	IF_2	IF_3	CALL_5
0x4001deb	      0xbf00000000	                              mov edi, 0	       826	convert.c	FUNCTION_23	IF_2	IF_3	CALL_5
0x4001df0	      0xe800000000	                          call 0x4001df5	       826	convert.c	FUNCTION_23	IF_2	IF_3	CALL_5
0x4001df5	            0x85c0	                           test eax, eax	       826	convert.c	FUNCTION_23	IF_2	IF_3	CALL_5
0x4001df7	            0x7416	                            je 0x4001e0f	       826	convert.c	FUNCTION_23	IF_2	IF_3	CALL_5
0x4001df9	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       827	convert.c	FUNCTION_23	IF_2	IF_3	CALL_6
0x4001dfd	          0x4889c7	                            mov rdi, rax	       827	convert.c	FUNCTION_23	IF_2	IF_3	CALL_6
0x4001e00	      0xe800000000	                          call 0x4001e05	       827	convert.c	FUNCTION_23	IF_2	IF_3	CALL_6
0x4001e05	      0xb800000000	                              mov eax, 0	       828	convert.c	FUNCTION_23	IF_2	IF_3
0x4001e0a	      0xe92e030000	                           jmp 0x400213d	       828	convert.c	FUNCTION_23	IF_2	IF_3
0x4001e0f	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       831	convert.c	FUNCTION_23
0x4001e13	        0x4883c018	                           add rax, 0x18	       831	convert.c	FUNCTION_23
0x4001e17	        0x488945b8	             mov qword [rbp - 0x48], rax	       831	convert.c	FUNCTION_23
0x4001e1b	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       833	convert.c	FUNCTION_23	IF_4
0x4001e1f	          0x8b4078	            mov eax, dword [rax + 0x78] 	       833	convert.c	FUNCTION_23	IF_4
0x4001e22	          0x234510	             and eax, dword [rbp + 0x10]	       833	convert.c	FUNCTION_23	IF_4
0x4001e25	            0x85c0	                           test eax, eax	       833	convert.c	FUNCTION_23	IF_4
0x4001e27	            0x750a	                           jne 0x4001e33	       833	convert.c	FUNCTION_23	IF_4
0x4001e29	      0xb800000000	                              mov eax, 0	       834	convert.c	FUNCTION_23	IF_4
0x4001e2e	      0xe90a030000	                           jmp 0x400213d	       834	convert.c	FUNCTION_23	IF_4
0x4001e33	          0x8b4510	            mov eax, dword [rbp + 0x10] 	       836	convert.c	FUNCTION_23	IF_5
0x4001e36	          0x83e001	                              and eax, 1	       836	convert.c	FUNCTION_23	IF_5
0x4001e39	            0x85c0	                           test eax, eax	       836	convert.c	FUNCTION_23	IF_5
0x4001e3b	            0x740a	                            je 0x4001e47	       836	convert.c	FUNCTION_23	IF_5
0x4001e3d	    0x48c745b00000	               mov qword [rbp - 0x50], 0	       837	convert.c	FUNCTION_23	IF_5
0x4001e45	            0xeb23	                           jmp 0x4001e6a	       837	convert.c	FUNCTION_23	IF_5
0x4001e47	          0x8b4510	            mov eax, dword [rbp + 0x10] 	       838	convert.c	FUNCTION_23	ELSE_2	IF_6
0x4001e4a	          0x83e002	                              and eax, 2	       838	convert.c	FUNCTION_23	ELSE_2	IF_6
0x4001e4d	            0x85c0	                           test eax, eax	       838	convert.c	FUNCTION_23	ELSE_2	IF_6
0x4001e4f	            0x740a	                            je 0x4001e5b	       838	convert.c	FUNCTION_23	ELSE_2	IF_6
0x4001e51	    0x48c745b00000	               mov qword [rbp - 0x50], 0	       839	convert.c	FUNCTION_23	ELSE_2	IF_6
0x4001e59	            0xeb0f	                           jmp 0x4001e6a	       839	convert.c	FUNCTION_23	ELSE_2	IF_6
0x4001e5b	      0xbf00000000	                              mov edi, 0	       841	convert.c	FUNCTION_23	CALL_7
0x4001e60	      0xb800000000	                              mov eax, 0	       841	convert.c	FUNCTION_23	CALL_7
0x4001e65	      0xe800000000	                          call 0x4001e6a	       841	convert.c	FUNCTION_23	CALL_7
0x4001e6a	      0xbe01000000	                              mov esi, 1	       843	convert.c	FUNCTION_23	CALL_8
0x4001e6f	      0xbf0d000000	                            mov edi, 0xd	       843	convert.c	FUNCTION_23	CALL_8
0x4001e74	      0xe800000000	                          call 0x4001e79	       843	convert.c	FUNCTION_23	CALL_8
0x4001e79	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       845	convert.c	FUNCTION_23	CALL_11
0x4001e7d	          0x4889c7	                            mov rdi, rax	       845	convert.c	FUNCTION_23	CALL_11
0x4001e80	      0xe800000000	                          call 0x4001e85	       845	convert.c	FUNCTION_23	CALL_11
0x4001e85	    0x483de2ff0000	                         cmp rax, 0xffe2	       845	convert.c	FUNCTION_23	CALL_11
0x4001e8b	            0x7619	                           jbe 0x4001ea6	       845	convert.c	FUNCTION_23	CALL_11
0x4001e8d	      0xb900000000	                              mov ecx, 0	       845	convert.c	FUNCTION_23	CALL_11
0x4001e92	      0xba4d030000	                          mov edx, 0x34d	       845	convert.c	FUNCTION_23	CALL_11
0x4001e97	      0xbe00000000	                              mov esi, 0	       845	convert.c	FUNCTION_23	CALL_11
0x4001e9c	      0xbf00000000	                              mov edi, 0	       845	convert.c	FUNCTION_23	CALL_11
0x4001ea1	      0xe800000000	                          call 0x4001ea6	       845	convert.c	FUNCTION_23	CALL_11
0x4001ea6	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       846	convert.c	FUNCTION_23	CALL_12
0x4001eaa	          0x8b402c	            mov eax, dword [rax + 0x2c] 	       846	convert.c	FUNCTION_23	CALL_12
0x4001ead	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	       846	convert.c	FUNCTION_23	CALL_12
0x4001eb1	      0xbe00000000	                              mov esi, 0	       846	convert.c	FUNCTION_23	CALL_12
0x4001eb6	            0x89c7	                            mov edi, eax	       846	convert.c	FUNCTION_23	CALL_12
0x4001eb8	      0xb800000000	                              mov eax, 0	       846	convert.c	FUNCTION_23	CALL_12
0x4001ebd	      0xe800000000	                          call 0x4001ec2	       846	convert.c	FUNCTION_23	CALL_12
0x4001ec2	          0x8945a0	             mov dword [rbp - 0x60], eax	       846	convert.c	FUNCTION_23	CALL_12
0x4001ec5	        0x837da000	               cmp dword [rbp - 0x60], 0	       847	convert.c	FUNCTION_23	IF_7
0x4001ec9	     0xf8501020000	                           jne 0x40020d0	       847	convert.c	FUNCTION_23	IF_7
0x4001ecf	        0x488b4598	             mov rax, qword [rbp - 0x68]	       850	convert.c	FUNCTION_23	CALL_14
0x4001ed3	          0x4889c7	                            mov rdi, rax	       850	convert.c	FUNCTION_23	CALL_14
0x4001ed6	      0xe800000000	                          call 0x4001edb	       850	convert.c	FUNCTION_23	CALL_14
0x4001edb	    0x483de2ff0000	                         cmp rax, 0xffe2	       850	convert.c	FUNCTION_23	CALL_14
0x4001ee1	           0xf97c0	                                 seta al	       850	convert.c	FUNCTION_23	CALL_14
0x4001ee4	           0xfb6c0	                           movzx eax, al	       850	convert.c	FUNCTION_23	CALL_14
0x4001ee7	          0x8945a0	             mov dword [rbp - 0x60], eax	       850	convert.c	FUNCTION_23	CALL_14
0x4001eea	        0x837da000	               cmp dword [rbp - 0x60], 0	       851	convert.c	FUNCTION_23	IF_8
0x4001eee	            0x7419	                            je 0x4001f09	       851	convert.c	FUNCTION_23	IF_8
0x4001ef0	      0xbf00000000	                              mov edi, 0	       852	convert.c	FUNCTION_23	IF_8
0x4001ef5	      0xb800000000	                              mov eax, 0	       852	convert.c	FUNCTION_23	IF_8
0x4001efa	      0xe800000000	                          call 0x4001eff	       852	convert.c	FUNCTION_23	IF_8
0x4001eff	      0xe83ce1ffff	                    call sym.const_error	       852	convert.c	FUNCTION_23	IF_8
0x4001f04	      0xe9e0010000	                           jmp 0x40020e9	       853	convert.c	FUNCTION_23	IF_8
0x4001f09	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       856	convert.c	FUNCTION_23	CALL_15
0x4001f0d	          0x8b402c	            mov eax, dword [rax + 0x2c] 	       856	convert.c	FUNCTION_23	CALL_15
0x4001f10	        0x488b5598	             mov rdx, qword [rbp - 0x68]	       856	convert.c	FUNCTION_23	CALL_15
0x4001f14	      0xbe00000000	                              mov esi, 0	       856	convert.c	FUNCTION_23	CALL_15
0x4001f19	            0x89c7	                            mov edi, eax	       856	convert.c	FUNCTION_23	CALL_15
0x4001f1b	      0xb800000000	                              mov eax, 0	       856	convert.c	FUNCTION_23	CALL_15
0x4001f20	      0xe800000000	                          call 0x4001f25	       856	convert.c	FUNCTION_23	CALL_15
0x4001f25	          0x8945a0	             mov dword [rbp - 0x60], eax	       856	convert.c	FUNCTION_23	CALL_15
0x4001f28	        0x837da000	               cmp dword [rbp - 0x60], 0	       857	convert.c	FUNCTION_23	IF_9
0x4001f2c	     0xf85a1010000	                           jne 0x40020d3	       857	convert.c	FUNCTION_23	IF_9
0x4001f32	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       860	convert.c	FUNCTION_23	IF_10
0x4001f36	          0x8b4078	            mov eax, dword [rax + 0x78] 	       860	convert.c	FUNCTION_23	IF_10
0x4001f39	          0x83e004	                              and eax, 4	       860	convert.c	FUNCTION_23	IF_10
0x4001f3c	            0x85c0	                           test eax, eax	       860	convert.c	FUNCTION_23	IF_10
0x4001f3e	            0x7444	                            je 0x4001f84	       860	convert.c	FUNCTION_23	IF_10
0x4001f40	    0x4883bd68ffff	               cmp qword [rbp - 0x98], 0	       860	convert.c	FUNCTION_23	IF_10
0x4001f48	            0x743a	                            je 0x4001f84	       860	convert.c	FUNCTION_23	IF_10
0x4001f4a	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	       861	convert.c	FUNCTION_23	IF_10
0x4001f51	            0x8b00	                    mov eax, dword [rax]	       861	convert.c	FUNCTION_23	IF_10
0x4001f53	          0x83f801	                              cmp eax, 1	       861	convert.c	FUNCTION_23	IF_10
0x4001f56	            0x752c	                           jne 0x4001f84	       861	convert.c	FUNCTION_23	IF_10
0x4001f58	    0xc745a4010000	               mov dword [rbp - 0x5c], 1	       862	convert.c	FUNCTION_23	IF_10
0x4001f5f	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       863	convert.c	FUNCTION_23	IF_10	CALL_16
0x4001f63	          0x8b402c	            mov eax, dword [rax + 0x2c] 	       863	convert.c	FUNCTION_23	IF_10	CALL_16
0x4001f66	      0xbe00000000	                              mov esi, 0	       863	convert.c	FUNCTION_23	IF_10	CALL_16
0x4001f6b	            0x89c7	                            mov edi, eax	       863	convert.c	FUNCTION_23	IF_10	CALL_16
0x4001f6d	      0xb800000000	                              mov eax, 0	       863	convert.c	FUNCTION_23	IF_10	CALL_16
0x4001f72	      0xe800000000	                          call 0x4001f77	       863	convert.c	FUNCTION_23	IF_10	CALL_16
0x4001f77	          0x8945a0	             mov dword [rbp - 0x60], eax	       863	convert.c	FUNCTION_23	IF_10	CALL_16
0x4001f7a	        0x837da000	               cmp dword [rbp - 0x60], 0	       864	convert.c	FUNCTION_23	IF_10	IF_11
0x4001f7e	     0xf8552010000	                           jne 0x40020d6	       864	convert.c	FUNCTION_23	IF_10	IF_11
0x4001f84	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       868	convert.c	FUNCTION_23	CALL_17
0x4001f88	          0x8b402c	            mov eax, dword [rax + 0x2c] 	       868	convert.c	FUNCTION_23	CALL_17
0x4001f8b	            0x89c7	                            mov edi, eax	       868	convert.c	FUNCTION_23	CALL_17
0x4001f8d	      0xe800000000	                          call 0x4001f92	       868	convert.c	FUNCTION_23	CALL_17
0x4001f92	          0x8945a0	             mov dword [rbp - 0x60], eax	       868	convert.c	FUNCTION_23	CALL_17
0x4001f95	        0x837da000	               cmp dword [rbp - 0x60], 0	       869	convert.c	FUNCTION_23	IF_12
0x4001f99	     0xf853a010000	                           jne 0x40020d9	       869	convert.c	FUNCTION_23	IF_12
0x4001f9f	        0x837d8400	               cmp dword [rbp - 0x7c], 0	       872	convert.c	FUNCTION_23	IF_13
0x4001fa3	            0x7818	                            js 0x4001fbd	       872	convert.c	FUNCTION_23	IF_13
0x4001fa5	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       873	convert.c	FUNCTION_23	CALL_18
0x4001fa9	          0x8b502c	            mov edx, dword [rax + 0x2c] 	       873	convert.c	FUNCTION_23	CALL_18
0x4001fac	          0x8b4584	             mov eax, dword [rbp - 0x7c]	       873	convert.c	FUNCTION_23	CALL_18
0x4001faf	            0x89d6	                            mov esi, edx	       873	convert.c	FUNCTION_23	CALL_18
0x4001fb1	            0x89c7	                            mov edi, eax	       873	convert.c	FUNCTION_23	CALL_18
0x4001fb3	      0xe800000000	                          call 0x4001fb8	       873	convert.c	FUNCTION_23	CALL_18
0x4001fb8	          0x8945a0	             mov dword [rbp - 0x60], eax	       873	convert.c	FUNCTION_23	CALL_18
0x4001fbb	            0xeb1d	                           jmp 0x4001fda	       873	convert.c	FUNCTION_23	CALL_18
0x4001fbd	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       875	convert.c	FUNCTION_23	CALL_19
0x4001fc1	          0x8b502c	            mov edx, dword [rax + 0x2c] 	       875	convert.c	FUNCTION_23	CALL_19
0x4001fc4	        0x488b4d88	             mov rcx, qword [rbp - 0x78]	       875	convert.c	FUNCTION_23	CALL_19
0x4001fc8	        0x488b4590	             mov rax, qword [rbp - 0x70]	       875	convert.c	FUNCTION_23	CALL_19
0x4001fcc	          0x4889ce	                            mov rsi, rcx	       875	convert.c	FUNCTION_23	CALL_19
0x4001fcf	          0x4889c7	                            mov rdi, rax	       875	convert.c	FUNCTION_23	CALL_19
0x4001fd2	      0xe800000000	                          call 0x4001fd7	       875	convert.c	FUNCTION_23	CALL_19
0x4001fd7	          0x8945a0	             mov dword [rbp - 0x60], eax	       875	convert.c	FUNCTION_23	CALL_19
0x4001fda	        0x837da000	               cmp dword [rbp - 0x60], 0	       876	convert.c	FUNCTION_23	IF_14
0x4001fde	     0xf85f8000000	                           jne 0x40020dc	       876	convert.c	FUNCTION_23	IF_14
0x4001fe4	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       879	convert.c	FUNCTION_23	CALL_20
0x4001fe8	          0x8b4030	            mov eax, dword [rax + 0x30] 	       879	convert.c	FUNCTION_23	CALL_20
0x4001feb	        0x488d55e0	                   lea rdx, [rbp - 0x20]	       879	convert.c	FUNCTION_23	CALL_20
0x4001fef	          0x4889d6	                            mov rsi, rdx	       879	convert.c	FUNCTION_23	CALL_20
0x4001ff2	            0x89c7	                            mov edi, eax	       879	convert.c	FUNCTION_23	CALL_20
0x4001ff4	      0xe800000000	                          call 0x4001ff9	       879	convert.c	FUNCTION_23	CALL_20
0x4001ff9	          0x8945a0	             mov dword [rbp - 0x60], eax	       879	convert.c	FUNCTION_23	CALL_20
0x4001ffc	        0x837da000	               cmp dword [rbp - 0x60], 0	       880	convert.c	FUNCTION_23	IF_15
0x4002000	     0xf85d9000000	                           jne 0x40020df	       880	convert.c	FUNCTION_23	IF_15
0x4002006	        0x837da400	               cmp dword [rbp - 0x5c], 0	       883	convert.c	FUNCTION_23	IF_16	CALL_21
0x400200a	            0x7451	                            je 0x400205d	       883	convert.c	FUNCTION_23	IF_16	CALL_21
0x400200c	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       883	convert.c	FUNCTION_23	IF_16	CALL_21
0x4002010	      0xbe00000000	                              mov esi, 0	       883	convert.c	FUNCTION_23	IF_16	CALL_21
0x4002015	          0x4889c7	                            mov rdi, rax	       883	convert.c	FUNCTION_23	IF_16	CALL_21
0x4002018	      0xe800000000	                          call 0x400201d	       883	convert.c	FUNCTION_23	IF_16	CALL_21
0x400201d	            0x85c0	                           test eax, eax	       883	convert.c	FUNCTION_23	IF_16	CALL_21
0x400201f	            0x753c	                           jne 0x400205d	       883	convert.c	FUNCTION_23	IF_16	CALL_21
0x4002021	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	       884	convert.c	FUNCTION_23	IF_16	CALL_22
0x4002028	        0x488d5008	                      lea rdx, [rax + 8]	       884	convert.c	FUNCTION_23	IF_16	CALL_22
0x400202c	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       884	convert.c	FUNCTION_23	IF_16	CALL_22
0x4002033	          0x4889c6	                            mov rsi, rax	       884	convert.c	FUNCTION_23	IF_16	CALL_22
0x4002036	          0x4889d7	                            mov rdi, rdx	       884	convert.c	FUNCTION_23	IF_16	CALL_22
0x4002039	      0xe800000000	                          call 0x400203e	       884	convert.c	FUNCTION_23	IF_16	CALL_22
0x400203e	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	       885	convert.c	FUNCTION_23	IF_16	CALL_23
0x4002045	        0x488d5028	                   lea rdx, [rax + 0x28]	       885	convert.c	FUNCTION_23	IF_16	CALL_23
0x4002049	        0x488b4598	             mov rax, qword [rbp - 0x68]	       885	convert.c	FUNCTION_23	IF_16	CALL_23
0x400204d	          0x4889c6	                            mov rsi, rax	       885	convert.c	FUNCTION_23	IF_16	CALL_23
0x4002050	          0x4889d7	                            mov rdi, rdx	       885	convert.c	FUNCTION_23	IF_16	CALL_23
0x4002053	      0xe800000000	                          call 0x4002058	       885	convert.c	FUNCTION_23	IF_16	CALL_23
0x4002058	      0xe98c000000	                           jmp 0x40020e9	       885	convert.c	FUNCTION_23	IF_16	CALL_23
0x400205d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       888	convert.c	FUNCTION_23	ELSE_5	CALL_24
0x4002061	      0xbe00000000	                              mov esi, 0	       888	convert.c	FUNCTION_23	ELSE_5	CALL_24
0x4002066	          0x4889c7	                            mov rdi, rax	       888	convert.c	FUNCTION_23	ELSE_5	CALL_24
0x4002069	      0xe800000000	                          call 0x400206e	       888	convert.c	FUNCTION_23	ELSE_5	CALL_24
0x400206e	          0x8945a0	             mov dword [rbp - 0x60], eax	       888	convert.c	FUNCTION_23	ELSE_5	CALL_24
0x4002071	        0x837da000	               cmp dword [rbp - 0x60], 0	       889	convert.c	FUNCTION_23	ELSE_5	IF_17
0x4002075	            0x756b	                           jne 0x40020e2	       889	convert.c	FUNCTION_23	ELSE_5	IF_17
0x4002077	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       892	convert.c	FUNCTION_23	ELSE_5	CALL_25
0x400207b	          0x8b4030	            mov eax, dword [rax + 0x30] 	       892	convert.c	FUNCTION_23	ELSE_5	CALL_25
0x400207e	        0x488d55c0	                   lea rdx, [rbp - 0x40]	       892	convert.c	FUNCTION_23	ELSE_5	CALL_25
0x4002082	          0x4889d6	                            mov rsi, rdx	       892	convert.c	FUNCTION_23	ELSE_5	CALL_25
0x4002085	            0x89c7	                            mov edi, eax	       892	convert.c	FUNCTION_23	ELSE_5	CALL_25
0x4002087	      0xe800000000	                          call 0x400208c	       892	convert.c	FUNCTION_23	ELSE_5	CALL_25
0x400208c	        0x48c1e83f	                           shr rax, 0x3f	       892	convert.c	FUNCTION_23	ELSE_5	CALL_25
0x4002090	           0xfb6c0	                           movzx eax, al	       892	convert.c	FUNCTION_23	ELSE_5	CALL_25
0x4002093	          0x8945a0	             mov dword [rbp - 0x60], eax	       892	convert.c	FUNCTION_23	ELSE_5	CALL_25
0x4002096	        0x837da000	               cmp dword [rbp - 0x60], 0	       893	convert.c	FUNCTION_23	ELSE_5	IF_18
0x400209a	            0x7549	                           jne 0x40020e5	       893	convert.c	FUNCTION_23	ELSE_5	IF_18
0x400209c	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       896	convert.c	FUNCTION_23	ELSE_5	CALL_26
0x40020a0	          0x8b4030	            mov eax, dword [rax + 0x30] 	       896	convert.c	FUNCTION_23	ELSE_5	CALL_26
0x40020a3	        0x488d55e0	                   lea rdx, [rbp - 0x20]	       896	convert.c	FUNCTION_23	ELSE_5	CALL_26
0x40020a7	          0x4889d6	                            mov rsi, rdx	       896	convert.c	FUNCTION_23	ELSE_5	CALL_26
0x40020aa	            0x89c7	                            mov edi, eax	       896	convert.c	FUNCTION_23	ELSE_5	CALL_26
0x40020ac	      0xe800000000	                          call 0x40020b1	       896	convert.c	FUNCTION_23	ELSE_5	CALL_26
0x40020b1	          0x8945a0	             mov dword [rbp - 0x60], eax	       896	convert.c	FUNCTION_23	ELSE_5	CALL_26
0x40020b4	        0x837da000	               cmp dword [rbp - 0x60], 0	       897	convert.c	FUNCTION_23	ELSE_5	IF_19
0x40020b8	            0x752e	                           jne 0x40020e8	       897	convert.c	FUNCTION_23	ELSE_5	IF_19
0x40020ba	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       900	convert.c	FUNCTION_23	ELSE_5	CALL_27
0x40020be	      0xbe00000000	                              mov esi, 0	       900	convert.c	FUNCTION_23	ELSE_5	CALL_27
0x40020c3	          0x4889c7	                            mov rdi, rax	       900	convert.c	FUNCTION_23	ELSE_5	CALL_27
0x40020c6	      0xe800000000	                          call 0x40020cb	       900	convert.c	FUNCTION_23	ELSE_5	CALL_27
0x40020cb	          0x8945a0	             mov dword [rbp - 0x60], eax	       900	convert.c	FUNCTION_23	ELSE_5	CALL_27
0x40020ce	            0xeb19	                           jmp 0x40020e9	       900	convert.c	FUNCTION_23	ELSE_5	CALL_27
0x40020d0	              0x90	                                     nop	       848	convert.c	FUNCTION_23	IF_7
0x40020d1	            0xeb16	                           jmp 0x40020e9	       848	convert.c	FUNCTION_23	IF_7
0x40020d3	              0x90	                                     nop	       858	convert.c	FUNCTION_23	IF_9
0x40020d4	            0xeb13	                           jmp 0x40020e9	       858	convert.c	FUNCTION_23	IF_9
0x40020d6	              0x90	                                     nop	       865	convert.c	FUNCTION_23	IF_10	IF_11
0x40020d7	            0xeb10	                           jmp 0x40020e9	       865	convert.c	FUNCTION_23	IF_10	IF_11
0x40020d9	              0x90	                                     nop	       870	convert.c	FUNCTION_23	IF_12
0x40020da	            0xeb0d	                           jmp 0x40020e9	       870	convert.c	FUNCTION_23	IF_12
0x40020dc	              0x90	                                     nop	       877	convert.c	FUNCTION_23	IF_14
0x40020dd	            0xeb0a	                           jmp 0x40020e9	       877	convert.c	FUNCTION_23	IF_14
0x40020df	              0x90	                                     nop	       881	convert.c	FUNCTION_23	IF_15
0x40020e0	            0xeb07	                           jmp 0x40020e9	       881	convert.c	FUNCTION_23	IF_15
0x40020e2	              0x90	                                     nop	       890	convert.c	FUNCTION_23	ELSE_5	IF_17
0x40020e3	            0xeb04	                           jmp 0x40020e9	       890	convert.c	FUNCTION_23	ELSE_5	IF_17
0x40020e5	              0x90	                                     nop	       894	convert.c	FUNCTION_23	ELSE_5	IF_18
0x40020e6	            0xeb01	                           jmp 0x40020e9	       894	convert.c	FUNCTION_23	ELSE_5	IF_18
0x40020e8	              0x90	                                     nop	       898	convert.c	FUNCTION_23	ELSE_5	IF_19
0x40020e9	      0xbf0d000000	                            mov edi, 0xd	       904	convert.c	FUNCTION_23	CALL_28
0x40020ee	      0xe800000000	                          call 0x40020f3	       904	convert.c	FUNCTION_23	CALL_28
0x40020f3	        0x837da000	               cmp dword [rbp - 0x60], 0	       906	convert.c	FUNCTION_23	IF_20
0x40020f7	            0x7418	                            je 0x4002111	       906	convert.c	FUNCTION_23	IF_20
0x40020f9	        0x488b4da8	             mov rcx, qword [rbp - 0x58]	       907	convert.c	FUNCTION_23	CALL_29
0x40020fd	        0x488d45e0	                   lea rax, [rbp - 0x20]	       907	convert.c	FUNCTION_23	CALL_29
0x4002101	          0x8b5510	            mov edx, dword [rbp + 0x10] 	       907	convert.c	FUNCTION_23	CALL_29
0x4002104	          0x4889ce	                            mov rsi, rcx	       907	convert.c	FUNCTION_23	CALL_29
0x4002107	          0x4889c7	                            mov rdi, rax	       907	convert.c	FUNCTION_23	CALL_29
0x400210a	      0xe836fbffff	            call sym.handle_filter_error	       907	convert.c	FUNCTION_23	CALL_29
0x400210f	            0xeb16	                           jmp 0x4002127	       907	convert.c	FUNCTION_23	CALL_29
0x4002111	        0x488d55c0	                   lea rdx, [rbp - 0x40]	       909	convert.c	FUNCTION_23	CALL_30
0x4002115	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	       909	convert.c	FUNCTION_23	CALL_30
0x400211c	          0x4889d6	                            mov rsi, rdx	       909	convert.c	FUNCTION_23	CALL_30
0x400211f	          0x4889c7	                            mov rdi, rax	       909	convert.c	FUNCTION_23	CALL_30
0x4002122	      0xe87adfffff	                    call sym.strbuf_swap	       909	convert.c	FUNCTION_23	CALL_30
0x4002127	        0x488d45c0	                   lea rax, [rbp - 0x40]	       910	convert.c	FUNCTION_23	CALL_31
0x400212b	          0x4889c7	                            mov rdi, rax	       910	convert.c	FUNCTION_23	CALL_31
0x400212e	      0xe800000000	                          call 0x4002133	       910	convert.c	FUNCTION_23	CALL_31
0x4002133	        0x837da000	               cmp dword [rbp - 0x60], 0	       911	convert.c	FUNCTION_23
0x4002137	           0xf94c0	                                 sete al	       911	convert.c	FUNCTION_23
0x400213a	           0xfb6c0	                           movzx eax, al	       911	convert.c	FUNCTION_23
0x400213d	        0x488b4df8	                mov rcx, qword [rbp - 8]	       912	convert.c	FUNCTION_23
0x4002141	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       912	convert.c	FUNCTION_23
0x400214a	            0x7405	                            je 0x4002151	       912	convert.c	FUNCTION_23
0x400214c	      0xe800000000	                          call 0x4002151	       912	convert.c	FUNCTION_23
0x4002151	              0xc9	                                   leave	       912	convert.c	FUNCTION_23
0x4002152	              0xc3	                                     ret	       912	convert.c	FUNCTION_23
handle_filter_error	ELSE,2:FOR,0:WHILE,0:IF,2:CALL,4:functions,0:SWITCH,0:DO,0	47
0x4001c45	              0x55	                                push rbp	       778	convert.c	FUNCTION_22
0x4001c46	          0x4889e5	                            mov rbp, rsp	       778	convert.c	FUNCTION_22
0x4001c49	        0x4883ec20	                           sub rsp, 0x20	       778	convert.c	FUNCTION_22
0x4001c4d	        0x48897df8	                mov qword [rbp - 8], rdi	       778	convert.c	FUNCTION_22
0x4001c51	        0x488975f0	             mov qword [rbp - 0x10], rsi	       778	convert.c	FUNCTION_22
0x4001c55	          0x8955ec	             mov dword [rbp - 0x14], edx	       778	convert.c	FUNCTION_22
0x4001c58	        0x488b45f8	                mov rax, qword [rbp - 8]	       779	convert.c	FUNCTION_22	IF_1	CALL_1
0x4001c5c	        0x488b4010	            mov rax, qword [rax + 0x10] 	       779	convert.c	FUNCTION_22	IF_1	CALL_1
0x4001c60	      0xbe00000000	                              mov esi, 0	       779	convert.c	FUNCTION_22	IF_1	CALL_1
0x4001c65	          0x4889c7	                            mov rdi, rax	       779	convert.c	FUNCTION_22	IF_1	CALL_1
0x4001c68	      0xe800000000	                          call 0x4001c6d	       779	convert.c	FUNCTION_22	IF_1	CALL_1
0x4001c6d	            0x85c0	                           test eax, eax	       779	convert.c	FUNCTION_22	IF_1	CALL_1
0x4001c6f	            0x7472	                            je 0x4001ce3	       779	convert.c	FUNCTION_22	IF_1	CALL_1
0x4001c71	        0x488b45f8	                mov rax, qword [rbp - 8]	       781	convert.c	FUNCTION_22	ELSE_1	IF_2	CALL_2
0x4001c75	        0x488b4010	            mov rax, qword [rax + 0x10] 	       781	convert.c	FUNCTION_22	ELSE_1	IF_2	CALL_2
0x4001c79	      0xbe00000000	                              mov esi, 0	       781	convert.c	FUNCTION_22	ELSE_1	IF_2	CALL_2
0x4001c7e	          0x4889c7	                            mov rdi, rax	       781	convert.c	FUNCTION_22	ELSE_1	IF_2	CALL_2
0x4001c81	      0xe800000000	                          call 0x4001c86	       781	convert.c	FUNCTION_22	ELSE_1	IF_2	CALL_2
0x4001c86	            0x85c0	                           test eax, eax	       781	convert.c	FUNCTION_22	ELSE_1	IF_2	CALL_2
0x4001c88	            0x751d	                           jne 0x4001ca7	       781	convert.c	FUNCTION_22	ELSE_1	IF_2	CALL_2
0x4001c8a	        0x837dec00	               cmp dword [rbp - 0x14], 0	       781	convert.c	FUNCTION_22	ELSE_1	IF_2	CALL_2
0x4001c8e	            0x7417	                            je 0x4001ca7	       781	convert.c	FUNCTION_22	ELSE_1	IF_2	CALL_2
0x4001c90	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       787	convert.c	FUNCTION_22	ELSE_1	IF_2
0x4001c94	          0x8b4078	            mov eax, dword [rax + 0x78] 	       787	convert.c	FUNCTION_22	ELSE_1	IF_2
0x4001c97	          0x8b55ec	             mov edx, dword [rbp - 0x14]	       787	convert.c	FUNCTION_22	ELSE_1	IF_2
0x4001c9a	            0xf7d2	                                 not edx	       787	convert.c	FUNCTION_22	ELSE_1	IF_2
0x4001c9c	            0x21c2	                            and edx, eax	       787	convert.c	FUNCTION_22	ELSE_1	IF_2
0x4001c9e	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       787	convert.c	FUNCTION_22	ELSE_1	IF_2
0x4001ca2	          0x895078	             mov dword [rax + 0x78], edx	       787	convert.c	FUNCTION_22	ELSE_1	IF_2
0x4001ca5	            0xeb3c	                           jmp 0x4001ce3	       797	convert.c	FUNCTION_22
0x4001ca7	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       793	convert.c	FUNCTION_22	ELSE_2
0x4001cab	        0x488b4010	            mov rax, qword [rax + 0x10] 	       793	convert.c	FUNCTION_22	ELSE_2
0x4001caf	          0x4889c6	                            mov rsi, rax	       793	convert.c	FUNCTION_22	ELSE_2
0x4001cb2	      0xbf00000000	                              mov edi, 0	       793	convert.c	FUNCTION_22	ELSE_2
0x4001cb7	      0xb800000000	                              mov eax, 0	       793	convert.c	FUNCTION_22	ELSE_2
0x4001cbc	      0xe800000000	                          call 0x4001cc1	       793	convert.c	FUNCTION_22	ELSE_2
0x4001cc1	      0xe87ae3ffff	                    call sym.const_error	       793	convert.c	FUNCTION_22	ELSE_2
0x4001cc6	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       794	convert.c	FUNCTION_22	ELSE_2	CALL_3
0x4001cca	          0x4889c6	                            mov rsi, rax	       794	convert.c	FUNCTION_22	ELSE_2	CALL_3
0x4001ccd	      0xbf00000000	                              mov edi, 0	       794	convert.c	FUNCTION_22	ELSE_2	CALL_3
0x4001cd2	      0xe800000000	                          call 0x4001cd7	       794	convert.c	FUNCTION_22	ELSE_2	CALL_3
0x4001cd7	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       795	convert.c	FUNCTION_22	ELSE_2	CALL_4
0x4001cdb	          0x4889c7	                            mov rdi, rax	       795	convert.c	FUNCTION_22	ELSE_2	CALL_4
0x4001cde	      0xe800000000	                          call 0x4001ce3	       795	convert.c	FUNCTION_22	ELSE_2	CALL_4
0x4001ce3	              0x90	                                     nop	       797	convert.c	FUNCTION_22
0x4001ce4	              0xc9	                                   leave	       797	convert.c	FUNCTION_22
0x4001ce5	              0xc3	                                     ret	       797	convert.c	FUNCTION_22
trace_pass_fl	ELSE,0:FOR,0:WHILE,0:IF,0:CALL,0:functions,0:SWITCH,0:DO,0	17
0x40002d4	              0x55	                                push rbp	       134	trace.h	FUNCTION_76
0x40002d5	          0x4889e5	                            mov rbp, rsp	       134	trace.h	FUNCTION_76
0x40002d8	        0x48897df8	                mov qword [rbp - 8], rdi	       134	trace.h	FUNCTION_76
0x40002dc	        0x488b45f8	                mov rax, qword [rbp - 8]	       135	trace.h	FUNCTION_76
0x40002e0	          0x8b4008	                mov eax, dword [rax + 8]	       135	trace.h	FUNCTION_76
0x40002e3	            0x85c0	                           test eax, eax	       135	trace.h	FUNCTION_76
0x40002e5	            0x750f	                           jne 0x40002f6	       135	trace.h	FUNCTION_76
0x40002e7	        0x488b45f8	                mov rax, qword [rbp - 8]	       135	trace.h	FUNCTION_76
0x40002eb	         0xfb6400c	            movzx eax, byte [rax + 0xc] 	       135	trace.h	FUNCTION_76
0x40002ef	          0x83e001	                              and eax, 1	       135	trace.h	FUNCTION_76
0x40002f2	            0x84c0	                             test al, al	       135	trace.h	FUNCTION_76
0x40002f4	            0x7507	                           jne 0x40002fd	       135	trace.h	FUNCTION_76
0x40002f6	      0xb801000000	                              mov eax, 1	       135	trace.h	FUNCTION_76
0x40002fb	            0xeb05	                           jmp 0x4000302	       135	trace.h	FUNCTION_76
0x40002fd	      0xb800000000	                              mov eax, 0	       135	trace.h	FUNCTION_76
0x4000302	              0x5d	                                 pop rbp	       136	trace.h	FUNCTION_76
0x4000303	              0xc3	                                     ret	       136	trace.h	FUNCTION_76
lf_to_crlf_free_fn	ELSE,0:FOR,0:WHILE,0:IF,0:CALL,1:functions,0:SWITCH,0:DO,0	10
0x4003aec	              0x55	                                push rbp	      1652	convert.c	FUNCTION_48
0x4003aed	          0x4889e5	                            mov rbp, rsp	      1652	convert.c	FUNCTION_48
0x4003af0	        0x4883ec10	                           sub rsp, 0x10	      1652	convert.c	FUNCTION_48
0x4003af4	        0x48897df8	                mov qword [rbp - 8], rdi	      1652	convert.c	FUNCTION_48
0x4003af8	        0x488b45f8	                mov rax, qword [rbp - 8]	      1653	convert.c	FUNCTION_48	CALL_1
0x4003afc	          0x4889c7	                            mov rdi, rax	      1653	convert.c	FUNCTION_48	CALL_1
0x4003aff	      0xe800000000	                          call 0x4003b04	      1653	convert.c	FUNCTION_48	CALL_1
0x4003b04	              0x90	                                     nop	      1654	convert.c	FUNCTION_48
0x4003b05	              0xc9	                                   leave	      1654	convert.c	FUNCTION_48
0x4003b06	              0xc3	                                     ret	      1654	convert.c	FUNCTION_48
convert_is_binary	ELSE,0:FOR,0:WHILE,0:IF,3:CALL,0:functions,0:SWITCH,0:DO,0	29
0x400047e	              0x55	                                push rbp	        95	convert.c	FUNCTION_2
0x400047f	          0x4889e5	                            mov rbp, rsp	        95	convert.c	FUNCTION_2
0x4000482	        0x48897df8	                mov qword [rbp - 8], rdi	        95	convert.c	FUNCTION_2
0x4000486	        0x488975f0	             mov qword [rbp - 0x10], rsi	        95	convert.c	FUNCTION_2
0x400048a	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        96	convert.c	FUNCTION_2	IF_1
0x400048e	          0x8b4004	                mov eax, dword [rax + 4]	        96	convert.c	FUNCTION_2	IF_1
0x4000491	            0x85c0	                           test eax, eax	        96	convert.c	FUNCTION_2	IF_1
0x4000493	            0x7407	                            je 0x400049c	        96	convert.c	FUNCTION_2	IF_1
0x4000495	      0xb801000000	                              mov eax, 1	        97	convert.c	FUNCTION_2	IF_1
0x400049a	            0xeb34	                           jmp 0x40004d0	        97	convert.c	FUNCTION_2	IF_1
0x400049c	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        98	convert.c	FUNCTION_2	IF_2
0x40004a0	            0x8b00	                    mov eax, dword [rax]	        98	convert.c	FUNCTION_2	IF_2
0x40004a2	            0x85c0	                           test eax, eax	        98	convert.c	FUNCTION_2	IF_2
0x40004a4	            0x7407	                            je 0x40004ad	        98	convert.c	FUNCTION_2	IF_2
0x40004a6	      0xb801000000	                              mov eax, 1	        99	convert.c	FUNCTION_2	IF_2
0x40004ab	            0xeb23	                           jmp 0x40004d0	        99	convert.c	FUNCTION_2	IF_2
0x40004ad	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       100	convert.c	FUNCTION_2	IF_3
0x40004b1	          0x8b4010	            mov eax, dword [rax + 0x10] 	       100	convert.c	FUNCTION_2	IF_3
0x40004b4	          0xc1e807	                              shr eax, 7	       100	convert.c	FUNCTION_2	IF_3
0x40004b7	            0x89c2	                            mov edx, eax	       100	convert.c	FUNCTION_2	IF_3
0x40004b9	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       100	convert.c	FUNCTION_2	IF_3
0x40004bd	          0x8b4014	            mov eax, dword [rax + 0x14] 	       100	convert.c	FUNCTION_2	IF_3
0x40004c0	            0x39c2	                            cmp edx, eax	       100	convert.c	FUNCTION_2	IF_3
0x40004c2	            0x7307	                           jae 0x40004cb	       100	convert.c	FUNCTION_2	IF_3
0x40004c4	      0xb801000000	                              mov eax, 1	       101	convert.c	FUNCTION_2	IF_3
0x40004c9	            0xeb05	                           jmp 0x40004d0	       101	convert.c	FUNCTION_2	IF_3
0x40004cb	      0xb800000000	                              mov eax, 0	       102	convert.c	FUNCTION_2
0x40004d0	              0x5d	                                 pop rbp	       103	convert.c	FUNCTION_2
0x40004d1	              0xc3	                                     ret	       103	convert.c	FUNCTION_2
cascade_free_fn	ELSE,0:FOR,0:WHILE,0:IF,0:CALL,3:functions,0:SWITCH,0:DO,0	20
0x4003dfe	              0x55	                                push rbp	      1745	convert.c	FUNCTION_51
0x4003dff	          0x4889e5	                            mov rbp, rsp	      1745	convert.c	FUNCTION_51
0x4003e02	        0x4883ec20	                           sub rsp, 0x20	      1745	convert.c	FUNCTION_51
0x4003e06	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1745	convert.c	FUNCTION_51
0x4003e0a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1746	convert.c	FUNCTION_51
0x4003e0e	        0x488945f8	                mov qword [rbp - 8], rax	      1746	convert.c	FUNCTION_51
0x4003e12	        0x488b45f8	                mov rax, qword [rbp - 8]	      1747	convert.c	FUNCTION_51	CALL_1
0x4003e16	        0x488b4008	                mov rax, qword [rax + 8]	      1747	convert.c	FUNCTION_51	CALL_1
0x4003e1a	          0x4889c7	                            mov rdi, rax	      1747	convert.c	FUNCTION_51	CALL_1
0x4003e1d	      0xe800000000	                          call 0x4003e22	      1747	convert.c	FUNCTION_51	CALL_1
0x4003e22	        0x488b45f8	                mov rax, qword [rbp - 8]	      1748	convert.c	FUNCTION_51	CALL_2
0x4003e26	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1748	convert.c	FUNCTION_51	CALL_2
0x4003e2a	          0x4889c7	                            mov rdi, rax	      1748	convert.c	FUNCTION_51	CALL_2
0x4003e2d	      0xe800000000	                          call 0x4003e32	      1748	convert.c	FUNCTION_51	CALL_2
0x4003e32	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1749	convert.c	FUNCTION_51	CALL_3
0x4003e36	          0x4889c7	                            mov rdi, rax	      1749	convert.c	FUNCTION_51	CALL_3
0x4003e39	      0xe800000000	                          call 0x4003e3e	      1749	convert.c	FUNCTION_51	CALL_3
0x4003e3e	              0x90	                                     nop	      1750	convert.c	FUNCTION_51
0x4003e3f	              0xc9	                                   leave	      1750	convert.c	FUNCTION_51
0x4003e40	              0xc3	                                     ret	      1750	convert.c	FUNCTION_51
strbuf_addstr	ELSE,0:FOR,0:WHILE,0:IF,0:CALL,2:functions,0:SWITCH,0:DO,0	17
0x4000273	              0x55	                                push rbp	       278	strbuf.h	FUNCTION_65
0x4000274	          0x4889e5	                            mov rbp, rsp	       278	strbuf.h	FUNCTION_65
0x4000277	        0x4883ec10	                           sub rsp, 0x10	       278	strbuf.h	FUNCTION_65
0x400027b	        0x48897df8	                mov qword [rbp - 8], rdi	       278	strbuf.h	FUNCTION_65
0x400027f	        0x488975f0	             mov qword [rbp - 0x10], rsi	       278	strbuf.h	FUNCTION_65
0x4000283	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       279	strbuf.h	FUNCTION_65	CALL_2
0x4000287	          0x4889c7	                            mov rdi, rax	       279	strbuf.h	FUNCTION_65	CALL_2
0x400028a	      0xe800000000	                          call 0x400028f	       279	strbuf.h	FUNCTION_65	CALL_2
0x400028f	          0x4889c2	                            mov rdx, rax	       279	strbuf.h	FUNCTION_65	CALL_2
0x4000292	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	       279	strbuf.h	FUNCTION_65	CALL_2
0x4000296	        0x488b45f8	                mov rax, qword [rbp - 8]	       279	strbuf.h	FUNCTION_65	CALL_2
0x400029a	          0x4889ce	                            mov rsi, rcx	       279	strbuf.h	FUNCTION_65	CALL_2
0x400029d	          0x4889c7	                            mov rdi, rax	       279	strbuf.h	FUNCTION_65	CALL_2
0x40002a0	      0xe800000000	                          call 0x40002a5	       279	strbuf.h	FUNCTION_65	CALL_2
0x40002a5	              0x90	                                     nop	       280	strbuf.h	FUNCTION_65
0x40002a6	              0xc9	                                   leave	       280	strbuf.h	FUNCTION_65
0x40002a7	              0xc3	                                     ret	       280	strbuf.h	FUNCTION_65
ident_drain	ELSE,0:FOR,0:WHILE,0:IF,3:CALL,2:functions,0:SWITCH,0:DO,0	54
0x4003f7b	              0x55	                                push rbp	      1801	convert.c	FUNCTION_54
0x4003f7c	          0x4889e5	                            mov rbp, rsp	      1801	convert.c	FUNCTION_54
0x4003f7f	        0x4883ec30	                           sub rsp, 0x30	      1801	convert.c	FUNCTION_54
0x4003f83	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1801	convert.c	FUNCTION_54
0x4003f87	        0x488975e0	             mov qword [rbp - 0x20], rsi	      1801	convert.c	FUNCTION_54
0x4003f8b	        0x488955d8	             mov qword [rbp - 0x28], rdx	      1801	convert.c	FUNCTION_54
0x4003f8f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1802	convert.c	FUNCTION_54
0x4003f93	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1802	convert.c	FUNCTION_54
0x4003f97	        0x488945f8	                mov qword [rbp - 8], rax	      1802	convert.c	FUNCTION_54
0x4003f9b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1804	convert.c	FUNCTION_54	IF_1
0x4003f9f	          0x488b00	                    mov rax, qword [rax]	      1804	convert.c	FUNCTION_54	IF_1
0x4003fa2	        0x483b45f8	                cmp rax, qword [rbp - 8]	      1804	convert.c	FUNCTION_54	IF_1
0x4003fa6	            0x730b	                           jae 0x4003fb3	      1804	convert.c	FUNCTION_54	IF_1
0x4003fa8	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1805	convert.c	FUNCTION_54	IF_1
0x4003fac	          0x488b00	                    mov rax, qword [rax]	      1805	convert.c	FUNCTION_54	IF_1
0x4003faf	        0x488945f8	                mov qword [rbp - 8], rax	      1805	convert.c	FUNCTION_54	IF_1
0x4003fb3	      0x48837df800	                  cmp qword [rbp - 8], 0	      1806	convert.c	FUNCTION_54	IF_2
0x4003fb8	            0x7464	                            je 0x400401e	      1806	convert.c	FUNCTION_54	IF_2
0x4003fba	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1807	convert.c	FUNCTION_54	IF_2	CALL_1
0x4003fbe	        0x488b4818	            mov rcx, qword [rax + 0x18] 	      1807	convert.c	FUNCTION_54	IF_2	CALL_1
0x4003fc2	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1807	convert.c	FUNCTION_54	IF_2	CALL_1
0x4003fc6	          0x488b00	                    mov rax, qword [rax]	      1807	convert.c	FUNCTION_54	IF_2	CALL_1
0x4003fc9	        0x488b55f8	                mov rdx, qword [rbp - 8]	      1807	convert.c	FUNCTION_54	IF_2	CALL_1
0x4003fcd	          0x4889ce	                            mov rsi, rcx	      1807	convert.c	FUNCTION_54	IF_2	CALL_1
0x4003fd0	          0x4889c7	                            mov rdi, rax	      1807	convert.c	FUNCTION_54	IF_2	CALL_1
0x4003fd3	      0xe800000000	                          call 0x4003fd8	      1807	convert.c	FUNCTION_54	IF_2	CALL_1
0x4003fd8	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1808	convert.c	FUNCTION_54	IF_2	CALL_2
0x4003fdc	        0x488d4808	                      lea rcx, [rax + 8]	      1808	convert.c	FUNCTION_54	IF_2	CALL_2
0x4003fe0	        0x488b45f8	                mov rax, qword [rbp - 8]	      1808	convert.c	FUNCTION_54	IF_2	CALL_2
0x4003fe4	          0x4889c2	                            mov rdx, rax	      1808	convert.c	FUNCTION_54	IF_2	CALL_2
0x4003fe7	      0xbe00000000	                              mov esi, 0	      1808	convert.c	FUNCTION_54	IF_2	CALL_2
0x4003fec	          0x4889cf	                            mov rdi, rcx	      1808	convert.c	FUNCTION_54	IF_2	CALL_2
0x4003fef	      0xe800000000	                          call 0x4003ff4	      1808	convert.c	FUNCTION_54	IF_2	CALL_2
0x4003ff4	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1809	convert.c	FUNCTION_54	IF_2
0x4003ff8	          0x488b10	                    mov rdx, qword [rax]	      1809	convert.c	FUNCTION_54	IF_2
0x4003ffb	        0x488b45f8	                mov rax, qword [rbp - 8]	      1809	convert.c	FUNCTION_54	IF_2
0x4003fff	          0x4801c2	                            add rdx, rax	      1809	convert.c	FUNCTION_54	IF_2
0x4004002	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1809	convert.c	FUNCTION_54	IF_2
0x4004006	          0x488910	                    mov qword [rax], rdx	      1809	convert.c	FUNCTION_54	IF_2
0x4004009	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1810	convert.c	FUNCTION_54	IF_2
0x400400d	          0x488b00	                    mov rax, qword [rax]	      1810	convert.c	FUNCTION_54	IF_2
0x4004010	        0x482b45f8	                sub rax, qword [rbp - 8]	      1810	convert.c	FUNCTION_54	IF_2
0x4004014	          0x4889c2	                            mov rdx, rax	      1810	convert.c	FUNCTION_54	IF_2
0x4004017	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1810	convert.c	FUNCTION_54	IF_2
0x400401b	          0x488910	                    mov qword [rax], rdx	      1810	convert.c	FUNCTION_54	IF_2
0x400401e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1812	convert.c	FUNCTION_54	IF_3
0x4004022	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1812	convert.c	FUNCTION_54	IF_3
0x4004026	          0x4885c0	                           test rax, rax	      1812	convert.c	FUNCTION_54	IF_3
0x4004029	            0x750b	                           jne 0x4004036	      1812	convert.c	FUNCTION_54	IF_3
0x400402b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1813	convert.c	FUNCTION_54	IF_3
0x400402f	    0xc74020000000	               mov dword [rax + 0x20], 0	      1813	convert.c	FUNCTION_54	IF_3
0x4004036	              0x90	                                     nop	      1814	convert.c	FUNCTION_54
0x4004037	              0xc9	                                   leave	      1814	convert.c	FUNCTION_54
0x4004038	              0xc3	                                     ret	      1814	convert.c	FUNCTION_54
const_error	ELSE,0:FOR,0:WHILE,0:IF,0:CALL,0:functions,0:SWITCH,0:DO,0	5
0x4000040	              0x55	                                push rbp	       447	git-compat-util.h	FUNCTION_82
0x4000041	          0x4889e5	                            mov rbp, rsp	       447	git-compat-util.h	FUNCTION_82
0x4000044	      0xb8ffffffff	                     mov eax, 0xffffffff	       448	git-compat-util.h	FUNCTION_82
0x4000049	              0x5d	                                 pop rbp	       449	git-compat-util.h	FUNCTION_82
0x400004a	              0xc3	                                     ret	       449	git-compat-util.h	FUNCTION_82
would_convert_to_git_filter_fd	ELSE,0:FOR,0:WHILE,0:IF,2:CALL,2:functions,0:SWITCH,0:DO,0	41
0x40030e6	              0x55	                                push rbp	      1343	convert.c	FUNCTION_36
0x40030e7	          0x4889e5	                            mov rbp, rsp	      1343	convert.c	FUNCTION_36
0x40030ea	        0x4883ec40	                           sub rsp, 0x40	      1343	convert.c	FUNCTION_36
0x40030ee	        0x48897dc8	             mov qword [rbp - 0x38], rdi	      1343	convert.c	FUNCTION_36
0x40030f2	    0x64488b042528	                mov rax, qword fs:[0x28]	      1343	convert.c	FUNCTION_36
0x40030fb	        0x488945f8	                mov qword [rbp - 8], rax	      1343	convert.c	FUNCTION_36
0x40030ff	            0x31c0	                            xor eax, eax	      1343	convert.c	FUNCTION_36
0x4003101	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      1346	convert.c	FUNCTION_36	CALL_1
0x4003105	        0x488d45d0	                   lea rax, [rbp - 0x30]	      1346	convert.c	FUNCTION_36	CALL_1
0x4003109	          0x4889d6	                            mov rsi, rdx	      1346	convert.c	FUNCTION_36	CALL_1
0x400310c	          0x4889c7	                            mov rdi, rax	      1346	convert.c	FUNCTION_36	CALL_1
0x400310f	      0xe86efdffff	                  call sym.convert_attrs	      1346	convert.c	FUNCTION_36	CALL_1
0x4003114	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1347	convert.c	FUNCTION_36	IF_1
0x4003118	          0x4885c0	                           test rax, rax	      1347	convert.c	FUNCTION_36	IF_1
0x400311b	            0x7507	                           jne 0x4003124	      1347	convert.c	FUNCTION_36	IF_1
0x400311d	      0xb800000000	                              mov eax, 0	      1348	convert.c	FUNCTION_36	IF_1
0x4003122	            0xeb42	                           jmp 0x4003166	      1348	convert.c	FUNCTION_36	IF_1
0x4003124	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1355	convert.c	FUNCTION_36	IF_2
0x4003128	          0x8b4028	            mov eax, dword [rax + 0x28] 	      1355	convert.c	FUNCTION_36	IF_2
0x400312b	            0x85c0	                           test eax, eax	      1355	convert.c	FUNCTION_36	IF_2
0x400312d	            0x7507	                           jne 0x4003136	      1355	convert.c	FUNCTION_36	IF_2
0x400312f	      0xb800000000	                              mov eax, 0	      1356	convert.c	FUNCTION_36	IF_2
0x4003134	            0xeb30	                           jmp 0x4003166	      1356	convert.c	FUNCTION_36	IF_2
0x4003136	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	      1358	convert.c	FUNCTION_36	CALL_2
0x400313a	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1358	convert.c	FUNCTION_36	CALL_2
0x400313e	            0x6a00	                                  push 0	      1358	convert.c	FUNCTION_36	CALL_2
0x4003140	            0x6a01	                                  push 1	      1358	convert.c	FUNCTION_36	CALL_2
0x4003142	          0x4989d1	                             mov r9, rdx	      1358	convert.c	FUNCTION_36	CALL_2
0x4003145	    0x41b800000000	                              mov r8d, 0	      1358	convert.c	FUNCTION_36	CALL_2
0x400314b	      0xb9ffffffff	                     mov ecx, 0xffffffff	      1358	convert.c	FUNCTION_36	CALL_2
0x4003150	      0xba00000000	                              mov edx, 0	      1358	convert.c	FUNCTION_36	CALL_2
0x4003155	      0xbe00000000	                              mov esi, 0	      1358	convert.c	FUNCTION_36	CALL_2
0x400315a	          0x4889c7	                            mov rdi, rax	      1358	convert.c	FUNCTION_36	CALL_2
0x400315d	      0xe8c1f1ffff	                   call sym.apply_filter	      1358	convert.c	FUNCTION_36	CALL_2
0x4003162	        0x4883c410	                           add rsp, 0x10	      1358	convert.c	FUNCTION_36	CALL_2
0x4003166	        0x488b4df8	                mov rcx, qword [rbp - 8]	      1359	convert.c	FUNCTION_36
0x400316a	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      1359	convert.c	FUNCTION_36
0x4003173	            0x7405	                            je 0x400317a	      1359	convert.c	FUNCTION_36
0x4003175	      0xe800000000	                          call 0x400317a	      1359	convert.c	FUNCTION_36
0x400317a	              0xc9	                                   leave	      1359	convert.c	FUNCTION_36
0x400317b	              0xc3	                                     ret	      1359	convert.c	FUNCTION_36
get_cached_convert_stats_ascii	ELSE,0:FOR,0:WHILE,0:IF,0:CALL,3:functions,0:SWITCH,0:DO,0	31
0x40005d3	              0x55	                                push rbp	       142	convert.c	FUNCTION_5
0x40005d4	          0x4889e5	                            mov rbp, rsp	       142	convert.c	FUNCTION_5
0x40005d7	        0x4883ec30	                           sub rsp, 0x30	       142	convert.c	FUNCTION_5
0x40005db	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       142	convert.c	FUNCTION_5
0x40005df	        0x488975d0	             mov qword [rbp - 0x30], rsi	       142	convert.c	FUNCTION_5
0x40005e3	    0x64488b042528	                mov rax, qword fs:[0x28]	       142	convert.c	FUNCTION_5
0x40005ec	        0x488945f8	                mov qword [rbp - 8], rax	       142	convert.c	FUNCTION_5
0x40005f0	            0x31c0	                            xor eax, eax	       142	convert.c	FUNCTION_5
0x40005f2	        0x488d55e0	                   lea rdx, [rbp - 0x20]	       145	convert.c	FUNCTION_5	CALL_1
0x40005f6	        0x488b4dd0	             mov rcx, qword [rbp - 0x30]	       145	convert.c	FUNCTION_5	CALL_1
0x40005fa	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       145	convert.c	FUNCTION_5	CALL_1
0x40005fe	          0x4889ce	                            mov rsi, rcx	       145	convert.c	FUNCTION_5	CALL_1
0x4000601	          0x4889c7	                            mov rdi, rax	       145	convert.c	FUNCTION_5	CALL_1
0x4000604	      0xe800000000	                          call 0x4000609	       145	convert.c	FUNCTION_5	CALL_1
0x4000609	        0x488945e8	             mov qword [rbp - 0x18], rax	       145	convert.c	FUNCTION_5	CALL_1
0x400060d	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       146	convert.c	FUNCTION_5	CALL_2
0x4000611	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       146	convert.c	FUNCTION_5	CALL_2
0x4000615	          0x4889d6	                            mov rsi, rdx	       146	convert.c	FUNCTION_5	CALL_2
0x4000618	          0x4889c7	                            mov rdi, rax	       146	convert.c	FUNCTION_5	CALL_2
0x400061b	      0xe84effffff	     call sym.gather_convert_stats_ascii	       146	convert.c	FUNCTION_5	CALL_2
0x4000620	        0x488945f0	             mov qword [rbp - 0x10], rax	       146	convert.c	FUNCTION_5	CALL_2
0x4000624	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       147	convert.c	FUNCTION_5	CALL_3
0x4000628	          0x4889c7	                            mov rdi, rax	       147	convert.c	FUNCTION_5	CALL_3
0x400062b	      0xe800000000	                          call 0x4000630	       147	convert.c	FUNCTION_5	CALL_3
0x4000630	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       148	convert.c	FUNCTION_5
0x4000634	        0x488b4df8	                mov rcx, qword [rbp - 8]	       149	convert.c	FUNCTION_5
0x4000638	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       149	convert.c	FUNCTION_5
0x4000641	            0x7405	                            je 0x4000648	       149	convert.c	FUNCTION_5
0x4000643	      0xe800000000	                          call 0x4000648	       149	convert.c	FUNCTION_5
0x4000648	              0xc9	                                   leave	       149	convert.c	FUNCTION_5
0x4000649	              0xc3	                                     ret	       149	convert.c	FUNCTION_5
ident_to_worktree	ELSE,2:FOR,1:WHILE,0:IF,10:CALL,16:functions,0:SWITCH,0:DO,0	202
0x400296d	              0x55	                                push rbp	      1136	convert.c	FUNCTION_29
0x400296e	          0x4889e5	                            mov rbp, rsp	      1136	convert.c	FUNCTION_29
0x4002971	        0x4883ec70	                           sub rsp, 0x70	      1136	convert.c	FUNCTION_29
0x4002975	        0x48897db8	             mov qword [rbp - 0x48], rdi	      1136	convert.c	FUNCTION_29
0x4002979	        0x488975b0	             mov qword [rbp - 0x50], rsi	      1136	convert.c	FUNCTION_29
0x400297d	        0x488955a8	             mov qword [rbp - 0x58], rdx	      1136	convert.c	FUNCTION_29
0x4002981	        0x48894da0	             mov qword [rbp - 0x60], rcx	      1136	convert.c	FUNCTION_29
0x4002985	        0x4489459c	             mov dword [rbp - 0x64], r8d	      1136	convert.c	FUNCTION_29
0x4002989	    0x64488b042528	                mov rax, qword fs:[0x28]	      1136	convert.c	FUNCTION_29
0x4002992	        0x488945f8	                mov qword [rbp - 8], rax	      1136	convert.c	FUNCTION_29
0x4002996	            0x31c0	                            xor eax, eax	      1136	convert.c	FUNCTION_29
0x4002998	    0x48c745c80000	               mov qword [rbp - 0x38], 0	      1138	convert.c	FUNCTION_29
0x40029a0	        0x837d9c00	               cmp dword [rbp - 0x64], 0	      1141	convert.c	FUNCTION_29	IF_1
0x40029a4	            0x750a	                           jne 0x40029b0	      1141	convert.c	FUNCTION_29	IF_1
0x40029a6	      0xb800000000	                              mov eax, 0	      1142	convert.c	FUNCTION_29	IF_1
0x40029ab	      0xe9b6020000	                           jmp 0x4002c66	      1142	convert.c	FUNCTION_29	IF_1
0x40029b0	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      1144	convert.c	FUNCTION_29	CALL_1
0x40029b4	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1144	convert.c	FUNCTION_29	CALL_1
0x40029b8	          0x4889d6	                            mov rsi, rdx	      1144	convert.c	FUNCTION_29	CALL_1
0x40029bb	          0x4889c7	                            mov rdi, rax	      1144	convert.c	FUNCTION_29	CALL_1
0x40029be	      0xe88cfcffff	                    call sym.count_ident	      1144	convert.c	FUNCTION_29	CALL_1
0x40029c3	          0x8945c4	             mov dword [rbp - 0x3c], eax	      1144	convert.c	FUNCTION_29	CALL_1
0x40029c6	        0x837dc400	               cmp dword [rbp - 0x3c], 0	      1145	convert.c	FUNCTION_29	IF_2
0x40029ca	            0x750a	                           jne 0x40029d6	      1145	convert.c	FUNCTION_29	IF_2
0x40029cc	      0xb800000000	                              mov eax, 0	      1146	convert.c	FUNCTION_29	IF_2
0x40029d1	      0xe990020000	                           jmp 0x4002c66	      1146	convert.c	FUNCTION_29	IF_2
0x40029d6	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1149	convert.c	FUNCTION_29	IF_3
0x40029da	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1149	convert.c	FUNCTION_29	IF_3
0x40029de	        0x483b45b0	             cmp rax, qword [rbp - 0x50]	      1149	convert.c	FUNCTION_29	IF_3
0x40029e2	            0x7515	                           jne 0x40029f9	      1149	convert.c	FUNCTION_29	IF_3
0x40029e4	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1150	convert.c	FUNCTION_29	CALL_2
0x40029e8	      0xbe00000000	                              mov esi, 0	      1150	convert.c	FUNCTION_29	CALL_2
0x40029ed	          0x4889c7	                            mov rdi, rax	      1150	convert.c	FUNCTION_29	CALL_2
0x40029f0	      0xe800000000	                          call 0x40029f5	      1150	convert.c	FUNCTION_29	CALL_2
0x40029f5	        0x488945c8	             mov qword [rbp - 0x38], rax	      1150	convert.c	FUNCTION_29	CALL_2
0x40029f9	        0x488d55e0	                   lea rdx, [rbp - 0x20]	      1151	convert.c	FUNCTION_29	CALL_3
0x40029fd	        0x488b75a8	             mov rsi, qword [rbp - 0x58]	      1151	convert.c	FUNCTION_29	CALL_3
0x4002a01	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1151	convert.c	FUNCTION_29	CALL_3
0x4002a05	          0x4889d1	                            mov rcx, rdx	      1151	convert.c	FUNCTION_29	CALL_3
0x4002a08	      0xba00000000	                              mov edx, 0	      1151	convert.c	FUNCTION_29	CALL_3
0x4002a0d	          0x4889c7	                            mov rdi, rax	      1151	convert.c	FUNCTION_29	CALL_3
0x4002a10	      0xe800000000	                          call 0x4002a15	      1151	convert.c	FUNCTION_29	CALL_3
0x4002a15	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	      1153	convert.c	FUNCTION_29	CALL_4
0x4002a18	          0x4863d0	                         movsxd rdx, eax	      1153	convert.c	FUNCTION_29	CALL_4
0x4002a1b	    0x488b05000000	            mov rax, qword [0x04002a22] 	      1153	convert.c	FUNCTION_29	CALL_4
0x4002a22	        0x488b4058	            mov rax, qword [rax + 0x58] 	      1153	convert.c	FUNCTION_29	CALL_4
0x4002a26	        0x488b4018	            mov rax, qword [rax + 0x18] 	      1153	convert.c	FUNCTION_29	CALL_4
0x4002a2a	        0x4883c003	                              add rax, 3	      1153	convert.c	FUNCTION_29	CALL_4
0x4002a2e	        0x480fafd0	                           imul rdx, rax	      1153	convert.c	FUNCTION_29	CALL_4
0x4002a32	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1153	convert.c	FUNCTION_29	CALL_4
0x4002a36	          0x4801c2	                            add rdx, rax	      1153	convert.c	FUNCTION_29	CALL_4
0x4002a39	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1153	convert.c	FUNCTION_29	CALL_4
0x4002a3d	          0x4889d6	                            mov rsi, rdx	      1153	convert.c	FUNCTION_29	CALL_4
0x4002a40	          0x4889c7	                            mov rdi, rax	      1153	convert.c	FUNCTION_29	CALL_4
0x4002a43	      0xe800000000	                          call 0x4002a48	      1153	convert.c	FUNCTION_29	CALL_4
0x4002a48	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      1156	convert.c	FUNCTION_29	FOR_1	CALL_5
0x4002a4c	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1156	convert.c	FUNCTION_29	FOR_1	CALL_5
0x4002a50	      0xbe24000000	                           mov esi, 0x24	      1156	convert.c	FUNCTION_29	FOR_1	CALL_5
0x4002a55	          0x4889c7	                            mov rdi, rax	      1156	convert.c	FUNCTION_29	FOR_1	CALL_5
0x4002a58	      0xe800000000	                          call 0x4002a5d	      1156	convert.c	FUNCTION_29	FOR_1	CALL_5
0x4002a5d	        0x488945d0	             mov qword [rbp - 0x30], rax	      1156	convert.c	FUNCTION_29	FOR_1	CALL_5
0x4002a61	      0x48837dd000	               cmp qword [rbp - 0x30], 0	      1157	convert.c	FUNCTION_29	FOR_1	IF_4
0x4002a66	     0xf84ce010000	                            je 0x4002c3a	      1157	convert.c	FUNCTION_29	FOR_1	IF_4
0x4002a6c	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1159	convert.c	FUNCTION_29	FOR_1	CALL_6
0x4002a70	        0x4883c001	                              add rax, 1	      1159	convert.c	FUNCTION_29	FOR_1	CALL_6
0x4002a74	          0x4889c2	                            mov rdx, rax	      1159	convert.c	FUNCTION_29	FOR_1	CALL_6
0x4002a77	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1159	convert.c	FUNCTION_29	FOR_1	CALL_6
0x4002a7b	          0x4829c2	                            sub rdx, rax	      1159	convert.c	FUNCTION_29	FOR_1	CALL_6
0x4002a7e	          0x4889d0	                            mov rax, rdx	      1159	convert.c	FUNCTION_29	FOR_1	CALL_6
0x4002a81	          0x4889c2	                            mov rdx, rax	      1159	convert.c	FUNCTION_29	FOR_1	CALL_6
0x4002a84	        0x488b4db0	             mov rcx, qword [rbp - 0x50]	      1159	convert.c	FUNCTION_29	FOR_1	CALL_6
0x4002a88	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1159	convert.c	FUNCTION_29	FOR_1	CALL_6
0x4002a8c	          0x4889ce	                            mov rsi, rcx	      1159	convert.c	FUNCTION_29	FOR_1	CALL_6
0x4002a8f	          0x4889c7	                            mov rdi, rax	      1159	convert.c	FUNCTION_29	FOR_1	CALL_6
0x4002a92	      0xe800000000	                          call 0x4002a97	      1159	convert.c	FUNCTION_29	FOR_1	CALL_6
0x4002a97	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1160	convert.c	FUNCTION_29	FOR_1
0x4002a9b	        0x4883c001	                              add rax, 1	      1160	convert.c	FUNCTION_29	FOR_1
0x4002a9f	          0x4889c2	                            mov rdx, rax	      1160	convert.c	FUNCTION_29	FOR_1
0x4002aa2	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1160	convert.c	FUNCTION_29	FOR_1
0x4002aa6	          0x4829c2	                            sub rdx, rax	      1160	convert.c	FUNCTION_29	FOR_1
0x4002aa9	          0x4889d0	                            mov rax, rdx	      1160	convert.c	FUNCTION_29	FOR_1
0x4002aac	        0x482945a8	             sub qword [rbp - 0x58], rax	      1160	convert.c	FUNCTION_29	FOR_1
0x4002ab0	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1161	convert.c	FUNCTION_29	FOR_1
0x4002ab4	        0x4883c001	                              add rax, 1	      1161	convert.c	FUNCTION_29	FOR_1
0x4002ab8	        0x488945b0	             mov qword [rbp - 0x50], rax	      1161	convert.c	FUNCTION_29	FOR_1
0x4002abc	      0x48837da802	               cmp qword [rbp - 0x58], 2	      1164	convert.c	FUNCTION_29	FOR_1	IF_5	CALL_7
0x4002ac1	     0xf865b010000	                           jbe 0x4002c22	      1164	convert.c	FUNCTION_29	FOR_1	IF_5	CALL_7
0x4002ac7	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1164	convert.c	FUNCTION_29	FOR_1	IF_5	CALL_7
0x4002acb	      0xba02000000	                              mov edx, 2	      1164	convert.c	FUNCTION_29	FOR_1	IF_5	CALL_7
0x4002ad0	          0x4889c6	                            mov rsi, rax	      1164	convert.c	FUNCTION_29	FOR_1	IF_5	CALL_7
0x4002ad3	      0xbf00000000	                              mov edi, 0	      1164	convert.c	FUNCTION_29	FOR_1	IF_5	CALL_7
0x4002ad8	      0xe800000000	                          call 0x4002add	      1164	convert.c	FUNCTION_29	FOR_1	IF_5	CALL_7
0x4002add	            0x85c0	                           test eax, eax	      1164	convert.c	FUNCTION_29	FOR_1	IF_5	CALL_7
0x4002adf	     0xf853d010000	                           jne 0x4002c22	      1164	convert.c	FUNCTION_29	FOR_1	IF_5	CALL_7
0x4002ae5	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1168	convert.c	FUNCTION_29	FOR_1	IF_6
0x4002ae9	        0x4883c002	                              add rax, 2	      1168	convert.c	FUNCTION_29	FOR_1	IF_6
0x4002aed	           0xfb600	                   movzx eax, byte [rax]	      1168	convert.c	FUNCTION_29	FOR_1	IF_6
0x4002af0	            0x3c24	                            cmp al, 0x24	      1168	convert.c	FUNCTION_29	FOR_1	IF_6
0x4002af2	            0x750f	                           jne 0x4002b03	      1168	convert.c	FUNCTION_29	FOR_1	IF_6
0x4002af4	      0x488345b003	               add qword [rbp - 0x50], 3	      1169	convert.c	FUNCTION_29	FOR_1	IF_6
0x4002af9	      0x48836da803	               sub qword [rbp - 0x58], 3	      1170	convert.c	FUNCTION_29	FOR_1	IF_6
0x4002afe	      0xe9da000000	                           jmp 0x4002bdd	      1170	convert.c	FUNCTION_29	FOR_1	IF_6
0x4002b03	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1171	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7
0x4002b07	        0x4883c002	                              add rax, 2	      1171	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7
0x4002b0b	           0xfb600	                   movzx eax, byte [rax]	      1171	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7
0x4002b0e	            0x3c3a	                            cmp al, 0x3a	      1171	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7
0x4002b10	     0xf8512010000	                           jne 0x4002c28	      1171	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7
0x4002b16	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1179	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	CALL_8
0x4002b1a	        0x488d50fd	                      lea rdx, [rax - 3]	      1179	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	CALL_8
0x4002b1e	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1179	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	CALL_8
0x4002b22	        0x4883c003	                              add rax, 3	      1179	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	CALL_8
0x4002b26	      0xbe24000000	                           mov esi, 0x24	      1179	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	CALL_8
0x4002b2b	          0x4889c7	                            mov rdi, rax	      1179	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	CALL_8
0x4002b2e	      0xe800000000	                          call 0x4002b33	      1179	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	CALL_8
0x4002b33	        0x488945d0	             mov qword [rbp - 0x30], rax	      1179	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	CALL_8
0x4002b37	      0x48837dd000	               cmp qword [rbp - 0x30], 0	      1180	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_8
0x4002b3c	     0xf84fb000000	                            je 0x4002c3d	      1180	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_8
0x4002b42	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	      1185	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_9	CALL_9
0x4002b46	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1185	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_9	CALL_9
0x4002b4a	          0x4829c2	                            sub rdx, rax	      1185	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_9	CALL_9
0x4002b4d	          0x4889d0	                            mov rax, rdx	      1185	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_9	CALL_9
0x4002b50	        0x4883e803	                              sub rax, 3	      1185	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_9	CALL_9
0x4002b54	          0x4889c2	                            mov rdx, rax	      1185	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_9	CALL_9
0x4002b57	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1185	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_9	CALL_9
0x4002b5b	        0x4883c003	                              add rax, 3	      1185	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_9	CALL_9
0x4002b5f	      0xbe0a000000	                            mov esi, 0xa	      1185	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_9	CALL_9
0x4002b64	          0x4889c7	                            mov rdi, rax	      1185	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_9	CALL_9
0x4002b67	      0xe800000000	                          call 0x4002b6c	      1185	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_9	CALL_9
0x4002b6c	          0x4885c0	                           test rax, rax	      1185	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_9	CALL_9
0x4002b6f	     0xf85b9000000	                           jne 0x4002c2e	      1185	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_9	CALL_9
0x4002b75	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	      1190	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	CALL_10
0x4002b79	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1190	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	CALL_10
0x4002b7d	          0x4829c2	                            sub rdx, rax	      1190	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	CALL_10
0x4002b80	          0x4889d0	                            mov rax, rdx	      1190	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	CALL_10
0x4002b83	        0x4883e804	                              sub rax, 4	      1190	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	CALL_10
0x4002b87	          0x4889c2	                            mov rdx, rax	      1190	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	CALL_10
0x4002b8a	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1190	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	CALL_10
0x4002b8e	        0x4883c004	                              add rax, 4	      1190	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	CALL_10
0x4002b92	      0xbe20000000	                           mov esi, 0x20	      1190	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	CALL_10
0x4002b97	          0x4889c7	                            mov rdi, rax	      1190	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	CALL_10
0x4002b9a	      0xe800000000	                          call 0x4002b9f	      1190	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	CALL_10
0x4002b9f	        0x488945d8	             mov qword [rbp - 0x28], rax	      1190	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	CALL_10
0x4002ba3	      0x48837dd800	               cmp qword [rbp - 0x28], 0	      1191	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_10
0x4002ba8	            0x740e	                            je 0x4002bb8	      1191	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_10
0x4002baa	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1191	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_10
0x4002bae	        0x4883e801	                              sub rax, 1	      1191	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_10
0x4002bb2	        0x483b45d8	             cmp rax, qword [rbp - 0x28]	      1191	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_10
0x4002bb6	            0x777c	                            ja 0x4002c34	      1191	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_10
0x4002bb8	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1199	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7
0x4002bbc	        0x4883c001	                              add rax, 1	      1199	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7
0x4002bc0	          0x4889c2	                            mov rdx, rax	      1199	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7
0x4002bc3	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1199	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7
0x4002bc7	          0x4829c2	                            sub rdx, rax	      1199	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7
0x4002bca	          0x4889d0	                            mov rax, rdx	      1199	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7
0x4002bcd	        0x482945a8	             sub qword [rbp - 0x58], rax	      1199	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7
0x4002bd1	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1200	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7
0x4002bd5	        0x4883c001	                              add rax, 1	      1200	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7
0x4002bd9	        0x488945b0	             mov qword [rbp - 0x50], rax	      1200	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7
0x4002bdd	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1207	convert.c	FUNCTION_29	FOR_1	CALL_11
0x4002be1	      0xbe00000000	                              mov esi, 0	      1207	convert.c	FUNCTION_29	FOR_1	CALL_11
0x4002be6	          0x4889c7	                            mov rdi, rax	      1207	convert.c	FUNCTION_29	FOR_1	CALL_11
0x4002be9	      0xe885d6ffff	                  call sym.strbuf_addstr	      1207	convert.c	FUNCTION_29	FOR_1	CALL_11
0x4002bee	        0x488d45e0	                   lea rax, [rbp - 0x20]	      1208	convert.c	FUNCTION_29	FOR_1	CALL_13
0x4002bf2	          0x4889c7	                            mov rdi, rax	      1208	convert.c	FUNCTION_29	FOR_1	CALL_13
0x4002bf5	      0xe800000000	                          call 0x4002bfa	      1208	convert.c	FUNCTION_29	FOR_1	CALL_13
0x4002bfa	          0x4889c2	                            mov rdx, rax	      1208	convert.c	FUNCTION_29	FOR_1	CALL_13
0x4002bfd	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1208	convert.c	FUNCTION_29	FOR_1	CALL_13
0x4002c01	          0x4889d6	                            mov rsi, rdx	      1208	convert.c	FUNCTION_29	FOR_1	CALL_13
0x4002c04	          0x4889c7	                            mov rdi, rax	      1208	convert.c	FUNCTION_29	FOR_1	CALL_13
0x4002c07	      0xe867d6ffff	                  call sym.strbuf_addstr	      1208	convert.c	FUNCTION_29	FOR_1	CALL_13
0x4002c0c	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1209	convert.c	FUNCTION_29	FOR_1	CALL_14
0x4002c10	      0xbe00000000	                              mov esi, 0	      1209	convert.c	FUNCTION_29	FOR_1	CALL_14
0x4002c15	          0x4889c7	                            mov rdi, rax	      1209	convert.c	FUNCTION_29	FOR_1	CALL_14
0x4002c18	      0xe856d6ffff	                  call sym.strbuf_addstr	      1209	convert.c	FUNCTION_29	FOR_1	CALL_14
0x4002c1d	      0xe926feffff	                           jmp 0x4002a48	      1209	convert.c	FUNCTION_29	FOR_1	CALL_14
0x4002c22	              0x90	                                     nop	      1165	convert.c	FUNCTION_29	FOR_1	IF_5
0x4002c23	      0xe920feffff	                           jmp 0x4002a48	      1165	convert.c	FUNCTION_29	FOR_1	IF_5
0x4002c28	              0x90	                                     nop	      1203	convert.c	FUNCTION_29	FOR_1	ELSE_2
0x4002c29	      0xe91afeffff	                           jmp 0x4002a48	      1203	convert.c	FUNCTION_29	FOR_1	ELSE_2
0x4002c2e	              0x90	                                     nop	      1187	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_9
0x4002c2f	      0xe914feffff	                           jmp 0x4002a48	      1187	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_9
0x4002c34	              0x90	                                     nop	      1196	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_10
0x4002c35	      0xe90efeffff	                           jmp 0x4002a48	      1210	convert.c	FUNCTION_29	FOR_1
0x4002c3a	              0x90	                                     nop	      1158	convert.c	FUNCTION_29	FOR_1	IF_4
0x4002c3b	            0xeb01	                           jmp 0x4002c3e	      1158	convert.c	FUNCTION_29	FOR_1	IF_4
0x4002c3d	              0x90	                                     nop	      1182	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_8
0x4002c3e	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      1211	convert.c	FUNCTION_29	CALL_15
0x4002c42	        0x488b4db0	             mov rcx, qword [rbp - 0x50]	      1211	convert.c	FUNCTION_29	CALL_15
0x4002c46	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1211	convert.c	FUNCTION_29	CALL_15
0x4002c4a	          0x4889ce	                            mov rsi, rcx	      1211	convert.c	FUNCTION_29	CALL_15
0x4002c4d	          0x4889c7	                            mov rdi, rax	      1211	convert.c	FUNCTION_29	CALL_15
0x4002c50	      0xe800000000	                          call 0x4002c55	      1211	convert.c	FUNCTION_29	CALL_15
0x4002c55	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1213	convert.c	FUNCTION_29	CALL_16
0x4002c59	          0x4889c7	                            mov rdi, rax	      1213	convert.c	FUNCTION_29	CALL_16
0x4002c5c	      0xe800000000	                          call 0x4002c61	      1213	convert.c	FUNCTION_29	CALL_16
0x4002c61	      0xb801000000	                              mov eax, 1	      1214	convert.c	FUNCTION_29
0x4002c66	        0x488b4df8	                mov rcx, qword [rbp - 8]	      1215	convert.c	FUNCTION_29
0x4002c6a	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      1215	convert.c	FUNCTION_29
0x4002c73	            0x7405	                            je 0x4002c7a	      1215	convert.c	FUNCTION_29
0x4002c75	      0xe800000000	                          call 0x4002c7a	      1215	convert.c	FUNCTION_29
0x4002c7a	              0xc9	                                   leave	      1215	convert.c	FUNCTION_29
0x4002c7b	              0xc3	                                     ret	      1215	convert.c	FUNCTION_29
check_global_conv_flags_eol	ELSE,3:FOR,0:WHILE,0:IF,6:CALL,8:functions,0:SWITCH,0:DO,0	78
0x4000794	              0x55	                                push rbp	       200	convert.c	FUNCTION_9
0x4000795	          0x4889e5	                            mov rbp, rsp	       200	convert.c	FUNCTION_9
0x4000798	        0x4883ec20	                           sub rsp, 0x20	       200	convert.c	FUNCTION_9
0x400079c	        0x48897df8	                mov qword [rbp - 8], rdi	       200	convert.c	FUNCTION_9
0x40007a0	          0x8975f4	              mov dword [rbp - 0xc], esi	       200	convert.c	FUNCTION_9
0x40007a3	        0x488955e8	             mov qword [rbp - 0x18], rdx	       200	convert.c	FUNCTION_9
0x40007a7	        0x48894de0	             mov qword [rbp - 0x20], rcx	       200	convert.c	FUNCTION_9
0x40007ab	        0x448945f0	             mov dword [rbp - 0x10], r8d	       200	convert.c	FUNCTION_9
0x40007af	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       201	convert.c	FUNCTION_9	IF_1
0x40007b3	          0x8b400c	              mov eax, dword [rax + 0xc]	       201	convert.c	FUNCTION_9	IF_1
0x40007b6	            0x85c0	                           test eax, eax	       201	convert.c	FUNCTION_9	IF_1
0x40007b8	            0x7467	                            je 0x4000821	       201	convert.c	FUNCTION_9	IF_1
0x40007ba	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       201	convert.c	FUNCTION_9	IF_1
0x40007be	          0x8b400c	              mov eax, dword [rax + 0xc]	       201	convert.c	FUNCTION_9	IF_1
0x40007c1	            0x85c0	                           test eax, eax	       201	convert.c	FUNCTION_9	IF_1
0x40007c3	            0x755c	                           jne 0x4000821	       201	convert.c	FUNCTION_9	IF_1
0x40007c5	          0x8b45f0	             mov eax, dword [rbp - 0x10]	       205	convert.c	FUNCTION_9	IF_1	IF_2
0x40007c8	          0x83e001	                              and eax, 1	       205	convert.c	FUNCTION_9	IF_1	IF_2
0x40007cb	            0x85c0	                           test eax, eax	       205	convert.c	FUNCTION_9	IF_1	IF_2
0x40007cd	            0x7421	                            je 0x40007f0	       205	convert.c	FUNCTION_9	IF_1	IF_2
0x40007cf	      0xbf00000000	                              mov edi, 0	       206	convert.c	FUNCTION_9	IF_1	CALL_2
0x40007d4	      0xe8cffaffff	                               call sym.	       206	convert.c	FUNCTION_9	IF_1	CALL_2
0x40007d9	          0x4889c2	                            mov rdx, rax	       206	convert.c	FUNCTION_9	IF_1	CALL_2
0x40007dc	        0x488b45f8	                mov rax, qword [rbp - 8]	       206	convert.c	FUNCTION_9	IF_1	CALL_2
0x40007e0	          0x4889c6	                            mov rsi, rax	       206	convert.c	FUNCTION_9	IF_1	CALL_2
0x40007e3	          0x4889d7	                            mov rdi, rdx	       206	convert.c	FUNCTION_9	IF_1	CALL_2
0x40007e6	      0xb800000000	                              mov eax, 0	       206	convert.c	FUNCTION_9	IF_1	CALL_2
0x40007eb	      0xe800000000	                          call 0x40007f0	       206	convert.c	FUNCTION_9	IF_1	CALL_2
0x40007f0	          0x8b45f0	             mov eax, dword [rbp - 0x10]	       207	convert.c	FUNCTION_9	IF_1	ELSE_1	IF_3
0x40007f3	          0x83e002	                              and eax, 2	       207	convert.c	FUNCTION_9	IF_1	ELSE_1	IF_3
0x40007f6	            0x85c0	                           test eax, eax	       207	convert.c	FUNCTION_9	IF_1	ELSE_1	IF_3
0x40007f8	     0xf8491000000	                            je 0x400088f	       207	convert.c	FUNCTION_9	IF_1	ELSE_1	IF_3
0x40007fe	      0xbf00000000	                              mov edi, 0	       208	convert.c	FUNCTION_9	IF_1	ELSE_1	IF_3	CALL_4
0x4000803	      0xe8a0faffff	                               call sym.	       208	convert.c	FUNCTION_9	IF_1	ELSE_1	IF_3	CALL_4
0x4000808	          0x4889c2	                            mov rdx, rax	       208	convert.c	FUNCTION_9	IF_1	ELSE_1	IF_3	CALL_4
0x400080b	        0x488b45f8	                mov rax, qword [rbp - 8]	       208	convert.c	FUNCTION_9	IF_1	ELSE_1	IF_3	CALL_4
0x400080f	          0x4889c6	                            mov rsi, rax	       208	convert.c	FUNCTION_9	IF_1	ELSE_1	IF_3	CALL_4
0x4000812	          0x4889d7	                            mov rdi, rdx	       208	convert.c	FUNCTION_9	IF_1	ELSE_1	IF_3	CALL_4
0x4000815	      0xb800000000	                              mov eax, 0	       208	convert.c	FUNCTION_9	IF_1	ELSE_1	IF_3	CALL_4
0x400081a	      0xe800000000	                          call 0x400081f	       208	convert.c	FUNCTION_9	IF_1	ELSE_1	IF_3	CALL_4
0x400081f	            0xeb6e	                           jmp 0x400088f	       205	convert.c	FUNCTION_9	IF_1	IF_2
0x4000821	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       211	convert.c	FUNCTION_9	ELSE_2	IF_4
0x4000825	          0x8b4008	                mov eax, dword [rax + 8]	       211	convert.c	FUNCTION_9	ELSE_2	IF_4
0x4000828	            0x85c0	                           test eax, eax	       211	convert.c	FUNCTION_9	ELSE_2	IF_4
0x400082a	            0x7464	                            je 0x4000890	       211	convert.c	FUNCTION_9	ELSE_2	IF_4
0x400082c	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       211	convert.c	FUNCTION_9	ELSE_2	IF_4
0x4000830	          0x8b4008	                mov eax, dword [rax + 8]	       211	convert.c	FUNCTION_9	ELSE_2	IF_4
0x4000833	            0x85c0	                           test eax, eax	       211	convert.c	FUNCTION_9	ELSE_2	IF_4
0x4000835	            0x7559	                           jne 0x4000890	       211	convert.c	FUNCTION_9	ELSE_2	IF_4
0x4000837	          0x8b45f0	             mov eax, dword [rbp - 0x10]	       215	convert.c	FUNCTION_9	ELSE_2	IF_4	IF_5
0x400083a	          0x83e001	                              and eax, 1	       215	convert.c	FUNCTION_9	ELSE_2	IF_4	IF_5
0x400083d	            0x85c0	                           test eax, eax	       215	convert.c	FUNCTION_9	ELSE_2	IF_4	IF_5
0x400083f	            0x7421	                            je 0x4000862	       215	convert.c	FUNCTION_9	ELSE_2	IF_4	IF_5
0x4000841	      0xbf00000000	                              mov edi, 0	       216	convert.c	FUNCTION_9	ELSE_2	IF_4	CALL_6
0x4000846	      0xe85dfaffff	                               call sym.	       216	convert.c	FUNCTION_9	ELSE_2	IF_4	CALL_6
0x400084b	          0x4889c2	                            mov rdx, rax	       216	convert.c	FUNCTION_9	ELSE_2	IF_4	CALL_6
0x400084e	        0x488b45f8	                mov rax, qword [rbp - 8]	       216	convert.c	FUNCTION_9	ELSE_2	IF_4	CALL_6
0x4000852	          0x4889c6	                            mov rsi, rax	       216	convert.c	FUNCTION_9	ELSE_2	IF_4	CALL_6
0x4000855	          0x4889d7	                            mov rdi, rdx	       216	convert.c	FUNCTION_9	ELSE_2	IF_4	CALL_6
0x4000858	      0xb800000000	                              mov eax, 0	       216	convert.c	FUNCTION_9	ELSE_2	IF_4	CALL_6
0x400085d	      0xe800000000	                          call 0x4000862	       216	convert.c	FUNCTION_9	ELSE_2	IF_4	CALL_6
0x4000862	          0x8b45f0	             mov eax, dword [rbp - 0x10]	       217	convert.c	FUNCTION_9	ELSE_2	IF_4	ELSE_3	IF_6
0x4000865	          0x83e002	                              and eax, 2	       217	convert.c	FUNCTION_9	ELSE_2	IF_4	ELSE_3	IF_6
0x4000868	            0x85c0	                           test eax, eax	       217	convert.c	FUNCTION_9	ELSE_2	IF_4	ELSE_3	IF_6
0x400086a	            0x7424	                            je 0x4000890	       217	convert.c	FUNCTION_9	ELSE_2	IF_4	ELSE_3	IF_6
0x400086c	      0xbf00000000	                              mov edi, 0	       218	convert.c	FUNCTION_9	ELSE_2	IF_4	ELSE_3	IF_6	CALL_8
0x4000871	      0xe832faffff	                               call sym.	       218	convert.c	FUNCTION_9	ELSE_2	IF_4	ELSE_3	IF_6	CALL_8
0x4000876	          0x4889c2	                            mov rdx, rax	       218	convert.c	FUNCTION_9	ELSE_2	IF_4	ELSE_3	IF_6	CALL_8
0x4000879	        0x488b45f8	                mov rax, qword [rbp - 8]	       218	convert.c	FUNCTION_9	ELSE_2	IF_4	ELSE_3	IF_6	CALL_8
0x400087d	          0x4889c6	                            mov rsi, rax	       218	convert.c	FUNCTION_9	ELSE_2	IF_4	ELSE_3	IF_6	CALL_8
0x4000880	          0x4889d7	                            mov rdi, rdx	       218	convert.c	FUNCTION_9	ELSE_2	IF_4	ELSE_3	IF_6	CALL_8
0x4000883	      0xb800000000	                              mov eax, 0	       218	convert.c	FUNCTION_9	ELSE_2	IF_4	ELSE_3	IF_6	CALL_8
0x4000888	      0xe800000000	                          call 0x400088d	       218	convert.c	FUNCTION_9	ELSE_2	IF_4	ELSE_3	IF_6	CALL_8
0x400088d	            0xeb01	                           jmp 0x4000890	       222	convert.c	FUNCTION_9
0x400088f	              0x90	                                     nop	       205	convert.c	FUNCTION_9	IF_1	IF_2
0x4000890	              0x90	                                     nop	       222	convert.c	FUNCTION_9
0x4000891	              0xc9	                                   leave	       222	convert.c	FUNCTION_9
0x4000892	              0xc3	                                     ret	       222	convert.c	FUNCTION_9
async_convert_to_working_tree	ELSE,0:FOR,0:WHILE,0:IF,0:CALL,1:functions,0:SWITCH,0:DO,0	19
0x400370b	              0x55	                                push rbp	      1483	convert.c	FUNCTION_41
0x400370c	          0x4889e5	                            mov rbp, rsp	      1483	convert.c	FUNCTION_41
0x400370f	        0x4883ec30	                           sub rsp, 0x30	      1483	convert.c	FUNCTION_41
0x4003713	        0x48897df8	                mov qword [rbp - 8], rdi	      1483	convert.c	FUNCTION_41
0x4003717	        0x488975f0	             mov qword [rbp - 0x10], rsi	      1483	convert.c	FUNCTION_41
0x400371b	        0x488955e8	             mov qword [rbp - 0x18], rdx	      1483	convert.c	FUNCTION_41
0x400371f	        0x48894de0	             mov qword [rbp - 0x20], rcx	      1483	convert.c	FUNCTION_41
0x4003723	        0x4c8945d8	              mov qword [rbp - 0x28], r8	      1483	convert.c	FUNCTION_41
0x4003727	        0x488b7dd8	             mov rdi, qword [rbp - 0x28]	      1484	convert.c	FUNCTION_41	CALL_1
0x400372b	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	      1484	convert.c	FUNCTION_41	CALL_1
0x400372f	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      1484	convert.c	FUNCTION_41	CALL_1
0x4003733	        0x488b75f0	             mov rsi, qword [rbp - 0x10]	      1484	convert.c	FUNCTION_41	CALL_1
0x4003737	        0x488b45f8	                mov rax, qword [rbp - 8]	      1484	convert.c	FUNCTION_41	CALL_1
0x400373b	          0x4989f9	                             mov r9, rdi	      1484	convert.c	FUNCTION_41	CALL_1
0x400373e	    0x41b800000000	                              mov r8d, 0	      1484	convert.c	FUNCTION_41	CALL_1
0x4003744	          0x4889c7	                            mov rdi, rax	      1484	convert.c	FUNCTION_41	CALL_1
0x4003747	      0xe802feffff	call sym.convert_to_working_tree_internal	      1484	convert.c	FUNCTION_41	CALL_1
0x400374c	              0xc9	                                   leave	      1485	convert.c	FUNCTION_41
0x400374d	              0xc3	                                     ret	      1485	convert.c	FUNCTION_41
read_convert_config	ELSE,0:FOR,1:WHILE,0:IF,7:CALL,12:functions,0:SWITCH,0:DO,0	138
0x400245a	              0x55	                                push rbp	      1001	convert.c	FUNCTION_26
0x400245b	          0x4889e5	                            mov rbp, rsp	      1001	convert.c	FUNCTION_26
0x400245e	        0x4883ec50	                           sub rsp, 0x50	      1001	convert.c	FUNCTION_26
0x4002462	        0x48897dc8	             mov qword [rbp - 0x38], rdi	      1001	convert.c	FUNCTION_26
0x4002466	        0x488975c0	             mov qword [rbp - 0x40], rsi	      1001	convert.c	FUNCTION_26
0x400246a	        0x488955b8	             mov qword [rbp - 0x48], rdx	      1001	convert.c	FUNCTION_26
0x400246e	    0x64488b042528	                mov rax, qword fs:[0x28]	      1001	convert.c	FUNCTION_26
0x4002477	        0x488945f8	                mov qword [rbp - 8], rax	      1001	convert.c	FUNCTION_26
0x400247b	            0x31c0	                            xor eax, eax	      1001	convert.c	FUNCTION_26
0x400247d	        0x488d75e0	                   lea rsi, [rbp - 0x20]	      1010	convert.c	FUNCTION_26	IF_1	CALL_1
0x4002481	        0x488d4ddc	                   lea rcx, [rbp - 0x24]	      1010	convert.c	FUNCTION_26	IF_1	CALL_1
0x4002485	        0x488d55e8	                   lea rdx, [rbp - 0x18]	      1010	convert.c	FUNCTION_26	IF_1	CALL_1
0x4002489	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1010	convert.c	FUNCTION_26	IF_1	CALL_1
0x400248d	          0x4989f0	                             mov r8, rsi	      1010	convert.c	FUNCTION_26	IF_1	CALL_1
0x4002490	      0xbe00000000	                              mov esi, 0	      1010	convert.c	FUNCTION_26	IF_1	CALL_1
0x4002495	          0x4889c7	                            mov rdi, rax	      1010	convert.c	FUNCTION_26	IF_1	CALL_1
0x4002498	      0xe800000000	                          call 0x400249d	      1010	convert.c	FUNCTION_26	IF_1	CALL_1
0x400249d	            0x85c0	                           test eax, eax	      1010	convert.c	FUNCTION_26	IF_1	CALL_1
0x400249f	            0x7809	                            js 0x40024aa	      1010	convert.c	FUNCTION_26	IF_1	CALL_1
0x40024a1	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1010	convert.c	FUNCTION_26	IF_1	CALL_1
0x40024a5	          0x4885c0	                           test rax, rax	      1010	convert.c	FUNCTION_26	IF_1	CALL_1
0x40024a8	            0x750a	                           jne 0x40024b4	      1010	convert.c	FUNCTION_26	IF_1	CALL_1
0x40024aa	      0xb800000000	                              mov eax, 0	      1011	convert.c	FUNCTION_26	IF_1
0x40024af	      0xe985010000	                           jmp 0x4002639	      1011	convert.c	FUNCTION_26	IF_1
0x40024b4	    0x488b05000000	            mov rax, qword [0x040024bb] 	      1012	convert.c	FUNCTION_26	FOR_1
0x40024bb	        0x488945f0	             mov qword [rbp - 0x10], rax	      1012	convert.c	FUNCTION_26	FOR_1
0x40024bf	            0xeb42	                           jmp 0x4002503	      1012	convert.c	FUNCTION_26	FOR_1
0x40024c1	          0x8b45dc	             mov eax, dword [rbp - 0x24]	      1013	convert.c	FUNCTION_26	FOR_1	IF_2	CALL_2
0x40024c4	          0x4863d0	                         movsxd rdx, eax	      1013	convert.c	FUNCTION_26	FOR_1	IF_2	CALL_2
0x40024c7	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	      1013	convert.c	FUNCTION_26	FOR_1	IF_2	CALL_2
0x40024cb	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1013	convert.c	FUNCTION_26	FOR_1	IF_2	CALL_2
0x40024cf	          0x488b00	                    mov rax, qword [rax]	      1013	convert.c	FUNCTION_26	FOR_1	IF_2	CALL_2
0x40024d2	          0x4889ce	                            mov rsi, rcx	      1013	convert.c	FUNCTION_26	FOR_1	IF_2	CALL_2
0x40024d5	          0x4889c7	                            mov rdi, rax	      1013	convert.c	FUNCTION_26	FOR_1	IF_2	CALL_2
0x40024d8	      0xe800000000	                          call 0x40024dd	      1013	convert.c	FUNCTION_26	FOR_1	IF_2	CALL_2
0x40024dd	            0x85c0	                           test eax, eax	      1013	convert.c	FUNCTION_26	FOR_1	IF_2	CALL_2
0x40024df	            0x7516	                           jne 0x40024f7	      1013	convert.c	FUNCTION_26	FOR_1	IF_2	CALL_2
0x40024e1	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1013	convert.c	FUNCTION_26	FOR_1	IF_2	CALL_2
0x40024e5	          0x488b10	                    mov rdx, qword [rax]	      1013	convert.c	FUNCTION_26	FOR_1	IF_2	CALL_2
0x40024e8	          0x8b45dc	             mov eax, dword [rbp - 0x24]	      1013	convert.c	FUNCTION_26	FOR_1	IF_2	CALL_2
0x40024eb	            0x4898	                                    cdqe	      1013	convert.c	FUNCTION_26	FOR_1	IF_2	CALL_2
0x40024ed	          0x4801d0	                            add rax, rdx	      1013	convert.c	FUNCTION_26	FOR_1	IF_2	CALL_2
0x40024f0	           0xfb600	                   movzx eax, byte [rax]	      1013	convert.c	FUNCTION_26	FOR_1	IF_2	CALL_2
0x40024f3	            0x84c0	                             test al, al	      1013	convert.c	FUNCTION_26	FOR_1	IF_2	CALL_2
0x40024f5	            0x7415	                            je 0x400250c	      1013	convert.c	FUNCTION_26	FOR_1	IF_2	CALL_2
0x40024f7	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1012	convert.c	FUNCTION_26	FOR_1
0x40024fb	        0x488b4008	                mov rax, qword [rax + 8]	      1012	convert.c	FUNCTION_26	FOR_1
0x40024ff	        0x488945f0	             mov qword [rbp - 0x10], rax	      1012	convert.c	FUNCTION_26	FOR_1
0x4002503	      0x48837df000	               cmp qword [rbp - 0x10], 0	      1012	convert.c	FUNCTION_26	FOR_1
0x4002508	            0x75b7	                           jne 0x40024c1	      1012	convert.c	FUNCTION_26	FOR_1
0x400250a	            0xeb01	                           jmp 0x400250d	      1012	convert.c	FUNCTION_26	FOR_1
0x400250c	              0x90	                                     nop	      1014	convert.c	FUNCTION_26	FOR_1	IF_2
0x400250d	      0x48837df000	               cmp qword [rbp - 0x10], 0	      1015	convert.c	FUNCTION_26	IF_3
0x4002512	            0x754f	                           jne 0x4002563	      1015	convert.c	FUNCTION_26	IF_3
0x4002514	      0xbe30000000	                           mov esi, 0x30	      1016	convert.c	FUNCTION_26	IF_3	CALL_3
0x4002519	      0xbf01000000	                              mov edi, 1	      1016	convert.c	FUNCTION_26	IF_3	CALL_3
0x400251e	      0xe800000000	                          call 0x4002523	      1016	convert.c	FUNCTION_26	IF_3	CALL_3
0x4002523	        0x488945f0	             mov qword [rbp - 0x10], rax	      1016	convert.c	FUNCTION_26	IF_3	CALL_3
0x4002527	          0x8b45dc	             mov eax, dword [rbp - 0x24]	      1017	convert.c	FUNCTION_26	IF_3	CALL_4
0x400252a	          0x4863d0	                         movsxd rdx, eax	      1017	convert.c	FUNCTION_26	IF_3	CALL_4
0x400252d	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1017	convert.c	FUNCTION_26	IF_3	CALL_4
0x4002531	          0x4889d6	                            mov rsi, rdx	      1017	convert.c	FUNCTION_26	IF_3	CALL_4
0x4002534	          0x4889c7	                            mov rdi, rax	      1017	convert.c	FUNCTION_26	IF_3	CALL_4
0x4002537	      0xe800000000	                          call 0x400253c	      1017	convert.c	FUNCTION_26	IF_3	CALL_4
0x400253c	          0x4889c2	                            mov rdx, rax	      1017	convert.c	FUNCTION_26	IF_3	CALL_4
0x400253f	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1017	convert.c	FUNCTION_26	IF_3	CALL_4
0x4002543	          0x488910	                    mov qword [rax], rdx	      1017	convert.c	FUNCTION_26	IF_3	CALL_4
0x4002546	    0x488b05000000	            mov rax, qword [0x0400254d] 	      1018	convert.c	FUNCTION_26	IF_3
0x400254d	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      1018	convert.c	FUNCTION_26	IF_3
0x4002551	          0x488910	                    mov qword [rax], rdx	      1018	convert.c	FUNCTION_26	IF_3
0x4002554	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1019	convert.c	FUNCTION_26	IF_3
0x4002558	        0x4883c008	                              add rax, 8	      1019	convert.c	FUNCTION_26	IF_3
0x400255c	    0x488905000000	            mov qword [0x04002563], rax 	      1019	convert.c	FUNCTION_26	IF_3
0x4002563	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1031	convert.c	FUNCTION_26	IF_4	CALL_5
0x4002567	          0x4889c6	                            mov rsi, rax	      1031	convert.c	FUNCTION_26	IF_4	CALL_5
0x400256a	      0xbf00000000	                              mov edi, 0	      1031	convert.c	FUNCTION_26	IF_4	CALL_5
0x400256f	      0xe800000000	                          call 0x4002574	      1031	convert.c	FUNCTION_26	IF_4	CALL_5
0x4002574	            0x85c0	                           test eax, eax	      1031	convert.c	FUNCTION_26	IF_4	CALL_5
0x4002576	            0x7520	                           jne 0x4002598	      1031	convert.c	FUNCTION_26	IF_4	CALL_5
0x4002578	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1032	convert.c	FUNCTION_26	CALL_6
0x400257c	        0x488d4810	                   lea rcx, [rax + 0x10]	      1032	convert.c	FUNCTION_26	CALL_6
0x4002580	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      1032	convert.c	FUNCTION_26	CALL_6
0x4002584	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1032	convert.c	FUNCTION_26	CALL_6
0x4002588	          0x4889c6	                            mov rsi, rax	      1032	convert.c	FUNCTION_26	CALL_6
0x400258b	          0x4889cf	                            mov rdi, rcx	      1032	convert.c	FUNCTION_26	CALL_6
0x400258e	      0xe800000000	                          call 0x4002593	      1032	convert.c	FUNCTION_26	CALL_6
0x4002593	      0xe9a1000000	                           jmp 0x4002639	      1032	convert.c	FUNCTION_26	CALL_6
0x4002598	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1034	convert.c	FUNCTION_26	IF_5	CALL_7
0x400259c	          0x4889c6	                            mov rsi, rax	      1034	convert.c	FUNCTION_26	IF_5	CALL_7
0x400259f	      0xbf00000000	                              mov edi, 0	      1034	convert.c	FUNCTION_26	IF_5	CALL_7
0x40025a4	      0xe800000000	                          call 0x40025a9	      1034	convert.c	FUNCTION_26	IF_5	CALL_7
0x40025a9	            0x85c0	                           test eax, eax	      1034	convert.c	FUNCTION_26	IF_5	CALL_7
0x40025ab	            0x751d	                           jne 0x40025ca	      1034	convert.c	FUNCTION_26	IF_5	CALL_7
0x40025ad	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1035	convert.c	FUNCTION_26	CALL_8
0x40025b1	        0x488d4818	                   lea rcx, [rax + 0x18]	      1035	convert.c	FUNCTION_26	CALL_8
0x40025b5	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      1035	convert.c	FUNCTION_26	CALL_8
0x40025b9	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1035	convert.c	FUNCTION_26	CALL_8
0x40025bd	          0x4889c6	                            mov rsi, rax	      1035	convert.c	FUNCTION_26	CALL_8
0x40025c0	          0x4889cf	                            mov rdi, rcx	      1035	convert.c	FUNCTION_26	CALL_8
0x40025c3	      0xe800000000	                          call 0x40025c8	      1035	convert.c	FUNCTION_26	CALL_8
0x40025c8	            0xeb6f	                           jmp 0x4002639	      1035	convert.c	FUNCTION_26	CALL_8
0x40025ca	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1037	convert.c	FUNCTION_26	IF_6	CALL_9
0x40025ce	          0x4889c6	                            mov rsi, rax	      1037	convert.c	FUNCTION_26	IF_6	CALL_9
0x40025d1	      0xbf00000000	                              mov edi, 0	      1037	convert.c	FUNCTION_26	IF_6	CALL_9
0x40025d6	      0xe800000000	                          call 0x40025db	      1037	convert.c	FUNCTION_26	IF_6	CALL_9
0x40025db	            0x85c0	                           test eax, eax	      1037	convert.c	FUNCTION_26	IF_6	CALL_9
0x40025dd	            0x751d	                           jne 0x40025fc	      1037	convert.c	FUNCTION_26	IF_6	CALL_9
0x40025df	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1038	convert.c	FUNCTION_26	CALL_10
0x40025e3	        0x488d4820	                   lea rcx, [rax + 0x20]	      1038	convert.c	FUNCTION_26	CALL_10
0x40025e7	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      1038	convert.c	FUNCTION_26	CALL_10
0x40025eb	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1038	convert.c	FUNCTION_26	CALL_10
0x40025ef	          0x4889c6	                            mov rsi, rax	      1038	convert.c	FUNCTION_26	CALL_10
0x40025f2	          0x4889cf	                            mov rdi, rcx	      1038	convert.c	FUNCTION_26	CALL_10
0x40025f5	      0xe800000000	                          call 0x40025fa	      1038	convert.c	FUNCTION_26	CALL_10
0x40025fa	            0xeb3d	                           jmp 0x4002639	      1038	convert.c	FUNCTION_26	CALL_10
0x40025fc	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1040	convert.c	FUNCTION_26	IF_7	CALL_11
0x4002600	          0x4889c6	                            mov rsi, rax	      1040	convert.c	FUNCTION_26	IF_7	CALL_11
0x4002603	      0xbf00000000	                              mov edi, 0	      1040	convert.c	FUNCTION_26	IF_7	CALL_11
0x4002608	      0xe800000000	                          call 0x400260d	      1040	convert.c	FUNCTION_26	IF_7	CALL_11
0x400260d	            0x85c0	                           test eax, eax	      1040	convert.c	FUNCTION_26	IF_7	CALL_11
0x400260f	            0x7523	                           jne 0x4002634	      1040	convert.c	FUNCTION_26	IF_7	CALL_11
0x4002611	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      1041	convert.c	FUNCTION_26	IF_7	CALL_12
0x4002615	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1041	convert.c	FUNCTION_26	IF_7	CALL_12
0x4002619	          0x4889d6	                            mov rsi, rdx	      1041	convert.c	FUNCTION_26	IF_7	CALL_12
0x400261c	          0x4889c7	                            mov rdi, rax	      1041	convert.c	FUNCTION_26	IF_7	CALL_12
0x400261f	      0xe800000000	                          call 0x4002624	      1041	convert.c	FUNCTION_26	IF_7	CALL_12
0x4002624	            0x89c2	                            mov edx, eax	      1041	convert.c	FUNCTION_26	IF_7	CALL_12
0x4002626	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1041	convert.c	FUNCTION_26	IF_7	CALL_12
0x400262a	          0x895028	             mov dword [rax + 0x28], edx	      1041	convert.c	FUNCTION_26	IF_7	CALL_12
0x400262d	      0xb800000000	                              mov eax, 0	      1042	convert.c	FUNCTION_26	IF_7
0x4002632	            0xeb05	                           jmp 0x4002639	      1042	convert.c	FUNCTION_26	IF_7
0x4002634	      0xb800000000	                              mov eax, 0	      1045	convert.c	FUNCTION_26
0x4002639	        0x488b4df8	                mov rcx, qword [rbp - 8]	      1046	convert.c	FUNCTION_26
0x400263d	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      1046	convert.c	FUNCTION_26
0x4002646	            0x7405	                            je 0x400264d	      1046	convert.c	FUNCTION_26
0x4002648	      0xe800000000	                          call 0x400264d	      1046	convert.c	FUNCTION_26
0x400264d	              0xc9	                                   leave	      1046	convert.c	FUNCTION_26
0x400264e	              0xc3	                                     ret	      1046	convert.c	FUNCTION_26
get_wt_convert_stats_ascii	ELSE,0:FOR,0:WHILE,0:IF,1:CALL,3:functions,0:SWITCH,0:DO,0	35
0x400064a	              0x55	                                push rbp	       152	convert.c	FUNCTION_6
0x400064b	          0x4889e5	                            mov rbp, rsp	       152	convert.c	FUNCTION_6
0x400064e	        0x4883ec40	                           sub rsp, 0x40	       152	convert.c	FUNCTION_6
0x4000652	        0x48897dc8	             mov qword [rbp - 0x38], rdi	       152	convert.c	FUNCTION_6
0x4000656	    0x64488b042528	                mov rax, qword fs:[0x28]	       152	convert.c	FUNCTION_6
0x400065f	        0x488945f8	                mov qword [rbp - 8], rax	       152	convert.c	FUNCTION_6
0x4000663	            0x31c0	                            xor eax, eax	       152	convert.c	FUNCTION_6
0x4000665	    0x48c745d80000	               mov qword [rbp - 0x28], 0	       153	convert.c	FUNCTION_6
0x400066d	    0x48c745e00000	               mov qword [rbp - 0x20], 0	       154	convert.c	FUNCTION_6
0x4000675	    0x48c745e80000	               mov qword [rbp - 0x18], 0	       154	convert.c	FUNCTION_6
0x400067d	    0x48c745f00000	               mov qword [rbp - 0x10], 0	       154	convert.c	FUNCTION_6
0x4000685	        0x488b4dc8	             mov rcx, qword [rbp - 0x38]	       155	convert.c	FUNCTION_6	IF_1	CALL_1
0x4000689	        0x488d45e0	                   lea rax, [rbp - 0x20]	       155	convert.c	FUNCTION_6	IF_1	CALL_1
0x400068d	      0xba00000000	                              mov edx, 0	       155	convert.c	FUNCTION_6	IF_1	CALL_1
0x4000692	          0x4889ce	                            mov rsi, rcx	       155	convert.c	FUNCTION_6	IF_1	CALL_1
0x4000695	          0x4889c7	                            mov rdi, rax	       155	convert.c	FUNCTION_6	IF_1	CALL_1
0x4000698	      0xe800000000	                          call 0x400069d	       155	convert.c	FUNCTION_6	IF_1	CALL_1
0x400069d	          0x4885c0	                           test rax, rax	       155	convert.c	FUNCTION_6	IF_1	CALL_1
0x40006a0	            0x7817	                            js 0x40006b9	       155	convert.c	FUNCTION_6	IF_1	CALL_1
0x40006a2	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       156	convert.c	FUNCTION_6	CALL_2
0x40006a6	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       156	convert.c	FUNCTION_6	CALL_2
0x40006aa	          0x4889d6	                            mov rsi, rdx	       156	convert.c	FUNCTION_6	CALL_2
0x40006ad	          0x4889c7	                            mov rdi, rax	       156	convert.c	FUNCTION_6	CALL_2
0x40006b0	      0xe8b9feffff	     call sym.gather_convert_stats_ascii	       156	convert.c	FUNCTION_6	CALL_2
0x40006b5	        0x488945d8	             mov qword [rbp - 0x28], rax	       156	convert.c	FUNCTION_6	CALL_2
0x40006b9	        0x488d45e0	                   lea rax, [rbp - 0x20]	       157	convert.c	FUNCTION_6	CALL_3
0x40006bd	          0x4889c7	                            mov rdi, rax	       157	convert.c	FUNCTION_6	CALL_3
0x40006c0	      0xe800000000	                          call 0x40006c5	       157	convert.c	FUNCTION_6	CALL_3
0x40006c5	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       158	convert.c	FUNCTION_6
0x40006c9	        0x488b4df8	                mov rcx, qword [rbp - 8]	       159	convert.c	FUNCTION_6
0x40006cd	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       159	convert.c	FUNCTION_6
0x40006d6	            0x7405	                            je 0x40006dd	       159	convert.c	FUNCTION_6
0x40006d8	      0xe800000000	                          call 0x40006dd	       159	convert.c	FUNCTION_6
0x40006dd	              0xc9	                                   leave	       159	convert.c	FUNCTION_6
0x40006de	              0xc3	                                     ret	       159	convert.c	FUNCTION_6
encode_to_worktree	ELSE,0:FOR,0:WHILE,0:IF,2:CALL,2:functions,0:SWITCH,0:DO,0	58
0x4001184	              0x55	                                push rbp	       481	convert.c	FUNCTION_16
0x4001185	          0x4889e5	                            mov rbp, rsp	       481	convert.c	FUNCTION_16
0x4001188	        0x4883ec50	                           sub rsp, 0x50	       481	convert.c	FUNCTION_16
0x400118c	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       481	convert.c	FUNCTION_16
0x4001190	        0x488975d0	             mov qword [rbp - 0x30], rsi	       481	convert.c	FUNCTION_16
0x4001194	        0x488955c8	             mov qword [rbp - 0x38], rdx	       481	convert.c	FUNCTION_16
0x4001198	        0x48894dc0	             mov qword [rbp - 0x40], rcx	       481	convert.c	FUNCTION_16
0x400119c	        0x4c8945b8	              mov qword [rbp - 0x48], r8	       481	convert.c	FUNCTION_16
0x40011a0	    0x64488b042528	                mov rax, qword fs:[0x28]	       481	convert.c	FUNCTION_16
0x40011a9	        0x488945f8	                mov qword [rbp - 8], rax	       481	convert.c	FUNCTION_16
0x40011ad	            0x31c0	                            xor eax, eax	       481	convert.c	FUNCTION_16
0x40011af	      0x48837db800	               cmp qword [rbp - 0x48], 0	       489	convert.c	FUNCTION_16	IF_1
0x40011b4	            0x740e	                            je 0x40011c4	       489	convert.c	FUNCTION_16	IF_1
0x40011b6	      0x48837dd000	               cmp qword [rbp - 0x30], 0	       489	convert.c	FUNCTION_16	IF_1
0x40011bb	            0x7411	                            je 0x40011ce	       489	convert.c	FUNCTION_16	IF_1
0x40011bd	      0x48837dc800	               cmp qword [rbp - 0x38], 0	       489	convert.c	FUNCTION_16	IF_1
0x40011c2	            0x750a	                           jne 0x40011ce	       489	convert.c	FUNCTION_16	IF_1
0x40011c4	      0xb800000000	                              mov eax, 0	       490	convert.c	FUNCTION_16	IF_1
0x40011c9	      0xe982000000	                           jmp 0x4001250	       490	convert.c	FUNCTION_16	IF_1
0x40011ce	    0x488b0d000000	            mov rcx, qword [0x040011d5] 	       492	convert.c	FUNCTION_16	CALL_1
0x40011d5	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       492	convert.c	FUNCTION_16	CALL_1
0x40011d9	            0x89c7	                            mov edi, eax	       492	convert.c	FUNCTION_16	CALL_1
0x40011db	        0x488d75ec	                   lea rsi, [rbp - 0x14]	       492	convert.c	FUNCTION_16	CALL_1
0x40011df	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	       492	convert.c	FUNCTION_16	CALL_1
0x40011e3	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       492	convert.c	FUNCTION_16	CALL_1
0x40011e7	          0x4989f0	                             mov r8, rsi	       492	convert.c	FUNCTION_16	CALL_1
0x40011ea	            0x89fe	                            mov esi, edi	       492	convert.c	FUNCTION_16	CALL_1
0x40011ec	          0x4889c7	                            mov rdi, rax	       492	convert.c	FUNCTION_16	CALL_1
0x40011ef	      0xe800000000	                          call 0x40011f4	       492	convert.c	FUNCTION_16	CALL_1
0x40011f4	        0x488945f0	             mov qword [rbp - 0x10], rax	       492	convert.c	FUNCTION_16	CALL_1
0x40011f8	      0x48837df000	               cmp qword [rbp - 0x10], 0	       494	convert.c	FUNCTION_16	IF_2
0x40011fd	            0x752d	                           jne 0x400122c	       494	convert.c	FUNCTION_16	IF_2
0x40011ff	    0x488b15000000	            mov rdx, qword [0x04001206] 	       495	convert.c	FUNCTION_16	IF_2
0x4001206	        0x488b4db8	             mov rcx, qword [rbp - 0x48]	       495	convert.c	FUNCTION_16	IF_2
0x400120a	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       495	convert.c	FUNCTION_16	IF_2
0x400120e	          0x4889c6	                            mov rsi, rax	       495	convert.c	FUNCTION_16	IF_2
0x4001211	      0xbf00000000	                              mov edi, 0	       495	convert.c	FUNCTION_16	IF_2
0x4001216	      0xb800000000	                              mov eax, 0	       495	convert.c	FUNCTION_16	IF_2
0x400121b	      0xe800000000	                          call 0x4001220	       495	convert.c	FUNCTION_16	IF_2
0x4001220	      0xe81beeffff	                    call sym.const_error	       495	convert.c	FUNCTION_16	IF_2
0x4001225	      0xb800000000	                              mov eax, 0	       497	convert.c	FUNCTION_16	IF_2
0x400122a	            0xeb24	                           jmp 0x4001250	       497	convert.c	FUNCTION_16	IF_2
0x400122c	          0x8b45ec	             mov eax, dword [rbp - 0x14]	       500	convert.c	FUNCTION_16	CALL_2
0x400122f	          0x83c001	                              add eax, 1	       500	convert.c	FUNCTION_16	CALL_2
0x4001232	          0x4863c8	                         movsxd rcx, eax	       500	convert.c	FUNCTION_16	CALL_2
0x4001235	          0x8b45ec	             mov eax, dword [rbp - 0x14]	       500	convert.c	FUNCTION_16	CALL_2
0x4001238	          0x4863d0	                         movsxd rdx, eax	       500	convert.c	FUNCTION_16	CALL_2
0x400123b	        0x488b75f0	             mov rsi, qword [rbp - 0x10]	       500	convert.c	FUNCTION_16	CALL_2
0x400123f	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       500	convert.c	FUNCTION_16	CALL_2
0x4001243	          0x4889c7	                            mov rdi, rax	       500	convert.c	FUNCTION_16	CALL_2
0x4001246	      0xe800000000	                          call 0x400124b	       500	convert.c	FUNCTION_16	CALL_2
0x400124b	      0xb801000000	                              mov eax, 1	       501	convert.c	FUNCTION_16
0x4001250	        0x488b7df8	                mov rdi, qword [rbp - 8]	       502	convert.c	FUNCTION_16
0x4001254	    0x6448333c2528	                xor rdi, qword fs:[0x28]	       502	convert.c	FUNCTION_16
0x400125d	            0x7405	                            je 0x4001264	       502	convert.c	FUNCTION_16
0x400125f	      0xe800000000	                          call 0x4001264	       502	convert.c	FUNCTION_16
0x4001264	              0xc9	                                   leave	       502	convert.c	FUNCTION_16
0x4001265	              0xc3	                                     ret	       502	convert.c	FUNCTION_16
check_roundtrip	ELSE,0:FOR,0:WHILE,0:IF,1:CALL,2:functions,0:SWITCH,0:DO,0	76
0x4000dcb	              0x55	                                push rbp	       351	convert.c	FUNCTION_14
0x4000dcc	          0x4889e5	                            mov rbp, rsp	       351	convert.c	FUNCTION_14
0x4000dcf	        0x4883ec30	                           sub rsp, 0x30	       351	convert.c	FUNCTION_14
0x4000dd3	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       351	convert.c	FUNCTION_14
0x4000dd7	    0x488b05000000	            mov rax, qword [0x04000dde] 	       357	convert.c	FUNCTION_14
0x4000dde	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       357	convert.c	FUNCTION_14
0x4000de2	          0x4889d6	                            mov rsi, rdx	       357	convert.c	FUNCTION_14
0x4000de5	          0x4889c7	                            mov rdi, rax	       357	convert.c	FUNCTION_14
0x4000de8	      0xe800000000	                          call 0x4000ded	       357	convert.c	FUNCTION_14
0x4000ded	        0x488945f0	             mov qword [rbp - 0x10], rax	       357	convert.c	FUNCTION_14
0x4000df1	      0x48837df000	               cmp qword [rbp - 0x10], 0	       360	convert.c	FUNCTION_14	IF_1
0x4000df6	            0x750a	                           jne 0x4000e02	       360	convert.c	FUNCTION_14	IF_1
0x4000df8	      0xb800000000	                              mov eax, 0	       361	convert.c	FUNCTION_14	IF_1
0x4000dfd	      0xe9d3000000	                           jmp 0x4000ed5	       361	convert.c	FUNCTION_14	IF_1
0x4000e02	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       362	convert.c	FUNCTION_14	CALL_1
0x4000e06	          0x4889c7	                            mov rdi, rax	       362	convert.c	FUNCTION_14	CALL_1
0x4000e09	      0xe800000000	                          call 0x4000e0e	       362	convert.c	FUNCTION_14	CALL_1
0x4000e0e	          0x4889c2	                            mov rdx, rax	       362	convert.c	FUNCTION_14	CALL_1
0x4000e11	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       362	convert.c	FUNCTION_14	CALL_1
0x4000e15	          0x4801d0	                            add rax, rdx	       362	convert.c	FUNCTION_14	CALL_1
0x4000e18	        0x488945f8	                mov qword [rbp - 8], rax	       362	convert.c	FUNCTION_14	CALL_1
0x4000e1c	    0x488b05000000	            mov rax, qword [0x04000e23] 	       363	convert.c	FUNCTION_14	CALL_2
0x4000e23	          0x4889c7	                            mov rdi, rax	       363	convert.c	FUNCTION_14	CALL_2
0x4000e26	      0xe800000000	                          call 0x4000e2b	       363	convert.c	FUNCTION_14	CALL_2
0x4000e2b	          0x8945ec	             mov dword [rbp - 0x14], eax	       363	convert.c	FUNCTION_14	CALL_2
0x4000e2e	      0x48837df000	               cmp qword [rbp - 0x10], 0	       373	convert.c	FUNCTION_14
0x4000e33	     0xf8496000000	                            je 0x4000ecf	       373	convert.c	FUNCTION_14
0x4000e39	    0x488b05000000	            mov rax, qword [0x04000e40] 	       370	convert.c	FUNCTION_14
0x4000e40	        0x483945f0	            cmp qword [rbp - 0x10], rax 	       364	convert.c	FUNCTION_14
0x4000e44	            0x7430	                            je 0x4000e76	       364	convert.c	FUNCTION_14
0x4000e46	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       371	convert.c	FUNCTION_14
0x4000e4a	        0x4883e801	                              sub rax, 1	       371	convert.c	FUNCTION_14
0x4000e4e	           0xfb600	                   movzx eax, byte [rax]	       371	convert.c	FUNCTION_14
0x4000e51	           0xfb6c0	                           movzx eax, al	       371	convert.c	FUNCTION_14
0x4000e54	            0x4898	                                    cdqe	       371	convert.c	FUNCTION_14
0x4000e56	     0xfb680000000	                   movzx eax, byte [rax]	       371	convert.c	FUNCTION_14
0x4000e5d	           0xfb6c0	                           movzx eax, al	       371	convert.c	FUNCTION_14
0x4000e60	          0x83e001	                              and eax, 1	       371	convert.c	FUNCTION_14
0x4000e63	            0x85c0	                           test eax, eax	       370	convert.c	FUNCTION_14
0x4000e65	            0x750f	                           jne 0x4000e76	       370	convert.c	FUNCTION_14
0x4000e67	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       371	convert.c	FUNCTION_14
0x4000e6b	        0x4883e801	                              sub rax, 1	       371	convert.c	FUNCTION_14
0x4000e6f	           0xfb600	                   movzx eax, byte [rax]	       371	convert.c	FUNCTION_14
0x4000e72	            0x3c2c	                            cmp al, 0x2c	       371	convert.c	FUNCTION_14
0x4000e74	            0x7559	                           jne 0x4000ecf	       371	convert.c	FUNCTION_14
0x4000e76	    0x488b15000000	            mov rdx, qword [0x04000e7d] 	       379	convert.c	FUNCTION_14
0x4000e7d	          0x8b45ec	             mov eax, dword [rbp - 0x14]	       379	convert.c	FUNCTION_14
0x4000e80	            0x4898	                                    cdqe	       379	convert.c	FUNCTION_14
0x4000e82	          0x4801d0	                            add rax, rdx	       379	convert.c	FUNCTION_14
0x4000e85	        0x483b45f8	                cmp rax, qword [rbp - 8]	       373	convert.c	FUNCTION_14
0x4000e89	            0x743d	                            je 0x4000ec8	       373	convert.c	FUNCTION_14
0x4000e8b	    0x488b15000000	            mov rdx, qword [0x04000e92] 	       380	convert.c	FUNCTION_14
0x4000e92	          0x8b45ec	             mov eax, dword [rbp - 0x14]	       380	convert.c	FUNCTION_14
0x4000e95	            0x4898	                                    cdqe	       380	convert.c	FUNCTION_14
0x4000e97	          0x4801d0	                            add rax, rdx	       380	convert.c	FUNCTION_14
0x4000e9a	        0x483b45f8	                cmp rax, qword [rbp - 8]	       379	convert.c	FUNCTION_14
0x4000e9e	            0x762f	                           jbe 0x4000ecf	       379	convert.c	FUNCTION_14
0x4000ea0	        0x488b45f8	                mov rax, qword [rbp - 8]	       381	convert.c	FUNCTION_14
0x4000ea4	           0xfb600	                   movzx eax, byte [rax]	       381	convert.c	FUNCTION_14
0x4000ea7	           0xfb6c0	                           movzx eax, al	       381	convert.c	FUNCTION_14
0x4000eaa	            0x4898	                                    cdqe	       381	convert.c	FUNCTION_14
0x4000eac	     0xfb680000000	                   movzx eax, byte [rax]	       381	convert.c	FUNCTION_14
0x4000eb3	           0xfb6c0	                           movzx eax, al	       381	convert.c	FUNCTION_14
0x4000eb6	          0x83e001	                              and eax, 1	       381	convert.c	FUNCTION_14
0x4000eb9	            0x85c0	                           test eax, eax	       380	convert.c	FUNCTION_14
0x4000ebb	            0x750b	                           jne 0x4000ec8	       380	convert.c	FUNCTION_14
0x4000ebd	        0x488b45f8	                mov rax, qword [rbp - 8]	       381	convert.c	FUNCTION_14
0x4000ec1	           0xfb600	                   movzx eax, byte [rax]	       381	convert.c	FUNCTION_14
0x4000ec4	            0x3c2c	                            cmp al, 0x2c	       381	convert.c	FUNCTION_14
0x4000ec6	            0x7507	                           jne 0x4000ecf	       381	convert.c	FUNCTION_14
0x4000ec8	      0xb801000000	                              mov eax, 1	       373	convert.c	FUNCTION_14
0x4000ecd	            0xeb05	                           jmp 0x4000ed4	       364	convert.c	FUNCTION_14
0x4000ecf	      0xb800000000	                              mov eax, 0	       373	convert.c	FUNCTION_14
0x4000ed4	              0x90	                                     nop	       364	convert.c	FUNCTION_14
0x4000ed5	              0xc9	                                   leave	       384	convert.c	FUNCTION_14
0x4000ed6	              0xc3	                                     ret	       384	convert.c	FUNCTION_14
ident_to_git	ELSE,0:FOR,1:WHILE,0:IF,7:CALL,11:functions,0:SWITCH,0:DO,0	158
0x4002720	              0x55	                                push rbp	      1092	convert.c	FUNCTION_28
0x4002721	          0x4889e5	                            mov rbp, rsp	      1092	convert.c	FUNCTION_28
0x4002724	        0x4883ec40	                           sub rsp, 0x40	      1092	convert.c	FUNCTION_28
0x4002728	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1092	convert.c	FUNCTION_28
0x400272c	        0x488975e0	             mov qword [rbp - 0x20], rsi	      1092	convert.c	FUNCTION_28
0x4002730	        0x488955d8	             mov qword [rbp - 0x28], rdx	      1092	convert.c	FUNCTION_28
0x4002734	        0x48894dd0	             mov qword [rbp - 0x30], rcx	      1092	convert.c	FUNCTION_28
0x4002738	        0x448945cc	             mov dword [rbp - 0x34], r8d	      1092	convert.c	FUNCTION_28
0x400273c	        0x837dcc00	               cmp dword [rbp - 0x34], 0	      1095	convert.c	FUNCTION_28	IF_1	CALL_1
0x4002740	            0x741e	                            je 0x4002760	      1095	convert.c	FUNCTION_28	IF_1	CALL_1
0x4002742	      0x48837de000	               cmp qword [rbp - 0x20], 0	      1095	convert.c	FUNCTION_28	IF_1	CALL_1
0x4002747	            0x7421	                            je 0x400276a	      1095	convert.c	FUNCTION_28	IF_1	CALL_1
0x4002749	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      1095	convert.c	FUNCTION_28	IF_1	CALL_1
0x400274d	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1095	convert.c	FUNCTION_28	IF_1	CALL_1
0x4002751	          0x4889d6	                            mov rsi, rdx	      1095	convert.c	FUNCTION_28	IF_1	CALL_1
0x4002754	          0x4889c7	                            mov rdi, rax	      1095	convert.c	FUNCTION_28	IF_1	CALL_1
0x4002757	      0xe8f3feffff	                    call sym.count_ident	      1095	convert.c	FUNCTION_28	IF_1	CALL_1
0x400275c	            0x85c0	                           test eax, eax	      1095	convert.c	FUNCTION_28	IF_1	CALL_1
0x400275e	            0x750a	                           jne 0x400276a	      1095	convert.c	FUNCTION_28	IF_1	CALL_1
0x4002760	      0xb800000000	                              mov eax, 0	      1096	convert.c	FUNCTION_28	IF_1
0x4002765	      0xe901020000	                           jmp 0x400296b	      1096	convert.c	FUNCTION_28	IF_1
0x400276a	      0x48837dd000	               cmp qword [rbp - 0x30], 0	      1098	convert.c	FUNCTION_28	IF_2
0x400276f	            0x750a	                           jne 0x400277b	      1098	convert.c	FUNCTION_28	IF_2
0x4002771	      0xb801000000	                              mov eax, 1	      1099	convert.c	FUNCTION_28	IF_2
0x4002776	      0xe9f0010000	                           jmp 0x400296b	      1099	convert.c	FUNCTION_28	IF_2
0x400277b	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1102	convert.c	FUNCTION_28	IF_3	CALL_2
0x400277f	          0x4889c7	                            mov rdi, rax	      1102	convert.c	FUNCTION_28	IF_3	CALL_2
0x4002782	      0xe8aed9ffff	                   call sym.strbuf_avail	      1102	convert.c	FUNCTION_28	IF_3	CALL_2
0x4002787	          0x4889c2	                            mov rdx, rax	      1102	convert.c	FUNCTION_28	IF_3	CALL_2
0x400278a	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1102	convert.c	FUNCTION_28	IF_3	CALL_2
0x400278e	        0x488b4008	                mov rax, qword [rax + 8]	      1102	convert.c	FUNCTION_28	IF_3	CALL_2
0x4002792	          0x4801d0	                            add rax, rdx	      1102	convert.c	FUNCTION_28	IF_3	CALL_2
0x4002795	        0x483b45d8	             cmp rax, qword [rbp - 0x28]	      1102	convert.c	FUNCTION_28	IF_3	CALL_2
0x4002799	            0x731e	                           jae 0x40027b9	      1102	convert.c	FUNCTION_28	IF_3	CALL_2
0x400279b	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1103	convert.c	FUNCTION_28	CALL_3
0x400279f	        0x488b4008	                mov rax, qword [rax + 8]	      1103	convert.c	FUNCTION_28	CALL_3
0x40027a3	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      1103	convert.c	FUNCTION_28	CALL_3
0x40027a7	          0x4829c2	                            sub rdx, rax	      1103	convert.c	FUNCTION_28	CALL_3
0x40027aa	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1103	convert.c	FUNCTION_28	CALL_3
0x40027ae	          0x4889d6	                            mov rsi, rdx	      1103	convert.c	FUNCTION_28	CALL_3
0x40027b1	          0x4889c7	                            mov rdi, rax	      1103	convert.c	FUNCTION_28	CALL_3
0x40027b4	      0xe800000000	                          call 0x40027b9	      1103	convert.c	FUNCTION_28	CALL_3
0x40027b9	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1104	convert.c	FUNCTION_28
0x40027bd	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1104	convert.c	FUNCTION_28
0x40027c1	        0x488945f0	             mov qword [rbp - 0x10], rax	      1104	convert.c	FUNCTION_28
0x40027c5	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      1106	convert.c	FUNCTION_28	FOR_1	CALL_4
0x40027c9	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1106	convert.c	FUNCTION_28	FOR_1	CALL_4
0x40027cd	      0xbe24000000	                           mov esi, 0x24	      1106	convert.c	FUNCTION_28	FOR_1	CALL_4
0x40027d2	          0x4889c7	                            mov rdi, rax	      1106	convert.c	FUNCTION_28	FOR_1	CALL_4
0x40027d5	      0xe800000000	                          call 0x40027da	      1106	convert.c	FUNCTION_28	FOR_1	CALL_4
0x40027da	        0x488945f8	                mov qword [rbp - 8], rax	      1106	convert.c	FUNCTION_28	FOR_1	CALL_4
0x40027de	      0x48837df800	                  cmp qword [rbp - 8], 0	      1107	convert.c	FUNCTION_28	FOR_1	IF_4
0x40027e3	     0xf8434010000	                            je 0x400291d	      1107	convert.c	FUNCTION_28	FOR_1	IF_4
0x40027e9	        0x488b45f8	                mov rax, qword [rbp - 8]	      1109	convert.c	FUNCTION_28	FOR_1	CALL_5
0x40027ed	        0x4883c001	                              add rax, 1	      1109	convert.c	FUNCTION_28	FOR_1	CALL_5
0x40027f1	          0x4889c2	                            mov rdx, rax	      1109	convert.c	FUNCTION_28	FOR_1	CALL_5
0x40027f4	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1109	convert.c	FUNCTION_28	FOR_1	CALL_5
0x40027f8	          0x4829c2	                            sub rdx, rax	      1109	convert.c	FUNCTION_28	FOR_1	CALL_5
0x40027fb	          0x4889d0	                            mov rax, rdx	      1109	convert.c	FUNCTION_28	FOR_1	CALL_5
0x40027fe	          0x4889c2	                            mov rdx, rax	      1109	convert.c	FUNCTION_28	FOR_1	CALL_5
0x4002801	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	      1109	convert.c	FUNCTION_28	FOR_1	CALL_5
0x4002805	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1109	convert.c	FUNCTION_28	FOR_1	CALL_5
0x4002809	          0x4889ce	                            mov rsi, rcx	      1109	convert.c	FUNCTION_28	FOR_1	CALL_5
0x400280c	          0x4889c7	                            mov rdi, rax	      1109	convert.c	FUNCTION_28	FOR_1	CALL_5
0x400280f	      0xe800000000	                          call 0x4002814	      1109	convert.c	FUNCTION_28	FOR_1	CALL_5
0x4002814	        0x488b45f8	                mov rax, qword [rbp - 8]	      1110	convert.c	FUNCTION_28	FOR_1
0x4002818	        0x4883c001	                              add rax, 1	      1110	convert.c	FUNCTION_28	FOR_1
0x400281c	          0x4889c2	                            mov rdx, rax	      1110	convert.c	FUNCTION_28	FOR_1
0x400281f	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1110	convert.c	FUNCTION_28	FOR_1
0x4002823	          0x4829c2	                            sub rdx, rax	      1110	convert.c	FUNCTION_28	FOR_1
0x4002826	          0x4889d0	                            mov rax, rdx	      1110	convert.c	FUNCTION_28	FOR_1
0x4002829	        0x480145f0	            add qword [rbp - 0x10], rax 	      1110	convert.c	FUNCTION_28	FOR_1
0x400282d	        0x488b45f8	                mov rax, qword [rbp - 8]	      1111	convert.c	FUNCTION_28	FOR_1
0x4002831	        0x4883c001	                              add rax, 1	      1111	convert.c	FUNCTION_28	FOR_1
0x4002835	          0x4889c2	                            mov rdx, rax	      1111	convert.c	FUNCTION_28	FOR_1
0x4002838	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1111	convert.c	FUNCTION_28	FOR_1
0x400283c	          0x4829c2	                            sub rdx, rax	      1111	convert.c	FUNCTION_28	FOR_1
0x400283f	          0x4889d0	                            mov rax, rdx	      1111	convert.c	FUNCTION_28	FOR_1
0x4002842	        0x482945d8	             sub qword [rbp - 0x28], rax	      1111	convert.c	FUNCTION_28	FOR_1
0x4002846	        0x488b45f8	                mov rax, qword [rbp - 8]	      1112	convert.c	FUNCTION_28	FOR_1
0x400284a	        0x4883c001	                              add rax, 1	      1112	convert.c	FUNCTION_28	FOR_1
0x400284e	        0x488945e0	             mov qword [rbp - 0x20], rax	      1112	convert.c	FUNCTION_28	FOR_1
0x4002852	      0x48837dd803	               cmp qword [rbp - 0x28], 3	      1114	convert.c	FUNCTION_28	FOR_1	IF_5	CALL_6
0x4002857	     0xf8668ffffff	                           jbe 0x40027c5	      1114	convert.c	FUNCTION_28	FOR_1	IF_5	CALL_6
0x400285d	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1114	convert.c	FUNCTION_28	FOR_1	IF_5	CALL_6
0x4002861	      0xba03000000	                              mov edx, 3	      1114	convert.c	FUNCTION_28	FOR_1	IF_5	CALL_6
0x4002866	      0xbe00000000	                              mov esi, 0	      1114	convert.c	FUNCTION_28	FOR_1	IF_5	CALL_6
0x400286b	          0x4889c7	                            mov rdi, rax	      1114	convert.c	FUNCTION_28	FOR_1	IF_5	CALL_6
0x400286e	      0xe800000000	                          call 0x4002873	      1114	convert.c	FUNCTION_28	FOR_1	IF_5	CALL_6
0x4002873	            0x85c0	                           test eax, eax	      1114	convert.c	FUNCTION_28	FOR_1	IF_5	CALL_6
0x4002875	     0xf854affffff	                           jne 0x40027c5	      1114	convert.c	FUNCTION_28	FOR_1	IF_5	CALL_6
0x400287b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1115	convert.c	FUNCTION_28	FOR_1	IF_5	CALL_7
0x400287f	        0x488d50fd	                      lea rdx, [rax - 3]	      1115	convert.c	FUNCTION_28	FOR_1	IF_5	CALL_7
0x4002883	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1115	convert.c	FUNCTION_28	FOR_1	IF_5	CALL_7
0x4002887	        0x4883c003	                              add rax, 3	      1115	convert.c	FUNCTION_28	FOR_1	IF_5	CALL_7
0x400288b	      0xbe24000000	                           mov esi, 0x24	      1115	convert.c	FUNCTION_28	FOR_1	IF_5	CALL_7
0x4002890	          0x4889c7	                            mov rdi, rax	      1115	convert.c	FUNCTION_28	FOR_1	IF_5	CALL_7
0x4002893	      0xe800000000	                          call 0x4002898	      1115	convert.c	FUNCTION_28	FOR_1	IF_5	CALL_7
0x4002898	        0x488945f8	                mov qword [rbp - 8], rax	      1115	convert.c	FUNCTION_28	FOR_1	IF_5	CALL_7
0x400289c	      0x48837df800	                  cmp qword [rbp - 8], 0	      1116	convert.c	FUNCTION_28	FOR_1	IF_5	IF_6
0x40028a1	            0x747d	                            je 0x4002920	      1116	convert.c	FUNCTION_28	FOR_1	IF_5	IF_6
0x40028a3	        0x488b55f8	                mov rdx, qword [rbp - 8]	      1118	convert.c	FUNCTION_28	FOR_1	IF_5	IF_7	CALL_8
0x40028a7	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1118	convert.c	FUNCTION_28	FOR_1	IF_5	IF_7	CALL_8
0x40028ab	          0x4829c2	                            sub rdx, rax	      1118	convert.c	FUNCTION_28	FOR_1	IF_5	IF_7	CALL_8
0x40028ae	          0x4889d0	                            mov rax, rdx	      1118	convert.c	FUNCTION_28	FOR_1	IF_5	IF_7	CALL_8
0x40028b1	        0x4883e803	                              sub rax, 3	      1118	convert.c	FUNCTION_28	FOR_1	IF_5	IF_7	CALL_8
0x40028b5	          0x4889c2	                            mov rdx, rax	      1118	convert.c	FUNCTION_28	FOR_1	IF_5	IF_7	CALL_8
0x40028b8	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1118	convert.c	FUNCTION_28	FOR_1	IF_5	IF_7	CALL_8
0x40028bc	        0x4883c003	                              add rax, 3	      1118	convert.c	FUNCTION_28	FOR_1	IF_5	IF_7	CALL_8
0x40028c0	      0xbe0a000000	                            mov esi, 0xa	      1118	convert.c	FUNCTION_28	FOR_1	IF_5	IF_7	CALL_8
0x40028c5	          0x4889c7	                            mov rdi, rax	      1118	convert.c	FUNCTION_28	FOR_1	IF_5	IF_7	CALL_8
0x40028c8	      0xe800000000	                          call 0x40028cd	      1118	convert.c	FUNCTION_28	FOR_1	IF_5	IF_7	CALL_8
0x40028cd	          0x4885c0	                           test rax, rax	      1118	convert.c	FUNCTION_28	FOR_1	IF_5	IF_7	CALL_8
0x40028d0	            0x7545	                           jne 0x4002917	      1118	convert.c	FUNCTION_28	FOR_1	IF_5	IF_7	CALL_8
0x40028d2	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1123	convert.c	FUNCTION_28	FOR_1	IF_5	CALL_9
0x40028d6	      0xba03000000	                              mov edx, 3	      1123	convert.c	FUNCTION_28	FOR_1	IF_5	CALL_9
0x40028db	      0xbe00000000	                              mov esi, 0	      1123	convert.c	FUNCTION_28	FOR_1	IF_5	CALL_9
0x40028e0	          0x4889c7	                            mov rdi, rax	      1123	convert.c	FUNCTION_28	FOR_1	IF_5	CALL_9
0x40028e3	      0xe800000000	                          call 0x40028e8	      1123	convert.c	FUNCTION_28	FOR_1	IF_5	CALL_9
0x40028e8	      0x488345f003	               add qword [rbp - 0x10], 3	      1124	convert.c	FUNCTION_28	FOR_1	IF_5
0x40028ed	        0x488b45f8	                mov rax, qword [rbp - 8]	      1125	convert.c	FUNCTION_28	FOR_1	IF_5
0x40028f1	        0x4883c001	                              add rax, 1	      1125	convert.c	FUNCTION_28	FOR_1	IF_5
0x40028f5	          0x4889c2	                            mov rdx, rax	      1125	convert.c	FUNCTION_28	FOR_1	IF_5
0x40028f8	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1125	convert.c	FUNCTION_28	FOR_1	IF_5
0x40028fc	          0x4829c2	                            sub rdx, rax	      1125	convert.c	FUNCTION_28	FOR_1	IF_5
0x40028ff	          0x4889d0	                            mov rax, rdx	      1125	convert.c	FUNCTION_28	FOR_1	IF_5
0x4002902	        0x482945d8	             sub qword [rbp - 0x28], rax	      1125	convert.c	FUNCTION_28	FOR_1	IF_5
0x4002906	        0x488b45f8	                mov rax, qword [rbp - 8]	      1126	convert.c	FUNCTION_28	FOR_1	IF_5
0x400290a	        0x4883c001	                              add rax, 1	      1126	convert.c	FUNCTION_28	FOR_1	IF_5
0x400290e	        0x488945e0	             mov qword [rbp - 0x20], rax	      1126	convert.c	FUNCTION_28	FOR_1	IF_5
0x4002912	      0xe9aefeffff	                           jmp 0x40027c5	      1126	convert.c	FUNCTION_28	FOR_1	IF_5
0x4002917	              0x90	                                     nop	      1120	convert.c	FUNCTION_28	FOR_1	IF_5	IF_7
0x4002918	      0xe9a8feffff	                           jmp 0x40027c5	      1128	convert.c	FUNCTION_28	FOR_1
0x400291d	              0x90	                                     nop	      1108	convert.c	FUNCTION_28	FOR_1	IF_4
0x400291e	            0xeb01	                           jmp 0x4002921	      1108	convert.c	FUNCTION_28	FOR_1	IF_4
0x4002920	              0x90	                                     nop	      1117	convert.c	FUNCTION_28	FOR_1	IF_5	IF_6
0x4002921	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      1129	convert.c	FUNCTION_28	CALL_10
0x4002925	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	      1129	convert.c	FUNCTION_28	CALL_10
0x4002929	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1129	convert.c	FUNCTION_28	CALL_10
0x400292d	          0x4889ce	                            mov rsi, rcx	      1129	convert.c	FUNCTION_28	CALL_10
0x4002930	          0x4889c7	                            mov rdi, rax	      1129	convert.c	FUNCTION_28	CALL_10
0x4002933	      0xe800000000	                          call 0x4002938	      1129	convert.c	FUNCTION_28	CALL_10
0x4002938	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      1130	convert.c	FUNCTION_28	CALL_11
0x400293c	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1130	convert.c	FUNCTION_28	CALL_11
0x4002940	          0x4801d0	                            add rax, rdx	      1130	convert.c	FUNCTION_28	CALL_11
0x4002943	          0x4889c2	                            mov rdx, rax	      1130	convert.c	FUNCTION_28	CALL_11
0x4002946	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1130	convert.c	FUNCTION_28	CALL_11
0x400294a	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1130	convert.c	FUNCTION_28	CALL_11
0x400294e	          0x4829c2	                            sub rdx, rax	      1130	convert.c	FUNCTION_28	CALL_11
0x4002951	          0x4889d0	                            mov rax, rdx	      1130	convert.c	FUNCTION_28	CALL_11
0x4002954	          0x4889c2	                            mov rdx, rax	      1130	convert.c	FUNCTION_28	CALL_11
0x4002957	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1130	convert.c	FUNCTION_28	CALL_11
0x400295b	          0x4889d6	                            mov rsi, rdx	      1130	convert.c	FUNCTION_28	CALL_11
0x400295e	          0x4889c7	                            mov rdi, rax	      1130	convert.c	FUNCTION_28	CALL_11
0x4002961	      0xe805d8ffff	                  call sym.strbuf_setlen	      1130	convert.c	FUNCTION_28	CALL_11
0x4002966	      0xb801000000	                              mov eax, 1	      1131	convert.c	FUNCTION_28
0x400296b	              0xc9	                                   leave	      1132	convert.c	FUNCTION_28
0x400296c	              0xc3	                                     ret	      1132	convert.c	FUNCTION_28
gather_convert_stats_ascii	ELSE,0:FOR,0:WHILE,0:IF,1:CALL,1:functions,0:SWITCH,1:DO,0	33
0x400056e	              0x55	                                push rbp	       123	convert.c	FUNCTION_4
0x400056f	          0x4889e5	                            mov rbp, rsp	       123	convert.c	FUNCTION_4
0x4000572	        0x4883ec20	                           sub rsp, 0x20	       123	convert.c	FUNCTION_4
0x4000576	        0x48897de8	             mov qword [rbp - 0x18], rdi	       123	convert.c	FUNCTION_4
0x400057a	        0x488975e0	             mov qword [rbp - 0x20], rsi	       123	convert.c	FUNCTION_4
0x400057e	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       124	convert.c	FUNCTION_4	CALL_1
0x4000582	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       124	convert.c	FUNCTION_4	CALL_1
0x4000586	          0x4889d6	                            mov rsi, rdx	       124	convert.c	FUNCTION_4	CALL_1
0x4000589	          0x4889c7	                            mov rdi, rax	       124	convert.c	FUNCTION_4	CALL_1
0x400058c	      0xe841ffffff	           call sym.gather_convert_stats	       124	convert.c	FUNCTION_4	CALL_1
0x4000591	          0x8945fc	                mov dword [rbp - 4], eax	       124	convert.c	FUNCTION_4	CALL_1
0x4000594	          0x8b45fc	                mov eax, dword [rbp - 4]	       126	convert.c	FUNCTION_4	IF_1
0x4000597	          0x83e004	                              and eax, 4	       126	convert.c	FUNCTION_4	IF_1
0x400059a	            0x85c0	                           test eax, eax	       126	convert.c	FUNCTION_4	IF_1
0x400059c	            0x7407	                            je 0x40005a5	       126	convert.c	FUNCTION_4	IF_1
0x400059e	      0xb800000000	                              mov eax, 0	       127	convert.c	FUNCTION_4	IF_1
0x40005a3	            0xeb2c	                           jmp 0x40005d1	       127	convert.c	FUNCTION_4	IF_1
0x40005a5	          0x8b45fc	                mov eax, dword [rbp - 4]	       128	convert.c	FUNCTION_4	SWITCH_1
0x40005a8	          0x83f802	                              cmp eax, 2	       128	convert.c	FUNCTION_4	SWITCH_1
0x40005ab	            0x7411	                            je 0x40005be	       128	convert.c	FUNCTION_4	SWITCH_1
0x40005ad	          0x83f803	                              cmp eax, 3	       128	convert.c	FUNCTION_4	SWITCH_1
0x40005b0	            0x7413	                            je 0x40005c5	       128	convert.c	FUNCTION_4	SWITCH_1
0x40005b2	          0x83f801	                              cmp eax, 1	       128	convert.c	FUNCTION_4	SWITCH_1
0x40005b5	            0x7515	                           jne 0x40005cc	       128	convert.c	FUNCTION_4	SWITCH_1
0x40005b7	      0xb800000000	                              mov eax, 0	       130	convert.c	FUNCTION_4	SWITCH_1
0x40005bc	            0xeb13	                           jmp 0x40005d1	       130	convert.c	FUNCTION_4	SWITCH_1
0x40005be	      0xb800000000	                              mov eax, 0	       132	convert.c	FUNCTION_4	SWITCH_1
0x40005c3	            0xeb0c	                           jmp 0x40005d1	       132	convert.c	FUNCTION_4	SWITCH_1
0x40005c5	      0xb800000000	                              mov eax, 0	       134	convert.c	FUNCTION_4	SWITCH_1
0x40005ca	            0xeb05	                           jmp 0x40005d1	       134	convert.c	FUNCTION_4	SWITCH_1
0x40005cc	      0xb800000000	                              mov eax, 0	       136	convert.c	FUNCTION_4	SWITCH_1
0x40005d1	              0xc9	                                   leave	       138	convert.c	FUNCTION_4
0x40005d2	              0xc3	                                     ret	       138	convert.c	FUNCTION_4
git_path_check_ident	ELSE,0:FOR,0:WHILE,0:IF,0:CALL,1:functions,0:SWITCH,0:DO,0	11
0x4002e5e	              0x55	                                push rbp	      1279	convert.c	FUNCTION_34
0x4002e5f	          0x4889e5	                            mov rbp, rsp	      1279	convert.c	FUNCTION_34
0x4002e62	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1279	convert.c	FUNCTION_34
0x4002e66	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1280	convert.c	FUNCTION_34
0x4002e6a	        0x488b4008	                mov rax, qword [rax + 8]	      1280	convert.c	FUNCTION_34
0x4002e6e	        0x488945f8	                mov qword [rbp - 8], rax	      1280	convert.c	FUNCTION_34
0x4002e72	    0x48817df80000	                  cmp qword [rbp - 8], 0	      1282	convert.c	FUNCTION_34	CALL_1
0x4002e7a	           0xf94c0	                                 sete al	      1282	convert.c	FUNCTION_34	CALL_1
0x4002e7d	           0xfb6c0	                           movzx eax, al	      1282	convert.c	FUNCTION_34	CALL_1
0x4002e80	              0x5d	                                 pop rbp	      1283	convert.c	FUNCTION_34
0x4002e81	              0xc3	                                     ret	      1283	convert.c	FUNCTION_34
ident_filter	ELSE,0:FOR,0:WHILE,0:IF,0:CALL,4:functions,0:SWITCH,0:DO,0	31
0x4004315	              0x55	                                push rbp	      1910	convert.c	FUNCTION_57
0x4004316	          0x4889e5	                            mov rbp, rsp	      1910	convert.c	FUNCTION_57
0x4004319	        0x4883ec20	                           sub rsp, 0x20	      1910	convert.c	FUNCTION_57
0x400431d	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1910	convert.c	FUNCTION_57
0x4004321	      0xbf58000000	                           mov edi, 0x58	      1911	convert.c	FUNCTION_57	CALL_1
0x4004326	      0xe800000000	                          call 0x400432b	      1911	convert.c	FUNCTION_57	CALL_1
0x400432b	        0x488945f8	                mov qword [rbp - 8], rax	      1911	convert.c	FUNCTION_57	CALL_1
0x400432f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1913	convert.c	FUNCTION_57	CALL_2
0x4004333	          0x4889c7	                            mov rdi, rax	      1913	convert.c	FUNCTION_57	CALL_2
0x4004336	      0xe800000000	                          call 0x400433b	      1913	convert.c	FUNCTION_57	CALL_2
0x400433b	          0x4889c2	                            mov rdx, rax	      1913	convert.c	FUNCTION_57	CALL_2
0x400433e	        0x488b45f8	                mov rax, qword [rbp - 8]	      1913	convert.c	FUNCTION_57	CALL_2
0x4004342	        0x4883c024	                           add rax, 0x24	      1913	convert.c	FUNCTION_57	CALL_2
0x4004346	          0x4889d1	                            mov rcx, rdx	      1913	convert.c	FUNCTION_57	CALL_2
0x4004349	      0xba00000000	                              mov edx, 0	      1913	convert.c	FUNCTION_57	CALL_2
0x400434e	      0xbe2d000000	                           mov esi, 0x2d	      1913	convert.c	FUNCTION_57	CALL_2
0x4004353	          0x4889c7	                            mov rdi, rax	      1913	convert.c	FUNCTION_57	CALL_2
0x4004356	      0xb800000000	                              mov eax, 0	      1913	convert.c	FUNCTION_57	CALL_2
0x400435b	      0xe800000000	                          call 0x4004360	      1913	convert.c	FUNCTION_57	CALL_2
0x4004360	        0x488b45f8	                mov rax, qword [rbp - 8]	      1915	convert.c	FUNCTION_57	CALL_4
0x4004364	        0x4883c008	                              add rax, 8	      1915	convert.c	FUNCTION_57	CALL_4
0x4004368	      0xbe00000000	                              mov esi, 0	      1915	convert.c	FUNCTION_57	CALL_4
0x400436d	          0x4889c7	                            mov rdi, rax	      1915	convert.c	FUNCTION_57	CALL_4
0x4004370	      0xe800000000	                          call 0x4004375	      1915	convert.c	FUNCTION_57	CALL_4
0x4004375	        0x488b45f8	                mov rax, qword [rbp - 8]	      1916	convert.c	FUNCTION_57
0x4004379	    0x48c700000000	                      mov qword [rax], 0	      1916	convert.c	FUNCTION_57
0x4004380	        0x488b45f8	                mov rax, qword [rbp - 8]	      1917	convert.c	FUNCTION_57
0x4004384	    0xc74020000000	               mov dword [rax + 0x20], 0	      1917	convert.c	FUNCTION_57
0x400438b	        0x488b45f8	                mov rax, qword [rbp - 8]	      1918	convert.c	FUNCTION_57
0x400438f	              0xc9	                                   leave	      1919	convert.c	FUNCTION_57
0x4004390	              0xc3	                                     ret	      1919	convert.c	FUNCTION_57
free_stream_filter	ELSE,0:FOR,0:WHILE,0:IF,0:CALL,1:functions,0:SWITCH,0:DO,0	13
0x400449e	              0x55	                                push rbp	      1956	convert.c	FUNCTION_59
0x400449f	          0x4889e5	                            mov rbp, rsp	      1956	convert.c	FUNCTION_59
0x40044a2	        0x4883ec10	                           sub rsp, 0x10	      1956	convert.c	FUNCTION_59
0x40044a6	        0x48897df8	                mov qword [rbp - 8], rdi	      1956	convert.c	FUNCTION_59
0x40044aa	        0x488b45f8	                mov rax, qword [rbp - 8]	      1957	convert.c	FUNCTION_59	CALL_1
0x40044ae	          0x488b00	                    mov rax, qword [rax]	      1957	convert.c	FUNCTION_59	CALL_1
0x40044b1	        0x488b4008	                mov rax, qword [rax + 8]	      1957	convert.c	FUNCTION_59	CALL_1
0x40044b5	        0x488b55f8	                mov rdx, qword [rbp - 8]	      1957	convert.c	FUNCTION_59	CALL_1
0x40044b9	          0x4889d7	                            mov rdi, rdx	      1957	convert.c	FUNCTION_59	CALL_1
0x40044bc	            0xffd0	                                call rax	      1957	convert.c	FUNCTION_59	CALL_1
0x40044be	              0x90	                                     nop	      1958	convert.c	FUNCTION_59
0x40044bf	              0xc9	                                   leave	      1958	convert.c	FUNCTION_59
0x40044c0	              0xc3	                                     ret	      1958	convert.c	FUNCTION_59
git_path_check_eol	ELSE,2:FOR,0:WHILE,0:IF,3:CALL,3:functions,0:SWITCH,0:DO,0	28
0x4002d7f	              0x55	                                push rbp	      1253	convert.c	FUNCTION_32
0x4002d80	          0x4889e5	                            mov rbp, rsp	      1253	convert.c	FUNCTION_32
0x4002d83	        0x4883ec20	                           sub rsp, 0x20	      1253	convert.c	FUNCTION_32
0x4002d87	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1253	convert.c	FUNCTION_32
0x4002d8b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1254	convert.c	FUNCTION_32
0x4002d8f	        0x488b4008	                mov rax, qword [rax + 8]	      1254	convert.c	FUNCTION_32
0x4002d93	        0x488945f8	                mov qword [rbp - 8], rax	      1254	convert.c	FUNCTION_32
0x4002d97	      0x48837df800	                  cmp qword [rbp - 8], 0	      1256	convert.c	FUNCTION_32	IF_1	CALL_1
0x4002d9c	            0x7438	                            je 0x4002dd6	      1256	convert.c	FUNCTION_32	IF_1	CALL_1
0x4002d9e	        0x488b45f8	                mov rax, qword [rbp - 8]	      1258	convert.c	FUNCTION_32	ELSE_1	IF_2	CALL_2
0x4002da2	      0xbe00000000	                              mov esi, 0	      1258	convert.c	FUNCTION_32	ELSE_1	IF_2	CALL_2
0x4002da7	          0x4889c7	                            mov rdi, rax	      1258	convert.c	FUNCTION_32	ELSE_1	IF_2	CALL_2
0x4002daa	      0xe800000000	                          call 0x4002daf	      1258	convert.c	FUNCTION_32	ELSE_1	IF_2	CALL_2
0x4002daf	            0x85c0	                           test eax, eax	      1258	convert.c	FUNCTION_32	ELSE_1	IF_2	CALL_2
0x4002db1	            0x7507	                           jne 0x4002dba	      1258	convert.c	FUNCTION_32	ELSE_1	IF_2	CALL_2
0x4002db3	      0xb802000000	                              mov eax, 2	      1259	convert.c	FUNCTION_32	ELSE_1	IF_2
0x4002db8	            0xeb21	                           jmp 0x4002ddb	      1259	convert.c	FUNCTION_32	ELSE_1	IF_2
0x4002dba	        0x488b45f8	                mov rax, qword [rbp - 8]	      1260	convert.c	FUNCTION_32	ELSE_2	IF_3	CALL_3
0x4002dbe	      0xbe00000000	                              mov esi, 0	      1260	convert.c	FUNCTION_32	ELSE_2	IF_3	CALL_3
0x4002dc3	          0x4889c7	                            mov rdi, rax	      1260	convert.c	FUNCTION_32	ELSE_2	IF_3	CALL_3
0x4002dc6	      0xe800000000	                          call 0x4002dcb	      1260	convert.c	FUNCTION_32	ELSE_2	IF_3	CALL_3
0x4002dcb	            0x85c0	                           test eax, eax	      1260	convert.c	FUNCTION_32	ELSE_2	IF_3	CALL_3
0x4002dcd	            0x7507	                           jne 0x4002dd6	      1260	convert.c	FUNCTION_32	ELSE_2	IF_3	CALL_3
0x4002dcf	      0xb801000000	                              mov eax, 1	      1261	convert.c	FUNCTION_32	ELSE_2	IF_3
0x4002dd4	            0xeb05	                           jmp 0x4002ddb	      1261	convert.c	FUNCTION_32	ELSE_2	IF_3
0x4002dd6	      0xb800000000	                              mov eax, 0	      1262	convert.c	FUNCTION_32
0x4002ddb	              0xc9	                                   leave	      1263	convert.c	FUNCTION_32
0x4002ddc	              0xc3	                                     ret	      1263	convert.c	FUNCTION_32
git_path_check_convert	ELSE,0:FOR,1:WHILE,0:IF,2:CALL,4:functions,0:SWITCH,0:DO,0	36
0x4002ddd	              0x55	                                push rbp	      1266	convert.c	FUNCTION_33
0x4002dde	          0x4889e5	                            mov rbp, rsp	      1266	convert.c	FUNCTION_33
0x4002de1	        0x4883ec20	                           sub rsp, 0x20	      1266	convert.c	FUNCTION_33
0x4002de5	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1266	convert.c	FUNCTION_33
0x4002de9	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1267	convert.c	FUNCTION_33
0x4002ded	        0x488b4008	                mov rax, qword [rax + 8]	      1267	convert.c	FUNCTION_33
0x4002df1	        0x488945f8	                mov qword [rbp - 8], rax	      1267	convert.c	FUNCTION_33
0x4002df5	    0x48817df80000	                  cmp qword [rbp - 8], 0	      1270	convert.c	FUNCTION_33	IF_1	CALL_3
0x4002dfd	            0x7411	                            je 0x4002e10	      1270	convert.c	FUNCTION_33	IF_1	CALL_3
0x4002dff	    0x48817df80000	                  cmp qword [rbp - 8], 0	      1270	convert.c	FUNCTION_33	IF_1	CALL_3
0x4002e07	            0x7407	                            je 0x4002e10	      1270	convert.c	FUNCTION_33	IF_1	CALL_3
0x4002e09	      0x48837df800	                  cmp qword [rbp - 8], 0	      1270	convert.c	FUNCTION_33	IF_1	CALL_3
0x4002e0e	            0x7507	                           jne 0x4002e17	      1270	convert.c	FUNCTION_33	IF_1	CALL_3
0x4002e10	      0xb800000000	                              mov eax, 0	      1271	convert.c	FUNCTION_33	IF_1
0x4002e15	            0xeb45	                           jmp 0x4002e5c	      1271	convert.c	FUNCTION_33	IF_1
0x4002e17	    0x488b05000000	            mov rax, qword [0x04002e1e] 	      1272	convert.c	FUNCTION_33	FOR_1
0x4002e1e	        0x488945f0	             mov qword [rbp - 0x10], rax	      1272	convert.c	FUNCTION_33	FOR_1
0x4002e22	            0xeb2c	                           jmp 0x4002e50	      1272	convert.c	FUNCTION_33	FOR_1
0x4002e24	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1273	convert.c	FUNCTION_33	FOR_1	IF_2	CALL_4
0x4002e28	          0x488b10	                    mov rdx, qword [rax]	      1273	convert.c	FUNCTION_33	FOR_1	IF_2	CALL_4
0x4002e2b	        0x488b45f8	                mov rax, qword [rbp - 8]	      1273	convert.c	FUNCTION_33	FOR_1	IF_2	CALL_4
0x4002e2f	          0x4889d6	                            mov rsi, rdx	      1273	convert.c	FUNCTION_33	FOR_1	IF_2	CALL_4
0x4002e32	          0x4889c7	                            mov rdi, rax	      1273	convert.c	FUNCTION_33	FOR_1	IF_2	CALL_4
0x4002e35	      0xe800000000	                          call 0x4002e3a	      1273	convert.c	FUNCTION_33	FOR_1	IF_2	CALL_4
0x4002e3a	            0x85c0	                           test eax, eax	      1273	convert.c	FUNCTION_33	FOR_1	IF_2	CALL_4
0x4002e3c	            0x7506	                           jne 0x4002e44	      1273	convert.c	FUNCTION_33	FOR_1	IF_2	CALL_4
0x4002e3e	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1274	convert.c	FUNCTION_33	FOR_1	IF_2
0x4002e42	            0xeb18	                           jmp 0x4002e5c	      1274	convert.c	FUNCTION_33	FOR_1	IF_2
0x4002e44	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1272	convert.c	FUNCTION_33	FOR_1
0x4002e48	        0x488b4008	                mov rax, qword [rax + 8]	      1272	convert.c	FUNCTION_33	FOR_1
0x4002e4c	        0x488945f0	             mov qword [rbp - 0x10], rax	      1272	convert.c	FUNCTION_33	FOR_1
0x4002e50	      0x48837df000	               cmp qword [rbp - 0x10], 0	      1272	convert.c	FUNCTION_33	FOR_1
0x4002e55	            0x75cd	                           jne 0x4002e24	      1272	convert.c	FUNCTION_33	FOR_1
0x4002e57	      0xb800000000	                              mov eax, 0	      1275	convert.c	FUNCTION_33
0x4002e5c	              0xc9	                                   leave	      1276	convert.c	FUNCTION_33
0x4002e5d	              0xc3	                                     ret	      1276	convert.c	FUNCTION_33
cascade_filter	ELSE,0:FOR,0:WHILE,0:IF,2:CALL,3:functions,0:SWITCH,0:DO,0	43
0x4003e41	              0x55	                                push rbp	      1759	convert.c	FUNCTION_52
0x4003e42	          0x4889e5	                            mov rbp, rsp	      1759	convert.c	FUNCTION_52
0x4003e45	        0x4883ec20	                           sub rsp, 0x20	      1759	convert.c	FUNCTION_52
0x4003e49	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1759	convert.c	FUNCTION_52
0x4003e4d	        0x488975e0	             mov qword [rbp - 0x20], rsi	      1759	convert.c	FUNCTION_52
0x4003e51	      0x48837de800	               cmp qword [rbp - 0x18], 0	      1762	convert.c	FUNCTION_52	IF_1	CALL_1
0x4003e56	            0x7410	                            je 0x4003e68	      1762	convert.c	FUNCTION_52	IF_1	CALL_1
0x4003e58	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1762	convert.c	FUNCTION_52	IF_1	CALL_1
0x4003e5c	          0x4889c7	                            mov rdi, rax	      1762	convert.c	FUNCTION_52	IF_1	CALL_1
0x4003e5f	      0xe800000000	                          call 0x4003e64	      1762	convert.c	FUNCTION_52	IF_1	CALL_1
0x4003e64	            0x85c0	                           test eax, eax	      1762	convert.c	FUNCTION_52	IF_1	CALL_1
0x4003e66	            0x7406	                            je 0x4003e6e	      1762	convert.c	FUNCTION_52	IF_1	CALL_1
0x4003e68	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1763	convert.c	FUNCTION_52	IF_1
0x4003e6c	            0xeb74	                           jmp 0x4003ee2	      1763	convert.c	FUNCTION_52	IF_1
0x4003e6e	      0x48837de000	               cmp qword [rbp - 0x20], 0	      1764	convert.c	FUNCTION_52	IF_2	CALL_2
0x4003e73	            0x7410	                            je 0x4003e85	      1764	convert.c	FUNCTION_52	IF_2	CALL_2
0x4003e75	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1764	convert.c	FUNCTION_52	IF_2	CALL_2
0x4003e79	          0x4889c7	                            mov rdi, rax	      1764	convert.c	FUNCTION_52	IF_2	CALL_2
0x4003e7c	      0xe800000000	                          call 0x4003e81	      1764	convert.c	FUNCTION_52	IF_2	CALL_2
0x4003e81	            0x85c0	                           test eax, eax	      1764	convert.c	FUNCTION_52	IF_2	CALL_2
0x4003e83	            0x7406	                            je 0x4003e8b	      1764	convert.c	FUNCTION_52	IF_2	CALL_2
0x4003e85	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1765	convert.c	FUNCTION_52	IF_2
0x4003e89	            0xeb57	                           jmp 0x4003ee2	      1765	convert.c	FUNCTION_52	IF_2
0x4003e8b	      0xbf20040000	                          mov edi, 0x420	      1767	convert.c	FUNCTION_52	CALL_3
0x4003e90	      0xe800000000	                          call 0x4003e95	      1767	convert.c	FUNCTION_52	CALL_3
0x4003e95	        0x488945f8	                mov qword [rbp - 8], rax	      1767	convert.c	FUNCTION_52	CALL_3
0x4003e99	        0x488b45f8	                mov rax, qword [rbp - 8]	      1768	convert.c	FUNCTION_52
0x4003e9d	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      1768	convert.c	FUNCTION_52
0x4003ea1	        0x48895008	                mov qword [rax + 8], rdx	      1768	convert.c	FUNCTION_52
0x4003ea5	        0x488b45f8	                mov rax, qword [rbp - 8]	      1769	convert.c	FUNCTION_52
0x4003ea9	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      1769	convert.c	FUNCTION_52
0x4003ead	        0x48895010	             mov qword [rax + 0x10], rdx	      1769	convert.c	FUNCTION_52
0x4003eb1	        0x488b45f8	                mov rax, qword [rbp - 8]	      1770	convert.c	FUNCTION_52
0x4003eb5	    0xc7801c040000	              mov dword [rax + 0x41c], 0	      1770	convert.c	FUNCTION_52
0x4003ebf	        0x488b45f8	                mov rax, qword [rbp - 8]	      1770	convert.c	FUNCTION_52
0x4003ec3	    0x8b901c040000	           mov edx, dword [rax + 0x41c] 	      1770	convert.c	FUNCTION_52
0x4003ec9	        0x488b45f8	                mov rax, qword [rbp - 8]	      1770	convert.c	FUNCTION_52
0x4003ecd	    0x899018040000	            mov dword [rax + 0x418], edx	      1770	convert.c	FUNCTION_52
0x4003ed3	        0x488b45f8	                mov rax, qword [rbp - 8]	      1771	convert.c	FUNCTION_52
0x4003ed7	    0x48c700000000	                      mov qword [rax], 0	      1771	convert.c	FUNCTION_52
0x4003ede	        0x488b45f8	                mov rax, qword [rbp - 8]	      1772	convert.c	FUNCTION_52
0x4003ee2	              0xc9	                                   leave	      1773	convert.c	FUNCTION_52
0x4003ee3	              0xc3	                                     ret	      1773	convert.c	FUNCTION_52
stream_filter	ELSE,0:FOR,0:WHILE,0:IF,0:CALL,1:functions,0:SWITCH,0:DO,0	19
0x40044c1	              0x55	                                push rbp	      1963	convert.c	FUNCTION_60
0x40044c2	          0x4889e5	                            mov rbp, rsp	      1963	convert.c	FUNCTION_60
0x40044c5	        0x4883ec30	                           sub rsp, 0x30	      1963	convert.c	FUNCTION_60
0x40044c9	        0x48897df8	                mov qword [rbp - 8], rdi	      1963	convert.c	FUNCTION_60
0x40044cd	        0x488975f0	             mov qword [rbp - 0x10], rsi	      1963	convert.c	FUNCTION_60
0x40044d1	        0x488955e8	             mov qword [rbp - 0x18], rdx	      1963	convert.c	FUNCTION_60
0x40044d5	        0x48894de0	             mov qword [rbp - 0x20], rcx	      1963	convert.c	FUNCTION_60
0x40044d9	        0x4c8945d8	              mov qword [rbp - 0x28], r8	      1963	convert.c	FUNCTION_60
0x40044dd	        0x488b45f8	                mov rax, qword [rbp - 8]	      1964	convert.c	FUNCTION_60	CALL_1
0x40044e1	          0x488b00	                    mov rax, qword [rax]	      1964	convert.c	FUNCTION_60	CALL_1
0x40044e4	          0x488b00	                    mov rax, qword [rax]	      1964	convert.c	FUNCTION_60	CALL_1
0x40044e7	        0x4c8b45d8	              mov r8, qword [rbp - 0x28]	      1964	convert.c	FUNCTION_60	CALL_1
0x40044eb	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	      1964	convert.c	FUNCTION_60	CALL_1
0x40044ef	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      1964	convert.c	FUNCTION_60	CALL_1
0x40044f3	        0x488b75f0	             mov rsi, qword [rbp - 0x10]	      1964	convert.c	FUNCTION_60	CALL_1
0x40044f7	        0x488b7df8	                mov rdi, qword [rbp - 8]	      1964	convert.c	FUNCTION_60	CALL_1
0x40044fb	            0xffd0	                                call rax	      1964	convert.c	FUNCTION_60	CALL_1
0x40044fd	              0xc9	                                   leave	      1965	convert.c	FUNCTION_60
0x40044fe	              0xc3	                                     ret	      1965	convert.c	FUNCTION_60
is_foreign_ident	ELSE,0:FOR,1:WHILE,0:IF,2:CALL,1:functions,0:SWITCH,0:DO,0	48
0x4003ee4	              0x55	                                push rbp	      1788	convert.c	FUNCTION_53
0x4003ee5	          0x4889e5	                            mov rbp, rsp	      1788	convert.c	FUNCTION_53
0x4003ee8	        0x4883ec18	                           sub rsp, 0x18	      1788	convert.c	FUNCTION_53
0x4003eec	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1788	convert.c	FUNCTION_53
0x4003ef0	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1791	convert.c	FUNCTION_53	IF_1	CALL_1
0x4003ef4	        0x488d55e8	                   lea rdx, [rbp - 0x18]	      1791	convert.c	FUNCTION_53	IF_1	CALL_1
0x4003ef8	      0xbe00000000	                              mov esi, 0	      1791	convert.c	FUNCTION_53	IF_1	CALL_1
0x4003efd	          0x4889c7	                            mov rdi, rax	      1791	convert.c	FUNCTION_53	IF_1	CALL_1
0x4003f00	      0xe846c1ffff	                    call sym.skip_prefix	      1791	convert.c	FUNCTION_53	IF_1	CALL_1
0x4003f05	            0x85c0	                           test eax, eax	      1791	convert.c	FUNCTION_53	IF_1	CALL_1
0x4003f07	            0x7507	                           jne 0x4003f10	      1791	convert.c	FUNCTION_53	IF_1	CALL_1
0x4003f09	      0xb800000000	                              mov eax, 0	      1792	convert.c	FUNCTION_53	IF_1
0x4003f0e	            0xeb69	                           jmp 0x4003f79	      1792	convert.c	FUNCTION_53	IF_1
0x4003f10	    0xc745fc000000	                  mov dword [rbp - 4], 0	      1793	convert.c	FUNCTION_53	FOR_1
0x4003f17	            0xeb48	                           jmp 0x4003f61	      1793	convert.c	FUNCTION_53	FOR_1
0x4003f19	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      1794	convert.c	FUNCTION_53	FOR_1	IF_2
0x4003f1d	          0x8b45fc	                mov eax, dword [rbp - 4]	      1794	convert.c	FUNCTION_53	FOR_1	IF_2
0x4003f20	            0x4898	                                    cdqe	      1794	convert.c	FUNCTION_53	FOR_1	IF_2
0x4003f22	          0x4801d0	                            add rax, rdx	      1794	convert.c	FUNCTION_53	FOR_1	IF_2
0x4003f25	           0xfb600	                   movzx eax, byte [rax]	      1794	convert.c	FUNCTION_53	FOR_1	IF_2
0x4003f28	           0xfb6c0	                           movzx eax, al	      1794	convert.c	FUNCTION_53	FOR_1	IF_2
0x4003f2b	            0x4898	                                    cdqe	      1794	convert.c	FUNCTION_53	FOR_1	IF_2
0x4003f2d	     0xfb680000000	                   movzx eax, byte [rax]	      1794	convert.c	FUNCTION_53	FOR_1	IF_2
0x4003f34	           0xfb6c0	                           movzx eax, al	      1794	convert.c	FUNCTION_53	FOR_1	IF_2
0x4003f37	          0x83e001	                              and eax, 1	      1794	convert.c	FUNCTION_53	FOR_1	IF_2
0x4003f3a	            0x85c0	                           test eax, eax	      1794	convert.c	FUNCTION_53	FOR_1	IF_2
0x4003f3c	            0x741f	                            je 0x4003f5d	      1794	convert.c	FUNCTION_53	FOR_1	IF_2
0x4003f3e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1794	convert.c	FUNCTION_53	FOR_1	IF_2
0x4003f42	          0x8b55fc	                mov edx, dword [rbp - 4]	      1794	convert.c	FUNCTION_53	FOR_1	IF_2
0x4003f45	          0x4863d2	                         movsxd rdx, edx	      1794	convert.c	FUNCTION_53	FOR_1	IF_2
0x4003f48	        0x4883c201	                              add rdx, 1	      1794	convert.c	FUNCTION_53	FOR_1	IF_2
0x4003f4c	          0x4801d0	                            add rax, rdx	      1794	convert.c	FUNCTION_53	FOR_1	IF_2
0x4003f4f	           0xfb600	                   movzx eax, byte [rax]	      1794	convert.c	FUNCTION_53	FOR_1	IF_2
0x4003f52	            0x3c24	                            cmp al, 0x24	      1794	convert.c	FUNCTION_53	FOR_1	IF_2
0x4003f54	            0x7407	                            je 0x4003f5d	      1794	convert.c	FUNCTION_53	FOR_1	IF_2
0x4003f56	      0xb801000000	                              mov eax, 1	      1795	convert.c	FUNCTION_53	FOR_1	IF_2
0x4003f5b	            0xeb1c	                           jmp 0x4003f79	      1795	convert.c	FUNCTION_53	FOR_1	IF_2
0x4003f5d	        0x8345fc01	                  add dword [rbp - 4], 1	      1793	convert.c	FUNCTION_53	FOR_1
0x4003f61	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      1793	convert.c	FUNCTION_53	FOR_1
0x4003f65	          0x8b45fc	                mov eax, dword [rbp - 4]	      1793	convert.c	FUNCTION_53	FOR_1
0x4003f68	            0x4898	                                    cdqe	      1793	convert.c	FUNCTION_53	FOR_1
0x4003f6a	          0x4801d0	                            add rax, rdx	      1793	convert.c	FUNCTION_53	FOR_1
0x4003f6d	           0xfb600	                   movzx eax, byte [rax]	      1793	convert.c	FUNCTION_53	FOR_1
0x4003f70	            0x84c0	                             test al, al	      1793	convert.c	FUNCTION_53	FOR_1
0x4003f72	            0x75a5	                           jne 0x4003f19	      1793	convert.c	FUNCTION_53	FOR_1
0x4003f74	      0xb800000000	                              mov eax, 0	      1797	convert.c	FUNCTION_53
0x4003f79	              0xc9	                                   leave	      1798	convert.c	FUNCTION_53
0x4003f7a	              0xc3	                                     ret	      1798	convert.c	FUNCTION_53
text_eol_is_crlf	ELSE,1:FOR,0:WHILE,0:IF,4:CALL,0:functions,0:SWITCH,0:DO,0	20
0x40006df	              0x55	                                push rbp	       162	convert.c	FUNCTION_7
0x40006e0	          0x4889e5	                            mov rbp, rsp	       162	convert.c	FUNCTION_7
0x40006e3	    0x8b0500000000	            mov eax, dword [0x040006e9] 	       163	convert.c	FUNCTION_7	IF_1
0x40006e9	          0x83f801	                              cmp eax, 1	       163	convert.c	FUNCTION_7	IF_1
0x40006ec	            0x7507	                           jne 0x40006f5	       163	convert.c	FUNCTION_7	IF_1
0x40006ee	      0xb801000000	                              mov eax, 1	       164	convert.c	FUNCTION_7	IF_1
0x40006f3	            0xeb29	                           jmp 0x400071e	       164	convert.c	FUNCTION_7	IF_1
0x40006f5	    0x8b0500000000	            mov eax, dword [0x040006fb] 	       165	convert.c	FUNCTION_7	ELSE_1	IF_2
0x40006fb	          0x83f8ff	             cmp eax, 0xffffffffffffffff	       165	convert.c	FUNCTION_7	ELSE_1	IF_2
0x40006fe	            0x7507	                           jne 0x4000707	       165	convert.c	FUNCTION_7	ELSE_1	IF_2
0x4000700	      0xb800000000	                              mov eax, 0	       166	convert.c	FUNCTION_7	ELSE_1	IF_2
0x4000705	            0xeb17	                           jmp 0x400071e	       166	convert.c	FUNCTION_7	ELSE_1	IF_2
0x4000707	    0x8b0500000000	            mov eax, dword [0x0400070d] 	       167	convert.c	FUNCTION_7	IF_3
0x400070d	          0x83f801	                              cmp eax, 1	       167	convert.c	FUNCTION_7	IF_3
0x4000710	            0x7507	                           jne 0x4000719	       167	convert.c	FUNCTION_7	IF_3
0x4000712	      0xb801000000	                              mov eax, 1	       168	convert.c	FUNCTION_7	IF_3
0x4000717	            0xeb05	                           jmp 0x400071e	       168	convert.c	FUNCTION_7	IF_3
0x4000719	      0xb800000000	                              mov eax, 0	       171	convert.c	FUNCTION_7
0x400071e	              0x5d	                                 pop rbp	       172	convert.c	FUNCTION_7
0x400071f	              0xc3	                                     ret	       172	convert.c	FUNCTION_7
null_free_fn	ELSE,0:FOR,0:WHILE,0:IF,0:CALL,0:functions,0:SWITCH,0:DO,0	6
0x40038b3	              0x55	                                push rbp	      1543	convert.c	FUNCTION_45
0x40038b4	          0x4889e5	                            mov rbp, rsp	      1543	convert.c	FUNCTION_45
0x40038b7	        0x48897df8	                mov qword [rbp - 8], rdi	      1543	convert.c	FUNCTION_45
0x40038bb	              0x90	                                     nop	      1545	convert.c	FUNCTION_45
0x40038bc	              0x5d	                                 pop rbp	      1545	convert.c	FUNCTION_45
0x40038bd	              0xc3	                                     ret	      1545	convert.c	FUNCTION_45
crlf_to_git	ELSE,1:FOR,0:WHILE,0:IF,14:CALL,9:functions,0:SWITCH,0:DO,2	195
0x4001266	              0x55	                                push rbp	       508	convert.c	FUNCTION_17
0x4001267	          0x4889e5	                            mov rbp, rsp	       508	convert.c	FUNCTION_17
0x400126a	        0x4883c480	             add rsp, 0xffffffffffffff80	       508	convert.c	FUNCTION_17
0x400126e	        0x48897da8	             mov qword [rbp - 0x58], rdi	       508	convert.c	FUNCTION_17
0x4001272	        0x488975a0	             mov qword [rbp - 0x60], rsi	       508	convert.c	FUNCTION_17
0x4001276	        0x48895598	             mov qword [rbp - 0x68], rdx	       508	convert.c	FUNCTION_17
0x400127a	        0x48894d90	             mov qword [rbp - 0x70], rcx	       508	convert.c	FUNCTION_17
0x400127e	        0x4c894588	              mov qword [rbp - 0x78], r8	       508	convert.c	FUNCTION_17
0x4001282	        0x44894d84	             mov dword [rbp - 0x7c], r9d	       508	convert.c	FUNCTION_17
0x4001286	    0x64488b042528	                mov rax, qword fs:[0x28]	       508	convert.c	FUNCTION_17
0x400128f	        0x488945f8	                mov qword [rbp - 8], rax	       508	convert.c	FUNCTION_17
0x4001293	            0x31c0	                            xor eax, eax	       508	convert.c	FUNCTION_17
0x4001295	        0x837d8401	               cmp dword [rbp - 0x7c], 1	       513	convert.c	FUNCTION_17	IF_1
0x4001299	            0x740e	                            je 0x40012a9	       513	convert.c	FUNCTION_17	IF_1
0x400129b	      0x48837d9800	               cmp qword [rbp - 0x68], 0	       513	convert.c	FUNCTION_17	IF_1
0x40012a0	            0x7411	                            je 0x40012b3	       513	convert.c	FUNCTION_17	IF_1
0x40012a2	      0x48837d9000	               cmp qword [rbp - 0x70], 0	       514	convert.c	FUNCTION_17	IF_1
0x40012a7	            0x750a	                           jne 0x40012b3	       514	convert.c	FUNCTION_17	IF_1
0x40012a9	      0xb800000000	                              mov eax, 0	       515	convert.c	FUNCTION_17	IF_1
0x40012ae	      0xe950020000	                           jmp 0x4001503	       515	convert.c	FUNCTION_17	IF_1
0x40012b3	      0x48837d8800	               cmp qword [rbp - 0x78], 0	       521	convert.c	FUNCTION_17	IF_2
0x40012b8	            0x7511	                           jne 0x40012cb	       521	convert.c	FUNCTION_17	IF_2
0x40012ba	      0x48837d9800	               cmp qword [rbp - 0x68], 0	       521	convert.c	FUNCTION_17	IF_2
0x40012bf	            0x750a	                           jne 0x40012cb	       521	convert.c	FUNCTION_17	IF_2
0x40012c1	      0xb801000000	                              mov eax, 1	       522	convert.c	FUNCTION_17	IF_2
0x40012c6	      0xe938020000	                           jmp 0x4001503	       522	convert.c	FUNCTION_17	IF_2
0x40012cb	        0x488d55c0	                   lea rdx, [rbp - 0x40]	       524	convert.c	FUNCTION_17	CALL_1
0x40012cf	        0x488b4d90	             mov rcx, qword [rbp - 0x70]	       524	convert.c	FUNCTION_17	CALL_1
0x40012d3	        0x488b4598	             mov rax, qword [rbp - 0x68]	       524	convert.c	FUNCTION_17	CALL_1
0x40012d7	          0x4889ce	                            mov rsi, rcx	       524	convert.c	FUNCTION_17	CALL_1
0x40012da	          0x4889c7	                            mov rdi, rax	       524	convert.c	FUNCTION_17	CALL_1
0x40012dd	      0xe822f0ffff	                   call sym.gather_stats	       524	convert.c	FUNCTION_17	CALL_1
0x40012e2	          0x8b45cc	             mov eax, dword [rbp - 0x34]	       526	convert.c	FUNCTION_17
0x40012e5	            0x85c0	                           test eax, eax	       526	convert.c	FUNCTION_17
0x40012e7	           0xf95c0	                                setne al	       526	convert.c	FUNCTION_17
0x40012ea	           0xfb6c0	                           movzx eax, al	       526	convert.c	FUNCTION_17
0x40012ed	          0x8945b4	             mov dword [rbp - 0x4c], eax	       526	convert.c	FUNCTION_17
0x40012f0	        0x837d8405	               cmp dword [rbp - 0x7c], 5	       528	convert.c	FUNCTION_17	IF_3
0x40012f4	            0x740c	                            je 0x4001302	       528	convert.c	FUNCTION_17	IF_3
0x40012f6	        0x837d8406	               cmp dword [rbp - 0x7c], 6	       528	convert.c	FUNCTION_17	IF_3
0x40012fa	            0x7406	                            je 0x4001302	       528	convert.c	FUNCTION_17	IF_3
0x40012fc	        0x837d8407	               cmp dword [rbp - 0x7c], 7	       528	convert.c	FUNCTION_17	IF_3
0x4001300	            0x7549	                           jne 0x400134b	       528	convert.c	FUNCTION_17	IF_3
0x4001302	        0x488d55c0	                   lea rdx, [rbp - 0x40]	       529	convert.c	FUNCTION_17	IF_3	IF_4	CALL_2
0x4001306	        0x488b4590	             mov rax, qword [rbp - 0x70]	       529	convert.c	FUNCTION_17	IF_3	IF_4	CALL_2
0x400130a	          0x4889d6	                            mov rsi, rdx	       529	convert.c	FUNCTION_17	IF_3	IF_4	CALL_2
0x400130d	          0x4889c7	                            mov rdi, rax	       529	convert.c	FUNCTION_17	IF_3	IF_4	CALL_2
0x4001310	      0xe869f1ffff	              call sym.convert_is_binary	       529	convert.c	FUNCTION_17	IF_3	IF_4	CALL_2
0x4001315	            0x85c0	                           test eax, eax	       529	convert.c	FUNCTION_17	IF_3	IF_4	CALL_2
0x4001317	            0x740a	                            je 0x4001323	       529	convert.c	FUNCTION_17	IF_3	IF_4	CALL_2
0x4001319	      0xb800000000	                              mov eax, 0	       530	convert.c	FUNCTION_17	IF_3	IF_4
0x400131e	      0xe9e0010000	                           jmp 0x4001503	       530	convert.c	FUNCTION_17	IF_3	IF_4
0x4001323	          0x8b4510	            mov eax, dword [rbp + 0x10] 	       537	convert.c	FUNCTION_17	IF_3	IF_5
0x4001326	          0x83e004	                              and eax, 4	       537	convert.c	FUNCTION_17	IF_3	IF_5
0x4001329	            0x85c0	                           test eax, eax	       537	convert.c	FUNCTION_17	IF_3	IF_5
0x400132b	            0x751e	                           jne 0x400134b	       537	convert.c	FUNCTION_17	IF_3	IF_5
0x400132d	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	       538	convert.c	FUNCTION_17	IF_3	IF_5	CALL_3
0x4001331	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       538	convert.c	FUNCTION_17	IF_3	IF_5	CALL_3
0x4001335	          0x4889d6	                            mov rsi, rdx	       538	convert.c	FUNCTION_17	IF_3	IF_5	CALL_3
0x4001338	          0x4889c7	                            mov rdi, rax	       538	convert.c	FUNCTION_17	IF_3	IF_5	CALL_3
0x400133b	      0xe853f5ffff	              call sym.has_crlf_in_index	       538	convert.c	FUNCTION_17	IF_3	IF_5	CALL_3
0x4001340	            0x85c0	                           test eax, eax	       537	convert.c	FUNCTION_17	IF_3	IF_5
0x4001342	            0x7407	                            je 0x400134b	       537	convert.c	FUNCTION_17	IF_3	IF_5
0x4001344	    0xc745b4000000	               mov dword [rbp - 0x4c], 0	       539	convert.c	FUNCTION_17	IF_3	IF_5
0x400134b	          0x8b4510	            mov eax, dword [rbp + 0x10] 	       541	convert.c	FUNCTION_17	IF_6
0x400134e	          0x83e002	                              and eax, 2	       541	convert.c	FUNCTION_17	IF_6
0x4001351	            0x85c0	                           test eax, eax	       541	convert.c	FUNCTION_17	IF_6
0x4001353	            0x7511	                           jne 0x4001366	       541	convert.c	FUNCTION_17	IF_6
0x4001355	          0x8b4510	            mov eax, dword [rbp + 0x10] 	       542	convert.c	FUNCTION_17	IF_6
0x4001358	          0x83e001	                              and eax, 1	       542	convert.c	FUNCTION_17	IF_6
0x400135b	            0x85c0	                           test eax, eax	       541	convert.c	FUNCTION_17	IF_6
0x400135d	            0x747e	                            je 0x40013dd	       541	convert.c	FUNCTION_17	IF_6
0x400135f	      0x48837d9000	               cmp qword [rbp - 0x70], 0	       542	convert.c	FUNCTION_17	IF_6
0x4001364	            0x7477	                            je 0x40013dd	       542	convert.c	FUNCTION_17	IF_6
0x4001366	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       544	convert.c	FUNCTION_17	IF_6	CALL_4
0x400136a	        0x488945e0	             mov qword [rbp - 0x20], rax	       544	convert.c	FUNCTION_17	IF_6	CALL_4
0x400136e	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       544	convert.c	FUNCTION_17	IF_6	CALL_4
0x4001372	        0x488945e8	             mov qword [rbp - 0x18], rax	       544	convert.c	FUNCTION_17	IF_6	CALL_4
0x4001376	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       544	convert.c	FUNCTION_17	IF_6	CALL_4
0x400137a	        0x488945f0	             mov qword [rbp - 0x10], rax	       544	convert.c	FUNCTION_17	IF_6	CALL_4
0x400137e	        0x837db400	               cmp dword [rbp - 0x4c], 0	       546	convert.c	FUNCTION_17	IF_6	IF_7
0x4001382	            0x7412	                            je 0x4001396	       546	convert.c	FUNCTION_17	IF_6	IF_7
0x4001384	          0x8b55e8	             mov edx, dword [rbp - 0x18]	       547	convert.c	FUNCTION_17	IF_6	IF_7
0x4001387	          0x8b45ec	             mov eax, dword [rbp - 0x14]	       547	convert.c	FUNCTION_17	IF_6	IF_7
0x400138a	             0x1d0	                            add eax, edx	       547	convert.c	FUNCTION_17	IF_6	IF_7
0x400138c	          0x8945e8	             mov dword [rbp - 0x18], eax	       547	convert.c	FUNCTION_17	IF_6	IF_7
0x400138f	    0xc745ec000000	               mov dword [rbp - 0x14], 0	       548	convert.c	FUNCTION_17	IF_6	IF_7
0x4001396	          0x8b5584	             mov edx, dword [rbp - 0x7c]	       551	convert.c	FUNCTION_17	IF_6	IF_8	CALL_5
0x4001399	        0x488d4de0	                   lea rcx, [rbp - 0x20]	       551	convert.c	FUNCTION_17	IF_6	IF_8	CALL_5
0x400139d	        0x488b4590	             mov rax, qword [rbp - 0x70]	       551	convert.c	FUNCTION_17	IF_6	IF_8	CALL_5
0x40013a1	          0x4889ce	                            mov rsi, rcx	       551	convert.c	FUNCTION_17	IF_6	IF_8	CALL_5
0x40013a4	          0x4889c7	                            mov rdi, rax	       551	convert.c	FUNCTION_17	IF_6	IF_8	CALL_5
0x40013a7	      0xe8acf5ffff	        call sym.will_convert_lf_to_crlf	       551	convert.c	FUNCTION_17	IF_6	IF_8	CALL_5
0x40013ac	            0x85c0	                           test eax, eax	       551	convert.c	FUNCTION_17	IF_6	IF_8	CALL_5
0x40013ae	            0x7412	                            je 0x40013c2	       551	convert.c	FUNCTION_17	IF_6	IF_8	CALL_5
0x40013b0	          0x8b55ec	             mov edx, dword [rbp - 0x14]	       552	convert.c	FUNCTION_17	IF_6	IF_8
0x40013b3	          0x8b45e8	             mov eax, dword [rbp - 0x18]	       552	convert.c	FUNCTION_17	IF_6	IF_8
0x40013b6	             0x1d0	                            add eax, edx	       552	convert.c	FUNCTION_17	IF_6	IF_8
0x40013b8	          0x8945ec	             mov dword [rbp - 0x14], eax	       552	convert.c	FUNCTION_17	IF_6	IF_8
0x40013bb	    0xc745e8000000	               mov dword [rbp - 0x18], 0	       553	convert.c	FUNCTION_17	IF_6	IF_8
0x40013c2	        0x488d4de0	                   lea rcx, [rbp - 0x20]	       555	convert.c	FUNCTION_17	IF_6	CALL_6
0x40013c6	        0x488d55c0	                   lea rdx, [rbp - 0x40]	       555	convert.c	FUNCTION_17	IF_6	CALL_6
0x40013ca	          0x8b7584	             mov esi, dword [rbp - 0x7c]	       555	convert.c	FUNCTION_17	IF_6	CALL_6
0x40013cd	        0x488b45a0	             mov rax, qword [rbp - 0x60]	       555	convert.c	FUNCTION_17	IF_6	CALL_6
0x40013d1	        0x448b4510	            mov r8d, dword [rbp + 0x10] 	       555	convert.c	FUNCTION_17	IF_6	CALL_6
0x40013d5	          0x4889c7	                            mov rdi, rax	       555	convert.c	FUNCTION_17	IF_6	CALL_6
0x40013d8	      0xe8b7f3ffff	    call sym.check_global_conv_flags_eol	       555	convert.c	FUNCTION_17	IF_6	CALL_6
0x40013dd	        0x837db400	               cmp dword [rbp - 0x4c], 0	       557	convert.c	FUNCTION_17	IF_9
0x40013e1	            0x750a	                           jne 0x40013ed	       557	convert.c	FUNCTION_17	IF_9
0x40013e3	      0xb800000000	                              mov eax, 0	       558	convert.c	FUNCTION_17	IF_9
0x40013e8	      0xe916010000	                           jmp 0x4001503	       558	convert.c	FUNCTION_17	IF_9
0x40013ed	      0x48837d8800	               cmp qword [rbp - 0x78], 0	       564	convert.c	FUNCTION_17	IF_10
0x40013f2	            0x750a	                           jne 0x40013fe	       564	convert.c	FUNCTION_17	IF_10
0x40013f4	      0xb801000000	                              mov eax, 1	       565	convert.c	FUNCTION_17	IF_10
0x40013f9	      0xe905010000	                           jmp 0x4001503	       565	convert.c	FUNCTION_17	IF_10
0x40013fe	        0x488b4588	             mov rax, qword [rbp - 0x78]	       568	convert.c	FUNCTION_17	IF_11	CALL_7
0x4001402	          0x4889c7	                            mov rdi, rax	       568	convert.c	FUNCTION_17	IF_11	CALL_7
0x4001405	      0xe82bedffff	                   call sym.strbuf_avail	       568	convert.c	FUNCTION_17	IF_11	CALL_7
0x400140a	          0x4889c2	                            mov rdx, rax	       568	convert.c	FUNCTION_17	IF_11	CALL_7
0x400140d	        0x488b4588	             mov rax, qword [rbp - 0x78]	       568	convert.c	FUNCTION_17	IF_11	CALL_7
0x4001411	        0x488b4008	                mov rax, qword [rax + 8]	       568	convert.c	FUNCTION_17	IF_11	CALL_7
0x4001415	          0x4801d0	                            add rax, rdx	       568	convert.c	FUNCTION_17	IF_11	CALL_7
0x4001418	        0x483b4590	             cmp rax, qword [rbp - 0x70]	       568	convert.c	FUNCTION_17	IF_11	CALL_7
0x400141c	            0x731e	                           jae 0x400143c	       568	convert.c	FUNCTION_17	IF_11	CALL_7
0x400141e	        0x488b4588	             mov rax, qword [rbp - 0x78]	       569	convert.c	FUNCTION_17	CALL_8
0x4001422	        0x488b4008	                mov rax, qword [rax + 8]	       569	convert.c	FUNCTION_17	CALL_8
0x4001426	        0x488b5590	             mov rdx, qword [rbp - 0x70]	       569	convert.c	FUNCTION_17	CALL_8
0x400142a	          0x4829c2	                            sub rdx, rax	       569	convert.c	FUNCTION_17	CALL_8
0x400142d	        0x488b4588	             mov rax, qword [rbp - 0x78]	       569	convert.c	FUNCTION_17	CALL_8
0x4001431	          0x4889d6	                            mov rsi, rdx	       569	convert.c	FUNCTION_17	CALL_8
0x4001434	          0x4889c7	                            mov rdi, rax	       569	convert.c	FUNCTION_17	CALL_8
0x4001437	      0xe800000000	                          call 0x400143c	       569	convert.c	FUNCTION_17	CALL_8
0x400143c	        0x488b4588	             mov rax, qword [rbp - 0x78]	       570	convert.c	FUNCTION_17
0x4001440	        0x488b4010	            mov rax, qword [rax + 0x10] 	       570	convert.c	FUNCTION_17
0x4001444	        0x488945b8	             mov qword [rbp - 0x48], rax	       570	convert.c	FUNCTION_17
0x4001448	        0x837d8405	               cmp dword [rbp - 0x7c], 5	       571	convert.c	FUNCTION_17	IF_12
0x400144c	            0x740c	                            je 0x400145a	       571	convert.c	FUNCTION_17	IF_12
0x400144e	        0x837d8406	               cmp dword [rbp - 0x7c], 6	       571	convert.c	FUNCTION_17	IF_12
0x4001452	            0x7406	                            je 0x400145a	       571	convert.c	FUNCTION_17	IF_12
0x4001454	        0x837d8407	               cmp dword [rbp - 0x7c], 7	       571	convert.c	FUNCTION_17	IF_12
0x4001458	            0x7538	                           jne 0x4001492	       571	convert.c	FUNCTION_17	IF_12
0x400145a	        0x488b4598	             mov rax, qword [rbp - 0x68]	       578	convert.c	FUNCTION_17	IF_12	DO_1
0x400145e	        0x488d5001	                      lea rdx, [rax + 1]	       578	convert.c	FUNCTION_17	IF_12	DO_1
0x4001462	        0x48895598	             mov qword [rbp - 0x68], rdx	       578	convert.c	FUNCTION_17	IF_12	DO_1
0x4001466	           0xfb600	                   movzx eax, byte [rax]	       578	convert.c	FUNCTION_17	IF_12	DO_1
0x4001469	          0x8845b3	               mov byte [rbp - 0x4d], al	       578	convert.c	FUNCTION_17	IF_12	DO_1
0x400146c	        0x807db30d	              cmp byte [rbp - 0x4d], 0xd	       579	convert.c	FUNCTION_17	IF_12	DO_1	IF_13
0x4001470	            0x7412	                            je 0x4001484	       579	convert.c	FUNCTION_17	IF_12	DO_1	IF_13
0x4001472	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       580	convert.c	FUNCTION_17	IF_12	DO_1	IF_13
0x4001476	        0x488d5001	                      lea rdx, [rax + 1]	       580	convert.c	FUNCTION_17	IF_12	DO_1	IF_13
0x400147a	        0x488955b8	             mov qword [rbp - 0x48], rdx	       580	convert.c	FUNCTION_17	IF_12	DO_1	IF_13
0x400147e	         0xfb655b3	            movzx edx, byte [rbp - 0x4d]	       580	convert.c	FUNCTION_17	IF_12	DO_1	IF_13
0x4001482	            0x8810	                      mov byte [rax], dl	       580	convert.c	FUNCTION_17	IF_12	DO_1	IF_13
0x4001484	      0x48836d9001	               sub qword [rbp - 0x70], 1	       581	convert.c	FUNCTION_17	IF_12	DO_1
0x4001489	      0x48837d9000	               cmp qword [rbp - 0x70], 0	       581	convert.c	FUNCTION_17	IF_12	DO_1
0x400148e	            0x75ca	                           jne 0x400145a	       581	convert.c	FUNCTION_17	IF_12	DO_1
0x4001490	            0xeb48	                           jmp 0x40014da	       571	convert.c	FUNCTION_17	IF_12
0x4001492	        0x488b4598	             mov rax, qword [rbp - 0x68]	       584	convert.c	FUNCTION_17	ELSE_1	DO_2
0x4001496	        0x488d5001	                      lea rdx, [rax + 1]	       584	convert.c	FUNCTION_17	ELSE_1	DO_2
0x400149a	        0x48895598	             mov qword [rbp - 0x68], rdx	       584	convert.c	FUNCTION_17	ELSE_1	DO_2
0x400149e	           0xfb600	                   movzx eax, byte [rax]	       584	convert.c	FUNCTION_17	ELSE_1	DO_2
0x40014a1	          0x8845b2	               mov byte [rbp - 0x4e], al	       584	convert.c	FUNCTION_17	ELSE_1	DO_2
0x40014a4	        0x807db20d	              cmp byte [rbp - 0x4e], 0xd	       585	convert.c	FUNCTION_17	ELSE_1	DO_2	IF_14
0x40014a8	            0x7512	                           jne 0x40014bc	       585	convert.c	FUNCTION_17	ELSE_1	DO_2	IF_14
0x40014aa	      0x48837d9001	               cmp qword [rbp - 0x70], 1	       585	convert.c	FUNCTION_17	ELSE_1	DO_2	IF_14
0x40014af	            0x760b	                           jbe 0x40014bc	       585	convert.c	FUNCTION_17	ELSE_1	DO_2	IF_14
0x40014b1	        0x488b4598	             mov rax, qword [rbp - 0x68]	       585	convert.c	FUNCTION_17	ELSE_1	DO_2	IF_14
0x40014b5	           0xfb600	                   movzx eax, byte [rax]	       585	convert.c	FUNCTION_17	ELSE_1	DO_2	IF_14
0x40014b8	            0x3c0a	                             cmp al, 0xa	       585	convert.c	FUNCTION_17	ELSE_1	DO_2	IF_14
0x40014ba	            0x7412	                            je 0x40014ce	       585	convert.c	FUNCTION_17	ELSE_1	DO_2	IF_14
0x40014bc	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       586	convert.c	FUNCTION_17	ELSE_1	DO_2	IF_14
0x40014c0	        0x488d5001	                      lea rdx, [rax + 1]	       586	convert.c	FUNCTION_17	ELSE_1	DO_2	IF_14
0x40014c4	        0x488955b8	             mov qword [rbp - 0x48], rdx	       586	convert.c	FUNCTION_17	ELSE_1	DO_2	IF_14
0x40014c8	         0xfb655b2	            movzx edx, byte [rbp - 0x4e]	       586	convert.c	FUNCTION_17	ELSE_1	DO_2	IF_14
0x40014cc	            0x8810	                      mov byte [rax], dl	       586	convert.c	FUNCTION_17	ELSE_1	DO_2	IF_14
0x40014ce	      0x48836d9001	               sub qword [rbp - 0x70], 1	       587	convert.c	FUNCTION_17	ELSE_1	DO_2
0x40014d3	      0x48837d9000	               cmp qword [rbp - 0x70], 0	       587	convert.c	FUNCTION_17	ELSE_1	DO_2
0x40014d8	            0x75b8	                           jne 0x4001492	       587	convert.c	FUNCTION_17	ELSE_1	DO_2
0x40014da	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	       589	convert.c	FUNCTION_17	CALL_9
0x40014de	        0x488b4588	             mov rax, qword [rbp - 0x78]	       589	convert.c	FUNCTION_17	CALL_9
0x40014e2	        0x488b4010	            mov rax, qword [rax + 0x10] 	       589	convert.c	FUNCTION_17	CALL_9
0x40014e6	          0x4829c2	                            sub rdx, rax	       589	convert.c	FUNCTION_17	CALL_9
0x40014e9	          0x4889d0	                            mov rax, rdx	       589	convert.c	FUNCTION_17	CALL_9
0x40014ec	          0x4889c2	                            mov rdx, rax	       589	convert.c	FUNCTION_17	CALL_9
0x40014ef	        0x488b4588	             mov rax, qword [rbp - 0x78]	       589	convert.c	FUNCTION_17	CALL_9
0x40014f3	          0x4889d6	                            mov rsi, rdx	       589	convert.c	FUNCTION_17	CALL_9
0x40014f6	          0x4889c7	                            mov rdi, rax	       589	convert.c	FUNCTION_17	CALL_9
0x40014f9	      0xe86decffff	                  call sym.strbuf_setlen	       589	convert.c	FUNCTION_17	CALL_9
0x40014fe	      0xb801000000	                              mov eax, 1	       590	convert.c	FUNCTION_17
0x4001503	        0x488b4df8	                mov rcx, qword [rbp - 8]	       591	convert.c	FUNCTION_17
0x4001507	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       591	convert.c	FUNCTION_17
0x4001510	            0x7405	                            je 0x4001517	       591	convert.c	FUNCTION_17
0x4001512	      0xe800000000	                          call 0x4001517	       591	convert.c	FUNCTION_17
0x4001517	              0xc9	                                   leave	       591	convert.c	FUNCTION_17
0x4001518	              0xc3	                                     ret	       591	convert.c	FUNCTION_17
lf_to_crlf_filter	ELSE,0:FOR,0:WHILE,0:IF,0:CALL,1:functions,0:SWITCH,0:DO,0	12
0x4003b07	              0x55	                                push rbp	      1662	convert.c	FUNCTION_49
0x4003b08	          0x4889e5	                            mov rbp, rsp	      1662	convert.c	FUNCTION_49
0x4003b0b	        0x4883ec10	                           sub rsp, 0x10	      1662	convert.c	FUNCTION_49
0x4003b0f	      0xbe10000000	                           mov esi, 0x10	      1663	convert.c	FUNCTION_49	CALL_1
0x4003b14	      0xbf01000000	                              mov edi, 1	      1663	convert.c	FUNCTION_49	CALL_1
0x4003b19	      0xe800000000	                          call 0x4003b1e	      1663	convert.c	FUNCTION_49	CALL_1
0x4003b1e	        0x488945f8	                mov qword [rbp - 8], rax	      1663	convert.c	FUNCTION_49	CALL_1
0x4003b22	        0x488b45f8	                mov rax, qword [rbp - 8]	      1665	convert.c	FUNCTION_49
0x4003b26	    0x48c700000000	                      mov qword [rax], 0	      1665	convert.c	FUNCTION_49
0x4003b2d	        0x488b45f8	                mov rax, qword [rbp - 8]	      1666	convert.c	FUNCTION_49
0x4003b31	              0xc9	                                   leave	      1667	convert.c	FUNCTION_49
0x4003b32	              0xc3	                                     ret	      1667	convert.c	FUNCTION_49
async_query_available_blobs	ELSE,1:FOR,0:WHILE,1:IF,6:CALL,13:functions,0:SWITCH,0:DO,0	119
0x4002153	              0x55	                                push rbp	       916	convert.c	FUNCTION_24
0x4002154	          0x4889e5	                            mov rbp, rsp	       916	convert.c	FUNCTION_24
0x4002157	        0x4883ec60	                           sub rsp, 0x60	       916	convert.c	FUNCTION_24
0x400215b	        0x48897da8	             mov qword [rbp - 0x58], rdi	       916	convert.c	FUNCTION_24
0x400215f	        0x488975a0	             mov qword [rbp - 0x60], rsi	       916	convert.c	FUNCTION_24
0x4002163	    0x64488b042528	                mov rax, qword fs:[0x28]	       916	convert.c	FUNCTION_24
0x400216c	        0x488945f8	                mov qword [rbp - 8], rax	       916	convert.c	FUNCTION_24
0x4002170	            0x31c0	                            xor eax, eax	       916	convert.c	FUNCTION_24
0x4002172	    0x48c745e00000	               mov qword [rbp - 0x20], 0	       921	convert.c	FUNCTION_24
0x400217a	    0x48c745e80000	               mov qword [rbp - 0x18], 0	       921	convert.c	FUNCTION_24
0x4002182	    0x48c745f00000	               mov qword [rbp - 0x10], 0	       921	convert.c	FUNCTION_24
0x400218a	    0x8b0500000000	            mov eax, dword [0x04002190] 	       923	convert.c	FUNCTION_24	CALL_1
0x4002190	            0x85c0	                           test eax, eax	       923	convert.c	FUNCTION_24	CALL_1
0x4002192	            0x7519	                           jne 0x40021ad	       923	convert.c	FUNCTION_24	CALL_1
0x4002194	      0xb900000000	                              mov ecx, 0	       923	convert.c	FUNCTION_24	CALL_1
0x4002199	      0xba9b030000	                          mov edx, 0x39b	       923	convert.c	FUNCTION_24	CALL_1
0x400219e	      0xbe00000000	                              mov esi, 0	       923	convert.c	FUNCTION_24	CALL_1
0x40021a3	      0xbf00000000	                              mov edi, 0	       923	convert.c	FUNCTION_24	CALL_1
0x40021a8	      0xe800000000	                          call 0x40021ad	       923	convert.c	FUNCTION_24	CALL_1
0x40021ad	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       924	convert.c	FUNCTION_24	CALL_2
0x40021b1	          0x4889c6	                            mov rsi, rax	       924	convert.c	FUNCTION_24	CALL_2
0x40021b4	      0xbf00000000	                              mov edi, 0	       924	convert.c	FUNCTION_24	CALL_2
0x40021b9	      0xe800000000	                          call 0x40021be	       924	convert.c	FUNCTION_24	CALL_2
0x40021be	        0x488945c8	             mov qword [rbp - 0x38], rax	       924	convert.c	FUNCTION_24	CALL_2
0x40021c2	      0x48837dc800	               cmp qword [rbp - 0x38], 0	       925	convert.c	FUNCTION_24	IF_1
0x40021c7	            0x7525	                           jne 0x40021ee	       925	convert.c	FUNCTION_24	IF_1
0x40021c9	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       926	convert.c	FUNCTION_24	IF_1
0x40021cd	          0x4889c6	                            mov rsi, rax	       926	convert.c	FUNCTION_24	IF_1
0x40021d0	      0xbf00000000	                              mov edi, 0	       926	convert.c	FUNCTION_24	IF_1
0x40021d5	      0xb800000000	                              mov eax, 0	       926	convert.c	FUNCTION_24	IF_1
0x40021da	      0xe800000000	                          call 0x40021df	       926	convert.c	FUNCTION_24	IF_1
0x40021df	      0xe85cdeffff	                    call sym.const_error	       926	convert.c	FUNCTION_24	IF_1
0x40021e4	      0xb800000000	                              mov eax, 0	       928	convert.c	FUNCTION_24	IF_1
0x40021e9	      0xe91f010000	                           jmp 0x400230d	       928	convert.c	FUNCTION_24	IF_1
0x40021ee	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       930	convert.c	FUNCTION_24
0x40021f2	        0x4883c018	                           add rax, 0x18	       930	convert.c	FUNCTION_24
0x40021f6	        0x488945d0	             mov qword [rbp - 0x30], rax	       930	convert.c	FUNCTION_24
0x40021fa	      0xbe01000000	                              mov esi, 1	       931	convert.c	FUNCTION_24	CALL_3
0x40021ff	      0xbf0d000000	                            mov edi, 0xd	       931	convert.c	FUNCTION_24	CALL_3
0x4002204	      0xe800000000	                          call 0x4002209	       931	convert.c	FUNCTION_24	CALL_3
0x4002209	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       933	convert.c	FUNCTION_24	CALL_4
0x400220d	          0x8b402c	            mov eax, dword [rax + 0x2c] 	       933	convert.c	FUNCTION_24	CALL_4
0x4002210	      0xbe00000000	                              mov esi, 0	       933	convert.c	FUNCTION_24	CALL_4
0x4002215	            0x89c7	                            mov edi, eax	       933	convert.c	FUNCTION_24	CALL_4
0x4002217	      0xb800000000	                              mov eax, 0	       933	convert.c	FUNCTION_24	CALL_4
0x400221c	      0xe800000000	                          call 0x4002221	       933	convert.c	FUNCTION_24	CALL_4
0x4002221	          0x8945bc	             mov dword [rbp - 0x44], eax	       933	convert.c	FUNCTION_24	CALL_4
0x4002224	        0x837dbc00	               cmp dword [rbp - 0x44], 0	       935	convert.c	FUNCTION_24	IF_2
0x4002228	     0xf85a6000000	                           jne 0x40022d4	       935	convert.c	FUNCTION_24	IF_2
0x400222e	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       938	convert.c	FUNCTION_24	CALL_5
0x4002232	          0x8b402c	            mov eax, dword [rax + 0x2c] 	       938	convert.c	FUNCTION_24	CALL_5
0x4002235	            0x89c7	                            mov edi, eax	       938	convert.c	FUNCTION_24	CALL_5
0x4002237	      0xe800000000	                          call 0x400223c	       938	convert.c	FUNCTION_24	CALL_5
0x400223c	          0x8945bc	             mov dword [rbp - 0x44], eax	       938	convert.c	FUNCTION_24	CALL_5
0x400223f	        0x837dbc00	               cmp dword [rbp - 0x44], 0	       939	convert.c	FUNCTION_24	IF_3
0x4002243	     0xf858e000000	                           jne 0x40022d7	       939	convert.c	FUNCTION_24	IF_3
0x4002249	            0xeb37	                           jmp 0x4002282	       942	convert.c	FUNCTION_24	WHILE_1	CALL_6
0x400224b	        0x488d55c0	                   lea rdx, [rbp - 0x40]	       944	convert.c	FUNCTION_24	WHILE_1	IF_4	CALL_7
0x400224f	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       944	convert.c	FUNCTION_24	WHILE_1	IF_4	CALL_7
0x4002253	      0xbe00000000	                              mov esi, 0	       944	convert.c	FUNCTION_24	WHILE_1	IF_4	CALL_7
0x4002258	          0x4889c7	                            mov rdi, rax	       944	convert.c	FUNCTION_24	WHILE_1	IF_4	CALL_7
0x400225b	      0xe8ebddffff	                    call sym.skip_prefix	       944	convert.c	FUNCTION_24	WHILE_1	IF_4	CALL_7
0x4002260	            0x85c0	                           test eax, eax	       944	convert.c	FUNCTION_24	WHILE_1	IF_4	CALL_7
0x4002262	            0x741e	                            je 0x4002282	       944	convert.c	FUNCTION_24	WHILE_1	IF_4	CALL_7
0x4002264	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       945	convert.c	FUNCTION_24	WHILE_1	CALL_9
0x4002268	          0x4889c7	                            mov rdi, rax	       945	convert.c	FUNCTION_24	WHILE_1	CALL_9
0x400226b	      0xe800000000	                          call 0x4002270	       945	convert.c	FUNCTION_24	WHILE_1	CALL_9
0x4002270	          0x4889c2	                            mov rdx, rax	       945	convert.c	FUNCTION_24	WHILE_1	CALL_9
0x4002273	        0x488b45a0	             mov rax, qword [rbp - 0x60]	       945	convert.c	FUNCTION_24	WHILE_1	CALL_9
0x4002277	          0x4889d6	                            mov rsi, rdx	       945	convert.c	FUNCTION_24	WHILE_1	CALL_9
0x400227a	          0x4889c7	                            mov rdi, rax	       945	convert.c	FUNCTION_24	WHILE_1	CALL_9
0x400227d	      0xe800000000	                          call 0x4002282	       945	convert.c	FUNCTION_24	WHILE_1	CALL_9
0x4002282	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       942	convert.c	FUNCTION_24	WHILE_1	CALL_6
0x4002286	          0x8b4030	            mov eax, dword [rax + 0x30] 	       942	convert.c	FUNCTION_24	WHILE_1	CALL_6
0x4002289	      0xbe00000000	                              mov esi, 0	       942	convert.c	FUNCTION_24	WHILE_1	CALL_6
0x400228e	            0x89c7	                            mov edi, eax	       942	convert.c	FUNCTION_24	WHILE_1	CALL_6
0x4002290	      0xe800000000	                          call 0x4002295	       942	convert.c	FUNCTION_24	WHILE_1	CALL_6
0x4002295	        0x488945d8	             mov qword [rbp - 0x28], rax	       942	convert.c	FUNCTION_24	WHILE_1	CALL_6
0x4002299	      0x48837dd800	               cmp qword [rbp - 0x28], 0	       942	convert.c	FUNCTION_24	WHILE_1	CALL_6
0x400229e	            0x75ab	                           jne 0x400224b	       942	convert.c	FUNCTION_24	WHILE_1	CALL_6
0x40022a0	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       950	convert.c	FUNCTION_24	CALL_10
0x40022a4	          0x8b4030	            mov eax, dword [rax + 0x30] 	       950	convert.c	FUNCTION_24	CALL_10
0x40022a7	        0x488d55e0	                   lea rdx, [rbp - 0x20]	       950	convert.c	FUNCTION_24	CALL_10
0x40022ab	          0x4889d6	                            mov rsi, rdx	       950	convert.c	FUNCTION_24	CALL_10
0x40022ae	            0x89c7	                            mov edi, eax	       950	convert.c	FUNCTION_24	CALL_10
0x40022b0	      0xe800000000	                          call 0x40022b5	       950	convert.c	FUNCTION_24	CALL_10
0x40022b5	          0x8945bc	             mov dword [rbp - 0x44], eax	       950	convert.c	FUNCTION_24	CALL_10
0x40022b8	        0x837dbc00	               cmp dword [rbp - 0x44], 0	       951	convert.c	FUNCTION_24	IF_5
0x40022bc	            0x751c	                           jne 0x40022da	       951	convert.c	FUNCTION_24	IF_5
0x40022be	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       954	convert.c	FUNCTION_24	CALL_11
0x40022c2	      0xbe00000000	                              mov esi, 0	       954	convert.c	FUNCTION_24	CALL_11
0x40022c7	          0x4889c7	                            mov rdi, rax	       954	convert.c	FUNCTION_24	CALL_11
0x40022ca	      0xe800000000	                          call 0x40022cf	       954	convert.c	FUNCTION_24	CALL_11
0x40022cf	          0x8945bc	             mov dword [rbp - 0x44], eax	       954	convert.c	FUNCTION_24	CALL_11
0x40022d2	            0xeb07	                           jmp 0x40022db	       954	convert.c	FUNCTION_24	CALL_11
0x40022d4	              0x90	                                     nop	       936	convert.c	FUNCTION_24	IF_2
0x40022d5	            0xeb04	                           jmp 0x40022db	       936	convert.c	FUNCTION_24	IF_2
0x40022d7	              0x90	                                     nop	       940	convert.c	FUNCTION_24	IF_3
0x40022d8	            0xeb01	                           jmp 0x40022db	       940	convert.c	FUNCTION_24	IF_3
0x40022da	              0x90	                                     nop	       952	convert.c	FUNCTION_24	IF_5
0x40022db	      0xbf0d000000	                            mov edi, 0xd	       957	convert.c	FUNCTION_24	CALL_12
0x40022e0	      0xe800000000	                          call 0x40022e5	       957	convert.c	FUNCTION_24	CALL_12
0x40022e5	        0x837dbc00	               cmp dword [rbp - 0x44], 0	       959	convert.c	FUNCTION_24	IF_6
0x40022e9	            0x7418	                            je 0x4002303	       959	convert.c	FUNCTION_24	IF_6
0x40022eb	        0x488b4dc8	             mov rcx, qword [rbp - 0x38]	       960	convert.c	FUNCTION_24	CALL_13
0x40022ef	        0x488d45e0	                   lea rax, [rbp - 0x20]	       960	convert.c	FUNCTION_24	CALL_13
0x40022f3	      0xba00000000	                              mov edx, 0	       960	convert.c	FUNCTION_24	CALL_13
0x40022f8	          0x4889ce	                            mov rsi, rcx	       960	convert.c	FUNCTION_24	CALL_13
0x40022fb	          0x4889c7	                            mov rdi, rax	       960	convert.c	FUNCTION_24	CALL_13
0x40022fe	      0xe842f9ffff	            call sym.handle_filter_error	       960	convert.c	FUNCTION_24	CALL_13
0x4002303	        0x837dbc00	               cmp dword [rbp - 0x44], 0	       961	convert.c	FUNCTION_24
0x4002307	           0xf94c0	                                 sete al	       961	convert.c	FUNCTION_24
0x400230a	           0xfb6c0	                           movzx eax, al	       961	convert.c	FUNCTION_24
0x400230d	        0x488b4df8	                mov rcx, qword [rbp - 8]	       962	convert.c	FUNCTION_24
0x4002311	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       962	convert.c	FUNCTION_24
0x400231a	            0x7405	                            je 0x4002321	       962	convert.c	FUNCTION_24
0x400231c	      0xe800000000	                          call 0x4002321	       962	convert.c	FUNCTION_24
0x4002321	              0xc9	                                   leave	       962	convert.c	FUNCTION_24
0x4002322	              0xc3	                                     ret	       962	convert.c	FUNCTION_24
gather_convert_stats	ELSE,0:FOR,0:WHILE,0:IF,4:CALL,2:functions,0:SWITCH,0:DO,0	44
0x40004d2	              0x55	                                push rbp	       106	convert.c	FUNCTION_3
0x40004d3	          0x4889e5	                            mov rbp, rsp	       106	convert.c	FUNCTION_3
0x40004d6	        0x4883ec40	                           sub rsp, 0x40	       106	convert.c	FUNCTION_3
0x40004da	        0x48897dc8	             mov qword [rbp - 0x38], rdi	       106	convert.c	FUNCTION_3
0x40004de	        0x488975c0	             mov qword [rbp - 0x40], rsi	       106	convert.c	FUNCTION_3
0x40004e2	    0x64488b042528	                mov rax, qword fs:[0x28]	       106	convert.c	FUNCTION_3
0x40004eb	        0x488945f8	                mov qword [rbp - 8], rax	       106	convert.c	FUNCTION_3
0x40004ef	            0x31c0	                            xor eax, eax	       106	convert.c	FUNCTION_3
0x40004f1	    0xc745dc000000	               mov dword [rbp - 0x24], 0	       108	convert.c	FUNCTION_3
0x40004f8	      0x48837dc800	               cmp qword [rbp - 0x38], 0	       109	convert.c	FUNCTION_3	IF_1
0x40004fd	            0x7407	                            je 0x4000506	       109	convert.c	FUNCTION_3	IF_1
0x40004ff	      0x48837dc000	               cmp qword [rbp - 0x40], 0	       109	convert.c	FUNCTION_3	IF_1
0x4000504	            0x7507	                           jne 0x400050d	       109	convert.c	FUNCTION_3	IF_1
0x4000506	      0xb800000000	                              mov eax, 0	       110	convert.c	FUNCTION_3	IF_1
0x400050b	            0xeb4b	                           jmp 0x4000558	       110	convert.c	FUNCTION_3	IF_1
0x400050d	        0x488d55e0	                   lea rdx, [rbp - 0x20]	       111	convert.c	FUNCTION_3	CALL_1
0x4000511	        0x488b4dc0	             mov rcx, qword [rbp - 0x40]	       111	convert.c	FUNCTION_3	CALL_1
0x4000515	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       111	convert.c	FUNCTION_3	CALL_1
0x4000519	          0x4889ce	                            mov rsi, rcx	       111	convert.c	FUNCTION_3	CALL_1
0x400051c	          0x4889c7	                            mov rdi, rax	       111	convert.c	FUNCTION_3	CALL_1
0x400051f	      0xe8e0fdffff	                   call sym.gather_stats	       111	convert.c	FUNCTION_3	CALL_1
0x4000524	        0x488d55e0	                   lea rdx, [rbp - 0x20]	       112	convert.c	FUNCTION_3	IF_2	CALL_2
0x4000528	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       112	convert.c	FUNCTION_3	IF_2	CALL_2
0x400052c	          0x4889d6	                            mov rsi, rdx	       112	convert.c	FUNCTION_3	IF_2	CALL_2
0x400052f	          0x4889c7	                            mov rdi, rax	       112	convert.c	FUNCTION_3	IF_2	CALL_2
0x4000532	      0xe847ffffff	              call sym.convert_is_binary	       112	convert.c	FUNCTION_3	IF_2	CALL_2
0x4000537	            0x85c0	                           test eax, eax	       112	convert.c	FUNCTION_3	IF_2	CALL_2
0x4000539	            0x7404	                            je 0x400053f	       112	convert.c	FUNCTION_3	IF_2	CALL_2
0x400053b	        0x834ddc04	                or dword [rbp - 0x24], 4	       113	convert.c	FUNCTION_3	IF_2
0x400053f	          0x8b45ec	             mov eax, dword [rbp - 0x14]	       114	convert.c	FUNCTION_3	IF_3
0x4000542	            0x85c0	                           test eax, eax	       114	convert.c	FUNCTION_3	IF_3
0x4000544	            0x7404	                            je 0x400054a	       114	convert.c	FUNCTION_3	IF_3
0x4000546	        0x834ddc02	                or dword [rbp - 0x24], 2	       115	convert.c	FUNCTION_3	IF_3
0x400054a	          0x8b45e8	             mov eax, dword [rbp - 0x18]	       116	convert.c	FUNCTION_3	IF_4
0x400054d	            0x85c0	                           test eax, eax	       116	convert.c	FUNCTION_3	IF_4
0x400054f	            0x7404	                            je 0x4000555	       116	convert.c	FUNCTION_3	IF_4
0x4000551	        0x834ddc01	                or dword [rbp - 0x24], 1	       117	convert.c	FUNCTION_3	IF_4
0x4000555	          0x8b45dc	             mov eax, dword [rbp - 0x24]	       119	convert.c	FUNCTION_3
0x4000558	        0x488b4df8	                mov rcx, qword [rbp - 8]	       120	convert.c	FUNCTION_3
0x400055c	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       120	convert.c	FUNCTION_3
0x4000565	            0x7405	                            je 0x400056c	       120	convert.c	FUNCTION_3
0x4000567	      0xe800000000	                          call 0x400056c	       120	convert.c	FUNCTION_3
0x400056c	              0xc9	                                   leave	       120	convert.c	FUNCTION_3
0x400056d	              0xc3	                                     ret	       120	convert.c	FUNCTION_3
is_null_stream_filter	ELSE,0:FOR,0:WHILE,0:IF,0:CALL,0:functions,0:SWITCH,0:DO,0	8
0x40038be	              0x55	                                push rbp	      1557	convert.c	FUNCTION_46
0x40038bf	          0x4889e5	                            mov rbp, rsp	      1557	convert.c	FUNCTION_46
0x40038c2	        0x48897df8	                mov qword [rbp - 8], rdi	      1557	convert.c	FUNCTION_46
0x40038c6	    0x48817df80000	                  cmp qword [rbp - 8], 0	      1558	convert.c	FUNCTION_46
0x40038ce	           0xf94c0	                                 sete al	      1558	convert.c	FUNCTION_46
0x40038d1	           0xfb6c0	                           movzx eax, al	      1558	convert.c	FUNCTION_46
0x40038d4	              0x5d	                                 pop rbp	      1559	convert.c	FUNCTION_46
0x40038d5	              0xc3	                                     ret	      1559	convert.c	FUNCTION_46
will_convert_lf_to_crlf	ELSE,0:FOR,0:WHILE,0:IF,5:CALL,2:functions,0:SWITCH,0:DO,0	47
0x4000958	              0x55	                                push rbp	       249	convert.c	FUNCTION_11
0x4000959	          0x4889e5	                            mov rbp, rsp	       249	convert.c	FUNCTION_11
0x400095c	        0x4883ec20	                           sub rsp, 0x20	       249	convert.c	FUNCTION_11
0x4000960	        0x48897df8	                mov qword [rbp - 8], rdi	       249	convert.c	FUNCTION_11
0x4000964	        0x488975f0	             mov qword [rbp - 0x10], rsi	       249	convert.c	FUNCTION_11
0x4000968	          0x8955ec	             mov dword [rbp - 0x14], edx	       249	convert.c	FUNCTION_11
0x400096b	          0x8b45ec	             mov eax, dword [rbp - 0x14]	       250	convert.c	FUNCTION_11	IF_1	CALL_1
0x400096e	            0x89c7	                            mov edi, eax	       250	convert.c	FUNCTION_11	IF_1	CALL_1
0x4000970	      0xe8abfdffff	                     call sym.output_eol	       250	convert.c	FUNCTION_11	IF_1	CALL_1
0x4000975	          0x83f801	                              cmp eax, 1	       250	convert.c	FUNCTION_11	IF_1	CALL_1
0x4000978	            0x7407	                            je 0x4000981	       250	convert.c	FUNCTION_11	IF_1	CALL_1
0x400097a	      0xb800000000	                              mov eax, 0	       251	convert.c	FUNCTION_11	IF_1
0x400097f	            0xeb64	                           jmp 0x40009e5	       251	convert.c	FUNCTION_11	IF_1
0x4000981	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       253	convert.c	FUNCTION_11	IF_2
0x4000985	          0x8b4008	                mov eax, dword [rax + 8]	       253	convert.c	FUNCTION_11	IF_2
0x4000988	            0x85c0	                           test eax, eax	       253	convert.c	FUNCTION_11	IF_2
0x400098a	            0x7507	                           jne 0x4000993	       253	convert.c	FUNCTION_11	IF_2
0x400098c	      0xb800000000	                              mov eax, 0	       254	convert.c	FUNCTION_11	IF_2
0x4000991	            0xeb52	                           jmp 0x40009e5	       254	convert.c	FUNCTION_11	IF_2
0x4000993	        0x837dec05	               cmp dword [rbp - 0x14], 5	       256	convert.c	FUNCTION_11	IF_3
0x4000997	            0x740c	                            je 0x40009a5	       256	convert.c	FUNCTION_11	IF_3
0x4000999	        0x837dec06	               cmp dword [rbp - 0x14], 6	       256	convert.c	FUNCTION_11	IF_3
0x400099d	            0x7406	                            je 0x40009a5	       256	convert.c	FUNCTION_11	IF_3
0x400099f	        0x837dec07	               cmp dword [rbp - 0x14], 7	       256	convert.c	FUNCTION_11	IF_3
0x40009a3	            0x753b	                           jne 0x40009e0	       256	convert.c	FUNCTION_11	IF_3
0x40009a5	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       259	convert.c	FUNCTION_11	IF_3	IF_4
0x40009a9	          0x8b4004	                mov eax, dword [rax + 4]	       259	convert.c	FUNCTION_11	IF_3	IF_4
0x40009ac	            0x85c0	                           test eax, eax	       259	convert.c	FUNCTION_11	IF_3	IF_4
0x40009ae	            0x750b	                           jne 0x40009bb	       259	convert.c	FUNCTION_11	IF_3	IF_4
0x40009b0	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       259	convert.c	FUNCTION_11	IF_3	IF_4
0x40009b4	          0x8b400c	              mov eax, dword [rax + 0xc]	       259	convert.c	FUNCTION_11	IF_3	IF_4
0x40009b7	            0x85c0	                           test eax, eax	       259	convert.c	FUNCTION_11	IF_3	IF_4
0x40009b9	            0x7407	                            je 0x40009c2	       259	convert.c	FUNCTION_11	IF_3	IF_4
0x40009bb	      0xb800000000	                              mov eax, 0	       260	convert.c	FUNCTION_11	IF_3	IF_4
0x40009c0	            0xeb23	                           jmp 0x40009e5	       260	convert.c	FUNCTION_11	IF_3	IF_4
0x40009c2	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       262	convert.c	FUNCTION_11	IF_3	IF_5	CALL_2
0x40009c6	        0x488b45f8	                mov rax, qword [rbp - 8]	       262	convert.c	FUNCTION_11	IF_3	IF_5	CALL_2
0x40009ca	          0x4889d6	                            mov rsi, rdx	       262	convert.c	FUNCTION_11	IF_3	IF_5	CALL_2
0x40009cd	          0x4889c7	                            mov rdi, rax	       262	convert.c	FUNCTION_11	IF_3	IF_5	CALL_2
0x40009d0	      0xe8a9faffff	              call sym.convert_is_binary	       262	convert.c	FUNCTION_11	IF_3	IF_5	CALL_2
0x40009d5	            0x85c0	                           test eax, eax	       262	convert.c	FUNCTION_11	IF_3	IF_5	CALL_2
0x40009d7	            0x7407	                            je 0x40009e0	       262	convert.c	FUNCTION_11	IF_3	IF_5	CALL_2
0x40009d9	      0xb800000000	                              mov eax, 0	       263	convert.c	FUNCTION_11	IF_3	IF_5
0x40009de	            0xeb05	                           jmp 0x40009e5	       263	convert.c	FUNCTION_11	IF_3	IF_5
0x40009e0	      0xb801000000	                              mov eax, 1	       265	convert.c	FUNCTION_11
0x40009e5	              0xc9	                                   leave	       267	convert.c	FUNCTION_11
0x40009e6	              0xc3	                                     ret	       267	convert.c	FUNCTION_11
validate_encoding	ELSE,3:FOR,0:WHILE,0:IF,7:CALL,20:functions,0:SWITCH,0:DO,0	149
0x40009e7	              0x55	                                push rbp	       271	convert.c	FUNCTION_12
0x40009e8	          0x4889e5	                            mov rbp, rsp	       271	convert.c	FUNCTION_12
0x40009eb	        0x4883ec70	                           sub rsp, 0x70	       271	convert.c	FUNCTION_12
0x40009ef	        0x48897db8	             mov qword [rbp - 0x48], rdi	       271	convert.c	FUNCTION_12
0x40009f3	        0x488975b0	             mov qword [rbp - 0x50], rsi	       271	convert.c	FUNCTION_12
0x40009f7	        0x488955a8	             mov qword [rbp - 0x58], rdx	       271	convert.c	FUNCTION_12
0x40009fb	        0x48894da0	             mov qword [rbp - 0x60], rcx	       271	convert.c	FUNCTION_12
0x40009ff	        0x4489459c	             mov dword [rbp - 0x64], r8d	       271	convert.c	FUNCTION_12
0x4000a03	    0x64488b042528	                mov rax, qword fs:[0x28]	       271	convert.c	FUNCTION_12
0x4000a0c	        0x488945f8	                mov qword [rbp - 8], rax	       271	convert.c	FUNCTION_12
0x4000a10	            0x31c0	                            xor eax, eax	       271	convert.c	FUNCTION_12
0x4000a12	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       273	convert.c	FUNCTION_12	IF_1	CALL_1
0x4000a16	      0xbe00000000	                              mov esi, 0	       273	convert.c	FUNCTION_12	IF_1	CALL_1
0x4000a1b	          0x4889c7	                            mov rdi, rax	       273	convert.c	FUNCTION_12	IF_1	CALL_1
0x4000a1e	      0xe800000000	                          call 0x4000a23	       273	convert.c	FUNCTION_12	IF_1	CALL_1
0x4000a23	            0x85c0	                           test eax, eax	       273	convert.c	FUNCTION_12	IF_1	CALL_1
0x4000a25	     0xf84fa010000	                            je 0x4000c25	       273	convert.c	FUNCTION_12	IF_1	CALL_1
0x4000a2b	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	       277	convert.c	FUNCTION_12	IF_1	IF_2	CALL_2
0x4000a2f	        0x488b4da8	             mov rcx, qword [rbp - 0x58]	       277	convert.c	FUNCTION_12	IF_1	IF_2	CALL_2
0x4000a33	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       277	convert.c	FUNCTION_12	IF_1	IF_2	CALL_2
0x4000a37	          0x4889ce	                            mov rsi, rcx	       277	convert.c	FUNCTION_12	IF_1	IF_2	CALL_2
0x4000a3a	          0x4889c7	                            mov rdi, rax	       277	convert.c	FUNCTION_12	IF_1	IF_2	CALL_2
0x4000a3d	      0xe800000000	                          call 0x4000a42	       277	convert.c	FUNCTION_12	IF_1	IF_2	CALL_2
0x4000a42	            0x85c0	                           test eax, eax	       277	convert.c	FUNCTION_12	IF_1	IF_2	CALL_2
0x4000a44	     0xf84ec000000	                            je 0x4000b36	       277	convert.c	FUNCTION_12	IF_1	IF_2	CALL_2
0x4000a4a	      0xbf00000000	                              mov edi, 0	       278	convert.c	FUNCTION_12	IF_1	IF_2	CALL_3
0x4000a4f	      0xe854f8ffff	                               call sym.	       278	convert.c	FUNCTION_12	IF_1	IF_2	CALL_3
0x4000a54	        0x488945c8	             mov qword [rbp - 0x38], rax	       278	convert.c	FUNCTION_12	IF_1	IF_2	CALL_3
0x4000a58	      0xbf00000000	                              mov edi, 0	       285	convert.c	FUNCTION_12	IF_1	IF_2	CALL_4
0x4000a5d	      0xe846f8ffff	                               call sym.	       285	convert.c	FUNCTION_12	IF_1	IF_2	CALL_4
0x4000a62	        0x488945d0	             mov qword [rbp - 0x30], rax	       285	convert.c	FUNCTION_12	IF_1	IF_2	CALL_4
0x4000a66	    0x48c745c00000	               mov qword [rbp - 0x40], 0	       289	convert.c	FUNCTION_12	IF_1	IF_2
0x4000a6e	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       290	convert.c	FUNCTION_12	IF_1	IF_2	CALL_5
0x4000a72	          0x4889c7	                            mov rdi, rax	       290	convert.c	FUNCTION_12	IF_1	IF_2	CALL_5
0x4000a75	      0xe800000000	                          call 0x4000a7a	       290	convert.c	FUNCTION_12	IF_1	IF_2	CALL_5
0x4000a7a	        0x488945d8	             mov qword [rbp - 0x28], rax	       290	convert.c	FUNCTION_12	IF_1	IF_2	CALL_5
0x4000a7e	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       291	convert.c	FUNCTION_12	IF_1	IF_2	CALL_6
0x4000a82	          0x4889c7	                            mov rdi, rax	       291	convert.c	FUNCTION_12	IF_1	IF_2	CALL_6
0x4000a85	      0xe800000000	                          call 0x4000a8a	       291	convert.c	FUNCTION_12	IF_1	IF_2	CALL_6
0x4000a8a	        0x488d50fe	                      lea rdx, [rax - 2]	       291	convert.c	FUNCTION_12	IF_1	IF_2	CALL_6
0x4000a8e	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       291	convert.c	FUNCTION_12	IF_1	IF_2	CALL_6
0x4000a92	          0x4801d0	                            add rax, rdx	       291	convert.c	FUNCTION_12	IF_1	IF_2	CALL_6
0x4000a95	          0xc60000	                       mov byte [rax], 0	       291	convert.c	FUNCTION_12	IF_1	IF_2	CALL_6
0x4000a98	        0x488d55c0	                   lea rdx, [rbp - 0x40]	       292	convert.c	FUNCTION_12	IF_1	IF_2	IF_3	CALL_7
0x4000a9c	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       292	convert.c	FUNCTION_12	IF_1	IF_2	IF_3	CALL_7
0x4000aa0	      0xbe00000000	                              mov esi, 0	       292	convert.c	FUNCTION_12	IF_1	IF_2	IF_3	CALL_7
0x4000aa5	          0x4889c7	                            mov rdi, rax	       292	convert.c	FUNCTION_12	IF_1	IF_2	IF_3	CALL_7
0x4000aa8	      0xe89ef5ffff	                    call sym.skip_prefix	       292	convert.c	FUNCTION_12	IF_1	IF_2	IF_3	CALL_7
0x4000aad	            0x85c0	                           test eax, eax	       292	convert.c	FUNCTION_12	IF_1	IF_2	IF_3	CALL_7
0x4000aaf	            0x7515	                           jne 0x4000ac6	       292	convert.c	FUNCTION_12	IF_1	IF_2	IF_3	CALL_7
0x4000ab1	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       293	convert.c	FUNCTION_12	IF_1	IF_2	CALL_8
0x4000ab5	        0x488d55c0	                   lea rdx, [rbp - 0x40]	       293	convert.c	FUNCTION_12	IF_1	IF_2	CALL_8
0x4000ab9	      0xbe00000000	                              mov esi, 0	       293	convert.c	FUNCTION_12	IF_1	IF_2	CALL_8
0x4000abe	          0x4889c7	                            mov rdi, rax	       293	convert.c	FUNCTION_12	IF_1	IF_2	CALL_8
0x4000ac1	      0xe885f5ffff	                    call sym.skip_prefix	       293	convert.c	FUNCTION_12	IF_1	IF_2	CALL_8
0x4000ac6	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	       294	convert.c	FUNCTION_12	IF_1	IF_2	CALL_9
0x4000aca	        0x488b4db8	             mov rcx, qword [rbp - 0x48]	       294	convert.c	FUNCTION_12	IF_1	IF_2	CALL_9
0x4000ace	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       294	convert.c	FUNCTION_12	IF_1	IF_2	CALL_9
0x4000ad2	          0x4889ce	                            mov rsi, rcx	       294	convert.c	FUNCTION_12	IF_1	IF_2	CALL_9
0x4000ad5	          0x4889c7	                            mov rdi, rax	       294	convert.c	FUNCTION_12	IF_1	IF_2	CALL_9
0x4000ad8	      0xb800000000	                              mov eax, 0	       294	convert.c	FUNCTION_12	IF_1	IF_2	CALL_9
0x4000add	      0xe800000000	                          call 0x4000ae2	       294	convert.c	FUNCTION_12	IF_1	IF_2	CALL_9
0x4000ae2	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       295	convert.c	FUNCTION_12	IF_1	IF_2	CALL_10
0x4000ae6	          0x4889c7	                            mov rdi, rax	       295	convert.c	FUNCTION_12	IF_1	IF_2	CALL_10
0x4000ae9	      0xe800000000	                          call 0x4000aee	       295	convert.c	FUNCTION_12	IF_1	IF_2	CALL_10
0x4000aee	        0x837d9c00	               cmp dword [rbp - 0x64], 0	       296	convert.c	FUNCTION_12	IF_1	IF_2	IF_4
0x4000af2	            0x741c	                            je 0x4000b10	       296	convert.c	FUNCTION_12	IF_1	IF_2	IF_4
0x4000af4	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	       297	convert.c	FUNCTION_12	IF_1	IF_2	CALL_11
0x4000af8	        0x488b4db8	             mov rcx, qword [rbp - 0x48]	       297	convert.c	FUNCTION_12	IF_1	IF_2	CALL_11
0x4000afc	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       297	convert.c	FUNCTION_12	IF_1	IF_2	CALL_11
0x4000b00	          0x4889ce	                            mov rsi, rcx	       297	convert.c	FUNCTION_12	IF_1	IF_2	CALL_11
0x4000b03	          0x4889c7	                            mov rdi, rax	       297	convert.c	FUNCTION_12	IF_1	IF_2	CALL_11
0x4000b06	      0xb800000000	                              mov eax, 0	       297	convert.c	FUNCTION_12	IF_1	IF_2	CALL_11
0x4000b0b	      0xe800000000	                          call 0x4000b10	       297	convert.c	FUNCTION_12	IF_1	IF_2	CALL_11
0x4000b10	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	       299	convert.c	FUNCTION_12	IF_1	IF_2	ELSE_1
0x4000b14	        0x488b4db8	             mov rcx, qword [rbp - 0x48]	       299	convert.c	FUNCTION_12	IF_1	IF_2	ELSE_1
0x4000b18	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       299	convert.c	FUNCTION_12	IF_1	IF_2	ELSE_1
0x4000b1c	          0x4889ce	                            mov rsi, rcx	       299	convert.c	FUNCTION_12	IF_1	IF_2	ELSE_1
0x4000b1f	          0x4889c7	                            mov rdi, rax	       299	convert.c	FUNCTION_12	IF_1	IF_2	ELSE_1
0x4000b22	      0xb800000000	                              mov eax, 0	       299	convert.c	FUNCTION_12	IF_1	IF_2	ELSE_1
0x4000b27	      0xe800000000	                          call 0x4000b2c	       299	convert.c	FUNCTION_12	IF_1	IF_2	ELSE_1
0x4000b2c	      0xe80ff5ffff	                    call sym.const_error	       299	convert.c	FUNCTION_12	IF_1	IF_2	ELSE_1
0x4000b31	      0xe9f4000000	                           jmp 0x4000c2a	       299	convert.c	FUNCTION_12	IF_1	IF_2	ELSE_1
0x4000b36	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	       302	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_12
0x4000b3a	        0x488b4da8	             mov rcx, qword [rbp - 0x58]	       302	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_12
0x4000b3e	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       302	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_12
0x4000b42	          0x4889ce	                            mov rsi, rcx	       302	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_12
0x4000b45	          0x4889c7	                            mov rdi, rax	       302	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_12
0x4000b48	      0xe800000000	                          call 0x4000b4d	       302	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_12
0x4000b4d	            0x85c0	                           test eax, eax	       302	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_12
0x4000b4f	     0xf84d0000000	                            je 0x4000c25	       302	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_12
0x4000b55	      0xbf00000000	                              mov edi, 0	       303	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_13
0x4000b5a	      0xe849f7ffff	                               call sym.	       303	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_13
0x4000b5f	        0x488945e0	             mov qword [rbp - 0x20], rax	       303	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_13
0x4000b63	      0xbf00000000	                              mov edi, 0	       305	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_14
0x4000b68	      0xe83bf7ffff	                               call sym.	       305	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_14
0x4000b6d	        0x488945e8	             mov qword [rbp - 0x18], rax	       305	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_14
0x4000b71	    0x48c745c00000	               mov qword [rbp - 0x40], 0	       310	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5
0x4000b79	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       311	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_15
0x4000b7d	          0x4889c7	                            mov rdi, rax	       311	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_15
0x4000b80	      0xe800000000	                          call 0x4000b85	       311	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_15
0x4000b85	        0x488945f0	             mov qword [rbp - 0x10], rax	       311	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_15
0x4000b89	        0x488d55c0	                   lea rdx, [rbp - 0x40]	       312	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	IF_6	CALL_16
0x4000b8d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       312	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	IF_6	CALL_16
0x4000b91	      0xbe00000000	                              mov esi, 0	       312	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	IF_6	CALL_16
0x4000b96	          0x4889c7	                            mov rdi, rax	       312	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	IF_6	CALL_16
0x4000b99	      0xe8adf4ffff	                    call sym.skip_prefix	       312	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	IF_6	CALL_16
0x4000b9e	            0x85c0	                           test eax, eax	       312	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	IF_6	CALL_16
0x4000ba0	            0x7515	                           jne 0x4000bb7	       312	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	IF_6	CALL_16
0x4000ba2	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       313	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_17
0x4000ba6	        0x488d55c0	                   lea rdx, [rbp - 0x40]	       313	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_17
0x4000baa	      0xbe00000000	                              mov esi, 0	       313	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_17
0x4000baf	          0x4889c7	                            mov rdi, rax	       313	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_17
0x4000bb2	      0xe894f4ffff	                    call sym.skip_prefix	       313	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_17
0x4000bb7	        0x488b4dc0	             mov rcx, qword [rbp - 0x40]	       314	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_18
0x4000bbb	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	       314	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_18
0x4000bbf	        0x488b75b8	             mov rsi, qword [rbp - 0x48]	       314	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_18
0x4000bc3	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       314	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_18
0x4000bc7	          0x4889c7	                            mov rdi, rax	       314	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_18
0x4000bca	      0xb800000000	                              mov eax, 0	       314	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_18
0x4000bcf	      0xe800000000	                          call 0x4000bd4	       314	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_18
0x4000bd4	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       315	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_19
0x4000bd8	          0x4889c7	                            mov rdi, rax	       315	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_19
0x4000bdb	      0xe800000000	                          call 0x4000be0	       315	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_19
0x4000be0	        0x837d9c00	               cmp dword [rbp - 0x64], 0	       316	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	IF_7
0x4000be4	            0x741c	                            je 0x4000c02	       316	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	IF_7
0x4000be6	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	       317	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_20
0x4000bea	        0x488b4db8	             mov rcx, qword [rbp - 0x48]	       317	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_20
0x4000bee	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       317	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_20
0x4000bf2	          0x4889ce	                            mov rsi, rcx	       317	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_20
0x4000bf5	          0x4889c7	                            mov rdi, rax	       317	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_20
0x4000bf8	      0xb800000000	                              mov eax, 0	       317	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_20
0x4000bfd	      0xe800000000	                          call 0x4000c02	       317	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_20
0x4000c02	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	       319	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	ELSE_3
0x4000c06	        0x488b4db8	             mov rcx, qword [rbp - 0x48]	       319	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	ELSE_3
0x4000c0a	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       319	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	ELSE_3
0x4000c0e	          0x4889ce	                            mov rsi, rcx	       319	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	ELSE_3
0x4000c11	          0x4889c7	                            mov rdi, rax	       319	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	ELSE_3
0x4000c14	      0xb800000000	                              mov eax, 0	       319	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	ELSE_3
0x4000c19	      0xe800000000	                          call 0x4000c1e	       319	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	ELSE_3
0x4000c1e	      0xe81df4ffff	                    call sym.const_error	       319	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	ELSE_3
0x4000c23	            0xeb05	                           jmp 0x4000c2a	       319	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	ELSE_3
0x4000c25	      0xb800000000	                              mov eax, 0	       324	convert.c	FUNCTION_12
0x4000c2a	        0x488b75f8	                mov rsi, qword [rbp - 8]	       325	convert.c	FUNCTION_12
0x4000c2e	    0x644833342528	                xor rsi, qword fs:[0x28]	       325	convert.c	FUNCTION_12
0x4000c37	            0x7405	                            je 0x4000c3e	       325	convert.c	FUNCTION_12
0x4000c39	      0xe800000000	                          call 0x4000c3e	       325	convert.c	FUNCTION_12
0x4000c3e	              0xc9	                                   leave	       325	convert.c	FUNCTION_12
0x4000c3f	              0xc3	                                     ret	       325	convert.c	FUNCTION_12
null_filter_fn	ELSE,0:FOR,0:WHILE,0:IF,3:CALL,1:functions,0:SWITCH,0:DO,0	45
0x4003817	              0x55	                                push rbp	      1526	convert.c	FUNCTION_44
0x4003818	          0x4889e5	                            mov rbp, rsp	      1526	convert.c	FUNCTION_44
0x400381b	        0x4883ec40	                           sub rsp, 0x40	      1526	convert.c	FUNCTION_44
0x400381f	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1526	convert.c	FUNCTION_44
0x4003823	        0x488975e0	             mov qword [rbp - 0x20], rsi	      1526	convert.c	FUNCTION_44
0x4003827	        0x488955d8	             mov qword [rbp - 0x28], rdx	      1526	convert.c	FUNCTION_44
0x400382b	        0x48894dd0	             mov qword [rbp - 0x30], rcx	      1526	convert.c	FUNCTION_44
0x400382f	        0x4c8945c8	              mov qword [rbp - 0x38], r8	      1526	convert.c	FUNCTION_44
0x4003833	      0x48837de000	               cmp qword [rbp - 0x20], 0	      1529	convert.c	FUNCTION_44	IF_1
0x4003838	            0x7507	                           jne 0x4003841	      1529	convert.c	FUNCTION_44	IF_1
0x400383a	      0xb800000000	                              mov eax, 0	      1530	convert.c	FUNCTION_44	IF_1
0x400383f	            0xeb70	                           jmp 0x40038b1	      1530	convert.c	FUNCTION_44	IF_1
0x4003841	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1531	convert.c	FUNCTION_44
0x4003845	          0x488b00	                    mov rax, qword [rax]	      1531	convert.c	FUNCTION_44
0x4003848	        0x488945f8	                mov qword [rbp - 8], rax	      1531	convert.c	FUNCTION_44
0x400384c	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1532	convert.c	FUNCTION_44	IF_2
0x4003850	          0x488b00	                    mov rax, qword [rax]	      1532	convert.c	FUNCTION_44	IF_2
0x4003853	        0x483b45f8	                cmp rax, qword [rbp - 8]	      1532	convert.c	FUNCTION_44	IF_2
0x4003857	            0x730b	                           jae 0x4003864	      1532	convert.c	FUNCTION_44	IF_2
0x4003859	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1533	convert.c	FUNCTION_44	IF_2
0x400385d	          0x488b00	                    mov rax, qword [rax]	      1533	convert.c	FUNCTION_44	IF_2
0x4003860	        0x488945f8	                mov qword [rbp - 8], rax	      1533	convert.c	FUNCTION_44	IF_2
0x4003864	      0x48837df800	                  cmp qword [rbp - 8], 0	      1534	convert.c	FUNCTION_44	IF_3
0x4003869	            0x7441	                            je 0x40038ac	      1534	convert.c	FUNCTION_44	IF_3
0x400386b	        0x488b55f8	                mov rdx, qword [rbp - 8]	      1535	convert.c	FUNCTION_44	IF_3	CALL_1
0x400386f	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	      1535	convert.c	FUNCTION_44	IF_3	CALL_1
0x4003873	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1535	convert.c	FUNCTION_44	IF_3	CALL_1
0x4003877	          0x4889ce	                            mov rsi, rcx	      1535	convert.c	FUNCTION_44	IF_3	CALL_1
0x400387a	          0x4889c7	                            mov rdi, rax	      1535	convert.c	FUNCTION_44	IF_3	CALL_1
0x400387d	      0xe800000000	                          call 0x4003882	      1535	convert.c	FUNCTION_44	IF_3	CALL_1
0x4003882	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1536	convert.c	FUNCTION_44	IF_3
0x4003886	          0x488b00	                    mov rax, qword [rax]	      1536	convert.c	FUNCTION_44	IF_3
0x4003889	        0x482b45f8	                sub rax, qword [rbp - 8]	      1536	convert.c	FUNCTION_44	IF_3
0x400388d	          0x4889c2	                            mov rdx, rax	      1536	convert.c	FUNCTION_44	IF_3
0x4003890	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1536	convert.c	FUNCTION_44	IF_3
0x4003894	          0x488910	                    mov qword [rax], rdx	      1536	convert.c	FUNCTION_44	IF_3
0x4003897	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1537	convert.c	FUNCTION_44	IF_3
0x400389b	          0x488b00	                    mov rax, qword [rax]	      1537	convert.c	FUNCTION_44	IF_3
0x400389e	        0x482b45f8	                sub rax, qword [rbp - 8]	      1537	convert.c	FUNCTION_44	IF_3
0x40038a2	          0x4889c2	                            mov rdx, rax	      1537	convert.c	FUNCTION_44	IF_3
0x40038a5	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1537	convert.c	FUNCTION_44	IF_3
0x40038a9	          0x488910	                    mov qword [rax], rdx	      1537	convert.c	FUNCTION_44	IF_3
0x40038ac	      0xb800000000	                              mov eax, 0	      1539	convert.c	FUNCTION_44
0x40038b1	              0xc9	                                   leave	      1540	convert.c	FUNCTION_44
0x40038b2	              0xc3	                                     ret	      1540	convert.c	FUNCTION_44
convert_to_working_tree	ELSE,0:FOR,0:WHILE,0:IF,0:CALL,1:functions,0:SWITCH,0:DO,0	17
0x400374e	              0x55	                                push rbp	      1488	convert.c	FUNCTION_42
0x400374f	          0x4889e5	                            mov rbp, rsp	      1488	convert.c	FUNCTION_42
0x4003752	        0x4883ec20	                           sub rsp, 0x20	      1488	convert.c	FUNCTION_42
0x4003756	        0x48897df8	                mov qword [rbp - 8], rdi	      1488	convert.c	FUNCTION_42
0x400375a	        0x488975f0	             mov qword [rbp - 0x10], rsi	      1488	convert.c	FUNCTION_42
0x400375e	        0x488955e8	             mov qword [rbp - 0x18], rdx	      1488	convert.c	FUNCTION_42
0x4003762	        0x48894de0	             mov qword [rbp - 0x20], rcx	      1488	convert.c	FUNCTION_42
0x4003766	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	      1489	convert.c	FUNCTION_42	CALL_1
0x400376a	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      1489	convert.c	FUNCTION_42	CALL_1
0x400376e	        0x488b75f0	             mov rsi, qword [rbp - 0x10]	      1489	convert.c	FUNCTION_42	CALL_1
0x4003772	        0x488b45f8	                mov rax, qword [rbp - 8]	      1489	convert.c	FUNCTION_42	CALL_1
0x4003776	    0x41b900000000	                              mov r9d, 0	      1489	convert.c	FUNCTION_42	CALL_1
0x400377c	    0x41b800000000	                              mov r8d, 0	      1489	convert.c	FUNCTION_42	CALL_1
0x4003782	          0x4889c7	                            mov rdi, rax	      1489	convert.c	FUNCTION_42	CALL_1
0x4003785	      0xe8c4fdffff	call sym.convert_to_working_tree_internal	      1489	convert.c	FUNCTION_42	CALL_1
0x400378a	              0xc9	                                   leave	      1490	convert.c	FUNCTION_42
0x400378b	              0xc3	                                     ret	      1490	convert.c	FUNCTION_42
filter_buffer_or_fd	ELSE,1:FOR,0:WHILE,0:IF,7:CALL,12:functions,0:SWITCH,0:DO,0	161
0x40016ed	              0x55	                                push rbp	       639	convert.c	FUNCTION_19
0x40016ee	          0x4889e5	                            mov rbp, rsp	       639	convert.c	FUNCTION_19
0x40016f1	    0x4881ec000100	                          sub rsp, 0x100	       639	convert.c	FUNCTION_19
0x40016f8	    0x89bd0cffffff	             mov dword [rbp - 0xf4], edi	       639	convert.c	FUNCTION_19
0x40016fe	    0x89b508ffffff	             mov dword [rbp - 0xf8], esi	       639	convert.c	FUNCTION_19
0x4001704	    0x48899500ffff	            mov qword [rbp - 0x100], rdx	       639	convert.c	FUNCTION_19
0x400170b	    0x64488b042528	                mov rax, qword fs:[0x28]	       639	convert.c	FUNCTION_19
0x4001714	        0x488945f8	                mov qword [rbp - 8], rax	       639	convert.c	FUNCTION_19
0x4001718	            0x31c0	                            xor eax, eax	       639	convert.c	FUNCTION_19
0x400171a	    0x488d9560ffff	                   lea rdx, [rbp - 0xa0]	       643	convert.c	FUNCTION_19
0x4001721	      0xb800000000	                              mov eax, 0	       643	convert.c	FUNCTION_19
0x4001726	      0xb90c000000	                            mov ecx, 0xc	       643	convert.c	FUNCTION_19
0x400172b	          0x4889d7	                            mov rdi, rdx	       643	convert.c	FUNCTION_19
0x400172e	          0xf348ab	              rep stosq qword [rdi], rax	       643	convert.c	FUNCTION_19
0x4001731	    0x48c78568ffff	               mov qword [rbp - 0x98], 0	       643	convert.c	FUNCTION_19
0x400173c	    0x48c78578ffff	               mov qword [rbp - 0x88], 0	       643	convert.c	FUNCTION_19
0x4001747	    0x488b8500ffff	            mov rax, qword [rbp - 0x100]	       644	convert.c	FUNCTION_19
0x400174e	    0x48898518ffff	             mov qword [rbp - 0xe8], rax	       644	convert.c	FUNCTION_19
0x4001755	    0x48c745c00000	               mov qword [rbp - 0x40], 0	       646	convert.c	FUNCTION_19
0x400175d	    0x48c745c80000	               mov qword [rbp - 0x38], 0	       646	convert.c	FUNCTION_19
0x4001765	    0x48c78520ffff	               mov qword [rbp - 0xe0], 0	       649	convert.c	FUNCTION_19
0x4001770	    0x48c78528ffff	               mov qword [rbp - 0xd8], 0	       649	convert.c	FUNCTION_19
0x400177b	    0x48c78530ffff	               mov qword [rbp - 0xd0], 0	       649	convert.c	FUNCTION_19
0x4001786	    0x48c78540ffff	               mov qword [rbp - 0xc0], 0	       650	convert.c	FUNCTION_19
0x4001791	    0x48c78548ffff	               mov qword [rbp - 0xb8], 0	       650	convert.c	FUNCTION_19
0x400179c	    0x48c78550ffff	               mov qword [rbp - 0xb0], 0	       650	convert.c	FUNCTION_19
0x40017a7	    0x48c745d00000	               mov qword [rbp - 0x30], 0	       651	convert.c	FUNCTION_19
0x40017af	    0x48c745d80000	               mov qword [rbp - 0x28], 0	       651	convert.c	FUNCTION_19
0x40017b7	    0x48c745e00000	               mov qword [rbp - 0x20], 0	       651	convert.c	FUNCTION_19
0x40017bf	    0x48c745e80000	               mov qword [rbp - 0x18], 0	       651	convert.c	FUNCTION_19
0x40017c7	    0x488b8518ffff	             mov rax, qword [rbp - 0xe8]	       657	convert.c	FUNCTION_19	CALL_1
0x40017ce	        0x488b5020	            mov rdx, qword [rax + 0x20] 	       657	convert.c	FUNCTION_19	CALL_1
0x40017d2	    0x488d8540ffff	                   lea rax, [rbp - 0xc0]	       657	convert.c	FUNCTION_19	CALL_1
0x40017d9	          0x4889d6	                            mov rsi, rdx	       657	convert.c	FUNCTION_19	CALL_1
0x40017dc	          0x4889c7	                            mov rdi, rax	       657	convert.c	FUNCTION_19	CALL_1
0x40017df	      0xe800000000	                          call 0x40017e4	       657	convert.c	FUNCTION_19	CALL_1
0x40017e4	    0x488b8550ffff	             mov rax, qword [rbp - 0xb0]	       658	convert.c	FUNCTION_19
0x40017eb	        0x488945d8	             mov qword [rbp - 0x28], rax	       658	convert.c	FUNCTION_19
0x40017ef	    0x488b8518ffff	             mov rax, qword [rbp - 0xe8]	       661	convert.c	FUNCTION_19	CALL_2
0x40017f6	        0x488b7018	            mov rsi, qword [rax + 0x18] 	       661	convert.c	FUNCTION_19	CALL_2
0x40017fa	        0x488d55d0	                   lea rdx, [rbp - 0x30]	       661	convert.c	FUNCTION_19	CALL_2
0x40017fe	    0x488d8520ffff	                   lea rax, [rbp - 0xe0]	       661	convert.c	FUNCTION_19	CALL_2
0x4001805	          0x4889d1	                            mov rcx, rdx	       661	convert.c	FUNCTION_19	CALL_2
0x4001808	      0xba00000000	                              mov edx, 0	       661	convert.c	FUNCTION_19	CALL_2
0x400180d	          0x4889c7	                            mov rdi, rax	       661	convert.c	FUNCTION_19	CALL_2
0x4001810	      0xe800000000	                          call 0x4001815	       661	convert.c	FUNCTION_19	CALL_2
0x4001815	    0x488d8540ffff	                   lea rax, [rbp - 0xc0]	       662	convert.c	FUNCTION_19	CALL_3
0x400181c	          0x4889c7	                            mov rdi, rax	       662	convert.c	FUNCTION_19	CALL_3
0x400181f	      0xe800000000	                          call 0x4001824	       662	convert.c	FUNCTION_19	CALL_3
0x4001824	    0x488b8530ffff	             mov rax, qword [rbp - 0xd0]	       664	convert.c	FUNCTION_19
0x400182b	        0x488945c0	             mov qword [rbp - 0x40], rax	       664	convert.c	FUNCTION_19
0x400182f	        0x488d45c0	                   lea rax, [rbp - 0x40]	       666	convert.c	FUNCTION_19
0x4001833	    0x48898560ffff	             mov qword [rbp - 0xa0], rax	       666	convert.c	FUNCTION_19
0x400183a	         0xfb645a8	            movzx eax, byte [rbp - 0x58]	       667	convert.c	FUNCTION_19
0x400183e	          0x83c840	                            or eax, 0x40	       667	convert.c	FUNCTION_19
0x4001841	          0x8845a8	               mov byte [rbp - 0x58], al	       667	convert.c	FUNCTION_19
0x4001844	    0xc7458cffffff	     mov dword [rbp - 0x74], 0xffffffff 	       668	convert.c	FUNCTION_19
0x400184b	    0x8b8508ffffff	             mov eax, dword [rbp - 0xf8]	       669	convert.c	FUNCTION_19
0x4001851	          0x894590	             mov dword [rbp - 0x70], eax	       669	convert.c	FUNCTION_19
0x4001854	    0x488d8560ffff	                   lea rax, [rbp - 0xa0]	       671	convert.c	FUNCTION_19	IF_1	CALL_4
0x400185b	          0x4889c7	                            mov rdi, rax	       671	convert.c	FUNCTION_19	IF_1	CALL_4
0x400185e	      0xe800000000	                          call 0x4001863	       671	convert.c	FUNCTION_19	IF_1	CALL_4
0x4001863	            0x85c0	                           test eax, eax	       671	convert.c	FUNCTION_19	IF_1	CALL_4
0x4001865	            0x7436	                            je 0x400189d	       671	convert.c	FUNCTION_19	IF_1	CALL_4
0x4001867	    0x488d8520ffff	                   lea rax, [rbp - 0xe0]	       672	convert.c	FUNCTION_19	IF_1	CALL_5
0x400186e	          0x4889c7	                            mov rdi, rax	       672	convert.c	FUNCTION_19	IF_1	CALL_5
0x4001871	      0xe800000000	                          call 0x4001876	       672	convert.c	FUNCTION_19	IF_1	CALL_5
0x4001876	    0x488b8518ffff	             mov rax, qword [rbp - 0xe8]	       673	convert.c	FUNCTION_19	IF_1
0x400187d	        0x488b4018	            mov rax, qword [rax + 0x18] 	       673	convert.c	FUNCTION_19	IF_1
0x4001881	          0x4889c6	                            mov rsi, rax	       673	convert.c	FUNCTION_19	IF_1
0x4001884	      0xbf00000000	                              mov edi, 0	       673	convert.c	FUNCTION_19	IF_1
0x4001889	      0xb800000000	                              mov eax, 0	       673	convert.c	FUNCTION_19	IF_1
0x400188e	      0xe800000000	                          call 0x4001893	       673	convert.c	FUNCTION_19	IF_1
0x4001893	      0xe8a8e7ffff	                    call sym.const_error	       673	convert.c	FUNCTION_19	IF_1
0x4001898	      0xe961010000	                           jmp 0x40019fe	       673	convert.c	FUNCTION_19	IF_1
0x400189d	      0xbe01000000	                              mov esi, 1	       676	convert.c	FUNCTION_19	CALL_6
0x40018a2	      0xbf0d000000	                            mov edi, 0xd	       676	convert.c	FUNCTION_19	CALL_6
0x40018a7	      0xe800000000	                          call 0x40018ac	       676	convert.c	FUNCTION_19	CALL_6
0x40018ac	    0x488b8518ffff	             mov rax, qword [rbp - 0xe8]	       678	convert.c	FUNCTION_19	IF_2
0x40018b3	          0x488b00	                    mov rax, qword [rax]	       678	convert.c	FUNCTION_19	IF_2
0x40018b6	          0x4885c0	                           test rax, rax	       678	convert.c	FUNCTION_19	IF_2
0x40018b9	            0x7447	                            je 0x4001902	       678	convert.c	FUNCTION_19	IF_2
0x40018bb	    0x488b8518ffff	             mov rax, qword [rbp - 0xe8]	       679	convert.c	FUNCTION_19	IF_2	CALL_7
0x40018c2	        0x488b5008	                mov rdx, qword [rax + 8]	       679	convert.c	FUNCTION_19	IF_2	CALL_7
0x40018c6	    0x488b8518ffff	             mov rax, qword [rbp - 0xe8]	       680	convert.c	FUNCTION_19	IF_2
0x40018cd	          0x488b08	                    mov rcx, qword [rax]	       680	convert.c	FUNCTION_19	IF_2
0x40018d0	          0x8b458c	             mov eax, dword [rbp - 0x74]	       679	convert.c	FUNCTION_19	IF_2	CALL_7
0x40018d3	          0x4889ce	                            mov rsi, rcx	       679	convert.c	FUNCTION_19	IF_2	CALL_7
0x40018d6	            0x89c7	                            mov edi, eax	       679	convert.c	FUNCTION_19	IF_2	CALL_7
0x40018d8	      0xe800000000	                          call 0x40018dd	       679	convert.c	FUNCTION_19	IF_2	CALL_7
0x40018dd	        0x48c1e83f	                           shr rax, 0x3f	       680	convert.c	FUNCTION_19	IF_2
0x40018e1	           0xfb6c0	                           movzx eax, al	       679	convert.c	FUNCTION_19	IF_2	CALL_7
0x40018e4	    0x898510ffffff	             mov dword [rbp - 0xf0], eax	       679	convert.c	FUNCTION_19	IF_2	CALL_7
0x40018ea	      0xe800000000	                          call 0x40018ef	       681	convert.c	FUNCTION_19	IF_2	IF_3
0x40018ef	            0x8b00	                    mov eax, dword [rax]	       681	convert.c	FUNCTION_19	IF_2	IF_3
0x40018f1	          0x83f820	                           cmp eax, 0x20	       681	convert.c	FUNCTION_19	IF_2	IF_3
0x40018f4	            0x7547	                           jne 0x400193d	       681	convert.c	FUNCTION_19	IF_2	IF_3
0x40018f6	    0xc78510ffffff	               mov dword [rbp - 0xf0], 0	       682	convert.c	FUNCTION_19	IF_2	IF_3
0x4001900	            0xeb3b	                           jmp 0x400193d	       682	convert.c	FUNCTION_19	IF_2	IF_3
0x4001902	          0x8b558c	             mov edx, dword [rbp - 0x74]	       684	convert.c	FUNCTION_19	ELSE_1	CALL_8
0x4001905	    0x488b8518ffff	             mov rax, qword [rbp - 0xe8]	       684	convert.c	FUNCTION_19	ELSE_1	CALL_8
0x400190c	          0x8b4010	            mov eax, dword [rax + 0x10] 	       684	convert.c	FUNCTION_19	ELSE_1	CALL_8
0x400190f	            0x89d6	                            mov esi, edx	       684	convert.c	FUNCTION_19	ELSE_1	CALL_8
0x4001911	            0x89c7	                            mov edi, eax	       684	convert.c	FUNCTION_19	ELSE_1	CALL_8
0x4001913	      0xe800000000	                          call 0x4001918	       684	convert.c	FUNCTION_19	ELSE_1	CALL_8
0x4001918	    0x898510ffffff	             mov dword [rbp - 0xf0], eax	       684	convert.c	FUNCTION_19	ELSE_1	CALL_8
0x400191e	    0x83bd10ffffff	cmp dword [rbp - 0xf0], 0xfffffffffffffffd	       685	convert.c	FUNCTION_19	ELSE_1	IF_4
0x4001925	            0x7516	                           jne 0x400193d	       685	convert.c	FUNCTION_19	ELSE_1	IF_4
0x4001927	      0xe800000000	                          call 0x400192c	       685	convert.c	FUNCTION_19	ELSE_1	IF_4
0x400192c	            0x8b00	                    mov eax, dword [rax]	       685	convert.c	FUNCTION_19	ELSE_1	IF_4
0x400192e	          0x83f820	                           cmp eax, 0x20	       685	convert.c	FUNCTION_19	ELSE_1	IF_4
0x4001931	            0x750a	                           jne 0x400193d	       685	convert.c	FUNCTION_19	ELSE_1	IF_4
0x4001933	    0xc78510ffffff	               mov dword [rbp - 0xf0], 0	       686	convert.c	FUNCTION_19	ELSE_1	IF_4
0x400193d	          0x8b458c	             mov eax, dword [rbp - 0x74]	       689	convert.c	FUNCTION_19	IF_5	CALL_9
0x4001940	            0x89c7	                            mov edi, eax	       689	convert.c	FUNCTION_19	IF_5	CALL_9
0x4001942	      0xe800000000	                          call 0x4001947	       689	convert.c	FUNCTION_19	IF_5	CALL_9
0x4001947	            0x85c0	                           test eax, eax	       689	convert.c	FUNCTION_19	IF_5	CALL_9
0x4001949	            0x740a	                            je 0x4001955	       689	convert.c	FUNCTION_19	IF_5	CALL_9
0x400194b	    0xc78510ffffff	               mov dword [rbp - 0xf0], 1	       690	convert.c	FUNCTION_19	IF_5
0x4001955	    0x83bd10ffffff	               cmp dword [rbp - 0xf0], 0	       691	convert.c	FUNCTION_19	IF_6
0x400195c	            0x7422	                            je 0x4001980	       691	convert.c	FUNCTION_19	IF_6
0x400195e	    0x488b8518ffff	             mov rax, qword [rbp - 0xe8]	       692	convert.c	FUNCTION_19	IF_6
0x4001965	        0x488b4018	            mov rax, qword [rax + 0x18] 	       692	convert.c	FUNCTION_19	IF_6
0x4001969	          0x4889c6	                            mov rsi, rax	       692	convert.c	FUNCTION_19	IF_6
0x400196c	      0xbf00000000	                              mov edi, 0	       692	convert.c	FUNCTION_19	IF_6
0x4001971	      0xb800000000	                              mov eax, 0	       692	convert.c	FUNCTION_19	IF_6
0x4001976	      0xe800000000	                          call 0x400197b	       692	convert.c	FUNCTION_19	IF_6
0x400197b	      0xe8c0e6ffff	                    call sym.const_error	       692	convert.c	FUNCTION_19	IF_6
0x4001980	      0xbf0d000000	                            mov edi, 0xd	       694	convert.c	FUNCTION_19	CALL_10
0x4001985	      0xe800000000	                          call 0x400198a	       694	convert.c	FUNCTION_19	CALL_10
0x400198a	    0x488d8560ffff	                   lea rax, [rbp - 0xa0]	       696	convert.c	FUNCTION_19	CALL_11
0x4001991	          0x4889c7	                            mov rdi, rax	       696	convert.c	FUNCTION_19	CALL_11
0x4001994	      0xe800000000	                          call 0x4001999	       696	convert.c	FUNCTION_19	CALL_11
0x4001999	    0x898514ffffff	             mov dword [rbp - 0xec], eax	       696	convert.c	FUNCTION_19	CALL_11
0x400199f	    0x83bd14ffffff	               cmp dword [rbp - 0xec], 0	       697	convert.c	FUNCTION_19	IF_7
0x40019a6	            0x7428	                            je 0x40019d0	       697	convert.c	FUNCTION_19	IF_7
0x40019a8	    0x488b8518ffff	             mov rax, qword [rbp - 0xe8]	       698	convert.c	FUNCTION_19	IF_7
0x40019af	        0x488b4018	            mov rax, qword [rax + 0x18] 	       698	convert.c	FUNCTION_19	IF_7
0x40019b3	    0x8b9514ffffff	             mov edx, dword [rbp - 0xec]	       698	convert.c	FUNCTION_19	IF_7
0x40019b9	          0x4889c6	                            mov rsi, rax	       698	convert.c	FUNCTION_19	IF_7
0x40019bc	      0xbf00000000	                              mov edi, 0	       698	convert.c	FUNCTION_19	IF_7
0x40019c1	      0xb800000000	                              mov eax, 0	       698	convert.c	FUNCTION_19	IF_7
0x40019c6	      0xe800000000	                          call 0x40019cb	       698	convert.c	FUNCTION_19	IF_7
0x40019cb	      0xe870e6ffff	                    call sym.const_error	       698	convert.c	FUNCTION_19	IF_7
0x40019d0	    0x488d8520ffff	                   lea rax, [rbp - 0xe0]	       700	convert.c	FUNCTION_19	CALL_12
0x40019d7	          0x4889c7	                            mov rdi, rax	       700	convert.c	FUNCTION_19	CALL_12
0x40019da	      0xe800000000	                          call 0x40019df	       700	convert.c	FUNCTION_19	CALL_12
0x40019df	    0x83bd10ffffff	               cmp dword [rbp - 0xf0], 0	       701	convert.c	FUNCTION_19
0x40019e6	            0x7509	                           jne 0x40019f1	       701	convert.c	FUNCTION_19
0x40019e8	    0x83bd14ffffff	               cmp dword [rbp - 0xec], 0	       701	convert.c	FUNCTION_19
0x40019ef	            0x7407	                            je 0x40019f8	       701	convert.c	FUNCTION_19
0x40019f1	      0xb801000000	                              mov eax, 1	       701	convert.c	FUNCTION_19
0x40019f6	            0xeb05	                           jmp 0x40019fd	       701	convert.c	FUNCTION_19
0x40019f8	      0xb800000000	                              mov eax, 0	       701	convert.c	FUNCTION_19
0x40019fd	              0x90	                                     nop	       701	convert.c	FUNCTION_19
0x40019fe	        0x488b4df8	                mov rcx, qword [rbp - 8]	       702	convert.c	FUNCTION_19
0x4001a02	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       702	convert.c	FUNCTION_19
0x4001a0b	            0x7405	                            je 0x4001a12	       702	convert.c	FUNCTION_19
0x4001a0d	      0xe800000000	                          call 0x4001a12	       702	convert.c	FUNCTION_19
0x4001a12	              0xc9	                                   leave	       702	convert.c	FUNCTION_19
0x4001a13	              0xc3	                                     ret	       702	convert.c	FUNCTION_19
skip_prefix	ELSE,0:FOR,0:WHILE,0:IF,1:CALL,0:functions,0:SWITCH,0:DO,1	27
0x400004b	              0x55	                                push rbp	       482	git-compat-util.h	FUNCTION_83
0x400004c	          0x4889e5	                            mov rbp, rsp	       482	git-compat-util.h	FUNCTION_83
0x400004f	        0x48897df8	                mov qword [rbp - 8], rdi	       482	git-compat-util.h	FUNCTION_83
0x4000053	        0x488975f0	             mov qword [rbp - 0x10], rsi	       482	git-compat-util.h	FUNCTION_83
0x4000057	        0x488955e8	             mov qword [rbp - 0x18], rdx	       482	git-compat-util.h	FUNCTION_83
0x400005b	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       484	git-compat-util.h	FUNCTION_83	DO_1	IF_1
0x400005f	           0xfb600	                   movzx eax, byte [rax]	       484	git-compat-util.h	FUNCTION_83	DO_1	IF_1
0x4000062	            0x84c0	                             test al, al	       484	git-compat-util.h	FUNCTION_83	DO_1	IF_1
0x4000064	            0x7512	                           jne 0x4000078	       484	git-compat-util.h	FUNCTION_83	DO_1	IF_1
0x4000066	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       485	git-compat-util.h	FUNCTION_83	DO_1	IF_1
0x400006a	        0x488b55f8	                mov rdx, qword [rbp - 8]	       485	git-compat-util.h	FUNCTION_83	DO_1	IF_1
0x400006e	          0x488910	                    mov qword [rax], rdx	       485	git-compat-util.h	FUNCTION_83	DO_1	IF_1
0x4000071	      0xb801000000	                              mov eax, 1	       486	git-compat-util.h	FUNCTION_83	DO_1	IF_1
0x4000076	            0xeb27	                           jmp 0x400009f	       486	git-compat-util.h	FUNCTION_83	DO_1	IF_1
0x4000078	        0x488b45f8	                mov rax, qword [rbp - 8]	       488	git-compat-util.h	FUNCTION_83	DO_1
0x400007c	        0x488d5001	                      lea rdx, [rax + 1]	       488	git-compat-util.h	FUNCTION_83	DO_1
0x4000080	        0x488955f8	                mov qword [rbp - 8], rdx	       488	git-compat-util.h	FUNCTION_83	DO_1
0x4000084	           0xfb608	                   movzx ecx, byte [rax]	       488	git-compat-util.h	FUNCTION_83	DO_1
0x4000087	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       488	git-compat-util.h	FUNCTION_83	DO_1
0x400008b	        0x488d5001	                      lea rdx, [rax + 1]	       488	git-compat-util.h	FUNCTION_83	DO_1
0x400008f	        0x488955f0	             mov qword [rbp - 0x10], rdx	       488	git-compat-util.h	FUNCTION_83	DO_1
0x4000093	           0xfb600	                   movzx eax, byte [rax]	       488	git-compat-util.h	FUNCTION_83	DO_1
0x4000096	            0x38c1	                              cmp cl, al	       488	git-compat-util.h	FUNCTION_83	DO_1
0x4000098	            0x74c1	                            je 0x400005b	       488	git-compat-util.h	FUNCTION_83	DO_1
0x400009a	      0xb800000000	                              mov eax, 0	       489	git-compat-util.h	FUNCTION_83
0x400009f	              0x5d	                                 pop rbp	       490	git-compat-util.h	FUNCTION_83
0x40000a0	              0xc3	                                     ret	       490	git-compat-util.h	FUNCTION_83
strbuf_avail	ELSE,0:FOR,0:WHILE,0:IF,0:CALL,0:functions,0:SWITCH,0:DO,0	18
0x4000135	              0x55	                                push rbp	       140	strbuf.h	FUNCTION_62
0x4000136	          0x4889e5	                            mov rbp, rsp	       140	strbuf.h	FUNCTION_62
0x4000139	        0x48897df8	                mov qword [rbp - 8], rdi	       140	strbuf.h	FUNCTION_62
0x400013d	        0x488b45f8	                mov rax, qword [rbp - 8]	       141	strbuf.h	FUNCTION_62
0x4000141	          0x488b00	                    mov rax, qword [rax]	       141	strbuf.h	FUNCTION_62
0x4000144	          0x4885c0	                           test rax, rax	       141	strbuf.h	FUNCTION_62
0x4000147	            0x741b	                            je 0x4000164	       141	strbuf.h	FUNCTION_62
0x4000149	        0x488b45f8	                mov rax, qword [rbp - 8]	       141	strbuf.h	FUNCTION_62
0x400014d	          0x488b10	                    mov rdx, qword [rax]	       141	strbuf.h	FUNCTION_62
0x4000150	        0x488b45f8	                mov rax, qword [rbp - 8]	       141	strbuf.h	FUNCTION_62
0x4000154	        0x488b4008	                mov rax, qword [rax + 8]	       141	strbuf.h	FUNCTION_62
0x4000158	          0x4829c2	                            sub rdx, rax	       141	strbuf.h	FUNCTION_62
0x400015b	          0x4889d0	                            mov rax, rdx	       141	strbuf.h	FUNCTION_62
0x400015e	        0x4883e801	                              sub rax, 1	       141	strbuf.h	FUNCTION_62
0x4000162	            0xeb05	                           jmp 0x4000169	       141	strbuf.h	FUNCTION_62
0x4000164	      0xb800000000	                              mov eax, 0	       141	strbuf.h	FUNCTION_62
0x4000169	              0x5d	                                 pop rbp	       142	strbuf.h	FUNCTION_62
0x400016a	              0xc3	                                     ret	       142	strbuf.h	FUNCTION_62
strbuf_addch	ELSE,0:FOR,0:WHILE,0:IF,1:CALL,2:functions,0:SWITCH,0:DO,0	33
0x4000205	              0x55	                                push rbp	       226	strbuf.h	FUNCTION_64
0x4000206	          0x4889e5	                            mov rbp, rsp	       226	strbuf.h	FUNCTION_64
0x4000209	        0x4883ec10	                           sub rsp, 0x10	       226	strbuf.h	FUNCTION_64
0x400020d	        0x48897df8	                mov qword [rbp - 8], rdi	       226	strbuf.h	FUNCTION_64
0x4000211	          0x8975f4	              mov dword [rbp - 0xc], esi	       226	strbuf.h	FUNCTION_64
0x4000214	        0x488b45f8	                mov rax, qword [rbp - 8]	       227	strbuf.h	FUNCTION_64	IF_1	CALL_1
0x4000218	          0x4889c7	                            mov rdi, rax	       227	strbuf.h	FUNCTION_64	IF_1	CALL_1
0x400021b	      0xe815ffffff	                   call sym.strbuf_avail	       227	strbuf.h	FUNCTION_64	IF_1	CALL_1
0x4000220	          0x4885c0	                           test rax, rax	       227	strbuf.h	FUNCTION_64	IF_1	CALL_1
0x4000223	            0x7511	                           jne 0x4000236	       227	strbuf.h	FUNCTION_64	IF_1	CALL_1
0x4000225	        0x488b45f8	                mov rax, qword [rbp - 8]	       228	strbuf.h	FUNCTION_64	CALL_2
0x4000229	      0xbe01000000	                              mov esi, 1	       228	strbuf.h	FUNCTION_64	CALL_2
0x400022e	          0x4889c7	                            mov rdi, rax	       228	strbuf.h	FUNCTION_64	CALL_2
0x4000231	      0xe800000000	                          call 0x4000236	       228	strbuf.h	FUNCTION_64	CALL_2
0x4000236	        0x488b45f8	                mov rax, qword [rbp - 8]	       229	strbuf.h	FUNCTION_64
0x400023a	        0x488b7010	            mov rsi, qword [rax + 0x10] 	       229	strbuf.h	FUNCTION_64
0x400023e	        0x488b45f8	                mov rax, qword [rbp - 8]	       229	strbuf.h	FUNCTION_64
0x4000242	        0x488b4008	                mov rax, qword [rax + 8]	       229	strbuf.h	FUNCTION_64
0x4000246	        0x488d4801	                      lea rcx, [rax + 1]	       229	strbuf.h	FUNCTION_64
0x400024a	        0x488b55f8	                mov rdx, qword [rbp - 8]	       229	strbuf.h	FUNCTION_64
0x400024e	        0x48894a08	                mov qword [rdx + 8], rcx	       229	strbuf.h	FUNCTION_64
0x4000252	          0x4801f0	                            add rax, rsi	       229	strbuf.h	FUNCTION_64
0x4000255	          0x8b55f4	              mov edx, dword [rbp - 0xc]	       229	strbuf.h	FUNCTION_64
0x4000258	            0x8810	                      mov byte [rax], dl	       229	strbuf.h	FUNCTION_64
0x400025a	        0x488b45f8	                mov rax, qword [rbp - 8]	       230	strbuf.h	FUNCTION_64
0x400025e	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       230	strbuf.h	FUNCTION_64
0x4000262	        0x488b45f8	                mov rax, qword [rbp - 8]	       230	strbuf.h	FUNCTION_64
0x4000266	        0x488b4008	                mov rax, qword [rax + 8]	       230	strbuf.h	FUNCTION_64
0x400026a	          0x4801d0	                            add rax, rdx	       230	strbuf.h	FUNCTION_64
0x400026d	          0xc60000	                       mov byte [rax], 0	       230	strbuf.h	FUNCTION_64
0x4000270	              0x90	                                     nop	       231	strbuf.h	FUNCTION_64
0x4000271	              0xc9	                                   leave	       231	strbuf.h	FUNCTION_64
0x4000272	              0xc3	                                     ret	       231	strbuf.h	FUNCTION_64
lf_to_crlf_filter_fn	ELSE,1:FOR,1:WHILE,0:IF,9:CALL,0:functions,0:SWITCH,0:DO,0	148
0x40038d6	              0x55	                                push rbp	      1575	convert.c	FUNCTION_47
0x40038d7	          0x4889e5	                            mov rbp, rsp	      1575	convert.c	FUNCTION_47
0x40038da	        0x48897dc8	             mov qword [rbp - 0x38], rdi	      1575	convert.c	FUNCTION_47
0x40038de	        0x488975c0	             mov qword [rbp - 0x40], rsi	      1575	convert.c	FUNCTION_47
0x40038e2	        0x488955b8	             mov qword [rbp - 0x48], rdx	      1575	convert.c	FUNCTION_47
0x40038e6	        0x48894db0	             mov qword [rbp - 0x50], rcx	      1575	convert.c	FUNCTION_47
0x40038ea	        0x4c8945a8	              mov qword [rbp - 0x58], r8	      1575	convert.c	FUNCTION_47
0x40038ee	    0x48c745e00000	               mov qword [rbp - 0x20], 0	      1576	convert.c	FUNCTION_47
0x40038f6	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1577	convert.c	FUNCTION_47
0x40038fa	        0x488945f0	             mov qword [rbp - 0x10], rax	      1577	convert.c	FUNCTION_47
0x40038fe	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1584	convert.c	FUNCTION_47	IF_1
0x4003902	         0xfb64008	               movzx eax, byte [rax + 8]	      1584	convert.c	FUNCTION_47	IF_1
0x4003906	          0x83e001	                              and eax, 1	      1584	convert.c	FUNCTION_47	IF_1
0x4003909	            0x84c0	                             test al, al	      1584	convert.c	FUNCTION_47	IF_1
0x400390b	            0x743e	                            je 0x400394b	      1584	convert.c	FUNCTION_47	IF_1
0x400390d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1584	convert.c	FUNCTION_47	IF_1
0x4003911	         0xfb64009	               movzx eax, byte [rax + 9]	      1584	convert.c	FUNCTION_47	IF_1
0x4003915	            0x3c0d	                             cmp al, 0xd	      1584	convert.c	FUNCTION_47	IF_1
0x4003917	            0x7507	                           jne 0x4003920	      1584	convert.c	FUNCTION_47	IF_1
0x4003919	      0x48837dc000	               cmp qword [rbp - 0x40], 0	      1584	convert.c	FUNCTION_47	IF_1
0x400391e	            0x752b	                           jne 0x400394b	      1584	convert.c	FUNCTION_47	IF_1
0x4003920	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1585	convert.c	FUNCTION_47	IF_1
0x4003924	        0x488d5001	                      lea rdx, [rax + 1]	      1585	convert.c	FUNCTION_47	IF_1
0x4003928	        0x488955e0	             mov qword [rbp - 0x20], rdx	      1585	convert.c	FUNCTION_47	IF_1
0x400392c	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	      1585	convert.c	FUNCTION_47	IF_1
0x4003930	          0x4801c2	                            add rdx, rax	      1585	convert.c	FUNCTION_47	IF_1
0x4003933	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1585	convert.c	FUNCTION_47	IF_1
0x4003937	         0xfb64009	               movzx eax, byte [rax + 9]	      1585	convert.c	FUNCTION_47	IF_1
0x400393b	            0x8802	                      mov byte [rdx], al	      1585	convert.c	FUNCTION_47	IF_1
0x400393d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1586	convert.c	FUNCTION_47	IF_1
0x4003941	         0xfb65008	               movzx edx, byte [rax + 8]	      1586	convert.c	FUNCTION_47	IF_1
0x4003945	          0x83e2fe	                     and edx, 0xfffffffe	      1586	convert.c	FUNCTION_47	IF_1
0x4003948	          0x885008	                  mov byte [rax + 8], dl	      1586	convert.c	FUNCTION_47	IF_1
0x400394b	      0x48837dc000	               cmp qword [rbp - 0x40], 0	      1590	convert.c	FUNCTION_47	IF_2
0x4003950	            0x751f	                           jne 0x4003971	      1590	convert.c	FUNCTION_47	IF_2
0x4003952	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1591	convert.c	FUNCTION_47	IF_2
0x4003956	          0x488b00	                    mov rax, qword [rax]	      1591	convert.c	FUNCTION_47	IF_2
0x4003959	        0x482b45e0	             sub rax, qword [rbp - 0x20]	      1591	convert.c	FUNCTION_47	IF_2
0x400395d	          0x4889c2	                            mov rdx, rax	      1591	convert.c	FUNCTION_47	IF_2
0x4003960	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1591	convert.c	FUNCTION_47	IF_2
0x4003964	          0x488910	                    mov qword [rax], rdx	      1591	convert.c	FUNCTION_47	IF_2
0x4003967	      0xb800000000	                              mov eax, 0	      1592	convert.c	FUNCTION_47	IF_2
0x400396c	      0xe979010000	                           jmp 0x4003aea	      1592	convert.c	FUNCTION_47	IF_2
0x4003971	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1595	convert.c	FUNCTION_47
0x4003975	          0x488b00	                    mov rax, qword [rax]	      1595	convert.c	FUNCTION_47
0x4003978	        0x488945f8	                mov qword [rbp - 8], rax	      1595	convert.c	FUNCTION_47
0x400397c	      0x48837df800	                  cmp qword [rbp - 8], 0	      1596	convert.c	FUNCTION_47	IF_3
0x4003981	            0x7513	                           jne 0x4003996	      1596	convert.c	FUNCTION_47	IF_3
0x4003983	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1596	convert.c	FUNCTION_47	IF_3
0x4003987	         0xfb64008	               movzx eax, byte [rax + 8]	      1596	convert.c	FUNCTION_47	IF_3
0x400398b	          0x83e001	                              and eax, 1	      1596	convert.c	FUNCTION_47	IF_3
0x400398e	            0x84c0	                             test al, al	      1596	convert.c	FUNCTION_47	IF_3
0x4003990	     0xf844f010000	                            je 0x4003ae5	      1596	convert.c	FUNCTION_47	IF_3
0x4003996	    0xc745dc000000	               mov dword [rbp - 0x24], 0	      1598	convert.c	FUNCTION_47	IF_3
0x400399d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1600	convert.c	FUNCTION_47	IF_3	IF_4
0x40039a1	         0xfb64008	               movzx eax, byte [rax + 8]	      1600	convert.c	FUNCTION_47	IF_3	IF_4
0x40039a5	          0x83e001	                              and eax, 1	      1600	convert.c	FUNCTION_47	IF_3	IF_4
0x40039a8	            0x84c0	                             test al, al	      1600	convert.c	FUNCTION_47	IF_3	IF_4
0x40039aa	            0x7415	                            je 0x40039c1	      1600	convert.c	FUNCTION_47	IF_3	IF_4
0x40039ac	    0xc745dc010000	               mov dword [rbp - 0x24], 1	      1601	convert.c	FUNCTION_47	IF_3	IF_4
0x40039b3	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1602	convert.c	FUNCTION_47	IF_3	IF_4
0x40039b7	         0xfb65008	               movzx edx, byte [rax + 8]	      1602	convert.c	FUNCTION_47	IF_3	IF_4
0x40039bb	          0x83e2fe	                     and edx, 0xfffffffe	      1602	convert.c	FUNCTION_47	IF_3	IF_4
0x40039be	          0x885008	                  mov byte [rax + 8], dl	      1602	convert.c	FUNCTION_47	IF_3	IF_4
0x40039c1	    0x48c745e80000	               mov qword [rbp - 0x18], 0	      1605	convert.c	FUNCTION_47	IF_3	FOR_1
0x40039c9	      0xe9a7000000	                           jmp 0x4003a75	      1605	convert.c	FUNCTION_47	IF_3	FOR_1
0x40039ce	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      1606	convert.c	FUNCTION_47	IF_3	FOR_1
0x40039d2	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1606	convert.c	FUNCTION_47	IF_3	FOR_1
0x40039d6	          0x4801d0	                            add rax, rdx	      1606	convert.c	FUNCTION_47	IF_3	FOR_1
0x40039d9	           0xfb600	                   movzx eax, byte [rax]	      1606	convert.c	FUNCTION_47	IF_3	FOR_1
0x40039dc	          0x8845db	               mov byte [rbp - 0x25], al	      1606	convert.c	FUNCTION_47	IF_3	FOR_1
0x40039df	        0x807ddb0a	              cmp byte [rbp - 0x25], 0xa	      1608	convert.c	FUNCTION_47	IF_3	FOR_1	IF_5
0x40039e3	            0x7518	                           jne 0x40039fd	      1608	convert.c	FUNCTION_47	IF_3	FOR_1	IF_5
0x40039e5	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1609	convert.c	FUNCTION_47	IF_3	FOR_1	IF_5
0x40039e9	        0x488d5001	                      lea rdx, [rax + 1]	      1609	convert.c	FUNCTION_47	IF_3	FOR_1	IF_5
0x40039ed	        0x488955e0	             mov qword [rbp - 0x20], rdx	      1609	convert.c	FUNCTION_47	IF_3	FOR_1	IF_5
0x40039f1	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	      1609	convert.c	FUNCTION_47	IF_3	FOR_1	IF_5
0x40039f5	          0x4801d0	                            add rax, rdx	      1609	convert.c	FUNCTION_47	IF_3	FOR_1	IF_5
0x40039f8	          0xc6000d	                     mov byte [rax], 0xd	      1609	convert.c	FUNCTION_47	IF_3	FOR_1	IF_5
0x40039fb	            0xeb1c	                           jmp 0x4003a19	      1609	convert.c	FUNCTION_47	IF_3	FOR_1	IF_5
0x40039fd	        0x837ddc00	               cmp dword [rbp - 0x24], 0	      1610	convert.c	FUNCTION_47	IF_3	FOR_1	ELSE_1	IF_6
0x4003a01	            0x7416	                            je 0x4003a19	      1610	convert.c	FUNCTION_47	IF_3	FOR_1	ELSE_1	IF_6
0x4003a03	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1616	convert.c	FUNCTION_47	IF_3	FOR_1	ELSE_1	IF_6
0x4003a07	        0x488d5001	                      lea rdx, [rax + 1]	      1616	convert.c	FUNCTION_47	IF_3	FOR_1	ELSE_1	IF_6
0x4003a0b	        0x488955e0	             mov qword [rbp - 0x20], rdx	      1616	convert.c	FUNCTION_47	IF_3	FOR_1	ELSE_1	IF_6
0x4003a0f	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	      1616	convert.c	FUNCTION_47	IF_3	FOR_1	ELSE_1	IF_6
0x4003a13	          0x4801d0	                            add rax, rdx	      1616	convert.c	FUNCTION_47	IF_3	FOR_1	ELSE_1	IF_6
0x4003a16	          0xc6000d	                     mov byte [rax], 0xd	      1616	convert.c	FUNCTION_47	IF_3	FOR_1	ELSE_1	IF_6
0x4003a19	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1625	convert.c	FUNCTION_47	IF_3	FOR_1	IF_7
0x4003a1d	          0x488b00	                    mov rax, qword [rax]	      1625	convert.c	FUNCTION_47	IF_3	FOR_1	IF_7
0x4003a20	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	      1625	convert.c	FUNCTION_47	IF_3	FOR_1	IF_7
0x4003a24	            0x771b	                            ja 0x4003a41	      1625	convert.c	FUNCTION_47	IF_3	FOR_1	IF_7
0x4003a26	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1626	convert.c	FUNCTION_47	IF_3	FOR_1	IF_7
0x4003a2a	         0xfb65008	               movzx edx, byte [rax + 8]	      1626	convert.c	FUNCTION_47	IF_3	FOR_1	IF_7
0x4003a2e	          0x83ca01	                               or edx, 1	      1626	convert.c	FUNCTION_47	IF_3	FOR_1	IF_7
0x4003a31	          0x885008	                  mov byte [rax + 8], dl	      1626	convert.c	FUNCTION_47	IF_3	FOR_1	IF_7
0x4003a34	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1627	convert.c	FUNCTION_47	IF_3	FOR_1	IF_7
0x4003a38	         0xfb655db	            movzx edx, byte [rbp - 0x25]	      1627	convert.c	FUNCTION_47	IF_3	FOR_1	IF_7
0x4003a3c	          0x885009	                  mov byte [rax + 9], dl	      1627	convert.c	FUNCTION_47	IF_3	FOR_1	IF_7
0x4003a3f	            0xeb2f	                           jmp 0x4003a70	      1628	convert.c	FUNCTION_47	IF_3	FOR_1	IF_7
0x4003a41	        0x807ddb0d	              cmp byte [rbp - 0x25], 0xd	      1631	convert.c	FUNCTION_47	IF_3	FOR_1	IF_8
0x4003a45	            0x7509	                           jne 0x4003a50	      1631	convert.c	FUNCTION_47	IF_3	FOR_1	IF_8
0x4003a47	    0xc745dc010000	               mov dword [rbp - 0x24], 1	      1632	convert.c	FUNCTION_47	IF_3	FOR_1	IF_8
0x4003a4e	            0xeb20	                           jmp 0x4003a70	      1633	convert.c	FUNCTION_47	IF_3	FOR_1	IF_8
0x4003a50	    0xc745dc000000	               mov dword [rbp - 0x24], 0	      1636	convert.c	FUNCTION_47	IF_3	FOR_1
0x4003a57	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1637	convert.c	FUNCTION_47	IF_3	FOR_1
0x4003a5b	        0x488d5001	                      lea rdx, [rax + 1]	      1637	convert.c	FUNCTION_47	IF_3	FOR_1
0x4003a5f	        0x488955e0	             mov qword [rbp - 0x20], rdx	      1637	convert.c	FUNCTION_47	IF_3	FOR_1
0x4003a63	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	      1637	convert.c	FUNCTION_47	IF_3	FOR_1
0x4003a67	          0x4801c2	                            add rdx, rax	      1637	convert.c	FUNCTION_47	IF_3	FOR_1
0x4003a6a	         0xfb645db	            movzx eax, byte [rbp - 0x25]	      1637	convert.c	FUNCTION_47	IF_3	FOR_1
0x4003a6e	            0x8802	                      mov byte [rdx], al	      1637	convert.c	FUNCTION_47	IF_3	FOR_1
0x4003a70	      0x488345e801	               add qword [rbp - 0x18], 1	      1605	convert.c	FUNCTION_47	IF_3	FOR_1
0x4003a75	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1605	convert.c	FUNCTION_47	IF_3	FOR_1
0x4003a79	          0x488b00	                    mov rax, qword [rax]	      1605	convert.c	FUNCTION_47	IF_3	FOR_1
0x4003a7c	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	      1605	convert.c	FUNCTION_47	IF_3	FOR_1
0x4003a80	            0x760e	                           jbe 0x4003a90	      1605	convert.c	FUNCTION_47	IF_3	FOR_1
0x4003a82	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1605	convert.c	FUNCTION_47	IF_3	FOR_1
0x4003a86	        0x483b45f8	                cmp rax, qword [rbp - 8]	      1605	convert.c	FUNCTION_47	IF_3	FOR_1
0x4003a8a	     0xf823effffff	                            jb 0x40039ce	      1605	convert.c	FUNCTION_47	IF_3	FOR_1
0x4003a90	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1640	convert.c	FUNCTION_47	IF_3
0x4003a94	          0x488b00	                    mov rax, qword [rax]	      1640	convert.c	FUNCTION_47	IF_3
0x4003a97	        0x482b45e0	             sub rax, qword [rbp - 0x20]	      1640	convert.c	FUNCTION_47	IF_3
0x4003a9b	          0x4889c2	                            mov rdx, rax	      1640	convert.c	FUNCTION_47	IF_3
0x4003a9e	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1640	convert.c	FUNCTION_47	IF_3
0x4003aa2	          0x488910	                    mov qword [rax], rdx	      1640	convert.c	FUNCTION_47	IF_3
0x4003aa5	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1641	convert.c	FUNCTION_47	IF_3
0x4003aa9	          0x488b00	                    mov rax, qword [rax]	      1641	convert.c	FUNCTION_47	IF_3
0x4003aac	        0x482b45e8	             sub rax, qword [rbp - 0x18]	      1641	convert.c	FUNCTION_47	IF_3
0x4003ab0	          0x4889c2	                            mov rdx, rax	      1641	convert.c	FUNCTION_47	IF_3
0x4003ab3	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1641	convert.c	FUNCTION_47	IF_3
0x4003ab7	          0x488910	                    mov qword [rax], rdx	      1641	convert.c	FUNCTION_47	IF_3
0x4003aba	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1643	convert.c	FUNCTION_47	IF_3	IF_9
0x4003abe	         0xfb64008	               movzx eax, byte [rax + 8]	      1643	convert.c	FUNCTION_47	IF_3	IF_9
0x4003ac2	          0x83e001	                              and eax, 1	      1643	convert.c	FUNCTION_47	IF_3	IF_9
0x4003ac5	            0x84c0	                             test al, al	      1643	convert.c	FUNCTION_47	IF_3	IF_9
0x4003ac7	            0x751c	                           jne 0x4003ae5	      1643	convert.c	FUNCTION_47	IF_3	IF_9
0x4003ac9	        0x837ddc00	               cmp dword [rbp - 0x24], 0	      1643	convert.c	FUNCTION_47	IF_3	IF_9
0x4003acd	            0x7416	                            je 0x4003ae5	      1643	convert.c	FUNCTION_47	IF_3	IF_9
0x4003acf	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1644	convert.c	FUNCTION_47	IF_3	IF_9
0x4003ad3	         0xfb65008	               movzx edx, byte [rax + 8]	      1644	convert.c	FUNCTION_47	IF_3	IF_9
0x4003ad7	          0x83ca01	                               or edx, 1	      1644	convert.c	FUNCTION_47	IF_3	IF_9
0x4003ada	          0x885008	                  mov byte [rax + 8], dl	      1644	convert.c	FUNCTION_47	IF_3	IF_9
0x4003add	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1645	convert.c	FUNCTION_47	IF_3	IF_9
0x4003ae1	        0xc640090d	                 mov byte [rax + 9], 0xd	      1645	convert.c	FUNCTION_47	IF_3	IF_9
0x4003ae5	      0xb800000000	                              mov eax, 0	      1648	convert.c	FUNCTION_47
0x4003aea	              0x5d	                                 pop rbp	      1649	convert.c	FUNCTION_47
0x4003aeb	              0xc3	                                     ret	      1649	convert.c	FUNCTION_47
trace_encoding	ELSE,0:FOR,1:WHILE,0:IF,0:CALL,4:functions,0:SWITCH,0:DO,0	106
0x4000c40	              0x55	                                push rbp	       329	convert.c	FUNCTION_13
0x4000c41	          0x4889e5	                            mov rbp, rsp	       329	convert.c	FUNCTION_13
0x4000c44	        0x4883ec60	                           sub rsp, 0x60	       329	convert.c	FUNCTION_13
0x4000c48	        0x48897dc8	             mov qword [rbp - 0x38], rdi	       329	convert.c	FUNCTION_13
0x4000c4c	        0x488975c0	             mov qword [rbp - 0x40], rsi	       329	convert.c	FUNCTION_13
0x4000c50	        0x488955b8	             mov qword [rbp - 0x48], rdx	       329	convert.c	FUNCTION_13
0x4000c54	        0x48894db0	             mov qword [rbp - 0x50], rcx	       329	convert.c	FUNCTION_13
0x4000c58	        0x4c8945a8	              mov qword [rbp - 0x58], r8	       329	convert.c	FUNCTION_13
0x4000c5c	    0x64488b042528	                mov rax, qword fs:[0x28]	       329	convert.c	FUNCTION_13
0x4000c65	        0x488945f8	                mov qword [rbp - 8], rax	       329	convert.c	FUNCTION_13
0x4000c69	            0x31c0	                            xor eax, eax	       329	convert.c	FUNCTION_13
0x4000c6b	    0x48c745e00000	               mov qword [rbp - 0x20], 0	       331	convert.c	FUNCTION_13
0x4000c73	    0x48c745e80000	               mov qword [rbp - 0x18], 0	       331	convert.c	FUNCTION_13
0x4000c7b	    0x48c745f00000	               mov qword [rbp - 0x10], 0	       331	convert.c	FUNCTION_13
0x4000c83	        0x488b75b8	             mov rsi, qword [rbp - 0x48]	       334	convert.c	FUNCTION_13	CALL_1
0x4000c87	        0x488b4dc0	             mov rcx, qword [rbp - 0x40]	       334	convert.c	FUNCTION_13	CALL_1
0x4000c8b	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	       334	convert.c	FUNCTION_13	CALL_1
0x4000c8f	        0x488d45e0	                   lea rax, [rbp - 0x20]	       334	convert.c	FUNCTION_13	CALL_1
0x4000c93	          0x4989f0	                             mov r8, rsi	       334	convert.c	FUNCTION_13	CALL_1
0x4000c96	      0xbe00000000	                              mov esi, 0	       334	convert.c	FUNCTION_13	CALL_1
0x4000c9b	          0x4889c7	                            mov rdi, rax	       334	convert.c	FUNCTION_13	CALL_1
0x4000c9e	      0xb800000000	                              mov eax, 0	       334	convert.c	FUNCTION_13	CALL_1
0x4000ca3	      0xe800000000	                          call 0x4000ca8	       334	convert.c	FUNCTION_13	CALL_1
0x4000ca8	    0xc745dc000000	               mov dword [rbp - 0x24], 0	       335	convert.c	FUNCTION_13	FOR_1
0x4000caf	      0xe99f000000	                           jmp 0x4000d53	       335	convert.c	FUNCTION_13	FOR_1
0x4000cb4	          0x8b45dc	             mov eax, dword [rbp - 0x24]	       341	convert.c	FUNCTION_13	FOR_1
0x4000cb7	          0x83c001	                              add eax, 1	       341	convert.c	FUNCTION_13	FOR_1
0x4000cba	          0x83e007	                              and eax, 7	       341	convert.c	FUNCTION_13	FOR_1
0x4000cbd	            0x85c0	                           test eax, eax	       336	convert.c	FUNCTION_13	FOR_1	CALL_2
0x4000cbf	            0x7415	                            je 0x4000cd6	       336	convert.c	FUNCTION_13	FOR_1	CALL_2
0x4000cc1	          0x8b45dc	             mov eax, dword [rbp - 0x24]	       341	convert.c	FUNCTION_13	FOR_1
0x4000cc4	          0x83c001	                              add eax, 1	       341	convert.c	FUNCTION_13	FOR_1
0x4000cc7	            0x4898	                                    cdqe	       341	convert.c	FUNCTION_13	FOR_1
0x4000cc9	        0x483b45a8	             cmp rax, qword [rbp - 0x58]	       341	convert.c	FUNCTION_13	FOR_1
0x4000ccd	            0x7307	                           jae 0x4000cd6	       341	convert.c	FUNCTION_13	FOR_1
0x4000ccf	      0xbf20000000	                           mov edi, 0x20	       336	convert.c	FUNCTION_13	FOR_1	CALL_2
0x4000cd4	            0xeb05	                           jmp 0x4000cdb	       336	convert.c	FUNCTION_13	FOR_1	CALL_2
0x4000cd6	      0xbf0a000000	                            mov edi, 0xa	       336	convert.c	FUNCTION_13	FOR_1	CALL_2
0x4000cdb	          0x8b45dc	             mov eax, dword [rbp - 0x24]	       340	convert.c	FUNCTION_13	FOR_1
0x4000cde	          0x4863d0	                         movsxd rdx, eax	       340	convert.c	FUNCTION_13	FOR_1
0x4000ce1	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       340	convert.c	FUNCTION_13	FOR_1
0x4000ce5	          0x4801d0	                            add rax, rdx	       340	convert.c	FUNCTION_13	FOR_1
0x4000ce8	           0xfb600	                   movzx eax, byte [rax]	       340	convert.c	FUNCTION_13	FOR_1
0x4000ceb	            0x3c20	                            cmp al, 0x20	       336	convert.c	FUNCTION_13	FOR_1	CALL_2
0x4000ced	            0x7e29	                           jle 0x4000d18	       336	convert.c	FUNCTION_13	FOR_1	CALL_2
0x4000cef	          0x8b45dc	             mov eax, dword [rbp - 0x24]	       340	convert.c	FUNCTION_13	FOR_1
0x4000cf2	          0x4863d0	                         movsxd rdx, eax	       340	convert.c	FUNCTION_13	FOR_1
0x4000cf5	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       340	convert.c	FUNCTION_13	FOR_1
0x4000cf9	          0x4801d0	                            add rax, rdx	       340	convert.c	FUNCTION_13	FOR_1
0x4000cfc	           0xfb600	                   movzx eax, byte [rax]	       340	convert.c	FUNCTION_13	FOR_1
0x4000cff	            0x3c7f	                            cmp al, 0x7f	       340	convert.c	FUNCTION_13	FOR_1
0x4000d01	            0x7415	                            je 0x4000d18	       340	convert.c	FUNCTION_13	FOR_1
0x4000d03	          0x8b45dc	             mov eax, dword [rbp - 0x24]	       340	convert.c	FUNCTION_13	FOR_1
0x4000d06	          0x4863d0	                         movsxd rdx, eax	       340	convert.c	FUNCTION_13	FOR_1
0x4000d09	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       340	convert.c	FUNCTION_13	FOR_1
0x4000d0d	          0x4801d0	                            add rax, rdx	       340	convert.c	FUNCTION_13	FOR_1
0x4000d10	           0xfb600	                   movzx eax, byte [rax]	       340	convert.c	FUNCTION_13	FOR_1
0x4000d13	           0xfbef0	                           movsx esi, al	       336	convert.c	FUNCTION_13	FOR_1	CALL_2
0x4000d16	            0xeb05	                           jmp 0x4000d1d	       336	convert.c	FUNCTION_13	FOR_1	CALL_2
0x4000d18	      0xbe20000000	                           mov esi, 0x20	       336	convert.c	FUNCTION_13	FOR_1	CALL_2
0x4000d1d	          0x8b45dc	             mov eax, dword [rbp - 0x24]	       339	convert.c	FUNCTION_13	FOR_1
0x4000d20	          0x4863d0	                         movsxd rdx, eax	       339	convert.c	FUNCTION_13	FOR_1
0x4000d23	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       339	convert.c	FUNCTION_13	FOR_1
0x4000d27	          0x4801d0	                            add rax, rdx	       339	convert.c	FUNCTION_13	FOR_1
0x4000d2a	           0xfb600	                   movzx eax, byte [rax]	       339	convert.c	FUNCTION_13	FOR_1
0x4000d2d	           0xfb6c8	                           movzx ecx, al	       336	convert.c	FUNCTION_13	FOR_1	CALL_2
0x4000d30	          0x8b55dc	             mov edx, dword [rbp - 0x24]	       336	convert.c	FUNCTION_13	FOR_1	CALL_2
0x4000d33	        0x488d45e0	                   lea rax, [rbp - 0x20]	       336	convert.c	FUNCTION_13	FOR_1	CALL_2
0x4000d37	          0x4189f9	                            mov r9d, edi	       336	convert.c	FUNCTION_13	FOR_1	CALL_2
0x4000d3a	          0x4189f0	                            mov r8d, esi	       336	convert.c	FUNCTION_13	FOR_1	CALL_2
0x4000d3d	      0xbe00000000	                              mov esi, 0	       336	convert.c	FUNCTION_13	FOR_1	CALL_2
0x4000d42	          0x4889c7	                            mov rdi, rax	       336	convert.c	FUNCTION_13	FOR_1	CALL_2
0x4000d45	      0xb800000000	                              mov eax, 0	       336	convert.c	FUNCTION_13	FOR_1	CALL_2
0x4000d4a	      0xe800000000	                          call 0x4000d4f	       336	convert.c	FUNCTION_13	FOR_1	CALL_2
0x4000d4f	        0x8345dc01	               add dword [rbp - 0x24], 1	       335	convert.c	FUNCTION_13	FOR_1
0x4000d53	          0x8b45dc	             mov eax, dword [rbp - 0x24]	       335	convert.c	FUNCTION_13	FOR_1
0x4000d56	            0x4898	                                    cdqe	       335	convert.c	FUNCTION_13	FOR_1
0x4000d58	        0x483b45a8	             cmp rax, qword [rbp - 0x58]	       335	convert.c	FUNCTION_13	FOR_1
0x4000d5c	            0x730b	                           jae 0x4000d69	       335	convert.c	FUNCTION_13	FOR_1
0x4000d5e	      0x48837db000	               cmp qword [rbp - 0x50], 0	       335	convert.c	FUNCTION_13	FOR_1
0x4000d63	     0xf854bffffff	                           jne 0x4000cb4	       335	convert.c	FUNCTION_13	FOR_1
0x4000d69	        0x488d45e0	                   lea rax, [rbp - 0x20]	       344	convert.c	FUNCTION_13	CALL_3
0x4000d6d	      0xba01000000	                              mov edx, 1	       344	convert.c	FUNCTION_13	CALL_3
0x4000d72	      0xbe0a000000	                            mov esi, 0xa	       344	convert.c	FUNCTION_13	CALL_3
0x4000d77	          0x4889c7	                            mov rdi, rax	       344	convert.c	FUNCTION_13	CALL_3
0x4000d7a	      0xe800000000	                          call 0x4000d7f	       344	convert.c	FUNCTION_13	CALL_3
0x4000d7f	      0xbf00000000	                              mov edi, 0	       346	convert.c	FUNCTION_13
0x4000d84	      0xe84bf5ffff	                  call sym.trace_pass_fl	       346	convert.c	FUNCTION_13
0x4000d89	            0x85c0	                           test eax, eax	       346	convert.c	FUNCTION_13
0x4000d8b	            0x741b	                            je 0x4000da8	       346	convert.c	FUNCTION_13
0x4000d8d	        0x488d45e0	                   lea rax, [rbp - 0x20]	       346	convert.c	FUNCTION_13
0x4000d91	          0x4889c1	                            mov rcx, rax	       346	convert.c	FUNCTION_13
0x4000d94	      0xba00000000	                              mov edx, 0	       346	convert.c	FUNCTION_13
0x4000d99	      0xbe5a010000	                          mov esi, 0x15a	       346	convert.c	FUNCTION_13
0x4000d9e	      0xbf00000000	                              mov edi, 0	       346	convert.c	FUNCTION_13
0x4000da3	      0xe800000000	                          call 0x4000da8	       346	convert.c	FUNCTION_13
0x4000da8	        0x488d45e0	                   lea rax, [rbp - 0x20]	       347	convert.c	FUNCTION_13	CALL_4
0x4000dac	          0x4889c7	                            mov rdi, rax	       347	convert.c	FUNCTION_13	CALL_4
0x4000daf	      0xe800000000	                          call 0x4000db4	       347	convert.c	FUNCTION_13	CALL_4
0x4000db4	              0x90	                                     nop	       348	convert.c	FUNCTION_13
0x4000db5	        0x488b45f8	                mov rax, qword [rbp - 8]	       348	convert.c	FUNCTION_13
0x4000db9	    0x644833042528	                xor rax, qword fs:[0x28]	       348	convert.c	FUNCTION_13
0x4000dc2	            0x7405	                            je 0x4000dc9	       348	convert.c	FUNCTION_13
0x4000dc4	      0xe800000000	                          call 0x4000dc9	       348	convert.c	FUNCTION_13
0x4000dc9	              0xc9	                                   leave	       348	convert.c	FUNCTION_13
0x4000dca	              0xc3	                                     ret	       348	convert.c	FUNCTION_13
renormalize_buffer	ELSE,0:FOR,0:WHILE,0:IF,1:CALL,2:functions,0:SWITCH,0:DO,0	37
0x400378c	              0x55	                                push rbp	      1494	convert.c	FUNCTION_43
0x400378d	          0x4889e5	                            mov rbp, rsp	      1494	convert.c	FUNCTION_43
0x4003790	        0x4883ec40	                           sub rsp, 0x40	      1494	convert.c	FUNCTION_43
0x4003794	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1494	convert.c	FUNCTION_43
0x4003798	        0x488975e0	             mov qword [rbp - 0x20], rsi	      1494	convert.c	FUNCTION_43
0x400379c	        0x488955d8	             mov qword [rbp - 0x28], rdx	      1494	convert.c	FUNCTION_43
0x40037a0	        0x48894dd0	             mov qword [rbp - 0x30], rcx	      1494	convert.c	FUNCTION_43
0x40037a4	        0x4c8945c8	              mov qword [rbp - 0x38], r8	      1494	convert.c	FUNCTION_43
0x40037a8	        0x488b4dc8	             mov rcx, qword [rbp - 0x38]	      1495	convert.c	FUNCTION_43	CALL_1
0x40037ac	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	      1495	convert.c	FUNCTION_43	CALL_1
0x40037b0	        0x488b75d8	             mov rsi, qword [rbp - 0x28]	      1495	convert.c	FUNCTION_43	CALL_1
0x40037b4	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1495	convert.c	FUNCTION_43	CALL_1
0x40037b8	    0x41b900000000	                              mov r9d, 0	      1495	convert.c	FUNCTION_43	CALL_1
0x40037be	    0x41b801000000	                              mov r8d, 1	      1495	convert.c	FUNCTION_43	CALL_1
0x40037c4	          0x4889c7	                            mov rdi, rax	      1495	convert.c	FUNCTION_43	CALL_1
0x40037c7	      0xe882fdffff	call sym.convert_to_working_tree_internal	      1495	convert.c	FUNCTION_43	CALL_1
0x40037cc	          0x8945fc	                mov dword [rbp - 4], eax	      1495	convert.c	FUNCTION_43	CALL_1
0x40037cf	        0x837dfc00	                  cmp dword [rbp - 4], 0	      1496	convert.c	FUNCTION_43	IF_1
0x40037d3	            0x7418	                            je 0x40037ed	      1496	convert.c	FUNCTION_43	IF_1
0x40037d5	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1497	convert.c	FUNCTION_43	IF_1
0x40037d9	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1497	convert.c	FUNCTION_43	IF_1
0x40037dd	        0x488945d8	             mov qword [rbp - 0x28], rax	      1497	convert.c	FUNCTION_43	IF_1
0x40037e1	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1498	convert.c	FUNCTION_43	IF_1
0x40037e5	        0x488b4008	                mov rax, qword [rax + 8]	      1498	convert.c	FUNCTION_43	IF_1
0x40037e9	        0x488945d0	             mov qword [rbp - 0x30], rax	      1498	convert.c	FUNCTION_43	IF_1
0x40037ed	        0x488b7dc8	             mov rdi, qword [rbp - 0x38]	      1500	convert.c	FUNCTION_43	CALL_2
0x40037f1	        0x488b4dd0	             mov rcx, qword [rbp - 0x30]	      1500	convert.c	FUNCTION_43	CALL_2
0x40037f5	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      1500	convert.c	FUNCTION_43	CALL_2
0x40037f9	        0x488b75e0	             mov rsi, qword [rbp - 0x20]	      1500	convert.c	FUNCTION_43	CALL_2
0x40037fd	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1500	convert.c	FUNCTION_43	CALL_2
0x4003801	    0x41b904000000	                              mov r9d, 4	      1500	convert.c	FUNCTION_43	CALL_2
0x4003807	          0x4989f8	                             mov r8, rdi	      1500	convert.c	FUNCTION_43	CALL_2
0x400380a	          0x4889c7	                            mov rdi, rax	      1500	convert.c	FUNCTION_43	CALL_2
0x400380d	      0xe800000000	                          call 0x4003812	      1500	convert.c	FUNCTION_43	CALL_2
0x4003812	           0xb45fc	                 or eax, dword [rbp - 4]	      1500	convert.c	FUNCTION_43	CALL_2
0x4003815	              0xc9	                                   leave	      1501	convert.c	FUNCTION_43
0x4003816	              0xc3	                                     ret	      1501	convert.c	FUNCTION_43
ident_filter_fn	ELSE,1:FOR,0:WHILE,1:IF,11:CALL,12:functions,0:SWITCH,1:DO,0	187
0x4004039	              0x55	                                push rbp	      1819	convert.c	FUNCTION_55
0x400403a	          0x4889e5	                            mov rbp, rsp	      1819	convert.c	FUNCTION_55
0x400403d	        0x4883ec40	                           sub rsp, 0x40	      1819	convert.c	FUNCTION_55
0x4004041	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1819	convert.c	FUNCTION_55
0x4004045	        0x488975e0	             mov qword [rbp - 0x20], rsi	      1819	convert.c	FUNCTION_55
0x4004049	        0x488955d8	             mov qword [rbp - 0x28], rdx	      1819	convert.c	FUNCTION_55
0x400404d	        0x48894dd0	             mov qword [rbp - 0x30], rcx	      1819	convert.c	FUNCTION_55
0x4004051	        0x4c8945c8	              mov qword [rbp - 0x38], r8	      1819	convert.c	FUNCTION_55
0x4004055	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1820	convert.c	FUNCTION_55
0x4004059	        0x488945f8	                mov qword [rbp - 8], rax	      1820	convert.c	FUNCTION_55
0x400405d	      0x48837de000	               cmp qword [rbp - 0x20], 0	      1823	convert.c	FUNCTION_55	IF_1
0x4004062	     0xf8550020000	                           jne 0x40042b8	      1823	convert.c	FUNCTION_55	IF_1
0x4004068	        0x488b45f8	                mov rax, qword [rbp - 8]	      1825	convert.c	FUNCTION_55	IF_1	SWITCH_1
0x400406c	          0x8b4020	            mov eax, dword [rax + 0x20] 	      1825	convert.c	FUNCTION_55	IF_1	SWITCH_1
0x400406f	          0x83c002	                              add eax, 2	      1825	convert.c	FUNCTION_55	IF_1	SWITCH_1
0x4004072	          0x83f801	                              cmp eax, 1	      1825	convert.c	FUNCTION_55	IF_1	SWITCH_1
0x4004075	            0x7621	                           jbe 0x4004098	      1825	convert.c	FUNCTION_55	IF_1	SWITCH_1
0x4004077	        0x488b45f8	                mov rax, qword [rbp - 8]	      1827	convert.c	FUNCTION_55	IF_1	SWITCH_1	CALL_1
0x400407b	          0x8b4020	            mov eax, dword [rax + 0x20] 	      1827	convert.c	FUNCTION_55	IF_1	SWITCH_1	CALL_1
0x400407e	            0x4898	                                    cdqe	      1827	convert.c	FUNCTION_55	IF_1	SWITCH_1	CALL_1
0x4004080	        0x488b55f8	                mov rdx, qword [rbp - 8]	      1827	convert.c	FUNCTION_55	IF_1	SWITCH_1	CALL_1
0x4004084	        0x488d4a08	                      lea rcx, [rdx + 8]	      1827	convert.c	FUNCTION_55	IF_1	SWITCH_1	CALL_1
0x4004088	          0x4889c2	                            mov rdx, rax	      1827	convert.c	FUNCTION_55	IF_1	SWITCH_1	CALL_1
0x400408b	      0xbe00000000	                              mov esi, 0	      1827	convert.c	FUNCTION_55	IF_1	SWITCH_1	CALL_1
0x4004090	          0x4889cf	                            mov rdi, rcx	      1827	convert.c	FUNCTION_55	IF_1	SWITCH_1	CALL_1
0x4004093	      0xe800000000	                          call 0x4004098	      1827	convert.c	FUNCTION_55	IF_1	SWITCH_1	CALL_1
0x4004098	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      1832	convert.c	FUNCTION_55	IF_1	SWITCH_1	CALL_2
0x400409c	        0x488d4dd0	                   lea rcx, [rbp - 0x30]	      1832	convert.c	FUNCTION_55	IF_1	SWITCH_1	CALL_2
0x40040a0	        0x488b45f8	                mov rax, qword [rbp - 8]	      1832	convert.c	FUNCTION_55	IF_1	SWITCH_1	CALL_2
0x40040a4	          0x4889ce	                            mov rsi, rcx	      1832	convert.c	FUNCTION_55	IF_1	SWITCH_1	CALL_2
0x40040a7	          0x4889c7	                            mov rdi, rax	      1832	convert.c	FUNCTION_55	IF_1	SWITCH_1	CALL_2
0x40040aa	      0xe8ccfeffff	                    call sym.ident_drain	      1832	convert.c	FUNCTION_55	IF_1	SWITCH_1	CALL_2
0x40040af	      0xb800000000	                              mov eax, 0	      1834	convert.c	FUNCTION_55	IF_1
0x40040b4	      0xe927020000	                           jmp 0x40042e0	      1834	convert.c	FUNCTION_55	IF_1
0x40040b9	        0x488b45f8	                mov rax, qword [rbp - 8]	      1840	convert.c	FUNCTION_55	WHILE_1	IF_2
0x40040bd	          0x8b4020	            mov eax, dword [rax + 0x20] 	      1840	convert.c	FUNCTION_55	WHILE_1	IF_2
0x40040c0	          0x83f8ff	             cmp eax, 0xffffffffffffffff	      1840	convert.c	FUNCTION_55	WHILE_1	IF_2
0x40040c3	            0x752c	                           jne 0x40040f1	      1840	convert.c	FUNCTION_55	WHILE_1	IF_2
0x40040c5	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      1841	convert.c	FUNCTION_55	WHILE_1	IF_2	CALL_3
0x40040c9	        0x488d4dd0	                   lea rcx, [rbp - 0x30]	      1841	convert.c	FUNCTION_55	WHILE_1	IF_2	CALL_3
0x40040cd	        0x488b45f8	                mov rax, qword [rbp - 8]	      1841	convert.c	FUNCTION_55	WHILE_1	IF_2	CALL_3
0x40040d1	          0x4889ce	                            mov rsi, rcx	      1841	convert.c	FUNCTION_55	WHILE_1	IF_2	CALL_3
0x40040d4	          0x4889c7	                            mov rdi, rax	      1841	convert.c	FUNCTION_55	WHILE_1	IF_2	CALL_3
0x40040d7	      0xe89ffeffff	                    call sym.ident_drain	      1841	convert.c	FUNCTION_55	WHILE_1	IF_2	CALL_3
0x40040dc	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1842	convert.c	FUNCTION_55	WHILE_1	IF_2	IF_3
0x40040e0	          0x488b00	                    mov rax, qword [rax]	      1842	convert.c	FUNCTION_55	WHILE_1	IF_2	IF_3
0x40040e3	          0x4885c0	                           test rax, rax	      1842	convert.c	FUNCTION_55	WHILE_1	IF_2	IF_3
0x40040e6	     0xf84ee010000	                            je 0x40042da	      1842	convert.c	FUNCTION_55	WHILE_1	IF_2	IF_3
0x40040ec	      0xe9c7010000	                           jmp 0x40042b8	      1844	convert.c	FUNCTION_55	WHILE_1	IF_2
0x40040f1	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1847	convert.c	FUNCTION_55	WHILE_1
0x40040f5	        0x488d5001	                      lea rdx, [rax + 1]	      1847	convert.c	FUNCTION_55	WHILE_1
0x40040f9	        0x488955e0	             mov qword [rbp - 0x20], rdx	      1847	convert.c	FUNCTION_55	WHILE_1
0x40040fd	           0xfb600	                   movzx eax, byte [rax]	      1847	convert.c	FUNCTION_55	WHILE_1
0x4004100	           0xfbec0	                           movsx eax, al	      1847	convert.c	FUNCTION_55	WHILE_1
0x4004103	          0x8945f4	              mov dword [rbp - 0xc], eax	      1847	convert.c	FUNCTION_55	WHILE_1
0x4004106	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1848	convert.c	FUNCTION_55	WHILE_1
0x400410a	          0x488b00	                    mov rax, qword [rax]	      1848	convert.c	FUNCTION_55	WHILE_1
0x400410d	        0x488d50ff	                      lea rdx, [rax - 1]	      1848	convert.c	FUNCTION_55	WHILE_1
0x4004111	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1848	convert.c	FUNCTION_55	WHILE_1
0x4004115	          0x488910	                    mov qword [rax], rdx	      1848	convert.c	FUNCTION_55	WHILE_1
0x4004118	        0x488b45f8	                mov rax, qword [rbp - 8]	      1850	convert.c	FUNCTION_55	WHILE_1	IF_4
0x400411c	          0x8b4020	            mov eax, dword [rax + 0x20] 	      1850	convert.c	FUNCTION_55	WHILE_1	IF_4
0x400411f	          0x83f8fe	             cmp eax, 0xfffffffffffffffe	      1850	convert.c	FUNCTION_55	WHILE_1	IF_4
0x4004122	     0xf8580000000	                           jne 0x40041a8	      1850	convert.c	FUNCTION_55	WHILE_1	IF_4
0x4004128	        0x488b45f8	                mov rax, qword [rbp - 8]	      1855	convert.c	FUNCTION_55	WHILE_1	IF_4	CALL_4
0x400412c	        0x488d5008	                      lea rdx, [rax + 8]	      1855	convert.c	FUNCTION_55	WHILE_1	IF_4	CALL_4
0x4004130	          0x8b45f4	              mov eax, dword [rbp - 0xc]	      1855	convert.c	FUNCTION_55	WHILE_1	IF_4	CALL_4
0x4004133	            0x89c6	                            mov esi, eax	      1855	convert.c	FUNCTION_55	WHILE_1	IF_4	CALL_4
0x4004135	          0x4889d7	                            mov rdi, rdx	      1855	convert.c	FUNCTION_55	WHILE_1	IF_4	CALL_4
0x4004138	      0xe8c8c0ffff	                   call sym.strbuf_addch	      1855	convert.c	FUNCTION_55	WHILE_1	IF_4	CALL_4
0x400413d	        0x837df40a	              cmp dword [rbp - 0xc], 0xa	      1856	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_5
0x4004141	            0x740b	                            je 0x400414e	      1856	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_5
0x4004143	        0x837df424	            cmp dword [rbp - 0xc], 0x24 	      1856	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_5
0x4004147	            0x7405	                            je 0x400414e	      1856	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_5
0x4004149	      0xe96a010000	                           jmp 0x40042b8	      1857	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_5
0x400414e	        0x837df424	            cmp dword [rbp - 0xc], 0x24 	      1858	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_6	CALL_5
0x4004152	            0x7544	                           jne 0x4004198	      1858	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_6	CALL_5
0x4004154	        0x488b45f8	                mov rax, qword [rbp - 8]	      1858	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_6	CALL_5
0x4004158	        0x488b4018	            mov rax, qword [rax + 0x18] 	      1858	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_6	CALL_5
0x400415c	          0x4889c7	                            mov rdi, rax	      1858	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_6	CALL_5
0x400415f	      0xe880fdffff	               call sym.is_foreign_ident	      1858	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_6	CALL_5
0x4004164	            0x85c0	                           test eax, eax	      1858	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_6	CALL_5
0x4004166	            0x7530	                           jne 0x4004198	      1858	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_6	CALL_5
0x4004168	        0x488b45f8	                mov rax, qword [rbp - 8]	      1859	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_6	CALL_6
0x400416c	        0x4883c008	                              add rax, 8	      1859	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_6	CALL_6
0x4004170	      0xbe03000000	                              mov esi, 3	      1859	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_6	CALL_6
0x4004175	          0x4889c7	                            mov rdi, rax	      1859	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_6	CALL_6
0x4004178	      0xe8eebfffff	                  call sym.strbuf_setlen	      1859	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_6	CALL_6
0x400417d	        0x488b45f8	                mov rax, qword [rbp - 8]	      1860	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_6	CALL_7
0x4004181	        0x488d5024	                   lea rdx, [rax + 0x24]	      1860	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_6	CALL_7
0x4004185	        0x488b45f8	                mov rax, qword [rbp - 8]	      1860	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_6	CALL_7
0x4004189	        0x4883c008	                              add rax, 8	      1860	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_6	CALL_7
0x400418d	          0x4889d6	                            mov rsi, rdx	      1860	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_6	CALL_7
0x4004190	          0x4889c7	                            mov rdi, rax	      1860	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_6	CALL_7
0x4004193	      0xe8dbc0ffff	                  call sym.strbuf_addstr	      1860	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_6	CALL_7
0x4004198	        0x488b45f8	                mov rax, qword [rbp - 8]	      1862	convert.c	FUNCTION_55	WHILE_1	IF_4
0x400419c	    0xc74020ffffff	     mov dword [rax + 0x20], 0xffffffff 	      1862	convert.c	FUNCTION_55	WHILE_1	IF_4
0x40041a3	      0xe910010000	                           jmp 0x40042b8	      1863	convert.c	FUNCTION_55	WHILE_1	IF_4
0x40041a8	        0x488b45f8	                mov rax, qword [rbp - 8]	      1866	convert.c	FUNCTION_55	WHILE_1	IF_7
0x40041ac	          0x8b4020	            mov eax, dword [rax + 0x20] 	      1866	convert.c	FUNCTION_55	WHILE_1	IF_7
0x40041af	          0x83f803	                              cmp eax, 3	      1866	convert.c	FUNCTION_55	WHILE_1	IF_7
0x40041b2	            0x772e	                            ja 0x40041e2	      1866	convert.c	FUNCTION_55	WHILE_1	IF_7
0x40041b4	        0x488b45f8	                mov rax, qword [rbp - 8]	      1867	convert.c	FUNCTION_55	WHILE_1	IF_7
0x40041b8	          0x8b4020	            mov eax, dword [rax + 0x20] 	      1867	convert.c	FUNCTION_55	WHILE_1	IF_7
0x40041bb	            0x4898	                                    cdqe	      1867	convert.c	FUNCTION_55	WHILE_1	IF_7
0x40041bd	     0xfb680000000	                   movzx eax, byte [rax]	      1867	convert.c	FUNCTION_55	WHILE_1	IF_7
0x40041c4	           0xfbec0	                           movsx eax, al	      1867	convert.c	FUNCTION_55	WHILE_1	IF_7
0x40041c7	          0x3b45f4	              cmp eax, dword [rbp - 0xc]	      1866	convert.c	FUNCTION_55	WHILE_1	IF_7
0x40041ca	            0x7516	                           jne 0x40041e2	      1866	convert.c	FUNCTION_55	WHILE_1	IF_7
0x40041cc	        0x488b45f8	                mov rax, qword [rbp - 8]	      1868	convert.c	FUNCTION_55	WHILE_1	IF_7
0x40041d0	          0x8b4020	            mov eax, dword [rax + 0x20] 	      1868	convert.c	FUNCTION_55	WHILE_1	IF_7
0x40041d3	          0x8d5001	                      lea edx, [rax + 1]	      1868	convert.c	FUNCTION_55	WHILE_1	IF_7
0x40041d6	        0x488b45f8	                mov rax, qword [rbp - 8]	      1868	convert.c	FUNCTION_55	WHILE_1	IF_7
0x40041da	          0x895020	             mov dword [rax + 0x20], edx	      1868	convert.c	FUNCTION_55	WHILE_1	IF_7
0x40041dd	      0xe9d6000000	                           jmp 0x40042b8	      1869	convert.c	FUNCTION_55	WHILE_1	IF_7
0x40041e2	        0x488b45f8	                mov rax, qword [rbp - 8]	      1872	convert.c	FUNCTION_55	WHILE_1	IF_8
0x40041e6	          0x8b4020	            mov eax, dword [rax + 0x20] 	      1872	convert.c	FUNCTION_55	WHILE_1	IF_8
0x40041e9	            0x85c0	                           test eax, eax	      1872	convert.c	FUNCTION_55	WHILE_1	IF_8
0x40041eb	            0x7421	                            je 0x400420e	      1872	convert.c	FUNCTION_55	WHILE_1	IF_8
0x40041ed	        0x488b45f8	                mov rax, qword [rbp - 8]	      1873	convert.c	FUNCTION_55	WHILE_1	CALL_8
0x40041f1	          0x8b4020	            mov eax, dword [rax + 0x20] 	      1873	convert.c	FUNCTION_55	WHILE_1	CALL_8
0x40041f4	            0x4898	                                    cdqe	      1873	convert.c	FUNCTION_55	WHILE_1	CALL_8
0x40041f6	        0x488b55f8	                mov rdx, qword [rbp - 8]	      1873	convert.c	FUNCTION_55	WHILE_1	CALL_8
0x40041fa	        0x488d4a08	                      lea rcx, [rdx + 8]	      1873	convert.c	FUNCTION_55	WHILE_1	CALL_8
0x40041fe	          0x4889c2	                            mov rdx, rax	      1873	convert.c	FUNCTION_55	WHILE_1	CALL_8
0x4004201	      0xbe00000000	                              mov esi, 0	      1873	convert.c	FUNCTION_55	WHILE_1	CALL_8
0x4004206	          0x4889cf	                            mov rdi, rcx	      1873	convert.c	FUNCTION_55	WHILE_1	CALL_8
0x4004209	      0xe800000000	                          call 0x400420e	      1873	convert.c	FUNCTION_55	WHILE_1	CALL_8
0x400420e	        0x488b45f8	                mov rax, qword [rbp - 8]	      1874	convert.c	FUNCTION_55	WHILE_1	IF_9
0x4004212	          0x8b4020	            mov eax, dword [rax + 0x20] 	      1874	convert.c	FUNCTION_55	WHILE_1	IF_9
0x4004215	          0x83f803	                              cmp eax, 3	      1874	convert.c	FUNCTION_55	WHILE_1	IF_9
0x4004218	            0x757e	                           jne 0x4004298	      1874	convert.c	FUNCTION_55	WHILE_1	IF_9
0x400421a	        0x837df43a	            cmp dword [rbp - 0xc], 0x3a 	      1875	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_10
0x400421e	            0x7428	                            je 0x4004248	      1875	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_10
0x4004220	        0x837df424	            cmp dword [rbp - 0xc], 0x24 	      1875	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_10
0x4004224	            0x7422	                            je 0x4004248	      1875	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_10
0x4004226	        0x488b45f8	                mov rax, qword [rbp - 8]	      1876	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_10	CALL_9
0x400422a	        0x488d5008	                      lea rdx, [rax + 8]	      1876	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_10	CALL_9
0x400422e	          0x8b45f4	              mov eax, dword [rbp - 0xc]	      1876	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_10	CALL_9
0x4004231	            0x89c6	                            mov esi, eax	      1876	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_10	CALL_9
0x4004233	          0x4889d7	                            mov rdi, rdx	      1876	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_10	CALL_9
0x4004236	      0xe8cabfffff	                   call sym.strbuf_addch	      1876	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_10	CALL_9
0x400423b	        0x488b45f8	                mov rax, qword [rbp - 8]	      1877	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_10
0x400423f	    0xc74020000000	               mov dword [rax + 0x20], 0	      1877	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_10
0x4004246	            0xeb70	                           jmp 0x40042b8	      1878	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_10
0x4004248	        0x837df43a	            cmp dword [rbp - 0xc], 0x3a 	      1881	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_11
0x400424c	            0x7522	                           jne 0x4004270	      1881	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_11
0x400424e	        0x488b45f8	                mov rax, qword [rbp - 8]	      1882	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_11	CALL_10
0x4004252	        0x488d5008	                      lea rdx, [rax + 8]	      1882	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_11	CALL_10
0x4004256	          0x8b45f4	              mov eax, dword [rbp - 0xc]	      1882	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_11	CALL_10
0x4004259	            0x89c6	                            mov esi, eax	      1882	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_11	CALL_10
0x400425b	          0x4889d7	                            mov rdi, rdx	      1882	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_11	CALL_10
0x400425e	      0xe8a2bfffff	                   call sym.strbuf_addch	      1882	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_11	CALL_10
0x4004263	        0x488b45f8	                mov rax, qword [rbp - 8]	      1883	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_11
0x4004267	    0xc74020feffff	     mov dword [rax + 0x20], 0xfffffffe 	      1883	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_11
0x400426e	            0xeb48	                           jmp 0x40042b8	      1883	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_11
0x4004270	        0x488b45f8	                mov rax, qword [rbp - 8]	      1885	convert.c	FUNCTION_55	WHILE_1	IF_9	ELSE_1	CALL_11
0x4004274	        0x488d5024	                   lea rdx, [rax + 0x24]	      1885	convert.c	FUNCTION_55	WHILE_1	IF_9	ELSE_1	CALL_11
0x4004278	        0x488b45f8	                mov rax, qword [rbp - 8]	      1885	convert.c	FUNCTION_55	WHILE_1	IF_9	ELSE_1	CALL_11
0x400427c	        0x4883c008	                              add rax, 8	      1885	convert.c	FUNCTION_55	WHILE_1	IF_9	ELSE_1	CALL_11
0x4004280	          0x4889d6	                            mov rsi, rdx	      1885	convert.c	FUNCTION_55	WHILE_1	IF_9	ELSE_1	CALL_11
0x4004283	          0x4889c7	                            mov rdi, rax	      1885	convert.c	FUNCTION_55	WHILE_1	IF_9	ELSE_1	CALL_11
0x4004286	      0xe8e8bfffff	                  call sym.strbuf_addstr	      1885	convert.c	FUNCTION_55	WHILE_1	IF_9	ELSE_1	CALL_11
0x400428b	        0x488b45f8	                mov rax, qword [rbp - 8]	      1886	convert.c	FUNCTION_55	WHILE_1	IF_9	ELSE_1
0x400428f	    0xc74020ffffff	     mov dword [rax + 0x20], 0xffffffff 	      1886	convert.c	FUNCTION_55	WHILE_1	IF_9	ELSE_1
0x4004296	            0xeb20	                           jmp 0x40042b8	      1888	convert.c	FUNCTION_55	WHILE_1	IF_9
0x4004298	        0x488b45f8	                mov rax, qword [rbp - 8]	      1891	convert.c	FUNCTION_55	WHILE_1	CALL_12
0x400429c	        0x488d5008	                      lea rdx, [rax + 8]	      1891	convert.c	FUNCTION_55	WHILE_1	CALL_12
0x40042a0	          0x8b45f4	              mov eax, dword [rbp - 0xc]	      1891	convert.c	FUNCTION_55	WHILE_1	CALL_12
0x40042a3	            0x89c6	                            mov esi, eax	      1891	convert.c	FUNCTION_55	WHILE_1	CALL_12
0x40042a5	          0x4889d7	                            mov rdi, rdx	      1891	convert.c	FUNCTION_55	WHILE_1	CALL_12
0x40042a8	      0xe858bfffff	                   call sym.strbuf_addch	      1891	convert.c	FUNCTION_55	WHILE_1	CALL_12
0x40042ad	        0x488b45f8	                mov rax, qword [rbp - 8]	      1892	convert.c	FUNCTION_55	WHILE_1
0x40042b1	    0xc74020ffffff	     mov dword [rax + 0x20], 0xffffffff 	      1892	convert.c	FUNCTION_55	WHILE_1
0x40042b8	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1837	convert.c	FUNCTION_55	WHILE_1
0x40042bc	          0x488b00	                    mov rax, qword [rax]	      1837	convert.c	FUNCTION_55	WHILE_1
0x40042bf	          0x4885c0	                           test rax, rax	      1837	convert.c	FUNCTION_55	WHILE_1
0x40042c2	     0xf85f1fdffff	                           jne 0x40040b9	      1837	convert.c	FUNCTION_55	WHILE_1
0x40042c8	        0x488b45f8	                mov rax, qword [rbp - 8]	      1837	convert.c	FUNCTION_55	WHILE_1
0x40042cc	          0x8b4020	            mov eax, dword [rax + 0x20] 	      1837	convert.c	FUNCTION_55	WHILE_1
0x40042cf	          0x83f8ff	             cmp eax, 0xffffffffffffffff	      1837	convert.c	FUNCTION_55	WHILE_1
0x40042d2	     0xf84e1fdffff	                            je 0x40040b9	      1837	convert.c	FUNCTION_55	WHILE_1
0x40042d8	            0xeb01	                           jmp 0x40042db	      1837	convert.c	FUNCTION_55	WHILE_1
0x40042da	              0x90	                                     nop	      1843	convert.c	FUNCTION_55	WHILE_1	IF_2	IF_3
0x40042db	      0xb800000000	                              mov eax, 0	      1894	convert.c	FUNCTION_55
0x40042e0	              0xc9	                                   leave	      1895	convert.c	FUNCTION_55
0x40042e1	              0xc3	                                     ret	      1895	convert.c	FUNCTION_55
convert_to_git	ELSE,0:FOR,0:WHILE,0:IF,5:CALL,6:functions,0:SWITCH,0:DO,0	121
0x4003211	              0x55	                                push rbp	      1390	convert.c	FUNCTION_38
0x4003212	          0x4889e5	                            mov rbp, rsp	      1390	convert.c	FUNCTION_38
0x4003215	        0x4883ec70	                           sub rsp, 0x70	      1390	convert.c	FUNCTION_38
0x4003219	        0x48897db8	             mov qword [rbp - 0x48], rdi	      1390	convert.c	FUNCTION_38
0x400321d	        0x488975b0	             mov qword [rbp - 0x50], rsi	      1390	convert.c	FUNCTION_38
0x4003221	        0x488955a8	             mov qword [rbp - 0x58], rdx	      1390	convert.c	FUNCTION_38
0x4003225	        0x48894da0	             mov qword [rbp - 0x60], rcx	      1390	convert.c	FUNCTION_38
0x4003229	        0x4c894598	              mov qword [rbp - 0x68], r8	      1390	convert.c	FUNCTION_38
0x400322d	        0x44894d94	             mov dword [rbp - 0x6c], r9d	      1390	convert.c	FUNCTION_38
0x4003231	    0x64488b042528	                mov rax, qword fs:[0x28]	      1390	convert.c	FUNCTION_38
0x400323a	        0x488945f8	                mov qword [rbp - 8], rax	      1390	convert.c	FUNCTION_38
0x400323e	            0x31c0	                            xor eax, eax	      1390	convert.c	FUNCTION_38
0x4003240	    0xc745cc000000	               mov dword [rbp - 0x34], 0	      1391	convert.c	FUNCTION_38
0x4003247	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	      1394	convert.c	FUNCTION_38	CALL_1
0x400324b	        0x488d45d0	                   lea rax, [rbp - 0x30]	      1394	convert.c	FUNCTION_38	CALL_1
0x400324f	          0x4889d6	                            mov rsi, rdx	      1394	convert.c	FUNCTION_38	CALL_1
0x4003252	          0x4889c7	                            mov rdi, rax	      1394	convert.c	FUNCTION_38	CALL_1
0x4003255	      0xe828fcffff	                  call sym.convert_attrs	      1394	convert.c	FUNCTION_38	CALL_1
0x400325a	        0x488b7dd0	             mov rdi, qword [rbp - 0x30]	      1396	convert.c	FUNCTION_38	CALL_2
0x400325e	        0x488b4d98	             mov rcx, qword [rbp - 0x68]	      1396	convert.c	FUNCTION_38	CALL_2
0x4003262	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	      1396	convert.c	FUNCTION_38	CALL_2
0x4003266	        0x488b75a8	             mov rsi, qword [rbp - 0x58]	      1396	convert.c	FUNCTION_38	CALL_2
0x400326a	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1396	convert.c	FUNCTION_38	CALL_2
0x400326e	            0x6a00	                                  push 0	      1396	convert.c	FUNCTION_38	CALL_2
0x4003270	            0x6a01	                                  push 1	      1396	convert.c	FUNCTION_38	CALL_2
0x4003272	          0x4989f9	                             mov r9, rdi	      1396	convert.c	FUNCTION_38	CALL_2
0x4003275	          0x4989c8	                             mov r8, rcx	      1396	convert.c	FUNCTION_38	CALL_2
0x4003278	      0xb9ffffffff	                     mov ecx, 0xffffffff	      1396	convert.c	FUNCTION_38	CALL_2
0x400327d	          0x4889c7	                            mov rdi, rax	      1396	convert.c	FUNCTION_38	CALL_2
0x4003280	      0xe89ef0ffff	                   call sym.apply_filter	      1396	convert.c	FUNCTION_38	CALL_2
0x4003285	        0x4883c410	                           add rsp, 0x10	      1396	convert.c	FUNCTION_38	CALL_2
0x4003289	           0x945cc	              or dword [rbp - 0x34], eax	      1396	convert.c	FUNCTION_38	CALL_2
0x400328c	        0x837dcc00	               cmp dword [rbp - 0x34], 0	      1397	convert.c	FUNCTION_38	IF_1
0x4003290	            0x7531	                           jne 0x40032c3	      1397	convert.c	FUNCTION_38	IF_1
0x4003292	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1397	convert.c	FUNCTION_38	IF_1
0x4003296	          0x4885c0	                           test rax, rax	      1397	convert.c	FUNCTION_38	IF_1
0x4003299	            0x7428	                            je 0x40032c3	      1397	convert.c	FUNCTION_38	IF_1
0x400329b	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1397	convert.c	FUNCTION_38	IF_1
0x400329f	          0x8b4028	            mov eax, dword [rax + 0x28] 	      1397	convert.c	FUNCTION_38	IF_1
0x40032a2	            0x85c0	                           test eax, eax	      1397	convert.c	FUNCTION_38	IF_1
0x40032a4	            0x741d	                            je 0x40032c3	      1397	convert.c	FUNCTION_38	IF_1
0x40032a6	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1398	convert.c	FUNCTION_38	CALL_3
0x40032aa	          0x488b10	                    mov rdx, qword [rax]	      1398	convert.c	FUNCTION_38	CALL_3
0x40032ad	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1398	convert.c	FUNCTION_38	CALL_3
0x40032b1	          0x4889c6	                            mov rsi, rax	      1398	convert.c	FUNCTION_38	CALL_3
0x40032b4	      0xbf00000000	                              mov edi, 0	      1398	convert.c	FUNCTION_38	CALL_3
0x40032b9	      0xb800000000	                              mov eax, 0	      1398	convert.c	FUNCTION_38	CALL_3
0x40032be	      0xe800000000	                          call 0x40032c3	      1398	convert.c	FUNCTION_38	CALL_3
0x40032c3	        0x837dcc00	               cmp dword [rbp - 0x34], 0	      1400	convert.c	FUNCTION_38	IF_2
0x40032c7	            0x741f	                            je 0x40032e8	      1400	convert.c	FUNCTION_38	IF_2
0x40032c9	      0x48837d9800	               cmp qword [rbp - 0x68], 0	      1400	convert.c	FUNCTION_38	IF_2
0x40032ce	            0x7418	                            je 0x40032e8	      1400	convert.c	FUNCTION_38	IF_2
0x40032d0	        0x488b4598	             mov rax, qword [rbp - 0x68]	      1401	convert.c	FUNCTION_38	IF_2
0x40032d4	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1401	convert.c	FUNCTION_38	IF_2
0x40032d8	        0x488945a8	             mov qword [rbp - 0x58], rax	      1401	convert.c	FUNCTION_38	IF_2
0x40032dc	        0x488b4598	             mov rax, qword [rbp - 0x68]	      1402	convert.c	FUNCTION_38	IF_2
0x40032e0	        0x488b4008	                mov rax, qword [rax + 8]	      1402	convert.c	FUNCTION_38	IF_2
0x40032e4	        0x488945a0	             mov qword [rbp - 0x60], rax	      1402	convert.c	FUNCTION_38	IF_2
0x40032e8	        0x488b7de8	             mov rdi, qword [rbp - 0x18]	      1405	convert.c	FUNCTION_38	CALL_4
0x40032ec	        0x448b4594	             mov r8d, dword [rbp - 0x6c]	      1405	convert.c	FUNCTION_38	CALL_4
0x40032f0	        0x488b4d98	             mov rcx, qword [rbp - 0x68]	      1405	convert.c	FUNCTION_38	CALL_4
0x40032f4	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	      1405	convert.c	FUNCTION_38	CALL_4
0x40032f8	        0x488b75a8	             mov rsi, qword [rbp - 0x58]	      1405	convert.c	FUNCTION_38	CALL_4
0x40032fc	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1405	convert.c	FUNCTION_38	CALL_4
0x4003300	          0x4589c1	                            mov r9d, r8d	      1405	convert.c	FUNCTION_38	CALL_4
0x4003303	          0x4989f8	                             mov r8, rdi	      1405	convert.c	FUNCTION_38	CALL_4
0x4003306	          0x4889c7	                            mov rdi, rax	      1405	convert.c	FUNCTION_38	CALL_4
0x4003309	      0xe8c9dbffff	                  call sym.encode_to_git	      1405	convert.c	FUNCTION_38	CALL_4
0x400330e	           0x945cc	              or dword [rbp - 0x34], eax	      1405	convert.c	FUNCTION_38	CALL_4
0x4003311	        0x837dcc00	               cmp dword [rbp - 0x34], 0	      1406	convert.c	FUNCTION_38	IF_3
0x4003315	            0x741f	                            je 0x4003336	      1406	convert.c	FUNCTION_38	IF_3
0x4003317	      0x48837d9800	               cmp qword [rbp - 0x68], 0	      1406	convert.c	FUNCTION_38	IF_3
0x400331c	            0x7418	                            je 0x4003336	      1406	convert.c	FUNCTION_38	IF_3
0x400331e	        0x488b4598	             mov rax, qword [rbp - 0x68]	      1407	convert.c	FUNCTION_38	IF_3
0x4003322	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1407	convert.c	FUNCTION_38	IF_3
0x4003326	        0x488945a8	             mov qword [rbp - 0x58], rax	      1407	convert.c	FUNCTION_38	IF_3
0x400332a	        0x488b4598	             mov rax, qword [rbp - 0x68]	      1408	convert.c	FUNCTION_38	IF_3
0x400332e	        0x488b4008	                mov rax, qword [rax + 8]	      1408	convert.c	FUNCTION_38	IF_3
0x4003332	        0x488945a0	             mov qword [rbp - 0x60], rax	      1408	convert.c	FUNCTION_38	IF_3
0x4003336	          0x8b4594	             mov eax, dword [rbp - 0x6c]	      1411	convert.c	FUNCTION_38	IF_4
0x4003339	          0x83e008	                              and eax, 8	      1411	convert.c	FUNCTION_38	IF_4
0x400333c	            0x85c0	                           test eax, eax	      1411	convert.c	FUNCTION_38	IF_4
0x400333e	            0x7554	                           jne 0x4003394	      1411	convert.c	FUNCTION_38	IF_4
0x4003340	        0x448b4ddc	             mov r9d, dword [rbp - 0x24]	      1412	convert.c	FUNCTION_38	IF_4	CALL_5
0x4003344	        0x4c8b4598	              mov r8, qword [rbp - 0x68]	      1412	convert.c	FUNCTION_38	IF_4	CALL_5
0x4003348	        0x488b4da0	             mov rcx, qword [rbp - 0x60]	      1412	convert.c	FUNCTION_38	IF_4	CALL_5
0x400334c	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      1412	convert.c	FUNCTION_38	IF_4	CALL_5
0x4003350	        0x488b75b0	             mov rsi, qword [rbp - 0x50]	      1412	convert.c	FUNCTION_38	IF_4	CALL_5
0x4003354	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1412	convert.c	FUNCTION_38	IF_4	CALL_5
0x4003358	        0x4883ec08	                              sub rsp, 8	      1412	convert.c	FUNCTION_38	IF_4	CALL_5
0x400335c	          0x8b7d94	             mov edi, dword [rbp - 0x6c]	      1412	convert.c	FUNCTION_38	IF_4	CALL_5
0x400335f	              0x57	                                push rdi	      1412	convert.c	FUNCTION_38	IF_4	CALL_5
0x4003360	          0x4889c7	                            mov rdi, rax	      1412	convert.c	FUNCTION_38	IF_4	CALL_5
0x4003363	      0xe8fedeffff	                    call sym.crlf_to_git	      1412	convert.c	FUNCTION_38	IF_4	CALL_5
0x4003368	        0x4883c410	                           add rsp, 0x10	      1412	convert.c	FUNCTION_38	IF_4	CALL_5
0x400336c	           0x945cc	              or dword [rbp - 0x34], eax	      1412	convert.c	FUNCTION_38	IF_4	CALL_5
0x400336f	        0x837dcc00	               cmp dword [rbp - 0x34], 0	      1413	convert.c	FUNCTION_38	IF_4	IF_5
0x4003373	            0x741f	                            je 0x4003394	      1413	convert.c	FUNCTION_38	IF_4	IF_5
0x4003375	      0x48837d9800	               cmp qword [rbp - 0x68], 0	      1413	convert.c	FUNCTION_38	IF_4	IF_5
0x400337a	            0x7418	                            je 0x4003394	      1413	convert.c	FUNCTION_38	IF_4	IF_5
0x400337c	        0x488b4598	             mov rax, qword [rbp - 0x68]	      1414	convert.c	FUNCTION_38	IF_4	IF_5
0x4003380	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1414	convert.c	FUNCTION_38	IF_4	IF_5
0x4003384	        0x488945a8	             mov qword [rbp - 0x58], rax	      1414	convert.c	FUNCTION_38	IF_4	IF_5
0x4003388	        0x488b4598	             mov rax, qword [rbp - 0x68]	      1415	convert.c	FUNCTION_38	IF_4	IF_5
0x400338c	        0x488b4008	                mov rax, qword [rax + 8]	      1415	convert.c	FUNCTION_38	IF_4	IF_5
0x4003390	        0x488945a0	             mov qword [rbp - 0x60], rax	      1415	convert.c	FUNCTION_38	IF_4	IF_5
0x4003394	          0x8b7de0	             mov edi, dword [rbp - 0x20]	      1418	convert.c	FUNCTION_38	CALL_6
0x4003397	        0x488b4d98	             mov rcx, qword [rbp - 0x68]	      1418	convert.c	FUNCTION_38	CALL_6
0x400339b	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	      1418	convert.c	FUNCTION_38	CALL_6
0x400339f	        0x488b75a8	             mov rsi, qword [rbp - 0x58]	      1418	convert.c	FUNCTION_38	CALL_6
0x40033a3	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1418	convert.c	FUNCTION_38	CALL_6
0x40033a7	          0x4189f8	                            mov r8d, edi	      1418	convert.c	FUNCTION_38	CALL_6
0x40033aa	          0x4889c7	                            mov rdi, rax	      1418	convert.c	FUNCTION_38	CALL_6
0x40033ad	      0xe86ef3ffff	                   call sym.ident_to_git	      1418	convert.c	FUNCTION_38	CALL_6
0x40033b2	           0xb45cc	              or eax, dword [rbp - 0x34]	      1418	convert.c	FUNCTION_38	CALL_6
0x40033b5	        0x488b4df8	                mov rcx, qword [rbp - 8]	      1419	convert.c	FUNCTION_38
0x40033b9	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      1419	convert.c	FUNCTION_38
0x40033c2	            0x7405	                            je 0x40033c9	      1419	convert.c	FUNCTION_38
0x40033c4	      0xe800000000	                          call 0x40033c9	      1419	convert.c	FUNCTION_38
0x40033c9	              0xc9	                                   leave	      1419	convert.c	FUNCTION_38
0x40033ca	              0xc3	                                     ret	      1419	convert.c	FUNCTION_38
gather_stats	ELSE,3:FOR,1:WHILE,0:IF,6:CALL,1:functions,0:SWITCH,1:DO,0	111
0x4000304	              0x55	                                push rbp	        46	convert.c	IF_6	FUNCTION_1
0x4000305	          0x4889e5	                            mov rbp, rsp	        46	convert.c	IF_6	FUNCTION_1
0x4000308	        0x4883ec30	                           sub rsp, 0x30	        46	convert.c	IF_6	FUNCTION_1
0x400030c	        0x48897de8	             mov qword [rbp - 0x18], rdi	        46	convert.c	IF_6	FUNCTION_1
0x4000310	        0x488975e0	             mov qword [rbp - 0x20], rsi	        46	convert.c	IF_6	FUNCTION_1
0x4000314	        0x488955d8	             mov qword [rbp - 0x28], rdx	        46	convert.c	IF_6	FUNCTION_1
0x4000318	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        49	convert.c	IF_6	FUNCTION_1	CALL_1
0x400031c	      0xba18000000	                           mov edx, 0x18	        49	convert.c	IF_6	FUNCTION_1	CALL_1
0x4000321	      0xbe00000000	                              mov esi, 0	        49	convert.c	IF_6	FUNCTION_1	CALL_1
0x4000326	          0x4889c7	                            mov rdi, rax	        49	convert.c	IF_6	FUNCTION_1	CALL_1
0x4000329	      0xe800000000	                          call 0x400032e	        49	convert.c	IF_6	FUNCTION_1	CALL_1
0x400032e	    0x48c745f80000	                  mov qword [rbp - 8], 0	        51	convert.c	IF_6	FUNCTION_1	FOR_1
0x4000336	      0xe904010000	                           jmp 0x400043f	        51	convert.c	IF_6	FUNCTION_1	FOR_1
0x400033b	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	        52	convert.c	IF_6	FUNCTION_1	FOR_1
0x400033f	        0x488b45f8	                mov rax, qword [rbp - 8]	        52	convert.c	IF_6	FUNCTION_1	FOR_1
0x4000343	          0x4801d0	                            add rax, rdx	        52	convert.c	IF_6	FUNCTION_1	FOR_1
0x4000346	           0xfb600	                   movzx eax, byte [rax]	        52	convert.c	IF_6	FUNCTION_1	FOR_1
0x4000349	          0x8845f7	                  mov byte [rbp - 9], al	        52	convert.c	IF_6	FUNCTION_1	FOR_1
0x400034c	        0x807df70d	                 cmp byte [rbp - 9], 0xd	        53	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1
0x4000350	            0x7555	                           jne 0x40003a7	        53	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1
0x4000352	        0x488b45f8	                mov rax, qword [rbp - 8]	        54	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	IF_2
0x4000356	        0x4883c001	                              add rax, 1	        54	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	IF_2
0x400035a	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	        54	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	IF_2
0x400035e	            0x7331	                           jae 0x4000391	        54	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	IF_2
0x4000360	        0x488b45f8	                mov rax, qword [rbp - 8]	        54	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	IF_2
0x4000364	        0x488d5001	                      lea rdx, [rax + 1]	        54	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	IF_2
0x4000368	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        54	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	IF_2
0x400036c	          0x4801d0	                            add rax, rdx	        54	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	IF_2
0x400036f	           0xfb600	                   movzx eax, byte [rax]	        54	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	IF_2
0x4000372	            0x3c0a	                             cmp al, 0xa	        54	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	IF_2
0x4000374	            0x751b	                           jne 0x4000391	        54	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	IF_2
0x4000376	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        55	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	IF_2
0x400037a	          0x8b400c	              mov eax, dword [rax + 0xc]	        55	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	IF_2
0x400037d	          0x8d5001	                      lea edx, [rax + 1]	        55	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	IF_2
0x4000380	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        55	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	IF_2
0x4000384	          0x89500c	              mov dword [rax + 0xc], edx	        55	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	IF_2
0x4000387	      0x488345f801	                  add qword [rbp - 8], 1	        56	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	IF_2
0x400038c	      0xe9a9000000	                           jmp 0x400043a	        59	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	ELSE_1
0x4000391	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        58	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	ELSE_1
0x4000395	          0x8b4004	                mov eax, dword [rax + 4]	        58	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	ELSE_1
0x4000398	          0x8d5001	                      lea edx, [rax + 1]	        58	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	ELSE_1
0x400039b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        58	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	ELSE_1
0x400039f	          0x895004	                mov dword [rax + 4], edx	        58	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	ELSE_1
0x40003a2	      0xe993000000	                           jmp 0x400043a	        59	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	ELSE_1
0x40003a7	        0x807df70a	                 cmp byte [rbp - 9], 0xa	        61	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_1	IF_3
0x40003ab	            0x7513	                           jne 0x40003c0	        61	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_1	IF_3
0x40003ad	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        62	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_1	IF_3
0x40003b1	          0x8b4008	                mov eax, dword [rax + 8]	        62	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_1	IF_3
0x40003b4	          0x8d5001	                      lea edx, [rax + 1]	        62	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_1	IF_3
0x40003b7	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        62	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_1	IF_3
0x40003bb	          0x895008	                mov dword [rax + 8], edx	        62	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_1	IF_3
0x40003be	            0xeb7a	                           jmp 0x400043a	        63	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_1	IF_3
0x40003c0	        0x807df77f	                cmp byte [rbp - 9], 0x7f	        65	convert.c	IF_6	FUNCTION_1	FOR_1	IF_4
0x40003c4	            0x7513	                           jne 0x40003d9	        65	convert.c	IF_6	FUNCTION_1	FOR_1	IF_4
0x40003c6	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        67	convert.c	IF_6	FUNCTION_1	FOR_1	IF_4
0x40003ca	          0x8b4014	            mov eax, dword [rax + 0x14] 	        67	convert.c	IF_6	FUNCTION_1	FOR_1	IF_4
0x40003cd	          0x8d5001	                      lea edx, [rax + 1]	        67	convert.c	IF_6	FUNCTION_1	FOR_1	IF_4
0x40003d0	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        67	convert.c	IF_6	FUNCTION_1	FOR_1	IF_4
0x40003d4	          0x895014	             mov dword [rax + 0x14], edx	        67	convert.c	IF_6	FUNCTION_1	FOR_1	IF_4
0x40003d7	            0xeb61	                           jmp 0x400043a	        67	convert.c	IF_6	FUNCTION_1	FOR_1	IF_4
0x40003d9	        0x807df71f	                cmp byte [rbp - 9], 0x1f	        68	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5
0x40003dd	            0x774a	                            ja 0x4000429	        68	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5
0x40003df	         0xfb645f7	               movzx eax, byte [rbp - 9]	        69	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5	SWITCH_1
0x40003e3	          0x83f81b	                           cmp eax, 0x1b	        69	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5	SWITCH_1
0x40003e6	            0x772e	                            ja 0x4000416	        69	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5	SWITCH_1
0x40003e8	            0x89c0	                            mov eax, eax	        69	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5	SWITCH_1
0x40003ea	    0x488b04c50000	                  mov rax, qword [rax*8]	        69	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5	SWITCH_1
0x40003f2	            0xffe0	                                 jmp rax	        69	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5	SWITCH_1
0x40003f4	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        72	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5	SWITCH_1
0x40003f8	          0x8b4010	            mov eax, dword [rax + 0x10] 	        72	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5	SWITCH_1
0x40003fb	          0x8d5001	                      lea edx, [rax + 1]	        72	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5	SWITCH_1
0x40003fe	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        72	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5	SWITCH_1
0x4000402	          0x895010	             mov dword [rax + 0x10], edx	        72	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5	SWITCH_1
0x4000405	            0xeb33	                           jmp 0x400043a	        73	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5	SWITCH_1
0x4000407	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        75	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5	SWITCH_1
0x400040b	            0x8b00	                    mov eax, dword [rax]	        75	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5	SWITCH_1
0x400040d	          0x8d5001	                      lea edx, [rax + 1]	        75	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5	SWITCH_1
0x4000410	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        75	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5	SWITCH_1
0x4000414	            0x8910	                    mov dword [rax], edx	        75	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5	SWITCH_1
0x4000416	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        78	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5	SWITCH_1
0x400041a	          0x8b4014	            mov eax, dword [rax + 0x14] 	        78	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5	SWITCH_1
0x400041d	          0x8d5001	                      lea edx, [rax + 1]	        78	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5	SWITCH_1
0x4000420	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        78	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5	SWITCH_1
0x4000424	          0x895014	             mov dword [rax + 0x14], edx	        78	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5	SWITCH_1
0x4000427	            0xeb11	                           jmp 0x400043a	        78	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5	SWITCH_1
0x4000429	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        82	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_3
0x400042d	          0x8b4010	            mov eax, dword [rax + 0x10] 	        82	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_3
0x4000430	          0x8d5001	                      lea edx, [rax + 1]	        82	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_3
0x4000433	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        82	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_3
0x4000437	          0x895010	             mov dword [rax + 0x10], edx	        82	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_3
0x400043a	      0x488345f801	                  add qword [rbp - 8], 1	        51	convert.c	IF_6	FUNCTION_1	FOR_1
0x400043f	        0x488b45f8	                mov rax, qword [rbp - 8]	        51	convert.c	IF_6	FUNCTION_1	FOR_1
0x4000443	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	        51	convert.c	IF_6	FUNCTION_1	FOR_1
0x4000447	     0xf82eefeffff	                            jb 0x400033b	        51	convert.c	IF_6	FUNCTION_1	FOR_1
0x400044d	      0x48837de000	               cmp qword [rbp - 0x20], 0	        86	convert.c	IF_6	FUNCTION_1
0x4000452	            0x7427	                            je 0x400047b	        86	convert.c	IF_6	FUNCTION_1
0x4000454	        0x488b45e0	             mov rax, qword [rbp - 0x20]	        86	convert.c	IF_6	FUNCTION_1
0x4000458	        0x488d50ff	                      lea rdx, [rax - 1]	        86	convert.c	IF_6	FUNCTION_1
0x400045c	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        86	convert.c	IF_6	FUNCTION_1
0x4000460	          0x4801d0	                            add rax, rdx	        86	convert.c	IF_6	FUNCTION_1
0x4000463	           0xfb600	                   movzx eax, byte [rax]	        86	convert.c	IF_6	FUNCTION_1
0x4000466	            0x3c1a	                            cmp al, 0x1a	        86	convert.c	IF_6	FUNCTION_1
0x4000468	            0x7511	                           jne 0x400047b	        86	convert.c	IF_6	FUNCTION_1
0x400046a	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        87	convert.c	FUNCTION_1
0x400046e	          0x8b4014	            mov eax, dword [rax + 0x14] 	        87	convert.c	FUNCTION_1
0x4000471	          0x8d50ff	                      lea edx, [rax - 1]	        87	convert.c	FUNCTION_1
0x4000474	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        87	convert.c	FUNCTION_1
0x4000478	          0x895014	             mov dword [rax + 0x14], edx	        87	convert.c	FUNCTION_1
0x400047b	              0x90	                                     nop	        88	convert.c	FUNCTION_1
0x400047c	              0xc9	                                   leave	        88	convert.c	FUNCTION_1
0x400047d	              0xc3	                                     ret	        88	convert.c	FUNCTION_1
