record_resolve_undo	SWITCH,0:IF,3:WHILE,0:CALL,4:FOR,0:functions,0:ELSE,0:DO,0	76
0x40001eb	              0x55	                                push rbp	         8	resolve-undo.c	FUNCTION_1
0x40001ec	          0x4889e5	                            mov rbp, rsp	         8	resolve-undo.c	FUNCTION_1
0x40001ef	        0x4883ec30	                           sub rsp, 0x30	         8	resolve-undo.c	FUNCTION_1
0x40001f3	        0x48897dd8	             mov qword [rbp - 0x28], rdi	         8	resolve-undo.c	FUNCTION_1
0x40001f7	        0x488975d0	             mov qword [rbp - 0x30], rsi	         8	resolve-undo.c	FUNCTION_1
0x40001fb	        0x488b45d0	             mov rax, qword [rbp - 0x30]	        12	resolve-undo.c	FUNCTION_1
0x40001ff	          0x8b4038	            mov eax, dword [rax + 0x38] 	        12	resolve-undo.c	FUNCTION_1
0x4000202	      0x2500300000	                         and eax, 0x3000	        12	resolve-undo.c	FUNCTION_1
0x4000207	          0xc1e80c	                            shr eax, 0xc	        12	resolve-undo.c	FUNCTION_1
0x400020a	          0x8945e4	             mov dword [rbp - 0x1c], eax	        12	resolve-undo.c	FUNCTION_1
0x400020d	        0x837de400	               cmp dword [rbp - 0x1c], 0	        14	resolve-undo.c	FUNCTION_1	IF_1
0x4000211	     0xf84e2000000	                            je 0x40002f9	        14	resolve-undo.c	FUNCTION_1	IF_1
0x4000217	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        17	resolve-undo.c	FUNCTION_1	IF_2
0x400021b	        0x488b4018	            mov rax, qword [rax + 0x18] 	        17	resolve-undo.c	FUNCTION_1	IF_2
0x400021f	          0x4885c0	                           test rax, rax	        17	resolve-undo.c	FUNCTION_1	IF_2
0x4000222	            0x752d	                           jne 0x4000251	        17	resolve-undo.c	FUNCTION_1	IF_2
0x4000224	      0xbe20000000	                           mov esi, 0x20	        18	resolve-undo.c	FUNCTION_1	IF_2	CALL_1
0x4000229	      0xbf01000000	                              mov edi, 1	        18	resolve-undo.c	FUNCTION_1	IF_2	CALL_1
0x400022e	      0xe800000000	                          call 0x4000233	        18	resolve-undo.c	FUNCTION_1	IF_2	CALL_1
0x4000233	        0x488945e8	             mov qword [rbp - 0x18], rax	        18	resolve-undo.c	FUNCTION_1	IF_2	CALL_1
0x4000237	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        19	resolve-undo.c	FUNCTION_1	IF_2
0x400023b	         0xfb65010	           movzx edx, byte [rax + 0x10] 	        19	resolve-undo.c	FUNCTION_1	IF_2
0x400023f	          0x83ca01	                               or edx, 1	        19	resolve-undo.c	FUNCTION_1	IF_2
0x4000242	          0x885010	               mov byte [rax + 0x10], dl	        19	resolve-undo.c	FUNCTION_1	IF_2
0x4000245	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        20	resolve-undo.c	FUNCTION_1	IF_2
0x4000249	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	        20	resolve-undo.c	FUNCTION_1	IF_2
0x400024d	        0x48895018	             mov qword [rax + 0x18], rdx	        20	resolve-undo.c	FUNCTION_1	IF_2
0x4000251	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        22	resolve-undo.c	FUNCTION_1
0x4000255	        0x488b4018	            mov rax, qword [rax + 0x18] 	        22	resolve-undo.c	FUNCTION_1
0x4000259	        0x488945e8	             mov qword [rbp - 0x18], rax	        22	resolve-undo.c	FUNCTION_1
0x400025d	        0x488b45d0	             mov rax, qword [rbp - 0x30]	        23	resolve-undo.c	FUNCTION_1	CALL_2
0x4000261	        0x488d5058	                   lea rdx, [rax + 0x58]	        23	resolve-undo.c	FUNCTION_1	CALL_2
0x4000265	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        23	resolve-undo.c	FUNCTION_1	CALL_2
0x4000269	          0x4889d6	                            mov rsi, rdx	        23	resolve-undo.c	FUNCTION_1	CALL_2
0x400026c	          0x4889c7	                            mov rdi, rax	        23	resolve-undo.c	FUNCTION_1	CALL_2
0x400026f	      0xe800000000	                          call 0x4000274	        23	resolve-undo.c	FUNCTION_1	CALL_2
0x4000274	        0x488945f0	             mov qword [rbp - 0x10], rax	        23	resolve-undo.c	FUNCTION_1	CALL_2
0x4000278	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        24	resolve-undo.c	FUNCTION_1	IF_3
0x400027c	        0x488b4008	                mov rax, qword [rax + 8]	        24	resolve-undo.c	FUNCTION_1	IF_3
0x4000280	          0x4885c0	                           test rax, rax	        24	resolve-undo.c	FUNCTION_1	IF_3
0x4000283	            0x751a	                           jne 0x400029f	        24	resolve-undo.c	FUNCTION_1	IF_3
0x4000285	      0xbe48000000	                           mov esi, 0x48	        25	resolve-undo.c	FUNCTION_1	CALL_3
0x400028a	      0xbf01000000	                              mov edi, 1	        25	resolve-undo.c	FUNCTION_1	CALL_3
0x400028f	      0xe800000000	                          call 0x4000294	        25	resolve-undo.c	FUNCTION_1	CALL_3
0x4000294	          0x4889c2	                            mov rdx, rax	        25	resolve-undo.c	FUNCTION_1	CALL_3
0x4000297	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        25	resolve-undo.c	FUNCTION_1	CALL_3
0x400029b	        0x48895008	                mov qword [rax + 8], rdx	        25	resolve-undo.c	FUNCTION_1	CALL_3
0x400029f	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        26	resolve-undo.c	FUNCTION_1
0x40002a3	        0x488b4008	                mov rax, qword [rax + 8]	        26	resolve-undo.c	FUNCTION_1
0x40002a7	        0x488945f8	                mov qword [rbp - 8], rax	        26	resolve-undo.c	FUNCTION_1
0x40002ab	        0x488b45d0	             mov rax, qword [rbp - 0x30]	        27	resolve-undo.c	FUNCTION_1	CALL_4
0x40002af	        0x488d4844	                   lea rcx, [rax + 0x44]	        27	resolve-undo.c	FUNCTION_1	CALL_4
0x40002b3	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	        27	resolve-undo.c	FUNCTION_1	CALL_4
0x40002b6	          0x83e801	                              sub eax, 1	        27	resolve-undo.c	FUNCTION_1	CALL_4
0x40002b9	          0x4863d0	                         movsxd rdx, eax	        27	resolve-undo.c	FUNCTION_1	CALL_4
0x40002bc	          0x4889d0	                            mov rax, rdx	        27	resolve-undo.c	FUNCTION_1	CALL_4
0x40002bf	        0x48c1e002	                              shl rax, 2	        27	resolve-undo.c	FUNCTION_1	CALL_4
0x40002c3	          0x4801d0	                            add rax, rdx	        27	resolve-undo.c	FUNCTION_1	CALL_4
0x40002c6	        0x48c1e002	                              shl rax, 2	        27	resolve-undo.c	FUNCTION_1	CALL_4
0x40002ca	        0x488b55f8	                mov rdx, qword [rbp - 8]	        27	resolve-undo.c	FUNCTION_1	CALL_4
0x40002ce	          0x4801d0	                            add rax, rdx	        27	resolve-undo.c	FUNCTION_1	CALL_4
0x40002d1	        0x4883c00c	                            add rax, 0xc	        27	resolve-undo.c	FUNCTION_1	CALL_4
0x40002d5	          0x4889ce	                            mov rsi, rcx	        27	resolve-undo.c	FUNCTION_1	CALL_4
0x40002d8	          0x4889c7	                            mov rdi, rax	        27	resolve-undo.c	FUNCTION_1	CALL_4
0x40002db	      0xe86ffeffff	                         call sym.oidcpy	        27	resolve-undo.c	FUNCTION_1	CALL_4
0x40002e0	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	        28	resolve-undo.c	FUNCTION_1
0x40002e3	          0x8d50ff	                      lea edx, [rax - 1]	        28	resolve-undo.c	FUNCTION_1
0x40002e6	        0x488b45d0	             mov rax, qword [rbp - 0x30]	        28	resolve-undo.c	FUNCTION_1
0x40002ea	          0x8b4834	            mov ecx, dword [rax + 0x34] 	        28	resolve-undo.c	FUNCTION_1
0x40002ed	        0x488b45f8	                mov rax, qword [rbp - 8]	        28	resolve-undo.c	FUNCTION_1
0x40002f1	          0x4863d2	                         movsxd rdx, edx	        28	resolve-undo.c	FUNCTION_1
0x40002f4	          0x890c90	            mov dword [rax + rdx*4], ecx	        28	resolve-undo.c	FUNCTION_1
0x40002f7	            0xeb01	                           jmp 0x40002fa	        28	resolve-undo.c	FUNCTION_1
0x40002f9	              0x90	                                     nop	        15	resolve-undo.c	FUNCTION_1	IF_1
0x40002fa	              0xc9	                                   leave	        29	resolve-undo.c	FUNCTION_1
0x40002fb	              0xc3	                                     ret	        29	resolve-undo.c	FUNCTION_1
strbuf_addch	SWITCH,0:IF,1:WHILE,0:CALL,2:FOR,0:functions,0:ELSE,0:DO,0	33
0x4000081	              0x55	                                push rbp	       226	strbuf.h	FUNCTION_41
0x4000082	          0x4889e5	                            mov rbp, rsp	       226	strbuf.h	FUNCTION_41
0x4000085	        0x4883ec10	                           sub rsp, 0x10	       226	strbuf.h	FUNCTION_41
0x4000089	        0x48897df8	                mov qword [rbp - 8], rdi	       226	strbuf.h	FUNCTION_41
0x400008d	          0x8975f4	              mov dword [rbp - 0xc], esi	       226	strbuf.h	FUNCTION_41
0x4000090	        0x488b45f8	                mov rax, qword [rbp - 8]	       227	strbuf.h	FUNCTION_41	IF_1	CALL_1
0x4000094	          0x4889c7	                            mov rdi, rax	       227	strbuf.h	FUNCTION_41	IF_1	CALL_1
0x4000097	      0xe8afffffff	                   call sym.strbuf_avail	       227	strbuf.h	FUNCTION_41	IF_1	CALL_1
0x400009c	          0x4885c0	                           test rax, rax	       227	strbuf.h	FUNCTION_41	IF_1	CALL_1
0x400009f	            0x7511	                           jne 0x40000b2	       227	strbuf.h	FUNCTION_41	IF_1	CALL_1
0x40000a1	        0x488b45f8	                mov rax, qword [rbp - 8]	       228	strbuf.h	FUNCTION_41	CALL_2
0x40000a5	      0xbe01000000	                              mov esi, 1	       228	strbuf.h	FUNCTION_41	CALL_2
0x40000aa	          0x4889c7	                            mov rdi, rax	       228	strbuf.h	FUNCTION_41	CALL_2
0x40000ad	      0xe800000000	                          call 0x40000b2	       228	strbuf.h	FUNCTION_41	CALL_2
0x40000b2	        0x488b45f8	                mov rax, qword [rbp - 8]	       229	strbuf.h	FUNCTION_41
0x40000b6	        0x488b7010	            mov rsi, qword [rax + 0x10] 	       229	strbuf.h	FUNCTION_41
0x40000ba	        0x488b45f8	                mov rax, qword [rbp - 8]	       229	strbuf.h	FUNCTION_41
0x40000be	        0x488b4008	                mov rax, qword [rax + 8]	       229	strbuf.h	FUNCTION_41
0x40000c2	        0x488d4801	                      lea rcx, [rax + 1]	       229	strbuf.h	FUNCTION_41
0x40000c6	        0x488b55f8	                mov rdx, qword [rbp - 8]	       229	strbuf.h	FUNCTION_41
0x40000ca	        0x48894a08	                mov qword [rdx + 8], rcx	       229	strbuf.h	FUNCTION_41
0x40000ce	          0x4801f0	                            add rax, rsi	       229	strbuf.h	FUNCTION_41
0x40000d1	          0x8b55f4	              mov edx, dword [rbp - 0xc]	       229	strbuf.h	FUNCTION_41
0x40000d4	            0x8810	                      mov byte [rax], dl	       229	strbuf.h	FUNCTION_41
0x40000d6	        0x488b45f8	                mov rax, qword [rbp - 8]	       230	strbuf.h	FUNCTION_41
0x40000da	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       230	strbuf.h	FUNCTION_41
0x40000de	        0x488b45f8	                mov rax, qword [rbp - 8]	       230	strbuf.h	FUNCTION_41
0x40000e2	        0x488b4008	                mov rax, qword [rax + 8]	       230	strbuf.h	FUNCTION_41
0x40000e6	          0x4801d0	                            add rax, rdx	       230	strbuf.h	FUNCTION_41
0x40000e9	          0xc60000	                       mov byte [rax], 0	       230	strbuf.h	FUNCTION_41
0x40000ec	              0x90	                                     nop	       231	strbuf.h	FUNCTION_41
0x40000ed	              0xc9	                                   leave	       231	strbuf.h	FUNCTION_41
0x40000ee	              0xc3	                                     ret	       231	strbuf.h	FUNCTION_41
resolve_undo_write	SWITCH,0:IF,0:WHILE,0:CALL,0:FOR,0:functions,1:ELSE,0:DO,0	85
0x40002fc	              0x55	                                push rbp	        32	resolve-undo.c	FUNCTION_2
0x40002fd	          0x4889e5	                            mov rbp, rsp	        32	resolve-undo.c	FUNCTION_2
0x4000300	        0x4883ec30	                           sub rsp, 0x30	        32	resolve-undo.c	FUNCTION_2
0x4000304	        0x48897dd8	             mov qword [rbp - 0x28], rdi	        32	resolve-undo.c	FUNCTION_2
0x4000308	        0x488975d0	             mov qword [rbp - 0x30], rsi	        32	resolve-undo.c	FUNCTION_2
0x400030c	        0x488b45d0	             mov rax, qword [rbp - 0x30]	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x4000310	          0x488b00	                    mov rax, qword [rax]	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x4000313	        0x488945f0	             mov qword [rbp - 0x10], rax	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x4000317	      0xe9e5000000	                           jmp 0x4000401	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x400031c	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        35	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x4000320	        0x488b4008	                mov rax, qword [rax + 8]	        35	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x4000324	        0x488945f8	                mov qword [rbp - 8], rax	        35	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x4000328	      0x48837df800	                  cmp qword [rbp - 8], 0	        38	resolve-undo.c	FUNCTION_2	FUNCTION_1	IF_1
0x400032d	     0xf84c8000000	                            je 0x40003fb	        38	resolve-undo.c	FUNCTION_2	FUNCTION_1	IF_1
0x4000333	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        40	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_1
0x4000337	          0x488b10	                    mov rdx, qword [rax]	        40	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_1
0x400033a	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        40	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_1
0x400033e	          0x4889d6	                            mov rsi, rdx	        40	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_1
0x4000341	          0x4889c7	                            mov rdi, rax	        40	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_1
0x4000344	      0xe8a6fdffff	                  call sym.strbuf_addstr	        40	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_1
0x4000349	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        41	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_2
0x400034d	      0xbe00000000	                              mov esi, 0	        41	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_2
0x4000352	          0x4889c7	                            mov rdi, rax	        41	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_2
0x4000355	      0xe827fdffff	                   call sym.strbuf_addch	        41	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_2
0x400035a	    0xc745ec000000	               mov dword [rbp - 0x14], 0	        42	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_1
0x4000361	            0xeb2c	                           jmp 0x400038f	        42	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_1
0x4000363	        0x488b45f8	                mov rax, qword [rbp - 8]	        43	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_3
0x4000367	          0x8b55ec	             mov edx, dword [rbp - 0x14]	        43	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_3
0x400036a	          0x4863d2	                         movsxd rdx, edx	        43	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_3
0x400036d	          0x8b1490	            mov edx, dword [rax + rdx*4]	        43	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_3
0x4000370	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        43	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_3
0x4000374	      0xb900000000	                              mov ecx, 0	        43	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_3
0x4000379	      0xbe00000000	                              mov esi, 0	        43	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_3
0x400037e	          0x4889c7	                            mov rdi, rax	        43	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_3
0x4000381	      0xb800000000	                              mov eax, 0	        43	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_3
0x4000386	      0xe800000000	                          call 0x400038b	        43	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_3
0x400038b	        0x8345ec01	               add dword [rbp - 0x14], 1	        42	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_1
0x400038f	        0x837dec02	               cmp dword [rbp - 0x14], 2	        42	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_1
0x4000393	            0x7ece	                           jle 0x4000363	        42	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_1
0x4000395	    0xc745ec000000	               mov dword [rbp - 0x14], 0	        44	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2
0x400039c	            0xeb55	                           jmp 0x40003f3	        44	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2
0x400039e	        0x488b45f8	                mov rax, qword [rbp - 8]	        45	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	IF_2
0x40003a2	          0x8b55ec	             mov edx, dword [rbp - 0x14]	        45	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	IF_2
0x40003a5	          0x4863d2	                         movsxd rdx, edx	        45	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	IF_2
0x40003a8	          0x8b0490	            mov eax, dword [rax + rdx*4]	        45	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	IF_2
0x40003ab	            0x85c0	                           test eax, eax	        45	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	IF_2
0x40003ad	            0x743f	                            je 0x40003ee	        45	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	IF_2
0x40003af	    0x488b05000000	            mov rax, qword [0x040003b6] 	        47	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	CALL_4
0x40003b6	        0x488b4058	            mov rax, qword [rax + 0x58] 	        47	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	CALL_4
0x40003ba	        0x488b4810	            mov rcx, qword [rax + 0x10] 	        47	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	CALL_4
0x40003be	          0x8b45ec	             mov eax, dword [rbp - 0x14]	        47	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	CALL_4
0x40003c1	          0x4863d0	                         movsxd rdx, eax	        47	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	CALL_4
0x40003c4	          0x4889d0	                            mov rax, rdx	        47	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	CALL_4
0x40003c7	        0x48c1e002	                              shl rax, 2	        47	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	CALL_4
0x40003cb	          0x4801d0	                            add rax, rdx	        47	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	CALL_4
0x40003ce	        0x48c1e002	                              shl rax, 2	        47	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	CALL_4
0x40003d2	        0x488b55f8	                mov rdx, qword [rbp - 8]	        47	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	CALL_4
0x40003d6	          0x4801d0	                            add rax, rdx	        47	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	CALL_4
0x40003d9	        0x488d700c	                    lea rsi, [rax + 0xc]	        47	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	CALL_4
0x40003dd	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        47	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	CALL_4
0x40003e1	          0x4889ca	                            mov rdx, rcx	        47	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	CALL_4
0x40003e4	          0x4889c7	                            mov rdi, rax	        47	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	CALL_4
0x40003e7	      0xe800000000	                          call 0x40003ec	        47	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	CALL_4
0x40003ec	            0xeb01	                           jmp 0x40003ef	        47	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	CALL_4
0x40003ee	              0x90	                                     nop	        46	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	IF_2
0x40003ef	        0x8345ec01	               add dword [rbp - 0x14], 1	        44	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2
0x40003f3	        0x837dec02	               cmp dword [rbp - 0x14], 2	        44	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2
0x40003f7	            0x7ea5	                           jle 0x400039e	        44	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2
0x40003f9	            0xeb01	                           jmp 0x40003fc	        44	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2
0x40003fb	              0x90	                                     nop	        39	resolve-undo.c	FUNCTION_2	FUNCTION_1	IF_1
0x40003fc	      0x488345f010	            add qword [rbp - 0x10], 0x10	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x4000401	      0x48837df000	               cmp qword [rbp - 0x10], 0	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x4000406	            0x7421	                            je 0x4000429	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x4000408	        0x488b45d0	             mov rax, qword [rbp - 0x30]	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x400040c	          0x488b10	                    mov rdx, qword [rax]	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x400040f	        0x488b45d0	             mov rax, qword [rbp - 0x30]	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x4000413	          0x8b4008	                mov eax, dword [rax + 8]	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x4000416	            0x89c0	                            mov eax, eax	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x4000418	        0x48c1e004	                              shl rax, 4	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x400041c	          0x4801d0	                            add rax, rdx	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x400041f	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x4000423	     0xf87f3feffff	                            ja 0x400031c	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x4000429	              0x90	                                     nop	        50	resolve-undo.c	FUNCTION_2
0x400042a	              0xc9	                                   leave	        50	resolve-undo.c	FUNCTION_2
0x400042b	              0xc3	                                     ret	        50	resolve-undo.c	FUNCTION_2
strbuf_avail	SWITCH,0:IF,0:WHILE,0:CALL,0:FOR,0:functions,0:ELSE,0:DO,0	18
0x400004b	              0x55	                                push rbp	       140	strbuf.h	FUNCTION_39
0x400004c	          0x4889e5	                            mov rbp, rsp	       140	strbuf.h	FUNCTION_39
0x400004f	        0x48897df8	                mov qword [rbp - 8], rdi	       140	strbuf.h	FUNCTION_39
0x4000053	        0x488b45f8	                mov rax, qword [rbp - 8]	       141	strbuf.h	FUNCTION_39
0x4000057	          0x488b00	                    mov rax, qword [rax]	       141	strbuf.h	FUNCTION_39
0x400005a	          0x4885c0	                           test rax, rax	       141	strbuf.h	FUNCTION_39
0x400005d	            0x741b	                            je 0x400007a	       141	strbuf.h	FUNCTION_39
0x400005f	        0x488b45f8	                mov rax, qword [rbp - 8]	       141	strbuf.h	FUNCTION_39
0x4000063	          0x488b10	                    mov rdx, qword [rax]	       141	strbuf.h	FUNCTION_39
0x4000066	        0x488b45f8	                mov rax, qword [rbp - 8]	       141	strbuf.h	FUNCTION_39
0x400006a	        0x488b4008	                mov rax, qword [rax + 8]	       141	strbuf.h	FUNCTION_39
0x400006e	          0x4829c2	                            sub rdx, rax	       141	strbuf.h	FUNCTION_39
0x4000071	          0x4889d0	                            mov rax, rdx	       141	strbuf.h	FUNCTION_39
0x4000074	        0x4883e801	                              sub rax, 1	       141	strbuf.h	FUNCTION_39
0x4000078	            0xeb05	                           jmp 0x400007f	       141	strbuf.h	FUNCTION_39
0x400007a	      0xb800000000	                              mov eax, 0	       141	strbuf.h	FUNCTION_39
0x400007f	              0x5d	                                 pop rbp	       142	strbuf.h	FUNCTION_39
0x4000080	              0xc3	                                     ret	       142	strbuf.h	FUNCTION_39
resolve_undo_clear_index	SWITCH,0:IF,1:WHILE,0:CALL,2:FOR,0:functions,0:ELSE,0:DO,0	28
0x4000668	              0x55	                                push rbp	       107	resolve-undo.c	FUNCTION_4
0x4000669	          0x4889e5	                            mov rbp, rsp	       107	resolve-undo.c	FUNCTION_4
0x400066c	        0x4883ec20	                           sub rsp, 0x20	       107	resolve-undo.c	FUNCTION_4
0x4000670	        0x48897de8	             mov qword [rbp - 0x18], rdi	       107	resolve-undo.c	FUNCTION_4
0x4000674	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       108	resolve-undo.c	FUNCTION_4
0x4000678	        0x488b4018	            mov rax, qword [rax + 0x18] 	       108	resolve-undo.c	FUNCTION_4
0x400067c	        0x488945f8	                mov qword [rbp - 8], rax	       108	resolve-undo.c	FUNCTION_4
0x4000680	      0x48837df800	                  cmp qword [rbp - 8], 0	       109	resolve-undo.c	FUNCTION_4	IF_1
0x4000685	            0x743e	                            je 0x40006c5	       109	resolve-undo.c	FUNCTION_4	IF_1
0x4000687	        0x488b45f8	                mov rax, qword [rbp - 8]	       111	resolve-undo.c	FUNCTION_4	CALL_1
0x400068b	      0xbe01000000	                              mov esi, 1	       111	resolve-undo.c	FUNCTION_4	CALL_1
0x4000690	          0x4889c7	                            mov rdi, rax	       111	resolve-undo.c	FUNCTION_4	CALL_1
0x4000693	      0xe800000000	                          call 0x4000698	       111	resolve-undo.c	FUNCTION_4	CALL_1
0x4000698	        0x488b45f8	                mov rax, qword [rbp - 8]	       112	resolve-undo.c	FUNCTION_4	CALL_2
0x400069c	          0x4889c7	                            mov rdi, rax	       112	resolve-undo.c	FUNCTION_4	CALL_2
0x400069f	      0xe800000000	                          call 0x40006a4	       112	resolve-undo.c	FUNCTION_4	CALL_2
0x40006a4	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       113	resolve-undo.c	FUNCTION_4
0x40006a8	    0x48c740180000	               mov qword [rax + 0x18], 0	       113	resolve-undo.c	FUNCTION_4
0x40006b0	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       114	resolve-undo.c	FUNCTION_4
0x40006b4	          0x8b4014	            mov eax, dword [rax + 0x14] 	       114	resolve-undo.c	FUNCTION_4
0x40006b7	          0x83c810	                            or eax, 0x10	       114	resolve-undo.c	FUNCTION_4
0x40006ba	            0x89c2	                            mov edx, eax	       114	resolve-undo.c	FUNCTION_4
0x40006bc	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       114	resolve-undo.c	FUNCTION_4
0x40006c0	          0x895014	             mov dword [rax + 0x14], edx	       114	resolve-undo.c	FUNCTION_4
0x40006c3	            0xeb01	                           jmp 0x40006c6	       114	resolve-undo.c	FUNCTION_4
0x40006c5	              0x90	                                     nop	       110	resolve-undo.c	FUNCTION_4	IF_1
0x40006c6	              0xc9	                                   leave	       115	resolve-undo.c	FUNCTION_4
0x40006c7	              0xc3	                                     ret	       115	resolve-undo.c	FUNCTION_4
resolve_undo_read	SWITCH,0:IF,6:WHILE,1:CALL,7:FOR,2:functions,0:ELSE,0:DO,0	150
0x400042c	              0x55	                                push rbp	        53	resolve-undo.c	FUNCTION_3
0x400042d	          0x4889e5	                            mov rbp, rsp	        53	resolve-undo.c	FUNCTION_3
0x4000430	        0x4883ec50	                           sub rsp, 0x50	        53	resolve-undo.c	FUNCTION_3
0x4000434	        0x48897db8	             mov qword [rbp - 0x48], rdi	        53	resolve-undo.c	FUNCTION_3
0x4000438	        0x488975b0	             mov qword [rbp - 0x50], rsi	        53	resolve-undo.c	FUNCTION_3
0x400043c	    0x64488b042528	                mov rax, qword fs:[0x28]	        53	resolve-undo.c	FUNCTION_3
0x4000445	        0x488945f8	                mov qword [rbp - 8], rax	        53	resolve-undo.c	FUNCTION_3
0x4000449	            0x31c0	                            xor eax, eax	        53	resolve-undo.c	FUNCTION_3
0x400044b	    0x488b05000000	            mov rax, qword [0x04000452] 	        58	resolve-undo.c	FUNCTION_3
0x4000452	        0x488b4058	            mov rax, qword [rax + 0x58] 	        58	resolve-undo.c	FUNCTION_3
0x4000456	        0x488b4010	            mov rax, qword [rax + 0x10] 	        58	resolve-undo.c	FUNCTION_3
0x400045a	          0x8945cc	             mov dword [rbp - 0x34], eax	        58	resolve-undo.c	FUNCTION_3
0x400045d	      0xbe20000000	                           mov esi, 0x20	        60	resolve-undo.c	FUNCTION_3	CALL_1
0x4000462	      0xbf01000000	                              mov edi, 1	        60	resolve-undo.c	FUNCTION_3	CALL_1
0x4000467	      0xe800000000	                          call 0x400046c	        60	resolve-undo.c	FUNCTION_3	CALL_1
0x400046c	        0x488945d8	             mov qword [rbp - 0x28], rax	        60	resolve-undo.c	FUNCTION_3	CALL_1
0x4000470	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        61	resolve-undo.c	FUNCTION_3
0x4000474	         0xfb65010	           movzx edx, byte [rax + 0x10] 	        61	resolve-undo.c	FUNCTION_3
0x4000478	          0x83ca01	                               or edx, 1	        61	resolve-undo.c	FUNCTION_3
0x400047b	          0x885010	               mov byte [rax + 0x10], dl	        61	resolve-undo.c	FUNCTION_3
0x400047e	      0xe98d010000	                           jmp 0x4000610	        63	resolve-undo.c	FUNCTION_3	WHILE_1
0x4000483	        0x488b45b8	             mov rax, qword [rbp - 0x48]	        67	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_2
0x4000487	          0x4889c7	                            mov rdi, rax	        67	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_2
0x400048a	      0xe800000000	                          call 0x400048f	        67	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_2
0x400048f	        0x4883c001	                              add rax, 1	        67	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_2
0x4000493	        0x488945e0	             mov qword [rbp - 0x20], rax	        67	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_2
0x4000497	        0x488b45b0	             mov rax, qword [rbp - 0x50]	        68	resolve-undo.c	FUNCTION_3	WHILE_1	IF_1
0x400049b	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	        68	resolve-undo.c	FUNCTION_3	WHILE_1	IF_1
0x400049f	     0xf867c010000	                           jbe 0x4000621	        68	resolve-undo.c	FUNCTION_3	WHILE_1	IF_1
0x40004a5	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	        70	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_3
0x40004a9	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        70	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_3
0x40004ad	          0x4889d6	                            mov rsi, rdx	        70	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_3
0x40004b0	          0x4889c7	                            mov rdi, rax	        70	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_3
0x40004b3	      0xe800000000	                          call 0x40004b8	        70	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_3
0x40004b8	        0x488945e8	             mov qword [rbp - 0x18], rax	        70	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_3
0x40004bc	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        71	resolve-undo.c	FUNCTION_3	WHILE_1	IF_2
0x40004c0	        0x488b4008	                mov rax, qword [rax + 8]	        71	resolve-undo.c	FUNCTION_3	WHILE_1	IF_2
0x40004c4	          0x4885c0	                           test rax, rax	        71	resolve-undo.c	FUNCTION_3	WHILE_1	IF_2
0x40004c7	            0x751a	                           jne 0x40004e3	        71	resolve-undo.c	FUNCTION_3	WHILE_1	IF_2
0x40004c9	      0xbe48000000	                           mov esi, 0x48	        72	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_4
0x40004ce	      0xbf01000000	                              mov edi, 1	        72	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_4
0x40004d3	      0xe800000000	                          call 0x40004d8	        72	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_4
0x40004d8	          0x4889c2	                            mov rdx, rax	        72	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_4
0x40004db	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        72	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_4
0x40004df	        0x48895008	                mov qword [rax + 8], rdx	        72	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_4
0x40004e3	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        73	resolve-undo.c	FUNCTION_3	WHILE_1
0x40004e7	        0x488b4008	                mov rax, qword [rax + 8]	        73	resolve-undo.c	FUNCTION_3	WHILE_1
0x40004eb	        0x488945f0	             mov qword [rbp - 0x10], rax	        73	resolve-undo.c	FUNCTION_3	WHILE_1
0x40004ef	        0x488b45e0	             mov rax, qword [rbp - 0x20]	        74	resolve-undo.c	FUNCTION_3	WHILE_1
0x40004f3	        0x482945b0	             sub qword [rbp - 0x50], rax	        74	resolve-undo.c	FUNCTION_3	WHILE_1
0x40004f7	        0x488b45e0	             mov rax, qword [rbp - 0x20]	        75	resolve-undo.c	FUNCTION_3	WHILE_1
0x40004fb	        0x480145b8	            add qword [rbp - 0x48], rax 	        75	resolve-undo.c	FUNCTION_3	WHILE_1
0x40004ff	    0xc745c8000000	               mov dword [rbp - 0x38], 0	        77	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1
0x4000506	      0xe98c000000	                           jmp 0x4000597	        77	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1
0x400050b	        0x488d4dd0	                   lea rcx, [rbp - 0x30]	        78	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	CALL_5
0x400050f	        0x488b45b8	             mov rax, qword [rbp - 0x48]	        78	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	CALL_5
0x4000513	      0xba08000000	                              mov edx, 8	        78	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	CALL_5
0x4000518	          0x4889ce	                            mov rsi, rcx	        78	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	CALL_5
0x400051b	          0x4889c7	                            mov rdi, rax	        78	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	CALL_5
0x400051e	      0xe800000000	                          call 0x4000523	        78	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	CALL_5
0x4000523	            0x89c1	                            mov ecx, eax	        78	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	CALL_5
0x4000525	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        78	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	CALL_5
0x4000529	          0x8b55c8	             mov edx, dword [rbp - 0x38]	        78	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	CALL_5
0x400052c	          0x4863d2	                         movsxd rdx, edx	        78	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	CALL_5
0x400052f	          0x890c90	            mov dword [rax + rdx*4], ecx	        78	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	CALL_5
0x4000532	        0x488b45d0	             mov rax, qword [rbp - 0x30]	        79	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	IF_3
0x4000536	          0x4885c0	                           test rax, rax	        79	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	IF_3
0x4000539	     0xf84e9000000	                            je 0x4000628	        79	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	IF_3
0x400053f	        0x488b45d0	             mov rax, qword [rbp - 0x30]	        79	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	IF_3
0x4000543	        0x483b45b8	             cmp rax, qword [rbp - 0x48]	        79	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	IF_3
0x4000547	     0xf84db000000	                            je 0x4000628	        79	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	IF_3
0x400054d	        0x488b45d0	             mov rax, qword [rbp - 0x30]	        79	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	IF_3
0x4000551	           0xfb600	                   movzx eax, byte [rax]	        79	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	IF_3
0x4000554	            0x84c0	                             test al, al	        79	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	IF_3
0x4000556	     0xf85cc000000	                           jne 0x4000628	        79	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	IF_3
0x400055c	        0x488b45d0	             mov rax, qword [rbp - 0x30]	        81	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1
0x4000560	        0x4883c001	                              add rax, 1	        81	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1
0x4000564	          0x4889c2	                            mov rdx, rax	        81	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1
0x4000567	        0x488b45b8	             mov rax, qword [rbp - 0x48]	        81	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1
0x400056b	          0x4829c2	                            sub rdx, rax	        81	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1
0x400056e	          0x4889d0	                            mov rax, rdx	        81	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1
0x4000571	        0x488945e0	             mov qword [rbp - 0x20], rax	        81	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1
0x4000575	        0x488b45b0	             mov rax, qword [rbp - 0x50]	        82	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	IF_4
0x4000579	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	        82	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	IF_4
0x400057d	     0xf86a1000000	                           jbe 0x4000624	        82	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	IF_4
0x4000583	        0x488b45e0	             mov rax, qword [rbp - 0x20]	        84	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1
0x4000587	        0x482945b0	             sub qword [rbp - 0x50], rax	        84	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1
0x400058b	        0x488b45e0	             mov rax, qword [rbp - 0x20]	        85	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1
0x400058f	        0x480145b8	            add qword [rbp - 0x48], rax 	        85	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1
0x4000593	        0x8345c801	               add dword [rbp - 0x38], 1	        77	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1
0x4000597	        0x837dc802	               cmp dword [rbp - 0x38], 2	        77	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1
0x400059b	     0xf8e6affffff	                           jle 0x400050b	        77	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1
0x40005a1	    0xc745c8000000	               mov dword [rbp - 0x38], 0	        88	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2
0x40005a8	            0xeb60	                           jmp 0x400060a	        88	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2
0x40005aa	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        89	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	IF_5
0x40005ae	          0x8b55c8	             mov edx, dword [rbp - 0x38]	        89	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	IF_5
0x40005b1	          0x4863d2	                         movsxd rdx, edx	        89	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	IF_5
0x40005b4	          0x8b0490	            mov eax, dword [rax + rdx*4]	        89	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	IF_5
0x40005b7	            0x85c0	                           test eax, eax	        89	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	IF_5
0x40005b9	            0x744a	                            je 0x4000605	        89	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	IF_5
0x40005bb	          0x8b45cc	             mov eax, dword [rbp - 0x34]	        91	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	IF_6
0x40005be	        0x483b45b0	             cmp rax, qword [rbp - 0x50]	        91	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	IF_6
0x40005c2	            0x7763	                            ja 0x4000627	        91	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	IF_6
0x40005c4	          0x8b4dcc	             mov ecx, dword [rbp - 0x34]	        93	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	CALL_6
0x40005c7	          0x8b45c8	             mov eax, dword [rbp - 0x38]	        93	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	CALL_6
0x40005ca	          0x4863d0	                         movsxd rdx, eax	        93	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	CALL_6
0x40005cd	          0x4889d0	                            mov rax, rdx	        93	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	CALL_6
0x40005d0	        0x48c1e002	                              shl rax, 2	        93	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	CALL_6
0x40005d4	          0x4801d0	                            add rax, rdx	        93	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	CALL_6
0x40005d7	        0x48c1e002	                              shl rax, 2	        93	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	CALL_6
0x40005db	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	        93	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	CALL_6
0x40005df	          0x4801d0	                            add rax, rdx	        93	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	CALL_6
0x40005e2	        0x488d780c	                    lea rdi, [rax + 0xc]	        93	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	CALL_6
0x40005e6	        0x488b45b8	             mov rax, qword [rbp - 0x48]	        93	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	CALL_6
0x40005ea	          0x4889ca	                            mov rdx, rcx	        93	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	CALL_6
0x40005ed	          0x4889c6	                            mov rsi, rax	        93	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	CALL_6
0x40005f0	      0xe800000000	                          call 0x40005f5	        93	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	CALL_6
0x40005f5	          0x8b45cc	             mov eax, dword [rbp - 0x34]	        94	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2
0x40005f8	        0x482945b0	             sub qword [rbp - 0x50], rax	        94	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2
0x40005fc	          0x8b45cc	             mov eax, dword [rbp - 0x34]	        95	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2
0x40005ff	        0x480145b8	            add qword [rbp - 0x48], rax 	        95	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2
0x4000603	            0xeb01	                           jmp 0x4000606	        95	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2
0x4000605	              0x90	                                     nop	        90	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	IF_5
0x4000606	        0x8345c801	               add dword [rbp - 0x38], 1	        88	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2
0x400060a	        0x837dc802	               cmp dword [rbp - 0x38], 2	        88	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2
0x400060e	            0x7e9a	                           jle 0x40005aa	        88	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2
0x4000610	      0x48837db000	               cmp qword [rbp - 0x50], 0	        63	resolve-undo.c	FUNCTION_3	WHILE_1
0x4000615	     0xf8568feffff	                           jne 0x4000483	        63	resolve-undo.c	FUNCTION_3	WHILE_1
0x400061b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        98	resolve-undo.c	FUNCTION_3
0x400061f	            0xeb31	                           jmp 0x4000652	        98	resolve-undo.c	FUNCTION_3
0x4000621	              0x90	                                     nop	        69	resolve-undo.c	FUNCTION_3	WHILE_1	IF_1
0x4000622	            0xeb04	                           jmp 0x4000628	        69	resolve-undo.c	FUNCTION_3	WHILE_1	IF_1
0x4000624	              0x90	                                     nop	        83	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	IF_4
0x4000625	            0xeb01	                           jmp 0x4000628	        83	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	IF_4
0x4000627	              0x90	                                     nop	        92	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	IF_6
0x4000628	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       101	resolve-undo.c	FUNCTION_3	CALL_7
0x400062c	      0xbe01000000	                              mov esi, 1	       101	resolve-undo.c	FUNCTION_3	CALL_7
0x4000631	          0x4889c7	                            mov rdi, rax	       101	resolve-undo.c	FUNCTION_3	CALL_7
0x4000634	      0xe800000000	                          call 0x4000639	       101	resolve-undo.c	FUNCTION_3	CALL_7
0x4000639	      0xbf00000000	                              mov edi, 0	       102	resolve-undo.c	FUNCTION_3
0x400063e	      0xb800000000	                              mov eax, 0	       102	resolve-undo.c	FUNCTION_3
0x4000643	      0xe800000000	                          call 0x4000648	       102	resolve-undo.c	FUNCTION_3
0x4000648	      0xe8f3f9ffff	                    call sym.const_error	       102	resolve-undo.c	FUNCTION_3
0x400064d	      0xb800000000	                              mov eax, 0	       103	resolve-undo.c	FUNCTION_3
0x4000652	        0x488b4df8	                mov rcx, qword [rbp - 8]	       104	resolve-undo.c	FUNCTION_3
0x4000656	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       104	resolve-undo.c	FUNCTION_3
0x400065f	            0x7405	                            je 0x4000666	       104	resolve-undo.c	FUNCTION_3
0x4000661	      0xe800000000	                          call 0x4000666	       104	resolve-undo.c	FUNCTION_3
0x4000666	              0xc9	                                   leave	       104	resolve-undo.c	FUNCTION_3
0x4000667	              0xc3	                                     ret	       104	resolve-undo.c	FUNCTION_3
ce_path_match	SWITCH,0:IF,0:WHILE,0:CALL,2:FOR,0:functions,0:ELSE,0:DO,0	34
0x4000175	              0x55	                                push rbp	       335	dir.h	FUNCTION_9
0x4000176	          0x4889e5	                            mov rbp, rsp	       335	dir.h	FUNCTION_9
0x4000179	        0x4883ec20	                           sub rsp, 0x20	       335	dir.h	FUNCTION_9
0x400017d	        0x48897df8	                mov qword [rbp - 8], rdi	       335	dir.h	FUNCTION_9
0x4000181	        0x488975f0	             mov qword [rbp - 0x10], rsi	       335	dir.h	FUNCTION_9
0x4000185	        0x488955e8	             mov qword [rbp - 0x18], rdx	       335	dir.h	FUNCTION_9
0x4000189	        0x488b45f8	                mov rax, qword [rbp - 8]	       337	dir.h	FUNCTION_9	CALL_2
0x400018d	          0x8b4034	            mov eax, dword [rax + 0x34] 	       337	dir.h	FUNCTION_9	CALL_2
0x4000190	      0x2500f00000	                         and eax, 0xf000	       337	dir.h	FUNCTION_9	CALL_2
0x4000195	      0x3d00400000	                         cmp eax, 0x4000	       336	dir.h	FUNCTION_9	CALL_1
0x400019a	            0x7413	                            je 0x40001af	       336	dir.h	FUNCTION_9	CALL_1
0x400019c	        0x488b45f8	                mov rax, qword [rbp - 8]	       337	dir.h	FUNCTION_9	CALL_2
0x40001a0	          0x8b4034	            mov eax, dword [rax + 0x34] 	       337	dir.h	FUNCTION_9	CALL_2
0x40001a3	      0x2500f00000	                         and eax, 0xf000	       337	dir.h	FUNCTION_9	CALL_2
0x40001a8	      0x3d00e00000	                         cmp eax, 0xe000	       336	dir.h	FUNCTION_9	CALL_1
0x40001ad	            0x7507	                           jne 0x40001b6	       336	dir.h	FUNCTION_9	CALL_1
0x40001af	      0xb901000000	                              mov ecx, 1	       336	dir.h	FUNCTION_9	CALL_1
0x40001b4	            0xeb05	                           jmp 0x40001bb	       336	dir.h	FUNCTION_9	CALL_1
0x40001b6	      0xb900000000	                              mov ecx, 0	       336	dir.h	FUNCTION_9	CALL_1
0x40001bb	        0x488b45f8	                mov rax, qword [rbp - 8]	       336	dir.h	FUNCTION_9	CALL_1
0x40001bf	          0x8b403c	            mov eax, dword [rax + 0x3c] 	       336	dir.h	FUNCTION_9	CALL_1
0x40001c2	            0x89c7	                            mov edi, eax	       336	dir.h	FUNCTION_9	CALL_1
0x40001c4	        0x488b45f8	                mov rax, qword [rbp - 8]	       336	dir.h	FUNCTION_9	CALL_1
0x40001c8	        0x488d7058	                   lea rsi, [rax + 0x58]	       336	dir.h	FUNCTION_9	CALL_1
0x40001cc	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       336	dir.h	FUNCTION_9	CALL_1
0x40001d0	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       336	dir.h	FUNCTION_9	CALL_1
0x40001d4	          0x4189c9	                            mov r9d, ecx	       336	dir.h	FUNCTION_9	CALL_1
0x40001d7	          0x4989d0	                             mov r8, rdx	       336	dir.h	FUNCTION_9	CALL_1
0x40001da	      0xb900000000	                              mov ecx, 0	       336	dir.h	FUNCTION_9	CALL_1
0x40001df	            0x89fa	                            mov edx, edi	       336	dir.h	FUNCTION_9	CALL_1
0x40001e1	          0x4889c7	                            mov rdi, rax	       336	dir.h	FUNCTION_9	CALL_1
0x40001e4	      0xe800000000	                          call 0x40001e9	       336	dir.h	FUNCTION_9	CALL_1
0x40001e9	              0xc9	                                   leave	       338	dir.h	FUNCTION_9
0x40001ea	              0xc3	                                     ret	       338	dir.h	FUNCTION_9
const_error	SWITCH,0:IF,0:WHILE,0:CALL,0:FOR,0:functions,0:ELSE,0:DO,0	5
0x4000040	              0x55	                                push rbp	       447	git-compat-util.h	FUNCTION_16
0x4000041	          0x4889e5	                            mov rbp, rsp	       447	git-compat-util.h	FUNCTION_16
0x4000044	      0xb8ffffffff	                     mov eax, 0xffffffff	       448	git-compat-util.h	FUNCTION_16
0x4000049	              0x5d	                                 pop rbp	       449	git-compat-util.h	FUNCTION_16
0x400004a	              0xc3	                                     ret	       449	git-compat-util.h	FUNCTION_16
unmerge_index_entry_at	SWITCH,0:IF,8:WHILE,1:CALL,9:FOR,1:functions,0:ELSE,0:DO,0	159
0x40006c8	              0x55	                                push rbp	       118	resolve-undo.c	FUNCTION_5
0x40006c9	          0x4889e5	                            mov rbp, rsp	       118	resolve-undo.c	FUNCTION_5
0x40006cc	        0x4883ec50	                           sub rsp, 0x50	       118	resolve-undo.c	FUNCTION_5
0x40006d0	        0x48897db8	             mov qword [rbp - 0x48], rdi	       118	resolve-undo.c	FUNCTION_5
0x40006d4	          0x8975b4	             mov dword [rbp - 0x4c], esi	       118	resolve-undo.c	FUNCTION_5
0x40006d7	    0xc745d0000000	               mov dword [rbp - 0x30], 0	       122	resolve-undo.c	FUNCTION_5
0x40006de	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       125	resolve-undo.c	FUNCTION_5	IF_1
0x40006e2	        0x488b4018	            mov rax, qword [rax + 0x18] 	       125	resolve-undo.c	FUNCTION_5	IF_1
0x40006e6	          0x4885c0	                           test rax, rax	       125	resolve-undo.c	FUNCTION_5	IF_1
0x40006e9	            0x7508	                           jne 0x40006f3	       125	resolve-undo.c	FUNCTION_5	IF_1
0x40006eb	          0x8b45b4	             mov eax, dword [rbp - 0x4c]	       126	resolve-undo.c	FUNCTION_5	IF_1
0x40006ee	      0xe90e020000	                           jmp 0x4000901	       126	resolve-undo.c	FUNCTION_5	IF_1
0x40006f3	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       128	resolve-undo.c	FUNCTION_5
0x40006f7	          0x488b00	                    mov rax, qword [rax]	       128	resolve-undo.c	FUNCTION_5
0x40006fa	          0x8b55b4	             mov edx, dword [rbp - 0x4c]	       128	resolve-undo.c	FUNCTION_5
0x40006fd	          0x4863d2	                         movsxd rdx, edx	       128	resolve-undo.c	FUNCTION_5
0x4000700	        0x48c1e203	                              shl rdx, 3	       128	resolve-undo.c	FUNCTION_5
0x4000704	          0x4801d0	                            add rax, rdx	       128	resolve-undo.c	FUNCTION_5
0x4000707	          0x488b00	                    mov rax, qword [rax]	       128	resolve-undo.c	FUNCTION_5
0x400070a	        0x488945d8	             mov qword [rbp - 0x28], rax	       128	resolve-undo.c	FUNCTION_5
0x400070e	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       129	resolve-undo.c	FUNCTION_5	IF_2
0x4000712	          0x8b4038	            mov eax, dword [rax + 0x38] 	       129	resolve-undo.c	FUNCTION_5	IF_2
0x4000715	      0x2500300000	                         and eax, 0x3000	       129	resolve-undo.c	FUNCTION_5	IF_2
0x400071a	          0xc1e80c	                            shr eax, 0xc	       129	resolve-undo.c	FUNCTION_5	IF_2
0x400071d	            0x85c0	                           test eax, eax	       129	resolve-undo.c	FUNCTION_5	IF_2
0x400071f	            0x7451	                            je 0x4000772	       129	resolve-undo.c	FUNCTION_5	IF_2
0x4000721	            0xeb04	                           jmp 0x4000727	       131	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1
0x4000723	        0x8345b401	               add dword [rbp - 0x4c], 1	       133	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1
0x4000727	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       131	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1
0x400072b	          0x8b500c	              mov edx, dword [rax + 0xc]	       131	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1
0x400072e	          0x8b45b4	             mov eax, dword [rbp - 0x4c]	       131	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1
0x4000731	            0x39c2	                            cmp edx, eax	       131	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1
0x4000733	            0x7632	                           jbe 0x4000767	       131	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1
0x4000735	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       132	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1	CALL_1
0x4000739	        0x488d5058	                   lea rdx, [rax + 0x58]	       132	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1	CALL_1
0x400073d	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       132	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1	CALL_1
0x4000741	          0x488b00	                    mov rax, qword [rax]	       132	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1	CALL_1
0x4000744	          0x8b4db4	             mov ecx, dword [rbp - 0x4c]	       132	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1	CALL_1
0x4000747	          0x4863c9	                         movsxd rcx, ecx	       132	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1	CALL_1
0x400074a	        0x48c1e103	                              shl rcx, 3	       132	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1	CALL_1
0x400074e	          0x4801c8	                            add rax, rcx	       132	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1	CALL_1
0x4000751	          0x488b00	                    mov rax, qword [rax]	       132	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1	CALL_1
0x4000754	        0x4883c058	                           add rax, 0x58	       132	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1	CALL_1
0x4000758	          0x4889d6	                            mov rsi, rdx	       132	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1	CALL_1
0x400075b	          0x4889c7	                            mov rdi, rax	       132	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1	CALL_1
0x400075e	      0xe800000000	                          call 0x4000763	       132	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1	CALL_1
0x4000763	            0x85c0	                           test eax, eax	       131	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1
0x4000765	            0x74bc	                            je 0x4000723	       131	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1
0x4000767	          0x8b45b4	             mov eax, dword [rbp - 0x4c]	       134	resolve-undo.c	FUNCTION_5	IF_2
0x400076a	          0x83e801	                              sub eax, 1	       134	resolve-undo.c	FUNCTION_5	IF_2
0x400076d	      0xe98f010000	                           jmp 0x4000901	       134	resolve-undo.c	FUNCTION_5	IF_2
0x4000772	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       136	resolve-undo.c	FUNCTION_5	CALL_2
0x4000776	        0x488d5058	                   lea rdx, [rax + 0x58]	       136	resolve-undo.c	FUNCTION_5	CALL_2
0x400077a	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       136	resolve-undo.c	FUNCTION_5	CALL_2
0x400077e	        0x488b4018	            mov rax, qword [rax + 0x18] 	       136	resolve-undo.c	FUNCTION_5	CALL_2
0x4000782	          0x4889d6	                            mov rsi, rdx	       136	resolve-undo.c	FUNCTION_5	CALL_2
0x4000785	          0x4889c7	                            mov rdi, rax	       136	resolve-undo.c	FUNCTION_5	CALL_2
0x4000788	      0xe800000000	                          call 0x400078d	       136	resolve-undo.c	FUNCTION_5	CALL_2
0x400078d	        0x488945e0	             mov qword [rbp - 0x20], rax	       136	resolve-undo.c	FUNCTION_5	CALL_2
0x4000791	      0x48837de000	               cmp qword [rbp - 0x20], 0	       137	resolve-undo.c	FUNCTION_5	IF_3
0x4000796	            0x7508	                           jne 0x40007a0	       137	resolve-undo.c	FUNCTION_5	IF_3
0x4000798	          0x8b45b4	             mov eax, dword [rbp - 0x4c]	       138	resolve-undo.c	FUNCTION_5	IF_3
0x400079b	      0xe961010000	                           jmp 0x4000901	       138	resolve-undo.c	FUNCTION_5	IF_3
0x40007a0	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       139	resolve-undo.c	FUNCTION_5
0x40007a4	        0x488b4008	                mov rax, qword [rax + 8]	       139	resolve-undo.c	FUNCTION_5
0x40007a8	        0x488945e8	             mov qword [rbp - 0x18], rax	       139	resolve-undo.c	FUNCTION_5
0x40007ac	      0x48837de800	               cmp qword [rbp - 0x18], 0	       140	resolve-undo.c	FUNCTION_5	IF_4
0x40007b1	            0x7508	                           jne 0x40007bb	       140	resolve-undo.c	FUNCTION_5	IF_4
0x40007b3	          0x8b45b4	             mov eax, dword [rbp - 0x4c]	       141	resolve-undo.c	FUNCTION_5	IF_4
0x40007b6	      0xe946010000	                           jmp 0x4000901	       141	resolve-undo.c	FUNCTION_5	IF_4
0x40007bb	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       142	resolve-undo.c	FUNCTION_5
0x40007bf	          0x8b4038	            mov eax, dword [rax + 0x38] 	       142	resolve-undo.c	FUNCTION_5
0x40007c2	      0x2500000004	        and eax, loc.imp.add_index_entry	       142	resolve-undo.c	FUNCTION_5
0x40007c7	          0x8945d4	             mov dword [rbp - 0x2c], eax	       142	resolve-undo.c	FUNCTION_5
0x40007ca	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       143	resolve-undo.c	FUNCTION_5	CALL_3
0x40007ce	        0x4883c058	                           add rax, 0x58	       143	resolve-undo.c	FUNCTION_5	CALL_3
0x40007d2	          0x4889c7	                            mov rdi, rax	       143	resolve-undo.c	FUNCTION_5	CALL_3
0x40007d5	      0xe800000000	                          call 0x40007da	       143	resolve-undo.c	FUNCTION_5	CALL_3
0x40007da	        0x488945f0	             mov qword [rbp - 0x10], rax	       143	resolve-undo.c	FUNCTION_5	CALL_3
0x40007de	          0x8b55b4	             mov edx, dword [rbp - 0x4c]	       144	resolve-undo.c	FUNCTION_5	CALL_4
0x40007e1	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       144	resolve-undo.c	FUNCTION_5	CALL_4
0x40007e5	            0x89d6	                            mov esi, edx	       144	resolve-undo.c	FUNCTION_5	CALL_4
0x40007e7	          0x4889c7	                            mov rdi, rax	       144	resolve-undo.c	FUNCTION_5	CALL_4
0x40007ea	      0xe800000000	                          call 0x40007ef	       144	resolve-undo.c	FUNCTION_5	CALL_4
0x40007ef	    0xc745cc000000	               mov dword [rbp - 0x34], 0	       145	resolve-undo.c	FUNCTION_5	FOR_1
0x40007f6	      0xe9bc000000	                           jmp 0x40008b7	       145	resolve-undo.c	FUNCTION_5	FOR_1
0x40007fb	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       147	resolve-undo.c	FUNCTION_5	FOR_1	IF_5
0x40007ff	          0x8b55cc	             mov edx, dword [rbp - 0x34]	       147	resolve-undo.c	FUNCTION_5	FOR_1	IF_5
0x4000802	          0x4863d2	                         movsxd rdx, edx	       147	resolve-undo.c	FUNCTION_5	FOR_1	IF_5
0x4000805	          0x8b0490	            mov eax, dword [rax + rdx*4]	       147	resolve-undo.c	FUNCTION_5	FOR_1	IF_5
0x4000808	            0x85c0	                           test eax, eax	       147	resolve-undo.c	FUNCTION_5	FOR_1	IF_5
0x400080a	     0xf84a2000000	                            je 0x40008b2	       147	resolve-undo.c	FUNCTION_5	FOR_1	IF_5
0x4000810	          0x8b45cc	             mov eax, dword [rbp - 0x34]	       149	resolve-undo.c	FUNCTION_5	FOR_1	CALL_5
0x4000813	          0x8d4801	                      lea ecx, [rax + 1]	       149	resolve-undo.c	FUNCTION_5	FOR_1	CALL_5
0x4000816	          0x8b45cc	             mov eax, dword [rbp - 0x34]	       149	resolve-undo.c	FUNCTION_5	FOR_1	CALL_5
0x4000819	          0x4863d0	                         movsxd rdx, eax	       149	resolve-undo.c	FUNCTION_5	FOR_1	CALL_5
0x400081c	          0x4889d0	                            mov rax, rdx	       149	resolve-undo.c	FUNCTION_5	FOR_1	CALL_5
0x400081f	        0x48c1e002	                              shl rax, 2	       149	resolve-undo.c	FUNCTION_5	FOR_1	CALL_5
0x4000823	          0x4801d0	                            add rax, rdx	       149	resolve-undo.c	FUNCTION_5	FOR_1	CALL_5
0x4000826	        0x48c1e002	                              shl rax, 2	       149	resolve-undo.c	FUNCTION_5	FOR_1	CALL_5
0x400082a	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       149	resolve-undo.c	FUNCTION_5	FOR_1	CALL_5
0x400082e	          0x4801d0	                            add rax, rdx	       149	resolve-undo.c	FUNCTION_5	FOR_1	CALL_5
0x4000831	        0x488d700c	                    lea rsi, [rax + 0xc]	       149	resolve-undo.c	FUNCTION_5	FOR_1	CALL_5
0x4000835	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       149	resolve-undo.c	FUNCTION_5	FOR_1	CALL_5
0x4000839	          0x8b55cc	             mov edx, dword [rbp - 0x34]	       149	resolve-undo.c	FUNCTION_5	FOR_1	CALL_5
0x400083c	          0x4863d2	                         movsxd rdx, edx	       149	resolve-undo.c	FUNCTION_5	FOR_1	CALL_5
0x400083f	          0x8b0490	            mov eax, dword [rax + rdx*4]	       149	resolve-undo.c	FUNCTION_5	FOR_1	CALL_5
0x4000842	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       149	resolve-undo.c	FUNCTION_5	FOR_1	CALL_5
0x4000846	    0x41b800000000	                              mov r8d, 0	       149	resolve-undo.c	FUNCTION_5	FOR_1	CALL_5
0x400084c	            0x89c7	                            mov edi, eax	       149	resolve-undo.c	FUNCTION_5	FOR_1	CALL_5
0x400084e	      0xe800000000	                          call 0x4000853	       149	resolve-undo.c	FUNCTION_5	FOR_1	CALL_5
0x4000853	        0x488945f8	                mov qword [rbp - 8], rax	       149	resolve-undo.c	FUNCTION_5	FOR_1	CALL_5
0x4000857	        0x837dd400	               cmp dword [rbp - 0x2c], 0	       151	resolve-undo.c	FUNCTION_5	FOR_1	IF_6
0x400085b	            0x7415	                            je 0x4000872	       151	resolve-undo.c	FUNCTION_5	FOR_1	IF_6
0x400085d	        0x488b45f8	                mov rax, qword [rbp - 8]	       152	resolve-undo.c	FUNCTION_5	FOR_1	IF_6
0x4000861	          0x8b4038	            mov eax, dword [rax + 0x38] 	       152	resolve-undo.c	FUNCTION_5	FOR_1	IF_6
0x4000864	       0xd00000004	         or eax, loc.imp.add_index_entry	       152	resolve-undo.c	FUNCTION_5	FOR_1	IF_6
0x4000869	            0x89c2	                            mov edx, eax	       152	resolve-undo.c	FUNCTION_5	FOR_1	IF_6
0x400086b	        0x488b45f8	                mov rax, qword [rbp - 8]	       152	resolve-undo.c	FUNCTION_5	FOR_1	IF_6
0x400086f	          0x895038	             mov dword [rax + 0x38], edx	       152	resolve-undo.c	FUNCTION_5	FOR_1	IF_6
0x4000872	        0x488b4df8	                mov rcx, qword [rbp - 8]	       153	resolve-undo.c	FUNCTION_5	FOR_1	IF_7	CALL_6
0x4000876	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       153	resolve-undo.c	FUNCTION_5	FOR_1	IF_7	CALL_6
0x400087a	      0xba01000000	                              mov edx, 1	       153	resolve-undo.c	FUNCTION_5	FOR_1	IF_7	CALL_6
0x400087f	          0x4889ce	                            mov rsi, rcx	       153	resolve-undo.c	FUNCTION_5	FOR_1	IF_7	CALL_6
0x4000882	          0x4889c7	                            mov rdi, rax	       153	resolve-undo.c	FUNCTION_5	FOR_1	IF_7	CALL_6
0x4000885	      0xe800000000	                          call 0x400088a	       153	resolve-undo.c	FUNCTION_5	FOR_1	IF_7	CALL_6
0x400088a	            0x85c0	                           test eax, eax	       153	resolve-undo.c	FUNCTION_5	FOR_1	IF_7	CALL_6
0x400088c	            0x7425	                            je 0x40008b3	       153	resolve-undo.c	FUNCTION_5	FOR_1	IF_7	CALL_6
0x400088e	    0xc745d0010000	               mov dword [rbp - 0x30], 1	       154	resolve-undo.c	FUNCTION_5	FOR_1	IF_7
0x4000895	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       155	resolve-undo.c	FUNCTION_5	FOR_1	IF_7
0x4000899	          0x4889c6	                            mov rsi, rax	       155	resolve-undo.c	FUNCTION_5	FOR_1	IF_7
0x400089c	      0xbf00000000	                              mov edi, 0	       155	resolve-undo.c	FUNCTION_5	FOR_1	IF_7
0x40008a1	      0xb800000000	                              mov eax, 0	       155	resolve-undo.c	FUNCTION_5	FOR_1	IF_7
0x40008a6	      0xe800000000	                          call 0x40008ab	       155	resolve-undo.c	FUNCTION_5	FOR_1	IF_7
0x40008ab	      0xe890f7ffff	                    call sym.const_error	       155	resolve-undo.c	FUNCTION_5	FOR_1	IF_7
0x40008b0	            0xeb01	                           jmp 0x40008b3	       155	resolve-undo.c	FUNCTION_5	FOR_1	IF_7
0x40008b2	              0x90	                                     nop	       148	resolve-undo.c	FUNCTION_5	FOR_1	IF_5
0x40008b3	        0x8345cc01	               add dword [rbp - 0x34], 1	       145	resolve-undo.c	FUNCTION_5	FOR_1
0x40008b7	        0x837dcc02	               cmp dword [rbp - 0x34], 2	       145	resolve-undo.c	FUNCTION_5	FOR_1
0x40008bb	     0xf8e3affffff	                           jle 0x40007fb	       145	resolve-undo.c	FUNCTION_5	FOR_1
0x40008c1	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       158	resolve-undo.c	FUNCTION_5	CALL_7
0x40008c5	          0x4889c7	                            mov rdi, rax	       158	resolve-undo.c	FUNCTION_5	CALL_7
0x40008c8	      0xe800000000	                          call 0x40008cd	       158	resolve-undo.c	FUNCTION_5	CALL_7
0x40008cd	        0x837dd000	               cmp dword [rbp - 0x30], 0	       159	resolve-undo.c	FUNCTION_5	IF_8
0x40008d1	            0x7405	                            je 0x40008d8	       159	resolve-undo.c	FUNCTION_5	IF_8
0x40008d3	          0x8b45b4	             mov eax, dword [rbp - 0x4c]	       160	resolve-undo.c	FUNCTION_5	IF_8
0x40008d6	            0xeb29	                           jmp 0x4000901	       160	resolve-undo.c	FUNCTION_5	IF_8
0x40008d8	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       161	resolve-undo.c	FUNCTION_5	CALL_8
0x40008dc	          0x4889c7	                            mov rdi, rax	       161	resolve-undo.c	FUNCTION_5	CALL_8
0x40008df	      0xe800000000	                          call 0x40008e4	       161	resolve-undo.c	FUNCTION_5	CALL_8
0x40008e4	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       162	resolve-undo.c	FUNCTION_5
0x40008e8	    0x48c740080000	                  mov qword [rax + 8], 0	       162	resolve-undo.c	FUNCTION_5
0x40008f0	          0x8b55b4	             mov edx, dword [rbp - 0x4c]	       163	resolve-undo.c	FUNCTION_5	CALL_9
0x40008f3	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       163	resolve-undo.c	FUNCTION_5	CALL_9
0x40008f7	            0x89d6	                            mov esi, edx	       163	resolve-undo.c	FUNCTION_5	CALL_9
0x40008f9	          0x4889c7	                            mov rdi, rax	       163	resolve-undo.c	FUNCTION_5	CALL_9
0x40008fc	      0xe800000000	                          call 0x4000901	       163	resolve-undo.c	FUNCTION_5	CALL_9
0x4000901	              0xc9	                                   leave	       164	resolve-undo.c	FUNCTION_5
0x4000902	              0xc3	                                     ret	       164	resolve-undo.c	FUNCTION_5
unmerge_index	SWITCH,0:IF,2:WHILE,0:CALL,2:FOR,1:functions,0:ELSE,0:DO,0	45
0x400097b	              0x55	                                push rbp	       181	resolve-undo.c	FUNCTION_7
0x400097c	          0x4889e5	                            mov rbp, rsp	       181	resolve-undo.c	FUNCTION_7
0x400097f	        0x4883ec20	                           sub rsp, 0x20	       181	resolve-undo.c	FUNCTION_7
0x4000983	        0x48897de8	             mov qword [rbp - 0x18], rdi	       181	resolve-undo.c	FUNCTION_7
0x4000987	        0x488975e0	             mov qword [rbp - 0x20], rsi	       181	resolve-undo.c	FUNCTION_7
0x400098b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       184	resolve-undo.c	FUNCTION_7	IF_1
0x400098f	        0x488b4018	            mov rax, qword [rax + 0x18] 	       184	resolve-undo.c	FUNCTION_7	IF_1
0x4000993	          0x4885c0	                           test rax, rax	       184	resolve-undo.c	FUNCTION_7	IF_1
0x4000996	            0x746b	                            je 0x4000a03	       184	resolve-undo.c	FUNCTION_7	IF_1
0x4000998	    0xc745f4000000	                mov dword [rbp - 0xc], 0	       187	resolve-undo.c	FUNCTION_7	FOR_1
0x400099f	            0xeb52	                           jmp 0x40009f3	       187	resolve-undo.c	FUNCTION_7	FOR_1
0x40009a1	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       188	resolve-undo.c	FUNCTION_7	FOR_1
0x40009a5	          0x488b00	                    mov rax, qword [rax]	       188	resolve-undo.c	FUNCTION_7	FOR_1
0x40009a8	          0x8b55f4	              mov edx, dword [rbp - 0xc]	       188	resolve-undo.c	FUNCTION_7	FOR_1
0x40009ab	          0x4863d2	                         movsxd rdx, edx	       188	resolve-undo.c	FUNCTION_7	FOR_1
0x40009ae	        0x48c1e203	                              shl rdx, 3	       188	resolve-undo.c	FUNCTION_7	FOR_1
0x40009b2	          0x4801d0	                            add rax, rdx	       188	resolve-undo.c	FUNCTION_7	FOR_1
0x40009b5	          0x488b00	                    mov rax, qword [rax]	       188	resolve-undo.c	FUNCTION_7	FOR_1
0x40009b8	        0x488945f8	                mov qword [rbp - 8], rax	       188	resolve-undo.c	FUNCTION_7	FOR_1
0x40009bc	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	       189	resolve-undo.c	FUNCTION_7	FOR_1	IF_2	CALL_1
0x40009c0	        0x488b45f8	                mov rax, qword [rbp - 8]	       189	resolve-undo.c	FUNCTION_7	FOR_1	IF_2	CALL_1
0x40009c4	      0xba00000000	                              mov edx, 0	       189	resolve-undo.c	FUNCTION_7	FOR_1	IF_2	CALL_1
0x40009c9	          0x4889ce	                            mov rsi, rcx	       189	resolve-undo.c	FUNCTION_7	FOR_1	IF_2	CALL_1
0x40009cc	          0x4889c7	                            mov rdi, rax	       189	resolve-undo.c	FUNCTION_7	FOR_1	IF_2	CALL_1
0x40009cf	      0xe8a1f7ffff	                  call sym.ce_path_match	       189	resolve-undo.c	FUNCTION_7	FOR_1	IF_2	CALL_1
0x40009d4	            0x85c0	                           test eax, eax	       189	resolve-undo.c	FUNCTION_7	FOR_1	IF_2	CALL_1
0x40009d6	            0x7416	                            je 0x40009ee	       189	resolve-undo.c	FUNCTION_7	FOR_1	IF_2	CALL_1
0x40009d8	          0x8b55f4	              mov edx, dword [rbp - 0xc]	       191	resolve-undo.c	FUNCTION_7	FOR_1	CALL_2
0x40009db	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       191	resolve-undo.c	FUNCTION_7	FOR_1	CALL_2
0x40009df	            0x89d6	                            mov esi, edx	       191	resolve-undo.c	FUNCTION_7	FOR_1	CALL_2
0x40009e1	          0x4889c7	                            mov rdi, rax	       191	resolve-undo.c	FUNCTION_7	FOR_1	CALL_2
0x40009e4	      0xe800000000	                          call 0x40009e9	       191	resolve-undo.c	FUNCTION_7	FOR_1	CALL_2
0x40009e9	          0x8945f4	              mov dword [rbp - 0xc], eax	       191	resolve-undo.c	FUNCTION_7	FOR_1	CALL_2
0x40009ec	            0xeb01	                           jmp 0x40009ef	       191	resolve-undo.c	FUNCTION_7	FOR_1	CALL_2
0x40009ee	              0x90	                                     nop	       190	resolve-undo.c	FUNCTION_7	FOR_1	IF_2
0x40009ef	        0x8345f401	                add dword [rbp - 0xc], 1	       187	resolve-undo.c	FUNCTION_7	FOR_1
0x40009f3	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       187	resolve-undo.c	FUNCTION_7	FOR_1
0x40009f7	          0x8b500c	              mov edx, dword [rax + 0xc]	       187	resolve-undo.c	FUNCTION_7	FOR_1
0x40009fa	          0x8b45f4	              mov eax, dword [rbp - 0xc]	       187	resolve-undo.c	FUNCTION_7	FOR_1
0x40009fd	            0x39c2	                            cmp edx, eax	       187	resolve-undo.c	FUNCTION_7	FOR_1
0x40009ff	            0x77a0	                            ja 0x40009a1	       187	resolve-undo.c	FUNCTION_7	FOR_1
0x4000a01	            0xeb01	                           jmp 0x4000a04	       187	resolve-undo.c	FUNCTION_7	FOR_1
0x4000a03	              0x90	                                     nop	       185	resolve-undo.c	FUNCTION_7	IF_1
0x4000a04	              0xc9	                                   leave	       193	resolve-undo.c	FUNCTION_7
0x4000a05	              0xc3	                                     ret	       193	resolve-undo.c	FUNCTION_7
oidcpy	SWITCH,0:IF,0:WHILE,0:CALL,1:FOR,0:functions,0:ELSE,0:DO,0	13
0x400014f	              0x55	                                push rbp	       999	cache.h	FUNCTION_61
0x4000150	          0x4889e5	                            mov rbp, rsp	       999	cache.h	FUNCTION_61
0x4000153	        0x4883ec10	                           sub rsp, 0x10	       999	cache.h	FUNCTION_61
0x4000157	        0x48897df8	                mov qword [rbp - 8], rdi	       999	cache.h	FUNCTION_61
0x400015b	        0x488975f0	             mov qword [rbp - 0x10], rsi	       999	cache.h	FUNCTION_61
0x400015f	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      1000	cache.h	FUNCTION_61	CALL_1
0x4000163	        0x488b45f8	                mov rax, qword [rbp - 8]	      1000	cache.h	FUNCTION_61	CALL_1
0x4000167	          0x4889d6	                            mov rsi, rdx	      1000	cache.h	FUNCTION_61	CALL_1
0x400016a	          0x4889c7	                            mov rdi, rax	      1000	cache.h	FUNCTION_61	CALL_1
0x400016d	      0xe8b2ffffff	                        call sym.hashcpy	      1000	cache.h	FUNCTION_61	CALL_1
0x4000172	              0x90	                                     nop	      1001	cache.h	FUNCTION_61
0x4000173	              0xc9	                                   leave	      1001	cache.h	FUNCTION_61
0x4000174	              0xc3	                                     ret	      1001	cache.h	FUNCTION_61
unmerge_marked_index	SWITCH,0:IF,2:WHILE,0:CALL,1:FOR,1:functions,0:ELSE,0:DO,0	39
0x4000903	              0x55	                                push rbp	       167	resolve-undo.c	FUNCTION_6
0x4000904	          0x4889e5	                            mov rbp, rsp	       167	resolve-undo.c	FUNCTION_6
0x4000907	        0x4883ec20	                           sub rsp, 0x20	       167	resolve-undo.c	FUNCTION_6
0x400090b	        0x48897de8	             mov qword [rbp - 0x18], rdi	       167	resolve-undo.c	FUNCTION_6
0x400090f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       170	resolve-undo.c	FUNCTION_6	IF_1
0x4000913	        0x488b4018	            mov rax, qword [rax + 0x18] 	       170	resolve-undo.c	FUNCTION_6	IF_1
0x4000917	          0x4885c0	                           test rax, rax	       170	resolve-undo.c	FUNCTION_6	IF_1
0x400091a	            0x745c	                            je 0x4000978	       170	resolve-undo.c	FUNCTION_6	IF_1
0x400091c	    0xc745f4000000	                mov dword [rbp - 0xc], 0	       173	resolve-undo.c	FUNCTION_6	FOR_1
0x4000923	            0xeb43	                           jmp 0x4000968	       173	resolve-undo.c	FUNCTION_6	FOR_1
0x4000925	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       174	resolve-undo.c	FUNCTION_6	FOR_1
0x4000929	          0x488b00	                    mov rax, qword [rax]	       174	resolve-undo.c	FUNCTION_6	FOR_1
0x400092c	          0x8b55f4	              mov edx, dword [rbp - 0xc]	       174	resolve-undo.c	FUNCTION_6	FOR_1
0x400092f	          0x4863d2	                         movsxd rdx, edx	       174	resolve-undo.c	FUNCTION_6	FOR_1
0x4000932	        0x48c1e203	                              shl rdx, 3	       174	resolve-undo.c	FUNCTION_6	FOR_1
0x4000936	          0x4801d0	                            add rax, rdx	       174	resolve-undo.c	FUNCTION_6	FOR_1
0x4000939	          0x488b00	                    mov rax, qword [rax]	       174	resolve-undo.c	FUNCTION_6	FOR_1
0x400093c	        0x488945f8	                mov qword [rbp - 8], rax	       174	resolve-undo.c	FUNCTION_6	FOR_1
0x4000940	        0x488b45f8	                mov rax, qword [rbp - 8]	       175	resolve-undo.c	FUNCTION_6	FOR_1	IF_2
0x4000944	          0x8b4038	            mov eax, dword [rax + 0x38] 	       175	resolve-undo.c	FUNCTION_6	FOR_1	IF_2
0x4000947	      0x2500000004	        and eax, loc.imp.add_index_entry	       175	resolve-undo.c	FUNCTION_6	FOR_1	IF_2
0x400094c	            0x85c0	                           test eax, eax	       175	resolve-undo.c	FUNCTION_6	FOR_1	IF_2
0x400094e	            0x7414	                            je 0x4000964	       175	resolve-undo.c	FUNCTION_6	FOR_1	IF_2
0x4000950	          0x8b55f4	              mov edx, dword [rbp - 0xc]	       176	resolve-undo.c	FUNCTION_6	FOR_1	CALL_1
0x4000953	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       176	resolve-undo.c	FUNCTION_6	FOR_1	CALL_1
0x4000957	            0x89d6	                            mov esi, edx	       176	resolve-undo.c	FUNCTION_6	FOR_1	CALL_1
0x4000959	          0x4889c7	                            mov rdi, rax	       176	resolve-undo.c	FUNCTION_6	FOR_1	CALL_1
0x400095c	      0xe800000000	                          call 0x4000961	       176	resolve-undo.c	FUNCTION_6	FOR_1	CALL_1
0x4000961	          0x8945f4	              mov dword [rbp - 0xc], eax	       176	resolve-undo.c	FUNCTION_6	FOR_1	CALL_1
0x4000964	        0x8345f401	                add dword [rbp - 0xc], 1	       173	resolve-undo.c	FUNCTION_6	FOR_1
0x4000968	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       173	resolve-undo.c	FUNCTION_6	FOR_1
0x400096c	          0x8b500c	              mov edx, dword [rax + 0xc]	       173	resolve-undo.c	FUNCTION_6	FOR_1
0x400096f	          0x8b45f4	              mov eax, dword [rbp - 0xc]	       173	resolve-undo.c	FUNCTION_6	FOR_1
0x4000972	            0x39c2	                            cmp edx, eax	       173	resolve-undo.c	FUNCTION_6	FOR_1
0x4000974	            0x77af	                            ja 0x4000925	       173	resolve-undo.c	FUNCTION_6	FOR_1
0x4000976	            0xeb01	                           jmp 0x4000979	       173	resolve-undo.c	FUNCTION_6	FOR_1
0x4000978	              0x90	                                     nop	       171	resolve-undo.c	FUNCTION_6	IF_1
0x4000979	              0xc9	                                   leave	       178	resolve-undo.c	FUNCTION_6
0x400097a	              0xc3	                                     ret	       178	resolve-undo.c	FUNCTION_6
hashcpy	SWITCH,0:IF,0:WHILE,0:CALL,1:FOR,0:functions,0:ELSE,0:DO,0	14
0x4000124	              0x55	                                push rbp	       994	cache.h	FUNCTION_60
0x4000125	          0x4889e5	                            mov rbp, rsp	       994	cache.h	FUNCTION_60
0x4000128	        0x4883ec10	                           sub rsp, 0x10	       994	cache.h	FUNCTION_60
0x400012c	        0x48897df8	                mov qword [rbp - 8], rdi	       994	cache.h	FUNCTION_60
0x4000130	        0x488975f0	             mov qword [rbp - 0x10], rsi	       994	cache.h	FUNCTION_60
0x4000134	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	       995	cache.h	FUNCTION_60	CALL_1
0x4000138	        0x488b45f8	                mov rax, qword [rbp - 8]	       995	cache.h	FUNCTION_60	CALL_1
0x400013c	      0xba14000000	                           mov edx, 0x14	       995	cache.h	FUNCTION_60	CALL_1
0x4000141	          0x4889ce	                            mov rsi, rcx	       995	cache.h	FUNCTION_60	CALL_1
0x4000144	          0x4889c7	                            mov rdi, rax	       995	cache.h	FUNCTION_60	CALL_1
0x4000147	      0xe800000000	                          call 0x400014c	       995	cache.h	FUNCTION_60	CALL_1
0x400014c	              0x90	                                     nop	       996	cache.h	FUNCTION_60
0x400014d	              0xc9	                                   leave	       996	cache.h	FUNCTION_60
0x400014e	              0xc3	                                     ret	       996	cache.h	FUNCTION_60
strbuf_addstr	SWITCH,0:IF,0:WHILE,0:CALL,2:FOR,0:functions,0:ELSE,0:DO,0	17
0x40000ef	              0x55	                                push rbp	       278	strbuf.h	FUNCTION_42
0x40000f0	          0x4889e5	                            mov rbp, rsp	       278	strbuf.h	FUNCTION_42
0x40000f3	        0x4883ec10	                           sub rsp, 0x10	       278	strbuf.h	FUNCTION_42
0x40000f7	        0x48897df8	                mov qword [rbp - 8], rdi	       278	strbuf.h	FUNCTION_42
0x40000fb	        0x488975f0	             mov qword [rbp - 0x10], rsi	       278	strbuf.h	FUNCTION_42
0x40000ff	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       279	strbuf.h	FUNCTION_42	CALL_2
0x4000103	          0x4889c7	                            mov rdi, rax	       279	strbuf.h	FUNCTION_42	CALL_2
0x4000106	      0xe800000000	                          call 0x400010b	       279	strbuf.h	FUNCTION_42	CALL_2
0x400010b	          0x4889c2	                            mov rdx, rax	       279	strbuf.h	FUNCTION_42	CALL_2
0x400010e	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	       279	strbuf.h	FUNCTION_42	CALL_2
0x4000112	        0x488b45f8	                mov rax, qword [rbp - 8]	       279	strbuf.h	FUNCTION_42	CALL_2
0x4000116	          0x4889ce	                            mov rsi, rcx	       279	strbuf.h	FUNCTION_42	CALL_2
0x4000119	          0x4889c7	                            mov rdi, rax	       279	strbuf.h	FUNCTION_42	CALL_2
0x400011c	      0xe800000000	                          call 0x4000121	       279	strbuf.h	FUNCTION_42	CALL_2
0x4000121	              0x90	                                     nop	       280	strbuf.h	FUNCTION_42
0x4000122	              0xc9	                                   leave	       280	strbuf.h	FUNCTION_42
0x4000123	              0xc3	                                     ret	       280	strbuf.h	FUNCTION_42
