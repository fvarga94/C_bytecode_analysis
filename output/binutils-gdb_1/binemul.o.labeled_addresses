do_ar_emul_append	SWITCH,0:FOR,1:IF,3:ELSE,0:DO,0:WHILE,0:functions,0:CALL,7	74
0x4000117	              0x55	                                push rbp	        62	binemul.c	FUNCTION_5
0x4000118	          0x4889e5	                            mov rbp, rsp	        62	binemul.c	FUNCTION_5
0x400011b	        0x4883ec30	                           sub rsp, 0x30	        62	binemul.c	FUNCTION_5
0x400011f	        0x48897de8	             mov qword [rbp - 0x18], rdi	        62	binemul.c	FUNCTION_5
0x4000123	        0x488975e0	             mov qword [rbp - 0x20], rsi	        62	binemul.c	FUNCTION_5
0x4000127	          0x8955dc	             mov dword [rbp - 0x24], edx	        62	binemul.c	FUNCTION_5
0x400012a	          0x894dd8	             mov dword [rbp - 0x28], ecx	        62	binemul.c	FUNCTION_5
0x400012d	        0x4c8945d0	              mov qword [rbp - 0x30], r8	        62	binemul.c	FUNCTION_5
0x4000131	        0x837dd800	               cmp dword [rbp - 0x28], 0	        65	binemul.c	FUNCTION_5	IF_1	CALL_2
0x4000135	     0xf8491000000	                            je 0x40001cc	        65	binemul.c	FUNCTION_5	IF_1	CALL_2
0x400013b	        0x488b45e0	             mov rax, qword [rbp - 0x20]	        65	binemul.c	FUNCTION_5	IF_1	CALL_2
0x400013f	      0xbe02000000	                              mov esi, 2	        65	binemul.c	FUNCTION_5	IF_1	CALL_2
0x4000144	          0x4889c7	                            mov rdi, rax	        65	binemul.c	FUNCTION_5	IF_1	CALL_2
0x4000147	      0xe800000000	                          call 0x400014c	        65	binemul.c	FUNCTION_5	IF_1	CALL_2
0x400014c	            0x85c0	                           test eax, eax	        65	binemul.c	FUNCTION_5	IF_1	CALL_2
0x400014e	            0x747c	                            je 0x40001cc	        65	binemul.c	FUNCTION_5	IF_1	CALL_2
0x4000150	    0xc745f4000000	                mov dword [rbp - 0xc], 0	        68	binemul.c	FUNCTION_5	IF_1
0x4000157	        0x488b45e0	             mov rax, qword [rbp - 0x20]	        70	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_3
0x400015b	      0xbe00000000	                              mov esi, 0	        70	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_3
0x4000160	          0x4889c7	                            mov rdi, rax	        70	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_3
0x4000163	      0xe800000000	                          call 0x4000168	        70	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_3
0x4000168	        0x488945f8	                mov qword [rbp - 8], rax	        70	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_3
0x400016c	            0xeb52	                           jmp 0x40001c0	        70	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_3
0x400016e	        0x488b4dd0	             mov rcx, qword [rbp - 0x30]	        74	binemul.c	FUNCTION_5	IF_1	FOR_1	IF_2	CALL_5
0x4000172	          0x8b55dc	             mov edx, dword [rbp - 0x24]	        74	binemul.c	FUNCTION_5	IF_1	FOR_1	IF_2	CALL_5
0x4000175	        0x488b75f8	                mov rsi, qword [rbp - 8]	        74	binemul.c	FUNCTION_5	IF_1	FOR_1	IF_2	CALL_5
0x4000179	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        74	binemul.c	FUNCTION_5	IF_1	FOR_1	IF_2	CALL_5
0x400017d	          0x4989c8	                             mov r8, rcx	        74	binemul.c	FUNCTION_5	IF_1	FOR_1	IF_2	CALL_5
0x4000180	      0xb901000000	                              mov ecx, 1	        74	binemul.c	FUNCTION_5	IF_1	FOR_1	IF_2	CALL_5
0x4000185	          0x4889c7	                            mov rdi, rax	        74	binemul.c	FUNCTION_5	IF_1	FOR_1	IF_2	CALL_5
0x4000188	      0xe800000000	                          call 0x400018d	        74	binemul.c	FUNCTION_5	IF_1	FOR_1	IF_2	CALL_5
0x400018d	            0x85c0	                           test eax, eax	        74	binemul.c	FUNCTION_5	IF_1	FOR_1	IF_2	CALL_5
0x400018f	            0x7418	                            je 0x40001a9	        74	binemul.c	FUNCTION_5	IF_1	FOR_1	IF_2	CALL_5
0x4000191	    0xc745f4010000	                mov dword [rbp - 0xc], 1	        76	binemul.c	FUNCTION_5	IF_1	FOR_1	IF_2
0x4000198	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        77	binemul.c	FUNCTION_5	IF_1	FOR_1	IF_2
0x400019c	          0x488b00	                    mov rax, qword [rax]	        77	binemul.c	FUNCTION_5	IF_1	FOR_1	IF_2
0x400019f	    0x4805d8000000	                           add rax, 0xd8	        77	binemul.c	FUNCTION_5	IF_1	FOR_1	IF_2
0x40001a5	        0x488945e8	             mov qword [rbp - 0x18], rax	        77	binemul.c	FUNCTION_5	IF_1	FOR_1	IF_2
0x40001a9	        0x488b55f8	                mov rdx, qword [rbp - 8]	        72	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_4
0x40001ad	        0x488b45e0	             mov rax, qword [rbp - 0x20]	        72	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_4
0x40001b1	          0x4889d6	                            mov rsi, rdx	        72	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_4
0x40001b4	          0x4889c7	                            mov rdi, rax	        72	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_4
0x40001b7	      0xe800000000	                          call 0x40001bc	        72	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_4
0x40001bc	        0x488945f8	                mov qword [rbp - 8], rax	        72	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_4
0x40001c0	      0x48837df800	                  cmp qword [rbp - 8], 0	        70	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_3
0x40001c5	            0x75a7	                           jne 0x400016e	        70	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_3
0x40001c7	          0x8b45f4	              mov eax, dword [rbp - 0xc]	        81	binemul.c	FUNCTION_5	IF_1
0x40001ca	            0xeb59	                           jmp 0x4000225	        81	binemul.c	FUNCTION_5	IF_1
0x40001cc	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	        84	binemul.c	FUNCTION_5	IF_3	CALL_6
0x40001d0	        0x488b45d0	             mov rax, qword [rbp - 0x30]	        84	binemul.c	FUNCTION_5	IF_3	CALL_6
0x40001d4	          0x4889d7	                            mov rdi, rdx	        84	binemul.c	FUNCTION_5	IF_3	CALL_6
0x40001d7	            0xffd0	                                call rax	        84	binemul.c	FUNCTION_5	IF_3	CALL_6
0x40001d9	            0x85c0	                           test eax, eax	        84	binemul.c	FUNCTION_5	IF_3	CALL_6
0x40001db	            0x7507	                           jne 0x40001e4	        84	binemul.c	FUNCTION_5	IF_3	CALL_6
0x40001dd	      0xb800000000	                              mov eax, 0	        85	binemul.c	FUNCTION_5	IF_3
0x40001e2	            0xeb41	                           jmp 0x4000225	        85	binemul.c	FUNCTION_5	IF_3
0x40001e4	        0x837ddc00	               cmp dword [rbp - 0x24], 0	        87	binemul.c	FUNCTION_5	CALL_7
0x40001e8	            0x7419	                            je 0x4000203	        87	binemul.c	FUNCTION_5	CALL_7
0x40001ea	        0x488b45e0	             mov rax, qword [rbp - 0x20]	        87	binemul.c	FUNCTION_5	CALL_7
0x40001ee	          0x488b00	                    mov rax, qword [rax]	        87	binemul.c	FUNCTION_5	CALL_7
0x40001f1	          0x4889c6	                            mov rsi, rax	        87	binemul.c	FUNCTION_5	CALL_7
0x40001f4	      0xbf00000000	                              mov edi, 0	        87	binemul.c	FUNCTION_5	CALL_7
0x40001f9	      0xb800000000	                              mov eax, 0	        87	binemul.c	FUNCTION_5	CALL_7
0x40001fe	      0xe800000000	                          call 0x4000203	        87	binemul.c	FUNCTION_5	CALL_7
0x4000203	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        89	binemul.c	FUNCTION_5
0x4000207	          0x488b10	                    mov rdx, qword [rax]	        89	binemul.c	FUNCTION_5
0x400020a	        0x488b45e0	             mov rax, qword [rbp - 0x20]	        89	binemul.c	FUNCTION_5
0x400020e	    0x488990d80000	             mov qword [rax + 0xd8], rdx	        89	binemul.c	FUNCTION_5
0x4000215	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        90	binemul.c	FUNCTION_5
0x4000219	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	        90	binemul.c	FUNCTION_5
0x400021d	          0x488910	                    mov qword [rax], rdx	        90	binemul.c	FUNCTION_5
0x4000220	      0xb801000000	                              mov eax, 1	        92	binemul.c	FUNCTION_5
0x4000225	              0xc9	                                   leave	        93	binemul.c	FUNCTION_5
0x4000226	              0xc3	                                     ret	        93	binemul.c	FUNCTION_5
ar_emul_default_parse_arg	SWITCH,0:FOR,0:IF,0:ELSE,0:DO,0:WHILE,0:functions,0:CALL,0	6
0x4000380	              0x55	                                push rbp	       146	binemul.c	FUNCTION_10
0x4000381	          0x4889e5	                            mov rbp, rsp	       146	binemul.c	FUNCTION_10
0x4000384	        0x48897df8	                mov qword [rbp - 8], rdi	       146	binemul.c	FUNCTION_10
0x4000388	      0xb800000000	                              mov eax, 0	       147	binemul.c	FUNCTION_10
0x400038d	              0x5d	                                 pop rbp	       148	binemul.c	FUNCTION_10
0x400038e	              0xc3	                                     ret	       148	binemul.c	FUNCTION_10
ar_emul_parse_arg	SWITCH,0:FOR,0:IF,1:ELSE,0:DO,0:WHILE,0:functions,0:CALL,1	15
0x400034f	              0x55	                                push rbp	       137	binemul.c	FUNCTION_9
0x4000350	          0x4889e5	                            mov rbp, rsp	       137	binemul.c	FUNCTION_9
0x4000353	        0x4883ec10	                           sub rsp, 0x10	       137	binemul.c	FUNCTION_9
0x4000357	        0x48897df8	                mov qword [rbp - 8], rdi	       137	binemul.c	FUNCTION_9
0x400035b	    0x488b05000000	            mov rax, qword [0x04000362] 	       138	binemul.c	FUNCTION_9	IF_1
0x4000362	          0x4885c0	                           test rax, rax	       138	binemul.c	FUNCTION_9	IF_1
0x4000365	            0x7412	                            je 0x4000379	       138	binemul.c	FUNCTION_9	IF_1
0x4000367	    0x488b05000000	            mov rax, qword [0x0400036e] 	       139	binemul.c	FUNCTION_9	CALL_1
0x400036e	        0x488b55f8	                mov rdx, qword [rbp - 8]	       139	binemul.c	FUNCTION_9	CALL_1
0x4000372	          0x4889d7	                            mov rdi, rdx	       139	binemul.c	FUNCTION_9	CALL_1
0x4000375	            0xffd0	                                call rax	       139	binemul.c	FUNCTION_9	CALL_1
0x4000377	            0xeb05	                           jmp 0x400037e	       139	binemul.c	FUNCTION_9	CALL_1
0x4000379	      0xb800000000	                              mov eax, 0	       141	binemul.c	FUNCTION_9
0x400037e	              0xc9	                                   leave	       142	binemul.c	FUNCTION_9
0x400037f	              0xc3	                                     ret	       142	binemul.c	FUNCTION_9
any_ok	SWITCH,0:FOR,0:IF,0:ELSE,0:DO,0:WHILE,0:functions,0:CALL,0	6
0x4000108	              0x55	                                push rbp	        54	binemul.c	FUNCTION_4
0x4000109	          0x4889e5	                            mov rbp, rsp	        54	binemul.c	FUNCTION_4
0x400010c	        0x48897df8	                mov qword [rbp - 8], rdi	        54	binemul.c	FUNCTION_4
0x4000110	      0xb801000000	                              mov eax, 1	        55	binemul.c	FUNCTION_4
0x4000115	              0x5d	                                 pop rbp	        56	binemul.c	FUNCTION_4
0x4000116	              0xc3	                                     ret	        56	binemul.c	FUNCTION_4
ar_emul_default_usage	SWITCH,0:FOR,0:IF,0:ELSE,0:DO,0:WHILE,0:functions,0:CALL,3	23
0x400006b	              0x55	                                push rbp	        35	binemul.c	FUNCTION_2
0x400006c	          0x4889e5	                            mov rbp, rsp	        35	binemul.c	FUNCTION_2
0x400006f	        0x4883ec10	                           sub rsp, 0x10	        35	binemul.c	FUNCTION_2
0x4000073	        0x48897df8	                mov qword [rbp - 8], rdi	        35	binemul.c	FUNCTION_2
0x4000077	      0xbf00000000	                              mov edi, 0	        36	binemul.c	FUNCTION_2	CALL_1
0x400007c	      0xe800000000	                          call 0x4000081	        36	binemul.c	FUNCTION_2	CALL_1
0x4000081	          0x4889c2	                            mov rdx, rax	        36	binemul.c	FUNCTION_2	CALL_1
0x4000084	        0x488b45f8	                mov rax, qword [rbp - 8]	        36	binemul.c	FUNCTION_2	CALL_1
0x4000088	          0x4889d6	                            mov rsi, rdx	        36	binemul.c	FUNCTION_2	CALL_1
0x400008b	          0x4889c7	                            mov rdi, rax	        36	binemul.c	FUNCTION_2	CALL_1
0x400008e	      0xb800000000	                              mov eax, 0	        36	binemul.c	FUNCTION_2	CALL_1
0x4000093	      0xe800000000	                          call 0x4000098	        36	binemul.c	FUNCTION_2	CALL_1
0x4000098	      0xbf00000000	                              mov edi, 0	        38	binemul.c	FUNCTION_2	CALL_3
0x400009d	      0xe800000000	                          call 0x40000a2	        38	binemul.c	FUNCTION_2	CALL_3
0x40000a2	          0x4889c2	                            mov rdx, rax	        38	binemul.c	FUNCTION_2	CALL_3
0x40000a5	        0x488b45f8	                mov rax, qword [rbp - 8]	        38	binemul.c	FUNCTION_2	CALL_3
0x40000a9	          0x4889d6	                            mov rsi, rdx	        38	binemul.c	FUNCTION_2	CALL_3
0x40000ac	          0x4889c7	                            mov rdi, rax	        38	binemul.c	FUNCTION_2	CALL_3
0x40000af	      0xb800000000	                              mov eax, 0	        38	binemul.c	FUNCTION_2	CALL_3
0x40000b4	      0xe800000000	                          call 0x40000b9	        38	binemul.c	FUNCTION_2	CALL_3
0x40000b9	              0x90	                                     nop	        39	binemul.c	FUNCTION_2
0x40000ba	              0xc9	                                   leave	        39	binemul.c	FUNCTION_2
0x40000bb	              0xc3	                                     ret	        39	binemul.c	FUNCTION_2
ar_emul_default_replace	SWITCH,0:FOR,0:IF,0:ELSE,0:DO,0:WHILE,0:functions,0:CALL,3	35
0x40002ce	              0x55	                                push rbp	       121	binemul.c	FUNCTION_8
0x40002cf	          0x4889e5	                            mov rbp, rsp	       121	binemul.c	FUNCTION_8
0x40002d2	        0x4883ec30	                           sub rsp, 0x30	       121	binemul.c	FUNCTION_8
0x40002d6	        0x48897de8	             mov qword [rbp - 0x18], rdi	       121	binemul.c	FUNCTION_8
0x40002da	        0x488975e0	             mov qword [rbp - 0x20], rsi	       121	binemul.c	FUNCTION_8
0x40002de	        0x488955d8	             mov qword [rbp - 0x28], rdx	       121	binemul.c	FUNCTION_8
0x40002e2	          0x894dd4	             mov dword [rbp - 0x2c], ecx	       121	binemul.c	FUNCTION_8
0x40002e5	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       124	binemul.c	FUNCTION_8	CALL_1
0x40002e9	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       124	binemul.c	FUNCTION_8	CALL_1
0x40002ed	          0x4889d6	                            mov rsi, rdx	       124	binemul.c	FUNCTION_8	CALL_1
0x40002f0	          0x4889c7	                            mov rdi, rax	       124	binemul.c	FUNCTION_8	CALL_1
0x40002f3	      0xe800000000	                          call 0x40002f8	       124	binemul.c	FUNCTION_8	CALL_1
0x40002f8	        0x488945f8	                mov qword [rbp - 8], rax	       124	binemul.c	FUNCTION_8	CALL_1
0x40002fc	      0x48837df800	                  cmp qword [rbp - 8], 0	       125	binemul.c	FUNCTION_8	CALL_2
0x4000301	            0x750c	                           jne 0x400030f	       125	binemul.c	FUNCTION_8	CALL_2
0x4000303	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       125	binemul.c	FUNCTION_8	CALL_2
0x4000307	          0x4889c7	                            mov rdi, rax	       125	binemul.c	FUNCTION_8	CALL_2
0x400030a	      0xe800000000	                          call 0x400030f	       125	binemul.c	FUNCTION_8	CALL_2
0x400030f	        0x837dd400	               cmp dword [rbp - 0x2c], 0	       127	binemul.c	FUNCTION_8	CALL_3
0x4000313	            0x7416	                            je 0x400032b	       127	binemul.c	FUNCTION_8	CALL_3
0x4000315	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       127	binemul.c	FUNCTION_8	CALL_3
0x4000319	          0x4889c6	                            mov rsi, rax	       127	binemul.c	FUNCTION_8	CALL_3
0x400031c	      0xbf00000000	                              mov edi, 0	       127	binemul.c	FUNCTION_8	CALL_3
0x4000321	      0xb800000000	                              mov eax, 0	       127	binemul.c	FUNCTION_8	CALL_3
0x4000326	      0xe800000000	                          call 0x400032b	       127	binemul.c	FUNCTION_8	CALL_3
0x400032b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       129	binemul.c	FUNCTION_8
0x400032f	          0x488b10	                    mov rdx, qword [rax]	       129	binemul.c	FUNCTION_8
0x4000332	        0x488b45f8	                mov rax, qword [rbp - 8]	       129	binemul.c	FUNCTION_8
0x4000336	    0x488990d80000	             mov qword [rax + 0xd8], rdx	       129	binemul.c	FUNCTION_8
0x400033d	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       130	binemul.c	FUNCTION_8
0x4000341	        0x488b55f8	                mov rdx, qword [rbp - 8]	       130	binemul.c	FUNCTION_8
0x4000345	          0x488910	                    mov qword [rax], rdx	       130	binemul.c	FUNCTION_8
0x4000348	      0xb801000000	                              mov eax, 1	       132	binemul.c	FUNCTION_8
0x400034d	              0xc9	                                   leave	       133	binemul.c	FUNCTION_8
0x400034e	              0xc3	                                     ret	       133	binemul.c	FUNCTION_8
ar_emul_append	SWITCH,0:FOR,0:IF,1:ELSE,0:DO,0:WHILE,0:functions,0:CALL,1	22
0x40000bc	              0x55	                                push rbp	        44	binemul.c	FUNCTION_3
0x40000bd	          0x4889e5	                            mov rbp, rsp	        44	binemul.c	FUNCTION_3
0x40000c0	        0x4883ec20	                           sub rsp, 0x20	        44	binemul.c	FUNCTION_3
0x40000c4	        0x48897df8	                mov qword [rbp - 8], rdi	        44	binemul.c	FUNCTION_3
0x40000c8	        0x488975f0	             mov qword [rbp - 0x10], rsi	        44	binemul.c	FUNCTION_3
0x40000cc	        0x488955e8	             mov qword [rbp - 0x18], rdx	        44	binemul.c	FUNCTION_3
0x40000d0	          0x894de4	             mov dword [rbp - 0x1c], ecx	        44	binemul.c	FUNCTION_3
0x40000d3	        0x448945e0	             mov dword [rbp - 0x20], r8d	        44	binemul.c	FUNCTION_3
0x40000d7	    0x488b05000000	            mov rax, qword [0x040000de] 	        45	binemul.c	FUNCTION_3	IF_1
0x40000de	          0x4885c0	                           test rax, rax	        45	binemul.c	FUNCTION_3	IF_1
0x40000e1	            0x741e	                            je 0x4000101	        45	binemul.c	FUNCTION_3	IF_1
0x40000e3	    0x488b05000000	            mov rax, qword [0x040000ea] 	        46	binemul.c	FUNCTION_3	IF_1	CALL_1
0x40000ea	        0x448b45e0	             mov r8d, dword [rbp - 0x20]	        46	binemul.c	FUNCTION_3	IF_1	CALL_1
0x40000ee	          0x8b4de4	             mov ecx, dword [rbp - 0x1c]	        46	binemul.c	FUNCTION_3	IF_1	CALL_1
0x40000f1	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	        46	binemul.c	FUNCTION_3	IF_1	CALL_1
0x40000f5	        0x488b75f0	             mov rsi, qword [rbp - 0x10]	        46	binemul.c	FUNCTION_3	IF_1	CALL_1
0x40000f9	        0x488b7df8	                mov rdi, qword [rbp - 8]	        46	binemul.c	FUNCTION_3	IF_1	CALL_1
0x40000fd	            0xffd0	                                call rax	        46	binemul.c	FUNCTION_3	IF_1	CALL_1
0x40000ff	            0xeb05	                           jmp 0x4000106	        46	binemul.c	FUNCTION_3	IF_1	CALL_1
0x4000101	      0xb800000000	                              mov eax, 0	        49	binemul.c	FUNCTION_3
0x4000106	              0xc9	                                   leave	        50	binemul.c	FUNCTION_3
0x4000107	              0xc3	                                     ret	        50	binemul.c	FUNCTION_3
ar_emul_default_append	SWITCH,0:FOR,0:IF,0:ELSE,0:DO,0:WHILE,0:functions,0:CALL,3	28
0x4000227	              0x55	                                push rbp	        99	binemul.c	FUNCTION_6
0x4000228	          0x4889e5	                            mov rbp, rsp	        99	binemul.c	FUNCTION_6
0x400022b	        0x4883ec30	                           sub rsp, 0x30	        99	binemul.c	FUNCTION_6
0x400022f	        0x48897de8	             mov qword [rbp - 0x18], rdi	        99	binemul.c	FUNCTION_6
0x4000233	        0x488975e0	             mov qword [rbp - 0x20], rsi	        99	binemul.c	FUNCTION_6
0x4000237	        0x488955d8	             mov qword [rbp - 0x28], rdx	        99	binemul.c	FUNCTION_6
0x400023b	          0x894dd4	             mov dword [rbp - 0x2c], ecx	        99	binemul.c	FUNCTION_6
0x400023e	        0x448945d0	             mov dword [rbp - 0x30], r8d	        99	binemul.c	FUNCTION_6
0x4000242	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       102	binemul.c	FUNCTION_6	CALL_1
0x4000246	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       102	binemul.c	FUNCTION_6	CALL_1
0x400024a	          0x4889d6	                            mov rsi, rdx	       102	binemul.c	FUNCTION_6	CALL_1
0x400024d	          0x4889c7	                            mov rdi, rax	       102	binemul.c	FUNCTION_6	CALL_1
0x4000250	      0xe800000000	                          call 0x4000255	       102	binemul.c	FUNCTION_6	CALL_1
0x4000255	        0x488945f8	                mov qword [rbp - 8], rax	       102	binemul.c	FUNCTION_6	CALL_1
0x4000259	      0x48837df800	                  cmp qword [rbp - 8], 0	       103	binemul.c	FUNCTION_6	CALL_2
0x400025e	            0x750c	                           jne 0x400026c	       103	binemul.c	FUNCTION_6	CALL_2
0x4000260	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       103	binemul.c	FUNCTION_6	CALL_2
0x4000264	          0x4889c7	                            mov rdi, rax	       103	binemul.c	FUNCTION_6	CALL_2
0x4000267	      0xe800000000	                          call 0x400026c	       103	binemul.c	FUNCTION_6	CALL_2
0x400026c	          0x8b4dd0	             mov ecx, dword [rbp - 0x30]	       104	binemul.c	FUNCTION_6	CALL_3
0x400026f	          0x8b55d4	             mov edx, dword [rbp - 0x2c]	       104	binemul.c	FUNCTION_6	CALL_3
0x4000272	        0x488b75f8	                mov rsi, qword [rbp - 8]	       104	binemul.c	FUNCTION_6	CALL_3
0x4000276	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       104	binemul.c	FUNCTION_6	CALL_3
0x400027a	    0x41b800000000	                              mov r8d, 0	       104	binemul.c	FUNCTION_6	CALL_3
0x4000280	          0x4889c7	                            mov rdi, rax	       104	binemul.c	FUNCTION_6	CALL_3
0x4000283	      0xe800000000	                          call 0x4000288	       104	binemul.c	FUNCTION_6	CALL_3
0x4000288	              0xc9	                                   leave	       105	binemul.c	FUNCTION_6
0x4000289	              0xc3	                                     ret	       105	binemul.c	FUNCTION_6
ar_emul_replace	SWITCH,0:FOR,0:IF,1:ELSE,0:DO,0:WHILE,0:functions,0:CALL,1	20
0x400028a	              0x55	                                push rbp	       110	binemul.c	FUNCTION_7
0x400028b	          0x4889e5	                            mov rbp, rsp	       110	binemul.c	FUNCTION_7
0x400028e	        0x4883ec20	                           sub rsp, 0x20	       110	binemul.c	FUNCTION_7
0x4000292	        0x48897df8	                mov qword [rbp - 8], rdi	       110	binemul.c	FUNCTION_7
0x4000296	        0x488975f0	             mov qword [rbp - 0x10], rsi	       110	binemul.c	FUNCTION_7
0x400029a	        0x488955e8	             mov qword [rbp - 0x18], rdx	       110	binemul.c	FUNCTION_7
0x400029e	          0x894de4	             mov dword [rbp - 0x1c], ecx	       110	binemul.c	FUNCTION_7
0x40002a1	    0x488b05000000	            mov rax, qword [0x040002a8] 	       111	binemul.c	FUNCTION_7	IF_1
0x40002a8	          0x4885c0	                           test rax, rax	       111	binemul.c	FUNCTION_7	IF_1
0x40002ab	            0x741a	                            je 0x40002c7	       111	binemul.c	FUNCTION_7	IF_1
0x40002ad	    0x488b05000000	            mov rax, qword [0x040002b4] 	       112	binemul.c	FUNCTION_7	IF_1	CALL_1
0x40002b4	          0x8b4de4	             mov ecx, dword [rbp - 0x1c]	       112	binemul.c	FUNCTION_7	IF_1	CALL_1
0x40002b7	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       112	binemul.c	FUNCTION_7	IF_1	CALL_1
0x40002bb	        0x488b75f0	             mov rsi, qword [rbp - 0x10]	       112	binemul.c	FUNCTION_7	IF_1	CALL_1
0x40002bf	        0x488b7df8	                mov rdi, qword [rbp - 8]	       112	binemul.c	FUNCTION_7	IF_1	CALL_1
0x40002c3	            0xffd0	                                call rax	       112	binemul.c	FUNCTION_7	IF_1	CALL_1
0x40002c5	            0xeb05	                           jmp 0x40002cc	       112	binemul.c	FUNCTION_7	IF_1	CALL_1
0x40002c7	      0xb800000000	                              mov eax, 0	       115	binemul.c	FUNCTION_7
0x40002cc	              0xc9	                                   leave	       116	binemul.c	FUNCTION_7
0x40002cd	              0xc3	                                     ret	       116	binemul.c	FUNCTION_7
ar_emul_usage	SWITCH,0:FOR,0:IF,1:ELSE,0:DO,0:WHILE,0:functions,0:CALL,1	14
0x4000040	              0x55	                                push rbp	        28	binemul.c	FUNCTION_1
0x4000041	          0x4889e5	                            mov rbp, rsp	        28	binemul.c	FUNCTION_1
0x4000044	        0x4883ec10	                           sub rsp, 0x10	        28	binemul.c	FUNCTION_1
0x4000048	        0x48897df8	                mov qword [rbp - 8], rdi	        28	binemul.c	FUNCTION_1
0x400004c	    0x488b05000000	            mov rax, qword [0x04000053] 	        29	binemul.c	FUNCTION_1	IF_1
0x4000053	          0x4885c0	                           test rax, rax	        29	binemul.c	FUNCTION_1	IF_1
0x4000056	            0x7410	                            je 0x4000068	        29	binemul.c	FUNCTION_1	IF_1
0x4000058	    0x488b05000000	            mov rax, qword [0x0400005f] 	        30	binemul.c	FUNCTION_1	CALL_1
0x400005f	        0x488b55f8	                mov rdx, qword [rbp - 8]	        30	binemul.c	FUNCTION_1	CALL_1
0x4000063	          0x4889d7	                            mov rdi, rdx	        30	binemul.c	FUNCTION_1	CALL_1
0x4000066	            0xffd0	                                call rax	        30	binemul.c	FUNCTION_1	CALL_1
0x4000068	              0x90	                                     nop	        31	binemul.c	FUNCTION_1
0x4000069	              0xc9	                                   leave	        31	binemul.c	FUNCTION_1
0x400006a	              0xc3	                                     ret	        31	binemul.c	FUNCTION_1
