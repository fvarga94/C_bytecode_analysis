_obstack_memory_used	IF,0:ELSE,0:functions,0:WHILE,0:FOR,1:SWITCH,0:CALL,0:DO,0	23
0x40005d4	              0x55	                                push rbp	       299	obstack.c	FUNCTION_9
0x40005d5	          0x4889e5	                            mov rbp, rsp	       299	obstack.c	FUNCTION_9
0x40005d8	        0x48897de8	             mov qword [rbp - 0x18], rdi	       299	obstack.c	FUNCTION_9
0x40005dc	    0x48c745f80000	                  mov qword [rbp - 8], 0	       301	obstack.c	FUNCTION_9
0x40005e4	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       303	obstack.c	FUNCTION_9	FOR_1
0x40005e8	        0x488b4008	                mov rax, qword [rax + 8]	       303	obstack.c	FUNCTION_9	FOR_1
0x40005ec	        0x488945f0	             mov qword [rbp - 0x10], rax	       303	obstack.c	FUNCTION_9	FOR_1
0x40005f0	            0xeb24	                           jmp 0x4000616	       303	obstack.c	FUNCTION_9	FOR_1
0x40005f2	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       305	obstack.c	FUNCTION_9	FOR_1
0x40005f6	          0x488b00	                    mov rax, qword [rax]	       305	obstack.c	FUNCTION_9	FOR_1
0x40005f9	          0x4889c2	                            mov rdx, rax	       305	obstack.c	FUNCTION_9	FOR_1
0x40005fc	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       305	obstack.c	FUNCTION_9	FOR_1
0x4000600	          0x4829c2	                            sub rdx, rax	       305	obstack.c	FUNCTION_9	FOR_1
0x4000603	          0x4889d0	                            mov rax, rdx	       305	obstack.c	FUNCTION_9	FOR_1
0x4000606	        0x480145f8	                add qword [rbp - 8], rax	       305	obstack.c	FUNCTION_9	FOR_1
0x400060a	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       303	obstack.c	FUNCTION_9	FOR_1
0x400060e	        0x488b4008	                mov rax, qword [rax + 8]	       303	obstack.c	FUNCTION_9	FOR_1
0x4000612	        0x488945f0	             mov qword [rbp - 0x10], rax	       303	obstack.c	FUNCTION_9	FOR_1
0x4000616	      0x48837df000	               cmp qword [rbp - 0x10], 0	       303	obstack.c	FUNCTION_9	FOR_1
0x400061b	            0x75d5	                           jne 0x40005f2	       303	obstack.c	FUNCTION_9	FOR_1
0x400061d	        0x488b45f8	                mov rax, qword [rbp - 8]	       307	obstack.c	FUNCTION_9
0x4000621	              0x5d	                                 pop rbp	       308	obstack.c	FUNCTION_9
0x4000622	              0xc3	                                     ret	       308	obstack.c	FUNCTION_9
_obstack_free	IF,2:ELSE,1:functions,0:WHILE,1:FOR,0:SWITCH,0:CALL,2:DO,0	55
0x4000514	              0x55	                                push rbp	       269	obstack.c	FUNCTION_8
0x4000515	          0x4889e5	                            mov rbp, rsp	       269	obstack.c	FUNCTION_8
0x4000518	        0x4883ec20	                           sub rsp, 0x20	       269	obstack.c	FUNCTION_8
0x400051c	        0x48897de8	             mov qword [rbp - 0x18], rdi	       269	obstack.c	FUNCTION_8
0x4000520	        0x488975e0	             mov qword [rbp - 0x20], rsi	       269	obstack.c	FUNCTION_8
0x4000524	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       273	obstack.c	FUNCTION_8
0x4000528	        0x488b4008	                mov rax, qword [rax + 8]	       273	obstack.c	FUNCTION_8
0x400052c	        0x488945f0	             mov qword [rbp - 0x10], rax	       273	obstack.c	FUNCTION_8
0x4000530	            0xeb35	                           jmp 0x4000567	       277	obstack.c	FUNCTION_8	WHILE_1
0x4000532	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       279	obstack.c	FUNCTION_8	WHILE_1
0x4000536	        0x488b4008	                mov rax, qword [rax + 8]	       279	obstack.c	FUNCTION_8	WHILE_1
0x400053a	        0x488945f8	                mov qword [rbp - 8], rax	       279	obstack.c	FUNCTION_8	WHILE_1
0x400053e	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       280	obstack.c	FUNCTION_8	WHILE_1	CALL_1
0x4000542	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       280	obstack.c	FUNCTION_8	WHILE_1	CALL_1
0x4000546	          0x4889d6	                            mov rsi, rdx	       280	obstack.c	FUNCTION_8	WHILE_1	CALL_1
0x4000549	          0x4889c7	                            mov rdi, rax	       280	obstack.c	FUNCTION_8	WHILE_1	CALL_1
0x400054c	      0xe83ffbffff	                   call sym.call_freefun	       280	obstack.c	FUNCTION_8	WHILE_1	CALL_1
0x4000551	        0x488b45f8	                mov rax, qword [rbp - 8]	       281	obstack.c	FUNCTION_8	WHILE_1
0x4000555	        0x488945f0	             mov qword [rbp - 0x10], rax	       281	obstack.c	FUNCTION_8	WHILE_1
0x4000559	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       284	obstack.c	FUNCTION_8	WHILE_1
0x400055d	         0xfb65050	           movzx edx, byte [rax + 0x50] 	       284	obstack.c	FUNCTION_8	WHILE_1
0x4000561	          0x83ca02	                               or edx, 2	       284	obstack.c	FUNCTION_8	WHILE_1
0x4000564	          0x885050	               mov byte [rax + 0x50], dl	       284	obstack.c	FUNCTION_8	WHILE_1
0x4000567	      0x48837df000	               cmp qword [rbp - 0x10], 0	       277	obstack.c	FUNCTION_8	WHILE_1
0x400056c	            0x7417	                            je 0x4000585	       277	obstack.c	FUNCTION_8	WHILE_1
0x400056e	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       277	obstack.c	FUNCTION_8	WHILE_1
0x4000572	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	       277	obstack.c	FUNCTION_8	WHILE_1
0x4000576	            0x73ba	                           jae 0x4000532	       277	obstack.c	FUNCTION_8	WHILE_1
0x4000578	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       277	obstack.c	FUNCTION_8	WHILE_1
0x400057c	          0x488b00	                    mov rax, qword [rax]	       277	obstack.c	FUNCTION_8	WHILE_1
0x400057f	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	       277	obstack.c	FUNCTION_8	WHILE_1
0x4000583	            0x72ad	                            jb 0x4000532	       277	obstack.c	FUNCTION_8	WHILE_1
0x4000585	      0x48837df000	               cmp qword [rbp - 0x10], 0	       286	obstack.c	FUNCTION_8	IF_1
0x400058a	            0x7439	                            je 0x40005c5	       286	obstack.c	FUNCTION_8	IF_1
0x400058c	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       288	obstack.c	FUNCTION_8	IF_1
0x4000590	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       288	obstack.c	FUNCTION_8	IF_1
0x4000594	        0x48895018	             mov qword [rax + 0x18], rdx	       288	obstack.c	FUNCTION_8	IF_1
0x4000598	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       288	obstack.c	FUNCTION_8	IF_1
0x400059c	        0x488b5018	            mov rdx, qword [rax + 0x18] 	       288	obstack.c	FUNCTION_8	IF_1
0x40005a0	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       288	obstack.c	FUNCTION_8	IF_1
0x40005a4	        0x48895010	             mov qword [rax + 0x10], rdx	       288	obstack.c	FUNCTION_8	IF_1
0x40005a8	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       289	obstack.c	FUNCTION_8	IF_1
0x40005ac	          0x488b10	                    mov rdx, qword [rax]	       289	obstack.c	FUNCTION_8	IF_1
0x40005af	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       289	obstack.c	FUNCTION_8	IF_1
0x40005b3	        0x48895020	             mov qword [rax + 0x20], rdx	       289	obstack.c	FUNCTION_8	IF_1
0x40005b7	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       290	obstack.c	FUNCTION_8	IF_1
0x40005bb	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       290	obstack.c	FUNCTION_8	IF_1
0x40005bf	        0x48895008	                mov qword [rax + 8], rdx	       290	obstack.c	FUNCTION_8	IF_1
0x40005c3	            0xeb0c	                           jmp 0x40005d1	       295	obstack.c	FUNCTION_8
0x40005c5	      0x48837de000	               cmp qword [rbp - 0x20], 0	       292	obstack.c	FUNCTION_8	ELSE_1	IF_2
0x40005ca	            0x7405	                            je 0x40005d1	       292	obstack.c	FUNCTION_8	ELSE_1	IF_2
0x40005cc	      0xe800000000	                          call 0x40005d1	       294	obstack.c	FUNCTION_8	ELSE_1	IF_2
0x40005d1	              0x90	                                     nop	       295	obstack.c	FUNCTION_8
0x40005d2	              0xc9	                                   leave	       295	obstack.c	FUNCTION_8
0x40005d3	              0xc3	                                     ret	       295	obstack.c	FUNCTION_8
_obstack_allocated_p	IF,0:ELSE,0:functions,0:WHILE,1:FOR,0:SWITCH,0:CALL,0:DO,0	27
0x40004bb	              0x55	                                push rbp	       248	obstack.c	FUNCTION_7
0x40004bc	          0x4889e5	                            mov rbp, rsp	       248	obstack.c	FUNCTION_7
0x40004bf	        0x48897de8	             mov qword [rbp - 0x18], rdi	       248	obstack.c	FUNCTION_7
0x40004c3	        0x488975e0	             mov qword [rbp - 0x20], rsi	       248	obstack.c	FUNCTION_7
0x40004c7	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       252	obstack.c	FUNCTION_7
0x40004cb	        0x488b4008	                mov rax, qword [rax + 8]	       252	obstack.c	FUNCTION_7
0x40004cf	        0x488945f0	             mov qword [rbp - 0x10], rax	       252	obstack.c	FUNCTION_7
0x40004d3	            0xeb14	                           jmp 0x40004e9	       256	obstack.c	FUNCTION_7	WHILE_1
0x40004d5	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       258	obstack.c	FUNCTION_7	WHILE_1
0x40004d9	        0x488b4008	                mov rax, qword [rax + 8]	       258	obstack.c	FUNCTION_7	WHILE_1
0x40004dd	        0x488945f8	                mov qword [rbp - 8], rax	       258	obstack.c	FUNCTION_7	WHILE_1
0x40004e1	        0x488b45f8	                mov rax, qword [rbp - 8]	       259	obstack.c	FUNCTION_7	WHILE_1
0x40004e5	        0x488945f0	             mov qword [rbp - 0x10], rax	       259	obstack.c	FUNCTION_7	WHILE_1
0x40004e9	      0x48837df000	               cmp qword [rbp - 0x10], 0	       256	obstack.c	FUNCTION_7	WHILE_1
0x40004ee	            0x7417	                            je 0x4000507	       256	obstack.c	FUNCTION_7	WHILE_1
0x40004f0	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       256	obstack.c	FUNCTION_7	WHILE_1
0x40004f4	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	       256	obstack.c	FUNCTION_7	WHILE_1
0x40004f8	            0x73db	                           jae 0x40004d5	       256	obstack.c	FUNCTION_7	WHILE_1
0x40004fa	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       256	obstack.c	FUNCTION_7	WHILE_1
0x40004fe	          0x488b00	                    mov rax, qword [rax]	       256	obstack.c	FUNCTION_7	WHILE_1
0x4000501	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	       256	obstack.c	FUNCTION_7	WHILE_1
0x4000505	            0x72ce	                            jb 0x40004d5	       256	obstack.c	FUNCTION_7	WHILE_1
0x4000507	      0x48837df000	               cmp qword [rbp - 0x10], 0	       261	obstack.c	FUNCTION_7
0x400050c	           0xf95c0	                                setne al	       261	obstack.c	FUNCTION_7
0x400050f	           0xfb6c0	                           movzx eax, al	       261	obstack.c	FUNCTION_7
0x4000512	              0x5d	                                 pop rbp	       262	obstack.c	FUNCTION_7
0x4000513	              0xc3	                                     ret	       262	obstack.c	FUNCTION_7
_obstack_begin_1	IF,0:ELSE,0:functions,0:WHILE,0:FOR,0:SWITCH,0:CALL,1:DO,0	30
0x400025a	              0x55	                                push rbp	       173	obstack.c	FUNCTION_5
0x400025b	          0x4889e5	                            mov rbp, rsp	       173	obstack.c	FUNCTION_5
0x400025e	        0x4883ec30	                           sub rsp, 0x30	       173	obstack.c	FUNCTION_5
0x4000262	        0x48897df8	                mov qword [rbp - 8], rdi	       173	obstack.c	FUNCTION_5
0x4000266	        0x488975f0	             mov qword [rbp - 0x10], rsi	       173	obstack.c	FUNCTION_5
0x400026a	        0x488955e8	             mov qword [rbp - 0x18], rdx	       173	obstack.c	FUNCTION_5
0x400026e	        0x48894de0	             mov qword [rbp - 0x20], rcx	       173	obstack.c	FUNCTION_5
0x4000272	        0x4c8945d8	              mov qword [rbp - 0x28], r8	       173	obstack.c	FUNCTION_5
0x4000276	        0x4c894dd0	              mov qword [rbp - 0x30], r9	       173	obstack.c	FUNCTION_5
0x400027a	        0x488b45f8	                mov rax, qword [rbp - 8]	       174	obstack.c	FUNCTION_5
0x400027e	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       174	obstack.c	FUNCTION_5
0x4000282	        0x48895038	             mov qword [rax + 0x38], rdx	       174	obstack.c	FUNCTION_5
0x4000286	        0x488b45f8	                mov rax, qword [rbp - 8]	       175	obstack.c	FUNCTION_5
0x400028a	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       175	obstack.c	FUNCTION_5
0x400028e	        0x48895040	             mov qword [rax + 0x40], rdx	       175	obstack.c	FUNCTION_5
0x4000292	        0x488b45f8	                mov rax, qword [rbp - 8]	       176	obstack.c	FUNCTION_5
0x4000296	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	       176	obstack.c	FUNCTION_5
0x400029a	        0x48895048	             mov qword [rax + 0x48], rdx	       176	obstack.c	FUNCTION_5
0x400029e	        0x488b45f8	                mov rax, qword [rbp - 8]	       177	obstack.c	FUNCTION_5
0x40002a2	         0xfb65050	           movzx edx, byte [rax + 0x50] 	       177	obstack.c	FUNCTION_5
0x40002a6	          0x83ca01	                               or edx, 1	       177	obstack.c	FUNCTION_5
0x40002a9	          0x885050	               mov byte [rax + 0x50], dl	       177	obstack.c	FUNCTION_5
0x40002ac	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       178	obstack.c	FUNCTION_5	CALL_1
0x40002b0	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	       178	obstack.c	FUNCTION_5	CALL_1
0x40002b4	        0x488b45f8	                mov rax, qword [rbp - 8]	       178	obstack.c	FUNCTION_5	CALL_1
0x40002b8	          0x4889ce	                            mov rsi, rcx	       178	obstack.c	FUNCTION_5	CALL_1
0x40002bb	          0x4889c7	                            mov rdi, rax	       178	obstack.c	FUNCTION_5	CALL_1
0x40002be	      0xe81efeffff	          call sym._obstack_begin_worker	       178	obstack.c	FUNCTION_5	CALL_1
0x40002c3	              0xc9	                                   leave	       179	obstack.c	FUNCTION_5
0x40002c4	              0xc3	                                     ret	       179	obstack.c	FUNCTION_5
_obstack_begin	IF,0:ELSE,0:functions,0:WHILE,0:FOR,0:SWITCH,0:CALL,1:DO,0	26
0x40001ff	              0x55	                                push rbp	       160	obstack.c	FUNCTION_4
0x4000200	          0x4889e5	                            mov rbp, rsp	       160	obstack.c	FUNCTION_4
0x4000203	        0x4883ec30	                           sub rsp, 0x30	       160	obstack.c	FUNCTION_4
0x4000207	        0x48897df8	                mov qword [rbp - 8], rdi	       160	obstack.c	FUNCTION_4
0x400020b	        0x488975f0	             mov qword [rbp - 0x10], rsi	       160	obstack.c	FUNCTION_4
0x400020f	        0x488955e8	             mov qword [rbp - 0x18], rdx	       160	obstack.c	FUNCTION_4
0x4000213	        0x48894de0	             mov qword [rbp - 0x20], rcx	       160	obstack.c	FUNCTION_4
0x4000217	        0x4c8945d8	              mov qword [rbp - 0x28], r8	       160	obstack.c	FUNCTION_4
0x400021b	        0x488b45f8	                mov rax, qword [rbp - 8]	       161	obstack.c	FUNCTION_4
0x400021f	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       161	obstack.c	FUNCTION_4
0x4000223	        0x48895038	             mov qword [rax + 0x38], rdx	       161	obstack.c	FUNCTION_4
0x4000227	        0x488b45f8	                mov rax, qword [rbp - 8]	       162	obstack.c	FUNCTION_4
0x400022b	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       162	obstack.c	FUNCTION_4
0x400022f	        0x48895040	             mov qword [rax + 0x40], rdx	       162	obstack.c	FUNCTION_4
0x4000233	        0x488b45f8	                mov rax, qword [rbp - 8]	       163	obstack.c	FUNCTION_4
0x4000237	         0xfb65050	           movzx edx, byte [rax + 0x50] 	       163	obstack.c	FUNCTION_4
0x400023b	          0x83e2fe	                     and edx, 0xfffffffe	       163	obstack.c	FUNCTION_4
0x400023e	          0x885050	               mov byte [rax + 0x50], dl	       163	obstack.c	FUNCTION_4
0x4000241	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       164	obstack.c	FUNCTION_4	CALL_1
0x4000245	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	       164	obstack.c	FUNCTION_4	CALL_1
0x4000249	        0x488b45f8	                mov rax, qword [rbp - 8]	       164	obstack.c	FUNCTION_4	CALL_1
0x400024d	          0x4889ce	                            mov rsi, rcx	       164	obstack.c	FUNCTION_4	CALL_1
0x4000250	          0x4889c7	                            mov rdi, rax	       164	obstack.c	FUNCTION_4	CALL_1
0x4000253	      0xe889feffff	          call sym._obstack_begin_worker	       164	obstack.c	FUNCTION_4	CALL_1
0x4000258	              0xc9	                                   leave	       165	obstack.c	FUNCTION_4
0x4000259	              0xc3	                                     ret	       165	obstack.c	FUNCTION_4
_obstack_newchunk	IF,5:ELSE,0:functions,0:WHILE,0:FOR,0:SWITCH,0:CALL,5:DO,0	138
0x40002c5	              0x55	                                push rbp	       189	obstack.c	FUNCTION_6
0x40002c6	          0x4889e5	                            mov rbp, rsp	       189	obstack.c	FUNCTION_6
0x40002c9	        0x4883ec50	                           sub rsp, 0x50	       189	obstack.c	FUNCTION_6
0x40002cd	        0x48897db8	             mov qword [rbp - 0x48], rdi	       189	obstack.c	FUNCTION_6
0x40002d1	        0x488975b0	             mov qword [rbp - 0x50], rsi	       189	obstack.c	FUNCTION_6
0x40002d5	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       190	obstack.c	FUNCTION_6
0x40002d9	        0x488b4008	                mov rax, qword [rax + 8]	       190	obstack.c	FUNCTION_6
0x40002dd	        0x488945d8	             mov qword [rbp - 0x28], rax	       190	obstack.c	FUNCTION_6
0x40002e1	    0x48c745c80000	               mov qword [rbp - 0x38], 0	       191	obstack.c	FUNCTION_6
0x40002e9	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       192	obstack.c	FUNCTION_6
0x40002ed	        0x488b4018	            mov rax, qword [rax + 0x18] 	       192	obstack.c	FUNCTION_6
0x40002f1	          0x4889c2	                            mov rdx, rax	       192	obstack.c	FUNCTION_6
0x40002f4	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       192	obstack.c	FUNCTION_6
0x40002f8	        0x488b4010	            mov rax, qword [rax + 0x10] 	       192	obstack.c	FUNCTION_6
0x40002fc	          0x4829c2	                            sub rdx, rax	       192	obstack.c	FUNCTION_6
0x40002ff	          0x4889d0	                            mov rax, rdx	       192	obstack.c	FUNCTION_6
0x4000302	        0x488945e0	             mov qword [rbp - 0x20], rax	       192	obstack.c	FUNCTION_6
0x4000306	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       196	obstack.c	FUNCTION_6
0x400030a	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       196	obstack.c	FUNCTION_6
0x400030e	          0x4801d0	                            add rax, rdx	       196	obstack.c	FUNCTION_6
0x4000311	        0x488945e8	             mov qword [rbp - 0x18], rax	       196	obstack.c	FUNCTION_6
0x4000315	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       197	obstack.c	FUNCTION_6
0x4000319	        0x488b5030	            mov rdx, qword [rax + 0x30] 	       197	obstack.c	FUNCTION_6
0x400031d	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       197	obstack.c	FUNCTION_6
0x4000321	          0x4801d0	                            add rax, rdx	       197	obstack.c	FUNCTION_6
0x4000324	        0x488945f0	             mov qword [rbp - 0x10], rax	       197	obstack.c	FUNCTION_6
0x4000328	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       198	obstack.c	FUNCTION_6
0x400032c	        0x48c1e803	                              shr rax, 3	       198	obstack.c	FUNCTION_6
0x4000330	          0x4889c2	                            mov rdx, rax	       198	obstack.c	FUNCTION_6
0x4000333	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       198	obstack.c	FUNCTION_6
0x4000337	          0x4801d0	                            add rax, rdx	       198	obstack.c	FUNCTION_6
0x400033a	        0x4883c064	                           add rax, 0x64	       198	obstack.c	FUNCTION_6
0x400033e	        0x488945d0	             mov qword [rbp - 0x30], rax	       198	obstack.c	FUNCTION_6
0x4000342	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       199	obstack.c	FUNCTION_6	IF_1
0x4000346	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	       199	obstack.c	FUNCTION_6	IF_1
0x400034a	            0x7308	                           jae 0x4000354	       199	obstack.c	FUNCTION_6	IF_1
0x400034c	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       200	obstack.c	FUNCTION_6	IF_1
0x4000350	        0x488945d0	             mov qword [rbp - 0x30], rax	       200	obstack.c	FUNCTION_6	IF_1
0x4000354	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       201	obstack.c	FUNCTION_6	IF_2
0x4000358	          0x488b00	                    mov rax, qword [rax]	       201	obstack.c	FUNCTION_6	IF_2
0x400035b	        0x483b45d0	             cmp rax, qword [rbp - 0x30]	       201	obstack.c	FUNCTION_6	IF_2
0x400035f	            0x760b	                           jbe 0x400036c	       201	obstack.c	FUNCTION_6	IF_2
0x4000361	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       202	obstack.c	FUNCTION_6	IF_2
0x4000365	          0x488b00	                    mov rax, qword [rax]	       202	obstack.c	FUNCTION_6	IF_2
0x4000368	        0x488945d0	             mov qword [rbp - 0x30], rax	       202	obstack.c	FUNCTION_6	IF_2
0x400036c	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       205	obstack.c	FUNCTION_6	IF_3
0x4000370	        0x483b45e8	             cmp rax, qword [rbp - 0x18]	       205	obstack.c	FUNCTION_6	IF_3
0x4000374	            0x7721	                            ja 0x4000397	       205	obstack.c	FUNCTION_6	IF_3
0x4000376	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       205	obstack.c	FUNCTION_6	IF_3
0x400037a	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	       205	obstack.c	FUNCTION_6	IF_3
0x400037e	            0x7717	                            ja 0x4000397	       205	obstack.c	FUNCTION_6	IF_3
0x4000380	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	       206	obstack.c	FUNCTION_6	CALL_1
0x4000384	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       206	obstack.c	FUNCTION_6	CALL_1
0x4000388	          0x4889d6	                            mov rsi, rdx	       206	obstack.c	FUNCTION_6	CALL_1
0x400038b	          0x4889c7	                            mov rdi, rax	       206	obstack.c	FUNCTION_6	CALL_1
0x400038e	      0xe8adfcffff	                  call sym.call_chunkfun	       206	obstack.c	FUNCTION_6	CALL_1
0x4000393	        0x488945c8	             mov qword [rbp - 0x38], rax	       206	obstack.c	FUNCTION_6	CALL_1
0x4000397	      0x48837dc800	               cmp qword [rbp - 0x38], 0	       207	obstack.c	FUNCTION_6	IF_4
0x400039c	            0x7509	                           jne 0x40003a7	       207	obstack.c	FUNCTION_6	IF_4
0x400039e	    0x488b05000000	            mov rax, qword [0x040003a5] 	       208	obstack.c	FUNCTION_6	IF_4
0x40003a5	            0xffd0	                                call rax	       208	obstack.c	FUNCTION_6	IF_4
0x40003a7	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       209	obstack.c	FUNCTION_6
0x40003ab	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	       209	obstack.c	FUNCTION_6
0x40003af	        0x48895008	                mov qword [rax + 8], rdx	       209	obstack.c	FUNCTION_6
0x40003b3	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       210	obstack.c	FUNCTION_6
0x40003b7	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       210	obstack.c	FUNCTION_6
0x40003bb	        0x48895008	                mov qword [rax + 8], rdx	       210	obstack.c	FUNCTION_6
0x40003bf	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	       211	obstack.c	FUNCTION_6
0x40003c3	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       211	obstack.c	FUNCTION_6
0x40003c7	          0x4801c2	                            add rdx, rax	       211	obstack.c	FUNCTION_6
0x40003ca	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       211	obstack.c	FUNCTION_6
0x40003ce	        0x48895020	             mov qword [rax + 0x20], rdx	       211	obstack.c	FUNCTION_6
0x40003d2	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       211	obstack.c	FUNCTION_6
0x40003d6	        0x488b5020	            mov rdx, qword [rax + 0x20] 	       211	obstack.c	FUNCTION_6
0x40003da	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       211	obstack.c	FUNCTION_6
0x40003de	          0x488910	                    mov qword [rax], rdx	       211	obstack.c	FUNCTION_6
0x40003e1	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       215	obstack.c	FUNCTION_6	CALL_2
0x40003e5	        0x4883c010	                           add rax, 0x10	       215	obstack.c	FUNCTION_6	CALL_2
0x40003e9	          0x4889c2	                            mov rdx, rax	       215	obstack.c	FUNCTION_6	CALL_2
0x40003ec	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       215	obstack.c	FUNCTION_6	CALL_2
0x40003f0	        0x488b4030	            mov rax, qword [rax + 0x30] 	       215	obstack.c	FUNCTION_6	CALL_2
0x40003f4	          0x4801c2	                            add rdx, rax	       215	obstack.c	FUNCTION_6	CALL_2
0x40003f7	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       215	obstack.c	FUNCTION_6	CALL_2
0x40003fb	        0x488b4030	            mov rax, qword [rax + 0x30] 	       215	obstack.c	FUNCTION_6	CALL_2
0x40003ff	          0x48f7d0	                                 not rax	       215	obstack.c	FUNCTION_6	CALL_2
0x4000402	          0x4821d0	                            and rax, rdx	       215	obstack.c	FUNCTION_6	CALL_2
0x4000405	        0x488945f8	                mov qword [rbp - 8], rax	       214	obstack.c	FUNCTION_6
0x4000409	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       218	obstack.c	FUNCTION_6	CALL_3
0x400040d	        0x488b4810	            mov rcx, qword [rax + 0x10] 	       218	obstack.c	FUNCTION_6	CALL_3
0x4000411	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       218	obstack.c	FUNCTION_6	CALL_3
0x4000415	        0x488b45f8	                mov rax, qword [rbp - 8]	       218	obstack.c	FUNCTION_6	CALL_3
0x4000419	          0x4889ce	                            mov rsi, rcx	       218	obstack.c	FUNCTION_6	CALL_3
0x400041c	          0x4889c7	                            mov rdi, rax	       218	obstack.c	FUNCTION_6	CALL_3
0x400041f	      0xe800000000	                          call 0x4000424	       218	obstack.c	FUNCTION_6	CALL_3
0x4000424	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       223	obstack.c	FUNCTION_6	IF_5
0x4000428	         0xfb64050	           movzx eax, byte [rax + 0x50] 	       223	obstack.c	FUNCTION_6	IF_5
0x400042c	          0x83e002	                              and eax, 2	       223	obstack.c	FUNCTION_6	IF_5
0x400042f	            0x84c0	                             test al, al	       223	obstack.c	FUNCTION_6	IF_5
0x4000431	            0x7554	                           jne 0x4000487	       223	obstack.c	FUNCTION_6	IF_5
0x4000433	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       224	obstack.c	FUNCTION_6	IF_5
0x4000437	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       224	obstack.c	FUNCTION_6	IF_5
0x400043b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       225	obstack.c	FUNCTION_6	IF_5	CALL_4
0x400043f	        0x4883c010	                           add rax, 0x10	       225	obstack.c	FUNCTION_6	IF_5	CALL_4
0x4000443	          0x4889c1	                            mov rcx, rax	       225	obstack.c	FUNCTION_6	IF_5	CALL_4
0x4000446	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       225	obstack.c	FUNCTION_6	IF_5	CALL_4
0x400044a	        0x488b4030	            mov rax, qword [rax + 0x30] 	       225	obstack.c	FUNCTION_6	IF_5	CALL_4
0x400044e	          0x4801c1	                            add rcx, rax	       225	obstack.c	FUNCTION_6	IF_5	CALL_4
0x4000451	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       225	obstack.c	FUNCTION_6	IF_5	CALL_4
0x4000455	        0x488b4030	            mov rax, qword [rax + 0x30] 	       225	obstack.c	FUNCTION_6	IF_5	CALL_4
0x4000459	          0x48f7d0	                                 not rax	       225	obstack.c	FUNCTION_6	IF_5	CALL_4
0x400045c	          0x4821c8	                            and rax, rcx	       225	obstack.c	FUNCTION_6	IF_5	CALL_4
0x400045f	          0x4839c2	                            cmp rdx, rax	       224	obstack.c	FUNCTION_6	IF_5
0x4000462	            0x7523	                           jne 0x4000487	       224	obstack.c	FUNCTION_6	IF_5
0x4000464	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       228	obstack.c	FUNCTION_6	IF_5
0x4000468	        0x488b5008	                mov rdx, qword [rax + 8]	       228	obstack.c	FUNCTION_6	IF_5
0x400046c	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       228	obstack.c	FUNCTION_6	IF_5
0x4000470	        0x48895008	                mov qword [rax + 8], rdx	       228	obstack.c	FUNCTION_6	IF_5
0x4000474	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       229	obstack.c	FUNCTION_6	IF_5	CALL_5
0x4000478	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       229	obstack.c	FUNCTION_6	IF_5	CALL_5
0x400047c	          0x4889d6	                            mov rsi, rdx	       229	obstack.c	FUNCTION_6	IF_5	CALL_5
0x400047f	          0x4889c7	                            mov rdi, rax	       229	obstack.c	FUNCTION_6	IF_5	CALL_5
0x4000482	      0xe809fcffff	                   call sym.call_freefun	       229	obstack.c	FUNCTION_6	IF_5	CALL_5
0x4000487	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       232	obstack.c	FUNCTION_6
0x400048b	        0x488b55f8	                mov rdx, qword [rbp - 8]	       232	obstack.c	FUNCTION_6
0x400048f	        0x48895010	             mov qword [rax + 0x10], rdx	       232	obstack.c	FUNCTION_6
0x4000493	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       233	obstack.c	FUNCTION_6
0x4000497	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       233	obstack.c	FUNCTION_6
0x400049b	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       233	obstack.c	FUNCTION_6
0x400049f	          0x4801c2	                            add rdx, rax	       233	obstack.c	FUNCTION_6
0x40004a2	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       233	obstack.c	FUNCTION_6
0x40004a6	        0x48895018	             mov qword [rax + 0x18], rdx	       233	obstack.c	FUNCTION_6
0x40004aa	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       235	obstack.c	FUNCTION_6
0x40004ae	         0xfb65050	           movzx edx, byte [rax + 0x50] 	       235	obstack.c	FUNCTION_6
0x40004b2	          0x83e2fd	                     and edx, 0xfffffffd	       235	obstack.c	FUNCTION_6
0x40004b5	          0x885050	               mov byte [rax + 0x50], dl	       235	obstack.c	FUNCTION_6
0x40004b8	              0x90	                                     nop	       236	obstack.c	FUNCTION_6
0x40004b9	              0xc9	                                   leave	       236	obstack.c	FUNCTION_6
0x40004ba	              0xc3	                                     ret	       236	obstack.c	FUNCTION_6
call_freefun	IF,1:ELSE,1:functions,0:WHILE,0:FOR,0:SWITCH,0:CALL,2:DO,0	27
0x4000090	              0x55	                                push rbp	        99	obstack.c	FUNCTION_2
0x4000091	          0x4889e5	                            mov rbp, rsp	        99	obstack.c	FUNCTION_2
0x4000094	        0x4883ec10	                           sub rsp, 0x10	        99	obstack.c	FUNCTION_2
0x4000098	        0x48897df8	                mov qword [rbp - 8], rdi	        99	obstack.c	FUNCTION_2
0x400009c	        0x488975f0	             mov qword [rbp - 0x10], rsi	        99	obstack.c	FUNCTION_2
0x40000a0	        0x488b45f8	                mov rax, qword [rbp - 8]	       100	obstack.c	FUNCTION_2	IF_1
0x40000a4	         0xfb64050	           movzx eax, byte [rax + 0x50] 	       100	obstack.c	FUNCTION_2	IF_1
0x40000a8	          0x83e001	                              and eax, 1	       100	obstack.c	FUNCTION_2	IF_1
0x40000ab	            0x84c0	                             test al, al	       100	obstack.c	FUNCTION_2	IF_1
0x40000ad	            0x741e	                            je 0x40000cd	       100	obstack.c	FUNCTION_2	IF_1
0x40000af	        0x488b45f8	                mov rax, qword [rbp - 8]	       101	obstack.c	FUNCTION_2	CALL_1
0x40000b3	        0x488b4040	            mov rax, qword [rax + 0x40] 	       101	obstack.c	FUNCTION_2	CALL_1
0x40000b7	        0x488b55f8	                mov rdx, qword [rbp - 8]	       101	obstack.c	FUNCTION_2	CALL_1
0x40000bb	        0x488b5248	            mov rdx, qword [rdx + 0x48] 	       101	obstack.c	FUNCTION_2	CALL_1
0x40000bf	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	       101	obstack.c	FUNCTION_2	CALL_1
0x40000c3	          0x4889ce	                            mov rsi, rcx	       101	obstack.c	FUNCTION_2	CALL_1
0x40000c6	          0x4889d7	                            mov rdi, rdx	       101	obstack.c	FUNCTION_2	CALL_1
0x40000c9	            0xffd0	                                call rax	       101	obstack.c	FUNCTION_2	CALL_1
0x40000cb	            0xeb11	                           jmp 0x40000de	       104	obstack.c	FUNCTION_2
0x40000cd	        0x488b45f8	                mov rax, qword [rbp - 8]	       103	obstack.c	FUNCTION_2	CALL_2
0x40000d1	        0x488b4040	            mov rax, qword [rax + 0x40] 	       103	obstack.c	FUNCTION_2	CALL_2
0x40000d5	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       103	obstack.c	FUNCTION_2	CALL_2
0x40000d9	          0x4889d7	                            mov rdi, rdx	       103	obstack.c	FUNCTION_2	CALL_2
0x40000dc	            0xffd0	                                call rax	       103	obstack.c	FUNCTION_2	CALL_2
0x40000de	              0x90	                                     nop	       104	obstack.c	FUNCTION_2
0x40000df	              0xc9	                                   leave	       104	obstack.c	FUNCTION_2
0x40000e0	              0xc3	                                     ret	       104	obstack.c	FUNCTION_2
call_chunkfun	IF,1:ELSE,1:functions,0:WHILE,0:FOR,0:SWITCH,0:CALL,2:DO,0	26
0x4000040	              0x55	                                push rbp	        90	obstack.c	FUNCTION_1
0x4000041	          0x4889e5	                            mov rbp, rsp	        90	obstack.c	FUNCTION_1
0x4000044	        0x4883ec10	                           sub rsp, 0x10	        90	obstack.c	FUNCTION_1
0x4000048	        0x48897df8	                mov qword [rbp - 8], rdi	        90	obstack.c	FUNCTION_1
0x400004c	        0x488975f0	             mov qword [rbp - 0x10], rsi	        90	obstack.c	FUNCTION_1
0x4000050	        0x488b45f8	                mov rax, qword [rbp - 8]	        91	obstack.c	FUNCTION_1	IF_1
0x4000054	         0xfb64050	           movzx eax, byte [rax + 0x50] 	        91	obstack.c	FUNCTION_1	IF_1
0x4000058	          0x83e001	                              and eax, 1	        91	obstack.c	FUNCTION_1	IF_1
0x400005b	            0x84c0	                             test al, al	        91	obstack.c	FUNCTION_1	IF_1
0x400005d	            0x741e	                            je 0x400007d	        91	obstack.c	FUNCTION_1	IF_1
0x400005f	        0x488b45f8	                mov rax, qword [rbp - 8]	        92	obstack.c	FUNCTION_1	CALL_1
0x4000063	        0x488b4038	            mov rax, qword [rax + 0x38] 	        92	obstack.c	FUNCTION_1	CALL_1
0x4000067	        0x488b55f8	                mov rdx, qword [rbp - 8]	        92	obstack.c	FUNCTION_1	CALL_1
0x400006b	        0x488b5248	            mov rdx, qword [rdx + 0x48] 	        92	obstack.c	FUNCTION_1	CALL_1
0x400006f	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	        92	obstack.c	FUNCTION_1	CALL_1
0x4000073	          0x4889ce	                            mov rsi, rcx	        92	obstack.c	FUNCTION_1	CALL_1
0x4000076	          0x4889d7	                            mov rdi, rdx	        92	obstack.c	FUNCTION_1	CALL_1
0x4000079	            0xffd0	                                call rax	        92	obstack.c	FUNCTION_1	CALL_1
0x400007b	            0xeb11	                           jmp 0x400008e	        92	obstack.c	FUNCTION_1	CALL_1
0x400007d	        0x488b45f8	                mov rax, qword [rbp - 8]	        94	obstack.c	FUNCTION_1	CALL_2
0x4000081	        0x488b4038	            mov rax, qword [rax + 0x38] 	        94	obstack.c	FUNCTION_1	CALL_2
0x4000085	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	        94	obstack.c	FUNCTION_1	CALL_2
0x4000089	          0x4889d7	                            mov rdi, rdx	        94	obstack.c	FUNCTION_1	CALL_2
0x400008c	            0xffd0	                                call rax	        94	obstack.c	FUNCTION_1	CALL_2
0x400008e	              0xc9	                                   leave	        95	obstack.c	FUNCTION_1
0x400008f	              0xc3	                                     ret	        95	obstack.c	FUNCTION_1
_obstack_begin_worker	IF,3:ELSE,0:functions,0:WHILE,0:FOR,0:SWITCH,0:CALL,2:DO,0	76
0x40000e1	              0x55	                                push rbp	       116	obstack.c	FUNCTION_3
0x40000e2	          0x4889e5	                            mov rbp, rsp	       116	obstack.c	FUNCTION_3
0x40000e5	        0x4883ec30	                           sub rsp, 0x30	       116	obstack.c	FUNCTION_3
0x40000e9	        0x48897de8	             mov qword [rbp - 0x18], rdi	       116	obstack.c	FUNCTION_3
0x40000ed	        0x488975e0	             mov qword [rbp - 0x20], rsi	       116	obstack.c	FUNCTION_3
0x40000f1	        0x488955d8	             mov qword [rbp - 0x28], rdx	       116	obstack.c	FUNCTION_3
0x40000f5	      0x48837dd800	               cmp qword [rbp - 0x28], 0	       119	obstack.c	FUNCTION_3	IF_1
0x40000fa	            0x7508	                           jne 0x4000104	       119	obstack.c	FUNCTION_3	IF_1
0x40000fc	    0x48c745d81000	           mov qword [rbp - 0x28], 0x10 	       120	obstack.c	FUNCTION_3	IF_1
0x4000104	      0x48837de000	               cmp qword [rbp - 0x20], 0	       121	obstack.c	FUNCTION_3	IF_2
0x4000109	            0x7515	                           jne 0x4000120	       121	obstack.c	FUNCTION_3	IF_2
0x400010b	    0xc745f4200000	            mov dword [rbp - 0xc], 0x20 	       132	obstack.c	FUNCTION_3	IF_2
0x4000112	      0xb800100000	                         mov eax, 0x1000	       135	obstack.c	FUNCTION_3	IF_2
0x4000117	          0x2b45f4	              sub eax, dword [rbp - 0xc]	       135	obstack.c	FUNCTION_3	IF_2
0x400011a	            0x4898	                                    cdqe	       135	obstack.c	FUNCTION_3	IF_2
0x400011c	        0x488945e0	             mov qword [rbp - 0x20], rax	       135	obstack.c	FUNCTION_3	IF_2
0x4000120	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       138	obstack.c	FUNCTION_3
0x4000124	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       138	obstack.c	FUNCTION_3
0x4000128	          0x488910	                    mov qword [rax], rdx	       138	obstack.c	FUNCTION_3
0x400012b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       139	obstack.c	FUNCTION_3
0x400012f	        0x488d50ff	                      lea rdx, [rax - 1]	       139	obstack.c	FUNCTION_3
0x4000133	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       139	obstack.c	FUNCTION_3
0x4000137	        0x48895030	             mov qword [rax + 0x30], rdx	       139	obstack.c	FUNCTION_3
0x400013b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       141	obstack.c	FUNCTION_3	CALL_1
0x400013f	          0x488b10	                    mov rdx, qword [rax]	       141	obstack.c	FUNCTION_3	CALL_1
0x4000142	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       141	obstack.c	FUNCTION_3	CALL_1
0x4000146	          0x4889d6	                            mov rsi, rdx	       141	obstack.c	FUNCTION_3	CALL_1
0x4000149	          0x4889c7	                            mov rdi, rax	       141	obstack.c	FUNCTION_3	CALL_1
0x400014c	      0xe8effeffff	                  call sym.call_chunkfun	       141	obstack.c	FUNCTION_3	CALL_1
0x4000151	        0x488945f8	                mov qword [rbp - 8], rax	       141	obstack.c	FUNCTION_3	CALL_1
0x4000155	      0x48837df800	                  cmp qword [rbp - 8], 0	       142	obstack.c	FUNCTION_3	IF_3
0x400015a	            0x7509	                           jne 0x4000165	       142	obstack.c	FUNCTION_3	IF_3
0x400015c	    0x488b05000000	            mov rax, qword [0x04000163] 	       143	obstack.c	FUNCTION_3	IF_3
0x4000163	            0xffd0	                                call rax	       143	obstack.c	FUNCTION_3	IF_3
0x4000165	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       144	obstack.c	FUNCTION_3
0x4000169	        0x488b55f8	                mov rdx, qword [rbp - 8]	       144	obstack.c	FUNCTION_3
0x400016d	        0x48895008	                mov qword [rax + 8], rdx	       144	obstack.c	FUNCTION_3
0x4000171	        0x488b45f8	                mov rax, qword [rbp - 8]	       145	obstack.c	FUNCTION_3	CALL_2
0x4000175	        0x4883c010	                           add rax, 0x10	       145	obstack.c	FUNCTION_3	CALL_2
0x4000179	          0x4889c2	                            mov rdx, rax	       145	obstack.c	FUNCTION_3	CALL_2
0x400017c	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       145	obstack.c	FUNCTION_3	CALL_2
0x4000180	          0x4801d0	                            add rax, rdx	       145	obstack.c	FUNCTION_3	CALL_2
0x4000183	        0x488d50ff	                      lea rdx, [rax - 1]	       145	obstack.c	FUNCTION_3	CALL_2
0x4000187	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       145	obstack.c	FUNCTION_3	CALL_2
0x400018b	          0x48f7d8	                                 neg rax	       145	obstack.c	FUNCTION_3	CALL_2
0x400018e	          0x4821d0	                            and rax, rdx	       145	obstack.c	FUNCTION_3	CALL_2
0x4000191	          0x4889c2	                            mov rdx, rax	       145	obstack.c	FUNCTION_3	CALL_2
0x4000194	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       145	obstack.c	FUNCTION_3	CALL_2
0x4000198	        0x48895010	             mov qword [rax + 0x10], rdx	       145	obstack.c	FUNCTION_3	CALL_2
0x400019c	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       145	obstack.c	FUNCTION_3	CALL_2
0x40001a0	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       145	obstack.c	FUNCTION_3	CALL_2
0x40001a4	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       145	obstack.c	FUNCTION_3	CALL_2
0x40001a8	        0x48895018	             mov qword [rax + 0x18], rdx	       145	obstack.c	FUNCTION_3	CALL_2
0x40001ac	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       147	obstack.c	FUNCTION_3
0x40001b0	          0x488b10	                    mov rdx, qword [rax]	       147	obstack.c	FUNCTION_3
0x40001b3	        0x488b45f8	                mov rax, qword [rbp - 8]	       147	obstack.c	FUNCTION_3
0x40001b7	          0x4801c2	                            add rdx, rax	       147	obstack.c	FUNCTION_3
0x40001ba	        0x488b45f8	                mov rax, qword [rbp - 8]	       147	obstack.c	FUNCTION_3
0x40001be	          0x488910	                    mov qword [rax], rdx	       147	obstack.c	FUNCTION_3
0x40001c1	        0x488b45f8	                mov rax, qword [rbp - 8]	       147	obstack.c	FUNCTION_3
0x40001c5	          0x488b10	                    mov rdx, qword [rax]	       147	obstack.c	FUNCTION_3
0x40001c8	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       147	obstack.c	FUNCTION_3
0x40001cc	        0x48895020	             mov qword [rax + 0x20], rdx	       147	obstack.c	FUNCTION_3
0x40001d0	        0x488b45f8	                mov rax, qword [rbp - 8]	       148	obstack.c	FUNCTION_3
0x40001d4	    0x48c740080000	                  mov qword [rax + 8], 0	       148	obstack.c	FUNCTION_3
0x40001dc	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       150	obstack.c	FUNCTION_3
0x40001e0	         0xfb65050	           movzx edx, byte [rax + 0x50] 	       150	obstack.c	FUNCTION_3
0x40001e4	          0x83e2fd	                     and edx, 0xfffffffd	       150	obstack.c	FUNCTION_3
0x40001e7	          0x885050	               mov byte [rax + 0x50], dl	       150	obstack.c	FUNCTION_3
0x40001ea	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       151	obstack.c	FUNCTION_3
0x40001ee	         0xfb65050	           movzx edx, byte [rax + 0x50] 	       151	obstack.c	FUNCTION_3
0x40001f2	          0x83e2fb	                     and edx, 0xfffffffb	       151	obstack.c	FUNCTION_3
0x40001f5	          0x885050	               mov byte [rax + 0x50], dl	       151	obstack.c	FUNCTION_3
0x40001f8	      0xb801000000	                              mov eax, 1	       152	obstack.c	FUNCTION_3
0x40001fd	              0xc9	                                   leave	       153	obstack.c	FUNCTION_3
0x40001fe	              0xc3	                                     ret	       153	obstack.c	FUNCTION_3
print_and_abort	IF,0:ELSE,0:functions,0:WHILE,0:FOR,0:SWITCH,0:CALL,3:DO,0	10
0x4000623	              0x55	                                push rbp	       354	obstack.c	FUNCTION_10
0x4000624	          0x4889e5	                            mov rbp, rsp	       354	obstack.c	FUNCTION_10
0x4000627	    0x488b05000000	            mov rax, qword [0x0400062e] 	       363	obstack.c	FUNCTION_10	CALL_2
0x400062e	      0xba00000000	                              mov edx, 0	       363	obstack.c	FUNCTION_10	CALL_2
0x4000633	      0xbe00000000	                              mov esi, 0	       363	obstack.c	FUNCTION_10	CALL_2
0x4000638	          0x4889c7	                            mov rdi, rax	       363	obstack.c	FUNCTION_10	CALL_2
0x400063b	      0xb800000000	                              mov eax, 0	       363	obstack.c	FUNCTION_10	CALL_2
0x4000640	      0xe800000000	                          call 0x4000645	       363	obstack.c	FUNCTION_10	CALL_2
0x4000645	      0xbf01000000	                              mov edi, 1	       365	obstack.c	FUNCTION_10	CALL_3
0x400064a	      0xe800000000	                  call section_end..text	       365	obstack.c	FUNCTION_10	CALL_3
