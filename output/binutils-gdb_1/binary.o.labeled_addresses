binary_set_section_contents	FOR,2:DO,0:WHILE,0:ELSE,0:functions,0:CALL,4:SWITCH,0:IF,7	121
0x40004b3	              0x55	                                push rbp	       227	binary.c	FUNCTION_8
0x40004b4	          0x4889e5	                            mov rbp, rsp	       227	binary.c	FUNCTION_8
0x40004b7	        0x4883ec50	                           sub rsp, 0x50	       227	binary.c	FUNCTION_8
0x40004bb	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       227	binary.c	FUNCTION_8
0x40004bf	        0x488975d0	             mov qword [rbp - 0x30], rsi	       227	binary.c	FUNCTION_8
0x40004c3	        0x488955c8	             mov qword [rbp - 0x38], rdx	       227	binary.c	FUNCTION_8
0x40004c7	        0x48894dc0	             mov qword [rbp - 0x40], rcx	       227	binary.c	FUNCTION_8
0x40004cb	        0x4c8945b8	              mov qword [rbp - 0x48], r8	       227	binary.c	FUNCTION_8
0x40004cf	      0x48837db800	               cmp qword [rbp - 0x48], 0	       228	binary.c	FUNCTION_8	IF_1
0x40004d4	            0x750a	                           jne 0x40004e0	       228	binary.c	FUNCTION_8	IF_1
0x40004d6	      0xb801000000	                              mov eax, 1	       229	binary.c	FUNCTION_8	IF_1
0x40004db	      0xe99d010000	                           jmp 0x400067d	       229	binary.c	FUNCTION_8	IF_1
0x40004e0	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       231	binary.c	FUNCTION_8	IF_2
0x40004e4	         0xfb64047	           movzx eax, byte [rax + 0x47] 	       231	binary.c	FUNCTION_8	IF_2
0x40004e8	          0x83e040	                           and eax, 0x40	       231	binary.c	FUNCTION_8	IF_2
0x40004eb	            0x84c0	                             test al, al	       231	binary.c	FUNCTION_8	IF_2
0x40004ed	     0xf853f010000	                           jne 0x4000632	       231	binary.c	FUNCTION_8	IF_2
0x40004f3	    0xc745e8000000	               mov dword [rbp - 0x18], 0	       241	binary.c	FUNCTION_8	IF_2
0x40004fa	    0x48c745f00000	               mov qword [rbp - 0x10], 0	       242	binary.c	FUNCTION_8	IF_2
0x4000502	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       243	binary.c	FUNCTION_8	IF_2	FOR_1
0x4000506	    0x488b80900000	            mov rax, qword [rax + 0x90] 	       243	binary.c	FUNCTION_8	IF_2	FOR_1
0x400050d	        0x488945f8	                mov qword [rbp - 8], rax	       243	binary.c	FUNCTION_8	IF_2	FOR_1
0x4000511	            0xeb53	                           jmp 0x4000566	       243	binary.c	FUNCTION_8	IF_2	FOR_1
0x4000513	        0x488b45f8	                mov rax, qword [rbp - 8]	       244	binary.c	FUNCTION_8	IF_2	FOR_1	IF_3
0x4000517	          0x8b4020	            mov eax, dword [rax + 0x20] 	       244	binary.c	FUNCTION_8	IF_2	FOR_1	IF_3
0x400051a	      0x2503030000	                          and eax, 0x303	       245	binary.c	FUNCTION_8	IF_2	FOR_1	IF_3
0x400051f	      0x3d03010000	                          cmp eax, 0x103	       244	binary.c	FUNCTION_8	IF_2	FOR_1	IF_3
0x4000524	            0x7534	                           jne 0x400055a	       244	binary.c	FUNCTION_8	IF_2	FOR_1	IF_3
0x4000526	        0x488b45f8	                mov rax, qword [rbp - 8]	       247	binary.c	FUNCTION_8	IF_2	FOR_1	IF_3
0x400052a	        0x488b4038	            mov rax, qword [rax + 0x38] 	       247	binary.c	FUNCTION_8	IF_2	FOR_1	IF_3
0x400052e	          0x4885c0	                           test rax, rax	       247	binary.c	FUNCTION_8	IF_2	FOR_1	IF_3
0x4000531	            0x7427	                            je 0x400055a	       247	binary.c	FUNCTION_8	IF_2	FOR_1	IF_3
0x4000533	        0x837de800	               cmp dword [rbp - 0x18], 0	       248	binary.c	FUNCTION_8	IF_2	FOR_1	IF_3
0x4000537	            0x740e	                            je 0x4000547	       248	binary.c	FUNCTION_8	IF_2	FOR_1	IF_3
0x4000539	        0x488b45f8	                mov rax, qword [rbp - 8]	       248	binary.c	FUNCTION_8	IF_2	FOR_1	IF_3
0x400053d	        0x488b4030	            mov rax, qword [rax + 0x30] 	       248	binary.c	FUNCTION_8	IF_2	FOR_1	IF_3
0x4000541	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	       248	binary.c	FUNCTION_8	IF_2	FOR_1	IF_3
0x4000545	            0x7313	                           jae 0x400055a	       248	binary.c	FUNCTION_8	IF_2	FOR_1	IF_3
0x4000547	        0x488b45f8	                mov rax, qword [rbp - 8]	       250	binary.c	FUNCTION_8	IF_2	FOR_1	IF_3
0x400054b	        0x488b4030	            mov rax, qword [rax + 0x30] 	       250	binary.c	FUNCTION_8	IF_2	FOR_1	IF_3
0x400054f	        0x488945f0	             mov qword [rbp - 0x10], rax	       250	binary.c	FUNCTION_8	IF_2	FOR_1	IF_3
0x4000553	    0xc745e8010000	               mov dword [rbp - 0x18], 1	       251	binary.c	FUNCTION_8	IF_2	FOR_1	IF_3
0x400055a	        0x488b45f8	                mov rax, qword [rbp - 8]	       243	binary.c	FUNCTION_8	IF_2	FOR_1
0x400055e	        0x488b4010	            mov rax, qword [rax + 0x10] 	       243	binary.c	FUNCTION_8	IF_2	FOR_1
0x4000562	        0x488945f8	                mov qword [rbp - 8], rax	       243	binary.c	FUNCTION_8	IF_2	FOR_1
0x4000566	      0x48837df800	                  cmp qword [rbp - 8], 0	       243	binary.c	FUNCTION_8	IF_2	FOR_1
0x400056b	            0x75a6	                           jne 0x4000513	       243	binary.c	FUNCTION_8	IF_2	FOR_1
0x400056d	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       254	binary.c	FUNCTION_8	IF_2	CALL_1
0x4000571	          0x4889c7	                            mov rdi, rax	       254	binary.c	FUNCTION_8	IF_2	CALL_1
0x4000574	      0xe800000000	                          call 0x4000579	       254	binary.c	FUNCTION_8	IF_2	CALL_1
0x4000579	          0x8945ec	             mov dword [rbp - 0x14], eax	       254	binary.c	FUNCTION_8	IF_2	CALL_1
0x400057c	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       255	binary.c	FUNCTION_8	IF_2	FOR_2
0x4000580	    0x488b80900000	            mov rax, qword [rax + 0x90] 	       255	binary.c	FUNCTION_8	IF_2	FOR_2
0x4000587	        0x488945f8	                mov qword [rbp - 8], rax	       255	binary.c	FUNCTION_8	IF_2	FOR_2
0x400058b	      0xe989000000	                           jmp 0x4000619	       255	binary.c	FUNCTION_8	IF_2	FOR_2
0x4000590	        0x488b45f8	                mov rax, qword [rbp - 8]	       257	binary.c	FUNCTION_8	IF_2	FOR_2
0x4000594	        0x488b4030	            mov rax, qword [rax + 0x30] 	       257	binary.c	FUNCTION_8	IF_2	FOR_2
0x4000598	        0x482b45f0	             sub rax, qword [rbp - 0x10]	       257	binary.c	FUNCTION_8	IF_2	FOR_2
0x400059c	          0x4889c2	                            mov rdx, rax	       257	binary.c	FUNCTION_8	IF_2	FOR_2
0x400059f	          0x8b45ec	             mov eax, dword [rbp - 0x14]	       257	binary.c	FUNCTION_8	IF_2	FOR_2
0x40005a2	        0x480fafc2	                           imul rax, rdx	       257	binary.c	FUNCTION_8	IF_2	FOR_2
0x40005a6	          0x4889c2	                            mov rdx, rax	       257	binary.c	FUNCTION_8	IF_2	FOR_2
0x40005a9	        0x488b45f8	                mov rax, qword [rbp - 8]	       257	binary.c	FUNCTION_8	IF_2	FOR_2
0x40005ad	    0x488990900000	             mov qword [rax + 0x90], rdx	       257	binary.c	FUNCTION_8	IF_2	FOR_2
0x40005b4	        0x488b45f8	                mov rax, qword [rbp - 8]	       261	binary.c	FUNCTION_8	IF_2	FOR_2	IF_4
0x40005b8	          0x8b4020	            mov eax, dword [rax + 0x20] 	       261	binary.c	FUNCTION_8	IF_2	FOR_2	IF_4
0x40005bb	      0x2501030000	                          and eax, 0x301	       262	binary.c	FUNCTION_8	IF_2	FOR_2	IF_4
0x40005c0	      0x3d01010000	                          cmp eax, 0x101	       261	binary.c	FUNCTION_8	IF_2	FOR_2	IF_4
0x40005c5	            0x7545	                           jne 0x400060c	       261	binary.c	FUNCTION_8	IF_2	FOR_2	IF_4
0x40005c7	        0x488b45f8	                mov rax, qword [rbp - 8]	       264	binary.c	FUNCTION_8	IF_2	FOR_2	IF_4
0x40005cb	        0x488b4038	            mov rax, qword [rax + 0x38] 	       264	binary.c	FUNCTION_8	IF_2	FOR_2	IF_4
0x40005cf	          0x4885c0	                           test rax, rax	       264	binary.c	FUNCTION_8	IF_2	FOR_2	IF_4
0x40005d2	            0x7438	                            je 0x400060c	       264	binary.c	FUNCTION_8	IF_2	FOR_2	IF_4
0x40005d4	        0x488b45f8	                mov rax, qword [rbp - 8]	       273	binary.c	FUNCTION_8	IF_2	FOR_2	IF_5
0x40005d8	    0x488b80900000	            mov rax, qword [rax + 0x90] 	       273	binary.c	FUNCTION_8	IF_2	FOR_2	IF_5
0x40005df	          0x4885c0	                           test rax, rax	       273	binary.c	FUNCTION_8	IF_2	FOR_2	IF_5
0x40005e2	            0x7929	                           jns 0x400060d	       273	binary.c	FUNCTION_8	IF_2	FOR_2	IF_5
0x40005e4	      0xbe00000000	                              mov esi, 0	       276	binary.c	FUNCTION_8	IF_2	FOR_2	IF_5	CALL_3
0x40005e9	      0xbf00000000	                              mov edi, 0	       276	binary.c	FUNCTION_8	IF_2	FOR_2	IF_5	CALL_3
0x40005ee	      0xe800000000	                          call 0x40005f3	       276	binary.c	FUNCTION_8	IF_2	FOR_2	IF_5	CALL_3
0x40005f3	          0x4889c2	                            mov rdx, rax	       276	binary.c	FUNCTION_8	IF_2	FOR_2	IF_5	CALL_3
0x40005f6	        0x488b45f8	                mov rax, qword [rbp - 8]	       274	binary.c	FUNCTION_8	IF_2	FOR_2	IF_5	CALL_2
0x40005fa	          0x4889c6	                            mov rsi, rax	       274	binary.c	FUNCTION_8	IF_2	FOR_2	IF_5	CALL_2
0x40005fd	          0x4889d7	                            mov rdi, rdx	       274	binary.c	FUNCTION_8	IF_2	FOR_2	IF_5	CALL_2
0x4000600	      0xb800000000	                              mov eax, 0	       274	binary.c	FUNCTION_8	IF_2	FOR_2	IF_5	CALL_2
0x4000605	      0xe800000000	                          call 0x400060a	       274	binary.c	FUNCTION_8	IF_2	FOR_2	IF_5	CALL_2
0x400060a	            0xeb01	                           jmp 0x400060d	       274	binary.c	FUNCTION_8	IF_2	FOR_2	IF_5	CALL_2
0x400060c	              0x90	                                     nop	       265	binary.c	FUNCTION_8	IF_2	FOR_2	IF_4
0x400060d	        0x488b45f8	                mov rax, qword [rbp - 8]	       255	binary.c	FUNCTION_8	IF_2	FOR_2
0x4000611	        0x488b4010	            mov rax, qword [rax + 0x10] 	       255	binary.c	FUNCTION_8	IF_2	FOR_2
0x4000615	        0x488945f8	                mov qword [rbp - 8], rax	       255	binary.c	FUNCTION_8	IF_2	FOR_2
0x4000619	      0x48837df800	                  cmp qword [rbp - 8], 0	       255	binary.c	FUNCTION_8	IF_2	FOR_2
0x400061e	     0xf856cffffff	                           jne 0x4000590	       255	binary.c	FUNCTION_8	IF_2	FOR_2
0x4000624	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       281	binary.c	FUNCTION_8	IF_2
0x4000628	         0xfb65047	           movzx edx, byte [rax + 0x47] 	       281	binary.c	FUNCTION_8	IF_2
0x400062c	          0x83ca40	                            or edx, 0x40	       281	binary.c	FUNCTION_8	IF_2
0x400062f	          0x885047	               mov byte [rax + 0x47], dl	       281	binary.c	FUNCTION_8	IF_2
0x4000632	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       287	binary.c	FUNCTION_8	IF_6
0x4000636	          0x8b4020	            mov eax, dword [rax + 0x20] 	       287	binary.c	FUNCTION_8	IF_6
0x4000639	          0x83e003	                              and eax, 3	       287	binary.c	FUNCTION_8	IF_6
0x400063c	            0x85c0	                           test eax, eax	       287	binary.c	FUNCTION_8	IF_6
0x400063e	            0x7507	                           jne 0x4000647	       287	binary.c	FUNCTION_8	IF_6
0x4000640	      0xb801000000	                              mov eax, 1	       288	binary.c	FUNCTION_8	IF_6
0x4000645	            0xeb36	                           jmp 0x400067d	       288	binary.c	FUNCTION_8	IF_6
0x4000647	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       289	binary.c	FUNCTION_8	IF_7
0x400064b	          0x8b4020	            mov eax, dword [rax + 0x20] 	       289	binary.c	FUNCTION_8	IF_7
0x400064e	      0x2500020000	                          and eax, 0x200	       289	binary.c	FUNCTION_8	IF_7
0x4000653	            0x85c0	                           test eax, eax	       289	binary.c	FUNCTION_8	IF_7
0x4000655	            0x7407	                            je 0x400065e	       289	binary.c	FUNCTION_8	IF_7
0x4000657	      0xb801000000	                              mov eax, 1	       290	binary.c	FUNCTION_8	IF_7
0x400065c	            0xeb1f	                           jmp 0x400067d	       290	binary.c	FUNCTION_8	IF_7
0x400065e	        0x488b7db8	             mov rdi, qword [rbp - 0x48]	       292	binary.c	FUNCTION_8	CALL_4
0x4000662	        0x488b4dc0	             mov rcx, qword [rbp - 0x40]	       292	binary.c	FUNCTION_8	CALL_4
0x4000666	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	       292	binary.c	FUNCTION_8	CALL_4
0x400066a	        0x488b75d0	             mov rsi, qword [rbp - 0x30]	       292	binary.c	FUNCTION_8	CALL_4
0x400066e	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       292	binary.c	FUNCTION_8	CALL_4
0x4000672	          0x4989f8	                             mov r8, rdi	       292	binary.c	FUNCTION_8	CALL_4
0x4000675	          0x4889c7	                            mov rdi, rax	       292	binary.c	FUNCTION_8	CALL_4
0x4000678	      0xe800000000	                          call 0x400067d	       292	binary.c	FUNCTION_8	CALL_4
0x400067d	              0xc9	                                   leave	       293	binary.c	FUNCTION_8
0x400067e	              0xc3	                                     ret	       293	binary.c	FUNCTION_8
binary_mkobject	FOR,0:DO,0:WHILE,0:ELSE,0:functions,0:CALL,0:SWITCH,0:IF,0	6
0x4000040	              0x55	                                push rbp	        48	binary.c	FUNCTION_1
0x4000041	          0x4889e5	                            mov rbp, rsp	        48	binary.c	FUNCTION_1
0x4000044	        0x48897df8	                mov qword [rbp - 8], rdi	        48	binary.c	FUNCTION_1
0x4000048	      0xb801000000	                              mov eax, 1	        49	binary.c	FUNCTION_1
0x400004d	              0x5d	                                 pop rbp	        50	binary.c	FUNCTION_1
0x400004e	              0xc3	                                     ret	        50	binary.c	FUNCTION_1
binary_get_symtab_upper_bound	FOR,0:DO,0:WHILE,0:ELSE,0:functions,0:CALL,0:SWITCH,0:IF,0	6
0x40001e0	              0x55	                                push rbp	       115	binary.c	FUNCTION_4
0x40001e1	          0x4889e5	                            mov rbp, rsp	       115	binary.c	FUNCTION_4
0x40001e4	        0x48897df8	                mov qword [rbp - 8], rdi	       115	binary.c	FUNCTION_4
0x40001e8	      0xb820000000	                           mov eax, 0x20	       116	binary.c	FUNCTION_4
0x40001ed	              0x5d	                                 pop rbp	       117	binary.c	FUNCTION_4
0x40001ee	              0xc3	                                     ret	       117	binary.c	FUNCTION_4
binary_sizeof_headers	FOR,0:DO,0:WHILE,0:ELSE,0:functions,0:CALL,0:SWITCH,0:IF,0	7
0x400067f	              0x55	                                push rbp	       300	binary.c	FUNCTION_9
0x4000680	          0x4889e5	                            mov rbp, rsp	       300	binary.c	FUNCTION_9
0x4000683	        0x48897df8	                mov qword [rbp - 8], rdi	       300	binary.c	FUNCTION_9
0x4000687	        0x488975f0	             mov qword [rbp - 0x10], rsi	       300	binary.c	FUNCTION_9
0x400068b	      0xb800000000	                              mov eax, 0	       301	binary.c	FUNCTION_9
0x4000690	              0x5d	                                 pop rbp	       302	binary.c	FUNCTION_9
0x4000691	              0xc3	                                     ret	       302	binary.c	FUNCTION_9
binary_get_symbol_info	FOR,0:DO,0:WHILE,0:ELSE,0:functions,0:CALL,1:SWITCH,0:IF,0	14
0x4000489	              0x55	                                push rbp	       202	binary.c	FUNCTION_7
0x400048a	          0x4889e5	                            mov rbp, rsp	       202	binary.c	FUNCTION_7
0x400048d	        0x4883ec20	                           sub rsp, 0x20	       202	binary.c	FUNCTION_7
0x4000491	        0x48897df8	                mov qword [rbp - 8], rdi	       202	binary.c	FUNCTION_7
0x4000495	        0x488975f0	             mov qword [rbp - 0x10], rsi	       202	binary.c	FUNCTION_7
0x4000499	        0x488955e8	             mov qword [rbp - 0x18], rdx	       202	binary.c	FUNCTION_7
0x400049d	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       203	binary.c	FUNCTION_7	CALL_1
0x40004a1	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       203	binary.c	FUNCTION_7	CALL_1
0x40004a5	          0x4889d6	                            mov rsi, rdx	       203	binary.c	FUNCTION_7	CALL_1
0x40004a8	          0x4889c7	                            mov rdi, rax	       203	binary.c	FUNCTION_7	CALL_1
0x40004ab	      0xe800000000	                          call 0x40004b0	       203	binary.c	FUNCTION_7	CALL_1
0x40004b0	              0x90	                                     nop	       204	binary.c	FUNCTION_7
0x40004b1	              0xc9	                                   leave	       204	binary.c	FUNCTION_7
0x40004b2	              0xc3	                                     ret	       204	binary.c	FUNCTION_7
binary_get_section_contents	FOR,0:DO,0:WHILE,0:ELSE,0:functions,0:CALL,2:SWITCH,0:IF,1	29
0x400017d	              0x55	                                push rbp	       104	binary.c	FUNCTION_3
0x400017e	          0x4889e5	                            mov rbp, rsp	       104	binary.c	FUNCTION_3
0x4000181	        0x4883ec30	                           sub rsp, 0x30	       104	binary.c	FUNCTION_3
0x4000185	        0x48897df8	                mov qword [rbp - 8], rdi	       104	binary.c	FUNCTION_3
0x4000189	        0x488975f0	             mov qword [rbp - 0x10], rsi	       104	binary.c	FUNCTION_3
0x400018d	        0x488955e8	             mov qword [rbp - 0x18], rdx	       104	binary.c	FUNCTION_3
0x4000191	        0x48894de0	             mov qword [rbp - 0x20], rcx	       104	binary.c	FUNCTION_3
0x4000195	        0x4c8945d8	              mov qword [rbp - 0x28], r8	       104	binary.c	FUNCTION_3
0x4000199	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	       105	binary.c	FUNCTION_3	IF_1	CALL_1
0x400019d	        0x488b45f8	                mov rax, qword [rbp - 8]	       105	binary.c	FUNCTION_3	IF_1	CALL_1
0x40001a1	      0xba00000000	                              mov edx, 0	       105	binary.c	FUNCTION_3	IF_1	CALL_1
0x40001a6	          0x4889ce	                            mov rsi, rcx	       105	binary.c	FUNCTION_3	IF_1	CALL_1
0x40001a9	          0x4889c7	                            mov rdi, rax	       105	binary.c	FUNCTION_3	IF_1	CALL_1
0x40001ac	      0xe800000000	                          call 0x40001b1	       105	binary.c	FUNCTION_3	IF_1	CALL_1
0x40001b1	            0x85c0	                           test eax, eax	       105	binary.c	FUNCTION_3	IF_1	CALL_1
0x40001b3	            0x751d	                           jne 0x40001d2	       105	binary.c	FUNCTION_3	IF_1	CALL_1
0x40001b5	        0x488b55f8	                mov rdx, qword [rbp - 8]	       106	binary.c	FUNCTION_3	IF_1	CALL_2
0x40001b9	        0x488b4dd8	             mov rcx, qword [rbp - 0x28]	       106	binary.c	FUNCTION_3	IF_1	CALL_2
0x40001bd	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       106	binary.c	FUNCTION_3	IF_1	CALL_2
0x40001c1	          0x4889ce	                            mov rsi, rcx	       106	binary.c	FUNCTION_3	IF_1	CALL_2
0x40001c4	          0x4889c7	                            mov rdi, rax	       106	binary.c	FUNCTION_3	IF_1	CALL_2
0x40001c7	      0xe800000000	                          call 0x40001cc	       106	binary.c	FUNCTION_3	IF_1	CALL_2
0x40001cc	        0x483b45d8	             cmp rax, qword [rbp - 0x28]	       106	binary.c	FUNCTION_3	IF_1	CALL_2
0x40001d0	            0x7407	                            je 0x40001d9	       106	binary.c	FUNCTION_3	IF_1	CALL_2
0x40001d2	      0xb800000000	                              mov eax, 0	       107	binary.c	FUNCTION_3	IF_1
0x40001d7	            0xeb05	                           jmp 0x40001de	       107	binary.c	FUNCTION_3	IF_1
0x40001d9	      0xb801000000	                              mov eax, 1	       108	binary.c	FUNCTION_3
0x40001de	              0xc9	                                   leave	       109	binary.c	FUNCTION_3
0x40001df	              0xc3	                                     ret	       109	binary.c	FUNCTION_3
binary_object_p	FOR,0:DO,0:WHILE,0:ELSE,0:functions,0:CALL,4:SWITCH,0:IF,3	59
0x400004f	              0x55	                                push rbp	        58	binary.c	FUNCTION_2
0x4000050	          0x4889e5	                            mov rbp, rsp	        58	binary.c	FUNCTION_2
0x4000053	    0x4881ecc00000	                           sub rsp, 0xc0	        58	binary.c	FUNCTION_2
0x400005a	    0x4889bd48ffff	             mov qword [rbp - 0xb8], rdi	        58	binary.c	FUNCTION_2
0x4000061	    0x64488b042528	                mov rax, qword fs:[0x28]	        58	binary.c	FUNCTION_2
0x400006a	        0x488945f8	                mov qword [rbp - 8], rax	        58	binary.c	FUNCTION_2
0x400006e	            0x31c0	                            xor eax, eax	        58	binary.c	FUNCTION_2
0x4000070	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	        63	binary.c	FUNCTION_2	IF_1
0x4000077	         0xfb64047	           movzx eax, byte [rax + 0x47] 	        63	binary.c	FUNCTION_2	IF_1
0x400007b	          0x83e004	                              and eax, 4	        63	binary.c	FUNCTION_2	IF_1
0x400007e	            0x84c0	                             test al, al	        63	binary.c	FUNCTION_2	IF_1
0x4000080	            0x7414	                            je 0x4000096	        63	binary.c	FUNCTION_2	IF_1
0x4000082	      0xbf03000000	                              mov edi, 3	        65	binary.c	FUNCTION_2	IF_1	CALL_1
0x4000087	      0xe800000000	                          call 0x400008c	        65	binary.c	FUNCTION_2	IF_1	CALL_1
0x400008c	      0xb800000000	                              mov eax, 0	        66	binary.c	FUNCTION_2	IF_1
0x4000091	      0xe9d1000000	                           jmp 0x4000167	        66	binary.c	FUNCTION_2	IF_1
0x4000096	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	        69	binary.c	FUNCTION_2
0x400009d	    0xc780b8000000	               mov dword [rax + 0xb8], 3	        69	binary.c	FUNCTION_2
0x40000a7	    0x488d9560ffff	                   lea rdx, [rbp - 0xa0]	        72	binary.c	FUNCTION_2	IF_2	CALL_2
0x40000ae	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	        72	binary.c	FUNCTION_2	IF_2	CALL_2
0x40000b5	          0x4889d6	                            mov rsi, rdx	        72	binary.c	FUNCTION_2	IF_2	CALL_2
0x40000b8	          0x4889c7	                            mov rdi, rax	        72	binary.c	FUNCTION_2	IF_2	CALL_2
0x40000bb	      0xe800000000	                          call 0x40000c0	        72	binary.c	FUNCTION_2	IF_2	CALL_2
0x40000c0	            0x85c0	                           test eax, eax	        72	binary.c	FUNCTION_2	IF_2	CALL_2
0x40000c2	            0x7914	                           jns 0x40000d8	        72	binary.c	FUNCTION_2	IF_2	CALL_2
0x40000c4	      0xbf01000000	                              mov edi, 1	        74	binary.c	FUNCTION_2	IF_2	CALL_3
0x40000c9	      0xe800000000	                          call 0x40000ce	        74	binary.c	FUNCTION_2	IF_2	CALL_3
0x40000ce	      0xb800000000	                              mov eax, 0	        75	binary.c	FUNCTION_2	IF_2
0x40000d3	      0xe98f000000	                           jmp 0x4000167	        75	binary.c	FUNCTION_2	IF_2
0x40000d8	    0xc78554ffffff	          mov dword [rbp - 0xac], 0x123 	        79	binary.c	FUNCTION_2
0x40000e2	    0x8b9554ffffff	             mov edx, dword [rbp - 0xac]	        80	binary.c	FUNCTION_2	CALL_4
0x40000e8	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	        80	binary.c	FUNCTION_2	CALL_4
0x40000ef	      0xbe00000000	                              mov esi, 0	        80	binary.c	FUNCTION_2	CALL_4
0x40000f4	          0x4889c7	                            mov rdi, rax	        80	binary.c	FUNCTION_2	CALL_4
0x40000f7	      0xe800000000	                          call 0x40000fc	        80	binary.c	FUNCTION_2	CALL_4
0x40000fc	    0x48898558ffff	             mov qword [rbp - 0xa8], rax	        80	binary.c	FUNCTION_2	CALL_4
0x4000103	    0x4883bd58ffff	               cmp qword [rbp - 0xa8], 0	        81	binary.c	FUNCTION_2	IF_3
0x400010b	            0x7507	                           jne 0x4000114	        81	binary.c	FUNCTION_2	IF_3
0x400010d	      0xb800000000	                              mov eax, 0	        82	binary.c	FUNCTION_2	IF_3
0x4000112	            0xeb53	                           jmp 0x4000167	        82	binary.c	FUNCTION_2	IF_3
0x4000114	    0x488b8558ffff	             mov rax, qword [rbp - 0xa8]	        83	binary.c	FUNCTION_2
0x400011b	    0x48c740280000	               mov qword [rax + 0x28], 0	        83	binary.c	FUNCTION_2
0x4000123	        0x488b4590	             mov rax, qword [rbp - 0x70]	        84	binary.c	FUNCTION_2
0x4000127	          0x4889c2	                            mov rdx, rax	        84	binary.c	FUNCTION_2
0x400012a	    0x488b8558ffff	             mov rax, qword [rbp - 0xa8]	        84	binary.c	FUNCTION_2
0x4000131	        0x48895038	             mov qword [rax + 0x38], rdx	        84	binary.c	FUNCTION_2
0x4000135	    0x488b8558ffff	             mov rax, qword [rbp - 0xa8]	        85	binary.c	FUNCTION_2
0x400013c	    0x48c780900000	               mov qword [rax + 0x90], 0	        85	binary.c	FUNCTION_2
0x4000147	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	        87	binary.c	FUNCTION_2
0x400014e	    0x488b9558ffff	             mov rdx, qword [rbp - 0xa8]	        87	binary.c	FUNCTION_2
0x4000155	    0x488990f80000	             mov qword [rax + 0xf8], rdx	        87	binary.c	FUNCTION_2
0x400015c	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	        89	binary.c	FUNCTION_2
0x4000163	        0x488b4008	                mov rax, qword [rax + 8]	        89	binary.c	FUNCTION_2
0x4000167	        0x488b4df8	                mov rcx, qword [rbp - 8]	        90	binary.c	FUNCTION_2
0x400016b	    0x6448330c2528	                xor rcx, qword fs:[0x28]	        90	binary.c	FUNCTION_2
0x4000174	            0x7405	                            je 0x400017b	        90	binary.c	FUNCTION_2
0x4000176	      0xe800000000	                          call 0x400017b	        90	binary.c	FUNCTION_2
0x400017b	              0xc9	                                   leave	        90	binary.c	FUNCTION_2
0x400017c	              0xc3	                                     ret	        90	binary.c	FUNCTION_2
mangle_name	FOR,1:DO,0:WHILE,0:ELSE,0:functions,0:CALL,7:SWITCH,0:IF,2	60
0x40001ef	              0x55	                                push rbp	       123	binary.c	FUNCTION_5
0x40001f0	          0x4889e5	                            mov rbp, rsp	       123	binary.c	FUNCTION_5
0x40001f3	              0x53	                                push rbx	       123	binary.c	FUNCTION_5
0x40001f4	        0x4883ec38	                           sub rsp, 0x38	       123	binary.c	FUNCTION_5
0x40001f8	        0x48897dc8	             mov qword [rbp - 0x38], rdi	       123	binary.c	FUNCTION_5
0x40001fc	        0x488975c0	             mov qword [rbp - 0x40], rsi	       123	binary.c	FUNCTION_5
0x4000200	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       128	binary.c	FUNCTION_5	CALL_2
0x4000204	          0x488b00	                    mov rax, qword [rax]	       128	binary.c	FUNCTION_5	CALL_2
0x4000207	          0x4889c7	                            mov rdi, rax	       128	binary.c	FUNCTION_5	CALL_2
0x400020a	      0xe800000000	                          call 0x400020f	       128	binary.c	FUNCTION_5	CALL_2
0x400020f	          0x4889c3	                            mov rbx, rax	       128	binary.c	FUNCTION_5	CALL_2
0x4000212	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       129	binary.c	FUNCTION_5	CALL_3
0x4000216	          0x4889c7	                            mov rdi, rax	       129	binary.c	FUNCTION_5	CALL_3
0x4000219	      0xe800000000	                          call 0x400021e	       129	binary.c	FUNCTION_5	CALL_3
0x400021e	          0x4801d8	                            add rax, rbx	       129	binary.c	FUNCTION_5	CALL_3
0x4000221	        0x4883c00a	                            add rax, 0xa	       128	binary.c	FUNCTION_5	CALL_2
0x4000225	        0x488945e0	             mov qword [rbp - 0x20], rax	       128	binary.c	FUNCTION_5	CALL_2
0x4000229	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       132	binary.c	FUNCTION_5	CALL_4
0x400022d	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       132	binary.c	FUNCTION_5	CALL_4
0x4000231	          0x4889d6	                            mov rsi, rdx	       132	binary.c	FUNCTION_5	CALL_4
0x4000234	          0x4889c7	                            mov rdi, rax	       132	binary.c	FUNCTION_5	CALL_4
0x4000237	      0xe800000000	                          call 0x400023c	       132	binary.c	FUNCTION_5	CALL_4
0x400023c	        0x488945e8	             mov qword [rbp - 0x18], rax	       132	binary.c	FUNCTION_5	CALL_4
0x4000240	      0x48837de800	               cmp qword [rbp - 0x18], 0	       133	binary.c	FUNCTION_5	IF_1
0x4000245	            0x7507	                           jne 0x400024e	       133	binary.c	FUNCTION_5	IF_1
0x4000247	      0xb800000000	                              mov eax, 0	       134	binary.c	FUNCTION_5	IF_1
0x400024c	            0xeb69	                           jmp 0x40002b7	       134	binary.c	FUNCTION_5	IF_1
0x400024e	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       136	binary.c	FUNCTION_5	CALL_6
0x4000252	          0x488b10	                    mov rdx, qword [rax]	       136	binary.c	FUNCTION_5	CALL_6
0x4000255	        0x488b4dc0	             mov rcx, qword [rbp - 0x40]	       136	binary.c	FUNCTION_5	CALL_6
0x4000259	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       136	binary.c	FUNCTION_5	CALL_6
0x400025d	      0xbe00000000	                              mov esi, 0	       136	binary.c	FUNCTION_5	CALL_6
0x4000262	          0x4889c7	                            mov rdi, rax	       136	binary.c	FUNCTION_5	CALL_6
0x4000265	      0xb800000000	                              mov eax, 0	       136	binary.c	FUNCTION_5	CALL_6
0x400026a	      0xe800000000	                          call 0x400026f	       136	binary.c	FUNCTION_5	CALL_6
0x400026f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       139	binary.c	FUNCTION_5	FOR_1
0x4000273	        0x488945d8	             mov qword [rbp - 0x28], rax	       139	binary.c	FUNCTION_5	FOR_1
0x4000277	            0xeb2f	                           jmp 0x40002a8	       139	binary.c	FUNCTION_5	FOR_1
0x4000279	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       140	binary.c	FUNCTION_5	FOR_1	IF_2	CALL_7
0x400027d	           0xfb600	                   movzx eax, byte [rax]	       140	binary.c	FUNCTION_5	FOR_1	IF_2	CALL_7
0x4000280	           0xfbec0	                           movsx eax, al	       140	binary.c	FUNCTION_5	FOR_1	IF_2	CALL_7
0x4000283	           0xfb6c0	                           movzx eax, al	       140	binary.c	FUNCTION_5	FOR_1	IF_2	CALL_7
0x4000286	            0x4898	                                    cdqe	       140	binary.c	FUNCTION_5	FOR_1	IF_2	CALL_7
0x4000288	     0xfb784000000	             movzx eax, word [rax + rax]	       140	binary.c	FUNCTION_5	FOR_1	IF_2	CALL_7
0x4000290	           0xfb7c0	                           movzx eax, ax	       140	binary.c	FUNCTION_5	FOR_1	IF_2	CALL_7
0x4000293	      0x258c000000	                           and eax, 0x8c	       140	binary.c	FUNCTION_5	FOR_1	IF_2	CALL_7
0x4000298	            0x85c0	                           test eax, eax	       140	binary.c	FUNCTION_5	FOR_1	IF_2	CALL_7
0x400029a	            0x7507	                           jne 0x40002a3	       140	binary.c	FUNCTION_5	FOR_1	IF_2	CALL_7
0x400029c	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       141	binary.c	FUNCTION_5	FOR_1	IF_2
0x40002a0	          0xc6005f	                    mov byte [rax], 0x5f	       141	binary.c	FUNCTION_5	FOR_1	IF_2
0x40002a3	      0x488345d801	               add qword [rbp - 0x28], 1	       139	binary.c	FUNCTION_5	FOR_1
0x40002a8	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       139	binary.c	FUNCTION_5	FOR_1
0x40002ac	           0xfb600	                   movzx eax, byte [rax]	       139	binary.c	FUNCTION_5	FOR_1
0x40002af	            0x84c0	                             test al, al	       139	binary.c	FUNCTION_5	FOR_1
0x40002b1	            0x75c6	                           jne 0x4000279	       139	binary.c	FUNCTION_5	FOR_1
0x40002b3	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       143	binary.c	FUNCTION_5
0x40002b7	        0x4883c438	                           add rsp, 0x38	       144	binary.c	FUNCTION_5
0x40002bb	              0x5b	                                 pop rbx	       144	binary.c	FUNCTION_5
0x40002bc	              0x5d	                                 pop rbp	       144	binary.c	FUNCTION_5
0x40002bd	              0xc3	                                     ret	       144	binary.c	FUNCTION_5
binary_canonicalize_symtab	FOR,1:DO,0:WHILE,0:ELSE,0:functions,0:CALL,4:SWITCH,0:IF,1	109
0x40002be	              0x55	                                push rbp	       150	binary.c	FUNCTION_6
0x40002bf	          0x4889e5	                            mov rbp, rsp	       150	binary.c	FUNCTION_6
0x40002c2	              0x53	                                push rbx	       150	binary.c	FUNCTION_6
0x40002c3	        0x4883ec38	                           sub rsp, 0x38	       150	binary.c	FUNCTION_6
0x40002c7	        0x48897dc8	             mov qword [rbp - 0x38], rdi	       150	binary.c	FUNCTION_6
0x40002cb	        0x488975c0	             mov qword [rbp - 0x40], rsi	       150	binary.c	FUNCTION_6
0x40002cf	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       151	binary.c	FUNCTION_6
0x40002d3	    0x488b80f80000	            mov rax, qword [rax + 0xf8] 	       151	binary.c	FUNCTION_6
0x40002da	        0x488945e0	             mov qword [rbp - 0x20], rax	       151	binary.c	FUNCTION_6
0x40002de	    0x48c745e89000	           mov qword [rbp - 0x18], 0x90 	       154	binary.c	FUNCTION_6
0x40002e6	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       156	binary.c	FUNCTION_6	CALL_1
0x40002ea	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       156	binary.c	FUNCTION_6	CALL_1
0x40002ee	          0x4889d6	                            mov rsi, rdx	       156	binary.c	FUNCTION_6	CALL_1
0x40002f1	          0x4889c7	                            mov rdi, rax	       156	binary.c	FUNCTION_6	CALL_1
0x40002f4	      0xe800000000	                          call 0x40002f9	       156	binary.c	FUNCTION_6	CALL_1
0x40002f9	        0x488945d8	             mov qword [rbp - 0x28], rax	       156	binary.c	FUNCTION_6	CALL_1
0x40002fd	      0x48837dd800	               cmp qword [rbp - 0x28], 0	       157	binary.c	FUNCTION_6	IF_1
0x4000302	            0x750c	                           jne 0x4000310	       157	binary.c	FUNCTION_6	IF_1
0x4000304	    0x48c7c0ffffff	             mov rax, 0xffffffffffffffff	       158	binary.c	FUNCTION_6	IF_1
0x400030b	      0xe972010000	                           jmp 0x4000482	       158	binary.c	FUNCTION_6	IF_1
0x4000310	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       161	binary.c	FUNCTION_6
0x4000314	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	       161	binary.c	FUNCTION_6
0x4000318	          0x488910	                    mov qword [rax], rdx	       161	binary.c	FUNCTION_6
0x400031b	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       162	binary.c	FUNCTION_6	CALL_2
0x400031f	      0xbe00000000	                              mov esi, 0	       162	binary.c	FUNCTION_6	CALL_2
0x4000324	          0x4889c7	                            mov rdi, rax	       162	binary.c	FUNCTION_6	CALL_2
0x4000327	      0xe8c3feffff	                    call sym.mangle_name	       162	binary.c	FUNCTION_6	CALL_2
0x400032c	          0x4889c2	                            mov rdx, rax	       162	binary.c	FUNCTION_6	CALL_2
0x400032f	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       162	binary.c	FUNCTION_6	CALL_2
0x4000333	        0x48895008	                mov qword [rax + 8], rdx	       162	binary.c	FUNCTION_6	CALL_2
0x4000337	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       163	binary.c	FUNCTION_6
0x400033b	    0x48c740100000	               mov qword [rax + 0x10], 0	       163	binary.c	FUNCTION_6
0x4000343	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       164	binary.c	FUNCTION_6
0x4000347	    0xc74018020000	               mov dword [rax + 0x18], 2	       164	binary.c	FUNCTION_6
0x400034e	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       165	binary.c	FUNCTION_6
0x4000352	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       165	binary.c	FUNCTION_6
0x4000356	        0x48895020	             mov qword [rax + 0x20], rdx	       165	binary.c	FUNCTION_6
0x400035a	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       166	binary.c	FUNCTION_6
0x400035e	    0x48c740280000	               mov qword [rax + 0x28], 0	       166	binary.c	FUNCTION_6
0x4000366	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       169	binary.c	FUNCTION_6
0x400036a	        0x488d5030	                   lea rdx, [rax + 0x30]	       169	binary.c	FUNCTION_6
0x400036e	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       169	binary.c	FUNCTION_6
0x4000372	          0x488902	                    mov qword [rdx], rax	       169	binary.c	FUNCTION_6
0x4000375	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       170	binary.c	FUNCTION_6	CALL_3
0x4000379	        0x488d5830	                   lea rbx, [rax + 0x30]	       170	binary.c	FUNCTION_6	CALL_3
0x400037d	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       170	binary.c	FUNCTION_6	CALL_3
0x4000381	      0xbe00000000	                              mov esi, 0	       170	binary.c	FUNCTION_6	CALL_3
0x4000386	          0x4889c7	                            mov rdi, rax	       170	binary.c	FUNCTION_6	CALL_3
0x4000389	      0xe861feffff	                    call sym.mangle_name	       170	binary.c	FUNCTION_6	CALL_3
0x400038e	        0x48894308	                mov qword [rbx + 8], rax	       170	binary.c	FUNCTION_6	CALL_3
0x4000392	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       171	binary.c	FUNCTION_6
0x4000396	        0x488d5030	                   lea rdx, [rax + 0x30]	       171	binary.c	FUNCTION_6
0x400039a	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       171	binary.c	FUNCTION_6
0x400039e	        0x488b4038	            mov rax, qword [rax + 0x38] 	       171	binary.c	FUNCTION_6
0x40003a2	        0x48894210	             mov qword [rdx + 0x10], rax	       171	binary.c	FUNCTION_6
0x40003a6	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       172	binary.c	FUNCTION_6
0x40003aa	        0x4883c030	                           add rax, 0x30	       172	binary.c	FUNCTION_6
0x40003ae	    0xc74018020000	               mov dword [rax + 0x18], 2	       172	binary.c	FUNCTION_6
0x40003b5	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       173	binary.c	FUNCTION_6
0x40003b9	        0x488d5030	                   lea rdx, [rax + 0x30]	       173	binary.c	FUNCTION_6
0x40003bd	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       173	binary.c	FUNCTION_6
0x40003c1	        0x48894220	             mov qword [rdx + 0x20], rax	       173	binary.c	FUNCTION_6
0x40003c5	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       174	binary.c	FUNCTION_6
0x40003c9	        0x4883c030	                           add rax, 0x30	       174	binary.c	FUNCTION_6
0x40003cd	    0x48c740280000	               mov qword [rax + 0x28], 0	       174	binary.c	FUNCTION_6
0x40003d5	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       177	binary.c	FUNCTION_6
0x40003d9	        0x488d5060	                   lea rdx, [rax + 0x60]	       177	binary.c	FUNCTION_6
0x40003dd	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       177	binary.c	FUNCTION_6
0x40003e1	          0x488902	                    mov qword [rdx], rax	       177	binary.c	FUNCTION_6
0x40003e4	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       178	binary.c	FUNCTION_6	CALL_4
0x40003e8	        0x488d5860	                   lea rbx, [rax + 0x60]	       178	binary.c	FUNCTION_6	CALL_4
0x40003ec	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       178	binary.c	FUNCTION_6	CALL_4
0x40003f0	      0xbe00000000	                              mov esi, 0	       178	binary.c	FUNCTION_6	CALL_4
0x40003f5	          0x4889c7	                            mov rdi, rax	       178	binary.c	FUNCTION_6	CALL_4
0x40003f8	      0xe8f2fdffff	                    call sym.mangle_name	       178	binary.c	FUNCTION_6	CALL_4
0x40003fd	        0x48894308	                mov qword [rbx + 8], rax	       178	binary.c	FUNCTION_6	CALL_4
0x4000401	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       179	binary.c	FUNCTION_6
0x4000405	        0x488d5060	                   lea rdx, [rax + 0x60]	       179	binary.c	FUNCTION_6
0x4000409	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       179	binary.c	FUNCTION_6
0x400040d	        0x488b4038	            mov rax, qword [rax + 0x38] 	       179	binary.c	FUNCTION_6
0x4000411	        0x48894210	             mov qword [rdx + 0x10], rax	       179	binary.c	FUNCTION_6
0x4000415	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       180	binary.c	FUNCTION_6
0x4000419	        0x4883c060	                           add rax, 0x60	       180	binary.c	FUNCTION_6
0x400041d	    0xc74018020000	               mov dword [rax + 0x18], 2	       180	binary.c	FUNCTION_6
0x4000424	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       181	binary.c	FUNCTION_6
0x4000428	        0x4883c060	                           add rax, 0x60	       181	binary.c	FUNCTION_6
0x400042c	    0x48c740200000	               mov qword [rax + 0x20], 0	       181	binary.c	FUNCTION_6
0x4000434	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       182	binary.c	FUNCTION_6
0x4000438	        0x4883c060	                           add rax, 0x60	       182	binary.c	FUNCTION_6
0x400043c	    0x48c740280000	               mov qword [rax + 0x28], 0	       182	binary.c	FUNCTION_6
0x4000444	    0xc745d4000000	               mov dword [rbp - 0x2c], 0	       184	binary.c	FUNCTION_6	FOR_1
0x400044b	            0xeb1f	                           jmp 0x400046c	       184	binary.c	FUNCTION_6	FOR_1
0x400044d	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       185	binary.c	FUNCTION_6	FOR_1
0x4000451	        0x488d5008	                      lea rdx, [rax + 8]	       185	binary.c	FUNCTION_6	FOR_1
0x4000455	        0x488955c0	             mov qword [rbp - 0x40], rdx	       185	binary.c	FUNCTION_6	FOR_1
0x4000459	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       185	binary.c	FUNCTION_6	FOR_1
0x400045d	        0x488d4a30	                   lea rcx, [rdx + 0x30]	       185	binary.c	FUNCTION_6	FOR_1
0x4000461	        0x48894dd8	             mov qword [rbp - 0x28], rcx	       185	binary.c	FUNCTION_6	FOR_1
0x4000465	          0x488910	                    mov qword [rax], rdx	       185	binary.c	FUNCTION_6	FOR_1
0x4000468	        0x8345d401	               add dword [rbp - 0x2c], 1	       184	binary.c	FUNCTION_6	FOR_1
0x400046c	        0x837dd402	               cmp dword [rbp - 0x2c], 2	       184	binary.c	FUNCTION_6	FOR_1
0x4000470	            0x76db	                           jbe 0x400044d	       184	binary.c	FUNCTION_6	FOR_1
0x4000472	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       186	binary.c	FUNCTION_6
0x4000476	    0x48c700000000	                      mov qword [rax], 0	       186	binary.c	FUNCTION_6
0x400047d	      0xb803000000	                              mov eax, 3	       188	binary.c	FUNCTION_6
0x4000482	        0x4883c438	                           add rsp, 0x38	       189	binary.c	FUNCTION_6
0x4000486	              0x5b	                                 pop rbx	       189	binary.c	FUNCTION_6
0x4000487	              0x5d	                                 pop rbp	       189	binary.c	FUNCTION_6
0x4000488	              0xc3	                                     ret	       189	binary.c	FUNCTION_6
