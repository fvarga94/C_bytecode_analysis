parse_coff_type	FOR,1:DO,0:functions,0:SWITCH,0:IF,8:CALL,16:WHILE,0:ELSE,5	252
0x4000124	              0x55	                                push rbp	       145	rdcoff.c	FUNCTION_2
0x4000125	          0x4889e5	                            mov rbp, rsp	       145	rdcoff.c	FUNCTION_2
0x4000128	              0x53	                                push rbx	       145	rdcoff.c	FUNCTION_2
0x4000129	        0x4883ec68	                           sub rsp, 0x68	       145	rdcoff.c	FUNCTION_2
0x400012d	        0x48897db8	             mov qword [rbp - 0x48], rdi	       145	rdcoff.c	FUNCTION_2
0x4000131	        0x488975b0	             mov qword [rbp - 0x50], rsi	       145	rdcoff.c	FUNCTION_2
0x4000135	        0x488955a8	             mov qword [rbp - 0x58], rdx	       145	rdcoff.c	FUNCTION_2
0x4000139	        0x48894da0	             mov qword [rbp - 0x60], rcx	       145	rdcoff.c	FUNCTION_2
0x400013d	        0x4489459c	             mov dword [rbp - 0x64], r8d	       145	rdcoff.c	FUNCTION_2
0x4000141	        0x4c894d90	              mov qword [rbp - 0x70], r9	       145	rdcoff.c	FUNCTION_2
0x4000145	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       148	rdcoff.c	FUNCTION_2	IF_1
0x4000149	    0x488b80f80000	            mov rax, qword [rax + 0xf8] 	       148	rdcoff.c	FUNCTION_2	IF_1
0x4000150	          0x8b4038	            mov eax, dword [rax + 0x38] 	       148	rdcoff.c	FUNCTION_2	IF_1
0x4000153	            0xf7d0	                                 not eax	       148	rdcoff.c	FUNCTION_2	IF_1
0x4000155	            0x89c2	                            mov edx, eax	       148	rdcoff.c	FUNCTION_2	IF_1
0x4000157	          0x8b459c	             mov eax, dword [rbp - 0x64]	       148	rdcoff.c	FUNCTION_2	IF_1
0x400015a	            0x21d0	                            and eax, edx	       148	rdcoff.c	FUNCTION_2	IF_1
0x400015c	            0x85c0	                           test eax, eax	       148	rdcoff.c	FUNCTION_2	IF_1
0x400015e	     0xf84b9020000	                            je 0x400041d	       148	rdcoff.c	FUNCTION_2	IF_1
0x4000164	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       152	rdcoff.c	FUNCTION_2	IF_1	CALL_1
0x4000168	    0x488b80f80000	            mov rax, qword [rax + 0xf8] 	       152	rdcoff.c	FUNCTION_2	IF_1	CALL_1
0x400016f	          0x8b4044	            mov eax, dword [rax + 0x44] 	       152	rdcoff.c	FUNCTION_2	IF_1	CALL_1
0x4000172	          0x8b559c	             mov edx, dword [rbp - 0x64]	       152	rdcoff.c	FUNCTION_2	IF_1	CALL_1
0x4000175	            0x89c1	                            mov ecx, eax	       152	rdcoff.c	FUNCTION_2	IF_1	CALL_1
0x4000177	            0xd3fa	                             sar edx, cl	       152	rdcoff.c	FUNCTION_2	IF_1	CALL_1
0x4000179	            0x89d0	                            mov eax, edx	       152	rdcoff.c	FUNCTION_2	IF_1	CALL_1
0x400017b	            0x89c2	                            mov edx, eax	       152	rdcoff.c	FUNCTION_2	IF_1	CALL_1
0x400017d	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       152	rdcoff.c	FUNCTION_2	IF_1	CALL_1
0x4000181	    0x488b80f80000	            mov rax, qword [rax + 0xf8] 	       152	rdcoff.c	FUNCTION_2	IF_1	CALL_1
0x4000188	          0x8b4038	            mov eax, dword [rax + 0x38] 	       152	rdcoff.c	FUNCTION_2	IF_1	CALL_1
0x400018b	            0xf7d0	                                 not eax	       152	rdcoff.c	FUNCTION_2	IF_1	CALL_1
0x400018d	            0x89d1	                            mov ecx, edx	       152	rdcoff.c	FUNCTION_2	IF_1	CALL_1
0x400018f	            0x21c1	                            and ecx, eax	       152	rdcoff.c	FUNCTION_2	IF_1	CALL_1
0x4000191	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       152	rdcoff.c	FUNCTION_2	IF_1	CALL_1
0x4000195	    0x488b80f80000	            mov rax, qword [rax + 0xf8] 	       152	rdcoff.c	FUNCTION_2	IF_1	CALL_1
0x400019c	          0x8b5038	            mov edx, dword [rax + 0x38] 	       152	rdcoff.c	FUNCTION_2	IF_1	CALL_1
0x400019f	          0x8b459c	             mov eax, dword [rbp - 0x64]	       152	rdcoff.c	FUNCTION_2	IF_1	CALL_1
0x40001a2	            0x21d0	                            and eax, edx	       152	rdcoff.c	FUNCTION_2	IF_1	CALL_1
0x40001a4	             0x9c8	                             or eax, ecx	       152	rdcoff.c	FUNCTION_2	IF_1	CALL_1
0x40001a6	          0x8945d4	             mov dword [rbp - 0x2c], eax	       152	rdcoff.c	FUNCTION_2	IF_1	CALL_1
0x40001a9	          0x8b459c	             mov eax, dword [rbp - 0x64]	       154	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_2
0x40001ac	          0x4863d0	                         movsxd rdx, eax	       154	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_2
0x40001af	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       154	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_2
0x40001b3	    0x488b80f80000	            mov rax, qword [rax + 0xf8] 	       154	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_2
0x40001ba	          0x8b4040	            mov eax, dword [rax + 0x40] 	       154	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_2
0x40001bd	            0x89c0	                            mov eax, eax	       154	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_2
0x40001bf	          0x4821c2	                            and rdx, rax	       154	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_2
0x40001c2	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       154	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_2
0x40001c6	    0x488b80f80000	            mov rax, qword [rax + 0xf8] 	       154	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_2
0x40001cd	          0x8b403c	            mov eax, dword [rax + 0x3c] 	       154	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_2
0x40001d0	      0xbe01000000	                              mov esi, 1	       154	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_2
0x40001d5	            0x89c1	                            mov ecx, eax	       154	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_2
0x40001d7	          0x48d3e6	                             shl rsi, cl	       154	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_2
0x40001da	          0x4889f0	                            mov rax, rsi	       154	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_2
0x40001dd	          0x4839c2	                            cmp rdx, rax	       154	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_2
0x40001e0	            0x754b	                           jne 0x400022d	       154	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_2
0x40001e2	        0x4c8b4d90	              mov r9, qword [rbp - 0x70]	       156	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_3
0x40001e6	        0x448b45d4	             mov r8d, dword [rbp - 0x2c]	       156	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_3
0x40001ea	        0x488b4da0	             mov rcx, qword [rbp - 0x60]	       156	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_3
0x40001ee	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	       156	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_3
0x40001f2	        0x488b75b0	             mov rsi, qword [rbp - 0x50]	       156	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_3
0x40001f6	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       156	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_3
0x40001fa	          0xff7518	                 push qword [rbp + 0x18]	       156	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_3
0x40001fd	          0x8b7d10	            mov edi, dword [rbp + 0x10] 	       156	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_3
0x4000200	              0x57	                                push rdi	       156	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_3
0x4000201	          0x4889c7	                            mov rdi, rax	       156	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_3
0x4000204	      0xe81bffffff	                call sym.parse_coff_type	       156	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_3
0x4000209	        0x4883c410	                           add rsp, 0x10	       156	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_3
0x400020d	        0x488945d8	             mov qword [rbp - 0x28], rax	       156	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_3
0x4000211	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       158	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_4
0x4000215	        0x488b4518	            mov rax, qword [rbp + 0x18] 	       158	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_4
0x4000219	          0x4889d6	                            mov rsi, rdx	       158	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_4
0x400021c	          0x4889c7	                            mov rdi, rax	       158	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_4
0x400021f	      0xe800000000	                          call 0x4000224	       158	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_4
0x4000224	        0x488945d8	             mov qword [rbp - 0x28], rax	       158	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_4
0x4000228	      0xe9e7010000	                           jmp 0x4000414	       158	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_4
0x400022d	          0x8b459c	             mov eax, dword [rbp - 0x64]	       160	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_5
0x4000230	          0x4863d0	                         movsxd rdx, eax	       160	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_5
0x4000233	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       160	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_5
0x4000237	    0x488b80f80000	            mov rax, qword [rax + 0xf8] 	       160	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_5
0x400023e	          0x8b4040	            mov eax, dword [rax + 0x40] 	       160	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_5
0x4000241	            0x89c0	                            mov eax, eax	       160	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_5
0x4000243	          0x4821c2	                            and rdx, rax	       160	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_5
0x4000246	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       160	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_5
0x400024a	    0x488b80f80000	            mov rax, qword [rax + 0xf8] 	       160	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_5
0x4000251	          0x8b403c	            mov eax, dword [rax + 0x3c] 	       160	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_5
0x4000254	      0xbe02000000	                              mov esi, 2	       160	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_5
0x4000259	            0x89c1	                            mov ecx, eax	       160	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_5
0x400025b	          0x48d3e6	                             shl rsi, cl	       160	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_5
0x400025e	          0x4889f0	                            mov rax, rsi	       160	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_5
0x4000261	          0x4839c2	                            cmp rdx, rax	       160	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_5
0x4000264	            0x7552	                           jne 0x40002b8	       160	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_5
0x4000266	        0x4c8b4d90	              mov r9, qword [rbp - 0x70]	       162	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_6
0x400026a	        0x448b45d4	             mov r8d, dword [rbp - 0x2c]	       162	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_6
0x400026e	        0x488b4da0	             mov rcx, qword [rbp - 0x60]	       162	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_6
0x4000272	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	       162	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_6
0x4000276	        0x488b75b0	             mov rsi, qword [rbp - 0x50]	       162	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_6
0x400027a	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       162	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_6
0x400027e	          0xff7518	                 push qword [rbp + 0x18]	       162	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_6
0x4000281	          0x8b7d10	            mov edi, dword [rbp + 0x10] 	       162	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_6
0x4000284	              0x57	                                push rdi	       162	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_6
0x4000285	          0x4889c7	                            mov rdi, rax	       162	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_6
0x4000288	      0xe897feffff	                call sym.parse_coff_type	       162	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_6
0x400028d	        0x4883c410	                           add rsp, 0x10	       162	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_6
0x4000291	        0x488945d8	             mov qword [rbp - 0x28], rax	       162	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_6
0x4000295	        0x488b75d8	             mov rsi, qword [rbp - 0x28]	       164	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_7
0x4000299	        0x488b4518	            mov rax, qword [rbp + 0x18] 	       164	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_7
0x400029d	      0xb900000000	                              mov ecx, 0	       164	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_7
0x40002a2	      0xba00000000	                              mov edx, 0	       164	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_7
0x40002a7	          0x4889c7	                            mov rdi, rax	       164	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_7
0x40002aa	      0xe800000000	                          call 0x40002af	       164	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_7
0x40002af	        0x488945d8	             mov qword [rbp - 0x28], rax	       164	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_7
0x40002b3	      0xe95c010000	                           jmp 0x4000414	       164	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_7
0x40002b8	          0x8b459c	             mov eax, dword [rbp - 0x64]	       167	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_8
0x40002bb	          0x4863d0	                         movsxd rdx, eax	       167	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_8
0x40002be	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       167	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_8
0x40002c2	    0x488b80f80000	            mov rax, qword [rax + 0xf8] 	       167	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_8
0x40002c9	          0x8b4040	            mov eax, dword [rax + 0x40] 	       167	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_8
0x40002cc	            0x89c0	                            mov eax, eax	       167	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_8
0x40002ce	          0x4821c2	                            and rdx, rax	       167	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_8
0x40002d1	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       167	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_8
0x40002d5	    0x488b80f80000	            mov rax, qword [rax + 0xf8] 	       167	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_8
0x40002dc	          0x8b403c	            mov eax, dword [rax + 0x3c] 	       167	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_8
0x40002df	      0xbe03000000	                              mov esi, 3	       167	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_8
0x40002e4	            0x89c1	                            mov ecx, eax	       167	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_8
0x40002e6	          0x48d3e6	                             shl rsi, cl	       167	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_8
0x40002e9	          0x4889f0	                            mov rax, rsi	       167	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_8
0x40002ec	          0x4839c2	                            cmp rdx, rax	       167	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_8
0x40002ef	     0xf85f6000000	                           jne 0x40003eb	       167	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_8
0x40002f5	      0x48837d9000	               cmp qword [rbp - 0x70], 0	       171	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	IF_5
0x40002fa	            0x7509	                           jne 0x4000305	       171	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	IF_5
0x40002fc	    0xc745cc000000	               mov dword [rbp - 0x34], 0	       172	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	IF_5
0x4000303	            0xeb55	                           jmp 0x400035a	       172	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	IF_5
0x4000305	        0x488b4590	             mov rax, qword [rbp - 0x70]	       183	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3
0x4000309	        0x4883c010	                           add rax, 0x10	       183	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3
0x400030d	        0x488945e0	             mov qword [rbp - 0x20], rax	       183	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3
0x4000311	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       184	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3
0x4000315	           0xfb700	                   movzx eax, word [rax]	       184	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3
0x4000318	           0xfb7c0	                           movzx eax, ax	       184	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3
0x400031b	          0x8945cc	             mov dword [rbp - 0x34], eax	       184	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3
0x400031e	    0xc745d0000000	               mov dword [rbp - 0x30], 0	       185	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x4000325	            0xeb18	                           jmp 0x400033f	       185	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x4000327	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       186	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x400032b	         0xfb75002	               movzx edx, word [rax + 2]	       186	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x400032f	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       186	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x4000333	          0x668910	                      mov word [rax], dx	       186	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x4000336	        0x8345d001	               add dword [rbp - 0x30], 1	       185	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x400033a	      0x488345e002	               add qword [rbp - 0x20], 2	       185	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x400033f	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       185	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x4000343	           0xfb700	                   movzx eax, word [rax]	       185	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x4000346	          0x6685c0	                             test ax, ax	       185	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x4000349	            0x7406	                            je 0x4000351	       185	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x400034b	        0x837dd002	               cmp dword [rbp - 0x30], 2	       185	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x400034f	            0x7ed6	                           jle 0x4000327	       185	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x4000351	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       187	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3
0x4000355	      0x66c7000000	                       mov word [rax], 0	       187	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3
0x400035a	        0x4c8b4590	              mov r8, qword [rbp - 0x70]	       190	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_9
0x400035e	          0x8b7dd4	             mov edi, dword [rbp - 0x2c]	       190	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_9
0x4000361	        0x488b4da0	             mov rcx, qword [rbp - 0x60]	       190	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_9
0x4000365	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	       190	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_9
0x4000369	        0x488b75b0	             mov rsi, qword [rbp - 0x50]	       190	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_9
0x400036d	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       190	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_9
0x4000371	          0xff7518	                 push qword [rbp + 0x18]	       190	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_9
0x4000374	            0x6a00	                                  push 0	       190	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_9
0x4000376	          0x4d89c1	                              mov r9, r8	       190	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_9
0x4000379	          0x4189f8	                            mov r8d, edi	       190	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_9
0x400037c	          0x4889c7	                            mov rdi, rax	       190	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_9
0x400037f	      0xe8a0fdffff	                call sym.parse_coff_type	       190	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_9
0x4000384	        0x4883c410	                           add rsp, 0x10	       190	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_9
0x4000388	        0x488945d8	             mov qword [rbp - 0x28], rax	       190	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_9
0x400038c	          0x8b45cc	             mov eax, dword [rbp - 0x34]	       198	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4
0x400038f	          0x83e801	                              sub eax, 1	       198	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4
0x4000392	          0x4863d8	                         movsxd rbx, eax	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x4000395	        0x488b4da0	             mov rcx, qword [rbp - 0x60]	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x4000399	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x400039d	        0x488b75b0	             mov rsi, qword [rbp - 0x50]	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x40003a1	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x40003a5	        0x4883ec08	                              sub rsp, 8	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x40003a9	          0xff7518	                 push qword [rbp + 0x18]	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x40003ac	    0x41b900000000	                              mov r9d, 0	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x40003b2	    0x41b804000000	                              mov r8d, 4	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x40003b8	          0x4889c7	                            mov rdi, rax	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x40003bb	      0xe8fd000000	           call sym.parse_coff_base_type	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x40003c0	        0x4883c410	                           add rsp, 0x10	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x40003c4	          0x4889c2	                            mov rdx, rax	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x40003c7	        0x488b75d8	             mov rsi, qword [rbp - 0x28]	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x40003cb	        0x488b4518	            mov rax, qword [rbp + 0x18] 	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x40003cf	    0x41b900000000	                              mov r9d, 0	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x40003d5	          0x4989d8	                             mov r8, rbx	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x40003d8	      0xb900000000	                              mov ecx, 0	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x40003dd	          0x4889c7	                            mov rdi, rax	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x40003e0	      0xe800000000	                          call 0x40003e5	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x40003e5	        0x488945d8	             mov qword [rbp - 0x28], rax	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x40003e9	            0xeb29	                           jmp 0x4000414	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x40003eb	      0xbf00000000	                              mov edi, 0	       202	rdcoff.c	FUNCTION_2	IF_1	ELSE_4	CALL_13
0x40003f0	      0xe800000000	                          call 0x40003f5	       202	rdcoff.c	FUNCTION_2	IF_1	ELSE_4	CALL_13
0x40003f5	          0x4889c2	                            mov rdx, rax	       202	rdcoff.c	FUNCTION_2	IF_1	ELSE_4	CALL_13
0x40003f8	          0x8b459c	             mov eax, dword [rbp - 0x64]	       202	rdcoff.c	FUNCTION_2	IF_1	ELSE_4	CALL_13
0x40003fb	            0x89c6	                            mov esi, eax	       202	rdcoff.c	FUNCTION_2	IF_1	ELSE_4	CALL_13
0x40003fd	          0x4889d7	                            mov rdi, rdx	       202	rdcoff.c	FUNCTION_2	IF_1	ELSE_4	CALL_13
0x4000400	      0xb800000000	                              mov eax, 0	       202	rdcoff.c	FUNCTION_2	IF_1	ELSE_4	CALL_13
0x4000405	      0xe800000000	                          call 0x400040a	       202	rdcoff.c	FUNCTION_2	IF_1	ELSE_4	CALL_13
0x400040a	      0xb800000000	                              mov eax, 0	       203	rdcoff.c	FUNCTION_2	IF_1	ELSE_4
0x400040f	      0xe9a3000000	                           jmp 0x40004b7	       203	rdcoff.c	FUNCTION_2	IF_1	ELSE_4
0x4000414	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       206	rdcoff.c	FUNCTION_2	IF_1
0x4000418	      0xe99a000000	                           jmp 0x40004b7	       206	rdcoff.c	FUNCTION_2	IF_1
0x400041d	      0x48837d9000	               cmp qword [rbp - 0x70], 0	       209	rdcoff.c	FUNCTION_2	IF_6
0x4000422	            0x7455	                            je 0x4000479	       209	rdcoff.c	FUNCTION_2	IF_6
0x4000424	        0x488b4590	             mov rax, qword [rbp - 0x70]	       209	rdcoff.c	FUNCTION_2	IF_6
0x4000428	          0x488b00	                    mov rax, qword [rax]	       209	rdcoff.c	FUNCTION_2	IF_6
0x400042b	          0x4885c0	                           test rax, rax	       209	rdcoff.c	FUNCTION_2	IF_6
0x400042e	            0x7e49	                           jle 0x4000479	       209	rdcoff.c	FUNCTION_2	IF_6
0x4000430	        0x488b4590	             mov rax, qword [rbp - 0x70]	       215	rdcoff.c	FUNCTION_2	IF_6	CALL_14
0x4000434	          0x488b10	                    mov rdx, qword [rax]	       215	rdcoff.c	FUNCTION_2	IF_6	CALL_14
0x4000437	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       215	rdcoff.c	FUNCTION_2	IF_6	CALL_14
0x400043b	          0x4889d6	                            mov rsi, rdx	       215	rdcoff.c	FUNCTION_2	IF_6	CALL_14
0x400043e	          0x4889c7	                            mov rdi, rax	       215	rdcoff.c	FUNCTION_2	IF_6	CALL_14
0x4000441	      0xe8fafbffff	                  call sym.coff_get_slot	       215	rdcoff.c	FUNCTION_2	IF_6	CALL_14
0x4000446	        0x488945e8	             mov qword [rbp - 0x18], rax	       215	rdcoff.c	FUNCTION_2	IF_6	CALL_14
0x400044a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       216	rdcoff.c	FUNCTION_2	IF_6	IF_7
0x400044e	          0x488b00	                    mov rax, qword [rax]	       216	rdcoff.c	FUNCTION_2	IF_6	IF_7
0x4000451	          0x4885c0	                           test rax, rax	       216	rdcoff.c	FUNCTION_2	IF_6	IF_7
0x4000454	            0x7409	                            je 0x400045f	       216	rdcoff.c	FUNCTION_2	IF_6	IF_7
0x4000456	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       217	rdcoff.c	FUNCTION_2	IF_6	IF_7
0x400045a	          0x488b00	                    mov rax, qword [rax]	       217	rdcoff.c	FUNCTION_2	IF_6	IF_7
0x400045d	            0xeb58	                           jmp 0x40004b7	       217	rdcoff.c	FUNCTION_2	IF_6	IF_7
0x400045f	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	       219	rdcoff.c	FUNCTION_2	IF_6	CALL_15
0x4000463	        0x488b4518	            mov rax, qword [rbp + 0x18] 	       219	rdcoff.c	FUNCTION_2	IF_6	CALL_15
0x4000467	      0xba00000000	                              mov edx, 0	       219	rdcoff.c	FUNCTION_2	IF_6	CALL_15
0x400046c	          0x4889ce	                            mov rsi, rcx	       219	rdcoff.c	FUNCTION_2	IF_6	CALL_15
0x400046f	          0x4889c7	                            mov rdi, rax	       219	rdcoff.c	FUNCTION_2	IF_6	CALL_15
0x4000472	      0xe800000000	                          call 0x4000477	       219	rdcoff.c	FUNCTION_2	IF_6	CALL_15
0x4000477	            0xeb3e	                           jmp 0x40004b7	       219	rdcoff.c	FUNCTION_2	IF_6	CALL_15
0x4000479	        0x837d1000	               cmp dword [rbp + 0x10], 0	       228	rdcoff.c	FUNCTION_2	IF_8
0x400047d	            0x7508	                           jne 0x4000487	       228	rdcoff.c	FUNCTION_2	IF_8
0x400047f	    0x48c745900000	               mov qword [rbp - 0x70], 0	       229	rdcoff.c	FUNCTION_2	IF_8
0x4000487	        0x4c8b4590	              mov r8, qword [rbp - 0x70]	       231	rdcoff.c	FUNCTION_2	CALL_16
0x400048b	          0x8b7d9c	             mov edi, dword [rbp - 0x64]	       231	rdcoff.c	FUNCTION_2	CALL_16
0x400048e	        0x488b4da0	             mov rcx, qword [rbp - 0x60]	       231	rdcoff.c	FUNCTION_2	CALL_16
0x4000492	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	       231	rdcoff.c	FUNCTION_2	CALL_16
0x4000496	        0x488b75b0	             mov rsi, qword [rbp - 0x50]	       231	rdcoff.c	FUNCTION_2	CALL_16
0x400049a	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       231	rdcoff.c	FUNCTION_2	CALL_16
0x400049e	        0x4883ec08	                              sub rsp, 8	       231	rdcoff.c	FUNCTION_2	CALL_16
0x40004a2	          0xff7518	                 push qword [rbp + 0x18]	       231	rdcoff.c	FUNCTION_2	CALL_16
0x40004a5	          0x4d89c1	                              mov r9, r8	       231	rdcoff.c	FUNCTION_2	CALL_16
0x40004a8	          0x4189f8	                            mov r8d, edi	       231	rdcoff.c	FUNCTION_2	CALL_16
0x40004ab	          0x4889c7	                            mov rdi, rax	       231	rdcoff.c	FUNCTION_2	CALL_16
0x40004ae	      0xe80a000000	           call sym.parse_coff_base_type	       231	rdcoff.c	FUNCTION_2	CALL_16
0x40004b3	        0x4883c410	                           add rsp, 0x10	       231	rdcoff.c	FUNCTION_2	CALL_16
0x40004b7	        0x488b5df8	                mov rbx, qword [rbp - 8]	       233	rdcoff.c	FUNCTION_2
0x40004bb	              0xc9	                                   leave	       233	rdcoff.c	FUNCTION_2
0x40004bc	              0xc3	                                     ret	       233	rdcoff.c	FUNCTION_2
parse_coff_enum_type	FOR,0:DO,0:functions,0:SWITCH,1:IF,2:CALL,12:WHILE,1:ELSE,0	157
0x4000cb8	              0x55	                                push rbp	       488	rdcoff.c	FUNCTION_5
0x4000cb9	          0x4889e5	                            mov rbp, rsp	       488	rdcoff.c	FUNCTION_5
0x4000cbc	              0x53	                                push rbx	       488	rdcoff.c	FUNCTION_5
0x4000cbd	    0x4881ec980000	                           sub rsp, 0x98	       488	rdcoff.c	FUNCTION_5
0x4000cc4	        0x48897d88	             mov qword [rbp - 0x78], rdi	       488	rdcoff.c	FUNCTION_5
0x4000cc8	        0x48897580	             mov qword [rbp - 0x80], rsi	       488	rdcoff.c	FUNCTION_5
0x4000ccc	    0x48899578ffff	             mov qword [rbp - 0x88], rdx	       488	rdcoff.c	FUNCTION_5
0x4000cd3	    0x48898d70ffff	             mov qword [rbp - 0x90], rcx	       488	rdcoff.c	FUNCTION_5
0x4000cda	    0x4c898568ffff	              mov qword [rbp - 0x98], r8	       488	rdcoff.c	FUNCTION_5
0x4000ce1	    0x64488b042528	                mov rax, qword fs:[0x28]	       488	rdcoff.c	FUNCTION_5
0x4000cea	        0x488945e8	             mov qword [rbp - 0x18], rax	       488	rdcoff.c	FUNCTION_5
0x4000cee	            0x31c0	                            xor eax, eax	       488	rdcoff.c	FUNCTION_5
0x4000cf0	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       496	rdcoff.c	FUNCTION_5
0x4000cf7	        0x488b4018	            mov rax, qword [rax + 0x18] 	       496	rdcoff.c	FUNCTION_5
0x4000cfb	        0x488945b0	             mov qword [rbp - 0x50], rax	       496	rdcoff.c	FUNCTION_5
0x4000cff	    0xc745940a0000	             mov dword [rbp - 0x6c], 0xa	       498	rdcoff.c	FUNCTION_5
0x4000d06	          0x8b4594	             mov eax, dword [rbp - 0x6c]	       499	rdcoff.c	FUNCTION_5	CALL_1
0x4000d09	            0x4898	                                    cdqe	       499	rdcoff.c	FUNCTION_5	CALL_1
0x4000d0b	        0x48c1e003	                              shl rax, 3	       499	rdcoff.c	FUNCTION_5	CALL_1
0x4000d0f	          0x4889c7	                            mov rdi, rax	       499	rdcoff.c	FUNCTION_5	CALL_1
0x4000d12	      0xe800000000	                          call 0x4000d17	       499	rdcoff.c	FUNCTION_5	CALL_1
0x4000d17	        0x488945a0	             mov qword [rbp - 0x60], rax	       499	rdcoff.c	FUNCTION_5	CALL_1
0x4000d1b	          0x8b4594	             mov eax, dword [rbp - 0x6c]	       500	rdcoff.c	FUNCTION_5	CALL_2
0x4000d1e	            0x4898	                                    cdqe	       500	rdcoff.c	FUNCTION_5	CALL_2
0x4000d20	        0x48c1e003	                              shl rax, 3	       500	rdcoff.c	FUNCTION_5	CALL_2
0x4000d24	          0x4889c7	                            mov rdi, rax	       500	rdcoff.c	FUNCTION_5	CALL_2
0x4000d27	      0xe800000000	                          call 0x4000d2c	       500	rdcoff.c	FUNCTION_5	CALL_2
0x4000d2c	        0x488945a8	             mov qword [rbp - 0x58], rax	       500	rdcoff.c	FUNCTION_5	CALL_2
0x4000d30	    0xc74598000000	               mov dword [rbp - 0x68], 0	       501	rdcoff.c	FUNCTION_5
0x4000d37	    0xc7459c000000	               mov dword [rbp - 0x64], 0	       503	rdcoff.c	FUNCTION_5
0x4000d3e	      0xe962010000	                           jmp 0x4000ea5	       504	rdcoff.c	FUNCTION_5	WHILE_1
0x4000d43	        0x488b4580	             mov rax, qword [rbp - 0x80]	       511	rdcoff.c	FUNCTION_5	WHILE_1
0x4000d47	          0x488b10	                    mov rdx, qword [rax]	       511	rdcoff.c	FUNCTION_5	WHILE_1
0x4000d4a	        0x488b4580	             mov rax, qword [rbp - 0x80]	       511	rdcoff.c	FUNCTION_5	WHILE_1
0x4000d4e	        0x488b4010	            mov rax, qword [rax + 0x10] 	       511	rdcoff.c	FUNCTION_5	WHILE_1
0x4000d52	        0x48c1e003	                              shl rax, 3	       511	rdcoff.c	FUNCTION_5	WHILE_1
0x4000d56	          0x4801d0	                            add rax, rdx	       511	rdcoff.c	FUNCTION_5	WHILE_1
0x4000d59	          0x488b00	                    mov rax, qword [rax]	       511	rdcoff.c	FUNCTION_5	WHILE_1
0x4000d5c	        0x488945b8	             mov qword [rbp - 0x48], rax	       511	rdcoff.c	FUNCTION_5	WHILE_1
0x4000d60	        0x488d55c0	                   lea rdx, [rbp - 0x40]	       513	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_3
0x4000d64	        0x488b4db8	             mov rcx, qword [rbp - 0x48]	       513	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_3
0x4000d68	        0x488b4588	             mov rax, qword [rbp - 0x78]	       513	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_3
0x4000d6c	          0x4889ce	                            mov rsi, rcx	       513	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_3
0x4000d6f	          0x4889c7	                            mov rdi, rax	       513	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_3
0x4000d72	      0xe800000000	                          call 0x4000d77	       513	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_3
0x4000d77	            0x85c0	                           test eax, eax	       513	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_3
0x4000d79	            0x7533	                           jne 0x4000dae	       513	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_3
0x4000d7b	      0xe800000000	                          call 0x4000d80	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x4000d80	            0x89c7	                            mov edi, eax	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x4000d82	      0xe800000000	                          call 0x4000d87	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x4000d87	          0x4889c3	                            mov rbx, rax	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x4000d8a	      0xbf00000000	                              mov edi, 0	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x4000d8f	      0xe800000000	                          call 0x4000d94	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x4000d94	          0x4889de	                            mov rsi, rbx	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x4000d97	          0x4889c7	                            mov rdi, rax	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x4000d9a	      0xb800000000	                              mov eax, 0	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x4000d9f	      0xe800000000	                          call 0x4000da4	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x4000da4	      0xb800000000	                              mov eax, 0	       517	rdcoff.c	FUNCTION_5	WHILE_1	IF_1
0x4000da9	      0xe959010000	                           jmp 0x4000f07	       517	rdcoff.c	FUNCTION_5	WHILE_1	IF_1
0x4000dae	        0x488b4580	             mov rax, qword [rbp - 0x80]	       520	rdcoff.c	FUNCTION_5	WHILE_1
0x4000db2	        0x488b4010	            mov rax, qword [rax + 0x10] 	       520	rdcoff.c	FUNCTION_5	WHILE_1
0x4000db6	        0x488d5001	                      lea rdx, [rax + 1]	       520	rdcoff.c	FUNCTION_5	WHILE_1
0x4000dba	        0x488b4580	             mov rax, qword [rbp - 0x80]	       520	rdcoff.c	FUNCTION_5	WHILE_1
0x4000dbe	        0x48895010	             mov qword [rax + 0x10], rdx	       520	rdcoff.c	FUNCTION_5	WHILE_1
0x4000dc2	        0x488b4580	             mov rax, qword [rbp - 0x80]	       521	rdcoff.c	FUNCTION_5	WHILE_1
0x4000dc6	        0x488b5018	            mov rdx, qword [rax + 0x18] 	       521	rdcoff.c	FUNCTION_5	WHILE_1
0x4000dca	         0xfb645e1	            movzx eax, byte [rbp - 0x1f]	       521	rdcoff.c	FUNCTION_5	WHILE_1
0x4000dce	           0xfb6c0	                           movzx eax, al	       521	rdcoff.c	FUNCTION_5	WHILE_1
0x4000dd1	          0x83c001	                              add eax, 1	       521	rdcoff.c	FUNCTION_5	WHILE_1
0x4000dd4	            0x4898	                                    cdqe	       521	rdcoff.c	FUNCTION_5	WHILE_1
0x4000dd6	          0x4801c2	                            add rdx, rax	       521	rdcoff.c	FUNCTION_5	WHILE_1
0x4000dd9	        0x488b4580	             mov rax, qword [rbp - 0x80]	       521	rdcoff.c	FUNCTION_5	WHILE_1
0x4000ddd	        0x48895018	             mov qword [rax + 0x18], rdx	       521	rdcoff.c	FUNCTION_5	WHILE_1
0x4000de1	         0xfb645e0	            movzx eax, byte [rbp - 0x20]	       523	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1
0x4000de5	           0xfb6c0	                           movzx eax, al	       523	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1
0x4000de8	          0x83f810	                           cmp eax, 0x10	       523	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1
0x4000deb	            0x740e	                            je 0x4000dfb	       523	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1
0x4000ded	          0x83f866	                           cmp eax, 0x66	       523	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1
0x4000df0	     0xf84a7000000	                            je 0x4000e9d	       523	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1
0x4000df6	      0xe9aa000000	                           jmp 0x4000ea5	       523	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1
0x4000dfb	          0x8b4598	             mov eax, dword [rbp - 0x68]	       526	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x4000dfe	          0x83c001	                              add eax, 1	       526	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x4000e01	          0x3b4594	             cmp eax, dword [rbp - 0x6c]	       526	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x4000e04	            0x7c44	                            jl 0x4000e4a	       526	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x4000e06	        0x8345940a	             add dword [rbp - 0x6c], 0xa	       528	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x4000e0a	          0x8b4594	             mov eax, dword [rbp - 0x6c]	       530	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2	CALL_8
0x4000e0d	            0x4898	                                    cdqe	       530	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2	CALL_8
0x4000e0f	    0x488d14c50000	                        lea rdx, [rax*8]	       530	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2	CALL_8
0x4000e17	        0x488b45a0	             mov rax, qword [rbp - 0x60]	       529	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x4000e1b	          0x4889d6	                            mov rsi, rdx	       529	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x4000e1e	          0x4889c7	                            mov rdi, rax	       529	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x4000e21	      0xe800000000	                          call 0x4000e26	       529	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x4000e26	        0x488945a0	             mov qword [rbp - 0x60], rax	       529	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x4000e2a	          0x8b4594	             mov eax, dword [rbp - 0x6c]	       532	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2	CALL_9
0x4000e2d	            0x4898	                                    cdqe	       532	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2	CALL_9
0x4000e2f	    0x488d14c50000	                        lea rdx, [rax*8]	       532	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2	CALL_9
0x4000e37	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       531	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x4000e3b	          0x4889d6	                            mov rsi, rdx	       531	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x4000e3e	          0x4889c7	                            mov rdi, rax	       531	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x4000e41	      0xe800000000	                          call 0x4000e46	       531	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x4000e46	        0x488945a8	             mov qword [rbp - 0x58], rax	       531	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x4000e4a	          0x8b4598	             mov eax, dword [rbp - 0x68]	       535	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_10
0x4000e4d	            0x4898	                                    cdqe	       535	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_10
0x4000e4f	    0x488d14c50000	                        lea rdx, [rax*8]	       535	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_10
0x4000e57	        0x488b45a0	             mov rax, qword [rbp - 0x60]	       535	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_10
0x4000e5b	          0x4801c2	                            add rdx, rax	       535	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_10
0x4000e5e	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       535	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_10
0x4000e62	        0x488b4008	                mov rax, qword [rax + 8]	       535	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_10
0x4000e66	          0x488902	                    mov qword [rdx], rax	       535	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_10
0x4000e69	          0x8b4598	             mov eax, dword [rbp - 0x68]	       536	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_11
0x4000e6c	            0x4898	                                    cdqe	       536	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_11
0x4000e6e	    0x488d14c50000	                        lea rdx, [rax*8]	       536	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_11
0x4000e76	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       536	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_11
0x4000e7a	          0x4801c2	                            add rdx, rax	       536	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_11
0x4000e7d	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       536	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_11
0x4000e81	        0x488b4020	            mov rax, qword [rax + 0x20] 	       536	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_11
0x4000e85	        0x488b4828	            mov rcx, qword [rax + 0x28] 	       536	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_11
0x4000e89	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       536	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_11
0x4000e8d	        0x488b4010	            mov rax, qword [rax + 0x10] 	       536	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_11
0x4000e91	          0x4801c8	                            add rax, rcx	       536	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_11
0x4000e94	          0x488902	                    mov qword [rdx], rax	       536	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_11
0x4000e97	        0x83459801	               add dword [rbp - 0x68], 1	       537	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1
0x4000e9b	            0xeb08	                           jmp 0x4000ea5	       538	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1
0x4000e9d	    0xc7459c010000	               mov dword [rbp - 0x64], 1	       541	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1
0x4000ea4	              0x90	                                     nop	       542	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1
0x4000ea5	        0x837d9c00	               cmp dword [rbp - 0x64], 0	       504	rdcoff.c	FUNCTION_5	WHILE_1
0x4000ea9	            0x7527	                           jne 0x4000ed2	       504	rdcoff.c	FUNCTION_5	WHILE_1
0x4000eab	        0x488b4580	             mov rax, qword [rbp - 0x80]	       505	rdcoff.c	FUNCTION_5	WHILE_1
0x4000eaf	        0x488b4018	            mov rax, qword [rax + 0x18] 	       505	rdcoff.c	FUNCTION_5	WHILE_1
0x4000eb3	        0x483b45b0	             cmp rax, qword [rbp - 0x50]	       505	rdcoff.c	FUNCTION_5	WHILE_1
0x4000eb7	            0x7d19	                           jge 0x4000ed2	       505	rdcoff.c	FUNCTION_5	WHILE_1
0x4000eb9	        0x488b4580	             mov rax, qword [rbp - 0x80]	       506	rdcoff.c	FUNCTION_5	WHILE_1
0x4000ebd	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       506	rdcoff.c	FUNCTION_5	WHILE_1
0x4000ec1	        0x488b4580	             mov rax, qword [rbp - 0x80]	       506	rdcoff.c	FUNCTION_5	WHILE_1
0x4000ec5	        0x488b4008	                mov rax, qword [rax + 8]	       506	rdcoff.c	FUNCTION_5	WHILE_1
0x4000ec9	          0x4839c2	                            cmp rdx, rax	       506	rdcoff.c	FUNCTION_5	WHILE_1
0x4000ecc	     0xf8c71feffff	                            jl 0x4000d43	       506	rdcoff.c	FUNCTION_5	WHILE_1
0x4000ed2	          0x8b4598	             mov eax, dword [rbp - 0x68]	       546	rdcoff.c	FUNCTION_5
0x4000ed5	            0x4898	                                    cdqe	       546	rdcoff.c	FUNCTION_5
0x4000ed7	    0x488d14c50000	                        lea rdx, [rax*8]	       546	rdcoff.c	FUNCTION_5
0x4000edf	        0x488b45a0	             mov rax, qword [rbp - 0x60]	       546	rdcoff.c	FUNCTION_5
0x4000ee3	          0x4801d0	                            add rax, rdx	       546	rdcoff.c	FUNCTION_5
0x4000ee6	    0x48c700000000	                      mov qword [rax], 0	       546	rdcoff.c	FUNCTION_5
0x4000eed	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	       548	rdcoff.c	FUNCTION_5	CALL_12
0x4000ef1	        0x488b4da0	             mov rcx, qword [rbp - 0x60]	       548	rdcoff.c	FUNCTION_5	CALL_12
0x4000ef5	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	       548	rdcoff.c	FUNCTION_5	CALL_12
0x4000efc	          0x4889ce	                            mov rsi, rcx	       548	rdcoff.c	FUNCTION_5	CALL_12
0x4000eff	          0x4889c7	                            mov rdi, rax	       548	rdcoff.c	FUNCTION_5	CALL_12
0x4000f02	      0xe800000000	                          call 0x4000f07	       548	rdcoff.c	FUNCTION_5	CALL_12
0x4000f07	        0x488b5de8	             mov rbx, qword [rbp - 0x18]	       549	rdcoff.c	FUNCTION_5
0x4000f0b	    0x6448331c2528	                xor rbx, qword fs:[0x28]	       549	rdcoff.c	FUNCTION_5
0x4000f14	            0x7405	                            je 0x4000f1b	       549	rdcoff.c	FUNCTION_5
0x4000f16	      0xe800000000	                          call 0x4000f1b	       549	rdcoff.c	FUNCTION_5
0x4000f1b	    0x4881c4980000	                           add rsp, 0x98	       549	rdcoff.c	FUNCTION_5
0x4000f22	              0x5b	                                 pop rbx	       549	rdcoff.c	FUNCTION_5
0x4000f23	              0x5d	                                 pop rbp	       549	rdcoff.c	FUNCTION_5
0x4000f24	              0xc3	                                     ret	       549	rdcoff.c	FUNCTION_5
external_coff_symbol_p	FOR,0:DO,0:functions,0:SWITCH,1:IF,0:CALL,0:WHILE,0:ELSE,0	14
0x40011c6	              0x55	                                push rbp	       643	rdcoff.c	FUNCTION_7
0x40011c7	          0x4889e5	                            mov rbp, rsp	       643	rdcoff.c	FUNCTION_7
0x40011ca	          0x897dfc	                mov dword [rbp - 4], edi	       643	rdcoff.c	FUNCTION_7
0x40011cd	          0x8b45fc	                mov eax, dword [rbp - 4]	       644	rdcoff.c	FUNCTION_7	SWITCH_1
0x40011d0	          0x83f802	                              cmp eax, 2	       644	rdcoff.c	FUNCTION_7	SWITCH_1
0x40011d3	            0x740d	                            je 0x40011e2	       644	rdcoff.c	FUNCTION_7	SWITCH_1
0x40011d5	          0x83f87f	                           cmp eax, 0x7f	       644	rdcoff.c	FUNCTION_7	SWITCH_1
0x40011d8	            0x7408	                            je 0x40011e2	       644	rdcoff.c	FUNCTION_7	SWITCH_1
0x40011da	              0x90	                                     nop	       650	rdcoff.c	FUNCTION_7	SWITCH_1
0x40011db	      0xb800000000	                              mov eax, 0	       652	rdcoff.c	FUNCTION_7
0x40011e0	            0xeb05	                           jmp 0x40011e7	       652	rdcoff.c	FUNCTION_7
0x40011e2	      0xb801000000	                              mov eax, 1	       648	rdcoff.c	FUNCTION_7	SWITCH_1
0x40011e7	              0x5d	                                 pop rbp	       653	rdcoff.c	FUNCTION_7
0x40011e8	              0xc3	                                     ret	       653	rdcoff.c	FUNCTION_7
parse_coff_struct_type	FOR,0:DO,0:functions,0:SWITCH,1:IF,6:CALL,18:WHILE,1:ELSE,1	226
0x400087f	              0x55	                                push rbp	       381	rdcoff.c	FUNCTION_4
0x4000880	          0x4889e5	                            mov rbp, rsp	       381	rdcoff.c	FUNCTION_4
0x4000883	              0x53	                                push rbx	       381	rdcoff.c	FUNCTION_4
0x4000884	    0x4881ecf80000	                           sub rsp, 0xf8	       381	rdcoff.c	FUNCTION_4
0x400088b	    0x4889bd28ffff	             mov qword [rbp - 0xd8], rdi	       381	rdcoff.c	FUNCTION_4
0x4000892	    0x4889b520ffff	             mov qword [rbp - 0xe0], rsi	       381	rdcoff.c	FUNCTION_4
0x4000899	    0x48899518ffff	             mov qword [rbp - 0xe8], rdx	       381	rdcoff.c	FUNCTION_4
0x40008a0	    0x898d14ffffff	             mov dword [rbp - 0xec], ecx	       381	rdcoff.c	FUNCTION_4
0x40008a6	    0x4c898508ffff	              mov qword [rbp - 0xf8], r8	       381	rdcoff.c	FUNCTION_4
0x40008ad	    0x4c898d00ffff	             mov qword [rbp - 0x100], r9	       381	rdcoff.c	FUNCTION_4
0x40008b4	    0x64488b042528	                mov rax, qword fs:[0x28]	       381	rdcoff.c	FUNCTION_4
0x40008bd	        0x488945e8	             mov qword [rbp - 0x18], rax	       381	rdcoff.c	FUNCTION_4
0x40008c1	            0x31c0	                            xor eax, eax	       381	rdcoff.c	FUNCTION_4
0x40008c3	    0x488b8508ffff	             mov rax, qword [rbp - 0xf8]	       388	rdcoff.c	FUNCTION_4
0x40008ca	        0x488b4018	            mov rax, qword [rax + 0x18] 	       388	rdcoff.c	FUNCTION_4
0x40008ce	    0x48898568ffff	             mov qword [rbp - 0x98], rax	       388	rdcoff.c	FUNCTION_4
0x40008d5	    0xc7853cffffff	             mov dword [rbp - 0xc4], 0xa	       390	rdcoff.c	FUNCTION_4
0x40008df	    0x8b853cffffff	             mov eax, dword [rbp - 0xc4]	       391	rdcoff.c	FUNCTION_4	CALL_1
0x40008e5	            0x4898	                                    cdqe	       391	rdcoff.c	FUNCTION_4	CALL_1
0x40008e7	        0x48c1e003	                              shl rax, 3	       391	rdcoff.c	FUNCTION_4	CALL_1
0x40008eb	          0x4889c7	                            mov rdi, rax	       391	rdcoff.c	FUNCTION_4	CALL_1
0x40008ee	      0xe800000000	                          call 0x40008f3	       391	rdcoff.c	FUNCTION_4	CALL_1
0x40008f3	    0x48898548ffff	             mov qword [rbp - 0xb8], rax	       391	rdcoff.c	FUNCTION_4	CALL_1
0x40008fa	    0xc78540ffffff	               mov dword [rbp - 0xc0], 0	       392	rdcoff.c	FUNCTION_4
0x4000904	    0xc78544ffffff	               mov dword [rbp - 0xbc], 0	       394	rdcoff.c	FUNCTION_4
0x400090e	      0xe9fd020000	                           jmp 0x4000c10	       395	rdcoff.c	FUNCTION_4	WHILE_1
0x4000913	    0x48c78558ffff	               mov qword [rbp - 0xa8], 0	       404	rdcoff.c	FUNCTION_4	WHILE_1
0x400091e	    0x48c78560ffff	               mov qword [rbp - 0xa0], 0	       404	rdcoff.c	FUNCTION_4	WHILE_1
0x4000929	    0x488b8520ffff	             mov rax, qword [rbp - 0xe0]	       406	rdcoff.c	FUNCTION_4	WHILE_1
0x4000930	          0x488b10	                    mov rdx, qword [rax]	       406	rdcoff.c	FUNCTION_4	WHILE_1
0x4000933	    0x488b8520ffff	             mov rax, qword [rbp - 0xe0]	       406	rdcoff.c	FUNCTION_4	WHILE_1
0x400093a	        0x488b4010	            mov rax, qword [rax + 0x10] 	       406	rdcoff.c	FUNCTION_4	WHILE_1
0x400093e	        0x48c1e003	                              shl rax, 3	       406	rdcoff.c	FUNCTION_4	WHILE_1
0x4000942	          0x4801d0	                            add rax, rdx	       406	rdcoff.c	FUNCTION_4	WHILE_1
0x4000945	          0x488b00	                    mov rax, qword [rax]	       406	rdcoff.c	FUNCTION_4	WHILE_1
0x4000948	    0x48898570ffff	             mov qword [rbp - 0x90], rax	       406	rdcoff.c	FUNCTION_4	WHILE_1
0x400094f	        0x488d5590	                   lea rdx, [rbp - 0x70]	       408	rdcoff.c	FUNCTION_4	WHILE_1	IF_1	CALL_2
0x4000953	    0x488b8d70ffff	             mov rcx, qword [rbp - 0x90]	       408	rdcoff.c	FUNCTION_4	WHILE_1	IF_1	CALL_2
0x400095a	    0x488b8528ffff	             mov rax, qword [rbp - 0xd8]	       408	rdcoff.c	FUNCTION_4	WHILE_1	IF_1	CALL_2
0x4000961	          0x4889ce	                            mov rsi, rcx	       408	rdcoff.c	FUNCTION_4	WHILE_1	IF_1	CALL_2
0x4000964	          0x4889c7	                            mov rdi, rax	       408	rdcoff.c	FUNCTION_4	WHILE_1	IF_1	CALL_2
0x4000967	      0xe800000000	                          call 0x400096c	       408	rdcoff.c	FUNCTION_4	WHILE_1	IF_1	CALL_2
0x400096c	            0x85c0	                           test eax, eax	       408	rdcoff.c	FUNCTION_4	WHILE_1	IF_1	CALL_2
0x400096e	            0x7533	                           jne 0x40009a3	       408	rdcoff.c	FUNCTION_4	WHILE_1	IF_1	CALL_2
0x4000970	      0xe800000000	                          call 0x4000975	       410	rdcoff.c	FUNCTION_4	WHILE_1	IF_1	CALL_4
0x4000975	            0x89c7	                            mov edi, eax	       410	rdcoff.c	FUNCTION_4	WHILE_1	IF_1	CALL_4
0x4000977	      0xe800000000	                          call 0x400097c	       410	rdcoff.c	FUNCTION_4	WHILE_1	IF_1	CALL_4
0x400097c	          0x4889c3	                            mov rbx, rax	       410	rdcoff.c	FUNCTION_4	WHILE_1	IF_1	CALL_4
0x400097f	      0xbf00000000	                              mov edi, 0	       410	rdcoff.c	FUNCTION_4	WHILE_1	IF_1	CALL_4
0x4000984	      0xe800000000	                          call 0x4000989	       410	rdcoff.c	FUNCTION_4	WHILE_1	IF_1	CALL_4
0x4000989	          0x4889de	                            mov rsi, rbx	       410	rdcoff.c	FUNCTION_4	WHILE_1	IF_1	CALL_4
0x400098c	          0x4889c7	                            mov rdi, rax	       410	rdcoff.c	FUNCTION_4	WHILE_1	IF_1	CALL_4
0x400098f	      0xb800000000	                              mov eax, 0	       410	rdcoff.c	FUNCTION_4	WHILE_1	IF_1	CALL_4
0x4000994	      0xe800000000	                          call 0x4000999	       410	rdcoff.c	FUNCTION_4	WHILE_1	IF_1	CALL_4
0x4000999	      0xb800000000	                              mov eax, 0	       412	rdcoff.c	FUNCTION_4	WHILE_1	IF_1
0x400099e	      0xe9fb020000	                           jmp 0x4000c9e	       412	rdcoff.c	FUNCTION_4	WHILE_1	IF_1
0x40009a3	    0x488b8520ffff	             mov rax, qword [rbp - 0xe0]	       415	rdcoff.c	FUNCTION_4	WHILE_1
0x40009aa	        0x488b4018	            mov rax, qword [rax + 0x18] 	       415	rdcoff.c	FUNCTION_4	WHILE_1
0x40009ae	    0x48898578ffff	             mov qword [rbp - 0x88], rax	       415	rdcoff.c	FUNCTION_4	WHILE_1
0x40009b5	    0x488b8520ffff	             mov rax, qword [rbp - 0xe0]	       417	rdcoff.c	FUNCTION_4	WHILE_1
0x40009bc	        0x488b4010	            mov rax, qword [rax + 0x10] 	       417	rdcoff.c	FUNCTION_4	WHILE_1
0x40009c0	        0x488d5001	                      lea rdx, [rax + 1]	       417	rdcoff.c	FUNCTION_4	WHILE_1
0x40009c4	    0x488b8520ffff	             mov rax, qword [rbp - 0xe0]	       417	rdcoff.c	FUNCTION_4	WHILE_1
0x40009cb	        0x48895010	             mov qword [rax + 0x10], rdx	       417	rdcoff.c	FUNCTION_4	WHILE_1
0x40009cf	    0x488b8520ffff	             mov rax, qword [rbp - 0xe0]	       418	rdcoff.c	FUNCTION_4	WHILE_1
0x40009d6	        0x488b5018	            mov rdx, qword [rax + 0x18] 	       418	rdcoff.c	FUNCTION_4	WHILE_1
0x40009da	         0xfb645b1	            movzx eax, byte [rbp - 0x4f]	       418	rdcoff.c	FUNCTION_4	WHILE_1
0x40009de	           0xfb6c0	                           movzx eax, al	       418	rdcoff.c	FUNCTION_4	WHILE_1
0x40009e1	          0x83c001	                              add eax, 1	       418	rdcoff.c	FUNCTION_4	WHILE_1
0x40009e4	            0x4898	                                    cdqe	       418	rdcoff.c	FUNCTION_4	WHILE_1
0x40009e6	          0x4801c2	                            add rdx, rax	       418	rdcoff.c	FUNCTION_4	WHILE_1
0x40009e9	    0x488b8520ffff	             mov rax, qword [rbp - 0xe0]	       418	rdcoff.c	FUNCTION_4	WHILE_1
0x40009f0	        0x48895018	             mov qword [rax + 0x18], rdx	       418	rdcoff.c	FUNCTION_4	WHILE_1
0x40009f4	         0xfb645b1	            movzx eax, byte [rbp - 0x4f]	       420	rdcoff.c	FUNCTION_4	WHILE_1	IF_2
0x40009f8	            0x84c0	                             test al, al	       420	rdcoff.c	FUNCTION_4	WHILE_1	IF_2
0x40009fa	            0x750d	                           jne 0x4000a09	       420	rdcoff.c	FUNCTION_4	WHILE_1	IF_2
0x40009fc	    0x48c78550ffff	               mov qword [rbp - 0xb0], 0	       421	rdcoff.c	FUNCTION_4	WHILE_1	IF_2
0x4000a07	            0xeb64	                           jmp 0x4000a6d	       421	rdcoff.c	FUNCTION_4	WHILE_1	IF_2
0x4000a09	        0x488d55c0	                   lea rdx, [rbp - 0x40]	       424	rdcoff.c	FUNCTION_4	WHILE_1	ELSE_1	IF_3	CALL_7
0x4000a0d	    0x488bb570ffff	             mov rsi, qword [rbp - 0x90]	       424	rdcoff.c	FUNCTION_4	WHILE_1	ELSE_1	IF_3	CALL_7
0x4000a14	    0x488b8528ffff	             mov rax, qword [rbp - 0xd8]	       424	rdcoff.c	FUNCTION_4	WHILE_1	ELSE_1	IF_3	CALL_7
0x4000a1b	          0x4889d1	                            mov rcx, rdx	       424	rdcoff.c	FUNCTION_4	WHILE_1	ELSE_1	IF_3	CALL_7
0x4000a1e	      0xba00000000	                              mov edx, 0	       424	rdcoff.c	FUNCTION_4	WHILE_1	ELSE_1	IF_3	CALL_7
0x4000a23	          0x4889c7	                            mov rdi, rax	       424	rdcoff.c	FUNCTION_4	WHILE_1	ELSE_1	IF_3	CALL_7
0x4000a26	      0xe800000000	                          call 0x4000a2b	       424	rdcoff.c	FUNCTION_4	WHILE_1	ELSE_1	IF_3	CALL_7
0x4000a2b	            0x85c0	                           test eax, eax	       424	rdcoff.c	FUNCTION_4	WHILE_1	ELSE_1	IF_3	CALL_7
0x4000a2d	            0x7533	                           jne 0x4000a62	       424	rdcoff.c	FUNCTION_4	WHILE_1	ELSE_1	IF_3	CALL_7
0x4000a2f	      0xe800000000	                          call 0x4000a34	       426	rdcoff.c	FUNCTION_4	WHILE_1	ELSE_1	IF_3	CALL_9
0x4000a34	            0x89c7	                            mov edi, eax	       426	rdcoff.c	FUNCTION_4	WHILE_1	ELSE_1	IF_3	CALL_9
0x4000a36	      0xe800000000	                          call 0x4000a3b	       426	rdcoff.c	FUNCTION_4	WHILE_1	ELSE_1	IF_3	CALL_9
0x4000a3b	          0x4889c3	                            mov rbx, rax	       426	rdcoff.c	FUNCTION_4	WHILE_1	ELSE_1	IF_3	CALL_9
0x4000a3e	      0xbf00000000	                              mov edi, 0	       426	rdcoff.c	FUNCTION_4	WHILE_1	ELSE_1	IF_3	CALL_9
0x4000a43	      0xe800000000	                          call 0x4000a48	       426	rdcoff.c	FUNCTION_4	WHILE_1	ELSE_1	IF_3	CALL_9
0x4000a48	          0x4889de	                            mov rsi, rbx	       426	rdcoff.c	FUNCTION_4	WHILE_1	ELSE_1	IF_3	CALL_9
0x4000a4b	          0x4889c7	                            mov rdi, rax	       426	rdcoff.c	FUNCTION_4	WHILE_1	ELSE_1	IF_3	CALL_9
0x4000a4e	      0xb800000000	                              mov eax, 0	       426	rdcoff.c	FUNCTION_4	WHILE_1	ELSE_1	IF_3	CALL_9
0x4000a53	      0xe800000000	                          call 0x4000a58	       426	rdcoff.c	FUNCTION_4	WHILE_1	ELSE_1	IF_3	CALL_9
0x4000a58	      0xb800000000	                              mov eax, 0	       428	rdcoff.c	FUNCTION_4	WHILE_1	ELSE_1	IF_3
0x4000a5d	      0xe93c020000	                           jmp 0x4000c9e	       428	rdcoff.c	FUNCTION_4	WHILE_1	ELSE_1	IF_3
0x4000a62	        0x488d45c0	                   lea rax, [rbp - 0x40]	       430	rdcoff.c	FUNCTION_4	WHILE_1	ELSE_1
0x4000a66	    0x48898550ffff	             mov qword [rbp - 0xb0], rax	       430	rdcoff.c	FUNCTION_4	WHILE_1	ELSE_1
0x4000a6d	         0xfb645b0	            movzx eax, byte [rbp - 0x50]	       433	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1
0x4000a71	           0xfb6c0	                           movzx eax, al	       433	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1
0x4000a74	          0x83f80b	                            cmp eax, 0xb	       433	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1
0x4000a77	            0x741b	                            je 0x4000a94	       433	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1
0x4000a79	          0x83f80b	                            cmp eax, 0xb	       433	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1
0x4000a7c	            0x7f0a	                            jg 0x4000a88	       433	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1
0x4000a7e	          0x83f808	                              cmp eax, 8	       433	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1
0x4000a81	            0x7411	                            je 0x4000a94	       433	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1
0x4000a83	      0xe980000000	                           jmp 0x4000b08	       433	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1
0x4000a88	          0x83f812	                           cmp eax, 0x12	       433	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1
0x4000a8b	            0x743c	                            je 0x4000ac9	       433	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1
0x4000a8d	          0x83f866	                           cmp eax, 0x66	       433	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1
0x4000a90	            0x746b	                            je 0x4000afd	       433	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1
0x4000a92	            0xeb74	                           jmp 0x4000b08	       433	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1
0x4000a94	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       437	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1	CALL_12
0x4000a9b	        0x488b4020	            mov rax, qword [rax + 0x20] 	       437	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1	CALL_12
0x4000a9f	        0x488b5028	            mov rdx, qword [rax + 0x28] 	       437	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1	CALL_12
0x4000aa3	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       437	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1	CALL_12
0x4000aaa	        0x488b4010	            mov rax, qword [rax + 0x10] 	       437	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1	CALL_12
0x4000aae	          0x4801d0	                            add rax, rdx	       437	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1	CALL_12
0x4000ab1	        0x48c1e003	                              shl rax, 3	       437	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1	CALL_12
0x4000ab5	    0x48898558ffff	             mov qword [rbp - 0xa8], rax	       437	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1	CALL_12
0x4000abc	    0x48c78560ffff	               mov qword [rbp - 0xa0], 0	       438	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1
0x4000ac7	            0xeb3f	                           jmp 0x4000b08	       439	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1
0x4000ac9	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       442	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1	CALL_13
0x4000ad0	        0x488b4020	            mov rax, qword [rax + 0x20] 	       442	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1	CALL_13
0x4000ad4	        0x488b5028	            mov rdx, qword [rax + 0x28] 	       442	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1	CALL_13
0x4000ad8	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       442	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1	CALL_13
0x4000adf	        0x488b4010	            mov rax, qword [rax + 0x10] 	       442	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1	CALL_13
0x4000ae3	          0x4801d0	                            add rax, rdx	       442	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1	CALL_13
0x4000ae6	    0x48898558ffff	             mov qword [rbp - 0xa8], rax	       442	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1	CALL_13
0x4000aed	         0xfb745ca	            movzx eax, word [rbp - 0x36]	       443	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1
0x4000af1	           0xfb7c0	                           movzx eax, ax	       443	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1
0x4000af4	    0x48898560ffff	             mov qword [rbp - 0xa0], rax	       443	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1
0x4000afb	            0xeb0b	                           jmp 0x4000b08	       444	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1
0x4000afd	    0xc78544ffffff	               mov dword [rbp - 0xbc], 1	       447	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1
0x4000b07	              0x90	                                     nop	       448	rdcoff.c	FUNCTION_4	WHILE_1	SWITCH_1
0x4000b08	    0x83bd44ffffff	               cmp dword [rbp - 0xbc], 0	       451	rdcoff.c	FUNCTION_4	WHILE_1	IF_4
0x4000b0f	     0xf85fb000000	                           jne 0x4000c10	       451	rdcoff.c	FUNCTION_4	WHILE_1	IF_4
0x4000b15	         0xfb745ae	            movzx eax, word [rbp - 0x52]	       457	rdcoff.c	FUNCTION_4	WHILE_1	IF_4
0x4000b19	           0xfb7f8	                           movzx edi, ax	       456	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	CALL_14
0x4000b1c	    0x4c8b8550ffff	              mov r8, qword [rbp - 0xb0]	       456	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	CALL_14
0x4000b23	    0x488b8d78ffff	             mov rcx, qword [rbp - 0x88]	       456	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	CALL_14
0x4000b2a	    0x488b9518ffff	             mov rdx, qword [rbp - 0xe8]	       456	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	CALL_14
0x4000b31	    0x488bb520ffff	             mov rsi, qword [rbp - 0xe0]	       456	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	CALL_14
0x4000b38	    0x488b8528ffff	             mov rax, qword [rbp - 0xd8]	       456	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	CALL_14
0x4000b3f	    0xffb500ffffff	                push qword [rbp - 0x100]	       456	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	CALL_14
0x4000b45	            0x6a01	                                  push 1	       456	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	CALL_14
0x4000b47	          0x4d89c1	                              mov r9, r8	       456	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	CALL_14
0x4000b4a	          0x4189f8	                            mov r8d, edi	       456	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	CALL_14
0x4000b4d	          0x4889c7	                            mov rdi, rax	       456	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	CALL_14
0x4000b50	      0xe8cff5ffff	                call sym.parse_coff_type	       456	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	CALL_14
0x4000b55	        0x4883c410	                           add rsp, 0x10	       456	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	CALL_14
0x4000b59	        0x48894580	             mov qword [rbp - 0x80], rax	       456	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	CALL_14
0x4000b5d	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       458	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	CALL_16
0x4000b64	        0x488b7008	                mov rsi, qword [rax + 8]	       458	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	CALL_16
0x4000b68	    0x488bbd60ffff	             mov rdi, qword [rbp - 0xa0]	       458	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	CALL_16
0x4000b6f	    0x488b8d58ffff	             mov rcx, qword [rbp - 0xa8]	       458	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	CALL_16
0x4000b76	        0x488b5580	             mov rdx, qword [rbp - 0x80]	       458	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	CALL_16
0x4000b7a	    0x488b8500ffff	            mov rax, qword [rbp - 0x100]	       458	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	CALL_16
0x4000b81	    0x41b900000000	                              mov r9d, 0	       458	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	CALL_16
0x4000b87	          0x4989f8	                             mov r8, rdi	       458	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	CALL_16
0x4000b8a	          0x4889c7	                            mov rdi, rax	       458	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	CALL_16
0x4000b8d	      0xe800000000	                          call 0x4000b92	       458	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	CALL_16
0x4000b92	        0x48894588	             mov qword [rbp - 0x78], rax	       458	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	CALL_16
0x4000b96	      0x48837d8800	               cmp qword [rbp - 0x78], 0	       460	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	IF_5
0x4000b9b	            0x750a	                           jne 0x4000ba7	       460	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	IF_5
0x4000b9d	      0xb800000000	                              mov eax, 0	       461	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	IF_5
0x4000ba2	      0xe9f7000000	                           jmp 0x4000c9e	       461	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	IF_5
0x4000ba7	    0x8b8540ffffff	             mov eax, dword [rbp - 0xc0]	       463	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	IF_6
0x4000bad	          0x83c001	                              add eax, 1	       463	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	IF_6
0x4000bb0	    0x3b853cffffff	             cmp eax, dword [rbp - 0xc4]	       463	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	IF_6
0x4000bb6	            0x7c30	                            jl 0x4000be8	       463	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	IF_6
0x4000bb8	    0x83853cffffff	             add dword [rbp - 0xc4], 0xa	       465	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	IF_6
0x4000bbf	    0x8b853cffffff	             mov eax, dword [rbp - 0xc4]	       467	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	IF_6	CALL_17
0x4000bc5	            0x4898	                                    cdqe	       467	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	IF_6	CALL_17
0x4000bc7	    0x488d14c50000	                        lea rdx, [rax*8]	       467	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	IF_6	CALL_17
0x4000bcf	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       466	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	IF_6
0x4000bd6	          0x4889d6	                            mov rsi, rdx	       466	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	IF_6
0x4000bd9	          0x4889c7	                            mov rdi, rax	       466	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	IF_6
0x4000bdc	      0xe800000000	                          call 0x4000be1	       466	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	IF_6
0x4000be1	    0x48898548ffff	             mov qword [rbp - 0xb8], rax	       466	rdcoff.c	FUNCTION_4	WHILE_1	IF_4	IF_6
0x4000be8	    0x8b8540ffffff	             mov eax, dword [rbp - 0xc0]	       470	rdcoff.c	FUNCTION_4	WHILE_1	IF_4
0x4000bee	            0x4898	                                    cdqe	       470	rdcoff.c	FUNCTION_4	WHILE_1	IF_4
0x4000bf0	    0x488d14c50000	                        lea rdx, [rax*8]	       470	rdcoff.c	FUNCTION_4	WHILE_1	IF_4
0x4000bf8	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       470	rdcoff.c	FUNCTION_4	WHILE_1	IF_4
0x4000bff	          0x4801c2	                            add rdx, rax	       470	rdcoff.c	FUNCTION_4	WHILE_1	IF_4
0x4000c02	        0x488b4588	             mov rax, qword [rbp - 0x78]	       470	rdcoff.c	FUNCTION_4	WHILE_1	IF_4
0x4000c06	          0x488902	                    mov qword [rdx], rax	       470	rdcoff.c	FUNCTION_4	WHILE_1	IF_4
0x4000c09	    0x838540ffffff	               add dword [rbp - 0xc0], 1	       471	rdcoff.c	FUNCTION_4	WHILE_1	IF_4
0x4000c10	    0x83bd44ffffff	               cmp dword [rbp - 0xbc], 0	       395	rdcoff.c	FUNCTION_4	WHILE_1
0x4000c17	            0x7533	                           jne 0x4000c4c	       395	rdcoff.c	FUNCTION_4	WHILE_1
0x4000c19	    0x488b8520ffff	             mov rax, qword [rbp - 0xe0]	       396	rdcoff.c	FUNCTION_4	WHILE_1
0x4000c20	        0x488b4018	            mov rax, qword [rax + 0x18] 	       396	rdcoff.c	FUNCTION_4	WHILE_1
0x4000c24	    0x483b8568ffff	             cmp rax, qword [rbp - 0x98]	       396	rdcoff.c	FUNCTION_4	WHILE_1
0x4000c2b	            0x7d1f	                           jge 0x4000c4c	       396	rdcoff.c	FUNCTION_4	WHILE_1
0x4000c2d	    0x488b8520ffff	             mov rax, qword [rbp - 0xe0]	       397	rdcoff.c	FUNCTION_4	WHILE_1
0x4000c34	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       397	rdcoff.c	FUNCTION_4	WHILE_1
0x4000c38	    0x488b8520ffff	             mov rax, qword [rbp - 0xe0]	       397	rdcoff.c	FUNCTION_4	WHILE_1
0x4000c3f	        0x488b4008	                mov rax, qword [rax + 8]	       397	rdcoff.c	FUNCTION_4	WHILE_1
0x4000c43	          0x4839c2	                            cmp rdx, rax	       397	rdcoff.c	FUNCTION_4	WHILE_1
0x4000c46	     0xf8cc7fcffff	                            jl 0x4000913	       397	rdcoff.c	FUNCTION_4	WHILE_1
0x4000c4c	    0x8b8540ffffff	             mov eax, dword [rbp - 0xc0]	       475	rdcoff.c	FUNCTION_4
0x4000c52	            0x4898	                                    cdqe	       475	rdcoff.c	FUNCTION_4
0x4000c54	    0x488d14c50000	                        lea rdx, [rax*8]	       475	rdcoff.c	FUNCTION_4
0x4000c5c	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       475	rdcoff.c	FUNCTION_4
0x4000c63	          0x4801d0	                            add rax, rdx	       475	rdcoff.c	FUNCTION_4
0x4000c66	    0x48c700000000	                      mov qword [rax], 0	       475	rdcoff.c	FUNCTION_4
0x4000c6d	    0x488b8508ffff	             mov rax, qword [rbp - 0xf8]	       478	rdcoff.c	FUNCTION_4
0x4000c74	         0xfb7400a	            movzx eax, word [rax + 0xa] 	       478	rdcoff.c	FUNCTION_4
0x4000c78	           0xfb7d0	                           movzx edx, ax	       477	rdcoff.c	FUNCTION_4	CALL_18
0x4000c7b	    0x83bd14ffffff	               cmp dword [rbp - 0xec], 8	       477	rdcoff.c	FUNCTION_4	CALL_18
0x4000c82	           0xf94c0	                                 sete al	       477	rdcoff.c	FUNCTION_4	CALL_18
0x4000c85	           0xfb6f0	                           movzx esi, al	       477	rdcoff.c	FUNCTION_4	CALL_18
0x4000c88	    0x488b8d48ffff	             mov rcx, qword [rbp - 0xb8]	       477	rdcoff.c	FUNCTION_4	CALL_18
0x4000c8f	    0x488b8500ffff	            mov rax, qword [rbp - 0x100]	       477	rdcoff.c	FUNCTION_4	CALL_18
0x4000c96	          0x4889c7	                            mov rdi, rax	       477	rdcoff.c	FUNCTION_4	CALL_18
0x4000c99	      0xe800000000	                          call 0x4000c9e	       477	rdcoff.c	FUNCTION_4	CALL_18
0x4000c9e	        0x488b5de8	             mov rbx, qword [rbp - 0x18]	       480	rdcoff.c	FUNCTION_4
0x4000ca2	    0x6448331c2528	                xor rbx, qword fs:[0x28]	       480	rdcoff.c	FUNCTION_4
0x4000cab	            0x7405	                            je 0x4000cb2	       480	rdcoff.c	FUNCTION_4
0x4000cad	      0xe800000000	                          call 0x4000cb2	       480	rdcoff.c	FUNCTION_4
0x4000cb2	        0x488b5df8	                mov rbx, qword [rbp - 8]	       480	rdcoff.c	FUNCTION_4
0x4000cb6	              0xc9	                                   leave	       480	rdcoff.c	FUNCTION_4
0x4000cb7	              0xc3	                                     ret	       480	rdcoff.c	FUNCTION_4
parse_coff_base_type	FOR,0:DO,0:functions,0:SWITCH,1:IF,6:CALL,23:WHILE,0:ELSE,3	223
0x40004bd	              0x55	                                push rbp	       241	rdcoff.c	FUNCTION_3
0x40004be	          0x4889e5	                            mov rbp, rsp	       241	rdcoff.c	FUNCTION_3
0x40004c1	        0x4883ec50	                           sub rsp, 0x50	       241	rdcoff.c	FUNCTION_3
0x40004c5	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       241	rdcoff.c	FUNCTION_3
0x40004c9	        0x488975d0	             mov qword [rbp - 0x30], rsi	       241	rdcoff.c	FUNCTION_3
0x40004cd	        0x488955c8	             mov qword [rbp - 0x38], rdx	       241	rdcoff.c	FUNCTION_3
0x40004d1	        0x48894dc0	             mov qword [rbp - 0x40], rcx	       241	rdcoff.c	FUNCTION_3
0x40004d5	        0x448945bc	             mov dword [rbp - 0x44], r8d	       241	rdcoff.c	FUNCTION_3
0x40004d9	        0x4c894db0	              mov qword [rbp - 0x50], r9	       241	rdcoff.c	FUNCTION_3
0x40004dd	        0x837dbc00	               cmp dword [rbp - 0x44], 0	       247	rdcoff.c	FUNCTION_3	IF_1
0x40004e1	            0x782e	                            js 0x4000511	       247	rdcoff.c	FUNCTION_3	IF_1
0x40004e3	        0x837dbc10	           cmp dword [rbp - 0x44], 0x10 	       248	rdcoff.c	FUNCTION_3	IF_1
0x40004e7	            0x7f28	                            jg 0x4000511	       248	rdcoff.c	FUNCTION_3	IF_1
0x40004e9	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       249	rdcoff.c	FUNCTION_3	IF_1
0x40004ed	          0x8b55bc	             mov edx, dword [rbp - 0x44]	       249	rdcoff.c	FUNCTION_3	IF_1
0x40004f0	          0x4863d2	                         movsxd rdx, edx	       249	rdcoff.c	FUNCTION_3	IF_1
0x40004f3	      0x488b44d008	       mov rax, qword [rax + rdx*8 + 8] 	       249	rdcoff.c	FUNCTION_3	IF_1
0x40004f8	          0x4885c0	                           test rax, rax	       249	rdcoff.c	FUNCTION_3	IF_1
0x40004fb	            0x7414	                            je 0x4000511	       249	rdcoff.c	FUNCTION_3	IF_1
0x40004fd	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       250	rdcoff.c	FUNCTION_3	IF_1
0x4000501	          0x8b55bc	             mov edx, dword [rbp - 0x44]	       250	rdcoff.c	FUNCTION_3	IF_1
0x4000504	          0x4863d2	                         movsxd rdx, edx	       250	rdcoff.c	FUNCTION_3	IF_1
0x4000507	      0x488b44d008	       mov rax, qword [rax + rdx*8 + 8] 	       250	rdcoff.c	FUNCTION_3	IF_1
0x400050c	      0xe96c030000	                           jmp 0x400087d	       250	rdcoff.c	FUNCTION_3	IF_1
0x4000511	    0xc745e4010000	               mov dword [rbp - 0x1c], 1	       252	rdcoff.c	FUNCTION_3
0x4000518	    0x48c745f00000	               mov qword [rbp - 0x10], 0	       253	rdcoff.c	FUNCTION_3
0x4000520	        0x837dbc10	           cmp dword [rbp - 0x44], 0x10 	       255	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000524	            0x770d	                            ja 0x4000533	       255	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000526	          0x8b45bc	             mov eax, dword [rbp - 0x44]	       255	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000529	    0x488b04c50000	                  mov rax, qword [rax*8]	       255	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000531	            0xffe0	                                 jmp rax	       255	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000533	        0x488b7d10	            mov rdi, qword [rbp + 0x10] 	       258	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_1
0x4000537	      0xe800000000	                          call 0x400053c	       258	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_1
0x400053c	        0x488945e8	             mov qword [rbp - 0x18], rax	       258	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_1
0x4000540	      0xe9f0020000	                           jmp 0x4000835	       259	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000545	        0x488b7d10	            mov rdi, qword [rbp + 0x10] 	       263	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_2
0x4000549	      0xe800000000	                          call 0x400054e	       263	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_2
0x400054e	        0x488945e8	             mov qword [rbp - 0x18], rax	       263	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_2
0x4000552	    0x48c745f00000	               mov qword [rbp - 0x10], 0	       264	rdcoff.c	FUNCTION_3	SWITCH_1
0x400055a	      0xe9d6020000	                           jmp 0x4000835	       265	rdcoff.c	FUNCTION_3	SWITCH_1
0x400055f	      0xba00000000	                              mov edx, 0	       268	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_3
0x4000564	      0xbe01000000	                              mov esi, 1	       268	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_3
0x4000569	        0x488b7d10	            mov rdi, qword [rbp + 0x10] 	       268	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_3
0x400056d	      0xe800000000	                          call 0x4000572	       268	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_3
0x4000572	        0x488945e8	             mov qword [rbp - 0x18], rax	       268	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_3
0x4000576	    0x48c745f00000	               mov qword [rbp - 0x10], 0	       269	rdcoff.c	FUNCTION_3	SWITCH_1
0x400057e	      0xe9b2020000	                           jmp 0x4000835	       270	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000583	      0xba00000000	                              mov edx, 0	       273	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_4
0x4000588	      0xbe02000000	                              mov esi, 2	       273	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_4
0x400058d	        0x488b7d10	            mov rdi, qword [rbp + 0x10] 	       273	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_4
0x4000591	      0xe800000000	                          call 0x4000596	       273	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_4
0x4000596	        0x488945e8	             mov qword [rbp - 0x18], rax	       273	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_4
0x400059a	    0x48c745f00000	               mov qword [rbp - 0x10], 0	       274	rdcoff.c	FUNCTION_3	SWITCH_1
0x40005a2	      0xe98e020000	                           jmp 0x4000835	       275	rdcoff.c	FUNCTION_3	SWITCH_1
0x40005a7	      0xba00000000	                              mov edx, 0	       279	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_5
0x40005ac	      0xbe04000000	                              mov esi, 4	       279	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_5
0x40005b1	        0x488b7d10	            mov rdi, qword [rbp + 0x10] 	       279	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_5
0x40005b5	      0xe800000000	                          call 0x40005ba	       279	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_5
0x40005ba	        0x488945e8	             mov qword [rbp - 0x18], rax	       279	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_5
0x40005be	    0x48c745f00000	               mov qword [rbp - 0x10], 0	       280	rdcoff.c	FUNCTION_3	SWITCH_1
0x40005c6	      0xe96a020000	                           jmp 0x4000835	       281	rdcoff.c	FUNCTION_3	SWITCH_1
0x40005cb	      0xba00000000	                              mov edx, 0	       284	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_6
0x40005d0	      0xbe04000000	                              mov esi, 4	       284	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_6
0x40005d5	        0x488b7d10	            mov rdi, qword [rbp + 0x10] 	       284	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_6
0x40005d9	      0xe800000000	                          call 0x40005de	       284	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_6
0x40005de	        0x488945e8	             mov qword [rbp - 0x18], rax	       284	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_6
0x40005e2	    0x48c745f00000	               mov qword [rbp - 0x10], 0	       285	rdcoff.c	FUNCTION_3	SWITCH_1
0x40005ea	      0xe946020000	                           jmp 0x4000835	       286	rdcoff.c	FUNCTION_3	SWITCH_1
0x40005ef	      0xbe04000000	                              mov esi, 4	       289	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_7
0x40005f4	        0x488b7d10	            mov rdi, qword [rbp + 0x10] 	       289	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_7
0x40005f8	      0xe800000000	                          call 0x40005fd	       289	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_7
0x40005fd	        0x488945e8	             mov qword [rbp - 0x18], rax	       289	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_7
0x4000601	    0x48c745f00000	               mov qword [rbp - 0x10], 0	       290	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000609	      0xe927020000	                           jmp 0x4000835	       291	rdcoff.c	FUNCTION_3	SWITCH_1
0x400060e	      0xbe08000000	                              mov esi, 8	       294	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_8
0x4000613	        0x488b7d10	            mov rdi, qword [rbp + 0x10] 	       294	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_8
0x4000617	      0xe800000000	                          call 0x400061c	       294	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_8
0x400061c	        0x488945e8	             mov qword [rbp - 0x18], rax	       294	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_8
0x4000620	    0x48c745f00000	               mov qword [rbp - 0x10], 0	       295	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000628	      0xe908020000	                           jmp 0x4000835	       296	rdcoff.c	FUNCTION_3	SWITCH_1
0x400062d	      0xbe0c000000	                            mov esi, 0xc	       299	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_9
0x4000632	        0x488b7d10	            mov rdi, qword [rbp + 0x10] 	       299	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_9
0x4000636	      0xe800000000	                          call 0x400063b	       299	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_9
0x400063b	        0x488945e8	             mov qword [rbp - 0x18], rax	       299	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_9
0x400063f	    0x48c745f00000	               mov qword [rbp - 0x10], 0	       300	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000647	      0xe9e9010000	                           jmp 0x4000835	       301	rdcoff.c	FUNCTION_3	SWITCH_1
0x400064c	      0xba01000000	                              mov edx, 1	       304	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_10
0x4000651	      0xbe01000000	                              mov esi, 1	       304	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_10
0x4000656	        0x488b7d10	            mov rdi, qword [rbp + 0x10] 	       304	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_10
0x400065a	      0xe800000000	                          call 0x400065f	       304	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_10
0x400065f	        0x488945e8	             mov qword [rbp - 0x18], rax	       304	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_10
0x4000663	    0x48c745f00000	               mov qword [rbp - 0x10], 0	       305	rdcoff.c	FUNCTION_3	SWITCH_1
0x400066b	      0xe9c5010000	                           jmp 0x4000835	       306	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000670	      0xba01000000	                              mov edx, 1	       309	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_11
0x4000675	      0xbe02000000	                              mov esi, 2	       309	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_11
0x400067a	        0x488b7d10	            mov rdi, qword [rbp + 0x10] 	       309	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_11
0x400067e	      0xe800000000	                          call 0x4000683	       309	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_11
0x4000683	        0x488945e8	             mov qword [rbp - 0x18], rax	       309	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_11
0x4000687	    0x48c745f00000	               mov qword [rbp - 0x10], 0	       310	rdcoff.c	FUNCTION_3	SWITCH_1
0x400068f	      0xe9a1010000	                           jmp 0x4000835	       311	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000694	      0xba01000000	                              mov edx, 1	       314	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_12
0x4000699	      0xbe04000000	                              mov esi, 4	       314	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_12
0x400069e	        0x488b7d10	            mov rdi, qword [rbp + 0x10] 	       314	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_12
0x40006a2	      0xe800000000	                          call 0x40006a7	       314	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_12
0x40006a7	        0x488945e8	             mov qword [rbp - 0x18], rax	       314	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_12
0x40006ab	    0x48c745f00000	               mov qword [rbp - 0x10], 0	       315	rdcoff.c	FUNCTION_3	SWITCH_1
0x40006b3	      0xe97d010000	                           jmp 0x4000835	       316	rdcoff.c	FUNCTION_3	SWITCH_1
0x40006b8	      0xba01000000	                              mov edx, 1	       319	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_13
0x40006bd	      0xbe04000000	                              mov esi, 4	       319	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_13
0x40006c2	        0x488b7d10	            mov rdi, qword [rbp + 0x10] 	       319	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_13
0x40006c6	      0xe800000000	                          call 0x40006cb	       319	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_13
0x40006cb	        0x488945e8	             mov qword [rbp - 0x18], rax	       319	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_13
0x40006cf	    0x48c745f00000	               mov qword [rbp - 0x10], 0	       320	rdcoff.c	FUNCTION_3	SWITCH_1
0x40006d7	      0xe959010000	                           jmp 0x4000835	       321	rdcoff.c	FUNCTION_3	SWITCH_1
0x40006dc	      0x48837db000	               cmp qword [rbp - 0x50], 0	       324	rdcoff.c	FUNCTION_3	SWITCH_1	IF_2
0x40006e1	            0x751e	                           jne 0x4000701	       324	rdcoff.c	FUNCTION_3	SWITCH_1	IF_2
0x40006e3	      0xb900000000	                              mov ecx, 0	       325	rdcoff.c	FUNCTION_3	SWITCH_1	IF_2	CALL_14
0x40006e8	      0xba00000000	                              mov edx, 0	       325	rdcoff.c	FUNCTION_3	SWITCH_1	IF_2	CALL_14
0x40006ed	      0xbe01000000	                              mov esi, 1	       325	rdcoff.c	FUNCTION_3	SWITCH_1	IF_2	CALL_14
0x40006f2	        0x488b7d10	            mov rdi, qword [rbp + 0x10] 	       325	rdcoff.c	FUNCTION_3	SWITCH_1	IF_2	CALL_14
0x40006f6	      0xe800000000	                          call 0x40006fb	       325	rdcoff.c	FUNCTION_3	SWITCH_1	IF_2	CALL_14
0x40006fb	        0x488945e8	             mov qword [rbp - 0x18], rax	       325	rdcoff.c	FUNCTION_3	SWITCH_1	IF_2	CALL_14
0x40006ff	            0xeb26	                           jmp 0x4000727	       325	rdcoff.c	FUNCTION_3	SWITCH_1	IF_2	CALL_14
0x4000701	        0x488b7db0	             mov rdi, qword [rbp - 0x50]	       328	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_1	CALL_15
0x4000705	          0x8b4dbc	             mov ecx, dword [rbp - 0x44]	       328	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_1	CALL_15
0x4000708	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	       328	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_1	CALL_15
0x400070c	        0x488b75d0	             mov rsi, qword [rbp - 0x30]	       328	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_1	CALL_15
0x4000710	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       328	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_1	CALL_15
0x4000714	        0x4c8b4d10	              mov r9, qword [rbp + 0x10]	       328	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_1	CALL_15
0x4000718	          0x4989f8	                             mov r8, rdi	       328	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_1	CALL_15
0x400071b	          0x4889c7	                            mov rdi, rax	       328	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_1	CALL_15
0x400071e	      0xe85c010000	         call sym.parse_coff_struct_type	       328	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_1	CALL_15
0x4000723	        0x488945e8	             mov qword [rbp - 0x18], rax	       328	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_1	CALL_15
0x4000727	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	       331	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_16
0x400072b	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       331	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_16
0x400072f	          0x4889d6	                            mov rsi, rdx	       331	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_16
0x4000732	          0x4889c7	                            mov rdi, rax	       331	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_16
0x4000735	      0xe806f9ffff	                  call sym.coff_get_slot	       331	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_16
0x400073a	        0x488945f8	                mov qword [rbp - 8], rax	       331	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_16
0x400073e	        0x488b45f8	                mov rax, qword [rbp - 8]	       332	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000742	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       332	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000746	          0x488910	                    mov qword [rax], rdx	       332	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000749	    0xc745e4000000	               mov dword [rbp - 0x1c], 0	       334	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000750	      0xe9e0000000	                           jmp 0x4000835	       335	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000755	      0x48837db000	               cmp qword [rbp - 0x50], 0	       338	rdcoff.c	FUNCTION_3	SWITCH_1	IF_3
0x400075a	            0x751e	                           jne 0x400077a	       338	rdcoff.c	FUNCTION_3	SWITCH_1	IF_3
0x400075c	      0xb900000000	                              mov ecx, 0	       339	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_17
0x4000761	      0xba00000000	                              mov edx, 0	       339	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_17
0x4000766	      0xbe00000000	                              mov esi, 0	       339	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_17
0x400076b	        0x488b7d10	            mov rdi, qword [rbp + 0x10] 	       339	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_17
0x400076f	      0xe800000000	                          call 0x4000774	       339	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_17
0x4000774	        0x488945e8	             mov qword [rbp - 0x18], rax	       339	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_17
0x4000778	            0xeb26	                           jmp 0x40007a0	       339	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_17
0x400077a	        0x488b7db0	             mov rdi, qword [rbp - 0x50]	       341	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_2	CALL_18
0x400077e	          0x8b4dbc	             mov ecx, dword [rbp - 0x44]	       341	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_2	CALL_18
0x4000781	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	       341	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_2	CALL_18
0x4000785	        0x488b75d0	             mov rsi, qword [rbp - 0x30]	       341	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_2	CALL_18
0x4000789	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       341	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_2	CALL_18
0x400078d	        0x4c8b4d10	              mov r9, qword [rbp + 0x10]	       341	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_2	CALL_18
0x4000791	          0x4989f8	                             mov r8, rdi	       341	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_2	CALL_18
0x4000794	          0x4889c7	                            mov rdi, rax	       341	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_2	CALL_18
0x4000797	      0xe8e3000000	         call sym.parse_coff_struct_type	       341	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_2	CALL_18
0x400079c	        0x488945e8	             mov qword [rbp - 0x18], rax	       341	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_2	CALL_18
0x40007a0	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	       344	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_19
0x40007a4	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       344	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_19
0x40007a8	          0x4889d6	                            mov rsi, rdx	       344	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_19
0x40007ab	          0x4889c7	                            mov rdi, rax	       344	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_19
0x40007ae	      0xe88df8ffff	                  call sym.coff_get_slot	       344	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_19
0x40007b3	        0x488945f8	                mov qword [rbp - 8], rax	       344	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_19
0x40007b7	        0x488b45f8	                mov rax, qword [rbp - 8]	       345	rdcoff.c	FUNCTION_3	SWITCH_1
0x40007bb	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       345	rdcoff.c	FUNCTION_3	SWITCH_1
0x40007bf	          0x488910	                    mov qword [rax], rdx	       345	rdcoff.c	FUNCTION_3	SWITCH_1
0x40007c2	    0xc745e4000000	               mov dword [rbp - 0x1c], 0	       347	rdcoff.c	FUNCTION_3	SWITCH_1
0x40007c9	            0xeb6a	                           jmp 0x4000835	       348	rdcoff.c	FUNCTION_3	SWITCH_1
0x40007cb	      0x48837db000	               cmp qword [rbp - 0x50], 0	       351	rdcoff.c	FUNCTION_3	SWITCH_1	IF_4
0x40007d0	            0x7519	                           jne 0x40007eb	       351	rdcoff.c	FUNCTION_3	SWITCH_1	IF_4
0x40007d2	      0xba00000000	                              mov edx, 0	       352	rdcoff.c	FUNCTION_3	SWITCH_1	IF_4	CALL_20
0x40007d7	      0xbe00000000	                              mov esi, 0	       352	rdcoff.c	FUNCTION_3	SWITCH_1	IF_4	CALL_20
0x40007dc	        0x488b7d10	            mov rdi, qword [rbp + 0x10] 	       352	rdcoff.c	FUNCTION_3	SWITCH_1	IF_4	CALL_20
0x40007e0	      0xe800000000	                          call 0x40007e5	       352	rdcoff.c	FUNCTION_3	SWITCH_1	IF_4	CALL_20
0x40007e5	        0x488945e8	             mov qword [rbp - 0x18], rax	       352	rdcoff.c	FUNCTION_3	SWITCH_1	IF_4	CALL_20
0x40007e9	            0xeb20	                           jmp 0x400080b	       352	rdcoff.c	FUNCTION_3	SWITCH_1	IF_4	CALL_20
0x40007eb	        0x488b4db0	             mov rcx, qword [rbp - 0x50]	       355	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_21
0x40007ef	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	       355	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_21
0x40007f3	        0x488b75d0	             mov rsi, qword [rbp - 0x30]	       355	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_21
0x40007f7	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       355	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_21
0x40007fb	        0x4c8b4510	              mov r8, qword [rbp + 0x10]	       355	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_21
0x40007ff	          0x4889c7	                            mov rdi, rax	       355	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_21
0x4000802	      0xe8b1040000	           call sym.parse_coff_enum_type	       355	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_21
0x4000807	        0x488945e8	             mov qword [rbp - 0x18], rax	       355	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_21
0x400080b	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	       357	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_22
0x400080f	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       357	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_22
0x4000813	          0x4889d6	                            mov rsi, rdx	       357	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_22
0x4000816	          0x4889c7	                            mov rdi, rax	       357	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_22
0x4000819	      0xe822f8ffff	                  call sym.coff_get_slot	       357	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_22
0x400081e	        0x488945f8	                mov qword [rbp - 8], rax	       357	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_22
0x4000822	        0x488b45f8	                mov rax, qword [rbp - 8]	       358	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000826	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       358	rdcoff.c	FUNCTION_3	SWITCH_1
0x400082a	          0x488910	                    mov qword [rax], rdx	       358	rdcoff.c	FUNCTION_3	SWITCH_1
0x400082d	    0xc745e4000000	               mov dword [rbp - 0x1c], 0	       360	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000834	              0x90	                                     nop	       361	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000835	      0x48837df000	               cmp qword [rbp - 0x10], 0	       364	rdcoff.c	FUNCTION_3	IF_5
0x400083a	            0x7418	                            je 0x4000854	       364	rdcoff.c	FUNCTION_3	IF_5
0x400083c	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       365	rdcoff.c	FUNCTION_3	CALL_23
0x4000840	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       365	rdcoff.c	FUNCTION_3	CALL_23
0x4000844	          0x4889c6	                            mov rsi, rax	       365	rdcoff.c	FUNCTION_3	CALL_23
0x4000847	        0x488b7d10	            mov rdi, qword [rbp + 0x10] 	       365	rdcoff.c	FUNCTION_3	CALL_23
0x400084b	      0xe800000000	                          call 0x4000850	       365	rdcoff.c	FUNCTION_3	CALL_23
0x4000850	        0x488945e8	             mov qword [rbp - 0x18], rax	       365	rdcoff.c	FUNCTION_3	CALL_23
0x4000854	        0x837de400	               cmp dword [rbp - 0x1c], 0	       367	rdcoff.c	FUNCTION_3	IF_6
0x4000858	            0x741f	                            je 0x4000879	       367	rdcoff.c	FUNCTION_3	IF_6
0x400085a	        0x837dbc00	               cmp dword [rbp - 0x44], 0	       368	rdcoff.c	FUNCTION_3	IF_6
0x400085e	            0x7819	                            js 0x4000879	       368	rdcoff.c	FUNCTION_3	IF_6
0x4000860	        0x837dbc10	           cmp dword [rbp - 0x44], 0x10 	       369	rdcoff.c	FUNCTION_3	IF_6
0x4000864	            0x7f13	                            jg 0x4000879	       369	rdcoff.c	FUNCTION_3	IF_6
0x4000866	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       370	rdcoff.c	FUNCTION_3	IF_6
0x400086a	          0x8b55bc	             mov edx, dword [rbp - 0x44]	       370	rdcoff.c	FUNCTION_3	IF_6
0x400086d	          0x4863d2	                         movsxd rdx, edx	       370	rdcoff.c	FUNCTION_3	IF_6
0x4000870	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	       370	rdcoff.c	FUNCTION_3	IF_6
0x4000874	      0x48894cd008	        mov qword [rax + rdx*8 + 8], rcx	       370	rdcoff.c	FUNCTION_3	IF_6
0x4000879	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       372	rdcoff.c	FUNCTION_3
0x400087d	              0xc9	                                   leave	       373	rdcoff.c	FUNCTION_3
0x400087e	              0xc3	                                     ret	       373	rdcoff.c	FUNCTION_3
coff_get_slot	FOR,0:DO,0:functions,0:SWITCH,0:IF,3:CALL,6:WHILE,1:ELSE,0	61
0x4000040	              0x55	                                push rbp	       108	rdcoff.c	FUNCTION_1
0x4000041	          0x4889e5	                            mov rbp, rsp	       108	rdcoff.c	FUNCTION_1
0x4000044	        0x4883ec20	                           sub rsp, 0x20	       108	rdcoff.c	FUNCTION_1
0x4000048	        0x48897de8	             mov qword [rbp - 0x18], rdi	       108	rdcoff.c	FUNCTION_1
0x400004c	        0x488975e0	             mov qword [rbp - 0x20], rsi	       108	rdcoff.c	FUNCTION_1
0x4000050	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       111	rdcoff.c	FUNCTION_1
0x4000054	        0x488945f8	                mov qword [rbp - 8], rax	       111	rdcoff.c	FUNCTION_1
0x4000058	    0x48817de08f3e	         cmp qword [rbp - 0x20], 0x3e8f 	       115	rdcoff.c	FUNCTION_1	IF_1
0x4000060	            0x7e6a	                           jle 0x40000cc	       115	rdcoff.c	FUNCTION_1	IF_1
0x4000062	      0xbf00000000	                              mov edi, 0	       116	rdcoff.c	FUNCTION_1	CALL_2
0x4000067	      0xe800000000	                          call 0x400006c	       116	rdcoff.c	FUNCTION_1	CALL_2
0x400006c	          0x4889c2	                            mov rdx, rax	       116	rdcoff.c	FUNCTION_1	CALL_2
0x400006f	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       116	rdcoff.c	FUNCTION_1	CALL_2
0x4000073	          0x4889c6	                            mov rsi, rax	       116	rdcoff.c	FUNCTION_1	CALL_2
0x4000076	          0x4889d7	                            mov rdi, rdx	       116	rdcoff.c	FUNCTION_1	CALL_2
0x4000079	      0xb800000000	                              mov eax, 0	       116	rdcoff.c	FUNCTION_1	CALL_2
0x400007e	      0xe800000000	                          call 0x4000083	       116	rdcoff.c	FUNCTION_1	CALL_2
0x4000083	        0x488b45f8	                mov rax, qword [rbp - 8]	       120	rdcoff.c	FUNCTION_1	WHILE_1	IF_2
0x4000087	          0x488b00	                    mov rax, qword [rax]	       120	rdcoff.c	FUNCTION_1	WHILE_1	IF_2
0x400008a	          0x4885c0	                           test rax, rax	       120	rdcoff.c	FUNCTION_1	WHILE_1	IF_2
0x400008d	            0x752d	                           jne 0x40000bc	       120	rdcoff.c	FUNCTION_1	WHILE_1	IF_2
0x400008f	      0xbf88000000	                           mov edi, 0x88	       122	rdcoff.c	FUNCTION_1	WHILE_1	IF_2	CALL_3
0x4000094	      0xe800000000	                          call 0x4000099	       122	rdcoff.c	FUNCTION_1	WHILE_1	IF_2	CALL_3
0x4000099	          0x4889c2	                            mov rdx, rax	       122	rdcoff.c	FUNCTION_1	WHILE_1	IF_2	CALL_3
0x400009c	        0x488b45f8	                mov rax, qword [rbp - 8]	       122	rdcoff.c	FUNCTION_1	WHILE_1	IF_2	CALL_3
0x40000a0	          0x488910	                    mov qword [rax], rdx	       122	rdcoff.c	FUNCTION_1	WHILE_1	IF_2	CALL_3
0x40000a3	        0x488b45f8	                mov rax, qword [rbp - 8]	       123	rdcoff.c	FUNCTION_1	WHILE_1	IF_2	CALL_4
0x40000a7	          0x488b00	                    mov rax, qword [rax]	       123	rdcoff.c	FUNCTION_1	WHILE_1	IF_2	CALL_4
0x40000aa	      0xba88000000	                           mov edx, 0x88	       123	rdcoff.c	FUNCTION_1	WHILE_1	IF_2	CALL_4
0x40000af	      0xbe00000000	                              mov esi, 0	       123	rdcoff.c	FUNCTION_1	WHILE_1	IF_2	CALL_4
0x40000b4	          0x4889c7	                            mov rdi, rax	       123	rdcoff.c	FUNCTION_1	WHILE_1	IF_2	CALL_4
0x40000b7	      0xe800000000	                          call 0x40000bc	       123	rdcoff.c	FUNCTION_1	WHILE_1	IF_2	CALL_4
0x40000bc	        0x488b45f8	                mov rax, qword [rbp - 8]	       125	rdcoff.c	FUNCTION_1	WHILE_1
0x40000c0	          0x488b00	                    mov rax, qword [rax]	       125	rdcoff.c	FUNCTION_1	WHILE_1
0x40000c3	        0x488945f8	                mov qword [rbp - 8], rax	       125	rdcoff.c	FUNCTION_1	WHILE_1
0x40000c7	      0x48836de010	            sub qword [rbp - 0x20], 0x10	       126	rdcoff.c	FUNCTION_1	WHILE_1
0x40000cc	      0x48837de00f	            cmp qword [rbp - 0x20], 0xf 	       118	rdcoff.c	FUNCTION_1	WHILE_1
0x40000d1	            0x7fb0	                            jg 0x4000083	       118	rdcoff.c	FUNCTION_1	WHILE_1
0x40000d3	        0x488b45f8	                mov rax, qword [rbp - 8]	       129	rdcoff.c	FUNCTION_1	IF_3
0x40000d7	          0x488b00	                    mov rax, qword [rax]	       129	rdcoff.c	FUNCTION_1	IF_3
0x40000da	          0x4885c0	                           test rax, rax	       129	rdcoff.c	FUNCTION_1	IF_3
0x40000dd	            0x752d	                           jne 0x400010c	       129	rdcoff.c	FUNCTION_1	IF_3
0x40000df	      0xbf88000000	                           mov edi, 0x88	       131	rdcoff.c	FUNCTION_1	IF_3	CALL_5
0x40000e4	      0xe800000000	                          call 0x40000e9	       131	rdcoff.c	FUNCTION_1	IF_3	CALL_5
0x40000e9	          0x4889c2	                            mov rdx, rax	       131	rdcoff.c	FUNCTION_1	IF_3	CALL_5
0x40000ec	        0x488b45f8	                mov rax, qword [rbp - 8]	       131	rdcoff.c	FUNCTION_1	IF_3	CALL_5
0x40000f0	          0x488910	                    mov qword [rax], rdx	       131	rdcoff.c	FUNCTION_1	IF_3	CALL_5
0x40000f3	        0x488b45f8	                mov rax, qword [rbp - 8]	       132	rdcoff.c	FUNCTION_1	IF_3	CALL_6
0x40000f7	          0x488b00	                    mov rax, qword [rax]	       132	rdcoff.c	FUNCTION_1	IF_3	CALL_6
0x40000fa	      0xba88000000	                           mov edx, 0x88	       132	rdcoff.c	FUNCTION_1	IF_3	CALL_6
0x40000ff	      0xbe00000000	                              mov esi, 0	       132	rdcoff.c	FUNCTION_1	IF_3	CALL_6
0x4000104	          0x4889c7	                            mov rdi, rax	       132	rdcoff.c	FUNCTION_1	IF_3	CALL_6
0x4000107	      0xe800000000	                          call 0x400010c	       132	rdcoff.c	FUNCTION_1	IF_3	CALL_6
0x400010c	        0x488b45f8	                mov rax, qword [rbp - 8]	       135	rdcoff.c	FUNCTION_1
0x4000110	          0x488b00	                    mov rax, qword [rax]	       135	rdcoff.c	FUNCTION_1
0x4000113	        0x488d5008	                      lea rdx, [rax + 8]	       135	rdcoff.c	FUNCTION_1
0x4000117	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       135	rdcoff.c	FUNCTION_1
0x400011b	        0x48c1e003	                              shl rax, 3	       135	rdcoff.c	FUNCTION_1
0x400011f	          0x4801d0	                            add rax, rdx	       135	rdcoff.c	FUNCTION_1
0x4000122	              0xc9	                                   leave	       136	rdcoff.c	FUNCTION_1
0x4000123	              0xc3	                                     ret	       136	rdcoff.c	FUNCTION_1
parse_coff	FOR,1:DO,0:functions,0:SWITCH,1:IF,28:CALL,43:WHILE,2:ELSE,5	512
0x40011e9	              0x55	                                push rbp	       660	rdcoff.c	FUNCTION_8
0x40011ea	          0x4889e5	                            mov rbp, rsp	       660	rdcoff.c	FUNCTION_8
0x40011ed	              0x53	                                push rbx	       660	rdcoff.c	FUNCTION_8
0x40011ee	    0x4881ecb80100	                          sub rsp, 0x1b8	       660	rdcoff.c	FUNCTION_8
0x40011f5	    0x4889bd58feff	            mov qword [rbp - 0x1a8], rdi	       660	rdcoff.c	FUNCTION_8
0x40011fc	    0x4889b550feff	            mov qword [rbp - 0x1b0], rsi	       660	rdcoff.c	FUNCTION_8
0x4001203	    0x48899548feff	            mov qword [rbp - 0x1b8], rdx	       660	rdcoff.c	FUNCTION_8
0x400120a	    0x48898d40feff	            mov qword [rbp - 0x1c0], rcx	       660	rdcoff.c	FUNCTION_8
0x4001211	    0x64488b042528	                mov rax, qword fs:[0x28]	       660	rdcoff.c	FUNCTION_8
0x400121a	        0x488945e8	             mov qword [rbp - 0x18], rax	       660	rdcoff.c	FUNCTION_8
0x400121e	            0x31c0	                            xor eax, eax	       660	rdcoff.c	FUNCTION_8
0x4001220	    0x488b8550feff	            mov rax, qword [rbp - 0x1b0]	       673	rdcoff.c	FUNCTION_8
0x4001227	    0x488985d0feff	            mov qword [rbp - 0x130], rax	       673	rdcoff.c	FUNCTION_8
0x400122e	    0x488b8548feff	            mov rax, qword [rbp - 0x1b8]	       674	rdcoff.c	FUNCTION_8
0x4001235	    0x488985d8feff	            mov qword [rbp - 0x128], rax	       674	rdcoff.c	FUNCTION_8
0x400123c	    0x48c785e0feff	              mov qword [rbp - 0x120], 0	       675	rdcoff.c	FUNCTION_8
0x4001247	    0x48c785e8feff	              mov qword [rbp - 0x118], 0	       676	rdcoff.c	FUNCTION_8
0x4001252	    0x48c78550ffff	               mov qword [rbp - 0xb0], 0	       678	rdcoff.c	FUNCTION_8
0x400125d	    0xc7856cfeffff	              mov dword [rbp - 0x194], 0	       679	rdcoff.c	FUNCTION_8	FOR_1
0x4001267	            0xeb1b	                           jmp 0x4001284	       679	rdcoff.c	FUNCTION_8	FOR_1
0x4001269	    0x8b856cfeffff	            mov eax, dword [rbp - 0x194]	       680	rdcoff.c	FUNCTION_8	FOR_1
0x400126f	            0x4898	                                    cdqe	       680	rdcoff.c	FUNCTION_8	FOR_1
0x4001271	    0x48c784c558ff	       mov qword [rbp + rax*8 - 0xa8], 0	       680	rdcoff.c	FUNCTION_8	FOR_1
0x400127d	    0x83856cfeffff	              add dword [rbp - 0x194], 1	       679	rdcoff.c	FUNCTION_8	FOR_1
0x4001284	    0x83bd6cfeffff	          cmp dword [rbp - 0x194], 0x10 	       679	rdcoff.c	FUNCTION_8	FOR_1
0x400128b	            0x7edc	                           jle 0x4001269	       679	rdcoff.c	FUNCTION_8	FOR_1
0x400128d	    0x48c78580feff	mov qword [rbp - 0x180], 0xffffffffffffffff	       682	rdcoff.c	FUNCTION_8
0x4001298	    0x48c78588feff	              mov qword [rbp - 0x178], 0	       683	rdcoff.c	FUNCTION_8
0x40012a3	    0xc78570feffff	              mov dword [rbp - 0x190], 0	       684	rdcoff.c	FUNCTION_8
0x40012ad	    0xc78574feffff	              mov dword [rbp - 0x18c], 0	       685	rdcoff.c	FUNCTION_8
0x40012b7	    0x48c78590feff	              mov qword [rbp - 0x170], 0	       686	rdcoff.c	FUNCTION_8
0x40012c2	    0x48c78598feff	              mov qword [rbp - 0x168], 0	       687	rdcoff.c	FUNCTION_8
0x40012cd	    0xc78578feffff	              mov dword [rbp - 0x188], 0	       688	rdcoff.c	FUNCTION_8
0x40012d7	      0xe99e080000	                           jmp 0x4001b7a	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x40012dc	    0x488b85e0feff	            mov rax, qword [rbp - 0x120]	       699	rdcoff.c	FUNCTION_8	WHILE_1
0x40012e3	    0x488d14c50000	                        lea rdx, [rax*8]	       699	rdcoff.c	FUNCTION_8	WHILE_1
0x40012eb	    0x488b8550feff	            mov rax, qword [rbp - 0x1b0]	       699	rdcoff.c	FUNCTION_8	WHILE_1
0x40012f2	          0x4801d0	                            add rax, rdx	       699	rdcoff.c	FUNCTION_8	WHILE_1
0x40012f5	          0x488b00	                    mov rax, qword [rax]	       699	rdcoff.c	FUNCTION_8	WHILE_1
0x40012f8	    0x488985a8feff	            mov qword [rbp - 0x158], rax	       699	rdcoff.c	FUNCTION_8	WHILE_1
0x40012ff	    0x488d95f0feff	                  lea rdx, [rbp - 0x110]	       701	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_1
0x4001306	    0x488b8da8feff	            mov rcx, qword [rbp - 0x158]	       701	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_1
0x400130d	    0x488b8558feff	            mov rax, qword [rbp - 0x1a8]	       701	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_1
0x4001314	          0x4889ce	                            mov rsi, rcx	       701	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_1
0x4001317	          0x4889c7	                            mov rdi, rax	       701	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_1
0x400131a	      0xe800000000	                          call 0x400131f	       701	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_1
0x400131f	            0x85c0	                           test eax, eax	       701	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_1
0x4001321	            0x7533	                           jne 0x4001356	       701	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_1
0x4001323	      0xe800000000	                          call 0x4001328	       703	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_3
0x4001328	            0x89c7	                            mov edi, eax	       703	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_3
0x400132a	      0xe800000000	                          call 0x400132f	       703	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_3
0x400132f	          0x4889c3	                            mov rbx, rax	       703	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_3
0x4001332	      0xbf00000000	                              mov edi, 0	       703	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_3
0x4001337	      0xe800000000	                          call 0x400133c	       703	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_3
0x400133c	          0x4889de	                            mov rsi, rbx	       703	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_3
0x400133f	          0x4889c7	                            mov rdi, rax	       703	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_3
0x4001342	      0xb800000000	                              mov eax, 0	       703	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_3
0x4001347	      0xe800000000	                          call 0x400134c	       703	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_3
0x400134c	      0xb800000000	                              mov eax, 0	       705	rdcoff.c	FUNCTION_8	WHILE_1	IF_1
0x4001351	      0xe93d080000	                           jmp 0x4001b93	       705	rdcoff.c	FUNCTION_8	WHILE_1	IF_1
0x4001356	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       708	rdcoff.c	FUNCTION_8	WHILE_1	CALL_6
0x400135d	        0x488b4008	                mov rax, qword [rax + 8]	       708	rdcoff.c	FUNCTION_8	WHILE_1	CALL_6
0x4001361	    0x488985b0feff	            mov qword [rbp - 0x150], rax	       708	rdcoff.c	FUNCTION_8	WHILE_1	CALL_6
0x4001368	    0x488b85e8feff	            mov rax, qword [rbp - 0x118]	       710	rdcoff.c	FUNCTION_8	WHILE_1
0x400136f	    0x488985b8feff	            mov qword [rbp - 0x148], rax	       710	rdcoff.c	FUNCTION_8	WHILE_1
0x4001376	    0x488b85e0feff	            mov rax, qword [rbp - 0x120]	       712	rdcoff.c	FUNCTION_8	WHILE_1
0x400137d	        0x4883c001	                              add rax, 1	       712	rdcoff.c	FUNCTION_8	WHILE_1
0x4001381	    0x488985e0feff	            mov qword [rbp - 0x120], rax	       712	rdcoff.c	FUNCTION_8	WHILE_1
0x4001388	    0x488b95e8feff	            mov rdx, qword [rbp - 0x118]	       713	rdcoff.c	FUNCTION_8	WHILE_1
0x400138f	     0xfb68511ffff	            movzx eax, byte [rbp - 0xef]	       713	rdcoff.c	FUNCTION_8	WHILE_1
0x4001396	           0xfb6c0	                           movzx eax, al	       713	rdcoff.c	FUNCTION_8	WHILE_1
0x4001399	          0x83c001	                              add eax, 1	       713	rdcoff.c	FUNCTION_8	WHILE_1
0x400139c	            0x4898	                                    cdqe	       713	rdcoff.c	FUNCTION_8	WHILE_1
0x400139e	          0x4801d0	                            add rax, rdx	       713	rdcoff.c	FUNCTION_8	WHILE_1
0x40013a1	    0x488985e8feff	            mov qword [rbp - 0x118], rax	       713	rdcoff.c	FUNCTION_8	WHILE_1
0x40013a8	     0xfb68511ffff	            movzx eax, byte [rbp - 0xef]	       717	rdcoff.c	FUNCTION_8	WHILE_1	IF_2
0x40013af	            0x84c0	                             test al, al	       717	rdcoff.c	FUNCTION_8	WHILE_1	IF_2
0x40013b1	            0x750d	                           jne 0x40013c0	       717	rdcoff.c	FUNCTION_8	WHILE_1	IF_2
0x40013b3	    0x48c785a0feff	              mov qword [rbp - 0x160], 0	       718	rdcoff.c	FUNCTION_8	WHILE_1	IF_2
0x40013be	            0xeb6a	                           jmp 0x400142a	       718	rdcoff.c	FUNCTION_8	WHILE_1	IF_2
0x40013c0	    0x488d9520ffff	                   lea rdx, [rbp - 0xe0]	       721	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_7
0x40013c7	    0x488bb5a8feff	            mov rsi, qword [rbp - 0x158]	       721	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_7
0x40013ce	    0x488b8558feff	            mov rax, qword [rbp - 0x1a8]	       721	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_7
0x40013d5	          0x4889d1	                            mov rcx, rdx	       721	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_7
0x40013d8	      0xba00000000	                              mov edx, 0	       721	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_7
0x40013dd	          0x4889c7	                            mov rdi, rax	       721	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_7
0x40013e0	      0xe800000000	                          call 0x40013e5	       721	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_7
0x40013e5	            0x85c0	                           test eax, eax	       721	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_7
0x40013e7	            0x7533	                           jne 0x400141c	       721	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_7
0x40013e9	      0xe800000000	                          call 0x40013ee	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x40013ee	            0x89c7	                            mov edi, eax	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x40013f0	      0xe800000000	                          call 0x40013f5	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x40013f5	          0x4889c3	                            mov rbx, rax	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x40013f8	      0xbf00000000	                              mov edi, 0	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x40013fd	      0xe800000000	                          call 0x4001402	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x4001402	          0x4889de	                            mov rsi, rbx	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x4001405	          0x4889c7	                            mov rdi, rax	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x4001408	      0xb800000000	                              mov eax, 0	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x400140d	      0xe800000000	                          call 0x4001412	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x4001412	      0xb800000000	                              mov eax, 0	       725	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3
0x4001417	      0xe977070000	                           jmp 0x4001b93	       725	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3
0x400141c	    0x488d8520ffff	                   lea rax, [rbp - 0xe0]	       727	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1
0x4001423	    0x488985a0feff	            mov qword [rbp - 0x160], rax	       727	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1
0x400142a	    0x488b85b8feff	            mov rax, qword [rbp - 0x148]	       730	rdcoff.c	FUNCTION_8	WHILE_1	IF_4
0x4001431	    0x483b8580feff	            cmp rax, qword [rbp - 0x180]	       730	rdcoff.c	FUNCTION_8	WHILE_1	IF_4
0x4001438	            0x752d	                           jne 0x4001467	       730	rdcoff.c	FUNCTION_8	WHILE_1	IF_4
0x400143a	     0xfb68510ffff	            movzx eax, byte [rbp - 0xf0]	       730	rdcoff.c	FUNCTION_8	WHILE_1	IF_4
0x4001441	            0x3c67	                            cmp al, 0x67	       730	rdcoff.c	FUNCTION_8	WHILE_1	IF_4
0x4001443	            0x7422	                            je 0x4001467	       730	rdcoff.c	FUNCTION_8	WHILE_1	IF_4
0x4001445	    0x488b8540feff	            mov rax, qword [rbp - 0x1c0]	       734	rdcoff.c	FUNCTION_8	WHILE_1	IF_4	IF_5	CALL_12
0x400144c	      0xbe00000000	                              mov esi, 0	       734	rdcoff.c	FUNCTION_8	WHILE_1	IF_4	IF_5	CALL_12
0x4001451	          0x4889c7	                            mov rdi, rax	       734	rdcoff.c	FUNCTION_8	WHILE_1	IF_4	IF_5	CALL_12
0x4001454	      0xe800000000	                          call 0x4001459	       734	rdcoff.c	FUNCTION_8	WHILE_1	IF_4	IF_5	CALL_12
0x4001459	            0x85c0	                           test eax, eax	       734	rdcoff.c	FUNCTION_8	WHILE_1	IF_4	IF_5	CALL_12
0x400145b	            0x750a	                           jne 0x4001467	       734	rdcoff.c	FUNCTION_8	WHILE_1	IF_4	IF_5	CALL_12
0x400145d	      0xb800000000	                              mov eax, 0	       735	rdcoff.c	FUNCTION_8	WHILE_1	IF_4	IF_5
0x4001462	      0xe92c070000	                           jmp 0x4001b93	       735	rdcoff.c	FUNCTION_8	WHILE_1	IF_4	IF_5
0x4001467	     0xfb68510ffff	            movzx eax, byte [rbp - 0xf0]	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x400146e	           0xfb6c0	                           movzx eax, al	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4001471	          0x83f864	                           cmp eax, 0x64	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4001474	     0xf848a050000	                            je 0x4001a04	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x400147a	          0x83f864	                           cmp eax, 0x64	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x400147d	            0x7f3c	                            jg 0x40014bb	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x400147f	          0x83f805	                              cmp eax, 5	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4001482	     0xf84df060000	                            je 0x4001b67	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4001488	          0x83f805	                              cmp eax, 5	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x400148b	            0x7f17	                            jg 0x40014a4	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x400148d	          0x83f802	                              cmp eax, 2	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4001490	     0xf84a4000000	                            je 0x400153a	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4001496	          0x83f803	                              cmp eax, 3	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4001499	     0xf848b000000	                            je 0x400152a	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x400149f	      0xe916060000	                           jmp 0x4001aba	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x40014a4	          0x83f807	                              cmp eax, 7	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x40014a7	     0xf84ba060000	                            je 0x4001b67	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x40014ad	          0x83f80e	                            cmp eax, 0xe	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x40014b0	     0xf84b1060000	                            je 0x4001b67	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x40014b6	      0xe9ff050000	                           jmp 0x4001aba	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x40014bb	          0x83f86a	                           cmp eax, 0x6a	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x40014be	            0x7f1c	                            jg 0x40014dc	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x40014c0	          0x83f868	                           cmp eax, 0x68	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x40014c3	     0xf8d9e060000	                           jge 0x4001b67	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x40014c9	          0x83f865	                           cmp eax, 0x65	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x40014cc	     0xf840e020000	                            je 0x40016e0	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x40014d2	          0x83f867	                           cmp eax, 0x67	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x40014d5	            0x741a	                            je 0x40014f1	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x40014d7	      0xe9de050000	                           jmp 0x4001aba	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x40014dc	          0x83f87f	                           cmp eax, 0x7f	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x40014df	            0x7459	                            je 0x400153a	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x40014e1	      0x3dff000000	                           cmp eax, 0xff	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x40014e6	     0xf847b060000	                            je 0x4001b67	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x40014ec	      0xe9c9050000	                           jmp 0x4001aba	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x40014f1	    0x488b8500ffff	            mov rax, qword [rbp - 0x100]	       751	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x40014f8	    0x48898580feff	            mov qword [rbp - 0x180], rax	       751	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x40014ff	    0x488b95b0feff	            mov rdx, qword [rbp - 0x150]	       752	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_6	CALL_13
0x4001506	    0x488b8540feff	            mov rax, qword [rbp - 0x1c0]	       752	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_6	CALL_13
0x400150d	          0x4889d6	                            mov rsi, rdx	       752	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_6	CALL_13
0x4001510	          0x4889c7	                            mov rdi, rax	       752	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_6	CALL_13
0x4001513	      0xe800000000	                          call 0x4001518	       752	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_6	CALL_13
0x4001518	            0x85c0	                           test eax, eax	       752	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_6	CALL_13
0x400151a	     0xf854a060000	                           jne 0x4001b6a	       752	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_6	CALL_13
0x4001520	      0xb800000000	                              mov eax, 0	       753	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_6
0x4001525	      0xe969060000	                           jmp 0x4001b93	       753	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_6
0x400152a	     0xfb7850effff	            movzx eax, word [rbp - 0xf2]	       759	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_7
0x4001531	          0x6685c0	                             test ax, ax	       759	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_7
0x4001534	     0xf8433060000	                            je 0x4001b6d	       759	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_7
0x400153a	     0xfb7850effff	            movzx eax, word [rbp - 0xf2]	       764	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_14
0x4001541	           0xfb7d0	                           movzx edx, ax	       764	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_14
0x4001544	    0x488b8558feff	            mov rax, qword [rbp - 0x1a8]	       764	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_14
0x400154b	    0x488b80f80000	            mov rax, qword [rax + 0xf8] 	       764	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_14
0x4001552	          0x8b4040	            mov eax, dword [rax + 0x40] 	       764	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_14
0x4001555	            0x89c0	                            mov eax, eax	       764	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_14
0x4001557	          0x4821c2	                            and rdx, rax	       764	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_14
0x400155a	    0x488b8558feff	            mov rax, qword [rbp - 0x1a8]	       764	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_14
0x4001561	    0x488b80f80000	            mov rax, qword [rax + 0xf8] 	       764	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_14
0x4001568	          0x8b403c	            mov eax, dword [rax + 0x3c] 	       764	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_14
0x400156b	      0xbe02000000	                              mov esi, 2	       764	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_14
0x4001570	            0x89c1	                            mov ecx, eax	       764	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_14
0x4001572	          0x48d3e6	                             shl rsi, cl	       764	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_14
0x4001575	          0x4889f0	                            mov rax, rsi	       764	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_14
0x4001578	          0x4839c2	                            cmp rdx, rax	       764	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_14
0x400157b	     0xf85a8000000	                           jne 0x4001629	       764	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_14
0x4001581	    0x488b85b0feff	            mov rax, qword [rbp - 0x150]	       766	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8
0x4001588	    0x48898588feff	            mov qword [rbp - 0x178], rax	       766	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8
0x400158f	     0xfb68510ffff	            movzx eax, byte [rbp - 0xf0]	       767	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8
0x4001596	           0xfb6c0	                           movzx eax, al	       767	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8
0x4001599	    0x898570feffff	            mov dword [rbp - 0x190], eax	       767	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8
0x400159f	     0xfb7850effff	            movzx eax, word [rbp - 0xf2]	       768	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8
0x40015a6	           0xfb7c0	                           movzx eax, ax	       768	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8
0x40015a9	    0x898574feffff	            mov dword [rbp - 0x18c], eax	       768	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8
0x40015af	     0xfb68511ffff	            movzx eax, byte [rbp - 0xef]	       769	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	IF_9
0x40015b6	            0x84c0	                             test al, al	       769	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	IF_9
0x40015b8	            0x7430	                            je 0x40015ea	       769	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	IF_9
0x40015ba	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       770	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_15
0x40015c1	        0x488b4020	            mov rax, qword [rax + 0x20] 	       770	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_15
0x40015c5	        0x488b5028	            mov rdx, qword [rax + 0x28] 	       770	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_15
0x40015c9	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       770	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_15
0x40015d0	        0x488b4010	            mov rax, qword [rax + 0x10] 	       770	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_15
0x40015d4	          0x4801c2	                            add rdx, rax	       770	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_15
0x40015d7	    0x488b8528ffff	             mov rax, qword [rbp - 0xd8]	       770	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_15
0x40015de	          0x4801d0	                            add rax, rdx	       770	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_15
0x40015e1	    0x48898590feff	            mov qword [rbp - 0x170], rax	       770	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_15
0x40015e8	            0xeb0b	                           jmp 0x40015f5	       770	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_15
0x40015ea	    0x48c78590feff	              mov qword [rbp - 0x170], 0	       772	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	ELSE_2
0x40015f5	    0x488b8558feff	            mov rax, qword [rbp - 0x1a8]	       773	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_16
0x40015fc	        0x488b4008	                mov rax, qword [rax + 8]	       773	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_16
0x4001600	    0x488b80300200	           mov rax, qword [rax + 0x230] 	       773	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_16
0x4001607	    0x488b8da8feff	            mov rcx, qword [rbp - 0x158]	       773	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_16
0x400160e	    0x488b9558feff	            mov rdx, qword [rbp - 0x1a8]	       773	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_16
0x4001615	          0x4889ce	                            mov rsi, rcx	       773	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_16
0x4001618	          0x4889d7	                            mov rdi, rdx	       773	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_16
0x400161b	            0xffd0	                                call rax	       773	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_16
0x400161d	    0x48898598feff	            mov qword [rbp - 0x168], rax	       773	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_16
0x4001624	      0xe951050000	                           jmp 0x4001b7a	       774	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8
0x4001629	     0xfb7850effff	            movzx eax, word [rbp - 0xf2]	       777	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4001630	           0xfb7f8	                           movzx edi, ax	       776	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_17
0x4001633	    0x4c8b85a0feff	             mov r8, qword [rbp - 0x160]	       776	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_17
0x400163a	    0x488b8db8feff	            mov rcx, qword [rbp - 0x148]	       776	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_17
0x4001641	    0x488d9550ffff	                   lea rdx, [rbp - 0xb0]	       776	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_17
0x4001648	    0x488db5d0feff	                  lea rsi, [rbp - 0x130]	       776	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_17
0x400164f	    0x488b8558feff	            mov rax, qword [rbp - 0x1a8]	       776	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_17
0x4001656	    0xffb540feffff	                push qword [rbp - 0x1c0]	       776	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_17
0x400165c	            0x6a01	                                  push 1	       776	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_17
0x400165e	          0x4d89c1	                              mov r9, r8	       776	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_17
0x4001661	          0x4189f8	                            mov r8d, edi	       776	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_17
0x4001664	          0x4889c7	                            mov rdi, rax	       776	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_17
0x4001667	      0xe8b8eaffff	                call sym.parse_coff_type	       776	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_17
0x400166c	        0x4883c410	                           add rsp, 0x10	       776	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_17
0x4001670	    0x488985c0feff	            mov qword [rbp - 0x140], rax	       776	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_17
0x4001677	    0x4883bdc0feff	              cmp qword [rbp - 0x140], 0	       778	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_10
0x400167f	            0x750a	                           jne 0x400168b	       778	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_10
0x4001681	      0xb800000000	                              mov eax, 0	       779	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_10
0x4001686	      0xe908050000	                           jmp 0x4001b93	       779	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_10
0x400168b	    0x4c8b8d40feff	             mov r9, qword [rbp - 0x1c0]	       780	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_11	CALL_18
0x4001692	    0x4c8d85f0feff	                   lea r8, [rbp - 0x110]	       780	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_11	CALL_18
0x4001699	    0x488b8db8feff	            mov rcx, qword [rbp - 0x148]	       780	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_11	CALL_18
0x40016a0	    0x488b95a8feff	            mov rdx, qword [rbp - 0x158]	       780	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_11	CALL_18
0x40016a7	    0x488db550ffff	                   lea rsi, [rbp - 0xb0]	       780	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_11	CALL_18
0x40016ae	    0x488b8558feff	            mov rax, qword [rbp - 0x1a8]	       780	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_11	CALL_18
0x40016b5	    0x8bbd78feffff	            mov edi, dword [rbp - 0x188]	       780	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_11	CALL_18
0x40016bb	              0x57	                                push rdi	       780	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_11	CALL_18
0x40016bc	    0xffb5c0feffff	                push qword [rbp - 0x140]	       780	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_11	CALL_18
0x40016c2	          0x4889c7	                            mov rdi, rax	       780	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_11	CALL_18
0x40016c5	      0xe85bf8ffff	              call sym.parse_coff_symbol	       780	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_11	CALL_18
0x40016ca	        0x4883c410	                           add rsp, 0x10	       780	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_11	CALL_18
0x40016ce	            0x85c0	                           test eax, eax	       780	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_11	CALL_18
0x40016d0	     0xf859a040000	                           jne 0x4001b70	       780	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_11	CALL_18
0x40016d6	      0xb800000000	                              mov eax, 0	       782	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_11
0x40016db	      0xe9b3040000	                           jmp 0x4001b93	       782	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_11
0x40016e0	    0x488b85b0feff	            mov rax, qword [rbp - 0x150]	       786	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_19
0x40016e7	      0xbe00000000	                              mov esi, 0	       786	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_19
0x40016ec	          0x4889c7	                            mov rdi, rax	       786	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_19
0x40016ef	      0xe800000000	                          call 0x40016f4	       786	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_19
0x40016f4	            0x85c0	                           test eax, eax	       786	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_19
0x40016f6	     0xf852a020000	                           jne 0x4001926	       786	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_19
0x40016fc	    0x4883bd88feff	              cmp qword [rbp - 0x178], 0	       788	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_13
0x4001704	            0x752e	                           jne 0x4001734	       788	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_13
0x4001706	      0xbf00000000	                              mov edi, 0	       790	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_13	CALL_21
0x400170b	      0xe800000000	                          call 0x4001710	       790	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_13	CALL_21
0x4001710	          0x4889c2	                            mov rdx, rax	       790	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_13	CALL_21
0x4001713	    0x488b85b8feff	            mov rax, qword [rbp - 0x148]	       790	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_13	CALL_21
0x400171a	          0x4889c6	                            mov rsi, rax	       790	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_13	CALL_21
0x400171d	          0x4889d7	                            mov rdi, rdx	       790	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_13	CALL_21
0x4001720	      0xb800000000	                              mov eax, 0	       790	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_13	CALL_21
0x4001725	      0xe800000000	                          call 0x400172a	       790	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_13	CALL_21
0x400172a	      0xb800000000	                              mov eax, 0	       792	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_13
0x400172f	      0xe95f040000	                           jmp 0x4001b93	       792	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_13
0x4001734	    0x488b8558feff	            mov rax, qword [rbp - 0x1a8]	       796	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_23
0x400173b	    0x488b80f80000	            mov rax, qword [rax + 0xf8] 	       796	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_23
0x4001742	          0x8b4044	            mov eax, dword [rax + 0x44] 	       796	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_23
0x4001745	    0x8b9574feffff	            mov edx, dword [rbp - 0x18c]	       796	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_23
0x400174b	            0x89c1	                            mov ecx, eax	       796	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_23
0x400174d	            0xd3fa	                             sar edx, cl	       796	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_23
0x400174f	            0x89d0	                            mov eax, edx	       796	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_23
0x4001751	            0x89c2	                            mov edx, eax	       796	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_23
0x4001753	    0x488b8558feff	            mov rax, qword [rbp - 0x1a8]	       796	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_23
0x400175a	    0x488b80f80000	            mov rax, qword [rax + 0xf8] 	       796	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_23
0x4001761	          0x8b4038	            mov eax, dword [rax + 0x38] 	       796	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_23
0x4001764	            0xf7d0	                                 not eax	       796	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_23
0x4001766	            0x89d1	                            mov ecx, edx	       796	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_23
0x4001768	            0x21c1	                            and ecx, eax	       796	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_23
0x400176a	    0x488b8558feff	            mov rax, qword [rbp - 0x1a8]	       796	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_23
0x4001771	    0x488b80f80000	            mov rax, qword [rax + 0xf8] 	       796	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_23
0x4001778	          0x8b5038	            mov edx, dword [rax + 0x38] 	       796	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_23
0x400177b	    0x8b8574feffff	            mov eax, dword [rbp - 0x18c]	       796	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_23
0x4001781	            0x21d0	                            and eax, edx	       796	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_23
0x4001783	             0x9c8	                             or eax, ecx	       796	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_23
0x4001785	          0x4189c0	                            mov r8d, eax	       795	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_22
0x4001788	    0x488bbda0feff	            mov rdi, qword [rbp - 0x160]	       795	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_22
0x400178f	    0x488b8db8feff	            mov rcx, qword [rbp - 0x148]	       795	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_22
0x4001796	    0x488d9550ffff	                   lea rdx, [rbp - 0xb0]	       795	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_22
0x400179d	    0x488db5d0feff	                  lea rsi, [rbp - 0x130]	       795	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_22
0x40017a4	    0x488b8558feff	            mov rax, qword [rbp - 0x1a8]	       795	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_22
0x40017ab	    0xffb540feffff	                push qword [rbp - 0x1c0]	       795	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_22
0x40017b1	            0x6a00	                                  push 0	       795	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_22
0x40017b3	          0x4989f9	                             mov r9, rdi	       795	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_22
0x40017b6	          0x4889c7	                            mov rdi, rax	       795	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_22
0x40017b9	      0xe866e9ffff	                call sym.parse_coff_type	       795	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_22
0x40017be	        0x4883c410	                           add rsp, 0x10	       795	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_22
0x40017c2	    0x488985c0feff	            mov qword [rbp - 0x140], rax	       795	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_22
0x40017c9	    0x4883bdc0feff	              cmp qword [rbp - 0x140], 0	       797	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_14
0x40017d1	            0x750a	                           jne 0x40017dd	       797	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_14
0x40017d3	      0xb800000000	                              mov eax, 0	       798	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_14
0x40017d8	      0xe9b6030000	                           jmp 0x4001b93	       798	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_14
0x40017dd	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       802	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15	CALL_26
0x40017e4	        0x488b4020	            mov rax, qword [rax + 0x20] 	       802	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15	CALL_26
0x40017e8	        0x488b5028	            mov rdx, qword [rax + 0x28] 	       802	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15	CALL_26
0x40017ec	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       802	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15	CALL_26
0x40017f3	        0x488b4010	            mov rax, qword [rax + 0x10] 	       802	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15	CALL_26
0x40017f7	        0x488d1c02	                    lea rbx, [rdx + rax]	       800	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15	CALL_24
0x40017fb	    0x8b8570feffff	            mov eax, dword [rbp - 0x190]	       800	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15	CALL_24
0x4001801	            0x89c7	                            mov edi, eax	       800	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15	CALL_24
0x4001803	      0xe8bef9ffff	         call sym.external_coff_symbol_p	       800	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15	CALL_24
0x4001808	            0x89c1	                            mov ecx, eax	       800	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15	CALL_24
0x400180a	    0x488b95c0feff	            mov rdx, qword [rbp - 0x140]	       800	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15	CALL_24
0x4001811	    0x488bb588feff	            mov rsi, qword [rbp - 0x178]	       800	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15	CALL_24
0x4001818	    0x488b8540feff	            mov rax, qword [rbp - 0x1c0]	       800	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15	CALL_24
0x400181f	          0x4989d8	                             mov r8, rbx	       800	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15	CALL_24
0x4001822	          0x4889c7	                            mov rdi, rax	       800	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15	CALL_24
0x4001825	      0xe800000000	                          call 0x400182a	       800	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15	CALL_24
0x400182a	            0x85c0	                           test eax, eax	       800	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15	CALL_24
0x400182c	            0x750a	                           jne 0x4001838	       800	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15	CALL_24
0x400182e	      0xb800000000	                              mov eax, 0	       803	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15
0x4001833	      0xe95b030000	                           jmp 0x4001b93	       803	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15
0x4001838	    0x4883bd98feff	              cmp qword [rbp - 0x168], 0	       805	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16
0x4001840	     0xf84a7000000	                            je 0x40018ed	       805	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16
0x4001846	     0xfb68511ffff	            movzx eax, byte [rbp - 0xef]	       810	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	IF_17
0x400184d	            0x84c0	                             test al, al	       810	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	IF_17
0x400184f	            0x750c	                           jne 0x400185d	       810	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	IF_17
0x4001851	    0xc7857cfeffff	              mov dword [rbp - 0x184], 0	       811	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	IF_17
0x400185b	            0xeb13	                           jmp 0x4001870	       811	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	IF_17
0x400185d	     0xfb78528ffff	            movzx eax, word [rbp - 0xd8]	       813	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	ELSE_3
0x4001864	           0xfb7c0	                           movzx eax, ax	       813	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	ELSE_3
0x4001867	          0x83e801	                              sub eax, 1	       813	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	ELSE_3
0x400186a	    0x89857cfeffff	            mov dword [rbp - 0x184], eax	       813	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	ELSE_3
0x4001870	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       815	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	CALL_28
0x4001877	        0x488b4020	            mov rax, qword [rax + 0x20] 	       815	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	CALL_28
0x400187b	        0x488b4028	            mov rax, qword [rax + 0x28] 	       815	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	CALL_28
0x400187f	    0x488985c8feff	            mov qword [rbp - 0x138], rax	       815	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	CALL_28
0x4001886	    0x48838598feff	           add qword [rbp - 0x168], 0x10	       817	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16
0x400188e	            0xeb50	                           jmp 0x40018e0	       819	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2
0x4001890	    0x488b8598feff	            mov rax, qword [rbp - 0x168]	       823	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2	IF_18
0x4001897	        0x488b5008	                mov rdx, qword [rax + 8]	       823	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2	IF_18
0x400189b	    0x488b85c8feff	            mov rax, qword [rbp - 0x138]	       821	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2	IF_18	CALL_29
0x40018a2	          0x4801c2	                            add rdx, rax	       821	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2	IF_18	CALL_29
0x40018a5	    0x488b8598feff	            mov rax, qword [rbp - 0x168]	       822	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2	IF_18
0x40018ac	            0x8b08	                    mov ecx, dword [rax]	       822	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2	IF_18
0x40018ae	    0x8b857cfeffff	            mov eax, dword [rbp - 0x184]	       822	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2	IF_18
0x40018b4	             0x1c8	                            add eax, ecx	       822	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2	IF_18
0x40018b6	            0x89c1	                            mov ecx, eax	       821	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2	IF_18	CALL_29
0x40018b8	    0x488b8540feff	            mov rax, qword [rbp - 0x1c0]	       821	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2	IF_18	CALL_29
0x40018bf	          0x4889ce	                            mov rsi, rcx	       821	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2	IF_18	CALL_29
0x40018c2	          0x4889c7	                            mov rdi, rax	       821	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2	IF_18	CALL_29
0x40018c5	      0xe800000000	                          call 0x40018ca	       821	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2	IF_18	CALL_29
0x40018ca	            0x85c0	                           test eax, eax	       821	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2	IF_18	CALL_29
0x40018cc	            0x750a	                           jne 0x40018d8	       821	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2	IF_18	CALL_29
0x40018ce	      0xb800000000	                              mov eax, 0	       824	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2	IF_18
0x40018d3	      0xe9bb020000	                           jmp 0x4001b93	       824	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2	IF_18
0x40018d8	    0x48838598feff	           add qword [rbp - 0x168], 0x10	       825	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2
0x40018e0	    0x488b8598feff	            mov rax, qword [rbp - 0x168]	       819	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2
0x40018e7	            0x8b00	                    mov eax, dword [rax]	       819	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2
0x40018e9	            0x85c0	                           test eax, eax	       819	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2
0x40018eb	            0x75a3	                           jne 0x4001890	       819	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2
0x40018ed	    0x48c78588feff	              mov qword [rbp - 0x178], 0	       829	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12
0x40018f8	    0x48c78598feff	              mov qword [rbp - 0x168], 0	       830	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12
0x4001903	    0xc78570feffff	              mov dword [rbp - 0x190], 0	       831	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12
0x400190d	    0xc78574feffff	              mov dword [rbp - 0x18c], 0	       832	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12
0x4001917	    0xc78578feffff	              mov dword [rbp - 0x188], 1	       834	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12
0x4001921	      0xe94d020000	                           jmp 0x4001b73	       852	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4001926	    0x488b85b0feff	            mov rax, qword [rbp - 0x150]	       836	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	CALL_30
0x400192d	      0xbe00000000	                              mov esi, 0	       836	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	CALL_30
0x4001932	          0x4889c7	                            mov rdi, rax	       836	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	CALL_30
0x4001935	      0xe800000000	                          call 0x400193a	       836	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	CALL_30
0x400193a	            0x85c0	                           test eax, eax	       836	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	CALL_30
0x400193c	     0xf8531020000	                           jne 0x4001b73	       836	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	CALL_30
0x4001942	    0x83bd78feffff	              cmp dword [rbp - 0x188], 0	       838	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20
0x4001949	            0x752e	                           jne 0x4001979	       838	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20
0x400194b	      0xbf00000000	                              mov edi, 0	       840	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20	CALL_32
0x4001950	      0xe800000000	                          call 0x4001955	       840	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20	CALL_32
0x4001955	          0x4889c2	                            mov rdx, rax	       840	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20	CALL_32
0x4001958	    0x488b85b8feff	            mov rax, qword [rbp - 0x148]	       840	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20	CALL_32
0x400195f	          0x4889c6	                            mov rsi, rax	       840	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20	CALL_32
0x4001962	          0x4889d7	                            mov rdi, rdx	       840	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20	CALL_32
0x4001965	      0xb800000000	                              mov eax, 0	       840	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20	CALL_32
0x400196a	      0xe800000000	                          call 0x400196f	       840	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20	CALL_32
0x400196f	      0xb800000000	                              mov eax, 0	       841	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20
0x4001974	      0xe91a020000	                           jmp 0x4001b93	       841	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20
0x4001979	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       844	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_21	CALL_33
0x4001980	        0x488b4020	            mov rax, qword [rax + 0x20] 	       844	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_21	CALL_33
0x4001984	        0x488b5028	            mov rdx, qword [rax + 0x28] 	       844	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_21	CALL_33
0x4001988	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       844	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_21	CALL_33
0x400198f	        0x488b4010	            mov rax, qword [rax + 0x10] 	       844	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_21	CALL_33
0x4001993	          0x4801d0	                            add rax, rdx	       844	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_21	CALL_33
0x4001996	    0x483b8590feff	            cmp rax, qword [rbp - 0x170]	       844	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_21	CALL_33
0x400199d	            0x7624	                           jbe 0x40019c3	       844	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_21	CALL_33
0x400199f	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       845	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	CALL_34
0x40019a6	        0x488b4020	            mov rax, qword [rax + 0x20] 	       845	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	CALL_34
0x40019aa	        0x488b5028	            mov rdx, qword [rax + 0x28] 	       845	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	CALL_34
0x40019ae	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       845	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	CALL_34
0x40019b5	        0x488b4010	            mov rax, qword [rax + 0x10] 	       845	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	CALL_34
0x40019b9	          0x4801d0	                            add rax, rdx	       845	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	CALL_34
0x40019bc	    0x48898590feff	            mov qword [rbp - 0x170], rax	       845	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	CALL_34
0x40019c3	    0x488b9590feff	            mov rdx, qword [rbp - 0x170]	       846	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_22	CALL_35
0x40019ca	    0x488b8540feff	            mov rax, qword [rbp - 0x1c0]	       846	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_22	CALL_35
0x40019d1	          0x4889d6	                            mov rsi, rdx	       846	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_22	CALL_35
0x40019d4	          0x4889c7	                            mov rdi, rax	       846	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_22	CALL_35
0x40019d7	      0xe800000000	                          call 0x40019dc	       846	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_22	CALL_35
0x40019dc	            0x85c0	                           test eax, eax	       846	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_22	CALL_35
0x40019de	            0x750a	                           jne 0x40019ea	       846	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_22	CALL_35
0x40019e0	      0xb800000000	                              mov eax, 0	       847	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_22
0x40019e5	      0xe9a9010000	                           jmp 0x4001b93	       847	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_22
0x40019ea	    0x48c78590feff	              mov qword [rbp - 0x170], 0	       849	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19
0x40019f5	    0xc78578feffff	              mov dword [rbp - 0x188], 0	       850	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19
0x40019ff	      0xe96f010000	                           jmp 0x4001b73	       852	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4001a04	    0x488b85b0feff	            mov rax, qword [rbp - 0x150]	       855	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	CALL_36
0x4001a0b	      0xbe00000000	                              mov esi, 0	       855	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	CALL_36
0x4001a10	          0x4889c7	                            mov rdi, rax	       855	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	CALL_36
0x4001a13	      0xe800000000	                          call 0x4001a18	       855	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	CALL_36
0x4001a18	            0x85c0	                           test eax, eax	       855	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	CALL_36
0x4001a1a	            0x7541	                           jne 0x4001a5d	       855	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	CALL_36
0x4001a1c	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       857	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	IF_24	CALL_38
0x4001a23	        0x488b4020	            mov rax, qword [rax + 0x20] 	       857	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	IF_24	CALL_38
0x4001a27	        0x488b5028	            mov rdx, qword [rax + 0x28] 	       857	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	IF_24	CALL_38
0x4001a2b	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       857	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	IF_24	CALL_38
0x4001a32	        0x488b4010	            mov rax, qword [rax + 0x10] 	       857	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	IF_24	CALL_38
0x4001a36	          0x4801c2	                            add rdx, rax	       857	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	IF_24	CALL_38
0x4001a39	    0x488b8540feff	            mov rax, qword [rbp - 0x1c0]	       857	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	IF_24	CALL_38
0x4001a40	          0x4889d6	                            mov rsi, rdx	       857	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	IF_24	CALL_38
0x4001a43	          0x4889c7	                            mov rdi, rax	       857	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	IF_24	CALL_38
0x4001a46	      0xe800000000	                          call 0x4001a4b	       857	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	IF_24	CALL_38
0x4001a4b	            0x85c0	                           test eax, eax	       857	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	IF_24	CALL_38
0x4001a4d	     0xf8523010000	                           jne 0x4001b76	       857	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	IF_24	CALL_38
0x4001a53	      0xb800000000	                              mov eax, 0	       858	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	IF_24
0x4001a58	      0xe936010000	                           jmp 0x4001b93	       858	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	IF_24
0x4001a5d	    0x488b85b0feff	            mov rax, qword [rbp - 0x150]	       860	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	CALL_39
0x4001a64	      0xbe00000000	                              mov esi, 0	       860	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	CALL_39
0x4001a69	          0x4889c7	                            mov rdi, rax	       860	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	CALL_39
0x4001a6c	      0xe800000000	                          call 0x4001a71	       860	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	CALL_39
0x4001a71	            0x85c0	                           test eax, eax	       860	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	CALL_39
0x4001a73	     0xf85fd000000	                           jne 0x4001b76	       860	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	CALL_39
0x4001a79	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       862	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	IF_26	CALL_41
0x4001a80	        0x488b4020	            mov rax, qword [rax + 0x20] 	       862	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	IF_26	CALL_41
0x4001a84	        0x488b5028	            mov rdx, qword [rax + 0x28] 	       862	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	IF_26	CALL_41
0x4001a88	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       862	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	IF_26	CALL_41
0x4001a8f	        0x488b4010	            mov rax, qword [rax + 0x10] 	       862	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	IF_26	CALL_41
0x4001a93	          0x4801c2	                            add rdx, rax	       862	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	IF_26	CALL_41
0x4001a96	    0x488b8540feff	            mov rax, qword [rbp - 0x1c0]	       862	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	IF_26	CALL_41
0x4001a9d	          0x4889d6	                            mov rsi, rdx	       862	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	IF_26	CALL_41
0x4001aa0	          0x4889c7	                            mov rdi, rax	       862	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	IF_26	CALL_41
0x4001aa3	      0xe800000000	                          call 0x4001aa8	       862	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	IF_26	CALL_41
0x4001aa8	            0x85c0	                           test eax, eax	       862	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	IF_26	CALL_41
0x4001aaa	     0xf85c6000000	                           jne 0x4001b76	       862	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	IF_26	CALL_41
0x4001ab0	      0xb800000000	                              mov eax, 0	       863	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	IF_26
0x4001ab5	      0xe9d9000000	                           jmp 0x4001b93	       863	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	IF_26
0x4001aba	     0xfb7850effff	            movzx eax, word [rbp - 0xf2]	       869	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4001ac1	           0xfb7f8	                           movzx edi, ax	       868	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_42
0x4001ac4	    0x4c8b85a0feff	             mov r8, qword [rbp - 0x160]	       868	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_42
0x4001acb	    0x488b8db8feff	            mov rcx, qword [rbp - 0x148]	       868	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_42
0x4001ad2	    0x488d9550ffff	                   lea rdx, [rbp - 0xb0]	       868	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_42
0x4001ad9	    0x488db5d0feff	                  lea rsi, [rbp - 0x130]	       868	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_42
0x4001ae0	    0x488b8558feff	            mov rax, qword [rbp - 0x1a8]	       868	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_42
0x4001ae7	    0xffb540feffff	                push qword [rbp - 0x1c0]	       868	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_42
0x4001aed	            0x6a01	                                  push 1	       868	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_42
0x4001aef	          0x4d89c1	                              mov r9, r8	       868	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_42
0x4001af2	          0x4189f8	                            mov r8d, edi	       868	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_42
0x4001af5	          0x4889c7	                            mov rdi, rax	       868	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_42
0x4001af8	      0xe827e6ffff	                call sym.parse_coff_type	       868	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_42
0x4001afd	        0x4883c410	                           add rsp, 0x10	       868	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_42
0x4001b01	    0x488985c0feff	            mov qword [rbp - 0x140], rax	       868	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_42
0x4001b08	    0x4883bdc0feff	              cmp qword [rbp - 0x140], 0	       870	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_27
0x4001b10	            0x7507	                           jne 0x4001b19	       870	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_27
0x4001b12	      0xb800000000	                              mov eax, 0	       871	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_27
0x4001b17	            0xeb7a	                           jmp 0x4001b93	       871	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_27
0x4001b19	    0x4c8b8d40feff	             mov r9, qword [rbp - 0x1c0]	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4001b20	    0x4c8d85f0feff	                   lea r8, [rbp - 0x110]	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4001b27	    0x488b8db8feff	            mov rcx, qword [rbp - 0x148]	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4001b2e	    0x488b95a8feff	            mov rdx, qword [rbp - 0x158]	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4001b35	    0x488db550ffff	                   lea rsi, [rbp - 0xb0]	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4001b3c	    0x488b8558feff	            mov rax, qword [rbp - 0x1a8]	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4001b43	    0x8bbd78feffff	            mov edi, dword [rbp - 0x188]	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4001b49	              0x57	                                push rdi	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4001b4a	    0xffb5c0feffff	                push qword [rbp - 0x140]	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4001b50	          0x4889c7	                            mov rdi, rax	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4001b53	      0xe8cdf3ffff	              call sym.parse_coff_symbol	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4001b58	        0x4883c410	                           add rsp, 0x10	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4001b5c	            0x85c0	                           test eax, eax	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4001b5e	            0x7519	                           jne 0x4001b79	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4001b60	      0xb800000000	                              mov eax, 0	       874	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28
0x4001b65	            0xeb2c	                           jmp 0x4001b93	       874	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28
0x4001b67	              0x90	                                     nop	       748	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4001b68	            0xeb10	                           jmp 0x4001b7a	       748	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4001b6a	              0x90	                                     nop	       754	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4001b6b	            0xeb0d	                           jmp 0x4001b7a	       754	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4001b6d	              0x90	                                     nop	       760	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_7
0x4001b6e	            0xeb0a	                           jmp 0x4001b7a	       760	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_7
0x4001b70	              0x90	                                     nop	       783	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4001b71	            0xeb07	                           jmp 0x4001b7a	       783	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4001b73	              0x90	                                     nop	       852	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4001b74	            0xeb04	                           jmp 0x4001b7a	       852	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4001b76	              0x90	                                     nop	       865	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4001b77	            0xeb01	                           jmp 0x4001b7a	       865	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4001b79	              0x90	                                     nop	       875	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4001b7a	    0x488b85e0feff	            mov rax, qword [rbp - 0x120]	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4001b81	    0x483b8548feff	            cmp rax, qword [rbp - 0x1b8]	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4001b88	     0xf8c4ef7ffff	                            jl 0x40012dc	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4001b8e	      0xb801000000	                              mov eax, 1	       879	rdcoff.c	FUNCTION_8
0x4001b93	        0x488b5de8	             mov rbx, qword [rbp - 0x18]	       880	rdcoff.c	FUNCTION_8
0x4001b97	    0x6448331c2528	                xor rbx, qword fs:[0x28]	       880	rdcoff.c	FUNCTION_8
0x4001ba0	            0x7405	                            je 0x4001ba7	       880	rdcoff.c	FUNCTION_8
0x4001ba2	      0xe800000000	                          call 0x4001ba7	       880	rdcoff.c	FUNCTION_8
0x4001ba7	        0x488b5df8	                mov rbx, qword [rbp - 8]	       880	rdcoff.c	FUNCTION_8
0x4001bab	              0xc9	                                   leave	       880	rdcoff.c	FUNCTION_8
0x4001bac	              0xc3	                                     ret	       880	rdcoff.c	FUNCTION_8
parse_coff_symbol	FOR,0:DO,0:functions,0:SWITCH,1:IF,8:CALL,23:WHILE,0:ELSE,0	182
0x4000f25	              0x55	                                push rbp	       558	rdcoff.c	FUNCTION_6
0x4000f26	          0x4889e5	                            mov rbp, rsp	       558	rdcoff.c	FUNCTION_6
0x4000f29	        0x4883ec40	                           sub rsp, 0x40	       558	rdcoff.c	FUNCTION_6
0x4000f2d	        0x48897de8	             mov qword [rbp - 0x18], rdi	       558	rdcoff.c	FUNCTION_6
0x4000f31	        0x488975e0	             mov qword [rbp - 0x20], rsi	       558	rdcoff.c	FUNCTION_6
0x4000f35	        0x488955d8	             mov qword [rbp - 0x28], rdx	       558	rdcoff.c	FUNCTION_6
0x4000f39	        0x48894dd0	             mov qword [rbp - 0x30], rcx	       558	rdcoff.c	FUNCTION_6
0x4000f3d	        0x4c8945c8	              mov qword [rbp - 0x38], r8	       558	rdcoff.c	FUNCTION_6
0x4000f41	        0x4c894dc0	              mov qword [rbp - 0x40], r9	       558	rdcoff.c	FUNCTION_6
0x4000f45	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       559	rdcoff.c	FUNCTION_6	SWITCH_1
0x4000f49	         0xfb64020	           movzx eax, byte [rax + 0x20] 	       559	rdcoff.c	FUNCTION_6	SWITCH_1
0x4000f4d	           0xfb6c0	                           movzx eax, al	       559	rdcoff.c	FUNCTION_6	SWITCH_1
0x4000f50	          0x83f87f	                           cmp eax, 0x7f	       559	rdcoff.c	FUNCTION_6	SWITCH_1
0x4000f53	     0xf8750020000	                            ja 0x40011a9	       559	rdcoff.c	FUNCTION_6	SWITCH_1
0x4000f59	            0x89c0	                            mov eax, eax	       559	rdcoff.c	FUNCTION_6	SWITCH_1
0x4000f5b	    0x488b04c50000	                  mov rax, qword [rax*8]	       559	rdcoff.c	FUNCTION_6	SWITCH_1
0x4000f63	            0xffe0	                                 jmp rax	       559	rdcoff.c	FUNCTION_6	SWITCH_1
0x4000f65	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       566	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1	CALL_3
0x4000f69	        0x488b4020	            mov rax, qword [rax + 0x20] 	       566	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1	CALL_3
0x4000f6d	        0x488b5028	            mov rdx, qword [rax + 0x28] 	       566	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1	CALL_3
0x4000f71	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       566	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1	CALL_3
0x4000f75	        0x488b4010	            mov rax, qword [rax + 0x10] 	       566	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1	CALL_3
0x4000f79	          0x4801c2	                            add rdx, rax	       565	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1	CALL_2
0x4000f7c	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       565	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1	CALL_2
0x4000f80	        0x488b7008	                mov rsi, qword [rax + 8]	       565	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1	CALL_2
0x4000f84	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       565	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1	CALL_2
0x4000f88	          0x4989d0	                             mov r8, rdx	       565	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1	CALL_2
0x4000f8b	      0xb904000000	                              mov ecx, 4	       565	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1	CALL_2
0x4000f90	        0x488b5510	            mov rdx, qword [rbp + 0x10] 	       565	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1	CALL_2
0x4000f94	          0x4889c7	                            mov rdi, rax	       565	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1	CALL_2
0x4000f97	      0xe800000000	                          call 0x4000f9c	       565	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1	CALL_2
0x4000f9c	            0x85c0	                           test eax, eax	       565	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1	CALL_2
0x4000f9e	     0xf8508020000	                           jne 0x40011ac	       565	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1	CALL_2
0x4000fa4	      0xb800000000	                              mov eax, 0	       567	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1
0x4000fa9	      0xe916020000	                           jmp 0x40011c4	       567	rdcoff.c	FUNCTION_6	SWITCH_1	IF_1
0x4000fae	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       573	rdcoff.c	FUNCTION_6	SWITCH_1	IF_2	CALL_6
0x4000fb2	        0x488b4020	            mov rax, qword [rax + 0x20] 	       573	rdcoff.c	FUNCTION_6	SWITCH_1	IF_2	CALL_6
0x4000fb6	        0x488b5028	            mov rdx, qword [rax + 0x28] 	       573	rdcoff.c	FUNCTION_6	SWITCH_1	IF_2	CALL_6
0x4000fba	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       573	rdcoff.c	FUNCTION_6	SWITCH_1	IF_2	CALL_6
0x4000fbe	        0x488b4010	            mov rax, qword [rax + 0x10] 	       573	rdcoff.c	FUNCTION_6	SWITCH_1	IF_2	CALL_6
0x4000fc2	          0x4801c2	                            add rdx, rax	       572	rdcoff.c	FUNCTION_6	SWITCH_1	IF_2	CALL_5
0x4000fc5	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       572	rdcoff.c	FUNCTION_6	SWITCH_1	IF_2	CALL_5
0x4000fc9	        0x488b7008	                mov rsi, qword [rax + 8]	       572	rdcoff.c	FUNCTION_6	SWITCH_1	IF_2	CALL_5
0x4000fcd	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       572	rdcoff.c	FUNCTION_6	SWITCH_1	IF_2	CALL_5
0x4000fd1	          0x4989d0	                             mov r8, rdx	       572	rdcoff.c	FUNCTION_6	SWITCH_1	IF_2	CALL_5
0x4000fd4	      0xb901000000	                              mov ecx, 1	       572	rdcoff.c	FUNCTION_6	SWITCH_1	IF_2	CALL_5
0x4000fd9	        0x488b5510	            mov rdx, qword [rbp + 0x10] 	       572	rdcoff.c	FUNCTION_6	SWITCH_1	IF_2	CALL_5
0x4000fdd	          0x4889c7	                            mov rdi, rax	       572	rdcoff.c	FUNCTION_6	SWITCH_1	IF_2	CALL_5
0x4000fe0	      0xe800000000	                          call 0x4000fe5	       572	rdcoff.c	FUNCTION_6	SWITCH_1	IF_2	CALL_5
0x4000fe5	            0x85c0	                           test eax, eax	       572	rdcoff.c	FUNCTION_6	SWITCH_1	IF_2	CALL_5
0x4000fe7	     0xf85c2010000	                           jne 0x40011af	       572	rdcoff.c	FUNCTION_6	SWITCH_1	IF_2	CALL_5
0x4000fed	      0xb800000000	                              mov eax, 0	       574	rdcoff.c	FUNCTION_6	SWITCH_1	IF_2
0x4000ff2	      0xe9cd010000	                           jmp 0x40011c4	       574	rdcoff.c	FUNCTION_6	SWITCH_1	IF_2
0x4000ff7	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       582	rdcoff.c	FUNCTION_6	SWITCH_1	IF_3	CALL_9
0x4000ffb	        0x488b4020	            mov rax, qword [rax + 0x20] 	       582	rdcoff.c	FUNCTION_6	SWITCH_1	IF_3	CALL_9
0x4000fff	        0x488b5028	            mov rdx, qword [rax + 0x28] 	       582	rdcoff.c	FUNCTION_6	SWITCH_1	IF_3	CALL_9
0x4001003	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       582	rdcoff.c	FUNCTION_6	SWITCH_1	IF_3	CALL_9
0x4001007	        0x488b4010	            mov rax, qword [rax + 0x10] 	       582	rdcoff.c	FUNCTION_6	SWITCH_1	IF_3	CALL_9
0x400100b	        0x488d0c02	                    lea rcx, [rdx + rax]	       578	rdcoff.c	FUNCTION_6	SWITCH_1	IF_3	CALL_8
0x400100f	        0x837d1800	               cmp dword [rbp + 0x18], 0	       578	rdcoff.c	FUNCTION_6	SWITCH_1	IF_3	CALL_8
0x4001013	            0x7407	                            je 0x400101c	       578	rdcoff.c	FUNCTION_6	SWITCH_1	IF_3	CALL_8
0x4001015	      0xba03000000	                              mov edx, 3	       578	rdcoff.c	FUNCTION_6	SWITCH_1	IF_3	CALL_8
0x400101a	            0xeb05	                           jmp 0x4001021	       578	rdcoff.c	FUNCTION_6	SWITCH_1	IF_3	CALL_8
0x400101c	      0xba02000000	                              mov edx, 2	       578	rdcoff.c	FUNCTION_6	SWITCH_1	IF_3	CALL_8
0x4001021	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       578	rdcoff.c	FUNCTION_6	SWITCH_1	IF_3	CALL_8
0x4001025	        0x488b7008	                mov rsi, qword [rax + 8]	       578	rdcoff.c	FUNCTION_6	SWITCH_1	IF_3	CALL_8
0x4001029	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       578	rdcoff.c	FUNCTION_6	SWITCH_1	IF_3	CALL_8
0x400102d	          0x4989c8	                             mov r8, rcx	       578	rdcoff.c	FUNCTION_6	SWITCH_1	IF_3	CALL_8
0x4001030	            0x89d1	                            mov ecx, edx	       578	rdcoff.c	FUNCTION_6	SWITCH_1	IF_3	CALL_8
0x4001032	        0x488b5510	            mov rdx, qword [rbp + 0x10] 	       578	rdcoff.c	FUNCTION_6	SWITCH_1	IF_3	CALL_8
0x4001036	          0x4889c7	                            mov rdi, rax	       578	rdcoff.c	FUNCTION_6	SWITCH_1	IF_3	CALL_8
0x4001039	      0xe800000000	                          call 0x400103e	       578	rdcoff.c	FUNCTION_6	SWITCH_1	IF_3	CALL_8
0x400103e	            0x85c0	                           test eax, eax	       578	rdcoff.c	FUNCTION_6	SWITCH_1	IF_3	CALL_8
0x4001040	     0xf856c010000	                           jne 0x40011b2	       578	rdcoff.c	FUNCTION_6	SWITCH_1	IF_3	CALL_8
0x4001046	      0xb800000000	                              mov eax, 0	       583	rdcoff.c	FUNCTION_6	SWITCH_1	IF_3
0x400104b	      0xe974010000	                           jmp 0x40011c4	       583	rdcoff.c	FUNCTION_6	SWITCH_1	IF_3
0x4001050	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       589	rdcoff.c	FUNCTION_6	SWITCH_1	IF_4	CALL_12
0x4001054	        0x488b4020	            mov rax, qword [rax + 0x20] 	       589	rdcoff.c	FUNCTION_6	SWITCH_1	IF_4	CALL_12
0x4001058	        0x488b5028	            mov rdx, qword [rax + 0x28] 	       589	rdcoff.c	FUNCTION_6	SWITCH_1	IF_4	CALL_12
0x400105c	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       589	rdcoff.c	FUNCTION_6	SWITCH_1	IF_4	CALL_12
0x4001060	        0x488b4010	            mov rax, qword [rax + 0x10] 	       589	rdcoff.c	FUNCTION_6	SWITCH_1	IF_4	CALL_12
0x4001064	          0x4801c2	                            add rdx, rax	       588	rdcoff.c	FUNCTION_6	SWITCH_1	IF_4	CALL_11
0x4001067	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       588	rdcoff.c	FUNCTION_6	SWITCH_1	IF_4	CALL_11
0x400106b	        0x488b7008	                mov rsi, qword [rax + 8]	       588	rdcoff.c	FUNCTION_6	SWITCH_1	IF_4	CALL_11
0x400106f	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       588	rdcoff.c	FUNCTION_6	SWITCH_1	IF_4	CALL_11
0x4001073	          0x4989d0	                             mov r8, rdx	       588	rdcoff.c	FUNCTION_6	SWITCH_1	IF_4	CALL_11
0x4001076	      0xb905000000	                              mov ecx, 5	       588	rdcoff.c	FUNCTION_6	SWITCH_1	IF_4	CALL_11
0x400107b	        0x488b5510	            mov rdx, qword [rbp + 0x10] 	       588	rdcoff.c	FUNCTION_6	SWITCH_1	IF_4	CALL_11
0x400107f	          0x4889c7	                            mov rdi, rax	       588	rdcoff.c	FUNCTION_6	SWITCH_1	IF_4	CALL_11
0x4001082	      0xe800000000	                          call 0x4001087	       588	rdcoff.c	FUNCTION_6	SWITCH_1	IF_4	CALL_11
0x4001087	            0x85c0	                           test eax, eax	       588	rdcoff.c	FUNCTION_6	SWITCH_1	IF_4	CALL_11
0x4001089	     0xf8526010000	                           jne 0x40011b5	       588	rdcoff.c	FUNCTION_6	SWITCH_1	IF_4	CALL_11
0x400108f	      0xb800000000	                              mov eax, 0	       590	rdcoff.c	FUNCTION_6	SWITCH_1	IF_4
0x4001094	      0xe92b010000	                           jmp 0x40011c4	       590	rdcoff.c	FUNCTION_6	SWITCH_1	IF_4
0x4001099	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       598	rdcoff.c	FUNCTION_6	SWITCH_1	IF_5	CALL_15
0x400109d	        0x488b4020	            mov rax, qword [rax + 0x20] 	       598	rdcoff.c	FUNCTION_6	SWITCH_1	IF_5	CALL_15
0x40010a1	        0x488b5028	            mov rdx, qword [rax + 0x28] 	       598	rdcoff.c	FUNCTION_6	SWITCH_1	IF_5	CALL_15
0x40010a5	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       598	rdcoff.c	FUNCTION_6	SWITCH_1	IF_5	CALL_15
0x40010a9	        0x488b4010	            mov rax, qword [rax + 0x10] 	       598	rdcoff.c	FUNCTION_6	SWITCH_1	IF_5	CALL_15
0x40010ad	          0x4801c2	                            add rdx, rax	       597	rdcoff.c	FUNCTION_6	SWITCH_1	IF_5	CALL_14
0x40010b0	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       597	rdcoff.c	FUNCTION_6	SWITCH_1	IF_5	CALL_14
0x40010b4	        0x488b7008	                mov rsi, qword [rax + 8]	       597	rdcoff.c	FUNCTION_6	SWITCH_1	IF_5	CALL_14
0x40010b8	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       597	rdcoff.c	FUNCTION_6	SWITCH_1	IF_5	CALL_14
0x40010bc	          0x4989d0	                             mov r8, rdx	       597	rdcoff.c	FUNCTION_6	SWITCH_1	IF_5	CALL_14
0x40010bf	      0xb901000000	                              mov ecx, 1	       597	rdcoff.c	FUNCTION_6	SWITCH_1	IF_5	CALL_14
0x40010c4	        0x488b5510	            mov rdx, qword [rbp + 0x10] 	       597	rdcoff.c	FUNCTION_6	SWITCH_1	IF_5	CALL_14
0x40010c8	          0x4889c7	                            mov rdi, rax	       597	rdcoff.c	FUNCTION_6	SWITCH_1	IF_5	CALL_14
0x40010cb	      0xe800000000	                          call 0x40010d0	       597	rdcoff.c	FUNCTION_6	SWITCH_1	IF_5	CALL_14
0x40010d0	            0x85c0	                           test eax, eax	       597	rdcoff.c	FUNCTION_6	SWITCH_1	IF_5	CALL_14
0x40010d2	     0xf85e0000000	                           jne 0x40011b8	       597	rdcoff.c	FUNCTION_6	SWITCH_1	IF_5	CALL_14
0x40010d8	      0xb800000000	                              mov eax, 0	       599	rdcoff.c	FUNCTION_6	SWITCH_1	IF_5
0x40010dd	      0xe9e2000000	                           jmp 0x40011c4	       599	rdcoff.c	FUNCTION_6	SWITCH_1	IF_5
0x40010e2	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       605	rdcoff.c	FUNCTION_6	SWITCH_1	IF_6	CALL_18
0x40010e6	        0x488b4020	            mov rax, qword [rax + 0x20] 	       605	rdcoff.c	FUNCTION_6	SWITCH_1	IF_6	CALL_18
0x40010ea	        0x488b5028	            mov rdx, qword [rax + 0x28] 	       605	rdcoff.c	FUNCTION_6	SWITCH_1	IF_6	CALL_18
0x40010ee	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       605	rdcoff.c	FUNCTION_6	SWITCH_1	IF_6	CALL_18
0x40010f2	        0x488b4010	            mov rax, qword [rax + 0x10] 	       605	rdcoff.c	FUNCTION_6	SWITCH_1	IF_6	CALL_18
0x40010f6	          0x4801c2	                            add rdx, rax	       604	rdcoff.c	FUNCTION_6	SWITCH_1	IF_6	CALL_17
0x40010f9	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       604	rdcoff.c	FUNCTION_6	SWITCH_1	IF_6	CALL_17
0x40010fd	        0x488b7008	                mov rsi, qword [rax + 8]	       604	rdcoff.c	FUNCTION_6	SWITCH_1	IF_6	CALL_17
0x4001101	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       604	rdcoff.c	FUNCTION_6	SWITCH_1	IF_6	CALL_17
0x4001105	          0x4989d0	                             mov r8, rdx	       604	rdcoff.c	FUNCTION_6	SWITCH_1	IF_6	CALL_17
0x4001108	      0xb902000000	                              mov ecx, 2	       604	rdcoff.c	FUNCTION_6	SWITCH_1	IF_6	CALL_17
0x400110d	        0x488b5510	            mov rdx, qword [rbp + 0x10] 	       604	rdcoff.c	FUNCTION_6	SWITCH_1	IF_6	CALL_17
0x4001111	          0x4889c7	                            mov rdi, rax	       604	rdcoff.c	FUNCTION_6	SWITCH_1	IF_6	CALL_17
0x4001114	      0xe800000000	                          call 0x4001119	       604	rdcoff.c	FUNCTION_6	SWITCH_1	IF_6	CALL_17
0x4001119	            0x85c0	                           test eax, eax	       604	rdcoff.c	FUNCTION_6	SWITCH_1	IF_6	CALL_17
0x400111b	     0xf859a000000	                           jne 0x40011bb	       604	rdcoff.c	FUNCTION_6	SWITCH_1	IF_6	CALL_17
0x4001121	      0xb800000000	                              mov eax, 0	       606	rdcoff.c	FUNCTION_6	SWITCH_1	IF_6
0x4001126	      0xe999000000	                           jmp 0x40011c4	       606	rdcoff.c	FUNCTION_6	SWITCH_1	IF_6
0x400112b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       610	rdcoff.c	FUNCTION_6	SWITCH_1	CALL_20
0x400112f	        0x488b4808	                mov rcx, qword [rax + 8]	       610	rdcoff.c	FUNCTION_6	SWITCH_1	CALL_20
0x4001133	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       610	rdcoff.c	FUNCTION_6	SWITCH_1	CALL_20
0x4001137	        0x488b5510	            mov rdx, qword [rbp + 0x10] 	       610	rdcoff.c	FUNCTION_6	SWITCH_1	CALL_20
0x400113b	          0x4889ce	                            mov rsi, rcx	       610	rdcoff.c	FUNCTION_6	SWITCH_1	CALL_20
0x400113e	          0x4889c7	                            mov rdi, rax	       610	rdcoff.c	FUNCTION_6	SWITCH_1	CALL_20
0x4001141	      0xe800000000	                          call 0x4001146	       610	rdcoff.c	FUNCTION_6	SWITCH_1	CALL_20
0x4001146	        0x48894510	            mov qword [rbp + 0x10], rax 	       610	rdcoff.c	FUNCTION_6	SWITCH_1	CALL_20
0x400114a	      0x48837d1000	               cmp qword [rbp + 0x10], 0	       611	rdcoff.c	FUNCTION_6	SWITCH_1	IF_7
0x400114f	            0x756d	                           jne 0x40011be	       611	rdcoff.c	FUNCTION_6	SWITCH_1	IF_7
0x4001151	      0xb800000000	                              mov eax, 0	       612	rdcoff.c	FUNCTION_6	SWITCH_1	IF_7
0x4001156	            0xeb6c	                           jmp 0x40011c4	       612	rdcoff.c	FUNCTION_6	SWITCH_1	IF_7
0x4001158	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       621	rdcoff.c	FUNCTION_6	SWITCH_1	CALL_22
0x400115c	        0x488b4808	                mov rcx, qword [rax + 8]	       621	rdcoff.c	FUNCTION_6	SWITCH_1	CALL_22
0x4001160	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       621	rdcoff.c	FUNCTION_6	SWITCH_1	CALL_22
0x4001164	        0x488b5510	            mov rdx, qword [rbp + 0x10] 	       621	rdcoff.c	FUNCTION_6	SWITCH_1	CALL_22
0x4001168	          0x4889ce	                            mov rsi, rcx	       621	rdcoff.c	FUNCTION_6	SWITCH_1	CALL_22
0x400116b	          0x4889c7	                            mov rdi, rax	       621	rdcoff.c	FUNCTION_6	SWITCH_1	CALL_22
0x400116e	      0xe800000000	                          call 0x4001173	       621	rdcoff.c	FUNCTION_6	SWITCH_1	CALL_22
0x4001173	        0x48894510	            mov qword [rbp + 0x10], rax 	       621	rdcoff.c	FUNCTION_6	SWITCH_1	CALL_22
0x4001177	      0x48837d1000	               cmp qword [rbp + 0x10], 0	       622	rdcoff.c	FUNCTION_6	SWITCH_1	IF_8
0x400117c	            0x7507	                           jne 0x4001185	       622	rdcoff.c	FUNCTION_6	SWITCH_1	IF_8
0x400117e	      0xb800000000	                              mov eax, 0	       623	rdcoff.c	FUNCTION_6	SWITCH_1	IF_8
0x4001183	            0xeb3f	                           jmp 0x40011c4	       623	rdcoff.c	FUNCTION_6	SWITCH_1	IF_8
0x4001185	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	       627	rdcoff.c	FUNCTION_6	SWITCH_1	CALL_23
0x4001189	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       627	rdcoff.c	FUNCTION_6	SWITCH_1	CALL_23
0x400118d	          0x4889d6	                            mov rsi, rdx	       627	rdcoff.c	FUNCTION_6	SWITCH_1	CALL_23
0x4001190	          0x4889c7	                            mov rdi, rax	       627	rdcoff.c	FUNCTION_6	SWITCH_1	CALL_23
0x4001193	      0xe8a8eeffff	                  call sym.coff_get_slot	       627	rdcoff.c	FUNCTION_6	SWITCH_1	CALL_23
0x4001198	        0x488945f8	                mov qword [rbp - 8], rax	       627	rdcoff.c	FUNCTION_6	SWITCH_1	CALL_23
0x400119c	        0x488b45f8	                mov rax, qword [rbp - 8]	       628	rdcoff.c	FUNCTION_6	SWITCH_1
0x40011a0	        0x488b5510	            mov rdx, qword [rbp + 0x10] 	       628	rdcoff.c	FUNCTION_6	SWITCH_1
0x40011a4	          0x488910	                    mov qword [rax], rdx	       628	rdcoff.c	FUNCTION_6	SWITCH_1
0x40011a7	            0xeb16	                           jmp 0x40011bf	       630	rdcoff.c	FUNCTION_6	SWITCH_1
0x40011a9	              0x90	                                     nop	       633	rdcoff.c	FUNCTION_6	SWITCH_1
0x40011aa	            0xeb13	                           jmp 0x40011bf	       633	rdcoff.c	FUNCTION_6	SWITCH_1
0x40011ac	              0x90	                                     nop	       568	rdcoff.c	FUNCTION_6	SWITCH_1
0x40011ad	            0xeb10	                           jmp 0x40011bf	       568	rdcoff.c	FUNCTION_6	SWITCH_1
0x40011af	              0x90	                                     nop	       575	rdcoff.c	FUNCTION_6	SWITCH_1
0x40011b0	            0xeb0d	                           jmp 0x40011bf	       575	rdcoff.c	FUNCTION_6	SWITCH_1
0x40011b2	              0x90	                                     nop	       584	rdcoff.c	FUNCTION_6	SWITCH_1
0x40011b3	            0xeb0a	                           jmp 0x40011bf	       584	rdcoff.c	FUNCTION_6	SWITCH_1
0x40011b5	              0x90	                                     nop	       591	rdcoff.c	FUNCTION_6	SWITCH_1
0x40011b6	            0xeb07	                           jmp 0x40011bf	       591	rdcoff.c	FUNCTION_6	SWITCH_1
0x40011b8	              0x90	                                     nop	       600	rdcoff.c	FUNCTION_6	SWITCH_1
0x40011b9	            0xeb04	                           jmp 0x40011bf	       600	rdcoff.c	FUNCTION_6	SWITCH_1
0x40011bb	              0x90	                                     nop	       607	rdcoff.c	FUNCTION_6	SWITCH_1
0x40011bc	            0xeb01	                           jmp 0x40011bf	       607	rdcoff.c	FUNCTION_6	SWITCH_1
0x40011be	              0x90	                                     nop	       613	rdcoff.c	FUNCTION_6	SWITCH_1
0x40011bf	      0xb801000000	                              mov eax, 1	       636	rdcoff.c	FUNCTION_6
0x40011c4	              0xc9	                                   leave	       637	rdcoff.c	FUNCTION_6
0x40011c5	              0xc3	                                     ret	       637	rdcoff.c	FUNCTION_6
