disassembler	functions,0:FOR,0:DO,0:CALL,3:ELSE,8:SWITCH,1:WHILE,0:IF,8	17
0x4000040	              0x55	                                push rbp	       112	disassemble.c	FUNCTION_1
0x4000041	          0x4889e5	                            mov rbp, rsp	       112	disassemble.c	FUNCTION_1
0x4000044	          0x897dec	             mov dword [rbp - 0x14], edi	       112	disassemble.c	FUNCTION_1
0x4000047	          0x8975e8	             mov dword [rbp - 0x18], esi	       112	disassemble.c	FUNCTION_1
0x400004a	        0x488955e0	             mov qword [rbp - 0x20], rdx	       112	disassemble.c	FUNCTION_1
0x400004e	        0x48894dd8	             mov qword [rbp - 0x28], rcx	       112	disassemble.c	FUNCTION_1
0x4000052	          0x8b45ec	             mov eax, dword [rbp - 0x14]	       115	disassemble.c	FUNCTION_1	SWITCH_1
0x4000055	          0x83e808	                              sub eax, 8	       115	disassemble.c	FUNCTION_1	SWITCH_1
0x4000058	          0x83f803	                              cmp eax, 3	       115	disassemble.c	FUNCTION_1	SWITCH_1
0x400005b	            0x770f	                            ja 0x400006c	       115	disassemble.c	FUNCTION_1	SWITCH_1
0x400005d	    0x48c745f80000	                  mov qword [rbp - 8], 0	       206	disassemble.c	FUNCTION_1	SWITCH_1
0x4000065	              0x90	                                     nop	       207	disassemble.c	FUNCTION_1	SWITCH_1
0x4000066	        0x488b45f8	                mov rax, qword [rbp - 8]	       533	disassemble.c	FUNCTION_1	ELSE_8
0x400006a	            0xeb05	                           jmp 0x4000071	       533	disassemble.c	FUNCTION_1	ELSE_8
0x400006c	      0xb800000000	                              mov eax, 0	       531	disassemble.c	FUNCTION_1	SWITCH_1	ELSE_8
0x4000071	              0x5d	                                 pop rbp	       534	disassemble.c	FUNCTION_1	ELSE_8
0x4000072	              0xc3	                                     ret	       534	disassemble.c	FUNCTION_1	ELSE_8
disassemble_init_for_target	functions,0:FOR,0:DO,0:CALL,6:ELSE,1:SWITCH,1:WHILE,0:IF,3	10
0x400008e	              0x55	                                push rbp	       575	disassemble.c	FUNCTION_3
0x400008f	          0x4889e5	                            mov rbp, rsp	       575	disassemble.c	FUNCTION_3
0x4000092	        0x48897df8	                mov qword [rbp - 8], rdi	       575	disassemble.c	FUNCTION_3
0x4000096	      0x48837df800	                  cmp qword [rbp - 8], 0	       576	disassemble.c	FUNCTION_3	IF_1
0x400009b	            0x7403	                            je 0x40000a0	       576	disassemble.c	FUNCTION_3	IF_1
0x400009d	              0x90	                                     nop	       655	disassemble.c	FUNCTION_3	SWITCH_1
0x400009e	            0xeb01	                           jmp 0x40000a1	       655	disassemble.c	FUNCTION_3	SWITCH_1
0x40000a0	              0x90	                                     nop	       577	disassemble.c	FUNCTION_3	IF_1
0x40000a1	              0x5d	                                 pop rbp	       657	disassemble.c	FUNCTION_3
0x40000a2	              0xc3	                                     ret	       657	disassemble.c	FUNCTION_3
remove_whitespace_and_extra_commas	functions,0:FOR,3:DO,0:CALL,6:ELSE,0:SWITCH,0:WHILE,1:IF,5	132
0x40000a3	              0x55	                                push rbp	       663	disassemble.c	FUNCTION_4
0x40000a4	          0x4889e5	                            mov rbp, rsp	       663	disassemble.c	FUNCTION_4
0x40000a7	        0x4883ec30	                           sub rsp, 0x30	       663	disassemble.c	FUNCTION_4
0x40000ab	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       663	disassemble.c	FUNCTION_4
0x40000af	      0x48837dd800	               cmp qword [rbp - 0x28], 0	       667	disassemble.c	FUNCTION_4	IF_1
0x40000b4	            0x750a	                           jne 0x40000c0	       667	disassemble.c	FUNCTION_4	IF_1
0x40000b6	      0xb800000000	                              mov eax, 0	       668	disassemble.c	FUNCTION_4	IF_1
0x40000bb	      0xe9a5010000	                           jmp 0x4000265	       668	disassemble.c	FUNCTION_4	IF_1
0x40000c0	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       671	disassemble.c	FUNCTION_4	FOR_1	CALL_1
0x40000c4	          0x4889c7	                            mov rdi, rax	       671	disassemble.c	FUNCTION_4	FOR_1	CALL_1
0x40000c7	      0xe800000000	                          call 0x40000cc	       671	disassemble.c	FUNCTION_4	FOR_1	CALL_1
0x40000cc	        0x488945f0	             mov qword [rbp - 0x10], rax	       671	disassemble.c	FUNCTION_4	FOR_1	CALL_1
0x40000d0	            0xeb59	                           jmp 0x400012b	       671	disassemble.c	FUNCTION_4	FOR_1	CALL_1
0x40000d2	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x40000d6	        0x488d50ff	                      lea rdx, [rax - 1]	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x40000da	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x40000de	          0x4801d0	                            add rax, rdx	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x40000e1	           0xfb600	                   movzx eax, byte [rax]	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x40000e4	           0xfbec0	                           movsx eax, al	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x40000e7	           0xfb6c0	                           movzx eax, al	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x40000ea	            0x4898	                                    cdqe	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x40000ec	     0xfb784000000	             movzx eax, word [rax + rax]	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x40000f4	           0xfb7c0	                           movzx eax, ax	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x40000f7	          0x83e040	                           and eax, 0x40	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x40000fa	            0x85c0	                           test eax, eax	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x40000fc	            0x7516	                           jne 0x4000114	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x40000fe	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x4000102	        0x488d50ff	                      lea rdx, [rax - 1]	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x4000106	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x400010a	          0x4801d0	                            add rax, rdx	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x400010d	           0xfb600	                   movzx eax, byte [rax]	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x4000110	            0x3c2c	                            cmp al, 0x2c	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x4000112	            0x7520	                           jne 0x4000134	       673	disassemble.c	FUNCTION_4	FOR_1	IF_2	CALL_2
0x4000114	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       675	disassemble.c	FUNCTION_4	FOR_1
0x4000118	        0x488d50ff	                      lea rdx, [rax - 1]	       675	disassemble.c	FUNCTION_4	FOR_1
0x400011c	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       675	disassemble.c	FUNCTION_4	FOR_1
0x4000120	          0x4801d0	                            add rax, rdx	       675	disassemble.c	FUNCTION_4	FOR_1
0x4000123	          0xc60000	                       mov byte [rax], 0	       675	disassemble.c	FUNCTION_4	FOR_1
0x4000126	      0x48836df001	               sub qword [rbp - 0x10], 1	       671	disassemble.c	FUNCTION_4	FOR_1	CALL_1
0x400012b	      0x48837df000	               cmp qword [rbp - 0x10], 0	       671	disassemble.c	FUNCTION_4	FOR_1	CALL_1
0x4000130	            0x75a0	                           jne 0x40000d2	       671	disassemble.c	FUNCTION_4	FOR_1	CALL_1
0x4000132	            0xeb01	                           jmp 0x4000135	       671	disassemble.c	FUNCTION_4	FOR_1	CALL_1
0x4000134	              0x90	                                     nop	       674	disassemble.c	FUNCTION_4	FOR_1	IF_2
0x4000135	    0x48c745e80000	               mov qword [rbp - 0x18], 0	       679	disassemble.c	FUNCTION_4	FOR_2
0x400013d	            0xeb3b	                           jmp 0x400017a	       679	disassemble.c	FUNCTION_4	FOR_2
0x400013f	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       680	disassemble.c	FUNCTION_4	FOR_2	IF_3	CALL_3
0x4000143	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       680	disassemble.c	FUNCTION_4	FOR_2	IF_3	CALL_3
0x4000147	          0x4801d0	                            add rax, rdx	       680	disassemble.c	FUNCTION_4	FOR_2	IF_3	CALL_3
0x400014a	           0xfb600	                   movzx eax, byte [rax]	       680	disassemble.c	FUNCTION_4	FOR_2	IF_3	CALL_3
0x400014d	           0xfbec0	                           movsx eax, al	       680	disassemble.c	FUNCTION_4	FOR_2	IF_3	CALL_3
0x4000150	           0xfb6c0	                           movzx eax, al	       680	disassemble.c	FUNCTION_4	FOR_2	IF_3	CALL_3
0x4000153	            0x4898	                                    cdqe	       680	disassemble.c	FUNCTION_4	FOR_2	IF_3	CALL_3
0x4000155	     0xfb784000000	             movzx eax, word [rax + rax]	       680	disassemble.c	FUNCTION_4	FOR_2	IF_3	CALL_3
0x400015d	           0xfb7c0	                           movzx eax, ax	       680	disassemble.c	FUNCTION_4	FOR_2	IF_3	CALL_3
0x4000160	          0x83e040	                           and eax, 0x40	       680	disassemble.c	FUNCTION_4	FOR_2	IF_3	CALL_3
0x4000163	            0x85c0	                           test eax, eax	       680	disassemble.c	FUNCTION_4	FOR_2	IF_3	CALL_3
0x4000165	            0x740e	                            je 0x4000175	       680	disassemble.c	FUNCTION_4	FOR_2	IF_3	CALL_3
0x4000167	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       681	disassemble.c	FUNCTION_4	FOR_2	IF_3
0x400016b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       681	disassemble.c	FUNCTION_4	FOR_2	IF_3
0x400016f	          0x4801d0	                            add rax, rdx	       681	disassemble.c	FUNCTION_4	FOR_2	IF_3
0x4000172	          0xc6002c	                    mov byte [rax], 0x2c	       681	disassemble.c	FUNCTION_4	FOR_2	IF_3
0x4000175	      0x488345e801	               add qword [rbp - 0x18], 1	       679	disassemble.c	FUNCTION_4	FOR_2
0x400017a	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       679	disassemble.c	FUNCTION_4	FOR_2
0x400017e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       679	disassemble.c	FUNCTION_4	FOR_2
0x4000182	          0x4801d0	                            add rax, rdx	       679	disassemble.c	FUNCTION_4	FOR_2
0x4000185	           0xfb600	                   movzx eax, byte [rax]	       679	disassemble.c	FUNCTION_4	FOR_2
0x4000188	            0x84c0	                             test al, al	       679	disassemble.c	FUNCTION_4	FOR_2
0x400018a	            0x75b3	                           jne 0x400013f	       679	disassemble.c	FUNCTION_4	FOR_2
0x400018c	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       684	disassemble.c	FUNCTION_4	FOR_3
0x4000190	        0x488945e0	             mov qword [rbp - 0x20], rax	       684	disassemble.c	FUNCTION_4	FOR_3
0x4000194	      0xe9a6000000	                           jmp 0x400023f	       684	disassemble.c	FUNCTION_4	FOR_3
0x4000199	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       685	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x400019d	           0xfb600	                   movzx eax, byte [rax]	       685	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x40001a0	            0x3c2c	                            cmp al, 0x2c	       685	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x40001a2	     0xf8592000000	                           jne 0x400023a	       685	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x40001a8	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       685	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x40001ac	        0x4883c001	                              add rax, 1	       685	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x40001b0	           0xfb600	                   movzx eax, byte [rax]	       685	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x40001b3	            0x3c2c	                            cmp al, 0x2c	       685	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x40001b5	            0x740a	                            je 0x40001c1	       685	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x40001b7	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       685	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x40001bb	        0x483b45d8	             cmp rax, qword [rbp - 0x28]	       685	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x40001bf	            0x7579	                           jne 0x400023a	       685	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x40001c1	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       687	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x40001c5	        0x4883c001	                              add rax, 1	       687	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x40001c9	        0x488945f8	                mov qword [rbp - 8], rax	       687	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x40001cd	            0xeb05	                           jmp 0x40001d4	       688	disassemble.c	FUNCTION_4	FOR_3	IF_4	WHILE_1
0x40001cf	      0x488345f801	                  add qword [rbp - 8], 1	       689	disassemble.c	FUNCTION_4	FOR_3	IF_4	WHILE_1
0x40001d4	        0x488b45f8	                mov rax, qword [rbp - 8]	       688	disassemble.c	FUNCTION_4	FOR_3	IF_4	WHILE_1
0x40001d8	           0xfb600	                   movzx eax, byte [rax]	       688	disassemble.c	FUNCTION_4	FOR_3	IF_4	WHILE_1
0x40001db	            0x3c2c	                            cmp al, 0x2c	       688	disassemble.c	FUNCTION_4	FOR_3	IF_4	WHILE_1
0x40001dd	            0x74f0	                            je 0x40001cf	       688	disassemble.c	FUNCTION_4	FOR_3	IF_4	WHILE_1
0x40001df	        0x488b45f8	                mov rax, qword [rbp - 8]	       690	disassemble.c	FUNCTION_4	FOR_3	IF_4	CALL_4
0x40001e3	          0x4889c7	                            mov rdi, rax	       690	disassemble.c	FUNCTION_4	FOR_3	IF_4	CALL_4
0x40001e6	      0xe800000000	                          call 0x40001eb	       690	disassemble.c	FUNCTION_4	FOR_3	IF_4	CALL_4
0x40001eb	        0x488945f0	             mov qword [rbp - 0x10], rax	       690	disassemble.c	FUNCTION_4	FOR_3	IF_4	CALL_4
0x40001ef	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       691	disassemble.c	FUNCTION_4	FOR_3	IF_4	IF_5
0x40001f3	        0x483b45d8	             cmp rax, qword [rbp - 0x28]	       691	disassemble.c	FUNCTION_4	FOR_3	IF_4	IF_5
0x40001f7	            0x7405	                            je 0x40001fe	       691	disassemble.c	FUNCTION_4	FOR_3	IF_4	IF_5
0x40001f9	      0x488345e001	               add qword [rbp - 0x20], 1	       692	disassemble.c	FUNCTION_4	FOR_3	IF_4	IF_5
0x40001fe	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       693	disassemble.c	FUNCTION_4	FOR_3	IF_4	CALL_5
0x4000202	        0x488b4df8	                mov rcx, qword [rbp - 8]	       693	disassemble.c	FUNCTION_4	FOR_3	IF_4	CALL_5
0x4000206	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       693	disassemble.c	FUNCTION_4	FOR_3	IF_4	CALL_5
0x400020a	          0x4889ce	                            mov rsi, rcx	       693	disassemble.c	FUNCTION_4	FOR_3	IF_4	CALL_5
0x400020d	          0x4889c7	                            mov rdi, rax	       693	disassemble.c	FUNCTION_4	FOR_3	IF_4	CALL_5
0x4000210	      0xe800000000	                          call 0x4000215	       693	disassemble.c	FUNCTION_4	FOR_3	IF_4	CALL_5
0x4000215	        0x488b55f8	                mov rdx, qword [rbp - 8]	       694	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x4000219	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       694	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x400021d	          0x4829c2	                            sub rdx, rax	       694	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x4000220	          0x4889d0	                            mov rax, rdx	       694	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x4000223	          0x4889c2	                            mov rdx, rax	       694	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x4000226	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       694	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x400022a	          0x4829d0	                            sub rax, rdx	       694	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x400022d	          0x4889c2	                            mov rdx, rax	       694	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x4000230	        0x488b45f8	                mov rax, qword [rbp - 8]	       694	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x4000234	          0x4801d0	                            add rax, rdx	       694	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x4000237	          0xc60000	                       mov byte [rax], 0	       694	disassemble.c	FUNCTION_4	FOR_3	IF_4
0x400023a	      0x488345e001	               add qword [rbp - 0x20], 1	       684	disassemble.c	FUNCTION_4	FOR_3
0x400023f	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       684	disassemble.c	FUNCTION_4	FOR_3
0x4000243	           0xfb600	                   movzx eax, byte [rax]	       684	disassemble.c	FUNCTION_4	FOR_3
0x4000246	            0x84c0	                             test al, al	       684	disassemble.c	FUNCTION_4	FOR_3
0x4000248	     0xf854bffffff	                           jne 0x4000199	       684	disassemble.c	FUNCTION_4	FOR_3
0x400024e	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       696	disassemble.c	FUNCTION_4	CALL_6
0x4000252	           0xfb600	                   movzx eax, byte [rax]	       696	disassemble.c	FUNCTION_4	CALL_6
0x4000255	            0x84c0	                             test al, al	       696	disassemble.c	FUNCTION_4	CALL_6
0x4000257	            0x7406	                            je 0x400025f	       696	disassemble.c	FUNCTION_4	CALL_6
0x4000259	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       696	disassemble.c	FUNCTION_4	CALL_6
0x400025d	            0xeb05	                           jmp 0x4000264	       696	disassemble.c	FUNCTION_4	CALL_6
0x400025f	      0xb800000000	                              mov eax, 0	       696	disassemble.c	FUNCTION_4	CALL_6
0x4000264	              0x90	                                     nop	       696	disassemble.c	FUNCTION_4	CALL_6
0x4000265	              0xc9	                                   leave	       697	disassemble.c	FUNCTION_4
0x4000266	              0xc3	                                     ret	       697	disassemble.c	FUNCTION_4
disassembler_usage	functions,0:FOR,0:DO,0:CALL,10:ELSE,0:SWITCH,0:WHILE,0:IF,0	10
0x4000073	              0x55	                                push rbp	       538	disassemble.c	ELSE_8	FUNCTION_2
0x4000074	          0x4889e5	                            mov rbp, rsp	       538	disassemble.c	ELSE_8	FUNCTION_2
0x4000077	        0x4883ec10	                           sub rsp, 0x10	       538	disassemble.c	ELSE_8	FUNCTION_2
0x400007b	        0x48897df8	                mov qword [rbp - 8], rdi	       538	disassemble.c	ELSE_8	FUNCTION_2
0x400007f	        0x488b45f8	                mov rax, qword [rbp - 8]	       561	disassemble.c	ELSE_8	FUNCTION_2	CALL_8
0x4000083	          0x4889c7	                            mov rdi, rax	       561	disassemble.c	ELSE_8	FUNCTION_2	CALL_8
0x4000086	      0xe800000000	                          call 0x400008b	       561	disassemble.c	ELSE_8	FUNCTION_2	CALL_8
0x400008b	              0x90	                                     nop	       570	disassemble.c	ELSE_8	FUNCTION_2
0x400008c	              0xc9	                                   leave	       571	disassemble.c	ELSE_8	FUNCTION_2
0x400008d	              0xc3	                                     ret	       571	disassemble.c	ELSE_8	FUNCTION_2
disassembler_options_cmp	functions,0:FOR,0:DO,1:CALL,0:ELSE,0:SWITCH,0:WHILE,0:IF,3	36
0x4000267	              0x55	                                push rbp	       704	disassemble.c	FUNCTION_5
0x4000268	          0x4889e5	                            mov rbp, rsp	       704	disassemble.c	FUNCTION_5
0x400026b	        0x48897de8	             mov qword [rbp - 0x18], rdi	       704	disassemble.c	FUNCTION_5
0x400026f	        0x488975e0	             mov qword [rbp - 0x20], rsi	       704	disassemble.c	FUNCTION_5
0x4000273	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       709	disassemble.c	FUNCTION_5	DO_1
0x4000277	        0x488d5001	                      lea rdx, [rax + 1]	       709	disassemble.c	FUNCTION_5	DO_1
0x400027b	        0x488955e8	             mov qword [rbp - 0x18], rdx	       709	disassemble.c	FUNCTION_5	DO_1
0x400027f	           0xfb600	                   movzx eax, byte [rax]	       709	disassemble.c	FUNCTION_5	DO_1
0x4000282	          0x8845fe	                  mov byte [rbp - 2], al	       709	disassemble.c	FUNCTION_5	DO_1
0x4000285	        0x807dfe2c	                cmp byte [rbp - 2], 0x2c	       710	disassemble.c	FUNCTION_5	DO_1	IF_1
0x4000289	            0x7504	                           jne 0x400028f	       710	disassemble.c	FUNCTION_5	DO_1	IF_1
0x400028b	        0xc645fe00	                   mov byte [rbp - 2], 0	       711	disassemble.c	FUNCTION_5	DO_1	IF_1
0x400028f	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       712	disassemble.c	FUNCTION_5	DO_1
0x4000293	        0x488d5001	                      lea rdx, [rax + 1]	       712	disassemble.c	FUNCTION_5	DO_1
0x4000297	        0x488955e0	             mov qword [rbp - 0x20], rdx	       712	disassemble.c	FUNCTION_5	DO_1
0x400029b	           0xfb600	                   movzx eax, byte [rax]	       712	disassemble.c	FUNCTION_5	DO_1
0x400029e	          0x8845ff	                  mov byte [rbp - 1], al	       712	disassemble.c	FUNCTION_5	DO_1
0x40002a1	        0x807dff2c	                cmp byte [rbp - 1], 0x2c	       713	disassemble.c	FUNCTION_5	DO_1	IF_2
0x40002a5	            0x7504	                           jne 0x40002ab	       713	disassemble.c	FUNCTION_5	DO_1	IF_2
0x40002a7	        0xc645ff00	                   mov byte [rbp - 1], 0	       714	disassemble.c	FUNCTION_5	DO_1	IF_2
0x40002ab	        0x807dfe00	                   cmp byte [rbp - 2], 0	       715	disassemble.c	FUNCTION_5	DO_1	IF_3
0x40002af	            0x750e	                           jne 0x40002bf	       715	disassemble.c	FUNCTION_5	DO_1	IF_3
0x40002b1	         0xfb655fe	               movzx edx, byte [rbp - 2]	       716	disassemble.c	FUNCTION_5	DO_1	IF_3
0x40002b5	         0xfb645ff	               movzx eax, byte [rbp - 1]	       716	disassemble.c	FUNCTION_5	DO_1	IF_3
0x40002b9	            0x29c2	                            sub edx, eax	       716	disassemble.c	FUNCTION_5	DO_1	IF_3
0x40002bb	            0x89d0	                            mov eax, edx	       716	disassemble.c	FUNCTION_5	DO_1	IF_3
0x40002bd	            0xeb15	                           jmp 0x40002d4	       716	disassemble.c	FUNCTION_5	DO_1	IF_3
0x40002bf	         0xfb645fe	               movzx eax, byte [rbp - 2]	       718	disassemble.c	FUNCTION_5
0x40002c3	          0x3a45ff	                  cmp al, byte [rbp - 1]	       718	disassemble.c	FUNCTION_5
0x40002c6	            0x74ab	                            je 0x4000273	       718	disassemble.c	FUNCTION_5
0x40002c8	         0xfb655fe	               movzx edx, byte [rbp - 2]	       720	disassemble.c	FUNCTION_5
0x40002cc	         0xfb645ff	               movzx eax, byte [rbp - 1]	       720	disassemble.c	FUNCTION_5
0x40002d0	            0x29c2	                            sub edx, eax	       720	disassemble.c	FUNCTION_5
0x40002d2	            0x89d0	                            mov eax, edx	       720	disassemble.c	FUNCTION_5
0x40002d4	              0x5d	                                 pop rbp	       721	disassemble.c	FUNCTION_5
0x40002d5	              0xc3	                                     ret	       721	disassemble.c	FUNCTION_5
