adler32_combine64	CALL,1:DO,0:SWITCH,0:IF,0:FOR,0:WHILE,0:functions,0:ELSE,0	14
0x400083e	              0x55	                                push rbp	       184	adler32.c	FUNCTION_3
0x400083f	          0x4889e5	                            mov rbp, rsp	       184	adler32.c	FUNCTION_3
0x4000842	        0x4883ec18	                           sub rsp, 0x18	       184	adler32.c	FUNCTION_3
0x4000846	        0x48897df8	                mov qword [rbp - 8], rdi	       184	adler32.c	FUNCTION_3
0x400084a	        0x488975f0	             mov qword [rbp - 0x10], rsi	       184	adler32.c	FUNCTION_3
0x400084e	        0x488955e8	             mov qword [rbp - 0x18], rdx	       184	adler32.c	FUNCTION_3
0x4000852	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       185	adler32.c	FUNCTION_3	CALL_1
0x4000856	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	       185	adler32.c	FUNCTION_3	CALL_1
0x400085a	        0x488b45f8	                mov rax, qword [rbp - 8]	       185	adler32.c	FUNCTION_3	CALL_1
0x400085e	          0x4889ce	                            mov rsi, rcx	       185	adler32.c	FUNCTION_3	CALL_1
0x4000861	          0x4889c7	                            mov rdi, rax	       185	adler32.c	FUNCTION_3	CALL_1
0x4000864	      0xe830feffff	                          call 0x4000699	       185	adler32.c	FUNCTION_3	CALL_1
0x4000869	              0xc9	                                   leave	       186	adler32.c	FUNCTION_3
0x400086a	              0xc3	                                     ret	       186	adler32.c	FUNCTION_3
adler32_combine_	CALL,0:DO,0:SWITCH,0:IF,5:FOR,0:WHILE,0:functions,0:ELSE,0	96
0x4000699	              0x55	                                push rbp	       147	adler32.c	FUNCTION_1
0x400069a	          0x4889e5	                            mov rbp, rsp	       147	adler32.c	FUNCTION_1
0x400069d	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       147	adler32.c	FUNCTION_1
0x40006a1	        0x488975d0	             mov qword [rbp - 0x30], rsi	       147	adler32.c	FUNCTION_1
0x40006a5	        0x488955c8	             mov qword [rbp - 0x38], rdx	       147	adler32.c	FUNCTION_1
0x40006a9	      0x48837dc800	               cmp qword [rbp - 0x38], 0	       153	adler32.c	FUNCTION_1	IF_1
0x40006ae	            0x790a	                           jns 0x40006ba	       153	adler32.c	FUNCTION_1	IF_1
0x40006b0	      0xb8ffffffff	                     mov eax, 0xffffffff	       154	adler32.c	FUNCTION_1	IF_1
0x40006b5	      0xe955010000	                           jmp 0x400080f	       154	adler32.c	FUNCTION_1	IF_1
0x40006ba	        0x488b4dc8	             mov rcx, qword [rbp - 0x38]	       157	adler32.c	FUNCTION_1
0x40006be	    0x48bae7e29786	          movabs rdx, 0x800780708697e2e7	       157	adler32.c	FUNCTION_1
0x40006c8	          0x4889c8	                            mov rax, rcx	       157	adler32.c	FUNCTION_1
0x40006cb	          0x48f7ea	                                imul rdx	       157	adler32.c	FUNCTION_1
0x40006ce	        0x488d040a	                    lea rax, [rdx + rcx]	       157	adler32.c	FUNCTION_1
0x40006d2	        0x48c1f80f	                            sar rax, 0xf	       157	adler32.c	FUNCTION_1
0x40006d6	          0x4889c2	                            mov rdx, rax	       157	adler32.c	FUNCTION_1
0x40006d9	          0x4889c8	                            mov rax, rcx	       157	adler32.c	FUNCTION_1
0x40006dc	        0x48c1f83f	                           sar rax, 0x3f	       157	adler32.c	FUNCTION_1
0x40006e0	          0x4889d6	                            mov rsi, rdx	       157	adler32.c	FUNCTION_1
0x40006e3	          0x4829c6	                            sub rsi, rax	       157	adler32.c	FUNCTION_1
0x40006e6	          0x4889f2	                            mov rdx, rsi	       157	adler32.c	FUNCTION_1
0x40006e9	          0x4889d0	                            mov rax, rdx	       157	adler32.c	FUNCTION_1
0x40006ec	        0x48c1e004	                              shl rax, 4	       157	adler32.c	FUNCTION_1
0x40006f0	          0x4889c2	                            mov rdx, rax	       157	adler32.c	FUNCTION_1
0x40006f3	          0x4889d0	                            mov rax, rdx	       157	adler32.c	FUNCTION_1
0x40006f6	        0x48c1e00c	                            shl rax, 0xc	       157	adler32.c	FUNCTION_1
0x40006fa	          0x4829d0	                            sub rax, rdx	       157	adler32.c	FUNCTION_1
0x40006fd	          0x4801f0	                            add rax, rsi	       157	adler32.c	FUNCTION_1
0x4000700	          0x4829c1	                            sub rcx, rax	       157	adler32.c	FUNCTION_1
0x4000703	          0x4889c8	                            mov rax, rcx	       157	adler32.c	FUNCTION_1
0x4000706	        0x488945c8	             mov qword [rbp - 0x38], rax	       157	adler32.c	FUNCTION_1
0x400070a	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       158	adler32.c	FUNCTION_1
0x400070e	          0x8945ec	             mov dword [rbp - 0x14], eax	       158	adler32.c	FUNCTION_1
0x4000711	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       159	adler32.c	FUNCTION_1
0x4000715	           0xfb7c0	                           movzx eax, ax	       159	adler32.c	FUNCTION_1
0x4000718	        0x488945f0	             mov qword [rbp - 0x10], rax	       159	adler32.c	FUNCTION_1
0x400071c	          0x8b45ec	             mov eax, dword [rbp - 0x14]	       160	adler32.c	FUNCTION_1
0x400071f	      0x480faf45f0	            imul rax, qword [rbp - 0x10]	       160	adler32.c	FUNCTION_1
0x4000724	        0x488945f8	                mov qword [rbp - 8], rax	       160	adler32.c	FUNCTION_1
0x4000728	        0x488b4df8	                mov rcx, qword [rbp - 8]	       161	adler32.c	FUNCTION_1
0x400072c	    0x48bacdc52f0d	             movabs rdx, 0xf00e10d2fc5cd	       161	adler32.c	FUNCTION_1
0x4000736	          0x4889c8	                            mov rax, rcx	       161	adler32.c	FUNCTION_1
0x4000739	          0x48f7e2	                                 mul rdx	       161	adler32.c	FUNCTION_1
0x400073c	          0x4889c8	                            mov rax, rcx	       161	adler32.c	FUNCTION_1
0x400073f	          0x4829d0	                            sub rax, rdx	       161	adler32.c	FUNCTION_1
0x4000742	          0x48d1e8	                              shr rax, 1	       161	adler32.c	FUNCTION_1
0x4000745	          0x4801d0	                            add rax, rdx	       161	adler32.c	FUNCTION_1
0x4000748	        0x48c1e80f	                            shr rax, 0xf	       161	adler32.c	FUNCTION_1
0x400074c	          0x4889c6	                            mov rsi, rax	       161	adler32.c	FUNCTION_1
0x400074f	          0x4889f2	                            mov rdx, rsi	       161	adler32.c	FUNCTION_1
0x4000752	          0x4889d0	                            mov rax, rdx	       161	adler32.c	FUNCTION_1
0x4000755	        0x48c1e004	                              shl rax, 4	       161	adler32.c	FUNCTION_1
0x4000759	          0x4889c2	                            mov rdx, rax	       161	adler32.c	FUNCTION_1
0x400075c	          0x4889d0	                            mov rax, rdx	       161	adler32.c	FUNCTION_1
0x400075f	        0x48c1e00c	                            shl rax, 0xc	       161	adler32.c	FUNCTION_1
0x4000763	          0x4829d0	                            sub rax, rdx	       161	adler32.c	FUNCTION_1
0x4000766	          0x4801f0	                            add rax, rsi	       161	adler32.c	FUNCTION_1
0x4000769	          0x4829c1	                            sub rcx, rax	       161	adler32.c	FUNCTION_1
0x400076c	          0x4889c8	                            mov rax, rcx	       161	adler32.c	FUNCTION_1
0x400076f	        0x488945f8	                mov qword [rbp - 8], rax	       161	adler32.c	FUNCTION_1
0x4000773	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       162	adler32.c	FUNCTION_1
0x4000777	           0xfb7d0	                           movzx edx, ax	       162	adler32.c	FUNCTION_1
0x400077a	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       162	adler32.c	FUNCTION_1
0x400077e	          0x4801d0	                            add rax, rdx	       162	adler32.c	FUNCTION_1
0x4000781	    0x4805f0ff0000	                         add rax, 0xfff0	       162	adler32.c	FUNCTION_1
0x4000787	        0x488945f0	             mov qword [rbp - 0x10], rax	       162	adler32.c	FUNCTION_1
0x400078b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       163	adler32.c	FUNCTION_1
0x400078f	        0x48c1e810	                           shr rax, 0x10	       163	adler32.c	FUNCTION_1
0x4000793	           0xfb7d0	                           movzx edx, ax	       163	adler32.c	FUNCTION_1
0x4000796	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       163	adler32.c	FUNCTION_1
0x400079a	        0x48c1e810	                           shr rax, 0x10	       163	adler32.c	FUNCTION_1
0x400079e	           0xfb7c0	                           movzx eax, ax	       163	adler32.c	FUNCTION_1
0x40007a1	          0x4801c2	                            add rdx, rax	       163	adler32.c	FUNCTION_1
0x40007a4	          0x8b45ec	             mov eax, dword [rbp - 0x14]	       163	adler32.c	FUNCTION_1
0x40007a7	          0x4829c2	                            sub rdx, rax	       163	adler32.c	FUNCTION_1
0x40007aa	        0x488b45f8	                mov rax, qword [rbp - 8]	       163	adler32.c	FUNCTION_1
0x40007ae	          0x4801d0	                            add rax, rdx	       163	adler32.c	FUNCTION_1
0x40007b1	    0x4805f1ff0000	                         add rax, 0xfff1	       163	adler32.c	FUNCTION_1
0x40007b7	        0x488945f8	                mov qword [rbp - 8], rax	       163	adler32.c	FUNCTION_1
0x40007bb	    0x48817df0f0ff	         cmp qword [rbp - 0x10], 0xfff0 	       164	adler32.c	FUNCTION_1	IF_2
0x40007c3	            0x7608	                           jbe 0x40007cd	       164	adler32.c	FUNCTION_1	IF_2
0x40007c5	    0x48816df0f1ff	          sub qword [rbp - 0x10], 0xfff1	       164	adler32.c	FUNCTION_1	IF_2
0x40007cd	    0x48817df0f0ff	         cmp qword [rbp - 0x10], 0xfff0 	       165	adler32.c	FUNCTION_1	IF_3
0x40007d5	            0x7608	                           jbe 0x40007df	       165	adler32.c	FUNCTION_1	IF_3
0x40007d7	    0x48816df0f1ff	          sub qword [rbp - 0x10], 0xfff1	       165	adler32.c	FUNCTION_1	IF_3
0x40007df	    0x48817df8e1ff	           cmp qword [rbp - 8], 0x1ffe1 	       166	adler32.c	FUNCTION_1	IF_4
0x40007e7	            0x7608	                           jbe 0x40007f1	       166	adler32.c	FUNCTION_1	IF_4
0x40007e9	    0x48816df8e2ff	            sub qword [rbp - 8], 0x1ffe2	       166	adler32.c	FUNCTION_1	IF_4
0x40007f1	    0x48817df8f0ff	            cmp qword [rbp - 8], 0xfff0 	       167	adler32.c	FUNCTION_1	IF_5
0x40007f9	            0x7608	                           jbe 0x4000803	       167	adler32.c	FUNCTION_1	IF_5
0x40007fb	    0x48816df8f1ff	             sub qword [rbp - 8], 0xfff1	       167	adler32.c	FUNCTION_1	IF_5
0x4000803	        0x488b45f8	                mov rax, qword [rbp - 8]	       168	adler32.c	FUNCTION_1
0x4000807	        0x48c1e010	                           shl rax, 0x10	       168	adler32.c	FUNCTION_1
0x400080b	        0x480b45f0	              or rax, qword [rbp - 0x10]	       168	adler32.c	FUNCTION_1
0x400080f	              0x5d	                                 pop rbp	       169	adler32.c	FUNCTION_1
0x4000810	              0xc3	                                     ret	       169	adler32.c	FUNCTION_1
adler32_combine	CALL,1:DO,0:SWITCH,0:IF,0:FOR,0:WHILE,0:functions,0:ELSE,0	14
0x4000811	              0x55	                                push rbp	       176	adler32.c	FUNCTION_2
0x4000812	          0x4889e5	                            mov rbp, rsp	       176	adler32.c	FUNCTION_2
0x4000815	        0x4883ec18	                           sub rsp, 0x18	       176	adler32.c	FUNCTION_2
0x4000819	        0x48897df8	                mov qword [rbp - 8], rdi	       176	adler32.c	FUNCTION_2
0x400081d	        0x488975f0	             mov qword [rbp - 0x10], rsi	       176	adler32.c	FUNCTION_2
0x4000821	        0x488955e8	             mov qword [rbp - 0x18], rdx	       176	adler32.c	FUNCTION_2
0x4000825	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       177	adler32.c	FUNCTION_2	CALL_1
0x4000829	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	       177	adler32.c	FUNCTION_2	CALL_1
0x400082d	        0x488b45f8	                mov rax, qword [rbp - 8]	       177	adler32.c	FUNCTION_2	CALL_1
0x4000831	          0x4889ce	                            mov rsi, rcx	       177	adler32.c	FUNCTION_2	CALL_1
0x4000834	          0x4889c7	                            mov rdi, rax	       177	adler32.c	FUNCTION_2	CALL_1
0x4000837	      0xe85dfeffff	                          call 0x4000699	       177	adler32.c	FUNCTION_2	CALL_1
0x400083c	              0xc9	                                   leave	       178	adler32.c	FUNCTION_2
0x400083d	              0xc3	                                     ret	       178	adler32.c	FUNCTION_2
