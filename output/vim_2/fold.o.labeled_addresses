deleteFoldEntry	DO,0:ELSE,1:FOR,1:SWITCH,0:IF,6:CALL,6:WHILE,0:functions,0	93
0x400134c	            0x4157	                                push r15	      1399	fold.c	FUNCTION_43
0x400134e	            0x4156	                                push r14	      1399	fold.c	FUNCTION_43
0x4001350	            0x4155	                                push r13	      1399	fold.c	FUNCTION_43
0x4001352	            0x4154	                                push r12	      1399	fold.c	FUNCTION_43
0x4001354	              0x55	                                push rbp	      1399	fold.c	FUNCTION_43
0x4001355	              0x53	                                push rbx	      1399	fold.c	FUNCTION_43
0x4001356	        0x4883ec08	                              sub rsp, 8	      1399	fold.c	FUNCTION_43
0x400135a	          0x4889fd	                            mov rbp, rdi	      1399	fold.c	FUNCTION_43
0x400135d	          0x4189f4	                           mov r12d, esi	      1399	fold.c	FUNCTION_43
0x4001360	          0x4863c6	                         movsxd rax, esi	      1405	fold.c	FUNCTION_43
0x4001363	        0x488d1c40	                  lea rbx, [rax + rax*2]	      1405	fold.c	FUNCTION_43
0x4001367	        0x48c1e304	                              shl rbx, 4	      1405	fold.c	FUNCTION_43
0x400136b	          0x4989dd	                            mov r13, rbx	      1405	fold.c	FUNCTION_43
0x400136e	        0x4c036f10	             add r13, qword [rdi + 0x10]	      1405	fold.c	FUNCTION_43
0x4001372	            0x85d2	                           test edx, edx	      1406	fold.c	FUNCTION_43	IF_1
0x4001374	            0x7509	                           jne 0x400137f	      1406	fold.c	FUNCTION_43	IF_1
0x4001376	        0x458b7510	           mov r14d, dword [r13 + 0x10] 	      1406	fold.c	FUNCTION_43	IF_1
0x400137a	          0x4585f6	                         test r14d, r14d	      1406	fold.c	FUNCTION_43	IF_1
0x400137d	            0x7539	                           jne 0x40013b8	      1406	fold.c	FUNCTION_43	IF_1
0x400137f	        0x498d7d10	                   lea rdi, [r13 + 0x10]	      1409	fold.c	FUNCTION_43	IF_1	CALL_1
0x4001383	      0xe800000000	                          call 0x4001388	      1409	fold.c	FUNCTION_43	IF_1	CALL_1
0x4001388	          0x8b4500	                    mov eax, dword [rbp]	      1410	fold.c	FUNCTION_43	IF_1
0x400138b	          0x83e801	                              sub eax, 1	      1410	fold.c	FUNCTION_43	IF_1
0x400138e	          0x894500	                    mov dword [rbp], eax	      1410	fold.c	FUNCTION_43	IF_1
0x4001391	          0x4139c4	                           cmp r12d, eax	      1411	fold.c	FUNCTION_43	IF_1	IF_2
0x4001394	     0xf8dd2000000	                           jge 0x400146c	      1411	fold.c	FUNCTION_43	IF_1	IF_2
0x400139a	          0x4429e0	                           sub eax, r12d	        59	string3.h	FUNCTION_78	CALL_3
0x400139d	            0x4898	                                    cdqe	        59	string3.h	FUNCTION_78	CALL_3
0x400139f	        0x488d1440	                  lea rdx, [rax + rax*2]	        59	string3.h	FUNCTION_78	CALL_3
0x40013a3	        0x48c1e204	                              shl rdx, 4	        59	string3.h	FUNCTION_78	CALL_3
0x40013a7	        0x498d7530	                   lea rsi, [r13 + 0x30]	        59	string3.h	FUNCTION_78	CALL_3
0x40013ab	          0x4c89ef	                            mov rdi, r13	        59	string3.h	FUNCTION_78	CALL_3
0x40013ae	      0xe800000000	                          call 0x40013b3	        59	string3.h	FUNCTION_78	CALL_3
0x40013b3	      0xe9b4000000	                           jmp 0x400146c	        59	string3.h	FUNCTION_78	CALL_3
0x40013b8	        0x458d6eff	                     lea r13d, [r14 - 1]	      1419	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_3
0x40013bc	          0x4489ee	                           mov esi, r13d	      1419	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_3
0x40013bf	      0xe800000000	                          call 0x40013c4	      1419	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_3
0x40013c4	          0x83f801	                              cmp eax, 1	      1419	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_3
0x40013c7	     0xf859f000000	                           jne 0x400146c	      1419	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_3
0x40013cd	        0x48035d10	             add rbx, qword [rbp + 0x10]	      1422	fold.c	FUNCTION_43	ELSE_1	IF_3
0x40013d1	        0x4c8b7b20	            mov r15, qword [rbx + 0x20] 	      1425	fold.c	FUNCTION_43	ELSE_1	IF_3
0x40013d5	          0x4585f6	                         test r14d, r14d	      1426	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x40013d8	            0x7e38	                           jle 0x4001412	      1426	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x40013da	          0x4c89f8	                            mov rax, r15	      1426	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x40013dd	          0x4589ed	                          mov r13d, r13d	      1426	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x40013e0	      0x4b8d4c6d03	              lea rcx, [r13 + r13*2 + 3]	      1426	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x40013e5	        0x48c1e104	                              shl rcx, 4	      1426	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x40013e9	          0x4c01f9	                            add rcx, r15	      1426	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x40013ec	          0x4889c6	                            mov rsi, rax	      1426	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x40013ef	          0x488b13	                    mov rdx, qword [rbx]	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x40013f2	          0x480110	                    add qword [rax], rdx	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x40013f5	        0x807b2802	                cmp byte [rbx + 0x28], 2	      1429	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_4
0x40013f9	            0x7504	                           jne 0x40013ff	      1429	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_4
0x40013fb	        0xc6402802	                mov byte [rax + 0x28], 2	      1430	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_4
0x40013ff	        0x807b2902	                cmp byte [rbx + 0x29], 2	      1431	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_5
0x4001403	            0x7504	                           jne 0x4001409	      1431	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_5
0x4001405	        0xc6462902	                mov byte [rsi + 0x29], 2	      1432	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_5
0x4001409	        0x4883c030	                           add rax, 0x30	      1432	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_5
0x400140d	          0x4839c8	                            cmp rax, rcx	      1426	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x4001410	            0x75da	                           jne 0x40013ec	      1426	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x4001412	        0x4183c401	                             add r12d, 1	      1436	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6
0x4001416	          0x8b4500	                    mov eax, dword [rbp]	      1436	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6
0x4001419	          0x4139c4	                           cmp r12d, eax	      1436	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6
0x400141c	            0x7d24	                           jge 0x4001442	      1436	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6
0x400141e	          0x4429e0	                           sub eax, r12d	        59	string3.h	FUNCTION_78	CALL_3
0x4001421	            0x4898	                                    cdqe	        59	string3.h	FUNCTION_78	CALL_3
0x4001423	        0x488d1440	                  lea rdx, [rax + rax*2]	        59	string3.h	FUNCTION_78	CALL_3
0x4001427	        0x48c1e204	                              shl rdx, 4	        59	string3.h	FUNCTION_78	CALL_3
0x400142b	        0x488d7330	                   lea rsi, [rbx + 0x30]	        59	string3.h	FUNCTION_78	CALL_3
0x400142f	          0x4963c6	                        movsxd rax, r14d	        59	string3.h	FUNCTION_78	CALL_3
0x4001432	        0x488d3c40	                  lea rdi, [rax + rax*2]	        59	string3.h	FUNCTION_78	CALL_3
0x4001436	        0x48c1e704	                              shl rdi, 4	        59	string3.h	FUNCTION_78	CALL_3
0x400143a	          0x4801df	                            add rdi, rbx	        59	string3.h	FUNCTION_78	CALL_3
0x400143d	      0xe800000000	                          call 0x4001442	        59	string3.h	FUNCTION_78	CALL_3
0x4001442	          0x4963c6	                        movsxd rax, r14d	        59	string3.h	FUNCTION_78	CALL_3
0x4001445	        0x488d1440	                  lea rdx, [rax + rax*2]	        59	string3.h	FUNCTION_78	CALL_3
0x4001449	        0x48c1e204	                              shl rdx, 4	        59	string3.h	FUNCTION_78	CALL_3
0x400144d	          0x4c89fe	                            mov rsi, r15	        59	string3.h	FUNCTION_78	CALL_3
0x4001450	          0x4889df	                            mov rdi, rbx	        59	string3.h	FUNCTION_78	CALL_3
0x4001453	      0xe800000000	                          call 0x4001458	        59	string3.h	FUNCTION_78	CALL_3
0x4001458	          0x4c89ff	                            mov rdi, r15	      1441	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_6
0x400145b	      0xe800000000	                          call 0x4001460	      1441	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_6
0x4001460	        0x44037500	                   add r14d, dword [rbp]	      1442	fold.c	FUNCTION_43	ELSE_1	IF_3
0x4001464	        0x4183ee01	                             sub r14d, 1	      1442	fold.c	FUNCTION_43	ELSE_1	IF_3
0x4001468	        0x44897500	                   mov dword [rbp], r14d	      1442	fold.c	FUNCTION_43	ELSE_1	IF_3
0x400146c	        0x4883c408	                              add rsp, 8	      1445	fold.c	FUNCTION_43
0x4001470	              0x5b	                                 pop rbx	      1445	fold.c	FUNCTION_43
0x4001471	              0x5d	                                 pop rbp	      1445	fold.c	FUNCTION_43
0x4001472	            0x415c	                                 pop r12	      1445	fold.c	FUNCTION_43
0x4001474	            0x415d	                                 pop r13	      1445	fold.c	FUNCTION_43
0x4001476	            0x415e	                                 pop r14	      1445	fold.c	FUNCTION_43
0x4001478	            0x415f	                                 pop r15	      1445	fold.c	FUNCTION_43
0x400147a	              0xc3	                                     ret	      1445	fold.c	FUNCTION_43
foldMoveTo	DO,0:ELSE,5:FOR,2:SWITCH,0:IF,20:CALL,4:WHILE,0:functions,0	156
0x400388f	            0x4157	                                push r15	       867	fold.c	FUNCTION_30
0x4003891	            0x4156	                                push r14	       867	fold.c	FUNCTION_30
0x4003893	            0x4155	                                push r13	       867	fold.c	FUNCTION_30
0x4003895	            0x4154	                                push r12	       867	fold.c	FUNCTION_30
0x4003897	              0x55	                                push rbp	       867	fold.c	FUNCTION_30
0x4003898	              0x53	                                push rbx	       867	fold.c	FUNCTION_30
0x4003899	        0x4883ec48	                           sub rsp, 0x48	       867	fold.c	FUNCTION_30
0x400389d	          0x4189ff	                           mov r15d, edi	       867	fold.c	FUNCTION_30
0x40038a0	          0x4189f6	                           mov r14d, esi	       867	fold.c	FUNCTION_30
0x40038a3	          0x4889d3	                            mov rbx, rdx	       867	fold.c	FUNCTION_30
0x40038a6	      0x4889542418	             mov qword [rsp + 0x18], rdx	       867	fold.c	FUNCTION_30
0x40038ab	    0x64488b042528	                mov rax, qword fs:[0x28]	       867	fold.c	FUNCTION_30
0x40038b4	      0x4889442438	             mov qword [rsp + 0x38], rax	       867	fold.c	FUNCTION_30
0x40038b9	            0x31c0	                            xor eax, eax	       867	fold.c	FUNCTION_30
0x40038bb	    0x488b3d000000	            mov rdi, qword [0x040038c2] 	       880	fold.c	FUNCTION_30	CALL_1
0x40038c2	      0xe8bdf0ffff	                    call sym.checkupdate	       880	fold.c	FUNCTION_30	CALL_1
0x40038c7	          0x4885db	                           test rbx, rbx	       883	fold.c	FUNCTION_30	FOR_1
0x40038ca	     0xf8e1d020000	                           jle 0x4003aed	       883	fold.c	FUNCTION_30	FOR_1
0x40038d0	    0xc74424140000	               mov dword [rsp + 0x14], 0	       883	fold.c	FUNCTION_30	FOR_1
0x40038d8	    0x48c744240800	                  mov qword [rsp + 8], 0	       883	fold.c	FUNCTION_30	FOR_1
0x40038e1	    0x488b05000000	            mov rax, qword [0x040038e8] 	       888	fold.c	FUNCTION_30	FOR_1
0x40038e8	    0x488da8080100	                  lea rbp, [rax + 0x108]	       888	fold.c	FUNCTION_30	FOR_1
0x40038ef	    0xc74424280000	               mov dword [rsp + 0x28], 0	       889	fold.c	FUNCTION_30	FOR_1
0x40038f7	    0xc744242c0000	               mov dword [rsp + 0x2c], 0	       890	fold.c	FUNCTION_30	FOR_1
0x40038ff	        0x4c8b6838	            mov r13, qword [rax + 0x38] 	       891	fold.c	FUNCTION_30	FOR_1
0x4003903	    0x41bc00000000	                             mov r12d, 0	       892	fold.c	FUNCTION_30	FOR_1
0x4003909	      0xbb00000000	                              mov ebx, 0	       887	fold.c	FUNCTION_30	FOR_1
0x400390e	    0x488b05000000	            mov rax, qword [0x04003915] 	       896	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	CALL_2
0x4003915	        0x488b7038	            mov rsi, qword [rax + 0x38] 	       896	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	CALL_2
0x4003919	          0x4829de	                            sub rsi, rbx	       896	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	CALL_2
0x400391c	      0x488d542430	                   lea rdx, [rsp + 0x30]	       896	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	CALL_2
0x4003921	          0x4889ef	                            mov rdi, rbp	       896	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	CALL_2
0x4003924	      0xe8b7c7ffff	                       call sym.foldFind	       896	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	CALL_2
0x4003929	            0x85c0	                           test eax, eax	       896	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	CALL_2
0x400392b	            0x755c	                           jne 0x4003989	       896	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	CALL_2
0x400392d	          0x4585ff	                         test r15d, r15d	       898	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_2
0x4003930	     0xf846c010000	                            je 0x4003aa2	       898	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_2
0x4003936	        0x4183fe01	                             cmp r14d, 1	       903	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3
0x400393a	            0x7539	                           jne 0x4003975	       903	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3
0x400393c	      0x488b542430	            mov rdx, qword [rsp + 0x30] 	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x4003941	          0x4889d0	                            mov rax, rdx	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x4003944	        0x482b4510	             sub rax, qword [rbp + 0x10]	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x4003948	        0x48c1f804	                              sar rax, 4	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x400394c	    0x48bfabaaaaaa	          movabs rdi, 0xaaaaaaaaaaaaaaab	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x4003956	        0x480fafc7	                           imul rax, rdi	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x400395a	        0x48634d00	                 movsxd rcx, dword [rbp]	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x400395e	          0x4839c8	                            cmp rax, rcx	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x4003961	     0xf8d3b010000	                           jge 0x4003aa2	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x4003967	        0x4883ea30	                           sub rdx, 0x30	       907	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3
0x400396b	      0x4889542430	             mov qword [rsp + 0x30], rdx	       907	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3
0x4003970	      0xe996010000	                           jmp 0x4003b0b	       907	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3
0x4003975	      0x488b442430	            mov rax, qword [rsp + 0x30] 	       911	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	ELSE_1	IF_5
0x400397a	        0x48394510	            cmp qword [rbp + 0x10], rax 	       911	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	ELSE_1	IF_5
0x400397e	     0xf8587010000	                           jne 0x4003b0b	       911	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	ELSE_1	IF_5
0x4003984	      0xe919010000	                           jmp 0x4003aa2	       911	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	ELSE_1	IF_5
0x4003989	          0x4989d9	                             mov r9, rbx	       922	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_7	CALL_3
0x400398c	      0x4c8d44242c	                    lea r8, [rsp + 0x2c]	       922	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_7	CALL_3
0x4003991	          0x4489e1	                           mov ecx, r12d	       922	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_7	CALL_3
0x4003994	      0x488d542428	                   lea rdx, [rsp + 0x28]	       922	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_7	CALL_3
0x4003999	      0x488b742430	            mov rsi, qword [rsp + 0x30] 	       922	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_7	CALL_3
0x400399e	    0x488b3d000000	            mov rdi, qword [0x040039a5] 	       922	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_7	CALL_3
0x40039a5	      0xe88bc9ffff	                   call sym.check_closed	       922	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_7	CALL_3
0x40039aa	            0x85c0	                           test eax, eax	       922	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_7	CALL_3
0x40039ac	            0x740e	                            je 0x40039bc	       922	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_7	CALL_3
0x40039ae	          0x4585ff	                         test r15d, r15d	       927	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_8
0x40039b1	     0xf8554010000	                           jne 0x4003b0b	       927	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_8
0x40039b7	      0xe9e6000000	                           jmp 0x4003aa2	       927	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_8
0x40039bc	          0x4585ff	                         test r15d, r15d	       931	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9
0x40039bf	            0x747a	                            je 0x4003a3b	       931	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9
0x40039c1	      0xb800000000	                              mov eax, 0	       931	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9
0x40039c6	        0x4183fe01	                             cmp r14d, 1	       933	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10
0x40039ca	            0x7544	                           jne 0x4003a10	       933	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10
0x40039cc	      0x488b4c2430	            mov rcx, qword [rsp + 0x30] 	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x40039d1	        0x488d5130	                   lea rdx, [rcx + 0x30]	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x40039d5	        0x482b5510	             sub rdx, qword [rbp + 0x10]	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x40039d9	        0x48c1fa04	                              sar rdx, 4	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x40039dd	    0x48bfabaaaaaa	          movabs rdi, 0xaaaaaaaaaaaaaaab	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x40039e7	        0x480fafd7	                           imul rdx, rdi	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x40039eb	        0x48637500	                 movsxd rsi, dword [rbp]	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x40039ef	          0x4839f2	                            cmp rdx, rsi	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x40039f2	     0xf8d91000000	                           jge 0x4003a89	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x40039f8	          0x4889da	                            mov rdx, rbx	       938	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x40039fb	        0x48035130	             add rdx, qword [rcx + 0x30]	       938	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x40039ff	    0x488b0d000000	            mov rcx, qword [0x04003a06] 	       939	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11	IF_12
0x4003a06	        0x483b5138	            cmp rdx, qword [rcx + 0x38] 	       940	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11	IF_12
0x4003a0a	        0x4c0f4fea	                          cmovg r13, rdx	       940	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11	IF_12
0x4003a0e	            0xeb79	                           jmp 0x4003a89	       940	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11	IF_12
0x4003a10	      0x488b4c2430	            mov rcx, qword [rsp + 0x30] 	       946	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x4003a15	        0x48394d10	            cmp qword [rbp + 0x10], rcx 	       946	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x4003a19	            0x736e	                           jae 0x4003a89	       946	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x4003a1b	          0x4889da	                            mov rdx, rbx	       948	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x4003a1e	        0x480351d0	             add rdx, qword [rcx - 0x30]	       948	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x4003a22	        0x480351d8	             add rdx, qword [rcx - 0x28]	       948	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x4003a26	        0x4883ea01	                              sub rdx, 1	       948	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x4003a2a	    0x488b0d000000	            mov rcx, qword [0x04003a31] 	       949	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13	IF_14
0x4003a31	        0x483b5138	            cmp rdx, qword [rcx + 0x38] 	       950	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13	IF_14
0x4003a35	        0x4c0f4cea	                          cmovl r13, rdx	       950	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13	IF_14
0x4003a39	            0xeb4e	                           jmp 0x4003a89	       950	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13	IF_14
0x4003a3b	        0x4183fe01	                             cmp r14d, 1	       958	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x4003a3f	            0x7529	                           jne 0x4003a6a	       958	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x4003a41	      0x488b542430	            mov rdx, qword [rsp + 0x30] 	       960	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x4003a46	          0x4889d8	                            mov rax, rbx	       960	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x4003a49	          0x480302	                    add rax, qword [rdx]	       960	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x4003a4c	        0x48034208	                add rax, qword [rdx + 8]	       960	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x4003a50	        0x4883e801	                              sub rax, 1	       960	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x4003a54	    0x488b15000000	            mov rdx, qword [0x04003a5b] 	       961	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15	IF_16
0x4003a5b	        0x483b4238	            cmp rax, qword [rdx + 0x38] 	       962	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15	IF_16
0x4003a5f	        0x4c0f4fe8	                          cmovg r13, rax	       962	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15	IF_16
0x4003a63	      0xb800000000	                              mov eax, 0	       962	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15	IF_16
0x4003a68	            0xeb1f	                           jmp 0x4003a89	       962	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15	IF_16
0x4003a6a	      0x488b442430	            mov rax, qword [rsp + 0x30] 	       966	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	ELSE_4
0x4003a6f	          0x4889df	                            mov rdi, rbx	       966	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	ELSE_4
0x4003a72	          0x480338	                    add rdi, qword [rax]	       966	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	ELSE_4
0x4003a75	    0x488b15000000	            mov rdx, qword [0x04003a7c] 	       967	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	ELSE_4	IF_17
0x4003a7c	        0x483b7a38	            cmp rdi, qword [rdx + 0x38] 	       968	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	ELSE_4	IF_17
0x4003a80	        0x4c0f4cef	                          cmovl r13, rdi	       968	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	ELSE_4	IF_17
0x4003a84	      0xb800000000	                              mov eax, 0	       968	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	ELSE_4	IF_17
0x4003a89	            0x85c0	                           test eax, eax	       972	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_18
0x4003a8b	            0x7515	                           jne 0x4003aa2	       972	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_18
0x4003a8d	      0x488b442430	            mov rax, qword [rsp + 0x30] 	       976	fold.c	FUNCTION_30	FOR_1	FOR_2
0x4003a92	        0x488d6810	                   lea rbp, [rax + 0x10]	       976	fold.c	FUNCTION_30	FOR_1	FOR_2
0x4003a96	          0x480318	                    add rbx, qword [rax]	       977	fold.c	FUNCTION_30	FOR_1	FOR_2
0x4003a99	        0x4183c401	                             add r12d, 1	       978	fold.c	FUNCTION_30	FOR_1	FOR_2
0x4003a9d	      0xe96cfeffff	                           jmp 0x400390e	       979	fold.c	FUNCTION_30	FOR_1	FOR_2
0x4003aa2	    0x488b05000000	            mov rax, qword [0x04003aa9] 	       980	fold.c	FUNCTION_30	FOR_1	IF_19
0x4003aa9	        0x4c3b6838	            cmp r13, qword [rax + 0x38] 	       980	fold.c	FUNCTION_30	FOR_1	IF_19
0x4003aad	            0x7446	                            je 0x4003af5	       980	fold.c	FUNCTION_30	FOR_1	IF_19
0x4003aaf	      0x837c241400	               cmp dword [rsp + 0x14], 0	       982	fold.c	FUNCTION_30	FOR_1	IF_19	IF_20
0x4003ab4	            0x7505	                           jne 0x4003abb	       982	fold.c	FUNCTION_30	FOR_1	IF_19	IF_20
0x4003ab6	      0xe800000000	                          call 0x4003abb	       983	fold.c	FUNCTION_30	FOR_1	IF_19	CALL_4
0x4003abb	    0x488b05000000	            mov rax, qword [0x04003ac2] 	       984	fold.c	FUNCTION_30	FOR_1	IF_19
0x4003ac2	        0x4c896838	             mov qword [rax + 0x38], r13	       984	fold.c	FUNCTION_30	FOR_1	IF_19
0x4003ac6	    0xc74040000000	               mov dword [rax + 0x40], 0	       985	fold.c	FUNCTION_30	FOR_1	IF_19
0x4003acd	    0x488344240801	                  add qword [rsp + 8], 1	       883	fold.c	FUNCTION_30	FOR_1
0x4003ad3	      0x488b442408	                mov rax, qword [rsp + 8]	       883	fold.c	FUNCTION_30	FOR_1
0x4003ad8	    0xc74424140100	               mov dword [rsp + 0x14], 1	       986	fold.c	FUNCTION_30	FOR_1	IF_19
0x4003ae0	      0x4839442418	            cmp qword [rsp + 0x18], rax 	       883	fold.c	FUNCTION_30	FOR_1
0x4003ae5	     0xf85f6fdffff	                           jne 0x40038e1	       883	fold.c	FUNCTION_30	FOR_1
0x4003aeb	            0xeb08	                           jmp 0x4003af5	       883	fold.c	FUNCTION_30	FOR_1
0x4003aed	    0xc74424140000	               mov dword [rsp + 0x14], 0	       869	fold.c	FUNCTION_30
0x4003af5	        0x8b442414	            mov eax, dword [rsp + 0x14] 	       993	fold.c	FUNCTION_30	ELSE_5
0x4003af9	      0x488b4c2438	            mov rcx, qword [rsp + 0x38] 	       993	fold.c	FUNCTION_30	ELSE_5
0x4003afe	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       993	fold.c	FUNCTION_30	ELSE_5
0x4003b07	            0x7411	                            je 0x4003b1a	       993	fold.c	FUNCTION_30	ELSE_5
0x4003b09	            0xeb0a	                           jmp 0x4003b15	       993	fold.c	FUNCTION_30	ELSE_5
0x4003b0b	      0xb801000000	                              mov eax, 1	       993	fold.c	FUNCTION_30	ELSE_5
0x4003b10	      0xe9b1feffff	                           jmp 0x40039c6	       993	fold.c	FUNCTION_30	ELSE_5
0x4003b15	      0xe800000000	                          call 0x4003b1a	       993	fold.c	FUNCTION_30	ELSE_5
0x4003b1a	        0x4883c448	                           add rsp, 0x48	       993	fold.c	FUNCTION_30	ELSE_5
0x4003b1e	              0x5b	                                 pop rbx	       993	fold.c	FUNCTION_30	ELSE_5
0x4003b1f	              0x5d	                                 pop rbp	       993	fold.c	FUNCTION_30	ELSE_5
0x4003b20	            0x415c	                                 pop r12	       993	fold.c	FUNCTION_30	ELSE_5
0x4003b22	            0x415d	                                 pop r13	       993	fold.c	FUNCTION_30	ELSE_5
0x4003b24	            0x415e	                                 pop r14	       993	fold.c	FUNCTION_30	ELSE_5
0x4003b26	            0x415f	                                 pop r15	       993	fold.c	FUNCTION_30	ELSE_5
0x4003b28	              0xc3	                                     ret	       993	fold.c	FUNCTION_30	ELSE_5
foldRemove	DO,0:ELSE,1:FOR,1:SWITCH,0:IF,6:CALL,5:WHILE,0:functions,0	104
0x400180e	            0x4155	                                push r13	      2917	fold.c	FUNCTION_62
0x4001810	            0x4154	                                push r12	      2917	fold.c	FUNCTION_62
0x4001812	              0x55	                                push rbp	      2917	fold.c	FUNCTION_62
0x4001813	              0x53	                                push rbx	      2917	fold.c	FUNCTION_62
0x4001814	        0x4883ec18	                           sub rsp, 0x18	      2917	fold.c	FUNCTION_62
0x4001818	    0x64488b042528	                mov rax, qword fs:[0x28]	      2917	fold.c	FUNCTION_62
0x4001821	      0x4889442408	                mov qword [rsp + 8], rax	      2917	fold.c	FUNCTION_62
0x4001826	            0x31c0	                            xor eax, eax	      2917	fold.c	FUNCTION_62
0x4001828	          0x4839f2	                            cmp rdx, rsi	      2920	fold.c	FUNCTION_62	IF_1
0x400182b	     0xf8c3c010000	                            jl 0x400196d	      2920	fold.c	FUNCTION_62	IF_1
0x4001831	          0x4889fb	                            mov rbx, rdi	      2920	fold.c	FUNCTION_62	IF_1
0x4001834	          0x4889f5	                            mov rbp, rsi	      2920	fold.c	FUNCTION_62	IF_1
0x4001837	          0x4989d4	                            mov r12, rdx	      2920	fold.c	FUNCTION_62	IF_1
0x400183a	    0x48c704240000	                      mov qword [rsp], 0	      2918	fold.c	FUNCTION_62
0x4001842	    0x49bdabaaaaaa	          movabs r13, 0xaaaaaaaaaaaaaaab	      2965	fold.c	FUNCTION_62	FOR_1	IF_5	CALL_5
0x400184c	          0x4889e2	                            mov rdx, rsp	      2926	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_1
0x400184f	          0x4889ee	                            mov rsi, rbp	      2926	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_1
0x4001852	          0x4889df	                            mov rdi, rbx	      2926	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_1
0x4001855	      0xe886e8ffff	                       call sym.foldFind	      2926	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_1
0x400185a	            0x85c0	                           test eax, eax	      2926	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_1
0x400185c	            0x746a	                            je 0x40018c8	      2926	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_1
0x400185e	        0x488b3c24	                    mov rdi, qword [rsp]	      2926	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_1
0x4001862	          0x488b07	                    mov rax, qword [rdi]	      2926	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_1
0x4001865	          0x4839c5	                            cmp rbp, rax	      2926	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_1
0x4001868	            0x7e5e	                           jle 0x40018c8	      2926	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_1
0x400186a	          0x4c89e2	                            mov rdx, r12	      2929	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_2
0x400186d	          0x4829c2	                            sub rdx, rax	      2929	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_2
0x4001870	          0x4889ee	                            mov rsi, rbp	      2929	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_2
0x4001873	          0x4829c6	                            sub rsi, rax	      2929	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_2
0x4001876	        0x4883c710	                           add rdi, 0x10	      2929	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_2
0x400187a	      0xe88fffffff	                     call sym.foldRemove	      2929	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_2
0x400187f	        0x488b3424	                    mov rsi, qword [rsp]	      2930	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3
0x4001883	          0x488b16	                    mov rdx, qword [rsi]	      2930	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3
0x4001886	          0x4889d0	                            mov rax, rdx	      2930	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3
0x4001889	        0x48034608	                add rax, qword [rsi + 8]	      2930	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3
0x400188d	        0x4883e801	                              sub rax, 1	      2930	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3
0x4001891	          0x4939c4	                            cmp r12, rax	      2930	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3
0x4001894	            0x7d1c	                           jge 0x40018b2	      2930	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3
0x4001896	        0x482b7310	             sub rsi, qword [rbx + 0x10]	      2933	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3	CALL_3
0x400189a	        0x48c1fe04	                              sar rsi, 4	      2933	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3	CALL_3
0x400189e	        0x490faff5	                           imul rsi, r13	      2933	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3	CALL_3
0x40018a2	          0x4c89e1	                            mov rcx, r12	      2933	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3	CALL_3
0x40018a5	          0x4889ea	                            mov rdx, rbp	      2933	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3	CALL_3
0x40018a8	          0x4889df	                            mov rdi, rbx	      2933	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3	CALL_3
0x40018ab	      0xe8f1edffff	                      call sym.foldSplit	      2933	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3	CALL_3
0x40018b0	            0xeb0a	                           jmp 0x40018bc	      2933	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3	CALL_3
0x40018b2	          0x4889e8	                            mov rax, rbp	      2938	fold.c	FUNCTION_62	FOR_1	IF_2	ELSE_1
0x40018b5	          0x4829d0	                            sub rax, rdx	      2938	fold.c	FUNCTION_62	FOR_1	IF_2	ELSE_1
0x40018b8	        0x48894608	                mov qword [rsi + 8], rax	      2938	fold.c	FUNCTION_62	FOR_1	IF_2	ELSE_1
0x40018bc	    0xc70500000000	               mov dword [0x040018c6], 1	      2940	fold.c	FUNCTION_62	FOR_1	IF_2
0x40018c6	            0xeb84	                           jmp 0x400184c	      2941	fold.c	FUNCTION_62	FOR_1	IF_2
0x40018c8	        0x488b5310	            mov rdx, qword [rbx + 0x10] 	      2943	fold.c	FUNCTION_62	FOR_1	IF_4
0x40018cc	        0x488b3424	                    mov rsi, qword [rsp]	      2943	fold.c	FUNCTION_62	FOR_1	IF_4
0x40018d0	          0x486303	                 movsxd rax, dword [rbx]	      2943	fold.c	FUNCTION_62	FOR_1	IF_4
0x40018d3	        0x488d0440	                  lea rax, [rax + rax*2]	      2943	fold.c	FUNCTION_62	FOR_1	IF_4
0x40018d7	        0x48c1e004	                              shl rax, 4	      2943	fold.c	FUNCTION_62	FOR_1	IF_4
0x40018db	          0x4801d0	                            add rax, rdx	      2943	fold.c	FUNCTION_62	FOR_1	IF_4
0x40018de	          0x4839c6	                            cmp rsi, rax	      2943	fold.c	FUNCTION_62	FOR_1	IF_4
0x40018e1	     0xf8386000000	                           jae 0x400196d	      2943	fold.c	FUNCTION_62	FOR_1	IF_4
0x40018e7	          0x488b06	                    mov rax, qword [rsi]	      2944	fold.c	FUNCTION_62	FOR_1	IF_4
0x40018ea	          0x4939c4	                            cmp r12, rax	      2944	fold.c	FUNCTION_62	FOR_1	IF_4
0x40018ed	            0x7c7e	                            jl 0x400196d	      2944	fold.c	FUNCTION_62	FOR_1	IF_4
0x40018ef	          0x4839c5	                            cmp rbp, rax	      2949	fold.c	FUNCTION_62	FOR_1	IF_5
0x40018f2	     0xf8f54ffffff	                            jg 0x400184c	      2949	fold.c	FUNCTION_62	FOR_1	IF_5
0x40018f8	    0xc70500000000	               mov dword [0x04001902], 1	      2952	fold.c	FUNCTION_62	FOR_1	IF_5
0x4001902	          0x4889c1	                            mov rcx, rax	      2953	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x4001905	        0x48034e08	                add rcx, qword [rsi + 8]	      2953	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x4001909	        0x4883e901	                              sub rcx, 1	      2953	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x400190d	          0x4939cc	                            cmp r12, rcx	      2953	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x4001910	            0x7d3e	                           jge 0x4001950	      2953	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x4001912	          0x4889c1	                            mov rcx, rax	      2956	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6	CALL_4
0x4001915	          0x4c29e1	                            sub rcx, r12	      2956	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6	CALL_4
0x4001918	          0x4c89e2	                            mov rdx, r12	      2956	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6	CALL_4
0x400191b	          0x4829c2	                            sub rdx, rax	      2956	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6	CALL_4
0x400191e	        0x488d7e10	                   lea rdi, [rsi + 0x10]	      2956	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6	CALL_4
0x4001922	        0x4c8d41ff	                       lea r8, [rcx - 1]	      2956	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6	CALL_4
0x4001926	      0xb9ffffff7f	                     mov ecx, 0x7fffffff	      2956	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6	CALL_4
0x400192b	      0xbe00000000	                              mov esi, 0	      2956	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6	CALL_4
0x4001930	      0xe846fbffff	          call sym.foldMarkAdjustRecurse	      2956	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6	CALL_4
0x4001935	        0x488b0424	                    mov rax, qword [rsp]	      2959	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x4001939	          0x4c89e2	                            mov rdx, r12	      2959	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x400193c	          0x482b10	                    sub rdx, qword [rax]	      2959	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x400193f	        0x4883c201	                              add rdx, 1	      2959	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x4001943	        0x48295008	                sub qword [rax + 8], rdx	      2959	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x4001947	        0x4983c401	                              add r12, 1	      2960	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x400194b	          0x4c8920	                    mov qword [rax], r12	      2960	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x400194e	            0xeb1d	                           jmp 0x400196d	      2961	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x4001950	          0x4829d6	                            sub rsi, rdx	      2965	fold.c	FUNCTION_62	FOR_1	IF_5	CALL_5
0x4001953	        0x48c1fe04	                              sar rsi, 4	      2965	fold.c	FUNCTION_62	FOR_1	IF_5	CALL_5
0x4001957	        0x490faff5	                           imul rsi, r13	      2965	fold.c	FUNCTION_62	FOR_1	IF_5	CALL_5
0x400195b	      0xba01000000	                              mov edx, 1	      2965	fold.c	FUNCTION_62	FOR_1	IF_5	CALL_5
0x4001960	          0x4889df	                            mov rdi, rbx	      2965	fold.c	FUNCTION_62	FOR_1	IF_5	CALL_5
0x4001963	      0xe8e4f9ffff	                call sym.deleteFoldEntry	      2965	fold.c	FUNCTION_62	FOR_1	IF_5	CALL_5
0x4001968	      0xe9dffeffff	                           jmp 0x400184c	      2965	fold.c	FUNCTION_62	FOR_1	IF_5	CALL_5
0x400196d	      0x488b442408	                mov rax, qword [rsp + 8]	      2968	fold.c	FUNCTION_62
0x4001972	    0x644833042528	                xor rax, qword fs:[0x28]	      2968	fold.c	FUNCTION_62
0x400197b	            0x7405	                            je 0x4001982	      2968	fold.c	FUNCTION_62
0x400197d	      0xe800000000	                          call 0x4001982	      2968	fold.c	FUNCTION_62
0x4001982	        0x4883c418	                           add rsp, 0x18	      2968	fold.c	FUNCTION_62
0x4001986	              0x5b	                                 pop rbx	      2968	fold.c	FUNCTION_62
0x4001987	              0x5d	                                 pop rbp	      2968	fold.c	FUNCTION_62
0x4001988	            0x415c	                                 pop r12	      2968	fold.c	FUNCTION_62
0x400198a	            0x415d	                                 pop r13	      2968	fold.c	FUNCTION_62
0x400198c	              0xc3	                                     ret	      2968	fold.c	FUNCTION_62
cloneFoldGrowArray	DO,0:ELSE,0:FOR,1:SWITCH,0:IF,1:CALL,3:WHILE,0:functions,0	48
0x4001240	            0x4156	                                push r14	      1086	fold.c	FUNCTION_35
0x4001242	            0x4155	                                push r13	      1086	fold.c	FUNCTION_35
0x4001244	            0x4154	                                push r12	      1086	fold.c	FUNCTION_35
0x4001246	              0x55	                                push rbp	      1086	fold.c	FUNCTION_35
0x4001247	              0x53	                                push rbx	      1086	fold.c	FUNCTION_35
0x4001248	          0x4989fe	                            mov r14, rdi	      1086	fold.c	FUNCTION_35
0x400124b	          0x4989f4	                            mov r12, rsi	      1086	fold.c	FUNCTION_35
0x400124e	          0x8b570c	              mov edx, dword [rdi + 0xc]	      1091	fold.c	FUNCTION_35	CALL_1
0x4001251	          0x8b7708	                mov esi, dword [rdi + 8]	      1091	fold.c	FUNCTION_35	CALL_1
0x4001254	          0x4c89e7	                            mov rdi, r12	      1091	fold.c	FUNCTION_35	CALL_1
0x4001257	      0xe800000000	                          call 0x400125c	      1091	fold.c	FUNCTION_35	CALL_1
0x400125c	          0x418b36	                    mov esi, dword [r14]	      1092	fold.c	FUNCTION_35	IF_1	CALL_2
0x400125f	            0x85f6	                           test esi, esi	      1092	fold.c	FUNCTION_35	IF_1	CALL_2
0x4001261	            0x7468	                            je 0x40012cb	      1092	fold.c	FUNCTION_35	IF_1	CALL_2
0x4001263	          0x4c89e7	                            mov rdi, r12	      1092	fold.c	FUNCTION_35	IF_1	CALL_2
0x4001266	      0xe800000000	                          call 0x400126b	      1092	fold.c	FUNCTION_35	IF_1	CALL_2
0x400126b	            0x85c0	                           test eax, eax	      1092	fold.c	FUNCTION_35	IF_1	CALL_2
0x400126d	            0x745c	                            je 0x40012cb	      1092	fold.c	FUNCTION_35	IF_1	CALL_2
0x400126f	        0x498b6e10	            mov rbp, qword [r14 + 0x10] 	      1095	fold.c	FUNCTION_35
0x4001273	      0x498b5c2410	            mov rbx, qword [r12 + 0x10] 	      1096	fold.c	FUNCTION_35
0x4001278	        0x41833e00	                      cmp dword [r14], 0	      1098	fold.c	FUNCTION_35	FOR_1
0x400127c	            0x7e4d	                           jle 0x40012cb	      1098	fold.c	FUNCTION_35	FOR_1
0x400127e	        0x4883c510	                           add rbp, 0x10	      1098	fold.c	FUNCTION_35	FOR_1
0x4001282	        0x4883c310	                           add rbx, 0x10	      1098	fold.c	FUNCTION_35	FOR_1
0x4001286	    0x41bd00000000	                             mov r13d, 0	      1098	fold.c	FUNCTION_35	FOR_1
0x400128c	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1100	fold.c	FUNCTION_35	FOR_1
0x4001290	        0x488943f0	             mov qword [rbx - 0x10], rax	      1100	fold.c	FUNCTION_35	FOR_1
0x4001294	        0x488b45f8	                mov rax, qword [rbp - 8]	      1101	fold.c	FUNCTION_35	FOR_1
0x4001298	        0x488943f8	                mov qword [rbx - 8], rax	      1101	fold.c	FUNCTION_35	FOR_1
0x400129c	         0xfb64518	           movzx eax, byte [rbp + 0x18] 	      1102	fold.c	FUNCTION_35	FOR_1
0x40012a0	          0x884318	               mov byte [rbx + 0x18], al	      1102	fold.c	FUNCTION_35	FOR_1
0x40012a3	         0xfb64519	           movzx eax, byte [rbp + 0x19] 	      1103	fold.c	FUNCTION_35	FOR_1
0x40012a7	          0x884319	               mov byte [rbx + 0x19], al	      1103	fold.c	FUNCTION_35	FOR_1
0x40012aa	          0x4889de	                            mov rsi, rbx	      1104	fold.c	FUNCTION_35	FOR_1	CALL_3
0x40012ad	          0x4889ef	                            mov rdi, rbp	      1104	fold.c	FUNCTION_35	FOR_1	CALL_3
0x40012b0	      0xe800000000	                          call 0x40012b5	      1104	fold.c	FUNCTION_35	FOR_1	CALL_3
0x40012b5	      0x4183042401	                      add dword [r12], 1	      1105	fold.c	FUNCTION_35	FOR_1
0x40012ba	        0x4183c501	                             add r13d, 1	      1098	fold.c	FUNCTION_35	FOR_1
0x40012be	        0x4883c530	                           add rbp, 0x30	      1098	fold.c	FUNCTION_35	FOR_1
0x40012c2	        0x4883c330	                           add rbx, 0x30	      1098	fold.c	FUNCTION_35	FOR_1
0x40012c6	          0x45392e	                   cmp dword [r14], r13d	      1098	fold.c	FUNCTION_35	FOR_1
0x40012c9	            0x7fc1	                            jg 0x400128c	      1098	fold.c	FUNCTION_35	FOR_1
0x40012cb	              0x5b	                                 pop rbx	      1109	fold.c	FUNCTION_35
0x40012cc	              0x5d	                                 pop rbp	      1109	fold.c	FUNCTION_35
0x40012cd	            0x415c	                                 pop r12	      1109	fold.c	FUNCTION_35
0x40012cf	            0x415d	                                 pop r13	      1109	fold.c	FUNCTION_35
0x40012d1	            0x415e	                                 pop r14	      1109	fold.c	FUNCTION_35
0x40012d3	              0xc3	                                     ret	      1109	fold.c	FUNCTION_35
setManualFoldWin	DO,0:ELSE,3:FOR,2:SWITCH,0:IF,15:CALL,6:WHILE,0:functions,0	152
0x4002e07	            0x4157	                                push r15	      1273	fold.c	FUNCTION_41
0x4002e09	            0x4156	                                push r14	      1273	fold.c	FUNCTION_41
0x4002e0b	            0x4155	                                push r13	      1273	fold.c	FUNCTION_41
0x4002e0d	            0x4154	                                push r12	      1273	fold.c	FUNCTION_41
0x4002e0f	              0x55	                                push rbp	      1273	fold.c	FUNCTION_41
0x4002e10	              0x53	                                push rbx	      1273	fold.c	FUNCTION_41
0x4002e11	        0x4883ec48	                           sub rsp, 0x48	      1273	fold.c	FUNCTION_41
0x4002e15	          0x4889fb	                            mov rbx, rdi	      1273	fold.c	FUNCTION_41
0x4002e18	      0x48897c2410	             mov qword [rsp + 0x10], rdi	      1273	fold.c	FUNCTION_41
0x4002e1d	          0x4889f5	                            mov rbp, rsi	      1273	fold.c	FUNCTION_41
0x4002e20	          0x4189d7	                           mov r15d, edx	      1273	fold.c	FUNCTION_41
0x4002e23	        0x894c2420	             mov dword [rsp + 0x20], ecx	      1273	fold.c	FUNCTION_41
0x4002e27	      0x4c89442428	              mov qword [rsp + 0x28], r8	      1273	fold.c	FUNCTION_41
0x4002e2c	    0x64488b042528	                mov rax, qword fs:[0x28]	      1273	fold.c	FUNCTION_41
0x4002e35	      0x4889442438	             mov qword [rsp + 0x38], rax	      1273	fold.c	FUNCTION_41
0x4002e3a	            0x31c0	                            xor eax, eax	      1273	fold.c	FUNCTION_41
0x4002e3c	      0xe843fbffff	                    call sym.checkupdate	      1286	fold.c	FUNCTION_41	CALL_1
0x4002e41	    0x488d9b080100	                  lea rbx, [rbx + 0x108]	      1291	fold.c	FUNCTION_41
0x4002e48	    0xc74424240000	               mov dword [rsp + 0x24], 0	      1284	fold.c	FUNCTION_41
0x4002e50	    0x41bd00000000	                             mov r13d, 0	      1283	fold.c	FUNCTION_41
0x4002e56	    0x48c7442418ff	     mov qword [rsp + 0x18], 0x7fffffff 	      1282	fold.c	FUNCTION_41
0x4002e5f	    0xc74424040000	                  mov dword [rsp + 4], 0	      1280	fold.c	FUNCTION_41
0x4002e67	    0x41be00000000	                             mov r14d, 0	      1279	fold.c	FUNCTION_41
0x4002e6d	    0x41bc00000000	                             mov r12d, 0	      1278	fold.c	FUNCTION_41
0x4002e73	    0x48c744240800	                  mov qword [rsp + 8], 0	      1276	fold.c	FUNCTION_41
0x4002e7c	      0x488d542430	                   lea rdx, [rsp + 0x30]	      1294	fold.c	FUNCTION_41	FOR_1	IF_1	CALL_2
0x4002e81	          0x4889ee	                            mov rsi, rbp	      1294	fold.c	FUNCTION_41	FOR_1	IF_1	CALL_2
0x4002e84	          0x4889df	                            mov rdi, rbx	      1294	fold.c	FUNCTION_41	FOR_1	IF_1	CALL_2
0x4002e87	      0xe854d2ffff	                       call sym.foldFind	      1294	fold.c	FUNCTION_41	FOR_1	IF_1	CALL_2
0x4002e8c	            0x85c0	                           test eax, eax	      1294	fold.c	FUNCTION_41	FOR_1	IF_1	CALL_2
0x4002e8e	            0x752a	                           jne 0x4002eba	      1294	fold.c	FUNCTION_41	FOR_1	IF_1	CALL_2
0x4002e90	      0x488b542430	            mov rdx, qword [rsp + 0x30] 	      1297	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x4002e95	          0x486303	                 movsxd rax, dword [rbx]	      1297	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x4002e98	        0x488d0440	                  lea rax, [rax + rax*2]	      1297	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x4002e9c	        0x48c1e004	                              shl rax, 4	      1297	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x4002ea0	        0x48034310	             add rax, qword [rbx + 0x10]	      1297	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x4002ea4	          0x4839c2	                            cmp rdx, rax	      1297	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x4002ea7	     0xf83f9000000	                           jae 0x4002fa6	      1297	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x4002ead	          0x4c032a	                    add r13, qword [rdx]	      1298	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x4002eb0	      0x4c896c2418	             mov qword [rsp + 0x18], r13	      1298	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x4002eb5	      0xe9ec000000	                           jmp 0x4002fa6	      1298	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x4002eba	      0x488b7c2430	            mov rdi, qword [rsp + 0x30] 	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x4002ebf	        0x488d5730	                   lea rdx, [rdi + 0x30]	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x4002ec3	          0x486303	                 movsxd rax, dword [rbx]	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x4002ec6	        0x488d0440	                  lea rax, [rax + rax*2]	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x4002eca	        0x48c1e004	                              shl rax, 4	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x4002ece	        0x48034310	             add rax, qword [rbx + 0x10]	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x4002ed2	          0x4839c2	                            cmp rdx, rax	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x4002ed5	            0x730c	                           jae 0x4002ee3	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x4002ed7	          0x4c89e8	                            mov rax, r13	      1307	fold.c	FUNCTION_41	FOR_1	IF_3
0x4002eda	        0x48034730	             add rax, qword [rdi + 0x30]	      1307	fold.c	FUNCTION_41	FOR_1	IF_3
0x4002ede	      0x4889442418	             mov qword [rsp + 0x18], rax	      1307	fold.c	FUNCTION_41	FOR_1	IF_3
0x4002ee3	          0x4585f6	                         test r14d, r14d	      1310	fold.c	FUNCTION_41	FOR_1	IF_4
0x4002ee6	            0x7506	                           jne 0x4002eee	      1310	fold.c	FUNCTION_41	FOR_1	IF_4
0x4002ee8	        0x807f2802	                cmp byte [rdi + 0x28], 2	      1310	fold.c	FUNCTION_41	FOR_1	IF_4
0x4002eec	            0x7548	                           jne 0x4002f36	      1310	fold.c	FUNCTION_41	FOR_1	IF_4
0x4002eee	          0x4963c4	                        movsxd rax, r12d	      1313	fold.c	FUNCTION_41	FOR_1	IF_4	IF_5
0x4002ef1	      0x488b742410	            mov rsi, qword [rsp + 0x10] 	      1314	fold.c	FUNCTION_41	FOR_1	IF_4	IF_5
0x4002ef6	    0x483b86e80100	           cmp rax, qword [rsi + 0x1e8] 	      1314	fold.c	FUNCTION_41	FOR_1	IF_4	IF_5
0x4002efd	         0xf9d4728	                 setge byte [rdi + 0x28]	      1314	fold.c	FUNCTION_41	FOR_1	IF_4	IF_5
0x4002f01	        0x488b4f20	            mov rcx, qword [rdi + 0x20] 	      1317	fold.c	FUNCTION_41	FOR_1	IF_4
0x4002f05	        0x837f1000	               cmp dword [rdi + 0x10], 0	      1318	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x4002f09	            0x7e25	                           jle 0x4002f30	      1318	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x4002f0b	      0xb800000000	                              mov eax, 0	      1318	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x4002f10	          0x4863d0	                         movsxd rdx, eax	      1319	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x4002f13	        0x488d1452	                  lea rdx, [rdx + rdx*2]	      1319	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x4002f17	        0x48c1e204	                              shl rdx, 4	      1319	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x4002f1b	      0xc644112802	          mov byte [rcx + rdx + 0x28], 2	      1319	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x4002f20	          0x83c001	                              add eax, 1	      1318	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x4002f23	          0x394710	            cmp dword [rdi + 0x10], eax 	      1318	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x4002f26	            0x7fe8	                            jg 0x4002f10	      1318	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x4002f28	    0x41be01000000	                             mov r14d, 1	      1312	fold.c	FUNCTION_41	FOR_1	IF_4
0x4002f2e	            0xeb06	                           jmp 0x4002f36	      1312	fold.c	FUNCTION_41	FOR_1	IF_4
0x4002f30	    0x41be01000000	                             mov r14d, 1	      1312	fold.c	FUNCTION_41	FOR_1	IF_4
0x4002f36	          0x4585ff	                         test r15d, r15d	      1323	fold.c	FUNCTION_41	FOR_1	IF_6
0x4002f39	            0x751b	                           jne 0x4002f56	      1323	fold.c	FUNCTION_41	FOR_1	IF_6
0x4002f3b	      0x837c242000	               cmp dword [rsp + 0x20], 0	      1323	fold.c	FUNCTION_41	FOR_1	IF_6
0x4002f40	            0x7414	                            je 0x4002f56	      1323	fold.c	FUNCTION_41	FOR_1	IF_6
0x4002f42	        0x807f2801	                cmp byte [rdi + 0x28], 1	      1325	fold.c	FUNCTION_41	FOR_1	IF_6	IF_7
0x4002f46	            0x743b	                            je 0x4002f83	      1325	fold.c	FUNCTION_41	FOR_1	IF_6	IF_7
0x4002f48	        0xc6472801	                mov byte [rdi + 0x28], 1	      1328	fold.c	FUNCTION_41	FOR_1	IF_6	IF_7
0x4002f4c	    0xc74424240100	               mov dword [rsp + 0x24], 1	      1327	fold.c	FUNCTION_41	FOR_1	IF_6	IF_7
0x4002f54	            0xeb2d	                           jmp 0x4002f83	      1327	fold.c	FUNCTION_41	FOR_1	IF_6	IF_7
0x4002f56	        0x807f2801	                cmp byte [rdi + 0x28], 1	      1331	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8
0x4002f5a	            0x7527	                           jne 0x4002f83	      1331	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8
0x4002f5c	          0x4585ff	                         test r15d, r15d	      1334	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9
0x4002f5f	            0x744c	                            je 0x4002fad	      1334	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9
0x4002f61	        0xc6472800	                mov byte [rdi + 0x28], 0	      1336	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9
0x4002f65	    0xc74424240100	               mov dword [rsp + 0x24], 1	      1337	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9
0x4002f6d	      0x837c242000	               cmp dword [rsp + 0x20], 0	      1338	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9	IF_10
0x4002f72	            0x7439	                            je 0x4002fad	      1338	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9	IF_10
0x4002f74	      0xe848d2ffff	                 call sym.foldOpenNested	      1339	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9	CALL_3
0x4002f79	    0xc74424240100	               mov dword [rsp + 0x24], 1	      1337	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9
0x4002f81	            0xeb2a	                           jmp 0x4002fad	      1337	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9
0x4002f83	        0x488d5f10	                   lea rbx, [rdi + 0x10]	      1346	fold.c	FUNCTION_41	FOR_1
0x4002f87	          0x488b07	                    mov rax, qword [rdi]	      1347	fold.c	FUNCTION_41	FOR_1
0x4002f8a	          0x4829c5	                            sub rbp, rax	      1347	fold.c	FUNCTION_41	FOR_1
0x4002f8d	          0x4901c5	                            add r13, rax	      1348	fold.c	FUNCTION_41	FOR_1
0x4002f90	        0x4183c401	                             add r12d, 1	      1349	fold.c	FUNCTION_41	FOR_1
0x4002f94	    0xc74424040100	                  mov dword [rsp + 4], 1	      1303	fold.c	FUNCTION_41	FOR_1
0x4002f9c	      0x48897c2408	                mov qword [rsp + 8], rdi	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x4002fa1	      0xe9d6feffff	                           jmp 0x4002e7c	      1350	fold.c	FUNCTION_41	FOR_1
0x4002fa6	      0x837c240400	                  cmp dword [rsp + 4], 0	      1351	fold.c	FUNCTION_41	IF_11
0x4002fab	            0x7455	                            je 0x4003002	      1351	fold.c	FUNCTION_41	IF_11
0x4002fad	          0x4585ff	                         test r15d, r15d	      1354	fold.c	FUNCTION_41	IF_11	IF_12
0x4002fb0	            0x7524	                           jne 0x4002fd6	      1354	fold.c	FUNCTION_41	IF_11	IF_12
0x4002fb2	      0x488b442408	                mov rax, qword [rsp + 8]	      1354	fold.c	FUNCTION_41	IF_11	IF_12
0x4002fb7	          0x4885c0	                           test rax, rax	      1354	fold.c	FUNCTION_41	IF_11	IF_12
0x4002fba	            0x741a	                            je 0x4002fd6	      1354	fold.c	FUNCTION_41	IF_11	IF_12
0x4002fbc	        0xc6402801	                mov byte [rax + 0x28], 1	      1356	fold.c	FUNCTION_41	IF_11	IF_12
0x4002fc0	      0x488b442410	            mov rax, qword [rsp + 0x10] 	      1359	fold.c	FUNCTION_41	IF_11
0x4002fc5	    0xc68020010000	               mov byte [rax + 0x120], 1	      1359	fold.c	FUNCTION_41	IF_11
0x4002fcc	    0xc74424240100	               mov dword [rsp + 0x24], 1	      1357	fold.c	FUNCTION_41	IF_11	IF_12
0x4002fd4	            0xeb13	                           jmp 0x4002fe9	      1357	fold.c	FUNCTION_41	IF_11	IF_12
0x4002fd6	      0x488b442410	            mov rax, qword [rsp + 0x10] 	      1359	fold.c	FUNCTION_41	IF_11
0x4002fdb	    0xc68020010000	               mov byte [rax + 0x120], 1	      1359	fold.c	FUNCTION_41	IF_11
0x4002fe2	      0xf644242401	               test byte [rsp + 0x24], 1	      1360	fold.c	FUNCTION_41	IF_11	IF_13
0x4002fe7	            0x740a	                            je 0x4002ff3	      1360	fold.c	FUNCTION_41	IF_11	IF_13
0x4002fe9	      0x488b7c2410	            mov rdi, qword [rsp + 0x10] 	      1361	fold.c	FUNCTION_41	IF_11	CALL_4
0x4002fee	      0xe800000000	                          call 0x4002ff3	      1361	fold.c	FUNCTION_41	IF_11	CALL_4
0x4002ff3	      0x834c242402	                or dword [rsp + 0x24], 2	      1362	fold.c	FUNCTION_41	IF_11
0x4002ff8	    0x48837c242800	               cmp qword [rsp + 0x28], 0	      1367	fold.c	FUNCTION_41	IF_15
0x4002ffe	            0x7536	                           jne 0x4003036	      1367	fold.c	FUNCTION_41	IF_15
0x4003000	            0xeb3f	                           jmp 0x4003041	      1367	fold.c	FUNCTION_41	IF_15
0x4003002	    0x48837c242800	               cmp qword [rsp + 0x28], 0	      1364	fold.c	FUNCTION_41	ELSE_3	IF_14
0x4003008	            0x752c	                           jne 0x4003036	      1364	fold.c	FUNCTION_41	ELSE_3	IF_14
0x400300a	      0x488b442410	            mov rax, qword [rsp + 0x10] 	      1364	fold.c	FUNCTION_41	ELSE_3	IF_14
0x400300f	    0x483b05000000	            cmp rax, qword [0x04003016] 	      1364	fold.c	FUNCTION_41	ELSE_3	IF_14
0x4003016	            0x7529	                           jne 0x4003041	      1364	fold.c	FUNCTION_41	ELSE_3	IF_14
0x4003018	      0xba05000000	                              mov edx, 5	      1365	fold.c	FUNCTION_41	ELSE_3	IF_14
0x400301d	      0xbe00000000	                              mov esi, 0	      1365	fold.c	FUNCTION_41	ELSE_3	IF_14
0x4003022	      0xbf00000000	                              mov edi, 0	      1365	fold.c	FUNCTION_41	ELSE_3	IF_14
0x4003027	      0xe800000000	                          call 0x400302c	      1365	fold.c	FUNCTION_41	ELSE_3	IF_14
0x400302c	          0x4889c7	                            mov rdi, rax	      1365	fold.c	FUNCTION_41	ELSE_3	IF_14
0x400302f	      0xe800000000	                          call 0x4003034	      1365	fold.c	FUNCTION_41	ELSE_3	IF_14
0x4003034	            0xeb0b	                           jmp 0x4003041	      1365	fold.c	FUNCTION_41	ELSE_3	IF_14
0x4003036	      0x488b442428	            mov rax, qword [rsp + 0x28] 	      1368	fold.c	FUNCTION_41	IF_15
0x400303b	        0x8b742424	            mov esi, dword [rsp + 0x24] 	      1368	fold.c	FUNCTION_41	IF_15
0x400303f	             0x930	                     or dword [rax], esi	      1368	fold.c	FUNCTION_41	IF_15
0x4003041	      0x488b442418	            mov rax, qword [rsp + 0x18] 	      1371	fold.c	FUNCTION_41
0x4003046	      0x488b742438	            mov rsi, qword [rsp + 0x38] 	      1371	fold.c	FUNCTION_41
0x400304b	    0x644833342528	                xor rsi, qword fs:[0x28]	      1371	fold.c	FUNCTION_41
0x4003054	            0x7405	                            je 0x400305b	      1371	fold.c	FUNCTION_41
0x4003056	      0xe800000000	                          call 0x400305b	      1371	fold.c	FUNCTION_41
0x400305b	        0x4883c448	                           add rsp, 0x48	      1371	fold.c	FUNCTION_41
0x400305f	              0x5b	                                 pop rbx	      1371	fold.c	FUNCTION_41
0x4003060	              0x5d	                                 pop rbp	      1371	fold.c	FUNCTION_41
0x4003061	            0x415c	                                 pop r12	      1371	fold.c	FUNCTION_41
0x4003063	            0x415d	                                 pop r13	      1371	fold.c	FUNCTION_41
0x4003065	            0x415e	                                 pop r14	      1371	fold.c	FUNCTION_41
0x4003067	            0x415f	                                 pop r15	      1371	fold.c	FUNCTION_41
0x4003069	              0xc3	                                     ret	      1371	fold.c	FUNCTION_41
check_closed	DO,0:ELSE,1:FOR,0:SWITCH,0:IF,7:CALL,1:WHILE,0:functions,0	90
0x4000335	            0x4157	                                push r15	      1647	fold.c	FUNCTION_49
0x4000337	            0x4156	                                push r14	      1647	fold.c	FUNCTION_49
0x4000339	            0x4155	                                push r13	      1647	fold.c	FUNCTION_49
0x400033b	            0x4154	                                push r12	      1647	fold.c	FUNCTION_49
0x400033d	              0x55	                                push rbp	      1647	fold.c	FUNCTION_49
0x400033e	              0x53	                                push rbx	      1647	fold.c	FUNCTION_49
0x400033f	        0x4883ec08	                              sub rsp, 8	      1647	fold.c	FUNCTION_49
0x4000343	          0x833a00	                      cmp dword [rdx], 0	      1652	fold.c	FUNCTION_49	IF_1
0x4000346	            0x7512	                           jne 0x400035a	      1652	fold.c	FUNCTION_49	IF_1
0x4000348	         0xfb64628	           movzx eax, byte [rsi + 0x28] 	      1652	fold.c	FUNCTION_49	IF_1
0x400034c	            0x3c01	                               cmp al, 1	      1656	fold.c	FUNCTION_49	IF_1	IF_2
0x400034e	        0x400f94c5	                                sete bpl	      1656	fold.c	FUNCTION_49	IF_1	IF_2
0x4000352	        0x400fb6ed	                          movzx ebp, bpl	      1656	fold.c	FUNCTION_49	IF_1	IF_2
0x4000356	            0x3c02	                               cmp al, 2	      1652	fold.c	FUNCTION_49	IF_1
0x4000358	            0x7518	                           jne 0x4000372	      1652	fold.c	FUNCTION_49	IF_1
0x400035a	    0xc70201000000	                      mov dword [rdx], 1	      1654	fold.c	FUNCTION_49	IF_1
0x4000360	          0x4863c9	                         movsxd rcx, ecx	      1656	fold.c	FUNCTION_49	IF_1	IF_2
0x4000363	    0x483b8fe80100	           cmp rcx, qword [rdi + 0x1e8] 	      1656	fold.c	FUNCTION_49	IF_1	IF_2
0x400036a	        0x400f9dc5	                               setge bpl	      1656	fold.c	FUNCTION_49	IF_1	IF_2
0x400036e	        0x400fb6ed	                          movzx ebp, bpl	      1656	fold.c	FUNCTION_49	IF_1	IF_2
0x4000372	         0xfb64629	           movzx eax, byte [rsi + 0x29] 	      1662	fold.c	FUNCTION_49	IF_4
0x4000376	            0x3c02	                               cmp al, 2	      1662	fold.c	FUNCTION_49	IF_4
0x4000378	            0x7510	                           jne 0x400038a	      1662	fold.c	FUNCTION_49	IF_4
0x400037a	    0x41c700010000	                       mov dword [r8], 1	      1663	fold.c	FUNCTION_49	IF_4
0x4000381	            0x85ed	                           test ebp, ebp	      1664	fold.c	FUNCTION_49	IF_5
0x4000383	            0x7513	                           jne 0x4000398	      1664	fold.c	FUNCTION_49	IF_5
0x4000385	      0xe9c8000000	                           jmp 0x4000452	      1664	fold.c	FUNCTION_49	IF_5
0x400038a	            0x85ed	                           test ebp, ebp	      1664	fold.c	FUNCTION_49	IF_5
0x400038c	     0xf84c0000000	                            je 0x4000452	      1664	fold.c	FUNCTION_49	IF_5
0x4000392	        0x41833800	                       cmp dword [r8], 0	      1666	fold.c	FUNCTION_49	IF_5	IF_6
0x4000396	            0x7415	                            je 0x40003ad	      1666	fold.c	FUNCTION_49	IF_5	IF_6
0x4000398	        0xc6462902	                mov byte [rsi + 0x29], 2	      1667	fold.c	FUNCTION_49	IF_5	IF_6
0x400039c	        0x488b4e20	            mov rcx, qword [rsi + 0x20] 	      1722	fold.c	FUNCTION_51
0x40003a0	      0xb800000000	                              mov eax, 0	      1723	fold.c	FUNCTION_51	FOR_1
0x40003a5	        0x837e1000	               cmp dword [rsi + 0x10], 0	      1723	fold.c	FUNCTION_51	FOR_1
0x40003a9	            0x7f11	                            jg 0x40003bc	      1723	fold.c	FUNCTION_51	FOR_1
0x40003ab	            0xeb27	                           jmp 0x40003d4	      1723	fold.c	FUNCTION_51	FOR_1
0x40003ad	            0x3c01	                               cmp al, 1	      1670	fold.c	FUNCTION_49	IF_5	IF_7
0x40003af	      0xb800000000	                              mov eax, 0	      1670	fold.c	FUNCTION_49	IF_5	IF_7
0x40003b4	           0xf44e8	                          cmove ebp, eax	      1670	fold.c	FUNCTION_49	IF_5	IF_7
0x40003b7	      0xe996000000	                           jmp 0x4000452	      1670	fold.c	FUNCTION_49	IF_5	IF_7
0x40003bc	          0x4863d0	                         movsxd rdx, eax	      1724	fold.c	FUNCTION_51	FOR_1
0x40003bf	        0x488d1452	                  lea rdx, [rdx + rdx*2]	      1724	fold.c	FUNCTION_51	FOR_1
0x40003c3	        0x48c1e204	                              shl rdx, 4	      1724	fold.c	FUNCTION_51	FOR_1
0x40003c7	      0xc644112902	          mov byte [rcx + rdx + 0x29], 2	      1724	fold.c	FUNCTION_51	FOR_1
0x40003cc	          0x83c001	                              add eax, 1	      1723	fold.c	FUNCTION_51	FOR_1
0x40003cf	          0x3b4610	            cmp eax, dword [rsi + 0x10] 	      1723	fold.c	FUNCTION_51	FOR_1
0x40003d2	            0x7ce8	                            jl 0x40003bc	      1723	fold.c	FUNCTION_51	FOR_1
0x40003d4	        0x488b5608	                mov rdx, qword [rsi + 8]	      1693	fold.c	FUNCTION_50	IF_1	IF_2
0x40003d8	    0x488b05000000	            mov rax, qword [0x040003df] 	      1693	fold.c	FUNCTION_50	IF_1	IF_2
0x40003df	    0x483b90080200	           cmp rdx, qword [rax + 0x208] 	      1693	fold.c	FUNCTION_50	IF_1	IF_2
0x40003e6	            0x7f21	                            jg 0x4000409	      1693	fold.c	FUNCTION_50	IF_1	IF_2
0x40003e8	          0x4d89ce	                             mov r14, r9	      1693	fold.c	FUNCTION_50	IF_1	IF_2
0x40003eb	          0x4889f3	                            mov rbx, rsi	      1693	fold.c	FUNCTION_50	IF_1	IF_2
0x40003ee	          0x4989fc	                            mov r12, rdi	      1693	fold.c	FUNCTION_50	IF_1	IF_2
0x40003f1	    0x41bf00000000	                             mov r15d, 0	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x40003f7	    0x41bd00000000	                             mov r13d, 0	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x40003fd	      0xb800000000	                              mov eax, 0	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4000402	          0x4885d2	                           test rdx, rdx	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4000405	            0x7f08	                            jg 0x400040f	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4000407	            0xeb40	                           jmp 0x4000449	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4000409	        0xc6462900	                mov byte [rsi + 0x29], 0	      1694	fold.c	FUNCTION_50	IF_1	IF_2
0x400040d	            0xeb43	                           jmp 0x4000452	      1694	fold.c	FUNCTION_50	IF_1	IF_2
0x400040f	          0x4c89f6	                            mov rsi, r14	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x4000412	          0x480333	                    add rsi, qword [rbx]	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x4000415	          0x4801c6	                            add rsi, rax	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x4000418	          0x4c89e7	                            mov rdi, r12	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x400041b	      0xe800000000	                          call 0x4000420	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x4000420	          0x4101c5	                           add r13d, eax	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x4000423	          0x4963d5	                        movsxd rdx, r13d	      1701	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x4000426	    0x488b05000000	            mov rax, qword [0x0400042d] 	      1701	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x400042d	    0x483b90080200	           cmp rdx, qword [rax + 0x208] 	      1701	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x4000434	            0x7e06	                           jle 0x400043c	      1701	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x4000436	        0xc6432900	                mov byte [rbx + 0x29], 0	      1703	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x400043a	            0xeb16	                           jmp 0x4000452	      1703	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x400043c	        0x4183c701	                             add r15d, 1	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4000440	          0x4963c7	                        movsxd rax, r15d	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4000443	        0x483b4308	                cmp rax, qword [rbx + 8]	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4000447	            0x7cc6	                            jl 0x400040f	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4000449	        0xc6432901	                mov byte [rbx + 0x29], 1	      1707	fold.c	FUNCTION_50	IF_1	ELSE_1
0x400044d	      0xbd00000000	                              mov ebp, 0	      1670	fold.c	FUNCTION_49	IF_5	IF_7
0x4000452	            0x89e8	                            mov eax, ebp	      1673	fold.c	FUNCTION_49
0x4000454	        0x4883c408	                              add rsp, 8	      1673	fold.c	FUNCTION_49
0x4000458	              0x5b	                                 pop rbx	      1673	fold.c	FUNCTION_49
0x4000459	              0x5d	                                 pop rbp	      1673	fold.c	FUNCTION_49
0x400045a	            0x415c	                                 pop r12	      1673	fold.c	FUNCTION_49
0x400045c	            0x415d	                                 pop r13	      1673	fold.c	FUNCTION_49
0x400045e	            0x415e	                                 pop r14	      1673	fold.c	FUNCTION_49
0x4000460	            0x415f	                                 pop r15	      1673	fold.c	FUNCTION_49
0x4000462	              0xc3	                                     ret	      1673	fold.c	FUNCTION_49
setFoldRepeat	DO,0:ELSE,0:FOR,1:SWITCH,0:IF,2:CALL,3:WHILE,0:functions,0	47
0x4003116	            0x4155	                                push r13	      1201	fold.c	FUNCTION_39
0x4003118	            0x4154	                                push r12	      1201	fold.c	FUNCTION_39
0x400311a	              0x55	                                push rbp	      1201	fold.c	FUNCTION_39
0x400311b	              0x53	                                push rbx	      1201	fold.c	FUNCTION_39
0x400311c	        0x4883ec18	                           sub rsp, 0x18	      1201	fold.c	FUNCTION_39
0x4003120	    0x64488b042528	                mov rax, qword fs:[0x28]	      1201	fold.c	FUNCTION_39
0x4003129	      0x4889442408	                mov qword [rsp + 8], rax	      1201	fold.c	FUNCTION_39
0x400312e	            0x31c0	                            xor eax, eax	      1201	fold.c	FUNCTION_39
0x4003130	          0x4885f6	                           test rsi, rsi	      1205	fold.c	FUNCTION_39	FOR_1
0x4003133	            0x7e63	                           jle 0x4003198	      1205	fold.c	FUNCTION_39	FOR_1
0x4003135	          0x4989fc	                            mov r12, rdi	      1205	fold.c	FUNCTION_39	FOR_1
0x4003138	          0x4889f5	                            mov rbp, rsi	      1205	fold.c	FUNCTION_39	FOR_1
0x400313b	          0x4189d5	                           mov r13d, edx	      1205	fold.c	FUNCTION_39	FOR_1
0x400313e	      0xbb00000000	                              mov ebx, 0	      1205	fold.c	FUNCTION_39	FOR_1
0x4003143	    0xc74424040000	                  mov dword [rsp + 4], 0	      1207	fold.c	FUNCTION_39	FOR_1
0x400314b	      0x488d4c2404	                      lea rcx, [rsp + 4]	      1208	fold.c	FUNCTION_39	FOR_1	CALL_1
0x4003150	      0xba00000000	                              mov edx, 0	      1208	fold.c	FUNCTION_39	FOR_1	CALL_1
0x4003155	          0x4489ee	                           mov esi, r13d	      1208	fold.c	FUNCTION_39	FOR_1	CALL_1
0x4003158	          0x4c89e7	                            mov rdi, r12	      1208	fold.c	FUNCTION_39	FOR_1	CALL_1
0x400315b	      0xe80affffff	                  call sym.setManualFold	      1208	fold.c	FUNCTION_39	FOR_1	CALL_1
0x4003160	        0x8b442404	                mov eax, dword [rsp + 4]	      1209	fold.c	FUNCTION_39	FOR_1	IF_1
0x4003164	            0xa801	                              test al, 1	      1209	fold.c	FUNCTION_39	FOR_1	IF_1
0x4003166	            0x7527	                           jne 0x400318f	      1209	fold.c	FUNCTION_39	FOR_1	IF_1
0x4003168	          0x4885db	                           test rbx, rbx	      1212	fold.c	FUNCTION_39	FOR_1	IF_1	IF_2
0x400316b	            0x752b	                           jne 0x4003198	      1212	fold.c	FUNCTION_39	FOR_1	IF_1	IF_2
0x400316d	            0xa802	                              test al, 2	      1212	fold.c	FUNCTION_39	FOR_1	IF_1	IF_2
0x400316f	            0x7527	                           jne 0x4003198	      1212	fold.c	FUNCTION_39	FOR_1	IF_1	IF_2
0x4003171	      0xba05000000	                              mov edx, 5	      1213	fold.c	FUNCTION_39	FOR_1	IF_1	CALL_3
0x4003176	      0xbe00000000	                              mov esi, 0	      1213	fold.c	FUNCTION_39	FOR_1	IF_1	CALL_3
0x400317b	      0xbf00000000	                              mov edi, 0	      1213	fold.c	FUNCTION_39	FOR_1	IF_1	CALL_3
0x4003180	      0xe800000000	                          call 0x4003185	      1213	fold.c	FUNCTION_39	FOR_1	IF_1	CALL_3
0x4003185	          0x4889c7	                            mov rdi, rax	      1213	fold.c	FUNCTION_39	FOR_1	IF_1	CALL_3
0x4003188	      0xe800000000	                          call 0x400318d	      1213	fold.c	FUNCTION_39	FOR_1	IF_1	CALL_3
0x400318d	            0xeb09	                           jmp 0x4003198	      1213	fold.c	FUNCTION_39	FOR_1	IF_1	CALL_3
0x400318f	        0x4883c301	                              add rbx, 1	      1205	fold.c	FUNCTION_39	FOR_1
0x4003193	          0x4839dd	                            cmp rbp, rbx	      1205	fold.c	FUNCTION_39	FOR_1
0x4003196	            0x75ab	                           jne 0x4003143	      1205	fold.c	FUNCTION_39	FOR_1
0x4003198	      0x488b442408	                mov rax, qword [rsp + 8]	      1217	fold.c	FUNCTION_39
0x400319d	    0x644833042528	                xor rax, qword fs:[0x28]	      1217	fold.c	FUNCTION_39
0x40031a6	            0x7405	                            je 0x40031ad	      1217	fold.c	FUNCTION_39
0x40031a8	      0xe800000000	                          call 0x40031ad	      1217	fold.c	FUNCTION_39
0x40031ad	        0x4883c418	                           add rsp, 0x18	      1217	fold.c	FUNCTION_39
0x40031b1	              0x5b	                                 pop rbx	      1217	fold.c	FUNCTION_39
0x40031b2	              0x5d	                                 pop rbp	      1217	fold.c	FUNCTION_39
0x40031b3	            0x415c	                                 pop r12	      1217	fold.c	FUNCTION_39
0x40031b5	            0x415d	                                 pop r13	      1217	fold.c	FUNCTION_39
0x40031b7	              0xc3	                                     ret	      1217	fold.c	FUNCTION_39
hasAnyFolding	DO,0:ELSE,0:FOR,0:SWITCH,0:IF,0:CALL,1:WHILE,0:functions,0	11
0x40010b6	    0x8b87d4010000	           mov eax, dword [rdi + 0x1d4] 	       118	fold.c	FUNCTION_2
0x40010bc	            0x85c0	                           test eax, eax	       119	fold.c	FUNCTION_2	CALL_1
0x40010be	            0x741f	                            je 0x40010df	       119	fold.c	FUNCTION_2	CALL_1
0x40010c0	    0x488b97f80100	           mov rdx, qword [rdi + 0x1f8] 	       307	fold.c	FUNCTION_8
0x40010c7	      0xb801000000	                              mov eax, 1	       119	fold.c	FUNCTION_2	CALL_1
0x40010cc	        0x807a0375	                cmp byte [rdx + 3], 0x75	       119	fold.c	FUNCTION_2	CALL_1
0x40010d0	            0x750d	                           jne 0x40010df	       119	fold.c	FUNCTION_2	CALL_1
0x40010d2	    0x83bf08010000	              cmp dword [rdi + 0x108], 0	       119	fold.c	FUNCTION_2	CALL_1
0x40010d9	           0xf9fc0	                                 setg al	       119	fold.c	FUNCTION_2	CALL_1
0x40010dc	           0xfb6c0	                           movzx eax, al	       119	fold.c	FUNCTION_2	CALL_1
0x40010df	            0xf3c3	                                     ret	       120	fold.c	FUNCTION_2
foldlevelExpr	DO,0:ELSE,2:FOR,0:SWITCH,1:IF,8:CALL,2:WHILE,0:functions,0	110
0x4000b33	            0x4155	                                push r13	      3255	fold.c	ELSE_1	FUNCTION_69
0x4000b35	            0x4154	                                push r12	      3255	fold.c	ELSE_1	FUNCTION_69
0x4000b37	              0x55	                                push rbp	      3255	fold.c	ELSE_1	FUNCTION_69
0x4000b38	              0x53	                                push rbx	      3255	fold.c	ELSE_1	FUNCTION_69
0x4000b39	        0x4883ec18	                           sub rsp, 0x18	      3255	fold.c	ELSE_1	FUNCTION_69
0x4000b3d	          0x4889fb	                            mov rbx, rdi	      3255	fold.c	ELSE_1	FUNCTION_69
0x4000b40	    0x64488b042528	                mov rax, qword fs:[0x28]	      3255	fold.c	ELSE_1	FUNCTION_69
0x4000b49	      0x4889442408	                mov qword [rsp + 8], rax	      3255	fold.c	ELSE_1	FUNCTION_69
0x4000b4e	            0x31c0	                            xor eax, eax	      3255	fold.c	ELSE_1	FUNCTION_69
0x4000b50	        0x488b6f10	            mov rbp, qword [rdi + 0x10] 	      3263	fold.c	ELSE_1	FUNCTION_69
0x4000b54	        0x48036f08	                add rbp, qword [rdi + 8]	      3263	fold.c	ELSE_1	FUNCTION_69
0x4000b58	    0x4c8b25000000	            mov r12, qword [0x04000b5f] 	      3266	fold.c	ELSE_1	FUNCTION_69
0x4000b5f	          0x488b07	                    mov rax, qword [rdi]	      3267	fold.c	ELSE_1	FUNCTION_69
0x4000b62	    0x488905000000	            mov qword [0x04000b69], rax 	      3267	fold.c	ELSE_1	FUNCTION_69
0x4000b69	          0x488b07	                    mov rax, qword [rdi]	      3268	fold.c	ELSE_1	FUNCTION_69
0x4000b6c	        0x488b4008	                mov rax, qword [rax + 8]	      3268	fold.c	ELSE_1	FUNCTION_69
0x4000b70	    0x488905000000	            mov qword [0x04000b77], rax 	      3268	fold.c	ELSE_1	FUNCTION_69
0x4000b77	          0x4889ee	                            mov rsi, rbp	      3269	fold.c	ELSE_1	FUNCTION_69	CALL_1
0x4000b7a	      0xbf09000000	                              mov edi, 9	      3269	fold.c	ELSE_1	FUNCTION_69	CALL_1
0x4000b7f	      0xe800000000	                          call 0x4000b84	      3269	fold.c	ELSE_1	FUNCTION_69	CALL_1
0x4000b84	    0xc74328000000	               mov dword [rbx + 0x28], 0	      3271	fold.c	ELSE_1	FUNCTION_69
0x4000b8b	          0x8b432c	            mov eax, dword [rbx + 0x2c] 	      3272	fold.c	ELSE_1	FUNCTION_69
0x4000b8e	          0x894330	             mov dword [rbx + 0x30], eax	      3272	fold.c	ELSE_1	FUNCTION_69
0x4000b91	    0xc7432c150000	           mov dword [rbx + 0x2c], 0x15 	      3273	fold.c	ELSE_1	FUNCTION_69
0x4000b98	        0x4883fd01	                              cmp rbp, 1	      3274	fold.c	ELSE_1	FUNCTION_69	IF_1
0x4000b9c	            0x7f07	                            jg 0x4000ba5	      3274	fold.c	ELSE_1	FUNCTION_69	IF_1
0x4000b9e	    0xc74320000000	               mov dword [rbx + 0x20], 0	      3275	fold.c	ELSE_1	FUNCTION_69	IF_1
0x4000ba5	    0x448b2d000000	           mov r13d, dword [0x04000bac] 	      3279	fold.c	ELSE_1	FUNCTION_69
0x4000bac	          0x488b03	                    mov rax, qword [rbx]	      3280	fold.c	ELSE_1	FUNCTION_69	CALL_2
0x4000baf	    0x488bb8180200	           mov rdi, qword [rax + 0x218] 	      3280	fold.c	ELSE_1	FUNCTION_69	CALL_2
0x4000bb6	      0x488d742404	                      lea rsi, [rsp + 4]	      3280	fold.c	ELSE_1	FUNCTION_69	CALL_2
0x4000bbb	      0xe800000000	                          call 0x4000bc0	      3280	fold.c	ELSE_1	FUNCTION_69	CALL_2
0x4000bc0	    0x44892d000000	           mov dword [0x04000bc7], r13d 	      3281	fold.c	ELSE_1	FUNCTION_69
0x4000bc7	        0x8b542404	                mov edx, dword [rsp + 4]	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x4000bcb	          0x83fa3e	                           cmp edx, 0x3e	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x4000bce	            0x7455	                            je 0x4000c25	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x4000bd0	          0x83fa3e	                           cmp edx, 0x3e	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x4000bd3	            0x7f0c	                            jg 0x4000be1	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x4000bd5	          0x83fa3c	                           cmp edx, 0x3c	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x4000bd8	            0x745a	                            je 0x4000c34	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x4000bda	          0x83fa3d	                           cmp edx, 0x3d	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x4000bdd	            0x7460	                            je 0x4000c3f	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x4000bdf	            0xeb66	                           jmp 0x4000c47	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x4000be1	          0x83fa61	                           cmp edx, 0x61	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x4000be4	            0x7407	                            je 0x4000bed	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x4000be6	          0x83fa73	                           cmp edx, 0x73	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x4000be9	            0x7416	                            je 0x4000c01	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x4000beb	            0xeb5a	                           jmp 0x4000c47	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x4000bed	          0x8b5320	            mov edx, dword [rbx + 0x20] 	      3286	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x4000bf0	            0x85d2	                           test edx, edx	      3286	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x4000bf2	            0x7808	                            js 0x4000bfc	      3286	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x4000bf4	             0x1c2	                            add edx, eax	      3288	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x4000bf6	          0x895320	             mov dword [rbx + 0x20], edx	      3288	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x4000bf9	          0x895324	             mov dword [rbx + 0x24], edx	      3289	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x4000bfc	          0x894328	             mov dword [rbx + 0x28], eax	      3291	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x4000bff	            0xeb58	                           jmp 0x4000c59	      3292	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x4000c01	          0x8b5320	            mov edx, dword [rbx + 0x20] 	      3295	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_3
0x4000c04	            0x85d2	                           test edx, edx	      3295	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_3
0x4000c06	            0x7857	                            js 0x4000c5f	      3295	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_3
0x4000c08	            0x39d0	                            cmp eax, edx	      3297	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_3	IF_4
0x4000c0a	            0x7e09	                           jle 0x4000c15	      3297	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_3	IF_4
0x4000c0c	    0xc74324000000	               mov dword [rbx + 0x24], 0	      3298	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_3	IF_4
0x4000c13	            0xeb05	                           jmp 0x4000c1a	      3298	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_3	IF_4
0x4000c15	            0x29c2	                            sub edx, eax	      3300	fold.c	FUNCTION_69	SWITCH_1	IF_3	ELSE_1
0x4000c17	          0x895324	             mov dword [rbx + 0x24], edx	      3300	fold.c	FUNCTION_69	SWITCH_1	IF_3	ELSE_1
0x4000c1a	          0x8b4324	            mov eax, dword [rbx + 0x24] 	      3301	fold.c	FUNCTION_69	SWITCH_1	IF_3	ELSE_1
0x4000c1d	          0x83c001	                              add eax, 1	      3301	fold.c	FUNCTION_69	SWITCH_1	IF_3	ELSE_1
0x4000c20	          0x89432c	             mov dword [rbx + 0x2c], eax	      3301	fold.c	FUNCTION_69	SWITCH_1	IF_3	ELSE_1
0x4000c23	            0xeb61	                           jmp 0x4000c86	      3301	fold.c	FUNCTION_69	SWITCH_1	IF_3	ELSE_1
0x4000c25	          0x894320	             mov dword [rbx + 0x20], eax	      3306	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x4000c28	          0x894324	             mov dword [rbx + 0x24], eax	      3307	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x4000c2b	    0xc74328010000	               mov dword [rbx + 0x28], 1	      3308	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x4000c32	            0xeb25	                           jmp 0x4000c59	      3309	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x4000c34	          0x8d50ff	                      lea edx, [rax - 1]	      3312	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x4000c37	          0x895324	             mov dword [rbx + 0x24], edx	      3312	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x4000c3a	          0x89432c	             mov dword [rbx + 0x2c], eax	      3313	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x4000c3d	            0xeb1a	                           jmp 0x4000c59	      3314	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x4000c3f	          0x8b4320	            mov eax, dword [rbx + 0x20] 	      3317	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x4000c42	          0x894324	             mov dword [rbx + 0x24], eax	      3317	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x4000c45	            0xeb12	                           jmp 0x4000c59	      3318	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x4000c47	            0x85c0	                           test eax, eax	      3321	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	IF_5
0x4000c49	            0x7908	                           jns 0x4000c53	      3321	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	IF_5
0x4000c4b	          0x8b5320	            mov edx, dword [rbx + 0x20] 	      3324	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	IF_5
0x4000c4e	          0x895324	             mov dword [rbx + 0x24], edx	      3324	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	IF_5
0x4000c51	            0xeb03	                           jmp 0x4000c56	      3324	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	IF_5
0x4000c53	          0x894324	             mov dword [rbx + 0x24], eax	      3326	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	ELSE_2
0x4000c56	          0x894320	             mov dword [rbx + 0x20], eax	      3327	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	ELSE_2
0x4000c59	        0x837b2000	               cmp dword [rbx + 0x20], 0	      3333	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6
0x4000c5d	            0x7927	                           jns 0x4000c86	      3333	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6
0x4000c5f	        0x4883fd01	                              cmp rbp, 1	      3335	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_7
0x4000c63	            0x7f0e	                            jg 0x4000c73	      3335	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_7
0x4000c65	    0xc74320000000	               mov dword [rbx + 0x20], 0	      3337	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_7
0x4000c6c	    0xc74324000000	               mov dword [rbx + 0x24], 0	      3338	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_7
0x4000c73	    0x488b05000000	            mov rax, qword [0x04000c7a] 	      3340	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_8
0x4000c7a	          0x483b28	                    cmp rbp, qword [rax]	      3340	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_8
0x4000c7d	            0x7507	                           jne 0x4000c86	      3340	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_8
0x4000c7f	    0xc74324000000	               mov dword [rbx + 0x24], 0	      3341	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_8
0x4000c86	    0x4c8925000000	            mov qword [0x04000c8d], r12 	      3344	fold.c	FUNCTION_69	ELSE_1
0x4000c8d	      0x498b442408	                mov rax, qword [r12 + 8]	      3345	fold.c	FUNCTION_69	ELSE_1
0x4000c92	    0x488905000000	            mov qword [0x04000c99], rax 	      3345	fold.c	FUNCTION_69	ELSE_1
0x4000c99	      0x488b442408	                mov rax, qword [rsp + 8]	      3347	fold.c	FUNCTION_69	ELSE_1
0x4000c9e	    0x644833042528	                xor rax, qword fs:[0x28]	      3347	fold.c	FUNCTION_69	ELSE_1
0x4000ca7	            0x7405	                            je 0x4000cae	      3347	fold.c	FUNCTION_69	ELSE_1
0x4000ca9	      0xe800000000	                          call 0x4000cae	      3347	fold.c	FUNCTION_69	ELSE_1
0x4000cae	        0x4883c418	                           add rsp, 0x18	      3347	fold.c	FUNCTION_69	ELSE_1
0x4000cb2	              0x5b	                                 pop rbx	      3347	fold.c	FUNCTION_69	ELSE_1
0x4000cb3	              0x5d	                                 pop rbp	      3347	fold.c	FUNCTION_69	ELSE_1
0x4000cb4	            0x415c	                                 pop r12	      3347	fold.c	FUNCTION_69	ELSE_1
0x4000cb6	            0x415d	                                 pop r13	      3347	fold.c	FUNCTION_69	ELSE_1
0x4000cb8	              0xc3	                                     ret	      3347	fold.c	FUNCTION_69	ELSE_1
foldUpdateIEMSRecurse	DO,0:ELSE,14:FOR,1:SWITCH,0:IF,46:CALL,21:WHILE,4:functions,0	635
0x40019bd	            0x4157	                                push r15	      2379	fold.c	FUNCTION_59
0x40019bf	            0x4156	                                push r14	      2379	fold.c	FUNCTION_59
0x40019c1	            0x4155	                                push r13	      2379	fold.c	FUNCTION_59
0x40019c3	            0x4154	                                push r12	      2379	fold.c	FUNCTION_59
0x40019c5	              0x55	                                push rbp	      2379	fold.c	FUNCTION_59
0x40019c6	              0x53	                                push rbx	      2379	fold.c	FUNCTION_59
0x40019c7	        0x4883ec68	                           sub rsp, 0x68	      2379	fold.c	FUNCTION_59
0x40019cb	          0x4889fd	                            mov rbp, rdi	      2379	fold.c	FUNCTION_59
0x40019ce	        0x89742414	             mov dword [rsp + 0x14], esi	      2379	fold.c	FUNCTION_59
0x40019d2	          0x4989d7	                            mov r15, rdx	      2379	fold.c	FUNCTION_59
0x40019d5	          0x4889cb	                            mov rbx, rcx	      2379	fold.c	FUNCTION_59
0x40019d8	          0x4d89c5	                             mov r13, r8	      2379	fold.c	FUNCTION_59
0x40019db	      0x4c894c2418	              mov qword [rsp + 0x18], r9	      2379	fold.c	FUNCTION_59
0x40019e0	    0x64488b042528	                mov rax, qword fs:[0x28]	      2379	fold.c	FUNCTION_59
0x40019e9	      0x4889442458	             mov qword [rsp + 0x58], rax	      2379	fold.c	FUNCTION_59
0x40019ee	            0x31c0	                            xor eax, eax	      2379	fold.c	FUNCTION_59
0x40019f0	    0x48c744244800	               mov qword [rsp + 0x48], 0	      2381	fold.c	FUNCTION_59
0x40019f9	        0x488b4108	                mov rax, qword [rcx + 8]	      2385	fold.c	FUNCTION_59
0x40019fd	      0x4889442408	                mov qword [rsp + 8], rax	      2385	fold.c	FUNCTION_59
0x4001a02	          0x488b01	                    mov rax, qword [rcx]	      2388	fold.c	FUNCTION_59
0x4001a05	        0x488b4008	                mov rax, qword [rax + 8]	      2388	fold.c	FUNCTION_59
0x4001a09	          0x488b00	                    mov rax, qword [rax]	      2388	fold.c	FUNCTION_59
0x4001a0c	        0x482b4110	             sub rax, qword [rcx + 0x10]	      2388	fold.c	FUNCTION_59
0x4001a10	          0x4989c6	                            mov r14, rax	      2388	fold.c	FUNCTION_59
0x4001a13	    0x4981f8000000	                               cmp r8, 0	      2397	fold.c	FUNCTION_59	IF_1
0x4001a1a	            0x7546	                           jne 0x4001a62	      2397	fold.c	FUNCTION_59	IF_1
0x4001a1c	          0x8b4120	            mov eax, dword [rcx + 0x20] 	      2397	fold.c	FUNCTION_59	IF_1
0x4001a1f	            0x89c2	                            mov edx, eax	      2398	fold.c	FUNCTION_59	IF_1
0x4001a21	            0x29f2	                            sub edx, esi	      2398	fold.c	FUNCTION_59	IF_1
0x4001a23	          0x395128	            cmp dword [rcx + 0x28], edx 	      2398	fold.c	FUNCTION_59	IF_1
0x4001a26	            0x7f3a	                            jg 0x4001a62	      2398	fold.c	FUNCTION_59	IF_1
0x4001a28	            0x85c0	                           test eax, eax	      2398	fold.c	FUNCTION_59	IF_1
0x4001a2a	            0x7e36	                           jle 0x4001a62	      2398	fold.c	FUNCTION_59	IF_1
0x4001a2c	        0x498d77ff	                      lea rsi, [r15 - 1]	      2400	fold.c	FUNCTION_59	IF_1	CALL_1
0x4001a30	      0x488d542448	                   lea rdx, [rsp + 0x48]	      2400	fold.c	FUNCTION_59	IF_1	CALL_1
0x4001a35	      0xe8a6e6ffff	                       call sym.foldFind	      2400	fold.c	FUNCTION_59	IF_1	CALL_1
0x4001a3a	      0x488b542448	            mov rdx, qword [rsp + 0x48] 	      2401	fold.c	FUNCTION_59	IF_1	IF_2
0x4001a3f	        0x48634500	                 movsxd rax, dword [rbp]	      2401	fold.c	FUNCTION_59	IF_1	IF_2
0x4001a43	        0x488d0440	                  lea rax, [rax + rax*2]	      2401	fold.c	FUNCTION_59	IF_1	IF_2
0x4001a47	        0x48c1e004	                              shl rax, 4	      2401	fold.c	FUNCTION_59	IF_1	IF_2
0x4001a4b	        0x48034510	             add rax, qword [rbp + 0x10]	      2401	fold.c	FUNCTION_59	IF_1	IF_2
0x4001a4f	          0x4839c2	                            cmp rdx, rax	      2401	fold.c	FUNCTION_59	IF_1	IF_2
0x4001a52	            0x7305	                           jae 0x4001a59	      2401	fold.c	FUNCTION_59	IF_1	IF_2
0x4001a54	          0x4c3b3a	                    cmp r15, qword [rdx]	      2402	fold.c	FUNCTION_59	IF_1	IF_2
0x4001a57	            0x7f09	                            jg 0x4001a62	      2402	fold.c	FUNCTION_59	IF_1	IF_2
0x4001a59	    0x48c744244800	               mov qword [rsp + 0x48], 0	      2403	fold.c	FUNCTION_59	IF_1	IF_2
0x4001a62	        0x488b4308	                mov rax, qword [rbx + 8]	      2417	fold.c	FUNCTION_59
0x4001a66	        0x48894318	             mov qword [rbx + 0x18], rax	      2417	fold.c	FUNCTION_59
0x4001a6a	      0x4c897c2420	             mov qword [rsp + 0x20], r15	      2384	fold.c	FUNCTION_59
0x4001a6f	        0x8b442414	            mov eax, dword [rsp + 0x14] 	      2383	fold.c	FUNCTION_59
0x4001a73	        0x89442410	             mov dword [rsp + 0x10], eax	      2383	fold.c	FUNCTION_59
0x4001a77	    0xc74424280000	               mov dword [rsp + 0x28], 0	      2387	fold.c	FUNCTION_59
0x4001a7f	          0x83c001	                              add eax, 1	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4001a82	        0x8944242c	             mov dword [rsp + 0x2c], eax	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4001a86	      0xe9d7060000	                           jmp 0x4002162	      2418	fold.c	FUNCTION_59	WHILE_1
0x4001a8b	      0xe800000000	                          call 0x4001a90	      2421	fold.c	FUNCTION_59	WHILE_1	CALL_2
0x4001a90	          0x8b4320	            mov eax, dword [rbx + 0x20] 	      2427	fold.c	FUNCTION_59	WHILE_1
0x4001a93	          0x83f814	                           cmp eax, 0x14	      2427	fold.c	FUNCTION_59	WHILE_1
0x4001a96	      0xba14000000	                           mov edx, 0x14	      2427	fold.c	FUNCTION_59	WHILE_1
0x4001a9b	           0xf4ed0	                         cmovle edx, eax	      2427	fold.c	FUNCTION_59	WHILE_1
0x4001a9e	        0x89542410	             mov dword [rsp + 0x10], edx	      2427	fold.c	FUNCTION_59	WHILE_1
0x4001aa2	        0x4c8b6308	                mov r12, qword [rbx + 8]	      2430	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4001aa6	      0x4c39642408	                cmp qword [rsp + 8], r12	      2430	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4001aab	            0x7d26	                           jge 0x4001ad3	      2430	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4001aad	            0x89d0	                            mov eax, edx	      2431	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4001aaf	          0x2b4328	             sub eax, dword [rbx + 0x28]	      2431	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4001ab2	        0x8b4c2414	            mov ecx, dword [rsp + 0x14] 	      2431	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4001ab6	            0x39c1	                            cmp ecx, eax	      2431	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4001ab8	            0x7f11	                            jg 0x4001acb	      2431	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4001aba	          0x3b4b30	            cmp ecx, dword [rbx + 0x30] 	      2432	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4001abd	      0xb800000000	                              mov eax, 0	      2432	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4001ac2	           0xf4cc2	                          cmovl eax, edx	      2432	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4001ac5	        0x89442410	             mov dword [rsp + 0x10], eax	      2432	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4001ac9	            0xeb08	                           jmp 0x4001ad3	      2432	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4001acb	    0xc74424100000	               mov dword [rsp + 0x10], 0	      2432	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4001ad3	      0x837c242800	               cmp dword [rsp + 0x28], 0	      2434	fold.c	FUNCTION_59	WHILE_1	IF_5
0x4001ad8	     0xf85f4000000	                           jne 0x4001bd2	      2434	fold.c	FUNCTION_59	WHILE_1	IF_5
0x4001ade	      0x4c39642418	            cmp qword [rsp + 0x18], r12 	      2434	fold.c	FUNCTION_59	WHILE_1	IF_5
0x4001ae3	     0xf8de9000000	                           jge 0x4001bd2	      2434	fold.c	FUNCTION_59	WHILE_1	IF_5
0x4001ae9	      0x488b442448	            mov rax, qword [rsp + 0x48] 	      2434	fold.c	FUNCTION_59	WHILE_1	IF_5
0x4001aee	          0x4885c0	                           test rax, rax	      2434	fold.c	FUNCTION_59	WHILE_1	IF_5
0x4001af1	     0xf84f1000000	                            je 0x4001be8	      2434	fold.c	FUNCTION_59	WHILE_1	IF_5
0x4001af7	    0x4981fd000000	                              cmp r13, 0	      2444	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4001afe	           0xf95c1	                                setne cl	      2444	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4001b01	    0x4981fd000000	                              cmp r13, 0	      2444	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4001b08	           0xf95c2	                                setne dl	      2444	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4001b0b	            0x84d1	                             test cl, dl	      2444	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4001b0d	            0x740d	                            je 0x4001b1c	      2444	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4001b0f	    0x4981fd000000	                              cmp r13, 0	      2444	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4001b16	     0xf8562060000	                           jne 0x400217e	      2444	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4001b1c	      0x4889442450	             mov qword [rsp + 0x50], rax	      2447	fold.c	FUNCTION_59	WHILE_1	IF_5
0x4001b21	        0x8b7c2414	            mov edi, dword [rsp + 0x14] 	      2448	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x4001b25	        0x397c2410	            cmp dword [rsp + 0x10], edi 	      2448	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x4001b29	            0x7c4a	                            jl 0x4001b75	      2448	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x4001b2b	          0x4c2b20	                    sub r12, qword [rax]	      2453	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x4001b2e	      0xb800000000	                              mov eax, 0	      2446	fold.c	FUNCTION_59	WHILE_1	IF_5
0x4001b33	      0x4c89742430	             mov qword [rsp + 0x30], r14	      2446	fold.c	FUNCTION_59	WHILE_1	IF_5
0x4001b38	          0x4189c6	                           mov r14d, eax	      2446	fold.c	FUNCTION_59	WHILE_1	IF_5
0x4001b3b	            0xeb0c	                           jmp 0x4001b49	      2454	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2	CALL_3
0x4001b3d	        0x4183c601	                             add r14d, 1	      2456	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2
0x4001b41	      0x488b442450	            mov rax, qword [rsp + 0x50] 	      2457	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2
0x4001b46	          0x4c2b20	                    sub r12, qword [rax]	      2457	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2
0x4001b49	      0x488b442450	            mov rax, qword [rsp + 0x50] 	      2454	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2	CALL_3
0x4001b4e	        0x488d7810	                   lea rdi, [rax + 0x10]	      2454	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2	CALL_3
0x4001b52	      0x488d542450	                   lea rdx, [rsp + 0x50]	      2454	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2	CALL_3
0x4001b57	          0x4c89e6	                            mov rsi, r12	      2454	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2	CALL_3
0x4001b5a	      0xe881e5ffff	                       call sym.foldFind	      2454	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2	CALL_3
0x4001b5f	            0x85c0	                           test eax, eax	      2454	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2	CALL_3
0x4001b61	            0x75da	                           jne 0x4001b3d	      2454	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2	CALL_3
0x4001b63	          0x4489f0	                           mov eax, r14d	      2454	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2	CALL_3
0x4001b66	      0x4c8b742430	            mov r14, qword [rsp + 0x30] 	      2454	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2	CALL_3
0x4001b6b	         0x3442414	             add eax, dword [rsp + 0x14]	      2460	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8
0x4001b6f	        0x39442410	            cmp dword [rsp + 0x10], eax 	      2460	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8
0x4001b73	            0x7d42	                           jge 0x4001bb7	      2460	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8
0x4001b75	      0x488b442448	            mov rax, qword [rsp + 0x48] 	      2462	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	CALL_4
0x4001b7a	        0x488b7308	                mov rsi, qword [rbx + 8]	      2462	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	CALL_4
0x4001b7e	          0x482b30	                    sub rsi, qword [rax]	      2462	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	CALL_4
0x4001b81	        0x488d7810	                   lea rdi, [rax + 0x10]	      2462	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	CALL_4
0x4001b85	      0x488d542450	                   lea rdx, [rsp + 0x50]	      2462	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	CALL_4
0x4001b8a	      0xe851e5ffff	                       call sym.foldFind	      2462	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	CALL_4
0x4001b8f	      0x488b442450	            mov rax, qword [rsp + 0x50] 	      2463	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x4001b94	          0x4885c0	                           test rax, rax	      2463	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x4001b97	            0x7439	                            je 0x4001bd2	      2463	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x4001b99	        0x488b5008	                mov rdx, qword [rax + 8]	      2464	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x4001b9d	          0x480310	                    add rdx, qword [rax]	      2464	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x4001ba0	          0x4889d0	                            mov rax, rdx	      2464	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x4001ba3	      0x488b542448	            mov rdx, qword [rsp + 0x48] 	      2464	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x4001ba8	          0x488b12	                    mov rdx, qword [rdx]	      2464	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x4001bab	      0x488d4410ff	                lea rax, [rax + rdx - 1]	      2464	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x4001bb0	      0x4889442418	             mov qword [rsp + 0x18], rax	      2464	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x4001bb5	            0xeb1b	                           jmp 0x4001bd2	      2464	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x4001bb7	      0x488b542448	            mov rdx, qword [rsp + 0x48] 	      2466	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x4001bbc	        0x488b4208	                mov rax, qword [rdx + 8]	      2466	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x4001bc0	          0x480302	                    add rax, qword [rdx]	      2466	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x4001bc3	        0x483b4308	                cmp rax, qword [rbx + 8]	      2466	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x4001bc7	     0xf8ef3070000	                           jle 0x40023c0	      2466	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x4001bcd	      0xe99e050000	                           jmp 0x4002170	      2466	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x4001bd2	    0x48837c244800	               cmp qword [rsp + 0x48], 0	      2475	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4001bd8	     0xf853f040000	                           jne 0x400201d	      2475	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4001bde	            0xeb08	                           jmp 0x4001be8	      2475	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4001be0	    0xc74424280100	               mov dword [rsp + 0x28], 1	      2467	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x4001be8	        0x8b4c2414	            mov ecx, dword [rsp + 0x14] 	      2476	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4001bec	        0x394c2410	            cmp dword [rsp + 0x10], ecx 	      2476	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4001bf0	     0xf8519040000	                           jne 0x400200f	      2476	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4001bf6	      0x488b442418	            mov rax, qword [rsp + 0x18] 	      2477	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4001bfb	        0x48394318	            cmp qword [rbx + 0x18], rax 	      2477	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4001bff	     0xf8d0a040000	                           jge 0x400200f	      2477	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4001c05	        0x837b2800	               cmp dword [rbx + 0x28], 0	      2478	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4001c09	     0xf8500040000	                           jne 0x400200f	      2478	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4001c0f	        0x837b3014	           cmp dword [rbx + 0x30], 0x14 	      2479	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4001c13	     0xf8ef6030000	                           jle 0x400200f	      2479	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4001c19	        0x4c3b7308	                cmp r14, qword [rbx + 8]	      2480	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4001c1d	     0xf85b6070000	                           jne 0x40023d9	      2480	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4001c23	      0xe9e7030000	                           jmp 0x400200f	      2480	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4001c28	    0x41bc00000000	                             mov r12d, 0	      2491	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	IF_12
0x4001c2e	        0x837b2800	               cmp dword [rbx + 0x28], 0	      2490	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	IF_12
0x4001c32	            0x750c	                           jne 0x4001c40	      2490	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	IF_12
0x4001c34	        0x837b3014	           cmp dword [rbx + 0x30], 0x14 	      2491	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	IF_12
0x4001c38	        0x410f9fc4	                               setg r12b	      2491	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	IF_12
0x4001c3c	        0x450fb6e4	                        movzx r12d, r12b	      2491	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	IF_12
0x4001c40	      0x488d542448	                   lea rdx, [rsp + 0x48]	      2498	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_5
0x4001c45	          0x4c89fe	                            mov rsi, r15	      2498	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_5
0x4001c48	          0x4889ef	                            mov rdi, rbp	      2498	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_5
0x4001c4b	      0xe890e4ffff	                       call sym.foldFind	      2498	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_5
0x4001c50	            0x85c0	                           test eax, eax	      2498	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_5
0x4001c52	     0xf8586000000	                           jne 0x4001cde	      2498	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_5
0x4001c58	      0x488b542448	            mov rdx, qword [rsp + 0x48] 	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4001c5d	        0x48634500	                 movsxd rax, dword [rbp]	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4001c61	        0x488d0440	                  lea rax, [rax + rax*2]	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4001c65	        0x48c1e004	                              shl rax, 4	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4001c69	        0x48034510	             add rax, qword [rbp + 0x10]	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4001c6d	          0x4839c2	                            cmp rdx, rax	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4001c70	            0x730a	                           jae 0x4001c7c	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4001c72	      0x488b442408	                mov rax, qword [rsp + 8]	      2500	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4001c77	          0x483b02	                    cmp rax, qword [rdx]	      2500	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4001c7a	            0x7d62	                           jge 0x4001cde	      2500	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4001c7c	          0x4963c4	                        movsxd rax, r12d	      2501	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_6
0x4001c7f	      0x488b742408	                mov rsi, qword [rsp + 8]	      2501	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_6
0x4001c84	          0x4829c6	                            sub rsi, rax	      2501	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_6
0x4001c87	      0x488d542448	                   lea rdx, [rsp + 0x48]	      2501	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_6
0x4001c8c	          0x4889ef	                            mov rdi, rbp	      2501	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_6
0x4001c8f	      0xe84ce4ffff	                       call sym.foldFind	      2501	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_6
0x4001c94	            0x85c0	                           test eax, eax	      2501	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_6
0x4001c96	            0x7546	                           jne 0x4001cde	      2501	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_6
0x4001c98	        0x488b4d10	            mov rcx, qword [rbp + 0x10] 	      2502	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4001c9c	      0x488b542448	            mov rdx, qword [rsp + 0x48] 	      2502	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4001ca1	        0x48634500	                 movsxd rax, dword [rbp]	      2502	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4001ca5	        0x488d0440	                  lea rax, [rax + rax*2]	      2502	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4001ca9	        0x48c1e004	                              shl rax, 4	      2502	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4001cad	          0x4801c8	                            add rax, rcx	      2502	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4001cb0	          0x4839c2	                            cmp rdx, rax	      2502	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4001cb3	     0xf8374020000	                           jae 0x4001f2d	      2502	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4001cb9	        0x8b7c2414	            mov edi, dword [rsp + 0x14] 	      2503	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4001cbd	        0x397c2410	            cmp dword [rsp + 0x10], edi 	      2503	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4001cc1	            0x7d0e	                           jge 0x4001cd1	      2503	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4001cc3	        0x488b4308	                mov rax, qword [rbx + 8]	      2503	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4001cc7	          0x483902	                    cmp qword [rdx], rax	      2503	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4001cca	            0x7c12	                            jl 0x4001cde	      2503	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4001ccc	      0xe95c020000	                           jmp 0x4001f2d	      2503	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4001cd1	        0x488b4318	            mov rax, qword [rbx + 0x18] 	      2505	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4001cd5	          0x483902	                    cmp qword [rdx], rax	      2505	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4001cd8	     0xf8f4f020000	                            jg 0x4001f2d	      2505	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4001cde	      0x488b7c2448	            mov rdi, qword [rsp + 0x48] 	      2507	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14
0x4001ce3	          0x4c8b07	                     mov r8, qword [rdi]	      2507	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14
0x4001ce6	          0x4c89c2	                             mov rdx, r8	      2507	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14
0x4001ce9	        0x48035708	                add rdx, qword [rdi + 8]	      2507	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14
0x4001ced	          0x4963c4	                        movsxd rax, r12d	      2507	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14
0x4001cf0	          0x4801d0	                            add rax, rdx	      2507	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14
0x4001cf3	      0x4839442408	                cmp qword [rsp + 8], rax	      2507	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14
0x4001cf8	     0xf8dcd010000	                           jge 0x4001ecb	      2507	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14
0x4001cfe	      0x488b442408	                mov rax, qword [rsp + 8]	      2513	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_15
0x4001d03	          0x4c39c0	                             cmp rax, r8	      2513	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_15
0x4001d06	     0xf8456010000	                            je 0x4001e62	      2513	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_15
0x4001d0c	          0x4d39c7	                             cmp r15, r8	      2517	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x4001d0f	            0x7f71	                            jg 0x4001d82	      2517	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x4001d11	          0x4c39c0	                             cmp rax, r8	      2519	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17
0x4001d14	            0x7d21	                           jge 0x4001d37	      2519	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17
0x4001d16	          0x4c89c1	                             mov rcx, r8	      2521	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17	CALL_7
0x4001d19	          0x4829c1	                            sub rcx, rax	      2521	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17	CALL_7
0x4001d1c	        0x4883c710	                           add rdi, 0x10	      2521	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17	CALL_7
0x4001d20	    0x41b800000000	                              mov r8d, 0	      2521	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17	CALL_7
0x4001d26	      0xbaffffff7f	                     mov edx, 0x7fffffff	      2521	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17	CALL_7
0x4001d2b	      0xbe00000000	                              mov esi, 0	      2521	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17	CALL_7
0x4001d30	      0xe846f7ffff	          call sym.foldMarkAdjustRecurse	      2521	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17	CALL_7
0x4001d35	            0xeb25	                           jmp 0x4001d5c	      2521	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17	CALL_7
0x4001d37	      0x488b442408	                mov rax, qword [rsp + 8]	      2526	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5	CALL_8
0x4001d3c	          0x4889c2	                            mov rdx, rax	      2526	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5	CALL_8
0x4001d3f	          0x4c29c2	                             sub rdx, r8	      2526	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5	CALL_8
0x4001d42	        0x4883ea01	                              sub rdx, 1	      2526	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5	CALL_8
0x4001d46	        0x4883c710	                           add rdi, 0x10	      2526	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5	CALL_8
0x4001d4a	          0x4929c0	                             sub r8, rax	      2526	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5	CALL_8
0x4001d4d	      0xb9ffffff7f	                     mov ecx, 0x7fffffff	      2526	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5	CALL_8
0x4001d52	      0xbe00000000	                              mov esi, 0	      2526	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5	CALL_8
0x4001d57	      0xe81ff7ffff	          call sym.foldMarkAdjustRecurse	      2526	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5	CALL_8
0x4001d5c	      0x488b442448	            mov rax, qword [rsp + 0x48] 	      2531	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x4001d61	          0x488b10	                    mov rdx, qword [rax]	      2531	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x4001d64	      0x488b4c2408	                mov rcx, qword [rsp + 8]	      2531	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x4001d69	          0x4829ca	                            sub rdx, rcx	      2531	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x4001d6c	        0x48015008	                add qword [rax + 8], rdx	      2531	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x4001d70	          0x488908	                    mov qword [rax], rcx	      2532	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x4001d73	    0xc70500000000	               mov dword [0x04001d7d], 1	      2533	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x4001d7d	      0xe9e0000000	                           jmp 0x4001e62	      2533	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x4001d82	        0x837b2800	               cmp dword [rbx + 0x28], 0	      2535	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x4001d86	            0x740a	                            je 0x4001d92	      2535	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x4001d88	        0x8b4c2414	            mov ecx, dword [rsp + 0x14] 	      2535	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x4001d8c	        0x394c2410	            cmp dword [rsp + 0x10], ecx 	      2535	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x4001d90	            0x7419	                            je 0x4001dab	      2535	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x4001d92	      0x488b442408	                mov rax, qword [rsp + 8]	      2560	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_19
0x4001d97	      0x4889442438	             mov qword [rsp + 0x38], rax	      2560	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_19
0x4001d9c	      0x4c897c2430	             mov qword [rsp + 0x30], r15	      2559	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_19
0x4001da1	          0x4939c7	                            cmp r15, rax	      2536	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x4001da4	            0x752b	                           jne 0x4001dd1	      2536	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x4001da6	      0xe972020000	                           jmp 0x400201d	      2536	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x4001dab	      0x4c3b7c2408	                cmp r15, qword [rsp + 8]	      2557	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_19
0x4001db0	            0x7510	                           jne 0x4001dc2	      2557	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_19
0x4001db2	        0x488b4308	                mov rax, qword [rbx + 8]	      2564	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	ELSE_7
0x4001db6	      0x4889442430	             mov qword [rsp + 0x30], rax	      2564	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	ELSE_7
0x4001dbb	      0x4889442438	             mov qword [rsp + 0x38], rax	      2565	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	ELSE_7
0x4001dc0	            0xeb0f	                           jmp 0x4001dd1	      2565	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	ELSE_7
0x4001dc2	      0x488b442408	                mov rax, qword [rsp + 8]	      2560	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_19
0x4001dc7	      0x4889442438	             mov qword [rsp + 0x38], rax	      2560	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_19
0x4001dcc	      0x4c897c2430	             mov qword [rsp + 0x30], r15	      2559	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_19
0x4001dd1	      0x488b542438	            mov rdx, qword [rsp + 0x38] 	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x4001dd6	          0x4c29c2	                             sub rdx, r8	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x4001dd9	      0x488b742430	            mov rsi, qword [rsp + 0x30] 	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x4001dde	          0x4c29c6	                             sub rsi, r8	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x4001de1	        0x4883c710	                           add rdi, 0x10	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x4001de5	      0xe824faffff	                     call sym.foldRemove	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x4001dea	      0x488b442448	            mov rax, qword [rsp + 0x48] 	      2569	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x4001def	        0x482b4510	             sub rax, qword [rbp + 0x10]	      2569	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x4001df3	        0x48c1f804	                              sar rax, 4	      2569	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x4001df7	    0x48bfabaaaaaa	          movabs rdi, 0xaaaaaaaaaaaaaaab	      2569	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x4001e01	        0x480fafc7	                           imul rax, rdi	      2569	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x4001e05	      0x488b4c2438	            mov rcx, qword [rsp + 0x38] 	      2570	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_10
0x4001e0a	        0x4883e901	                              sub rcx, 1	      2570	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_10
0x4001e0e	      0x488b542430	            mov rdx, qword [rsp + 0x30] 	      2570	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_10
0x4001e13	      0x4889442430	             mov qword [rsp + 0x30], rax	      2570	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_10
0x4001e18	            0x89c6	                            mov esi, eax	      2570	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_10
0x4001e1a	          0x4889ef	                            mov rdi, rbp	      2570	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_10
0x4001e1d	      0xe87fe8ffff	                      call sym.foldSplit	      2570	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_10
0x4001e22	      0x4863442430	         movsxd rax, dword [rsp + 0x30] 	      2571	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x4001e27	      0x488d444003	              lea rax, [rax + rax*2 + 3]	      2571	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x4001e2c	        0x48c1e004	                              shl rax, 4	      2571	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x4001e30	        0x48034510	             add rax, qword [rbp + 0x10]	      2571	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x4001e34	      0x4889442448	             mov qword [rsp + 0x48], rax	      2571	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x4001e39	    0x4981fd000000	                              cmp r13, 0	      2578	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_20
0x4001e40	           0xf94c2	                                 sete dl	      2578	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_20
0x4001e43	    0x4981fd000000	                              cmp r13, 0	      2578	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_20
0x4001e4a	           0xf94c0	                                 sete al	      2578	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_20
0x4001e4d	             0x8c2	                               or dl, al	      2578	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_20
0x4001e4f	            0x7509	                           jne 0x4001e5a	      2578	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_20
0x4001e51	    0x4981fd000000	                              cmp r13, 0	      2578	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_20
0x4001e58	            0x7508	                           jne 0x4001e62	      2578	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_20
0x4001e5a	    0xc74424280100	               mov dword [rsp + 0x28], 1	      2579	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_20
0x4001e62	      0x488b542448	            mov rdx, qword [rsp + 0x48] 	      2582	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x4001e67	          0x4c393a	                    cmp qword [rdx], r15	      2582	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x4001e6a	     0xf85ad010000	                           jne 0x400201d	      2582	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x4001e70	          0x4585e4	                         test r12d, r12d	      2582	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x4001e73	     0xf84a4010000	                            je 0x400201d	      2582	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x4001e79	          0x4889d0	                            mov rax, rdx	      2585	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22
0x4001e7c	        0x482b4510	             sub rax, qword [rbp + 0x10]	      2585	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22
0x4001e80	        0x48c1f804	                              sar rax, 4	      2585	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22
0x4001e84	    0x48b9abaaaaaa	          movabs rcx, 0xaaaaaaaaaaaaaaab	      2585	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22
0x4001e8e	        0x480fafc1	                           imul rax, rcx	      2585	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22
0x4001e92	            0x85c0	                           test eax, eax	      2585	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22
0x4001e94	     0xf8483010000	                            je 0x400201d	      2585	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22
0x4001e9a	        0x488d7ad0	                   lea rdi, [rdx - 0x30]	      2587	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22
0x4001e9e	      0x48897c2450	             mov qword [rsp + 0x50], rdi	      2587	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22
0x4001ea3	        0x488b42d8	             mov rax, qword [rdx - 0x28]	      2588	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23
0x4001ea7	        0x480342d0	             add rax, qword [rdx - 0x30]	      2588	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23
0x4001eab	          0x483b02	                    cmp rax, qword [rdx]	      2588	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23
0x4001eae	     0xf8569010000	                           jne 0x400201d	      2588	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23
0x4001eb4	          0x4889ee	                            mov rsi, rbp	      2590	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23	CALL_11
0x4001eb7	      0xe8eef7ffff	                      call sym.foldMerge	      2590	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23	CALL_11
0x4001ebc	      0x488b442450	            mov rax, qword [rsp + 0x50] 	      2591	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23
0x4001ec1	      0x4889442448	             mov qword [rsp + 0x48], rax	      2591	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23
0x4001ec6	      0xe952010000	                           jmp 0x400201d	      2591	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23
0x4001ecb	          0x4d39c7	                             cmp r15, r8	      2597	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24
0x4001ece	            0x7f2b	                            jg 0x4001efb	      2597	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24
0x4001ed0	          0x4889fe	                            mov rsi, rdi	      2602	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24	CALL_12
0x4001ed3	        0x482b7510	             sub rsi, qword [rbp + 0x10]	      2602	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24	CALL_12
0x4001ed7	        0x48c1fe04	                              sar rsi, 4	      2602	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24	CALL_12
0x4001edb	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	      2602	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24	CALL_12
0x4001ee5	        0x480faff0	                           imul rsi, rax	      2602	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24	CALL_12
0x4001ee9	      0xba01000000	                              mov edx, 1	      2602	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24	CALL_12
0x4001eee	          0x4889ef	                            mov rdi, rbp	      2602	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24	CALL_12
0x4001ef1	      0xe856f4ffff	                call sym.deleteFoldEntry	      2602	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24	CALL_12
0x4001ef6	      0xe914010000	                           jmp 0x400200f	      2602	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24	CALL_12
0x4001efb	          0x4c89fe	                            mov rsi, r15	      2609	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8
0x4001efe	          0x4c29c6	                             sub rsi, r8	      2609	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8
0x4001f01	        0x48897708	                mov qword [rdi + 8], rsi	      2609	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8
0x4001f05	        0x4883c710	                           add rdi, 0x10	      2610	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8	CALL_13
0x4001f09	    0x41b800000000	                              mov r8d, 0	      2610	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8	CALL_13
0x4001f0f	      0xb9ffffff7f	                     mov ecx, 0x7fffffff	      2610	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8	CALL_13
0x4001f14	      0xbaffffff7f	                     mov edx, 0x7fffffff	      2610	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8	CALL_13
0x4001f19	      0xe85df5ffff	          call sym.foldMarkAdjustRecurse	      2610	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8	CALL_13
0x4001f1e	    0xc70500000000	               mov dword [0x04001f28], 1	      2613	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8
0x4001f28	      0xe9e2000000	                           jmp 0x400200f	      2613	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8
0x4001f2d	          0x4829ca	                            sub rdx, rcx	      2620	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4001f30	          0x4989d4	                            mov r12, rdx	      2620	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4001f33	        0x49c1fc04	                              sar r12, 4	      2620	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4001f37	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	      2620	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4001f41	        0x4c0fafe0	                           imul r12, rax	      2620	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4001f45	          0x4489e6	                           mov esi, r12d	      2621	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_25	CALL_14
0x4001f48	          0x4889ef	                            mov rdi, rbp	      2621	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_25	CALL_14
0x4001f4b	      0xe8d3e6ffff	                     call sym.foldInsert	      2621	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_25	CALL_14
0x4001f50	          0x83f801	                              cmp eax, 1	      2621	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_25	CALL_14
0x4001f53	     0xf8550040000	                           jne 0x40023a9	      2621	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_25	CALL_14
0x4001f59	          0x4963c4	                        movsxd rax, r12d	      2623	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4001f5c	        0x488d0440	                  lea rax, [rax + rax*2]	      2623	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4001f60	        0x48c1e004	                              shl rax, 4	      2623	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4001f64	        0x48034510	             add rax, qword [rbp + 0x10]	      2623	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4001f68	      0x4889442448	             mov qword [rsp + 0x48], rax	      2623	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4001f6d	      0x488b4c2408	                mov rcx, qword [rsp + 8]	      2626	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4001f72	          0x488908	                    mov qword [rax], rcx	      2626	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4001f75	      0x488b542448	            mov rdx, qword [rsp + 0x48] 	      2627	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4001f7a	      0x488b442418	            mov rax, qword [rsp + 0x18] 	      2627	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4001f7f	          0x4829c8	                            sub rax, rcx	      2627	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4001f82	        0x4883c001	                              add rax, 1	      2627	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4001f86	        0x48894208	                mov qword [rdx + 8], rax	      2627	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4001f8a	    0x83bc24a00000	               cmp dword [rsp + 0xa0], 0	      2631	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_26
0x4001f92	            0x7510	                           jne 0x4001fa4	      2631	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_26
0x4001f94	          0x488b03	                    mov rax, qword [rbx]	      2633	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_26
0x4001f97	    0xc68020010000	               mov byte [rax + 0x120], 1	      2633	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_26
0x4001f9e	        0xc6422800	                mov byte [rdx + 0x28], 0	      2634	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_26
0x4001fa2	            0xeb2d	                           jmp 0x4001fd1	      2634	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_26
0x4001fa4	          0x4585e4	                         test r12d, r12d	      2636	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27
0x4001fa7	            0x7f21	                            jg 0x4001fca	      2636	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27
0x4001fa9	     0xfb68424a000	           movzx eax, byte [rsp + 0xa0] 	      2638	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27
0x4001fb1	          0x884228	               mov byte [rdx + 0x28], al	      2638	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27
0x4001fb4	    0x83bc24a00000	               cmp dword [rsp + 0xa0], 2	      2639	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27	IF_28
0x4001fbc	            0x7413	                            je 0x4001fd1	      2639	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27	IF_28
0x4001fbe	          0x488b03	                    mov rax, qword [rbx]	      2640	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27	IF_28
0x4001fc1	    0xc68020010000	               mov byte [rax + 0x120], 1	      2640	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27	IF_28
0x4001fc8	            0xeb07	                           jmp 0x4001fd1	      2640	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27	IF_28
0x4001fca	         0xfb642f8	               movzx eax, byte [rdx - 8]	      2643	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_11
0x4001fce	          0x884228	               mov byte [rdx + 0x28], al	      2643	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_11
0x4001fd1	      0x488b442448	            mov rax, qword [rsp + 0x48] 	      2644	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4001fd6	        0xc6402902	                mov byte [rax + 0x29], 2	      2644	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4001fda	    0x4981fd000000	                              cmp r13, 0	      2649	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_29
0x4001fe1	           0xf94c2	                                 sete dl	      2649	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_29
0x4001fe4	    0x4981fd000000	                              cmp r13, 0	      2649	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_29
0x4001feb	           0xf94c0	                                 sete al	      2649	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_29
0x4001fee	             0x8c2	                               or dl, al	      2649	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_29
0x4001ff0	            0x7509	                           jne 0x4001ffb	      2649	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_29
0x4001ff2	    0x4981fd000000	                              cmp r13, 0	      2649	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_29
0x4001ff9	            0x7508	                           jne 0x4002003	      2649	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_29
0x4001ffb	    0xc74424280100	               mov dword [rsp + 0x28], 1	      2650	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_29
0x4002003	    0xc70500000000	               mov dword [0x0400200d], 1	      2651	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x400200d	            0xeb0e	                           jmp 0x400201d	      2652	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x400200f	    0x8b0500000000	            mov eax, dword [0x04002015] 	      2486	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3
0x4002015	            0x85c0	                           test eax, eax	      2486	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3
0x4002017	     0xf840bfcffff	                            je 0x4001c28	      2486	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3
0x400201d	        0x8b4c2414	            mov ecx, dword [rsp + 0x14] 	      2657	fold.c	FUNCTION_59	WHILE_1	IF_30
0x4002021	        0x394c2410	            cmp dword [rsp + 0x10], ecx 	      2657	fold.c	FUNCTION_59	WHILE_1	IF_30
0x4002025	     0xf8c45010000	                            jl 0x4002170	      2657	fold.c	FUNCTION_59	WHILE_1	IF_30
0x400202b	        0x4c8b4b08	                 mov r9, qword [rbx + 8]	      2657	fold.c	FUNCTION_59	WHILE_1	IF_30
0x400202f	          0x4d39ce	                             cmp r14, r9	      2657	fold.c	FUNCTION_59	WHILE_1	IF_30
0x4002032	     0xf8c38010000	                            jl 0x4002170	      2657	fold.c	FUNCTION_59	WHILE_1	IF_30
0x4002038	        0x8b4c2414	            mov ecx, dword [rsp + 0x14] 	      2670	fold.c	FUNCTION_59	WHILE_1	IF_31
0x400203c	        0x394c2410	            cmp dword [rsp + 0x10], ecx 	      2670	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4002040	     0xf8eaf000000	                           jle 0x40020f5	      2670	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4002046	      0x488b442448	            mov rax, qword [rsp + 0x48] 	      2670	fold.c	FUNCTION_59	WHILE_1	IF_31
0x400204b	          0x4885c0	                           test rax, rax	      2670	fold.c	FUNCTION_59	WHILE_1	IF_31
0x400204e	     0xf84a1000000	                            je 0x40020f5	      2670	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4002054	        0x488b5318	            mov rdx, qword [rbx + 0x18] 	      2681	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4002058	          0x482b10	                    sub rdx, qword [rax]	      2681	fold.c	FUNCTION_59	WHILE_1	IF_31
0x400205b	        0x48895308	                mov qword [rbx + 8], rdx	      2681	fold.c	FUNCTION_59	WHILE_1	IF_31
0x400205f	          0x488b10	                    mov rdx, qword [rax]	      2682	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4002062	        0x48015310	            add qword [rbx + 0x10], rdx 	      2682	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4002066	          0x4989c4	                            mov r12, rax	      2683	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4002069	        0x4c2b6510	             sub r12, qword [rbp + 0x10]	      2683	fold.c	FUNCTION_59	WHILE_1	IF_31
0x400206d	        0x49c1fc04	                              sar r12, 4	      2683	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4002071	    0x48b9abaaaaaa	          movabs rcx, 0xaaaaaaaaaaaaaaab	      2683	fold.c	FUNCTION_59	WHILE_1	IF_31
0x400207b	        0x4c0fafe1	                           imul r12, rcx	      2683	fold.c	FUNCTION_59	WHILE_1	IF_31
0x400207f	          0x488b08	                    mov rcx, qword [rax]	      2686	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4002082	      0x488b7c2418	            mov rdi, qword [rsp + 0x18] 	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4002087	          0x4939f9	                             cmp r9, rdi	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x400208a	        0x4c0f4ccf	                           cmovl r9, rdi	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x400208e	      0x488b542420	            mov rdx, qword [rsp + 0x20] 	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4002093	          0x4829ca	                            sub rdx, rcx	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4002096	        0x488d7810	                   lea rdi, [rax + 0x10]	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x400209a	        0x4883ec08	                              sub rsp, 8	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x400209e	         0xfbe4028	           movsx eax, byte [rax + 0x28] 	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x40020a2	              0x50	                                push rax	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x40020a3	          0x4929c9	                             sub r9, rcx	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x40020a6	          0x4d89e8	                             mov r8, r13	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x40020a9	          0x4889d9	                            mov rcx, rbx	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x40020ac	        0x8b74243c	            mov esi, dword [rsp + 0x3c] 	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x40020b0	      0xe808f9ffff	          call sym.foldUpdateIEMSRecurse	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x40020b5	          0x4d63e4	                        movsxd r12, r12d	      2687	fold.c	FUNCTION_59	WHILE_1	IF_31
0x40020b8	        0x4b8d0c64	                  lea rcx, [r12 + r12*2]	      2687	fold.c	FUNCTION_59	WHILE_1	IF_31
0x40020bc	        0x48c1e104	                              shl rcx, 4	      2687	fold.c	FUNCTION_59	WHILE_1	IF_31
0x40020c0	        0x48034d10	             add rcx, qword [rbp + 0x10]	      2687	fold.c	FUNCTION_59	WHILE_1	IF_31
0x40020c4	      0x48894c2458	             mov qword [rsp + 0x58], rcx	      2687	fold.c	FUNCTION_59	WHILE_1	IF_31
0x40020c9	          0x488b11	                    mov rdx, qword [rcx]	      2688	fold.c	FUNCTION_59	WHILE_1	IF_31
0x40020cc	        0x48035308	                add rdx, qword [rbx + 8]	      2688	fold.c	FUNCTION_59	WHILE_1	IF_31
0x40020d0	      0x4889542430	             mov qword [rsp + 0x30], rdx	      2688	fold.c	FUNCTION_59	WHILE_1	IF_31
0x40020d5	        0x48895308	                mov qword [rbx + 8], rdx	      2688	fold.c	FUNCTION_59	WHILE_1	IF_31
0x40020d9	          0x488b11	                    mov rdx, qword [rcx]	      2689	fold.c	FUNCTION_59	WHILE_1	IF_31
0x40020dc	        0x48015318	            add qword [rbx + 0x18], rdx 	      2689	fold.c	FUNCTION_59	WHILE_1	IF_31
0x40020e0	          0x488b11	                    mov rdx, qword [rcx]	      2690	fold.c	FUNCTION_59	WHILE_1	IF_31
0x40020e3	        0x48295310	             sub qword [rbx + 0x10], rdx	      2690	fold.c	FUNCTION_59	WHILE_1	IF_31
0x40020e7	          0x480301	                    add rax, qword [rcx]	      2691	fold.c	FUNCTION_59	WHILE_1	IF_31
0x40020ea	      0x4889442428	             mov qword [rsp + 0x28], rax	      2691	fold.c	FUNCTION_59	WHILE_1	IF_31
0x40020ef	        0x4883c410	                           add rsp, 0x10	      2692	fold.c	FUNCTION_59	WHILE_1	IF_31
0x40020f3	            0xeb6d	                           jmp 0x4002162	      2692	fold.c	FUNCTION_59	WHILE_1	IF_31
0x40020f5	        0x4c8b6318	            mov r12, qword [rbx + 0x18] 	      2704	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x40020f9	        0x4c896308	                mov qword [rbx + 8], r12	      2704	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x40020fd	        0x4983c401	                              add r12, 1	      2705	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4002101	            0xeb39	                           jmp 0x400213c	      2706	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4002103	        0x488b4308	                mov rax, qword [rbx + 8]	      2709	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4002107	    0x488905000000	            mov qword [0x0400210e], rax 	      2709	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x400210e	          0x8b5320	            mov edx, dword [rbx + 0x20] 	      2710	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4002111	    0x891500000000	            mov dword [0x04002117], edx 	      2710	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4002117	        0x4883c001	                              add rax, 1	      2712	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_33
0x400211b	        0x48894308	                mov qword [rbx + 8], rax	      2712	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_33
0x400211f	          0x4939c6	                            cmp r14, rax	      2712	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_33
0x4002122	            0x7c22	                            jl 0x4002146	      2712	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_33
0x4002124	          0x8b4324	            mov eax, dword [rbx + 0x24] 	      2714	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4002127	          0x894320	             mov dword [rbx + 0x20], eax	      2714	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x400212a	          0x4889df	                            mov rdi, rbx	      2715	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	CALL_16
0x400212d	          0x41ffd5	                                call r13	      2715	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	CALL_16
0x4002130	        0x837b2000	               cmp dword [rbx + 0x20], 0	      2716	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_34
0x4002134	            0x7910	                           jns 0x4002146	      2716	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_34
0x4002136	        0x837b3014	           cmp dword [rbx + 0x30], 0x14 	      2716	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_34
0x400213a	            0x7e0a	                           jle 0x4002146	      2716	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_34
0x400213c	    0x8b0500000000	            mov eax, dword [0x04002142] 	      2706	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4002142	            0x85c0	                           test eax, eax	      2706	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4002144	            0x74bd	                            je 0x4002103	      2706	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4002146	    0x48c705000000	               mov qword [0x04002151], 0	      2719	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4002151	        0x488b4308	                mov rax, qword [rbx + 8]	      2720	fold.c	FUNCTION_59	WHILE_1	ELSE_12	IF_35
0x4002155	          0x4939c6	                            cmp r14, rax	      2720	fold.c	FUNCTION_59	WHILE_1	ELSE_12	IF_35
0x4002158	            0x7c16	                            jl 0x4002170	      2720	fold.c	FUNCTION_59	WHILE_1	ELSE_12	IF_35
0x400215a	        0x48894318	             mov qword [rbx + 0x18], rax	      2725	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x400215e	        0x4c896308	                mov qword [rbx + 8], r12	      2726	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4002162	    0x8b0500000000	            mov eax, dword [0x04002168] 	      2418	fold.c	FUNCTION_59	WHILE_1
0x4002168	            0x85c0	                           test eax, eax	      2418	fold.c	FUNCTION_59	WHILE_1
0x400216a	     0xf841bf9ffff	                            je 0x4001a8b	      2418	fold.c	FUNCTION_59	WHILE_1
0x4002170	      0x488b442448	            mov rax, qword [rsp + 0x48] 	      2730	fold.c	FUNCTION_59	IF_36
0x4002175	          0x4885c0	                           test rax, rax	      2730	fold.c	FUNCTION_59	IF_36
0x4002178	     0xf842b020000	                            je 0x40023a9	      2730	fold.c	FUNCTION_59	IF_36
0x400217e	          0x488b08	                    mov rcx, qword [rax]	      2740	fold.c	FUNCTION_59	IF_37
0x4002181	        0x488b5308	                mov rdx, qword [rbx + 8]	      2740	fold.c	FUNCTION_59	IF_37
0x4002185	          0x4829ca	                            sub rdx, rcx	      2740	fold.c	FUNCTION_59	IF_37
0x4002188	        0x48395008	                cmp qword [rax + 8], rdx	      2740	fold.c	FUNCTION_59	IF_37
0x400218c	            0x7d12	                           jge 0x40021a0	      2740	fold.c	FUNCTION_59	IF_37
0x400218e	        0x48895008	                mov qword [rax + 8], rdx	      2742	fold.c	FUNCTION_59	IF_37
0x4002192	        0xc6402902	                mov byte [rax + 0x29], 2	      2743	fold.c	FUNCTION_59	IF_37
0x4002196	    0xc70500000000	               mov dword [0x040021a0], 1	      2744	fold.c	FUNCTION_59	IF_37
0x40021a0	          0x4889ca	                            mov rdx, rcx	      2749	fold.c	FUNCTION_59	CALL_17
0x40021a3	          0x48f7d2	                                 not rdx	      2749	fold.c	FUNCTION_59	CALL_17
0x40021a6	        0x48035308	                add rdx, qword [rbx + 8]	      2749	fold.c	FUNCTION_59	CALL_17
0x40021aa	      0x488b742420	            mov rsi, qword [rsp + 0x20] 	      2749	fold.c	FUNCTION_59	CALL_17
0x40021af	          0x4829ce	                            sub rsi, rcx	      2749	fold.c	FUNCTION_59	CALL_17
0x40021b2	        0x488d7810	                   lea rdi, [rax + 0x10]	      2749	fold.c	FUNCTION_59	CALL_17
0x40021b6	      0xe853f6ffff	                     call sym.foldRemove	      2749	fold.c	FUNCTION_59	CALL_17
0x40021bb	        0x8b4c2410	            mov ecx, dword [rsp + 0x10] 	      2752	fold.c	FUNCTION_59	IF_38
0x40021bf	        0x394c2414	            cmp dword [rsp + 0x14], ecx 	      2752	fold.c	FUNCTION_59	IF_38
0x40021c3	     0xf8ea4000000	                           jle 0x400226d	      2752	fold.c	FUNCTION_59	IF_38
0x40021c9	      0x488b442448	            mov rax, qword [rsp + 0x48] 	      2755	fold.c	FUNCTION_59	IF_38	IF_39
0x40021ce	        0x488b7008	                mov rsi, qword [rax + 8]	      2755	fold.c	FUNCTION_59	IF_38	IF_39
0x40021d2	        0x488b5308	                mov rdx, qword [rbx + 8]	      2755	fold.c	FUNCTION_59	IF_38	IF_39
0x40021d6	          0x488b08	                    mov rcx, qword [rax]	      2755	fold.c	FUNCTION_59	IF_38	IF_39
0x40021d9	          0x4889d7	                            mov rdi, rdx	      2755	fold.c	FUNCTION_59	IF_38	IF_39
0x40021dc	          0x4829cf	                            sub rdi, rcx	      2755	fold.c	FUNCTION_59	IF_38	IF_39
0x40021df	          0x4839fe	                            cmp rsi, rdi	      2755	fold.c	FUNCTION_59	IF_38	IF_39
0x40021e2	     0xf8485000000	                            je 0x400226d	      2755	fold.c	FUNCTION_59	IF_38	IF_39
0x40021e8	      0x488d4c0eff	                lea rcx, [rsi + rcx - 1]	      2757	fold.c	FUNCTION_59	IF_38	IF_39	IF_40
0x40021ed	      0x483b4c2418	            cmp rcx, qword [rsp + 0x18] 	      2757	fold.c	FUNCTION_59	IF_38	IF_39	IF_40
0x40021f2	            0x7e6b	                           jle 0x400225f	      2757	fold.c	FUNCTION_59	IF_38	IF_39	IF_40
0x40021f4	    0x4981fd000000	                              cmp r13, 0	      2762	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x40021fb	        0x410f94c0	                                sete r8b	      2762	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x40021ff	    0x4981fd000000	                              cmp r13, 0	      2762	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4002206	        0x400f94c6	                                sete sil	      2762	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x400220a	          0x4108f0	                             or r8b, sil	      2762	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x400220d	            0x7509	                           jne 0x4002218	      2762	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x400220f	    0x4981fd000000	                              cmp r13, 0	      2762	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4002216	            0x750b	                           jne 0x4002223	      2762	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4002218	        0x48897808	                mov qword [rax + 8], rdi	      2767	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x400221c	      0x48894c2418	             mov qword [rsp + 0x18], rcx	      2766	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4002221	            0xeb40	                           jmp 0x4002263	      2767	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4002223	        0x482b4510	             sub rax, qword [rbp + 0x10]	      2773	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4002227	        0x48c1f804	                              sar rax, 4	      2773	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x400222b	    0x49bcabaaaaaa	          movabs r12, 0xaaaaaaaaaaaaaaab	      2773	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4002235	        0x4c0fafe0	                           imul r12, rax	      2773	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4002239	      0x488b4c2418	            mov rcx, qword [rsp + 0x18] 	      2774	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13	CALL_18
0x400223e	          0x4489e6	                           mov esi, r12d	      2774	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13	CALL_18
0x4002241	          0x4889ef	                            mov rdi, rbp	      2774	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13	CALL_18
0x4002244	      0xe858e4ffff	                      call sym.foldSplit	      2774	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13	CALL_18
0x4002249	          0x4963c4	                        movsxd rax, r12d	      2775	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x400224c	        0x488d0440	                  lea rax, [rax + rax*2]	      2775	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4002250	        0x48c1e004	                              shl rax, 4	      2775	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4002254	        0x48034510	             add rax, qword [rbp + 0x10]	      2775	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4002258	      0x4889442448	             mov qword [rsp + 0x48], rax	      2775	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x400225d	            0xeb04	                           jmp 0x4002263	      2775	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x400225f	        0x48897808	                mov qword [rax + 8], rdi	      2779	fold.c	FUNCTION_59	IF_38	IF_39	ELSE_14
0x4002263	    0xc70500000000	               mov dword [0x0400226d], 1	      2780	fold.c	FUNCTION_59	IF_38	IF_39	ELSE_14
0x400226d	      0x488b7c2448	            mov rdi, qword [rsp + 0x48] 	      2787	fold.c	FUNCTION_59	ELSE_14	FOR_1
0x4002272	        0x488d7730	                   lea rsi, [rdi + 0x30]	      2787	fold.c	FUNCTION_59	ELSE_14	FOR_1
0x4002276	      0x4889742450	             mov qword [rsp + 0x50], rsi	      2787	fold.c	FUNCTION_59	ELSE_14	FOR_1
0x400227b	        0x488b5510	            mov rdx, qword [rbp + 0x10] 	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x400227f	        0x48634500	                 movsxd rax, dword [rbp]	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4002283	        0x488d0440	                  lea rax, [rax + rax*2]	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4002287	        0x48c1e004	                              shl rax, 4	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x400228b	          0x4801d0	                            add rax, rdx	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x400228e	          0x4839c6	                            cmp rsi, rax	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4002291	     0xf83f9000000	                           jae 0x4002390	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4002297	        0x4c8b4730	              mov r8, qword [rdi + 0x30]	      2789	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x400229b	        0x488b4308	                mov rax, qword [rbx + 8]	      2789	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x400229f	          0x4939c0	                             cmp r8, rax	      2789	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x40022a2	     0xf8fe8000000	                            jg 0x4002390	      2789	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x40022a8	          0x4c89c1	                             mov rcx, r8	      2791	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43
0x40022ab	        0x48034f38	             add rcx, qword [rdi + 0x38]	      2791	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43
0x40022af	          0x4839c8	                            cmp rax, rcx	      2791	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43
0x40022b2	            0x7c2c	                            jl 0x40022e0	      2791	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43
0x40022b4	    0x49bcabaaaaaa	          movabs r12, 0xaaaaaaaaaaaaaaab	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x40022be	      0xe981000000	                           jmp 0x4002344	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x40022c3	        0x4c8b4730	              mov r8, qword [rdi + 0x30]	      2789	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x40022c7	        0x488b4308	                mov rax, qword [rbx + 8]	      2789	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x40022cb	          0x4939c0	                             cmp r8, rax	      2789	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x40022ce	     0xf8fbc000000	                            jg 0x4002390	      2789	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x40022d4	          0x4c89c1	                             mov rcx, r8	      2791	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43
0x40022d7	        0x48034f38	             add rcx, qword [rdi + 0x38]	      2791	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43
0x40022db	          0x4839c8	                            cmp rax, rcx	      2791	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43
0x40022de	            0x7d64	                           jge 0x4002344	      2791	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43
0x40022e0	          0x4939c0	                             cmp r8, rax	      2793	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x40022e3	            0x7d41	                           jge 0x4002326	      2793	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x40022e5	          0x4889c2	                            mov rdx, rax	      2796	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44	CALL_19
0x40022e8	          0x4c29c2	                             sub rdx, r8	      2796	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44	CALL_19
0x40022eb	        0x4883ea01	                              sub rdx, 1	      2796	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44	CALL_19
0x40022ef	        0x4883c740	                           add rdi, 0x40	      2796	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44	CALL_19
0x40022f3	          0x4929c0	                             sub r8, rax	      2796	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44	CALL_19
0x40022f6	      0xb9ffffff7f	                     mov ecx, 0x7fffffff	      2796	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44	CALL_19
0x40022fb	      0xbe00000000	                              mov esi, 0	      2796	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44	CALL_19
0x4002300	      0xe876f1ffff	          call sym.foldMarkAdjustRecurse	      2796	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44	CALL_19
0x4002305	      0x488b442450	            mov rax, qword [rsp + 0x50] 	      2799	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x400230a	        0x488b5308	                mov rdx, qword [rbx + 8]	      2799	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x400230e	          0x482b10	                    sub rdx, qword [rax]	      2799	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4002311	        0x48295008	                sub qword [rax + 8], rdx	      2799	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4002315	        0x488b5308	                mov rdx, qword [rbx + 8]	      2800	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4002319	          0x488910	                    mov qword [rax], rdx	      2800	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x400231c	    0xc70500000000	               mov dword [0x04002326], 1	      2801	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4002326	        0x8b4c2410	            mov ecx, dword [rsp + 0x10] 	      2804	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45
0x400232a	        0x394c2414	            cmp dword [rsp + 0x14], ecx 	      2804	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45
0x400232e	            0x7f60	                            jg 0x4002390	      2804	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45
0x4002330	      0x488b542450	            mov rdx, qword [rsp + 0x50] 	      2807	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45	CALL_20
0x4002335	          0x4889ee	                            mov rsi, rbp	      2807	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45	CALL_20
0x4002338	      0x488b7c2448	            mov rdi, qword [rsp + 0x48] 	      2807	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45	CALL_20
0x400233d	      0xe868f3ffff	                      call sym.foldMerge	      2807	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45	CALL_20
0x4002342	            0xeb4c	                           jmp 0x4002390	      2807	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45	CALL_20
0x4002344	    0xc70500000000	               mov dword [0x0400234e], 1	      2811	fold.c	FUNCTION_59	ELSE_14	FOR_1
0x400234e	          0x4829d6	                            sub rsi, rdx	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x4002351	        0x48c1fe04	                              sar rsi, 4	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x4002355	        0x490faff4	                           imul rsi, r12	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x4002359	      0xba01000000	                              mov edx, 1	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x400235e	          0x4889ef	                            mov rdi, rbp	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x4002361	      0xe8e6efffff	                call sym.deleteFoldEntry	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x4002366	      0x488b7c2448	            mov rdi, qword [rsp + 0x48] 	      2787	fold.c	FUNCTION_59	ELSE_14	FOR_1
0x400236b	        0x488d7730	                   lea rsi, [rdi + 0x30]	      2787	fold.c	FUNCTION_59	ELSE_14	FOR_1
0x400236f	      0x4889742450	             mov qword [rsp + 0x50], rsi	      2787	fold.c	FUNCTION_59	ELSE_14	FOR_1
0x4002374	        0x488b5510	            mov rdx, qword [rbp + 0x10] 	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4002378	        0x48634500	                 movsxd rax, dword [rbp]	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x400237c	        0x488d0440	                  lea rax, [rax + rax*2]	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4002380	        0x48c1e004	                              shl rax, 4	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4002384	          0x4801d0	                            add rax, rdx	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4002387	          0x4839c6	                            cmp rsi, rax	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x400238a	     0xf8233ffffff	                            jb 0x40022c3	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4002390	        0x488b4308	                mov rax, qword [rbx + 8]	      2817	fold.c	FUNCTION_59	IF_46
0x4002394	        0x4883e801	                              sub rax, 1	      2817	fold.c	FUNCTION_59	IF_46
0x4002398	      0x488b4c2418	            mov rcx, qword [rsp + 0x18] 	      2817	fold.c	FUNCTION_59	IF_46
0x400239d	          0x4839c1	                            cmp rcx, rax	      2817	fold.c	FUNCTION_59	IF_46
0x40023a0	        0x480f4dc1	                         cmovge rax, rcx	      2817	fold.c	FUNCTION_59	IF_46
0x40023a4	      0x4889442418	             mov qword [rsp + 0x18], rax	      2817	fold.c	FUNCTION_59	IF_46
0x40023a9	      0x488b442418	            mov rax, qword [rsp + 0x18] 	      2821	fold.c	FUNCTION_59
0x40023ae	      0x488b4c2458	            mov rcx, qword [rsp + 0x58] 	      2821	fold.c	FUNCTION_59
0x40023b3	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      2821	fold.c	FUNCTION_59
0x40023bc	            0x742f	                            je 0x40023ed	      2821	fold.c	FUNCTION_59
0x40023be	            0xeb28	                           jmp 0x40023e8	      2821	fold.c	FUNCTION_59
0x40023c0	    0x48837c244800	               cmp qword [rsp + 0x48], 0	      2475	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x40023c6	     0xf8414f8ffff	                            je 0x4001be0	      2475	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x40023cc	    0xc74424280100	               mov dword [rsp + 0x28], 1	      2467	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x40023d4	      0xe952fcffff	                           jmp 0x400202b	      2467	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x40023d9	        0x4c3b7308	                cmp r14, qword [rbx + 8]	      2657	fold.c	FUNCTION_59	WHILE_1	IF_30
0x40023dd	     0xf8d12fdffff	                           jge 0x40020f5	      2657	fold.c	FUNCTION_59	WHILE_1	IF_30
0x40023e3	      0xe988fdffff	                           jmp 0x4002170	      2657	fold.c	FUNCTION_59	WHILE_1	IF_30
0x40023e8	      0xe800000000	                          call 0x40023ed	      2821	fold.c	FUNCTION_59
0x40023ed	        0x4883c468	                           add rsp, 0x68	      2821	fold.c	FUNCTION_59
0x40023f1	              0x5b	                                 pop rbx	      2821	fold.c	FUNCTION_59
0x40023f2	              0x5d	                                 pop rbp	      2821	fold.c	FUNCTION_59
0x40023f3	            0x415c	                                 pop r12	      2821	fold.c	FUNCTION_59
0x40023f5	            0x415d	                                 pop r13	      2821	fold.c	FUNCTION_59
0x40023f7	            0x415e	                                 pop r14	      2821	fold.c	FUNCTION_59
0x40023f9	            0x415f	                                 pop r15	      2821	fold.c	FUNCTION_59
0x40023fb	              0xc3	                                     ret	      2821	fold.c	FUNCTION_59
foldAddMarker	DO,0:ELSE,1:FOR,0:SWITCH,0:IF,3:CALL,13:WHILE,0:functions,0	97
0x40004b0	            0x4157	                                push r15	      1756	fold.c	FUNCTION_53
0x40004b2	            0x4156	                                push r14	      1756	fold.c	FUNCTION_53
0x40004b4	            0x4155	                                push r13	      1756	fold.c	FUNCTION_53
0x40004b6	            0x4154	                                push r12	      1756	fold.c	FUNCTION_53
0x40004b8	              0x55	                                push rbp	      1756	fold.c	FUNCTION_53
0x40004b9	              0x53	                                push rbx	      1756	fold.c	FUNCTION_53
0x40004ba	        0x4883ec28	                           sub rsp, 0x28	      1756	fold.c	FUNCTION_53
0x40004be	          0x4889fd	                            mov rbp, rdi	      1756	fold.c	FUNCTION_53
0x40004c1	      0x4889742408	                mov qword [rsp + 8], rsi	      1756	fold.c	FUNCTION_53
0x40004c6	          0x4189d6	                           mov r14d, edx	      1756	fold.c	FUNCTION_53
0x40004c9	    0x64488b042528	                mov rax, qword fs:[0x28]	      1756	fold.c	FUNCTION_53
0x40004d2	      0x4889442418	             mov qword [rsp + 0x18], rax	      1756	fold.c	FUNCTION_53
0x40004d7	            0x31c0	                            xor eax, eax	      1756	fold.c	FUNCTION_53
0x40004d9	    0x488b05000000	            mov rax, qword [0x040004e0] 	      1757	fold.c	FUNCTION_53
0x40004e0	    0x4c8ba8501400	          mov r13, qword [rax + 0x1450] 	      1757	fold.c	FUNCTION_53
0x40004e7	      0xbe00000000	                              mov esi, 0	      1761	fold.c	FUNCTION_53	CALL_1
0x40004ec	          0x4c89ef	                            mov rdi, r13	      1761	fold.c	FUNCTION_53	CALL_1
0x40004ef	      0xe800000000	                          call 0x40004f4	      1761	fold.c	FUNCTION_53	CALL_1
0x40004f4	        0x48890424	                    mov qword [rsp], rax	      1761	fold.c	FUNCTION_53	CALL_1
0x40004f8	    0xc74424140000	               mov dword [rsp + 0x14], 0	      1762	fold.c	FUNCTION_53
0x4000500	          0x4889ef	                            mov rdi, rbp	      1765	fold.c	FUNCTION_53	CALL_2
0x4000503	      0xe800000000	                          call 0x4000508	      1765	fold.c	FUNCTION_53	CALL_2
0x4000508	          0x4989c4	                            mov r12, rax	      1765	fold.c	FUNCTION_53	CALL_2
0x400050b	      0xb800000000	                              mov eax, 0	      1766	fold.c	FUNCTION_53	CALL_3
0x4000510	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	      1766	fold.c	FUNCTION_53	CALL_3
0x4000517	          0x4c89e7	                            mov rdi, r12	      1766	fold.c	FUNCTION_53	CALL_3
0x400051a	            0xf2ae	              repne scasb al, byte [rdi]	      1766	fold.c	FUNCTION_53	CALL_3
0x400051c	          0x48f7d1	                                 not rcx	      1766	fold.c	FUNCTION_53	CALL_3
0x400051f	        0x488d59ff	                      lea rbx, [rcx - 1]	      1766	fold.c	FUNCTION_53	CALL_3
0x4000523	        0x488d7501	                      lea rsi, [rbp + 1]	      1768	fold.c	FUNCTION_53	IF_1	CALL_4
0x4000527	        0x488d7dff	                      lea rdi, [rbp - 1]	      1768	fold.c	FUNCTION_53	IF_1	CALL_4
0x400052b	      0xe800000000	                          call 0x4000530	      1768	fold.c	FUNCTION_53	IF_1	CALL_4
0x4000530	          0x83f801	                              cmp eax, 1	      1768	fold.c	FUNCTION_53	IF_1	CALL_4
0x4000533	     0xf85c6000000	                           jne 0x40005ff	      1768	fold.c	FUNCTION_53	IF_1	CALL_4
0x4000539	      0x488d4c2414	                   lea rcx, [rsp + 0x14]	      1772	fold.c	FUNCTION_53	IF_1	CALL_5
0x400053e	      0xba00000000	                              mov edx, 0	      1772	fold.c	FUNCTION_53	IF_1	CALL_5
0x4000543	      0xbe00000000	                              mov esi, 0	      1772	fold.c	FUNCTION_53	IF_1	CALL_5
0x4000548	          0x4c89e7	                            mov rdi, r12	      1772	fold.c	FUNCTION_53	IF_1	CALL_5
0x400054b	      0xe800000000	                          call 0x4000550	      1772	fold.c	FUNCTION_53	IF_1	CALL_5
0x4000550	      0xb800000000	                              mov eax, 0	      1774	fold.c	FUNCTION_53	IF_1	CALL_7
0x4000555	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	      1774	fold.c	FUNCTION_53	IF_1	CALL_7
0x400055c	          0x4c89ef	                            mov rdi, r13	      1774	fold.c	FUNCTION_53	IF_1	CALL_7
0x400055f	            0xf2ae	              repne scasb al, byte [rdi]	      1774	fold.c	FUNCTION_53	IF_1	CALL_7
0x4000561	          0x48f7d1	                                 not rcx	      1774	fold.c	FUNCTION_53	IF_1	CALL_7
0x4000564	      0x418d441e01	                lea eax, [r14 + rbx + 1]	      1774	fold.c	FUNCTION_53	IF_1	CALL_7
0x4000569	        0x8d7c08ff	                lea edi, [rax + rcx - 1]	      1774	fold.c	FUNCTION_53	IF_1	CALL_7
0x400056d	      0xe800000000	                          call 0x4000572	      1774	fold.c	FUNCTION_53	IF_1	CALL_7
0x4000572	          0x4989c7	                            mov r15, rax	      1774	fold.c	FUNCTION_53	IF_1	CALL_7
0x4000575	          0x4885c0	                           test rax, rax	      1775	fold.c	FUNCTION_53	IF_1	IF_2
0x4000578	     0xf8481000000	                            je 0x40005ff	      1775	fold.c	FUNCTION_53	IF_1	IF_2
0x400057e	          0x4c89e6	                            mov rsi, r12	       110	string3.h	FUNCTION_83	CALL_3
0x4000581	          0x4889c7	                            mov rdi, rax	       110	string3.h	FUNCTION_83	CALL_3
0x4000584	      0xe800000000	                          call 0x4000589	       110	string3.h	FUNCTION_83	CALL_3
0x4000589	      0x48833c2400	                      cmp qword [rsp], 0	      1779	fold.c	FUNCTION_53	IF_1	IF_3
0x400058e	            0x7407	                            je 0x4000597	      1779	fold.c	FUNCTION_53	IF_1	IF_3
0x4000590	      0x837c241400	               cmp dword [rsp + 0x14], 0	      1779	fold.c	FUNCTION_53	IF_1	IF_3
0x4000595	            0x7415	                            je 0x40005ac	      1779	fold.c	FUNCTION_53	IF_1	IF_3
0x4000597	          0x4963d6	                        movsxd rdx, r14d	      1780	fold.c	FUNCTION_53	IF_1	CALL_9
0x400059a	          0x4863fb	                         movsxd rdi, ebx	      1780	fold.c	FUNCTION_53	IF_1	CALL_9
0x400059d	          0x4c01ff	                            add rdi, r15	      1780	fold.c	FUNCTION_53	IF_1	CALL_9
0x40005a0	      0x488b742408	                mov rsi, qword [rsp + 8]	      1780	fold.c	FUNCTION_53	IF_1	CALL_9
0x40005a5	      0xe800000000	                          call 0x40005aa	      1780	fold.c	FUNCTION_53	IF_1	CALL_9
0x40005aa	            0xeb43	                           jmp 0x40005ef	      1780	fold.c	FUNCTION_53	IF_1	CALL_9
0x40005ac	          0x4863db	                         movsxd rbx, ebx	      1783	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_10
0x40005af	        0x498d3c1f	                    lea rdi, [r15 + rbx]	       110	string3.h	FUNCTION_83	CALL_3
0x40005b3	          0x4c89ee	                            mov rsi, r13	       110	string3.h	FUNCTION_83	CALL_3
0x40005b6	      0xe800000000	                          call 0x40005bb	       110	string3.h	FUNCTION_83	CALL_3
0x40005bb	          0x4d63f6	                        movsxd r14, r14d	      1784	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_11
0x40005be	        0x4c8b2424	                    mov r12, qword [rsp]	      1784	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_11
0x40005c2	          0x4c89e0	                            mov rax, r12	      1784	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_11
0x40005c5	          0x4c29e8	                            sub rax, r13	      1784	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_11
0x40005c8	          0x4801c3	                            add rbx, rax	      1784	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_11
0x40005cb	        0x498d3c1f	                    lea rdi, [r15 + rbx]	       126	string3.h	FUNCTION_85	CALL_3
0x40005cf	          0x4c89f2	                            mov rdx, r14	       126	string3.h	FUNCTION_85	CALL_3
0x40005d2	      0x488b742408	                mov rsi, qword [rsp + 8]	       126	string3.h	FUNCTION_85	CALL_3
0x40005d7	      0xe800000000	                          call 0x40005dc	       126	string3.h	FUNCTION_85	CALL_3
0x40005dc	          0x4c89e6	                            mov rsi, r12	       110	string3.h	FUNCTION_83	CALL_3
0x40005df	        0x4883c602	                              add rsi, 2	       110	string3.h	FUNCTION_83	CALL_3
0x40005e3	          0x4c01f3	                            add rbx, r14	       110	string3.h	FUNCTION_83	CALL_3
0x40005e6	        0x498d3c1f	                    lea rdi, [r15 + rbx]	       110	string3.h	FUNCTION_83	CALL_3
0x40005ea	      0xe800000000	                          call 0x40005ef	       110	string3.h	FUNCTION_83	CALL_3
0x40005ef	      0xba00000000	                              mov edx, 0	      1788	fold.c	FUNCTION_53	IF_1	CALL_13
0x40005f4	          0x4c89fe	                            mov rsi, r15	      1788	fold.c	FUNCTION_53	IF_1	CALL_13
0x40005f7	          0x4889ef	                            mov rdi, rbp	      1788	fold.c	FUNCTION_53	IF_1	CALL_13
0x40005fa	      0xe800000000	                          call 0x40005ff	      1788	fold.c	FUNCTION_53	IF_1	CALL_13
0x40005ff	      0x488b442418	            mov rax, qword [rsp + 0x18] 	      1790	fold.c	FUNCTION_53
0x4000604	    0x644833042528	                xor rax, qword fs:[0x28]	      1790	fold.c	FUNCTION_53
0x400060d	            0x7405	                            je 0x4000614	      1790	fold.c	FUNCTION_53
0x400060f	      0xe800000000	                          call 0x4000614	      1790	fold.c	FUNCTION_53
0x4000614	        0x4883c428	                           add rsp, 0x28	      1790	fold.c	FUNCTION_53
0x4000618	              0x5b	                                 pop rbx	      1790	fold.c	FUNCTION_53
0x4000619	              0x5d	                                 pop rbp	      1790	fold.c	FUNCTION_53
0x400061a	            0x415c	                                 pop r12	      1790	fold.c	FUNCTION_53
0x400061c	            0x415d	                                 pop r13	      1790	fold.c	FUNCTION_53
0x400061e	            0x415e	                                 pop r14	      1790	fold.c	FUNCTION_53
0x4000620	            0x415f	                                 pop r15	      1790	fold.c	FUNCTION_53
0x4000622	              0xc3	                                     ret	      1790	fold.c	FUNCTION_53
foldInsert	DO,0:ELSE,0:FOR,0:SWITCH,0:IF,2:CALL,3:WHILE,0:functions,0	40
0x4000623	            0x4155	                                push r13	      2830	fold.c	FUNCTION_60
0x4000625	            0x4154	                                push r12	      2830	fold.c	FUNCTION_60
0x4000627	              0x55	                                push rbp	      2830	fold.c	FUNCTION_60
0x4000628	              0x53	                                push rbx	      2830	fold.c	FUNCTION_60
0x4000629	        0x4883ec08	                              sub rsp, 8	      2830	fold.c	FUNCTION_60
0x400062d	          0x4889fd	                            mov rbp, rdi	      2830	fold.c	FUNCTION_60
0x4000630	          0x4189f5	                           mov r13d, esi	      2830	fold.c	FUNCTION_60
0x4000633	      0xbe01000000	                              mov esi, 1	      2833	fold.c	FUNCTION_60	IF_1	CALL_1
0x4000638	      0xe800000000	                          call 0x400063d	      2833	fold.c	FUNCTION_60	IF_1	CALL_1
0x400063d	      0xbb00000000	                              mov ebx, 0	      2834	fold.c	FUNCTION_60	IF_1
0x4000642	          0x83f801	                              cmp eax, 1	      2833	fold.c	FUNCTION_60	IF_1	CALL_1
0x4000645	            0x754d	                           jne 0x4000694	      2833	fold.c	FUNCTION_60	IF_1	CALL_1
0x4000647	            0x89c3	                            mov ebx, eax	      2833	fold.c	FUNCTION_60	IF_1	CALL_1
0x4000649	          0x4963c5	                        movsxd rax, r13d	      2835	fold.c	FUNCTION_60
0x400064c	        0x4c8d2440	                  lea r12, [rax + rax*2]	      2835	fold.c	FUNCTION_60
0x4000650	        0x49c1e404	                              shl r12, 4	      2835	fold.c	FUNCTION_60
0x4000654	        0x4c036510	             add r12, qword [rbp + 0x10]	      2835	fold.c	FUNCTION_60
0x4000658	          0x8b4500	                    mov eax, dword [rbp]	      2836	fold.c	FUNCTION_60	IF_2
0x400065b	          0x4139c5	                           cmp r13d, eax	      2836	fold.c	FUNCTION_60	IF_2
0x400065e	            0x7d1a	                           jge 0x400067a	      2836	fold.c	FUNCTION_60	IF_2
0x4000660	          0x4429e8	                           sub eax, r13d	        59	string3.h	FUNCTION_78	CALL_3
0x4000663	            0x4898	                                    cdqe	        59	string3.h	FUNCTION_78	CALL_3
0x4000665	        0x488d1440	                  lea rdx, [rax + rax*2]	        59	string3.h	FUNCTION_78	CALL_3
0x4000669	        0x48c1e204	                              shl rdx, 4	        59	string3.h	FUNCTION_78	CALL_3
0x400066d	      0x498d7c2430	                   lea rdi, [r12 + 0x30]	        59	string3.h	FUNCTION_78	CALL_3
0x4000672	          0x4c89e6	                            mov rsi, r12	        59	string3.h	FUNCTION_78	CALL_3
0x4000675	      0xe800000000	                          call 0x400067a	        59	string3.h	FUNCTION_78	CALL_3
0x400067a	        0x83450001	                      add dword [rbp], 1	      2838	fold.c	FUNCTION_60
0x400067e	      0x498d7c2410	                   lea rdi, [r12 + 0x10]	      2839	fold.c	FUNCTION_60	CALL_3
0x4000683	      0xba0a000000	                            mov edx, 0xa	      2839	fold.c	FUNCTION_60	CALL_3
0x4000688	      0xbe30000000	                           mov esi, 0x30	      2839	fold.c	FUNCTION_60	CALL_3
0x400068d	      0xe800000000	                          call 0x4000692	      2839	fold.c	FUNCTION_60	CALL_3
0x4000692	            0xeb00	                           jmp 0x4000694	      2840	fold.c	FUNCTION_60
0x4000694	            0x89d8	                            mov eax, ebx	      2841	fold.c	FUNCTION_60
0x4000696	        0x4883c408	                              add rsp, 8	      2841	fold.c	FUNCTION_60
0x400069a	              0x5b	                                 pop rbx	      2841	fold.c	FUNCTION_60
0x400069b	              0x5d	                                 pop rbp	      2841	fold.c	FUNCTION_60
0x400069c	            0x415c	                                 pop r12	      2841	fold.c	FUNCTION_60
0x400069e	            0x415d	                                 pop r13	      2841	fold.c	FUNCTION_60
0x40006a0	              0xc3	                                     ret	      2841	fold.c	FUNCTION_60
find_wl_entry	DO,0:ELSE,0:FOR,1:SWITCH,0:IF,3:CALL,0:WHILE,0:functions,0	22
0x40011f4	    0x448b87f80000	            mov r8d, dword [rdi + 0xf8] 	      1017	fold.c	FUNCTION_32	FOR_1
0x40011fb	          0x4585c0	                           test r8d, r8d	      1017	fold.c	FUNCTION_32	FOR_1
0x40011fe	            0x7e33	                           jle 0x4001233	      1017	fold.c	FUNCTION_32	FOR_1
0x4001200	    0x488b97000100	           mov rdx, qword [rdi + 0x100] 	      1017	fold.c	FUNCTION_32	FOR_1
0x4001207	        0x4883c20a	                            add rdx, 0xa	      1017	fold.c	FUNCTION_32	FOR_1
0x400120b	      0xb800000000	                              mov eax, 0	      1018	fold.c	FUNCTION_32	FOR_1	IF_1
0x4001210	          0x803a00	                       cmp byte [rdx], 0	      1018	fold.c	FUNCTION_32	FOR_1	IF_1
0x4001213	            0x740c	                            je 0x4001221	      1018	fold.c	FUNCTION_32	FOR_1	IF_1
0x4001215	        0x483972f6	              cmp qword [rdx - 0xa], rsi	      1020	fold.c	FUNCTION_32	FOR_1	IF_1	IF_2
0x4001219	            0x7f1e	                            jg 0x4001239	      1020	fold.c	FUNCTION_32	FOR_1	IF_1	IF_2
0x400121b	        0x483b7206	                cmp rsi, qword [rdx + 6]	      1022	fold.c	FUNCTION_32	FOR_1	IF_1	IF_3
0x400121f	            0x7e1d	                           jle 0x400123e	      1022	fold.c	FUNCTION_32	FOR_1	IF_1	IF_3
0x4001221	          0x83c001	                              add eax, 1	      1017	fold.c	FUNCTION_32	FOR_1
0x4001224	        0x4883c218	                           add rdx, 0x18	      1017	fold.c	FUNCTION_32	FOR_1
0x4001228	          0x4439c0	                            cmp eax, r8d	      1017	fold.c	FUNCTION_32	FOR_1
0x400122b	            0x75e3	                           jne 0x4001210	      1017	fold.c	FUNCTION_32	FOR_1
0x400122d	      0xb8ffffffff	                     mov eax, 0xffffffff	      1025	fold.c	FUNCTION_32
0x4001232	              0xc3	                                     ret	      1025	fold.c	FUNCTION_32
0x4001233	      0xb8ffffffff	                     mov eax, 0xffffffff	      1025	fold.c	FUNCTION_32
0x4001238	              0xc3	                                     ret	      1025	fold.c	FUNCTION_32
0x4001239	      0xb8ffffffff	                     mov eax, 0xffffffff	      1021	fold.c	FUNCTION_32	FOR_1	IF_1	IF_2
0x400123e	            0xf3c3	                                     ret	      1026	fold.c	FUNCTION_32
newFoldLevelWin	DO,0:ELSE,0:FOR,1:SWITCH,0:IF,1:CALL,2:WHILE,0:functions,0	21
0x400337c	              0x53	                                push rbx	       490	fold.c	FUNCTION_21
0x400337d	          0x4889fb	                            mov rbx, rdi	       490	fold.c	FUNCTION_21
0x4003380	      0xe8fff5ffff	                    call sym.checkupdate	       494	fold.c	FUNCTION_21	CALL_1
0x4003385	    0x80bb20010000	               cmp byte [rbx + 0x120], 0	       495	fold.c	FUNCTION_21	IF_1
0x400338c	            0x7437	                            je 0x40033c5	       495	fold.c	FUNCTION_21	IF_1
0x400338e	    0x488b8b180100	           mov rcx, qword [rbx + 0x118] 	       500	fold.c	FUNCTION_21	IF_1
0x4003395	    0x83bb08010000	              cmp dword [rbx + 0x108], 0	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x400339c	            0x7e20	                           jle 0x40033be	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x400339e	      0xb800000000	                              mov eax, 0	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x40033a3	          0x4863d0	                         movsxd rdx, eax	       502	fold.c	FUNCTION_21	IF_1	FOR_1
0x40033a6	        0x488d1452	                  lea rdx, [rdx + rdx*2]	       502	fold.c	FUNCTION_21	IF_1	FOR_1
0x40033aa	        0x48c1e204	                              shl rdx, 4	       502	fold.c	FUNCTION_21	IF_1	FOR_1
0x40033ae	      0xc644112802	          mov byte [rcx + rdx + 0x28], 2	       502	fold.c	FUNCTION_21	IF_1	FOR_1
0x40033b3	          0x83c001	                              add eax, 1	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x40033b6	    0x398308010000	           cmp dword [rbx + 0x108], eax 	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x40033bc	            0x7fe5	                            jg 0x40033a3	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x40033be	    0xc68320010000	               mov byte [rbx + 0x120], 0	       503	fold.c	FUNCTION_21	IF_1
0x40033c5	          0x4889df	                            mov rdi, rbx	       505	fold.c	FUNCTION_21	CALL_2
0x40033c8	      0xe800000000	                          call 0x40033cd	       505	fold.c	FUNCTION_21	CALL_2
0x40033cd	              0x5b	                                 pop rbx	       506	fold.c	FUNCTION_21
0x40033ce	              0xc3	                                     ret	       506	fold.c	FUNCTION_21
foldMerge	DO,0:ELSE,0:FOR,1:SWITCH,0:IF,2:CALL,5:WHILE,0:functions,0	93
0x40016aa	            0x4156	                                push r14	      3165	fold.c	FUNCTION_66
0x40016ac	            0x4155	                                push r13	      3165	fold.c	FUNCTION_66
0x40016ae	            0x4154	                                push r12	      3165	fold.c	FUNCTION_66
0x40016b0	              0x55	                                push rbp	      3165	fold.c	FUNCTION_66
0x40016b1	              0x53	                                push rbx	      3165	fold.c	FUNCTION_66
0x40016b2	        0x4883ec20	                           sub rsp, 0x20	      3165	fold.c	FUNCTION_66
0x40016b6	          0x4889fb	                            mov rbx, rdi	      3165	fold.c	FUNCTION_66
0x40016b9	          0x4989f4	                            mov r12, rsi	      3165	fold.c	FUNCTION_66
0x40016bc	          0x4889d5	                            mov rbp, rdx	      3165	fold.c	FUNCTION_66
0x40016bf	    0x64488b042528	                mov rax, qword fs:[0x28]	      3165	fold.c	FUNCTION_66
0x40016c8	      0x4889442418	             mov qword [rsp + 0x18], rax	      3165	fold.c	FUNCTION_66
0x40016cd	            0x31c0	                            xor eax, eax	      3165	fold.c	FUNCTION_66
0x40016cf	        0x4c8d6f10	                   lea r13, [rdi + 0x10]	      3169	fold.c	FUNCTION_66
0x40016d3	        0x488b4708	                mov rax, qword [rdi + 8]	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x40016d7	        0x488d70ff	                      lea rsi, [rax - 1]	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x40016db	      0x488d542408	                      lea rdx, [rsp + 8]	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x40016e0	          0x4c89ef	                            mov rdi, r13	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x40016e3	      0xe8f8e9ffff	                       call sym.foldFind	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x40016e8	            0x85c0	                           test eax, eax	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x40016ea	            0x742c	                            je 0x4001718	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x40016ec	        0x4c8d7510	                   lea r14, [rbp + 0x10]	      3170	fold.c	FUNCTION_66
0x40016f0	      0x488d542410	                   lea rdx, [rsp + 0x10]	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x40016f5	      0xbe00000000	                              mov esi, 0	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x40016fa	          0x4c89f7	                            mov rdi, r14	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x40016fd	      0xe8dee9ffff	                       call sym.foldFind	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x4001702	            0x85c0	                           test eax, eax	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x4001704	            0x7412	                            je 0x4001718	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x4001706	      0x488b542410	            mov rdx, qword [rsp + 0x10] 	      3175	fold.c	FUNCTION_66	CALL_3
0x400170b	          0x4c89f6	                            mov rsi, r14	      3175	fold.c	FUNCTION_66	CALL_3
0x400170e	      0x488b7c2408	                mov rdi, qword [rsp + 8]	      3175	fold.c	FUNCTION_66	CALL_3
0x4001713	      0xe892ffffff	                      call sym.foldMerge	      3175	fold.c	FUNCTION_66	CALL_3
0x4001718	          0x8b7510	            mov esi, dword [rbp + 0x10] 	      3178	fold.c	FUNCTION_66	IF_2	CALL_4
0x400171b	            0x85f6	                           test esi, esi	      3178	fold.c	FUNCTION_66	IF_2	CALL_4
0x400171d	     0xf8e93000000	                           jle 0x40017b6	      3178	fold.c	FUNCTION_66	IF_2	CALL_4
0x4001723	          0x4c89ef	                            mov rdi, r13	      3178	fold.c	FUNCTION_66	IF_2	CALL_4
0x4001726	      0xe800000000	                          call 0x400172b	      3178	fold.c	FUNCTION_66	IF_2	CALL_4
0x400172b	          0x83f801	                              cmp eax, 1	      3178	fold.c	FUNCTION_66	IF_2	CALL_4
0x400172e	     0xf8582000000	                           jne 0x40017b6	      3178	fold.c	FUNCTION_66	IF_2	CALL_4
0x4001734	        0x837d1000	               cmp dword [rbp + 0x10], 0	      3180	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001738	            0x7e75	                           jle 0x40017af	      3180	fold.c	FUNCTION_66	IF_2	FOR_1
0x400173a	      0xb900000000	                              mov ecx, 0	      3180	fold.c	FUNCTION_66	IF_2	FOR_1
0x400173f	        0x48634310	         movsxd rax, dword [rbx + 0x10] 	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001743	        0x488d0440	                  lea rax, [rax + rax*2]	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001747	        0x48c1e004	                              shl rax, 4	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x400174b	        0x48034320	             add rax, qword [rbx + 0x20]	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x400174f	          0x4863d1	                         movsxd rdx, ecx	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001752	        0x488d1452	                  lea rdx, [rdx + rdx*2]	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001756	        0x48c1e204	                              shl rdx, 4	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x400175a	        0x48035520	             add rdx, qword [rbp + 0x20]	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x400175e	          0x488b32	                    mov rsi, qword [rdx]	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001761	          0x488930	                    mov qword [rax], rsi	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001764	        0x488b7208	                mov rsi, qword [rdx + 8]	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001768	        0x48897008	                mov qword [rax + 8], rsi	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x400176c	        0x488b7210	            mov rsi, qword [rdx + 0x10] 	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001770	        0x48897010	             mov qword [rax + 0x10], rsi	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001774	        0x488b7218	            mov rsi, qword [rdx + 0x18] 	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001778	        0x48897018	             mov qword [rax + 0x18], rsi	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x400177c	        0x488b7220	            mov rsi, qword [rdx + 0x20] 	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001780	        0x48897020	             mov qword [rax + 0x20], rsi	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001784	        0x488b5228	            mov rdx, qword [rdx + 0x28] 	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001788	        0x48895028	             mov qword [rax + 0x28], rdx	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x400178c	        0x48634310	         movsxd rax, dword [rbx + 0x10] 	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001790	        0x488d0440	                  lea rax, [rax + rax*2]	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001794	        0x48c1e004	                              shl rax, 4	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001798	        0x48034320	             add rax, qword [rbx + 0x20]	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x400179c	        0x488b5308	                mov rdx, qword [rbx + 8]	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x40017a0	          0x480110	                    add qword [rax], rdx	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x40017a3	        0x83431001	               add dword [rbx + 0x10], 1	      3185	fold.c	FUNCTION_66	IF_2	FOR_1
0x40017a7	          0x83c101	                              add ecx, 1	      3180	fold.c	FUNCTION_66	IF_2	FOR_1
0x40017aa	          0x394d10	            cmp dword [rbp + 0x10], ecx 	      3180	fold.c	FUNCTION_66	IF_2	FOR_1
0x40017ad	            0x7f90	                            jg 0x400173f	      3180	fold.c	FUNCTION_66	IF_2	FOR_1
0x40017af	    0xc74510000000	               mov dword [rbp + 0x10], 0	      3187	fold.c	FUNCTION_66	IF_2
0x40017b6	        0x488b4508	                mov rax, qword [rbp + 8]	      3190	fold.c	FUNCTION_66
0x40017ba	        0x48014308	                add qword [rbx + 8], rax	      3190	fold.c	FUNCTION_66
0x40017be	      0x492b6c2410	             sub rbp, qword [r12 + 0x10]	      3191	fold.c	FUNCTION_66	CALL_5
0x40017c3	        0x48c1fd04	                              sar rbp, 4	      3191	fold.c	FUNCTION_66	CALL_5
0x40017c7	    0x48beabaaaaaa	          movabs rsi, 0xaaaaaaaaaaaaaaab	      3191	fold.c	FUNCTION_66	CALL_5
0x40017d1	        0x480faff5	                           imul rsi, rbp	      3191	fold.c	FUNCTION_66	CALL_5
0x40017d5	      0xba01000000	                              mov edx, 1	      3191	fold.c	FUNCTION_66	CALL_5
0x40017da	          0x4c89e7	                            mov rdi, r12	      3191	fold.c	FUNCTION_66	CALL_5
0x40017dd	      0xe86afbffff	                call sym.deleteFoldEntry	      3191	fold.c	FUNCTION_66	CALL_5
0x40017e2	    0xc70500000000	               mov dword [0x040017ec], 1	      3192	fold.c	FUNCTION_66
0x40017ec	      0x488b442418	            mov rax, qword [rsp + 0x18] 	      3193	fold.c	FUNCTION_66
0x40017f1	    0x644833042528	                xor rax, qword fs:[0x28]	      3193	fold.c	FUNCTION_66
0x40017fa	            0x7405	                            je 0x4001801	      3193	fold.c	FUNCTION_66
0x40017fc	      0xe800000000	                          call 0x4001801	      3193	fold.c	FUNCTION_66
0x4001801	        0x4883c420	                           add rsp, 0x20	      3193	fold.c	FUNCTION_66
0x4001805	              0x5b	                                 pop rbx	      3193	fold.c	FUNCTION_66
0x4001806	              0x5d	                                 pop rbp	      3193	fold.c	FUNCTION_66
0x4001807	            0x415c	                                 pop r12	      3193	fold.c	FUNCTION_66
0x4001809	            0x415d	                                 pop r13	      3193	fold.c	FUNCTION_66
0x400180b	            0x415e	                                 pop r14	      3193	fold.c	FUNCTION_66
0x400180d	              0xc3	                                     ret	      3193	fold.c	FUNCTION_66
foldDelMarker	DO,0:ELSE,0:FOR,1:SWITCH,0:IF,6:CALL,14:WHILE,0:functions,0	113
0x40007ff	            0x4157	                                push r15	      1822	fold.c	FUNCTION_55
0x4000801	            0x4156	                                push r14	      1822	fold.c	FUNCTION_55
0x4000803	            0x4155	                                push r13	      1822	fold.c	FUNCTION_55
0x4000805	            0x4154	                                push r12	      1822	fold.c	FUNCTION_55
0x4000807	              0x55	                                push rbp	      1822	fold.c	FUNCTION_55
0x4000808	              0x53	                                push rbx	      1822	fold.c	FUNCTION_55
0x4000809	        0x4883ec18	                           sub rsp, 0x18	      1822	fold.c	FUNCTION_55
0x400080d	          0x4989ff	                            mov r15, rdi	      1822	fold.c	FUNCTION_55
0x4000810	          0x4989f4	                            mov r12, rsi	      1822	fold.c	FUNCTION_55
0x4000813	            0x89d5	                            mov ebp, edx	      1822	fold.c	FUNCTION_55
0x4000815	        0x89542404	                mov dword [rsp + 4], edx	      1822	fold.c	FUNCTION_55
0x4000819	    0x488b05000000	            mov rax, qword [0x04000820] 	      1827	fold.c	FUNCTION_55
0x4000820	    0x488b80501400	          mov rax, qword [rax + 0x1450] 	      1827	fold.c	FUNCTION_55
0x4000827	      0x4889442408	                mov qword [rsp + 8], rax	      1827	fold.c	FUNCTION_55
0x400082c	      0xe800000000	                          call 0x4000831	      1830	fold.c	FUNCTION_55	CALL_1
0x4000831	          0x803800	                       cmp byte [rax], 0	      1831	fold.c	FUNCTION_55	FOR_1
0x4000834	     0xf8437010000	                            je 0x4000971	      1831	fold.c	FUNCTION_55	FOR_1
0x400083a	          0x4989c6	                            mov r14, rax	      1831	fold.c	FUNCTION_55	FOR_1
0x400083d	          0x4889c3	                            mov rbx, rax	      1831	fold.c	FUNCTION_55	FOR_1
0x4000840	          0x4863ed	                         movsxd rbp, ebp	      1832	fold.c	FUNCTION_55	FOR_1	IF_1	CALL_2
0x4000843	          0x4889ea	                            mov rdx, rbp	      1832	fold.c	FUNCTION_55	FOR_1	IF_1	CALL_2
0x4000846	          0x4c89e6	                            mov rsi, r12	      1832	fold.c	FUNCTION_55	FOR_1	IF_1	CALL_2
0x4000849	          0x4889df	                            mov rdi, rbx	      1832	fold.c	FUNCTION_55	FOR_1	IF_1	CALL_2
0x400084c	      0xe800000000	                          call 0x4000851	      1832	fold.c	FUNCTION_55	FOR_1	IF_1	CALL_2
0x4000851	            0x85c0	                           test eax, eax	      1832	fold.c	FUNCTION_55	FOR_1	IF_1	CALL_2
0x4000853	     0xf850b010000	                           jne 0x4000964	      1832	fold.c	FUNCTION_55	FOR_1	IF_1	CALL_2
0x4000859	         0xfb6042b	             movzx eax, byte [rbx + rbp]	      1836	fold.c	FUNCTION_55	FOR_1	IF_1	IF_2	CALL_3
0x400085d	          0x83e830	                           sub eax, 0x30	      1836	fold.c	FUNCTION_55	FOR_1	IF_1	IF_2	CALL_3
0x4000860	          0x83f80a	                            cmp eax, 0xa	      1837	fold.c	FUNCTION_55	FOR_1	IF_1	IF_2
0x4000863	      0x8354240400	                  adc dword [rsp + 4], 0	      1837	fold.c	FUNCTION_55	FOR_1	IF_1	IF_2
0x4000868	      0x4c8b6c2408	                mov r13, qword [rsp + 8]	      1838	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3
0x400086d	          0x4c89ef	                            mov rdi, r13	      1838	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3
0x4000870	      0x41807d0000	                       cmp byte [r13], 0	      1838	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3
0x4000875	            0x747a	                            je 0x40008f1	      1838	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3
0x4000877	      0xbe00000000	                              mov esi, 0	      1841	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	CALL_4
0x400087c	      0xe800000000	                          call 0x4000881	      1841	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	CALL_4
0x4000881	          0x4889c5	                            mov rbp, rax	      1841	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	CALL_4
0x4000884	          0x4889c2	                            mov rdx, rax	      1842	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x4000887	          0x4c29ea	                            sub rdx, r13	      1842	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x400088a	          0x4889d9	                            mov rcx, rbx	      1842	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x400088d	          0x4c29f1	                            sub rcx, r14	      1842	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x4000890	          0x4839d1	                            cmp rcx, rdx	      1842	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x4000893	            0x7c5c	                            jl 0x40008f1	      1842	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x4000895	          0x4989dc	                            mov r12, rbx	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x4000898	          0x4929d4	                            sub r12, rdx	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x400089b	          0x4c89ee	                            mov rsi, r13	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x400089e	          0x4c89e7	                            mov rdi, r12	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x40008a1	      0xe800000000	                          call 0x40008a6	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x40008a6	            0x85c0	                           test eax, eax	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x40008a8	            0x7547	                           jne 0x40008f1	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x40008aa	        0x488d7502	                      lea rsi, [rbp + 2]	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x40008ae	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x40008b5	          0x4889f7	                            mov rdi, rsi	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x40008b8	            0xf2ae	              repne scasb al, byte [rdi]	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x40008ba	          0x48f7d1	                                 not rcx	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x40008bd	        0x488d51ff	                      lea rdx, [rcx - 1]	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x40008c1	        0x8b6c2404	                mov ebp, dword [rsp + 4]	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x40008c5	          0x4863fd	                         movsxd rdi, ebp	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x40008c8	          0x4801df	                            add rdi, rbx	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x40008cb	      0xe800000000	                          call 0x40008d0	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x40008d0	            0x85c0	                           test eax, eax	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x40008d2	            0x751d	                           jne 0x40008f1	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x40008d4	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	      1847	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_8
0x40008db	          0x4c89ef	                            mov rdi, r13	      1847	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_8
0x40008de	            0xf2ae	              repne scasb al, byte [rdi]	      1847	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_8
0x40008e0	          0x4889c8	                            mov rax, rcx	      1847	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_8
0x40008e3	          0x48f7d0	                                 not rax	      1847	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_8
0x40008e6	        0x8d4405fd	                lea eax, [rbp + rax - 3]	      1847	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_8
0x40008ea	        0x89442404	                mov dword [rsp + 4], eax	      1847	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_8
0x40008ee	          0x4c89e3	                            mov rbx, r12	      1846	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x40008f1	        0x498d7701	                      lea rsi, [r15 + 1]	      1850	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_9
0x40008f5	        0x498d7fff	                      lea rdi, [r15 - 1]	      1850	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_9
0x40008f9	      0xe800000000	                          call 0x40008fe	      1850	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_9
0x40008fe	          0x83f801	                              cmp eax, 1	      1850	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_9
0x4000901	            0x756e	                           jne 0x4000971	      1850	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_9
0x4000903	      0xb800000000	                              mov eax, 0	      1853	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_11
0x4000908	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	      1853	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_11
0x400090f	          0x4c89f7	                            mov rdi, r14	      1853	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_11
0x4000912	            0xf2ae	              repne scasb al, byte [rdi]	      1853	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_11
0x4000914	          0x48f7d1	                                 not rcx	      1853	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_11
0x4000917	            0x89cf	                            mov edi, ecx	      1853	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_11
0x4000919	      0x448b6c2404	               mov r13d, dword [rsp + 4]	      1853	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_11
0x400091e	          0x4429ef	                           sub edi, r13d	      1853	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_11
0x4000921	      0xe800000000	                          call 0x4000926	      1853	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_11
0x4000926	          0x4889c5	                            mov rbp, rax	      1853	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_11
0x4000929	          0x4885c0	                           test rax, rax	      1854	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6
0x400092c	            0x7443	                            je 0x4000971	      1854	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6
0x400092e	          0x4989dc	                            mov r12, rbx	      1856	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_12
0x4000931	          0x4d29f4	                            sub r12, r14	      1856	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_12
0x4000934	          0x4c89e2	                            mov rdx, r12	       126	string3.h	FUNCTION_85	CALL_3
0x4000937	          0x4c89f6	                            mov rsi, r14	       126	string3.h	FUNCTION_85	CALL_3
0x400093a	          0x4889c7	                            mov rdi, rax	       126	string3.h	FUNCTION_85	CALL_3
0x400093d	      0xe800000000	                          call 0x4000942	       126	string3.h	FUNCTION_85	CALL_3
0x4000942	          0x4963f5	                        movsxd rsi, r13d	       110	string3.h	FUNCTION_83	CALL_3
0x4000945	          0x4801de	                            add rsi, rbx	       110	string3.h	FUNCTION_83	CALL_3
0x4000948	      0x4a8d7c2500	                    lea rdi, [rbp + r12]	       110	string3.h	FUNCTION_83	CALL_3
0x400094d	      0xe800000000	                          call 0x4000952	       110	string3.h	FUNCTION_83	CALL_3
0x4000952	      0xba00000000	                              mov edx, 0	      1858	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_14
0x4000957	          0x4889ee	                            mov rsi, rbp	      1858	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_14
0x400095a	          0x4c89ff	                            mov rdi, r15	      1858	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_14
0x400095d	      0xe800000000	                          call 0x4000962	      1858	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_14
0x4000962	            0xeb0d	                           jmp 0x4000971	      1858	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_14
0x4000964	        0x4883c301	                              add rbx, 1	      1831	fold.c	FUNCTION_55	FOR_1
0x4000968	          0x803b00	                       cmp byte [rbx], 0	      1831	fold.c	FUNCTION_55	FOR_1
0x400096b	     0xf85d2feffff	                           jne 0x4000843	      1831	fold.c	FUNCTION_55	FOR_1
0x4000971	        0x4883c418	                           add rsp, 0x18	      1863	fold.c	FUNCTION_55
0x4000975	              0x5b	                                 pop rbx	      1863	fold.c	FUNCTION_55
0x4000976	              0x5d	                                 pop rbp	      1863	fold.c	FUNCTION_55
0x4000977	            0x415c	                                 pop r12	      1863	fold.c	FUNCTION_55
0x4000979	            0x415d	                                 pop r13	      1863	fold.c	FUNCTION_55
0x400097b	            0x415e	                                 pop r14	      1863	fold.c	FUNCTION_55
0x400097d	            0x415f	                                 pop r15	      1863	fold.c	FUNCTION_55
0x400097f	              0xc3	                                     ret	      1863	fold.c	FUNCTION_55
foldManualAllowed	DO,0:ELSE,1:FOR,0:SWITCH,0:IF,2:CALL,6:WHILE,0:functions,0	27
0x400114a	    0x488b05000000	            mov rax, qword [0x04001151] 	       307	fold.c	FUNCTION_8
0x4001151	    0x488b90f80100	           mov rdx, qword [rax + 0x1f8] 	       307	fold.c	FUNCTION_8
0x4001158	      0xb801000000	                              mov eax, 1	       561	fold.c	FUNCTION_24	IF_1
0x400115d	        0x807a0375	                cmp byte [rdx + 3], 0x75	       560	fold.c	FUNCTION_24	IF_1	CALL_2
0x4001161	            0x7456	                            je 0x40011b9	       560	fold.c	FUNCTION_24	IF_1	CALL_2
0x4001163	        0x807a0272	                cmp byte [rdx + 2], 0x72	       560	fold.c	FUNCTION_24	IF_1	CALL_2
0x4001167	            0x7450	                            je 0x40011b9	       560	fold.c	FUNCTION_24	IF_1	CALL_2
0x4001169	        0x4883ec08	                              sub rsp, 8	       559	fold.c	FUNCTION_24
0x400116d	            0x85ff	                           test edi, edi	       562	fold.c	FUNCTION_24	IF_2
0x400116f	            0x7423	                            je 0x4001194	       562	fold.c	FUNCTION_24	IF_2
0x4001171	      0xba05000000	                              mov edx, 5	       563	fold.c	FUNCTION_24	CALL_4
0x4001176	      0xbe00000000	                              mov esi, 0	       563	fold.c	FUNCTION_24	CALL_4
0x400117b	      0xbf00000000	                              mov edi, 0	       563	fold.c	FUNCTION_24	CALL_4
0x4001180	      0xe800000000	                          call 0x4001185	       563	fold.c	FUNCTION_24	CALL_4
0x4001185	          0x4889c7	                            mov rdi, rax	       563	fold.c	FUNCTION_24	CALL_4
0x4001188	      0xe800000000	                          call 0x400118d	       563	fold.c	FUNCTION_24	CALL_4
0x400118d	      0xb800000000	                              mov eax, 0	       566	fold.c	FUNCTION_24
0x4001192	            0xeb21	                           jmp 0x40011b5	       566	fold.c	FUNCTION_24
0x4001194	      0xba05000000	                              mov edx, 5	       565	fold.c	FUNCTION_24	CALL_6
0x4001199	      0xbe00000000	                              mov esi, 0	       565	fold.c	FUNCTION_24	CALL_6
0x400119e	      0xbf00000000	                              mov edi, 0	       565	fold.c	FUNCTION_24	CALL_6
0x40011a3	      0xe800000000	                          call 0x40011a8	       565	fold.c	FUNCTION_24	CALL_6
0x40011a8	          0x4889c7	                            mov rdi, rax	       565	fold.c	FUNCTION_24	CALL_6
0x40011ab	      0xe800000000	                          call 0x40011b0	       565	fold.c	FUNCTION_24	CALL_6
0x40011b0	      0xb800000000	                              mov eax, 0	       566	fold.c	FUNCTION_24
0x40011b5	        0x4883c408	                              add rsp, 8	       567	fold.c	FUNCTION_24
0x40011b9	            0xf3c3	                                     ret	       567	fold.c	FUNCTION_24
foldSplit	DO,0:ELSE,0:FOR,1:SWITCH,0:IF,2:CALL,3:WHILE,0:functions,0	89
0x40006a1	            0x4155	                                push r13	      2857	fold.c	FUNCTION_61
0x40006a3	            0x4154	                                push r12	      2857	fold.c	FUNCTION_61
0x40006a5	              0x55	                                push rbp	      2857	fold.c	FUNCTION_61
0x40006a6	              0x53	                                push rbx	      2857	fold.c	FUNCTION_61
0x40006a7	        0x4883ec18	                           sub rsp, 0x18	      2857	fold.c	FUNCTION_61
0x40006ab	          0x4989fd	                            mov r13, rdi	      2857	fold.c	FUNCTION_61
0x40006ae	            0x89f3	                            mov ebx, esi	      2857	fold.c	FUNCTION_61
0x40006b0	          0x4889d5	                            mov rbp, rdx	      2857	fold.c	FUNCTION_61
0x40006b3	          0x4989cc	                            mov r12, rcx	      2857	fold.c	FUNCTION_61
0x40006b6	    0x64488b042528	                mov rax, qword fs:[0x28]	      2857	fold.c	FUNCTION_61
0x40006bf	      0x4889442408	                mov qword [rsp + 8], rax	      2857	fold.c	FUNCTION_61
0x40006c4	            0x31c0	                            xor eax, eax	      2857	fold.c	FUNCTION_61
0x40006c6	          0x8d7601	                      lea esi, [rsi + 1]	      2866	fold.c	FUNCTION_61	IF_1	CALL_1
0x40006c9	      0xe855ffffff	                     call sym.foldInsert	      2866	fold.c	FUNCTION_61	IF_1	CALL_1
0x40006ce	            0x85c0	                           test eax, eax	      2866	fold.c	FUNCTION_61	IF_1	CALL_1
0x40006d0	     0xf8409010000	                            je 0x40007df	      2866	fold.c	FUNCTION_61	IF_1	CALL_1
0x40006d6	          0x4863db	                         movsxd rbx, ebx	      2868	fold.c	FUNCTION_61
0x40006d9	        0x488d1c5b	                  lea rbx, [rbx + rbx*2]	      2868	fold.c	FUNCTION_61
0x40006dd	        0x48c1e304	                              shl rbx, 4	      2868	fold.c	FUNCTION_61
0x40006e1	        0x49035d10	             add rbx, qword [r13 + 0x10]	      2868	fold.c	FUNCTION_61
0x40006e5	      0x498d742401	                      lea rsi, [r12 + 1]	      2869	fold.c	FUNCTION_61
0x40006ea	        0x48897330	             mov qword [rbx + 0x30], rsi	      2869	fold.c	FUNCTION_61
0x40006ee	          0x482b33	                    sub rsi, qword [rbx]	      2870	fold.c	FUNCTION_61
0x40006f1	        0x488b4308	                mov rax, qword [rbx + 8]	      2870	fold.c	FUNCTION_61
0x40006f5	          0x4829f0	                            sub rax, rsi	      2870	fold.c	FUNCTION_61
0x40006f8	        0x48894338	             mov qword [rbx + 0x38], rax	      2870	fold.c	FUNCTION_61
0x40006fc	         0xfb64328	           movzx eax, byte [rbx + 0x28] 	      2871	fold.c	FUNCTION_61
0x4000700	          0x884358	               mov byte [rbx + 0x58], al	      2871	fold.c	FUNCTION_61
0x4000703	        0xc6435902	                mov byte [rbx + 0x59], 2	      2872	fold.c	FUNCTION_61
0x4000707	        0xc6432902	                mov byte [rbx + 0x29], 2	      2873	fold.c	FUNCTION_61
0x400070b	        0x488d7b10	                   lea rdi, [rbx + 0x10]	      2877	fold.c	FUNCTION_61
0x400070f	          0x4889e2	                            mov rdx, rsp	      2879	fold.c	FUNCTION_61	CALL_2
0x4000712	      0xe8c9f9ffff	                       call sym.foldFind	      2879	fold.c	FUNCTION_61	CALL_2
0x4000717	        0x48634310	         movsxd rax, dword [rbx + 0x10] 	      2880	fold.c	FUNCTION_61
0x400071b	        0x488d0440	                  lea rax, [rax + rax*2]	      2880	fold.c	FUNCTION_61
0x400071f	        0x48c1e004	                              shl rax, 4	      2880	fold.c	FUNCTION_61
0x4000723	        0x48034320	             add rax, qword [rbx + 0x20]	      2880	fold.c	FUNCTION_61
0x4000727	        0x482b0424	                    sub rax, qword [rsp]	      2880	fold.c	FUNCTION_61
0x400072b	        0x48c1f804	                              sar rax, 4	      2880	fold.c	FUNCTION_61
0x400072f	    0x49bcabaaaaaa	          movabs r12, 0xaaaaaaaaaaaaaaab	      2880	fold.c	FUNCTION_61
0x4000739	        0x4c0fafe0	                           imul r12, rax	      2880	fold.c	FUNCTION_61
0x400073d	          0x4585e4	                         test r12d, r12d	      2881	fold.c	FUNCTION_61	IF_2	CALL_3
0x4000740	     0xf8e88000000	                           jle 0x40007ce	      2881	fold.c	FUNCTION_61	IF_2	CALL_3
0x4000746	        0x488d7b40	                   lea rdi, [rbx + 0x40]	      2878	fold.c	FUNCTION_61
0x400074a	          0x4489e6	                           mov esi, r12d	      2881	fold.c	FUNCTION_61	IF_2	CALL_3
0x400074d	      0xe800000000	                          call 0x4000752	      2881	fold.c	FUNCTION_61	IF_2	CALL_3
0x4000752	          0x83f801	                              cmp eax, 1	      2881	fold.c	FUNCTION_61	IF_2	CALL_3
0x4000755	            0x7577	                           jne 0x40007ce	      2881	fold.c	FUNCTION_61	IF_2	CALL_3
0x4000757	      0x418d4424ff	                      lea eax, [r12 - 1]	      2881	fold.c	FUNCTION_61	IF_2	CALL_3
0x400075c	      0x488d7c4003	              lea rdi, [rax + rax*2 + 3]	      2881	fold.c	FUNCTION_61	IF_2	CALL_3
0x4000761	        0x48c1e704	                              shl rdi, 4	      2881	fold.c	FUNCTION_61	IF_2	CALL_3
0x4000765	      0xb800000000	                              mov eax, 0	      2881	fold.c	FUNCTION_61	IF_2	CALL_3
0x400076a	        0x488b5350	            mov rdx, qword [rbx + 0x50] 	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x400076e	        0x488b0c24	                    mov rcx, qword [rsp]	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x4000772	        0x488b3401	              mov rsi, qword [rcx + rax]	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x4000776	        0x48893402	              mov qword [rdx + rax], rsi	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x400077a	      0x488b740108	         mov rsi, qword [rcx + rax + 8] 	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x400077f	      0x4889740208	          mov qword [rdx + rax + 8], rsi	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x4000784	      0x488b740110	      mov rsi, qword [rcx + rax + 0x10] 	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x4000789	      0x4889740210	       mov qword [rdx + rax + 0x10], rsi	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x400078e	      0x488b740118	      mov rsi, qword [rcx + rax + 0x18] 	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x4000793	      0x4889740218	       mov qword [rdx + rax + 0x18], rsi	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x4000798	      0x488b740120	      mov rsi, qword [rcx + rax + 0x20] 	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x400079d	      0x4889740220	       mov qword [rdx + rax + 0x20], rsi	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x40007a2	      0x488b4c0128	      mov rcx, qword [rcx + rax + 0x28] 	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x40007a7	      0x48894c0228	       mov qword [rdx + rax + 0x28], rcx	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x40007ac	          0x4889c1	                            mov rcx, rax	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x40007af	        0x48034b50	             add rcx, qword [rbx + 0x50]	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x40007b3	        0x488b5330	            mov rdx, qword [rbx + 0x30] 	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x40007b7	          0x482b13	                    sub rdx, qword [rbx]	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x40007ba	          0x482911	                    sub qword [rcx], rdx	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x40007bd	        0x4883c030	                           add rax, 0x30	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x40007c1	          0x4839f8	                            cmp rax, rdi	      2883	fold.c	FUNCTION_61	IF_2	FOR_1
0x40007c4	            0x75a4	                           jne 0x400076a	      2883	fold.c	FUNCTION_61	IF_2	FOR_1
0x40007c6	        0x44896340	            mov dword [rbx + 0x40], r12d	      2889	fold.c	FUNCTION_61	IF_2
0x40007ca	        0x44296310	            sub dword [rbx + 0x10], r12d	      2890	fold.c	FUNCTION_61	IF_2
0x40007ce	          0x482b2b	                    sub rbp, qword [rbx]	      2892	fold.c	FUNCTION_61
0x40007d1	        0x48896b08	                mov qword [rbx + 8], rbp	      2892	fold.c	FUNCTION_61
0x40007d5	    0xc70500000000	               mov dword [0x040007df], 1	      2893	fold.c	FUNCTION_61
0x40007df	      0x488b442408	                mov rax, qword [rsp + 8]	      2894	fold.c	FUNCTION_61
0x40007e4	    0x644833042528	                xor rax, qword fs:[0x28]	      2894	fold.c	FUNCTION_61
0x40007ed	            0x7405	                            je 0x40007f4	      2894	fold.c	FUNCTION_61
0x40007ef	      0xe800000000	                          call 0x40007f4	      2894	fold.c	FUNCTION_61
0x40007f4	        0x4883c418	                           add rsp, 0x18	      2894	fold.c	FUNCTION_61
0x40007f8	              0x5b	                                 pop rbx	      2894	fold.c	FUNCTION_61
0x40007f9	              0x5d	                                 pop rbp	      2894	fold.c	FUNCTION_61
0x40007fa	            0x415c	                                 pop r12	      2894	fold.c	FUNCTION_61
0x40007fc	            0x415d	                                 pop r13	      2894	fold.c	FUNCTION_61
0x40007fe	              0xc3	                                     ret	      2894	fold.c	FUNCTION_61
foldAdjustVisual	DO,0:ELSE,1:FOR,0:SWITCH,0:IF,6:CALL,7:WHILE,0:functions,0	71
0x4002bfa	    0x833d00000000	               cmp dword [0x04002c01], 0	      1038	fold.c	FUNCTION_33	IF_1	CALL_1
0x4002c01	     0xf84f0000000	                            je 0x4002cf7	      1038	fold.c	FUNCTION_33	IF_1	CALL_1
0x4002c07	              0x55	                                push rbp	      1034	fold.c	FUNCTION_33
0x4002c08	              0x53	                                push rbx	      1034	fold.c	FUNCTION_33
0x4002c09	        0x4883ec08	                              sub rsp, 8	      1034	fold.c	FUNCTION_33
0x4002c0d	    0x488b1d000000	            mov rbx, qword [0x04002c14] 	      1038	fold.c	FUNCTION_33	IF_1	CALL_1
0x4002c14	          0x4889df	                            mov rdi, rbx	      1038	fold.c	FUNCTION_33	IF_1	CALL_1
0x4002c17	      0xe800000000	                          call 0x4002c1c	      1038	fold.c	FUNCTION_33	IF_1	CALL_1
0x4002c1c	            0x85c0	                           test eax, eax	      1038	fold.c	FUNCTION_33	IF_1	CALL_1
0x4002c1e	     0xf84cd000000	                            je 0x4002cf1	      1038	fold.c	FUNCTION_33	IF_1	CALL_1
0x4002c24	    0x488b15000000	            mov rdx, qword [0x04002c2b] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4002c2b	        0x488b4338	            mov rax, qword [rbx + 0x38] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4002c2f	          0x4839c2	                            cmp rdx, rax	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4002c32	            0x7407	                            je 0x4002c3b	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4002c34	          0x4839c2	                            cmp rdx, rax	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4002c37	            0x7c2d	                            jl 0x4002c66	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4002c39	            0xeb36	                           jmp 0x4002c71	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4002c3b	    0x8b1500000000	            mov edx, dword [0x04002c41] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4002c41	          0x8b4340	            mov eax, dword [rbx + 0x40] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4002c44	            0x39c2	                            cmp edx, eax	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4002c46	            0x7406	                            je 0x4002c4e	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4002c48	            0x39c2	                            cmp edx, eax	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4002c4a	            0x7c1a	                            jl 0x4002c66	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4002c4c	            0xeb0b	                           jmp 0x4002c59	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4002c4e	          0x8b4344	            mov eax, dword [rbx + 0x44] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4002c51	    0x390500000000	            cmp dword [0x04002c57], eax 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4002c57	            0x7c0d	                            jl 0x4002c66	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4002c59	        0x488b4340	            mov rax, qword [rbx + 0x40] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4002c5d	    0x483905000000	            cmp qword [0x04002c64], rax 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4002c64	            0x750b	                           jne 0x4002c71	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4002c66	        0x4883c338	                           add rbx, 0x38	      1044	fold.c	FUNCTION_33	IF_2
0x4002c6a	      0xbd00000000	                              mov ebp, 0	      1043	fold.c	FUNCTION_33	IF_2
0x4002c6f	            0xeb09	                           jmp 0x4002c7a	      1044	fold.c	FUNCTION_33	IF_2
0x4002c71	        0x488d6b38	                   lea rbp, [rbx + 0x38]	      1048	fold.c	FUNCTION_33	ELSE_1
0x4002c75	      0xbb00000000	                              mov ebx, 0	      1049	fold.c	FUNCTION_33	ELSE_1
0x4002c7a	      0xba00000000	                              mov edx, 0	      1051	fold.c	FUNCTION_33	IF_3	CALL_3
0x4002c7f	          0x4889ee	                            mov rsi, rbp	      1051	fold.c	FUNCTION_33	IF_3	CALL_3
0x4002c82	        0x488b7d00	                    mov rdi, qword [rbp]	      1051	fold.c	FUNCTION_33	IF_3	CALL_3
0x4002c86	      0xe800000000	                          call 0x4002c8b	      1051	fold.c	FUNCTION_33	IF_3	CALL_3
0x4002c8b	            0x85c0	                           test eax, eax	      1051	fold.c	FUNCTION_33	IF_3	CALL_3
0x4002c8d	            0x7407	                            je 0x4002c96	      1051	fold.c	FUNCTION_33	IF_3	CALL_3
0x4002c8f	    0xc74508000000	                  mov dword [rbp + 8], 0	      1052	fold.c	FUNCTION_33	IF_3
0x4002c96	          0x4889da	                            mov rdx, rbx	      1053	fold.c	FUNCTION_33	IF_4	CALL_4
0x4002c99	      0xbe00000000	                              mov esi, 0	      1053	fold.c	FUNCTION_33	IF_4	CALL_4
0x4002c9e	          0x488b3b	                    mov rdi, qword [rbx]	      1053	fold.c	FUNCTION_33	IF_4	CALL_4
0x4002ca1	      0xe800000000	                          call 0x4002ca6	      1053	fold.c	FUNCTION_33	IF_4	CALL_4
0x4002ca6	            0x85c0	                           test eax, eax	      1053	fold.c	FUNCTION_33	IF_4	CALL_4
0x4002ca8	            0x7447	                            je 0x4002cf1	      1053	fold.c	FUNCTION_33	IF_4	CALL_4
0x4002caa	          0x488b3b	                    mov rdi, qword [rbx]	      1055	fold.c	FUNCTION_33	IF_4	CALL_5
0x4002cad	      0xe800000000	                          call 0x4002cb2	      1055	fold.c	FUNCTION_33	IF_4	CALL_5
0x4002cb2	          0x4889c7	                            mov rdi, rax	      1055	fold.c	FUNCTION_33	IF_4	CALL_5
0x4002cb5	      0xb800000000	                              mov eax, 0	      1056	fold.c	FUNCTION_33	IF_4	CALL_6
0x4002cba	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	      1056	fold.c	FUNCTION_33	IF_4	CALL_6
0x4002cc1	            0xf2ae	              repne scasb al, byte [rdi]	      1056	fold.c	FUNCTION_33	IF_4	CALL_6
0x4002cc3	          0x48f7d1	                                 not rcx	      1056	fold.c	FUNCTION_33	IF_4	CALL_6
0x4002cc6	        0x4883e901	                              sub rcx, 1	      1056	fold.c	FUNCTION_33	IF_4	CALL_6
0x4002cca	          0x894b08	                mov dword [rbx + 8], ecx	      1056	fold.c	FUNCTION_33	IF_4	CALL_6
0x4002ccd	            0x85c9	                           test ecx, ecx	      1057	fold.c	FUNCTION_33	IF_4	IF_5
0x4002ccf	            0x7e12	                           jle 0x4002ce3	      1057	fold.c	FUNCTION_33	IF_4	IF_5
0x4002cd1	    0x488b05000000	            mov rax, qword [0x04002cd8] 	      1057	fold.c	FUNCTION_33	IF_4	IF_5
0x4002cd8	          0x80386f	                    cmp byte [rax], 0x6f	      1057	fold.c	FUNCTION_33	IF_4	IF_5
0x4002cdb	            0x7506	                           jne 0x4002ce3	      1057	fold.c	FUNCTION_33	IF_4	IF_5
0x4002cdd	          0x83e901	                              sub ecx, 1	      1058	fold.c	FUNCTION_33	IF_4	IF_5
0x4002ce0	          0x894b08	                mov dword [rbx + 8], ecx	      1058	fold.c	FUNCTION_33	IF_4	IF_5
0x4002ce3	    0x833d00000000	               cmp dword [0x04002cea], 0	      1061	fold.c	FUNCTION_33	IF_4	IF_6
0x4002cea	            0x7405	                            je 0x4002cf1	      1061	fold.c	FUNCTION_33	IF_4	IF_6
0x4002cec	      0xe800000000	                          call 0x4002cf1	      1062	fold.c	FUNCTION_33	IF_4	CALL_7
0x4002cf1	        0x4883c408	                              add rsp, 8	      1065	fold.c	FUNCTION_33
0x4002cf5	              0x5b	                                 pop rbx	      1065	fold.c	FUNCTION_33
0x4002cf6	              0x5d	                                 pop rbp	      1065	fold.c	FUNCTION_33
0x4002cf7	            0xf3c3	                                     ret	      1065	fold.c	FUNCTION_33
opFoldRange	DO,0:ELSE,0:FOR,1:SWITCH,0:IF,4:CALL,6:WHILE,0:functions,0	68
0x40031fb	            0x4157	                                push r15	       393	fold.c	FUNCTION_16
0x40031fd	            0x4156	                                push r14	       393	fold.c	FUNCTION_16
0x40031ff	            0x4155	                                push r13	       393	fold.c	FUNCTION_16
0x4003201	            0x4154	                                push r12	       393	fold.c	FUNCTION_16
0x4003203	              0x55	                                push rbp	       393	fold.c	FUNCTION_16
0x4003204	              0x53	                                push rbx	       393	fold.c	FUNCTION_16
0x4003205	        0x4883ec28	                           sub rsp, 0x28	       393	fold.c	FUNCTION_16
0x4003209	          0x4589c7	                           mov r15d, r8d	       393	fold.c	FUNCTION_16
0x400320c	    0x64488b042528	                mov rax, qword fs:[0x28]	       393	fold.c	FUNCTION_16
0x4003215	      0x4889442418	             mov qword [rsp + 0x18], rax	       393	fold.c	FUNCTION_16
0x400321a	            0x31c0	                            xor eax, eax	       393	fold.c	FUNCTION_16
0x400321c	    0xc744240c0000	                mov dword [rsp + 0xc], 0	       394	fold.c	FUNCTION_16
0x4003224	          0x4839f7	                            cmp rdi, rsi	       398	fold.c	FUNCTION_16	FOR_1
0x4003227	            0x7f6f	                            jg 0x4003298	       398	fold.c	FUNCTION_16	FOR_1
0x4003229	          0x4889fb	                            mov rbx, rdi	       398	fold.c	FUNCTION_16	FOR_1
0x400322c	          0x4989f5	                            mov r13, rsi	       398	fold.c	FUNCTION_16	FOR_1
0x400322f	            0x89d5	                            mov ebp, edx	       398	fold.c	FUNCTION_16	FOR_1
0x4003231	          0x4189cc	                           mov r12d, ecx	       398	fold.c	FUNCTION_16	FOR_1
0x4003234	          0x4189d6	                           mov r14d, edx	       408	fold.c	FUNCTION_16	FOR_1	IF_2
0x4003237	          0x4109ce	                            or r14d, ecx	       408	fold.c	FUNCTION_16	FOR_1	IF_2
0x400323a	      0x48895c2410	             mov qword [rsp + 0x10], rbx	       400	fold.c	FUNCTION_16	FOR_1
0x400323f	            0x85ed	                           test ebp, ebp	       403	fold.c	FUNCTION_16	FOR_1	IF_1
0x4003241	            0x7417	                            je 0x400325a	       403	fold.c	FUNCTION_16	FOR_1	IF_1
0x4003243	          0x4585e4	                         test r12d, r12d	       403	fold.c	FUNCTION_16	FOR_1	IF_1
0x4003246	            0x7512	                           jne 0x400325a	       403	fold.c	FUNCTION_16	FOR_1	IF_1
0x4003248	      0x488d542410	                   lea rdx, [rsp + 0x10]	       404	fold.c	FUNCTION_16	FOR_1	CALL_1
0x400324d	      0xbe00000000	                              mov esi, 0	       404	fold.c	FUNCTION_16	FOR_1	CALL_1
0x4003252	          0x4889df	                            mov rdi, rbx	       404	fold.c	FUNCTION_16	FOR_1	CALL_1
0x4003255	      0xe800000000	                          call 0x400325a	       404	fold.c	FUNCTION_16	FOR_1	CALL_1
0x400325a	      0x488d4c240c	                    lea rcx, [rsp + 0xc]	       405	fold.c	FUNCTION_16	FOR_1	CALL_2
0x400325f	          0x4489e2	                           mov edx, r12d	       405	fold.c	FUNCTION_16	FOR_1	CALL_2
0x4003262	            0x89ee	                            mov esi, ebp	       405	fold.c	FUNCTION_16	FOR_1	CALL_2
0x4003264	          0x4889df	                            mov rdi, rbx	       405	fold.c	FUNCTION_16	FOR_1	CALL_2
0x4003267	      0xe8fefdffff	                  call sym.setManualFold	       405	fold.c	FUNCTION_16	FOR_1	CALL_2
0x400326c	          0x4585f6	                         test r14d, r14d	       408	fold.c	FUNCTION_16	FOR_1	IF_2
0x400326f	            0x7512	                           jne 0x4003283	       408	fold.c	FUNCTION_16	FOR_1	IF_2
0x4003271	      0x488d542410	                   lea rdx, [rsp + 0x10]	       409	fold.c	FUNCTION_16	FOR_1	CALL_3
0x4003276	      0xbe00000000	                              mov esi, 0	       409	fold.c	FUNCTION_16	FOR_1	CALL_3
0x400327b	          0x4889df	                            mov rdi, rbx	       409	fold.c	FUNCTION_16	FOR_1	CALL_3
0x400327e	      0xe800000000	                          call 0x4003283	       409	fold.c	FUNCTION_16	FOR_1	CALL_3
0x4003283	      0x488b442410	            mov rax, qword [rsp + 0x10] 	       398	fold.c	FUNCTION_16	FOR_1
0x4003288	        0x488d5801	                      lea rbx, [rax + 1]	       398	fold.c	FUNCTION_16	FOR_1
0x400328c	          0x4939dd	                            cmp r13, rbx	       398	fold.c	FUNCTION_16	FOR_1
0x400328f	            0x7da9	                           jge 0x400323a	       398	fold.c	FUNCTION_16	FOR_1
0x4003291	      0x837c240c00	                cmp dword [rsp + 0xc], 0	       411	fold.c	FUNCTION_16	IF_3
0x4003296	            0x751c	                           jne 0x40032b4	       411	fold.c	FUNCTION_16	IF_3
0x4003298	      0xba05000000	                              mov edx, 5	       412	fold.c	FUNCTION_16	CALL_5
0x400329d	      0xbe00000000	                              mov esi, 0	       412	fold.c	FUNCTION_16	CALL_5
0x40032a2	      0xbf00000000	                              mov edi, 0	       412	fold.c	FUNCTION_16	CALL_5
0x40032a7	      0xe800000000	                          call 0x40032ac	       412	fold.c	FUNCTION_16	CALL_5
0x40032ac	          0x4889c7	                            mov rdi, rax	       412	fold.c	FUNCTION_16	CALL_5
0x40032af	      0xe800000000	                          call 0x40032b4	       412	fold.c	FUNCTION_16	CALL_5
0x40032b4	          0x4585ff	                         test r15d, r15d	       414	fold.c	FUNCTION_16	IF_4
0x40032b7	            0x740a	                            je 0x40032c3	       414	fold.c	FUNCTION_16	IF_4
0x40032b9	      0xbf14000000	                           mov edi, 0x14	       415	fold.c	FUNCTION_16	CALL_6
0x40032be	      0xe800000000	                          call 0x40032c3	       415	fold.c	FUNCTION_16	CALL_6
0x40032c3	      0x488b442418	            mov rax, qword [rsp + 0x18] 	       416	fold.c	FUNCTION_16
0x40032c8	    0x644833042528	                xor rax, qword fs:[0x28]	       416	fold.c	FUNCTION_16
0x40032d1	            0x7405	                            je 0x40032d8	       416	fold.c	FUNCTION_16
0x40032d3	      0xe800000000	                          call 0x40032d8	       416	fold.c	FUNCTION_16
0x40032d8	        0x4883c428	                           add rsp, 0x28	       416	fold.c	FUNCTION_16
0x40032dc	              0x5b	                                 pop rbx	       416	fold.c	FUNCTION_16
0x40032dd	              0x5d	                                 pop rbp	       416	fold.c	FUNCTION_16
0x40032de	            0x415c	                                 pop r12	       416	fold.c	FUNCTION_16
0x40032e0	            0x415d	                                 pop r13	       416	fold.c	FUNCTION_16
0x40032e2	            0x415e	                                 pop r14	       416	fold.c	FUNCTION_16
0x40032e4	            0x415f	                                 pop r15	       416	fold.c	FUNCTION_16
0x40032e6	              0xc3	                                     ret	       416	fold.c	FUNCTION_16
foldMarkAdjustRecurse	DO,0:ELSE,8:FOR,1:SWITCH,0:IF,10:CALL,5:WHILE,0:functions,0	145
0x400147b	            0x4157	                                push r15	      1492	fold.c	FUNCTION_46
0x400147d	            0x4156	                                push r14	      1492	fold.c	FUNCTION_46
0x400147f	            0x4155	                                push r13	      1492	fold.c	FUNCTION_46
0x4001481	            0x4154	                                push r12	      1492	fold.c	FUNCTION_46
0x4001483	              0x55	                                push rbp	      1492	fold.c	FUNCTION_46
0x4001484	              0x53	                                push rbx	      1492	fold.c	FUNCTION_46
0x4001485	        0x4883ec38	                           sub rsp, 0x38	      1492	fold.c	FUNCTION_46
0x4001489	          0x4989fd	                            mov r13, rdi	      1492	fold.c	FUNCTION_46
0x400148c	          0x4989f4	                            mov r12, rsi	      1492	fold.c	FUNCTION_46
0x400148f	          0x4989d6	                            mov r14, rdx	      1492	fold.c	FUNCTION_46
0x4001492	      0x48894c2408	                mov qword [rsp + 8], rcx	      1492	fold.c	FUNCTION_46
0x4001497	          0x4d89c7	                             mov r15, r8	      1492	fold.c	FUNCTION_46
0x400149a	    0x64488b042528	                mov rax, qword fs:[0x28]	      1492	fold.c	FUNCTION_46
0x40014a3	      0x4889442428	             mov qword [rsp + 0x28], rax	      1492	fold.c	FUNCTION_46
0x40014a8	            0x31c0	                            xor eax, eax	      1492	fold.c	FUNCTION_46
0x40014aa	      0x4889742410	             mov qword [rsp + 0x10], rsi	      1503	fold.c	FUNCTION_46	ELSE_1
0x40014af	    0xf60500000000	           test byte [0x040014b6], 0x10 	      1500	fold.c	FUNCTION_46	IF_1
0x40014b6	            0x741f	                            je 0x40014d7	      1500	fold.c	FUNCTION_46	IF_1
0x40014b8	        0x4883f901	                              cmp rcx, 1	      1500	fold.c	FUNCTION_46	IF_1
0x40014bc	            0x7514	                           jne 0x40014d2	      1500	fold.c	FUNCTION_46	IF_1
0x40014be	    0x4881faffffff	                     cmp rdx, 0x7fffffff	      1500	fold.c	FUNCTION_46	IF_1
0x40014c5	            0x750b	                           jne 0x40014d2	      1500	fold.c	FUNCTION_46	IF_1
0x40014c7	        0x488d4601	                      lea rax, [rsi + 1]	      1501	fold.c	FUNCTION_46	IF_1
0x40014cb	      0x4889442410	             mov qword [rsp + 0x10], rax	      1501	fold.c	FUNCTION_46	IF_1
0x40014d0	            0xeb05	                           jmp 0x40014d7	      1501	fold.c	FUNCTION_46	IF_1
0x40014d2	      0x4c89642410	             mov qword [rsp + 0x10], r12	      1503	fold.c	FUNCTION_46	ELSE_1
0x40014d7	      0x488d542420	                   lea rdx, [rsp + 0x20]	      1506	fold.c	FUNCTION_46	CALL_1
0x40014dc	          0x4c89e6	                            mov rsi, r12	      1506	fold.c	FUNCTION_46	CALL_1
0x40014df	          0x4c89ef	                            mov rdi, r13	      1506	fold.c	FUNCTION_46	CALL_1
0x40014e2	      0xe8f9ebffff	                       call sym.foldFind	      1506	fold.c	FUNCTION_46	CALL_1
0x40014e7	      0x488b442420	            mov rax, qword [rsp + 0x20] 	      1511	fold.c	FUNCTION_46	FOR_1
0x40014ec	        0x492b4510	             sub rax, qword [r13 + 0x10]	      1511	fold.c	FUNCTION_46	FOR_1
0x40014f0	        0x48c1f804	                              sar rax, 4	      1511	fold.c	FUNCTION_46	FOR_1
0x40014f4	    0x48baabaaaaaa	          movabs rdx, 0xaaaaaaaaaaaaaaab	      1511	fold.c	FUNCTION_46	FOR_1
0x40014fe	        0x480fafc2	                           imul rax, rdx	      1511	fold.c	FUNCTION_46	FOR_1
0x4001502	            0x89c5	                            mov ebp, eax	      1511	fold.c	FUNCTION_46	FOR_1
0x4001504	        0x413b4500	                    cmp eax, dword [r13]	      1511	fold.c	FUNCTION_46	FOR_1
0x4001508	     0xf8d78010000	                           jge 0x4001686	      1511	fold.c	FUNCTION_46	FOR_1
0x400150e	          0x4c89f8	                            mov rax, r15	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x4001511	      0x482b442408	                sub rax, qword [rsp + 8]	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x4001516	      0x4889442418	             mov qword [rsp + 0x18], rax	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x400151b	      0x488b7c2420	            mov rdi, qword [rsp + 0x20] 	      1525	fold.c	FUNCTION_46	FOR_1
0x4001520	          0x488b07	                    mov rax, qword [rdi]	      1525	fold.c	FUNCTION_46	FOR_1
0x4001523	          0x4889c3	                            mov rbx, rax	      1525	fold.c	FUNCTION_46	FOR_1
0x4001526	        0x48035f08	                add rbx, qword [rdi + 8]	      1525	fold.c	FUNCTION_46	FOR_1
0x400152a	        0x4883eb01	                              sub rbx, 1	      1525	fold.c	FUNCTION_46	FOR_1
0x400152e	          0x4939dc	                            cmp r12, rbx	      1528	fold.c	FUNCTION_46	FOR_1	IF_2
0x4001531	     0xf8f3c010000	                            jg 0x4001673	      1528	fold.c	FUNCTION_46	FOR_1	IF_2
0x4001537	          0x4939c6	                            cmp r14, rax	      1532	fold.c	FUNCTION_46	FOR_1	IF_3
0x400153a	            0x7d14	                           jge 0x4001550	      1532	fold.c	FUNCTION_46	FOR_1	IF_3
0x400153c	          0x4d85ff	                           test r15, r15	      1534	fold.c	FUNCTION_46	FOR_1	IF_3	IF_4
0x400153f	     0xf8441010000	                            je 0x4001686	      1534	fold.c	FUNCTION_46	FOR_1	IF_3	IF_4
0x4001545	          0x4c01f8	                            add rax, r15	      1536	fold.c	FUNCTION_46	FOR_1	IF_3
0x4001548	          0x488907	                    mov qword [rdi], rax	      1536	fold.c	FUNCTION_46	FOR_1	IF_3
0x400154b	      0xe923010000	                           jmp 0x4001673	      1536	fold.c	FUNCTION_46	FOR_1	IF_3
0x4001550	          0x4939de	                            cmp r14, rbx	      1540	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5
0x4001553	            0x7c3c	                            jl 0x4001591	      1540	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5
0x4001555	      0x4839442410	            cmp qword [rsp + 0x10], rax 	      1540	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5
0x400155a	            0x7f35	                            jg 0x4001591	      1540	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5
0x400155c	    0x48817c2408ff	        cmp qword [rsp + 8], 0x7fffffff 	      1543	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6
0x4001565	            0x751d	                           jne 0x4001584	      1543	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6
0x4001567	      0xba01000000	                              mov edx, 1	      1546	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6	CALL_2
0x400156c	            0x89ee	                            mov esi, ebp	      1546	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6	CALL_2
0x400156e	          0x4c89ef	                            mov rdi, r13	      1546	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6	CALL_2
0x4001571	      0xe8d6fdffff	                call sym.deleteFoldEntry	      1546	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6	CALL_2
0x4001576	          0x83ed01	                              sub ebp, 1	      1547	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6
0x4001579	    0x48836c242030	           sub qword [rsp + 0x20], 0x30 	      1548	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6
0x400157f	      0xe9ef000000	                           jmp 0x4001673	      1548	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6
0x4001584	      0x4803442408	                add rax, qword [rsp + 8]	      1551	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	ELSE_3
0x4001589	          0x488907	                    mov qword [rdi], rax	      1551	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	ELSE_3
0x400158c	      0xe9e2000000	                           jmp 0x4001673	      1551	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	ELSE_3
0x4001591	      0x4839442410	            cmp qword [rsp + 0x10], rax 	      1555	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7
0x4001596	            0x7e5f	                           jle 0x40015f7	      1555	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7
0x4001598	          0x4c89f2	                            mov rdx, r14	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x400159b	          0x4829c2	                            sub rdx, rax	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x400159e	          0x4c89e6	                            mov rsi, r12	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x40015a1	          0x4829c6	                            sub rsi, rax	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x40015a4	        0x4883c710	                           add rdi, 0x10	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x40015a8	          0x4d89f8	                             mov r8, r15	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x40015ab	      0x488b4c2408	                mov rcx, qword [rsp + 8]	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x40015b0	      0xe8c6feffff	          call sym.foldMarkAdjustRecurse	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x40015b5	          0x4939de	                            cmp r14, rbx	      1560	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8
0x40015b8	            0x7c32	                            jl 0x40015ec	      1560	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8
0x40015ba	    0x48817c2408ff	        cmp qword [rsp + 8], 0x7fffffff 	      1563	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	IF_9
0x40015c3	            0x7514	                           jne 0x40015d9	      1563	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	IF_9
0x40015c5	      0x488b442420	            mov rax, qword [rsp + 0x20] 	      1564	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	IF_9
0x40015ca	          0x4c89e2	                            mov rdx, r12	      1564	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	IF_9
0x40015cd	          0x482b10	                    sub rdx, qword [rax]	      1564	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	IF_9
0x40015d0	        0x48895008	                mov qword [rax + 8], rdx	      1564	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	IF_9
0x40015d4	      0xe99a000000	                           jmp 0x4001673	      1564	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	IF_9
0x40015d9	      0x488b442420	            mov rax, qword [rsp + 0x20] 	      1566	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	ELSE_5
0x40015de	      0x488b742408	                mov rsi, qword [rsp + 8]	      1566	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	ELSE_5
0x40015e3	        0x48017008	                add qword [rax + 8], rsi	      1566	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	ELSE_5
0x40015e7	      0xe987000000	                           jmp 0x4001673	      1566	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	ELSE_5
0x40015ec	      0x488b442420	            mov rax, qword [rsp + 0x20] 	      1571	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	ELSE_5	ELSE_6
0x40015f1	        0x4c017808	                add qword [rax + 8], r15	      1571	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	ELSE_5	ELSE_6
0x40015f5	            0xeb7c	                           jmp 0x4001673	      1571	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	ELSE_5	ELSE_6
0x40015f7	    0x48817c2408ff	        cmp qword [rsp + 8], 0x7fffffff 	      1578	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x4001600	            0x753e	                           jne 0x4001640	      1578	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x4001602	          0x4889c1	                            mov rcx, rax	      1580	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10	CALL_4
0x4001605	      0x482b4c2410	             sub rcx, qword [rsp + 0x10]	      1580	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10	CALL_4
0x400160a	          0x4c89f2	                            mov rdx, r14	      1580	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10	CALL_4
0x400160d	          0x4829c2	                            sub rdx, rax	      1580	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10	CALL_4
0x4001610	          0x4c89e6	                            mov rsi, r12	      1580	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10	CALL_4
0x4001613	          0x4829c6	                            sub rsi, rax	      1580	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10	CALL_4
0x4001616	        0x4883c710	                           add rdi, 0x10	      1580	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10	CALL_4
0x400161a	        0x4e8d0439	                     lea r8, [rcx + r15]	      1580	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10	CALL_4
0x400161e	      0xb9ffffff7f	                     mov ecx, 0x7fffffff	      1580	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10	CALL_4
0x4001623	      0xe853feffff	          call sym.foldMarkAdjustRecurse	      1580	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10	CALL_4
0x4001628	      0x488b442420	            mov rax, qword [rsp + 0x20] 	      1585	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x400162d	          0x4c89f2	                            mov rdx, r14	      1585	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x4001630	          0x482b10	                    sub rdx, qword [rax]	      1585	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x4001633	        0x4883c201	                              add rdx, 1	      1585	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x4001637	        0x48295008	                sub qword [rax + 8], rdx	      1585	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x400163b	          0x4c8920	                    mov qword [rax], r12	      1586	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x400163e	            0xeb33	                           jmp 0x4001673	      1586	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x4001640	          0x4c89f2	                            mov rdx, r14	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x4001643	          0x4829c2	                            sub rdx, rax	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x4001646	          0x4c89e6	                            mov rsi, r12	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x4001649	          0x4829c6	                            sub rsi, rax	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x400164c	        0x4883c710	                           add rdi, 0x10	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x4001650	      0x488b5c2418	            mov rbx, qword [rsp + 0x18] 	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x4001655	          0x4989d8	                             mov r8, rbx	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x4001658	      0x488b4c2408	                mov rcx, qword [rsp + 8]	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x400165d	      0xe819feffff	          call sym.foldMarkAdjustRecurse	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x4001662	      0x488b442420	            mov rax, qword [rsp + 0x20] 	      1595	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x4001667	        0x48015808	                add qword [rax + 8], rbx	      1595	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x400166b	      0x488b4c2408	                mov rcx, qword [rsp + 8]	      1596	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x4001670	          0x480108	                    add qword [rax], rcx	      1596	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x4001673	          0x83c501	                              add ebp, 1	      1511	fold.c	FUNCTION_46	FOR_1
0x4001676	    0x488344242030	           add qword [rsp + 0x20], 0x30 	      1511	fold.c	FUNCTION_46	FOR_1
0x400167c	        0x41396d00	                    cmp dword [r13], ebp	      1511	fold.c	FUNCTION_46	FOR_1
0x4001680	     0xf8f95feffff	                            jg 0x400151b	      1511	fold.c	FUNCTION_46	FOR_1
0x4001686	      0x488b442428	            mov rax, qword [rsp + 0x28] 	      1602	fold.c	FUNCTION_46
0x400168b	    0x644833042528	                xor rax, qword fs:[0x28]	      1602	fold.c	FUNCTION_46
0x4001694	            0x7405	                            je 0x400169b	      1602	fold.c	FUNCTION_46
0x4001696	      0xe800000000	                          call 0x400169b	      1602	fold.c	FUNCTION_46
0x400169b	        0x4883c438	                           add rsp, 0x38	      1602	fold.c	FUNCTION_46
0x400169f	              0x5b	                                 pop rbx	      1602	fold.c	FUNCTION_46
0x40016a0	              0x5d	                                 pop rbp	      1602	fold.c	FUNCTION_46
0x40016a1	            0x415c	                                 pop r12	      1602	fold.c	FUNCTION_46
0x40016a3	            0x415d	                                 pop r13	      1602	fold.c	FUNCTION_46
0x40016a5	            0x415e	                                 pop r14	      1602	fold.c	FUNCTION_46
0x40016a7	            0x415f	                                 pop r15	      1602	fold.c	FUNCTION_46
0x40016a9	              0xc3	                                     ret	      1602	fold.c	FUNCTION_46
getDeepestNesting	DO,0:ELSE,0:FOR,0:SWITCH,0:IF,0:CALL,2:WHILE,0:functions,0	8
0x4003e05	        0x4883ec08	                              sub rsp, 8	      1611	fold.c	FUNCTION_47
0x4003e09	    0x488b3d000000	            mov rdi, qword [0x04003e10] 	      1612	fold.c	FUNCTION_47	CALL_1
0x4003e10	      0xe86febffff	                    call sym.checkupdate	      1612	fold.c	FUNCTION_47	CALL_1
0x4003e15	    0x488b05000000	            mov rax, qword [0x04003e1c] 	      1613	fold.c	FUNCTION_47	CALL_2
0x4003e1c	    0x488db8080100	                  lea rdi, [rax + 0x108]	      1613	fold.c	FUNCTION_47	CALL_2
0x4003e23	      0xe8e4c3ffff	       call sym.getDeepestNestingRecurse	      1613	fold.c	FUNCTION_47	CALL_2
0x4003e28	        0x4883c408	                              add rsp, 8	      1614	fold.c	FUNCTION_47
0x4003e2c	              0xc3	                                     ret	      1614	fold.c	FUNCTION_47
parseMarker	DO,0:ELSE,0:FOR,0:SWITCH,0:IF,0:CALL,2:WHILE,0:functions,0	18
0x4000463	              0x53	                                push rbx	      3357	fold.c	FUNCTION_70
0x4000464	          0x4889fb	                            mov rbx, rdi	      3357	fold.c	FUNCTION_70
0x4000467	    0x488bbf280200	           mov rdi, qword [rdi + 0x228] 	      3358	fold.c	FUNCTION_70	CALL_1
0x400046e	      0xbe2c000000	                           mov esi, 0x2c	      3358	fold.c	FUNCTION_70	CALL_1
0x4000473	      0xe800000000	                          call 0x4000478	      3358	fold.c	FUNCTION_70	CALL_1
0x4000478	        0x488d7801	                      lea rdi, [rax + 1]	      3359	fold.c	FUNCTION_70
0x400047c	    0x48893d000000	            mov qword [0x04000483], rdi 	      3359	fold.c	FUNCTION_70
0x4000483	    0x482b83280200	            sub rax, qword [rbx + 0x228]	      3359	fold.c	FUNCTION_70
0x400048a	    0x890500000000	            mov dword [0x04000490], eax 	      3359	fold.c	FUNCTION_70
0x4000490	      0xb800000000	                              mov eax, 0	      3360	fold.c	FUNCTION_70	CALL_2
0x4000495	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	      3360	fold.c	FUNCTION_70	CALL_2
0x400049c	            0xf2ae	              repne scasb al, byte [rdi]	      3360	fold.c	FUNCTION_70	CALL_2
0x400049e	          0x4889c8	                            mov rax, rcx	      3360	fold.c	FUNCTION_70	CALL_2
0x40004a1	          0x48f7d0	                                 not rax	      3360	fold.c	FUNCTION_70	CALL_2
0x40004a4	        0x4883e801	                              sub rax, 1	      3360	fold.c	FUNCTION_70	CALL_2
0x40004a8	    0x890500000000	            mov dword [0x040004ae], eax 	      3360	fold.c	FUNCTION_70	CALL_2
0x40004ae	              0x5b	                                 pop rbx	      3361	fold.c	FUNCTION_70
0x40004af	              0xc3	                                     ret	      3361	fold.c	FUNCTION_70
hasFolding	DO,0:ELSE,0:FOR,0:SWITCH,0:IF,0:CALL,1:WHILE,0:functions,0	10
0x4002bd0	        0x4883ec08	                              sub rsp, 8	       131	fold.c	FUNCTION_3
0x4002bd4	    0x41b900000000	                              mov r9d, 0	       132	fold.c	FUNCTION_3	CALL_1
0x4002bda	    0x41b801000000	                              mov r8d, 1	       132	fold.c	FUNCTION_3	CALL_1
0x4002be0	          0x4889d1	                            mov rcx, rdx	       132	fold.c	FUNCTION_3	CALL_1
0x4002be3	          0x4889f2	                            mov rdx, rsi	       132	fold.c	FUNCTION_3	CALL_1
0x4002be6	          0x4889fe	                            mov rsi, rdi	       132	fold.c	FUNCTION_3	CALL_1
0x4002be9	    0x488b3d000000	            mov rdi, qword [0x04002bf0] 	       132	fold.c	FUNCTION_3	CALL_1
0x4002bf0	      0xe800000000	                          call 0x4002bf5	       132	fold.c	FUNCTION_3	CALL_1
0x4002bf5	        0x4883c408	                              add rsp, 8	       133	fold.c	FUNCTION_3
0x4002bf9	              0xc3	                                     ret	       133	fold.c	FUNCTION_3
foldlevelSyntax	DO,0:ELSE,0:FOR,0:SWITCH,0:IF,2:CALL,2:WHILE,0:functions,0	28
0x4000ae0	              0x55	                                push rbp	      3457	fold.c	FUNCTION_72
0x4000ae1	              0x53	                                push rbx	      3457	fold.c	FUNCTION_72
0x4000ae2	        0x4883ec08	                              sub rsp, 8	      3457	fold.c	FUNCTION_72
0x4000ae6	          0x4889fb	                            mov rbx, rdi	      3457	fold.c	FUNCTION_72
0x4000ae9	        0x488b6f10	            mov rbp, qword [rdi + 0x10] 	      3462	fold.c	FUNCTION_72
0x4000aed	        0x48036f08	                add rbp, qword [rdi + 8]	      3462	fold.c	FUNCTION_72
0x4000af1	          0x4889ee	                            mov rsi, rbp	      3466	fold.c	FUNCTION_72	CALL_1
0x4000af4	          0x488b3f	                    mov rdi, qword [rdi]	      3466	fold.c	FUNCTION_72	CALL_1
0x4000af7	      0xe800000000	                          call 0x4000afc	      3466	fold.c	FUNCTION_72	CALL_1
0x4000afc	          0x894320	             mov dword [rbx + 0x20], eax	      3466	fold.c	FUNCTION_72	CALL_1
0x4000aff	    0xc74328000000	               mov dword [rbx + 0x28], 0	      3467	fold.c	FUNCTION_72
0x4000b06	          0x488b3b	                    mov rdi, qword [rbx]	      3468	fold.c	FUNCTION_72	IF_1
0x4000b09	        0x488b4708	                mov rax, qword [rdi + 8]	      3468	fold.c	FUNCTION_72	IF_1
0x4000b0d	          0x483b28	                    cmp rbp, qword [rax]	      3468	fold.c	FUNCTION_72	IF_1
0x4000b10	            0x7d1a	                           jge 0x4000b2c	      3468	fold.c	FUNCTION_72	IF_1
0x4000b12	        0x488d7501	                      lea rsi, [rbp + 1]	      3470	fold.c	FUNCTION_72	IF_1	CALL_2
0x4000b16	      0xe800000000	                          call 0x4000b1b	      3470	fold.c	FUNCTION_72	IF_1	CALL_2
0x4000b1b	          0x8b5320	            mov edx, dword [rbx + 0x20] 	      3471	fold.c	FUNCTION_72	IF_1	IF_2
0x4000b1e	            0x39d0	                            cmp eax, edx	      3471	fold.c	FUNCTION_72	IF_1	IF_2
0x4000b20	            0x7e0a	                           jle 0x4000b2c	      3471	fold.c	FUNCTION_72	IF_1	IF_2
0x4000b22	            0x89c1	                            mov ecx, eax	      3473	fold.c	FUNCTION_72	IF_1	IF_2
0x4000b24	            0x29d1	                            sub ecx, edx	      3473	fold.c	FUNCTION_72	IF_1	IF_2
0x4000b26	          0x894b28	             mov dword [rbx + 0x28], ecx	      3473	fold.c	FUNCTION_72	IF_1	IF_2
0x4000b29	          0x894320	             mov dword [rbx + 0x20], eax	      3474	fold.c	FUNCTION_72	IF_1	IF_2
0x4000b2c	        0x4883c408	                              add rsp, 8	      3478	fold.c	FUNCTION_72
0x4000b30	              0x5b	                                 pop rbx	      3478	fold.c	FUNCTION_72
0x4000b31	              0x5d	                                 pop rbp	      3478	fold.c	FUNCTION_72
0x4000b32	              0xc3	                                     ret	      3478	fold.c	FUNCTION_72
foldInitWin	DO,0:ELSE,0:FOR,0:SWITCH,0:IF,0:CALL,1:WHILE,0:functions,0	7
0x40011d5	        0x4883ec08	                              sub rsp, 8	      1001	fold.c	ELSE_5	FUNCTION_31
0x40011d9	    0x4881c7080100	                          add rdi, 0x108	      1002	fold.c	ELSE_5	FUNCTION_31	CALL_1
0x40011e0	      0xba0a000000	                            mov edx, 0xa	      1002	fold.c	ELSE_5	FUNCTION_31	CALL_1
0x40011e5	      0xbe30000000	                           mov esi, 0x30	      1002	fold.c	ELSE_5	FUNCTION_31	CALL_1
0x40011ea	      0xe800000000	                          call 0x40011ef	      1002	fold.c	ELSE_5	FUNCTION_31	CALL_1
0x40011ef	        0x4883c408	                              add rsp, 8	      1003	fold.c	ELSE_5	FUNCTION_31
0x40011f3	              0xc3	                                     ret	      1003	fold.c	ELSE_5	FUNCTION_31
put_folds	DO,0:ELSE,0:FOR,0:SWITCH,0:IF,3:CALL,4:WHILE,0:functions,0	30
0x4004700	              0x55	                                push rbp	      3493	fold.c	FUNCTION_73
0x4004701	              0x53	                                push rbx	      3493	fold.c	FUNCTION_73
0x4004702	        0x4883ec08	                              sub rsp, 8	      3493	fold.c	FUNCTION_73
0x4004706	          0x4889fd	                            mov rbp, rdi	      3493	fold.c	FUNCTION_73
0x4004709	          0x4889f3	                            mov rbx, rsi	      3493	fold.c	FUNCTION_73
0x400470c	    0x488b86f80100	           mov rax, qword [rsi + 0x1f8] 	       307	fold.c	FUNCTION_8
0x4004713	        0x80780375	                cmp byte [rax + 3], 0x75	      3494	fold.c	FUNCTION_73	IF_1	CALL_1
0x4004717	            0x7526	                           jne 0x400473f	      3494	fold.c	FUNCTION_73	IF_1	CALL_1
0x4004719	      0xbe00000000	                              mov esi, 0	      3496	fold.c	FUNCTION_73	IF_1	IF_2	CALL_2
0x400471e	      0xe800000000	                          call 0x4004723	      3496	fold.c	FUNCTION_73	IF_1	IF_2	CALL_2
0x4004723	            0x85c0	                           test eax, eax	      3496	fold.c	FUNCTION_73	IF_1	IF_2	CALL_2
0x4004725	            0x743d	                            je 0x4004764	      3496	fold.c	FUNCTION_73	IF_1	IF_2	CALL_2
0x4004727	    0x488db3080100	                  lea rsi, [rbx + 0x108]	      3497	fold.c	FUNCTION_73	IF_1	IF_2	CALL_3
0x400472e	      0xba00000000	                              mov edx, 0	      3497	fold.c	FUNCTION_73	IF_1	IF_2	CALL_3
0x4004733	          0x4889ef	                            mov rdi, rbp	      3497	fold.c	FUNCTION_73	IF_1	IF_2	CALL_3
0x4004736	      0xe82fc7ffff	              call sym.put_folds_recurse	      3497	fold.c	FUNCTION_73	IF_1	IF_2	CALL_3
0x400473b	            0x85c0	                           test eax, eax	      3497	fold.c	FUNCTION_73	IF_1	IF_2	CALL_3
0x400473d	            0x7425	                            je 0x4004764	      3497	fold.c	FUNCTION_73	IF_1	IF_2	CALL_3
0x400473f	      0xb801000000	                              mov eax, 1	      3505	fold.c	FUNCTION_73
0x4004744	    0x80bb20010000	               cmp byte [rbx + 0x120], 0	      3502	fold.c	FUNCTION_73	IF_3
0x400474b	            0x7417	                            je 0x4004764	      3502	fold.c	FUNCTION_73	IF_3
0x400474d	    0x488d93080100	                  lea rdx, [rbx + 0x108]	      3503	fold.c	FUNCTION_73	CALL_4
0x4004754	      0xb900000000	                              mov ecx, 0	      3503	fold.c	FUNCTION_73	CALL_4
0x4004759	          0x4889de	                            mov rsi, rbx	      3503	fold.c	FUNCTION_73	CALL_4
0x400475c	          0x4889ef	                            mov rdi, rbp	      3503	fold.c	FUNCTION_73	CALL_4
0x400475f	      0xe829c8ffff	           call sym.put_foldopen_recurse	      3503	fold.c	FUNCTION_73	CALL_4
0x4004764	        0x4883c408	                              add rsp, 8	      3506	fold.c	FUNCTION_73
0x4004768	              0x5b	                                 pop rbx	      3506	fold.c	FUNCTION_73
0x4004769	              0x5d	                                 pop rbp	      3506	fold.c	FUNCTION_73
0x400476a	              0xc3	                                     ret	      3506	fold.c	FUNCTION_73
foldAdjustCursor	DO,0:ELSE,0:FOR,0:SWITCH,0:IF,0:CALL,1:WHILE,0:functions,0	8
0x4002cf9	        0x4883ec08	                              sub rsp, 8	      1073	fold.c	FUNCTION_34
0x4002cfd	    0x488b05000000	            mov rax, qword [0x04002d04] 	      1074	fold.c	FUNCTION_34	CALL_1
0x4002d04	        0x488d7038	                   lea rsi, [rax + 0x38]	      1074	fold.c	FUNCTION_34	CALL_1
0x4002d08	        0x488b7838	            mov rdi, qword [rax + 0x38] 	      1074	fold.c	FUNCTION_34	CALL_1
0x4002d0c	      0xba00000000	                              mov edx, 0	      1074	fold.c	FUNCTION_34	CALL_1
0x4002d11	      0xe800000000	                          call 0x4002d16	      1074	fold.c	FUNCTION_34	CALL_1
0x4002d16	        0x4883c408	                              add rsp, 8	      1075	fold.c	FUNCTION_34
0x4002d1a	              0xc3	                                     ret	      1075	fold.c	FUNCTION_34
deleteFoldMarkers	DO,0:ELSE,0:FOR,1:SWITCH,0:IF,1:CALL,3:WHILE,0:functions,0	38
0x4000980	            0x4154	                                push r12	      1801	fold.c	FUNCTION_54
0x4000982	              0x55	                                push rbp	      1801	fold.c	FUNCTION_54
0x4000983	              0x53	                                push rbx	      1801	fold.c	FUNCTION_54
0x4000984	          0x4889fd	                            mov rbp, rdi	      1801	fold.c	FUNCTION_54
0x4000987	          0x4989d4	                            mov r12, rdx	      1801	fold.c	FUNCTION_54
0x400098a	            0x85f6	                           test esi, esi	      1804	fold.c	FUNCTION_54	IF_1
0x400098c	            0x7433	                            je 0x40009c1	      1804	fold.c	FUNCTION_54	IF_1
0x400098e	        0x837f1000	               cmp dword [rdi + 0x10], 0	      1805	fold.c	FUNCTION_54	IF_1	FOR_1
0x4000992	            0x7e2d	                           jle 0x40009c1	      1805	fold.c	FUNCTION_54	IF_1	FOR_1
0x4000994	      0xbb00000000	                              mov ebx, 0	      1805	fold.c	FUNCTION_54	IF_1	FOR_1
0x4000999	          0x4c89e2	                            mov rdx, r12	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x400099c	        0x48035500	                    add rdx, qword [rbp]	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x40009a0	          0x4863c3	                         movsxd rax, ebx	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x40009a3	        0x488d3c40	                  lea rdi, [rax + rax*2]	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x40009a7	        0x48c1e704	                              shl rdi, 4	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x40009ab	        0x48037d20	             add rdi, qword [rbp + 0x20]	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x40009af	      0xbe01000000	                              mov esi, 1	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x40009b4	      0xe8c7ffffff	              call sym.deleteFoldMarkers	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x40009b9	          0x83c301	                              add ebx, 1	      1805	fold.c	FUNCTION_54	IF_1	FOR_1
0x40009bc	          0x395d10	            cmp dword [rbp + 0x10], ebx 	      1805	fold.c	FUNCTION_54	IF_1	FOR_1
0x40009bf	            0x7fd8	                            jg 0x4000999	      1805	fold.c	FUNCTION_54	IF_1	FOR_1
0x40009c1	    0x488b05000000	            mov rax, qword [0x040009c8] 	      1808	fold.c	FUNCTION_54	CALL_2
0x40009c8	    0x488bb0280200	           mov rsi, qword [rax + 0x228] 	      1808	fold.c	FUNCTION_54	CALL_2
0x40009cf	          0x4c89e7	                            mov rdi, r12	      1808	fold.c	FUNCTION_54	CALL_2
0x40009d2	        0x48037d00	                    add rdi, qword [rbp]	      1808	fold.c	FUNCTION_54	CALL_2
0x40009d6	    0x8b1500000000	            mov edx, dword [0x040009dc] 	      1808	fold.c	FUNCTION_54	CALL_2
0x40009dc	      0xe81efeffff	                  call sym.foldDelMarker	      1808	fold.c	FUNCTION_54	CALL_2
0x40009e1	          0x4c89e7	                            mov rdi, r12	      1809	fold.c	FUNCTION_54	CALL_3
0x40009e4	        0x48037d00	                    add rdi, qword [rbp]	      1809	fold.c	FUNCTION_54	CALL_3
0x40009e8	        0x48037d08	                add rdi, qword [rbp + 8]	      1809	fold.c	FUNCTION_54	CALL_3
0x40009ec	        0x4883ef01	                              sub rdi, 1	      1809	fold.c	FUNCTION_54	CALL_3
0x40009f0	    0x8b1500000000	            mov edx, dword [0x040009f6] 	      1809	fold.c	FUNCTION_54	CALL_3
0x40009f6	    0x488b35000000	            mov rsi, qword [0x040009fd] 	      1809	fold.c	FUNCTION_54	CALL_3
0x40009fd	      0xe8fdfdffff	                  call sym.foldDelMarker	      1809	fold.c	FUNCTION_54	CALL_3
0x4000a02	              0x5b	                                 pop rbx	      1811	fold.c	FUNCTION_54
0x4000a03	              0x5d	                                 pop rbp	      1811	fold.c	FUNCTION_54
0x4000a04	            0x415c	                                 pop r12	      1811	fold.c	FUNCTION_54
0x4000a06	              0xc3	                                     ret	      1811	fold.c	FUNCTION_54
deleteFoldRecurse	DO,0:ELSE,0:FOR,1:SWITCH,0:IF,0:CALL,2:WHILE,0:functions,0	22
0x400130a	              0x55	                                push rbp	      1453	fold.c	FUNCTION_44
0x400130b	              0x53	                                push rbx	      1453	fold.c	FUNCTION_44
0x400130c	        0x4883ec08	                              sub rsp, 8	      1453	fold.c	FUNCTION_44
0x4001310	          0x4889fd	                            mov rbp, rdi	      1453	fold.c	FUNCTION_44
0x4001313	          0x833f00	                      cmp dword [rdi], 0	      1456	fold.c	FUNCTION_44	FOR_1
0x4001316	            0x7e25	                           jle 0x400133d	      1456	fold.c	FUNCTION_44	FOR_1
0x4001318	      0xbb00000000	                              mov ebx, 0	      1456	fold.c	FUNCTION_44	FOR_1
0x400131d	          0x4863c3	                         movsxd rax, ebx	      1457	fold.c	FUNCTION_44	CALL_1
0x4001320	        0x488d3c40	                  lea rdi, [rax + rax*2]	      1457	fold.c	FUNCTION_44	CALL_1
0x4001324	        0x48c1e704	                              shl rdi, 4	      1457	fold.c	FUNCTION_44	CALL_1
0x4001328	        0x48037d10	             add rdi, qword [rbp + 0x10]	      1457	fold.c	FUNCTION_44	CALL_1
0x400132c	        0x4883c710	                           add rdi, 0x10	      1457	fold.c	FUNCTION_44	CALL_1
0x4001330	      0xe800000000	                          call 0x4001335	      1457	fold.c	FUNCTION_44	CALL_1
0x4001335	          0x83c301	                              add ebx, 1	      1456	fold.c	FUNCTION_44	FOR_1
0x4001338	          0x395d00	                    cmp dword [rbp], ebx	      1456	fold.c	FUNCTION_44	FOR_1
0x400133b	            0x7fe0	                            jg 0x400131d	      1456	fold.c	FUNCTION_44	FOR_1
0x400133d	          0x4889ef	                            mov rdi, rbp	      1458	fold.c	FUNCTION_44	CALL_2
0x4001340	      0xe800000000	                          call 0x4001345	      1458	fold.c	FUNCTION_44	CALL_2
0x4001345	        0x4883c408	                              add rsp, 8	      1459	fold.c	FUNCTION_44
0x4001349	              0x5b	                                 pop rbx	      1459	fold.c	FUNCTION_44
0x400134a	              0x5d	                                 pop rbp	      1459	fold.c	FUNCTION_44
0x400134b	              0xc3	                                     ret	      1459	fold.c	FUNCTION_44
foldMoveRange	DO,0:ELSE,4:FOR,2:SWITCH,0:IF,12:CALL,11:WHILE,0:functions,0	204
0x4004414	            0x4157	                                push r15	      3036	fold.c	FUNCTION_65
0x4004416	            0x4156	                                push r14	      3036	fold.c	FUNCTION_65
0x4004418	            0x4155	                                push r13	      3036	fold.c	FUNCTION_65
0x400441a	            0x4154	                                push r12	      3036	fold.c	FUNCTION_65
0x400441c	              0x55	                                push rbp	      3036	fold.c	FUNCTION_65
0x400441d	              0x53	                                push rbx	      3036	fold.c	FUNCTION_65
0x400441e	        0x4883ec28	                           sub rsp, 0x28	      3036	fold.c	FUNCTION_65
0x4004422	          0x4889fb	                            mov rbx, rdi	      3036	fold.c	FUNCTION_65
0x4004425	          0x4889f5	                            mov rbp, rsi	      3036	fold.c	FUNCTION_65
0x4004428	          0x4989d6	                            mov r14, rdx	      3036	fold.c	FUNCTION_65
0x400442b	          0x4989cc	                            mov r12, rcx	      3036	fold.c	FUNCTION_65
0x400442e	    0x64488b042528	                mov rax, qword fs:[0x28]	      3036	fold.c	FUNCTION_65
0x4004437	      0x4889442418	             mov qword [rsp + 0x18], rax	      3036	fold.c	FUNCTION_65
0x400443c	            0x31c0	                            xor eax, eax	      3036	fold.c	FUNCTION_65
0x400443e	          0x4989d5	                            mov r13, rdx	      3038	fold.c	FUNCTION_65
0x4004441	          0x4929f5	                            sub r13, rsi	      3038	fold.c	FUNCTION_65
0x4004444	        0x4983c501	                              add r13, 1	      3038	fold.c	FUNCTION_65
0x4004448	        0x4c8d7eff	                      lea r15, [rsi - 1]	      3040	fold.c	FUNCTION_65	CALL_1
0x400444c	      0x488d542410	                   lea rdx, [rsp + 0x10]	      3040	fold.c	FUNCTION_65	CALL_1
0x4004451	          0x4c89fe	                            mov rsi, r15	      3040	fold.c	FUNCTION_65	CALL_1
0x4004454	      0xe887bcffff	                       call sym.foldFind	      3040	fold.c	FUNCTION_65	CALL_1
0x4004459	            0x85c0	                           test eax, eax	      3043	fold.c	FUNCTION_65	IF_1
0x400445b	            0x7476	                            je 0x40044d3	      3043	fold.c	FUNCTION_65	IF_1
0x400445d	      0x488b7c2410	            mov rdi, qword [rsp + 0x10] 	      3045	fold.c	FUNCTION_65	IF_1	IF_2
0x4004462	          0x488b37	                    mov rsi, qword [rdi]	      3045	fold.c	FUNCTION_65	IF_1	IF_2
0x4004465	          0x4889f0	                            mov rax, rsi	      3045	fold.c	FUNCTION_65	IF_1	IF_2
0x4004468	        0x48034708	                add rax, qword [rdi + 8]	      3045	fold.c	FUNCTION_65	IF_1	IF_2
0x400446c	        0x4883e801	                              sub rax, 1	      3045	fold.c	FUNCTION_65	IF_1	IF_2
0x4004470	          0x4939c4	                            cmp r12, rax	      3045	fold.c	FUNCTION_65	IF_1	IF_2
0x4004473	            0x7d20	                           jge 0x4004495	      3045	fold.c	FUNCTION_65	IF_1	IF_2
0x4004475	          0x4c89e1	                            mov rcx, r12	      3050	fold.c	FUNCTION_65	IF_1	IF_2	CALL_2
0x4004478	          0x4829f1	                            sub rcx, rsi	      3050	fold.c	FUNCTION_65	IF_1	IF_2	CALL_2
0x400447b	          0x4c89f2	                            mov rdx, r14	      3050	fold.c	FUNCTION_65	IF_1	IF_2	CALL_2
0x400447e	          0x4829f2	                            sub rdx, rsi	      3050	fold.c	FUNCTION_65	IF_1	IF_2	CALL_2
0x4004481	          0x4829f5	                            sub rbp, rsi	      3050	fold.c	FUNCTION_65	IF_1	IF_2	CALL_2
0x4004484	          0x4889ee	                            mov rsi, rbp	      3050	fold.c	FUNCTION_65	IF_1	IF_2	CALL_2
0x4004487	        0x4883c710	                           add rdi, 0x10	      3050	fold.c	FUNCTION_65	IF_1	IF_2	CALL_2
0x400448b	      0xe800000000	                          call 0x4004490	      3050	fold.c	FUNCTION_65	IF_1	IF_2	CALL_2
0x4004490	      0xe947020000	                           jmp 0x40046dc	      3052	fold.c	FUNCTION_65	IF_1	IF_2
0x4004495	          0x4939c6	                            cmp r14, rax	      3054	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3
0x4004498	            0x7d2b	                           jge 0x40044c5	      3054	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3
0x400449a	          0x4c89f2	                            mov rdx, r14	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_3
0x400449d	          0x4829f2	                            sub rdx, rsi	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_3
0x40044a0	          0x4829f5	                            sub rbp, rsi	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_3
0x40044a3	          0x4889ee	                            mov rsi, rbp	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_3
0x40044a6	        0x4883c710	                           add rdi, 0x10	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_3
0x40044aa	          0x4d89e8	                             mov r8, r13	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_3
0x40044ad	          0x49f7d8	                                  neg r8	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_3
0x40044b0	      0xb9ffffff7f	                     mov ecx, 0x7fffffff	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_3
0x40044b5	      0xe8c1cfffff	          call sym.foldMarkAdjustRecurse	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_3
0x40044ba	      0x488b442410	            mov rax, qword [rsp + 0x10] 	      3063	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3
0x40044bf	        0x4c296808	                sub qword [rax + 8], r13	      3063	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3
0x40044c3	            0xeb08	                           jmp 0x40044cd	      3063	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3
0x40044c5	          0x4c89fe	                            mov rsi, r15	      3067	fold.c	FUNCTION_65	IF_1	CALL_4
0x40044c8	      0xe8c0d4ffff	                  call sym.truncate_fold	      3067	fold.c	FUNCTION_65	IF_1	CALL_4
0x40044cd	    0x488344241030	           add qword [rsp + 0x10], 0x30 	      3071	fold.c	FUNCTION_65	IF_1
0x40044d3	        0x4c8b7b10	            mov r15, qword [rbx + 0x10] 	      3074	fold.c	FUNCTION_65	IF_4
0x40044d7	      0x488b6c2410	            mov rbp, qword [rsp + 0x10] 	      3074	fold.c	FUNCTION_65	IF_4
0x40044dc	          0x486303	                 movsxd rax, dword [rbx]	      3074	fold.c	FUNCTION_65	IF_4
0x40044df	        0x488d0440	                  lea rax, [rax + rax*2]	      3074	fold.c	FUNCTION_65	IF_4
0x40044e3	        0x48c1e004	                              shl rax, 4	      3074	fold.c	FUNCTION_65	IF_4
0x40044e7	          0x4c01f8	                            add rax, r15	      3074	fold.c	FUNCTION_65	IF_4
0x40044ea	          0x4839c5	                            cmp rbp, rax	      3074	fold.c	FUNCTION_65	IF_4
0x40044ed	     0xf83e9010000	                           jae 0x40046dc	      3074	fold.c	FUNCTION_65	IF_4
0x40044f3	        0x488b4500	                    mov rax, qword [rbp]	      3074	fold.c	FUNCTION_65	IF_4
0x40044f7	          0x4939c4	                            cmp r12, rax	      3074	fold.c	FUNCTION_65	IF_4
0x40044fa	     0xf8cdc010000	                            jl 0x40046dc	      3074	fold.c	FUNCTION_65	IF_4
0x4004500	          0x4939c6	                            cmp r14, rax	      3081	fold.c	FUNCTION_65	ELSE_3	IF_5
0x4004503	            0x7d6e	                           jge 0x4004573	      3081	fold.c	FUNCTION_65	ELSE_3	IF_5
0x4004505	          0x4889c2	                            mov rdx, rax	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4004508	        0x48035508	                add rdx, qword [rbp + 8]	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x400450c	        0x4883ea01	                              sub rdx, 1	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4004510	          0x4939d4	                            cmp r12, rdx	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4004513	            0x7c46	                            jl 0x400455b	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4004515	          0x4c29e8	                            sub rax, r13	      3085	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4004518	        0x48894500	                    mov qword [rbp], rax	      3085	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x400451c	      0x488b542410	            mov rdx, qword [rsp + 0x10] 	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4004521	        0x488d6a30	                   lea rbp, [rdx + 0x30]	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4004525	      0x48896c2410	             mov qword [rsp + 0x10], rbp	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x400452a	          0x486303	                 movsxd rax, dword [rbx]	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x400452d	        0x488d0440	                  lea rax, [rax + rax*2]	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4004531	        0x48c1e004	                              shl rax, 4	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4004535	        0x48034310	             add rax, qword [rbx + 0x10]	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4004539	          0x4839c5	                            cmp rbp, rax	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x400453c	     0xf839a010000	                           jae 0x40046dc	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4004542	        0x488b4230	            mov rax, qword [rdx + 0x30] 	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4004546	          0x4889c1	                            mov rcx, rax	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4004549	        0x48034a38	             add rcx, qword [rdx + 0x38]	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x400454d	        0x4883e901	                              sub rcx, 1	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4004551	          0x4939cc	                            cmp r12, rcx	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4004554	            0x7dbf	                           jge 0x4004515	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4004556	      0xe977010000	                           jmp 0x40046d2	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x400455b	          0x4c89e6	                            mov rsi, r12	      3090	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6	CALL_5
0x400455e	          0x4889ef	                            mov rdi, rbp	      3090	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6	CALL_5
0x4004561	      0xe827d4ffff	                  call sym.truncate_fold	      3090	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6	CALL_5
0x4004566	      0x488b442410	            mov rax, qword [rsp + 0x10] 	      3091	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6
0x400456b	          0x4c2928	                    sub qword [rax], r13	      3091	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6
0x400456e	      0xe969010000	                           jmp 0x40046dc	      3091	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6
0x4004573	          0x4c89e6	                            mov rsi, r12	      3039	fold.c	FUNCTION_65
0x4004576	          0x4c29f6	                            sub rsi, r14	      3039	fold.c	FUNCTION_65
0x4004579	      0x4889742408	                mov qword [rsp + 8], rsi	      3039	fold.c	FUNCTION_65
0x400457e	          0x4889c2	                            mov rdx, rax	      3095	fold.c	FUNCTION_65	ELSE_4	IF_7
0x4004581	        0x48035508	                add rdx, qword [rbp + 8]	      3095	fold.c	FUNCTION_65	ELSE_4	IF_7
0x4004585	        0x4883ea01	                              sub rdx, 1	      3095	fold.c	FUNCTION_65	ELSE_4	IF_7
0x4004589	          0x4939d4	                            cmp r12, rdx	      3095	fold.c	FUNCTION_65	ELSE_4	IF_7
0x400458c	            0x7d37	                           jge 0x40045c5	      3095	fold.c	FUNCTION_65	ELSE_4	IF_7
0x400458e	          0x4c89e2	                            mov rdx, r12	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_6
0x4004591	          0x4829c2	                            sub rdx, rax	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_6
0x4004594	        0x498d7601	                      lea rsi, [r14 + 1]	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_6
0x4004598	          0x4829c6	                            sub rsi, rax	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_6
0x400459b	        0x488d7d10	                   lea rdi, [rbp + 0x10]	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_6
0x400459f	      0x488b5c2408	                mov rbx, qword [rsp + 8]	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_6
0x40045a4	          0x4989d8	                             mov r8, rbx	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_6
0x40045a7	          0x49f7d8	                                  neg r8	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_6
0x40045aa	      0xb9ffffff7f	                     mov ecx, 0x7fffffff	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_6
0x40045af	      0xe8c7ceffff	          call sym.foldMarkAdjustRecurse	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_6
0x40045b4	      0x488b442410	            mov rax, qword [rsp + 0x10] 	      3100	fold.c	FUNCTION_65	ELSE_4	IF_7
0x40045b9	        0x48295808	                sub qword [rax + 8], rbx	      3100	fold.c	FUNCTION_65	ELSE_4	IF_7
0x40045bd	          0x480118	                    add qword [rax], rbx	      3101	fold.c	FUNCTION_65	ELSE_4	IF_7
0x40045c0	      0xe917010000	                           jmp 0x40046dc	      3102	fold.c	FUNCTION_65	ELSE_4	IF_7
0x40045c5	          0x4889ef	                            mov rdi, rbp	      3102	fold.c	FUNCTION_65	ELSE_4	IF_7
0x40045c8	          0x4c89f9	                            mov rcx, r15	      3102	fold.c	FUNCTION_65	ELSE_4	IF_7
0x40045cb	    0x48c704240000	                      mov qword [rsp], 0	      3102	fold.c	FUNCTION_65	ELSE_4	IF_7
0x40045d3	          0x4939c6	                            cmp r14, rax	      3113	fold.c	FUNCTION_65	FOR_2	IF_8
0x40045d6	            0x7c24	                            jl 0x40045fc	      3113	fold.c	FUNCTION_65	FOR_2	IF_8
0x40045d8	        0x48034708	                add rax, qword [rdi + 8]	      3116	fold.c	FUNCTION_65	FOR_2	IF_8	IF_9
0x40045dc	        0x4883e801	                              sub rax, 1	      3116	fold.c	FUNCTION_65	FOR_2	IF_8	IF_9
0x40045e0	          0x4939c6	                            cmp r14, rax	      3116	fold.c	FUNCTION_65	FOR_2	IF_8	IF_9
0x40045e3	            0x7d08	                           jge 0x40045ed	      3116	fold.c	FUNCTION_65	FOR_2	IF_8	IF_9
0x40045e5	          0x4c89f6	                            mov rsi, r14	      3118	fold.c	FUNCTION_65	FOR_2	IF_8	CALL_7
0x40045e8	      0xe8a0d3ffff	                  call sym.truncate_fold	      3118	fold.c	FUNCTION_65	FOR_2	IF_8	CALL_7
0x40045ed	      0x488b442410	            mov rax, qword [rsp + 0x10] 	      3120	fold.c	FUNCTION_65	FOR_2	IF_8
0x40045f2	      0x488b742408	                mov rsi, qword [rsp + 8]	      3120	fold.c	FUNCTION_65	FOR_2	IF_8
0x40045f7	          0x480130	                    add qword [rax], rsi	      3120	fold.c	FUNCTION_65	FOR_2	IF_8
0x40045fa	            0xeb40	                           jmp 0x400463c	      3121	fold.c	FUNCTION_65	FOR_2	IF_8
0x40045fc	      0x48833c2400	                      cmp qword [rsp], 0	      3125	fold.c	FUNCTION_65	FOR_2	IF_10
0x4004601	            0x751c	                           jne 0x400461f	      3125	fold.c	FUNCTION_65	FOR_2	IF_10
0x4004603	          0x4889fa	                            mov rdx, rdi	      3126	fold.c	FUNCTION_65	FOR_2	IF_10
0x4004606	          0x4829ca	                            sub rdx, rcx	      3126	fold.c	FUNCTION_65	FOR_2	IF_10
0x4004609	        0x48c1fa04	                              sar rdx, 4	      3126	fold.c	FUNCTION_65	FOR_2	IF_10
0x400460d	    0x48beabaaaaaa	          movabs rsi, 0xaaaaaaaaaaaaaaab	      3126	fold.c	FUNCTION_65	FOR_2	IF_10
0x4004617	        0x480fafd6	                           imul rdx, rsi	      3126	fold.c	FUNCTION_65	FOR_2	IF_10
0x400461b	        0x48891424	                    mov qword [rsp], rdx	      3126	fold.c	FUNCTION_65	FOR_2	IF_10
0x400461f	        0x48034708	                add rax, qword [rdi + 8]	      3128	fold.c	FUNCTION_65	FOR_2	IF_11
0x4004623	        0x4883e801	                              sub rax, 1	      3128	fold.c	FUNCTION_65	FOR_2	IF_11
0x4004627	          0x4939c4	                            cmp r12, rax	      3128	fold.c	FUNCTION_65	FOR_2	IF_11
0x400462a	            0x7d08	                           jge 0x4004634	      3128	fold.c	FUNCTION_65	FOR_2	IF_11
0x400462c	          0x4c89e6	                            mov rsi, r12	      3129	fold.c	FUNCTION_65	FOR_2	CALL_8
0x400462f	      0xe859d3ffff	                  call sym.truncate_fold	      3129	fold.c	FUNCTION_65	FOR_2	CALL_8
0x4004634	      0x488b442410	            mov rax, qword [rsp + 0x10] 	      3131	fold.c	FUNCTION_65	FOR_2
0x4004639	          0x4c2928	                    sub qword [rax], r13	      3131	fold.c	FUNCTION_65	FOR_2
0x400463c	      0x488b542410	            mov rdx, qword [rsp + 0x10] 	      3111	fold.c	FUNCTION_65	FOR_2
0x4004641	        0x488d7a30	                   lea rdi, [rdx + 0x30]	      3111	fold.c	FUNCTION_65	FOR_2
0x4004645	      0x48897c2410	             mov qword [rsp + 0x10], rdi	      3111	fold.c	FUNCTION_65	FOR_2
0x400464a	        0x488b4b10	            mov rcx, qword [rbx + 0x10] 	      3111	fold.c	FUNCTION_65	FOR_2
0x400464e	          0x486303	                 movsxd rax, dword [rbx]	      3111	fold.c	FUNCTION_65	FOR_2
0x4004651	        0x488d0440	                  lea rax, [rax + rax*2]	      3111	fold.c	FUNCTION_65	FOR_2
0x4004655	        0x48c1e004	                              shl rax, 4	      3111	fold.c	FUNCTION_65	FOR_2
0x4004659	          0x4801c8	                            add rax, rcx	      3111	fold.c	FUNCTION_65	FOR_2
0x400465c	          0x4839c7	                            cmp rdi, rax	      3111	fold.c	FUNCTION_65	FOR_2
0x400465f	            0x730d	                           jae 0x400466e	      3111	fold.c	FUNCTION_65	FOR_2
0x4004661	        0x488b4230	            mov rax, qword [rdx + 0x30] 	      3111	fold.c	FUNCTION_65	FOR_2
0x4004665	          0x4939c4	                            cmp r12, rax	      3111	fold.c	FUNCTION_65	FOR_2
0x4004668	     0xf8d65ffffff	                           jge 0x40045d3	      3111	fold.c	FUNCTION_65	FOR_2
0x400466e	      0x48833c2400	                      cmp qword [rsp], 0	      3141	fold.c	FUNCTION_65	IF_12
0x4004673	            0x7467	                            je 0x40046dc	      3141	fold.c	FUNCTION_65	IF_12
0x4004675	          0x4c29fd	                            sub rbp, r15	      3109	fold.c	FUNCTION_65
0x4004678	        0x48c1fd04	                              sar rbp, 4	      3109	fold.c	FUNCTION_65
0x400467c	    0x49bcabaaaaaa	          movabs r12, 0xaaaaaaaaaaaaaaab	      3109	fold.c	FUNCTION_65
0x4004686	        0x490fafec	                           imul rbp, r12	      3109	fold.c	FUNCTION_65
0x400468a	          0x4829cf	                            sub rdi, rcx	      3134	fold.c	FUNCTION_65
0x400468d	        0x48c1ff04	                              sar rdi, 4	      3134	fold.c	FUNCTION_65
0x4004691	        0x4c0fafe7	                           imul r12, rdi	      3134	fold.c	FUNCTION_65
0x4004695	      0x4d8d6c24ff	                      lea r13, [r12 - 1]	      3145	fold.c	FUNCTION_65	CALL_9
0x400469a	          0x4c89ea	                            mov rdx, r13	      3145	fold.c	FUNCTION_65	CALL_9
0x400469d	          0x4889ee	                            mov rsi, rbp	      3145	fold.c	FUNCTION_65	CALL_9
0x40046a0	          0x4889df	                            mov rdi, rbx	      3145	fold.c	FUNCTION_65	CALL_9
0x40046a3	      0xe8b2bbffff	               call sym.foldReverseOrder	      3145	fold.c	FUNCTION_65	CALL_9
0x40046a8	          0x4889e8	                            mov rax, rbp	      3147	fold.c	FUNCTION_65
0x40046ab	        0x482b0424	                    sub rax, qword [rsp]	      3147	fold.c	FUNCTION_65
0x40046af	          0x4901c4	                            add r12, rax	      3147	fold.c	FUNCTION_65
0x40046b2	      0x498d5424ff	                      lea rdx, [r12 - 1]	      3146	fold.c	FUNCTION_65	CALL_10
0x40046b7	          0x4889ee	                            mov rsi, rbp	      3146	fold.c	FUNCTION_65	CALL_10
0x40046ba	          0x4889df	                            mov rdi, rbx	      3146	fold.c	FUNCTION_65	CALL_10
0x40046bd	      0xe898bbffff	               call sym.foldReverseOrder	      3146	fold.c	FUNCTION_65	CALL_10
0x40046c2	          0x4c89ea	                            mov rdx, r13	      3148	fold.c	FUNCTION_65	CALL_11
0x40046c5	          0x4c89e6	                            mov rsi, r12	      3148	fold.c	FUNCTION_65	CALL_11
0x40046c8	          0x4889df	                            mov rdi, rbx	      3148	fold.c	FUNCTION_65	CALL_11
0x40046cb	      0xe88abbffff	               call sym.foldReverseOrder	      3148	fold.c	FUNCTION_65	CALL_11
0x40046d0	            0xeb0a	                           jmp 0x40046dc	      3148	fold.c	FUNCTION_65	CALL_11
0x40046d2	        0x4c3b6230	            cmp r12, qword [rdx + 0x30] 	      3087	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6
0x40046d6	     0xf8d7ffeffff	                           jge 0x400455b	      3087	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6
0x40046dc	      0x488b442418	            mov rax, qword [rsp + 0x18] 	      3150	fold.c	FUNCTION_65
0x40046e1	    0x644833042528	                xor rax, qword fs:[0x28]	      3150	fold.c	FUNCTION_65
0x40046ea	            0x7405	                            je 0x40046f1	      3150	fold.c	FUNCTION_65
0x40046ec	      0xe800000000	                          call 0x40046f1	      3150	fold.c	FUNCTION_65
0x40046f1	        0x4883c428	                           add rsp, 0x28	      3150	fold.c	FUNCTION_65
0x40046f5	              0x5b	                                 pop rbx	      3150	fold.c	FUNCTION_65
0x40046f6	              0x5d	                                 pop rbp	      3150	fold.c	FUNCTION_65
0x40046f7	            0x415c	                                 pop r12	      3150	fold.c	FUNCTION_65
0x40046f9	            0x415d	                                 pop r13	      3150	fold.c	FUNCTION_65
0x40046fb	            0x415e	                                 pop r14	      3150	fold.c	FUNCTION_65
0x40046fd	            0x415f	                                 pop r15	      3150	fold.c	FUNCTION_65
0x40046ff	              0xc3	                                     ret	      3150	fold.c	FUNCTION_65
checkCloseRec	DO,0:ELSE,1:FOR,1:SWITCH,0:IF,2:CALL,1:WHILE,0:functions,0	54
0x4000040	            0x4157	                                push r15	       527	fold.c	FUNCTION_23
0x4000042	            0x4156	                                push r14	       527	fold.c	FUNCTION_23
0x4000044	            0x4155	                                push r13	       527	fold.c	FUNCTION_23
0x4000046	            0x4154	                                push r12	       527	fold.c	FUNCTION_23
0x4000048	              0x55	                                push rbp	       527	fold.c	FUNCTION_23
0x4000049	              0x53	                                push rbx	       527	fold.c	FUNCTION_23
0x400004a	        0x4883ec18	                           sub rsp, 0x18	       527	fold.c	FUNCTION_23
0x400004e	        0x4c8b6710	            mov r12, qword [rdi + 0x10] 	       532	fold.c	FUNCTION_23
0x4000052	          0x833f00	                      cmp dword [rdi], 0	       533	fold.c	FUNCTION_23	FOR_1
0x4000055	            0x7e71	                           jle 0x40000c8	       533	fold.c	FUNCTION_23	FOR_1
0x4000057	          0x4189d7	                           mov r15d, edx	       533	fold.c	FUNCTION_23	FOR_1
0x400005a	          0x4989f6	                            mov r14, rsi	       533	fold.c	FUNCTION_23	FOR_1
0x400005d	          0x4889fd	                            mov rbp, rdi	       533	fold.c	FUNCTION_23	FOR_1
0x4000060	      0xbb00000000	                              mov ebx, 0	       533	fold.c	FUNCTION_23	FOR_1
0x4000065	    0x41bd00000000	                             mov r13d, 0	       533	fold.c	FUNCTION_23	FOR_1
0x400006b	          0x8d42ff	                      lea eax, [rdx - 1]	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x400006e	        0x8944240c	              mov dword [rsp + 0xc], eax	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x4000072	          0x4863c3	                         movsxd rax, ebx	       536	fold.c	FUNCTION_23	FOR_1	IF_1
0x4000075	        0x488d3c40	                  lea rdi, [rax + rax*2]	       536	fold.c	FUNCTION_23	FOR_1	IF_1
0x4000079	        0x48c1e704	                              shl rdi, 4	       536	fold.c	FUNCTION_23	FOR_1	IF_1
0x400007d	          0x4c01e7	                            add rdi, r12	       536	fold.c	FUNCTION_23	FOR_1	IF_1
0x4000080	        0x807f2800	                cmp byte [rdi + 0x28], 0	       536	fold.c	FUNCTION_23	FOR_1	IF_1
0x4000084	            0x7538	                           jne 0x40000be	       536	fold.c	FUNCTION_23	FOR_1	IF_1
0x4000086	          0x4585ff	                         test r15d, r15d	       538	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000089	            0x7f1d	                            jg 0x40000a8	       538	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x400008b	          0x488b07	                    mov rax, qword [rdi]	       538	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x400008e	          0x4c39f0	                            cmp rax, r14	       538	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000091	            0x7f09	                            jg 0x400009c	       538	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000093	        0x48034708	                add rax, qword [rdi + 8]	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000097	          0x4939c6	                            cmp r14, rax	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x400009a	            0x7c0c	                            jl 0x40000a8	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x400009c	        0xc6472802	                mov byte [rdi + 0x28], 2	       541	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x40000a0	    0x41bd01000000	                             mov r13d, 1	       542	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x40000a6	            0xeb16	                           jmp 0x40000be	       542	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x40000a8	          0x4c89f6	                            mov rsi, r14	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x40000ab	          0x482b37	                    sub rsi, qword [rdi]	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x40000ae	        0x4883c710	                           add rdi, 0x10	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x40000b2	        0x8b54240c	              mov edx, dword [rsp + 0xc]	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x40000b6	      0xe885ffffff	                  call sym.checkCloseRec	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x40000bb	          0x4109c5	                            or r13d, eax	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x40000be	          0x83c301	                              add ebx, 1	       533	fold.c	FUNCTION_23	FOR_1
0x40000c1	          0x395d00	                    cmp dword [rbp], ebx	       533	fold.c	FUNCTION_23	FOR_1
0x40000c4	            0x7fac	                            jg 0x4000072	       533	fold.c	FUNCTION_23	FOR_1
0x40000c6	            0xeb06	                           jmp 0x40000ce	       533	fold.c	FUNCTION_23	FOR_1
0x40000c8	    0x41bd00000000	                             mov r13d, 0	       529	fold.c	FUNCTION_23
0x40000ce	          0x4489e8	                           mov eax, r13d	       550	fold.c	FUNCTION_23
0x40000d1	        0x4883c418	                           add rsp, 0x18	       550	fold.c	FUNCTION_23
0x40000d5	              0x5b	                                 pop rbx	       550	fold.c	FUNCTION_23
0x40000d6	              0x5d	                                 pop rbp	       550	fold.c	FUNCTION_23
0x40000d7	            0x415c	                                 pop r12	       550	fold.c	FUNCTION_23
0x40000d9	            0x415d	                                 pop r13	       550	fold.c	FUNCTION_23
0x40000db	            0x415e	                                 pop r14	       550	fold.c	FUNCTION_23
0x40000dd	            0x415f	                                 pop r15	       550	fold.c	FUNCTION_23
0x40000df	              0xc3	                                     ret	       550	fold.c	FUNCTION_23
foldLevelWin	DO,0:ELSE,0:FOR,1:SWITCH,0:IF,1:CALL,1:WHILE,0:functions,0	28
0x400015f	              0x55	                                push rbp	      1159	fold.c	FUNCTION_37
0x4000160	              0x53	                                push rbx	      1159	fold.c	FUNCTION_37
0x4000161	        0x4883ec18	                           sub rsp, 0x18	      1159	fold.c	FUNCTION_37
0x4000165	          0x4889f3	                            mov rbx, rsi	      1159	fold.c	FUNCTION_37
0x4000168	    0x64488b042528	                mov rax, qword fs:[0x28]	      1159	fold.c	FUNCTION_37
0x4000171	      0x4889442408	                mov qword [rsp + 8], rax	      1159	fold.c	FUNCTION_37
0x4000176	            0x31c0	                            xor eax, eax	      1159	fold.c	FUNCTION_37
0x4000178	    0x4881c7080100	                          add rdi, 0x108	      1166	fold.c	FUNCTION_37
0x400017f	      0xbd00000000	                              mov ebp, 0	      1162	fold.c	FUNCTION_37
0x4000184	          0x4889e2	                            mov rdx, rsp	      1169	fold.c	FUNCTION_37	FOR_1	IF_1	CALL_1
0x4000187	          0x4889de	                            mov rsi, rbx	      1169	fold.c	FUNCTION_37	FOR_1	IF_1	CALL_1
0x400018a	      0xe851ffffff	                       call sym.foldFind	      1169	fold.c	FUNCTION_37	FOR_1	IF_1	CALL_1
0x400018f	            0x85c0	                           test eax, eax	      1169	fold.c	FUNCTION_37	FOR_1	IF_1	CALL_1
0x4000191	            0x7410	                            je 0x40001a3	      1169	fold.c	FUNCTION_37	FOR_1	IF_1	CALL_1
0x4000193	        0x488b0424	                    mov rax, qword [rsp]	      1172	fold.c	FUNCTION_37	FOR_1
0x4000197	        0x488d7810	                   lea rdi, [rax + 0x10]	      1172	fold.c	FUNCTION_37	FOR_1
0x400019b	          0x482b18	                    sub rbx, qword [rax]	      1173	fold.c	FUNCTION_37	FOR_1
0x400019e	          0x83c501	                              add ebp, 1	      1174	fold.c	FUNCTION_37	FOR_1
0x40001a1	            0xebe1	                           jmp 0x4000184	      1175	fold.c	FUNCTION_37	FOR_1
0x40001a3	            0x89e8	                            mov eax, ebp	      1178	fold.c	FUNCTION_37
0x40001a5	      0x488b4c2408	                mov rcx, qword [rsp + 8]	      1178	fold.c	FUNCTION_37
0x40001aa	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      1178	fold.c	FUNCTION_37
0x40001b3	            0x7405	                            je 0x40001ba	      1178	fold.c	FUNCTION_37
0x40001b5	      0xe800000000	                          call 0x40001ba	      1178	fold.c	FUNCTION_37
0x40001ba	        0x4883c418	                           add rsp, 0x18	      1178	fold.c	FUNCTION_37
0x40001be	              0x5b	                                 pop rbx	      1178	fold.c	FUNCTION_37
0x40001bf	              0x5d	                                 pop rbp	      1178	fold.c	FUNCTION_37
0x40001c0	              0xc3	                                     ret	      1178	fold.c	FUNCTION_37
truncate_fold	DO,0:ELSE,0:FOR,0:SWITCH,0:IF,0:CALL,1:WHILE,0:functions,0	16
0x400198d	              0x55	                                push rbp	      3024	fold.c	FUNCTION_64
0x400198e	              0x53	                                push rbx	      3024	fold.c	FUNCTION_64
0x400198f	        0x4883ec08	                              sub rsp, 8	      3024	fold.c	FUNCTION_64
0x4001993	          0x4889fd	                            mov rbp, rdi	      3024	fold.c	FUNCTION_64
0x4001996	        0x488d5e01	                      lea rbx, [rsi + 1]	      3025	fold.c	FUNCTION_64
0x400199a	          0x4889de	                            mov rsi, rbx	      3026	fold.c	FUNCTION_64	CALL_1
0x400199d	          0x482b37	                    sub rsi, qword [rdi]	      3026	fold.c	FUNCTION_64	CALL_1
0x40019a0	        0x488d7f10	                   lea rdi, [rdi + 0x10]	      3026	fold.c	FUNCTION_64	CALL_1
0x40019a4	      0xbaffffff7f	                     mov edx, 0x7fffffff	      3026	fold.c	FUNCTION_64	CALL_1
0x40019a9	      0xe860feffff	                     call sym.foldRemove	      3026	fold.c	FUNCTION_64	CALL_1
0x40019ae	        0x482b5d00	                    sub rbx, qword [rbp]	      3027	fold.c	FUNCTION_64
0x40019b2	        0x48895d08	                mov qword [rbp + 8], rbx	      3027	fold.c	FUNCTION_64
0x40019b6	        0x4883c408	                              add rsp, 8	      3028	fold.c	FUNCTION_64
0x40019ba	              0x5b	                                 pop rbx	      3028	fold.c	FUNCTION_64
0x40019bb	              0x5d	                                 pop rbp	      3028	fold.c	FUNCTION_64
0x40019bc	              0xc3	                                     ret	      3028	fold.c	FUNCTION_64
getDeepestNestingRecurse	DO,0:ELSE,0:FOR,1:SWITCH,0:IF,1:CALL,1:WHILE,0:functions,0	28
0x400020c	            0x4154	                                push r12	      1618	fold.c	FUNCTION_48
0x400020e	              0x55	                                push rbp	      1618	fold.c	FUNCTION_48
0x400020f	              0x53	                                push rbx	      1618	fold.c	FUNCTION_48
0x4000210	        0x488b5710	            mov rdx, qword [rdi + 0x10] 	      1624	fold.c	FUNCTION_48
0x4000214	            0x8b07	                    mov eax, dword [rdi]	      1625	fold.c	FUNCTION_48	FOR_1
0x4000216	            0x85c0	                           test eax, eax	      1625	fold.c	FUNCTION_48	FOR_1
0x4000218	            0x7e34	                           jle 0x400024e	      1625	fold.c	FUNCTION_48	FOR_1
0x400021a	        0x488d5a10	                   lea rbx, [rdx + 0x10]	      1625	fold.c	FUNCTION_48	FOR_1
0x400021e	          0x8d40ff	                      lea eax, [rax - 1]	      1625	fold.c	FUNCTION_48	FOR_1
0x4000221	        0x488d0440	                  lea rax, [rax + rax*2]	      1625	fold.c	FUNCTION_48	FOR_1
0x4000225	        0x48c1e004	                              shl rax, 4	      1625	fold.c	FUNCTION_48	FOR_1
0x4000229	      0x4c8d640240	            lea r12, [rdx + rax + 0x40] 	      1625	fold.c	FUNCTION_48	FOR_1
0x400022e	      0xbd00000000	                              mov ebp, 0	      1625	fold.c	FUNCTION_48	FOR_1
0x4000233	          0x4889df	                            mov rdi, rbx	      1627	fold.c	FUNCTION_48	FOR_1	CALL_1
0x4000236	      0xe8d1ffffff	       call sym.getDeepestNestingRecurse	      1627	fold.c	FUNCTION_48	FOR_1	CALL_1
0x400023b	          0x83c001	                              add eax, 1	      1627	fold.c	FUNCTION_48	FOR_1	CALL_1
0x400023e	            0x39c5	                            cmp ebp, eax	      1627	fold.c	FUNCTION_48	FOR_1	CALL_1
0x4000240	           0xf4ce8	                          cmovl ebp, eax	      1627	fold.c	FUNCTION_48	FOR_1	CALL_1
0x4000243	        0x4883c330	                           add rbx, 0x30	      1627	fold.c	FUNCTION_48	FOR_1	CALL_1
0x4000247	          0x4c39e3	                            cmp rbx, r12	      1625	fold.c	FUNCTION_48	FOR_1
0x400024a	            0x75e7	                           jne 0x4000233	      1625	fold.c	FUNCTION_48	FOR_1
0x400024c	            0xeb05	                           jmp 0x4000253	      1625	fold.c	FUNCTION_48	FOR_1
0x400024e	      0xbd00000000	                              mov ebp, 0	      1621	fold.c	FUNCTION_48
0x4000253	            0x89e8	                            mov eax, ebp	      1633	fold.c	FUNCTION_48
0x4000255	              0x5b	                                 pop rbx	      1633	fold.c	FUNCTION_48
0x4000256	              0x5d	                                 pop rbp	      1633	fold.c	FUNCTION_48
0x4000257	            0x415c	                                 pop r12	      1633	fold.c	FUNCTION_48
0x4000259	              0xc3	                                     ret	      1633	fold.c	FUNCTION_48
foldCreate	DO,0:ELSE,2:FOR,3:SWITCH,0:IF,15:CALL,11:WHILE,0:functions,0	249
0x400348f	            0x4157	                                push r15	       576	fold.c	FUNCTION_25
0x4003491	            0x4156	                                push r14	       576	fold.c	FUNCTION_25
0x4003493	            0x4155	                                push r13	       576	fold.c	FUNCTION_25
0x4003495	            0x4154	                                push r12	       576	fold.c	FUNCTION_25
0x4003497	              0x55	                                push rbp	       576	fold.c	FUNCTION_25
0x4003498	              0x53	                                push rbx	       576	fold.c	FUNCTION_25
0x4003499	        0x4883ec58	                           sub rsp, 0x58	       576	fold.c	FUNCTION_25
0x400349d	        0x48893c24	                    mov qword [rsp], rdi	       576	fold.c	FUNCTION_25
0x40034a1	          0x4889f3	                            mov rbx, rsi	       576	fold.c	FUNCTION_25
0x40034a4	    0x64488b342528	                mov rsi, qword fs:[0x28]	       576	fold.c	FUNCTION_25
0x40034ad	      0x4889742448	             mov qword [rsp + 0x48], rsi	       576	fold.c	FUNCTION_25
0x40034b2	            0x31f6	                            xor esi, esi	       576	fold.c	FUNCTION_25
0x40034b4	          0x4839df	                            cmp rdi, rbx	       588	fold.c	FUNCTION_25	IF_1
0x40034b7	            0x7e07	                           jle 0x40034c0	       588	fold.c	FUNCTION_25	IF_1
0x40034b9	        0x48891c24	                    mov qword [rsp], rbx	       592	fold.c	FUNCTION_25	IF_1
0x40034bd	          0x4889fb	                            mov rbx, rdi	       591	fold.c	FUNCTION_25	IF_1
0x40034c0	    0x488b3d000000	            mov rdi, qword [0x040034c7] 	       598	fold.c	FUNCTION_25	IF_2	CALL_1
0x40034c7	    0x488b87f80100	           mov rax, qword [rdi + 0x1f8] 	       337	fold.c	FUNCTION_11
0x40034ce	        0x80780272	                cmp byte [rax + 2], 0x72	       598	fold.c	FUNCTION_25	IF_2	CALL_1
0x40034d2	     0xf8585000000	                           jne 0x400355d	       598	fold.c	FUNCTION_25	IF_2	CALL_1
0x40034d8	    0x488b05000000	            mov rax, qword [0x040034df] 	      1735	fold.c	FUNCTION_52	IF_1
0x40034df	    0x83b840150000	             cmp dword [rax + 0x1540], 0	      1735	fold.c	FUNCTION_52	IF_1
0x40034e6	            0x7521	                           jne 0x4003509	      1735	fold.c	FUNCTION_52	IF_1
0x40034e8	      0xba05000000	                              mov edx, 5	      1737	fold.c	FUNCTION_52	IF_1	CALL_2
0x40034ed	      0xbe00000000	                              mov esi, 0	      1737	fold.c	FUNCTION_52	IF_1	CALL_2
0x40034f2	      0xbf00000000	                              mov edi, 0	      1737	fold.c	FUNCTION_52	IF_1	CALL_2
0x40034f7	      0xe800000000	                          call 0x40034fc	      1737	fold.c	FUNCTION_52	IF_1	CALL_2
0x40034fc	          0x4889c7	                            mov rdi, rax	      1737	fold.c	FUNCTION_52	IF_1	CALL_2
0x40034ff	      0xe800000000	                          call 0x4003504	      1737	fold.c	FUNCTION_52	IF_1	CALL_2
0x4003504	      0xe962030000	                           jmp 0x400386b	      1737	fold.c	FUNCTION_52	IF_1	CALL_2
0x4003509	      0xe855cfffff	                    call sym.parseMarker	      1740	fold.c	FUNCTION_52	CALL_3
0x400350e	    0x488b05000000	            mov rax, qword [0x04003515] 	      1742	fold.c	FUNCTION_52	CALL_4
0x4003515	    0x488bb0280200	           mov rsi, qword [rax + 0x228] 	      1742	fold.c	FUNCTION_52	CALL_4
0x400351c	    0x8b1500000000	            mov edx, dword [0x04003522] 	      1742	fold.c	FUNCTION_52	CALL_4
0x4003522	        0x4c8b3424	                    mov r14, qword [rsp]	      1742	fold.c	FUNCTION_52	CALL_4
0x4003526	          0x4c89f7	                            mov rdi, r14	      1742	fold.c	FUNCTION_52	CALL_4
0x4003529	      0xe882cfffff	                  call sym.foldAddMarker	      1742	fold.c	FUNCTION_52	CALL_4
0x400352e	    0x8b1500000000	            mov edx, dword [0x04003534] 	      1743	fold.c	FUNCTION_52	CALL_5
0x4003534	    0x488b35000000	            mov rsi, qword [0x0400353b] 	      1743	fold.c	FUNCTION_52	CALL_5
0x400353b	          0x4889df	                            mov rdi, rbx	      1743	fold.c	FUNCTION_52	CALL_5
0x400353e	      0xe86dcfffff	                  call sym.foldAddMarker	      1743	fold.c	FUNCTION_52	CALL_5
0x4003543	      0xb900000000	                              mov ecx, 0	      1747	fold.c	FUNCTION_52	CALL_6
0x4003548	          0x4889da	                            mov rdx, rbx	      1747	fold.c	FUNCTION_52	CALL_6
0x400354b	      0xbe00000000	                              mov esi, 0	      1747	fold.c	FUNCTION_52	CALL_6
0x4003550	          0x4c89f7	                            mov rdi, r14	      1747	fold.c	FUNCTION_52	CALL_6
0x4003553	      0xe800000000	                          call 0x4003558	      1747	fold.c	FUNCTION_52	CALL_6
0x4003558	      0xe90e030000	                           jmp 0x400386b	      1747	fold.c	FUNCTION_52	CALL_6
0x400355d	      0xe822f4ffff	                    call sym.checkupdate	       604	fold.c	FUNCTION_25	CALL_3
0x4003562	    0x488b05000000	            mov rax, qword [0x04003569] 	       607	fold.c	FUNCTION_25
0x4003569	    0x4c8da8080100	                  lea r13, [rax + 0x108]	       607	fold.c	FUNCTION_25
0x4003570	        0x488b2c24	                    mov rbp, qword [rsp]	       607	fold.c	FUNCTION_25
0x4003574	    0x41bc00000000	                             mov r12d, 0	       584	fold.c	FUNCTION_25
0x400357a	    0x41be00000000	                             mov r14d, 0	       583	fold.c	FUNCTION_25
0x4003580	    0x41bf00000000	                             mov r15d, 0	       582	fold.c	FUNCTION_25
0x4003586	      0x488d542428	                   lea rdx, [rsp + 0x28]	       610	fold.c	FUNCTION_25	FOR_1	IF_3	CALL_4
0x400358b	          0x4889ee	                            mov rsi, rbp	       610	fold.c	FUNCTION_25	FOR_1	IF_3	CALL_4
0x400358e	          0x4c89ef	                            mov rdi, r13	       610	fold.c	FUNCTION_25	FOR_1	IF_3	CALL_4
0x4003591	      0xe84acbffff	                       call sym.foldFind	       610	fold.c	FUNCTION_25	FOR_1	IF_3	CALL_4
0x4003596	            0x85c0	                           test eax, eax	       610	fold.c	FUNCTION_25	FOR_1	IF_3	CALL_4
0x4003598	            0x745e	                            je 0x40035f8	       610	fold.c	FUNCTION_25	FOR_1	IF_3	CALL_4
0x400359a	      0x488b442428	            mov rax, qword [rsp + 0x28] 	       612	fold.c	FUNCTION_25	FOR_1	IF_4
0x400359f	          0x488b10	                    mov rdx, qword [rax]	       612	fold.c	FUNCTION_25	FOR_1	IF_4
0x40035a2	          0x4889d1	                            mov rcx, rdx	       612	fold.c	FUNCTION_25	FOR_1	IF_4
0x40035a5	        0x48034808	                add rcx, qword [rax + 8]	       612	fold.c	FUNCTION_25	FOR_1	IF_4
0x40035a9	          0x4839cb	                            cmp rbx, rcx	       612	fold.c	FUNCTION_25	FOR_1	IF_4
0x40035ac	            0x7d4a	                           jge 0x40035f8	       612	fold.c	FUNCTION_25	FOR_1	IF_4
0x40035ae	        0x4c8d6810	                   lea r13, [rax + 0x10]	       615	fold.c	FUNCTION_25	FOR_1	IF_4
0x40035b2	          0x4829d5	                            sub rbp, rdx	       616	fold.c	FUNCTION_25	FOR_1	IF_4
0x40035b5	          0x4829d3	                            sub rbx, rdx	       617	fold.c	FUNCTION_25	FOR_1	IF_4
0x40035b8	          0x4585ff	                         test r15d, r15d	       618	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5
0x40035bb	            0x7508	                           jne 0x40035c5	       618	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5
0x40035bd	         0xfb64028	           movzx eax, byte [rax + 0x28] 	       618	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5
0x40035c1	            0x3c02	                               cmp al, 2	       618	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5
0x40035c3	            0x7522	                           jne 0x40035e7	       618	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5
0x40035c5	          0x4963c4	                        movsxd rax, r12d	       621	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5	IF_6
0x40035c8	    0x488b15000000	            mov rdx, qword [0x040035cf] 	       621	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5	IF_6
0x40035cf	    0x483b82e80100	           cmp rax, qword [rdx + 0x1e8] 	       622	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5	IF_6
0x40035d6	      0xb801000000	                              mov eax, 1	       622	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5	IF_6
0x40035db	        0x440f4df0	                        cmovge r14d, eax	       622	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5	IF_6
0x40035df	    0x41bf01000000	                             mov r15d, 1	       622	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5	IF_6
0x40035e5	            0xeb0b	                           jmp 0x40035f2	       622	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5	IF_6
0x40035e7	            0x3c01	                               cmp al, 1	       625	fold.c	FUNCTION_25	FOR_1	IF_4	ELSE_1	IF_7
0x40035e9	      0xb801000000	                              mov eax, 1	       625	fold.c	FUNCTION_25	FOR_1	IF_4	ELSE_1	IF_7
0x40035ee	        0x440f44f0	                         cmove r14d, eax	       625	fold.c	FUNCTION_25	FOR_1	IF_4	ELSE_1	IF_7
0x40035f2	        0x4183c401	                             add r12d, 1	       626	fold.c	FUNCTION_25	FOR_1	IF_4
0x40035f6	            0xeb8e	                           jmp 0x4003586	       634	fold.c	FUNCTION_25	FOR_1
0x40035f8	      0x488b442428	            mov rax, qword [rsp + 0x28] 	       636	fold.c	FUNCTION_25
0x40035fd	      0x4889442408	                mov qword [rsp + 8], rax	       636	fold.c	FUNCTION_25
0x4003602	        0x498b4510	            mov rax, qword [r13 + 0x10] 	       636	fold.c	FUNCTION_25
0x4003606	      0x4889442410	             mov qword [rsp + 0x10], rax	       636	fold.c	FUNCTION_25
0x400360b	      0xbe01000000	                              mov esi, 1	       637	fold.c	FUNCTION_25	IF_8	CALL_5
0x4003610	          0x4c89ef	                            mov rdi, r13	       637	fold.c	FUNCTION_25	IF_8	CALL_5
0x4003613	      0xe800000000	                          call 0x4003618	       637	fold.c	FUNCTION_25	IF_8	CALL_5
0x4003618	          0x83f801	                              cmp eax, 1	       637	fold.c	FUNCTION_25	IF_8	CALL_5
0x400361b	     0xf854a020000	                           jne 0x400386b	       637	fold.c	FUNCTION_25	IF_8	CALL_5
0x4003621	      0x488b442408	                mov rax, qword [rsp + 8]	       636	fold.c	FUNCTION_25
0x4003626	      0x482b442410	             sub rax, qword [rsp + 0x10]	       636	fold.c	FUNCTION_25
0x400362b	        0x48c1f804	                              sar rax, 4	       636	fold.c	FUNCTION_25
0x400362f	          0x4889c2	                            mov rdx, rax	       636	fold.c	FUNCTION_25
0x4003632	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	       636	fold.c	FUNCTION_25
0x400363c	        0x480fafd0	                           imul rdx, rax	       636	fold.c	FUNCTION_25
0x4003640	        0x89542410	             mov dword [rsp + 0x10], edx	       636	fold.c	FUNCTION_25
0x4003644	      0x4889542408	                mov qword [rsp + 8], rdx	       639	fold.c	FUNCTION_25	IF_8
0x4003649	      0x4863442408	            movsxd rax, dword [rsp + 8] 	       639	fold.c	FUNCTION_25	IF_8
0x400364e	        0x488d0440	                  lea rax, [rax + rax*2]	       639	fold.c	FUNCTION_25	IF_8
0x4003652	        0x48c1e004	                              shl rax, 4	       639	fold.c	FUNCTION_25	IF_8
0x4003656	        0x49034510	             add rax, qword [r13 + 0x10]	       639	fold.c	FUNCTION_25	IF_8
0x400365a	      0x4889442428	             mov qword [rsp + 0x28], rax	       639	fold.c	FUNCTION_25	IF_8
0x400365f	      0xba0a000000	                            mov edx, 0xa	       640	fold.c	FUNCTION_25	IF_8	CALL_6
0x4003664	      0xbe30000000	                           mov esi, 0x30	       640	fold.c	FUNCTION_25	IF_8	CALL_6
0x4003669	      0x488d7c2430	                   lea rdi, [rsp + 0x30]	       640	fold.c	FUNCTION_25	IF_8	CALL_6
0x400366e	      0xe800000000	                          call 0x4003673	       640	fold.c	FUNCTION_25	IF_8	CALL_6
0x4003673	        0x458b4500	                    mov r8d, dword [r13]	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x4003677	      0x488b542408	                mov rdx, qword [rsp + 8]	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x400367c	          0x4439c2	                            cmp edx, r8d	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x400367f	     0xf8d1b010000	                           jge 0x40037a0	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x4003685	      0x488b4c2428	            mov rcx, qword [rsp + 0x28] 	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x400368a	          0x483b19	                    cmp rbx, qword [rcx]	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x400368d	     0xf8cc7010000	                            jl 0x400385a	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x4003693	            0x89d7	                            mov edi, edx	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x4003695	          0x4489c6	                            mov esi, r8d	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x4003698	            0x29d6	                            sub esi, edx	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x400369a	      0xb801000000	                              mov eax, 1	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x400369f	            0xeb1c	                           jmp 0x40036bd	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x40036a1	        0x448d4801	                      lea r9d, [rax + 1]	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x40036a5	          0x4863d0	                         movsxd rdx, eax	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x40036a8	        0x488d1452	                  lea rdx, [rdx + rdx*2]	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x40036ac	        0x48c1e204	                              shl rdx, 4	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x40036b0	        0x483b1c11	              cmp rbx, qword [rcx + rdx]	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x40036b4	     0xf8c82010000	                            jl 0x400383c	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x40036ba	          0x4489c8	                            mov eax, r9d	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x40036bd	          0x4189c2	                           mov r10d, eax	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x40036c0	        0x448d1c38	                   lea r11d, [rax + rdi]	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x40036c4	            0x39f0	                            cmp eax, esi	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x40036c6	            0x75d9	                           jne 0x40036a1	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x40036c8	        0x89442408	                mov dword [rsp + 8], eax	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x40036cc	        0x89442418	             mov dword [rsp + 0x18], eax	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x40036d0	      0x44895c241c	            mov dword [rsp + 0x1c], r11d	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x40036d5	      0xe970010000	                           jmp 0x400384a	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x40036da	        0x8b742408	                mov esi, dword [rsp + 8]	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0x40036de	      0x488d7c2430	                   lea rdi, [rsp + 0x30]	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0x40036e3	      0xe800000000	                          call 0x40036e8	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0x40036e8	          0x83f801	                              cmp eax, 1	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0x40036eb	            0x7576	                           jne 0x4003763	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0x40036ed	      0x488b742428	            mov rsi, qword [rsp + 0x28] 	       650	fold.c	FUNCTION_25	IF_8	IF_10	IF_11
0x40036f2	          0x488b06	                    mov rax, qword [rsi]	       650	fold.c	FUNCTION_25	IF_8	IF_10	IF_11
0x40036f5	          0x4839c5	                            cmp rbp, rax	       650	fold.c	FUNCTION_25	IF_8	IF_10	IF_11
0x40036f8	        0x480f4fe8	                          cmovg rbp, rax	       650	fold.c	FUNCTION_25	IF_8	IF_10	IF_11
0x40036fc	      0x4863442408	            movsxd rax, dword [rsp + 8] 	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4003701	        0x488d1440	                  lea rdx, [rax + rax*2]	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4003705	        0x48c1e204	                              shl rdx, 4	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4003709	      0x488d4c16d0	             lea rcx, [rsi + rdx - 0x30]	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x400370e	        0x488b4108	                mov rax, qword [rcx + 8]	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4003712	          0x480301	                    add rax, qword [rcx]	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4003715	        0x4883e801	                              sub rax, 1	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4003719	          0x4839c3	                            cmp rbx, rax	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x400371c	        0x480f4cd8	                          cmovl rbx, rax	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4003720	      0x488b7c2440	            mov rdi, qword [rsp + 0x40] 	        59	string3.h	FUNCTION_78	CALL_3
0x4003725	      0xe800000000	                          call 0x400372a	        59	string3.h	FUNCTION_78	CALL_3
0x400372a	        0x8b442408	                mov eax, dword [rsp + 8]	       659	fold.c	FUNCTION_25	IF_8	IF_10
0x400372e	         0x1442430	             add dword [rsp + 0x30], eax	       659	fold.c	FUNCTION_25	IF_8	IF_10
0x4003732	        0x8b442418	            mov eax, dword [rsp + 0x18] 	       659	fold.c	FUNCTION_25	IF_8	IF_10
0x4003736	          0x8d40ff	                      lea eax, [rax - 1]	       659	fold.c	FUNCTION_25	IF_8	IF_10
0x4003739	      0x488d4c4003	              lea rcx, [rax + rax*2 + 3]	       659	fold.c	FUNCTION_25	IF_8	IF_10
0x400373e	        0x48c1e104	                              shl rcx, 4	       659	fold.c	FUNCTION_25	IF_8	IF_10
0x4003742	      0xb800000000	                              mov eax, 0	       659	fold.c	FUNCTION_25	IF_8	IF_10
0x4003747	          0x4889c2	                            mov rdx, rax	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x400374a	      0x4803542440	             add rdx, qword [rsp + 0x40]	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x400374f	          0x48292a	                    sub qword [rdx], rbp	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x4003752	        0x4883c030	                           add rax, 0x30	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x4003756	          0x4839c8	                            cmp rax, rcx	       664	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x4003759	            0x75ec	                           jne 0x4003747	       664	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x400375b	        0x8b44241c	            mov eax, dword [rsp + 0x1c] 	       664	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x400375f	        0x89442410	             mov dword [rsp + 0x10], eax	       664	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x4003763	        0x458b4500	                    mov r8d, dword [r13]	       668	fold.c	FUNCTION_25	IF_8	IF_13
0x4003767	      0x4439442410	            cmp dword [rsp + 0x10], r8d 	       668	fold.c	FUNCTION_25	IF_8	IF_13
0x400376c	            0x7d3a	                           jge 0x40037a8	       668	fold.c	FUNCTION_25	IF_8	IF_13
0x400376e	        0x8b742410	            mov esi, dword [rsp + 0x10] 	        59	string3.h	FUNCTION_78	CALL_3
0x4003772	          0x4129f0	                            sub r8d, esi	        59	string3.h	FUNCTION_78	CALL_3
0x4003775	          0x4963c0	                         movsxd rax, r8d	        59	string3.h	FUNCTION_78	CALL_3
0x4003778	        0x488d1440	                  lea rdx, [rax + rax*2]	        59	string3.h	FUNCTION_78	CALL_3
0x400377c	        0x48c1e204	                              shl rdx, 4	        59	string3.h	FUNCTION_78	CALL_3
0x4003780	            0x89f0	                            mov eax, esi	        59	string3.h	FUNCTION_78	CALL_3
0x4003782	            0x4898	                                    cdqe	        59	string3.h	FUNCTION_78	CALL_3
0x4003784	        0x488d3440	                  lea rsi, [rax + rax*2]	        59	string3.h	FUNCTION_78	CALL_3
0x4003788	        0x48c1e604	                              shl rsi, 4	        59	string3.h	FUNCTION_78	CALL_3
0x400378c	        0x49037510	             add rsi, qword [r13 + 0x10]	        59	string3.h	FUNCTION_78	CALL_3
0x4003790	      0x488b442428	            mov rax, qword [rsp + 0x28] 	        59	string3.h	FUNCTION_78	CALL_3
0x4003795	        0x488d7830	                   lea rdi, [rax + 0x30]	        59	string3.h	FUNCTION_78	CALL_3
0x4003799	      0xe800000000	                          call 0x400379e	        59	string3.h	FUNCTION_78	CALL_3
0x400379e	            0xeb08	                           jmp 0x40037a8	        59	string3.h	FUNCTION_78	CALL_3
0x40037a0	    0xc74424080000	                  mov dword [rsp + 8], 0	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x40037a8	        0x418b4500	                    mov eax, dword [r13]	       671	fold.c	FUNCTION_25	IF_8
0x40037ac	          0x83c001	                              add eax, 1	       671	fold.c	FUNCTION_25	IF_8
0x40037af	        0x2b442408	                sub eax, dword [rsp + 8]	       671	fold.c	FUNCTION_25	IF_8
0x40037b3	        0x41894500	                    mov dword [r13], eax	       671	fold.c	FUNCTION_25	IF_8
0x40037b7	      0x488b442428	            mov rax, qword [rsp + 0x28] 	       674	fold.c	FUNCTION_25	IF_8
0x40037bc	      0x488b542430	            mov rdx, qword [rsp + 0x30] 	       674	fold.c	FUNCTION_25	IF_8
0x40037c1	        0x48895010	             mov qword [rax + 0x10], rdx	       674	fold.c	FUNCTION_25	IF_8
0x40037c5	      0x488b542438	            mov rdx, qword [rsp + 0x38] 	       674	fold.c	FUNCTION_25	IF_8
0x40037ca	        0x48895018	             mov qword [rax + 0x18], rdx	       674	fold.c	FUNCTION_25	IF_8
0x40037ce	      0x488b542440	            mov rdx, qword [rsp + 0x40] 	       674	fold.c	FUNCTION_25	IF_8
0x40037d3	        0x48895020	             mov qword [rax + 0x20], rdx	       674	fold.c	FUNCTION_25	IF_8
0x40037d7	          0x488928	                    mov qword [rax], rbp	       675	fold.c	FUNCTION_25	IF_8
0x40037da	          0x4829eb	                            sub rbx, rbp	       676	fold.c	FUNCTION_25	IF_8
0x40037dd	        0x488d4301	                      lea rax, [rbx + 1]	       676	fold.c	FUNCTION_25	IF_8
0x40037e1	      0x488b542428	            mov rdx, qword [rsp + 0x28] 	       676	fold.c	FUNCTION_25	IF_8
0x40037e6	        0x48894208	                mov qword [rdx + 8], rax	       676	fold.c	FUNCTION_25	IF_8
0x40037ea	          0x4585ff	                         test r15d, r15d	       681	fold.c	FUNCTION_25	IF_8	IF_14
0x40037ed	            0x7426	                            je 0x4003815	       681	fold.c	FUNCTION_25	IF_8	IF_14
0x40037ef	          0x4585f6	                         test r14d, r14d	       681	fold.c	FUNCTION_25	IF_8	IF_14
0x40037f2	            0x7521	                           jne 0x4003815	       681	fold.c	FUNCTION_25	IF_8	IF_14
0x40037f4	          0x4d63e4	                        movsxd r12, r12d	       681	fold.c	FUNCTION_25	IF_8	IF_14
0x40037f7	    0x488b05000000	            mov rax, qword [0x040037fe] 	       681	fold.c	FUNCTION_25	IF_8	IF_14
0x40037fe	    0x4c3ba0e80100	           cmp r12, qword [rax + 0x1e8] 	       681	fold.c	FUNCTION_25	IF_8	IF_14
0x4003805	            0x7d0e	                           jge 0x4003815	       681	fold.c	FUNCTION_25	IF_8	IF_14
0x4003807	      0xbe01000000	                              mov esi, 1	       682	fold.c	FUNCTION_25	IF_8	CALL_10
0x400380c	        0x488b3c24	                    mov rdi, qword [rsp]	       682	fold.c	FUNCTION_25	IF_8	CALL_10
0x4003810	      0xe800000000	                          call 0x4003815	       682	fold.c	FUNCTION_25	IF_8	CALL_10
0x4003815	          0x4585ff	                         test r15d, r15d	       683	fold.c	FUNCTION_25	IF_8	IF_15
0x4003818	            0x750e	                           jne 0x4003828	       683	fold.c	FUNCTION_25	IF_8	IF_15
0x400381a	    0x488b05000000	            mov rax, qword [0x04003821] 	       684	fold.c	FUNCTION_25	IF_8	IF_15
0x4003821	    0xc68020010000	               mov byte [rax + 0x120], 1	       684	fold.c	FUNCTION_25	IF_8	IF_15
0x4003828	      0x488b442428	            mov rax, qword [rsp + 0x28] 	       685	fold.c	FUNCTION_25	IF_8
0x400382d	        0xc6402801	                mov byte [rax + 0x28], 1	       685	fold.c	FUNCTION_25	IF_8
0x4003831	        0xc6402902	                mov byte [rax + 0x29], 2	       686	fold.c	FUNCTION_25	IF_8
0x4003835	      0xe800000000	                          call 0x400383a	       689	fold.c	FUNCTION_25	IF_8	CALL_11
0x400383a	            0xeb2f	                           jmp 0x400386b	       689	fold.c	FUNCTION_25	IF_8	CALL_11
0x400383c	      0x4489542408	               mov dword [rsp + 8], r10d	       689	fold.c	FUNCTION_25	IF_8	CALL_11
0x4003841	        0x89442418	             mov dword [rsp + 0x18], eax	       689	fold.c	FUNCTION_25	IF_8	CALL_11
0x4003845	      0x44895c241c	            mov dword [rsp + 0x1c], r11d	       689	fold.c	FUNCTION_25	IF_8	CALL_11
0x400384a	      0x837c240800	                  cmp dword [rsp + 8], 0	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0x400384f	     0xf8f85feffff	                            jg 0x40036da	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0x4003855	      0xe914ffffff	                           jmp 0x400376e	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0x400385a	        0x458b4500	                    mov r8d, dword [r13]	       668	fold.c	FUNCTION_25	IF_8	IF_13
0x400385e	    0xc74424080000	                  mov dword [rsp + 8], 0	       668	fold.c	FUNCTION_25	IF_8	IF_13
0x4003866	      0xe903ffffff	                           jmp 0x400376e	       668	fold.c	FUNCTION_25	IF_8	IF_13
0x400386b	      0x488b442448	            mov rax, qword [rsp + 0x48] 	       691	fold.c	FUNCTION_25
0x4003870	    0x644833042528	                xor rax, qword fs:[0x28]	       691	fold.c	FUNCTION_25
0x4003879	            0x7405	                            je 0x4003880	       691	fold.c	FUNCTION_25
0x400387b	      0xe800000000	                          call 0x4003880	       691	fold.c	FUNCTION_25
0x4003880	        0x4883c458	                           add rsp, 0x58	       691	fold.c	FUNCTION_25
0x4003884	              0x5b	                                 pop rbx	       691	fold.c	FUNCTION_25
0x4003885	              0x5d	                                 pop rbp	       691	fold.c	FUNCTION_25
0x4003886	            0x415c	                                 pop r12	       691	fold.c	FUNCTION_25
0x4003888	            0x415d	                                 pop r13	       691	fold.c	FUNCTION_25
0x400388a	            0x415e	                                 pop r14	       691	fold.c	FUNCTION_25
0x400388c	            0x415f	                                 pop r15	       691	fold.c	FUNCTION_25
0x400388e	              0xc3	                                     ret	       691	fold.c	FUNCTION_25
put_foldopen_recurse	DO,0:ELSE,1:FOR,1:SWITCH,0:IF,8:CALL,6:WHILE,0:functions,0	90
0x4000f8d	            0x4157	                                push r15	      3545	fold.c	FUNCTION_75
0x4000f8f	            0x4156	                                push r14	      3545	fold.c	FUNCTION_75
0x4000f91	            0x4155	                                push r13	      3545	fold.c	FUNCTION_75
0x4000f93	            0x4154	                                push r12	      3545	fold.c	FUNCTION_75
0x4000f95	              0x55	                                push rbp	      3545	fold.c	FUNCTION_75
0x4000f96	              0x53	                                push rbx	      3545	fold.c	FUNCTION_75
0x4000f97	        0x4883ec08	                              sub rsp, 8	      3545	fold.c	FUNCTION_75
0x4000f9b	        0x488b5a10	            mov rbx, qword [rdx + 0x10] 	      3550	fold.c	FUNCTION_75
0x4000f9f	          0x833a00	                      cmp dword [rdx], 0	      3551	fold.c	FUNCTION_75	FOR_1
0x4000fa2	     0xf8ef3000000	                           jle 0x400109b	      3551	fold.c	FUNCTION_75	FOR_1
0x4000fa8	          0x4989cd	                            mov r13, rcx	      3551	fold.c	FUNCTION_75	FOR_1
0x4000fab	          0x4989d6	                            mov r14, rdx	      3551	fold.c	FUNCTION_75	FOR_1
0x4000fae	          0x4989f7	                            mov r15, rsi	      3551	fold.c	FUNCTION_75	FOR_1
0x4000fb1	          0x4989fc	                            mov r12, rdi	      3551	fold.c	FUNCTION_75	FOR_1
0x4000fb4	      0xbd00000000	                              mov ebp, 0	      3551	fold.c	FUNCTION_75	FOR_1
0x4000fb9	        0x807b2802	                cmp byte [rbx + 0x28], 2	      3553	fold.c	FUNCTION_75	FOR_1	IF_1
0x4000fbd	     0xf84c1000000	                            je 0x4001084	      3553	fold.c	FUNCTION_75	FOR_1	IF_1
0x4000fc3	        0x837b1000	               cmp dword [rbx + 0x10], 0	      3555	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2
0x4000fc7	            0x7e7d	                           jle 0x4001046	      3555	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2
0x4000fc9	          0x4c89e9	                            mov rcx, r13	        97	stdio2.h	CALL_47
0x4000fcc	          0x48030b	                    add rcx, qword [rbx]	        97	stdio2.h	CALL_47
0x4000fcf	      0xba00000000	                              mov edx, 0	        97	stdio2.h	CALL_47
0x4000fd4	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_47
0x4000fd9	          0x4c89e7	                            mov rdi, r12	        97	stdio2.h	CALL_47
0x4000fdc	      0xb800000000	                              mov eax, 0	        97	stdio2.h	CALL_47
0x4000fe1	      0xe800000000	                          call 0x4000fe6	        97	stdio2.h	CALL_47
0x4000fe6	            0x85c0	                           test eax, eax	      3558	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3
0x4000fe8	     0xf88b4000000	                            js 0x40010a2	      3558	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3
0x4000fee	          0x4c89e7	                            mov rdi, r12	      3559	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_1
0x4000ff1	      0xe800000000	                          call 0x4000ff6	      3559	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_1
0x4000ff6	            0x85c0	                           test eax, eax	      3559	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_1
0x4000ff8	     0xf84a9000000	                            je 0x40010a7	      3559	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_1
0x4000ffe	      0xbe00000000	                              mov esi, 0	      3560	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_2
0x4001003	          0x4c89e7	                            mov rdi, r12	      3560	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_2
0x4001006	      0xe800000000	                          call 0x400100b	      3560	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_2
0x400100b	            0x85c0	                           test eax, eax	      3560	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_2
0x400100d	     0xf8494000000	                            je 0x40010a7	      3560	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_2
0x4001013	          0x4c89e9	                            mov rcx, r13	      3562	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_4	CALL_3
0x4001016	          0x48030b	                    add rcx, qword [rbx]	      3562	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_4	CALL_3
0x4001019	        0x488d5310	                   lea rdx, [rbx + 0x10]	      3562	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_4	CALL_3
0x400101d	          0x4c89fe	                            mov rsi, r15	      3562	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_4	CALL_3
0x4001020	          0x4c89e7	                            mov rdi, r12	      3562	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_4	CALL_3
0x4001023	      0xe865ffffff	           call sym.put_foldopen_recurse	      3562	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_4	CALL_3
0x4001028	            0x85c0	                           test eax, eax	      3562	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_4	CALL_3
0x400102a	            0x747b	                            je 0x40010a7	      3562	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_4	CALL_3
0x400102c	        0x807b2801	                cmp byte [rbx + 0x28], 1	      3567	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_5
0x4001030	            0x7552	                           jne 0x4001084	      3567	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_5
0x4001032	          0x4c89ea	                            mov rdx, r13	      3569	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_5	IF_6	CALL_4
0x4001035	          0x4889de	                            mov rsi, rbx	      3569	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_5	IF_6	CALL_4
0x4001038	          0x4c89e7	                            mov rdi, r12	      3569	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_5	IF_6	CALL_4
0x400103b	      0xe8c6feffff	            call sym.put_fold_open_close	      3569	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_5	IF_6	CALL_4
0x4001040	            0x85c0	                           test eax, eax	      3569	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_5	IF_6	CALL_4
0x4001042	            0x7540	                           jne 0x4001084	      3569	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_5	IF_6	CALL_4
0x4001044	            0xeb61	                           jmp 0x40010a7	      3569	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_5	IF_6	CALL_4
0x4001046	          0x4c89ee	                            mov rsi, r13	      3578	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	CALL_5
0x4001049	          0x480333	                    add rsi, qword [rbx]	      3578	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	CALL_5
0x400104c	          0x4c89ff	                            mov rdi, r15	      3578	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	CALL_5
0x400104f	      0xe80bf1ffff	                   call sym.foldLevelWin	      3578	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	CALL_5
0x4001054	        0x807b2801	                cmp byte [rbx + 0x28], 1	      3579	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x4001058	            0x750d	                           jne 0x4001067	      3579	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x400105a	            0x4898	                                    cdqe	      3579	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x400105c	    0x493987e80100	           cmp qword [r15 + 0x1e8], rax 	      3579	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x4001063	            0x7d0d	                           jge 0x4001072	      3579	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x4001065	            0xeb1d	                           jmp 0x4001084	      3579	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x4001067	            0x4898	                                    cdqe	      3580	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x4001069	    0x493987e80100	           cmp qword [r15 + 0x1e8], rax 	      3580	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x4001070	            0x7d12	                           jge 0x4001084	      3580	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x4001072	          0x4c89ea	                            mov rdx, r13	      3581	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7	IF_8	CALL_6
0x4001075	          0x4889de	                            mov rsi, rbx	      3581	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7	IF_8	CALL_6
0x4001078	          0x4c89e7	                            mov rdi, r12	      3581	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7	IF_8	CALL_6
0x400107b	      0xe886feffff	            call sym.put_fold_open_close	      3581	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7	IF_8	CALL_6
0x4001080	            0x85c0	                           test eax, eax	      3581	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7	IF_8	CALL_6
0x4001082	            0x7423	                            je 0x40010a7	      3581	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7	IF_8	CALL_6
0x4001084	        0x4883c330	                           add rbx, 0x30	      3585	fold.c	FUNCTION_75	FOR_1
0x4001088	          0x83c501	                              add ebp, 1	      3551	fold.c	FUNCTION_75	FOR_1
0x400108b	          0x41392e	                    cmp dword [r14], ebp	      3551	fold.c	FUNCTION_75	FOR_1
0x400108e	     0xf8f25ffffff	                            jg 0x4000fb9	      3551	fold.c	FUNCTION_75	FOR_1
0x4001094	      0xb801000000	                              mov eax, 1	      3588	fold.c	FUNCTION_75
0x4001099	            0xeb0c	                           jmp 0x40010a7	      3588	fold.c	FUNCTION_75
0x400109b	      0xb801000000	                              mov eax, 1	      3588	fold.c	FUNCTION_75
0x40010a0	            0xeb05	                           jmp 0x40010a7	      3588	fold.c	FUNCTION_75
0x40010a2	      0xb800000000	                              mov eax, 0	      3561	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3
0x40010a7	        0x4883c408	                              add rsp, 8	      3589	fold.c	FUNCTION_75
0x40010ab	              0x5b	                                 pop rbx	      3589	fold.c	FUNCTION_75
0x40010ac	              0x5d	                                 pop rbp	      3589	fold.c	FUNCTION_75
0x40010ad	            0x415c	                                 pop r12	      3589	fold.c	FUNCTION_75
0x40010af	            0x415d	                                 pop r13	      3589	fold.c	FUNCTION_75
0x40010b1	            0x415e	                                 pop r14	      3589	fold.c	FUNCTION_75
0x40010b3	            0x415f	                                 pop r15	      3589	fold.c	FUNCTION_75
0x40010b5	              0xc3	                                     ret	      3589	fold.c	FUNCTION_75
newFoldLevel	DO,0:ELSE,0:FOR,0:SWITCH,0:IF,1:CALL,2:WHILE,0:functions,1	29
0x40033cf	              0x53	                                push rbx	       465	fold.c	FUNCTION_20
0x40033d0	    0x488b3d000000	            mov rdi, qword [0x040033d7] 	       466	fold.c	FUNCTION_20	CALL_1
0x40033d7	      0xe8a0ffffff	                call sym.newFoldLevelWin	       466	fold.c	FUNCTION_20	CALL_1
0x40033dc	    0x488b05000000	            mov rax, qword [0x040033e3] 	       469	fold.c	FUNCTION_20	IF_1	CALL_2
0x40033e3	    0x488b90f80100	           mov rdx, qword [rax + 0x1f8] 	       357	fold.c	FUNCTION_13
0x40033ea	          0x803a64	                    cmp byte [rdx], 0x64	       469	fold.c	FUNCTION_20	IF_1	CALL_2
0x40033ed	            0x7555	                           jne 0x4003444	       469	fold.c	FUNCTION_20	IF_1	CALL_2
0x40033ef	    0x83b888020000	              cmp dword [rax + 0x288], 0	       469	fold.c	FUNCTION_20	IF_1	CALL_2
0x40033f6	            0x744c	                            je 0x4003444	       469	fold.c	FUNCTION_20	IF_1	CALL_2
0x40033f8	    0x488b1d000000	            mov rbx, qword [0x040033ff] 	       476	fold.c	FUNCTION_20	IF_1
0x40033ff	          0x4885db	                           test rbx, rbx	       476	fold.c	FUNCTION_20	IF_1
0x4003402	            0x7440	                            je 0x4003444	       476	fold.c	FUNCTION_20	IF_1
0x4003404	    0x488b05000000	            mov rax, qword [0x0400340b] 	       478	fold.c	FUNCTION_20	FUNCTION_1	CALL_1
0x400340b	          0x4839d8	                            cmp rax, rbx	       478	fold.c	FUNCTION_20	FUNCTION_1	CALL_1
0x400340e	            0x742b	                            je 0x400343b	       478	fold.c	FUNCTION_20	FUNCTION_1	CALL_1
0x4003410	    0x488b93f80100	           mov rdx, qword [rbx + 0x1f8] 	       357	fold.c	FUNCTION_13
0x4003417	          0x803a64	                    cmp byte [rdx], 0x64	       478	fold.c	FUNCTION_20	FUNCTION_1	CALL_1
0x400341a	            0x751f	                           jne 0x400343b	       478	fold.c	FUNCTION_20	FUNCTION_1	CALL_1
0x400341c	    0x83bb88020000	              cmp dword [rbx + 0x288], 0	       478	fold.c	FUNCTION_20	FUNCTION_1	CALL_1
0x4003423	            0x7416	                            je 0x400343b	       478	fold.c	FUNCTION_20	FUNCTION_1	CALL_1
0x4003425	    0x488b80e80100	           mov rax, qword [rax + 0x1e8] 	       480	fold.c	FUNCTION_20	FUNCTION_1
0x400342c	    0x488983e80100	            mov qword [rbx + 0x1e8], rax	       480	fold.c	FUNCTION_20	FUNCTION_1
0x4003433	          0x4889df	                            mov rdi, rbx	       481	fold.c	FUNCTION_20	FUNCTION_1	CALL_2
0x4003436	      0xe841ffffff	                call sym.newFoldLevelWin	       481	fold.c	FUNCTION_20	FUNCTION_1	CALL_2
0x400343b	        0x488b5b20	            mov rbx, qword [rbx + 0x20] 	       476	fold.c	FUNCTION_20	IF_1
0x400343f	          0x4885db	                           test rbx, rbx	       476	fold.c	FUNCTION_20	IF_1
0x4003442	            0x75c0	                           jne 0x4003404	       476	fold.c	FUNCTION_20	IF_1
0x4003444	              0x5b	                                 pop rbx	       486	fold.c	FUNCTION_20
0x4003445	              0xc3	                                     ret	       486	fold.c	FUNCTION_20
foldReverseOrder	DO,0:ELSE,0:FOR,1:SWITCH,0:IF,0:CALL,0:WHILE,0:functions,0	63
0x400025a	          0x4839d6	                            cmp rsi, rdx	      2979	fold.c	FUNCTION_63	FOR_1
0x400025d	     0xf8dd0000000	                           jge 0x4000333	      2979	fold.c	FUNCTION_63	FOR_1
0x4000263	            0x4157	                                push r15	      2973	fold.c	FUNCTION_63
0x4000265	            0x4156	                                push r14	      2973	fold.c	FUNCTION_63
0x4000267	            0x4155	                                push r13	      2973	fold.c	FUNCTION_63
0x4000269	            0x4154	                                push r12	      2973	fold.c	FUNCTION_63
0x400026b	              0x55	                                push rbp	      2973	fold.c	FUNCTION_63
0x400026c	              0x53	                                push rbx	      2973	fold.c	FUNCTION_63
0x400026d	          0x4989f9	                             mov r9, rdi	      2973	fold.c	FUNCTION_63
0x4000270	        0x4c8d0476	                   lea r8, [rsi + rsi*2]	      2973	fold.c	FUNCTION_63
0x4000274	        0x49c1e004	                               shl r8, 4	      2973	fold.c	FUNCTION_63
0x4000278	        0x488d3c52	                  lea rdi, [rdx + rdx*2]	      2973	fold.c	FUNCTION_63
0x400027c	        0x48c1e704	                              shl rdi, 4	      2973	fold.c	FUNCTION_63
0x4000280	      0x4c894c24f8	                 mov qword [rsp - 8], r9	      2973	fold.c	FUNCTION_63
0x4000285	      0x488b4424f8	                mov rax, qword [rsp - 8]	      2981	fold.c	FUNCTION_63	FOR_1
0x400028a	        0x488b4010	            mov rax, qword [rax + 0x10] 	      2981	fold.c	FUNCTION_63	FOR_1
0x400028e	        0x4a8d0c00	                     lea rcx, [rax + r8]	      2981	fold.c	FUNCTION_63	FOR_1
0x4000292	          0x4801f8	                            add rax, rdi	      2982	fold.c	FUNCTION_63	FOR_1
0x4000295	          0x4c8b39	                    mov r15, qword [rcx]	      2983	fold.c	FUNCTION_63	FOR_1
0x4000298	        0x4c8b7108	                mov r14, qword [rcx + 8]	      2983	fold.c	FUNCTION_63	FOR_1
0x400029c	        0x448b6910	           mov r13d, dword [rcx + 0x10] 	      2983	fold.c	FUNCTION_63	FOR_1
0x40002a0	        0x448b6114	           mov r12d, dword [rcx + 0x14] 	      2983	fold.c	FUNCTION_63	FOR_1
0x40002a4	          0x8b6918	            mov ebp, dword [rcx + 0x18] 	      2983	fold.c	FUNCTION_63	FOR_1
0x40002a7	          0x8b591c	            mov ebx, dword [rcx + 0x1c] 	      2983	fold.c	FUNCTION_63	FOR_1
0x40002aa	        0x4c8b5920	            mov r11, qword [rcx + 0x20] 	      2983	fold.c	FUNCTION_63	FOR_1
0x40002ae	      0x440fb64928	           movzx r9d, byte [rcx + 0x28] 	      2983	fold.c	FUNCTION_63	FOR_1
0x40002b3	      0x44884c24f7	                 mov byte [rsp - 9], r9b	      2983	fold.c	FUNCTION_63	FOR_1
0x40002b8	      0x440fb64929	           movzx r9d, byte [rcx + 0x29] 	      2983	fold.c	FUNCTION_63	FOR_1
0x40002bd	          0x4c8b10	                    mov r10, qword [rax]	      2984	fold.c	FUNCTION_63	FOR_1
0x40002c0	          0x4c8911	                    mov qword [rcx], r10	      2984	fold.c	FUNCTION_63	FOR_1
0x40002c3	        0x4c8b5008	                mov r10, qword [rax + 8]	      2984	fold.c	FUNCTION_63	FOR_1
0x40002c7	        0x4c895108	                mov qword [rcx + 8], r10	      2984	fold.c	FUNCTION_63	FOR_1
0x40002cb	        0x4c8b5010	            mov r10, qword [rax + 0x10] 	      2984	fold.c	FUNCTION_63	FOR_1
0x40002cf	        0x4c895110	             mov qword [rcx + 0x10], r10	      2984	fold.c	FUNCTION_63	FOR_1
0x40002d3	        0x4c8b5018	            mov r10, qword [rax + 0x18] 	      2984	fold.c	FUNCTION_63	FOR_1
0x40002d7	        0x4c895118	             mov qword [rcx + 0x18], r10	      2984	fold.c	FUNCTION_63	FOR_1
0x40002db	        0x4c8b5020	            mov r10, qword [rax + 0x20] 	      2984	fold.c	FUNCTION_63	FOR_1
0x40002df	        0x4c895120	             mov qword [rcx + 0x20], r10	      2984	fold.c	FUNCTION_63	FOR_1
0x40002e3	        0x4c8b5028	            mov r10, qword [rax + 0x28] 	      2984	fold.c	FUNCTION_63	FOR_1
0x40002e7	        0x4c895128	             mov qword [rcx + 0x28], r10	      2984	fold.c	FUNCTION_63	FOR_1
0x40002eb	          0x4c8938	                    mov qword [rax], r15	      2985	fold.c	FUNCTION_63	FOR_1
0x40002ee	        0x4c897008	                mov qword [rax + 8], r14	      2985	fold.c	FUNCTION_63	FOR_1
0x40002f2	        0x44896810	            mov dword [rax + 0x10], r13d	      2985	fold.c	FUNCTION_63	FOR_1
0x40002f6	        0x44896014	            mov dword [rax + 0x14], r12d	      2985	fold.c	FUNCTION_63	FOR_1
0x40002fa	          0x896818	             mov dword [rax + 0x18], ebp	      2985	fold.c	FUNCTION_63	FOR_1
0x40002fd	          0x89581c	             mov dword [rax + 0x1c], ebx	      2985	fold.c	FUNCTION_63	FOR_1
0x4000300	        0x4c895820	             mov qword [rax + 0x20], r11	      2985	fold.c	FUNCTION_63	FOR_1
0x4000304	       0xfb65c24f7	               movzx ebx, byte [rsp - 9]	      2985	fold.c	FUNCTION_63	FOR_1
0x4000309	          0x885828	               mov byte [rax + 0x28], bl	      2985	fold.c	FUNCTION_63	FOR_1
0x400030c	        0x44884829	              mov byte [rax + 0x29], r9b	      2985	fold.c	FUNCTION_63	FOR_1
0x4000310	        0x4883c601	                              add rsi, 1	      2979	fold.c	FUNCTION_63	FOR_1
0x4000314	        0x4883ea01	                              sub rdx, 1	      2979	fold.c	FUNCTION_63	FOR_1
0x4000318	        0x4983c030	                            add r8, 0x30	      2979	fold.c	FUNCTION_63	FOR_1
0x400031c	        0x4883ef30	                           sub rdi, 0x30	      2979	fold.c	FUNCTION_63	FOR_1
0x4000320	          0x4839d6	                            cmp rsi, rdx	      2979	fold.c	FUNCTION_63	FOR_1
0x4000323	     0xf8c5cffffff	                            jl 0x4000285	      2979	fold.c	FUNCTION_63	FOR_1
0x4000329	              0x5b	                                 pop rbx	      2987	fold.c	FUNCTION_63
0x400032a	              0x5d	                                 pop rbp	      2987	fold.c	FUNCTION_63
0x400032b	            0x415c	                                 pop r12	      2987	fold.c	FUNCTION_63
0x400032d	            0x415d	                                 pop r13	      2987	fold.c	FUNCTION_63
0x400032f	            0x415e	                                 pop r14	      2987	fold.c	FUNCTION_63
0x4000331	            0x415f	                                 pop r15	      2987	fold.c	FUNCTION_63
0x4000333	            0xf3c3	                                     ret	      2987	fold.c	FUNCTION_63
put_fold_open_close	DO,0:ELSE,0:FOR,0:SWITCH,0:IF,1:CALL,2:WHILE,0:functions,0	41
0x4000f06	              0x55	                                push rbp	      3598	fold.c	FUNCTION_76
0x4000f07	              0x53	                                push rbx	      3598	fold.c	FUNCTION_76
0x4000f08	        0x4883ec08	                              sub rsp, 8	      3598	fold.c	FUNCTION_76
0x4000f0c	          0x4889fb	                            mov rbx, rdi	      3598	fold.c	FUNCTION_76
0x4000f0f	          0x4889f5	                            mov rbp, rsi	      3598	fold.c	FUNCTION_76
0x4000f12	          0x4889d1	                            mov rcx, rdx	        97	stdio2.h	CALL_47
0x4000f15	          0x48030e	                    add rcx, qword [rsi]	        97	stdio2.h	CALL_47
0x4000f18	      0xba00000000	                              mov edx, 0	        97	stdio2.h	CALL_47
0x4000f1d	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_47
0x4000f22	      0xb800000000	                              mov eax, 0	        97	stdio2.h	CALL_47
0x4000f27	      0xe800000000	                          call 0x4000f2c	        97	stdio2.h	CALL_47
0x4000f2c	      0xba00000000	                              mov edx, 0	      3604	fold.c	FUNCTION_76	IF_1
0x4000f31	            0x85c0	                           test eax, eax	      3599	fold.c	FUNCTION_76	IF_1
0x4000f33	            0x784f	                            js 0x4000f84	      3599	fold.c	FUNCTION_76	IF_1
0x4000f35	          0x4889df	                            mov rdi, rbx	      3600	fold.c	FUNCTION_76	IF_1	CALL_1
0x4000f38	      0xe800000000	                          call 0x4000f3d	      3600	fold.c	FUNCTION_76	IF_1	CALL_1
0x4000f3d	            0x89c2	                            mov edx, eax	      3600	fold.c	FUNCTION_76	IF_1	CALL_1
0x4000f3f	            0x85c0	                           test eax, eax	      3600	fold.c	FUNCTION_76	IF_1	CALL_1
0x4000f41	            0x7441	                            je 0x4000f84	      3600	fold.c	FUNCTION_76	IF_1	CALL_1
0x4000f43	        0x807d2801	                cmp byte [rbp + 0x28], 1	      3601	fold.c	FUNCTION_76	IF_1
0x4000f47	      0xb96f000000	                           mov ecx, 0x6f	      3601	fold.c	FUNCTION_76	IF_1
0x4000f4c	      0xb863000000	                           mov eax, 0x63	      3601	fold.c	FUNCTION_76	IF_1
0x4000f51	           0xf44c8	                          cmove ecx, eax	      3601	fold.c	FUNCTION_76	IF_1
0x4000f54	      0xba00000000	                              mov edx, 0	        97	stdio2.h	CALL_47
0x4000f59	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_47
0x4000f5e	          0x4889df	                            mov rdi, rbx	        97	stdio2.h	CALL_47
0x4000f61	      0xb800000000	                              mov eax, 0	        97	stdio2.h	CALL_47
0x4000f66	      0xe800000000	                          call 0x4000f6b	        97	stdio2.h	CALL_47
0x4000f6b	      0xba00000000	                              mov edx, 0	      3604	fold.c	FUNCTION_76	IF_1
0x4000f70	            0x85c0	                           test eax, eax	      3601	fold.c	FUNCTION_76	IF_1
0x4000f72	            0x7810	                            js 0x4000f84	      3601	fold.c	FUNCTION_76	IF_1
0x4000f74	          0x4889df	                            mov rdi, rbx	      3603	fold.c	FUNCTION_76	IF_1	CALL_2
0x4000f77	      0xe800000000	                          call 0x4000f7c	      3603	fold.c	FUNCTION_76	IF_1	CALL_2
0x4000f7c	            0x85c0	                           test eax, eax	      3604	fold.c	FUNCTION_76	IF_1
0x4000f7e	           0xf95c2	                                setne dl	      3604	fold.c	FUNCTION_76	IF_1
0x4000f81	           0xfb6d2	                           movzx edx, dl	      3604	fold.c	FUNCTION_76	IF_1
0x4000f84	            0x89d0	                            mov eax, edx	      3607	fold.c	FUNCTION_76
0x4000f86	        0x4883c408	                              add rsp, 8	      3607	fold.c	FUNCTION_76
0x4000f8a	              0x5b	                                 pop rbx	      3607	fold.c	FUNCTION_76
0x4000f8b	              0x5d	                                 pop rbp	      3607	fold.c	FUNCTION_76
0x4000f8c	              0xc3	                                     ret	      3607	fold.c	FUNCTION_76
foldFind	DO,0:ELSE,2:FOR,0:SWITCH,0:IF,2:CALL,0:WHILE,1:functions,0	41
0x40000e0	        0x4c8b5710	            mov r10, qword [rdi + 0x10] 	      1130	fold.c	FUNCTION_36
0x40000e4	            0x8b07	                    mov eax, dword [rdi]	      1132	fold.c	FUNCTION_36
0x40000e6	          0x83e801	                              sub eax, 1	      1132	fold.c	FUNCTION_36
0x40000e9	          0x4c63c8	                          movsxd r9, eax	      1132	fold.c	FUNCTION_36
0x40000ec	          0x4d85c9	                             test r9, r9	      1133	fold.c	FUNCTION_36	WHILE_1
0x40000ef	            0x7855	                            js 0x4000146	      1133	fold.c	FUNCTION_36	WHILE_1
0x40000f1	      0xb900000000	                              mov ecx, 0	      1133	fold.c	FUNCTION_36	WHILE_1
0x40000f6	        0x4a8d0409	                     lea rax, [rcx + r9]	      1135	fold.c	FUNCTION_36	WHILE_1
0x40000fa	          0x4889c7	                            mov rdi, rax	      1135	fold.c	FUNCTION_36	WHILE_1
0x40000fd	        0x48c1ef3f	                           shr rdi, 0x3f	      1135	fold.c	FUNCTION_36	WHILE_1
0x4000101	          0x4801f8	                            add rax, rdi	      1135	fold.c	FUNCTION_36	WHILE_1
0x4000104	          0x48d1f8	                              sar rax, 1	      1135	fold.c	FUNCTION_36	WHILE_1
0x4000107	          0x4863f8	                         movsxd rdi, eax	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x400010a	        0x488d3c7f	                  lea rdi, [rdi + rdi*2]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x400010e	        0x48c1e704	                              shl rdi, 4	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4000112	          0x4c01d7	                            add rdi, r10	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4000115	          0x4c8b07	                     mov r8, qword [rdi]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4000118	          0x4939f0	                             cmp r8, rsi	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x400011b	            0x7e08	                           jle 0x4000125	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x400011d	          0x83e801	                              sub eax, 1	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4000120	          0x4c63c8	                          movsxd r9, eax	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4000123	            0xeb1a	                           jmp 0x400013f	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4000125	        0x4c034708	                 add r8, qword [rdi + 8]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4000129	          0x4c39c6	                             cmp rsi, r8	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x400012c	            0x7c08	                            jl 0x4000136	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x400012e	          0x8d4801	                      lea ecx, [rax + 1]	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4000131	          0x4863c9	                         movsxd rcx, ecx	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4000134	            0xeb09	                           jmp 0x400013f	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4000136	          0x48893a	                    mov qword [rdx], rdi	      1145	fold.c	FUNCTION_36	WHILE_1	ELSE_2
0x4000139	      0xb801000000	                              mov eax, 1	      1146	fold.c	FUNCTION_36	WHILE_1	ELSE_2
0x400013e	              0xc3	                                     ret	      1146	fold.c	FUNCTION_36	WHILE_1	ELSE_2
0x400013f	          0x4939c9	                             cmp r9, rcx	      1133	fold.c	FUNCTION_36	WHILE_1
0x4000142	            0x7db2	                           jge 0x40000f6	      1133	fold.c	FUNCTION_36	WHILE_1
0x4000144	            0xeb05	                           jmp 0x400014b	      1133	fold.c	FUNCTION_36	WHILE_1
0x4000146	      0xb900000000	                              mov ecx, 0	      1131	fold.c	FUNCTION_36
0x400014b	        0x488d0449	                  lea rax, [rcx + rcx*2]	      1149	fold.c	FUNCTION_36
0x400014f	        0x48c1e004	                              shl rax, 4	      1149	fold.c	FUNCTION_36
0x4000153	          0x4901c2	                            add r10, rax	      1149	fold.c	FUNCTION_36
0x4000156	          0x4c8912	                    mov qword [rdx], r10	      1149	fold.c	FUNCTION_36
0x4000159	      0xb800000000	                              mov eax, 0	      1150	fold.c	FUNCTION_36
0x400015e	              0xc3	                                     ret	      1151	fold.c	FUNCTION_36
foldUpdate	DO,0:ELSE,0:FOR,0:SWITCH,0:IF,2:CALL,7:WHILE,1:functions,0	336
0x40023fc	            0x4157	                                push r15	       810	fold.c	FUNCTION_28
0x40023fe	            0x4156	                                push r14	       810	fold.c	FUNCTION_28
0x4002400	            0x4155	                                push r13	       810	fold.c	FUNCTION_28
0x4002402	            0x4154	                                push r12	       810	fold.c	FUNCTION_28
0x4002404	              0x55	                                push rbp	       810	fold.c	FUNCTION_28
0x4002405	              0x53	                                push rbx	       810	fold.c	FUNCTION_28
0x4002406	        0x4883ec68	                           sub rsp, 0x68	       810	fold.c	FUNCTION_28
0x400240a	    0x64488b042528	                mov rax, qword fs:[0x28]	       810	fold.c	FUNCTION_28
0x4002413	      0x4889442458	             mov qword [rsp + 0x58], rax	       810	fold.c	FUNCTION_28
0x4002418	            0x31c0	                            xor eax, eax	       810	fold.c	FUNCTION_28
0x400241a	    0x833d00000000	               cmp dword [0x04002421], 0	       813	fold.c	FUNCTION_28	IF_1
0x4002421	     0xf8f39050000	                            jg 0x4002960	       813	fold.c	FUNCTION_28	IF_1
0x4002427	          0x4889fb	                            mov rbx, rdi	       813	fold.c	FUNCTION_28	IF_1
0x400242a	          0x4889f5	                            mov rbp, rsi	       813	fold.c	FUNCTION_28	IF_1
0x400242d	          0x4989d4	                            mov r12, rdx	       813	fold.c	FUNCTION_28	IF_1
0x4002430	    0x4c8dbf080100	                  lea r15, [rdi + 0x108]	       817	fold.c	FUNCTION_28	CALL_1
0x4002437	      0x488d542410	                   lea rdx, [rsp + 0x10]	       817	fold.c	FUNCTION_28	CALL_1
0x400243c	          0x4c89ff	                            mov rdi, r15	       817	fold.c	FUNCTION_28	CALL_1
0x400243f	      0xe89cdcffff	                       call sym.foldFind	       817	fold.c	FUNCTION_28	CALL_1
0x4002444	    0x488b8b180100	           mov rcx, qword [rbx + 0x118] 	       818	fold.c	FUNCTION_28	WHILE_1
0x400244b	      0x488b442410	            mov rax, qword [rsp + 0x10] 	       818	fold.c	FUNCTION_28	WHILE_1
0x4002450	    0x486393080100	        movsxd rdx, dword [rbx + 0x108] 	       818	fold.c	FUNCTION_28	WHILE_1
0x4002457	        0x488d1452	                  lea rdx, [rdx + rdx*2]	       818	fold.c	FUNCTION_28	WHILE_1
0x400245b	        0x48c1e204	                              shl rdx, 4	       818	fold.c	FUNCTION_28	WHILE_1
0x400245f	          0x4801ca	                            add rdx, rcx	       818	fold.c	FUNCTION_28	WHILE_1
0x4002462	          0x4839d0	                            cmp rax, rdx	       818	fold.c	FUNCTION_28	WHILE_1
0x4002465	            0x733a	                           jae 0x40024a1	       818	fold.c	FUNCTION_28	WHILE_1
0x4002467	          0x4c3b20	                    cmp r12, qword [rax]	       819	fold.c	FUNCTION_28	WHILE_1
0x400246a	            0x7e35	                           jle 0x40024a1	       819	fold.c	FUNCTION_28	WHILE_1
0x400246c	        0x4883c030	                           add rax, 0x30	       819	fold.c	FUNCTION_28	WHILE_1
0x4002470	        0xc640f902	                   mov byte [rax - 7], 2	       821	fold.c	FUNCTION_28	WHILE_1
0x4002474	      0x4889442410	             mov qword [rsp + 0x10], rax	       822	fold.c	FUNCTION_28	WHILE_1
0x4002479	    0x488b8b180100	           mov rcx, qword [rbx + 0x118] 	       818	fold.c	FUNCTION_28	WHILE_1
0x4002480	    0x486393080100	        movsxd rdx, dword [rbx + 0x108] 	       818	fold.c	FUNCTION_28	WHILE_1
0x4002487	        0x488d1452	                  lea rdx, [rdx + rdx*2]	       818	fold.c	FUNCTION_28	WHILE_1
0x400248b	        0x48c1e204	                              shl rdx, 4	       818	fold.c	FUNCTION_28	WHILE_1
0x400248f	          0x4801ca	                            add rdx, rcx	       818	fold.c	FUNCTION_28	WHILE_1
0x4002492	          0x4839d0	                            cmp rax, rdx	       818	fold.c	FUNCTION_28	WHILE_1
0x4002495	            0x730a	                           jae 0x40024a1	       818	fold.c	FUNCTION_28	WHILE_1
0x4002497	        0x4883c030	                           add rax, 0x30	       818	fold.c	FUNCTION_28	WHILE_1
0x400249b	        0x4c3960d0	            cmp qword [rax - 0x30], r12 	       819	fold.c	FUNCTION_28	WHILE_1
0x400249f	            0x7ccf	                            jl 0x4002470	       819	fold.c	FUNCTION_28	WHILE_1
0x40024a1	    0x488b83f80100	           mov rax, qword [rbx + 0x1f8] 	       317	fold.c	FUNCTION_9
0x40024a8	           0xfb610	                   movzx edx, byte [rax]	       317	fold.c	FUNCTION_9
0x40024ab	          0x80fa69	                            cmp dl, 0x69	       825	fold.c	FUNCTION_28	IF_2	CALL_2
0x40024ae	            0x7422	                            je 0x40024d2	       825	fold.c	FUNCTION_28	IF_2	CALL_2
0x40024b0	        0x80780178	                cmp byte [rax + 1], 0x78	       826	fold.c	FUNCTION_28	IF_2	CALL_3
0x40024b4	            0x741c	                            je 0x40024d2	       826	fold.c	FUNCTION_28	IF_2	CALL_3
0x40024b6	        0x80780272	                cmp byte [rax + 2], 0x72	       831	fold.c	FUNCTION_28	IF_2	CALL_6
0x40024ba	        0x400f94c6	                                sete sil	       831	fold.c	FUNCTION_28	IF_2	CALL_6
0x40024be	          0x80fa64	                            cmp dl, 0x64	       831	fold.c	FUNCTION_28	IF_2	CALL_6
0x40024c1	           0xf94c0	                                 sete al	       831	fold.c	FUNCTION_28	IF_2	CALL_6
0x40024c4	          0x4008c6	                              or sil, al	       831	fold.c	FUNCTION_28	IF_2	CALL_6
0x40024c7	            0x7509	                           jne 0x40024d2	       831	fold.c	FUNCTION_28	IF_2	CALL_6
0x40024c9	          0x80fa73	                            cmp dl, 0x73	       831	fold.c	FUNCTION_28	IF_2	CALL_6
0x40024cc	     0xf858e040000	                           jne 0x4002960	       831	fold.c	FUNCTION_28	IF_2	CALL_6
0x40024d2	    0x8b0500000000	            mov eax, dword [0x040024d8] 	       833	fold.c	FUNCTION_28	IF_2
0x40024d8	        0x89442404	                mov dword [rsp + 4], eax	       833	fold.c	FUNCTION_28	IF_2
0x40024dc	    0xc70500000000	               mov dword [0x040024e6], 0	       836	fold.c	FUNCTION_28	IF_2
0x40024e6	    0x48833d000000	               cmp qword [0x040024ee], 0	      2128	fold.c	FUNCTION_58	IF_1
0x40024ee	     0xf8524040000	                           jne 0x4002918	      2128	fold.c	FUNCTION_58	IF_1
0x40024f4	    0x80bb21010000	               cmp byte [rbx + 0x121], 0	      2131	fold.c	FUNCTION_58	IF_2
0x40024fb	            0x7443	                            je 0x4002540	      2131	fold.c	FUNCTION_58	IF_2
0x40024fd	        0x488b4308	                mov rax, qword [rbx + 8]	      2135	fold.c	FUNCTION_58	IF_2
0x4002501	          0x4c8b20	                    mov r12, qword [rax]	      2135	fold.c	FUNCTION_58	IF_2
0x4002504	    0xc68321010000	               mov byte [rbx + 0x121], 0	      2136	fold.c	FUNCTION_58	IF_2
0x400250b	    0x83bb08010000	              cmp dword [rbx + 0x108], 0	      1723	fold.c	FUNCTION_51	FOR_1
0x4002512	            0x7e27	                           jle 0x400253b	      1723	fold.c	FUNCTION_51	FOR_1
0x4002514	      0xb800000000	                              mov eax, 0	      1723	fold.c	FUNCTION_51	FOR_1
0x4002519	          0x4863d0	                         movsxd rdx, eax	      1724	fold.c	FUNCTION_51	FOR_1
0x400251c	        0x488d1452	                  lea rdx, [rdx + rdx*2]	      1724	fold.c	FUNCTION_51	FOR_1
0x4002520	        0x48c1e204	                              shl rdx, 4	      1724	fold.c	FUNCTION_51	FOR_1
0x4002524	      0xc644112902	          mov byte [rcx + rdx + 0x29], 2	      1724	fold.c	FUNCTION_51	FOR_1
0x4002529	          0x83c001	                              add eax, 1	      1723	fold.c	FUNCTION_51	FOR_1
0x400252c	    0x3b8308010000	           cmp eax, dword [rbx + 0x108] 	      1723	fold.c	FUNCTION_51	FOR_1
0x4002532	            0x7ce5	                            jl 0x4002519	      1723	fold.c	FUNCTION_51	FOR_1
0x4002534	      0xbd01000000	                              mov ebp, 1	      2134	fold.c	FUNCTION_58	IF_2
0x4002539	            0xeb05	                           jmp 0x4002540	      2134	fold.c	FUNCTION_58	IF_2
0x400253b	      0xbd01000000	                              mov ebp, 1	      2134	fold.c	FUNCTION_58	IF_2
0x4002540	    0x488b83f80100	           mov rax, qword [rbx + 0x1f8] 	       357	fold.c	FUNCTION_13
0x4002547	          0x803864	                    cmp byte [rax], 0x64	      2144	fold.c	FUNCTION_58	IF_3	CALL_2
0x400254a	            0x751c	                           jne 0x4002568	      2144	fold.c	FUNCTION_58	IF_3	CALL_2
0x400254c	    0x486315000000	         movsxd rdx, dword [0x04002553] 	      2146	fold.c	FUNCTION_58	IF_3	IF_4
0x4002553	          0x4889e9	                            mov rcx, rbp	      2147	fold.c	FUNCTION_58	IF_3	IF_4
0x4002556	          0x4829d1	                            sub rcx, rdx	      2147	fold.c	FUNCTION_58	IF_3	IF_4
0x4002559	          0x4839ea	                            cmp rdx, rbp	      2147	fold.c	FUNCTION_58	IF_3	IF_4
0x400255c	      0xbd01000000	                              mov ebp, 1	      2147	fold.c	FUNCTION_58	IF_3	IF_4
0x4002561	        0x480f4ce9	                          cmovl rbp, rcx	      2147	fold.c	FUNCTION_58	IF_3	IF_4
0x4002565	          0x4901d4	                            add r12, rdx	      2150	fold.c	FUNCTION_58	IF_3
0x4002568	        0x488b5308	                mov rdx, qword [rbx + 8]	      2156	fold.c	FUNCTION_58	IF_5
0x400256c	          0x488b12	                    mov rdx, qword [rdx]	      2156	fold.c	FUNCTION_58	IF_5
0x400256f	          0x4839ea	                            cmp rdx, rbp	      2156	fold.c	FUNCTION_58	IF_5
0x4002572	        0x480f4eea	                         cmovle rbp, rdx	      2156	fold.c	FUNCTION_58	IF_5
0x4002576	      0x48896c2408	                mov qword [rsp + 8], rbp	      2156	fold.c	FUNCTION_58	IF_5
0x400257b	    0xc70500000000	               mov dword [0x04002585], 0	      2159	fold.c	FUNCTION_58
0x4002585	      0x48895c2420	             mov qword [rsp + 0x20], rbx	      2160	fold.c	FUNCTION_58
0x400258a	    0x48c744243000	               mov qword [rsp + 0x30], 0	      2161	fold.c	FUNCTION_58
0x4002593	    0xc74424400000	               mov dword [rsp + 0x40], 0	      2162	fold.c	FUNCTION_58
0x400259b	    0xc7442444ffff	     mov dword [rsp + 0x44], 0xffffffff 	      2163	fold.c	FUNCTION_58
0x40025a3	    0xc74424480000	               mov dword [rsp + 0x48], 0	      2164	fold.c	FUNCTION_58
0x40025ab	    0xc744244c1500	           mov dword [rsp + 0x4c], 0x15 	      2165	fold.c	FUNCTION_58
0x40025b3	    0xc74424501500	           mov dword [rsp + 0x50], 0x15 	      2166	fold.c	FUNCTION_58
0x40025bb	    0x48892d000000	            mov qword [0x040025c2], rbp 	      2168	fold.c	FUNCTION_58
0x40025c2	    0x4c8925000000	            mov qword [0x040025c9], r12 	      2169	fold.c	FUNCTION_58
0x40025c9	        0x80780272	                cmp byte [rax + 2], 0x72	      2171	fold.c	FUNCTION_58	IF_6	CALL_3
0x40025cd	            0x7576	                           jne 0x4002645	      2171	fold.c	FUNCTION_58	IF_6	CALL_3
0x40025cf	          0x4889df	                            mov rdi, rbx	      2176	fold.c	FUNCTION_58	IF_6	CALL_4
0x40025d2	      0xe88cdeffff	                    call sym.parseMarker	      2176	fold.c	FUNCTION_58	IF_6	CALL_4
0x40025d7	      0x488b442408	                mov rax, qword [rsp + 8]	      2180	fold.c	FUNCTION_58	IF_6	IF_7
0x40025dc	        0x4883f801	                              cmp rax, 1	      2180	fold.c	FUNCTION_58	IF_6	IF_7
0x40025e0	            0x7e44	                           jle 0x4002626	      2180	fold.c	FUNCTION_58	IF_6	IF_7
0x40025e2	        0x488d68ff	                      lea rbp, [rax - 1]	      2183	fold.c	FUNCTION_58	IF_6	IF_7	CALL_5
0x40025e6	          0x4889ee	                            mov rsi, rbp	      2183	fold.c	FUNCTION_58	IF_6	IF_7	CALL_5
0x40025e9	          0x4889df	                            mov rdi, rbx	      2183	fold.c	FUNCTION_58	IF_6	IF_7	CALL_5
0x40025ec	      0xe86edbffff	                   call sym.foldLevelWin	      2183	fold.c	FUNCTION_58	IF_6	IF_7	CALL_5
0x40025f1	          0x4189c5	                           mov r13d, eax	      2183	fold.c	FUNCTION_58	IF_6	IF_7	CALL_5
0x40025f4	      0x48896c2428	             mov qword [rsp + 0x28], rbp	      2186	fold.c	FUNCTION_58	IF_6	IF_7
0x40025f9	        0x89442440	             mov dword [rsp + 0x40], eax	      2187	fold.c	FUNCTION_58	IF_6	IF_7
0x40025fd	      0x488d7c2420	                   lea rdi, [rsp + 0x20]	      2188	fold.c	FUNCTION_58	IF_6	IF_7	CALL_6
0x4002602	      0xe8b2e6ffff	                call sym.foldlevelMarker	      2188	fold.c	FUNCTION_58	IF_6	IF_7	CALL_6
0x4002607	        0x8b442440	            mov eax, dword [rsp + 0x40] 	      2193	fold.c	FUNCTION_58	IF_6	IF_7	IF_8
0x400260b	          0x4139c5	                           cmp r13d, eax	      2193	fold.c	FUNCTION_58	IF_6	IF_7	IF_8
0x400260e	            0x7d0e	                           jge 0x400261e	      2193	fold.c	FUNCTION_58	IF_6	IF_7	IF_8
0x4002610	        0x2b442444	             sub eax, dword [rsp + 0x44]	      2194	fold.c	FUNCTION_58	IF_6	IF_7	IF_8
0x4002614	          0x4129c5	                           sub r13d, eax	      2194	fold.c	FUNCTION_58	IF_6	IF_7	IF_8
0x4002617	      0x44896c2440	            mov dword [rsp + 0x40], r13d	      2194	fold.c	FUNCTION_58	IF_6	IF_7	IF_8
0x400261c	            0xeb08	                           jmp 0x4002626	      2194	fold.c	FUNCTION_58	IF_6	IF_7	IF_8
0x400261e	        0x8b442444	            mov eax, dword [rsp + 0x44] 	      2196	fold.c	FUNCTION_58	IF_6	IF_7	ELSE_2
0x4002622	        0x89442440	             mov dword [rsp + 0x40], eax	      2196	fold.c	FUNCTION_58	IF_6	IF_7	ELSE_2
0x4002626	      0x488b442408	                mov rax, qword [rsp + 8]	      2198	fold.c	FUNCTION_58	IF_6
0x400262b	      0x4889442428	             mov qword [rsp + 0x28], rax	      2198	fold.c	FUNCTION_58	IF_6
0x4002630	      0x488d7c2420	                   lea rdi, [rsp + 0x20]	      2199	fold.c	FUNCTION_58	IF_6	CALL_7
0x4002635	      0xe87fe6ffff	                call sym.foldlevelMarker	      2199	fold.c	FUNCTION_58	IF_6	CALL_7
0x400263a	    0x41bd00000000	                             mov r13d, 0	      2173	fold.c	FUNCTION_58	IF_6
0x4002640	      0xe9f5000000	                           jmp 0x400273a	      2173	fold.c	FUNCTION_58	IF_6
0x4002645	      0x488b742408	                mov rsi, qword [rsp + 8]	      2203	fold.c	FUNCTION_58	ELSE_3
0x400264a	      0x4889742428	             mov qword [rsp + 0x28], rsi	      2203	fold.c	FUNCTION_58	ELSE_3
0x400264f	        0x80780178	                cmp byte [rax + 1], 0x78	      2204	fold.c	FUNCTION_58	ELSE_3	IF_9	CALL_8
0x4002653	            0x751e	                           jne 0x4002673	      2204	fold.c	FUNCTION_58	ELSE_3	IF_9	CALL_8
0x4002655	    0x41bd00000000	                             mov r13d, 0	      2206	fold.c	FUNCTION_58	ELSE_3	IF_9
0x400265b	        0x4883fe01	                              cmp rsi, 1	      2209	fold.c	FUNCTION_58	ELSE_3	IF_9	IF_10
0x400265f	     0xf8ee0020000	                           jle 0x4002945	      2209	fold.c	FUNCTION_58	ELSE_3	IF_9	IF_10
0x4002665	        0x488d46ff	                      lea rax, [rsi - 1]	      2210	fold.c	FUNCTION_58	ELSE_3	IF_9	IF_10
0x4002669	      0x4889442428	             mov qword [rsp + 0x28], rax	      2210	fold.c	FUNCTION_58	ELSE_3	IF_9	IF_10
0x400266e	      0xe9d2020000	                           jmp 0x4002945	      2210	fold.c	FUNCTION_58	ELSE_3	IF_9	IF_10
0x4002673	           0xfb600	                   movzx eax, byte [rax]	       347	fold.c	FUNCTION_12
0x4002676	            0x3c73	                            cmp al, 0x73	      2212	fold.c	FUNCTION_58	ELSE_3	ELSE_4	IF_11	CALL_9
0x4002678	     0xf84ac020000	                            je 0x400292a	      2212	fold.c	FUNCTION_58	ELSE_3	ELSE_4	IF_11	CALL_9
0x400267e	            0x3c64	                            cmp al, 0x64	      2219	fold.c	FUNCTION_58	ELSE_3	ELSE_6
0x4002680	      0xb800000000	                              mov eax, 0	      2219	fold.c	FUNCTION_58	ELSE_3	ELSE_6
0x4002685	    0x41bd00000000	                             mov r13d, 0	      2219	fold.c	FUNCTION_58	ELSE_3	ELSE_6
0x400268b	        0x4c0f45e8	                         cmovne r13, rax	      2219	fold.c	FUNCTION_58	ELSE_3	ELSE_6
0x400268f	      0xe9b1020000	                           jmp 0x4002945	      2219	fold.c	FUNCTION_58	ELSE_3	ELSE_6
0x4002694	    0x41bd00000000	                             mov r13d, 0	      2213	fold.c	FUNCTION_58	ELSE_3	ELSE_4	IF_11
0x400269a	    0xc7442444ffff	     mov dword [rsp + 0x44], 0xffffffff 	      2228	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1
0x40026a2	      0x488d7c2420	                   lea rdi, [rsp + 0x20]	      2229	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1	CALL_11
0x40026a7	          0x41ffd5	                                call r13	      2229	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1	CALL_11
0x40026aa	      0x837c244000	               cmp dword [rsp + 0x40], 0	      2230	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1	IF_13
0x40026af	            0x7910	                           jns 0x40026c1	      2230	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1	IF_13
0x40026b1	    0x48836c242801	               sub qword [rsp + 0x28], 1	      2224	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1
0x40026b7	    0x8b0500000000	            mov eax, dword [0x040026bd] 	      2224	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1
0x40026bd	            0x85c0	                           test eax, eax	      2224	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1
0x40026bf	            0x74d9	                            je 0x400269a	      2224	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1
0x40026c1	    0x4981fd000000	                              cmp r13, 0	      2242	fold.c	FUNCTION_58	IF_14
0x40026c8	            0x7570	                           jne 0x400273a	      2242	fold.c	FUNCTION_58	IF_14
0x40026ca	    0x48c744241800	               mov qword [rsp + 0x18], 0	      2245	fold.c	FUNCTION_58	IF_14
0x40026d3	      0x4c8b6c2428	            mov r13, qword [rsp + 0x28] 	      2248	fold.c	FUNCTION_58	IF_14
0x40026d8	      0x837c244000	               cmp dword [rsp + 0x40], 0	      2250	fold.c	FUNCTION_58	IF_14	WHILE_1
0x40026dd	            0x7e55	                           jle 0x4002734	      2250	fold.c	FUNCTION_58	IF_14	WHILE_1
0x40026df	          0x4c89ff	                            mov rdi, r15	      2250	fold.c	FUNCTION_58	IF_14	WHILE_1
0x40026e2	    0x41be00000000	                             mov r14d, 0	      2250	fold.c	FUNCTION_58	IF_14	WHILE_1
0x40026e8	      0xbd00000000	                              mov ebp, 0	      2250	fold.c	FUNCTION_58	IF_14	WHILE_1
0x40026ed	      0x488d542418	                   lea rdx, [rsp + 0x18]	      2252	fold.c	FUNCTION_58	IF_14	WHILE_1	IF_15	CALL_12
0x40026f2	          0x4c89ee	                            mov rsi, r13	      2252	fold.c	FUNCTION_58	IF_14	WHILE_1	IF_15	CALL_12
0x40026f5	      0xe8e6d9ffff	                       call sym.foldFind	      2252	fold.c	FUNCTION_58	IF_14	WHILE_1	IF_15	CALL_12
0x40026fa	            0x85c0	                           test eax, eax	      2252	fold.c	FUNCTION_58	IF_14	WHILE_1	IF_15	CALL_12
0x40026fc	            0x741b	                            je 0x4002719	      2252	fold.c	FUNCTION_58	IF_14	WHILE_1	IF_15	CALL_12
0x40026fe	          0x83c501	                              add ebp, 1	      2254	fold.c	FUNCTION_58	IF_14	WHILE_1
0x4002701	      0x488b7c2418	            mov rdi, qword [rsp + 0x18] 	      2256	fold.c	FUNCTION_58	IF_14	WHILE_1
0x4002706	          0x488b07	                    mov rax, qword [rdi]	      2256	fold.c	FUNCTION_58	IF_14	WHILE_1
0x4002709	          0x4901c6	                            add r14, rax	      2256	fold.c	FUNCTION_58	IF_14	WHILE_1
0x400270c	        0x4883c710	                           add rdi, 0x10	      2257	fold.c	FUNCTION_58	IF_14	WHILE_1
0x4002710	          0x4929c5	                            sub r13, rax	      2258	fold.c	FUNCTION_58	IF_14	WHILE_1
0x4002713	        0x3b6c2440	            cmp ebp, dword [rsp + 0x40] 	      2250	fold.c	FUNCTION_58	IF_14	WHILE_1
0x4002717	            0x7cd4	                            jl 0x40026ed	      2250	fold.c	FUNCTION_58	IF_14	WHILE_1
0x4002719	      0x488b442418	            mov rax, qword [rsp + 0x18] 	      2260	fold.c	FUNCTION_58	IF_14	IF_16
0x400271e	          0x4885c0	                           test rax, rax	      2260	fold.c	FUNCTION_58	IF_14	IF_16
0x4002721	            0x7411	                            je 0x4002734	      2260	fold.c	FUNCTION_58	IF_14	IF_16
0x4002723	        0x3b6c2440	            cmp ebp, dword [rsp + 0x40] 	      2260	fold.c	FUNCTION_58	IF_14	IF_16
0x4002727	            0x750b	                           jne 0x4002734	      2260	fold.c	FUNCTION_58	IF_14	IF_16
0x4002729	        0x4c037008	                add r14, qword [rax + 8]	      2262	fold.c	FUNCTION_58	IF_14	IF_16
0x400272d	          0x4d39f4	                            cmp r12, r14	      2262	fold.c	FUNCTION_58	IF_14	IF_16
0x4002730	        0x4d0f4ce6	                          cmovl r12, r14	      2262	fold.c	FUNCTION_58	IF_14	IF_16
0x4002734	    0x41bd00000000	                             mov r13d, 0	      2262	fold.c	FUNCTION_58	IF_14	IF_16
0x400273a	      0x4c8b742428	            mov r14, qword [rsp + 0x28] 	      2269	fold.c	FUNCTION_58
0x400273f	          0x4c89e5	                            mov rbp, r12	      2270	fold.c	FUNCTION_58
0x4002742	          0x4d39e6	                            cmp r14, r12	      2272	fold.c	FUNCTION_58	IF_18
0x4002745	     0xf8e58010000	                           jle 0x40028a3	      2272	fold.c	FUNCTION_58	IF_18
0x400274b	        0x488b4308	                mov rax, qword [rbx + 8]	      2272	fold.c	FUNCTION_58	IF_18
0x400274f	          0x4c3b20	                    cmp r12, qword [rax]	      2273	fold.c	FUNCTION_58	IF_18
0x4002752	          0x4c89f5	                            mov rbp, r14	      2273	fold.c	FUNCTION_58	IF_18
0x4002755	        0x490f4dec	                         cmovge rbp, r12	      2273	fold.c	FUNCTION_58	IF_18
0x4002759	      0xe945010000	                           jmp 0x40028a3	      2273	fold.c	FUNCTION_58	IF_18
0x400275e	      0x488b442428	            mov rax, qword [rsp + 0x28] 	      2278	fold.c	FUNCTION_58	WHILE_2	IF_19
0x4002763	        0x488b5308	                mov rdx, qword [rbx + 8]	      2278	fold.c	FUNCTION_58	WHILE_2	IF_19
0x4002767	          0x483b02	                    cmp rax, qword [rdx]	      2278	fold.c	FUNCTION_58	WHILE_2	IF_19
0x400276a	     0xf8f41010000	                            jg 0x40028b1	      2278	fold.c	FUNCTION_58	WHILE_2	IF_19
0x4002770	          0x4839e8	                            cmp rax, rbp	      2280	fold.c	FUNCTION_58	WHILE_2	IF_20
0x4002773	     0xf8eba000000	                           jle 0x4002833	      2280	fold.c	FUNCTION_58	WHILE_2	IF_20
0x4002779	    0x4981fd000000	                              cmp r13, 0	      2287	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_21
0x4002780	           0xf95c2	                                setne dl	      2287	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_21
0x4002783	    0x4981fd000000	                              cmp r13, 0	      2287	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_21
0x400278a	           0xf95c0	                                setne al	      2287	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_21
0x400278d	            0x84c2	                             test dl, al	      2287	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_21
0x400278f	            0x740d	                            je 0x400279e	      2287	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_21
0x4002791	    0x4981fd000000	                              cmp r13, 0	      2287	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_21
0x4002798	     0xf8513010000	                           jne 0x40028b1	      2287	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_21
0x400279e	          0x4c39f5	                            cmp rbp, r14	      2289	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x40027a1	            0x7c29	                            jl 0x40027cc	      2289	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x40027a3	      0x488d542418	                   lea rdx, [rsp + 0x18]	      2290	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_13
0x40027a8	          0x4889ee	                            mov rsi, rbp	      2290	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_13
0x40027ab	          0x4c89ff	                            mov rdi, r15	      2290	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_13
0x40027ae	      0xe82dd9ffff	                       call sym.foldFind	      2290	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_13
0x40027b3	            0x85c0	                           test eax, eax	      2290	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_13
0x40027b5	            0x7415	                            je 0x40027cc	      2290	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_13
0x40027b7	      0x488b542418	            mov rdx, qword [rsp + 0x18] 	      2291	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x40027bc	        0x488b4208	                mov rax, qword [rdx + 8]	      2291	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x40027c0	          0x480302	                    add rax, qword [rdx]	      2291	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x40027c3	        0x4883e801	                              sub rax, 1	      2291	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x40027c7	          0x4839c5	                            cmp rbp, rax	      2291	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x40027ca	            0x7c2c	                            jl 0x40027f8	      2291	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x40027cc	      0x837c244000	               cmp dword [rsp + 0x40], 0	      2292	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x40027d1	            0x7537	                           jne 0x400280a	      2292	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x40027d3	      0x488d542418	                   lea rdx, [rsp + 0x18]	      2293	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_14
0x40027d8	      0x488b742428	            mov rsi, qword [rsp + 0x28] 	      2293	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_14
0x40027dd	          0x4c89ff	                            mov rdi, r15	      2293	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_14
0x40027e0	      0xe8fbd8ffff	                       call sym.foldFind	      2293	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_14
0x40027e5	            0x85c0	                           test eax, eax	      2293	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_14
0x40027e7	            0x7421	                            je 0x400280a	      2293	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_14
0x40027e9	      0x488b442418	            mov rax, qword [rsp + 0x18] 	      2294	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x40027ee	      0x488b742428	            mov rsi, qword [rsp + 0x28] 	      2294	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x40027f3	          0x483930	                    cmp qword [rax], rsi	      2294	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x40027f6	            0x7d12	                           jge 0x400280a	      2294	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x40027f8	      0x488b442418	            mov rax, qword [rsp + 0x18] 	      2295	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x40027fd	        0x488b6808	                mov rbp, qword [rax + 8]	      2295	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x4002801	          0x480328	                    add rbp, qword [rax]	      2295	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x4002804	        0x4883ed01	                              sub rbp, 1	      2295	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x4002808	            0xeb29	                           jmp 0x4002833	      2295	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x400280a	    0x4981fd000000	                              cmp r13, 0	      2296	fold.c	FUNCTION_58	WHILE_2	IF_20	ELSE_7	IF_23
0x4002811	     0xf859a000000	                           jne 0x40028b1	      2296	fold.c	FUNCTION_58	WHILE_2	IF_20	ELSE_7	IF_23
0x4002817	      0x488b742428	            mov rsi, qword [rsp + 0x28] 	      2297	fold.c	FUNCTION_58	WHILE_2	IF_20	ELSE_7	IF_23	CALL_15
0x400281c	          0x4889df	                            mov rdi, rbx	      2297	fold.c	FUNCTION_58	WHILE_2	IF_20	ELSE_7	IF_23	CALL_15
0x400281f	      0xe83bd9ffff	                   call sym.foldLevelWin	      2297	fold.c	FUNCTION_58	WHILE_2	IF_20	ELSE_7	IF_23	CALL_15
0x4002824	        0x3b442440	            cmp eax, dword [rsp + 0x40] 	      2297	fold.c	FUNCTION_58	WHILE_2	IF_20	ELSE_7	IF_23	CALL_15
0x4002828	     0xf8483000000	                            je 0x40028b1	      2297	fold.c	FUNCTION_58	WHILE_2	IF_20	ELSE_7	IF_23	CALL_15
0x400282e	      0x488b6c2428	            mov rbp, qword [rsp + 0x28] 	      2301	fold.c	FUNCTION_58	WHILE_2	IF_20	ELSE_7	IF_23
0x4002833	      0x837c244000	               cmp dword [rsp + 0x40], 0	      2307	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24
0x4002838	            0x7e42	                           jle 0x400287c	      2307	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24
0x400283a	      0x488b442428	            mov rax, qword [rsp + 0x28] 	      2309	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24
0x400283f	    0x488905000000	            mov qword [0x04002846], rax 	      2309	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24
0x4002846	    0x48892d000000	            mov qword [0x0400284d], rbp 	      2310	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24
0x400284d	        0x4883ec08	                              sub rsp, 8	      2311	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24	CALL_16
0x4002851	            0x6a02	                                  push 2	      2311	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24	CALL_16
0x4002853	          0x4989e9	                             mov r9, rbp	      2311	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24	CALL_16
0x4002856	          0x4d89e8	                             mov r8, r13	      2311	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24	CALL_16
0x4002859	      0x488d4c2430	                   lea rcx, [rsp + 0x30]	      2311	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24	CALL_16
0x400285e	          0x4c89f2	                            mov rdx, r14	      2311	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24	CALL_16
0x4002861	      0xbe01000000	                              mov esi, 1	      2311	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24	CALL_16
0x4002866	          0x4c89ff	                            mov rdi, r15	      2311	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24	CALL_16
0x4002869	      0xe84ff1ffff	          call sym.foldUpdateIEMSRecurse	      2311	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24	CALL_16
0x400286e	          0x4889c5	                            mov rbp, rax	      2311	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24	CALL_16
0x4002871	      0x4c8b742438	            mov r14, qword [rsp + 0x38] 	      2313	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24
0x4002876	        0x4883c410	                           add rsp, 0x10	      2313	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24
0x400287a	            0xeb27	                           jmp 0x40028a3	      2313	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24
0x400287c	      0x488b442428	            mov rax, qword [rsp + 0x28] 	      2317	fold.c	FUNCTION_58	WHILE_2	ELSE_9	IF_25
0x4002881	        0x488b5308	                mov rdx, qword [rbx + 8]	      2317	fold.c	FUNCTION_58	WHILE_2	ELSE_9	IF_25
0x4002885	          0x483b02	                    cmp rax, qword [rdx]	      2317	fold.c	FUNCTION_58	WHILE_2	ELSE_9	IF_25
0x4002888	            0x7427	                            je 0x40028b1	      2317	fold.c	FUNCTION_58	WHILE_2	ELSE_9	IF_25
0x400288a	        0x4883c001	                              add rax, 1	      2319	fold.c	FUNCTION_58	WHILE_2	ELSE_9
0x400288e	      0x4889442428	             mov qword [rsp + 0x28], rax	      2319	fold.c	FUNCTION_58	WHILE_2	ELSE_9
0x4002893	        0x8b442444	            mov eax, dword [rsp + 0x44] 	      2320	fold.c	FUNCTION_58	WHILE_2	ELSE_9
0x4002897	        0x89442440	             mov dword [rsp + 0x40], eax	      2320	fold.c	FUNCTION_58	WHILE_2	ELSE_9
0x400289b	      0x488d7c2420	                   lea rdi, [rsp + 0x20]	      2321	fold.c	FUNCTION_58	WHILE_2	ELSE_9	CALL_17
0x40028a0	          0x41ffd5	                                call r13	      2321	fold.c	FUNCTION_58	WHILE_2	ELSE_9	CALL_17
0x40028a3	    0x8b0500000000	            mov eax, dword [0x040028a9] 	      2274	fold.c	FUNCTION_58	WHILE_2
0x40028a9	            0x85c0	                           test eax, eax	      2274	fold.c	FUNCTION_58	WHILE_2
0x40028ab	     0xf84adfeffff	                            je 0x400275e	      2274	fold.c	FUNCTION_58	WHILE_2
0x40028b1	          0x4889ea	                            mov rdx, rbp	      2326	fold.c	FUNCTION_58	CALL_18
0x40028b4	          0x4c89f6	                            mov rsi, r14	      2326	fold.c	FUNCTION_58	CALL_18
0x40028b7	          0x4c89ff	                            mov rdi, r15	      2326	fold.c	FUNCTION_58	CALL_18
0x40028ba	      0xe84fefffff	                     call sym.foldRemove	      2326	fold.c	FUNCTION_58	CALL_18
0x40028bf	    0x833d00000000	               cmp dword [0x040028c6], 0	      2329	fold.c	FUNCTION_58	IF_26
0x40028c6	            0x7411	                            je 0x40028d9	      2329	fold.c	FUNCTION_58	IF_26
0x40028c8	    0x83bbd4010000	              cmp dword [rbx + 0x1d4], 0	      2329	fold.c	FUNCTION_58	IF_26
0x40028cf	            0x7408	                            je 0x40028d9	      2329	fold.c	FUNCTION_58	IF_26
0x40028d1	          0x4889df	                            mov rdi, rbx	      2330	fold.c	FUNCTION_58	CALL_19
0x40028d4	      0xe800000000	                          call 0x40028d9	      2330	fold.c	FUNCTION_58	CALL_19
0x40028d9	          0x4939ec	                            cmp r12, rbp	      2335	fold.c	FUNCTION_58	IF_27
0x40028dc	            0x742f	                            je 0x400290d	      2335	fold.c	FUNCTION_58	IF_27
0x40028de	    0x488b83300100	           mov rax, qword [rbx + 0x130] 	      2337	fold.c	FUNCTION_58	IF_27	IF_28
0x40028e5	          0x4885c0	                           test rax, rax	      2337	fold.c	FUNCTION_58	IF_27	IF_28
0x40028e8	            0x7407	                            je 0x40028f1	      2337	fold.c	FUNCTION_58	IF_27	IF_28
0x40028ea	      0x4839442408	                cmp qword [rsp + 8], rax	      2337	fold.c	FUNCTION_58	IF_27	IF_28
0x40028ef	            0x7d0c	                           jge 0x40028fd	      2337	fold.c	FUNCTION_58	IF_27	IF_28
0x40028f1	      0x488b442408	                mov rax, qword [rsp + 8]	      2338	fold.c	FUNCTION_58	IF_27	IF_28
0x40028f6	    0x488983300100	            mov qword [rbx + 0x130], rax	      2338	fold.c	FUNCTION_58	IF_27	IF_28
0x40028fd	    0x483bab380100	           cmp rbp, qword [rbx + 0x138] 	      2339	fold.c	FUNCTION_58	IF_27	IF_29
0x4002904	            0x7e07	                           jle 0x400290d	      2339	fold.c	FUNCTION_58	IF_27	IF_29
0x4002906	    0x4889ab380100	            mov qword [rbx + 0x138], rbp	      2340	fold.c	FUNCTION_58	IF_27	IF_29
0x400290d	    0x48c705000000	               mov qword [0x04002918], 0	      2343	fold.c	FUNCTION_58
0x4002918	    0x8b0500000000	            mov eax, dword [0x0400291e] 	       838	fold.c	FUNCTION_28	IF_2
0x400291e	         0xb442404	                 or eax, dword [rsp + 4]	       838	fold.c	FUNCTION_28	IF_2
0x4002922	    0x890500000000	            mov dword [0x04002928], eax 	       838	fold.c	FUNCTION_28	IF_2
0x4002928	            0xeb36	                           jmp 0x4002960	       838	fold.c	FUNCTION_28	IF_2
0x400292a	    0xc7442440ffff	     mov dword [rsp + 0x40], 0xffffffff 	      2223	fold.c	FUNCTION_58	ELSE_3	ELSE_6
0x4002932	    0x8b0500000000	            mov eax, dword [0x04002938] 	      2224	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1
0x4002938	            0x85c0	                           test eax, eax	      2224	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1
0x400293a	     0xf8454fdffff	                            je 0x4002694	      2224	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1
0x4002940	      0xe985fdffff	                           jmp 0x40026ca	      2224	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1
0x4002945	    0xc7442440ffff	     mov dword [rsp + 0x40], 0xffffffff 	      2223	fold.c	FUNCTION_58	ELSE_3	ELSE_6
0x400294d	    0x8b0500000000	            mov eax, dword [0x04002953] 	      2224	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1
0x4002953	            0x85c0	                           test eax, eax	      2224	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1
0x4002955	     0xf843ffdffff	                            je 0x400269a	      2224	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1
0x400295b	      0xe9dafdffff	                           jmp 0x400273a	      2224	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1
0x4002960	      0x488b442458	            mov rax, qword [rsp + 0x58] 	       840	fold.c	FUNCTION_28
0x4002965	    0x644833042528	                xor rax, qword fs:[0x28]	       840	fold.c	FUNCTION_28
0x400296e	            0x7405	                            je 0x4002975	       840	fold.c	FUNCTION_28
0x4002970	      0xe800000000	                          call 0x4002975	       840	fold.c	FUNCTION_28
0x4002975	        0x4883c468	                           add rsp, 0x68	       840	fold.c	FUNCTION_28
0x4002979	              0x5b	                                 pop rbx	       840	fold.c	FUNCTION_28
0x400297a	              0x5d	                                 pop rbp	       840	fold.c	FUNCTION_28
0x400297b	            0x415c	                                 pop r12	       840	fold.c	FUNCTION_28
0x400297d	            0x415d	                                 pop r13	       840	fold.c	FUNCTION_28
0x400297f	            0x415e	                                 pop r14	       840	fold.c	FUNCTION_28
0x4002981	            0x415f	                                 pop r15	       840	fold.c	FUNCTION_28
0x4002983	              0xc3	                                     ret	       840	fold.c	FUNCTION_28
openFoldRecurse	DO,0:ELSE,0:FOR,0:SWITCH,0:IF,0:CALL,1:WHILE,0:functions,0	7
0x40032e7	        0x4883ec08	                              sub rsp, 8	       435	fold.c	FUNCTION_18
0x40032eb	      0xb900000000	                              mov ecx, 0	       436	fold.c	FUNCTION_18	CALL_1
0x40032f0	      0xba01000000	                              mov edx, 1	       436	fold.c	FUNCTION_18	CALL_1
0x40032f5	      0xbe01000000	                              mov esi, 1	       436	fold.c	FUNCTION_18	CALL_1
0x40032fa	      0xe86bfdffff	                  call sym.setManualFold	       436	fold.c	FUNCTION_18	CALL_1
0x40032ff	        0x4883c408	                              add rsp, 8	       437	fold.c	FUNCTION_18
0x4003303	              0xc3	                                     ret	       437	fold.c	FUNCTION_18
closeFoldRecurse	DO,0:ELSE,0:FOR,0:SWITCH,0:IF,0:CALL,1:WHILE,0:functions,0	7
0x40031de	        0x4883ec08	                              sub rsp, 8	       377	fold.c	FUNCTION_15
0x40031e2	      0xb900000000	                              mov ecx, 0	       378	fold.c	FUNCTION_15	CALL_1
0x40031e7	      0xba01000000	                              mov edx, 1	       378	fold.c	FUNCTION_15	CALL_1
0x40031ec	      0xbe00000000	                              mov esi, 0	       378	fold.c	FUNCTION_15	CALL_1
0x40031f1	      0xe874feffff	                  call sym.setManualFold	       378	fold.c	FUNCTION_15	CALL_1
0x40031f6	        0x4883c408	                              add rsp, 8	       379	fold.c	FUNCTION_15
0x40031fa	              0xc3	                                     ret	       379	fold.c	FUNCTION_15
openFold	DO,0:ELSE,0:FOR,0:SWITCH,0:IF,0:CALL,1:WHILE,0:functions,0	5
0x40031cb	        0x4883ec08	                              sub rsp, 8	       425	fold.c	FUNCTION_17
0x40031cf	      0xba01000000	                              mov edx, 1	       426	fold.c	FUNCTION_17	CALL_1
0x40031d4	      0xe83dffffff	                  call sym.setFoldRepeat	       426	fold.c	FUNCTION_17	CALL_1
0x40031d9	        0x4883c408	                              add rsp, 8	       427	fold.c	FUNCTION_17
0x40031dd	              0xc3	                                     ret	       427	fold.c	FUNCTION_17
clearFolding	DO,0:ELSE,0:FOR,0:SWITCH,0:IF,0:CALL,1:WHILE,0:functions,0	7
0x4003d8f	              0x53	                                push rbx	       796	fold.c	FUNCTION_27
0x4003d90	          0x4889fb	                            mov rbx, rdi	       796	fold.c	FUNCTION_27
0x4003d93	    0x488dbf080100	                  lea rdi, [rdi + 0x108]	       797	fold.c	FUNCTION_27	CALL_1
0x4003d9a	      0xe800000000	                          call 0x4003d9f	       797	fold.c	FUNCTION_27	CALL_1
0x4003d9f	    0xc68321010000	               mov byte [rbx + 0x121], 0	       798	fold.c	FUNCTION_27
0x4003da6	              0x5b	                                 pop rbx	       799	fold.c	FUNCTION_27
0x4003da7	              0xc3	                                     ret	       799	fold.c	FUNCTION_27
closeFold	DO,0:ELSE,0:FOR,0:SWITCH,0:IF,0:CALL,1:WHILE,0:functions,0	5
0x40031b8	        0x4883ec08	                              sub rsp, 8	       367	fold.c	FUNCTION_14
0x40031bc	      0xba00000000	                              mov edx, 0	       368	fold.c	FUNCTION_14	CALL_1
0x40031c1	      0xe850ffffff	                  call sym.setFoldRepeat	       368	fold.c	FUNCTION_14	CALL_1
0x40031c6	        0x4883c408	                              add rsp, 8	       369	fold.c	FUNCTION_14
0x40031ca	              0xc3	                                     ret	       369	fold.c	FUNCTION_14
foldlevelIndent	DO,0:ELSE,2:FOR,0:SWITCH,0:IF,4:CALL,5:WHILE,0:functions,0	55
0x4000a07	            0x4154	                                push r12	      3203	fold.c	FUNCTION_67
0x4000a09	              0x55	                                push rbp	      3203	fold.c	FUNCTION_67
0x4000a0a	              0x53	                                push rbx	      3203	fold.c	FUNCTION_67
0x4000a0b	          0x4889fb	                            mov rbx, rdi	      3203	fold.c	FUNCTION_67
0x4000a0e	        0x488b6f10	            mov rbp, qword [rdi + 0x10] 	      3206	fold.c	FUNCTION_67
0x4000a12	        0x48036f08	                add rbp, qword [rdi + 8]	      3206	fold.c	FUNCTION_67
0x4000a16	          0x488b07	                    mov rax, qword [rdi]	      3208	fold.c	FUNCTION_67
0x4000a19	        0x4c8b6008	                mov r12, qword [rax + 8]	      3208	fold.c	FUNCTION_67
0x4000a1d	      0xba00000000	                              mov edx, 0	      3209	fold.c	FUNCTION_67	CALL_2
0x4000a22	          0x4889ee	                            mov rsi, rbp	      3209	fold.c	FUNCTION_67	CALL_2
0x4000a25	          0x4c89e7	                            mov rdi, r12	      3209	fold.c	FUNCTION_67	CALL_2
0x4000a28	      0xe800000000	                          call 0x4000a2d	      3209	fold.c	FUNCTION_67	CALL_2
0x4000a2d	          0x4889c7	                            mov rdi, rax	      3209	fold.c	FUNCTION_67	CALL_2
0x4000a30	      0xe800000000	                          call 0x4000a35	      3209	fold.c	FUNCTION_67	CALL_2
0x4000a35	           0xfb630	                   movzx esi, byte [rax]	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x4000a38	          0x4084f6	                           test sil, sil	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x4000a3b	            0x7418	                            je 0x4000a55	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x4000a3d	        0x400fb6f6	                          movzx esi, sil	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x4000a41	          0x488b03	                    mov rax, qword [rbx]	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x4000a44	    0x488bb8e00100	           mov rdi, qword [rax + 0x1e0] 	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x4000a4b	      0xe800000000	                          call 0x4000a50	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x4000a50	          0x4885c0	                           test rax, rax	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x4000a53	            0x741e	                            je 0x4000a73	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x4000a55	        0x4883fd01	                              cmp rbp, 1	      3216	fold.c	FUNCTION_67	IF_1	IF_2
0x4000a59	            0x7406	                            je 0x4000a61	      3216	fold.c	FUNCTION_67	IF_1	IF_2
0x4000a5b	        0x493b2c24	                    cmp rbp, qword [r12]	      3216	fold.c	FUNCTION_67	IF_1	IF_2
0x4000a5f	            0x7509	                           jne 0x4000a6a	      3216	fold.c	FUNCTION_67	IF_1	IF_2
0x4000a61	    0xc74320000000	               mov dword [rbx + 0x20], 0	      3217	fold.c	FUNCTION_67	IF_1	IF_2
0x4000a68	            0xeb30	                           jmp 0x4000a9a	      3217	fold.c	FUNCTION_67	IF_1	IF_2
0x4000a6a	    0xc74320ffffff	     mov dword [rbx + 0x20], 0xffffffff 	      3219	fold.c	FUNCTION_67	IF_1	ELSE_1
0x4000a71	            0xeb27	                           jmp 0x4000a9a	      3219	fold.c	FUNCTION_67	IF_1	ELSE_1
0x4000a73	          0x4889ee	                            mov rsi, rbp	      3222	fold.c	FUNCTION_67	CALL_5
0x4000a76	          0x4c89e7	                            mov rdi, r12	      3222	fold.c	FUNCTION_67	CALL_5
0x4000a79	      0xe800000000	                          call 0x4000a7e	      3222	fold.c	FUNCTION_67	CALL_5
0x4000a7e	            0x89c5	                            mov ebp, eax	      3222	fold.c	FUNCTION_67	CALL_5
0x4000a80	    0x488b3d000000	            mov rdi, qword [0x04000a87] 	      3222	fold.c	FUNCTION_67	CALL_5
0x4000a87	      0xe800000000	                          call 0x4000a8c	      3222	fold.c	FUNCTION_67	CALL_5
0x4000a8c	          0x4889c1	                            mov rcx, rax	      3222	fold.c	FUNCTION_67	CALL_5
0x4000a8f	          0x4863c5	                         movsxd rax, ebp	      3222	fold.c	FUNCTION_67	CALL_5
0x4000a92	            0x4899	                                     cqo	      3222	fold.c	FUNCTION_67	CALL_5
0x4000a94	          0x48f7f9	                                idiv rcx	      3222	fold.c	FUNCTION_67	CALL_5
0x4000a97	          0x894320	             mov dword [rbx + 0x20], eax	      3222	fold.c	FUNCTION_67	CALL_5
0x4000a9a	          0x488b03	                    mov rax, qword [rbx]	      3223	fold.c	FUNCTION_67	IF_3
0x4000a9d	    0x488b80100200	           mov rax, qword [rax + 0x210] 	      3223	fold.c	FUNCTION_67	IF_3
0x4000aa4	        0x48635320	         movsxd rdx, dword [rbx + 0x20] 	      3223	fold.c	FUNCTION_67	IF_3
0x4000aa8	          0x4839c2	                            cmp rdx, rax	      3223	fold.c	FUNCTION_67	IF_3
0x4000aab	            0x7e0d	                           jle 0x4000aba	      3223	fold.c	FUNCTION_67	IF_3
0x4000aad	            0x85c0	                           test eax, eax	      3225	fold.c	FUNCTION_67	IF_3
0x4000aaf	      0xba00000000	                              mov edx, 0	      3225	fold.c	FUNCTION_67	IF_3
0x4000ab4	           0xf48c2	                          cmovs eax, edx	      3225	fold.c	FUNCTION_67	IF_3
0x4000ab7	          0x894320	             mov dword [rbx + 0x20], eax	      3225	fold.c	FUNCTION_67	IF_3
0x4000aba	              0x5b	                                 pop rbx	      3229	fold.c	FUNCTION_67
0x4000abb	              0x5d	                                 pop rbp	      3229	fold.c	FUNCTION_67
0x4000abc	            0x415c	                                 pop r12	      3229	fold.c	FUNCTION_67
0x4000abe	              0xc3	                                     ret	      3229	fold.c	FUNCTION_67
deleteFold	DO,0:ELSE,3:FOR,1:SWITCH,0:IF,10:CALL,13:WHILE,1:functions,0	143
0x4003b29	            0x4157	                                push r15	       705	fold.c	FUNCTION_26
0x4003b2b	            0x4156	                                push r14	       705	fold.c	FUNCTION_26
0x4003b2d	            0x4155	                                push r13	       705	fold.c	FUNCTION_26
0x4003b2f	            0x4154	                                push r12	       705	fold.c	FUNCTION_26
0x4003b31	              0x55	                                push rbp	       705	fold.c	FUNCTION_26
0x4003b32	              0x53	                                push rbx	       705	fold.c	FUNCTION_26
0x4003b33	        0x4883ec58	                           sub rsp, 0x58	       705	fold.c	FUNCTION_26
0x4003b37	          0x4989fe	                            mov r14, rdi	       705	fold.c	FUNCTION_26
0x4003b3a	          0x4889f3	                            mov rbx, rsi	       705	fold.c	FUNCTION_26
0x4003b3d	      0x4889742420	             mov qword [rsp + 0x20], rsi	       705	fold.c	FUNCTION_26
0x4003b42	        0x89542428	             mov dword [rsp + 0x28], edx	       705	fold.c	FUNCTION_26
0x4003b46	        0x894c242c	             mov dword [rsp + 0x2c], ecx	       705	fold.c	FUNCTION_26
0x4003b4a	    0x64488b042528	                mov rax, qword fs:[0x28]	       705	fold.c	FUNCTION_26
0x4003b53	      0x4889442448	             mov qword [rsp + 0x48], rax	       705	fold.c	FUNCTION_26
0x4003b58	            0x31c0	                            xor eax, eax	       705	fold.c	FUNCTION_26
0x4003b5a	    0xc744243c0000	               mov dword [rsp + 0x3c], 0	       712	fold.c	FUNCTION_26
0x4003b62	    0x488b3d000000	            mov rdi, qword [0x04003b69] 	       720	fold.c	FUNCTION_26	CALL_1
0x4003b69	      0xe816eeffff	                    call sym.checkupdate	       720	fold.c	FUNCTION_26	CALL_1
0x4003b6e	          0x4939de	                            cmp r14, rbx	       722	fold.c	FUNCTION_26	WHILE_1
0x4003b71	     0xf8fd1010000	                            jg 0x4003d48	       722	fold.c	FUNCTION_26	WHILE_1
0x4003b77	    0x48c744241000	               mov qword [rsp + 0x10], 0	       722	fold.c	FUNCTION_26	WHILE_1
0x4003b80	    0x48c7442418ff	     mov qword [rsp + 0x18], 0x7fffffff 	       722	fold.c	FUNCTION_26	WHILE_1
0x4003b89	    0xc744240c0000	                mov dword [rsp + 0xc], 0	       722	fold.c	FUNCTION_26	WHILE_1
0x4003b91	    0x41bc00000000	                             mov r12d, 0	       722	fold.c	FUNCTION_26	WHILE_1
0x4003b97	    0x48c704240000	                      mov qword [rsp], 0	       722	fold.c	FUNCTION_26	WHILE_1
0x4003b9f	    0x41bd00000000	                             mov r13d, 0	       722	fold.c	FUNCTION_26	WHILE_1
0x4003ba5	    0x488b05000000	            mov rax, qword [0x04003bac] 	       725	fold.c	FUNCTION_26	WHILE_1
0x4003bac	    0x488da8080100	                  lea rbp, [rax + 0x108]	       725	fold.c	FUNCTION_26	WHILE_1
0x4003bb3	    0xc74424380000	               mov dword [rsp + 0x38], 0	       728	fold.c	FUNCTION_26	WHILE_1
0x4003bbb	      0xbb00000000	                              mov ebx, 0	       727	fold.c	FUNCTION_26	WHILE_1
0x4003bc0	    0x41bf00000000	                             mov r15d, 0	       726	fold.c	FUNCTION_26	WHILE_1
0x4003bc6	          0x4c89f6	                            mov rsi, r14	       731	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_1	CALL_2
0x4003bc9	          0x4829de	                            sub rsi, rbx	       731	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_1	CALL_2
0x4003bcc	      0x488d542440	                   lea rdx, [rsp + 0x40]	       731	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_1	CALL_2
0x4003bd1	          0x4889ef	                            mov rdi, rbp	       731	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_1	CALL_2
0x4003bd4	      0xe807c5ffff	                       call sym.foldFind	       731	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_1	CALL_2
0x4003bd9	            0x85c0	                           test eax, eax	       731	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_1	CALL_2
0x4003bdb	            0x7448	                            je 0x4003c25	       731	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_1	CALL_2
0x4003bdd	      0x4c8b6c2440	            mov r13, qword [rsp + 0x40] 	       735	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x4003be2	          0x4989d9	                             mov r9, rbx	       739	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2	CALL_3
0x4003be5	      0x4c8d44243c	                    lea r8, [rsp + 0x3c]	       739	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2	CALL_3
0x4003bea	          0x4489e1	                           mov ecx, r12d	       739	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2	CALL_3
0x4003bed	      0x488d542438	                   lea rdx, [rsp + 0x38]	       739	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2	CALL_3
0x4003bf2	          0x4c89ee	                            mov rsi, r13	       739	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2	CALL_3
0x4003bf5	    0x488b3d000000	            mov rdi, qword [0x04003bfc] 	       739	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2	CALL_3
0x4003bfc	      0xe834c7ffff	                   call sym.check_closed	       739	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2	CALL_3
0x4003c01	            0x85c0	                           test eax, eax	       739	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2	CALL_3
0x4003c03	            0x7519	                           jne 0x4003c1e	       739	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2	CALL_3
0x4003c05	      0x488b442440	            mov rax, qword [rsp + 0x40] 	       744	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x4003c0a	        0x4183c401	                             add r12d, 1	       746	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x4003c0e	        0x48891c24	                    mov qword [rsp], rbx	       746	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x4003c12	          0x480318	                    add rbx, qword [rax]	       745	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x4003c15	          0x4989ef	                            mov r15, rbp	       747	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x4003c18	        0x488d6810	                   lea rbp, [rax + 0x10]	       744	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x4003c1c	            0xeba8	                           jmp 0x4003bc6	       747	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x4003c1e	        0x48891c24	                    mov qword [rsp], rbx	       747	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x4003c22	          0x4989ef	                            mov r15, rbp	       747	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x4003c25	        0x4983c601	                              add r14, 1	       750	fold.c	FUNCTION_26	WHILE_1	IF_3
0x4003c29	          0x4d85ff	                           test r15, r15	       748	fold.c	FUNCTION_26	WHILE_1	IF_3
0x4003c2c	     0xf8499000000	                            je 0x4003ccb	       748	fold.c	FUNCTION_26	WHILE_1	IF_3
0x4003c32	        0x498b4500	                    mov rax, qword [r13]	       754	fold.c	FUNCTION_26	WHILE_1	ELSE_1
0x4003c36	          0x4989c6	                            mov r14, rax	       754	fold.c	FUNCTION_26	WHILE_1	ELSE_1
0x4003c39	        0x4d037508	                add r14, qword [r13 + 8]	       754	fold.c	FUNCTION_26	WHILE_1	ELSE_1
0x4003c3d	        0x4c033424	                    add r14, qword [rsp]	       754	fold.c	FUNCTION_26	WHILE_1	ELSE_1
0x4003c41	    0x488b3d000000	            mov rdi, qword [0x04003c48] 	       756	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_4
0x4003c48	    0x488b97f80100	           mov rdx, qword [rdi + 0x1f8] 	       307	fold.c	FUNCTION_8
0x4003c4f	        0x807a0375	                cmp byte [rdx + 3], 0x75	       756	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_4
0x4003c53	            0x7527	                           jne 0x4003c7c	       756	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_4
0x4003c55	          0x4c89ee	                            mov rsi, r13	       757	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_5
0x4003c58	        0x492b7710	             sub rsi, qword [r15 + 0x10]	       757	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_5
0x4003c5c	        0x48c1fe04	                              sar rsi, 4	       757	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_5
0x4003c60	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	       757	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_5
0x4003c6a	        0x480faff0	                           imul rsi, rax	       757	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_5
0x4003c6e	        0x8b542428	            mov edx, dword [rsp + 0x28] 	       757	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_5
0x4003c72	          0x4c89ff	                            mov rdi, r15	       757	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_5
0x4003c75	      0xe8d2d6ffff	                call sym.deleteFoldEntry	       757	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_5
0x4003c7a	            0xeb42	                           jmp 0x4003cbe	       757	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_5
0x4003c7c	        0x48030424	                    add rax, qword [rsp]	       761	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_5
0x4003c80	      0x488b4c2418	            mov rcx, qword [rsp + 0x18] 	       761	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_5
0x4003c85	          0x4839c1	                            cmp rcx, rax	       761	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_5
0x4003c88	        0x480f4ec1	                         cmovle rax, rcx	       761	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_5
0x4003c8c	      0x4889442418	             mov qword [rsp + 0x18], rax	       761	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_5
0x4003c91	      0x488b442410	            mov rax, qword [rsp + 0x10] 	       761	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_5
0x4003c96	          0x4c39f0	                            cmp rax, r14	       761	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_5
0x4003c99	        0x490f4cc6	                          cmovl rax, r14	       761	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_5
0x4003c9d	      0x4889442410	             mov qword [rsp + 0x10], rax	       761	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_5
0x4003ca2	      0x837c240c00	                cmp dword [rsp + 0xc], 0	       765	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_7
0x4003ca7	            0x7505	                           jne 0x4003cae	       765	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_7
0x4003ca9	      0xe8b5c7ffff	                    call sym.parseMarker	       766	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	CALL_6
0x4003cae	        0x488b1424	                    mov rdx, qword [rsp]	       767	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	CALL_7
0x4003cb2	        0x8b742428	            mov esi, dword [rsp + 0x28] 	       767	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	CALL_7
0x4003cb6	          0x4c89ef	                            mov rdi, r13	       767	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	CALL_7
0x4003cb9	      0xe8c2ccffff	              call sym.deleteFoldMarkers	       767	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	CALL_7
0x4003cbe	      0xe800000000	                          call 0x4003cc3	       772	fold.c	FUNCTION_26	WHILE_1	ELSE_1	CALL_8
0x4003cc3	    0xc744240c0100	                mov dword [rsp + 0xc], 1	       769	fold.c	FUNCTION_26	WHILE_1	ELSE_1
0x4003ccb	      0x4c39742420	            cmp qword [rsp + 0x20], r14 	       722	fold.c	FUNCTION_26	WHILE_1
0x4003cd0	     0xf8dcffeffff	                           jge 0x4003ba5	       722	fold.c	FUNCTION_26	WHILE_1
0x4003cd6	      0x837c240c00	                cmp dword [rsp + 0xc], 0	       775	fold.c	FUNCTION_26	IF_8
0x4003cdb	            0x7543	                           jne 0x4003d20	       775	fold.c	FUNCTION_26	IF_8
0x4003cdd	      0xba05000000	                              mov edx, 5	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x4003ce2	      0xbe00000000	                              mov esi, 0	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x4003ce7	      0xbf00000000	                              mov edi, 0	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x4003cec	      0xe800000000	                          call 0x4003cf1	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x4003cf1	          0x4889c7	                            mov rdi, rax	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x4003cf4	      0xe800000000	                          call 0x4003cf9	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x4003cf9	      0x837c242c00	               cmp dword [rsp + 0x2c], 0	       779	fold.c	FUNCTION_26	IF_8	IF_9
0x4003cfe	            0x7425	                            je 0x4003d25	       779	fold.c	FUNCTION_26	IF_8	IF_9
0x4003d00	            0xeb12	                           jmp 0x4003d14	       779	fold.c	FUNCTION_26	IF_8	IF_9
0x4003d02	    0x48c7442418ff	     mov qword [rsp + 0x18], 0x7fffffff 	       717	fold.c	FUNCTION_26
0x4003d0b	    0x48c744241000	               mov qword [rsp + 0x10], 0	       718	fold.c	FUNCTION_26
0x4003d14	      0xbf14000000	                           mov edi, 0x14	       780	fold.c	FUNCTION_26	IF_8	CALL_11
0x4003d19	      0xe800000000	                          call 0x4003d1e	       780	fold.c	FUNCTION_26	IF_8	CALL_11
0x4003d1e	            0xeb05	                           jmp 0x4003d25	       780	fold.c	FUNCTION_26	IF_8	CALL_11
0x4003d20	      0xe800000000	                          call 0x4003d25	       784	fold.c	FUNCTION_26	CALL_12
0x4003d25	      0x488b442410	            mov rax, qword [rsp + 0x10] 	       786	fold.c	FUNCTION_26	IF_10
0x4003d2a	          0x4885c0	                           test rax, rax	       786	fold.c	FUNCTION_26	IF_10
0x4003d2d	            0x7e3c	                           jle 0x4003d6b	       786	fold.c	FUNCTION_26	IF_10
0x4003d2f	      0xb900000000	                              mov ecx, 0	       787	fold.c	FUNCTION_26	CALL_13
0x4003d34	          0x4889c2	                            mov rdx, rax	       787	fold.c	FUNCTION_26	CALL_13
0x4003d37	      0xbe00000000	                              mov esi, 0	       787	fold.c	FUNCTION_26	CALL_13
0x4003d3c	      0x488b7c2418	            mov rdi, qword [rsp + 0x18] 	       787	fold.c	FUNCTION_26	CALL_13
0x4003d41	      0xe800000000	                          call 0x4003d46	       787	fold.c	FUNCTION_26	CALL_13
0x4003d46	            0xeb23	                           jmp 0x4003d6b	       788	fold.c	FUNCTION_26
0x4003d48	      0xba05000000	                              mov edx, 5	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x4003d4d	      0xbe00000000	                              mov esi, 0	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x4003d52	      0xbf00000000	                              mov edi, 0	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x4003d57	      0xe800000000	                          call 0x4003d5c	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x4003d5c	          0x4889c7	                            mov rdi, rax	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x4003d5f	      0xe800000000	                          call 0x4003d64	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x4003d64	      0x837c242c00	               cmp dword [rsp + 0x2c], 0	       779	fold.c	FUNCTION_26	IF_8	IF_9
0x4003d69	            0x7597	                           jne 0x4003d02	       779	fold.c	FUNCTION_26	IF_8	IF_9
0x4003d6b	      0x488b442448	            mov rax, qword [rsp + 0x48] 	       788	fold.c	FUNCTION_26
0x4003d70	    0x644833042528	                xor rax, qword fs:[0x28]	       788	fold.c	FUNCTION_26
0x4003d79	            0x7405	                            je 0x4003d80	       788	fold.c	FUNCTION_26
0x4003d7b	      0xe800000000	                          call 0x4003d80	       788	fold.c	FUNCTION_26
0x4003d80	        0x4883c458	                           add rsp, 0x58	       788	fold.c	FUNCTION_26
0x4003d84	              0x5b	                                 pop rbx	       788	fold.c	FUNCTION_26
0x4003d85	              0x5d	                                 pop rbp	       788	fold.c	FUNCTION_26
0x4003d86	            0x415c	                                 pop r12	       788	fold.c	FUNCTION_26
0x4003d88	            0x415d	                                 pop r13	       788	fold.c	FUNCTION_26
0x4003d8a	            0x415e	                                 pop r14	       788	fold.c	FUNCTION_26
0x4003d8c	            0x415f	                                 pop r15	       788	fold.c	FUNCTION_26
0x4003d8e	              0xc3	                                     ret	       788	fold.c	FUNCTION_26
foldOpenNested	DO,0:ELSE,0:FOR,1:SWITCH,0:IF,0:CALL,1:WHILE,0:functions,0	26
0x40001c1	            0x4155	                                push r13	      1379	fold.c	FUNCTION_42
0x40001c3	            0x4154	                                push r12	      1379	fold.c	FUNCTION_42
0x40001c5	              0x55	                                push rbp	      1379	fold.c	FUNCTION_42
0x40001c6	              0x53	                                push rbx	      1379	fold.c	FUNCTION_42
0x40001c7	        0x4883ec08	                              sub rsp, 8	      1379	fold.c	FUNCTION_42
0x40001cb	        0x4c8b6f20	            mov r13, qword [rdi + 0x20] 	      1383	fold.c	FUNCTION_42
0x40001cf	        0x837f1000	               cmp dword [rdi + 0x10], 0	      1384	fold.c	FUNCTION_42	FOR_1
0x40001d3	            0x7e2c	                           jle 0x4000201	      1384	fold.c	FUNCTION_42	FOR_1
0x40001d5	          0x4989fc	                            mov r12, rdi	      1384	fold.c	FUNCTION_42	FOR_1
0x40001d8	      0xbd00000000	                              mov ebp, 0	      1384	fold.c	FUNCTION_42	FOR_1
0x40001dd	          0x4863c5	                         movsxd rax, ebp	      1386	fold.c	FUNCTION_42	FOR_1	CALL_1
0x40001e0	        0x488d1c40	                  lea rbx, [rax + rax*2]	      1386	fold.c	FUNCTION_42	FOR_1	CALL_1
0x40001e4	        0x48c1e304	                              shl rbx, 4	      1386	fold.c	FUNCTION_42	FOR_1	CALL_1
0x40001e8	          0x4c01eb	                            add rbx, r13	      1386	fold.c	FUNCTION_42	FOR_1	CALL_1
0x40001eb	          0x4889df	                            mov rdi, rbx	      1386	fold.c	FUNCTION_42	FOR_1	CALL_1
0x40001ee	      0xe8ceffffff	                 call sym.foldOpenNested	      1386	fold.c	FUNCTION_42	FOR_1	CALL_1
0x40001f3	        0xc6432800	                mov byte [rbx + 0x28], 0	      1387	fold.c	FUNCTION_42	FOR_1
0x40001f7	          0x83c501	                              add ebp, 1	      1384	fold.c	FUNCTION_42	FOR_1
0x40001fa	      0x41396c2410	            cmp dword [r12 + 0x10], ebp 	      1384	fold.c	FUNCTION_42	FOR_1
0x40001ff	            0x7fdc	                            jg 0x40001dd	      1384	fold.c	FUNCTION_42	FOR_1
0x4000201	        0x4883c408	                              add rsp, 8	      1389	fold.c	FUNCTION_42
0x4000205	              0x5b	                                 pop rbx	      1389	fold.c	FUNCTION_42
0x4000206	              0x5d	                                 pop rbp	      1389	fold.c	FUNCTION_42
0x4000207	            0x415c	                                 pop r12	      1389	fold.c	FUNCTION_42
0x4000209	            0x415d	                                 pop r13	      1389	fold.c	FUNCTION_42
0x400020b	              0xc3	                                     ret	      1389	fold.c	FUNCTION_42
checkupdate	DO,0:ELSE,0:FOR,0:SWITCH,0:IF,1:CALL,1:WHILE,0:functions,0	10
0x4002984	    0x80bf21010000	               cmp byte [rdi + 0x121], 0	      1187	fold.c	FUNCTION_38	IF_1
0x400298b	            0x741b	                            je 0x40029a8	      1187	fold.c	FUNCTION_38	IF_1
0x400298d	              0x53	                                push rbx	      1186	fold.c	FUNCTION_38
0x400298e	          0x4889fb	                            mov rbx, rdi	      1186	fold.c	FUNCTION_38
0x4002991	      0xbaffffff7f	                     mov edx, 0x7fffffff	      1189	fold.c	FUNCTION_38	IF_1	CALL_1
0x4002996	      0xbe01000000	                              mov esi, 1	      1189	fold.c	FUNCTION_38	IF_1	CALL_1
0x400299b	      0xe800000000	                          call 0x40029a0	      1189	fold.c	FUNCTION_38	IF_1	CALL_1
0x40029a0	    0xc68321010000	               mov byte [rbx + 0x121], 0	      1190	fold.c	FUNCTION_38	IF_1
0x40029a7	              0x5b	                                 pop rbx	      1192	fold.c	FUNCTION_38
0x40029a8	            0xf3c3	                                     ret	      1192	fold.c	FUNCTION_38
foldOpenCursor	DO,0:ELSE,0:FOR,1:SWITCH,0:IF,2:CALL,3:WHILE,0:functions,0	25
0x4003304	        0x4883ec18	                           sub rsp, 0x18	       445	fold.c	FUNCTION_19
0x4003308	    0x64488b042528	                mov rax, qword fs:[0x28]	       445	fold.c	FUNCTION_19
0x4003311	      0x4889442408	                mov qword [rsp + 8], rax	       445	fold.c	FUNCTION_19
0x4003316	            0x31c0	                            xor eax, eax	       445	fold.c	FUNCTION_19
0x4003318	    0x488b3d000000	            mov rdi, qword [0x0400331f] 	       448	fold.c	FUNCTION_19	CALL_1
0x400331f	      0xe860f6ffff	                    call sym.checkupdate	       448	fold.c	FUNCTION_19	CALL_1
0x4003324	    0x488b3d000000	            mov rdi, qword [0x0400332b] 	       449	fold.c	FUNCTION_19	IF_1	CALL_2
0x400332b	      0xe800000000	                          call 0x4003330	       449	fold.c	FUNCTION_19	IF_1	CALL_2
0x4003330	            0x85c0	                           test eax, eax	       449	fold.c	FUNCTION_19	IF_1	CALL_2
0x4003332	            0x742e	                            je 0x4003362	       449	fold.c	FUNCTION_19	IF_1	CALL_2
0x4003334	    0xc74424040000	                  mov dword [rsp + 4], 0	       452	fold.c	FUNCTION_19	IF_1	FOR_1
0x400333c	    0x488b05000000	            mov rax, qword [0x04003343] 	       453	fold.c	FUNCTION_19	IF_1	FOR_1	CALL_3
0x4003343	        0x488b7838	            mov rdi, qword [rax + 0x38] 	       453	fold.c	FUNCTION_19	IF_1	FOR_1	CALL_3
0x4003347	      0x488d4c2404	                      lea rcx, [rsp + 4]	       453	fold.c	FUNCTION_19	IF_1	FOR_1	CALL_3
0x400334c	      0xba00000000	                              mov edx, 0	       453	fold.c	FUNCTION_19	IF_1	FOR_1	CALL_3
0x4003351	      0xbe01000000	                              mov esi, 1	       453	fold.c	FUNCTION_19	IF_1	FOR_1	CALL_3
0x4003356	      0xe80ffdffff	                  call sym.setManualFold	       453	fold.c	FUNCTION_19	IF_1	FOR_1	CALL_3
0x400335b	      0xf644240401	                  test byte [rsp + 4], 1	       454	fold.c	FUNCTION_19	IF_1	FOR_1	IF_2
0x4003360	            0x75d2	                           jne 0x4003334	       454	fold.c	FUNCTION_19	IF_1	FOR_1	IF_2
0x4003362	      0x488b442408	                mov rax, qword [rsp + 8]	       457	fold.c	FUNCTION_19
0x4003367	    0x644833042528	                xor rax, qword fs:[0x28]	       457	fold.c	FUNCTION_19
0x4003370	            0x7405	                            je 0x4003377	       457	fold.c	FUNCTION_19
0x4003372	      0xe800000000	                          call 0x4003377	       457	fold.c	FUNCTION_19
0x4003377	        0x4883c418	                           add rsp, 0x18	       457	fold.c	FUNCTION_19
0x400337b	              0xc3	                                     ret	       457	fold.c	FUNCTION_19
lineFolded	DO,0:ELSE,0:FOR,0:SWITCH,0:IF,0:CALL,1:WHILE,0:functions,0	8
0x4002d7b	        0x4883ec08	                              sub rsp, 8	       277	fold.c	FUNCTION_6
0x4002d7f	      0xba00000000	                              mov edx, 0	       278	fold.c	FUNCTION_6	CALL_1
0x4002d84	      0xe800000000	                          call 0x4002d89	       278	fold.c	FUNCTION_6	CALL_1
0x4002d89	          0x4885c0	                           test rax, rax	       278	fold.c	FUNCTION_6	CALL_1
0x4002d8c	           0xf95c0	                                setne al	       278	fold.c	FUNCTION_6	CALL_1
0x4002d8f	           0xfb6c0	                           movzx eax, al	       278	fold.c	FUNCTION_6	CALL_1
0x4002d92	        0x4883c408	                              add rsp, 8	       279	fold.c	FUNCTION_6
0x4002d96	              0xc3	                                     ret	       279	fold.c	FUNCTION_6
copyFoldingState	DO,0:ELSE,0:FOR,0:SWITCH,0:IF,0:CALL,1:WHILE,0:functions,0	10
0x40012d4	        0x4883ec08	                              sub rsp, 8	       104	fold.c	FUNCTION_1
0x40012d8	     0xfb687200100	          movzx eax, byte [rdi + 0x120] 	       105	fold.c	FUNCTION_1
0x40012df	    0x888620010000	              mov byte [rsi + 0x120], al	       105	fold.c	FUNCTION_1
0x40012e5	     0xfb687210100	          movzx eax, byte [rdi + 0x121] 	       106	fold.c	FUNCTION_1
0x40012ec	    0x888621010000	              mov byte [rsi + 0x121], al	       106	fold.c	FUNCTION_1
0x40012f2	    0x4881c6080100	                          add rsi, 0x108	       107	fold.c	FUNCTION_1	CALL_1
0x40012f9	    0x4881c7080100	                          add rdi, 0x108	       107	fold.c	FUNCTION_1	CALL_1
0x4001300	      0xe800000000	                          call 0x4001305	       107	fold.c	FUNCTION_1	CALL_1
0x4001305	        0x4883c408	                              add rsp, 8	       108	fold.c	FUNCTION_1
0x4001309	              0xc3	                                     ret	       108	fold.c	FUNCTION_1
foldedCount	DO,0:ELSE,0:FOR,0:SWITCH,0:IF,1:CALL,1:WHILE,0:functions,0	25
0x4002d1b	              0x53	                                push rbx	       292	fold.c	FUNCTION_7
0x4002d1c	        0x4883ec10	                           sub rsp, 0x10	       292	fold.c	FUNCTION_7
0x4002d20	          0x4889f3	                            mov rbx, rsi	       292	fold.c	FUNCTION_7
0x4002d23	          0x4989d1	                             mov r9, rdx	       292	fold.c	FUNCTION_7
0x4002d26	    0x64488b042528	                mov rax, qword fs:[0x28]	       292	fold.c	FUNCTION_7
0x4002d2f	      0x4889442408	                mov qword [rsp + 8], rax	       292	fold.c	FUNCTION_7
0x4002d34	            0x31c0	                            xor eax, eax	       292	fold.c	FUNCTION_7
0x4002d36	    0x41b800000000	                              mov r8d, 0	       295	fold.c	FUNCTION_7	IF_1	CALL_1
0x4002d3c	          0x4889e1	                            mov rcx, rsp	       295	fold.c	FUNCTION_7	IF_1	CALL_1
0x4002d3f	      0xba00000000	                              mov edx, 0	       295	fold.c	FUNCTION_7	IF_1	CALL_1
0x4002d44	      0xe800000000	                          call 0x4002d49	       295	fold.c	FUNCTION_7	IF_1	CALL_1
0x4002d49	      0xba00000000	                              mov edx, 0	       297	fold.c	FUNCTION_7
0x4002d4e	            0x85c0	                           test eax, eax	       295	fold.c	FUNCTION_7	IF_1	CALL_1
0x4002d50	            0x740b	                            je 0x4002d5d	       295	fold.c	FUNCTION_7	IF_1	CALL_1
0x4002d52	        0x488b1424	                    mov rdx, qword [rsp]	       296	fold.c	FUNCTION_7	IF_1
0x4002d56	          0x4829da	                            sub rdx, rbx	       296	fold.c	FUNCTION_7	IF_1
0x4002d59	        0x4883c201	                              add rdx, 1	       296	fold.c	FUNCTION_7	IF_1
0x4002d5d	          0x4889d0	                            mov rax, rdx	       298	fold.c	FUNCTION_7
0x4002d60	      0x488b4c2408	                mov rcx, qword [rsp + 8]	       298	fold.c	FUNCTION_7
0x4002d65	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       298	fold.c	FUNCTION_7
0x4002d6e	            0x7405	                            je 0x4002d75	       298	fold.c	FUNCTION_7
0x4002d70	      0xe800000000	                          call 0x4002d75	       298	fold.c	FUNCTION_7
0x4002d75	        0x4883c410	                           add rsp, 0x10	       298	fold.c	FUNCTION_7
0x4002d79	              0x5b	                                 pop rbx	       298	fold.c	FUNCTION_7
0x4002d7a	              0xc3	                                     ret	       298	fold.c	FUNCTION_7
put_folds_recurse	DO,0:ELSE,0:FOR,1:SWITCH,0:IF,2:CALL,2:WHILE,0:functions,0	51
0x4000e6a	            0x4156	                                push r14	      3515	fold.c	FUNCTION_74
0x4000e6c	            0x4155	                                push r13	      3515	fold.c	FUNCTION_74
0x4000e6e	            0x4154	                                push r12	      3515	fold.c	FUNCTION_74
0x4000e70	              0x55	                                push rbp	      3515	fold.c	FUNCTION_74
0x4000e71	              0x53	                                push rbx	      3515	fold.c	FUNCTION_74
0x4000e72	        0x488b5e10	            mov rbx, qword [rsi + 0x10] 	      3519	fold.c	FUNCTION_74
0x4000e76	          0x833e00	                      cmp dword [rsi], 0	      3520	fold.c	FUNCTION_74	FOR_1
0x4000e79	            0x7e76	                           jle 0x4000ef1	      3520	fold.c	FUNCTION_74	FOR_1
0x4000e7b	          0x4989d5	                            mov r13, rdx	      3520	fold.c	FUNCTION_74	FOR_1
0x4000e7e	          0x4989f6	                            mov r14, rsi	      3520	fold.c	FUNCTION_74	FOR_1
0x4000e81	          0x4889fd	                            mov rbp, rdi	      3520	fold.c	FUNCTION_74	FOR_1
0x4000e84	        0x4883c310	                           add rbx, 0x10	      3520	fold.c	FUNCTION_74	FOR_1
0x4000e88	    0x41bc00000000	                             mov r12d, 0	      3520	fold.c	FUNCTION_74	FOR_1
0x4000e8e	          0x4c89ea	                            mov rdx, r13	      3523	fold.c	FUNCTION_74	FOR_1	IF_1	CALL_1
0x4000e91	        0x480353f0	             add rdx, qword [rbx - 0x10]	      3523	fold.c	FUNCTION_74	FOR_1	IF_1	CALL_1
0x4000e95	          0x4889de	                            mov rsi, rbx	      3523	fold.c	FUNCTION_74	FOR_1	IF_1	CALL_1
0x4000e98	          0x4889ef	                            mov rdi, rbp	      3523	fold.c	FUNCTION_74	FOR_1	IF_1	CALL_1
0x4000e9b	      0xe8caffffff	              call sym.put_folds_recurse	      3523	fold.c	FUNCTION_74	FOR_1	IF_1	CALL_1
0x4000ea0	            0x85c0	                           test eax, eax	      3523	fold.c	FUNCTION_74	FOR_1	IF_1	CALL_1
0x4000ea2	            0x7459	                            je 0x4000efd	      3523	fold.c	FUNCTION_74	FOR_1	IF_1	CALL_1
0x4000ea4	          0x4c89e9	                            mov rcx, r13	      3526	fold.c	FUNCTION_74	FOR_1	IF_2
0x4000ea7	        0x48034bf0	             add rcx, qword [rbx - 0x10]	      3526	fold.c	FUNCTION_74	FOR_1	IF_2
0x4000eab	          0x4989c8	                             mov r8, rcx	        97	stdio2.h	CALL_47
0x4000eae	        0x4c0343f8	                 add r8, qword [rbx - 8]	        97	stdio2.h	CALL_47
0x4000eb2	        0x4983e801	                               sub r8, 1	        97	stdio2.h	CALL_47
0x4000eb6	      0xba00000000	                              mov edx, 0	        97	stdio2.h	CALL_47
0x4000ebb	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_47
0x4000ec0	          0x4889ef	                            mov rdi, rbp	        97	stdio2.h	CALL_47
0x4000ec3	      0xb800000000	                              mov eax, 0	        97	stdio2.h	CALL_47
0x4000ec8	      0xe800000000	                          call 0x4000ecd	        97	stdio2.h	CALL_47
0x4000ecd	            0x85c0	                           test eax, eax	      3525	fold.c	FUNCTION_74	FOR_1	IF_2
0x4000ecf	            0x7827	                            js 0x4000ef8	      3525	fold.c	FUNCTION_74	FOR_1	IF_2
0x4000ed1	          0x4889ef	                            mov rdi, rbp	      3527	fold.c	FUNCTION_74	FOR_1	IF_2	CALL_2
0x4000ed4	      0xe800000000	                          call 0x4000ed9	      3527	fold.c	FUNCTION_74	FOR_1	IF_2	CALL_2
0x4000ed9	            0x85c0	                           test eax, eax	      3527	fold.c	FUNCTION_74	FOR_1	IF_2	CALL_2
0x4000edb	            0x7420	                            je 0x4000efd	      3527	fold.c	FUNCTION_74	FOR_1	IF_2	CALL_2
0x4000edd	        0x4183c401	                             add r12d, 1	      3520	fold.c	FUNCTION_74	FOR_1
0x4000ee1	        0x4883c330	                           add rbx, 0x30	      3520	fold.c	FUNCTION_74	FOR_1
0x4000ee5	          0x453926	                   cmp dword [r14], r12d	      3520	fold.c	FUNCTION_74	FOR_1
0x4000ee8	            0x7fa4	                            jg 0x4000e8e	      3520	fold.c	FUNCTION_74	FOR_1
0x4000eea	      0xb801000000	                              mov eax, 1	      3531	fold.c	FUNCTION_74
0x4000eef	            0xeb0c	                           jmp 0x4000efd	      3531	fold.c	FUNCTION_74
0x4000ef1	      0xb801000000	                              mov eax, 1	      3531	fold.c	FUNCTION_74
0x4000ef6	            0xeb05	                           jmp 0x4000efd	      3531	fold.c	FUNCTION_74
0x4000ef8	      0xb800000000	                              mov eax, 0	      3528	fold.c	FUNCTION_74	FOR_1	IF_2
0x4000efd	              0x5b	                                 pop rbx	      3532	fold.c	FUNCTION_74
0x4000efe	              0x5d	                                 pop rbp	      3532	fold.c	FUNCTION_74
0x4000eff	            0x415c	                                 pop r12	      3532	fold.c	FUNCTION_74
0x4000f01	            0x415d	                                 pop r13	      3532	fold.c	FUNCTION_74
0x4000f03	            0x415e	                                 pop r14	      3532	fold.c	FUNCTION_74
0x4000f05	              0xc3	                                     ret	      3532	fold.c	FUNCTION_74
foldCheckClose	DO,0:ELSE,0:FOR,0:SWITCH,0:IF,2:CALL,3:WHILE,0:functions,0	16
0x4003446	    0x488b05000000	            mov rax, qword [0x0400344d] 	       515	fold.c	FUNCTION_22	IF_1
0x400344d	          0x803800	                       cmp byte [rax], 0	       515	fold.c	FUNCTION_22	IF_1
0x4003450	            0x743b	                            je 0x400348d	       515	fold.c	FUNCTION_22	IF_1
0x4003452	        0x4883ec08	                              sub rsp, 8	       514	fold.c	FUNCTION_22
0x4003456	    0x488b3d000000	            mov rdi, qword [0x0400345d] 	       517	fold.c	FUNCTION_22	IF_1	CALL_1
0x400345d	      0xe822f5ffff	                    call sym.checkupdate	       517	fold.c	FUNCTION_22	IF_1	CALL_1
0x4003462	    0x488b3d000000	            mov rdi, qword [0x04003469] 	       519	fold.c	FUNCTION_22	IF_1	IF_2
0x4003469	    0x488b97e80100	           mov rdx, qword [rdi + 0x1e8] 	       518	fold.c	FUNCTION_22	IF_1	IF_2	CALL_2
0x4003470	        0x488b7738	            mov rsi, qword [rdi + 0x38] 	       518	fold.c	FUNCTION_22	IF_1	IF_2	CALL_2
0x4003474	    0x4881c7080100	                          add rdi, 0x108	       518	fold.c	FUNCTION_22	IF_1	IF_2	CALL_2
0x400347b	      0xe8c0cbffff	                  call sym.checkCloseRec	       518	fold.c	FUNCTION_22	IF_1	IF_2	CALL_2
0x4003480	            0x85c0	                           test eax, eax	       518	fold.c	FUNCTION_22	IF_1	IF_2	CALL_2
0x4003482	            0x7405	                            je 0x4003489	       518	fold.c	FUNCTION_22	IF_1	IF_2	CALL_2
0x4003484	      0xe800000000	                          call 0x4003489	       520	fold.c	FUNCTION_22	IF_1	CALL_3
0x4003489	        0x4883c408	                              add rsp, 8	       522	fold.c	FUNCTION_22
0x400348d	            0xf3c3	                                     ret	       522	fold.c	FUNCTION_22
foldtext_cleanup	DO,0:ELSE,4:FOR,2:SWITCH,0:IF,10:CALL,17:WHILE,3:functions,0	222
0x4004121	            0x4157	                                push r15	      1992	fold.c	FUNCTION_57
0x4004123	            0x4156	                                push r14	      1992	fold.c	FUNCTION_57
0x4004125	            0x4155	                                push r13	      1992	fold.c	FUNCTION_57
0x4004127	            0x4154	                                push r12	      1992	fold.c	FUNCTION_57
0x4004129	              0x55	                                push rbp	      1992	fold.c	FUNCTION_57
0x400412a	              0x53	                                push rbx	      1992	fold.c	FUNCTION_57
0x400412b	        0x4883ec48	                           sub rsp, 0x48	      1992	fold.c	FUNCTION_57
0x400412f	          0x4989fd	                            mov r13, rdi	      1992	fold.c	FUNCTION_57
0x4004132	    0x488b05000000	            mov rax, qword [0x04004139] 	      2004	fold.c	FUNCTION_57	CALL_1
0x4004139	    0x488bb8501400	          mov rdi, qword [rax + 0x1450] 	      2004	fold.c	FUNCTION_57	CALL_1
0x4004140	      0xe800000000	                          call 0x4004145	      2004	fold.c	FUNCTION_57	CALL_1
0x4004145	          0x4989c6	                            mov r14, rax	      2004	fold.c	FUNCTION_57	CALL_1
0x4004148	      0xb800000000	                              mov eax, 0	      2005	fold.c	FUNCTION_57	CALL_2
0x400414d	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	      2005	fold.c	FUNCTION_57	CALL_2
0x4004154	          0x4c89f7	                            mov rdi, r14	      2005	fold.c	FUNCTION_57	CALL_2
0x4004157	            0xf2ae	              repne scasb al, byte [rdi]	      2005	fold.c	FUNCTION_57	CALL_2
0x4004159	          0x4889c8	                            mov rax, rcx	      2005	fold.c	FUNCTION_57	CALL_2
0x400415c	          0x48f7d0	                                 not rax	      2005	fold.c	FUNCTION_57	CALL_2
0x400415f	        0x4883e801	                              sub rax, 1	      2005	fold.c	FUNCTION_57	CALL_2
0x4004163	            0x89c3	                            mov ebx, eax	      2005	fold.c	FUNCTION_57	CALL_2
0x4004165	            0x85c0	                           test eax, eax	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4004167	            0x7e26	                           jle 0x400418f	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4004169	            0x4898	                                    cdqe	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x400416b	    0x410fb64406ff	         movzx eax, byte [r14 + rax - 1]	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4004171	            0x3c20	                            cmp al, 0x20	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4004173	            0x7404	                            je 0x4004179	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4004175	            0x3c09	                               cmp al, 9	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4004177	            0x7516	                           jne 0x400418f	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4004179	          0x83eb01	                              sub ebx, 1	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x400417c	            0x7411	                            je 0x400418f	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x400417e	          0x4863c3	                         movsxd rax, ebx	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4004181	    0x410fb64406ff	         movzx eax, byte [r14 + rax - 1]	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4004187	            0x3c20	                            cmp al, 0x20	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4004189	            0x74ee	                            je 0x4004179	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x400418b	            0x3c09	                               cmp al, 9	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x400418d	            0x74ea	                            je 0x4004179	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x400418f	      0xbe00000000	                              mov esi, 0	      2010	fold.c	FUNCTION_57	CALL_4
0x4004194	          0x4c89f7	                            mov rdi, r14	      2010	fold.c	FUNCTION_57	CALL_4
0x4004197	      0xe800000000	                          call 0x400419c	      2010	fold.c	FUNCTION_57	CALL_4
0x400419c	      0x4889442410	             mov qword [rsp + 0x10], rax	      2010	fold.c	FUNCTION_57	CALL_4
0x40041a1	          0x4885c0	                           test rax, rax	      2011	fold.c	FUNCTION_57	IF_1
0x40041a4	            0x7454	                            je 0x40041fa	      2011	fold.c	FUNCTION_57	IF_1
0x40041a6	          0x4889c5	                            mov rbp, rax	      2013	fold.c	FUNCTION_57	IF_1
0x40041a9	          0x4c29f0	                            sub rax, r14	      2013	fold.c	FUNCTION_57	IF_1
0x40041ac	          0x4189c7	                           mov r15d, eax	      2013	fold.c	FUNCTION_57	IF_1
0x40041af	            0x29c3	                            sub ebx, eax	      2013	fold.c	FUNCTION_57	IF_1
0x40041b1	            0x85c0	                           test eax, eax	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x40041b3	            0x7e27	                           jle 0x40041dc	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x40041b5	            0x4898	                                    cdqe	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x40041b7	    0x410fb64406ff	         movzx eax, byte [r14 + rax - 1]	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x40041bd	            0x3c20	                            cmp al, 0x20	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x40041bf	            0x7404	                            je 0x40041c5	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x40041c1	            0x3c09	                               cmp al, 9	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x40041c3	            0x7517	                           jne 0x40041dc	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x40041c5	        0x4183ef01	                             sub r15d, 1	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x40041c9	            0x7411	                            je 0x40041dc	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x40041cb	          0x4963c7	                        movsxd rax, r15d	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x40041ce	    0x410fb64406ff	         movzx eax, byte [r14 + rax - 1]	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x40041d4	            0x3c20	                            cmp al, 0x20	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x40041d6	            0x74ed	                            je 0x40041c5	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x40041d8	            0x3c09	                               cmp al, 9	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x40041da	            0x74e9	                            je 0x40041c5	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x40041dc	      0x488b7c2410	            mov rdi, qword [rsp + 0x10] 	      2021	fold.c	FUNCTION_57	IF_1	CALL_6
0x40041e1	        0x4883c702	                              add rdi, 2	      2021	fold.c	FUNCTION_57	IF_1	CALL_6
0x40041e5	      0xe800000000	                          call 0x40041ea	      2021	fold.c	FUNCTION_57	IF_1	CALL_6
0x40041ea	      0x4889442410	             mov qword [rsp + 0x10], rax	      2021	fold.c	FUNCTION_57	IF_1	CALL_6
0x40041ef	          0x4829e8	                            sub rax, rbp	      2022	fold.c	FUNCTION_57	IF_1
0x40041f2	            0x29c3	                            sub ebx, eax	      2022	fold.c	FUNCTION_57	IF_1
0x40041f4	        0x895c242c	             mov dword [rsp + 0x2c], ebx	      2022	fold.c	FUNCTION_57	IF_1
0x40041f8	            0xeb0b	                           jmp 0x4004205	      2022	fold.c	FUNCTION_57	IF_1
0x40041fa	          0x4189df	                           mov r15d, ebx	      2022	fold.c	FUNCTION_57	IF_1
0x40041fd	    0xc744242c0000	               mov dword [rsp + 0x2c], 0	      1996	fold.c	FUNCTION_57
0x4004205	    0x488b3d000000	            mov rdi, qword [0x0400420c] 	      2025	fold.c	FUNCTION_57	CALL_7
0x400420c	      0xe852c2ffff	                    call sym.parseMarker	      2025	fold.c	FUNCTION_57	CALL_7
0x4004211	          0x4d89ec	                            mov r12, r13	      2027	fold.c	FUNCTION_57	FOR_1
0x4004214	    0xc74424340000	               mov dword [rsp + 0x34], 0	      2001	fold.c	FUNCTION_57
0x400421c	    0xc74424300000	               mov dword [rsp + 0x30], 0	      2000	fold.c	FUNCTION_57
0x4004224	      0x486344242c	         movsxd rax, dword [rsp + 0x2c] 	      2058	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9	CALL_14
0x4004229	      0x4889442438	             mov qword [rsp + 0x38], rax	      2058	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9	CALL_14
0x400422e	          0x4963c7	                        movsxd rax, r15d	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x4004231	      0x4889442418	             mov qword [rsp + 0x18], rax	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x4004236	          0x4c01e8	                            add rax, r13	      2043	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x4004239	      0x4889442408	                mov qword [rsp + 8], rax	      2043	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x400423e	      0xe9a2010000	                           jmp 0x40043e5	      2027	fold.c	FUNCTION_57	FOR_1
0x4004243	    0x8b2d00000000	            mov ebp, dword [0x04004249] 	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x4004249	          0x4863d5	                         movsxd rdx, ebp	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x400424c	    0x488b05000000	            mov rax, qword [0x04004253] 	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x4004253	    0x488bb0280200	           mov rsi, qword [rax + 0x228] 	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x400425a	          0x4c89e7	                            mov rdi, r12	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x400425d	      0xe800000000	                          call 0x4004262	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x4004262	            0x85c0	                           test eax, eax	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x4004264	            0x7420	                            je 0x4004286	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x4004266	    0x8b2d00000000	            mov ebp, dword [0x0400426c] 	      2032	fold.c	FUNCTION_57	FOR_1	ELSE_1	IF_3	CALL_9
0x400426c	          0x4863d5	                         movsxd rdx, ebp	      2032	fold.c	FUNCTION_57	FOR_1	ELSE_1	IF_3	CALL_9
0x400426f	    0x488b35000000	            mov rsi, qword [0x04004276] 	      2032	fold.c	FUNCTION_57	FOR_1	ELSE_1	IF_3	CALL_9
0x4004276	          0x4c89e7	                            mov rdi, r12	      2032	fold.c	FUNCTION_57	FOR_1	ELSE_1	IF_3	CALL_9
0x4004279	      0xe800000000	                          call 0x400427e	      2032	fold.c	FUNCTION_57	FOR_1	ELSE_1	IF_3	CALL_9
0x400427e	            0x85c0	                           test eax, eax	      2032	fold.c	FUNCTION_57	FOR_1	ELSE_1	IF_3	CALL_9
0x4004280	     0xf856c010000	                           jne 0x40043f2	      2032	fold.c	FUNCTION_57	FOR_1	ELSE_1	IF_3	CALL_9
0x4004286	            0x85ed	                           test ebp, ebp	      2034	fold.c	FUNCTION_57	FOR_1	IF_4
0x4004288	     0xf8e88000000	                           jle 0x4004316	      2034	fold.c	FUNCTION_57	FOR_1	IF_4
0x400428e	          0x4863c5	                         movsxd rax, ebp	      2036	fold.c	FUNCTION_57	FOR_1	IF_4	IF_5	CALL_10
0x4004291	      0x410fb60404	             movzx eax, byte [r12 + rax]	      2036	fold.c	FUNCTION_57	FOR_1	IF_4	IF_5	CALL_10
0x4004296	          0x83e830	                           sub eax, 0x30	      2036	fold.c	FUNCTION_57	FOR_1	IF_4	IF_5	CALL_10
0x4004299	          0x83f80a	                            cmp eax, 0xa	      2037	fold.c	FUNCTION_57	FOR_1	IF_4	IF_5
0x400429c	          0x83d500	                              adc ebp, 0	      2037	fold.c	FUNCTION_57	FOR_1	IF_4	IF_5
0x400429f	          0x4d39ec	                            cmp r12, r13	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x40042a2	            0x7628	                           jbe 0x40042cc	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x40042a4	    0x410fb64424ff	               movzx eax, byte [r12 - 1]	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x40042aa	            0x3c20	                            cmp al, 0x20	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x40042ac	            0x7404	                            je 0x40042b2	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x40042ae	            0x3c09	                               cmp al, 9	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x40042b0	            0x751f	                           jne 0x40042d1	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x40042b2	          0x4c89e3	                            mov rbx, r12	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x40042b5	        0x4883eb01	                              sub rbx, 1	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x40042b9	          0x4939dd	                            cmp r13, rbx	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x40042bc	            0x7418	                            je 0x40042d6	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x40042be	         0xfb643ff	               movzx eax, byte [rbx - 1]	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x40042c2	            0x3c20	                            cmp al, 0x20	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x40042c4	            0x74ef	                            je 0x40042b5	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x40042c6	            0x3c09	                               cmp al, 9	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x40042c8	            0x74eb	                            je 0x40042b5	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x40042ca	            0xeb0d	                           jmp 0x40042d9	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x40042cc	          0x4c89e3	                            mov rbx, r12	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x40042cf	            0xeb08	                           jmp 0x40042d9	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x40042d1	          0x4c89e3	                            mov rbx, r12	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x40042d4	            0xeb03	                           jmp 0x40042d9	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x40042d6	          0x4c89eb	                            mov rbx, r13	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x40042d9	      0x483b5c2408	                cmp rbx, qword [rsp + 8]	      2043	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x40042de	     0xf829b000000	                            jb 0x400437f	      2043	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x40042e4	          0x4889d8	                            mov rax, rbx	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x40042e7	      0x488b4c2418	            mov rcx, qword [rsp + 0x18] 	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x40042ec	          0x4829c8	                            sub rax, rcx	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x40042ef	          0x4889ca	                            mov rdx, rcx	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x40042f2	          0x4c89f6	                            mov rsi, r14	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x40042f5	      0x4889442420	             mov qword [rsp + 0x20], rax	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x40042fa	          0x4889c7	                            mov rdi, rax	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x40042fd	      0xe800000000	                          call 0x4004302	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x4004302	            0x85c0	                           test eax, eax	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x4004304	            0x7579	                           jne 0x400437f	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x4004306	          0x4929dc	                            sub r12, rbx	      2046	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x4004309	          0x4501fc	                          add r12d, r15d	      2046	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x400430c	          0x4401e5	                           add ebp, r12d	      2046	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x400430f	      0x4c8b642420	            mov r12, qword [rsp + 0x20] 	      2047	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x4004314	            0xeb69	                           jmp 0x400437f	      2047	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x4004316	    0x48837c241000	               cmp qword [rsp + 0x10], 0	      2050	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7
0x400431c	            0x7461	                            je 0x400437f	      2050	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7
0x400431e	      0x837c243000	               cmp dword [rsp + 0x30], 0	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x4004323	            0x7519	                           jne 0x400433e	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x4004325	          0x4585ff	                         test r15d, r15d	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x4004328	            0x7e14	                           jle 0x400433e	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x400432a	      0x488b542418	            mov rdx, qword [rsp + 0x18] 	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x400432f	          0x4c89f6	                            mov rsi, r14	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x4004332	          0x4c89e7	                            mov rdi, r12	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x4004335	      0xe800000000	                          call 0x400433a	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x400433a	            0x85c0	                           test eax, eax	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x400433c	            0x7436	                            je 0x4004374	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x400433e	        0x8b5c2434	            mov ebx, dword [rsp + 0x34] 	      2057	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9
0x4004342	            0x85db	                           test ebx, ebx	      2057	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9
0x4004344	            0x7539	                           jne 0x400437f	      2057	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9
0x4004346	      0x837c242c00	               cmp dword [rsp + 0x2c], 0	      2057	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9
0x400434b	            0x7e32	                           jle 0x400437f	      2057	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9
0x400434d	      0x488b542438	            mov rdx, qword [rsp + 0x38] 	      2058	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9	CALL_14
0x4004352	      0x488b742410	            mov rsi, qword [rsp + 0x10] 	      2058	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9	CALL_14
0x4004357	          0x4c89e7	                            mov rdi, r12	      2058	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9	CALL_14
0x400435a	      0xe800000000	                          call 0x400435f	      2058	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9	CALL_14
0x400435f	            0x85c0	                           test eax, eax	      2060	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9
0x4004361	       0xf446c242c	           cmove ebp, dword [rsp + 0x2c]	      2060	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9
0x4004366	      0xb801000000	                              mov eax, 1	      2060	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9
0x400436b	           0xf45c3	                         cmovne eax, ebx	      2060	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9
0x400436e	        0x89442434	             mov dword [rsp + 0x34], eax	      2060	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9
0x4004372	            0xeb0b	                           jmp 0x400437f	      2060	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9
0x4004374	          0x4489fd	                           mov ebp, r15d	      2054	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8
0x4004377	    0xc74424300100	               mov dword [rsp + 0x30], 1	      2055	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8
0x400437f	            0x85ed	                           test ebp, ebp	      2064	fold.c	FUNCTION_57	FOR_1	IF_10
0x4004381	            0x7446	                            je 0x40043c9	      2064	fold.c	FUNCTION_57	FOR_1	IF_10
0x4004383	          0x4863f5	                         movsxd rsi, ebp	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x4004386	          0x4c01e6	                            add rsi, r12	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x4004389	           0xfb606	                   movzx eax, byte [rsi]	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x400438c	            0x3c20	                            cmp al, 0x20	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x400438e	            0x7404	                            je 0x4004394	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x4004390	            0x3c09	                               cmp al, 9	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x4004392	            0x7514	                           jne 0x40043a8	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x4004394	          0x83c501	                              add ebp, 1	      2067	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3
0x4004397	          0x4863f5	                         movsxd rsi, ebp	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x400439a	          0x4c01e6	                            add rsi, r12	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x400439d	           0xfb606	                   movzx eax, byte [rsi]	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x40043a0	            0x3c20	                            cmp al, 0x20	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x40043a2	            0x74f0	                            je 0x4004394	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x40043a4	            0x3c09	                               cmp al, 9	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x40043a6	            0x74ec	                            je 0x4004394	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x40043a8	      0xb800000000	                              mov eax, 0	      2068	fold.c	FUNCTION_57	FOR_1	IF_10	CALL_16
0x40043ad	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	      2068	fold.c	FUNCTION_57	FOR_1	IF_10	CALL_16
0x40043b4	          0x4889f7	                            mov rdi, rsi	      2068	fold.c	FUNCTION_57	FOR_1	IF_10	CALL_16
0x40043b7	            0xf2ae	              repne scasb al, byte [rdi]	      2068	fold.c	FUNCTION_57	FOR_1	IF_10	CALL_16
0x40043b9	          0x48f7d1	                                 not rcx	      2068	fold.c	FUNCTION_57	FOR_1	IF_10	CALL_16
0x40043bc	          0x4889ca	                            mov rdx, rcx	      2068	fold.c	FUNCTION_57	FOR_1	IF_10	CALL_16
0x40043bf	          0x4c89e7	                            mov rdi, r12	        59	string3.h	FUNCTION_78	CALL_3
0x40043c2	      0xe800000000	                          call 0x40043c7	        59	string3.h	FUNCTION_78	CALL_3
0x40043c7	            0xeb1c	                           jmp 0x40043e5	        59	string3.h	FUNCTION_78	CALL_3
0x40043c9	      0xb801000000	                              mov eax, 1	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x40043ce	    0x833d00000000	               cmp dword [0x040043d5], 0	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x40043d5	            0x7409	                            je 0x40043e0	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x40043d7	          0x4c89e7	                            mov rdi, r12	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x40043da	    0xff1500000000	                 call qword [0x040043e0]	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x40043e0	            0x4898	                                    cdqe	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x40043e2	          0x4901c4	                            add r12, rax	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x40043e5	      0x41803c2400	                       cmp byte [r12], 0	      2027	fold.c	FUNCTION_57	FOR_1
0x40043ea	     0xf8553feffff	                           jne 0x4004243	      2027	fold.c	FUNCTION_57	FOR_1
0x40043f0	            0xeb13	                           jmp 0x4004405	      2027	fold.c	FUNCTION_57	FOR_1
0x40043f2	      0xbd00000000	                              mov ebp, 0	      2029	fold.c	FUNCTION_57	FOR_1
0x40043f7	    0x48837c241000	               cmp qword [rsp + 0x10], 0	      2050	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7
0x40043fd	     0xf851bffffff	                           jne 0x400431e	      2050	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7
0x4004403	            0xebc4	                           jmp 0x40043c9	      2050	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7
0x4004405	        0x4883c448	                           add rsp, 0x48	      2075	fold.c	FUNCTION_57
0x4004409	              0x5b	                                 pop rbx	      2075	fold.c	FUNCTION_57
0x400440a	              0x5d	                                 pop rbp	      2075	fold.c	FUNCTION_57
0x400440b	            0x415c	                                 pop r12	      2075	fold.c	FUNCTION_57
0x400440d	            0x415d	                                 pop r13	      2075	fold.c	FUNCTION_57
0x400440f	            0x415e	                                 pop r14	      2075	fold.c	FUNCTION_57
0x4004411	            0x415f	                                 pop r15	      2075	fold.c	FUNCTION_57
0x4004413	              0xc3	                                     ret	      2075	fold.c	FUNCTION_57
foldUpdateAll	DO,0:ELSE,0:FOR,0:SWITCH,0:IF,0:CALL,1:WHILE,0:functions,0	6
0x40011bb	        0x4883ec08	                              sub rsp, 8	       851	fold.c	FUNCTION_29
0x40011bf	    0xc68721010000	               mov byte [rdi + 0x121], 1	       852	fold.c	FUNCTION_29
0x40011c6	      0xbe28000000	                           mov esi, 0x28	       853	fold.c	FUNCTION_29	CALL_1
0x40011cb	      0xe800000000	                          call 0x40011d0	       853	fold.c	FUNCTION_29	CALL_1
0x40011d0	        0x4883c408	                              add rsp, 8	       854	fold.c	FUNCTION_29
0x40011d4	              0xc3	                                     ret	       854	fold.c	FUNCTION_29
foldLevel	DO,0:ELSE,2:FOR,0:SWITCH,0:IF,4:CALL,3:WHILE,0:functions,0	33
0x4002d97	              0x55	                                push rbp	       251	fold.c	FUNCTION_5
0x4002d98	              0x53	                                push rbx	       251	fold.c	FUNCTION_5
0x4002d99	        0x4883ec08	                              sub rsp, 8	       251	fold.c	FUNCTION_5
0x4002d9d	          0x4889fb	                            mov rbx, rdi	       251	fold.c	FUNCTION_5
0x4002da0	    0x488b15000000	            mov rdx, qword [0x04002da7] 	       254	fold.c	FUNCTION_5	IF_1
0x4002da7	          0x4885d2	                           test rdx, rdx	       254	fold.c	FUNCTION_5	IF_1
0x4002daa	            0x750e	                           jne 0x4002dba	       254	fold.c	FUNCTION_5	IF_1
0x4002dac	    0x488b3d000000	            mov rdi, qword [0x04002db3] 	       255	fold.c	FUNCTION_5	CALL_1
0x4002db3	      0xe8ccfbffff	                    call sym.checkupdate	       255	fold.c	FUNCTION_5	CALL_1
0x4002db8	            0xeb21	                           jmp 0x4002ddb	       255	fold.c	FUNCTION_5	CALL_1
0x4002dba	    0x48393d000000	            cmp qword [0x04002dc1], rdi 	       256	fold.c	FUNCTION_5	ELSE_1	IF_2
0x4002dc1	            0x750a	                           jne 0x4002dcd	       256	fold.c	FUNCTION_5	ELSE_1	IF_2
0x4002dc3	    0x8b0500000000	            mov eax, dword [0x04002dc9] 	       256	fold.c	FUNCTION_5	ELSE_1	IF_2
0x4002dc9	            0x85c0	                           test eax, eax	       256	fold.c	FUNCTION_5	ELSE_1	IF_2
0x4002dcb	            0x7933	                           jns 0x4002e00	       256	fold.c	FUNCTION_5	ELSE_1	IF_2
0x4002dcd	          0x4839da	                            cmp rdx, rbx	       258	fold.c	FUNCTION_5	ELSE_2	IF_3
0x4002dd0	            0x7f09	                            jg 0x4002ddb	       258	fold.c	FUNCTION_5	ELSE_2	IF_3
0x4002dd2	    0x483b1d000000	            cmp rbx, qword [0x04002dd9] 	       258	fold.c	FUNCTION_5	ELSE_2	IF_3
0x4002dd9	            0x7e20	                           jle 0x4002dfb	       258	fold.c	FUNCTION_5	ELSE_2	IF_3
0x4002ddb	    0x488b2d000000	            mov rbp, qword [0x04002de2] 	       262	fold.c	FUNCTION_5	IF_4	CALL_2
0x4002de2	          0x4889ef	                            mov rdi, rbp	       262	fold.c	FUNCTION_5	IF_4	CALL_2
0x4002de5	      0xe800000000	                          call 0x4002dea	       262	fold.c	FUNCTION_5	IF_4	CALL_2
0x4002dea	            0x85c0	                           test eax, eax	       262	fold.c	FUNCTION_5	IF_4	CALL_2
0x4002dec	            0x7412	                            je 0x4002e00	       262	fold.c	FUNCTION_5	IF_4	CALL_2
0x4002dee	          0x4889de	                            mov rsi, rbx	       265	fold.c	FUNCTION_5	CALL_3
0x4002df1	          0x4889ef	                            mov rdi, rbp	       265	fold.c	FUNCTION_5	CALL_3
0x4002df4	      0xe866d3ffff	                   call sym.foldLevelWin	       265	fold.c	FUNCTION_5	CALL_3
0x4002df9	            0xeb05	                           jmp 0x4002e00	       265	fold.c	FUNCTION_5	CALL_3
0x4002dfb	      0xb8ffffffff	                     mov eax, 0xffffffff	       259	fold.c	FUNCTION_5	ELSE_2	IF_3
0x4002e00	        0x4883c408	                              add rsp, 8	       266	fold.c	FUNCTION_5
0x4002e04	              0x5b	                                 pop rbx	       266	fold.c	FUNCTION_5
0x4002e05	              0x5d	                                 pop rbp	       266	fold.c	FUNCTION_5
0x4002e06	              0xc3	                                     ret	       266	fold.c	FUNCTION_5
get_foldtext	DO,0:ELSE,2:FOR,1:SWITCH,0:IF,14:CALL,14:WHILE,0:functions,0	182
0x4003e2d	            0x4157	                                push r15	      1878	fold.c	FUNCTION_56
0x4003e2f	            0x4156	                                push r14	      1878	fold.c	FUNCTION_56
0x4003e31	            0x4155	                                push r13	      1878	fold.c	FUNCTION_56
0x4003e33	            0x4154	                                push r12	      1878	fold.c	FUNCTION_56
0x4003e35	              0x55	                                push rbp	      1878	fold.c	FUNCTION_56
0x4003e36	              0x53	                                push rbx	      1878	fold.c	FUNCTION_56
0x4003e37	        0x4883ec38	                           sub rsp, 0x38	      1878	fold.c	FUNCTION_56
0x4003e3b	          0x4889fb	                            mov rbx, rdi	      1878	fold.c	FUNCTION_56
0x4003e3e	          0x4989f5	                            mov r13, rsi	      1878	fold.c	FUNCTION_56
0x4003e41	          0x4989d4	                            mov r12, rdx	      1878	fold.c	FUNCTION_56
0x4003e44	          0x4889cd	                            mov rbp, rcx	      1878	fold.c	FUNCTION_56
0x4003e47	          0x4d89c7	                             mov r15, r8	      1878	fold.c	FUNCTION_56
0x4003e4a	    0x64488b042528	                mov rax, qword fs:[0x28]	      1878	fold.c	FUNCTION_56
0x4003e53	      0x4889442428	             mov qword [rsp + 0x28], rax	      1878	fold.c	FUNCTION_56
0x4003e58	            0x31c0	                            xor eax, eax	      1878	fold.c	FUNCTION_56
0x4003e5a	    0x448b35000000	           mov r14d, dword [0x04003e61] 	      1883	fold.c	FUNCTION_56
0x4003e61	    0x488b05000000	            mov rax, qword [0x04003e68] 	      1887	fold.c	FUNCTION_56	IF_1
0x4003e68	          0x4885c0	                           test rax, rax	      1887	fold.c	FUNCTION_56	IF_1
0x4003e6b	            0x7416	                            je 0x4003e83	      1887	fold.c	FUNCTION_56	IF_1
0x4003e6d	          0x4839f8	                            cmp rax, rdi	      1887	fold.c	FUNCTION_56	IF_1
0x4003e70	            0x7511	                           jne 0x4003e83	      1887	fold.c	FUNCTION_56	IF_1
0x4003e72	    0x488b05000000	            mov rax, qword [0x04003e79] 	      1888	fold.c	FUNCTION_56	IF_1
0x4003e79	          0x4885c0	                           test rax, rax	      1888	fold.c	FUNCTION_56	IF_1
0x4003e7c	            0x7405	                            je 0x4003e83	      1888	fold.c	FUNCTION_56	IF_1
0x4003e7e	          0x4839f0	                            cmp rax, rsi	      1888	fold.c	FUNCTION_56	IF_1
0x4003e81	            0x7e0c	                           jle 0x4003e8f	      1888	fold.c	FUNCTION_56	IF_1
0x4003e83	    0xc70500000000	               mov dword [0x04003e8d], 0	      1890	fold.c	FUNCTION_56	IF_1
0x4003e8d	            0xeb09	                           jmp 0x4003e98	      1890	fold.c	FUNCTION_56	IF_1
0x4003e8f	    0x833d00000000	               cmp dword [0x04003e96], 0	      1892	fold.c	FUNCTION_56	IF_2
0x4003e96	            0x750a	                           jne 0x4003ea2	      1892	fold.c	FUNCTION_56	IF_2
0x4003e98	    0xc70500000000	               mov dword [0x04003ea2], 0	      1894	fold.c	FUNCTION_56	IF_2
0x4003ea2	    0x488b83200200	           mov rax, qword [rbx + 0x220] 	      1896	fold.c	FUNCTION_56	IF_3
0x4003ea9	          0x803800	                       cmp byte [rax], 0	      1896	fold.c	FUNCTION_56	IF_3
0x4003eac	     0xf84c0010000	                            je 0x4004072	      1896	fold.c	FUNCTION_56	IF_3
0x4003eb2	          0x4c89ee	                            mov rsi, r13	      1904	fold.c	FUNCTION_56	IF_3	CALL_1
0x4003eb5	      0xbf16000000	                           mov edi, 0x16	      1904	fold.c	FUNCTION_56	IF_3	CALL_1
0x4003eba	      0xe800000000	                          call 0x4003ebf	      1904	fold.c	FUNCTION_56	IF_3	CALL_1
0x4003ebf	          0x4c89e6	                            mov rsi, r12	      1905	fold.c	FUNCTION_56	IF_3	CALL_2
0x4003ec2	      0xbf17000000	                           mov edi, 0x17	      1905	fold.c	FUNCTION_56	IF_3	CALL_2
0x4003ec7	      0xe800000000	                          call 0x4003ecc	      1905	fold.c	FUNCTION_56	IF_3	CALL_2
0x4003ecc	          0x8b4500	                    mov eax, dword [rbp]	      1909	fold.c	FUNCTION_56	IF_3
0x4003ecf	          0x83f815	                           cmp eax, 0x15	      1909	fold.c	FUNCTION_56	IF_3
0x4003ed2	      0xbd15000000	                           mov ebp, 0x15	      1909	fold.c	FUNCTION_56	IF_3
0x4003ed7	           0xf4ee8	                         cmovle ebp, eax	      1909	fold.c	FUNCTION_56	IF_3
0x4003eda	          0x4863ed	                         movsxd rbp, ebp	        90	string3.h	FUNCTION_80	CALL_6
0x4003edd	      0xb916000000	                           mov ecx, 0x16	        90	string3.h	FUNCTION_80	CALL_6
0x4003ee2	          0x4889ea	                            mov rdx, rbp	        90	string3.h	FUNCTION_80	CALL_6
0x4003ee5	      0xbe2d000000	                           mov esi, 0x2d	        90	string3.h	FUNCTION_80	CALL_6
0x4003eea	      0x488d7c2410	                   lea rdi, [rsp + 0x10]	        90	string3.h	FUNCTION_80	CALL_6
0x4003eef	      0xe800000000	                          call 0x4003ef4	        90	string3.h	FUNCTION_80	CALL_6
0x4003ef4	      0xc6442c1000	          mov byte [rsp + rbp + 0x10], 0	      1913	fold.c	FUNCTION_56	IF_3
0x4003ef9	      0xbaffffffff	                     mov edx, 0xffffffff	      1914	fold.c	FUNCTION_56	IF_3	CALL_4
0x4003efe	      0x488d742410	                   lea rsi, [rsp + 0x10]	      1914	fold.c	FUNCTION_56	IF_3	CALL_4
0x4003f03	      0xbf18000000	                           mov edi, 0x18	      1914	fold.c	FUNCTION_56	IF_3	CALL_4
0x4003f08	      0xe800000000	                          call 0x4003f0d	      1914	fold.c	FUNCTION_56	IF_3	CALL_4
0x4003f0d	          0x4889ee	                            mov rsi, rbp	      1915	fold.c	FUNCTION_56	IF_3	CALL_5
0x4003f10	      0xbf19000000	                           mov edi, 0x19	      1915	fold.c	FUNCTION_56	IF_3	CALL_5
0x4003f15	      0xe800000000	                          call 0x4003f1a	      1915	fold.c	FUNCTION_56	IF_3	CALL_5
0x4003f1a	    0x833d00000000	               cmp dword [0x04003f21], 0	      1918	fold.c	FUNCTION_56	IF_3	IF_5
0x4003f21	     0xf85a4010000	                           jne 0x40040cb	      1918	fold.c	FUNCTION_56	IF_3	IF_5
0x4003f27	    0x488b05000000	            mov rax, qword [0x04003f2e] 	      1920	fold.c	FUNCTION_56	IF_3	IF_5
0x4003f2e	      0x4889442408	                mov qword [rsp + 8], rax	      1920	fold.c	FUNCTION_56	IF_3	IF_5
0x4003f33	    0x48891d000000	            mov qword [0x04003f3a], rbx 	      1921	fold.c	FUNCTION_56	IF_3	IF_5
0x4003f3a	        0x488b4308	                mov rax, qword [rbx + 8]	      1922	fold.c	FUNCTION_56	IF_3	IF_5
0x4003f3e	    0x488905000000	            mov qword [0x04003f45], rax 	      1922	fold.c	FUNCTION_56	IF_3	IF_5
0x4003f45	    0x830500000000	               add dword [0x04003f4c], 1	      1924	fold.c	FUNCTION_56	IF_3	IF_5
0x4003f4c	      0xbe04000000	                              mov esi, 4	      1925	fold.c	FUNCTION_56	IF_3	IF_5	CALL_6
0x4003f51	      0xbf00000000	                              mov edi, 0	      1925	fold.c	FUNCTION_56	IF_3	IF_5	CALL_6
0x4003f56	      0xe800000000	                          call 0x4003f5b	      1925	fold.c	FUNCTION_56	IF_3	IF_5	CALL_6
0x4003f5b	    0x488bbb200200	           mov rdi, qword [rbx + 0x220] 	      1925	fold.c	FUNCTION_56	IF_3	IF_5	CALL_6
0x4003f62	            0x89c2	                            mov edx, eax	      1925	fold.c	FUNCTION_56	IF_3	IF_5	CALL_6
0x4003f64	      0xbe00000000	                              mov esi, 0	      1925	fold.c	FUNCTION_56	IF_3	IF_5	CALL_6
0x4003f69	      0xe800000000	                          call 0x4003f6e	      1925	fold.c	FUNCTION_56	IF_3	IF_5	CALL_6
0x4003f6e	          0x4889c5	                            mov rbp, rax	      1925	fold.c	FUNCTION_56	IF_3	IF_5	CALL_6
0x4003f71	    0x832d00000000	               sub dword [0x04003f78], 1	      1927	fold.c	FUNCTION_56	IF_3	IF_5
0x4003f78	          0x4885c0	                           test rax, rax	      1929	fold.c	FUNCTION_56	IF_3	IF_5	IF_6
0x4003f7b	            0x7409	                            je 0x4003f86	      1929	fold.c	FUNCTION_56	IF_3	IF_5	IF_6
0x4003f7d	    0x833d00000000	               cmp dword [0x04003f84], 0	      1929	fold.c	FUNCTION_56	IF_3	IF_5	IF_6
0x4003f84	            0x740a	                            je 0x4003f90	      1929	fold.c	FUNCTION_56	IF_3	IF_5	IF_6
0x4003f86	    0xc70500000000	               mov dword [0x04003f90], 1	      1930	fold.c	FUNCTION_56	IF_3	IF_5	IF_6
0x4003f90	      0x488b442408	                mov rax, qword [rsp + 8]	      1932	fold.c	FUNCTION_56	IF_3	IF_5
0x4003f95	    0x488905000000	            mov qword [0x04003f9c], rax 	      1932	fold.c	FUNCTION_56	IF_3	IF_5
0x4003f9c	        0x488b4008	                mov rax, qword [rax + 8]	      1933	fold.c	FUNCTION_56	IF_3	IF_5
0x4003fa0	    0x488905000000	            mov qword [0x04003fa7], rax 	      1933	fold.c	FUNCTION_56	IF_3	IF_5
0x4003fa7	    0x4c892d000000	            mov qword [0x04003fae], r13 	      1935	fold.c	FUNCTION_56	IF_3
0x4003fae	    0x48891d000000	            mov qword [0x04003fb5], rbx 	      1936	fold.c	FUNCTION_56	IF_3
0x4003fb5	      0xbaffffffff	                     mov edx, 0xffffffff	      1937	fold.c	FUNCTION_56	IF_3	CALL_8
0x4003fba	      0xbe00000000	                              mov esi, 0	      1937	fold.c	FUNCTION_56	IF_3	CALL_8
0x4003fbf	      0xbf18000000	                           mov edi, 0x18	      1937	fold.c	FUNCTION_56	IF_3	CALL_8
0x4003fc4	      0xe800000000	                          call 0x4003fc9	      1937	fold.c	FUNCTION_56	IF_3	CALL_8
0x4003fc9	    0x833d00000000	               cmp dword [0x04003fd0], 0	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x4003fd0	            0x750c	                           jne 0x4003fde	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x4003fd2	          0x4585f6	                         test r14d, r14d	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x4003fd5	            0x7407	                            je 0x4003fde	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x4003fd7	    0x448935000000	           mov dword [0x04003fde], r14d 	      1940	fold.c	FUNCTION_56	IF_3	IF_7
0x4003fde	          0x4885ed	                           test rbp, rbp	      1942	fold.c	FUNCTION_56	IF_3	IF_8
0x4003fe1	     0xf848b000000	                            je 0x4004072	      1942	fold.c	FUNCTION_56	IF_3	IF_8
0x4003fe7	        0x807d0000	                       cmp byte [rbp], 0	      1946	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1
0x4003feb	     0xf84c5000000	                            je 0x40040b6	      1946	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1
0x4003ff1	          0x4889eb	                            mov rbx, rbp	      1946	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1
0x4003ff4	    0x833d00000000	               cmp dword [0x04003ffb], 0	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x4003ffb	            0x742f	                            je 0x400402c	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x4003ffd	          0x4889df	                            mov rdi, rbx	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x4004000	    0xff1500000000	                 call qword [0x04004006]	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x4004006	          0x4189c6	                           mov r14d, eax	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x4004009	          0x83f801	                              cmp eax, 1	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x400400c	            0x7e1e	                           jle 0x400402c	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x400400e	          0x4889df	                            mov rdi, rbx	      1953	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9	IF_10	CALL_9
0x4004011	    0xff1500000000	                 call qword [0x04004017]	      1953	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9	IF_10	CALL_9
0x4004017	            0x89c7	                            mov edi, eax	      1953	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9	IF_10	CALL_9
0x4004019	      0xe800000000	                          call 0x400401e	      1953	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9	IF_10	CALL_9
0x400401e	            0x85c0	                           test eax, eax	      1953	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9	IF_10	CALL_9
0x4004020	            0x7433	                            je 0x4004055	      1953	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9	IF_10	CALL_9
0x4004022	          0x4d63f6	                        movsxd r14, r14d	      1955	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x4004025	      0x4a8d4433ff	                lea rax, [rbx + r14 - 1]	      1955	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x400402a	            0xeb1d	                           jmp 0x4004049	      1955	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x400402c	          0x803b09	                       cmp byte [rbx], 9	      1959	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_1	IF_11
0x400402f	            0x7508	                           jne 0x4004039	      1959	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_1	IF_11
0x4004031	          0xc60320	                    mov byte [rbx], 0x20	      1960	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_1	IF_11
0x4004034	          0x4889d8	                            mov rax, rbx	      1960	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_1	IF_11
0x4004037	            0xeb10	                           jmp 0x4004049	      1960	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_1	IF_11
0x4004039	          0x4889df	                            mov rdi, rbx	      1961	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_2	IF_12	CALL_10
0x400403c	      0xe800000000	                          call 0x4004041	      1961	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_2	IF_12	CALL_10
0x4004041	          0x83f801	                              cmp eax, 1	      1961	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_2	IF_12	CALL_10
0x4004044	            0x7f0f	                            jg 0x4004055	      1961	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_2	IF_12	CALL_10
0x4004046	          0x4889d8	                            mov rax, rbx	      1961	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_2	IF_12	CALL_10
0x4004049	        0x488d5801	                      lea rbx, [rax + 1]	      1946	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1
0x400404d	        0x80780100	                   cmp byte [rax + 1], 0	      1946	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1
0x4004051	            0x75a1	                           jne 0x4003ff4	      1946	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1
0x4004053	            0xeb61	                           jmp 0x40040b6	      1946	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1
0x4004055	          0x803b00	                       cmp byte [rbx], 0	      1964	fold.c	FUNCTION_56	IF_3	IF_8	IF_13
0x4004058	            0x745c	                            je 0x40040b6	      1964	fold.c	FUNCTION_56	IF_3	IF_8	IF_13
0x400405a	          0x4889ef	                            mov rdi, rbp	      1966	fold.c	FUNCTION_56	IF_3	IF_8	IF_13	CALL_11
0x400405d	      0xe800000000	                          call 0x4004062	      1966	fold.c	FUNCTION_56	IF_3	IF_8	IF_13	CALL_11
0x4004062	          0x4889c3	                            mov rbx, rax	      1966	fold.c	FUNCTION_56	IF_3	IF_8	IF_13	CALL_11
0x4004065	          0x4889ef	                            mov rdi, rbp	      1967	fold.c	FUNCTION_56	IF_3	IF_8	IF_13	CALL_12
0x4004068	      0xe800000000	                          call 0x400406d	      1967	fold.c	FUNCTION_56	IF_3	IF_8	IF_13	CALL_12
0x400406d	          0x4885db	                           test rbx, rbx	      1972	fold.c	FUNCTION_56	IF_14
0x4004070	            0x7541	                           jne 0x40040b3	      1972	fold.c	FUNCTION_56	IF_14
0x4004072	          0x4d29ec	                            sub r12, r13	      1975	fold.c	FUNCTION_56	IF_14
0x4004075	        0x4983c401	                              add r12, 1	      1975	fold.c	FUNCTION_56	IF_14
0x4004079	    0x41b805000000	                              mov r8d, 5	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x400407f	          0x4c89e1	                            mov rcx, r12	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x4004082	      0xba00000000	                              mov edx, 0	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x4004087	      0xbe00000000	                              mov esi, 0	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x400408c	      0xbf00000000	                              mov edi, 0	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x4004091	      0xe800000000	                          call 0x4004096	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x4004096	          0x4c89e1	                            mov rcx, r12	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x4004099	          0x4889c2	                            mov rdx, rax	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x400409c	      0xbe33000000	                           mov esi, 0x33	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x40040a1	          0x4c89ff	                            mov rdi, r15	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x40040a4	      0xb800000000	                              mov eax, 0	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x40040a9	      0xe800000000	                          call 0x40040ae	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x40040ae	          0x4c89fd	                            mov rbp, r15	      1981	fold.c	FUNCTION_56	IF_14
0x40040b1	            0xeb03	                           jmp 0x40040b6	      1981	fold.c	FUNCTION_56	IF_14
0x40040b3	          0x4889dd	                            mov rbp, rbx	      1968	fold.c	FUNCTION_56	IF_3	IF_8	IF_13
0x40040b6	          0x4889e8	                            mov rax, rbp	      1984	fold.c	FUNCTION_56
0x40040b9	      0x488b4c2428	            mov rcx, qword [rsp + 0x28] 	      1984	fold.c	FUNCTION_56
0x40040be	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      1984	fold.c	FUNCTION_56
0x40040c7	            0x7449	                            je 0x4004112	      1984	fold.c	FUNCTION_56
0x40040c9	            0xeb42	                           jmp 0x400410d	      1984	fold.c	FUNCTION_56
0x40040cb	    0x4c892d000000	            mov qword [0x040040d2], r13 	      1935	fold.c	FUNCTION_56	IF_3
0x40040d2	    0x48891d000000	            mov qword [0x040040d9], rbx 	      1936	fold.c	FUNCTION_56	IF_3
0x40040d9	      0xbaffffffff	                     mov edx, 0xffffffff	      1937	fold.c	FUNCTION_56	IF_3	CALL_8
0x40040de	      0xbe00000000	                              mov esi, 0	      1937	fold.c	FUNCTION_56	IF_3	CALL_8
0x40040e3	      0xbf18000000	                           mov edi, 0x18	      1937	fold.c	FUNCTION_56	IF_3	CALL_8
0x40040e8	      0xe800000000	                          call 0x40040ed	      1937	fold.c	FUNCTION_56	IF_3	CALL_8
0x40040ed	    0x833d00000000	               cmp dword [0x040040f4], 0	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x40040f4	     0xf8578ffffff	                           jne 0x4004072	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x40040fa	      0xbd00000000	                              mov ebp, 0	      1879	fold.c	FUNCTION_56
0x40040ff	          0x4585f6	                         test r14d, r14d	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x4004102	     0xf85cffeffff	                           jne 0x4003fd7	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x4004108	      0xe965ffffff	                           jmp 0x4004072	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x400410d	      0xe800000000	                          call 0x4004112	      1984	fold.c	FUNCTION_56
0x4004112	        0x4883c438	                           add rsp, 0x38	      1984	fold.c	FUNCTION_56
0x4004116	              0x5b	                                 pop rbx	      1984	fold.c	FUNCTION_56
0x4004117	              0x5d	                                 pop rbp	      1984	fold.c	FUNCTION_56
0x4004118	            0x415c	                                 pop r12	      1984	fold.c	FUNCTION_56
0x400411a	            0x415d	                                 pop r13	      1984	fold.c	FUNCTION_56
0x400411c	            0x415e	                                 pop r14	      1984	fold.c	FUNCTION_56
0x400411e	            0x415f	                                 pop r15	      1984	fold.c	FUNCTION_56
0x4004120	              0xc3	                                     ret	      1984	fold.c	FUNCTION_56
setManualFold	DO,0:ELSE,0:FOR,0:SWITCH,0:IF,1:CALL,2:WHILE,0:functions,1	52
0x400306a	            0x4156	                                push r14	      1230	fold.c	FUNCTION_40
0x400306c	            0x4155	                                push r13	      1230	fold.c	FUNCTION_40
0x400306e	            0x4154	                                push r12	      1230	fold.c	FUNCTION_40
0x4003070	              0x55	                                push rbp	      1230	fold.c	FUNCTION_40
0x4003071	              0x53	                                push rbx	      1230	fold.c	FUNCTION_40
0x4003072	          0x4989fd	                            mov r13, rdi	      1230	fold.c	FUNCTION_40
0x4003075	            0x89f5	                            mov ebp, esi	      1230	fold.c	FUNCTION_40
0x4003077	          0x4189d4	                           mov r12d, edx	      1230	fold.c	FUNCTION_40
0x400307a	          0x4989ce	                            mov r14, rcx	      1230	fold.c	FUNCTION_40
0x400307d	    0x488b05000000	            mov rax, qword [0x04003084] 	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x4003084	    0x488b90f80100	           mov rdx, qword [rax + 0x1f8] 	       357	fold.c	FUNCTION_13
0x400308b	          0x803a64	                    cmp byte [rdx], 0x64	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x400308e	            0x7566	                           jne 0x40030f6	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x4003090	    0x83b888020000	              cmp dword [rax + 0x288], 0	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x4003097	            0x745d	                            je 0x40030f6	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x4003099	    0x488b1d000000	            mov rbx, qword [0x040030a0] 	      1241	fold.c	FUNCTION_40	IF_1
0x40030a0	          0x4885db	                           test rbx, rbx	      1241	fold.c	FUNCTION_40	IF_1
0x40030a3	            0x7451	                            je 0x40030f6	      1241	fold.c	FUNCTION_40	IF_1
0x40030a5	    0x488b05000000	            mov rax, qword [0x040030ac] 	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x40030ac	          0x4839d8	                            cmp rax, rbx	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x40030af	            0x743c	                            je 0x40030ed	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x40030b1	    0x488b93f80100	           mov rdx, qword [rbx + 0x1f8] 	       357	fold.c	FUNCTION_13
0x40030b8	          0x803a64	                    cmp byte [rdx], 0x64	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x40030bb	            0x7530	                           jne 0x40030ed	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x40030bd	    0x83bb88020000	              cmp dword [rbx + 0x288], 0	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x40030c4	            0x7427	                            je 0x40030ed	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x40030c6	        0x488b7838	            mov rdi, qword [rax + 0x38] 	      1245	fold.c	FUNCTION_40	FUNCTION_1	CALL_2
0x40030ca	          0x4889de	                            mov rsi, rbx	      1245	fold.c	FUNCTION_40	FUNCTION_1	CALL_2
0x40030cd	      0xe800000000	                          call 0x40030d2	      1245	fold.c	FUNCTION_40	FUNCTION_1	CALL_2
0x40030d2	          0x4885c0	                           test rax, rax	      1246	fold.c	FUNCTION_40	FUNCTION_1	IF_2
0x40030d5	            0x7416	                            je 0x40030ed	      1246	fold.c	FUNCTION_40	FUNCTION_1	IF_2
0x40030d7	    0x41b800000000	                              mov r8d, 0	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x40030dd	          0x4489e1	                           mov ecx, r12d	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x40030e0	            0x89ea	                            mov edx, ebp	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x40030e2	          0x4889c6	                            mov rsi, rax	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x40030e5	          0x4889df	                            mov rdi, rbx	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x40030e8	      0xe81afdffff	               call sym.setManualFoldWin	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x40030ed	        0x488b5b20	            mov rbx, qword [rbx + 0x20] 	      1241	fold.c	FUNCTION_40	IF_1
0x40030f1	          0x4885db	                           test rbx, rbx	      1241	fold.c	FUNCTION_40	IF_1
0x40030f4	            0x75af	                           jne 0x40030a5	      1241	fold.c	FUNCTION_40	IF_1
0x40030f6	          0x4d89f0	                             mov r8, r14	      1253	fold.c	FUNCTION_40	CALL_2
0x40030f9	          0x4489e1	                           mov ecx, r12d	      1253	fold.c	FUNCTION_40	CALL_2
0x40030fc	            0x89ea	                            mov edx, ebp	      1253	fold.c	FUNCTION_40	CALL_2
0x40030fe	          0x4c89ee	                            mov rsi, r13	      1253	fold.c	FUNCTION_40	CALL_2
0x4003101	    0x488b3d000000	            mov rdi, qword [0x04003108] 	      1253	fold.c	FUNCTION_40	CALL_2
0x4003108	      0xe8fafcffff	               call sym.setManualFoldWin	      1253	fold.c	FUNCTION_40	CALL_2
0x400310d	              0x5b	                                 pop rbx	      1254	fold.c	FUNCTION_40
0x400310e	              0x5d	                                 pop rbp	      1254	fold.c	FUNCTION_40
0x400310f	            0x415c	                                 pop r12	      1254	fold.c	FUNCTION_40
0x4003111	            0x415d	                                 pop r13	      1254	fold.c	FUNCTION_40
0x4003113	            0x415e	                                 pop r14	      1254	fold.c	FUNCTION_40
0x4003115	              0xc3	                                     ret	      1254	fold.c	FUNCTION_40
hasFoldingWin	DO,0:ELSE,0:FOR,1:SWITCH,0:IF,14:CALL,5:WHILE,0:functions,0	150
0x40029aa	            0x4157	                                push r15	       144	fold.c	FUNCTION_4
0x40029ac	            0x4156	                                push r14	       144	fold.c	FUNCTION_4
0x40029ae	            0x4155	                                push r13	       144	fold.c	FUNCTION_4
0x40029b0	            0x4154	                                push r12	       144	fold.c	FUNCTION_4
0x40029b2	              0x55	                                push rbp	       144	fold.c	FUNCTION_4
0x40029b3	              0x53	                                push rbx	       144	fold.c	FUNCTION_4
0x40029b4	        0x4883ec58	                           sub rsp, 0x58	       144	fold.c	FUNCTION_4
0x40029b8	          0x4989fe	                            mov r14, rdi	       144	fold.c	FUNCTION_4
0x40029bb	      0x4889742408	                mov qword [rsp + 8], rsi	       144	fold.c	FUNCTION_4
0x40029c0	      0x4889542420	             mov qword [rsp + 0x20], rdx	       144	fold.c	FUNCTION_4
0x40029c5	      0x48894c2428	             mov qword [rsp + 0x28], rcx	       144	fold.c	FUNCTION_4
0x40029ca	          0x4489c3	                            mov ebx, r8d	       144	fold.c	FUNCTION_4
0x40029cd	          0x4d89cf	                             mov r15, r9	       144	fold.c	FUNCTION_4
0x40029d0	      0x4c894c2418	              mov qword [rsp + 0x18], r9	       144	fold.c	FUNCTION_4
0x40029d5	    0x64488b042528	                mov rax, qword fs:[0x28]	       144	fold.c	FUNCTION_4
0x40029de	      0x4889442448	             mov qword [rsp + 0x48], rax	       144	fold.c	FUNCTION_4
0x40029e3	            0x31c0	                            xor eax, eax	       144	fold.c	FUNCTION_4
0x40029e5	    0xc74424380000	               mov dword [rsp + 0x38], 0	       152	fold.c	FUNCTION_4
0x40029ed	    0xc744243c0000	               mov dword [rsp + 0x3c], 0	       153	fold.c	FUNCTION_4
0x40029f5	      0xe88affffff	                    call sym.checkupdate	       157	fold.c	FUNCTION_4	CALL_1
0x40029fa	          0x4c89f7	                            mov rdi, r14	       161	fold.c	FUNCTION_4	IF_1	CALL_2
0x40029fd	      0xe800000000	                          call 0x4002a02	       161	fold.c	FUNCTION_4	IF_1	CALL_2
0x4002a02	            0x85c0	                           test eax, eax	       161	fold.c	FUNCTION_4	IF_1	CALL_2
0x4002a04	            0x7515	                           jne 0x4002a1b	       161	fold.c	FUNCTION_4	IF_1	CALL_2
0x4002a06	          0x4d85ff	                           test r15, r15	       163	fold.c	FUNCTION_4	IF_1	IF_2
0x4002a09	     0xf849d010000	                            je 0x4002bac	       163	fold.c	FUNCTION_4	IF_1	IF_2
0x4002a0f	    0x41c707000000	                      mov dword [r15], 0	       164	fold.c	FUNCTION_4	IF_1	IF_2
0x4002a16	      0xe991010000	                           jmp 0x4002bac	       164	fold.c	FUNCTION_4	IF_1	IF_2
0x4002a1b	    0x41bd00000000	                             mov r13d, 0	       164	fold.c	FUNCTION_4	IF_1	IF_2
0x4002a21	      0xb800000000	                              mov eax, 0	       164	fold.c	FUNCTION_4	IF_1	IF_2
0x4002a26	            0x85db	                           test ebx, ebx	       168	fold.c	FUNCTION_4	IF_3
0x4002a28	            0x7443	                            je 0x4002a6d	       168	fold.c	FUNCTION_4	IF_3
0x4002a2a	      0x488b742408	                mov rsi, qword [rsp + 8]	       174	fold.c	FUNCTION_4	IF_3	CALL_3
0x4002a2f	          0x4c89f7	                            mov rdi, r14	       174	fold.c	FUNCTION_4	IF_3	CALL_3
0x4002a32	      0xe800000000	                          call 0x4002a37	       174	fold.c	FUNCTION_4	IF_3	CALL_3
0x4002a37	            0x85c0	                           test eax, eax	       175	fold.c	FUNCTION_4	IF_3	IF_4
0x4002a39	            0x7827	                            js 0x4002a62	       175	fold.c	FUNCTION_4	IF_3	IF_4
0x4002a3b	            0x4898	                                    cdqe	       177	fold.c	FUNCTION_4	IF_3	IF_4
0x4002a3d	        0x488d1440	                  lea rdx, [rax + rax*2]	       177	fold.c	FUNCTION_4	IF_3	IF_4
0x4002a41	    0x498b86000100	           mov rax, qword [r14 + 0x100] 	       177	fold.c	FUNCTION_4	IF_3	IF_4
0x4002a48	        0x488d04d0	                  lea rax, [rax + rdx*8]	       177	fold.c	FUNCTION_4	IF_3	IF_4
0x4002a4c	          0x4c8b38	                    mov r15, qword [rax]	       177	fold.c	FUNCTION_4	IF_3	IF_4
0x4002a4f	        0x4c8b6810	            mov r13, qword [rax + 0x10] 	       178	fold.c	FUNCTION_4	IF_3	IF_4
0x4002a53	         0xfbe400b	            movsx eax, byte [rax + 0xb] 	       179	fold.c	FUNCTION_4	IF_3	IF_4
0x4002a57	          0x4d85ff	                           test r15, r15	       183	fold.c	FUNCTION_4	IF_5
0x4002a5a	     0xf85b0000000	                           jne 0x4002b10	       183	fold.c	FUNCTION_4	IF_5
0x4002a60	            0xeb0b	                           jmp 0x4002a6d	       183	fold.c	FUNCTION_4	IF_5
0x4002a62	    0x41bd00000000	                             mov r13d, 0	       183	fold.c	FUNCTION_4	IF_5
0x4002a68	      0xb800000000	                              mov eax, 0	       183	fold.c	FUNCTION_4	IF_5
0x4002a6d	    0x498dbe080100	                  lea rdi, [r14 + 0x108]	       188	fold.c	FUNCTION_4	IF_5
0x4002a74	      0x488b5c2408	                mov rbx, qword [rsp + 8]	       148	fold.c	FUNCTION_4
0x4002a79	    0x41bc00000000	                             mov r12d, 0	       155	fold.c	FUNCTION_4
0x4002a7f	      0xbd00000000	                              mov ebp, 0	       151	fold.c	FUNCTION_4
0x4002a84	    0x41bf00000000	                             mov r15d, 0	       188	fold.c	FUNCTION_4	IF_5
0x4002a8a	      0x4c89742410	             mov qword [rsp + 0x10], r14	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x4002a8f	          0x4189c6	                           mov r14d, eax	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x4002a92	      0x488d542440	                   lea rdx, [rsp + 0x40]	       191	fold.c	FUNCTION_4	IF_5	FOR_1	IF_6	CALL_4
0x4002a97	          0x4889de	                            mov rsi, rbx	       191	fold.c	FUNCTION_4	IF_5	FOR_1	IF_6	CALL_4
0x4002a9a	      0xe841d6ffff	                       call sym.foldFind	       191	fold.c	FUNCTION_4	IF_5	FOR_1	IF_6	CALL_4
0x4002a9f	            0x85c0	                           test eax, eax	       191	fold.c	FUNCTION_4	IF_5	FOR_1	IF_6	CALL_4
0x4002aa1	            0x747f	                            je 0x4002b22	       191	fold.c	FUNCTION_4	IF_5	FOR_1	IF_6	CALL_4
0x4002aa3	      0x488b742440	            mov rsi, qword [rsp + 0x40] 	       195	fold.c	FUNCTION_4	IF_5	FOR_1	IF_7
0x4002aa8	          0x488b06	                    mov rax, qword [rsi]	       195	fold.c	FUNCTION_4	IF_5	FOR_1	IF_7
0x4002aab	          0x4585e4	                         test r12d, r12d	       195	fold.c	FUNCTION_4	IF_5	FOR_1	IF_7
0x4002aae	            0x750f	                           jne 0x4002abf	       195	fold.c	FUNCTION_4	IF_5	FOR_1	IF_7
0x4002ab0	          0x4839c3	                            cmp rbx, rax	       195	fold.c	FUNCTION_4	IF_5	FOR_1	IF_7
0x4002ab3	           0xf94c1	                                 sete cl	       195	fold.c	FUNCTION_4	IF_5	FOR_1	IF_7
0x4002ab6	          0x8d5501	                      lea edx, [rbp + 1]	       195	fold.c	FUNCTION_4	IF_5	FOR_1	IF_7
0x4002ab9	            0x84c9	                             test cl, cl	       195	fold.c	FUNCTION_4	IF_5	FOR_1	IF_7
0x4002abb	        0x440f45e2	                        cmovne r12d, edx	       195	fold.c	FUNCTION_4	IF_5	FOR_1	IF_7
0x4002abf	          0x4901c7	                            add r15, rax	       198	fold.c	FUNCTION_4	IF_5	FOR_1
0x4002ac2	          0x4901c5	                            add r13, rax	       199	fold.c	FUNCTION_4	IF_5	FOR_1
0x4002ac5	      0x4c8b4c2408	                 mov r9, qword [rsp + 8]	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x4002aca	          0x4929d9	                             sub r9, rbx	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x4002acd	      0x4c8d44243c	                    lea r8, [rsp + 0x3c]	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x4002ad2	            0x89e9	                            mov ecx, ebp	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x4002ad4	      0x488d542438	                   lea rdx, [rsp + 0x38]	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x4002ad9	      0x488b7c2410	            mov rdi, qword [rsp + 0x10] 	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x4002ade	      0xe852d8ffff	                   call sym.check_closed	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x4002ae3	          0x4189c6	                           mov r14d, eax	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x4002ae6	            0x85c0	                           test eax, eax	       204	fold.c	FUNCTION_4	IF_5	FOR_1	IF_8
0x4002ae8	            0x7415	                            je 0x4002aff	       204	fold.c	FUNCTION_4	IF_5	FOR_1	IF_8
0x4002aea	      0x4c8b742410	            mov r14, qword [rsp + 0x10] 	       204	fold.c	FUNCTION_4	IF_5	FOR_1	IF_8
0x4002aef	      0x488b442440	            mov rax, qword [rsp + 0x40] 	       207	fold.c	FUNCTION_4	IF_5	FOR_1	IF_8
0x4002af4	        0x488b4008	                mov rax, qword [rax + 8]	       207	fold.c	FUNCTION_4	IF_5	FOR_1	IF_8
0x4002af8	      0x4d8d6c05ff	                lea r13, [r13 + rax - 1]	       207	fold.c	FUNCTION_4	IF_5	FOR_1	IF_8
0x4002afd	            0xeb55	                           jmp 0x4002b54	       207	fold.c	FUNCTION_4	IF_5	FOR_1	IF_8
0x4002aff	      0x488b442440	            mov rax, qword [rsp + 0x40] 	       213	fold.c	FUNCTION_4	IF_5	FOR_1
0x4002b04	        0x488d7810	                   lea rdi, [rax + 0x10]	       213	fold.c	FUNCTION_4	IF_5	FOR_1
0x4002b08	          0x482b18	                    sub rbx, qword [rax]	       214	fold.c	FUNCTION_4	IF_5	FOR_1
0x4002b0b	          0x83c501	                              add ebp, 1	       215	fold.c	FUNCTION_4	IF_5	FOR_1
0x4002b0e	            0xeb82	                           jmp 0x4002a92	       216	fold.c	FUNCTION_4	IF_5	FOR_1
0x4002b10	      0x488b5c2408	                mov rbx, qword [rsp + 8]	       148	fold.c	FUNCTION_4
0x4002b15	    0x41bc00000000	                             mov r12d, 0	       155	fold.c	FUNCTION_4
0x4002b1b	      0xbd00000000	                              mov ebp, 0	       151	fold.c	FUNCTION_4
0x4002b20	            0xeb08	                           jmp 0x4002b2a	       151	fold.c	FUNCTION_4
0x4002b22	          0x4489f0	                           mov eax, r14d	       151	fold.c	FUNCTION_4
0x4002b25	      0x4c8b742410	            mov r14, qword [rsp + 0x10] 	       151	fold.c	FUNCTION_4
0x4002b2a	            0x85c0	                           test eax, eax	       219	fold.c	FUNCTION_4	IF_9
0x4002b2c	            0x7526	                           jne 0x4002b54	       219	fold.c	FUNCTION_4	IF_9
0x4002b2e	      0x488b4c2418	            mov rcx, qword [rsp + 0x18] 	       221	fold.c	FUNCTION_4	IF_9	IF_10
0x4002b33	          0x4885c9	                           test rcx, rcx	       221	fold.c	FUNCTION_4	IF_9	IF_10
0x4002b36	            0x7468	                            je 0x4002ba0	       221	fold.c	FUNCTION_4	IF_9	IF_10
0x4002b38	            0x8929	                    mov dword [rcx], ebp	       223	fold.c	FUNCTION_4	IF_9	IF_10
0x4002b3a	        0x8b442408	                mov eax, dword [rsp + 8]	       224	fold.c	FUNCTION_4	IF_9	IF_10
0x4002b3e	            0x29d8	                            sub eax, ebx	       224	fold.c	FUNCTION_4	IF_9	IF_10
0x4002b40	          0x894104	                mov dword [rcx + 4], eax	       224	fold.c	FUNCTION_4	IF_9	IF_10
0x4002b43	          0x4585e4	                         test r12d, r12d	       225	fold.c	FUNCTION_4	IF_9	IF_10
0x4002b46	        0x410f45ec	                        cmovne ebp, r12d	       225	fold.c	FUNCTION_4	IF_9	IF_10
0x4002b4a	          0x896908	                mov dword [rcx + 8], ebp	       225	fold.c	FUNCTION_4	IF_9	IF_10
0x4002b4d	      0xb800000000	                              mov eax, 0	       227	fold.c	FUNCTION_4	IF_9
0x4002b52	            0xeb58	                           jmp 0x4002bac	       227	fold.c	FUNCTION_4	IF_9
0x4002b54	        0x498b4608	                mov rax, qword [r14 + 8]	       230	fold.c	FUNCTION_4	IF_11
0x4002b58	          0x488b00	                    mov rax, qword [rax]	       230	fold.c	FUNCTION_4	IF_11
0x4002b5b	          0x4c39e8	                            cmp rax, r13	       230	fold.c	FUNCTION_4	IF_11
0x4002b5e	        0x4c0f4ee8	                         cmovle r13, rax	       230	fold.c	FUNCTION_4	IF_11
0x4002b62	      0x488b442428	            mov rax, qword [rsp + 0x28] 	       232	fold.c	FUNCTION_4	IF_12
0x4002b67	          0x4885c0	                           test rax, rax	       232	fold.c	FUNCTION_4	IF_12
0x4002b6a	            0x7403	                            je 0x4002b6f	       232	fold.c	FUNCTION_4	IF_12
0x4002b6c	          0x4c8928	                    mov qword [rax], r13	       233	fold.c	FUNCTION_4	IF_12
0x4002b6f	      0x488b442420	            mov rax, qword [rsp + 0x20] 	       234	fold.c	FUNCTION_4	IF_13
0x4002b74	          0x4885c0	                           test rax, rax	       234	fold.c	FUNCTION_4	IF_13
0x4002b77	            0x7403	                            je 0x4002b7c	       234	fold.c	FUNCTION_4	IF_13
0x4002b79	          0x4c8938	                    mov qword [rax], r15	       235	fold.c	FUNCTION_4	IF_13
0x4002b7c	      0x488b442418	            mov rax, qword [rsp + 0x18] 	       236	fold.c	FUNCTION_4	IF_14
0x4002b81	          0x4885c0	                           test rax, rax	       236	fold.c	FUNCTION_4	IF_14
0x4002b84	            0x7421	                            je 0x4002ba7	       236	fold.c	FUNCTION_4	IF_14
0x4002b86	          0x83c501	                              add ebp, 1	       238	fold.c	FUNCTION_4	IF_14
0x4002b89	            0x8928	                    mov dword [rax], ebp	       238	fold.c	FUNCTION_4	IF_14
0x4002b8b	        0x44897804	               mov dword [rax + 4], r15d	       239	fold.c	FUNCTION_4	IF_14
0x4002b8f	          0x4585e4	                         test r12d, r12d	       240	fold.c	FUNCTION_4	IF_14
0x4002b92	        0x410f45ec	                        cmovne ebp, r12d	       240	fold.c	FUNCTION_4	IF_14
0x4002b96	          0x896808	                mov dword [rax + 8], ebp	       240	fold.c	FUNCTION_4	IF_14
0x4002b99	      0xb801000000	                              mov eax, 1	       242	fold.c	FUNCTION_4
0x4002b9e	            0xeb0c	                           jmp 0x4002bac	       242	fold.c	FUNCTION_4
0x4002ba0	      0xb800000000	                              mov eax, 0	       227	fold.c	FUNCTION_4	IF_9
0x4002ba5	            0xeb05	                           jmp 0x4002bac	       227	fold.c	FUNCTION_4	IF_9
0x4002ba7	      0xb801000000	                              mov eax, 1	       242	fold.c	FUNCTION_4
0x4002bac	      0x488b5c2448	            mov rbx, qword [rsp + 0x48] 	       243	fold.c	FUNCTION_4
0x4002bb1	    0x6448331c2528	                xor rbx, qword fs:[0x28]	       243	fold.c	FUNCTION_4
0x4002bba	            0x7405	                            je 0x4002bc1	       243	fold.c	FUNCTION_4
0x4002bbc	      0xe800000000	                          call 0x4002bc1	       243	fold.c	FUNCTION_4
0x4002bc1	        0x4883c458	                           add rsp, 0x58	       243	fold.c	FUNCTION_4
0x4002bc5	              0x5b	                                 pop rbx	       243	fold.c	FUNCTION_4
0x4002bc6	              0x5d	                                 pop rbp	       243	fold.c	FUNCTION_4
0x4002bc7	            0x415c	                                 pop r12	       243	fold.c	FUNCTION_4
0x4002bc9	            0x415d	                                 pop r13	       243	fold.c	FUNCTION_4
0x4002bcb	            0x415e	                                 pop r14	       243	fold.c	FUNCTION_4
0x4002bcd	            0x415f	                                 pop r15	       243	fold.c	FUNCTION_4
0x4002bcf	              0xc3	                                     ret	       243	fold.c	FUNCTION_4
foldlevelDiff	DO,0:ELSE,1:FOR,0:SWITCH,0:IF,1:CALL,1:WHILE,0:functions,0	12
0x4000abf	              0x53	                                push rbx	      3239	fold.c	FUNCTION_68
0x4000ac0	          0x4889fb	                            mov rbx, rdi	      3239	fold.c	FUNCTION_68
0x4000ac3	        0x488b7710	            mov rsi, qword [rdi + 0x10] 	      3240	fold.c	FUNCTION_68	IF_1	CALL_1
0x4000ac7	        0x48037708	                add rsi, qword [rdi + 8]	      3240	fold.c	FUNCTION_68	IF_1	CALL_1
0x4000acb	          0x488b3f	                    mov rdi, qword [rdi]	      3240	fold.c	FUNCTION_68	IF_1	CALL_1
0x4000ace	      0xe800000000	                          call 0x4000ad3	      3240	fold.c	FUNCTION_68	IF_1	CALL_1
0x4000ad3	            0x85c0	                           test eax, eax	      3241	fold.c	FUNCTION_68	IF_1
0x4000ad5	           0xf95c0	                                setne al	      3241	fold.c	FUNCTION_68	IF_1
0x4000ad8	           0xfb6c0	                           movzx eax, al	      3241	fold.c	FUNCTION_68	IF_1
0x4000adb	          0x894320	             mov dword [rbx + 0x20], eax	      3241	fold.c	FUNCTION_68	IF_1
0x4000ade	              0x5b	                                 pop rbx	      3244	fold.c	FUNCTION_68	ELSE_1
0x4000adf	              0xc3	                                     ret	      3244	fold.c	FUNCTION_68	ELSE_1
foldMarkAdjust	DO,0:ELSE,0:FOR,0:SWITCH,0:IF,2:CALL,1:WHILE,0:functions,0	26
0x4003da8	        0x4883ec08	                              sub rsp, 8	      1472	fold.c	FUNCTION_45
0x4003dac	    0x4881f9ffffff	                     cmp rcx, 0x7fffffff	      1475	fold.c	FUNCTION_45	IF_1
0x4003db3	            0x7520	                           jne 0x4003dd5	      1475	fold.c	FUNCTION_45	IF_1
0x4003db5	          0x4839f2	                            cmp rdx, rsi	      1475	fold.c	FUNCTION_45	IF_1
0x4003db8	            0x7c1b	                            jl 0x4003dd5	      1475	fold.c	FUNCTION_45	IF_1
0x4003dba	          0x4989d1	                             mov r9, rdx	      1475	fold.c	FUNCTION_45	IF_1
0x4003dbd	          0x4929f1	                             sub r9, rsi	      1475	fold.c	FUNCTION_45	IF_1
0x4003dc0	          0x4c89c0	                             mov rax, r8	      1475	fold.c	FUNCTION_45	IF_1
0x4003dc3	          0x48f7d8	                                 neg rax	      1475	fold.c	FUNCTION_45	IF_1
0x4003dc6	          0x4939c1	                             cmp r9, rax	      1475	fold.c	FUNCTION_45	IF_1
0x4003dc9	            0x7c0a	                            jl 0x4003dd5	      1475	fold.c	FUNCTION_45	IF_1
0x4003dcb	          0x4889f2	                            mov rdx, rsi	      1476	fold.c	FUNCTION_45	IF_1
0x4003dce	          0x4c29c2	                             sub rdx, r8	      1476	fold.c	FUNCTION_45	IF_1
0x4003dd1	        0x4883ea01	                              sub rdx, 1	      1476	fold.c	FUNCTION_45	IF_1
0x4003dd5	    0xf60500000000	           test byte [0x04003ddc], 0x10 	      1479	fold.c	FUNCTION_45	IF_2
0x4003ddc	            0x7416	                            je 0x4003df4	      1479	fold.c	FUNCTION_45	IF_2
0x4003dde	        0x4883f901	                              cmp rcx, 1	      1479	fold.c	FUNCTION_45	IF_2
0x4003de2	            0x7510	                           jne 0x4003df4	      1479	fold.c	FUNCTION_45	IF_2
0x4003de4	    0x4881faffffff	                     cmp rdx, 0x7fffffff	      1479	fold.c	FUNCTION_45	IF_2
0x4003deb	           0xf94c0	                                 sete al	      1479	fold.c	FUNCTION_45	IF_2
0x4003dee	            0x3c01	                               cmp al, 1	      1480	fold.c	FUNCTION_45	IF_2
0x4003df0	        0x4883d6ff	             adc rsi, 0xffffffffffffffff	      1480	fold.c	FUNCTION_45	IF_2
0x4003df4	    0x4881c7080100	                          add rdi, 0x108	      1481	fold.c	FUNCTION_45	CALL_1
0x4003dfb	      0xe87bd6ffff	          call sym.foldMarkAdjustRecurse	      1481	fold.c	FUNCTION_45	CALL_1
0x4003e00	        0x4883c408	                              add rsp, 8	      1482	fold.c	FUNCTION_45
0x4003e04	              0xc3	                                     ret	      1482	fold.c	FUNCTION_45
