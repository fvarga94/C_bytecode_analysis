put_folds	FOR,0:functions,0:IF,3:ELSE,0:CALL,4:DO,0:SWITCH,0:WHILE,0	45
0x4005470	              0x55	                                push rbp	      3493	fold.c	FUNCTION_73
0x4005471	              0x53	                                push rbx	      3493	fold.c	FUNCTION_73
0x4005472	          0x4889fd	                            mov rbp, rdi	      3493	fold.c	FUNCTION_73
0x4005475	          0x4889f3	                            mov rbx, rsi	      3493	fold.c	FUNCTION_73
0x4005478	        0x4883ec08	                              sub rsp, 8	      3493	fold.c	FUNCTION_73
0x400547c	    0x488b86f80100	           mov rax, qword [rsi + 0x1f8] 	       307	fold.c	FUNCTION_8
0x4005483	        0x80780375	                cmp byte [rax + 3], 0x75	      3494	fold.c	FUNCTION_73	IF_1	CALL_1
0x4005487	            0x743f	                            je 0x40054c8	      3494	fold.c	FUNCTION_73	IF_1	CALL_1
0x4005489	    0x80bb20010000	               cmp byte [rbx + 0x120], 0	      3502	fold.c	FUNCTION_73	IF_3
0x4005490	      0xb801000000	                              mov eax, 1	      3505	fold.c	FUNCTION_73
0x4005495	            0x7509	                           jne 0x40054a0	      3502	fold.c	FUNCTION_73	IF_3
0x4005497	        0x4883c408	                              add rsp, 8	      3506	fold.c	FUNCTION_73
0x400549b	              0x5b	                                 pop rbx	      3506	fold.c	FUNCTION_73
0x400549c	              0x5d	                                 pop rbp	      3506	fold.c	FUNCTION_73
0x400549d	              0xc3	                                     ret	      3506	fold.c	FUNCTION_73
0x400549e	            0x6690	                                     nop	      3506	fold.c	FUNCTION_73
0x40054a0	    0x488b8b180100	           mov rcx, qword [rbx + 0x118] 	      3503	fold.c	FUNCTION_73	CALL_4
0x40054a7	        0x4883c408	                              add rsp, 8	      3506	fold.c	FUNCTION_73
0x40054ab	    0x488d93080100	                  lea rdx, [rbx + 0x108]	      3503	fold.c	FUNCTION_73	CALL_4
0x40054b2	          0x4889de	                            mov rsi, rbx	      3503	fold.c	FUNCTION_73	CALL_4
0x40054b5	          0x4889ef	                            mov rdi, rbp	      3503	fold.c	FUNCTION_73	CALL_4
0x40054b8	          0x4531c0	                            xor r8d, r8d	      3503	fold.c	FUNCTION_73	CALL_4
0x40054bb	              0x5b	                                 pop rbx	      3506	fold.c	FUNCTION_73
0x40054bc	              0x5d	                                 pop rbp	      3506	fold.c	FUNCTION_73
0x40054bd	      0xe9deb9ffff	    jmp sym.put_foldopen_recurse.isra.12	      3503	fold.c	FUNCTION_73	CALL_4
0x40054c2	    0x660f1f440000	                    nop word [rax + rax]	      3503	fold.c	FUNCTION_73	CALL_4
0x40054c8	      0xbe00000000	                              mov esi, 0	      3496	fold.c	FUNCTION_73	IF_1	IF_2	CALL_2
0x40054cd	      0xe800000000	                          call 0x40054d2	      3496	fold.c	FUNCTION_73	IF_1	IF_2	CALL_2
0x40054d2	            0x85c0	                           test eax, eax	      3496	fold.c	FUNCTION_73	IF_1	IF_2	CALL_2
0x40054d4	            0x750a	                           jne 0x40054e0	      3496	fold.c	FUNCTION_73	IF_1	IF_2	CALL_2
0x40054d6	            0x31c0	                            xor eax, eax	      3498	fold.c	FUNCTION_73	IF_1	IF_2
0x40054d8	        0x4883c408	                              add rsp, 8	      3506	fold.c	FUNCTION_73
0x40054dc	              0x5b	                                 pop rbx	      3506	fold.c	FUNCTION_73
0x40054dd	              0x5d	                                 pop rbp	      3506	fold.c	FUNCTION_73
0x40054de	              0xc3	                                     ret	      3506	fold.c	FUNCTION_73
0x40054df	              0x90	                                     nop	      3506	fold.c	FUNCTION_73
0x40054e0	    0x488b93180100	           mov rdx, qword [rbx + 0x118] 	      3497	fold.c	FUNCTION_73	IF_1	IF_2	CALL_3
0x40054e7	    0x488db3080100	                  lea rsi, [rbx + 0x108]	      3497	fold.c	FUNCTION_73	IF_1	IF_2	CALL_3
0x40054ee	            0x31c9	                            xor ecx, ecx	      3497	fold.c	FUNCTION_73	IF_1	IF_2	CALL_3
0x40054f0	          0x4889ef	                            mov rdi, rbp	      3497	fold.c	FUNCTION_73	IF_1	IF_2	CALL_3
0x40054f3	      0xe878b8ffff	       call sym.put_folds_recurse.isra.9	      3497	fold.c	FUNCTION_73	IF_1	IF_2	CALL_3
0x40054f8	            0x85c0	                           test eax, eax	      3497	fold.c	FUNCTION_73	IF_1	IF_2	CALL_3
0x40054fa	            0x758d	                           jne 0x4005489	      3497	fold.c	FUNCTION_73	IF_1	IF_2	CALL_3
0x40054fc	            0x31c0	                            xor eax, eax	      3498	fold.c	FUNCTION_73	IF_1	IF_2
0x40054fe	            0xebd8	                           jmp 0x40054d8	      3498	fold.c	FUNCTION_73	IF_1	IF_2
foldMarkAdjustRecurse	FOR,1:functions,0:IF,10:ELSE,8:CALL,5:DO,0:SWITCH,0:WHILE,0	176
0x4001670	            0x4157	                                push r15	      1492	fold.c	FUNCTION_46
0x4001672	            0x4156	                                push r14	      1492	fold.c	FUNCTION_46
0x4001674	          0x4989cf	                            mov r15, rcx	      1492	fold.c	FUNCTION_46
0x4001677	            0x4155	                                push r13	      1492	fold.c	FUNCTION_46
0x4001679	            0x4154	                                push r12	      1492	fold.c	FUNCTION_46
0x400167b	          0x4989d6	                            mov r14, rdx	      1492	fold.c	FUNCTION_46
0x400167e	              0x55	                                push rbp	      1492	fold.c	FUNCTION_46
0x400167f	              0x53	                                push rbx	      1492	fold.c	FUNCTION_46
0x4001680	          0x4989fc	                            mov r12, rdi	      1492	fold.c	FUNCTION_46
0x4001683	          0x4889f5	                            mov rbp, rsi	      1492	fold.c	FUNCTION_46
0x4001686	          0x4d89c5	                             mov r13, r8	      1492	fold.c	FUNCTION_46
0x4001689	        0x4883ec28	                           sub rsp, 0x28	      1492	fold.c	FUNCTION_46
0x400168d	    0xf60500000000	           test byte [0x04001694], 0x10 	      1500	fold.c	FUNCTION_46	IF_1
0x4001694	        0x48893424	                    mov qword [rsp], rsi	      1500	fold.c	FUNCTION_46	IF_1
0x4001698	            0x741f	                            je 0x40016b9	      1500	fold.c	FUNCTION_46	IF_1
0x400169a	        0x4883f901	                              cmp rcx, 1	      1500	fold.c	FUNCTION_46	IF_1
0x400169e	     0xf851c020000	                           jne 0x40018c0	      1500	fold.c	FUNCTION_46	IF_1
0x40016a4	    0x4881faffffff	                     cmp rdx, 0x7fffffff	      1500	fold.c	FUNCTION_46	IF_1
0x40016ab	     0xf850f020000	                           jne 0x40018c0	      1500	fold.c	FUNCTION_46	IF_1
0x40016b1	        0x488d4601	                      lea rax, [rsi + 1]	      1501	fold.c	FUNCTION_46	IF_1
0x40016b5	        0x48890424	                    mov qword [rsp], rax	      1501	fold.c	FUNCTION_46	IF_1
0x40016b9	        0x418b0c24	                    mov ecx, dword [r12]	      1501	fold.c	FUNCTION_46	IF_1
0x40016bd	      0x498b7c2410	            mov rdi, qword [r12 + 0x10] 	      1501	fold.c	FUNCTION_46	IF_1
0x40016c2	          0x8d71ff	                      lea esi, [rcx - 1]	      1132	fold.c	FUNCTION_36
0x40016c5	          0x4863f6	                         movsxd rsi, esi	      1132	fold.c	FUNCTION_36
0x40016c8	          0x4885f6	                           test rsi, rsi	      1133	fold.c	FUNCTION_36	WHILE_1
0x40016cb	     0xf882e020000	                            js 0x40018ff	      1133	fold.c	FUNCTION_36	WHILE_1
0x40016d1	          0x4531c0	                            xor r8d, r8d	      1133	fold.c	FUNCTION_36	WHILE_1
0x40016d4	            0xeb15	                           jmp 0x40016eb	      1133	fold.c	FUNCTION_36	WHILE_1
0x40016d6	    0x662e0f1f8400	                 nop word cs:[rax + rax]	      1133	fold.c	FUNCTION_36	WHILE_1
0x40016e0	          0x83e801	                              sub eax, 1	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40016e3	          0x4863f0	                         movsxd rsi, eax	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40016e6	          0x4939f0	                             cmp r8, rsi	      1133	fold.c	FUNCTION_36	WHILE_1
0x40016e9	            0x7f2e	                            jg 0x4001719	      1133	fold.c	FUNCTION_36	WHILE_1
0x40016eb	        0x4a8d0406	                     lea rax, [rsi + r8]	      1135	fold.c	FUNCTION_36	WHILE_1
0x40016ef	          0x48d1f8	                              sar rax, 1	      1135	fold.c	FUNCTION_36	WHILE_1
0x40016f2	        0x488d1c40	                  lea rbx, [rax + rax*2]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40016f6	        0x48c1e304	                              shl rbx, 4	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40016fa	          0x4801fb	                            add rbx, rdi	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40016fd	          0x488b13	                    mov rdx, qword [rbx]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4001700	          0x4839d5	                            cmp rbp, rdx	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4001703	            0x7cdb	                            jl 0x40016e0	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4001705	        0x48035308	                add rdx, qword [rbx + 8]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001709	          0x4839d5	                            cmp rbp, rdx	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x400170c	            0x7c16	                            jl 0x4001724	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x400170e	          0x83c001	                              add eax, 1	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001711	          0x4c63c0	                          movsxd r8, eax	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001714	          0x4939f0	                             cmp r8, rsi	      1133	fold.c	FUNCTION_36	WHILE_1
0x4001717	            0x7ed2	                           jle 0x40016eb	      1133	fold.c	FUNCTION_36	WHILE_1
0x4001719	        0x4b8d1c40	                    lea rbx, [r8 + r8*2]	      1133	fold.c	FUNCTION_36	WHILE_1
0x400171d	        0x48c1e304	                              shl rbx, 4	      1133	fold.c	FUNCTION_36	WHILE_1
0x4001721	          0x4801fb	                            add rbx, rdi	      1149	fold.c	FUNCTION_36
0x4001724	          0x4889d8	                            mov rax, rbx	      1511	fold.c	FUNCTION_46	FOR_1
0x4001727	    0x48baabaaaaaa	          movabs rdx, 0xaaaaaaaaaaaaaaab	      1511	fold.c	FUNCTION_46	FOR_1
0x4001731	          0x4829f8	                            sub rax, rdi	      1511	fold.c	FUNCTION_46	FOR_1
0x4001734	          0x4c89ef	                            mov rdi, r13	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x4001737	        0x48c1f804	                              sar rax, 4	      1511	fold.c	FUNCTION_46	FOR_1
0x400173b	          0x4c29ff	                            sub rdi, r15	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x400173e	        0x480fafc2	                           imul rax, rdx	      1511	fold.c	FUNCTION_46	FOR_1
0x4001742	      0x48897c2408	                mov qword [rsp + 8], rdi	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x4001747	            0x39c8	                            cmp eax, ecx	      1511	fold.c	FUNCTION_46	FOR_1
0x4001749	          0x4189c3	                           mov r11d, eax	      1511	fold.c	FUNCTION_46	FOR_1
0x400174c	            0x7c27	                            jl 0x4001775	      1511	fold.c	FUNCTION_46	FOR_1
0x400174e	      0xe997000000	                           jmp 0x40017ea	      1511	fold.c	FUNCTION_46	FOR_1
0x4001753	       0xf1f440000	                   nop dword [rax + rax]	      1511	fold.c	FUNCTION_46	FOR_1
0x4001758	          0x4d85ed	                           test r13, r13	      1534	fold.c	FUNCTION_46	FOR_1	IF_3	IF_4
0x400175b	     0xf8489000000	                            je 0x40017ea	      1534	fold.c	FUNCTION_46	FOR_1	IF_3	IF_4
0x4001761	          0x4c01e9	                            add rcx, r13	      1536	fold.c	FUNCTION_46	FOR_1	IF_3
0x4001764	          0x48890b	                    mov qword [rbx], rcx	      1536	fold.c	FUNCTION_46	FOR_1	IF_3
0x4001767	        0x4183c301	                             add r11d, 1	      1511	fold.c	FUNCTION_46	FOR_1
0x400176b	        0x4883c330	                           add rbx, 0x30	      1511	fold.c	FUNCTION_46	FOR_1
0x400176f	        0x45391c24	                   cmp dword [r12], r11d	      1511	fold.c	FUNCTION_46	FOR_1
0x4001773	            0x7e75	                           jle 0x40017ea	      1511	fold.c	FUNCTION_46	FOR_1
0x4001775	          0x488b0b	                    mov rcx, qword [rbx]	      1525	fold.c	FUNCTION_46	FOR_1
0x4001778	          0x4889c8	                            mov rax, rcx	      1525	fold.c	FUNCTION_46	FOR_1
0x400177b	        0x48034308	                add rax, qword [rbx + 8]	      1525	fold.c	FUNCTION_46	FOR_1
0x400177f	        0x4883e801	                              sub rax, 1	      1525	fold.c	FUNCTION_46	FOR_1
0x4001783	          0x4839c5	                            cmp rbp, rax	      1528	fold.c	FUNCTION_46	FOR_1	IF_2
0x4001786	            0x7fdf	                            jg 0x4001767	      1528	fold.c	FUNCTION_46	FOR_1	IF_2
0x4001788	          0x4939ce	                            cmp r14, rcx	      1532	fold.c	FUNCTION_46	FOR_1	IF_3
0x400178b	            0x7ccb	                            jl 0x4001758	      1532	fold.c	FUNCTION_46	FOR_1	IF_3
0x400178d	        0x48390c24	                    cmp qword [rsp], rcx	      1540	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5
0x4001791	            0x7e6d	                           jle 0x4001800	      1540	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5
0x4001793	          0x4c89f2	                            mov rdx, r14	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x4001796	          0x4889ee	                            mov rsi, rbp	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x4001799	        0x488d7b10	                   lea rdi, [rbx + 0x10]	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x400179d	          0x4829ca	                            sub rdx, rcx	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x40017a0	          0x4829ce	                            sub rsi, rcx	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x40017a3	          0x4d89e8	                             mov r8, r13	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x40017a6	          0x4c89f9	                            mov rcx, r15	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x40017a9	      0x44895c241c	            mov dword [rsp + 0x1c], r11d	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x40017ae	      0x4889442410	             mov qword [rsp + 0x10], rax	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x40017b3	      0xe8b8feffff	          call sym.foldMarkAdjustRecurse	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x40017b8	      0x488b442410	            mov rax, qword [rsp + 0x10] 	      1560	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8
0x40017bd	      0x448b5c241c	           mov r11d, dword [rsp + 0x1c] 	      1560	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8
0x40017c2	          0x4939c6	                            cmp r14, rax	      1560	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8
0x40017c5	     0xf8ce5000000	                            jl 0x40018b0	      1560	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8
0x40017cb	    0x4981ffffffff	                     cmp r15, 0x7fffffff	      1563	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	IF_9
0x40017d2	     0xf8418010000	                            je 0x40018f0	      1563	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	IF_9
0x40017d8	        0x4c017b08	                add qword [rbx + 8], r15	      1566	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	ELSE_5
0x40017dc	        0x4183c301	                             add r11d, 1	      1511	fold.c	FUNCTION_46	FOR_1
0x40017e0	        0x4883c330	                           add rbx, 0x30	      1511	fold.c	FUNCTION_46	FOR_1
0x40017e4	        0x45391c24	                   cmp dword [r12], r11d	      1511	fold.c	FUNCTION_46	FOR_1
0x40017e8	            0x7f8b	                            jg 0x4001775	      1511	fold.c	FUNCTION_46	FOR_1
0x40017ea	        0x4883c428	                           add rsp, 0x28	      1602	fold.c	FUNCTION_46
0x40017ee	              0x5b	                                 pop rbx	      1602	fold.c	FUNCTION_46
0x40017ef	              0x5d	                                 pop rbp	      1602	fold.c	FUNCTION_46
0x40017f0	            0x415c	                                 pop r12	      1602	fold.c	FUNCTION_46
0x40017f2	            0x415d	                                 pop r13	      1602	fold.c	FUNCTION_46
0x40017f4	            0x415e	                                 pop r14	      1602	fold.c	FUNCTION_46
0x40017f6	            0x415f	                                 pop r15	      1602	fold.c	FUNCTION_46
0x40017f8	              0xc3	                                     ret	      1602	fold.c	FUNCTION_46
0x40017f9	     0xf1f80000000	                         nop dword [rax]	      1602	fold.c	FUNCTION_46
0x4001800	          0x4939c6	                            cmp r14, rax	      1540	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5
0x4001803	            0x7c1b	                            jl 0x4001820	      1540	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5
0x4001805	    0x4981ffffffff	                     cmp r15, 0x7fffffff	      1543	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6
0x400180c	     0xf84b7000000	                            je 0x40018c9	      1543	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6
0x4001812	          0x4c01f9	                            add rcx, r15	      1551	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	ELSE_3
0x4001815	          0x48890b	                    mov qword [rbx], rcx	      1551	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	ELSE_3
0x4001818	      0xe94affffff	                           jmp 0x4001767	      1551	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	ELSE_3
0x400181d	           0xf1f00	                         nop dword [rax]	      1551	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	ELSE_3
0x4001820	    0x4981ffffffff	                     cmp r15, 0x7fffffff	      1578	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x4001827	      0x44895c2410	            mov dword [rsp + 0x10], r11d	      1578	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x400182c	            0x743a	                            je 0x4001868	      1578	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x400182e	      0x4c8b442408	                 mov r8, qword [rsp + 8]	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x4001833	          0x4c89f2	                            mov rdx, r14	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x4001836	          0x4889ee	                            mov rsi, rbp	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x4001839	        0x488d7b10	                   lea rdi, [rbx + 0x10]	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x400183d	          0x4829ca	                            sub rdx, rcx	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x4001840	          0x4829ce	                            sub rsi, rcx	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x4001843	          0x4c89f9	                            mov rcx, r15	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x4001846	      0xe825feffff	          call sym.foldMarkAdjustRecurse	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x400184b	      0x488b442408	                mov rax, qword [rsp + 8]	      1595	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x4001850	          0x4c013b	                    add qword [rbx], r15	      1596	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x4001853	        0x48014308	                add qword [rbx + 8], rax	      1595	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x4001857	      0x448b5c2410	           mov r11d, dword [rsp + 0x10] 	      1596	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x400185c	      0xe906ffffff	                           jmp 0x4001767	      1596	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x4001861	     0xf1f80000000	                         nop dword [rax]	      1596	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x4001868	          0x4889c8	                            mov rax, rcx	      1580	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10	CALL_4
0x400186b	        0x482b0424	                    sub rax, qword [rsp]	      1580	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10	CALL_4
0x400186f	          0x4c89f2	                            mov rdx, r14	      1580	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10	CALL_4
0x4001872	          0x4889ee	                            mov rsi, rbp	      1580	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10	CALL_4
0x4001875	        0x488d7b10	                   lea rdi, [rbx + 0x10]	      1580	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10	CALL_4
0x4001879	          0x4829ca	                            sub rdx, rcx	      1580	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10	CALL_4
0x400187c	          0x4829ce	                            sub rsi, rcx	      1580	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10	CALL_4
0x400187f	      0xb9ffffff7f	                     mov ecx, 0x7fffffff	      1580	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10	CALL_4
0x4001884	        0x4e8d0428	                     lea r8, [rax + r13]	      1580	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10	CALL_4
0x4001888	      0xe8e3fdffff	          call sym.foldMarkAdjustRecurse	      1580	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10	CALL_4
0x400188d	          0x4c89f0	                            mov rax, r14	      1585	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x4001890	          0x482b03	                    sub rax, qword [rbx]	      1585	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x4001893	      0x448b5c2410	           mov r11d, dword [rsp + 0x10] 	      1585	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x4001898	          0x48892b	                    mov qword [rbx], rbp	      1586	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x400189b	        0x4883c001	                              add rax, 1	      1585	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x400189f	        0x48294308	                sub qword [rbx + 8], rax	      1585	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x40018a3	      0xe9bffeffff	                           jmp 0x4001767	      1585	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x40018a8	     0xf1f84000000	                   nop dword [rax + rax]	      1585	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x40018b0	        0x4c016b08	                add qword [rbx + 8], r13	      1571	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	ELSE_5	ELSE_6
0x40018b4	      0xe9aefeffff	                           jmp 0x4001767	      1571	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	ELSE_5	ELSE_6
0x40018b9	     0xf1f80000000	                         nop dword [rax]	      1571	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	ELSE_5	ELSE_6
0x40018c0	        0x48892c24	                    mov qword [rsp], rbp	      1571	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	ELSE_5	ELSE_6
0x40018c4	      0xe9f0fdffff	                           jmp 0x40016b9	      1571	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	ELSE_5	ELSE_6
0x40018c9	          0x4489de	                           mov esi, r11d	      1546	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6	CALL_2
0x40018cc	      0xba01000000	                              mov edx, 1	      1546	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6	CALL_2
0x40018d1	          0x4c89e7	                            mov rdi, r12	      1546	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6	CALL_2
0x40018d4	      0x44895c2410	            mov dword [rsp + 0x10], r11d	      1546	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6	CALL_2
0x40018d9	        0x4883eb30	                           sub rbx, 0x30	      1548	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6
0x40018dd	      0xe82efcffff	                call sym.deleteFoldEntry	      1546	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6	CALL_2
0x40018e2	      0x448b5c2410	           mov r11d, dword [rsp + 0x10] 	      1547	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6
0x40018e7	        0x4183eb01	                             sub r11d, 1	      1547	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6
0x40018eb	      0xe977feffff	                           jmp 0x4001767	      1547	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6
0x40018f0	          0x4889e8	                            mov rax, rbp	      1564	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	IF_9
0x40018f3	          0x482b03	                    sub rax, qword [rbx]	      1564	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	IF_9
0x40018f6	        0x48894308	                mov qword [rbx + 8], rax	      1564	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	IF_9
0x40018fa	      0xe968feffff	                           jmp 0x4001767	      1564	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	IF_9
0x40018ff	            0x31db	                            xor ebx, ebx	      1133	fold.c	FUNCTION_36	WHILE_1
0x4001901	      0xe91bfeffff	                           jmp 0x4001721	      1133	fold.c	FUNCTION_36	WHILE_1
foldMoveTo	FOR,2:functions,0:IF,20:ELSE,5:CALL,4:DO,0:SWITCH,0:WHILE,0	179
0x4004390	            0x4157	                                push r15	       867	fold.c	FUNCTION_30
0x4004392	            0x4156	                                push r14	       867	fold.c	FUNCTION_30
0x4004394	          0x4189ff	                           mov r15d, edi	       867	fold.c	FUNCTION_30
0x4004397	            0x4155	                                push r13	       867	fold.c	FUNCTION_30
0x4004399	            0x4154	                                push r12	       867	fold.c	FUNCTION_30
0x400439b	              0x55	                                push rbp	       867	fold.c	FUNCTION_30
0x400439c	              0x53	                                push rbx	       867	fold.c	FUNCTION_30
0x400439d	        0x4883ec38	                           sub rsp, 0x38	       867	fold.c	FUNCTION_30
0x40043a1	    0x488b3d000000	            mov rdi, qword [0x040043a8] 	       880	fold.c	FUNCTION_30	CALL_1
0x40043a8	    0x64488b042528	                mov rax, qword fs:[0x28]	       867	fold.c	FUNCTION_30
0x40043b1	      0x4889442428	             mov qword [rsp + 0x28], rax	       867	fold.c	FUNCTION_30
0x40043b6	            0x31c0	                            xor eax, eax	       867	fold.c	FUNCTION_30
0x40043b8	        0x89742410	             mov dword [rsp + 0x10], esi	       867	fold.c	FUNCTION_30
0x40043bc	      0x4889542418	             mov qword [rsp + 0x18], rdx	       867	fold.c	FUNCTION_30
0x40043c1	    0x80bf21010000	               cmp byte [rdi + 0x121], 0	      1187	fold.c	FUNCTION_38	IF_1
0x40043c8	            0x7405	                            je 0x40043cf	      1187	fold.c	FUNCTION_38	IF_1
0x40043ca	      0xe8a1edffff	            call sym.checkupdate.part.17	      1187	fold.c	FUNCTION_38	IF_1
0x40043cf	    0x48837c241800	               cmp qword [rsp + 0x18], 0	       883	fold.c	FUNCTION_30	FOR_1
0x40043d5	     0xf8e92020000	                           jle 0x400466d	       883	fold.c	FUNCTION_30	FOR_1
0x40043db	    0x488b3d000000	            mov rdi, qword [0x040043e2] 	       883	fold.c	FUNCTION_30	FOR_1
0x40043e2	    0xc74424140000	               mov dword [rsp + 0x14], 0	       883	fold.c	FUNCTION_30	FOR_1
0x40043ea	    0x48c744240800	                  mov qword [rsp + 8], 0	       883	fold.c	FUNCTION_30	FOR_1
0x40043f3	        0x4c8b7738	            mov r14, qword [rdi + 0x38] 	       883	fold.c	FUNCTION_30	FOR_1
0x40043f7	    0x4c8da7080100	                  lea r12, [rdi + 0x108]	       888	fold.c	FUNCTION_30	FOR_1
0x40043fe	    0xc74424200000	               mov dword [rsp + 0x20], 0	       889	fold.c	FUNCTION_30	FOR_1
0x4004406	    0xc74424240000	               mov dword [rsp + 0x24], 0	       890	fold.c	FUNCTION_30	FOR_1
0x400440e	          0x4d89f3	                            mov r11, r14	       890	fold.c	FUNCTION_30	FOR_1
0x4004411	          0x4531ed	                          xor r13d, r13d	       892	fold.c	FUNCTION_30	FOR_1
0x4004414	            0x31ed	                            xor ebp, ebp	       887	fold.c	FUNCTION_30	FOR_1
0x4004416	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       887	fold.c	FUNCTION_30	FOR_1
0x4004420	        0x4d631424	                 movsxd r10, dword [r12]	       887	fold.c	FUNCTION_30	FOR_1
0x4004424	          0x4d89d8	                             mov r8, r11	       896	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	CALL_2
0x4004427	      0x4d8b4c2410	              mov r9, qword [r12 + 0x10]	       896	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	CALL_2
0x400442c	          0x4929e8	                             sub r8, rbp	       896	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	CALL_2
0x400442f	        0x418d4aff	                      lea ecx, [r10 - 1]	      1132	fold.c	FUNCTION_36
0x4004433	          0x4863c9	                         movsxd rcx, ecx	      1132	fold.c	FUNCTION_36
0x4004436	          0x4885c9	                           test rcx, rcx	      1133	fold.c	FUNCTION_36	WHILE_1
0x4004439	     0xf8806020000	                            js 0x4004645	      1133	fold.c	FUNCTION_36	WHILE_1
0x400443f	            0x31d2	                            xor edx, edx	      1133	fold.c	FUNCTION_36	WHILE_1
0x4004441	            0xeb10	                           jmp 0x4004453	      1133	fold.c	FUNCTION_36	WHILE_1
0x4004443	       0xf1f440000	                   nop dword [rax + rax]	      1133	fold.c	FUNCTION_36	WHILE_1
0x4004448	          0x83e801	                              sub eax, 1	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x400444b	          0x4863c8	                         movsxd rcx, eax	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x400444e	          0x4839ca	                            cmp rdx, rcx	      1133	fold.c	FUNCTION_36	WHILE_1
0x4004451	            0x7f2e	                            jg 0x4004481	      1133	fold.c	FUNCTION_36	WHILE_1
0x4004453	        0x488d0411	                    lea rax, [rcx + rdx]	      1135	fold.c	FUNCTION_36	WHILE_1
0x4004457	          0x48d1f8	                              sar rax, 1	      1135	fold.c	FUNCTION_36	WHILE_1
0x400445a	        0x488d1c40	                  lea rbx, [rax + rax*2]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x400445e	        0x48c1e304	                              shl rbx, 4	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4004462	          0x4c01cb	                             add rbx, r9	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4004465	          0x488b33	                    mov rsi, qword [rbx]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4004468	          0x4939f0	                             cmp r8, rsi	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x400446b	            0x7cdb	                            jl 0x4004448	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x400446d	        0x48037308	                add rsi, qword [rbx + 8]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4004471	          0x4939f0	                             cmp r8, rsi	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4004474	            0x7c72	                            jl 0x40044e8	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4004476	          0x83c001	                              add eax, 1	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4004479	          0x4863d0	                         movsxd rdx, eax	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x400447c	          0x4839ca	                            cmp rdx, rcx	      1133	fold.c	FUNCTION_36	WHILE_1
0x400447f	            0x7ed2	                           jle 0x4004453	      1133	fold.c	FUNCTION_36	WHILE_1
0x4004481	        0x488d0452	                  lea rax, [rdx + rdx*2]	      1133	fold.c	FUNCTION_36	WHILE_1
0x4004485	        0x48c1e004	                              shl rax, 4	      1133	fold.c	FUNCTION_36	WHILE_1
0x4004489	          0x4585ff	                         test r15d, r15d	       898	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_2
0x400448c	     0xf84d7000000	                            je 0x4004569	       898	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_2
0x4004492	      0x837c241001	               cmp dword [rsp + 0x10], 1	       903	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3
0x4004497	        0x498d1c01	                     lea rbx, [r9 + rax]	      1149	fold.c	FUNCTION_36
0x400449b	     0xf845c010000	                            je 0x40045fd	       903	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3
0x40044a1	          0x4939d9	                             cmp r9, rbx	       911	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	ELSE_1	IF_5
0x40044a4	     0xf84bf000000	                            je 0x4004569	       911	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	ELSE_1	IF_5
0x40044aa	      0xba01000000	                              mov edx, 1	       911	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	ELSE_1	IF_5
0x40044af	          0x4c39cb	                             cmp rbx, r9	       946	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x40044b2	            0x7616	                           jbe 0x40044ca	       946	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x40044b4	          0x4889e8	                            mov rax, rbp	       948	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x40044b7	        0x480343d0	             add rax, qword [rbx - 0x30]	       948	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x40044bb	        0x480343d8	             add rax, qword [rbx - 0x28]	       948	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x40044bf	        0x4883e801	                              sub rax, 1	       948	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x40044c3	          0x4c39d8	                            cmp rax, r11	       948	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x40044c6	        0x4c0f4cf0	                          cmovl r14, rax	       948	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x40044ca	            0x85d2	                           test edx, edx	       972	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_18
0x40044cc	     0xf8597000000	                           jne 0x4004569	       972	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_18
0x40044d2	        0x4c8d6310	                   lea r12, [rbx + 0x10]	       976	fold.c	FUNCTION_30	FOR_1	FOR_2
0x40044d6	          0x48032b	                    add rbp, qword [rbx]	       977	fold.c	FUNCTION_30	FOR_1	FOR_2
0x40044d9	        0x4183c501	                             add r13d, 1	       978	fold.c	FUNCTION_30	FOR_1	FOR_2
0x40044dd	      0xe93effffff	                           jmp 0x4004420	       979	fold.c	FUNCTION_30	FOR_1	FOR_2
0x40044e2	    0x660f1f440000	                    nop word [rax + rax]	       979	fold.c	FUNCTION_30	FOR_1	FOR_2
0x40044e8	      0x4c8d442424	                    lea r8, [rsp + 0x24]	       922	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_7	CALL_3
0x40044ed	      0x488d542420	                   lea rdx, [rsp + 0x20]	       922	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_7	CALL_3
0x40044f2	          0x4989e9	                             mov r9, rbp	       922	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_7	CALL_3
0x40044f5	          0x4489e9	                           mov ecx, r13d	       922	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_7	CALL_3
0x40044f8	          0x4889de	                            mov rsi, rbx	       922	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_7	CALL_3
0x40044fb	      0xe8c0bbffff	                   call sym.check_closed	       922	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_7	CALL_3
0x4004500	            0x85c0	                           test eax, eax	       922	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_7	CALL_3
0x4004502	     0xf84c8000000	                            je 0x40045d0	       922	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_7	CALL_3
0x4004508	          0x4585ff	                         test r15d, r15d	       927	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_8
0x400450b	     0xf844c010000	                            je 0x400465d	       927	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_8
0x4004511	      0xba01000000	                              mov edx, 1	       924	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_7
0x4004516	      0x837c241001	               cmp dword [rsp + 0x10], 1	       933	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10
0x400451b	    0x488b3d000000	            mov rdi, qword [0x04004522] 	       933	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10
0x4004522	      0x4d8b4c2410	              mov r9, qword [r12 + 0x10]	       933	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10
0x4004527	        0x4c8b5f38	            mov r11, qword [rdi + 0x38] 	       933	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10
0x400452b	            0x7582	                           jne 0x40044af	       933	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10
0x400452d	        0x488d4330	                   lea rax, [rbx + 0x30]	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x4004531	    0x48b9abaaaaaa	          movabs rcx, 0xaaaaaaaaaaaaaaab	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x400453b	          0x4c29c8	                             sub rax, r9	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x400453e	        0x48c1f804	                              sar rax, 4	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x4004542	        0x480fafc1	                           imul rax, rcx	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x4004546	        0x49630c24	                 movsxd rcx, dword [r12]	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x400454a	          0x4839c8	                            cmp rax, rcx	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x400454d	     0xf8d77ffffff	                           jge 0x40044ca	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x4004553	          0x4889e8	                            mov rax, rbp	       938	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x4004556	        0x48034330	             add rax, qword [rbx + 0x30]	       938	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x400455a	          0x4c39d8	                            cmp rax, r11	       938	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x400455d	        0x4c0f4ff0	                          cmovg r14, rax	       938	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x4004561	            0x85d2	                           test edx, edx	       972	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_18
0x4004563	     0xf8469ffffff	                            je 0x40044d2	       972	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_18
0x4004569	          0x4d39de	                            cmp r14, r11	       980	fold.c	FUNCTION_30	FOR_1	IF_19
0x400456c	            0x7435	                            je 0x40045a3	       980	fold.c	FUNCTION_30	FOR_1	IF_19
0x400456e	        0x8b442414	            mov eax, dword [rsp + 0x14] 	       982	fold.c	FUNCTION_30	FOR_1	IF_19	IF_20
0x4004572	            0x85c0	                           test eax, eax	       982	fold.c	FUNCTION_30	FOR_1	IF_19	IF_20
0x4004574	     0xf84d2000000	                            je 0x400464c	       982	fold.c	FUNCTION_30	FOR_1	IF_19	IF_20
0x400457a	    0x488344240801	                  add qword [rsp + 8], 1	       883	fold.c	FUNCTION_30	FOR_1
0x4004580	        0x4c897738	             mov qword [rdi + 0x38], r14	       984	fold.c	FUNCTION_30	FOR_1	IF_19
0x4004584	      0x488b442408	                mov rax, qword [rsp + 8]	       883	fold.c	FUNCTION_30	FOR_1
0x4004589	      0x4839442418	            cmp qword [rsp + 0x18], rax 	       883	fold.c	FUNCTION_30	FOR_1
0x400458e	    0xc74740000000	               mov dword [rdi + 0x40], 0	       985	fold.c	FUNCTION_30	FOR_1	IF_19
0x4004595	    0xc74424140100	               mov dword [rsp + 0x14], 1	       986	fold.c	FUNCTION_30	FOR_1	IF_19
0x400459d	     0xf8554feffff	                           jne 0x40043f7	       883	fold.c	FUNCTION_30	FOR_1
0x40045a3	      0x488b7c2428	            mov rdi, qword [rsp + 0x28] 	       993	fold.c	FUNCTION_30	ELSE_5
0x40045a8	    0x6448333c2528	                xor rdi, qword fs:[0x28]	       993	fold.c	FUNCTION_30	ELSE_5
0x40045b1	        0x8b442414	            mov eax, dword [rsp + 0x14] 	       993	fold.c	FUNCTION_30	ELSE_5
0x40045b5	     0xf85bf000000	                           jne 0x400467a	       993	fold.c	FUNCTION_30	ELSE_5
0x40045bb	        0x4883c438	                           add rsp, 0x38	       993	fold.c	FUNCTION_30	ELSE_5
0x40045bf	              0x5b	                                 pop rbx	       993	fold.c	FUNCTION_30	ELSE_5
0x40045c0	              0x5d	                                 pop rbp	       993	fold.c	FUNCTION_30	ELSE_5
0x40045c1	            0x415c	                                 pop r12	       993	fold.c	FUNCTION_30	ELSE_5
0x40045c3	            0x415d	                                 pop r13	       993	fold.c	FUNCTION_30	ELSE_5
0x40045c5	            0x415e	                                 pop r14	       993	fold.c	FUNCTION_30	ELSE_5
0x40045c7	            0x415f	                                 pop r15	       993	fold.c	FUNCTION_30	ELSE_5
0x40045c9	              0xc3	                                     ret	       993	fold.c	FUNCTION_30	ELSE_5
0x40045ca	    0x660f1f440000	                    nop word [rax + rax]	       993	fold.c	FUNCTION_30	ELSE_5
0x40045d0	          0x4585ff	                         test r15d, r15d	       931	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9
0x40045d3	     0xf85a6000000	                           jne 0x400467f	       931	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9
0x40045d9	          0x4889e8	                            mov rax, rbp	       960	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x40045dc	          0x480303	                    add rax, qword [rbx]	       960	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x40045df	      0x837c241001	               cmp dword [rsp + 0x10], 1	       958	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x40045e4	            0x7440	                            je 0x4004626	       958	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x40045e6	    0x488b3d000000	            mov rdi, qword [0x040045ed] 	       967	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	ELSE_4	IF_17
0x40045ed	        0x4c8b5f38	            mov r11, qword [rdi + 0x38] 	       967	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	ELSE_4	IF_17
0x40045f1	          0x4c39d8	                            cmp rax, r11	       967	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	ELSE_4	IF_17
0x40045f4	        0x4c0f4cf0	                          cmovl r14, rax	       967	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	ELSE_4	IF_17
0x40045f8	      0xe9d5feffff	                           jmp 0x40044d2	       967	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	ELSE_4	IF_17
0x40045fd	        0x48c1f804	                              sar rax, 4	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x4004601	    0x48b9abaaaaaa	          movabs rcx, 0xaaaaaaaaaaaaaaab	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x400460b	        0x480fafc1	                           imul rax, rcx	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x400460f	          0x4c39d0	                            cmp rax, r10	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x4004612	     0xf8d51ffffff	                           jge 0x4004569	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x4004618	        0x4883eb30	                           sub rbx, 0x30	       907	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3
0x400461c	      0xba01000000	                              mov edx, 1	       907	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3
0x4004621	      0xe907ffffff	                           jmp 0x400452d	       907	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3
0x4004626	    0x488b3d000000	            mov rdi, qword [0x0400462d] 	       961	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15	IF_16
0x400462d	        0x48034308	                add rax, qword [rbx + 8]	       960	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x4004631	        0x4c8b5f38	            mov r11, qword [rdi + 0x38] 	       961	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15	IF_16
0x4004635	        0x4883e801	                              sub rax, 1	       960	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x4004639	          0x4c39d8	                            cmp rax, r11	       960	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x400463c	        0x4c0f4ff0	                          cmovg r14, rax	       960	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x4004640	      0xe98dfeffff	                           jmp 0x40044d2	       960	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x4004645	            0x31c0	                            xor eax, eax	      1133	fold.c	FUNCTION_36	WHILE_1
0x4004647	      0xe93dfeffff	                           jmp 0x4004489	      1133	fold.c	FUNCTION_36	WHILE_1
0x400464c	      0xe800000000	                          call 0x4004651	       983	fold.c	FUNCTION_30	FOR_1	IF_19	CALL_4
0x4004651	    0x488b3d000000	            mov rdi, qword [0x04004658] 	       983	fold.c	FUNCTION_30	FOR_1	IF_19	CALL_4
0x4004658	      0xe91dffffff	                           jmp 0x400457a	       983	fold.c	FUNCTION_30	FOR_1	IF_19	CALL_4
0x400465d	    0x488b3d000000	            mov rdi, qword [0x04004664] 	       983	fold.c	FUNCTION_30	FOR_1	IF_19	CALL_4
0x4004664	        0x4c8b5f38	            mov r11, qword [rdi + 0x38] 	       983	fold.c	FUNCTION_30	FOR_1	IF_19	CALL_4
0x4004668	      0xe9fcfeffff	                           jmp 0x4004569	       983	fold.c	FUNCTION_30	FOR_1	IF_19	CALL_4
0x400466d	    0xc74424140000	               mov dword [rsp + 0x14], 0	       883	fold.c	FUNCTION_30	FOR_1
0x4004675	      0xe929ffffff	                           jmp 0x40045a3	       883	fold.c	FUNCTION_30	FOR_1
0x400467a	      0xe800000000	                          call 0x400467f	       993	fold.c	FUNCTION_30	ELSE_5
0x400467f	            0x31d2	                            xor edx, edx	       993	fold.c	FUNCTION_30	ELSE_5
0x4004681	      0xe990feffff	                           jmp 0x4004516	       993	fold.c	FUNCTION_30	ELSE_5
foldedCount	FOR,0:functions,0:IF,1:ELSE,0:CALL,1:DO,0:SWITCH,0:WHILE,0	25
0x4003600	              0x53	                                push rbx	       292	fold.c	FUNCTION_7
0x4003601	          0x4989d1	                             mov r9, rdx	       292	fold.c	FUNCTION_7
0x4003604	          0x4531c0	                            xor r8d, r8d	       295	fold.c	FUNCTION_7	IF_1	CALL_1
0x4003607	            0x31d2	                            xor edx, edx	       295	fold.c	FUNCTION_7	IF_1	CALL_1
0x4003609	          0x4889f3	                            mov rbx, rsi	       292	fold.c	FUNCTION_7
0x400360c	        0x4883ec10	                           sub rsp, 0x10	       292	fold.c	FUNCTION_7
0x4003610	          0x4889e1	                            mov rcx, rsp	       295	fold.c	FUNCTION_7	IF_1	CALL_1
0x4003613	    0x64488b042528	                mov rax, qword fs:[0x28]	       292	fold.c	FUNCTION_7
0x400361c	      0x4889442408	                mov qword [rsp + 8], rax	       292	fold.c	FUNCTION_7
0x4003621	            0x31c0	                            xor eax, eax	       292	fold.c	FUNCTION_7
0x4003623	      0xe800000000	                          call 0x4003628	       295	fold.c	FUNCTION_7	IF_1	CALL_1
0x4003628	            0x31d2	                            xor edx, edx	       295	fold.c	FUNCTION_7	IF_1	CALL_1
0x400362a	            0x85c0	                           test eax, eax	       295	fold.c	FUNCTION_7	IF_1	CALL_1
0x400362c	            0x740b	                            je 0x4003639	       295	fold.c	FUNCTION_7	IF_1	CALL_1
0x400362e	        0x488b1424	                    mov rdx, qword [rsp]	       296	fold.c	FUNCTION_7	IF_1
0x4003632	          0x4829da	                            sub rdx, rbx	       296	fold.c	FUNCTION_7	IF_1
0x4003635	        0x4883c201	                              add rdx, 1	       296	fold.c	FUNCTION_7	IF_1
0x4003639	      0x488b4c2408	                mov rcx, qword [rsp + 8]	       298	fold.c	FUNCTION_7
0x400363e	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       298	fold.c	FUNCTION_7
0x4003647	          0x4889d0	                            mov rax, rdx	       298	fold.c	FUNCTION_7
0x400364a	            0x7506	                           jne 0x4003652	       298	fold.c	FUNCTION_7
0x400364c	        0x4883c410	                           add rsp, 0x10	       298	fold.c	FUNCTION_7
0x4003650	              0x5b	                                 pop rbx	       298	fold.c	FUNCTION_7
0x4003651	              0xc3	                                     ret	       298	fold.c	FUNCTION_7
0x4003652	      0xe800000000	                          call 0x4003657	       298	fold.c	FUNCTION_7
foldManualAllowed	FOR,0:functions,0:IF,2:ELSE,1:CALL,6:DO,0:SWITCH,0:WHILE,0	22
0x40012f0	    0x488b05000000	            mov rax, qword [0x040012f7] 	       307	fold.c	FUNCTION_8
0x40012f7	    0x488b80f80100	           mov rax, qword [rax + 0x1f8] 	       307	fold.c	FUNCTION_8
0x40012fe	        0x80780375	                cmp byte [rax + 3], 0x75	       560	fold.c	FUNCTION_24	IF_1	CALL_2
0x4001302	            0x743c	                            je 0x4001340	       560	fold.c	FUNCTION_24	IF_1	CALL_2
0x4001304	        0x80780272	                cmp byte [rax + 2], 0x72	       560	fold.c	FUNCTION_24	IF_1	CALL_2
0x4001308	            0x7436	                            je 0x4001340	       560	fold.c	FUNCTION_24	IF_1	CALL_2
0x400130a	        0x4883ec08	                              sub rsp, 8	       559	fold.c	FUNCTION_24
0x400130e	            0x85ff	                           test edi, edi	       562	fold.c	FUNCTION_24	IF_2
0x4001310	      0xba05000000	                              mov edx, 5	       563	fold.c	FUNCTION_24	CALL_4
0x4001315	      0xbe00000000	                              mov esi, 0	       563	fold.c	FUNCTION_24	CALL_4
0x400131a	            0x7505	                           jne 0x4001321	       562	fold.c	FUNCTION_24	IF_2
0x400131c	      0xbe00000000	                              mov esi, 0	       565	fold.c	FUNCTION_24	CALL_6
0x4001321	            0x31ff	                            xor edi, edi	       565	fold.c	FUNCTION_24	CALL_6
0x4001323	      0xe800000000	                          call 0x4001328	       565	fold.c	FUNCTION_24	CALL_6
0x4001328	          0x4889c7	                            mov rdi, rax	       565	fold.c	FUNCTION_24	CALL_6
0x400132b	      0xe800000000	                          call 0x4001330	       565	fold.c	FUNCTION_24	CALL_6
0x4001330	            0x31c0	                            xor eax, eax	       566	fold.c	FUNCTION_24
0x4001332	        0x4883c408	                              add rsp, 8	       567	fold.c	FUNCTION_24
0x4001336	              0xc3	                                     ret	       567	fold.c	FUNCTION_24
0x4001337	    0x660f1f840000	                    nop word [rax + rax]	       567	fold.c	FUNCTION_24
0x4001340	      0xb801000000	                              mov eax, 1	       561	fold.c	FUNCTION_24	IF_1
0x4001345	              0xc3	                                     ret	       561	fold.c	FUNCTION_24	IF_1
getDeepestNesting	FOR,0:functions,0:IF,0:ELSE,0:CALL,2:DO,0:SWITCH,0:WHILE,0	10
0x4004a00	        0x4883ec08	                              sub rsp, 8	      1611	fold.c	FUNCTION_47
0x4004a04	    0x488b3d000000	            mov rdi, qword [0x04004a0b] 	      1612	fold.c	FUNCTION_47	CALL_1
0x4004a0b	    0x80bf21010000	               cmp byte [rdi + 0x121], 0	      1187	fold.c	FUNCTION_38	IF_1
0x4004a12	            0x740c	                            je 0x4004a20	      1187	fold.c	FUNCTION_38	IF_1
0x4004a14	      0xe857e7ffff	            call sym.checkupdate.part.17	      1187	fold.c	FUNCTION_38	IF_1
0x4004a19	    0x488b3d000000	            mov rdi, qword [0x04004a20] 	      1187	fold.c	FUNCTION_38	IF_1
0x4004a20	    0x488bb7180100	           mov rsi, qword [rdi + 0x118] 	      1613	fold.c	FUNCTION_47	CALL_2
0x4004a27	    0x4881c7080100	                          add rdi, 0x108	      1613	fold.c	FUNCTION_47	CALL_2
0x4004a2e	        0x4883c408	                              add rsp, 8	      1614	fold.c	FUNCTION_47
0x4004a32	      0xe959c1ffff	 jmp sym.getDeepestNestingRecurse.isra.3	      1613	fold.c	FUNCTION_47	CALL_2
foldMerge	FOR,1:functions,0:IF,2:ELSE,0:CALL,5:DO,0:SWITCH,0:WHILE,0	134
0x4001910	            0x4154	                                push r12	      3165	fold.c	FUNCTION_66
0x4001912	              0x55	                                push rbp	      3165	fold.c	FUNCTION_66
0x4001913	          0x4989f4	                            mov r12, rsi	      3165	fold.c	FUNCTION_66
0x4001916	              0x53	                                push rbx	      3165	fold.c	FUNCTION_66
0x4001917	        0x488b4708	                mov rax, qword [rdi + 8]	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x400191b	          0x4889fb	                            mov rbx, rdi	      3165	fold.c	FUNCTION_66
0x400191e	          0x4889d5	                            mov rbp, rdx	      3165	fold.c	FUNCTION_66
0x4001921	        0x4c8b4f20	              mov r9, qword [rdi + 0x20]	      3165	fold.c	FUNCTION_66
0x4001925	        0x4c8d40ff	                       lea r8, [rax - 1]	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x4001929	          0x8b4710	            mov eax, dword [rdi + 0x10] 	      1132	fold.c	FUNCTION_36
0x400192c	          0x83e801	                              sub eax, 1	      1132	fold.c	FUNCTION_36
0x400192f	          0x4863f0	                         movsxd rsi, eax	      1132	fold.c	FUNCTION_36
0x4001932	          0x4885f6	                           test rsi, rsi	      1133	fold.c	FUNCTION_36	WHILE_1
0x4001935	            0x7842	                            js 0x4001979	      1133	fold.c	FUNCTION_36	WHILE_1
0x4001937	            0x31d2	                            xor edx, edx	      1133	fold.c	FUNCTION_36	WHILE_1
0x4001939	            0xeb10	                           jmp 0x400194b	      1133	fold.c	FUNCTION_36	WHILE_1
0x400193b	       0xf1f440000	                   nop dword [rax + rax]	      1133	fold.c	FUNCTION_36	WHILE_1
0x4001940	          0x83e801	                              sub eax, 1	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4001943	          0x4863f0	                         movsxd rsi, eax	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4001946	          0x4839f2	                            cmp rdx, rsi	      1133	fold.c	FUNCTION_36	WHILE_1
0x4001949	            0x7f2e	                            jg 0x4001979	      1133	fold.c	FUNCTION_36	WHILE_1
0x400194b	        0x488d0416	                    lea rax, [rsi + rdx]	      1135	fold.c	FUNCTION_36	WHILE_1
0x400194f	          0x48d1f8	                              sar rax, 1	      1135	fold.c	FUNCTION_36	WHILE_1
0x4001952	        0x488d3c40	                  lea rdi, [rax + rax*2]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4001956	        0x48c1e704	                              shl rdi, 4	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x400195a	          0x4c01cf	                             add rdi, r9	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x400195d	          0x488b0f	                    mov rcx, qword [rdi]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4001960	          0x4939c8	                             cmp r8, rcx	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4001963	            0x7cdb	                            jl 0x4001940	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4001965	        0x48034f08	                add rcx, qword [rdi + 8]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001969	          0x4939c8	                             cmp r8, rcx	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x400196c	            0x7c6a	                            jl 0x40019d8	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x400196e	          0x8d5001	                      lea edx, [rax + 1]	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001971	          0x4863d2	                         movsxd rdx, edx	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001974	          0x4839f2	                            cmp rdx, rsi	      1133	fold.c	FUNCTION_36	WHILE_1
0x4001977	            0x7ed2	                           jle 0x400194b	      1133	fold.c	FUNCTION_36	WHILE_1
0x4001979	          0x8b7510	            mov esi, dword [rbp + 0x10] 	      1133	fold.c	FUNCTION_36	WHILE_1
0x400197c	            0x85f6	                           test esi, esi	      3178	fold.c	FUNCTION_66	IF_2	CALL_4
0x400197e	            0x7e12	                           jle 0x4001992	      3178	fold.c	FUNCTION_66	IF_2	CALL_4
0x4001980	        0x488d7b10	                   lea rdi, [rbx + 0x10]	      3169	fold.c	FUNCTION_66
0x4001984	      0xe800000000	                          call 0x4001989	      3178	fold.c	FUNCTION_66	IF_2	CALL_4
0x4001989	          0x83f801	                              cmp eax, 1	      3178	fold.c	FUNCTION_66	IF_2	CALL_4
0x400198c	     0xf849e000000	                            je 0x4001a30	      3178	fold.c	FUNCTION_66	IF_2	CALL_4
0x4001992	        0x488b4308	                mov rax, qword [rbx + 8]	      3178	fold.c	FUNCTION_66	IF_2	CALL_4
0x4001996	        0x48034508	                add rax, qword [rbp + 8]	      3190	fold.c	FUNCTION_66
0x400199a	          0x4889ee	                            mov rsi, rbp	      3191	fold.c	FUNCTION_66	CALL_5
0x400199d	      0x492b742410	             sub rsi, qword [r12 + 0x10]	      3191	fold.c	FUNCTION_66	CALL_5
0x40019a2	          0x4c89e7	                            mov rdi, r12	      3191	fold.c	FUNCTION_66	CALL_5
0x40019a5	      0xba01000000	                              mov edx, 1	      3191	fold.c	FUNCTION_66	CALL_5
0x40019aa	        0x48894308	                mov qword [rbx + 8], rax	      3190	fold.c	FUNCTION_66
0x40019ae	        0x48c1fe04	                              sar rsi, 4	      3191	fold.c	FUNCTION_66	CALL_5
0x40019b2	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	      3191	fold.c	FUNCTION_66	CALL_5
0x40019bc	        0x480faff0	                           imul rsi, rax	      3191	fold.c	FUNCTION_66	CALL_5
0x40019c0	      0xe84bfbffff	                call sym.deleteFoldEntry	      3191	fold.c	FUNCTION_66	CALL_5
0x40019c5	              0x5b	                                 pop rbx	      3193	fold.c	FUNCTION_66
0x40019c6	    0xc70500000000	               mov dword [0x040019d0], 1	      3192	fold.c	FUNCTION_66
0x40019d0	              0x5d	                                 pop rbp	      3193	fold.c	FUNCTION_66
0x40019d1	            0x415c	                                 pop r12	      3193	fold.c	FUNCTION_66
0x40019d3	              0xc3	                                     ret	      3193	fold.c	FUNCTION_66
0x40019d4	         0xf1f4000	                         nop dword [rax]	      3193	fold.c	FUNCTION_66
0x40019d8	          0x8b7510	            mov esi, dword [rbp + 0x10] 	      3193	fold.c	FUNCTION_66
0x40019db	            0x31d2	                            xor edx, edx	      1133	fold.c	FUNCTION_36	WHILE_1
0x40019dd	        0x4c8b5520	            mov r10, qword [rbp + 0x20] 	      1133	fold.c	FUNCTION_36	WHILE_1
0x40019e1	          0x8d46ff	                      lea eax, [rsi - 1]	      1132	fold.c	FUNCTION_36
0x40019e4	          0x4c63c0	                          movsxd r8, eax	      1132	fold.c	FUNCTION_36
0x40019e7	          0x4d85c0	                             test r8, r8	      1133	fold.c	FUNCTION_36	WHILE_1
0x40019ea	            0x790f	                           jns 0x40019fb	      1133	fold.c	FUNCTION_36	WHILE_1
0x40019ec	            0xeb8e	                           jmp 0x400197c	      1133	fold.c	FUNCTION_36	WHILE_1
0x40019ee	            0x6690	                                     nop	      1133	fold.c	FUNCTION_36	WHILE_1
0x40019f0	          0x83e801	                              sub eax, 1	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40019f3	          0x4c63c0	                          movsxd r8, eax	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40019f6	          0x4c39c2	                             cmp rdx, r8	      1133	fold.c	FUNCTION_36	WHILE_1
0x40019f9	            0x7f81	                            jg 0x400197c	      1133	fold.c	FUNCTION_36	WHILE_1
0x40019fb	        0x4a8d0402	                     lea rax, [rdx + r8]	      1135	fold.c	FUNCTION_36	WHILE_1
0x40019ff	          0x48d1f8	                              sar rax, 1	      1135	fold.c	FUNCTION_36	WHILE_1
0x4001a02	        0x488d0c40	                  lea rcx, [rax + rax*2]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4001a06	        0x48c1e104	                              shl rcx, 4	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4001a0a	          0x4c01d1	                            add rcx, r10	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4001a0d	          0x4c8b09	                     mov r9, qword [rcx]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4001a10	          0x4d85c9	                             test r9, r9	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4001a13	            0x7fdb	                            jg 0x40019f0	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4001a15	        0x4c034908	                 add r9, qword [rcx + 8]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001a19	          0x4d85c9	                             test r9, r9	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001a1c	     0xf8faf000000	                            jg 0x4001ad1	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001a22	          0x8d5001	                      lea edx, [rax + 1]	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001a25	          0x4863d2	                         movsxd rdx, edx	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001a28	            0xebcc	                           jmp 0x40019f6	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001a2a	    0x660f1f440000	                    nop word [rax + rax]	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001a30	          0x8b4510	            mov eax, dword [rbp + 0x10] 	      3180	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001a33	            0x85c0	                           test eax, eax	      3180	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001a35	     0xf8ea7000000	                           jle 0x4001ae2	      3180	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001a3b	        0x488b7b20	            mov rdi, qword [rbx + 0x20] 	      3180	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001a3f	          0x8b5310	            mov edx, dword [rbx + 0x10] 	      3180	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001a42	            0x31c9	                            xor ecx, ecx	      3180	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001a44	          0x4531c0	                            xor r8d, r8d	      3180	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001a47	    0x660f1f840000	                    nop word [rax + rax]	      3180	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001a50	          0x4863d2	                         movsxd rdx, edx	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001a53	        0x4183c001	                              add r8d, 1	      3180	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001a57	        0x488d0452	                  lea rax, [rdx + rdx*2]	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001a5b	        0x488b5520	            mov rdx, qword [rbp + 0x20] 	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001a5f	        0x48c1e004	                              shl rax, 4	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001a63	        0x488b340a	              mov rsi, qword [rdx + rcx]	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001a67	          0x4801f8	                            add rax, rdi	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001a6a	          0x488930	                    mov qword [rax], rsi	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001a6d	      0x488b740a08	         mov rsi, qword [rdx + rcx + 8] 	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001a72	        0x48897008	                mov qword [rax + 8], rsi	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001a76	      0x488b740a10	      mov rsi, qword [rdx + rcx + 0x10] 	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001a7b	        0x48897010	             mov qword [rax + 0x10], rsi	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001a7f	      0x488b740a18	      mov rsi, qword [rdx + rcx + 0x18] 	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001a84	        0x48897018	             mov qword [rax + 0x18], rsi	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001a88	      0x488b740a20	      mov rsi, qword [rdx + rcx + 0x20] 	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001a8d	        0x48897020	             mov qword [rax + 0x20], rsi	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001a91	      0x488b540a28	      mov rdx, qword [rdx + rcx + 0x28] 	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001a96	        0x4883c130	                           add rcx, 0x30	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001a9a	        0x48895028	             mov qword [rax + 0x28], rdx	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001a9e	        0x48634310	         movsxd rax, dword [rbx + 0x10] 	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001aa2	        0x488b7b20	            mov rdi, qword [rbx + 0x20] 	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001aa6	        0x488d3440	                  lea rsi, [rax + rax*2]	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001aaa	          0x4889c2	                            mov rdx, rax	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001aad	        0x488b4308	                mov rax, qword [rbx + 8]	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001ab1	          0x83c201	                              add edx, 1	      3185	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001ab4	        0x48c1e604	                              shl rsi, 4	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001ab8	        0x48010437	              add qword [rdi + rsi], rax	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001abc	          0x895310	             mov dword [rbx + 0x10], edx	      3185	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001abf	        0x44394510	            cmp dword [rbp + 0x10], r8d 	      3180	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001ac3	            0x7f8b	                            jg 0x4001a50	      3180	fold.c	FUNCTION_66	IF_2	FOR_1
0x4001ac5	    0xc74510000000	               mov dword [rbp + 0x10], 0	      3187	fold.c	FUNCTION_66	IF_2
0x4001acc	      0xe9c5feffff	                           jmp 0x4001996	      3187	fold.c	FUNCTION_66	IF_2
0x4001ad1	        0x488d7510	                   lea rsi, [rbp + 0x10]	      3170	fold.c	FUNCTION_66
0x4001ad5	          0x4889ca	                            mov rdx, rcx	      3175	fold.c	FUNCTION_66	CALL_3
0x4001ad8	      0xe833feffff	                      call sym.foldMerge	      3175	fold.c	FUNCTION_66	CALL_3
0x4001add	      0xe997feffff	                           jmp 0x4001979	      3175	fold.c	FUNCTION_66	CALL_3
0x4001ae2	        0x488b4308	                mov rax, qword [rbx + 8]	      3175	fold.c	FUNCTION_66	CALL_3
0x4001ae6	            0xebdd	                           jmp 0x4001ac5	      3175	fold.c	FUNCTION_66	CALL_3
opFoldRange	FOR,1:functions,0:IF,4:ELSE,0:CALL,6:DO,0:SWITCH,0:WHILE,0	89
0x4003bc0	            0x4157	                                push r15	       393	fold.c	FUNCTION_16
0x4003bc2	            0x4156	                                push r14	       393	fold.c	FUNCTION_16
0x4003bc4	            0x4155	                                push r13	       393	fold.c	FUNCTION_16
0x4003bc6	            0x4154	                                push r12	       393	fold.c	FUNCTION_16
0x4003bc8	              0x55	                                push rbp	       393	fold.c	FUNCTION_16
0x4003bc9	              0x53	                                push rbx	       393	fold.c	FUNCTION_16
0x4003bca	        0x4883ec38	                           sub rsp, 0x38	       393	fold.c	FUNCTION_16
0x4003bce	    0x64488b042528	                mov rax, qword fs:[0x28]	       393	fold.c	FUNCTION_16
0x4003bd7	      0x4889442428	             mov qword [rsp + 0x28], rax	       393	fold.c	FUNCTION_16
0x4003bdc	            0x31c0	                            xor eax, eax	       393	fold.c	FUNCTION_16
0x4003bde	          0x4839f7	                            cmp rdi, rsi	       398	fold.c	FUNCTION_16	FOR_1
0x4003be1	      0x448944240c	              mov dword [rsp + 0xc], r8d	       393	fold.c	FUNCTION_16
0x4003be6	    0xc744241c0000	               mov dword [rsp + 0x1c], 0	       394	fold.c	FUNCTION_16
0x4003bee	     0xf8fec000000	                            jg 0x4003ce0	       398	fold.c	FUNCTION_16	FOR_1
0x4003bf4	            0x85d2	                           test edx, edx	       398	fold.c	FUNCTION_16	FOR_1
0x4003bf6	          0x4189d6	                           mov r14d, edx	       398	fold.c	FUNCTION_16	FOR_1
0x4003bf9	          0x4989ff	                            mov r15, rdi	       398	fold.c	FUNCTION_16	FOR_1
0x4003bfc	        0x410f95c4	                              setne r12b	       398	fold.c	FUNCTION_16	FOR_1
0x4003c00	            0x85c9	                           test ecx, ecx	       398	fold.c	FUNCTION_16	FOR_1
0x4003c02	          0x4989f5	                            mov r13, rsi	       398	fold.c	FUNCTION_16	FOR_1
0x4003c05	           0xf94c0	                                 sete al	       398	fold.c	FUNCTION_16	FOR_1
0x4003c08	            0x89d5	                            mov ebp, edx	       398	fold.c	FUNCTION_16	FOR_1
0x4003c0a	            0x89cb	                            mov ebx, ecx	       398	fold.c	FUNCTION_16	FOR_1
0x4003c0c	          0x4121c4	                           and r12d, eax	       398	fold.c	FUNCTION_16	FOR_1
0x4003c0f	          0x4109ce	                            or r14d, ecx	       398	fold.c	FUNCTION_16	FOR_1
0x4003c12	            0xeb28	                           jmp 0x4003c3c	       398	fold.c	FUNCTION_16	FOR_1
0x4003c14	         0xf1f4000	                         nop dword [rax]	       398	fold.c	FUNCTION_16	FOR_1
0x4003c18	      0x488d4c241c	                   lea rcx, [rsp + 0x1c]	       405	fold.c	FUNCTION_16	FOR_1	CALL_2
0x4003c1d	            0x89da	                            mov edx, ebx	       405	fold.c	FUNCTION_16	FOR_1	CALL_2
0x4003c1f	            0x89ee	                            mov esi, ebp	       405	fold.c	FUNCTION_16	FOR_1	CALL_2
0x4003c21	          0x4c89ff	                            mov rdi, r15	       405	fold.c	FUNCTION_16	FOR_1	CALL_2
0x4003c24	      0xe807feffff	                  call sym.setManualFold	       405	fold.c	FUNCTION_16	FOR_1	CALL_2
0x4003c29	          0x4585f6	                         test r14d, r14d	       408	fold.c	FUNCTION_16	FOR_1	IF_2
0x4003c2c	            0x7442	                            je 0x4003c70	       408	fold.c	FUNCTION_16	FOR_1	IF_2
0x4003c2e	      0x488b442420	            mov rax, qword [rsp + 0x20] 	       398	fold.c	FUNCTION_16	FOR_1
0x4003c33	        0x4c8d7801	                      lea r15, [rax + 1]	       398	fold.c	FUNCTION_16	FOR_1
0x4003c37	          0x4d39fd	                            cmp r13, r15	       398	fold.c	FUNCTION_16	FOR_1
0x4003c3a	            0x7c61	                            jl 0x4003c9d	       398	fold.c	FUNCTION_16	FOR_1
0x4003c3c	          0x4584e4	                         test r12b, r12b	       403	fold.c	FUNCTION_16	FOR_1	IF_1
0x4003c3f	      0x4c897c2420	             mov qword [rsp + 0x20], r15	       400	fold.c	FUNCTION_16	FOR_1
0x4003c44	            0x74d2	                            je 0x4003c18	       403	fold.c	FUNCTION_16	FOR_1	IF_1
0x4003c46	    0x488b3d000000	            mov rdi, qword [0x04003c4d] 	       132	fold.c	FUNCTION_3	CALL_1
0x4003c4d	      0x488d4c2420	                   lea rcx, [rsp + 0x20]	       132	fold.c	FUNCTION_3	CALL_1
0x4003c52	          0x4531c9	                            xor r9d, r9d	       132	fold.c	FUNCTION_3	CALL_1
0x4003c55	    0x41b801000000	                              mov r8d, 1	       132	fold.c	FUNCTION_3	CALL_1
0x4003c5b	            0x31d2	                            xor edx, edx	       132	fold.c	FUNCTION_3	CALL_1
0x4003c5d	          0x4c89fe	                            mov rsi, r15	       132	fold.c	FUNCTION_3	CALL_1
0x4003c60	      0xe800000000	                          call 0x4003c65	       132	fold.c	FUNCTION_3	CALL_1
0x4003c65	            0xebb1	                           jmp 0x4003c18	       132	fold.c	FUNCTION_3	CALL_1
0x4003c67	    0x660f1f840000	                    nop word [rax + rax]	       132	fold.c	FUNCTION_3	CALL_1
0x4003c70	    0x488b3d000000	            mov rdi, qword [0x04003c77] 	       132	fold.c	FUNCTION_3	CALL_1
0x4003c77	      0x488d4c2420	                   lea rcx, [rsp + 0x20]	       132	fold.c	FUNCTION_3	CALL_1
0x4003c7c	          0x4531c9	                            xor r9d, r9d	       132	fold.c	FUNCTION_3	CALL_1
0x4003c7f	            0x31d2	                            xor edx, edx	       132	fold.c	FUNCTION_3	CALL_1
0x4003c81	          0x4c89fe	                            mov rsi, r15	       132	fold.c	FUNCTION_3	CALL_1
0x4003c84	    0x41b801000000	                              mov r8d, 1	       132	fold.c	FUNCTION_3	CALL_1
0x4003c8a	      0xe800000000	                          call 0x4003c8f	       132	fold.c	FUNCTION_3	CALL_1
0x4003c8f	      0x488b442420	            mov rax, qword [rsp + 0x20] 	       398	fold.c	FUNCTION_16	FOR_1
0x4003c94	        0x4c8d7801	                      lea r15, [rax + 1]	       398	fold.c	FUNCTION_16	FOR_1
0x4003c98	          0x4d39fd	                            cmp r13, r15	       398	fold.c	FUNCTION_16	FOR_1
0x4003c9b	            0x7d9f	                           jge 0x4003c3c	       398	fold.c	FUNCTION_16	FOR_1
0x4003c9d	        0x8b54241c	            mov edx, dword [rsp + 0x1c] 	       411	fold.c	FUNCTION_16	IF_3
0x4003ca1	            0x85d2	                           test edx, edx	       411	fold.c	FUNCTION_16	IF_3
0x4003ca3	            0x743b	                            je 0x4003ce0	       411	fold.c	FUNCTION_16	IF_3
0x4003ca5	        0x8b44240c	              mov eax, dword [rsp + 0xc]	       414	fold.c	FUNCTION_16	IF_4
0x4003ca9	            0x85c0	                           test eax, eax	       414	fold.c	FUNCTION_16	IF_4
0x4003cab	            0x740a	                            je 0x4003cb7	       414	fold.c	FUNCTION_16	IF_4
0x4003cad	      0xbf14000000	                           mov edi, 0x14	       415	fold.c	FUNCTION_16	CALL_6
0x4003cb2	      0xe800000000	                          call 0x4003cb7	       415	fold.c	FUNCTION_16	CALL_6
0x4003cb7	      0x488b442428	            mov rax, qword [rsp + 0x28] 	       416	fold.c	FUNCTION_16
0x4003cbc	    0x644833042528	                xor rax, qword fs:[0x28]	       416	fold.c	FUNCTION_16
0x4003cc5	            0x7534	                           jne 0x4003cfb	       416	fold.c	FUNCTION_16
0x4003cc7	        0x4883c438	                           add rsp, 0x38	       416	fold.c	FUNCTION_16
0x4003ccb	              0x5b	                                 pop rbx	       416	fold.c	FUNCTION_16
0x4003ccc	              0x5d	                                 pop rbp	       416	fold.c	FUNCTION_16
0x4003ccd	            0x415c	                                 pop r12	       416	fold.c	FUNCTION_16
0x4003ccf	            0x415d	                                 pop r13	       416	fold.c	FUNCTION_16
0x4003cd1	            0x415e	                                 pop r14	       416	fold.c	FUNCTION_16
0x4003cd3	            0x415f	                                 pop r15	       416	fold.c	FUNCTION_16
0x4003cd5	              0xc3	                                     ret	       416	fold.c	FUNCTION_16
0x4003cd6	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       416	fold.c	FUNCTION_16
0x4003ce0	            0x31ff	                            xor edi, edi	       412	fold.c	FUNCTION_16	CALL_5
0x4003ce2	      0xba05000000	                              mov edx, 5	       412	fold.c	FUNCTION_16	CALL_5
0x4003ce7	      0xbe00000000	                              mov esi, 0	       412	fold.c	FUNCTION_16	CALL_5
0x4003cec	      0xe800000000	                          call 0x4003cf1	       412	fold.c	FUNCTION_16	CALL_5
0x4003cf1	          0x4889c7	                            mov rdi, rax	       412	fold.c	FUNCTION_16	CALL_5
0x4003cf4	      0xe800000000	                          call 0x4003cf9	       412	fold.c	FUNCTION_16	CALL_5
0x4003cf9	            0xebaa	                           jmp 0x4003ca5	       412	fold.c	FUNCTION_16	CALL_5
0x4003cfb	      0xe800000000	                call sym.openFoldRecurse	       416	fold.c	FUNCTION_16
openFoldRecurse	FOR,0:functions,0:IF,0:ELSE,0:CALL,1:DO,0:SWITCH,0:WHILE,0	4
0x4003d00	            0x31c9	                            xor ecx, ecx	       436	fold.c	FUNCTION_18	CALL_1
0x4003d02	      0xba01000000	                              mov edx, 1	       436	fold.c	FUNCTION_18	CALL_1
0x4003d07	      0xbe01000000	                              mov esi, 1	       436	fold.c	FUNCTION_18	CALL_1
0x4003d0c	      0xe91ffdffff	                   jmp sym.setManualFold	       436	fold.c	FUNCTION_18	CALL_1
foldUpdateIEMSRecurse	FOR,1:functions,0:IF,46:ELSE,14:CALL,21:DO,0:SWITCH,0:WHILE,4	804
0x4001d00	            0x4157	                                push r15	      2379	fold.c	FUNCTION_59
0x4001d02	            0x4156	                                push r14	      2379	fold.c	FUNCTION_59
0x4001d04	          0x4989ce	                            mov r14, rcx	      2379	fold.c	FUNCTION_59
0x4001d07	            0x4155	                                push r13	      2379	fold.c	FUNCTION_59
0x4001d09	            0x4154	                                push r12	      2379	fold.c	FUNCTION_59
0x4001d0b	          0x4989d5	                            mov r13, rdx	      2379	fold.c	FUNCTION_59
0x4001d0e	              0x55	                                push rbp	      2379	fold.c	FUNCTION_59
0x4001d0f	              0x53	                                push rbx	      2379	fold.c	FUNCTION_59
0x4001d10	            0x31db	                            xor ebx, ebx	      2381	fold.c	FUNCTION_59
0x4001d12	          0x4889fd	                            mov rbp, rdi	      2379	fold.c	FUNCTION_59
0x4001d15	          0x4d89c4	                             mov r12, r8	      2379	fold.c	FUNCTION_59
0x4001d18	        0x4883ec58	                           sub rsp, 0x58	      2379	fold.c	FUNCTION_59
0x4001d1c	        0x488b4108	                mov rax, qword [rcx + 8]	      2385	fold.c	FUNCTION_59
0x4001d20	        0x89742440	             mov dword [rsp + 0x40], esi	      2379	fold.c	FUNCTION_59
0x4001d24	      0x4c894c2418	              mov qword [rsp + 0x18], r9	      2379	fold.c	FUNCTION_59
0x4001d29	      0x4889442408	                mov qword [rsp + 8], rax	      2385	fold.c	FUNCTION_59
0x4001d2e	          0x488b01	                    mov rax, qword [rcx]	      2388	fold.c	FUNCTION_59
0x4001d31	        0x488b4008	                mov rax, qword [rax + 8]	      2388	fold.c	FUNCTION_59
0x4001d35	          0x488b00	                    mov rax, qword [rax]	      2388	fold.c	FUNCTION_59
0x4001d38	        0x482b4110	             sub rax, qword [rcx + 0x10]	      2388	fold.c	FUNCTION_59
0x4001d3c	    0x4981f8000000	                               cmp r8, 0	      2397	fold.c	FUNCTION_59	IF_1
0x4001d43	      0x4889442420	             mov qword [rsp + 0x20], rax	      2388	fold.c	FUNCTION_59
0x4001d48	     0xf84b1090000	                            je 0x40026ff	      2397	fold.c	FUNCTION_59	IF_1
0x4001d4e	      0x488b442408	                mov rax, qword [rsp + 8]	      2417	fold.c	FUNCTION_59
0x4001d53	      0x4c896c2438	             mov qword [rsp + 0x38], r13	      2418	fold.c	FUNCTION_59	WHILE_1
0x4001d58	    0xc74424280000	               mov dword [rsp + 0x28], 0	      2387	fold.c	FUNCTION_59
0x4001d60	        0x49894618	             mov qword [r14 + 0x18], rax	      2417	fold.c	FUNCTION_59
0x4001d64	        0x8b442440	            mov eax, dword [rsp + 0x40] 	      2418	fold.c	FUNCTION_59	WHILE_1
0x4001d68	        0x89442414	             mov dword [rsp + 0x14], eax	      2418	fold.c	FUNCTION_59	WHILE_1
0x4001d6c	          0x83c001	                              add eax, 1	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4001d6f	        0x89442444	             mov dword [rsp + 0x44], eax	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4001d73	       0xf1f440000	                   nop dword [rax + rax]	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4001d78	    0x8b0500000000	            mov eax, dword [0x04001d7e] 	      2418	fold.c	FUNCTION_59	WHILE_1
0x4001d7e	            0x85c0	                           test eax, eax	      2418	fold.c	FUNCTION_59	WHILE_1
0x4001d80	     0xf8505050000	                           jne 0x400228b	      2418	fold.c	FUNCTION_59	WHILE_1
0x4001d86	      0xe800000000	                          call 0x4001d8b	      2421	fold.c	FUNCTION_59	WHILE_1	CALL_2
0x4001d8b	        0x418b4620	            mov eax, dword [r14 + 0x20] 	      2427	fold.c	FUNCTION_59	WHILE_1
0x4001d8f	      0xbf14000000	                           mov edi, 0x14	      2427	fold.c	FUNCTION_59	WHILE_1
0x4001d94	        0x4d8b5e08	                mov r11, qword [r14 + 8]	      2430	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4001d98	          0x83f814	                           cmp eax, 0x14	      2430	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4001d9b	          0x4d89df	                            mov r15, r11	      2430	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4001d9e	           0xf4fc7	                          cmovg eax, edi	      2430	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4001da1	      0x4c395c2408	                cmp qword [rsp + 8], r11	      2430	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4001da6	        0x89442414	             mov dword [rsp + 0x14], eax	      2430	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4001daa	            0x7d22	                           jge 0x4001dce	      2430	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4001dac	            0x89c7	                            mov edi, eax	      2431	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4001dae	        0x412b4628	             sub eax, dword [r14 + 0x28]	      2431	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4001db2	        0x8b4c2440	            mov ecx, dword [rsp + 0x40] 	      2431	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4001db6	            0x39c1	                            cmp ecx, eax	      2431	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4001db8	     0xf8fb2020000	                            jg 0x4002070	      2431	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4001dbe	        0x413b4e30	            cmp ecx, dword [r14 + 0x30] 	      2432	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4001dc2	      0xb900000000	                              mov ecx, 0	      2432	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4001dc7	           0xf4ccf	                          cmovl ecx, edi	      2432	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4001dca	        0x894c2414	             mov dword [rsp + 0x14], ecx	      2432	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4001dce	      0x4c395c2418	            cmp qword [rsp + 0x18], r11 	      2434	fold.c	FUNCTION_59	WHILE_1	IF_5
0x4001dd3	     0xf8de7000000	                           jge 0x4001ec0	      2434	fold.c	FUNCTION_59	WHILE_1	IF_5
0x4001dd9	      0x448b442428	            mov r8d, dword [rsp + 0x28] 	      2434	fold.c	FUNCTION_59	WHILE_1	IF_5
0x4001dde	          0x4585c0	                           test r8d, r8d	      2434	fold.c	FUNCTION_59	WHILE_1	IF_5
0x4001de1	     0xf85d9000000	                           jne 0x4001ec0	      2434	fold.c	FUNCTION_59	WHILE_1	IF_5
0x4001de7	          0x4885db	                           test rbx, rbx	      2434	fold.c	FUNCTION_59	WHILE_1	IF_5
0x4001dea	     0xf848d020000	                            je 0x400207d	      2434	fold.c	FUNCTION_59	WHILE_1	IF_5
0x4001df0	    0x4981fc000000	                              cmp r12, 0	      2444	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4001df7	           0xf95c2	                                setne dl	      2444	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4001dfa	    0x4981fc000000	                              cmp r12, 0	      2444	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4001e01	           0xf95c0	                                setne al	      2444	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4001e04	            0x84c2	                             test dl, al	      2444	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4001e06	            0x740d	                            je 0x4001e15	      2444	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4001e08	    0x4981fc000000	                              cmp r12, 0	      2444	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4001e0f	     0xf85810a0000	                           jne 0x4002896	      2444	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4001e15	        0x8b7c2440	            mov edi, dword [rsp + 0x40] 	      2448	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x4001e19	        0x397c2414	            cmp dword [rsp + 0x14], edi 	      2448	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x4001e1d	          0x488b03	                    mov rax, qword [rbx]	      2453	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x4001e20	     0xf8daf050000	                           jge 0x40023d5	      2448	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x4001e26	      0x4889442428	             mov qword [rsp + 0x28], rax	      2448	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x4001e2b	          0x4929c3	                            sub r11, rax	      2448	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x4001e2e	          0x8b4310	            mov eax, dword [rbx + 0x10] 	      1132	fold.c	FUNCTION_36
0x4001e31	        0x4c8b4320	              mov r8, qword [rbx + 0x20]	      1132	fold.c	FUNCTION_36
0x4001e35	          0x8d70ff	                      lea esi, [rax - 1]	      1132	fold.c	FUNCTION_36
0x4001e38	          0x4863f6	                         movsxd rsi, esi	      1132	fold.c	FUNCTION_36
0x4001e3b	          0x4885f6	                           test rsi, rsi	      1133	fold.c	FUNCTION_36	WHILE_1
0x4001e3e	     0xf884b0a0000	                            js 0x400288f	      1133	fold.c	FUNCTION_36	WHILE_1
0x4001e44	            0x31d2	                            xor edx, edx	      1133	fold.c	FUNCTION_36	WHILE_1
0x4001e46	            0xeb13	                           jmp 0x4001e5b	      1133	fold.c	FUNCTION_36	WHILE_1
0x4001e48	     0xf1f84000000	                   nop dword [rax + rax]	      1133	fold.c	FUNCTION_36	WHILE_1
0x4001e50	          0x83e801	                              sub eax, 1	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4001e53	          0x4863f0	                         movsxd rsi, eax	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4001e56	          0x4839f2	                            cmp rdx, rsi	      1133	fold.c	FUNCTION_36	WHILE_1
0x4001e59	            0x7f2e	                            jg 0x4001e89	      1133	fold.c	FUNCTION_36	WHILE_1
0x4001e5b	        0x488d0432	                    lea rax, [rdx + rsi]	      1135	fold.c	FUNCTION_36	WHILE_1
0x4001e5f	          0x48d1f8	                              sar rax, 1	      1135	fold.c	FUNCTION_36	WHILE_1
0x4001e62	        0x488d0c40	                  lea rcx, [rax + rax*2]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4001e66	        0x48c1e104	                              shl rcx, 4	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4001e6a	          0x4c01c1	                             add rcx, r8	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4001e6d	          0x488b39	                    mov rdi, qword [rcx]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4001e70	          0x4c39df	                            cmp rdi, r11	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4001e73	            0x7fdb	                            jg 0x4001e50	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4001e75	        0x48037908	                add rdi, qword [rcx + 8]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001e79	          0x4c39df	                            cmp rdi, r11	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001e7c	            0x7f1f	                            jg 0x4001e9d	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001e7e	          0x8d5001	                      lea edx, [rax + 1]	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001e81	          0x4863d2	                         movsxd rdx, edx	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001e84	          0x4839f2	                            cmp rdx, rsi	      1133	fold.c	FUNCTION_36	WHILE_1
0x4001e87	            0x7ed2	                           jle 0x4001e5b	      1133	fold.c	FUNCTION_36	WHILE_1
0x4001e89	        0x488d0452	                  lea rax, [rdx + rdx*2]	      1133	fold.c	FUNCTION_36	WHILE_1
0x4001e8d	        0x48c1e004	                              shl rax, 4	      1133	fold.c	FUNCTION_36	WHILE_1
0x4001e91	          0x4c01c0	                             add rax, r8	      2463	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x4001e94	            0x7416	                            je 0x4001eac	      2463	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x4001e96	        0x488b7808	                mov rdi, qword [rax + 8]	      2463	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x4001e9a	          0x480338	                    add rdi, qword [rax]	      2463	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x4001e9d	      0x488b442428	            mov rax, qword [rsp + 0x28] 	      2464	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x4001ea2	      0x488d4407ff	                lea rax, [rdi + rax - 1]	      2464	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x4001ea7	      0x4889442418	             mov qword [rsp + 0x18], rax	      2464	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x4001eac	    0xc74424280000	               mov dword [rsp + 0x28], 0	      2650	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_29
0x4001eb4	            0xeb13	                           jmp 0x4001ec9	      2650	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_29
0x4001eb6	    0x662e0f1f8400	                 nop word cs:[rax + rax]	      2650	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_29
0x4001ec0	          0x4885db	                           test rbx, rbx	      2475	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4001ec3	     0xf84bc010000	                            je 0x4002085	      2475	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4001ec9	        0x8b7c2440	            mov edi, dword [rsp + 0x40] 	      2657	fold.c	FUNCTION_59	WHILE_1	IF_30
0x4001ecd	        0x397c2414	            cmp dword [rsp + 0x14], edi 	      2657	fold.c	FUNCTION_59	WHILE_1	IF_30
0x4001ed1	     0xf8cb4030000	                            jl 0x400228b	      2657	fold.c	FUNCTION_59	WHILE_1	IF_30
0x4001ed7	        0x4d8b5e08	                mov r11, qword [r14 + 8]	      2657	fold.c	FUNCTION_59	WHILE_1	IF_30
0x4001edb	      0x4c395c2420	            cmp qword [rsp + 0x20], r11 	      2657	fold.c	FUNCTION_59	WHILE_1	IF_30
0x4001ee0	     0xf8ca5030000	                            jl 0x400228b	      2657	fold.c	FUNCTION_59	WHILE_1	IF_30
0x4001ee6	          0x4885db	                           test rbx, rbx	      2670	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4001ee9	     0xf84e4000000	                            je 0x4001fd3	      2670	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4001eef	        0x8b7c2440	            mov edi, dword [rsp + 0x40] 	      2670	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4001ef3	        0x397c2414	            cmp dword [rsp + 0x14], edi 	      2670	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4001ef7	     0xf8ed6000000	                           jle 0x4001fd3	      2670	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4001efd	          0x4989df	                            mov r15, rbx	      2683	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4001f00	        0x4c2b7d10	             sub r15, qword [rbp + 0x10]	      2683	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4001f04	          0x488b03	                    mov rax, qword [rbx]	      2681	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4001f07	        0x498b5618	            mov rdx, qword [r14 + 0x18] 	      2681	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4001f0b	    0x48bfabaaaaaa	          movabs rdi, 0xaaaaaaaaaaaaaaab	      2683	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4001f15	        0x49014610	            add qword [r14 + 0x10], rax 	      2682	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4001f19	          0x4d89e0	                             mov r8, r12	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4001f1c	        0x49c1ff04	                              sar r15, 4	      2683	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4001f20	          0x4829c2	                            sub rdx, rax	      2681	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4001f23	        0x4c0fafff	                           imul r15, rdi	      2683	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4001f27	      0x488b7c2418	            mov rdi, qword [rsp + 0x18] 	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4001f2c	        0x49895608	                mov qword [r14 + 8], rdx	      2681	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4001f30	         0xfbe4b28	           movsx ecx, byte [rbx + 0x28] 	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4001f34	      0x488b542438	            mov rdx, qword [rsp + 0x38] 	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4001f39	          0x4c39df	                            cmp rdi, r11	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4001f3c	          0x4989f9	                             mov r9, rdi	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4001f3f	        0x488d7b10	                   lea rdi, [rbx + 0x10]	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4001f43	        0x4d0f4ccb	                           cmovl r9, r11	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4001f47	        0x4883ec08	                              sub rsp, 8	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4001f4b	          0x4d63ff	                        movsxd r15, r15d	      2687	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4001f4e	              0x51	                                push rcx	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4001f4f	        0x8b742454	            mov esi, dword [rsp + 0x54] 	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4001f53	        0x4b8d1c7f	                  lea rbx, [r15 + r15*2]	      2687	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4001f57	          0x4829c2	                            sub rdx, rax	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4001f5a	          0x4c89f1	                            mov rcx, r14	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4001f5d	          0x4929c1	                             sub r9, rax	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4001f60	        0x48c1e304	                              shl rbx, 4	      2687	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4001f64	      0xe897fdffff	          call sym.foldUpdateIEMSRecurse	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4001f69	        0x48035d10	             add rbx, qword [rbp + 0x10]	      2687	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4001f6d	          0x488b13	                    mov rdx, qword [rbx]	      2688	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4001f70	        0x49015618	            add qword [r14 + 0x18], rdx 	      2689	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4001f74	        0x49295610	             sub qword [r14 + 0x10], rdx	      2690	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4001f78	          0x4889d7	                            mov rdi, rdx	      2688	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4001f7b	        0x49037e08	                add rdi, qword [r14 + 8]	      2688	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4001f7f	          0x4801d0	                            add rax, rdx	      2691	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4001f82	      0x4889442428	             mov qword [rsp + 0x28], rax	      2691	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4001f87	      0x48897c2448	             mov qword [rsp + 0x48], rdi	      2688	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4001f8c	        0x49897e08	                mov qword [r14 + 8], rdi	      2688	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4001f90	              0x5a	                                 pop rdx	      2692	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4001f91	              0x59	                                 pop rcx	      2692	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4001f92	      0xe9e1fdffff	                           jmp 0x4001d78	      2692	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4001f97	      0x488b442418	            mov rax, qword [rsp + 0x18] 	      2477	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4001f9c	        0x493b4618	            cmp rax, qword [r14 + 0x18] 	      2477	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4001fa0	     0xf8ef2000000	                           jle 0x4002098	      2477	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4001fa6	        0x418b7e28	            mov edi, dword [r14 + 0x28] 	      2478	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4001faa	            0x85ff	                           test edi, edi	      2478	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4001fac	     0xf85e6000000	                           jne 0x4002098	      2478	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4001fb2	      0x41837e3014	           cmp dword [r14 + 0x30], 0x14 	      2480	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4001fb7	     0xf8e0b090000	                           jle 0x40028c8	      2480	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4001fbd	      0x4c395c2420	            cmp qword [rsp + 0x20], r11 	      2480	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4001fc2	     0xf8400090000	                            je 0x40028c8	      2480	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4001fc8	      0x4c395c2420	            cmp qword [rsp + 0x20], r11 	      2657	fold.c	FUNCTION_59	WHILE_1	IF_30
0x4001fcd	     0xf8c85020000	                            jl 0x4002258	      2657	fold.c	FUNCTION_59	WHILE_1	IF_30
0x4001fd3	        0x498b4618	            mov rax, qword [r14 + 0x18] 	      2704	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4001fd7	      0x4c896c2430	             mov qword [rsp + 0x30], r13	      2704	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4001fdc	      0x4c8b6c2420	            mov r13, qword [rsp + 0x20] 	      2704	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4001fe1	        0x49894608	                mov qword [r14 + 8], rax	      2704	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4001fe5	        0x4c8d7801	                      lea r15, [rax + 1]	      2705	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4001fe9	            0xeb48	                           jmp 0x4002033	      2706	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4001feb	       0xf1f440000	                   nop dword [rax + rax]	      2706	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4001ff0	        0x418b4e20	            mov ecx, dword [r14 + 0x20] 	      2710	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4001ff4	    0x488905000000	            mov qword [0x04001ffb], rax 	      2709	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4001ffb	        0x4883c001	                              add rax, 1	      2712	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_33
0x4001fff	          0x4939c5	                            cmp r13, rax	      2712	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_33
0x4002002	        0x49894608	                mov qword [r14 + 8], rax	      2712	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_33
0x4002006	    0x890d00000000	            mov dword [0x0400200c], ecx 	      2710	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x400200c	     0xf8c6e020000	                            jl 0x4002280	      2712	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_33
0x4002012	        0x418b4624	            mov eax, dword [r14 + 0x24] 	      2714	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4002016	          0x4c89f7	                            mov rdi, r14	      2715	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	CALL_16
0x4002019	        0x41894620	             mov dword [r14 + 0x20], eax	      2714	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x400201d	          0x41ffd4	                                call r12	      2715	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	CALL_16
0x4002020	        0x418b4620	            mov eax, dword [r14 + 0x20] 	      2716	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_34
0x4002024	            0x85c0	                           test eax, eax	      2716	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_34
0x4002026	            0x793d	                           jns 0x4002065	      2716	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_34
0x4002028	      0x41837e3014	           cmp dword [r14 + 0x30], 0x14 	      2716	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_34
0x400202d	            0x7e36	                           jle 0x4002065	      2716	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_34
0x400202f	        0x498b4608	                mov rax, qword [r14 + 8]	      2716	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_34
0x4002033	    0x8b0d00000000	            mov ecx, dword [0x04002039] 	      2706	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4002039	            0x85c9	                           test ecx, ecx	      2706	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x400203b	            0x74b3	                            je 0x4001ff0	      2706	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x400203d	      0x4c8b6c2430	            mov r13, qword [rsp + 0x30] 	      2706	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4002042	      0x4839442420	            cmp qword [rsp + 0x20], rax 	      2720	fold.c	FUNCTION_59	WHILE_1	ELSE_12	IF_35
0x4002047	    0x48c705000000	               mov qword [0x04002052], 0	      2719	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4002052	     0xf8c33020000	                            jl 0x400228b	      2720	fold.c	FUNCTION_59	WHILE_1	ELSE_12	IF_35
0x4002058	        0x49894618	             mov qword [r14 + 0x18], rax	      2725	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x400205c	        0x4d897e08	                mov qword [r14 + 8], r15	      2726	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4002060	      0xe913fdffff	                           jmp 0x4001d78	      2726	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4002065	      0x4c8b6c2430	            mov r13, qword [rsp + 0x30] 	      2726	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x400206a	        0x498b4608	                mov rax, qword [r14 + 8]	      2726	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x400206e	            0xebd2	                           jmp 0x4002042	      2726	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4002070	    0xc74424140000	               mov dword [rsp + 0x14], 0	      2432	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4002078	      0xe951fdffff	                           jmp 0x4001dce	      2432	fold.c	FUNCTION_59	WHILE_1	IF_4
0x400207d	    0xc74424280000	               mov dword [rsp + 0x28], 0	      2432	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4002085	            0x31db	                            xor ebx, ebx	      2432	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4002087	        0x8b7c2440	            mov edi, dword [rsp + 0x40] 	      2476	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x400208b	        0x397c2414	            cmp dword [rsp + 0x14], edi 	      2476	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x400208f	     0xf8402ffffff	                            je 0x4001f97	      2476	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4002095	           0xf1f00	                         nop dword [rax]	      2476	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x4002098	    0x8b0500000000	            mov eax, dword [0x0400209e] 	      2486	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3
0x400209e	            0x85c0	                           test eax, eax	      2486	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3
0x40020a0	     0xf8523feffff	                           jne 0x4001ec9	      2486	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3
0x40020a6	        0x458b5e28	           mov r11d, dword [r14 + 0x28] 	      2490	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	IF_12
0x40020aa	          0x4531ff	                          xor r15d, r15d	      2491	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	IF_12
0x40020ad	          0x4585db	                         test r11d, r11d	      2490	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	IF_12
0x40020b0	            0x750c	                           jne 0x40020be	      2490	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	IF_12
0x40020b2	          0x4531ff	                          xor r15d, r15d	      2491	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	IF_12
0x40020b5	      0x41837e3014	           cmp dword [r14 + 0x30], 0x14 	      2491	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	IF_12
0x40020ba	        0x410f9fc7	                               setg r15b	      2491	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	IF_12
0x40020be	        0x4c634d00	                  movsxd r9, dword [rbp]	      2491	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	IF_12
0x40020c2	        0x488b7d10	            mov rdi, qword [rbp + 0x10] 	      2491	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	IF_12
0x40020c6	        0x418d49ff	                       lea ecx, [r9 - 1]	      1132	fold.c	FUNCTION_36
0x40020ca	          0x4863c9	                         movsxd rcx, ecx	      1132	fold.c	FUNCTION_36
0x40020cd	          0x4885c9	                           test rcx, rcx	      1133	fold.c	FUNCTION_36	WHILE_1
0x40020d0	     0xf88d5020000	                            js 0x40023ab	      1133	fold.c	FUNCTION_36	WHILE_1
0x40020d6	          0x4889ce	                            mov rsi, rcx	      1133	fold.c	FUNCTION_36	WHILE_1
0x40020d9	            0x31d2	                            xor edx, edx	      1133	fold.c	FUNCTION_36	WHILE_1
0x40020db	            0xeb0e	                           jmp 0x40020eb	      1133	fold.c	FUNCTION_36	WHILE_1
0x40020dd	           0xf1f00	                         nop dword [rax]	      1133	fold.c	FUNCTION_36	WHILE_1
0x40020e0	          0x83e801	                              sub eax, 1	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40020e3	          0x4863f0	                         movsxd rsi, eax	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40020e6	          0x4839d6	                            cmp rsi, rdx	      1133	fold.c	FUNCTION_36	WHILE_1
0x40020e9	            0x7c31	                            jl 0x400211c	      1133	fold.c	FUNCTION_36	WHILE_1
0x40020eb	        0x488d0416	                    lea rax, [rsi + rdx]	      1135	fold.c	FUNCTION_36	WHILE_1
0x40020ef	          0x48d1f8	                              sar rax, 1	      1135	fold.c	FUNCTION_36	WHILE_1
0x40020f2	        0x488d1c40	                  lea rbx, [rax + rax*2]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40020f6	        0x48c1e304	                              shl rbx, 4	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40020fa	          0x4801fb	                            add rbx, rdi	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40020fd	          0x4c8b03	                     mov r8, qword [rbx]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4002100	          0x4d39c5	                             cmp r13, r8	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4002103	            0x7cdb	                            jl 0x40020e0	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4002105	          0x4c89c2	                             mov rdx, r8	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4002108	        0x48035308	                add rdx, qword [rbx + 8]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x400210c	          0x4939d5	                            cmp r13, rdx	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x400210f	            0x7c3b	                            jl 0x400214c	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4002111	          0x83c001	                              add eax, 1	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4002114	          0x4863d0	                         movsxd rdx, eax	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4002117	          0x4839d6	                            cmp rsi, rdx	      1133	fold.c	FUNCTION_36	WHILE_1
0x400211a	            0x7dcf	                           jge 0x40020eb	      1133	fold.c	FUNCTION_36	WHILE_1
0x400211c	        0x488d1c52	                  lea rbx, [rdx + rdx*2]	      1149	fold.c	FUNCTION_36
0x4002120	        0x4f8d0c49	                     lea r9, [r9 + r9*2]	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4002124	        0x48c1e304	                              shl rbx, 4	      1149	fold.c	FUNCTION_36
0x4002128	        0x49c1e104	                               shl r9, 4	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x400212c	          0x4801fb	                            add rbx, rdi	      1149	fold.c	FUNCTION_36
0x400212f	          0x4901f9	                             add r9, rdi	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4002132	          0x4c39cb	                             cmp rbx, r9	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4002135	     0xf8385000000	                           jae 0x40021c0	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x400213b	          0x4c8b03	                     mov r8, qword [rbx]	      2500	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x400213e	      0x4c39442408	                 cmp qword [rsp + 8], r8	      2500	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4002143	            0x7c7b	                            jl 0x40021c0	      2500	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4002145	          0x4c89c2	                             mov rdx, r8	      2500	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4002148	        0x48035308	                add rdx, qword [rbx + 8]	      2500	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x400214c	          0x4d63d7	                        movsxd r10, r15d	      2500	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x400214f	          0x4901d2	                            add r10, rdx	      2507	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14
0x4002152	      0x4c39542408	                cmp qword [rsp + 8], r10	      2507	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14
0x4002157	     0xf8c2d030000	                            jl 0x400248a	      2507	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14
0x400215d	          0x4d39c5	                             cmp r13, r8	      2597	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24
0x4002160	            0x7f2e	                            jg 0x4002190	      2597	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24
0x4002162	          0x4889de	                            mov rsi, rbx	      2602	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24	CALL_12
0x4002165	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	      2602	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24	CALL_12
0x400216f	      0xba01000000	                              mov edx, 1	      2602	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24	CALL_12
0x4002174	          0x4829fe	                            sub rsi, rdi	      2602	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24	CALL_12
0x4002177	          0x4889ef	                            mov rdi, rbp	      2602	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24	CALL_12
0x400217a	        0x48c1fe04	                              sar rsi, 4	      2602	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24	CALL_12
0x400217e	        0x480faff0	                           imul rsi, rax	      2602	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24	CALL_12
0x4002182	      0xe889f3ffff	                call sym.deleteFoldEntry	      2602	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24	CALL_12
0x4002187	      0xe90cffffff	                           jmp 0x4002098	      2602	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24	CALL_12
0x400218c	         0xf1f4000	                         nop dword [rax]	      2602	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24	CALL_12
0x4002190	          0x4c89ee	                            mov rsi, r13	      2609	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8
0x4002193	        0x488d7b10	                   lea rdi, [rbx + 0x10]	      2610	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8	CALL_13
0x4002197	      0xb9ffffff7f	                     mov ecx, 0x7fffffff	      2610	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8	CALL_13
0x400219c	          0x4c29c6	                             sub rsi, r8	      2609	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8
0x400219f	      0xbaffffff7f	                     mov edx, 0x7fffffff	      2610	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8	CALL_13
0x40021a4	          0x4531c0	                            xor r8d, r8d	      2610	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8	CALL_13
0x40021a7	        0x48897308	                mov qword [rbx + 8], rsi	      2609	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8
0x40021ab	      0xe8c0f4ffff	          call sym.foldMarkAdjustRecurse	      2610	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8	CALL_13
0x40021b0	    0xc70500000000	               mov dword [0x040021ba], 1	      2613	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8
0x40021ba	      0xe9d9feffff	                           jmp 0x4002098	      2613	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8
0x40021bf	              0x90	                                     nop	      2613	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8
0x40021c0	      0x488b742408	                mov rsi, qword [rsp + 8]	      2501	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_6
0x40021c5	          0x4d63d7	                        movsxd r10, r15d	      2501	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_6
0x40021c8	            0x31d2	                            xor edx, edx	      2500	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40021ca	          0x4c29d6	                            sub rsi, r10	      2501	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_6
0x40021cd	            0xeb0c	                           jmp 0x40021db	      2501	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_6
0x40021cf	              0x90	                                     nop	      2501	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_6
0x40021d0	          0x83e801	                              sub eax, 1	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40021d3	          0x4863c8	                         movsxd rcx, eax	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40021d6	          0x4839ca	                            cmp rdx, rcx	      1133	fold.c	FUNCTION_36	WHILE_1
0x40021d9	            0x7f35	                            jg 0x4002210	      1133	fold.c	FUNCTION_36	WHILE_1
0x40021db	        0x488d0411	                    lea rax, [rcx + rdx]	      1135	fold.c	FUNCTION_36	WHILE_1
0x40021df	          0x48d1f8	                              sar rax, 1	      1135	fold.c	FUNCTION_36	WHILE_1
0x40021e2	        0x488d1c40	                  lea rbx, [rax + rax*2]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40021e6	        0x48c1e304	                              shl rbx, 4	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40021ea	          0x4801fb	                            add rbx, rdi	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40021ed	          0x4c8b03	                     mov r8, qword [rbx]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40021f0	          0x4939f0	                             cmp r8, rsi	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40021f3	            0x7fdb	                            jg 0x40021d0	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40021f5	          0x4c89c2	                             mov rdx, r8	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x40021f8	        0x48035308	                add rdx, qword [rbx + 8]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x40021fc	          0x4839f2	                            cmp rdx, rsi	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x40021ff	     0xf8f4affffff	                            jg 0x400214f	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4002205	          0x83c001	                              add eax, 1	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4002208	          0x4863d0	                         movsxd rdx, eax	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x400220b	          0x4839ca	                            cmp rdx, rcx	      1133	fold.c	FUNCTION_36	WHILE_1
0x400220e	            0x7ecb	                           jle 0x40021db	      1133	fold.c	FUNCTION_36	WHILE_1
0x4002210	        0x488d1452	                  lea rdx, [rdx + rdx*2]	      1133	fold.c	FUNCTION_36	WHILE_1
0x4002214	        0x48c1e204	                              shl rdx, 4	      1133	fold.c	FUNCTION_36	WHILE_1
0x4002218	        0x488d1c17	                    lea rbx, [rdi + rdx]	      1149	fold.c	FUNCTION_36
0x400221c	          0x4c39cb	                             cmp rbx, r9	      2502	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x400221f	            0x7317	                           jae 0x4002238	      2502	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4002221	        0x8b4c2440	            mov ecx, dword [rsp + 0x40] 	      2503	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4002225	        0x394c2414	            cmp dword [rsp + 0x14], ecx 	      2503	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4002229	          0x4c8b03	                     mov r8, qword [rbx]	      2503	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x400222c	            0x7d3e	                           jge 0x400226c	      2503	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x400222e	        0x4d3b4608	                 cmp r8, qword [r14 + 8]	      2503	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4002232	     0xf8c0dffffff	                            jl 0x4002145	      2503	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4002238	      0xbe01000000	                              mov esi, 1	      2833	fold.c	FUNCTION_60	IF_1	CALL_1
0x400223d	          0x4889ef	                            mov rdi, rbp	      2833	fold.c	FUNCTION_60	IF_1	CALL_1
0x4002240	      0x4889542430	             mov qword [rsp + 0x30], rdx	      2833	fold.c	FUNCTION_60	IF_1	CALL_1
0x4002245	      0xe800000000	                          call 0x400224a	      2833	fold.c	FUNCTION_60	IF_1	CALL_1
0x400224a	          0x83f801	                              cmp eax, 1	      2833	fold.c	FUNCTION_60	IF_1	CALL_1
0x400224d	      0x488b542430	            mov rdx, qword [rsp + 0x30] 	      2833	fold.c	FUNCTION_60	IF_1	CALL_1
0x4002252	     0xf8450050000	                            je 0x40027a8	      2833	fold.c	FUNCTION_60	IF_1	CALL_1
0x4002258	      0x488b442418	            mov rax, qword [rsp + 0x18] 	      2821	fold.c	FUNCTION_59
0x400225d	        0x4883c458	                           add rsp, 0x58	      2821	fold.c	FUNCTION_59
0x4002261	              0x5b	                                 pop rbx	      2821	fold.c	FUNCTION_59
0x4002262	              0x5d	                                 pop rbp	      2821	fold.c	FUNCTION_59
0x4002263	            0x415c	                                 pop r12	      2821	fold.c	FUNCTION_59
0x4002265	            0x415d	                                 pop r13	      2821	fold.c	FUNCTION_59
0x4002267	            0x415e	                                 pop r14	      2821	fold.c	FUNCTION_59
0x4002269	            0x415f	                                 pop r15	      2821	fold.c	FUNCTION_59
0x400226b	              0xc3	                                     ret	      2821	fold.c	FUNCTION_59
0x400226c	        0x4d3b4618	              cmp r8, qword [r14 + 0x18]	      2505	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4002270	     0xf8ecffeffff	                           jle 0x4002145	      2505	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4002276	            0xebc0	                           jmp 0x4002238	      2505	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4002278	     0xf1f84000000	                   nop dword [rax + rax]	      2505	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4002280	    0x48c705000000	               mov qword [0x0400228b], 0	      2719	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x400228b	          0x4885db	                           test rbx, rbx	      2730	fold.c	FUNCTION_59	IF_36
0x400228e	            0x74c8	                            je 0x4002258	      2730	fold.c	FUNCTION_59	IF_36
0x4002290	        0x4d8b5e08	                mov r11, qword [r14 + 8]	      2730	fold.c	FUNCTION_59	IF_36
0x4002294	        0x488b5308	                mov rdx, qword [rbx + 8]	      2730	fold.c	FUNCTION_59	IF_36
0x4002298	          0x4d89df	                            mov r15, r11	      2730	fold.c	FUNCTION_59	IF_36
0x400229b	          0x488b03	                    mov rax, qword [rbx]	      2730	fold.c	FUNCTION_59	IF_36
0x400229e	          0x4c89df	                            mov rdi, r11	      2730	fold.c	FUNCTION_59	IF_36
0x40022a1	          0x4829c7	                            sub rdi, rax	      2730	fold.c	FUNCTION_59	IF_36
0x40022a4	      0x4889442428	             mov qword [rsp + 0x28], rax	      2730	fold.c	FUNCTION_59	IF_36
0x40022a9	          0x4889f8	                            mov rax, rdi	      2730	fold.c	FUNCTION_59	IF_36
0x40022ac	          0x4839c2	                            cmp rdx, rax	      2740	fold.c	FUNCTION_59	IF_37
0x40022af	     0xf8c86030000	                            jl 0x400263b	      2740	fold.c	FUNCTION_59	IF_37
0x40022b5	      0x488b442428	            mov rax, qword [rsp + 0x28] 	      2749	fold.c	FUNCTION_59	CALL_17
0x40022ba	      0x488b742438	            mov rsi, qword [rsp + 0x38] 	      2749	fold.c	FUNCTION_59	CALL_17
0x40022bf	        0x498d53ff	                      lea rdx, [r11 - 1]	      2749	fold.c	FUNCTION_59	CALL_17
0x40022c3	          0x4829c6	                            sub rsi, rax	      2749	fold.c	FUNCTION_59	CALL_17
0x40022c6	          0x4829c2	                            sub rdx, rax	      2749	fold.c	FUNCTION_59	CALL_17
0x40022c9	          0x4839f2	                            cmp rdx, rsi	      2920	fold.c	FUNCTION_62	IF_1
0x40022cc	     0xf8dcd030000	                           jge 0x400269f	      2920	fold.c	FUNCTION_62	IF_1
0x40022d2	        0x8b7c2414	            mov edi, dword [rsp + 0x14] 	      2752	fold.c	FUNCTION_59	IF_38
0x40022d6	        0x397c2440	            cmp dword [rsp + 0x40], edi 	      2752	fold.c	FUNCTION_59	IF_38
0x40022da	     0xf8fc7020000	                            jg 0x40025a7	      2752	fold.c	FUNCTION_59	IF_38
0x40022e0	        0x488b5510	            mov rdx, qword [rbp + 0x10] 	      2752	fold.c	FUNCTION_59	IF_38
0x40022e4	        0x48634500	                 movsxd rax, dword [rbp]	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x40022e8	        0x4c8d6b30	                   lea r13, [rbx + 0x30]	      2787	fold.c	FUNCTION_59	ELSE_14	FOR_1
0x40022ec	        0x488d0440	                  lea rax, [rax + rax*2]	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x40022f0	        0x48c1e004	                              shl rax, 4	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x40022f4	          0x4801d0	                            add rax, rdx	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x40022f7	          0x4939c5	                            cmp r13, rax	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x40022fa	     0xf8391000000	                           jae 0x4002391	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4002300	        0x4c8b4330	              mov r8, qword [rbx + 0x30]	      2789	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4002304	          0x4d39d8	                             cmp r8, r11	      2789	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4002307	     0xf8f84000000	                            jg 0x4002391	      2789	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x400230d	          0x4c89c0	                             mov rax, r8	      2791	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43
0x4002310	        0x48034338	             add rax, qword [rbx + 0x38]	      2791	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43
0x4002314	    0x49bcabaaaaaa	          movabs r12, 0xaaaaaaaaaaaaaaab	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x400231e	          0x4c39d8	                            cmp rax, r11	      2791	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43
0x4002321	            0x7e2d	                           jle 0x4002350	      2791	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43
0x4002323	      0xe98c030000	                           jmp 0x40026b4	      2791	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43
0x4002328	     0xf1f84000000	                   nop dword [rax + rax]	      2791	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43
0x4002330	        0x4d8b5e08	                mov r11, qword [r14 + 8]	      2789	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4002334	        0x4c8b4330	              mov r8, qword [rbx + 0x30]	      2789	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4002338	          0x4d39d8	                             cmp r8, r11	      2789	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x400233b	          0x4d89df	                            mov r15, r11	      2789	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x400233e	            0x7f51	                            jg 0x4002391	      2789	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4002340	          0x4c89c0	                             mov rax, r8	      2791	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43
0x4002343	        0x48034338	             add rax, qword [rbx + 0x38]	      2791	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43
0x4002347	          0x4939c3	                            cmp r11, rax	      2791	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43
0x400234a	     0xf8c64030000	                            jl 0x40026b4	      2791	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43
0x4002350	          0x4c89ee	                            mov rsi, r13	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x4002353	          0x4889ef	                            mov rdi, rbp	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x4002356	    0xc70500000000	               mov dword [0x04002360], 1	      2811	fold.c	FUNCTION_59	ELSE_14	FOR_1
0x4002360	          0x4829d6	                            sub rsi, rdx	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x4002363	      0xba01000000	                              mov edx, 1	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x4002368	        0x48c1fe04	                              sar rsi, 4	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x400236c	        0x490faff4	                           imul rsi, r12	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x4002370	      0xe89bf1ffff	                call sym.deleteFoldEntry	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x4002375	        0x48634500	                 movsxd rax, dword [rbp]	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4002379	        0x488b5510	            mov rdx, qword [rbp + 0x10] 	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x400237d	        0x488d0440	                  lea rax, [rax + rax*2]	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4002381	        0x48c1e004	                              shl rax, 4	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4002385	          0x4801d0	                            add rax, rdx	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4002388	          0x4939c5	                            cmp r13, rax	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x400238b	            0x72a3	                            jb 0x4002330	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x400238d	        0x4d8b7e08	                mov r15, qword [r14 + 8]	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4002391	      0x488b442418	            mov rax, qword [rsp + 0x18] 	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4002396	        0x4983ef01	                              sub r15, 1	      2817	fold.c	FUNCTION_59	IF_46
0x400239a	          0x4c39f8	                            cmp rax, r15	      2817	fold.c	FUNCTION_59	IF_46
0x400239d	        0x4c0f4df8	                         cmovge r15, rax	      2817	fold.c	FUNCTION_59	IF_46
0x40023a1	      0x4c897c2418	             mov qword [rsp + 0x18], r15	      2817	fold.c	FUNCTION_59	IF_46
0x40023a6	      0xe9adfeffff	                           jmp 0x4002258	      2817	fold.c	FUNCTION_59	IF_46
0x40023ab	        0x4f8d0c49	                     lea r9, [r9 + r9*2]	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40023af	        0x49c1e104	                               shl r9, 4	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40023b3	          0x4901f9	                             add r9, rdi	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40023b6	          0x4c39cf	                             cmp rdi, r9	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40023b9	     0xf83e1010000	                           jae 0x40025a0	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40023bf	          0x4c8b07	                     mov r8, qword [rdi]	      2500	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40023c2	      0x4c39442408	                 cmp qword [rsp + 8], r8	      2500	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40023c7	     0xf8cb0050000	                            jl 0x400297d	      2500	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40023cd	          0x4889fb	                            mov rbx, rdi	      2500	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40023d0	      0xe970fdffff	                           jmp 0x4002145	      2500	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40023d5	          0x4889c7	                            mov rdi, rax	      2453	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x40023d8	      0x4889442428	             mov qword [rsp + 0x28], rax	      2453	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x40023dd	          0x4c89d8	                            mov rax, r11	      2453	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x40023e0	          0x4829f8	                            sub rax, rdi	      2453	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x40023e3	          0x4889d9	                            mov rcx, rbx	      2454	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2	CALL_3
0x40023e6	          0x4531d2	                          xor r10d, r10d	      2446	fold.c	FUNCTION_59	WHILE_1	IF_5
0x40023e9	      0x4889442430	             mov qword [rsp + 0x30], rax	      2453	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x40023ee	          0x4989c0	                             mov r8, rax	      2453	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x40023f1	     0xf1f80000000	                         nop dword [rax]	      2453	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x40023f8	          0x8b7110	            mov esi, dword [rcx + 0x10] 	      1132	fold.c	FUNCTION_36
0x40023fb	        0x488b7920	            mov rdi, qword [rcx + 0x20] 	      1132	fold.c	FUNCTION_36
0x40023ff	          0x83ee01	                              sub esi, 1	      1132	fold.c	FUNCTION_36
0x4002402	          0x4863f6	                         movsxd rsi, esi	      1132	fold.c	FUNCTION_36
0x4002405	          0x4885f6	                           test rsi, rsi	      1133	fold.c	FUNCTION_36	WHILE_1
0x4002408	            0x7842	                            js 0x400244c	      1133	fold.c	FUNCTION_36	WHILE_1
0x400240a	            0x31d2	                            xor edx, edx	      1133	fold.c	FUNCTION_36	WHILE_1
0x400240c	            0xeb0d	                           jmp 0x400241b	      1133	fold.c	FUNCTION_36	WHILE_1
0x400240e	            0x6690	                                     nop	      1133	fold.c	FUNCTION_36	WHILE_1
0x4002410	          0x83e801	                              sub eax, 1	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4002413	          0x4863f0	                         movsxd rsi, eax	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4002416	          0x4839d6	                            cmp rsi, rdx	      1133	fold.c	FUNCTION_36	WHILE_1
0x4002419	            0x7c31	                            jl 0x400244c	      1133	fold.c	FUNCTION_36	WHILE_1
0x400241b	        0x488d0432	                    lea rax, [rdx + rsi]	      1135	fold.c	FUNCTION_36	WHILE_1
0x400241f	          0x48d1f8	                              sar rax, 1	      1135	fold.c	FUNCTION_36	WHILE_1
0x4002422	        0x488d0c40	                  lea rcx, [rax + rax*2]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4002426	        0x48c1e104	                              shl rcx, 4	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x400242a	          0x4801f9	                            add rcx, rdi	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x400242d	          0x4c8b09	                     mov r9, qword [rcx]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4002430	          0x4d39c8	                              cmp r8, r9	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4002433	            0x7cdb	                            jl 0x4002410	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4002435	          0x4c89ca	                             mov rdx, r9	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4002438	        0x48035108	                add rdx, qword [rcx + 8]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x400243c	          0x4939d0	                             cmp r8, rdx	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x400243f	            0x7c3d	                            jl 0x400247e	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4002441	          0x83c001	                              add eax, 1	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4002444	          0x4863d0	                         movsxd rdx, eax	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4002447	          0x4839d6	                            cmp rsi, rdx	      1133	fold.c	FUNCTION_36	WHILE_1
0x400244a	            0x7dcf	                           jge 0x400241b	      1133	fold.c	FUNCTION_36	WHILE_1
0x400244c	      0x4403542440	            add r10d, dword [rsp + 0x40]	      2460	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8
0x4002451	      0x4439542414	           cmp dword [rsp + 0x14], r10d 	      2460	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8
0x4002456	     0xf8c28050000	                            jl 0x4002984	      2460	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8
0x400245c	        0x488b5308	                mov rdx, qword [rbx + 8]	      2466	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x4002460	      0x488b442428	            mov rax, qword [rsp + 0x28] 	      2466	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x4002465	          0x4801d0	                            add rax, rdx	      2466	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x4002468	          0x4939c3	                            cmp r11, rax	      2466	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x400246b	     0xf8c1d050000	                            jl 0x400298e	      2466	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x4002471	    0xc74424280100	               mov dword [rsp + 0x28], 1	      2467	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x4002479	      0xe95dfaffff	                           jmp 0x4001edb	      2467	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x400247e	        0x4183c201	                             add r10d, 1	      2456	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2
0x4002482	          0x4d29c8	                              sub r8, r9	      2457	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2
0x4002485	      0xe96effffff	                           jmp 0x40023f8	      2457	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2
0x400248a	      0x488b442408	                mov rax, qword [rsp + 8]	      2513	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_15
0x400248f	          0x4c39c0	                             cmp rax, r8	      2513	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_15
0x4002492	     0xf84a7000000	                            je 0x400253f	      2513	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_15
0x4002498	          0x4d39c5	                             cmp r13, r8	      2517	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x400249b	     0xf8eb8010000	                           jle 0x4002659	      2517	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x40024a1	          0x4585db	                         test r11d, r11d	      2535	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40024a4	            0x740e	                            je 0x40024b4	      2535	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40024a6	        0x8b4c2440	            mov ecx, dword [rsp + 0x40] 	      2535	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40024aa	        0x394c2414	            cmp dword [rsp + 0x14], ecx 	      2535	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40024ae	     0xf84fd030000	                            je 0x40028b1	      2535	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40024b4	      0x488b742408	                mov rsi, qword [rsp + 8]	      2535	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40024b9	          0x4c89e8	                            mov rax, r13	      2535	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40024bc	          0x4939f5	                            cmp r13, rsi	      2536	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40024bf	          0x4889f1	                            mov rcx, rsi	      2536	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40024c2	     0xf8401faffff	                            je 0x4001ec9	      2536	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40024c8	          0x4889ca	                            mov rdx, rcx	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x40024cb	          0x4889c6	                            mov rsi, rax	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x40024ce	          0x4c29c2	                             sub rdx, r8	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x40024d1	          0x4c29c6	                             sub rsi, r8	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x40024d4	          0x4839f2	                            cmp rdx, rsi	      2920	fold.c	FUNCTION_62	IF_1
0x40024d7	     0xf8d3e040000	                           jge 0x400291b	      2920	fold.c	FUNCTION_62	IF_1
0x40024dd	          0x4829fb	                            sub rbx, rdi	      2569	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40024e0	    0x48bfabaaaaaa	          movabs rdi, 0xaaaaaaaaaaaaaaab	      2569	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40024ea	          0x4889c2	                            mov rdx, rax	      2570	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_10
0x40024ed	        0x48c1fb04	                              sar rbx, 4	      2569	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40024f1	        0x4883e901	                              sub rcx, 1	      2570	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_10
0x40024f5	        0x480fafdf	                           imul rbx, rdi	      2569	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40024f9	          0x4889ef	                            mov rdi, rbp	      2570	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_10
0x40024fc	            0x89de	                            mov esi, ebx	      2570	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_10
0x40024fe	          0x4863db	                         movsxd rbx, ebx	      2571	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x4002501	      0x488d5c5b03	              lea rbx, [rbx + rbx*2 + 3]	      2571	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x4002506	      0xe835ebffff	                      call sym.foldSplit	      2570	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_10
0x400250b	        0x48c1e304	                              shl rbx, 4	      2571	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x400250f	        0x48035d10	             add rbx, qword [rbp + 0x10]	      2571	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x4002513	    0x4981fc000000	                              cmp r12, 0	      2578	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_20
0x400251a	           0xf94c2	                                 sete dl	      2578	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_20
0x400251d	    0x4981fc000000	                              cmp r12, 0	      2578	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_20
0x4002524	           0xf94c0	                                 sete al	      2578	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_20
0x4002527	             0x8c2	                               or dl, al	      2578	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_20
0x4002529	          0x4c8b03	                     mov r8, qword [rbx]	      2578	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_20
0x400252c	     0xf85dc030000	                           jne 0x400290e	      2578	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_20
0x4002532	    0x4981fc000000	                              cmp r12, 0	      2578	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_20
0x4002539	     0xf84cf030000	                            je 0x400290e	      2578	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_20
0x400253f	          0x4d39c5	                             cmp r13, r8	      2582	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x4002542	     0xf8581f9ffff	                           jne 0x4001ec9	      2582	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x4002548	          0x4585ff	                         test r15d, r15d	      2582	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x400254b	     0xf8478f9ffff	                            je 0x4001ec9	      2582	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x4002551	          0x4889d8	                            mov rax, rbx	      2585	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22
0x4002554	        0x482b4510	             sub rax, qword [rbp + 0x10]	      2585	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22
0x4002558	    0x48bfabaaaaaa	          movabs rdi, 0xaaaaaaaaaaaaaaab	      2585	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22
0x4002562	        0x48c1f804	                              sar rax, 4	      2585	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22
0x4002566	        0x480fafc7	                           imul rax, rdi	      2585	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22
0x400256a	            0x85c0	                           test eax, eax	      2585	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22
0x400256c	     0xf8457f9ffff	                            je 0x4001ec9	      2585	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22
0x4002572	        0x488b43d8	             mov rax, qword [rbx - 0x28]	      2588	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23
0x4002576	        0x480343d0	             add rax, qword [rbx - 0x30]	      2588	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23
0x400257a	          0x4c39c0	                             cmp rax, r8	      2588	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23
0x400257d	     0xf8546f9ffff	                           jne 0x4001ec9	      2588	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23
0x4002583	        0x4c8d7bd0	                   lea r15, [rbx - 0x30]	      2587	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22
0x4002587	          0x4889da	                            mov rdx, rbx	      2590	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23	CALL_11
0x400258a	          0x4889ee	                            mov rsi, rbp	      2590	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23	CALL_11
0x400258d	          0x4c89ff	                            mov rdi, r15	      2590	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23	CALL_11
0x4002590	          0x4c89fb	                            mov rbx, r15	      2591	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23
0x4002593	      0xe878f3ffff	                      call sym.foldMerge	      2590	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23	CALL_11
0x4002598	      0xe92cf9ffff	                           jmp 0x4001ec9	      2590	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23	CALL_11
0x400259d	           0xf1f00	                         nop dword [rax]	      2590	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23	CALL_11
0x40025a0	            0x31d2	                            xor edx, edx	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40025a2	      0xe991fcffff	                           jmp 0x4002238	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40025a7	          0x488b13	                    mov rdx, qword [rbx]	      2755	fold.c	FUNCTION_59	IF_38	IF_39
0x40025aa	        0x488b4b08	                mov rcx, qword [rbx + 8]	      2755	fold.c	FUNCTION_59	IF_38	IF_39
0x40025ae	          0x4c89d8	                            mov rax, r11	      2755	fold.c	FUNCTION_59	IF_38	IF_39
0x40025b1	          0x4829d0	                            sub rax, rdx	      2755	fold.c	FUNCTION_59	IF_38	IF_39
0x40025b4	          0x4839c1	                            cmp rcx, rax	      2755	fold.c	FUNCTION_59	IF_38	IF_39
0x40025b7	     0xf8423fdffff	                            je 0x40022e0	      2755	fold.c	FUNCTION_59	IF_38	IF_39
0x40025bd	      0x488d4c11ff	                lea rcx, [rcx + rdx - 1]	      2757	fold.c	FUNCTION_59	IF_38	IF_39	IF_40
0x40025c2	      0x483b4c2418	            cmp rcx, qword [rsp + 0x18] 	      2757	fold.c	FUNCTION_59	IF_38	IF_39	IF_40
0x40025c7	     0xf8e18010000	                           jle 0x40026e5	      2757	fold.c	FUNCTION_59	IF_38	IF_39	IF_40
0x40025cd	    0x4981fc000000	                              cmp r12, 0	      2762	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x40025d4	        0x400f94c6	                                sete sil	      2762	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x40025d8	    0x4981fc000000	                              cmp r12, 0	      2762	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x40025df	           0xf94c2	                                 sete dl	      2762	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x40025e2	          0x4008d6	                              or sil, dl	      2762	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x40025e5	     0xf85b4020000	                           jne 0x400289f	      2762	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x40025eb	    0x4981fc000000	                              cmp r12, 0	      2762	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x40025f2	     0xf84a7020000	                            je 0x400289f	      2762	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x40025f8	        0x482b5d10	             sub rbx, qword [rbp + 0x10]	      2773	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x40025fc	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	      2773	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4002606	      0x488b4c2418	            mov rcx, qword [rsp + 0x18] 	      2774	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13	CALL_18
0x400260b	          0x4c89da	                            mov rdx, r11	      2774	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13	CALL_18
0x400260e	          0x4889ef	                            mov rdi, rbp	      2774	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13	CALL_18
0x4002611	        0x48c1fb04	                              sar rbx, 4	      2773	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4002615	        0x480fafd8	                           imul rbx, rax	      2773	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4002619	            0x89de	                            mov esi, ebx	      2774	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13	CALL_18
0x400261b	          0x4863db	                         movsxd rbx, ebx	      2775	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x400261e	      0xe81deaffff	                      call sym.foldSplit	      2774	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13	CALL_18
0x4002623	        0x488d1c5b	                  lea rbx, [rbx + rbx*2]	      2775	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4002627	        0x488b5510	            mov rdx, qword [rbp + 0x10] 	      2775	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x400262b	        0x4d8b5e08	                mov r11, qword [r14 + 8]	      2775	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x400262f	        0x48c1e304	                              shl rbx, 4	      2775	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4002633	          0x4801d3	                            add rbx, rdx	      2775	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4002636	      0xe9b2000000	                           jmp 0x40026ed	      2775	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x400263b	        0xc6432902	                mov byte [rbx + 0x29], 2	      2743	fold.c	FUNCTION_59	IF_37
0x400263f	        0x4d8b5e08	                mov r11, qword [r14 + 8]	      2743	fold.c	FUNCTION_59	IF_37
0x4002643	        0x48894308	                mov qword [rbx + 8], rax	      2742	fold.c	FUNCTION_59	IF_37
0x4002647	    0xc70500000000	               mov dword [0x04002651], 1	      2744	fold.c	FUNCTION_59	IF_37
0x4002651	          0x4d89df	                            mov r15, r11	      2744	fold.c	FUNCTION_59	IF_37
0x4002654	      0xe95cfcffff	                           jmp 0x40022b5	      2744	fold.c	FUNCTION_59	IF_37
0x4002659	          0x4c39c0	                             cmp rax, r8	      2519	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17
0x400265c	     0xf8dfc010000	                           jge 0x400285e	      2519	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17
0x4002662	          0x4c89c1	                             mov rcx, r8	      2521	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17	CALL_7
0x4002665	        0x488d7b10	                   lea rdi, [rbx + 0x10]	      2521	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17	CALL_7
0x4002669	          0x4531c0	                            xor r8d, r8d	      2521	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17	CALL_7
0x400266c	          0x4829c1	                            sub rcx, rax	      2521	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17	CALL_7
0x400266f	      0xbaffffff7f	                     mov edx, 0x7fffffff	      2521	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17	CALL_7
0x4002674	            0x31f6	                            xor esi, esi	      2521	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17	CALL_7
0x4002676	      0xe8f5efffff	          call sym.foldMarkAdjustRecurse	      2521	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17	CALL_7
0x400267b	      0x488b7c2408	                mov rdi, qword [rsp + 8]	      2531	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x4002680	          0x488b03	                    mov rax, qword [rbx]	      2531	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x4002683	    0xc70500000000	               mov dword [0x0400268d], 1	      2533	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x400268d	          0x4829f8	                            sub rax, rdi	      2531	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x4002690	          0x48893b	                    mov qword [rbx], rdi	      2532	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x4002693	        0x48014308	                add qword [rbx + 8], rax	      2531	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x4002697	          0x4989f8	                             mov r8, rdi	      2531	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x400269a	      0xe9a0feffff	                           jmp 0x400253f	      2531	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x400269f	        0x488d7b10	                   lea rdi, [rbx + 0x10]	      2749	fold.c	FUNCTION_59	CALL_17
0x40026a3	      0xe848f4ffff	             call sym.foldRemove.part.15	      2749	fold.c	FUNCTION_59	CALL_17
0x40026a8	        0x4d8b5e08	                mov r11, qword [r14 + 8]	      2749	fold.c	FUNCTION_59	CALL_17
0x40026ac	          0x4d89df	                            mov r15, r11	      2749	fold.c	FUNCTION_59	CALL_17
0x40026af	      0xe91efcffff	                           jmp 0x40022d2	      2749	fold.c	FUNCTION_59	CALL_17
0x40026b4	          0x4d39c3	                             cmp r11, r8	      2793	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x40026b7	     0xf8f12020000	                            jg 0x40028cf	      2793	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x40026bd	        0x8b7c2414	            mov edi, dword [rsp + 0x14] 	      2804	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45
0x40026c1	        0x397c2440	            cmp dword [rsp + 0x40], edi 	      2804	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45
0x40026c5	          0x4d89df	                            mov r15, r11	      2804	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45
0x40026c8	     0xf8fc3fcffff	                            jg 0x4002391	      2804	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45
0x40026ce	          0x4c89ea	                            mov rdx, r13	      2807	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45	CALL_20
0x40026d1	          0x4889ee	                            mov rsi, rbp	      2807	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45	CALL_20
0x40026d4	          0x4889df	                            mov rdi, rbx	      2807	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45	CALL_20
0x40026d7	      0xe834f2ffff	                      call sym.foldMerge	      2807	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45	CALL_20
0x40026dc	        0x4d8b7e08	                mov r15, qword [r14 + 8]	      2807	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45	CALL_20
0x40026e0	      0xe9acfcffff	                           jmp 0x4002391	      2807	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45	CALL_20
0x40026e5	        0x488b5510	            mov rdx, qword [rbp + 0x10] 	      2807	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45	CALL_20
0x40026e9	        0x48894308	                mov qword [rbx + 8], rax	      2779	fold.c	FUNCTION_59	IF_38	IF_39	ELSE_14
0x40026ed	    0xc70500000000	               mov dword [0x040026f7], 1	      2780	fold.c	FUNCTION_59	IF_38	IF_39	ELSE_14
0x40026f7	          0x4d89df	                            mov r15, r11	      2780	fold.c	FUNCTION_59	IF_38	IF_39	ELSE_14
0x40026fa	      0xe9e5fbffff	                           jmp 0x40022e4	      2780	fold.c	FUNCTION_59	IF_38	IF_39	ELSE_14
0x40026ff	          0x8b4120	            mov eax, dword [rcx + 0x20] 	      2397	fold.c	FUNCTION_59	IF_1
0x4002702	            0x89c2	                            mov edx, eax	      2398	fold.c	FUNCTION_59	IF_1
0x4002704	            0x29f2	                            sub edx, esi	      2398	fold.c	FUNCTION_59	IF_1
0x4002706	          0x395128	            cmp dword [rcx + 0x28], edx 	      2398	fold.c	FUNCTION_59	IF_1
0x4002709	     0xf8f48010000	                            jg 0x4002857	      2398	fold.c	FUNCTION_59	IF_1
0x400270f	            0x85c0	                           test eax, eax	      2398	fold.c	FUNCTION_59	IF_1
0x4002711	     0xf8e40010000	                           jle 0x4002857	      2398	fold.c	FUNCTION_59	IF_1
0x4002717	          0x486337	                 movsxd rsi, dword [rdi]	      2398	fold.c	FUNCTION_59	IF_1
0x400271a	        0x4d8d4dff	                       lea r9, [r13 - 1]	      2400	fold.c	FUNCTION_59	IF_1	CALL_1
0x400271e	        0x4c8b4710	              mov r8, qword [rdi + 0x10]	      2400	fold.c	FUNCTION_59	IF_1	CALL_1
0x4002722	          0x8d4eff	                      lea ecx, [rsi - 1]	      1132	fold.c	FUNCTION_36
0x4002725	          0x4863c9	                         movsxd rcx, ecx	      1132	fold.c	FUNCTION_36
0x4002728	          0x4885c9	                           test rcx, rcx	      1133	fold.c	FUNCTION_36	WHILE_1
0x400272b	     0xf8845020000	                            js 0x4002976	      1133	fold.c	FUNCTION_36	WHILE_1
0x4002731	            0x31c0	                            xor eax, eax	      1133	fold.c	FUNCTION_36	WHILE_1
0x4002733	            0xeb0b	                           jmp 0x4002740	      1133	fold.c	FUNCTION_36	WHILE_1
0x4002735	          0x8d4aff	                      lea ecx, [rdx - 1]	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4002738	          0x4863c9	                         movsxd rcx, ecx	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x400273b	          0x4839c8	                            cmp rax, rcx	      1133	fold.c	FUNCTION_36	WHILE_1
0x400273e	            0x7f31	                            jg 0x4002771	      1133	fold.c	FUNCTION_36	WHILE_1
0x4002740	        0x488d3c08	                    lea rdi, [rax + rcx]	      1135	fold.c	FUNCTION_36	WHILE_1
0x4002744	          0x48d1ff	                              sar rdi, 1	      1135	fold.c	FUNCTION_36	WHILE_1
0x4002747	        0x488d1c7f	                  lea rbx, [rdi + rdi*2]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x400274b	          0x4889fa	                            mov rdx, rdi	      1135	fold.c	FUNCTION_36	WHILE_1
0x400274e	        0x48c1e304	                              shl rbx, 4	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4002752	          0x4c01c3	                             add rbx, r8	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4002755	          0x488b3b	                    mov rdi, qword [rbx]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4002758	          0x4939f9	                             cmp r9, rdi	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x400275b	            0x7cd8	                            jl 0x4002735	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x400275d	        0x48037b08	                add rdi, qword [rbx + 8]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4002761	          0x4939f9	                             cmp r9, rdi	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4002764	            0x7c16	                            jl 0x400277c	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4002766	          0x83c201	                              add edx, 1	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4002769	          0x4863c2	                         movsxd rax, edx	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x400276c	          0x4839c8	                            cmp rax, rcx	      1133	fold.c	FUNCTION_36	WHILE_1
0x400276f	            0x7ecf	                           jle 0x4002740	      1133	fold.c	FUNCTION_36	WHILE_1
0x4002771	        0x488d1c40	                  lea rbx, [rax + rax*2]	      1133	fold.c	FUNCTION_36	WHILE_1
0x4002775	        0x48c1e304	                              shl rbx, 4	      1133	fold.c	FUNCTION_36	WHILE_1
0x4002779	          0x4c01c3	                             add rbx, r8	      1149	fold.c	FUNCTION_36
0x400277c	        0x488d0476	                  lea rax, [rsi + rsi*2]	      2401	fold.c	FUNCTION_59	IF_1	IF_2
0x4002780	        0x48c1e004	                              shl rax, 4	      2401	fold.c	FUNCTION_59	IF_1	IF_2
0x4002784	          0x4901c0	                             add r8, rax	      2401	fold.c	FUNCTION_59	IF_1	IF_2
0x4002787	          0x4c39c3	                             cmp rbx, r8	      2401	fold.c	FUNCTION_59	IF_1	IF_2
0x400278a	     0xf83c7000000	                           jae 0x4002857	      2401	fold.c	FUNCTION_59	IF_1	IF_2
0x4002790	          0x4c3b2b	                    cmp r13, qword [rbx]	      2381	fold.c	FUNCTION_59
0x4002793	      0xb800000000	                              mov eax, 0	      2381	fold.c	FUNCTION_59
0x4002798	        0x480f4ed8	                         cmovle rbx, rax	      2381	fold.c	FUNCTION_59
0x400279c	      0xe9adf5ffff	                           jmp 0x4001d4e	      2381	fold.c	FUNCTION_59
0x40027a1	     0xf1f80000000	                         nop dword [rax]	      2381	fold.c	FUNCTION_59
0x40027a8	        0x48c1fa04	                              sar rdx, 4	      2620	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x40027ac	    0x49bfabaaaaaa	          movabs r15, 0xaaaaaaaaaaaaaaab	      2620	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x40027b6	          0x4889ef	                            mov rdi, rbp	      2620	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x40027b9	        0x4c0faffa	                           imul r15, rdx	      2620	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x40027bd	          0x4489fe	                           mov esi, r15d	      2620	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x40027c0	      0xe8fbe4ffff	              call sym.foldInsert.part.6	      2620	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x40027c5	          0x83f801	                              cmp eax, 1	      2621	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_25	CALL_14
0x40027c8	     0xf858afaffff	                           jne 0x4002258	      2621	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_25	CALL_14
0x40027ce	          0x4963c7	                        movsxd rax, r15d	      2623	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x40027d1	      0x488b7c2418	            mov rdi, qword [rsp + 0x18] 	      2627	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x40027d6	    0x8bb424900000	            mov esi, dword [rsp + 0x90] 	      2631	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_26
0x40027dd	        0x488d1c40	                  lea rbx, [rax + rax*2]	      2623	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x40027e1	      0x488b442408	                mov rax, qword [rsp + 8]	      2626	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x40027e6	        0x48c1e304	                              shl rbx, 4	      2623	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x40027ea	        0x48035d10	             add rbx, qword [rbp + 0x10]	      2623	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x40027ee	          0x4829c7	                            sub rdi, rax	      2627	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x40027f1	          0x488903	                    mov qword [rbx], rax	      2626	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x40027f4	          0x4889f8	                            mov rax, rdi	      2627	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x40027f7	        0x4883c001	                              add rax, 1	      2627	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x40027fb	            0x85f6	                           test esi, esi	      2631	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_26
0x40027fd	        0x48894308	                mov qword [rbx + 8], rax	      2627	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4002801	            0x7542	                           jne 0x4002845	      2631	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_26
0x4002803	          0x498b06	                    mov rax, qword [r14]	      2633	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_26
0x4002806	    0xc68020010000	               mov byte [rax + 0x120], 1	      2633	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_26
0x400280d	        0xc6432800	                mov byte [rbx + 0x28], 0	      2634	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_26
0x4002811	    0x4981fc000000	                              cmp r12, 0	      2649	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_29
0x4002818	        0xc6432902	                mov byte [rbx + 0x29], 2	      2644	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x400281c	           0xf94c2	                                 sete dl	      2649	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_29
0x400281f	    0x4981fc000000	                              cmp r12, 0	      2649	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_29
0x4002826	           0xf94c0	                                 sete al	      2649	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_29
0x4002829	             0x8c2	                               or dl, al	      2649	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_29
0x400282b	            0x7558	                           jne 0x4002885	      2649	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_29
0x400282d	    0x4981fc000000	                              cmp r12, 0	      2649	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_29
0x4002834	            0x744f	                            je 0x4002885	      2649	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_29
0x4002836	    0xc70500000000	               mov dword [0x04002840], 1	      2651	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4002840	      0xe984f6ffff	                           jmp 0x4001ec9	      2652	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4002845	          0x4585ff	                         test r15d, r15d	      2636	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27
0x4002848	     0xf8ef3000000	                           jle 0x4002941	      2636	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27
0x400284e	         0xfb643f8	               movzx eax, byte [rbx - 8]	      2643	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_11
0x4002852	          0x884328	               mov byte [rbx + 0x28], al	      2643	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_11
0x4002855	            0xebba	                           jmp 0x4002811	      2643	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_11
0x4002857	            0x31db	                            xor ebx, ebx	      2381	fold.c	FUNCTION_59
0x4002859	      0xe9f0f4ffff	                           jmp 0x4001d4e	      2381	fold.c	FUNCTION_59
0x400285e	      0x488b442408	                mov rax, qword [rsp + 8]	      2526	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5	CALL_8
0x4002863	        0x488d7b10	                   lea rdi, [rbx + 0x10]	      2526	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5	CALL_8
0x4002867	      0xb9ffffff7f	                     mov ecx, 0x7fffffff	      2526	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5	CALL_8
0x400286c	            0x31f6	                            xor esi, esi	      2526	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5	CALL_8
0x400286e	          0x4889c2	                            mov rdx, rax	      2526	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5	CALL_8
0x4002871	          0x4c29c2	                             sub rdx, r8	      2526	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5	CALL_8
0x4002874	          0x4929c0	                             sub r8, rax	      2526	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5	CALL_8
0x4002877	        0x4883ea01	                              sub rdx, 1	      2526	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5	CALL_8
0x400287b	      0xe8f0edffff	          call sym.foldMarkAdjustRecurse	      2526	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5	CALL_8
0x4002880	      0xe9f6fdffff	                           jmp 0x400267b	      2526	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5	CALL_8
0x4002885	    0xc74424280100	               mov dword [rsp + 0x28], 1	      2650	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_29
0x400288d	            0xeba7	                           jmp 0x4002836	      2650	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_29
0x400288f	            0x31c0	                            xor eax, eax	      1133	fold.c	FUNCTION_36	WHILE_1
0x4002891	      0xe9fbf5ffff	                           jmp 0x4001e91	      1133	fold.c	FUNCTION_36	WHILE_1
0x4002896	        0x488b5308	                mov rdx, qword [rbx + 8]	      1133	fold.c	FUNCTION_36	WHILE_1
0x400289a	      0xe9fcf9ffff	                           jmp 0x400229b	      1133	fold.c	FUNCTION_36	WHILE_1
0x400289f	        0x48894308	                mov qword [rbx + 8], rax	      2767	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x40028a3	        0x488b5510	            mov rdx, qword [rbp + 0x10] 	      2767	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x40028a7	      0x48894c2418	             mov qword [rsp + 0x18], rcx	      2767	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x40028ac	      0xe93cfeffff	                           jmp 0x40026ed	      2767	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x40028b1	      0x4c3b6c2408	                cmp r13, qword [rsp + 8]	      2557	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_19
0x40028b6	     0xf85ad000000	                           jne 0x4002969	      2557	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_19
0x40028bc	        0x498b4608	                mov rax, qword [r14 + 8]	      2564	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	ELSE_7
0x40028c0	          0x4889c1	                            mov rcx, rax	      2565	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	ELSE_7
0x40028c3	      0xe900fcffff	                           jmp 0x40024c8	      2565	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	ELSE_7
0x40028c8	            0x31db	                            xor ebx, ebx	      2565	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	ELSE_7
0x40028ca	      0xe9c9f7ffff	                           jmp 0x4002098	      2565	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	ELSE_7
0x40028cf	          0x4c89da	                            mov rdx, r11	      2796	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44	CALL_19
0x40028d2	        0x488d7b40	                   lea rdi, [rbx + 0x40]	      2796	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44	CALL_19
0x40028d6	      0xb9ffffff7f	                     mov ecx, 0x7fffffff	      2796	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44	CALL_19
0x40028db	          0x4c29c2	                             sub rdx, r8	      2796	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44	CALL_19
0x40028de	            0x31f6	                            xor esi, esi	      2796	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44	CALL_19
0x40028e0	          0x4d29d8	                             sub r8, r11	      2796	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44	CALL_19
0x40028e3	        0x4883ea01	                              sub rdx, 1	      2796	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44	CALL_19
0x40028e7	      0xe884edffff	          call sym.foldMarkAdjustRecurse	      2796	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44	CALL_19
0x40028ec	        0x4d8b5e08	                mov r11, qword [r14 + 8]	      2799	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x40028f0	    0xc70500000000	               mov dword [0x040028fa], 1	      2801	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x40028fa	          0x4c89d8	                            mov rax, r11	      2799	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x40028fd	        0x482b4330	             sub rax, qword [rbx + 0x30]	      2799	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4002901	        0x4c895b30	             mov qword [rbx + 0x30], r11	      2800	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4002905	        0x48294338	             sub qword [rbx + 0x38], rax	      2799	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4002909	      0xe9affdffff	                           jmp 0x40026bd	      2799	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x400290e	    0xc74424280100	               mov dword [rsp + 0x28], 1	      2579	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_20
0x4002916	      0xe924fcffff	                           jmp 0x400253f	      2579	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_20
0x400291b	        0x488d7b10	                   lea rdi, [rbx + 0x10]	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x400291f	      0x48894c2448	             mov qword [rsp + 0x48], rcx	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x4002924	      0x4889442430	             mov qword [rsp + 0x30], rax	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x4002929	      0xe8c2f1ffff	             call sym.foldRemove.part.15	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x400292e	        0x488b7d10	            mov rdi, qword [rbp + 0x10] 	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x4002932	      0x488b4c2448	            mov rcx, qword [rsp + 0x48] 	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x4002937	      0x488b442430	            mov rax, qword [rsp + 0x30] 	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x400293c	      0xe99cfbffff	                           jmp 0x40024dd	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x4002941	     0xfb684249000	           movzx eax, byte [rsp + 0x90] 	      2638	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27
0x4002949	    0x83bc24900000	               cmp dword [rsp + 0x90], 2	      2639	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27	IF_28
0x4002951	          0x884328	               mov byte [rbx + 0x28], al	      2638	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27
0x4002954	     0xf84b7feffff	                            je 0x4002811	      2639	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27	IF_28
0x400295a	          0x498b06	                    mov rax, qword [r14]	      2640	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27	IF_28
0x400295d	    0xc68020010000	               mov byte [rax + 0x120], 1	      2640	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27	IF_28
0x4002964	      0xe9a8feffff	                           jmp 0x4002811	      2640	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27	IF_28
0x4002969	      0x488b4c2408	                mov rcx, qword [rsp + 8]	      2640	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27	IF_28
0x400296e	          0x4c89e8	                            mov rax, r13	      2640	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27	IF_28
0x4002971	      0xe952fbffff	                           jmp 0x40024c8	      2640	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27	IF_28
0x4002976	            0x31db	                            xor ebx, ebx	      1133	fold.c	FUNCTION_36	WHILE_1
0x4002978	      0xe9fcfdffff	                           jmp 0x4002779	      1133	fold.c	FUNCTION_36	WHILE_1
0x400297d	            0x31d2	                            xor edx, edx	      2500	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x400297f	      0xe994f8ffff	                           jmp 0x4002218	      2500	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4002984	      0x4c8b5c2430	            mov r11, qword [rsp + 0x30] 	      2453	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x4002989	      0xe9a0f4ffff	                           jmp 0x4001e2e	      2453	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x400298e	      0x488b442430	            mov rax, qword [rsp + 0x30] 	      2453	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x4002993	      0xe914f9ffff	                           jmp 0x40022ac	      2453	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
deleteFold	FOR,1:functions,0:IF,10:ELSE,3:CALL,13:DO,0:SWITCH,0:WHILE,1	183
0x4004690	            0x4157	                                push r15	       705	fold.c	FUNCTION_26
0x4004692	            0x4156	                                push r14	       705	fold.c	FUNCTION_26
0x4004694	            0x4155	                                push r13	       705	fold.c	FUNCTION_26
0x4004696	            0x4154	                                push r12	       705	fold.c	FUNCTION_26
0x4004698	          0x4989fc	                            mov r12, rdi	       705	fold.c	FUNCTION_26
0x400469b	              0x55	                                push rbp	       705	fold.c	FUNCTION_26
0x400469c	              0x53	                                push rbx	       705	fold.c	FUNCTION_26
0x400469d	        0x4883ec48	                           sub rsp, 0x48	       705	fold.c	FUNCTION_26
0x40046a1	    0x488b3d000000	            mov rdi, qword [0x040046a8] 	       720	fold.c	FUNCTION_26	CALL_1
0x40046a8	    0x64488b042528	                mov rax, qword fs:[0x28]	       705	fold.c	FUNCTION_26
0x40046b1	      0x4889442438	             mov qword [rsp + 0x38], rax	       705	fold.c	FUNCTION_26
0x40046b6	            0x31c0	                            xor eax, eax	       705	fold.c	FUNCTION_26
0x40046b8	      0x4889742420	             mov qword [rsp + 0x20], rsi	       705	fold.c	FUNCTION_26
0x40046bd	        0x89542428	             mov dword [rsp + 0x28], edx	       705	fold.c	FUNCTION_26
0x40046c1	    0x80bf21010000	               cmp byte [rdi + 0x121], 0	      1187	fold.c	FUNCTION_38	IF_1
0x40046c8	        0x894c242c	             mov dword [rsp + 0x2c], ecx	       705	fold.c	FUNCTION_26
0x40046cc	    0xc74424340000	               mov dword [rsp + 0x34], 0	       712	fold.c	FUNCTION_26
0x40046d4	            0x7405	                            je 0x40046db	      1187	fold.c	FUNCTION_38	IF_1
0x40046d6	      0xe895eaffff	            call sym.checkupdate.part.17	      1187	fold.c	FUNCTION_38	IF_1
0x40046db	      0x4c3b642420	            cmp r12, qword [rsp + 0x20] 	       722	fold.c	FUNCTION_26	WHILE_1
0x40046e0	     0xf8f52020000	                            jg 0x4004938	       722	fold.c	FUNCTION_26	WHILE_1
0x40046e6	          0x4531ed	                          xor r13d, r13d	       722	fold.c	FUNCTION_26	WHILE_1
0x40046e9	    0x48c704240000	                      mov qword [rsp], 0	       722	fold.c	FUNCTION_26	WHILE_1
0x40046f1	    0x48c7442410ff	     mov qword [rsp + 0x10], 0x7fffffff 	       722	fold.c	FUNCTION_26	WHILE_1
0x40046fa	    0xc74424080000	                  mov dword [rsp + 8], 0	       722	fold.c	FUNCTION_26	WHILE_1
0x4004702	            0x31ed	                            xor ebp, ebp	       722	fold.c	FUNCTION_26	WHILE_1
0x4004704	          0x4531c9	                            xor r9d, r9d	       722	fold.c	FUNCTION_26	WHILE_1
0x4004707	          0x4d89ee	                            mov r14, r13	       757	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_5
0x400470a	    0x488b05000000	            mov rax, qword [0x04004711] 	       725	fold.c	FUNCTION_26	WHILE_1
0x4004711	    0xc74424300000	               mov dword [rsp + 0x30], 0	       728	fold.c	FUNCTION_26	WHILE_1
0x4004719	          0x4531ff	                          xor r15d, r15d	       727	fold.c	FUNCTION_26	WHILE_1
0x400471c	            0x31ff	                            xor edi, edi	       726	fold.c	FUNCTION_26	WHILE_1
0x400471e	    0x4c8da8080100	                  lea r13, [rax + 0x108]	       725	fold.c	FUNCTION_26	WHILE_1
0x4004725	           0xf1f00	                         nop dword [rax]	       725	fold.c	FUNCTION_26	WHILE_1
0x4004728	        0x418b4500	                    mov eax, dword [r13]	      1132	fold.c	FUNCTION_36
0x400472c	          0x4c89e6	                            mov rsi, r12	       731	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_1	CALL_2
0x400472f	        0x4d8b4510	              mov r8, qword [r13 + 0x10]	       731	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_1	CALL_2
0x4004733	          0x4c29fe	                            sub rsi, r15	       731	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_1	CALL_2
0x4004736	          0x8d48ff	                      lea ecx, [rax - 1]	      1132	fold.c	FUNCTION_36
0x4004739	          0x4863c9	                         movsxd rcx, ecx	      1132	fold.c	FUNCTION_36
0x400473c	          0x4885c9	                           test rcx, rcx	      1133	fold.c	FUNCTION_36	WHILE_1
0x400473f	            0x7844	                            js 0x4004785	      1133	fold.c	FUNCTION_36	WHILE_1
0x4004741	            0x31d2	                            xor edx, edx	      1133	fold.c	FUNCTION_36	WHILE_1
0x4004743	            0xeb0e	                           jmp 0x4004753	      1133	fold.c	FUNCTION_36	WHILE_1
0x4004745	           0xf1f00	                         nop dword [rax]	      1133	fold.c	FUNCTION_36	WHILE_1
0x4004748	          0x83e801	                              sub eax, 1	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x400474b	          0x4863c8	                         movsxd rcx, eax	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x400474e	          0x4839ca	                            cmp rdx, rcx	      1133	fold.c	FUNCTION_36	WHILE_1
0x4004751	            0x7f32	                            jg 0x4004785	      1133	fold.c	FUNCTION_36	WHILE_1
0x4004753	        0x488d0411	                    lea rax, [rcx + rdx]	      1135	fold.c	FUNCTION_36	WHILE_1
0x4004757	          0x48d1f8	                              sar rax, 1	      1135	fold.c	FUNCTION_36	WHILE_1
0x400475a	        0x488d1c40	                  lea rbx, [rax + rax*2]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x400475e	        0x48c1e304	                              shl rbx, 4	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4004762	          0x4c01c3	                             add rbx, r8	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4004765	          0x4c8b13	                    mov r10, qword [rbx]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4004768	          0x4c39d6	                            cmp rsi, r10	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x400476b	            0x7cdb	                            jl 0x4004748	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x400476d	        0x4c035308	                add r10, qword [rbx + 8]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4004771	          0x4c39d6	                            cmp rsi, r10	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4004774	     0xf8cf6000000	                            jl 0x4004870	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x400477a	          0x83c001	                              add eax, 1	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x400477d	          0x4863d0	                         movsxd rdx, eax	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4004780	          0x4839ca	                            cmp rdx, rcx	      1133	fold.c	FUNCTION_36	WHILE_1
0x4004783	            0x7ece	                           jle 0x4004753	      1133	fold.c	FUNCTION_36	WHILE_1
0x4004785	        0x4983c401	                              add r12, 1	       750	fold.c	FUNCTION_26	WHILE_1	IF_3
0x4004789	          0x4885ff	                           test rdi, rdi	       748	fold.c	FUNCTION_26	WHILE_1	IF_3
0x400478c	     0xf8484000000	                            je 0x4004816	       748	fold.c	FUNCTION_26	WHILE_1	IF_3
0x4004792	          0x498b06	                    mov rax, qword [r14]	       754	fold.c	FUNCTION_26	WHILE_1	ELSE_1
0x4004795	    0x488b15000000	            mov rdx, qword [0x0400479c] 	       756	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_4
0x400479c	          0x4989c4	                            mov r12, rax	       754	fold.c	FUNCTION_26	WHILE_1	ELSE_1
0x400479f	        0x4d036608	                add r12, qword [r14 + 8]	       754	fold.c	FUNCTION_26	WHILE_1	ELSE_1
0x40047a3	    0x488b8af80100	           mov rcx, qword [rdx + 0x1f8] 	       307	fold.c	FUNCTION_8
0x40047aa	          0x4d01cc	                             add r12, r9	       754	fold.c	FUNCTION_26	WHILE_1	ELSE_1
0x40047ad	        0x80790375	                cmp byte [rcx + 3], 0x75	       756	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_4
0x40047b1	     0xf841c010000	                            je 0x40048d3	       756	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_4
0x40047b7	      0x488b7c2410	            mov rdi, qword [rsp + 0x10] 	       756	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_4
0x40047bc	          0x4c01c8	                             add rax, r9	       761	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_5
0x40047bf	        0x8b742408	                mov esi, dword [rsp + 8]	       765	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_7
0x40047c3	          0x4839c7	                            cmp rdi, rax	       765	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_7
0x40047c6	        0x480f4ec7	                         cmovle rax, rdi	       765	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_7
0x40047ca	      0x4889442410	             mov qword [rsp + 0x10], rax	       765	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_7
0x40047cf	        0x488b0424	                    mov rax, qword [rsp]	       765	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_7
0x40047d3	          0x4c39e0	                            cmp rax, r12	       765	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_7
0x40047d6	        0x490f4cc4	                          cmovl rax, r12	       765	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_7
0x40047da	            0x85f6	                           test esi, esi	       765	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_7
0x40047dc	        0x48890424	                    mov qword [rsp], rax	       765	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_7
0x40047e0	     0xf84d2000000	                            je 0x40048b8	       765	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_7
0x40047e6	        0x8b742428	            mov esi, dword [rsp + 0x28] 	       767	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	CALL_7
0x40047ea	          0x4c89ca	                             mov rdx, r9	       767	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	CALL_7
0x40047ed	          0x4c89f7	                            mov rdi, r14	       767	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	CALL_7
0x40047f0	      0x4c894c2408	                 mov qword [rsp + 8], r9	       767	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	CALL_7
0x40047f5	      0xe8e6bcffff	              call sym.deleteFoldMarkers	       767	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	CALL_7
0x40047fa	      0x4c8b4c2408	                 mov r9, qword [rsp + 8]	       767	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	CALL_7
0x40047ff	      0x4c894c2418	              mov qword [rsp + 0x18], r9	       767	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	CALL_7
0x4004804	      0xe800000000	                          call 0x4004809	       772	fold.c	FUNCTION_26	WHILE_1	ELSE_1	CALL_8
0x4004809	      0x4c8b4c2418	              mov r9, qword [rsp + 0x18]	       769	fold.c	FUNCTION_26	WHILE_1	ELSE_1
0x400480e	    0xc74424080100	                  mov dword [rsp + 8], 1	       769	fold.c	FUNCTION_26	WHILE_1	ELSE_1
0x4004816	      0x4c39642420	            cmp qword [rsp + 0x20], r12 	       722	fold.c	FUNCTION_26	WHILE_1
0x400481b	     0xf8de9feffff	                           jge 0x400470a	       722	fold.c	FUNCTION_26	WHILE_1
0x4004821	        0x8b4c2408	                mov ecx, dword [rsp + 8]	       775	fold.c	FUNCTION_26	IF_8
0x4004825	            0x85c9	                           test ecx, ecx	       775	fold.c	FUNCTION_26	IF_8
0x4004827	     0xf84d7000000	                            je 0x4004904	       775	fold.c	FUNCTION_26	IF_8
0x400482d	      0xe800000000	                          call 0x4004832	       784	fold.c	FUNCTION_26	CALL_12
0x4004832	        0x488b0424	                    mov rax, qword [rsp]	       786	fold.c	FUNCTION_26	IF_10
0x4004836	          0x4885c0	                           test rax, rax	       786	fold.c	FUNCTION_26	IF_10
0x4004839	            0x7411	                            je 0x400484c	       786	fold.c	FUNCTION_26	IF_10
0x400483b	      0x488b7c2410	            mov rdi, qword [rsp + 0x10] 	       787	fold.c	FUNCTION_26	CALL_13
0x4004840	            0x31c9	                            xor ecx, ecx	       787	fold.c	FUNCTION_26	CALL_13
0x4004842	          0x4889c2	                            mov rdx, rax	       787	fold.c	FUNCTION_26	CALL_13
0x4004845	            0x31f6	                            xor esi, esi	       787	fold.c	FUNCTION_26	CALL_13
0x4004847	      0xe800000000	                          call 0x400484c	       787	fold.c	FUNCTION_26	CALL_13
0x400484c	      0x488b442438	            mov rax, qword [rsp + 0x38] 	       788	fold.c	FUNCTION_26
0x4004851	    0x644833042528	                xor rax, qword fs:[0x28]	       788	fold.c	FUNCTION_26
0x400485a	     0xf8510010000	                           jne 0x4004970	       788	fold.c	FUNCTION_26
0x4004860	        0x4883c448	                           add rsp, 0x48	       788	fold.c	FUNCTION_26
0x4004864	              0x5b	                                 pop rbx	       788	fold.c	FUNCTION_26
0x4004865	              0x5d	                                 pop rbp	       788	fold.c	FUNCTION_26
0x4004866	            0x415c	                                 pop r12	       788	fold.c	FUNCTION_26
0x4004868	            0x415d	                                 pop r13	       788	fold.c	FUNCTION_26
0x400486a	            0x415e	                                 pop r14	       788	fold.c	FUNCTION_26
0x400486c	            0x415f	                                 pop r15	       788	fold.c	FUNCTION_26
0x400486e	              0xc3	                                     ret	       788	fold.c	FUNCTION_26
0x400486f	              0x90	                                     nop	       788	fold.c	FUNCTION_26
0x4004870	    0x488b3d000000	            mov rdi, qword [0x04004877] 	       739	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2	CALL_3
0x4004877	      0x4c8d442434	                    lea r8, [rsp + 0x34]	       739	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2	CALL_3
0x400487c	      0x488d542430	                   lea rdx, [rsp + 0x30]	       739	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2	CALL_3
0x4004881	          0x4d89f9	                             mov r9, r15	       739	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2	CALL_3
0x4004884	            0x89e9	                            mov ecx, ebp	       739	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2	CALL_3
0x4004886	          0x4889de	                            mov rsi, rbx	       739	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2	CALL_3
0x4004889	      0xe832b8ffff	                   call sym.check_closed	       739	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2	CALL_3
0x400488e	            0x85c0	                           test eax, eax	       739	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2	CALL_3
0x4004890	            0x7518	                           jne 0x40048aa	       739	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2	CALL_3
0x4004892	          0x4d89f9	                             mov r9, r15	       739	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2	CALL_3
0x4004895	          0x4c89ef	                            mov rdi, r13	       747	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x4004898	          0x83c501	                              add ebp, 1	       746	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x400489b	          0x4c033b	                    add r15, qword [rbx]	       745	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x400489e	          0x4989de	                            mov r14, rbx	       747	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x40048a1	        0x4c8d6b10	                   lea r13, [rbx + 0x10]	       744	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x40048a5	      0xe97efeffff	                           jmp 0x4004728	       747	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x40048aa	          0x4d89f9	                             mov r9, r15	       747	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x40048ad	          0x4989de	                            mov r14, rbx	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40048b0	          0x4c89ef	                            mov rdi, r13	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40048b3	      0xe9dafeffff	                           jmp 0x4004792	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40048b8	    0x488dba280200	                  lea rdi, [rdx + 0x228]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40048bf	      0x4c894c2408	                 mov qword [rsp + 8], r9	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40048c4	      0xe867c4ffff	             call sym.parseMarker.isra.8	       766	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	CALL_6
0x40048c9	      0x4c8b4c2408	                 mov r9, qword [rsp + 8]	       766	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	CALL_6
0x40048ce	      0xe913ffffff	                           jmp 0x40047e6	       766	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	CALL_6
0x40048d3	          0x4c89f6	                            mov rsi, r14	       757	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_5
0x40048d6	        0x482b7710	             sub rsi, qword [rdi + 0x10]	       757	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_5
0x40048da	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	       757	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_5
0x40048e4	        0x8b542428	            mov edx, dword [rsp + 0x28] 	       757	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_5
0x40048e8	      0x4c894c2408	                 mov qword [rsp + 8], r9	       757	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_5
0x40048ed	        0x48c1fe04	                              sar rsi, 4	       757	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_5
0x40048f1	        0x480faff0	                           imul rsi, rax	       757	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_5
0x40048f5	      0xe816ccffff	                call sym.deleteFoldEntry	       757	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_5
0x40048fa	      0x4c8b4c2408	                 mov r9, qword [rsp + 8]	       757	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_5
0x40048ff	      0xe9fbfeffff	                           jmp 0x40047ff	       757	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_5
0x4004904	      0xba05000000	                              mov edx, 5	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x4004909	            0x31ff	                            xor edi, edi	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x400490b	      0xbe00000000	                              mov esi, 0	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x4004910	      0xe800000000	                          call 0x4004915	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x4004915	          0x4889c7	                            mov rdi, rax	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x4004918	      0xe800000000	                          call 0x400491d	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x400491d	        0x8b54242c	            mov edx, dword [rsp + 0x2c] 	       779	fold.c	FUNCTION_26	IF_8	IF_9
0x4004921	            0x85d2	                           test edx, edx	       779	fold.c	FUNCTION_26	IF_8	IF_9
0x4004923	     0xf8409ffffff	                            je 0x4004832	       779	fold.c	FUNCTION_26	IF_8	IF_9
0x4004929	      0xbf14000000	                           mov edi, 0x14	       780	fold.c	FUNCTION_26	IF_8	CALL_11
0x400492e	      0xe800000000	                          call 0x4004933	       780	fold.c	FUNCTION_26	IF_8	CALL_11
0x4004933	      0xe9fafeffff	                           jmp 0x4004832	       780	fold.c	FUNCTION_26	IF_8	CALL_11
0x4004938	            0x31ff	                            xor edi, edi	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x400493a	      0xba05000000	                              mov edx, 5	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x400493f	      0xbe00000000	                              mov esi, 0	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x4004944	      0xe800000000	                          call 0x4004949	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x4004949	          0x4889c7	                            mov rdi, rax	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x400494c	      0xe800000000	                          call 0x4004951	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x4004951	        0x8b44242c	            mov eax, dword [rsp + 0x2c] 	       779	fold.c	FUNCTION_26	IF_8	IF_9
0x4004955	            0x85c0	                           test eax, eax	       779	fold.c	FUNCTION_26	IF_8	IF_9
0x4004957	     0xf84effeffff	                            je 0x400484c	       779	fold.c	FUNCTION_26	IF_8	IF_9
0x400495d	    0x48c7442410ff	     mov qword [rsp + 0x10], 0x7fffffff 	       779	fold.c	FUNCTION_26	IF_8	IF_9
0x4004966	    0x48c704240000	                      mov qword [rsp], 0	       779	fold.c	FUNCTION_26	IF_8	IF_9
0x400496e	            0xebb9	                           jmp 0x4004929	       779	fold.c	FUNCTION_26	IF_8	IF_9
0x4004970	      0xe800000000	                          call 0x4004975	       788	fold.c	FUNCTION_26
deleteFoldRecurse	FOR,1:functions,0:IF,0:ELSE,0:CALL,2:DO,0:SWITCH,0:WHILE,0	23
0x40014c0	            0x4154	                                push r12	      1453	fold.c	FUNCTION_44
0x40014c2	              0x55	                                push rbp	      1453	fold.c	FUNCTION_44
0x40014c3	            0x31ed	                            xor ebp, ebp	      1453	fold.c	FUNCTION_44
0x40014c5	              0x53	                                push rbx	      1453	fold.c	FUNCTION_44
0x40014c6	            0x8b07	                    mov eax, dword [rdi]	      1456	fold.c	FUNCTION_44	FOR_1
0x40014c8	            0x31db	                            xor ebx, ebx	      1456	fold.c	FUNCTION_44	FOR_1
0x40014ca	          0x4989fc	                            mov r12, rdi	      1453	fold.c	FUNCTION_44
0x40014cd	            0x85c0	                           test eax, eax	      1456	fold.c	FUNCTION_44	FOR_1
0x40014cf	            0x7e25	                           jle 0x40014f6	      1456	fold.c	FUNCTION_44	FOR_1
0x40014d1	     0xf1f80000000	                         nop dword [rax]	      1456	fold.c	FUNCTION_44	FOR_1
0x40014d8	          0x4889ef	                            mov rdi, rbp	      1457	fold.c	FUNCTION_44	CALL_1
0x40014db	      0x49037c2410	             add rdi, qword [r12 + 0x10]	      1457	fold.c	FUNCTION_44	CALL_1
0x40014e0	          0x83c301	                              add ebx, 1	      1456	fold.c	FUNCTION_44	FOR_1
0x40014e3	        0x4883c530	                           add rbp, 0x30	      1456	fold.c	FUNCTION_44	FOR_1
0x40014e7	        0x4883c710	                           add rdi, 0x10	      1457	fold.c	FUNCTION_44	CALL_1
0x40014eb	      0xe800000000	                          call 0x40014f0	      1457	fold.c	FUNCTION_44	CALL_1
0x40014f0	        0x41391c24	                    cmp dword [r12], ebx	      1456	fold.c	FUNCTION_44	FOR_1
0x40014f4	            0x7fe2	                            jg 0x40014d8	      1456	fold.c	FUNCTION_44	FOR_1
0x40014f6	              0x5b	                                 pop rbx	      1459	fold.c	FUNCTION_44
0x40014f7	          0x4c89e7	                            mov rdi, r12	      1458	fold.c	FUNCTION_44	CALL_2
0x40014fa	              0x5d	                                 pop rbp	      1459	fold.c	FUNCTION_44
0x40014fb	            0x415c	                                 pop r12	      1459	fold.c	FUNCTION_44
0x40014fd	      0xe900000000	                           jmp 0x4001502	      1458	fold.c	FUNCTION_44	CALL_2
deleteFoldMarkers	FOR,1:functions,0:IF,1:ELSE,0:CALL,3:DO,0:SWITCH,0:WHILE,0	42
0x40004e0	            0x4155	                                push r13	      1801	fold.c	FUNCTION_54
0x40004e2	            0x4154	                                push r12	      1801	fold.c	FUNCTION_54
0x40004e4	          0x4989d5	                            mov r13, rdx	      1801	fold.c	FUNCTION_54
0x40004e7	              0x55	                                push rbp	      1801	fold.c	FUNCTION_54
0x40004e8	              0x53	                                push rbx	      1801	fold.c	FUNCTION_54
0x40004e9	          0x4889fb	                            mov rbx, rdi	      1801	fold.c	FUNCTION_54
0x40004ec	        0x4883ec08	                              sub rsp, 8	      1801	fold.c	FUNCTION_54
0x40004f0	            0x85f6	                           test esi, esi	      1804	fold.c	FUNCTION_54	IF_1
0x40004f2	            0x742f	                            je 0x4000523	      1804	fold.c	FUNCTION_54	IF_1
0x40004f4	          0x8b4710	            mov eax, dword [rdi + 0x10] 	      1805	fold.c	FUNCTION_54	IF_1	FOR_1
0x40004f7	            0x85c0	                           test eax, eax	      1805	fold.c	FUNCTION_54	IF_1	FOR_1
0x40004f9	            0x7e28	                           jle 0x4000523	      1805	fold.c	FUNCTION_54	IF_1	FOR_1
0x40004fb	          0x4531e4	                          xor r12d, r12d	      1805	fold.c	FUNCTION_54	IF_1	FOR_1
0x40004fe	            0x31ed	                            xor ebp, ebp	      1805	fold.c	FUNCTION_54	IF_1	FOR_1
0x4000500	          0x4c89e7	                            mov rdi, r12	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x4000503	          0x4c89ea	                            mov rdx, r13	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x4000506	        0x48037b20	             add rdi, qword [rbx + 0x20]	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x400050a	          0x480313	                    add rdx, qword [rbx]	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x400050d	      0xbe01000000	                              mov esi, 1	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x4000512	          0x83c501	                              add ebp, 1	      1805	fold.c	FUNCTION_54	IF_1	FOR_1
0x4000515	        0x4983c430	                           add r12, 0x30	      1805	fold.c	FUNCTION_54	IF_1	FOR_1
0x4000519	      0xe8c2ffffff	              call sym.deleteFoldMarkers	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x400051e	          0x396b10	            cmp dword [rbx + 0x10], ebp 	      1805	fold.c	FUNCTION_54	IF_1	FOR_1
0x4000521	            0x7fdd	                            jg 0x4000500	      1805	fold.c	FUNCTION_54	IF_1	FOR_1
0x4000523	    0x488b05000000	            mov rax, qword [0x0400052a] 	      1808	fold.c	FUNCTION_54	CALL_2
0x400052a	          0x4c89ef	                            mov rdi, r13	      1808	fold.c	FUNCTION_54	CALL_2
0x400052d	          0x48033b	                    add rdi, qword [rbx]	      1808	fold.c	FUNCTION_54	CALL_2
0x4000530	    0x8b1500000000	            mov edx, dword [0x04000536] 	      1808	fold.c	FUNCTION_54	CALL_2
0x4000536	    0x488bb0280200	           mov rsi, qword [rax + 0x228] 	      1808	fold.c	FUNCTION_54	CALL_2
0x400053d	      0xe81efeffff	                  call sym.foldDelMarker	      1808	fold.c	FUNCTION_54	CALL_2
0x4000542	          0x4c89ef	                            mov rdi, r13	      1809	fold.c	FUNCTION_54	CALL_3
0x4000545	          0x48033b	                    add rdi, qword [rbx]	      1809	fold.c	FUNCTION_54	CALL_3
0x4000548	    0x8b1500000000	            mov edx, dword [0x0400054e] 	      1809	fold.c	FUNCTION_54	CALL_3
0x400054e	        0x48037b08	                add rdi, qword [rbx + 8]	      1809	fold.c	FUNCTION_54	CALL_3
0x4000552	    0x488b35000000	            mov rsi, qword [0x04000559] 	      1809	fold.c	FUNCTION_54	CALL_3
0x4000559	        0x4883c408	                              add rsp, 8	      1811	fold.c	FUNCTION_54
0x400055d	              0x5b	                                 pop rbx	      1811	fold.c	FUNCTION_54
0x400055e	              0x5d	                                 pop rbp	      1811	fold.c	FUNCTION_54
0x400055f	            0x415c	                                 pop r12	      1811	fold.c	FUNCTION_54
0x4000561	            0x415d	                                 pop r13	      1811	fold.c	FUNCTION_54
0x4000563	        0x4883ef01	                              sub rdi, 1	      1809	fold.c	FUNCTION_54	CALL_3
0x4000567	      0xe9f4fdffff	                   jmp sym.foldDelMarker	      1809	fold.c	FUNCTION_54	CALL_3
foldInitWin	FOR,0:functions,0:IF,0:ELSE,0:CALL,1:DO,0:SWITCH,0:WHILE,0	4
0x4001370	    0x4881c7080100	                          add rdi, 0x108	      1002	fold.c	ELSE_5	FUNCTION_31	CALL_1
0x4001377	      0xba0a000000	                            mov edx, 0xa	      1002	fold.c	ELSE_5	FUNCTION_31	CALL_1
0x400137c	      0xbe30000000	                           mov esi, 0x30	      1002	fold.c	ELSE_5	FUNCTION_31	CALL_1
0x4001381	      0xe900000000	                           jmp 0x4001386	      1002	fold.c	ELSE_5	FUNCTION_31	CALL_1
clearFolding	FOR,0:functions,0:IF,0:ELSE,0:CALL,1:DO,0:SWITCH,0:WHILE,0	7
0x4004980	              0x53	                                push rbx	       796	fold.c	FUNCTION_27
0x4004981	          0x4889fb	                            mov rbx, rdi	       796	fold.c	FUNCTION_27
0x4004984	    0x488dbf080100	                  lea rdi, [rdi + 0x108]	       797	fold.c	FUNCTION_27	CALL_1
0x400498b	      0xe800000000	                          call 0x4004990	       797	fold.c	FUNCTION_27	CALL_1
0x4004990	    0xc68321010000	               mov byte [rbx + 0x121], 0	       798	fold.c	FUNCTION_27
0x4004997	              0x5b	                                 pop rbx	       799	fold.c	FUNCTION_27
0x4004998	              0xc3	                                     ret	       799	fold.c	FUNCTION_27
foldMoveRange	FOR,2:functions,0:IF,12:ELSE,4:CALL,24:DO,0:SWITCH,0:WHILE,0	230
0x4005140	            0x4157	                                push r15	      3036	fold.c	FUNCTION_65
0x4005142	            0x4156	                                push r14	      3036	fold.c	FUNCTION_65
0x4005144	          0x4989d6	                            mov r14, rdx	      3036	fold.c	FUNCTION_65
0x4005147	            0x4155	                                push r13	      3036	fold.c	FUNCTION_65
0x4005149	            0x4154	                                push r12	      3036	fold.c	FUNCTION_65
0x400514b	          0x4989cc	                            mov r12, rcx	      3036	fold.c	FUNCTION_65
0x400514e	              0x55	                                push rbp	      3036	fold.c	FUNCTION_65
0x400514f	              0x53	                                push rbx	      3036	fold.c	FUNCTION_65
0x4005150	          0x4889fd	                            mov rbp, rdi	      3036	fold.c	FUNCTION_65
0x4005153	        0x4883ec28	                           sub rsp, 0x28	      3036	fold.c	FUNCTION_65
0x4005157	    0x660f1f840000	                    nop word [rax + rax]	      3036	fold.c	FUNCTION_65
0x4005160	        0x4c634d00	                  movsxd r9, dword [rbp]	      3036	fold.c	FUNCTION_65
0x4005164	          0x4d89f5	                            mov r13, r14	      3038	fold.c	FUNCTION_65
0x4005167	        0x488d7eff	                      lea rdi, [rsi - 1]	      3040	fold.c	FUNCTION_65	CALL_1
0x400516b	          0x4929f5	                            sub r13, rsi	      3038	fold.c	FUNCTION_65
0x400516e	        0x4c8b4510	              mov r8, qword [rbp + 0x10]	      3038	fold.c	FUNCTION_65
0x4005172	        0x4983c501	                              add r13, 1	      3038	fold.c	FUNCTION_65
0x4005176	        0x418d51ff	                       lea edx, [r9 - 1]	      1132	fold.c	FUNCTION_36
0x400517a	          0x4863d2	                         movsxd rdx, edx	      1132	fold.c	FUNCTION_36
0x400517d	          0x4885d2	                           test rdx, rdx	      1133	fold.c	FUNCTION_36	WHILE_1
0x4005180	     0xf88e5000000	                            js 0x400526b	      1133	fold.c	FUNCTION_36	WHILE_1
0x4005186	          0x4531d2	                          xor r10d, r10d	      1133	fold.c	FUNCTION_36	WHILE_1
0x4005189	            0xeb10	                           jmp 0x400519b	      1133	fold.c	FUNCTION_36	WHILE_1
0x400518b	       0xf1f440000	                   nop dword [rax + rax]	      1133	fold.c	FUNCTION_36	WHILE_1
0x4005190	          0x83e801	                              sub eax, 1	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4005193	          0x4863d0	                         movsxd rdx, eax	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4005196	          0x4939d2	                            cmp r10, rdx	      1133	fold.c	FUNCTION_36	WHILE_1
0x4005199	            0x7f35	                            jg 0x40051d0	      1133	fold.c	FUNCTION_36	WHILE_1
0x400519b	        0x4a8d0412	                    lea rax, [rdx + r10]	      1135	fold.c	FUNCTION_36	WHILE_1
0x400519f	          0x48d1f8	                              sar rax, 1	      1135	fold.c	FUNCTION_36	WHILE_1
0x40051a2	        0x488d1c40	                  lea rbx, [rax + rax*2]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40051a6	        0x48c1e304	                              shl rbx, 4	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40051aa	          0x4c01c3	                             add rbx, r8	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40051ad	          0x488b0b	                    mov rcx, qword [rbx]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40051b0	          0x4839cf	                            cmp rdi, rcx	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40051b3	            0x7cdb	                            jl 0x4005190	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40051b5	          0x4989ca	                            mov r10, rcx	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x40051b8	        0x4c035308	                add r10, qword [rbx + 8]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x40051bc	          0x4c39d7	                            cmp rdi, r10	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x40051bf	     0xf8c8b000000	                            jl 0x4005250	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x40051c5	          0x83c001	                              add eax, 1	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x40051c8	          0x4c63d0	                         movsxd r10, eax	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x40051cb	          0x4939d2	                            cmp r10, rdx	      1133	fold.c	FUNCTION_36	WHILE_1
0x40051ce	            0x7ecb	                           jle 0x400519b	      1133	fold.c	FUNCTION_36	WHILE_1
0x40051d0	        0x4b8d1c52	                  lea rbx, [r10 + r10*2]	      1133	fold.c	FUNCTION_36	WHILE_1
0x40051d4	        0x48c1e304	                              shl rbx, 4	      1133	fold.c	FUNCTION_36	WHILE_1
0x40051d8	          0x4c01c3	                             add rbx, r8	      1149	fold.c	FUNCTION_36
0x40051db	        0x4b8d1449	                    lea rdx, [r9 + r9*2]	      3074	fold.c	FUNCTION_65	IF_4	CALL_7
0x40051df	        0x48c1e204	                              shl rdx, 4	      3074	fold.c	FUNCTION_65	IF_4	CALL_7
0x40051e3	          0x4c01c2	                             add rdx, r8	      3074	fold.c	FUNCTION_65	IF_4	CALL_7
0x40051e6	          0x4839da	                            cmp rdx, rbx	      3074	fold.c	FUNCTION_65	IF_4	CALL_7
0x40051e9	            0x7654	                           jbe 0x400523f	      3074	fold.c	FUNCTION_65	IF_4	CALL_7
0x40051eb	          0x488b03	                    mov rax, qword [rbx]	      3074	fold.c	FUNCTION_65	IF_4	CALL_7
0x40051ee	          0x4939c4	                            cmp r12, rax	      3074	fold.c	FUNCTION_65	IF_4	CALL_7
0x40051f1	            0x7c4c	                            jl 0x400523f	      3074	fold.c	FUNCTION_65	IF_4	CALL_7
0x40051f3	          0x4939c6	                            cmp r14, rax	      3081	fold.c	FUNCTION_65	ELSE_3	IF_5
0x40051f6	     0xf8dba000000	                           jge 0x40052b6	      3081	fold.c	FUNCTION_65	ELSE_3	IF_5
0x40051fc	          0x4889c1	                            mov rcx, rax	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1	CALL_9
0x40051ff	        0x48034b08	                add rcx, qword [rbx + 8]	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1	CALL_9
0x4005203	        0x4883e901	                              sub rcx, 1	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1	CALL_9
0x4005207	          0x4939cc	                            cmp r12, rcx	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1	CALL_9
0x400520a	            0x7d23	                           jge 0x400522f	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1	CALL_9
0x400520c	      0xe94a020000	                           jmp 0x400545b	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1	CALL_9
0x4005211	     0xf1f80000000	                         nop dword [rax]	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1	CALL_9
0x4005218	          0x488b03	                    mov rax, qword [rbx]	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1	CALL_9
0x400521b	          0x4889c1	                            mov rcx, rax	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1	CALL_9
0x400521e	        0x48034b08	                add rcx, qword [rbx + 8]	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1	CALL_9
0x4005222	        0x4883e901	                              sub rcx, 1	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1	CALL_9
0x4005226	          0x4939cc	                            cmp r12, rcx	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1	CALL_9
0x4005229	     0xf8c23020000	                            jl 0x4005452	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1	CALL_9
0x400522f	          0x4c29e8	                            sub rax, r13	      3085	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4005232	        0x4883c330	                           add rbx, 0x30	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1	CALL_9
0x4005236	        0x488943d0	             mov qword [rbx - 0x30], rax	      3085	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x400523a	          0x4839da	                            cmp rdx, rbx	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1	CALL_9
0x400523d	            0x77d9	                            ja 0x4005218	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1	CALL_9
0x400523f	        0x4883c428	                           add rsp, 0x28	      3150	fold.c	FUNCTION_65
0x4005243	              0x5b	                                 pop rbx	      3150	fold.c	FUNCTION_65
0x4005244	              0x5d	                                 pop rbp	      3150	fold.c	FUNCTION_65
0x4005245	            0x415c	                                 pop r12	      3150	fold.c	FUNCTION_65
0x4005247	            0x415d	                                 pop r13	      3150	fold.c	FUNCTION_65
0x4005249	            0x415e	                                 pop r14	      3150	fold.c	FUNCTION_65
0x400524b	            0x415f	                                 pop r15	      3150	fold.c	FUNCTION_65
0x400524d	              0xc3	                                     ret	      3150	fold.c	FUNCTION_65
0x400524e	            0x6690	                                     nop	      3150	fold.c	FUNCTION_65
0x4005250	        0x4983ea01	                              sub r10, 1	      3045	fold.c	FUNCTION_65	IF_1	IF_2	CALL_2
0x4005254	          0x4d39d4	                            cmp r12, r10	      3045	fold.c	FUNCTION_65	IF_1	IF_2	CALL_2
0x4005257	            0x7d19	                           jge 0x4005272	      3045	fold.c	FUNCTION_65	IF_1	IF_2	CALL_2
0x4005259	          0x4929cc	                            sub r12, rcx	      3050	fold.c	FUNCTION_65	IF_1	IF_2	CALL_3
0x400525c	          0x4929ce	                            sub r14, rcx	      3050	fold.c	FUNCTION_65	IF_1	IF_2	CALL_3
0x400525f	          0x4829ce	                            sub rsi, rcx	      3050	fold.c	FUNCTION_65	IF_1	IF_2	CALL_3
0x4005262	        0x488d6b10	                   lea rbp, [rbx + 0x10]	      3050	fold.c	FUNCTION_65	IF_1	IF_2	CALL_3
0x4005266	      0xe9f5feffff	                           jmp 0x4005160	      3052	fold.c	FUNCTION_65	IF_1	IF_2
0x400526b	            0x31db	                            xor ebx, ebx	      1133	fold.c	FUNCTION_36	WHILE_1
0x400526d	      0xe966ffffff	                           jmp 0x40051d8	      1133	fold.c	FUNCTION_36	WHILE_1
0x4005272	          0x4d39d6	                            cmp r14, r10	      3054	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_4
0x4005275	            0x7c1c	                            jl 0x4005293	      3054	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_4
0x4005277	          0x4889fe	                            mov rsi, rdi	      3067	fold.c	FUNCTION_65	IF_1	CALL_6
0x400527a	          0x4889df	                            mov rdi, rbx	      3067	fold.c	FUNCTION_65	IF_1	CALL_6
0x400527d	      0xe83ecaffff	                  call sym.truncate_fold	      3067	fold.c	FUNCTION_65	IF_1	CALL_6
0x4005282	        0x4883c330	                           add rbx, 0x30	      3071	fold.c	FUNCTION_65	IF_1
0x4005286	        0x4c8b4510	              mov r8, qword [rbp + 0x10]	      3071	fold.c	FUNCTION_65	IF_1
0x400528a	        0x4c634d00	                  movsxd r9, dword [rbp]	      3071	fold.c	FUNCTION_65	IF_1
0x400528e	      0xe948ffffff	                           jmp 0x40051db	      3071	fold.c	FUNCTION_65	IF_1
0x4005293	          0x4c89f2	                            mov rdx, r14	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_5
0x4005296	        0x488d7b10	                   lea rdi, [rbx + 0x10]	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_5
0x400529a	          0x4d89e8	                             mov r8, r13	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_5
0x400529d	          0x4829ca	                            sub rdx, rcx	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_5
0x40052a0	          0x4829ce	                            sub rsi, rcx	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_5
0x40052a3	          0x49f7d8	                                  neg r8	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_5
0x40052a6	      0xb9ffffff7f	                     mov ecx, 0x7fffffff	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_5
0x40052ab	      0xe8c0c3ffff	          call sym.foldMarkAdjustRecurse	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_5
0x40052b0	        0x4c296b08	                sub qword [rbx + 8], r13	      3063	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3
0x40052b4	            0xebcc	                           jmp 0x4005282	      3063	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3
0x40052b6	          0x4889c7	                            mov rdi, rax	      3095	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_12
0x40052b9	        0x48037b08	                add rdi, qword [rbx + 8]	      3095	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_12
0x40052bd	          0x4d89e1	                             mov r9, r12	      3039	fold.c	FUNCTION_65
0x40052c0	          0x4d29f1	                             sub r9, r14	      3039	fold.c	FUNCTION_65
0x40052c3	        0x488d57ff	                      lea rdx, [rdi - 1]	      3095	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_12
0x40052c7	          0x4939d4	                            cmp r12, rdx	      3095	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_12
0x40052ca	            0x7c7e	                            jl 0x400534a	      3095	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_12
0x40052cc	          0x4889da	                            mov rdx, rbx	      3095	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_12
0x40052cf	          0x4c89c6	                             mov rsi, r8	      3095	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_12
0x40052d2	          0x4531ff	                          xor r15d, r15d	      3095	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_12
0x40052d5	            0xeb43	                           jmp 0x400531a	      3095	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_12
0x40052d7	        0x4883ef01	                              sub rdi, 1	      3116	fold.c	FUNCTION_65	FOR_2	IF_8	IF_9	CALL_16
0x40052db	          0x4939fe	                            cmp r14, rdi	      3116	fold.c	FUNCTION_65	FOR_2	IF_8	IF_9	CALL_16
0x40052de	     0xf8cc8000000	                            jl 0x40053ac	      3116	fold.c	FUNCTION_65	FOR_2	IF_8	IF_9	CALL_16
0x40052e4	          0x4c010a	                     add qword [rdx], r9	      3120	fold.c	FUNCTION_65	FOR_2	IF_8
0x40052e7	        0x48634500	                 movsxd rax, dword [rbp]	      3111	fold.c	FUNCTION_65	FOR_2	CALL_15
0x40052eb	        0x488b7510	            mov rsi, qword [rbp + 0x10] 	      3111	fold.c	FUNCTION_65	FOR_2	CALL_15
0x40052ef	        0x4883c230	                           add rdx, 0x30	      3111	fold.c	FUNCTION_65	FOR_2	CALL_15
0x40052f3	        0x488d0440	                  lea rax, [rax + rax*2]	      3111	fold.c	FUNCTION_65	FOR_2	CALL_15
0x40052f7	        0x48c1e004	                              shl rax, 4	      3111	fold.c	FUNCTION_65	FOR_2	CALL_15
0x40052fb	          0x4801f0	                            add rax, rsi	      3111	fold.c	FUNCTION_65	FOR_2	CALL_15
0x40052fe	          0x4839c2	                            cmp rdx, rax	      3111	fold.c	FUNCTION_65	FOR_2	CALL_15
0x4005301	     0xf83d3000000	                           jae 0x40053da	      3111	fold.c	FUNCTION_65	FOR_2	CALL_15
0x4005307	          0x488b02	                    mov rax, qword [rdx]	      3111	fold.c	FUNCTION_65	FOR_2	CALL_15
0x400530a	          0x4939c4	                            cmp r12, rax	      3111	fold.c	FUNCTION_65	FOR_2	CALL_15
0x400530d	     0xf8cc7000000	                            jl 0x40053da	      3111	fold.c	FUNCTION_65	FOR_2	CALL_15
0x4005313	          0x4889c7	                            mov rdi, rax	      3111	fold.c	FUNCTION_65	FOR_2	CALL_15
0x4005316	        0x48037a08	                add rdi, qword [rdx + 8]	      3111	fold.c	FUNCTION_65	FOR_2	CALL_15
0x400531a	          0x4939c6	                            cmp r14, rax	      3113	fold.c	FUNCTION_65	FOR_2	IF_8
0x400531d	            0x7db8	                           jge 0x40052d7	      3113	fold.c	FUNCTION_65	FOR_2	IF_8
0x400531f	          0x4d85ff	                           test r15, r15	      3125	fold.c	FUNCTION_65	FOR_2	IF_10
0x4005322	            0x7518	                           jne 0x400533c	      3125	fold.c	FUNCTION_65	FOR_2	IF_10
0x4005324	          0x4889d1	                            mov rcx, rdx	      3126	fold.c	FUNCTION_65	FOR_2	CALL_18
0x4005327	    0x49bfabaaaaaa	          movabs r15, 0xaaaaaaaaaaaaaaab	      3126	fold.c	FUNCTION_65	FOR_2	CALL_18
0x4005331	          0x4829f1	                            sub rcx, rsi	      3126	fold.c	FUNCTION_65	FOR_2	CALL_18
0x4005334	        0x48c1f904	                              sar rcx, 4	      3126	fold.c	FUNCTION_65	FOR_2	CALL_18
0x4005338	        0x4c0faff9	                           imul r15, rcx	      3126	fold.c	FUNCTION_65	FOR_2	CALL_18
0x400533c	        0x4883ef01	                              sub rdi, 1	      3128	fold.c	FUNCTION_65	FOR_2	IF_11	CALL_19
0x4005340	          0x4939fc	                            cmp r12, rdi	      3128	fold.c	FUNCTION_65	FOR_2	IF_11	CALL_19
0x4005343	            0x7c3c	                            jl 0x4005381	      3128	fold.c	FUNCTION_65	FOR_2	IF_11	CALL_19
0x4005345	          0x4c292a	                    sub qword [rdx], r13	      3131	fold.c	FUNCTION_65	FOR_2
0x4005348	            0xeb9d	                           jmp 0x40052e7	      3131	fold.c	FUNCTION_65	FOR_2
0x400534a	        0x498d7601	                      lea rsi, [r14 + 1]	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_13
0x400534e	          0x4d89c8	                              mov r8, r9	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_13
0x4005351	          0x4c89e2	                            mov rdx, r12	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_13
0x4005354	        0x488d7b10	                   lea rdi, [rbx + 0x10]	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_13
0x4005358	          0x4829c2	                            sub rdx, rax	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_13
0x400535b	          0x49f7d8	                                  neg r8	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_13
0x400535e	          0x4829c6	                            sub rsi, rax	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_13
0x4005361	      0xb9ffffff7f	                     mov ecx, 0x7fffffff	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_13
0x4005366	      0x4c894c2408	                 mov qword [rsp + 8], r9	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_13
0x400536b	      0xe800c3ffff	          call sym.foldMarkAdjustRecurse	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_13
0x4005370	      0x4c8b4c2408	                 mov r9, qword [rsp + 8]	      3100	fold.c	FUNCTION_65	ELSE_4	IF_7
0x4005375	        0x4c294b08	                 sub qword [rbx + 8], r9	      3100	fold.c	FUNCTION_65	ELSE_4	IF_7
0x4005379	          0x4c010b	                     add qword [rbx], r9	      3101	fold.c	FUNCTION_65	ELSE_4	IF_7
0x400537c	      0xe9befeffff	                           jmp 0x400523f	      3102	fold.c	FUNCTION_65	ELSE_4	IF_7
0x4005381	          0x4889d7	                            mov rdi, rdx	      3129	fold.c	FUNCTION_65	FOR_2	CALL_20
0x4005384	          0x4c89e6	                            mov rsi, r12	      3129	fold.c	FUNCTION_65	FOR_2	CALL_20
0x4005387	      0x4c89442418	              mov qword [rsp + 0x18], r8	      3129	fold.c	FUNCTION_65	FOR_2	CALL_20
0x400538c	      0x4c894c2410	              mov qword [rsp + 0x10], r9	      3129	fold.c	FUNCTION_65	FOR_2	CALL_20
0x4005391	      0x4889542408	                mov qword [rsp + 8], rdx	      3129	fold.c	FUNCTION_65	FOR_2	CALL_20
0x4005396	      0xe825c9ffff	                  call sym.truncate_fold	      3129	fold.c	FUNCTION_65	FOR_2	CALL_20
0x400539b	      0x4c8b442418	              mov r8, qword [rsp + 0x18]	      3129	fold.c	FUNCTION_65	FOR_2	CALL_20
0x40053a0	      0x4c8b4c2410	              mov r9, qword [rsp + 0x10]	      3129	fold.c	FUNCTION_65	FOR_2	CALL_20
0x40053a5	      0x488b542408	                mov rdx, qword [rsp + 8]	      3129	fold.c	FUNCTION_65	FOR_2	CALL_20
0x40053aa	            0xeb99	                           jmp 0x4005345	      3129	fold.c	FUNCTION_65	FOR_2	CALL_20
0x40053ac	          0x4889d7	                            mov rdi, rdx	      3118	fold.c	FUNCTION_65	FOR_2	IF_8	CALL_17
0x40053af	          0x4c89f6	                            mov rsi, r14	      3118	fold.c	FUNCTION_65	FOR_2	IF_8	CALL_17
0x40053b2	      0x4c89442418	              mov qword [rsp + 0x18], r8	      3118	fold.c	FUNCTION_65	FOR_2	IF_8	CALL_17
0x40053b7	      0x4c894c2410	              mov qword [rsp + 0x10], r9	      3118	fold.c	FUNCTION_65	FOR_2	IF_8	CALL_17
0x40053bc	      0x4889542408	                mov qword [rsp + 8], rdx	      3118	fold.c	FUNCTION_65	FOR_2	IF_8	CALL_17
0x40053c1	      0xe8fac8ffff	                  call sym.truncate_fold	      3118	fold.c	FUNCTION_65	FOR_2	IF_8	CALL_17
0x40053c6	      0x4c8b442418	              mov r8, qword [rsp + 0x18]	      3118	fold.c	FUNCTION_65	FOR_2	IF_8	CALL_17
0x40053cb	      0x4c8b4c2410	              mov r9, qword [rsp + 0x10]	      3118	fold.c	FUNCTION_65	FOR_2	IF_8	CALL_17
0x40053d0	      0x488b542408	                mov rdx, qword [rsp + 8]	      3118	fold.c	FUNCTION_65	FOR_2	IF_8	CALL_17
0x40053d5	      0xe90affffff	                           jmp 0x40052e4	      3118	fold.c	FUNCTION_65	FOR_2	IF_8	CALL_17
0x40053da	          0x4d85ff	                           test r15, r15	      3141	fold.c	FUNCTION_65	IF_12
0x40053dd	     0xf845cfeffff	                            je 0x400523f	      3141	fold.c	FUNCTION_65	IF_12
0x40053e3	          0x4889d0	                            mov rax, rdx	      3134	fold.c	FUNCTION_65	CALL_21
0x40053e6	          0x4c29c3	                             sub rbx, r8	      3109	fold.c	FUNCTION_65	CALL_14
0x40053e9	    0x49bcabaaaaaa	          movabs r12, 0xaaaaaaaaaaaaaaab	      3109	fold.c	FUNCTION_65	CALL_14
0x40053f3	          0x4829f0	                            sub rax, rsi	      3134	fold.c	FUNCTION_65	CALL_21
0x40053f6	        0x48c1fb04	                              sar rbx, 4	      3109	fold.c	FUNCTION_65	CALL_14
0x40053fa	        0x4883c510	                           add rbp, 0x10	      3109	fold.c	FUNCTION_65	CALL_14
0x40053fe	        0x48c1f804	                              sar rax, 4	      3134	fold.c	FUNCTION_65	CALL_21
0x4005402	          0x4889ef	                            mov rdi, rbp	      3145	fold.c	FUNCTION_65	CALL_22
0x4005405	        0x490fafdc	                           imul rbx, r12	      3109	fold.c	FUNCTION_65	CALL_14
0x4005409	        0x4c0fafe0	                           imul r12, rax	      3134	fold.c	FUNCTION_65	CALL_21
0x400540d	          0x4889de	                            mov rsi, rbx	      3145	fold.c	FUNCTION_65	CALL_22
0x4005410	      0x4d8d6c24ff	                      lea r13, [r12 - 1]	      3145	fold.c	FUNCTION_65	CALL_22
0x4005415	          0x4c89ea	                            mov rdx, r13	      3145	fold.c	FUNCTION_65	CALL_22
0x4005418	      0xe8c3b7ffff	        call sym.foldReverseOrder.isra.5	      3145	fold.c	FUNCTION_65	CALL_22
0x400541d	          0x4889d8	                            mov rax, rbx	      3147	fold.c	FUNCTION_65
0x4005420	          0x4889de	                            mov rsi, rbx	      3146	fold.c	FUNCTION_65	CALL_23
0x4005423	          0x4889ef	                            mov rdi, rbp	      3146	fold.c	FUNCTION_65	CALL_23
0x4005426	          0x4c29f8	                            sub rax, r15	      3147	fold.c	FUNCTION_65
0x4005429	          0x4901c4	                            add r12, rax	      3147	fold.c	FUNCTION_65
0x400542c	      0x498d5424ff	                      lea rdx, [r12 - 1]	      3146	fold.c	FUNCTION_65	CALL_23
0x4005431	      0xe8aab7ffff	        call sym.foldReverseOrder.isra.5	      3146	fold.c	FUNCTION_65	CALL_23
0x4005436	        0x4883c428	                           add rsp, 0x28	      3150	fold.c	FUNCTION_65
0x400543a	          0x4c89ea	                            mov rdx, r13	      3148	fold.c	FUNCTION_65	CALL_24
0x400543d	          0x4c89e6	                            mov rsi, r12	      3148	fold.c	FUNCTION_65	CALL_24
0x4005440	              0x5b	                                 pop rbx	      3150	fold.c	FUNCTION_65
0x4005441	          0x4889ef	                            mov rdi, rbp	      3148	fold.c	FUNCTION_65	CALL_24
0x4005444	              0x5d	                                 pop rbp	      3150	fold.c	FUNCTION_65
0x4005445	            0x415c	                                 pop r12	      3150	fold.c	FUNCTION_65
0x4005447	            0x415d	                                 pop r13	      3150	fold.c	FUNCTION_65
0x4005449	            0x415e	                                 pop r14	      3150	fold.c	FUNCTION_65
0x400544b	            0x415f	                                 pop r15	      3150	fold.c	FUNCTION_65
0x400544d	      0xe98eb7ffff	         jmp sym.foldReverseOrder.isra.5	      3148	fold.c	FUNCTION_65	CALL_24
0x4005452	          0x4939c4	                            cmp r12, rax	      3087	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6	CALL_10
0x4005455	     0xf8ce4fdffff	                            jl 0x400523f	      3087	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6	CALL_10
0x400545b	          0x4c89e6	                            mov rsi, r12	      3090	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6	CALL_11
0x400545e	          0x4889df	                            mov rdi, rbx	      3090	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6	CALL_11
0x4005461	      0xe85ac8ffff	                  call sym.truncate_fold	      3090	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6	CALL_11
0x4005466	          0x4c292b	                    sub qword [rbx], r13	      3091	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6
0x4005469	      0xe9d1fdffff	                           jmp 0x400523f	      3091	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6
closeFoldRecurse	FOR,0:functions,0:IF,0:ELSE,0:CALL,1:DO,0:SWITCH,0:WHILE,0	4
0x4003bb0	            0x31c9	                            xor ecx, ecx	       378	fold.c	FUNCTION_15	CALL_1
0x4003bb2	      0xba01000000	                              mov edx, 1	       378	fold.c	FUNCTION_15	CALL_1
0x4003bb7	            0x31f6	                            xor esi, esi	       378	fold.c	FUNCTION_15	CALL_1
0x4003bb9	      0xe972feffff	                   jmp sym.setManualFold	       378	fold.c	FUNCTION_15	CALL_1
newFoldLevel	FOR,0:functions,1:IF,1:ELSE,0:CALL,2:DO,0:SWITCH,0:WHILE,0	34
0x4003e20	    0x488b3d000000	            mov rdi, qword [0x04003e27] 	       466	fold.c	FUNCTION_20	CALL_1
0x4003e27	              0x53	                                push rbx	       465	fold.c	FUNCTION_20
0x4003e28	      0xe893ffffff	                call sym.newFoldLevelWin	       466	fold.c	FUNCTION_20	CALL_1
0x4003e2d	    0x488b05000000	            mov rax, qword [0x04003e34] 	       469	fold.c	FUNCTION_20	IF_1	CALL_2
0x4003e34	    0x488b90f80100	           mov rdx, qword [rax + 0x1f8] 	       357	fold.c	FUNCTION_13
0x4003e3b	          0x803a64	                    cmp byte [rdx], 0x64	       469	fold.c	FUNCTION_20	IF_1	CALL_2
0x4003e3e	            0x7408	                            je 0x4003e48	       469	fold.c	FUNCTION_20	IF_1	CALL_2
0x4003e40	              0x5b	                                 pop rbx	       486	fold.c	FUNCTION_20
0x4003e41	              0xc3	                                     ret	       486	fold.c	FUNCTION_20
0x4003e42	    0x660f1f440000	                    nop word [rax + rax]	       486	fold.c	FUNCTION_20
0x4003e48	    0x8b8888020000	           mov ecx, dword [rax + 0x288] 	       469	fold.c	FUNCTION_20	IF_1	CALL_2
0x4003e4e	            0x85c9	                           test ecx, ecx	       469	fold.c	FUNCTION_20	IF_1	CALL_2
0x4003e50	            0x74ee	                            je 0x4003e40	       469	fold.c	FUNCTION_20	IF_1	CALL_2
0x4003e52	    0x488b1d000000	            mov rbx, qword [0x04003e59] 	       476	fold.c	FUNCTION_20	IF_1
0x4003e59	          0x4885db	                           test rbx, rbx	       476	fold.c	FUNCTION_20	IF_1
0x4003e5c	            0x7512	                           jne 0x4003e70	       476	fold.c	FUNCTION_20	IF_1
0x4003e5e	            0xebe0	                           jmp 0x4003e40	       476	fold.c	FUNCTION_20	IF_1
0x4003e60	        0x488b5b20	            mov rbx, qword [rbx + 0x20] 	       476	fold.c	FUNCTION_20	IF_1
0x4003e64	          0x4885db	                           test rbx, rbx	       476	fold.c	FUNCTION_20	IF_1
0x4003e67	            0x74d7	                            je 0x4003e40	       476	fold.c	FUNCTION_20	IF_1
0x4003e69	    0x488b05000000	            mov rax, qword [0x04003e70] 	       476	fold.c	FUNCTION_20	IF_1
0x4003e70	          0x4839d8	                            cmp rax, rbx	       478	fold.c	FUNCTION_20	FUNCTION_1	CALL_1
0x4003e73	            0x74eb	                            je 0x4003e60	       478	fold.c	FUNCTION_20	FUNCTION_1	CALL_1
0x4003e75	    0x488b93f80100	           mov rdx, qword [rbx + 0x1f8] 	       357	fold.c	FUNCTION_13
0x4003e7c	          0x803a64	                    cmp byte [rdx], 0x64	       478	fold.c	FUNCTION_20	FUNCTION_1	CALL_1
0x4003e7f	            0x75df	                           jne 0x4003e60	       478	fold.c	FUNCTION_20	FUNCTION_1	CALL_1
0x4003e81	    0x8b9388020000	           mov edx, dword [rbx + 0x288] 	       478	fold.c	FUNCTION_20	FUNCTION_1	CALL_1
0x4003e87	            0x85d2	                           test edx, edx	       478	fold.c	FUNCTION_20	FUNCTION_1	CALL_1
0x4003e89	            0x74d5	                            je 0x4003e60	       478	fold.c	FUNCTION_20	FUNCTION_1	CALL_1
0x4003e8b	    0x488b80e80100	           mov rax, qword [rax + 0x1e8] 	       480	fold.c	FUNCTION_20	FUNCTION_1
0x4003e92	          0x4889df	                            mov rdi, rbx	       481	fold.c	FUNCTION_20	FUNCTION_1	CALL_2
0x4003e95	    0x488983e80100	            mov qword [rbx + 0x1e8], rax	       480	fold.c	FUNCTION_20	FUNCTION_1
0x4003e9c	      0xe81fffffff	                call sym.newFoldLevelWin	       481	fold.c	FUNCTION_20	FUNCTION_1	CALL_2
0x4003ea1	            0xebbd	                           jmp 0x4003e60	       481	fold.c	FUNCTION_20	FUNCTION_1	CALL_2
foldUpdateAll	FOR,0:functions,0:IF,0:ELSE,0:CALL,1:DO,0:SWITCH,0:WHILE,0	3
0x4001350	    0xc68721010000	               mov byte [rdi + 0x121], 1	       852	fold.c	FUNCTION_29
0x4001357	      0xbe28000000	                           mov esi, 0x28	       853	fold.c	FUNCTION_29	CALL_1
0x400135c	      0xe900000000	                           jmp 0x4001361	       853	fold.c	FUNCTION_29	CALL_1
deleteFoldEntry	FOR,1:functions,0:IF,6:ELSE,1:CALL,6:DO,0:SWITCH,0:WHILE,0	109
0x4001510	          0x4863c6	                         movsxd rax, esi	      1399	fold.c	FUNCTION_43
0x4001513	            0x4157	                                push r15	      1399	fold.c	FUNCTION_43
0x4001515	            0x4156	                                push r14	      1399	fold.c	FUNCTION_43
0x4001517	            0x4155	                                push r13	      1399	fold.c	FUNCTION_43
0x4001519	            0x4154	                                push r12	      1399	fold.c	FUNCTION_43
0x400151b	          0x4989c4	                            mov r12, rax	      1399	fold.c	FUNCTION_43
0x400151e	              0x55	                                push rbp	      1399	fold.c	FUNCTION_43
0x400151f	              0x53	                                push rbx	      1399	fold.c	FUNCTION_43
0x4001520	        0x488d1c40	                  lea rbx, [rax + rax*2]	      1405	fold.c	FUNCTION_43
0x4001524	          0x4889fd	                            mov rbp, rdi	      1399	fold.c	FUNCTION_43
0x4001527	        0x48c1e304	                              shl rbx, 4	      1405	fold.c	FUNCTION_43
0x400152b	        0x4883ec08	                              sub rsp, 8	      1399	fold.c	FUNCTION_43
0x400152f	          0x4989dd	                            mov r13, rbx	      1405	fold.c	FUNCTION_43
0x4001532	        0x4c036f10	             add r13, qword [rdi + 0x10]	      1405	fold.c	FUNCTION_43
0x4001536	            0x85d2	                           test edx, edx	      1406	fold.c	FUNCTION_43	IF_1
0x4001538	            0x7509	                           jne 0x4001543	      1406	fold.c	FUNCTION_43	IF_1
0x400153a	        0x458b7510	           mov r14d, dword [r13 + 0x10] 	      1406	fold.c	FUNCTION_43	IF_1
0x400153e	          0x4585f6	                         test r14d, r14d	      1406	fold.c	FUNCTION_43	IF_1
0x4001541	            0x755d	                           jne 0x40015a0	      1406	fold.c	FUNCTION_43	IF_1
0x4001543	        0x498d7d10	                   lea rdi, [r13 + 0x10]	      1409	fold.c	FUNCTION_43	IF_1	CALL_1
0x4001547	      0xe800000000	                          call 0x400154c	      1409	fold.c	FUNCTION_43	IF_1	CALL_1
0x400154c	          0x8b4500	                    mov eax, dword [rbp]	      1410	fold.c	FUNCTION_43	IF_1
0x400154f	          0x83e801	                              sub eax, 1	      1410	fold.c	FUNCTION_43	IF_1
0x4001552	          0x4139c4	                           cmp r12d, eax	      1411	fold.c	FUNCTION_43	IF_1	IF_2
0x4001555	          0x894500	                    mov dword [rbp], eax	      1410	fold.c	FUNCTION_43	IF_1
0x4001558	            0x7c16	                            jl 0x4001570	      1411	fold.c	FUNCTION_43	IF_1	IF_2
0x400155a	        0x4883c408	                              add rsp, 8	      1445	fold.c	FUNCTION_43
0x400155e	              0x5b	                                 pop rbx	      1445	fold.c	FUNCTION_43
0x400155f	              0x5d	                                 pop rbp	      1445	fold.c	FUNCTION_43
0x4001560	            0x415c	                                 pop r12	      1445	fold.c	FUNCTION_43
0x4001562	            0x415d	                                 pop r13	      1445	fold.c	FUNCTION_43
0x4001564	            0x415e	                                 pop r14	      1445	fold.c	FUNCTION_43
0x4001566	            0x415f	                                 pop r15	      1445	fold.c	FUNCTION_43
0x4001568	              0xc3	                                     ret	      1445	fold.c	FUNCTION_43
0x4001569	     0xf1f80000000	                         nop dword [rax]	      1445	fold.c	FUNCTION_43
0x4001570	        0x4883c408	                              add rsp, 8	      1445	fold.c	FUNCTION_43
0x4001574	          0x4429e0	                           sub eax, r12d	        59	string3.h	FUNCTION_78	CALL_3
0x4001577	        0x498d7530	                   lea rsi, [r13 + 0x30]	        59	string3.h	FUNCTION_78	CALL_3
0x400157b	              0x5b	                                 pop rbx	      1445	fold.c	FUNCTION_43
0x400157c	            0x4898	                                    cdqe	        59	string3.h	FUNCTION_78	CALL_3
0x400157e	          0x4c89ef	                            mov rdi, r13	        59	string3.h	FUNCTION_78	CALL_3
0x4001581	              0x5d	                                 pop rbp	      1445	fold.c	FUNCTION_43
0x4001582	            0x415c	                                 pop r12	      1445	fold.c	FUNCTION_43
0x4001584	            0x415d	                                 pop r13	      1445	fold.c	FUNCTION_43
0x4001586	            0x415e	                                 pop r14	      1445	fold.c	FUNCTION_43
0x4001588	            0x415f	                                 pop r15	      1445	fold.c	FUNCTION_43
0x400158a	        0x488d1440	                  lea rdx, [rax + rax*2]	        59	string3.h	FUNCTION_78	CALL_3
0x400158e	        0x48c1e204	                              shl rdx, 4	        59	string3.h	FUNCTION_78	CALL_3
0x4001592	      0xe900000000	                           jmp 0x4001597	        59	string3.h	FUNCTION_78	CALL_3
0x4001597	    0x660f1f840000	                    nop word [rax + rax]	        59	string3.h	FUNCTION_78	CALL_3
0x40015a0	        0x458d7eff	                     lea r15d, [r14 - 1]	      1419	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_3
0x40015a4	          0x4489fe	                           mov esi, r15d	      1419	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_3
0x40015a7	      0xe800000000	                          call 0x40015ac	      1419	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_3
0x40015ac	          0x83f801	                              cmp eax, 1	      1419	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_3
0x40015af	            0x75a9	                           jne 0x400155a	      1419	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_3
0x40015b1	        0x48035d10	             add rbx, qword [rbp + 0x10]	      1422	fold.c	FUNCTION_43	ELSE_1	IF_3
0x40015b5	          0x4585f6	                         test r14d, r14d	      1426	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x40015b8	        0x4c8b6b20	            mov r13, qword [rbx + 0x20] 	      1425	fold.c	FUNCTION_43	ELSE_1	IF_3
0x40015bc	            0x7e42	                           jle 0x4001600	      1426	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x40015be	      0x4b8d4c7f03	              lea rcx, [r15 + r15*2 + 3]	      1426	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x40015c3	          0x4c89e8	                            mov rax, r13	      1426	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x40015c6	        0x48c1e104	                              shl rcx, 4	      1426	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x40015ca	          0x4c01e9	                            add rcx, r13	      1426	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x40015cd	            0xeb10	                           jmp 0x40015df	      1426	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x40015cf	              0x90	                                     nop	      1426	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x40015d0	        0x807b2902	                cmp byte [rbx + 0x29], 2	      1431	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_5
0x40015d4	            0x741f	                            je 0x40015f5	      1431	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_5
0x40015d6	        0x4883c030	                           add rax, 0x30	      1431	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_5
0x40015da	          0x4839c1	                            cmp rcx, rax	      1426	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x40015dd	            0x7421	                            je 0x4001600	      1426	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x40015df	          0x488b13	                    mov rdx, qword [rbx]	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x40015e2	          0x480110	                    add qword [rax], rdx	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x40015e5	        0x807b2802	                cmp byte [rbx + 0x28], 2	      1429	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_4
0x40015e9	            0x75e5	                           jne 0x40015d0	      1429	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_4
0x40015eb	        0xc6402802	                mov byte [rax + 0x28], 2	      1430	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_4
0x40015ef	        0x807b2902	                cmp byte [rbx + 0x29], 2	      1431	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_5
0x40015f3	            0x75e1	                           jne 0x40015d6	      1431	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_5
0x40015f5	        0xc6402902	                mov byte [rax + 0x29], 2	      1432	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_5
0x40015f9	            0xebdb	                           jmp 0x40015d6	      1432	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_5
0x40015fb	       0xf1f440000	                   nop dword [rax + rax]	      1432	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_5
0x4001600	          0x8b4500	                    mov eax, dword [rbp]	      1436	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6
0x4001603	        0x4183c401	                             add r12d, 1	      1436	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6
0x4001607	          0x4139c4	                           cmp r12d, eax	      1436	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6
0x400160a	            0x7c34	                            jl 0x4001640	      1436	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6
0x400160c	          0x4963c6	                        movsxd rax, r14d	      1436	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6
0x400160f	        0x4c8d3c40	                  lea r15, [rax + rax*2]	      1436	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6
0x4001613	        0x49c1e704	                              shl r15, 4	      1436	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6
0x4001617	          0x4c89fa	                            mov rdx, r15	        59	string3.h	FUNCTION_78	CALL_3
0x400161a	          0x4c89ee	                            mov rsi, r13	        59	string3.h	FUNCTION_78	CALL_3
0x400161d	          0x4889df	                            mov rdi, rbx	        59	string3.h	FUNCTION_78	CALL_3
0x4001620	      0xe800000000	                          call 0x4001625	        59	string3.h	FUNCTION_78	CALL_3
0x4001625	          0x4c89ef	                            mov rdi, r13	      1441	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_6
0x4001628	      0xe800000000	                          call 0x400162d	      1441	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_6
0x400162d	        0x44037500	                   add r14d, dword [rbp]	      1442	fold.c	FUNCTION_43	ELSE_1	IF_3
0x4001631	        0x4183ee01	                             sub r14d, 1	      1442	fold.c	FUNCTION_43	ELSE_1	IF_3
0x4001635	        0x44897500	                   mov dword [rbp], r14d	      1442	fold.c	FUNCTION_43	ELSE_1	IF_3
0x4001639	      0xe91cffffff	                           jmp 0x400155a	      1445	fold.c	FUNCTION_43
0x400163e	            0x6690	                                     nop	      1445	fold.c	FUNCTION_43
0x4001640	          0x4963d6	                        movsxd rdx, r14d	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x4001643	          0x4429e0	                           sub eax, r12d	        59	string3.h	FUNCTION_78	CALL_3
0x4001646	        0x488d7330	                   lea rsi, [rbx + 0x30]	        59	string3.h	FUNCTION_78	CALL_3
0x400164a	        0x4c8d3c52	                  lea r15, [rdx + rdx*2]	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x400164e	            0x4898	                                    cdqe	        59	string3.h	FUNCTION_78	CALL_3
0x4001650	        0x488d1440	                  lea rdx, [rax + rax*2]	        59	string3.h	FUNCTION_78	CALL_3
0x4001654	        0x49c1e704	                              shl r15, 4	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x4001658	        0x4a8d3c3b	                    lea rdi, [rbx + r15]	        59	string3.h	FUNCTION_78	CALL_3
0x400165c	        0x48c1e204	                              shl rdx, 4	        59	string3.h	FUNCTION_78	CALL_3
0x4001660	      0xe800000000	                          call 0x4001665	        59	string3.h	FUNCTION_78	CALL_3
0x4001665	            0xebb0	                           jmp 0x4001617	        59	string3.h	FUNCTION_78	CALL_3
newFoldLevelWin	FOR,1:functions,0:IF,1:ELSE,0:CALL,2:DO,0:SWITCH,0:WHILE,0	25
0x4003dc0	              0x53	                                push rbx	       490	fold.c	FUNCTION_21
0x4003dc1	    0x80bf21010000	               cmp byte [rdi + 0x121], 0	      1187	fold.c	FUNCTION_38	IF_1
0x4003dc8	          0x4889fb	                            mov rbx, rdi	       490	fold.c	FUNCTION_21
0x4003dcb	            0x754b	                           jne 0x4003e18	      1187	fold.c	FUNCTION_38	IF_1
0x4003dcd	    0x80bb20010000	               cmp byte [rbx + 0x120], 0	       495	fold.c	FUNCTION_21	IF_1
0x4003dd4	            0x7433	                            je 0x4003e09	       495	fold.c	FUNCTION_21	IF_1
0x4003dd6	    0x488b83180100	           mov rax, qword [rbx + 0x118] 	       495	fold.c	FUNCTION_21	IF_1
0x4003ddd	    0x8b8b08010000	           mov ecx, dword [rbx + 0x108] 	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x4003de3	            0x31d2	                            xor edx, edx	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x4003de5	        0x4883c028	                           add rax, 0x28	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x4003de9	            0x85c9	                           test ecx, ecx	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x4003deb	            0x7e15	                           jle 0x4003e02	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x4003ded	           0xf1f00	                         nop dword [rax]	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x4003df0	          0xc60002	                       mov byte [rax], 2	       502	fold.c	FUNCTION_21	IF_1	FOR_1
0x4003df3	          0x83c201	                              add edx, 1	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x4003df6	        0x4883c030	                           add rax, 0x30	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x4003dfa	    0x399308010000	           cmp dword [rbx + 0x108], edx 	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x4003e00	            0x7fee	                            jg 0x4003df0	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x4003e02	    0xc68320010000	               mov byte [rbx + 0x120], 0	       503	fold.c	FUNCTION_21	IF_1
0x4003e09	          0x4889df	                            mov rdi, rbx	       505	fold.c	FUNCTION_21	CALL_2
0x4003e0c	              0x5b	                                 pop rbx	       506	fold.c	FUNCTION_21
0x4003e0d	      0xe900000000	                           jmp 0x4003e12	       505	fold.c	FUNCTION_21	CALL_2
0x4003e12	    0x660f1f440000	                    nop word [rax + rax]	       505	fold.c	FUNCTION_21	CALL_2
0x4003e18	      0xe853f3ffff	            call sym.checkupdate.part.17	       505	fold.c	FUNCTION_21	CALL_2
0x4003e1d	            0xebae	                           jmp 0x4003dcd	       505	fold.c	FUNCTION_21	CALL_2
foldLevel	FOR,0:functions,0:IF,4:ELSE,2:CALL,3:DO,0:SWITCH,0:WHILE,0	49
0x4003680	    0x488b15000000	            mov rdx, qword [0x04003687] 	       254	fold.c	FUNCTION_5	IF_1
0x4003687	              0x53	                                push rbx	       251	fold.c	FUNCTION_5
0x4003688	          0x4889fb	                            mov rbx, rdi	       251	fold.c	FUNCTION_5
0x400368b	          0x4885d2	                           test rdx, rdx	       254	fold.c	FUNCTION_5	IF_1
0x400368e	            0x7538	                           jne 0x40036c8	       254	fold.c	FUNCTION_5	IF_1
0x4003690	    0x488b0d000000	            mov rcx, qword [0x04003697] 	       255	fold.c	FUNCTION_5	CALL_1
0x4003697	    0x80b921010000	               cmp byte [rcx + 0x121], 0	      1187	fold.c	FUNCTION_38	IF_1
0x400369e	            0x7568	                           jne 0x4003708	      1187	fold.c	FUNCTION_38	IF_1
0x40036a0	    0x8b81d4010000	           mov eax, dword [rcx + 0x1d4] 	       118	fold.c	FUNCTION_2
0x40036a6	            0x85c0	                           test eax, eax	       119	fold.c	FUNCTION_2	CALL_1
0x40036a8	            0x743a	                            je 0x40036e4	       119	fold.c	FUNCTION_2	CALL_1
0x40036aa	          0x4889cf	                            mov rdi, rcx	       119	fold.c	FUNCTION_2	CALL_1
0x40036ad	      0xe85ed9ffff	          call sym.hasAnyFolding.part.13	       119	fold.c	FUNCTION_2	CALL_1
0x40036b2	            0x85c0	                           test eax, eax	       262	fold.c	FUNCTION_5	IF_4	CALL_2
0x40036b4	            0x742e	                            je 0x40036e4	       262	fold.c	FUNCTION_5	IF_4	CALL_2
0x40036b6	          0x4889de	                            mov rsi, rbx	       265	fold.c	FUNCTION_5	CALL_3
0x40036b9	          0x4889cf	                            mov rdi, rcx	       265	fold.c	FUNCTION_5	CALL_3
0x40036bc	              0x5b	                                 pop rbx	       266	fold.c	FUNCTION_5
0x40036bd	      0xe97ec9ffff	                    jmp sym.foldLevelWin	       265	fold.c	FUNCTION_5	CALL_3
0x40036c2	    0x660f1f440000	                    nop word [rax + rax]	       265	fold.c	FUNCTION_5	CALL_3
0x40036c8	    0x48393d000000	            cmp qword [0x040036cf], rdi 	       256	fold.c	FUNCTION_5	ELSE_1	IF_2
0x40036cf	            0x7457	                            je 0x4003728	       256	fold.c	FUNCTION_5	ELSE_1	IF_2
0x40036d1	          0x4839da	                            cmp rdx, rbx	       258	fold.c	FUNCTION_5	ELSE_2	IF_3
0x40036d4	            0x7f1a	                            jg 0x40036f0	       258	fold.c	FUNCTION_5	ELSE_2	IF_3
0x40036d6	    0x483b1d000000	            cmp rbx, qword [0x040036dd] 	       258	fold.c	FUNCTION_5	ELSE_2	IF_3
0x40036dd	            0x7f11	                            jg 0x40036f0	       258	fold.c	FUNCTION_5	ELSE_2	IF_3
0x40036df	      0xb8ffffffff	                     mov eax, 0xffffffff	       259	fold.c	FUNCTION_5	ELSE_2	IF_3
0x40036e4	              0x5b	                                 pop rbx	       266	fold.c	FUNCTION_5
0x40036e5	              0xc3	                                     ret	       266	fold.c	FUNCTION_5
0x40036e6	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       266	fold.c	FUNCTION_5
0x40036f0	    0x488b0d000000	            mov rcx, qword [0x040036f7] 	       266	fold.c	FUNCTION_5
0x40036f7	    0x8b81d4010000	           mov eax, dword [rcx + 0x1d4] 	       118	fold.c	FUNCTION_2
0x40036fd	            0x85c0	                           test eax, eax	       119	fold.c	FUNCTION_2	CALL_1
0x40036ff	            0x74e3	                            je 0x40036e4	       119	fold.c	FUNCTION_2	CALL_1
0x4003701	            0xeba7	                           jmp 0x40036aa	       119	fold.c	FUNCTION_2	CALL_1
0x4003703	       0xf1f440000	                   nop dword [rax + rax]	       119	fold.c	FUNCTION_2	CALL_1
0x4003708	          0x4889cf	                            mov rdi, rcx	       119	fold.c	FUNCTION_2	CALL_1
0x400370b	      0xe860faffff	            call sym.checkupdate.part.17	       119	fold.c	FUNCTION_2	CALL_1
0x4003710	    0x488b0d000000	            mov rcx, qword [0x04003717] 	       119	fold.c	FUNCTION_2	CALL_1
0x4003717	    0x8b81d4010000	           mov eax, dword [rcx + 0x1d4] 	       118	fold.c	FUNCTION_2
0x400371d	            0x85c0	                           test eax, eax	       119	fold.c	FUNCTION_2	CALL_1
0x400371f	            0x74c3	                            je 0x40036e4	       119	fold.c	FUNCTION_2	CALL_1
0x4003721	            0xeb87	                           jmp 0x40036aa	       119	fold.c	FUNCTION_2	CALL_1
0x4003723	       0xf1f440000	                   nop dword [rax + rax]	       119	fold.c	FUNCTION_2	CALL_1
0x4003728	    0x8b0500000000	            mov eax, dword [0x0400372e] 	       256	fold.c	FUNCTION_5	ELSE_1	IF_2
0x400372e	            0x85c0	                           test eax, eax	       256	fold.c	FUNCTION_5	ELSE_1	IF_2
0x4003730	            0x789f	                            js 0x40036d1	       256	fold.c	FUNCTION_5	ELSE_1	IF_2
0x4003732	              0x5b	                                 pop rbx	       266	fold.c	FUNCTION_5
0x4003733	              0xc3	                                     ret	       266	fold.c	FUNCTION_5
foldCheckClose	FOR,0:functions,0:IF,2:ELSE,0:CALL,3:DO,0:SWITCH,0:WHILE,0	23
0x4003eb0	    0x488b05000000	            mov rax, qword [0x04003eb7] 	       515	fold.c	FUNCTION_22	IF_1
0x4003eb7	          0x803800	                       cmp byte [rax], 0	       515	fold.c	FUNCTION_22	IF_1
0x4003eba	            0x7437	                            je 0x4003ef3	       515	fold.c	FUNCTION_22	IF_1
0x4003ebc	        0x4883ec08	                              sub rsp, 8	       514	fold.c	FUNCTION_22
0x4003ec0	    0x488b3d000000	            mov rdi, qword [0x04003ec7] 	       517	fold.c	FUNCTION_22	IF_1	CALL_1
0x4003ec7	    0x80bf21010000	               cmp byte [rdi + 0x121], 0	      1187	fold.c	FUNCTION_38	IF_1
0x4003ece	            0x7538	                           jne 0x4003f08	      1187	fold.c	FUNCTION_38	IF_1
0x4003ed0	    0x488b8fe80100	           mov rcx, qword [rdi + 0x1e8] 	       518	fold.c	FUNCTION_22	IF_1	IF_2	CALL_2
0x4003ed7	        0x488b5738	            mov rdx, qword [rdi + 0x38] 	       518	fold.c	FUNCTION_22	IF_1	IF_2	CALL_2
0x4003edb	    0x4881c7080100	                          add rdi, 0x108	       518	fold.c	FUNCTION_22	IF_1	IF_2	CALL_2
0x4003ee2	        0x488b7710	            mov rsi, qword [rdi + 0x10] 	       518	fold.c	FUNCTION_22	IF_1	IF_2	CALL_2
0x4003ee6	      0xe8b5cbffff	           call sym.checkCloseRec.isra.0	       518	fold.c	FUNCTION_22	IF_1	IF_2	CALL_2
0x4003eeb	            0x85c0	                           test eax, eax	       518	fold.c	FUNCTION_22	IF_1	IF_2	CALL_2
0x4003eed	            0x7509	                           jne 0x4003ef8	       518	fold.c	FUNCTION_22	IF_1	IF_2	CALL_2
0x4003eef	        0x4883c408	                              add rsp, 8	       522	fold.c	FUNCTION_22
0x4003ef3	            0xf3c3	                                     ret	       522	fold.c	FUNCTION_22
0x4003ef5	           0xf1f00	                         nop dword [rax]	       522	fold.c	FUNCTION_22
0x4003ef8	        0x4883c408	                              add rsp, 8	       522	fold.c	FUNCTION_22
0x4003efc	      0xe900000000	                           jmp 0x4003f01	       520	fold.c	FUNCTION_22	IF_1	CALL_3
0x4003f01	     0xf1f80000000	                         nop dword [rax]	       520	fold.c	FUNCTION_22	IF_1	CALL_3
0x4003f08	      0xe863f2ffff	            call sym.checkupdate.part.17	       520	fold.c	FUNCTION_22	IF_1	CALL_3
0x4003f0d	    0x488b3d000000	            mov rdi, qword [0x04003f14] 	       520	fold.c	FUNCTION_22	IF_1	CALL_3
0x4003f14	            0xebba	                           jmp 0x4003ed0	       520	fold.c	FUNCTION_22	IF_1	CALL_3
hasFoldingWin	FOR,1:functions,0:IF,14:ELSE,0:CALL,5:DO,0:SWITCH,0:WHILE,0	190
0x40031b0	            0x4157	                                push r15	       144	fold.c	FUNCTION_4
0x40031b2	            0x4156	                                push r14	       144	fold.c	FUNCTION_4
0x40031b4	          0x4889f8	                            mov rax, rdi	       144	fold.c	FUNCTION_4
0x40031b7	            0x4155	                                push r13	       144	fold.c	FUNCTION_4
0x40031b9	            0x4154	                                push r12	       144	fold.c	FUNCTION_4
0x40031bb	          0x4989f7	                            mov r15, rsi	       144	fold.c	FUNCTION_4
0x40031be	              0x55	                                push rbp	       144	fold.c	FUNCTION_4
0x40031bf	              0x53	                                push rbx	       144	fold.c	FUNCTION_4
0x40031c0	          0x4489c3	                            mov ebx, r8d	       144	fold.c	FUNCTION_4
0x40031c3	        0x4883ec48	                           sub rsp, 0x48	       144	fold.c	FUNCTION_4
0x40031c7	      0x48897c2408	                mov qword [rsp + 8], rdi	       144	fold.c	FUNCTION_4
0x40031cc	      0x4889542420	             mov qword [rsp + 0x20], rdx	       144	fold.c	FUNCTION_4
0x40031d1	    0x64488b3c2528	                mov rdi, qword fs:[0x28]	       144	fold.c	FUNCTION_4
0x40031da	      0x48897c2438	             mov qword [rsp + 0x38], rdi	       144	fold.c	FUNCTION_4
0x40031df	            0x31ff	                            xor edi, edi	       144	fold.c	FUNCTION_4
0x40031e1	    0x80b821010000	               cmp byte [rax + 0x121], 0	      1187	fold.c	FUNCTION_38	IF_1
0x40031e8	      0x48894c2428	             mov qword [rsp + 0x28], rcx	       144	fold.c	FUNCTION_4
0x40031ed	      0x4c894c2418	              mov qword [rsp + 0x18], r9	       144	fold.c	FUNCTION_4
0x40031f2	    0xc74424300000	               mov dword [rsp + 0x30], 0	       152	fold.c	FUNCTION_4
0x40031fa	    0xc74424340000	               mov dword [rsp + 0x34], 0	       153	fold.c	FUNCTION_4
0x4003202	     0xf85ca010000	                           jne 0x40033d2	      1187	fold.c	FUNCTION_38	IF_1
0x4003208	      0x488b442408	                mov rax, qword [rsp + 8]	       119	fold.c	FUNCTION_2	CALL_1
0x400320d	    0x8b90d4010000	           mov edx, dword [rax + 0x1d4] 	       119	fold.c	FUNCTION_2	CALL_1
0x4003213	            0x85d2	                           test edx, edx	       119	fold.c	FUNCTION_2	CALL_1
0x4003215	     0xf84d5000000	                            je 0x40032f0	       119	fold.c	FUNCTION_2	CALL_1
0x400321b	          0x4889c7	                            mov rdi, rax	       119	fold.c	FUNCTION_2	CALL_1
0x400321e	      0xe8edddffff	          call sym.hasAnyFolding.part.13	       119	fold.c	FUNCTION_2	CALL_1
0x4003223	            0x85c0	                           test eax, eax	       161	fold.c	FUNCTION_4	IF_1	CALL_2
0x4003225	     0xf84c5000000	                            je 0x40032f0	       161	fold.c	FUNCTION_4	IF_1	CALL_2
0x400322b	            0x85db	                           test ebx, ebx	       168	fold.c	FUNCTION_4	IF_3
0x400322d	     0xf85f5000000	                           jne 0x4003328	       168	fold.c	FUNCTION_4	IF_3
0x4003233	          0x4531ed	                          xor r13d, r13d	       168	fold.c	FUNCTION_4	IF_3
0x4003236	            0x31c0	                            xor eax, eax	       168	fold.c	FUNCTION_4	IF_3
0x4003238	      0x488b7c2408	                mov rdi, qword [rsp + 8]	       188	fold.c	FUNCTION_4	IF_5
0x400323d	          0x4531db	                          xor r11d, r11d	       155	fold.c	FUNCTION_4
0x4003240	          0x4c89fd	                            mov rbp, r15	       188	fold.c	FUNCTION_4	IF_5
0x4003243	      0x4c897c2410	             mov qword [rsp + 0x10], r15	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x4003248	          0x4531e4	                          xor r12d, r12d	       151	fold.c	FUNCTION_4
0x400324b	          0x4531f6	                          xor r14d, r14d	       188	fold.c	FUNCTION_4	IF_5
0x400324e	          0x4589df	                          mov r15d, r11d	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x4003251	    0x488d97080100	                  lea rdx, [rdi + 0x108]	       188	fold.c	FUNCTION_4	IF_5
0x4003258	     0xf1f84000000	                   nop dword [rax + rax]	       188	fold.c	FUNCTION_4	IF_5
0x4003260	            0x8b32	                    mov esi, dword [rdx]	      1132	fold.c	FUNCTION_36
0x4003262	        0x488b7a10	            mov rdi, qword [rdx + 0x10] 	      1132	fold.c	FUNCTION_36
0x4003266	          0x83ee01	                              sub esi, 1	      1132	fold.c	FUNCTION_36
0x4003269	          0x4863f6	                         movsxd rsi, esi	      1132	fold.c	FUNCTION_36
0x400326c	          0x4885f6	                           test rsi, rsi	      1133	fold.c	FUNCTION_36	WHILE_1
0x400326f	            0x7847	                            js 0x40032b8	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003271	            0x31c9	                            xor ecx, ecx	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003273	            0xeb0e	                           jmp 0x4003283	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003275	           0xf1f00	                         nop dword [rax]	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003278	          0x83ea01	                              sub edx, 1	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x400327b	          0x4863f2	                         movsxd rsi, edx	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x400327e	          0x4839ce	                            cmp rsi, rcx	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003281	            0x7c35	                            jl 0x40032b8	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003283	        0x488d1431	                    lea rdx, [rcx + rsi]	      1135	fold.c	FUNCTION_36	WHILE_1
0x4003287	          0x48d1fa	                              sar rdx, 1	      1135	fold.c	FUNCTION_36	WHILE_1
0x400328a	        0x488d1c52	                  lea rbx, [rdx + rdx*2]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x400328e	        0x48c1e304	                              shl rbx, 4	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4003292	          0x4801fb	                            add rbx, rdi	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4003295	          0x4c8b03	                     mov r8, qword [rbx]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4003298	          0x4c39c5	                             cmp rbp, r8	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x400329b	            0x7cdb	                            jl 0x4003278	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x400329d	          0x4c89c1	                             mov rcx, r8	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x40032a0	        0x48034b08	                add rcx, qword [rbx + 8]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x40032a4	          0x4839cd	                            cmp rbp, rcx	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x40032a7	     0xf8cd3000000	                            jl 0x4003380	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x40032ad	          0x8d4a01	                      lea ecx, [rdx + 1]	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x40032b0	          0x4863c9	                         movsxd rcx, ecx	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x40032b3	          0x4839ce	                            cmp rsi, rcx	      1133	fold.c	FUNCTION_36	WHILE_1
0x40032b6	            0x7dcb	                           jge 0x4003283	      1133	fold.c	FUNCTION_36	WHILE_1
0x40032b8	          0x4589fb	                          mov r11d, r15d	      1133	fold.c	FUNCTION_36	WHILE_1
0x40032bb	      0x4c8b7c2410	            mov r15, qword [rsp + 0x10] 	      1133	fold.c	FUNCTION_36	WHILE_1
0x40032c0	            0x85c0	                           test eax, eax	       219	fold.c	FUNCTION_4	IF_9
0x40032c2	     0xf8523010000	                           jne 0x40033eb	       219	fold.c	FUNCTION_4	IF_9
0x40032c8	      0x488b442418	            mov rax, qword [rsp + 0x18] 	       221	fold.c	FUNCTION_4	IF_9	IF_10
0x40032cd	          0x4885c0	                           test rax, rax	       221	fold.c	FUNCTION_4	IF_9	IF_10
0x40032d0	            0x7431	                            je 0x4003303	       221	fold.c	FUNCTION_4	IF_9	IF_10
0x40032d2	          0x4589fa	                          mov r10d, r15d	       224	fold.c	FUNCTION_4	IF_9	IF_10
0x40032d5	          0x448920	                   mov dword [rax], r12d	       223	fold.c	FUNCTION_4	IF_9	IF_10
0x40032d8	          0x4129ea	                           sub r10d, ebp	       224	fold.c	FUNCTION_4	IF_9	IF_10
0x40032db	          0x4585db	                         test r11d, r11d	       225	fold.c	FUNCTION_4	IF_9	IF_10
0x40032de	        0x450f44dc	                        cmove r11d, r12d	       225	fold.c	FUNCTION_4	IF_9	IF_10
0x40032e2	        0x44895004	               mov dword [rax + 4], r10d	       224	fold.c	FUNCTION_4	IF_9	IF_10
0x40032e6	        0x44895808	               mov dword [rax + 8], r11d	       225	fold.c	FUNCTION_4	IF_9	IF_10
0x40032ea	            0x31c0	                            xor eax, eax	       227	fold.c	FUNCTION_4	IF_9
0x40032ec	            0xeb17	                           jmp 0x4003305	       227	fold.c	FUNCTION_4	IF_9
0x40032ee	            0x6690	                                     nop	       227	fold.c	FUNCTION_4	IF_9
0x40032f0	    0x48837c241800	               cmp qword [rsp + 0x18], 0	       163	fold.c	FUNCTION_4	IF_1	IF_2
0x40032f6	            0x740b	                            je 0x4003303	       163	fold.c	FUNCTION_4	IF_1	IF_2
0x40032f8	      0x488b442418	            mov rax, qword [rsp + 0x18] 	       164	fold.c	FUNCTION_4	IF_1	IF_2
0x40032fd	    0xc70000000000	                      mov dword [rax], 0	       164	fold.c	FUNCTION_4	IF_1	IF_2
0x4003303	            0x31c0	                            xor eax, eax	       165	fold.c	FUNCTION_4	IF_1
0x4003305	      0x488b7c2438	            mov rdi, qword [rsp + 0x38] 	       243	fold.c	FUNCTION_4
0x400330a	    0x6448333c2528	                xor rdi, qword fs:[0x28]	       243	fold.c	FUNCTION_4
0x4003313	     0xf8556010000	                           jne 0x400346f	       243	fold.c	FUNCTION_4
0x4003319	        0x4883c448	                           add rsp, 0x48	       243	fold.c	FUNCTION_4
0x400331d	              0x5b	                                 pop rbx	       243	fold.c	FUNCTION_4
0x400331e	              0x5d	                                 pop rbp	       243	fold.c	FUNCTION_4
0x400331f	            0x415c	                                 pop r12	       243	fold.c	FUNCTION_4
0x4003321	            0x415d	                                 pop r13	       243	fold.c	FUNCTION_4
0x4003323	            0x415e	                                 pop r14	       243	fold.c	FUNCTION_4
0x4003325	            0x415f	                                 pop r15	       243	fold.c	FUNCTION_4
0x4003327	              0xc3	                                     ret	       243	fold.c	FUNCTION_4
0x4003328	      0x488b442408	                mov rax, qword [rsp + 8]	      1017	fold.c	FUNCTION_32	FOR_1
0x400332d	    0x8b88f8000000	            mov ecx, dword [rax + 0xf8] 	      1017	fold.c	FUNCTION_32	FOR_1
0x4003333	            0x85c9	                           test ecx, ecx	      1017	fold.c	FUNCTION_32	FOR_1
0x4003335	     0xf8ef8feffff	                           jle 0x4003233	      1017	fold.c	FUNCTION_32	FOR_1
0x400333b	    0x488b80000100	           mov rax, qword [rax + 0x100] 	      1017	fold.c	FUNCTION_32	FOR_1
0x4003342	            0x31d2	                            xor edx, edx	      1017	fold.c	FUNCTION_32	FOR_1
0x4003344	         0xf1f4000	                         nop dword [rax]	      1017	fold.c	FUNCTION_32	FOR_1
0x4003348	        0x80780a00	                 cmp byte [rax + 0xa], 0	      1018	fold.c	FUNCTION_32	FOR_1	IF_1
0x400334c	            0x7419	                            je 0x4003367	      1018	fold.c	FUNCTION_32	FOR_1	IF_1
0x400334e	          0x4c8b30	                    mov r14, qword [rax]	      1020	fold.c	FUNCTION_32	FOR_1	IF_1	IF_2
0x4003351	          0x4d39f7	                            cmp r15, r14	      1020	fold.c	FUNCTION_32	FOR_1	IF_1	IF_2
0x4003354	     0xf8cd9feffff	                            jl 0x4003233	      1020	fold.c	FUNCTION_32	FOR_1	IF_1	IF_2
0x400335a	        0x4c8b6810	            mov r13, qword [rax + 0x10] 	      1022	fold.c	FUNCTION_32	FOR_1	IF_1	IF_3
0x400335e	          0x4d39ef	                            cmp r15, r13	      1022	fold.c	FUNCTION_32	FOR_1	IF_1	IF_3
0x4003361	     0xf8edb000000	                           jle 0x4003442	      1022	fold.c	FUNCTION_32	FOR_1	IF_1	IF_3
0x4003367	          0x83c201	                              add edx, 1	      1017	fold.c	FUNCTION_32	FOR_1
0x400336a	        0x4883c018	                           add rax, 0x18	      1017	fold.c	FUNCTION_32	FOR_1
0x400336e	            0x39ca	                            cmp edx, ecx	      1017	fold.c	FUNCTION_32	FOR_1
0x4003370	            0x75d6	                           jne 0x4003348	      1017	fold.c	FUNCTION_32	FOR_1
0x4003372	      0xe9bcfeffff	                           jmp 0x4003233	      1017	fold.c	FUNCTION_32	FOR_1
0x4003377	    0x660f1f840000	                    nop word [rax + rax]	      1017	fold.c	FUNCTION_32	FOR_1
0x4003380	          0x4c39c5	                             cmp rbp, r8	       195	fold.c	FUNCTION_4	IF_5	FOR_1	IF_7
0x4003383	            0x7511	                           jne 0x4003396	       195	fold.c	FUNCTION_4	IF_5	FOR_1	IF_7
0x4003385	          0x4585ff	                         test r15d, r15d	       195	fold.c	FUNCTION_4	IF_5	FOR_1	IF_7
0x4003388	      0x418d442401	                      lea eax, [r12 + 1]	       195	fold.c	FUNCTION_4	IF_5	FOR_1	IF_7
0x400338d	           0xf94c2	                                 sete dl	       195	fold.c	FUNCTION_4	IF_5	FOR_1	IF_7
0x4003390	            0x84d2	                             test dl, dl	       195	fold.c	FUNCTION_4	IF_5	FOR_1	IF_7
0x4003392	        0x440f45f8	                        cmovne r15d, eax	       195	fold.c	FUNCTION_4	IF_5	FOR_1	IF_7
0x4003396	      0x4c8b4c2410	              mov r9, qword [rsp + 0x10]	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x400339b	      0x488b7c2408	                mov rdi, qword [rsp + 8]	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x40033a0	          0x4d01c6	                             add r14, r8	       198	fold.c	FUNCTION_4	IF_5	FOR_1
0x40033a3	          0x4d01c5	                             add r13, r8	       199	fold.c	FUNCTION_4	IF_5	FOR_1
0x40033a6	      0x488d542430	                   lea rdx, [rsp + 0x30]	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x40033ab	      0x4c8d442434	                    lea r8, [rsp + 0x34]	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x40033b0	          0x4489e1	                           mov ecx, r12d	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x40033b3	          0x4889de	                            mov rsi, rbx	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x40033b6	          0x4929e9	                             sub r9, rbp	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x40033b9	      0xe802cdffff	                   call sym.check_closed	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x40033be	            0x85c0	                           test eax, eax	       204	fold.c	FUNCTION_4	IF_5	FOR_1	IF_8
0x40033c0	            0x751d	                           jne 0x40033df	       204	fold.c	FUNCTION_4	IF_5	FOR_1	IF_8
0x40033c2	        0x488d5310	                   lea rdx, [rbx + 0x10]	       213	fold.c	FUNCTION_4	IF_5	FOR_1
0x40033c6	          0x482b2b	                    sub rbp, qword [rbx]	       214	fold.c	FUNCTION_4	IF_5	FOR_1
0x40033c9	        0x4183c401	                             add r12d, 1	       215	fold.c	FUNCTION_4	IF_5	FOR_1
0x40033cd	      0xe98efeffff	                           jmp 0x4003260	       216	fold.c	FUNCTION_4	IF_5	FOR_1
0x40033d2	          0x4889c7	                            mov rdi, rax	       216	fold.c	FUNCTION_4	IF_5	FOR_1
0x40033d5	      0xe896fdffff	            call sym.checkupdate.part.17	       216	fold.c	FUNCTION_4	IF_5	FOR_1
0x40033da	      0xe929feffff	                           jmp 0x4003208	       216	fold.c	FUNCTION_4	IF_5	FOR_1
0x40033df	        0x488b4308	                mov rax, qword [rbx + 8]	       207	fold.c	FUNCTION_4	IF_5	FOR_1	IF_8
0x40033e3	          0x4589fb	                          mov r11d, r15d	       207	fold.c	FUNCTION_4	IF_5	FOR_1	IF_8
0x40033e6	      0x4d8d6c05ff	                lea r13, [r13 + rax - 1]	       207	fold.c	FUNCTION_4	IF_5	FOR_1	IF_8
0x40033eb	      0x488b442408	                mov rax, qword [rsp + 8]	       230	fold.c	FUNCTION_4	IF_11
0x40033f0	      0x488b7c2428	            mov rdi, qword [rsp + 0x28] 	       232	fold.c	FUNCTION_4	IF_12
0x40033f5	        0x488b4008	                mov rax, qword [rax + 8]	       230	fold.c	FUNCTION_4	IF_11
0x40033f9	          0x488b00	                    mov rax, qword [rax]	       230	fold.c	FUNCTION_4	IF_11
0x40033fc	          0x4c39e8	                            cmp rax, r13	       230	fold.c	FUNCTION_4	IF_11
0x40033ff	        0x490f4fc5	                          cmovg rax, r13	       230	fold.c	FUNCTION_4	IF_11
0x4003403	          0x4885ff	                           test rdi, rdi	       232	fold.c	FUNCTION_4	IF_12
0x4003406	            0x7403	                            je 0x400340b	       232	fold.c	FUNCTION_4	IF_12
0x4003408	          0x488907	                    mov qword [rdi], rax	       233	fold.c	FUNCTION_4	IF_12
0x400340b	      0x488b442420	            mov rax, qword [rsp + 0x20] 	       234	fold.c	FUNCTION_4	IF_13
0x4003410	          0x4885c0	                           test rax, rax	       234	fold.c	FUNCTION_4	IF_13
0x4003413	            0x7403	                            je 0x4003418	       234	fold.c	FUNCTION_4	IF_13
0x4003415	          0x4c8930	                    mov qword [rax], r14	       235	fold.c	FUNCTION_4	IF_13
0x4003418	      0x488b442418	            mov rax, qword [rsp + 0x18] 	       236	fold.c	FUNCTION_4	IF_14
0x400341d	          0x4885c0	                           test rax, rax	       236	fold.c	FUNCTION_4	IF_14
0x4003420	            0x7443	                            je 0x4003465	       236	fold.c	FUNCTION_4	IF_14
0x4003422	        0x4183c401	                             add r12d, 1	       238	fold.c	FUNCTION_4	IF_14
0x4003426	          0x4585db	                         test r11d, r11d	       238	fold.c	FUNCTION_4	IF_14
0x4003429	        0x44897004	               mov dword [rax + 4], r14d	       239	fold.c	FUNCTION_4	IF_14
0x400342d	          0x448920	                   mov dword [rax], r12d	       238	fold.c	FUNCTION_4	IF_14
0x4003430	        0x450f45e3	                       cmovne r12d, r11d	       238	fold.c	FUNCTION_4	IF_14
0x4003434	        0x44896008	               mov dword [rax + 8], r12d	       240	fold.c	FUNCTION_4	IF_14
0x4003438	      0xb801000000	                              mov eax, 1	       242	fold.c	FUNCTION_4
0x400343d	      0xe9c3feffff	                           jmp 0x4003305	       242	fold.c	FUNCTION_4
0x4003442	            0x85d2	                           test edx, edx	       175	fold.c	FUNCTION_4	IF_3	IF_4
0x4003444	     0xf88e9fdffff	                            js 0x4003233	       175	fold.c	FUNCTION_4	IF_3	IF_4
0x400344a	          0x4d85f6	                           test r14, r14	       183	fold.c	FUNCTION_4	IF_5
0x400344d	         0xfbe400b	            movsx eax, byte [rax + 0xb] 	       179	fold.c	FUNCTION_4	IF_3	IF_4
0x4003451	     0xf84e1fdffff	                            je 0x4003238	       183	fold.c	FUNCTION_4	IF_5
0x4003457	          0x4c89fd	                            mov rbp, r15	       183	fold.c	FUNCTION_4	IF_5
0x400345a	          0x4531db	                          xor r11d, r11d	       155	fold.c	FUNCTION_4
0x400345d	          0x4531e4	                          xor r12d, r12d	       151	fold.c	FUNCTION_4
0x4003460	      0xe95bfeffff	                           jmp 0x40032c0	       151	fold.c	FUNCTION_4
0x4003465	      0xb801000000	                              mov eax, 1	       242	fold.c	FUNCTION_4
0x400346a	      0xe996feffff	                           jmp 0x4003305	       242	fold.c	FUNCTION_4
0x400346f	      0xe800000000	                          call 0x4003474	       243	fold.c	FUNCTION_4
setManualFoldWin	FOR,2:functions,0:IF,15:ELSE,3:CALL,6:DO,0:SWITCH,0:WHILE,0	194
0x4003740	            0x4157	                                push r15	      1273	fold.c	FUNCTION_41
0x4003742	            0x4156	                                push r14	      1273	fold.c	FUNCTION_41
0x4003744	            0x4155	                                push r13	      1273	fold.c	FUNCTION_41
0x4003746	            0x4154	                                push r12	      1273	fold.c	FUNCTION_41
0x4003748	              0x55	                                push rbp	      1273	fold.c	FUNCTION_41
0x4003749	              0x53	                                push rbx	      1273	fold.c	FUNCTION_41
0x400374a	        0x4883ec28	                           sub rsp, 0x28	      1273	fold.c	FUNCTION_41
0x400374e	    0x80bf21010000	               cmp byte [rdi + 0x121], 0	      1187	fold.c	FUNCTION_38	IF_1
0x4003755	        0x48893c24	                    mov qword [rsp], rdi	      1273	fold.c	FUNCTION_41
0x4003759	      0x4c89442410	              mov qword [rsp + 0x10], r8	      1273	fold.c	FUNCTION_41
0x400375e	     0xf8513020000	                           jne 0x4003977	      1187	fold.c	FUNCTION_38	IF_1
0x4003764	        0x488b0424	                    mov rax, qword [rsp]	      1291	fold.c	FUNCTION_41
0x4003768	            0x31ed	                            xor ebp, ebp	      1291	fold.c	FUNCTION_41
0x400376a	    0xc74424180000	               mov dword [rsp + 0x18], 0	      1284	fold.c	FUNCTION_41
0x4003772	          0x4531e4	                          xor r12d, r12d	      1283	fold.c	FUNCTION_41
0x4003775	    0x48c7442408ff	        mov qword [rsp + 8], 0x7fffffff 	      1282	fold.c	FUNCTION_41
0x400377e	          0x4531ff	                          xor r15d, r15d	      1280	fold.c	FUNCTION_41
0x4003781	          0x4531f6	                          xor r14d, r14d	      1279	fold.c	FUNCTION_41
0x4003784	          0x4531ed	                          xor r13d, r13d	      1276	fold.c	FUNCTION_41
0x4003787	    0x480508010000	                          add rax, 0x108	      1291	fold.c	FUNCTION_41
0x400378d	           0xf1f00	                         nop dword [rax]	      1291	fold.c	FUNCTION_41
0x4003790	          0x486318	                 movsxd rbx, dword [rax]	      1291	fold.c	FUNCTION_41
0x4003793	        0x4c8b5810	            mov r11, qword [rax + 0x10] 	      1291	fold.c	FUNCTION_41
0x4003797	        0x448d4bff	                      lea r9d, [rbx - 1]	      1132	fold.c	FUNCTION_36
0x400379b	          0x4d63c9	                          movsxd r9, r9d	      1132	fold.c	FUNCTION_36
0x400379e	          0x4d85c9	                             test r9, r9	      1133	fold.c	FUNCTION_36	WHILE_1
0x40037a1	     0xf88c9010000	                            js 0x4003970	      1133	fold.c	FUNCTION_36	WHILE_1
0x40037a7	            0x31ff	                            xor edi, edi	      1133	fold.c	FUNCTION_36	WHILE_1
0x40037a9	            0xeb10	                           jmp 0x40037bb	      1133	fold.c	FUNCTION_36	WHILE_1
0x40037ab	       0xf1f440000	                   nop dword [rax + rax]	      1133	fold.c	FUNCTION_36	WHILE_1
0x40037b0	          0x83e801	                              sub eax, 1	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40037b3	          0x4c63c8	                          movsxd r9, eax	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40037b6	          0x4c39cf	                             cmp rdi, r9	      1133	fold.c	FUNCTION_36	WHILE_1
0x40037b9	            0x7f31	                            jg 0x40037ec	      1133	fold.c	FUNCTION_36	WHILE_1
0x40037bb	        0x498d0439	                     lea rax, [r9 + rdi]	      1135	fold.c	FUNCTION_36	WHILE_1
0x40037bf	          0x48d1f8	                              sar rax, 1	      1135	fold.c	FUNCTION_36	WHILE_1
0x40037c2	        0x4c8d0440	                   lea r8, [rax + rax*2]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40037c6	        0x49c1e004	                               shl r8, 4	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40037ca	          0x4d01d8	                             add r8, r11	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40037cd	          0x4d8b10	                     mov r10, qword [r8]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40037d0	          0x4c39d6	                            cmp rsi, r10	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40037d3	            0x7cdb	                            jl 0x40037b0	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x40037d5	          0x4c89d7	                            mov rdi, r10	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x40037d8	        0x49037808	                 add rdi, qword [r8 + 8]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x40037dc	          0x4839fe	                            cmp rsi, rdi	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x40037df	            0x7c67	                            jl 0x4003848	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x40037e1	          0x83c001	                              add eax, 1	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x40037e4	          0x4863f8	                         movsxd rdi, eax	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x40037e7	          0x4c39cf	                             cmp rdi, r9	      1133	fold.c	FUNCTION_36	WHILE_1
0x40037ea	            0x7ecf	                           jle 0x40037bb	      1133	fold.c	FUNCTION_36	WHILE_1
0x40037ec	        0x488d0c7f	                  lea rcx, [rdi + rdi*2]	      1133	fold.c	FUNCTION_36	WHILE_1
0x40037f0	        0x48c1e104	                              shl rcx, 4	      1133	fold.c	FUNCTION_36	WHILE_1
0x40037f4	        0x488d045b	                  lea rax, [rbx + rbx*2]	      1297	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x40037f8	          0x4c01d9	                            add rcx, r11	      1149	fold.c	FUNCTION_36
0x40037fb	        0x48c1e004	                              shl rax, 4	      1297	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x40037ff	          0x4901c3	                            add r11, rax	      1297	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x4003802	          0x4c39d9	                            cmp rcx, r11	      1297	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x4003805	            0x7309	                           jae 0x4003810	      1297	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x4003807	          0x4c0321	                    add r12, qword [rcx]	      1298	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x400380a	      0x4c89642408	                mov qword [rsp + 8], r12	      1298	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x400380f	              0x90	                                     nop	      1298	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x4003810	          0x4585ff	                         test r15d, r15d	      1351	fold.c	FUNCTION_41	IF_11
0x4003813	     0xf85ae010000	                           jne 0x40039c7	      1351	fold.c	FUNCTION_41	IF_11
0x4003819	    0x48837c241000	               cmp qword [rsp + 0x10], 0	      1364	fold.c	FUNCTION_41	ELSE_3	IF_14
0x400381f	     0xf84d4010000	                            je 0x40039f9	      1364	fold.c	FUNCTION_41	ELSE_3	IF_14
0x4003825	      0x488b442410	            mov rax, qword [rsp + 0x10] 	      1368	fold.c	FUNCTION_41	IF_15
0x400382a	        0x8b542418	            mov edx, dword [rsp + 0x18] 	      1368	fold.c	FUNCTION_41	IF_15
0x400382e	             0x910	                     or dword [rax], edx	      1368	fold.c	FUNCTION_41	IF_15
0x4003830	      0x488b442408	                mov rax, qword [rsp + 8]	      1371	fold.c	FUNCTION_41
0x4003835	        0x4883c428	                           add rsp, 0x28	      1371	fold.c	FUNCTION_41
0x4003839	              0x5b	                                 pop rbx	      1371	fold.c	FUNCTION_41
0x400383a	              0x5d	                                 pop rbp	      1371	fold.c	FUNCTION_41
0x400383b	            0x415c	                                 pop r12	      1371	fold.c	FUNCTION_41
0x400383d	            0x415d	                                 pop r13	      1371	fold.c	FUNCTION_41
0x400383f	            0x415e	                                 pop r14	      1371	fold.c	FUNCTION_41
0x4003841	            0x415f	                                 pop r15	      1371	fold.c	FUNCTION_41
0x4003843	              0xc3	                                     ret	      1371	fold.c	FUNCTION_41
0x4003844	         0xf1f4000	                         nop dword [rax]	      1371	fold.c	FUNCTION_41
0x4003848	        0x488d045b	                  lea rax, [rbx + rbx*2]	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x400384c	        0x498d7830	                    lea rdi, [r8 + 0x30]	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x4003850	        0x48c1e004	                              shl rax, 4	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x4003854	          0x4901c3	                            add r11, rax	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x4003857	          0x4c39df	                            cmp rdi, r11	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x400385a	            0x730c	                           jae 0x4003868	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x400385c	          0x4c89e0	                            mov rax, r12	      1307	fold.c	FUNCTION_41	FOR_1	IF_3
0x400385f	        0x49034030	              add rax, qword [r8 + 0x30]	      1307	fold.c	FUNCTION_41	FOR_1	IF_3
0x4003863	      0x4889442408	                mov qword [rsp + 8], rax	      1307	fold.c	FUNCTION_41	FOR_1	IF_3
0x4003868	          0x4585f6	                         test r14d, r14d	      1310	fold.c	FUNCTION_41	FOR_1	IF_4
0x400386b	            0x7553	                           jne 0x40038c0	      1310	fold.c	FUNCTION_41	FOR_1	IF_4
0x400386d	      0x410fb64028	            movzx eax, byte [r8 + 0x28] 	      1310	fold.c	FUNCTION_41	FOR_1	IF_4
0x4003872	            0x3c02	                               cmp al, 2	      1310	fold.c	FUNCTION_41	FOR_1	IF_4
0x4003874	            0x744a	                            je 0x40038c0	      1310	fold.c	FUNCTION_41	FOR_1	IF_4
0x4003876	            0x85d2	                           test edx, edx	      1323	fold.c	FUNCTION_41	FOR_1	IF_6
0x4003878	        0x400f94c7	                                sete dil	      1323	fold.c	FUNCTION_41	FOR_1	IF_6
0x400387c	            0x85c9	                           test ecx, ecx	      1323	fold.c	FUNCTION_41	FOR_1	IF_6
0x400387e	          0x4189f9	                            mov r9d, edi	      1323	fold.c	FUNCTION_41	FOR_1	IF_6
0x4003881	     0xf8499000000	                            je 0x4003920	      1323	fold.c	FUNCTION_41	FOR_1	IF_6
0x4003887	          0x4084ff	                           test dil, dil	      1323	fold.c	FUNCTION_41	FOR_1	IF_6
0x400388a	     0xf8490000000	                            je 0x4003920	      1323	fold.c	FUNCTION_41	FOR_1	IF_6
0x4003890	            0x3c01	                               cmp al, 1	      1325	fold.c	FUNCTION_41	FOR_1	IF_6	IF_7
0x4003892	            0x740d	                            je 0x40038a1	      1325	fold.c	FUNCTION_41	FOR_1	IF_6	IF_7
0x4003894	      0x41c6402801	                 mov byte [r8 + 0x28], 1	      1328	fold.c	FUNCTION_41	FOR_1	IF_6	IF_7
0x4003899	    0xc74424180100	               mov dword [rsp + 0x18], 1	      1327	fold.c	FUNCTION_41	FOR_1	IF_6	IF_7
0x40038a1	        0x498d4010	                    lea rax, [r8 + 0x10]	      1346	fold.c	FUNCTION_41	FOR_1
0x40038a5	          0x4c29d6	                            sub rsi, r10	      1347	fold.c	FUNCTION_41	FOR_1
0x40038a8	          0x4d01d4	                            add r12, r10	      1348	fold.c	FUNCTION_41	FOR_1
0x40038ab	        0x4883c501	                              add rbp, 1	      1348	fold.c	FUNCTION_41	FOR_1
0x40038af	    0x41bf01000000	                             mov r15d, 1	      1303	fold.c	FUNCTION_41	FOR_1
0x40038b5	          0x4d89c5	                             mov r13, r8	      1350	fold.c	FUNCTION_41	FOR_1
0x40038b8	      0xe9d3feffff	                           jmp 0x4003790	      1350	fold.c	FUNCTION_41	FOR_1
0x40038bd	           0xf1f00	                         nop dword [rax]	      1350	fold.c	FUNCTION_41	FOR_1
0x40038c0	        0x488b0424	                    mov rax, qword [rsp]	      1314	fold.c	FUNCTION_41	FOR_1	IF_4	IF_5
0x40038c4	        0x418b7810	              mov edi, dword [r8 + 0x10]	      1318	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x40038c8	        0x4d8b4820	               mov r9, qword [r8 + 0x20]	      1317	fold.c	FUNCTION_41	FOR_1	IF_4
0x40038cc	    0x483ba8e80100	           cmp rbp, qword [rax + 0x1e8] 	      1314	fold.c	FUNCTION_41	FOR_1	IF_4	IF_5
0x40038d3	           0xf9dc0	                                setge al	      1314	fold.c	FUNCTION_41	FOR_1	IF_4	IF_5
0x40038d6	            0x85ff	                           test edi, edi	      1318	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x40038d8	        0x41884028	                mov byte [r8 + 0x28], al	      1314	fold.c	FUNCTION_41	FOR_1	IF_4	IF_5
0x40038dc	            0x7e2b	                           jle 0x4003909	      1318	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x40038de	          0x83ef01	                              sub edi, 1	      1318	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x40038e1	        0x498d4128	                    lea rax, [r9 + 0x28]	      1318	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x40038e5	        0x488d3c7f	                  lea rdi, [rdi + rdi*2]	      1318	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x40038e9	        0x48c1e704	                              shl rdi, 4	      1318	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x40038ed	      0x498d7c3958	              lea rdi, [r9 + rdi + 0x58]	      1318	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x40038f2	    0x660f1f440000	                    nop word [rax + rax]	      1318	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x40038f8	          0xc60002	                       mov byte [rax], 2	      1319	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x40038fb	        0x4883c030	                           add rax, 0x30	      1319	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x40038ff	          0x4839c7	                            cmp rdi, rax	      1318	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x4003902	            0x75f4	                           jne 0x40038f8	      1318	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x4003904	      0x410fb64028	            movzx eax, byte [r8 + 0x28] 	      1318	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x4003909	            0x85d2	                           test edx, edx	      1323	fold.c	FUNCTION_41	FOR_1	IF_6
0x400390b	    0x41be01000000	                             mov r14d, 1	      1312	fold.c	FUNCTION_41	FOR_1	IF_4
0x4003911	        0x400f94c7	                                sete dil	      1323	fold.c	FUNCTION_41	FOR_1	IF_6
0x4003915	            0x85c9	                           test ecx, ecx	      1323	fold.c	FUNCTION_41	FOR_1	IF_6
0x4003917	          0x4189f9	                            mov r9d, edi	      1323	fold.c	FUNCTION_41	FOR_1	IF_6
0x400391a	     0xf8567ffffff	                           jne 0x4003887	      1323	fold.c	FUNCTION_41	FOR_1	IF_6
0x4003920	            0x3c01	                               cmp al, 1	      1331	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8
0x4003922	     0xf8579ffffff	                           jne 0x40038a1	      1331	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8
0x4003928	            0x85d2	                           test edx, edx	      1334	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9
0x400392a	     0xf85a2000000	                           jne 0x40039d2	      1334	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9
0x4003930	          0x4d85ed	                           test r13, r13	      1354	fold.c	FUNCTION_41	IF_11	IF_12
0x4003933	            0x7466	                            je 0x400399b	      1354	fold.c	FUNCTION_41	IF_11	IF_12
0x4003935	          0x4584c9	                           test r9b, r9b	      1354	fold.c	FUNCTION_41	IF_11	IF_12
0x4003938	            0x7461	                            je 0x400399b	      1354	fold.c	FUNCTION_41	IF_11	IF_12
0x400393a	        0x488b0424	                    mov rax, qword [rsp]	      1359	fold.c	FUNCTION_41	IF_11
0x400393e	      0x41c6452801	                mov byte [r13 + 0x28], 1	      1356	fold.c	FUNCTION_41	IF_11	IF_12
0x4003943	    0xc68020010000	               mov byte [rax + 0x120], 1	      1359	fold.c	FUNCTION_41	IF_11
0x400394a	        0x488b3c24	                    mov rdi, qword [rsp]	      1361	fold.c	FUNCTION_41	IF_11	CALL_4
0x400394e	      0xe800000000	                          call 0x4003953	      1361	fold.c	FUNCTION_41	IF_11	CALL_4
0x4003953	    0x48837c241000	               cmp qword [rsp + 0x10], 0	      1367	fold.c	FUNCTION_41	IF_15
0x4003959	    0xc74424180300	               mov dword [rsp + 0x18], 3	      1361	fold.c	FUNCTION_41	IF_11	CALL_4
0x4003961	     0xf85befeffff	                           jne 0x4003825	      1367	fold.c	FUNCTION_41	IF_15
0x4003967	      0xe9c4feffff	                           jmp 0x4003830	      1367	fold.c	FUNCTION_41	IF_15
0x400396c	         0xf1f4000	                         nop dword [rax]	      1367	fold.c	FUNCTION_41	IF_15
0x4003970	            0x31c9	                            xor ecx, ecx	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003972	      0xe97dfeffff	                           jmp 0x40037f4	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003977	        0x894c241c	             mov dword [rsp + 0x1c], ecx	      1133	fold.c	FUNCTION_36	WHILE_1
0x400397b	        0x89542418	             mov dword [rsp + 0x18], edx	      1133	fold.c	FUNCTION_36	WHILE_1
0x400397f	      0x4889742408	                mov qword [rsp + 8], rsi	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003984	      0xe8e7f7ffff	            call sym.checkupdate.part.17	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003989	        0x8b4c241c	            mov ecx, dword [rsp + 0x1c] 	      1133	fold.c	FUNCTION_36	WHILE_1
0x400398d	        0x8b542418	            mov edx, dword [rsp + 0x18] 	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003991	      0x488b742408	                mov rsi, qword [rsp + 8]	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003996	      0xe9c9fdffff	                           jmp 0x4003764	      1133	fold.c	FUNCTION_36	WHILE_1
0x400399b	        0x488b0424	                    mov rax, qword [rsp]	      1359	fold.c	FUNCTION_41	IF_11
0x400399f	    0xc68020010000	               mov byte [rax + 0x120], 1	      1359	fold.c	FUNCTION_41	IF_11
0x40039a6	        0x8b442418	            mov eax, dword [rsp + 0x18] 	      1360	fold.c	FUNCTION_41	IF_11	IF_13
0x40039aa	            0x85c0	                           test eax, eax	      1360	fold.c	FUNCTION_41	IF_11	IF_13
0x40039ac	            0x759c	                           jne 0x400394a	      1360	fold.c	FUNCTION_41	IF_11	IF_13
0x40039ae	    0x48837c241000	               cmp qword [rsp + 0x10], 0	      1367	fold.c	FUNCTION_41	IF_15
0x40039b4	    0xc74424180200	               mov dword [rsp + 0x18], 2	      1367	fold.c	FUNCTION_41	IF_15
0x40039bc	     0xf8563feffff	                           jne 0x4003825	      1367	fold.c	FUNCTION_41	IF_15
0x40039c2	      0xe969feffff	                           jmp 0x4003830	      1367	fold.c	FUNCTION_41	IF_15
0x40039c7	            0x85d2	                           test edx, edx	      1367	fold.c	FUNCTION_41	IF_15
0x40039c9	        0x410f94c1	                                sete r9b	      1367	fold.c	FUNCTION_41	IF_15
0x40039cd	      0xe95effffff	                           jmp 0x4003930	      1367	fold.c	FUNCTION_41	IF_15
0x40039d2	            0x85c9	                           test ecx, ecx	      1338	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9	IF_10
0x40039d4	      0x41c6402800	                 mov byte [r8 + 0x28], 0	      1336	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9
0x40039d9	    0xc74424180100	               mov dword [rsp + 0x18], 1	      1337	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9
0x40039e1	     0xf8449ffffff	                            je 0x4003930	      1338	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9	IF_10
0x40039e7	        0x498b7020	              mov rsi, qword [r8 + 0x20]	      1339	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9	CALL_3
0x40039eb	        0x498d7810	                    lea rdi, [r8 + 0x10]	      1339	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9	CALL_3
0x40039ef	      0xe85cd1ffff	          call sym.foldOpenNested.isra.2	      1339	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9	CALL_3
0x40039f4	      0xe937ffffff	                           jmp 0x4003930	      1339	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9	CALL_3
0x40039f9	        0x488b0424	                    mov rax, qword [rsp]	      1364	fold.c	FUNCTION_41	ELSE_3	IF_14
0x40039fd	    0x483b05000000	            cmp rax, qword [0x04003a04] 	      1364	fold.c	FUNCTION_41	ELSE_3	IF_14
0x4003a04	     0xf8526feffff	                           jne 0x4003830	      1364	fold.c	FUNCTION_41	ELSE_3	IF_14
0x4003a0a	            0x31ff	                            xor edi, edi	      1365	fold.c	FUNCTION_41	ELSE_3	IF_14
0x4003a0c	      0xba05000000	                              mov edx, 5	      1365	fold.c	FUNCTION_41	ELSE_3	IF_14
0x4003a11	      0xbe00000000	                              mov esi, 0	      1365	fold.c	FUNCTION_41	ELSE_3	IF_14
0x4003a16	      0xe800000000	                          call 0x4003a1b	      1365	fold.c	FUNCTION_41	ELSE_3	IF_14
0x4003a1b	          0x4889c7	                            mov rdi, rax	      1365	fold.c	FUNCTION_41	ELSE_3	IF_14
0x4003a1e	      0xe800000000	                          call 0x4003a23	      1365	fold.c	FUNCTION_41	ELSE_3	IF_14
0x4003a23	      0xe908feffff	                           jmp 0x4003830	      1365	fold.c	FUNCTION_41	ELSE_3	IF_14
foldAdjustCursor	FOR,0:functions,0:IF,0:ELSE,0:CALL,1:DO,0:SWITCH,0:WHILE,0	7
0x40035e0	    0x488b3d000000	            mov rdi, qword [0x040035e7] 	      1074	fold.c	FUNCTION_34	CALL_1
0x40035e7	          0x4531c9	                            xor r9d, r9d	       132	fold.c	FUNCTION_3	CALL_1
0x40035ea	    0x41b801000000	                              mov r8d, 1	       132	fold.c	FUNCTION_3	CALL_1
0x40035f0	            0x31c9	                            xor ecx, ecx	       132	fold.c	FUNCTION_3	CALL_1
0x40035f2	        0x488b7738	            mov rsi, qword [rdi + 0x38] 	       132	fold.c	FUNCTION_3	CALL_1
0x40035f6	        0x488d5738	                   lea rdx, [rdi + 0x38]	      1074	fold.c	FUNCTION_34	CALL_1
0x40035fa	      0xe9b1fbffff	                   jmp sym.hasFoldingWin	       132	fold.c	FUNCTION_3	CALL_1
foldlevelMarker	FOR,0:functions,0:IF,9:ELSE,5:CALL,8:DO,0:SWITCH,0:WHILE,1	124
0x40008d0	            0x4157	                                push r15	      3375	fold.c	FUNCTION_71
0x40008d2	            0x4156	                                push r14	      3375	fold.c	FUNCTION_71
0x40008d4	          0x4989ff	                            mov r15, rdi	      3375	fold.c	FUNCTION_71
0x40008d7	            0x4155	                                push r13	      3375	fold.c	FUNCTION_71
0x40008d9	            0x4154	                                push r12	      3375	fold.c	FUNCTION_71
0x40008db	              0x55	                                push rbp	      3375	fold.c	FUNCTION_71
0x40008dc	              0x53	                                push rbx	      3375	fold.c	FUNCTION_71
0x40008dd	        0x4883ec18	                           sub rsp, 0x18	      3375	fold.c	FUNCTION_71
0x40008e1	          0x8b4720	            mov eax, dword [rdi + 0x20] 	      3379	fold.c	FUNCTION_71
0x40008e4	    0x488b15000000	            mov rdx, qword [0x040008eb] 	      3387	fold.c	FUNCTION_71
0x40008eb	            0x89c1	                            mov ecx, eax	      3379	fold.c	FUNCTION_71
0x40008ed	        0x8944240c	              mov dword [rsp + 0xc], eax	      3379	fold.c	FUNCTION_71
0x40008f1	          0x488b07	                    mov rax, qword [rdi]	      3384	fold.c	FUNCTION_71
0x40008f4	        0x440fb62a	                  movzx r13d, byte [rdx]	      3387	fold.c	FUNCTION_71
0x40008f8	            0x31d2	                            xor edx, edx	      3393	fold.c	FUNCTION_71	CALL_1
0x40008fa	    0x4c8bb0280200	           mov r14, qword [rax + 0x228] 	      3384	fold.c	FUNCTION_71
0x4000901	        0x498d7601	                      lea rsi, [r14 + 1]	      3386	fold.c	FUNCTION_71
0x4000905	        0x450fb626	                  movzx r12d, byte [r14]	      3385	fold.c	FUNCTION_71
0x4000909	    0xc74728000000	               mov dword [rdi + 0x28], 0	      3390	fold.c	FUNCTION_71
0x4000910	          0x894f24	             mov dword [rdi + 0x24], ecx	      3391	fold.c	FUNCTION_71
0x4000913	        0x48893424	                    mov qword [rsp], rsi	      3386	fold.c	FUNCTION_71
0x4000917	        0x488b7710	            mov rsi, qword [rdi + 0x10] 	      3393	fold.c	FUNCTION_71	CALL_1
0x400091b	        0x48037708	                add rsi, qword [rdi + 8]	      3393	fold.c	FUNCTION_71	CALL_1
0x400091f	        0x488b7808	                mov rdi, qword [rax + 8]	      3393	fold.c	FUNCTION_71	CALL_1
0x4000923	      0xe800000000	                          call 0x4000928	      3393	fold.c	FUNCTION_71	CALL_1
0x4000928	          0x4889c3	                            mov rbx, rax	      3393	fold.c	FUNCTION_71	CALL_1
0x400092b	           0xfb62b	                   movzx ebp, byte [rbx]	      3394	fold.c	FUNCTION_71	WHILE_1
0x400092e	          0x4084ed	                           test bpl, bpl	      3394	fold.c	FUNCTION_71	WHILE_1
0x4000931	            0x742c	                            je 0x400095f	      3394	fold.c	FUNCTION_71	WHILE_1
0x4000933	          0x4138ec	                           cmp r12b, bpl	      3396	fold.c	FUNCTION_71	WHILE_1	IF_1
0x4000936	            0x7448	                            je 0x4000980	      3396	fold.c	FUNCTION_71	WHILE_1	IF_1
0x4000938	          0x4138ed	                           cmp r13b, bpl	      3421	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5
0x400093b	     0xf8487000000	                            je 0x40009c8	      3421	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5
0x4000941	    0x8b1500000000	            mov edx, dword [0x04000947] 	      3442	fold.c	FUNCTION_71	WHILE_1	CALL_8
0x4000947	      0xb801000000	                              mov eax, 1	      3442	fold.c	FUNCTION_71	WHILE_1	CALL_8
0x400094c	            0x85d2	                           test edx, edx	      3442	fold.c	FUNCTION_71	WHILE_1	CALL_8
0x400094e	     0xf85bc000000	                           jne 0x4000a10	      3442	fold.c	FUNCTION_71	WHILE_1	CALL_8
0x4000954	          0x4801c3	                            add rbx, rax	      3442	fold.c	FUNCTION_71	WHILE_1	CALL_8
0x4000957	           0xfb62b	                   movzx ebp, byte [rbx]	      3394	fold.c	FUNCTION_71	WHILE_1
0x400095a	          0x4084ed	                           test bpl, bpl	      3394	fold.c	FUNCTION_71	WHILE_1
0x400095d	            0x75d4	                           jne 0x4000933	      3394	fold.c	FUNCTION_71	WHILE_1
0x400095f	        0x418b4724	            mov eax, dword [r15 + 0x24] 	      3446	fold.c	FUNCTION_71	IF_9
0x4000963	            0x85c0	                           test eax, eax	      3446	fold.c	FUNCTION_71	IF_9
0x4000965	            0x7908	                           jns 0x400096f	      3446	fold.c	FUNCTION_71	IF_9
0x4000967	    0x41c747240000	               mov dword [r15 + 0x24], 0	      3447	fold.c	FUNCTION_71	IF_9
0x400096f	        0x4883c418	                           add rsp, 0x18	      3448	fold.c	FUNCTION_71
0x4000973	              0x5b	                                 pop rbx	      3448	fold.c	FUNCTION_71
0x4000974	              0x5d	                                 pop rbp	      3448	fold.c	FUNCTION_71
0x4000975	            0x415c	                                 pop r12	      3448	fold.c	FUNCTION_71
0x4000977	            0x415d	                                 pop r13	      3448	fold.c	FUNCTION_71
0x4000979	            0x415e	                                 pop r14	      3448	fold.c	FUNCTION_71
0x400097b	            0x415f	                                 pop r15	      3448	fold.c	FUNCTION_71
0x400097d	              0xc3	                                     ret	      3448	fold.c	FUNCTION_71
0x400097e	            0x6690	                                     nop	      3448	fold.c	FUNCTION_71
0x4000980	    0x448b35000000	           mov r14d, dword [0x04000987] 	      3397	fold.c	FUNCTION_71	WHILE_1	IF_1	CALL_2
0x4000987	        0x488b3424	                    mov rsi, qword [rsp]	      3397	fold.c	FUNCTION_71	WHILE_1	IF_1	CALL_2
0x400098b	        0x488d7b01	                      lea rdi, [rbx + 1]	      3397	fold.c	FUNCTION_71	WHILE_1	IF_1	CALL_2
0x400098f	        0x418d56ff	                      lea edx, [r14 - 1]	      3397	fold.c	FUNCTION_71	WHILE_1	IF_1	CALL_2
0x4000993	          0x4863d2	                         movsxd rdx, edx	      3397	fold.c	FUNCTION_71	WHILE_1	IF_1	CALL_2
0x4000996	      0xe800000000	                          call 0x400099b	      3397	fold.c	FUNCTION_71	WHILE_1	IF_1	CALL_2
0x400099b	            0x85c0	                           test eax, eax	      3397	fold.c	FUNCTION_71	WHILE_1	IF_1	CALL_2
0x400099d	            0x7599	                           jne 0x4000938	      3397	fold.c	FUNCTION_71	WHILE_1	IF_1	CALL_2
0x400099f	          0x4d63c6	                         movsxd r8, r14d	      3400	fold.c	FUNCTION_71	WHILE_1	IF_1
0x40009a2	          0x4c01c3	                             add rbx, r8	      3400	fold.c	FUNCTION_71	WHILE_1	IF_1
0x40009a5	           0xfb603	                   movzx eax, byte [rbx]	      3401	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	CALL_3
0x40009a8	          0x83e830	                           sub eax, 0x30	      3401	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	CALL_3
0x40009ab	          0x83f809	                              cmp eax, 9	      3401	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	CALL_3
0x40009ae	            0x7670	                           jbe 0x4000a20	      3401	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	CALL_3
0x40009b0	      0x4183472001	               add dword [r15 + 0x20], 1	      3416	fold.c	FUNCTION_71	WHILE_1	IF_1	ELSE_1	ELSE_2
0x40009b5	      0x4183472401	               add dword [r15 + 0x24], 1	      3417	fold.c	FUNCTION_71	WHILE_1	IF_1	ELSE_1	ELSE_2
0x40009ba	      0x4183472801	               add dword [r15 + 0x28], 1	      3418	fold.c	FUNCTION_71	WHILE_1	IF_1	ELSE_1	ELSE_2
0x40009bf	      0xe967ffffff	                           jmp 0x400092b	      3418	fold.c	FUNCTION_71	WHILE_1	IF_1	ELSE_1	ELSE_2
0x40009c4	         0xf1f4000	                         nop dword [rax]	      3418	fold.c	FUNCTION_71	WHILE_1	IF_1	ELSE_1	ELSE_2
0x40009c8	    0x48632d000000	         movsxd rbp, dword [0x040009cf] 	      3422	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	CALL_5
0x40009cf	    0x488b05000000	            mov rax, qword [0x040009d6] 	      3422	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	CALL_5
0x40009d6	        0x488d7b01	                      lea rdi, [rbx + 1]	      3422	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	CALL_5
0x40009da	        0x488d7001	                      lea rsi, [rax + 1]	      3422	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	CALL_5
0x40009de	          0x8d55ff	                      lea edx, [rbp - 1]	      3422	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	CALL_5
0x40009e1	          0x4863d2	                         movsxd rdx, edx	      3422	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	CALL_5
0x40009e4	      0xe800000000	                          call 0x40009e9	      3422	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	CALL_5
0x40009e9	            0x85c0	                           test eax, eax	      3422	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	CALL_5
0x40009eb	     0xf8550ffffff	                           jne 0x4000941	      3422	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	CALL_5
0x40009f1	          0x4801eb	                            add rbx, rbp	      3425	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5
0x40009f4	           0xfb603	                   movzx eax, byte [rbx]	      3426	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	CALL_6
0x40009f7	          0x83e830	                           sub eax, 0x30	      3426	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	CALL_6
0x40009fa	          0x83f809	                              cmp eax, 9	      3426	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	CALL_6
0x40009fd	            0x7659	                           jbe 0x4000a58	      3426	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	CALL_6
0x40009ff	      0x41836f2401	               sub dword [r15 + 0x24], 1	      3439	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	ELSE_4
0x4000a04	      0xe922ffffff	                           jmp 0x400092b	      3439	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	ELSE_4
0x4000a09	     0xf1f80000000	                         nop dword [rax]	      3439	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	ELSE_4
0x4000a10	          0x4889df	                            mov rdi, rbx	      3442	fold.c	FUNCTION_71	WHILE_1	CALL_8
0x4000a13	    0xff1500000000	                 call qword [0x04000a19]	      3442	fold.c	FUNCTION_71	WHILE_1	CALL_8
0x4000a19	            0x4898	                                    cdqe	      3442	fold.c	FUNCTION_71	WHILE_1	CALL_8
0x4000a1b	      0xe934ffffff	                           jmp 0x4000954	      3442	fold.c	FUNCTION_71	WHILE_1	CALL_8
0x4000a20	            0x31f6	                            xor esi, esi	       280	stdlib.h	FUNCTION_89	CALL_2
0x4000a22	      0xba0a000000	                            mov edx, 0xa	       280	stdlib.h	FUNCTION_89	CALL_2
0x4000a27	          0x4889df	                            mov rdi, rbx	       280	stdlib.h	FUNCTION_89	CALL_2
0x4000a2a	      0xe800000000	                          call 0x4000a2f	       280	stdlib.h	FUNCTION_89	CALL_2
0x4000a2f	            0x85c0	                           test eax, eax	      3404	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3
0x4000a31	     0xf8ef4feffff	                           jle 0x400092b	      3404	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3
0x4000a37	        0x3944240c	              cmp dword [rsp + 0xc], eax	      3408	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3	IF_4
0x4000a3b	        0x41894720	             mov dword [r15 + 0x20], eax	      3406	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3
0x4000a3f	        0x41894724	             mov dword [r15 + 0x24], eax	      3407	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3
0x4000a43	            0x7c4b	                            jl 0x4000a90	      3408	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3	IF_4
0x4000a45	    0x41c747280100	               mov dword [r15 + 0x28], 1	      3409	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3	IF_4
0x4000a4d	      0xe9d9feffff	                           jmp 0x400092b	      3409	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3	IF_4
0x4000a52	    0x660f1f440000	                    nop word [rax + rax]	      3409	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3	IF_4
0x4000a58	            0x31f6	                            xor esi, esi	       280	stdlib.h	FUNCTION_89	CALL_2
0x4000a5a	      0xba0a000000	                            mov edx, 0xa	       280	stdlib.h	FUNCTION_89	CALL_2
0x4000a5f	          0x4889df	                            mov rdi, rbx	       280	stdlib.h	FUNCTION_89	CALL_2
0x4000a62	      0xe800000000	                          call 0x4000a67	       280	stdlib.h	FUNCTION_89	CALL_2
0x4000a67	            0x85c0	                           test eax, eax	      3429	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	IF_7
0x4000a69	     0xf8ebcfeffff	                           jle 0x400092b	      3429	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	IF_7
0x4000a6f	        0x8b4c240c	              mov ecx, dword [rsp + 0xc]	      3432	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	IF_7
0x4000a73	        0x41894720	             mov dword [r15 + 0x20], eax	      3431	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	IF_7
0x4000a77	          0x83e801	                              sub eax, 1	      3432	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	IF_7
0x4000a7a	            0x39c1	                            cmp ecx, eax	      3432	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	IF_7
0x4000a7c	           0xf4cc1	                          cmovl eax, ecx	      3432	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	IF_7
0x4000a7f	        0x41894724	             mov dword [r15 + 0x24], eax	      3432	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	IF_7
0x4000a83	      0xe9a3feffff	                           jmp 0x400092b	      3432	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	IF_7
0x4000a88	     0xf1f84000000	                   nop dword [rax + rax]	      3432	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	IF_7
0x4000a90	        0x2b44240c	              sub eax, dword [rsp + 0xc]	      3411	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3	ELSE_1
0x4000a94	        0x41894728	             mov dword [r15 + 0x28], eax	      3411	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3	ELSE_1
0x4000a98	      0xe98efeffff	                           jmp 0x400092b	      3411	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3	ELSE_1
foldlevelExpr	FOR,0:functions,0:IF,8:ELSE,2:CALL,2:DO,0:SWITCH,1:WHILE,0	123
0x40006d0	            0x4155	                                push r13	      3255	fold.c	ELSE_1	FUNCTION_69
0x40006d2	            0x4154	                                push r12	      3255	fold.c	ELSE_1	FUNCTION_69
0x40006d4	              0x55	                                push rbp	      3255	fold.c	ELSE_1	FUNCTION_69
0x40006d5	              0x53	                                push rbx	      3255	fold.c	ELSE_1	FUNCTION_69
0x40006d6	          0x4889fb	                            mov rbx, rdi	      3255	fold.c	ELSE_1	FUNCTION_69
0x40006d9	        0x4883ec18	                           sub rsp, 0x18	      3255	fold.c	ELSE_1	FUNCTION_69
0x40006dd	        0x488b6f10	            mov rbp, qword [rdi + 0x10] 	      3263	fold.c	ELSE_1	FUNCTION_69
0x40006e1	        0x48036f08	                add rbp, qword [rdi + 8]	      3263	fold.c	ELSE_1	FUNCTION_69
0x40006e5	    0x64488b042528	                mov rax, qword fs:[0x28]	      3255	fold.c	ELSE_1	FUNCTION_69
0x40006ee	      0x4889442408	                mov qword [rsp + 8], rax	      3255	fold.c	ELSE_1	FUNCTION_69
0x40006f3	            0x31c0	                            xor eax, eax	      3255	fold.c	ELSE_1	FUNCTION_69
0x40006f5	          0x488b07	                    mov rax, qword [rdi]	      3267	fold.c	ELSE_1	FUNCTION_69
0x40006f8	    0x4c8b25000000	            mov r12, qword [0x040006ff] 	      3266	fold.c	ELSE_1	FUNCTION_69
0x40006ff	      0xbf09000000	                              mov edi, 9	      3269	fold.c	ELSE_1	FUNCTION_69	CALL_1
0x4000704	          0x4889ee	                            mov rsi, rbp	      3269	fold.c	ELSE_1	FUNCTION_69	CALL_1
0x4000707	    0x488905000000	            mov qword [0x0400070e], rax 	      3267	fold.c	ELSE_1	FUNCTION_69
0x400070e	        0x488b4008	                mov rax, qword [rax + 8]	      3268	fold.c	ELSE_1	FUNCTION_69
0x4000712	    0x488905000000	            mov qword [0x04000719], rax 	      3268	fold.c	ELSE_1	FUNCTION_69
0x4000719	      0xe800000000	                          call 0x400071e	      3269	fold.c	ELSE_1	FUNCTION_69	CALL_1
0x400071e	          0x8b432c	            mov eax, dword [rbx + 0x2c] 	      3272	fold.c	ELSE_1	FUNCTION_69
0x4000721	        0x4883fd01	                              cmp rbp, 1	      3274	fold.c	ELSE_1	FUNCTION_69	IF_1
0x4000725	    0xc74328000000	               mov dword [rbx + 0x28], 0	      3271	fold.c	ELSE_1	FUNCTION_69
0x400072c	    0xc7432c150000	           mov dword [rbx + 0x2c], 0x15 	      3273	fold.c	ELSE_1	FUNCTION_69
0x4000733	          0x894330	             mov dword [rbx + 0x30], eax	      3272	fold.c	ELSE_1	FUNCTION_69
0x4000736	     0xf8eb4000000	                           jle 0x40007f0	      3274	fold.c	ELSE_1	FUNCTION_69	IF_1
0x400073c	          0x488b03	                    mov rax, qword [rbx]	      3280	fold.c	ELSE_1	FUNCTION_69	CALL_2
0x400073f	      0x488d742404	                      lea rsi, [rsp + 4]	      3280	fold.c	ELSE_1	FUNCTION_69	CALL_2
0x4000744	    0x448b2d000000	           mov r13d, dword [0x0400074b] 	      3279	fold.c	ELSE_1	FUNCTION_69
0x400074b	    0x488bb8180200	           mov rdi, qword [rax + 0x218] 	      3280	fold.c	ELSE_1	FUNCTION_69	CALL_2
0x4000752	      0xe800000000	                          call 0x4000757	      3280	fold.c	ELSE_1	FUNCTION_69	CALL_2
0x4000757	        0x8b542404	                mov edx, dword [rsp + 4]	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x400075b	    0x44892d000000	           mov dword [0x04000762], r13d 	      3281	fold.c	ELSE_1	FUNCTION_69
0x4000762	          0x83fa3e	                           cmp edx, 0x3e	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x4000765	     0xf8415010000	                            je 0x4000880	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x400076b	            0x7f53	                            jg 0x40007c0	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x400076d	          0x83fa3c	                           cmp edx, 0x3c	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x4000770	     0xf84d2000000	                            je 0x4000848	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x4000776	          0x83fa3d	                           cmp edx, 0x3d	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x4000779	     0xf8581000000	                           jne 0x4000800	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x400077f	          0x8b5320	            mov edx, dword [rbx + 0x20] 	      3317	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x4000782	          0x895324	             mov dword [rbx + 0x24], edx	      3317	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x4000785	            0x85d2	                           test edx, edx	      3333	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6
0x4000787	     0xf8893000000	                            js 0x4000820	      3333	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6
0x400078d	      0x498b442408	                mov rax, qword [r12 + 8]	      3345	fold.c	FUNCTION_69	ELSE_1
0x4000792	    0x4c8925000000	            mov qword [0x04000799], r12 	      3344	fold.c	FUNCTION_69	ELSE_1
0x4000799	    0x488905000000	            mov qword [0x040007a0], rax 	      3345	fold.c	FUNCTION_69	ELSE_1
0x40007a0	      0x488b442408	                mov rax, qword [rsp + 8]	      3347	fold.c	FUNCTION_69	ELSE_1
0x40007a5	    0x644833042528	                xor rax, qword fs:[0x28]	      3347	fold.c	FUNCTION_69	ELSE_1
0x40007ae	     0xf8517010000	                           jne 0x40008cb	      3347	fold.c	FUNCTION_69	ELSE_1
0x40007b4	        0x4883c418	                           add rsp, 0x18	      3347	fold.c	FUNCTION_69	ELSE_1
0x40007b8	              0x5b	                                 pop rbx	      3347	fold.c	FUNCTION_69	ELSE_1
0x40007b9	              0x5d	                                 pop rbp	      3347	fold.c	FUNCTION_69	ELSE_1
0x40007ba	            0x415c	                                 pop r12	      3347	fold.c	FUNCTION_69	ELSE_1
0x40007bc	            0x415d	                                 pop r13	      3347	fold.c	FUNCTION_69	ELSE_1
0x40007be	              0xc3	                                     ret	      3347	fold.c	FUNCTION_69	ELSE_1
0x40007bf	              0x90	                                     nop	      3347	fold.c	FUNCTION_69	ELSE_1
0x40007c0	          0x83fa61	                           cmp edx, 0x61	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x40007c3	     0xf8497000000	                            je 0x4000860	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x40007c9	          0x83fa73	                           cmp edx, 0x73	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x40007cc	            0x7532	                           jne 0x4000800	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x40007ce	          0x8b5320	            mov edx, dword [rbx + 0x20] 	      3295	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_3
0x40007d1	            0x85d2	                           test edx, edx	      3295	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_3
0x40007d3	            0x784b	                            js 0x4000820	      3295	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_3
0x40007d5	            0x39d0	                            cmp eax, edx	      3297	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_3	IF_4
0x40007d7	     0xf8ed3000000	                           jle 0x40008b0	      3297	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_3	IF_4
0x40007dd	    0xc74324000000	               mov dword [rbx + 0x24], 0	      3298	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_3	IF_4
0x40007e4	      0xba01000000	                              mov edx, 1	      3298	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_3	IF_4
0x40007e9	          0x89532c	             mov dword [rbx + 0x2c], edx	      3301	fold.c	FUNCTION_69	SWITCH_1	IF_3	ELSE_1
0x40007ec	            0xeb9f	                           jmp 0x400078d	      3301	fold.c	FUNCTION_69	SWITCH_1	IF_3	ELSE_1
0x40007ee	            0x6690	                                     nop	      3301	fold.c	FUNCTION_69	SWITCH_1	IF_3	ELSE_1
0x40007f0	    0xc74320000000	               mov dword [rbx + 0x20], 0	      3275	fold.c	ELSE_1	FUNCTION_69	IF_1
0x40007f7	      0xe940ffffff	                           jmp 0x400073c	      3275	fold.c	ELSE_1	FUNCTION_69	IF_1
0x40007fc	         0xf1f4000	                         nop dword [rax]	      3275	fold.c	ELSE_1	FUNCTION_69	IF_1
0x4000800	            0x85c0	                           test eax, eax	      3321	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	IF_5
0x4000802	     0xf88b8000000	                            js 0x40008c0	      3321	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	IF_5
0x4000808	          0x894324	             mov dword [rbx + 0x24], eax	      3326	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	ELSE_2
0x400080b	            0x89c2	                            mov edx, eax	      3280	fold.c	ELSE_1	FUNCTION_69	CALL_2
0x400080d	          0x894320	             mov dword [rbx + 0x20], eax	      3327	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	ELSE_2
0x4000810	            0x85d2	                           test edx, edx	      3333	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6
0x4000812	     0xf8975ffffff	                           jns 0x400078d	      3333	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6
0x4000818	     0xf1f84000000	                   nop dword [rax + rax]	      3333	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6
0x4000820	        0x4883fd01	                              cmp rbp, 1	      3335	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_7
0x4000824	            0x7e72	                           jle 0x4000898	      3335	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_7
0x4000826	    0x488b05000000	            mov rax, qword [0x0400082d] 	      3340	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_8
0x400082d	          0x483b28	                    cmp rbp, qword [rax]	      3340	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_8
0x4000830	     0xf8557ffffff	                           jne 0x400078d	      3340	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_8
0x4000836	    0xc74324000000	               mov dword [rbx + 0x24], 0	      3341	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_8
0x400083d	      0xe94bffffff	                           jmp 0x400078d	      3341	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_8
0x4000842	    0x660f1f440000	                    nop word [rax + rax]	      3341	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_8
0x4000848	          0x8d50ff	                      lea edx, [rax - 1]	      3312	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x400084b	          0x89432c	             mov dword [rbx + 0x2c], eax	      3313	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x400084e	          0x895324	             mov dword [rbx + 0x24], edx	      3312	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x4000851	          0x8b5320	            mov edx, dword [rbx + 0x20] 	      3312	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x4000854	      0xe92cffffff	                           jmp 0x4000785	      3314	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x4000859	     0xf1f80000000	                         nop dword [rax]	      3314	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x4000860	          0x8b5320	            mov edx, dword [rbx + 0x20] 	      3286	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x4000863	            0x85d2	                           test edx, edx	      3286	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x4000865	            0x7808	                            js 0x400086f	      3286	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x4000867	             0x1c2	                            add edx, eax	      3288	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x4000869	          0x895320	             mov dword [rbx + 0x20], edx	      3288	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x400086c	          0x895324	             mov dword [rbx + 0x24], edx	      3289	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x400086f	          0x894328	             mov dword [rbx + 0x28], eax	      3291	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x4000872	      0xe90effffff	                           jmp 0x4000785	      3292	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x4000877	    0x660f1f840000	                    nop word [rax + rax]	      3292	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x4000880	          0x894320	             mov dword [rbx + 0x20], eax	      3306	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x4000883	          0x894324	             mov dword [rbx + 0x24], eax	      3307	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x4000886	            0x89c2	                            mov edx, eax	      3280	fold.c	ELSE_1	FUNCTION_69	CALL_2
0x4000888	    0xc74328010000	               mov dword [rbx + 0x28], 1	      3308	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x400088f	      0xe9f1feffff	                           jmp 0x4000785	      3309	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x4000894	         0xf1f4000	                         nop dword [rax]	      3309	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x4000898	    0xc74320000000	               mov dword [rbx + 0x20], 0	      3337	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_7
0x400089f	    0xc74324000000	               mov dword [rbx + 0x24], 0	      3338	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_7
0x40008a6	      0xe97bffffff	                           jmp 0x4000826	      3338	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_7
0x40008ab	       0xf1f440000	                   nop dword [rax + rax]	      3338	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_7
0x40008b0	            0x29c2	                            sub edx, eax	      3300	fold.c	FUNCTION_69	SWITCH_1	IF_3	ELSE_1
0x40008b2	          0x895324	             mov dword [rbx + 0x24], edx	      3300	fold.c	FUNCTION_69	SWITCH_1	IF_3	ELSE_1
0x40008b5	          0x83c201	                              add edx, 1	      3300	fold.c	FUNCTION_69	SWITCH_1	IF_3	ELSE_1
0x40008b8	      0xe92cffffff	                           jmp 0x40007e9	      3300	fold.c	FUNCTION_69	SWITCH_1	IF_3	ELSE_1
0x40008bd	           0xf1f00	                         nop dword [rax]	      3300	fold.c	FUNCTION_69	SWITCH_1	IF_3	ELSE_1
0x40008c0	          0x8b5320	            mov edx, dword [rbx + 0x20] 	      3324	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	IF_5
0x40008c3	          0x895324	             mov dword [rbx + 0x24], edx	      3324	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	IF_5
0x40008c6	      0xe940ffffff	                           jmp 0x400080b	      3324	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	IF_5
0x40008cb	      0xe800000000	                call sym.foldlevelMarker	      3347	fold.c	FUNCTION_69	ELSE_1
truncate_fold	FOR,0:functions,0:IF,0:ELSE,0:CALL,1:DO,0:SWITCH,0:WHILE,0	19
0x4001cc0	              0x55	                                push rbp	      3024	fold.c	FUNCTION_64
0x4001cc1	              0x53	                                push rbx	      3024	fold.c	FUNCTION_64
0x4001cc2	        0x488d5e01	                      lea rbx, [rsi + 1]	      3025	fold.c	FUNCTION_64
0x4001cc6	          0x4889fd	                            mov rbp, rdi	      3024	fold.c	FUNCTION_64
0x4001cc9	        0x4883ec08	                              sub rsp, 8	      3024	fold.c	FUNCTION_64
0x4001ccd	          0x4889de	                            mov rsi, rbx	      3026	fold.c	FUNCTION_64	CALL_1
0x4001cd0	          0x482b37	                    sub rsi, qword [rdi]	      3026	fold.c	FUNCTION_64	CALL_1
0x4001cd3	    0x4881feffffff	                     cmp rsi, 0x7fffffff	      2920	fold.c	FUNCTION_62	IF_1
0x4001cda	            0x7f15	                            jg 0x4001cf1	      2920	fold.c	FUNCTION_62	IF_1
0x4001cdc	        0x488d7f10	                   lea rdi, [rdi + 0x10]	      3026	fold.c	FUNCTION_64	CALL_1
0x4001ce0	      0xbaffffff7f	                     mov edx, 0x7fffffff	      3026	fold.c	FUNCTION_64	CALL_1
0x4001ce5	      0xe806feffff	             call sym.foldRemove.part.15	      3026	fold.c	FUNCTION_64	CALL_1
0x4001cea	        0x482b5d00	                    sub rbx, qword [rbp]	      3026	fold.c	FUNCTION_64	CALL_1
0x4001cee	          0x4889de	                            mov rsi, rbx	      3026	fold.c	FUNCTION_64	CALL_1
0x4001cf1	        0x48897508	                mov qword [rbp + 8], rsi	      3027	fold.c	FUNCTION_64
0x4001cf5	        0x4883c408	                              add rsp, 8	      3028	fold.c	FUNCTION_64
0x4001cf9	              0x5b	                                 pop rbx	      3028	fold.c	FUNCTION_64
0x4001cfa	              0x5d	                                 pop rbp	      3028	fold.c	FUNCTION_64
0x4001cfb	              0xc3	                                     ret	      3028	fold.c	FUNCTION_64
foldOpenCursor	FOR,1:functions,0:IF,2:ELSE,0:CALL,3:DO,0:SWITCH,0:WHILE,0	35
0x4003d20	        0x4883ec18	                           sub rsp, 0x18	       445	fold.c	FUNCTION_19
0x4003d24	    0x488b0d000000	            mov rcx, qword [0x04003d2b] 	       448	fold.c	FUNCTION_19	CALL_1
0x4003d2b	    0x64488b042528	                mov rax, qword fs:[0x28]	       445	fold.c	FUNCTION_19
0x4003d34	      0x4889442408	                mov qword [rsp + 8], rax	       445	fold.c	FUNCTION_19
0x4003d39	            0x31c0	                            xor eax, eax	       445	fold.c	FUNCTION_19
0x4003d3b	    0x80b921010000	               cmp byte [rcx + 0x121], 0	      1187	fold.c	FUNCTION_38	IF_1
0x4003d42	            0x755c	                           jne 0x4003da0	      1187	fold.c	FUNCTION_38	IF_1
0x4003d44	    0x8b81d4010000	           mov eax, dword [rcx + 0x1d4] 	       119	fold.c	FUNCTION_2	CALL_1
0x4003d4a	            0x85c0	                           test eax, eax	       119	fold.c	FUNCTION_2	CALL_1
0x4003d4c	            0x743d	                            je 0x4003d8b	       119	fold.c	FUNCTION_2	CALL_1
0x4003d4e	          0x4889cf	                            mov rdi, rcx	       119	fold.c	FUNCTION_2	CALL_1
0x4003d51	      0xe8bad2ffff	          call sym.hasAnyFolding.part.13	       119	fold.c	FUNCTION_2	CALL_1
0x4003d56	            0x85c0	                           test eax, eax	       449	fold.c	FUNCTION_19	IF_1	CALL_2
0x4003d58	            0x750d	                           jne 0x4003d67	       449	fold.c	FUNCTION_19	IF_1	CALL_2
0x4003d5a	            0xeb2f	                           jmp 0x4003d8b	       449	fold.c	FUNCTION_19	IF_1	CALL_2
0x4003d5c	         0xf1f4000	                         nop dword [rax]	       449	fold.c	FUNCTION_19	IF_1	CALL_2
0x4003d60	    0x488b0d000000	            mov rcx, qword [0x04003d67] 	       449	fold.c	FUNCTION_19	IF_1	CALL_2
0x4003d67	        0x488b7938	            mov rdi, qword [rcx + 0x38] 	       453	fold.c	FUNCTION_19	IF_1	FOR_1	CALL_3
0x4003d6b	      0x488d4c2404	                      lea rcx, [rsp + 4]	       453	fold.c	FUNCTION_19	IF_1	FOR_1	CALL_3
0x4003d70	            0x31d2	                            xor edx, edx	       453	fold.c	FUNCTION_19	IF_1	FOR_1	CALL_3
0x4003d72	      0xbe01000000	                              mov esi, 1	       453	fold.c	FUNCTION_19	IF_1	FOR_1	CALL_3
0x4003d77	    0xc74424040000	                  mov dword [rsp + 4], 0	       452	fold.c	FUNCTION_19	IF_1	FOR_1
0x4003d7f	      0xe8acfcffff	                  call sym.setManualFold	       453	fold.c	FUNCTION_19	IF_1	FOR_1	CALL_3
0x4003d84	      0xf644240401	                  test byte [rsp + 4], 1	       454	fold.c	FUNCTION_19	IF_1	FOR_1	IF_2
0x4003d89	            0x75d5	                           jne 0x4003d60	       454	fold.c	FUNCTION_19	IF_1	FOR_1	IF_2
0x4003d8b	      0x488b442408	                mov rax, qword [rsp + 8]	       457	fold.c	FUNCTION_19
0x4003d90	    0x644833042528	                xor rax, qword fs:[0x28]	       457	fold.c	FUNCTION_19
0x4003d99	            0x7516	                           jne 0x4003db1	       457	fold.c	FUNCTION_19
0x4003d9b	        0x4883c418	                           add rsp, 0x18	       457	fold.c	FUNCTION_19
0x4003d9f	              0xc3	                                     ret	       457	fold.c	FUNCTION_19
0x4003da0	          0x4889cf	                            mov rdi, rcx	       457	fold.c	FUNCTION_19
0x4003da3	      0xe8c8f3ffff	            call sym.checkupdate.part.17	       457	fold.c	FUNCTION_19
0x4003da8	    0x488b0d000000	            mov rcx, qword [0x04003daf] 	       457	fold.c	FUNCTION_19
0x4003daf	            0xeb93	                           jmp 0x4003d44	       457	fold.c	FUNCTION_19
0x4003db1	      0xe800000000	                          call 0x4003db6	       457	fold.c	FUNCTION_19
check_closed	FOR,0:functions,0:IF,7:ELSE,1:CALL,1:DO,0:SWITCH,0:WHILE,0	97
0x40000c0	            0x4156	                                push r14	      1647	fold.c	FUNCTION_49
0x40000c2	            0x4155	                                push r13	      1647	fold.c	FUNCTION_49
0x40000c4	            0x4154	                                push r12	      1647	fold.c	FUNCTION_49
0x40000c6	              0x55	                                push rbp	      1647	fold.c	FUNCTION_49
0x40000c7	              0x53	                                push rbx	      1647	fold.c	FUNCTION_49
0x40000c8	          0x448b12	                   mov r10d, dword [rdx]	      1652	fold.c	FUNCTION_49	IF_1
0x40000cb	          0x4585d2	                         test r10d, r10d	      1652	fold.c	FUNCTION_49	IF_1
0x40000ce	            0x7520	                           jne 0x40000f0	      1652	fold.c	FUNCTION_49	IF_1
0x40000d0	         0xfb64628	           movzx eax, byte [rsi + 0x28] 	      1652	fold.c	FUNCTION_49	IF_1
0x40000d4	            0x3c02	                               cmp al, 2	      1652	fold.c	FUNCTION_49	IF_1
0x40000d6	            0x7418	                            je 0x40000f0	      1652	fold.c	FUNCTION_49	IF_1
0x40000d8	            0x3c01	                               cmp al, 1	      1658	fold.c	FUNCTION_49	ELSE_1	IF_3
0x40000da	            0x7426	                            je 0x4000102	      1658	fold.c	FUNCTION_49	ELSE_1	IF_3
0x40000dc	        0x807e2902	                cmp byte [rsi + 0x29], 2	      1662	fold.c	FUNCTION_49	IF_4
0x40000e0	            0x7446	                            je 0x4000128	      1662	fold.c	FUNCTION_49	IF_4
0x40000e2	            0x31c0	                            xor eax, eax	      1663	fold.c	FUNCTION_49	IF_4
0x40000e4	              0x5b	                                 pop rbx	      1673	fold.c	FUNCTION_49
0x40000e5	              0x5d	                                 pop rbp	      1673	fold.c	FUNCTION_49
0x40000e6	            0x415c	                                 pop r12	      1673	fold.c	FUNCTION_49
0x40000e8	            0x415d	                                 pop r13	      1673	fold.c	FUNCTION_49
0x40000ea	            0x415e	                                 pop r14	      1673	fold.c	FUNCTION_49
0x40000ec	              0xc3	                                     ret	      1673	fold.c	FUNCTION_49
0x40000ed	           0xf1f00	                         nop dword [rax]	      1673	fold.c	FUNCTION_49
0x40000f0	          0x4863c9	                         movsxd rcx, ecx	      1655	fold.c	FUNCTION_49	IF_1	IF_2
0x40000f3	    0x483b8fe80100	           cmp rcx, qword [rdi + 0x1e8] 	      1655	fold.c	FUNCTION_49	IF_1	IF_2
0x40000fa	    0xc70201000000	                      mov dword [rdx], 1	      1654	fold.c	FUNCTION_49	IF_1
0x4000100	            0x7cda	                            jl 0x40000dc	      1655	fold.c	FUNCTION_49	IF_1	IF_2
0x4000102	         0xfb64629	           movzx eax, byte [rsi + 0x29] 	      1662	fold.c	FUNCTION_49	IF_4
0x4000106	            0x3c02	                               cmp al, 2	      1662	fold.c	FUNCTION_49	IF_4
0x4000108	            0x7427	                            je 0x4000131	      1662	fold.c	FUNCTION_49	IF_4
0x400010a	          0x418b10	                     mov edx, dword [r8]	      1666	fold.c	FUNCTION_49	IF_5	IF_6
0x400010d	            0x85d2	                           test edx, edx	      1666	fold.c	FUNCTION_49	IF_5	IF_6
0x400010f	            0x7527	                           jne 0x4000138	      1666	fold.c	FUNCTION_49	IF_5	IF_6
0x4000111	            0x3c01	                               cmp al, 1	      1666	fold.c	FUNCTION_49	IF_5	IF_6
0x4000113	           0xf95c0	                                setne al	      1666	fold.c	FUNCTION_49	IF_5	IF_6
0x4000116	              0x5b	                                 pop rbx	      1673	fold.c	FUNCTION_49
0x4000117	           0xfb6c0	                           movzx eax, al	      1673	fold.c	FUNCTION_49
0x400011a	              0x5d	                                 pop rbp	      1673	fold.c	FUNCTION_49
0x400011b	            0x415c	                                 pop r12	      1673	fold.c	FUNCTION_49
0x400011d	            0x415d	                                 pop r13	      1673	fold.c	FUNCTION_49
0x400011f	            0x415e	                                 pop r14	      1673	fold.c	FUNCTION_49
0x4000121	              0xc3	                                     ret	      1673	fold.c	FUNCTION_49
0x4000122	    0x660f1f440000	                    nop word [rax + rax]	      1673	fold.c	FUNCTION_49
0x4000128	    0x41c700010000	                       mov dword [r8], 1	      1663	fold.c	FUNCTION_49	IF_4
0x400012f	            0xebb1	                           jmp 0x40000e2	      1663	fold.c	FUNCTION_49	IF_4
0x4000131	    0x41c700010000	                       mov dword [r8], 1	      1663	fold.c	FUNCTION_49	IF_4
0x4000138	        0x488b4620	            mov rax, qword [rsi + 0x20] 	      1663	fold.c	FUNCTION_49	IF_4
0x400013c	          0x8b4e10	            mov ecx, dword [rsi + 0x10] 	      1723	fold.c	FUNCTION_51	FOR_1
0x400013f	            0x31d2	                            xor edx, edx	      1723	fold.c	FUNCTION_51	FOR_1
0x4000141	        0xc6462902	                mov byte [rsi + 0x29], 2	      1667	fold.c	FUNCTION_49	IF_5	IF_6
0x4000145	        0x4883c029	                           add rax, 0x29	      1667	fold.c	FUNCTION_49	IF_5	IF_6
0x4000149	            0x85c9	                           test ecx, ecx	      1723	fold.c	FUNCTION_51	FOR_1
0x400014b	            0x7e12	                           jle 0x400015f	      1723	fold.c	FUNCTION_51	FOR_1
0x400014d	           0xf1f00	                         nop dword [rax]	      1723	fold.c	FUNCTION_51	FOR_1
0x4000150	          0xc60002	                       mov byte [rax], 2	      1724	fold.c	FUNCTION_51	FOR_1
0x4000153	          0x83c201	                              add edx, 1	      1723	fold.c	FUNCTION_51	FOR_1
0x4000156	        0x4883c030	                           add rax, 0x30	      1723	fold.c	FUNCTION_51	FOR_1
0x400015a	          0x3b5610	            cmp edx, dword [rsi + 0x10] 	      1723	fold.c	FUNCTION_51	FOR_1
0x400015d	            0x7cf1	                            jl 0x4000150	      1723	fold.c	FUNCTION_51	FOR_1
0x400015f	    0x488b15000000	            mov rdx, qword [0x04000166] 	      1693	fold.c	FUNCTION_50	IF_1	IF_2
0x4000166	        0x488b4608	                mov rax, qword [rsi + 8]	      1693	fold.c	FUNCTION_50	IF_1	IF_2
0x400016a	          0x4d89cc	                             mov r12, r9	      1693	fold.c	FUNCTION_50	IF_1	IF_2
0x400016d	          0x4989f6	                            mov r14, rsi	      1693	fold.c	FUNCTION_50	IF_1	IF_2
0x4000170	          0x4989fd	                            mov r13, rdi	      1693	fold.c	FUNCTION_50	IF_1	IF_2
0x4000173	    0x483b82080200	           cmp rax, qword [rdx + 0x208] 	      1693	fold.c	FUNCTION_50	IF_1	IF_2
0x400017a	            0x7f44	                            jg 0x40001c0	      1693	fold.c	FUNCTION_50	IF_1	IF_2
0x400017c	            0x31ed	                            xor ebp, ebp	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x400017e	            0x31db	                            xor ebx, ebx	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4000180	          0x4885c0	                           test rax, rax	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4000183	            0x7f15	                            jg 0x400019a	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4000185	            0xeb51	                           jmp 0x40001d8	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4000187	    0x660f1f840000	                    nop word [rax + rax]	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4000190	        0x4883c301	                              add rbx, 1	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4000194	        0x49395e08	                cmp qword [r14 + 8], rbx	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4000198	            0x7e3e	                           jle 0x40001d8	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x400019a	          0x4c89e6	                            mov rsi, r12	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x400019d	          0x490336	                    add rsi, qword [r14]	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x40001a0	          0x4c89ef	                            mov rdi, r13	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x40001a3	          0x4801de	                            add rsi, rbx	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x40001a6	      0xe800000000	                          call 0x40001ab	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x40001ab	             0x1c5	                            add ebp, eax	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x40001ad	    0x488b05000000	            mov rax, qword [0x040001b4] 	      1701	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x40001b4	          0x4863d5	                         movsxd rdx, ebp	      1701	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x40001b7	    0x483b90080200	           cmp rdx, qword [rax + 0x208] 	      1701	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x40001be	            0x7ed0	                           jle 0x4000190	      1701	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x40001c0	      0x41c6462900	                mov byte [r14 + 0x29], 0	      1694	fold.c	FUNCTION_50	IF_1	IF_2
0x40001c5	      0xb801000000	                              mov eax, 1	      1694	fold.c	FUNCTION_50	IF_1	IF_2
0x40001ca	              0x5b	                                 pop rbx	      1673	fold.c	FUNCTION_49
0x40001cb	              0x5d	                                 pop rbp	      1673	fold.c	FUNCTION_49
0x40001cc	            0x415c	                                 pop r12	      1673	fold.c	FUNCTION_49
0x40001ce	            0x415d	                                 pop r13	      1673	fold.c	FUNCTION_49
0x40001d0	            0x415e	                                 pop r14	      1673	fold.c	FUNCTION_49
0x40001d2	              0xc3	                                     ret	      1673	fold.c	FUNCTION_49
0x40001d3	       0xf1f440000	                   nop dword [rax + rax]	      1673	fold.c	FUNCTION_49
0x40001d8	      0x41c6462901	                mov byte [r14 + 0x29], 1	      1707	fold.c	FUNCTION_50	IF_1	ELSE_1
0x40001dd	            0x31c0	                            xor eax, eax	      1707	fold.c	FUNCTION_50	IF_1	ELSE_1
0x40001df	      0xe900ffffff	                           jmp 0x40000e4	      1707	fold.c	FUNCTION_50	IF_1	ELSE_1
foldlevelSyntax	FOR,0:functions,0:IF,2:ELSE,0:CALL,2:DO,0:SWITCH,0:WHILE,0	33
0x4000660	              0x55	                                push rbp	      3457	fold.c	FUNCTION_72
0x4000661	              0x53	                                push rbx	      3457	fold.c	FUNCTION_72
0x4000662	          0x4889fb	                            mov rbx, rdi	      3457	fold.c	FUNCTION_72
0x4000665	        0x4883ec08	                              sub rsp, 8	      3457	fold.c	FUNCTION_72
0x4000669	        0x488b6f10	            mov rbp, qword [rdi + 0x10] 	      3462	fold.c	FUNCTION_72
0x400066d	        0x48036f08	                add rbp, qword [rdi + 8]	      3462	fold.c	FUNCTION_72
0x4000671	          0x488b3f	                    mov rdi, qword [rdi]	      3466	fold.c	FUNCTION_72	CALL_1
0x4000674	          0x4889ee	                            mov rsi, rbp	      3466	fold.c	FUNCTION_72	CALL_1
0x4000677	      0xe800000000	                          call 0x400067c	      3466	fold.c	FUNCTION_72	CALL_1
0x400067c	          0x488b3b	                    mov rdi, qword [rbx]	      3468	fold.c	FUNCTION_72	IF_1
0x400067f	          0x894320	             mov dword [rbx + 0x20], eax	      3466	fold.c	FUNCTION_72	CALL_1
0x4000682	    0xc74328000000	               mov dword [rbx + 0x28], 0	      3467	fold.c	FUNCTION_72
0x4000689	        0x488b4708	                mov rax, qword [rdi + 8]	      3468	fold.c	FUNCTION_72	IF_1
0x400068d	          0x483b28	                    cmp rbp, qword [rax]	      3468	fold.c	FUNCTION_72	IF_1
0x4000690	            0x7c0e	                            jl 0x40006a0	      3468	fold.c	FUNCTION_72	IF_1
0x4000692	        0x4883c408	                              add rsp, 8	      3478	fold.c	FUNCTION_72
0x4000696	              0x5b	                                 pop rbx	      3478	fold.c	FUNCTION_72
0x4000697	              0x5d	                                 pop rbp	      3478	fold.c	FUNCTION_72
0x4000698	              0xc3	                                     ret	      3478	fold.c	FUNCTION_72
0x4000699	     0xf1f80000000	                         nop dword [rax]	      3478	fold.c	FUNCTION_72
0x40006a0	        0x488d7501	                      lea rsi, [rbp + 1]	      3470	fold.c	FUNCTION_72	IF_1	CALL_2
0x40006a4	      0xe800000000	                          call 0x40006a9	      3470	fold.c	FUNCTION_72	IF_1	CALL_2
0x40006a9	          0x8b5320	            mov edx, dword [rbx + 0x20] 	      3471	fold.c	FUNCTION_72	IF_1	IF_2
0x40006ac	            0x39d0	                            cmp eax, edx	      3471	fold.c	FUNCTION_72	IF_1	IF_2
0x40006ae	            0x7ee2	                           jle 0x4000692	      3471	fold.c	FUNCTION_72	IF_1	IF_2
0x40006b0	            0x89c1	                            mov ecx, eax	      3473	fold.c	FUNCTION_72	IF_1	IF_2
0x40006b2	          0x894320	             mov dword [rbx + 0x20], eax	      3474	fold.c	FUNCTION_72	IF_1	IF_2
0x40006b5	            0x29d1	                            sub ecx, edx	      3473	fold.c	FUNCTION_72	IF_1	IF_2
0x40006b7	          0x894b28	             mov dword [rbx + 0x28], ecx	      3473	fold.c	FUNCTION_72	IF_1	IF_2
0x40006ba	        0x4883c408	                              add rsp, 8	      3478	fold.c	FUNCTION_72
0x40006be	              0x5b	                                 pop rbx	      3478	fold.c	FUNCTION_72
0x40006bf	              0x5d	                                 pop rbp	      3478	fold.c	FUNCTION_72
0x40006c0	              0xc3	                                     ret	      3478	fold.c	FUNCTION_72
copyFoldingState	FOR,0:functions,0:IF,0:ELSE,0:CALL,1:DO,0:SWITCH,0:WHILE,0	7
0x4001490	     0xfb687200100	          movzx eax, byte [rdi + 0x120] 	       105	fold.c	FUNCTION_1
0x4001497	    0x4881c6080100	                          add rsi, 0x108	       107	fold.c	FUNCTION_1	CALL_1
0x400149e	    0x4881c7080100	                          add rdi, 0x108	       107	fold.c	FUNCTION_1	CALL_1
0x40014a5	          0x884618	               mov byte [rsi + 0x18], al	       105	fold.c	FUNCTION_1
0x40014a8	         0xfb64719	           movzx eax, byte [rdi + 0x19] 	       106	fold.c	FUNCTION_1
0x40014ac	          0x884619	               mov byte [rsi + 0x19], al	       106	fold.c	FUNCTION_1
0x40014af	      0xe92cffffff	              jmp sym.cloneFoldGrowArray	       107	fold.c	FUNCTION_1	CALL_1
foldDelMarker	FOR,1:functions,0:IF,6:ELSE,0:CALL,14:DO,0:SWITCH,0:WHILE,0	114
0x4000360	            0x4157	                                push r15	      1822	fold.c	FUNCTION_55
0x4000362	            0x4156	                                push r14	      1822	fold.c	FUNCTION_55
0x4000364	          0x4989fe	                            mov r14, rdi	      1822	fold.c	FUNCTION_55
0x4000367	            0x4155	                                push r13	      1822	fold.c	FUNCTION_55
0x4000369	            0x4154	                                push r12	      1822	fold.c	FUNCTION_55
0x400036b	              0x55	                                push rbp	      1822	fold.c	FUNCTION_55
0x400036c	              0x53	                                push rbx	      1822	fold.c	FUNCTION_55
0x400036d	          0x4889f5	                            mov rbp, rsi	      1822	fold.c	FUNCTION_55
0x4000370	          0x4863da	                         movsxd rbx, edx	      1822	fold.c	FUNCTION_55
0x4000373	        0x4883ec18	                           sub rsp, 0x18	      1822	fold.c	FUNCTION_55
0x4000377	    0x488b05000000	            mov rax, qword [0x0400037e] 	      1827	fold.c	FUNCTION_55
0x400037e	    0x488b80501400	          mov rax, qword [rax + 0x1450] 	      1827	fold.c	FUNCTION_55
0x4000385	      0x4889442408	                mov qword [rsp + 8], rax	      1827	fold.c	FUNCTION_55
0x400038a	      0xe800000000	                          call 0x400038f	      1830	fold.c	FUNCTION_55	CALL_1
0x400038f	          0x803800	                       cmp byte [rax], 0	      1831	fold.c	FUNCTION_55	FOR_1
0x4000392	     0xf84d4000000	                            je 0x400046c	      1831	fold.c	FUNCTION_55	FOR_1
0x4000398	          0x4989dc	                            mov r12, rbx	      1831	fold.c	FUNCTION_55	FOR_1
0x400039b	          0x4989c5	                            mov r13, rax	      1831	fold.c	FUNCTION_55	FOR_1
0x400039e	          0x4989c7	                            mov r15, rax	      1831	fold.c	FUNCTION_55	FOR_1
0x40003a1	            0xeb13	                           jmp 0x40003b6	      1831	fold.c	FUNCTION_55	FOR_1
0x40003a3	       0xf1f440000	                   nop dword [rax + rax]	      1831	fold.c	FUNCTION_55	FOR_1
0x40003a8	        0x4983c701	                              add r15, 1	      1831	fold.c	FUNCTION_55	FOR_1
0x40003ac	        0x41803f00	                       cmp byte [r15], 0	      1831	fold.c	FUNCTION_55	FOR_1
0x40003b0	     0xf84b6000000	                            je 0x400046c	      1831	fold.c	FUNCTION_55	FOR_1
0x40003b6	          0x4889da	                            mov rdx, rbx	      1832	fold.c	FUNCTION_55	FOR_1	IF_1	CALL_2
0x40003b9	          0x4889ee	                            mov rsi, rbp	      1832	fold.c	FUNCTION_55	FOR_1	IF_1	CALL_2
0x40003bc	          0x4c89ff	                            mov rdi, r15	      1832	fold.c	FUNCTION_55	FOR_1	IF_1	CALL_2
0x40003bf	      0xe800000000	                          call 0x40003c4	      1832	fold.c	FUNCTION_55	FOR_1	IF_1	CALL_2
0x40003c4	            0x85c0	                           test eax, eax	      1832	fold.c	FUNCTION_55	FOR_1	IF_1	CALL_2
0x40003c6	            0x75e0	                           jne 0x40003a8	      1832	fold.c	FUNCTION_55	FOR_1	IF_1	CALL_2
0x40003c8	      0x410fb6041f	             movzx eax, byte [r15 + rbx]	      1836	fold.c	FUNCTION_55	FOR_1	IF_1	IF_2	CALL_3
0x40003cd	      0x488b5c2408	                mov rbx, qword [rsp + 8]	      1838	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3
0x40003d2	          0x83e830	                           sub eax, 0x30	      1836	fold.c	FUNCTION_55	FOR_1	IF_1	IF_2	CALL_3
0x40003d5	          0x83f80a	                            cmp eax, 0xa	      1837	fold.c	FUNCTION_55	FOR_1	IF_1	IF_2
0x40003d8	        0x4183d400	                             adc r12d, 0	      1837	fold.c	FUNCTION_55	FOR_1	IF_1	IF_2
0x40003dc	          0x803b00	                       cmp byte [rbx], 0	      1838	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3
0x40003df	            0x7477	                            je 0x4000458	      1838	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3
0x40003e1	      0xbe00000000	                              mov esi, 0	      1841	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	CALL_4
0x40003e6	          0x4889df	                            mov rdi, rbx	      1841	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	CALL_4
0x40003e9	      0xe800000000	                          call 0x40003ee	      1841	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	CALL_4
0x40003ee	          0x4889c2	                            mov rdx, rax	      1842	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x40003f1	          0x4889c5	                            mov rbp, rax	      1841	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	CALL_4
0x40003f4	          0x4c89f8	                            mov rax, r15	      1842	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x40003f7	          0x4829da	                            sub rdx, rbx	      1842	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x40003fa	          0x4c29e8	                            sub rax, r13	      1842	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x40003fd	          0x4889d9	                            mov rcx, rbx	      1842	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x4000400	          0x4839d0	                            cmp rax, rdx	      1842	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x4000403	            0x7c53	                            jl 0x4000458	      1842	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x4000405	          0x4c89fb	                            mov rbx, r15	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x4000408	          0x4889ce	                            mov rsi, rcx	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x400040b	      0x48894c2408	                mov qword [rsp + 8], rcx	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x4000410	          0x4829d3	                            sub rbx, rdx	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x4000413	          0x4889df	                            mov rdi, rbx	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x4000416	      0xe800000000	                          call 0x400041b	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x400041b	            0x85c0	                           test eax, eax	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x400041d	            0x7539	                           jne 0x4000458	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x400041f	        0x4883c502	                              add rbp, 2	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x4000423	          0x4889ef	                            mov rdi, rbp	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x4000426	      0xe800000000	                          call 0x400042b	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x400042b	          0x4963fc	                        movsxd rdi, r12d	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x400042e	          0x4889c2	                            mov rdx, rax	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x4000431	          0x4889ee	                            mov rsi, rbp	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x4000434	          0x4c01ff	                            add rdi, r15	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x4000437	      0xe800000000	                          call 0x400043c	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x400043c	            0x85c0	                           test eax, eax	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x400043e	            0x7518	                           jne 0x4000458	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x4000440	      0x488b7c2408	                mov rdi, qword [rsp + 8]	      1847	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_8
0x4000445	          0x4989df	                            mov r15, rbx	      1847	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_8
0x4000448	      0xe800000000	                          call 0x400044d	      1847	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_8
0x400044d	      0x458d6404fe	               lea r12d, [r12 + rax - 2]	      1847	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_8
0x4000452	    0x660f1f440000	                    nop word [rax + rax]	      1847	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_8
0x4000458	        0x498d7601	                      lea rsi, [r14 + 1]	      1850	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_9
0x400045c	        0x498d7eff	                      lea rdi, [r14 - 1]	      1850	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_9
0x4000460	      0xe800000000	                          call 0x4000465	      1850	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_9
0x4000465	          0x83f801	                              cmp eax, 1	      1850	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_9
0x4000468	            0x89c3	                            mov ebx, eax	      1850	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_9
0x400046a	            0x740f	                            je 0x400047b	      1850	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_9
0x400046c	        0x4883c418	                           add rsp, 0x18	      1863	fold.c	FUNCTION_55
0x4000470	              0x5b	                                 pop rbx	      1863	fold.c	FUNCTION_55
0x4000471	              0x5d	                                 pop rbp	      1863	fold.c	FUNCTION_55
0x4000472	            0x415c	                                 pop r12	      1863	fold.c	FUNCTION_55
0x4000474	            0x415d	                                 pop r13	      1863	fold.c	FUNCTION_55
0x4000476	            0x415e	                                 pop r14	      1863	fold.c	FUNCTION_55
0x4000478	            0x415f	                                 pop r15	      1863	fold.c	FUNCTION_55
0x400047a	              0xc3	                                     ret	      1863	fold.c	FUNCTION_55
0x400047b	          0x4429e3	                           sub ebx, r12d	      1853	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_11
0x400047e	          0x4c89ef	                            mov rdi, r13	      1853	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_11
0x4000481	      0xe800000000	                          call 0x4000486	      1853	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_11
0x4000486	          0x8d3c03	                    lea edi, [rbx + rax]	      1853	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_11
0x4000489	      0xe800000000	                          call 0x400048e	      1853	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_11
0x400048e	          0x4885c0	                           test rax, rax	      1854	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6
0x4000491	          0x4889c3	                            mov rbx, rax	      1853	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_11
0x4000494	            0x74d6	                            je 0x400046c	      1854	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6
0x4000496	          0x4c89fd	                            mov rbp, r15	      1856	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_12
0x4000499	          0x4c89ee	                            mov rsi, r13	       126	string3.h	FUNCTION_85	CALL_3
0x400049c	          0x4889c7	                            mov rdi, rax	       126	string3.h	FUNCTION_85	CALL_3
0x400049f	          0x4c29ed	                            sub rbp, r13	      1856	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_12
0x40004a2	          0x4889ea	                            mov rdx, rbp	       126	string3.h	FUNCTION_85	CALL_3
0x40004a5	      0xe800000000	                          call 0x40004aa	       126	string3.h	FUNCTION_85	CALL_3
0x40004aa	        0x488d3c2b	                    lea rdi, [rbx + rbp]	       110	string3.h	FUNCTION_83	CALL_3
0x40004ae	          0x4963f4	                        movsxd rsi, r12d	       110	string3.h	FUNCTION_83	CALL_3
0x40004b1	          0x4c01fe	                            add rsi, r15	       110	string3.h	FUNCTION_83	CALL_3
0x40004b4	      0xe800000000	                          call 0x40004b9	       110	string3.h	FUNCTION_83	CALL_3
0x40004b9	        0x4883c418	                           add rsp, 0x18	      1863	fold.c	FUNCTION_55
0x40004bd	          0x4889de	                            mov rsi, rbx	      1858	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_14
0x40004c0	          0x4c89f7	                            mov rdi, r14	      1858	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_14
0x40004c3	              0x5b	                                 pop rbx	      1863	fold.c	FUNCTION_55
0x40004c4	              0x5d	                                 pop rbp	      1863	fold.c	FUNCTION_55
0x40004c5	            0x415c	                                 pop r12	      1863	fold.c	FUNCTION_55
0x40004c7	            0x415d	                                 pop r13	      1863	fold.c	FUNCTION_55
0x40004c9	            0x415e	                                 pop r14	      1863	fold.c	FUNCTION_55
0x40004cb	            0x415f	                                 pop r15	      1863	fold.c	FUNCTION_55
0x40004cd	            0x31d2	                            xor edx, edx	      1858	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_14
0x40004cf	      0xe900000000	                           jmp 0x40004d4	      1858	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_14
foldAddMarker	FOR,0:functions,0:IF,3:ELSE,1:CALL,13:DO,0:SWITCH,0:WHILE,0	99
0x40001f0	            0x4157	                                push r15	      1756	fold.c	FUNCTION_53
0x40001f2	            0x4156	                                push r14	      1756	fold.c	FUNCTION_53
0x40001f4	          0x4c63f2	                         movsxd r14, edx	      1756	fold.c	FUNCTION_53
0x40001f7	            0x4155	                                push r13	      1756	fold.c	FUNCTION_53
0x40001f9	            0x4154	                                push r12	      1756	fold.c	FUNCTION_53
0x40001fb	              0x55	                                push rbp	      1756	fold.c	FUNCTION_53
0x40001fc	              0x53	                                push rbx	      1756	fold.c	FUNCTION_53
0x40001fd	          0x4889fb	                            mov rbx, rdi	      1756	fold.c	FUNCTION_53
0x4000200	        0x4883ec28	                           sub rsp, 0x28	      1756	fold.c	FUNCTION_53
0x4000204	    0x64488b042528	                mov rax, qword fs:[0x28]	      1756	fold.c	FUNCTION_53
0x400020d	      0x4889442418	             mov qword [rsp + 0x18], rax	      1756	fold.c	FUNCTION_53
0x4000212	            0x31c0	                            xor eax, eax	      1756	fold.c	FUNCTION_53
0x4000214	    0x488b05000000	            mov rax, qword [0x0400021b] 	      1757	fold.c	FUNCTION_53
0x400021b	        0x48893424	                    mov qword [rsp], rsi	      1756	fold.c	FUNCTION_53
0x400021f	      0xbe00000000	                              mov esi, 0	      1761	fold.c	FUNCTION_53	CALL_1
0x4000224	    0x4c8ba0501400	          mov r12, qword [rax + 0x1450] 	      1757	fold.c	FUNCTION_53
0x400022b	          0x4c89e7	                            mov rdi, r12	      1761	fold.c	FUNCTION_53	CALL_1
0x400022e	      0xe800000000	                          call 0x4000233	      1761	fold.c	FUNCTION_53	CALL_1
0x4000233	          0x4889df	                            mov rdi, rbx	      1765	fold.c	FUNCTION_53	CALL_2
0x4000236	          0x4989c7	                            mov r15, rax	      1761	fold.c	FUNCTION_53	CALL_1
0x4000239	    0xc74424140000	               mov dword [rsp + 0x14], 0	      1762	fold.c	FUNCTION_53
0x4000241	      0xe800000000	                          call 0x4000246	      1765	fold.c	FUNCTION_53	CALL_2
0x4000246	          0x4889c7	                            mov rdi, rax	      1766	fold.c	FUNCTION_53	CALL_3
0x4000249	          0x4889c5	                            mov rbp, rax	      1765	fold.c	FUNCTION_53	CALL_2
0x400024c	      0xe800000000	                          call 0x4000251	      1766	fold.c	FUNCTION_53	CALL_3
0x4000251	        0x488d7301	                      lea rsi, [rbx + 1]	      1768	fold.c	FUNCTION_53	IF_1	CALL_4
0x4000255	        0x488d7bff	                      lea rdi, [rbx - 1]	      1768	fold.c	FUNCTION_53	IF_1	CALL_4
0x4000259	          0x4989c5	                            mov r13, rax	      1766	fold.c	FUNCTION_53	CALL_3
0x400025c	      0xe800000000	                          call 0x4000261	      1768	fold.c	FUNCTION_53	IF_1	CALL_4
0x4000261	          0x83f801	                              cmp eax, 1	      1768	fold.c	FUNCTION_53	IF_1	CALL_4
0x4000264	            0x742a	                            je 0x4000290	      1768	fold.c	FUNCTION_53	IF_1	CALL_4
0x4000266	      0x488b442418	            mov rax, qword [rsp + 0x18] 	      1790	fold.c	FUNCTION_53
0x400026b	    0x644833042528	                xor rax, qword fs:[0x28]	      1790	fold.c	FUNCTION_53
0x4000274	     0xf85df000000	                           jne 0x4000359	      1790	fold.c	FUNCTION_53
0x400027a	        0x4883c428	                           add rsp, 0x28	      1790	fold.c	FUNCTION_53
0x400027e	              0x5b	                                 pop rbx	      1790	fold.c	FUNCTION_53
0x400027f	              0x5d	                                 pop rbp	      1790	fold.c	FUNCTION_53
0x4000280	            0x415c	                                 pop r12	      1790	fold.c	FUNCTION_53
0x4000282	            0x415d	                                 pop r13	      1790	fold.c	FUNCTION_53
0x4000284	            0x415e	                                 pop r14	      1790	fold.c	FUNCTION_53
0x4000286	            0x415f	                                 pop r15	      1790	fold.c	FUNCTION_53
0x4000288	              0xc3	                                     ret	      1790	fold.c	FUNCTION_53
0x4000289	     0xf1f80000000	                         nop dword [rax]	      1790	fold.c	FUNCTION_53
0x4000290	      0x488d4c2414	                   lea rcx, [rsp + 0x14]	      1772	fold.c	FUNCTION_53	IF_1	CALL_5
0x4000295	            0x31d2	                            xor edx, edx	      1772	fold.c	FUNCTION_53	IF_1	CALL_5
0x4000297	            0x31f6	                            xor esi, esi	      1772	fold.c	FUNCTION_53	IF_1	CALL_5
0x4000299	          0x4889ef	                            mov rdi, rbp	      1772	fold.c	FUNCTION_53	IF_1	CALL_5
0x400029c	      0xe800000000	                          call 0x40002a1	      1772	fold.c	FUNCTION_53	IF_1	CALL_5
0x40002a1	          0x4c89e7	                            mov rdi, r12	      1774	fold.c	FUNCTION_53	IF_1	CALL_7
0x40002a4	      0xe800000000	                          call 0x40002a9	      1774	fold.c	FUNCTION_53	IF_1	CALL_7
0x40002a9	      0x438d7c2e01	                lea edi, [r14 + r13 + 1]	      1774	fold.c	FUNCTION_53	IF_1	CALL_7
0x40002ae	             0x1c7	                            add edi, eax	      1774	fold.c	FUNCTION_53	IF_1	CALL_7
0x40002b0	      0xe800000000	                          call 0x40002b5	      1774	fold.c	FUNCTION_53	IF_1	CALL_7
0x40002b5	          0x4885c0	                           test rax, rax	      1775	fold.c	FUNCTION_53	IF_1	IF_2
0x40002b8	            0x74ac	                            je 0x4000266	      1775	fold.c	FUNCTION_53	IF_1	IF_2
0x40002ba	          0x4889ee	                            mov rsi, rbp	       110	string3.h	FUNCTION_83	CALL_3
0x40002bd	          0x4889c7	                            mov rdi, rax	       110	string3.h	FUNCTION_83	CALL_3
0x40002c0	      0xe800000000	                          call 0x40002c5	       110	string3.h	FUNCTION_83	CALL_3
0x40002c5	          0x4d85ff	                           test r15, r15	      1779	fold.c	FUNCTION_53	IF_1	IF_3
0x40002c8	          0x4889c1	                            mov rcx, rax	       110	string3.h	FUNCTION_83	CALL_3
0x40002cb	            0x7408	                            je 0x40002d5	      1779	fold.c	FUNCTION_53	IF_1	IF_3
0x40002cd	        0x8b442414	            mov eax, dword [rsp + 0x14] 	      1779	fold.c	FUNCTION_53	IF_1	IF_3
0x40002d1	            0x85c0	                           test eax, eax	      1779	fold.c	FUNCTION_53	IF_1	IF_3
0x40002d3	            0x7433	                            je 0x4000308	      1779	fold.c	FUNCTION_53	IF_1	IF_3
0x40002d5	        0x488b3424	                    mov rsi, qword [rsp]	      1780	fold.c	FUNCTION_53	IF_1	CALL_9
0x40002d9	          0x4963fd	                        movsxd rdi, r13d	      1780	fold.c	FUNCTION_53	IF_1	CALL_9
0x40002dc	          0x4963d6	                        movsxd rdx, r14d	      1780	fold.c	FUNCTION_53	IF_1	CALL_9
0x40002df	          0x4801cf	                            add rdi, rcx	      1780	fold.c	FUNCTION_53	IF_1	CALL_9
0x40002e2	      0x48894c2408	                mov qword [rsp + 8], rcx	      1780	fold.c	FUNCTION_53	IF_1	CALL_9
0x40002e7	      0xe800000000	                          call 0x40002ec	      1780	fold.c	FUNCTION_53	IF_1	CALL_9
0x40002ec	      0x488b4c2408	                mov rcx, qword [rsp + 8]	      1780	fold.c	FUNCTION_53	IF_1	CALL_9
0x40002f1	            0x31d2	                            xor edx, edx	      1788	fold.c	FUNCTION_53	IF_1	CALL_13
0x40002f3	          0x4889ce	                            mov rsi, rcx	      1788	fold.c	FUNCTION_53	IF_1	CALL_13
0x40002f6	          0x4889df	                            mov rdi, rbx	      1788	fold.c	FUNCTION_53	IF_1	CALL_13
0x40002f9	      0xe800000000	                          call 0x40002fe	      1788	fold.c	FUNCTION_53	IF_1	CALL_13
0x40002fe	      0xe963ffffff	                           jmp 0x4000266	      1788	fold.c	FUNCTION_53	IF_1	CALL_13
0x4000303	       0xf1f440000	                   nop dword [rax + rax]	      1788	fold.c	FUNCTION_53	IF_1	CALL_13
0x4000308	          0x4d63ed	                        movsxd r13, r13d	      1783	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_10
0x400030b	          0x4c89e6	                            mov rsi, r12	       110	string3.h	FUNCTION_83	CALL_3
0x400030e	      0x48894c2408	                mov qword [rsp + 8], rcx	       110	string3.h	FUNCTION_83	CALL_3
0x4000313	        0x4a8d3c29	                    lea rdi, [rcx + r13]	       110	string3.h	FUNCTION_83	CALL_3
0x4000317	      0xe800000000	                          call 0x400031c	       110	string3.h	FUNCTION_83	CALL_3
0x400031c	      0x488b4c2408	                mov rcx, qword [rsp + 8]	       126	string3.h	FUNCTION_85	CALL_3
0x4000321	          0x4c89f8	                            mov rax, r15	      1784	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_11
0x4000324	        0x488b3424	                    mov rsi, qword [rsp]	       126	string3.h	FUNCTION_85	CALL_3
0x4000328	          0x4c29e0	                            sub rax, r12	      1784	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_11
0x400032b	          0x4c89f2	                            mov rdx, r14	       126	string3.h	FUNCTION_85	CALL_3
0x400032e	          0x4901c5	                            add r13, rax	      1784	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_11
0x4000331	        0x4a8d3c29	                    lea rdi, [rcx + r13]	       126	string3.h	FUNCTION_85	CALL_3
0x4000335	          0x4d01f5	                            add r13, r14	       110	string3.h	FUNCTION_83	CALL_3
0x4000338	      0xe800000000	                          call 0x400033d	       126	string3.h	FUNCTION_85	CALL_3
0x400033d	      0x488b4c2408	                mov rcx, qword [rsp + 8]	       110	string3.h	FUNCTION_83	CALL_3
0x4000342	        0x498d7702	                      lea rsi, [r15 + 2]	       110	string3.h	FUNCTION_83	CALL_3
0x4000346	        0x4a8d3c29	                    lea rdi, [rcx + r13]	       110	string3.h	FUNCTION_83	CALL_3
0x400034a	        0x48890c24	                    mov qword [rsp], rcx	       110	string3.h	FUNCTION_83	CALL_3
0x400034e	      0xe800000000	                          call 0x4000353	       110	string3.h	FUNCTION_83	CALL_3
0x4000353	        0x488b0c24	                    mov rcx, qword [rsp]	       110	string3.h	FUNCTION_83	CALL_3
0x4000357	            0xeb98	                           jmp 0x40002f1	       110	string3.h	FUNCTION_83	CALL_3
0x4000359	      0xe800000000	                          call 0x400035e	      1790	fold.c	FUNCTION_53
foldtext_cleanup	FOR,2:functions,0:IF,10:ELSE,4:CALL,17:DO,0:SWITCH,0:WHILE,3	234
0x4004dc0	            0x4157	                                push r15	      1992	fold.c	FUNCTION_57
0x4004dc2	            0x4156	                                push r14	      1992	fold.c	FUNCTION_57
0x4004dc4	          0x4989ff	                            mov r15, rdi	      1992	fold.c	FUNCTION_57
0x4004dc7	            0x4155	                                push r13	      1992	fold.c	FUNCTION_57
0x4004dc9	            0x4154	                                push r12	      1992	fold.c	FUNCTION_57
0x4004dcb	              0x55	                                push rbp	      1992	fold.c	FUNCTION_57
0x4004dcc	              0x53	                                push rbx	      1992	fold.c	FUNCTION_57
0x4004dcd	        0x4883ec48	                           sub rsp, 0x48	      1992	fold.c	FUNCTION_57
0x4004dd1	    0x488b05000000	            mov rax, qword [0x04004dd8] 	      2004	fold.c	FUNCTION_57	CALL_1
0x4004dd8	    0x488bb8501400	          mov rdi, qword [rax + 0x1450] 	      2004	fold.c	FUNCTION_57	CALL_1
0x4004ddf	      0xe800000000	                          call 0x4004de4	      2004	fold.c	FUNCTION_57	CALL_1
0x4004de4	          0x4889c7	                            mov rdi, rax	      2005	fold.c	FUNCTION_57	CALL_2
0x4004de7	          0x4889c5	                            mov rbp, rax	      2004	fold.c	FUNCTION_57	CALL_1
0x4004dea	      0xe800000000	                          call 0x4004def	      2005	fold.c	FUNCTION_57	CALL_2
0x4004def	            0x85c0	                           test eax, eax	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4004df1	          0x4189c5	                           mov r13d, eax	      2005	fold.c	FUNCTION_57	CALL_2
0x4004df4	            0x7e32	                           jle 0x4004e28	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4004df6	            0x4898	                                    cdqe	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4004df8	       0xfb65405ff	         movzx edx, byte [rbp + rax - 1]	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4004dfd	          0x80fa20	                            cmp dl, 0x20	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4004e00	            0x7405	                            je 0x4004e07	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4004e02	          0x80fa09	                               cmp dl, 9	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4004e05	            0x7521	                           jne 0x4004e28	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4004e07	          0x4801e8	                            add rax, rbp	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4004e0a	    0x660f1f440000	                    nop word [rax + rax]	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4004e10	        0x4183ed01	                             sub r13d, 1	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4004e14	            0x7412	                            je 0x4004e28	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4004e16	         0xfb650fe	               movzx edx, byte [rax - 2]	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4004e1a	        0x4883e801	                              sub rax, 1	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4004e1e	          0x80fa20	                            cmp dl, 0x20	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4004e21	            0x74ed	                            je 0x4004e10	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4004e23	          0x80fa09	                               cmp dl, 9	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4004e26	            0x74e8	                            je 0x4004e10	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x4004e28	      0xbe00000000	                              mov esi, 0	      2010	fold.c	FUNCTION_57	CALL_4
0x4004e2d	          0x4889ef	                            mov rdi, rbp	      2010	fold.c	FUNCTION_57	CALL_4
0x4004e30	      0xe800000000	                          call 0x4004e35	      2010	fold.c	FUNCTION_57	CALL_4
0x4004e35	          0x4885c0	                           test rax, rax	      2011	fold.c	FUNCTION_57	IF_1
0x4004e38	      0x4889442418	             mov qword [rsp + 0x18], rax	      2010	fold.c	FUNCTION_57	CALL_4
0x4004e3d	     0xf84e8020000	                            je 0x400512b	      2011	fold.c	FUNCTION_57	IF_1
0x4004e43	          0x4989c6	                            mov r14, rax	      2013	fold.c	FUNCTION_57	IF_1
0x4004e46	          0x4829e8	                            sub rax, rbp	      2013	fold.c	FUNCTION_57	IF_1
0x4004e49	          0x4129c5	                           sub r13d, eax	      2013	fold.c	FUNCTION_57	IF_1
0x4004e4c	            0x85c0	                           test eax, eax	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4004e4e	            0x89c3	                            mov ebx, eax	      2013	fold.c	FUNCTION_57	IF_1
0x4004e50	            0x7e35	                           jle 0x4004e87	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4004e52	            0x4898	                                    cdqe	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4004e54	       0xfb65405ff	         movzx edx, byte [rbp + rax - 1]	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4004e59	          0x80fa20	                            cmp dl, 0x20	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4004e5c	            0x7405	                            je 0x4004e63	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4004e5e	          0x80fa09	                               cmp dl, 9	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4004e61	            0x7524	                           jne 0x4004e87	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4004e63	          0x4801e8	                            add rax, rbp	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4004e66	    0x662e0f1f8400	                 nop word cs:[rax + rax]	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4004e70	          0x83eb01	                              sub ebx, 1	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4004e73	            0x7412	                            je 0x4004e87	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4004e75	         0xfb650fe	               movzx edx, byte [rax - 2]	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4004e79	        0x4883e801	                              sub rax, 1	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4004e7d	          0x80fa20	                            cmp dl, 0x20	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4004e80	            0x74ee	                            je 0x4004e70	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4004e82	          0x80fa09	                               cmp dl, 9	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4004e85	            0x74e9	                            je 0x4004e70	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4004e87	      0x488b7c2418	            mov rdi, qword [rsp + 0x18] 	      2021	fold.c	FUNCTION_57	IF_1	CALL_6
0x4004e8c	        0x4883c702	                              add rdi, 2	      2021	fold.c	FUNCTION_57	IF_1	CALL_6
0x4004e90	      0xe800000000	                          call 0x4004e95	      2021	fold.c	FUNCTION_57	IF_1	CALL_6
0x4004e95	      0x4889442418	             mov qword [rsp + 0x18], rax	      2021	fold.c	FUNCTION_57	IF_1	CALL_6
0x4004e9a	          0x4c29f0	                            sub rax, r14	      2022	fold.c	FUNCTION_57	IF_1
0x4004e9d	          0x4129c5	                           sub r13d, eax	      2022	fold.c	FUNCTION_57	IF_1
0x4004ea0	      0x44896c2430	            mov dword [rsp + 0x30], r13d	      2022	fold.c	FUNCTION_57	IF_1
0x4004ea5	    0x488b05000000	            mov rax, qword [0x04004eac] 	      2022	fold.c	FUNCTION_57	IF_1
0x4004eac	          0x4d89fc	                            mov r12, r15	      2027	fold.c	FUNCTION_57	FOR_1
0x4004eaf	    0x488db8280200	                  lea rdi, [rax + 0x228]	      2027	fold.c	FUNCTION_57	FOR_1
0x4004eb6	      0xe875beffff	             call sym.parseMarker.isra.8	      2025	fold.c	FUNCTION_57	CALL_7
0x4004ebb	      0x4863442430	         movsxd rax, dword [rsp + 0x30] 	      2058	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9	CALL_14
0x4004ec0	    0xc74424340000	               mov dword [rsp + 0x34], 0	      2001	fold.c	FUNCTION_57
0x4004ec8	    0xc744242c0000	               mov dword [rsp + 0x2c], 0	      2000	fold.c	FUNCTION_57
0x4004ed0	      0x4889442438	             mov qword [rsp + 0x38], rax	      2058	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9	CALL_14
0x4004ed5	          0x4863c3	                         movsxd rax, ebx	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x4004ed8	      0x4889442410	             mov qword [rsp + 0x10], rax	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x4004edd	          0x4c01f8	                            add rax, r15	      2043	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x4004ee0	      0x4889442408	                mov qword [rsp + 8], rax	      2043	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x4004ee5	           0xf1f00	                         nop dword [rax]	      2043	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x4004ee8	      0x41803c2400	                       cmp byte [r12], 0	      2027	fold.c	FUNCTION_57	FOR_1
0x4004eed	     0xf84f3000000	                            je 0x4004fe6	      2027	fold.c	FUNCTION_57	FOR_1
0x4004ef3	    0x488b05000000	            mov rax, qword [0x04004efa] 	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x4004efa	    0x4c632d000000	         movsxd r13, dword [0x04004f01] 	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x4004f01	          0x4c89e7	                            mov rdi, r12	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x4004f04	    0x488bb0280200	           mov rsi, qword [rax + 0x228] 	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x4004f0b	          0x4c89ea	                            mov rdx, r13	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x4004f0e	          0x4d89ee	                            mov r14, r13	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x4004f11	      0xe800000000	                          call 0x4004f16	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x4004f16	            0x85c0	                           test eax, eax	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x4004f18	     0xf84da000000	                            je 0x4004ff8	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x4004f1e	    0x4c632d000000	         movsxd r13, dword [0x04004f25] 	      2032	fold.c	FUNCTION_57	FOR_1	ELSE_1	IF_3	CALL_9
0x4004f25	    0x488b35000000	            mov rsi, qword [0x04004f2c] 	      2032	fold.c	FUNCTION_57	FOR_1	ELSE_1	IF_3	CALL_9
0x4004f2c	          0x4c89e7	                            mov rdi, r12	      2032	fold.c	FUNCTION_57	FOR_1	ELSE_1	IF_3	CALL_9
0x4004f2f	          0x4c89ea	                            mov rdx, r13	      2032	fold.c	FUNCTION_57	FOR_1	ELSE_1	IF_3	CALL_9
0x4004f32	          0x4d89ee	                            mov r14, r13	      2032	fold.c	FUNCTION_57	FOR_1	ELSE_1	IF_3	CALL_9
0x4004f35	      0xe800000000	                          call 0x4004f3a	      2032	fold.c	FUNCTION_57	FOR_1	ELSE_1	IF_3	CALL_9
0x4004f3a	            0x85c0	                           test eax, eax	      2032	fold.c	FUNCTION_57	FOR_1	ELSE_1	IF_3	CALL_9
0x4004f3c	     0xf84b6000000	                            je 0x4004ff8	      2032	fold.c	FUNCTION_57	FOR_1	ELSE_1	IF_3	CALL_9
0x4004f42	          0x4531f6	                          xor r14d, r14d	      2029	fold.c	FUNCTION_57	FOR_1
0x4004f45	    0x48837c241800	               cmp qword [rsp + 0x18], 0	      2050	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7
0x4004f4b	     0xf8431010000	                            je 0x4005082	      2050	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7
0x4004f51	        0x8b7c242c	            mov edi, dword [rsp + 0x2c] 	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x4004f55	            0x85ff	                           test edi, edi	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x4004f57	     0xf855b010000	                           jne 0x40050b8	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x4004f5d	            0x85db	                           test ebx, ebx	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x4004f5f	     0xf8e53010000	                           jle 0x40050b8	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x4004f65	      0x488b542410	            mov rdx, qword [rsp + 0x10] 	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x4004f6a	          0x4889ee	                            mov rsi, rbp	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x4004f6d	          0x4c89e7	                            mov rdi, r12	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x4004f70	      0xe800000000	                          call 0x4004f75	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x4004f75	            0x85c0	                           test eax, eax	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x4004f77	     0xf853b010000	                           jne 0x40050b8	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x4004f7d	      0x4c8b6c2410	            mov r13, qword [rsp + 0x10] 	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x4004f82	          0x4189de	                           mov r14d, ebx	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x4004f85	    0xc744242c0100	               mov dword [rsp + 0x2c], 1	      2055	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8
0x4004f8d	           0xf1f00	                         nop dword [rax]	      2055	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8
0x4004f90	          0x4d01e5	                            add r13, r12	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x4004f93	      0x410fb64500	                   movzx eax, byte [r13]	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x4004f98	            0x3c09	                               cmp al, 9	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x4004f9a	            0x7404	                            je 0x4004fa0	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x4004f9c	            0x3c20	                            cmp al, 0x20	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x4004f9e	            0x7524	                           jne 0x4004fc4	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x4004fa0	          0x4963ce	                        movsxd rcx, r14d	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x4004fa3	      0x498d440c01	                lea rax, [r12 + rcx + 1]	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x4004fa8	     0xf1f84000000	                   nop dword [rax + rax]	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x4004fb0	           0xfb610	                   movzx edx, byte [rax]	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x4004fb3	          0x4989c5	                            mov r13, rax	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x4004fb6	        0x4883c001	                              add rax, 1	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x4004fba	          0x80fa20	                            cmp dl, 0x20	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x4004fbd	            0x74f1	                            je 0x4004fb0	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x4004fbf	          0x80fa09	                               cmp dl, 9	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x4004fc2	            0x74ec	                            je 0x4004fb0	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x4004fc4	          0x4c89ef	                            mov rdi, r13	      2068	fold.c	FUNCTION_57	FOR_1	IF_10	CALL_16
0x4004fc7	      0xe800000000	                          call 0x4004fcc	      2068	fold.c	FUNCTION_57	FOR_1	IF_10	CALL_16
0x4004fcc	        0x488d5001	                      lea rdx, [rax + 1]	        59	string3.h	FUNCTION_78	CALL_3
0x4004fd0	          0x4c89ee	                            mov rsi, r13	        59	string3.h	FUNCTION_78	CALL_3
0x4004fd3	          0x4c89e7	                            mov rdi, r12	        59	string3.h	FUNCTION_78	CALL_3
0x4004fd6	      0xe800000000	                          call 0x4004fdb	        59	string3.h	FUNCTION_78	CALL_3
0x4004fdb	      0x41803c2400	                       cmp byte [r12], 0	      2027	fold.c	FUNCTION_57	FOR_1
0x4004fe0	     0xf850dffffff	                           jne 0x4004ef3	      2027	fold.c	FUNCTION_57	FOR_1
0x4004fe6	        0x4883c448	                           add rsp, 0x48	      2075	fold.c	FUNCTION_57
0x4004fea	              0x5b	                                 pop rbx	      2075	fold.c	FUNCTION_57
0x4004feb	              0x5d	                                 pop rbp	      2075	fold.c	FUNCTION_57
0x4004fec	            0x415c	                                 pop r12	      2075	fold.c	FUNCTION_57
0x4004fee	            0x415d	                                 pop r13	      2075	fold.c	FUNCTION_57
0x4004ff0	            0x415e	                                 pop r14	      2075	fold.c	FUNCTION_57
0x4004ff2	            0x415f	                                 pop r15	      2075	fold.c	FUNCTION_57
0x4004ff4	              0xc3	                                     ret	      2075	fold.c	FUNCTION_57
0x4004ff5	           0xf1f00	                         nop dword [rax]	      2075	fold.c	FUNCTION_57
0x4004ff8	          0x4585f6	                         test r14d, r14d	      2034	fold.c	FUNCTION_57	FOR_1	IF_4
0x4004ffb	     0xf8e19010000	                           jle 0x400511a	      2034	fold.c	FUNCTION_57	FOR_1	IF_4
0x4005001	      0x430fb6042c	             movzx eax, byte [r12 + r13]	      2036	fold.c	FUNCTION_57	FOR_1	IF_4	IF_5	CALL_10
0x4005006	          0x83e830	                           sub eax, 0x30	      2036	fold.c	FUNCTION_57	FOR_1	IF_4	IF_5	CALL_10
0x4005009	          0x83f80a	                            cmp eax, 0xa	      2037	fold.c	FUNCTION_57	FOR_1	IF_4	IF_5
0x400500c	        0x4183d600	                             adc r14d, 0	      2037	fold.c	FUNCTION_57	FOR_1	IF_4	IF_5
0x4005010	          0x4d39fc	                            cmp r12, r15	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x4005013	     0xf86f9000000	                           jbe 0x4005112	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x4005019	    0x410fb64424ff	               movzx eax, byte [r12 - 1]	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x400501f	          0x4d89e5	                            mov r13, r12	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x4005022	            0x3c20	                            cmp al, 0x20	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x4005024	            0x751c	                           jne 0x4005042	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x4005026	    0x662e0f1f8400	                 nop word cs:[rax + rax]	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x4005030	        0x4983ed01	                              sub r13, 1	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x4005034	          0x4d39ef	                            cmp r15, r13	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x4005037	            0x7477	                            je 0x40050b0	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x4005039	      0x410fb645ff	               movzx eax, byte [r13 - 1]	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x400503e	            0x3c20	                            cmp al, 0x20	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x4005040	            0x74ee	                            je 0x4005030	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x4005042	            0x3c09	                               cmp al, 9	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x4005044	            0x74ea	                            je 0x4005030	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x4005046	      0x4c3b6c2408	                cmp r13, qword [rsp + 8]	      2043	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x400504b	            0x7253	                            jb 0x40050a0	      2043	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x400504d	      0x488b4c2410	            mov rcx, qword [rsp + 0x10] 	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x4005052	          0x4c89e8	                            mov rax, r13	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x4005055	          0x4889ee	                            mov rsi, rbp	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x4005058	          0x4829c8	                            sub rax, rcx	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x400505b	          0x4889ca	                            mov rdx, rcx	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x400505e	          0x4889c7	                            mov rdi, rax	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x4005061	      0x4889442420	             mov qword [rsp + 0x20], rax	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x4005066	      0xe800000000	                          call 0x400506b	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x400506b	            0x85c0	                           test eax, eax	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x400506d	            0x7531	                           jne 0x40050a0	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x400506f	          0x4d29ec	                            sub r12, r13	      2046	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x4005072	          0x4101dc	                           add r12d, ebx	      2046	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x4005075	          0x4501e6	                          add r14d, r12d	      2046	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x4005078	      0x4c8b642420	            mov r12, qword [rsp + 0x20] 	      2046	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x400507d	          0x4585f6	                         test r14d, r14d	      2064	fold.c	FUNCTION_57	FOR_1	IF_10
0x4005080	            0x751e	                           jne 0x40050a0	      2064	fold.c	FUNCTION_57	FOR_1	IF_10
0x4005082	    0x8b1500000000	            mov edx, dword [0x04005088] 	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x4005088	      0xb801000000	                              mov eax, 1	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x400508d	            0x85d2	                           test edx, edx	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x400508f	            0x7567	                           jne 0x40050f8	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x4005091	          0x4901c4	                            add r12, rax	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x4005094	      0xe94ffeffff	                           jmp 0x4004ee8	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x4005099	     0xf1f80000000	                         nop dword [rax]	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x40050a0	          0x4d63ee	                        movsxd r13, r14d	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x40050a3	      0xe9e8feffff	                           jmp 0x4004f90	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x40050a8	     0xf1f84000000	                   nop dword [rax + rax]	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x40050b0	          0x4d89fd	                            mov r13, r15	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x40050b3	            0xeb91	                           jmp 0x4005046	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x40050b5	           0xf1f00	                         nop dword [rax]	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x40050b8	        0x8b742434	            mov esi, dword [rsp + 0x34] 	      2057	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9
0x40050bc	            0x85f6	                           test esi, esi	      2057	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9
0x40050be	            0x75bd	                           jne 0x400507d	      2057	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9
0x40050c0	        0x8b4c2430	            mov ecx, dword [rsp + 0x30] 	      2057	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9
0x40050c4	            0x85c9	                           test ecx, ecx	      2057	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9
0x40050c6	            0x7eb5	                           jle 0x400507d	      2057	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9
0x40050c8	      0x488b542438	            mov rdx, qword [rsp + 0x38] 	      2058	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9	CALL_14
0x40050cd	      0x488b742418	            mov rsi, qword [rsp + 0x18] 	      2058	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9	CALL_14
0x40050d2	          0x4c89e7	                            mov rdi, r12	      2058	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9	CALL_14
0x40050d5	      0xe800000000	                          call 0x40050da	      2058	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9	CALL_14
0x40050da	            0x85c0	                           test eax, eax	      2058	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9	CALL_14
0x40050dc	            0x7527	                           jne 0x4005105	      2058	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9	CALL_14
0x40050de	      0x4c8b6c2438	            mov r13, qword [rsp + 0x38] 	      2058	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9	CALL_14
0x40050e3	      0x448b742430	           mov r14d, dword [rsp + 0x30] 	      2058	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9	CALL_14
0x40050e8	    0xc74424340100	               mov dword [rsp + 0x34], 1	      2061	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9
0x40050f0	      0xe99bfeffff	                           jmp 0x4004f90	      2061	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9
0x40050f5	           0xf1f00	                         nop dword [rax]	      2061	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9
0x40050f8	          0x4c89e7	                            mov rdi, r12	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x40050fb	    0xff1500000000	                 call qword [0x04005101]	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x4005101	            0x4898	                                    cdqe	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x4005103	            0xeb8c	                           jmp 0x4005091	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x4005105	    0xc74424340000	               mov dword [rsp + 0x34], 0	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x400510d	      0xe96bffffff	                           jmp 0x400507d	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x4005112	          0x4d89e5	                            mov r13, r12	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x4005115	      0xe92cffffff	                           jmp 0x4005046	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x400511a	    0x48837c241800	               cmp qword [rsp + 0x18], 0	      2050	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7
0x4005120	     0xf852bfeffff	                           jne 0x4004f51	      2050	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7
0x4005126	      0xe952ffffff	                           jmp 0x400507d	      2050	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7
0x400512b	          0x4489eb	                           mov ebx, r13d	      2050	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7
0x400512e	    0xc74424300000	               mov dword [rsp + 0x30], 0	      1996	fold.c	FUNCTION_57
0x4005136	      0xe96afdffff	                           jmp 0x4004ea5	      1996	fold.c	FUNCTION_57
foldAdjustVisual	FOR,0:functions,0:IF,6:ELSE,1:CALL,7:DO,0:SWITCH,0:WHILE,0	84
0x40034a0	    0x8b0d00000000	            mov ecx, dword [0x040034a6] 	      1038	fold.c	FUNCTION_33	IF_1	CALL_1
0x40034a6	            0x85c9	                           test ecx, ecx	      1038	fold.c	FUNCTION_33	IF_1	CALL_1
0x40034a8	     0xf8483000000	                            je 0x4003531	      1038	fold.c	FUNCTION_33	IF_1	CALL_1
0x40034ae	    0x4c8b15000000	            mov r10, qword [0x040034b5] 	      1038	fold.c	FUNCTION_33	IF_1	CALL_1
0x40034b5	    0x418b92d40100	           mov edx, dword [r10 + 0x1d4] 	       119	fold.c	FUNCTION_2	CALL_1
0x40034bc	            0x85d2	                           test edx, edx	       119	fold.c	FUNCTION_2	CALL_1
0x40034be	            0x7471	                            je 0x4003531	       119	fold.c	FUNCTION_2	CALL_1
0x40034c0	            0x4154	                                push r12	      1034	fold.c	FUNCTION_33
0x40034c2	              0x55	                                push rbp	      1034	fold.c	FUNCTION_33
0x40034c3	          0x4c89d7	                            mov rdi, r10	      1034	fold.c	FUNCTION_33
0x40034c6	              0x53	                                push rbx	      1034	fold.c	FUNCTION_33
0x40034c7	      0xe844dbffff	          call sym.hasAnyFolding.part.13	      1034	fold.c	FUNCTION_33
0x40034cc	            0x85c0	                           test eax, eax	      1038	fold.c	FUNCTION_33	IF_1	CALL_1
0x40034ce	            0x745d	                            je 0x400352d	      1038	fold.c	FUNCTION_33	IF_1	CALL_1
0x40034d0	    0x488b35000000	            mov rsi, qword [0x040034d7] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x40034d7	        0x498b4238	            mov rax, qword [r10 + 0x38] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x40034db	          0x4839c6	                            cmp rsi, rax	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x40034de	            0x7468	                            je 0x4003548	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x40034e0	     0xf8d8b000000	                           jge 0x4003571	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x40034e6	        0x498d5a38	                   lea rbx, [r10 + 0x38]	      1044	fold.c	FUNCTION_33	IF_2
0x40034ea	      0xba00000000	                              mov edx, 0	      1044	fold.c	FUNCTION_33	IF_2
0x40034ef	          0x4889d5	                            mov rbp, rdx	      1043	fold.c	FUNCTION_33	IF_2
0x40034f2	          0x4989dc	                            mov r12, rbx	      1044	fold.c	FUNCTION_33	IF_2
0x40034f5	          0x4531c9	                            xor r9d, r9d	       132	fold.c	FUNCTION_3	CALL_1
0x40034f8	            0x31c9	                            xor ecx, ecx	       132	fold.c	FUNCTION_3	CALL_1
0x40034fa	    0x41b801000000	                              mov r8d, 1	       132	fold.c	FUNCTION_3	CALL_1
0x4003500	          0x4c89d7	                            mov rdi, r10	       132	fold.c	FUNCTION_3	CALL_1
0x4003503	      0xe800000000	                          call 0x4003508	       132	fold.c	FUNCTION_3	CALL_1
0x4003508	            0x85c0	                           test eax, eax	      1051	fold.c	FUNCTION_33	IF_3	CALL_3
0x400350a	            0x752c	                           jne 0x4003538	      1051	fold.c	FUNCTION_33	IF_3	CALL_3
0x400350c	          0x488b33	                    mov rsi, qword [rbx]	       132	fold.c	FUNCTION_3	CALL_1
0x400350f	    0x488b3d000000	            mov rdi, qword [0x04003516] 	       132	fold.c	FUNCTION_3	CALL_1
0x4003516	          0x4531c9	                            xor r9d, r9d	       132	fold.c	FUNCTION_3	CALL_1
0x4003519	            0x31d2	                            xor edx, edx	       132	fold.c	FUNCTION_3	CALL_1
0x400351b	    0x41b801000000	                              mov r8d, 1	       132	fold.c	FUNCTION_3	CALL_1
0x4003521	          0x4c89e1	                            mov rcx, r12	       132	fold.c	FUNCTION_3	CALL_1
0x4003524	      0xe800000000	                          call 0x4003529	       132	fold.c	FUNCTION_3	CALL_1
0x4003529	            0x85c0	                           test eax, eax	      1053	fold.c	FUNCTION_33	IF_4	CALL_4
0x400352b	            0x7563	                           jne 0x4003590	      1053	fold.c	FUNCTION_33	IF_4	CALL_4
0x400352d	              0x5b	                                 pop rbx	      1065	fold.c	FUNCTION_33
0x400352e	              0x5d	                                 pop rbp	      1065	fold.c	FUNCTION_33
0x400352f	            0x415c	                                 pop r12	      1065	fold.c	FUNCTION_33
0x4003531	            0xf3c3	                                     ret	      1065	fold.c	FUNCTION_33
0x4003533	       0xf1f440000	                   nop dword [rax + rax]	      1065	fold.c	FUNCTION_33
0x4003538	    0xc74508000000	                  mov dword [rbp + 8], 0	      1052	fold.c	FUNCTION_33	IF_3
0x400353f	            0xebcb	                           jmp 0x400350c	      1052	fold.c	FUNCTION_33	IF_3
0x4003541	     0xf1f80000000	                         nop dword [rax]	      1052	fold.c	FUNCTION_33	IF_3
0x4003548	        0x418b4a40	            mov ecx, dword [r10 + 0x40] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x400354c	    0x390d00000000	            cmp dword [0x04003552], ecx 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4003552	            0x750a	                           jne 0x400355e	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4003554	        0x418b4a44	            mov ecx, dword [r10 + 0x44] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4003558	    0x390d00000000	            cmp dword [0x0400355e], ecx 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x400355e	            0x7c86	                            jl 0x40034e6	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4003560	        0x498b4a40	            mov rcx, qword [r10 + 0x40] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4003564	    0x48390d000000	            cmp qword [0x0400356b], rcx 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x400356b	     0xf8475ffffff	                            je 0x40034e6	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4003571	        0x498d6a38	                   lea rbp, [r10 + 0x38]	      1048	fold.c	FUNCTION_33	ELSE_1
0x4003575	    0x41bc00000000	                             mov r12d, 0	      1048	fold.c	FUNCTION_33	ELSE_1
0x400357b	          0x4889c6	                            mov rsi, rax	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x400357e	          0x4c89e3	                            mov rbx, r12	      1049	fold.c	FUNCTION_33	ELSE_1
0x4003581	          0x4889ea	                            mov rdx, rbp	      1048	fold.c	FUNCTION_33	ELSE_1
0x4003584	      0xe96cffffff	                           jmp 0x40034f5	      1048	fold.c	FUNCTION_33	ELSE_1
0x4003589	     0xf1f80000000	                         nop dword [rax]	      1048	fold.c	FUNCTION_33	ELSE_1
0x4003590	          0x488b3b	                    mov rdi, qword [rbx]	      1055	fold.c	FUNCTION_33	IF_4	CALL_5
0x4003593	      0xe800000000	                          call 0x4003598	      1055	fold.c	FUNCTION_33	IF_4	CALL_5
0x4003598	          0x4889c7	                            mov rdi, rax	      1056	fold.c	FUNCTION_33	IF_4	CALL_6
0x400359b	      0xe800000000	                          call 0x40035a0	      1056	fold.c	FUNCTION_33	IF_4	CALL_6
0x40035a0	            0x85c0	                           test eax, eax	      1057	fold.c	FUNCTION_33	IF_4	IF_5
0x40035a2	          0x894308	                mov dword [rbx + 8], eax	      1056	fold.c	FUNCTION_33	IF_4	CALL_6
0x40035a5	            0x7e0c	                           jle 0x40035b3	      1057	fold.c	FUNCTION_33	IF_4	IF_5
0x40035a7	    0x488b15000000	            mov rdx, qword [0x040035ae] 	      1057	fold.c	FUNCTION_33	IF_4	IF_5
0x40035ae	          0x803a6f	                    cmp byte [rdx], 0x6f	      1057	fold.c	FUNCTION_33	IF_4	IF_5
0x40035b1	            0x741d	                            je 0x40035d0	      1057	fold.c	FUNCTION_33	IF_4	IF_5
0x40035b3	    0x8b0500000000	            mov eax, dword [0x040035b9] 	      1061	fold.c	FUNCTION_33	IF_4	IF_6
0x40035b9	            0x85c0	                           test eax, eax	      1061	fold.c	FUNCTION_33	IF_4	IF_6
0x40035bb	     0xf846cffffff	                            je 0x400352d	      1061	fold.c	FUNCTION_33	IF_4	IF_6
0x40035c1	              0x5b	                                 pop rbx	      1065	fold.c	FUNCTION_33
0x40035c2	              0x5d	                                 pop rbp	      1065	fold.c	FUNCTION_33
0x40035c3	            0x415c	                                 pop r12	      1065	fold.c	FUNCTION_33
0x40035c5	      0xe900000000	                           jmp 0x40035ca	      1062	fold.c	FUNCTION_33	IF_4	CALL_7
0x40035ca	    0x660f1f440000	                    nop word [rax + rax]	      1062	fold.c	FUNCTION_33	IF_4	CALL_7
0x40035d0	          0x83e801	                              sub eax, 1	      1058	fold.c	FUNCTION_33	IF_4	IF_5
0x40035d3	          0x894308	                mov dword [rbx + 8], eax	      1058	fold.c	FUNCTION_33	IF_4	IF_5
0x40035d6	            0xebdb	                           jmp 0x40035b3	      1058	fold.c	FUNCTION_33	IF_4	IF_5
foldlevelIndent	FOR,0:functions,0:IF,4:ELSE,2:CALL,5:DO,0:SWITCH,0:WHILE,0	58
0x4000570	            0x4154	                                push r12	      3203	fold.c	FUNCTION_67
0x4000572	              0x55	                                push rbp	      3203	fold.c	FUNCTION_67
0x4000573	            0x31d2	                            xor edx, edx	      3209	fold.c	FUNCTION_67	CALL_2
0x4000575	              0x53	                                push rbx	      3203	fold.c	FUNCTION_67
0x4000576	          0x488b07	                    mov rax, qword [rdi]	      3208	fold.c	FUNCTION_67
0x4000579	          0x4889fb	                            mov rbx, rdi	      3203	fold.c	FUNCTION_67
0x400057c	        0x488b6f10	            mov rbp, qword [rdi + 0x10] 	      3206	fold.c	FUNCTION_67
0x4000580	        0x48036f08	                add rbp, qword [rdi + 8]	      3206	fold.c	FUNCTION_67
0x4000584	        0x4c8b6008	                mov r12, qword [rax + 8]	      3208	fold.c	FUNCTION_67
0x4000588	          0x4889ee	                            mov rsi, rbp	      3209	fold.c	FUNCTION_67	CALL_2
0x400058b	          0x4c89e7	                            mov rdi, r12	      3209	fold.c	FUNCTION_67	CALL_2
0x400058e	      0xe800000000	                          call 0x4000593	      3209	fold.c	FUNCTION_67	CALL_2
0x4000593	          0x4889c7	                            mov rdi, rax	      3209	fold.c	FUNCTION_67	CALL_2
0x4000596	      0xe800000000	                          call 0x400059b	      3209	fold.c	FUNCTION_67	CALL_2
0x400059b	           0xfb630	                   movzx esi, byte [rax]	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x400059e	          0x4084f6	                           test sil, sil	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x40005a1	            0x754d	                           jne 0x40005f0	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x40005a3	        0x4883fd01	                              cmp rbp, 1	      3216	fold.c	FUNCTION_67	IF_1	IF_2
0x40005a7	            0x7437	                            je 0x40005e0	      3216	fold.c	FUNCTION_67	IF_1	IF_2
0x40005a9	        0x493b2c24	                    cmp rbp, qword [r12]	      3216	fold.c	FUNCTION_67	IF_1	IF_2
0x40005ad	            0x7431	                            je 0x40005e0	      3216	fold.c	FUNCTION_67	IF_1	IF_2
0x40005af	    0xc74320ffffff	     mov dword [rbx + 0x20], 0xffffffff 	      3219	fold.c	FUNCTION_67	IF_1	ELSE_1
0x40005b6	    0x48c7c0ffffff	             mov rax, 0xffffffffffffffff	      3219	fold.c	FUNCTION_67	IF_1	ELSE_1
0x40005bd	          0x488b13	                    mov rdx, qword [rbx]	      3223	fold.c	FUNCTION_67	IF_3
0x40005c0	    0x488b92100200	           mov rdx, qword [rdx + 0x210] 	      3223	fold.c	FUNCTION_67	IF_3
0x40005c7	          0x4839c2	                            cmp rdx, rax	      3223	fold.c	FUNCTION_67	IF_3
0x40005ca	            0x7d0d	                           jge 0x40005d9	      3223	fold.c	FUNCTION_67	IF_3
0x40005cc	            0x85d2	                           test edx, edx	      3225	fold.c	FUNCTION_67	IF_3
0x40005ce	      0xb800000000	                              mov eax, 0	      3225	fold.c	FUNCTION_67	IF_3
0x40005d3	           0xf48d0	                          cmovs edx, eax	      3225	fold.c	FUNCTION_67	IF_3
0x40005d6	          0x895320	             mov dword [rbx + 0x20], edx	      3225	fold.c	FUNCTION_67	IF_3
0x40005d9	              0x5b	                                 pop rbx	      3229	fold.c	FUNCTION_67
0x40005da	              0x5d	                                 pop rbp	      3229	fold.c	FUNCTION_67
0x40005db	            0x415c	                                 pop r12	      3229	fold.c	FUNCTION_67
0x40005dd	              0xc3	                                     ret	      3229	fold.c	FUNCTION_67
0x40005de	            0x6690	                                     nop	      3229	fold.c	FUNCTION_67
0x40005e0	    0xc74320000000	               mov dword [rbx + 0x20], 0	      3217	fold.c	FUNCTION_67	IF_1	IF_2
0x40005e7	            0x31c0	                            xor eax, eax	      3217	fold.c	FUNCTION_67	IF_1	IF_2
0x40005e9	            0xebd2	                           jmp 0x40005bd	      3217	fold.c	FUNCTION_67	IF_1	IF_2
0x40005eb	       0xf1f440000	                   nop dword [rax + rax]	      3217	fold.c	FUNCTION_67	IF_1	IF_2
0x40005f0	          0x488b03	                    mov rax, qword [rbx]	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x40005f3	    0x488bb8e00100	           mov rdi, qword [rax + 0x1e0] 	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x40005fa	      0xe800000000	                          call 0x40005ff	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x40005ff	          0x4885c0	                           test rax, rax	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x4000602	            0x759f	                           jne 0x40005a3	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x4000604	          0x4889ee	                            mov rsi, rbp	      3222	fold.c	FUNCTION_67	CALL_5
0x4000607	          0x4c89e7	                            mov rdi, r12	      3222	fold.c	FUNCTION_67	CALL_5
0x400060a	      0xe800000000	                          call 0x400060f	      3222	fold.c	FUNCTION_67	CALL_5
0x400060f	    0x488b3d000000	            mov rdi, qword [0x04000616] 	      3222	fold.c	FUNCTION_67	CALL_5
0x4000616	            0x89c5	                            mov ebp, eax	      3222	fold.c	FUNCTION_67	CALL_5
0x4000618	      0xe800000000	                          call 0x400061d	      3222	fold.c	FUNCTION_67	CALL_5
0x400061d	          0x4889c1	                            mov rcx, rax	      3222	fold.c	FUNCTION_67	CALL_5
0x4000620	          0x4863c5	                         movsxd rax, ebp	      3222	fold.c	FUNCTION_67	CALL_5
0x4000623	            0x4899	                                     cqo	      3222	fold.c	FUNCTION_67	CALL_5
0x4000625	          0x48f7f9	                                idiv rcx	      3222	fold.c	FUNCTION_67	CALL_5
0x4000628	          0x894320	             mov dword [rbx + 0x20], eax	      3222	fold.c	FUNCTION_67	CALL_5
0x400062b	            0x4898	                                    cdqe	      3222	fold.c	FUNCTION_67	CALL_5
0x400062d	            0xeb8e	                           jmp 0x40005bd	      3222	fold.c	FUNCTION_67	CALL_5
setManualFold	FOR,0:functions,1:IF,1:ELSE,0:CALL,2:DO,0:SWITCH,0:WHILE,0	58
0x4003a30	            0x4156	                                push r14	      1230	fold.c	FUNCTION_40
0x4003a32	            0x4155	                                push r13	      1230	fold.c	FUNCTION_40
0x4003a34	          0x4989fd	                            mov r13, rdi	      1230	fold.c	FUNCTION_40
0x4003a37	    0x488b3d000000	            mov rdi, qword [0x04003a3e] 	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x4003a3e	            0x4154	                                push r12	      1230	fold.c	FUNCTION_40
0x4003a40	          0x4989ce	                            mov r14, rcx	      1230	fold.c	FUNCTION_40
0x4003a43	              0x55	                                push rbp	      1230	fold.c	FUNCTION_40
0x4003a44	              0x53	                                push rbx	      1230	fold.c	FUNCTION_40
0x4003a45	            0x89f5	                            mov ebp, esi	      1230	fold.c	FUNCTION_40
0x4003a47	          0x4189d4	                           mov r12d, edx	      1230	fold.c	FUNCTION_40
0x4003a4a	    0x488b87f80100	           mov rax, qword [rdi + 0x1f8] 	       357	fold.c	FUNCTION_13
0x4003a51	          0x803864	                    cmp byte [rax], 0x64	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x4003a54	            0x741a	                            je 0x4003a70	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x4003a56	              0x5b	                                 pop rbx	      1254	fold.c	FUNCTION_40
0x4003a57	          0x4d89f0	                             mov r8, r14	      1253	fold.c	FUNCTION_40	CALL_2
0x4003a5a	          0x4489e1	                           mov ecx, r12d	      1253	fold.c	FUNCTION_40	CALL_2
0x4003a5d	            0x89ea	                            mov edx, ebp	      1253	fold.c	FUNCTION_40	CALL_2
0x4003a5f	          0x4c89ee	                            mov rsi, r13	      1253	fold.c	FUNCTION_40	CALL_2
0x4003a62	              0x5d	                                 pop rbp	      1254	fold.c	FUNCTION_40
0x4003a63	            0x415c	                                 pop r12	      1254	fold.c	FUNCTION_40
0x4003a65	            0x415d	                                 pop r13	      1254	fold.c	FUNCTION_40
0x4003a67	            0x415e	                                 pop r14	      1254	fold.c	FUNCTION_40
0x4003a69	      0xe9d2fcffff	                jmp sym.setManualFoldWin	      1253	fold.c	FUNCTION_40	CALL_2
0x4003a6e	            0x6690	                                     nop	      1253	fold.c	FUNCTION_40	CALL_2
0x4003a70	    0x8b9788020000	           mov edx, dword [rdi + 0x288] 	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x4003a76	            0x85d2	                           test edx, edx	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x4003a78	            0x74dc	                            je 0x4003a56	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x4003a7a	    0x488b1d000000	            mov rbx, qword [0x04003a81] 	      1241	fold.c	FUNCTION_40	IF_1
0x4003a81	          0x4885db	                           test rbx, rbx	      1241	fold.c	FUNCTION_40	IF_1
0x4003a84	            0x7513	                           jne 0x4003a99	      1241	fold.c	FUNCTION_40	IF_1
0x4003a86	            0xebce	                           jmp 0x4003a56	      1241	fold.c	FUNCTION_40	IF_1
0x4003a88	     0xf1f84000000	                   nop dword [rax + rax]	      1241	fold.c	FUNCTION_40	IF_1
0x4003a90	        0x488b5b20	            mov rbx, qword [rbx + 0x20] 	      1241	fold.c	FUNCTION_40	IF_1
0x4003a94	          0x4885db	                           test rbx, rbx	      1241	fold.c	FUNCTION_40	IF_1
0x4003a97	            0x74bd	                            je 0x4003a56	      1241	fold.c	FUNCTION_40	IF_1
0x4003a99	          0x4839fb	                            cmp rbx, rdi	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x4003a9c	            0x74f2	                            je 0x4003a90	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x4003a9e	    0x488b83f80100	           mov rax, qword [rbx + 0x1f8] 	       357	fold.c	FUNCTION_13
0x4003aa5	          0x803864	                    cmp byte [rax], 0x64	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x4003aa8	            0x75e6	                           jne 0x4003a90	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x4003aaa	    0x8b8388020000	           mov eax, dword [rbx + 0x288] 	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x4003ab0	            0x85c0	                           test eax, eax	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x4003ab2	            0x74dc	                            je 0x4003a90	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x4003ab4	        0x488b7f38	            mov rdi, qword [rdi + 0x38] 	      1245	fold.c	FUNCTION_40	FUNCTION_1	CALL_2
0x4003ab8	          0x4889de	                            mov rsi, rbx	      1245	fold.c	FUNCTION_40	FUNCTION_1	CALL_2
0x4003abb	      0xe800000000	                          call 0x4003ac0	      1245	fold.c	FUNCTION_40	FUNCTION_1	CALL_2
0x4003ac0	          0x4885c0	                           test rax, rax	      1246	fold.c	FUNCTION_40	FUNCTION_1	IF_2
0x4003ac3	            0x750b	                           jne 0x4003ad0	      1246	fold.c	FUNCTION_40	FUNCTION_1	IF_2
0x4003ac5	    0x488b3d000000	            mov rdi, qword [0x04003acc] 	      1246	fold.c	FUNCTION_40	FUNCTION_1	IF_2
0x4003acc	            0xebc2	                           jmp 0x4003a90	      1246	fold.c	FUNCTION_40	FUNCTION_1	IF_2
0x4003ace	            0x6690	                                     nop	      1246	fold.c	FUNCTION_40	FUNCTION_1	IF_2
0x4003ad0	          0x4531c0	                            xor r8d, r8d	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x4003ad3	          0x4489e1	                           mov ecx, r12d	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x4003ad6	            0x89ea	                            mov edx, ebp	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x4003ad8	          0x4889c6	                            mov rsi, rax	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x4003adb	          0x4889df	                            mov rdi, rbx	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x4003ade	      0xe85dfcffff	               call sym.setManualFoldWin	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x4003ae3	            0xebe0	                           jmp 0x4003ac5	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
get_foldtext	FOR,1:functions,0:IF,14:ELSE,2:CALL,14:DO,0:SWITCH,0:WHILE,0	209
0x4004a40	            0x4157	                                push r15	      1878	fold.c	FUNCTION_56
0x4004a42	            0x4156	                                push r14	      1878	fold.c	FUNCTION_56
0x4004a44	          0x4d89c6	                             mov r14, r8	      1878	fold.c	FUNCTION_56
0x4004a47	            0x4155	                                push r13	      1878	fold.c	FUNCTION_56
0x4004a49	            0x4154	                                push r12	      1878	fold.c	FUNCTION_56
0x4004a4b	          0x4989f5	                            mov r13, rsi	      1878	fold.c	FUNCTION_56
0x4004a4e	              0x55	                                push rbp	      1878	fold.c	FUNCTION_56
0x4004a4f	              0x53	                                push rbx	      1878	fold.c	FUNCTION_56
0x4004a50	          0x4989d4	                            mov r12, rdx	      1878	fold.c	FUNCTION_56
0x4004a53	          0x4889fb	                            mov rbx, rdi	      1878	fold.c	FUNCTION_56
0x4004a56	        0x4883ec38	                           sub rsp, 0x38	      1878	fold.c	FUNCTION_56
0x4004a5a	    0x448b3d000000	           mov r15d, dword [0x04004a61] 	      1883	fold.c	FUNCTION_56
0x4004a61	    0x64488b042528	                mov rax, qword fs:[0x28]	      1878	fold.c	FUNCTION_56
0x4004a6a	      0x4889442428	             mov qword [rsp + 0x28], rax	      1878	fold.c	FUNCTION_56
0x4004a6f	            0x31c0	                            xor eax, eax	      1878	fold.c	FUNCTION_56
0x4004a71	    0x488b05000000	            mov rax, qword [0x04004a78] 	      1887	fold.c	FUNCTION_56	IF_1
0x4004a78	          0x4839f8	                            cmp rax, rdi	      1887	fold.c	FUNCTION_56	IF_1
0x4004a7b	            0x752b	                           jne 0x4004aa8	      1887	fold.c	FUNCTION_56	IF_1
0x4004a7d	          0x4885c0	                           test rax, rax	      1887	fold.c	FUNCTION_56	IF_1
0x4004a80	            0x7426	                            je 0x4004aa8	      1887	fold.c	FUNCTION_56	IF_1
0x4004a82	    0x488b05000000	            mov rax, qword [0x04004a89] 	      1888	fold.c	FUNCTION_56	IF_1
0x4004a89	          0x4839f0	                            cmp rax, rsi	      1888	fold.c	FUNCTION_56	IF_1
0x4004a8c	            0x7f1a	                            jg 0x4004aa8	      1888	fold.c	FUNCTION_56	IF_1
0x4004a8e	          0x4885c0	                           test rax, rax	      1888	fold.c	FUNCTION_56	IF_1
0x4004a91	            0x7415	                            je 0x4004aa8	      1888	fold.c	FUNCTION_56	IF_1
0x4004a93	    0x448b0d000000	            mov r9d, dword [0x04004a9a] 	      1892	fold.c	FUNCTION_56	IF_2
0x4004a9a	          0x4585c9	                           test r9d, r9d	      1892	fold.c	FUNCTION_56	IF_2
0x4004a9d	            0x751d	                           jne 0x4004abc	      1892	fold.c	FUNCTION_56	IF_2
0x4004a9f	            0xeb11	                           jmp 0x4004ab2	      1892	fold.c	FUNCTION_56	IF_2
0x4004aa1	     0xf1f80000000	                         nop dword [rax]	      1892	fold.c	FUNCTION_56	IF_2
0x4004aa8	    0xc70500000000	               mov dword [0x04004ab2], 0	      1890	fold.c	FUNCTION_56	IF_1
0x4004ab2	    0xc70500000000	               mov dword [0x04004abc], 0	      1894	fold.c	FUNCTION_56	IF_2
0x4004abc	    0x488b83200200	           mov rax, qword [rbx + 0x220] 	      1896	fold.c	FUNCTION_56	IF_3
0x4004ac3	          0x803800	                       cmp byte [rax], 0	      1896	fold.c	FUNCTION_56	IF_3
0x4004ac6	            0x7568	                           jne 0x4004b30	      1896	fold.c	FUNCTION_56	IF_3
0x4004ac8	          0x4d29ec	                            sub r12, r13	      1975	fold.c	FUNCTION_56	IF_14
0x4004acb	    0x41b805000000	                              mov r8d, 5	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x4004ad1	      0xba00000000	                              mov edx, 0	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x4004ad6	        0x4983c401	                              add r12, 1	      1975	fold.c	FUNCTION_56	IF_14
0x4004ada	      0xbe00000000	                              mov esi, 0	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x4004adf	            0x31ff	                            xor edi, edi	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x4004ae1	          0x4c89e1	                            mov rcx, r12	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x4004ae4	          0x4c89f5	                            mov rbp, r14	      1981	fold.c	FUNCTION_56	IF_14
0x4004ae7	      0xe800000000	                          call 0x4004aec	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x4004aec	          0x4c89e1	                            mov rcx, r12	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x4004aef	          0x4889c2	                            mov rdx, rax	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x4004af2	      0xbe33000000	                           mov esi, 0x33	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x4004af7	          0x4c89f7	                            mov rdi, r14	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x4004afa	            0x31c0	                            xor eax, eax	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x4004afc	      0xe800000000	                          call 0x4004b01	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x4004b01	      0x488b542428	            mov rdx, qword [rsp + 0x28] 	      1984	fold.c	FUNCTION_56
0x4004b06	    0x644833142528	                xor rdx, qword fs:[0x28]	      1984	fold.c	FUNCTION_56
0x4004b0f	          0x4889e8	                            mov rax, rbp	      1984	fold.c	FUNCTION_56
0x4004b12	     0xf85a0020000	                           jne 0x4004db8	      1984	fold.c	FUNCTION_56
0x4004b18	        0x4883c438	                           add rsp, 0x38	      1984	fold.c	FUNCTION_56
0x4004b1c	              0x5b	                                 pop rbx	      1984	fold.c	FUNCTION_56
0x4004b1d	              0x5d	                                 pop rbp	      1984	fold.c	FUNCTION_56
0x4004b1e	            0x415c	                                 pop r12	      1984	fold.c	FUNCTION_56
0x4004b20	            0x415d	                                 pop r13	      1984	fold.c	FUNCTION_56
0x4004b22	            0x415e	                                 pop r14	      1984	fold.c	FUNCTION_56
0x4004b24	            0x415f	                                 pop r15	      1984	fold.c	FUNCTION_56
0x4004b26	              0xc3	                                     ret	      1984	fold.c	FUNCTION_56
0x4004b27	    0x660f1f840000	                    nop word [rax + rax]	      1984	fold.c	FUNCTION_56
0x4004b30	          0x4c89ee	                            mov rsi, r13	      1904	fold.c	FUNCTION_56	IF_3	CALL_1
0x4004b33	      0xbf16000000	                           mov edi, 0x16	      1904	fold.c	FUNCTION_56	IF_3	CALL_1
0x4004b38	      0x48894c2408	                mov qword [rsp + 8], rcx	      1904	fold.c	FUNCTION_56	IF_3	CALL_1
0x4004b3d	      0xe800000000	                          call 0x4004b42	      1904	fold.c	FUNCTION_56	IF_3	CALL_1
0x4004b42	          0x4c89e6	                            mov rsi, r12	      1905	fold.c	FUNCTION_56	IF_3	CALL_2
0x4004b45	      0xbf17000000	                           mov edi, 0x17	      1905	fold.c	FUNCTION_56	IF_3	CALL_2
0x4004b4a	      0xbd15000000	                           mov ebp, 0x15	      1905	fold.c	FUNCTION_56	IF_3	CALL_2
0x4004b4f	      0xe800000000	                          call 0x4004b54	      1905	fold.c	FUNCTION_56	IF_3	CALL_2
0x4004b54	      0x488b4c2408	                mov rcx, qword [rsp + 8]	      1909	fold.c	FUNCTION_56	IF_3
0x4004b59	      0x488d7c2410	                   lea rdi, [rsp + 0x10]	        90	string3.h	FUNCTION_80	CALL_6
0x4004b5e	      0xbe2d000000	                           mov esi, 0x2d	        90	string3.h	FUNCTION_80	CALL_6
0x4004b63	          0x486301	                 movsxd rax, dword [rcx]	      1909	fold.c	FUNCTION_56	IF_3
0x4004b66	      0xb916000000	                           mov ecx, 0x16	        90	string3.h	FUNCTION_80	CALL_6
0x4004b6b	          0x83f815	                           cmp eax, 0x15	        90	string3.h	FUNCTION_80	CALL_6
0x4004b6e	        0x480f4ee8	                         cmovle rbp, rax	        90	string3.h	FUNCTION_80	CALL_6
0x4004b72	          0x4889ea	                            mov rdx, rbp	        90	string3.h	FUNCTION_80	CALL_6
0x4004b75	      0xe800000000	                          call 0x4004b7a	        90	string3.h	FUNCTION_80	CALL_6
0x4004b7a	      0x488d742410	                   lea rsi, [rsp + 0x10]	      1914	fold.c	FUNCTION_56	IF_3	CALL_4
0x4004b7f	      0xbaffffffff	                     mov edx, 0xffffffff	      1914	fold.c	FUNCTION_56	IF_3	CALL_4
0x4004b84	      0xbf18000000	                           mov edi, 0x18	      1914	fold.c	FUNCTION_56	IF_3	CALL_4
0x4004b89	      0xc6442c1000	          mov byte [rsp + rbp + 0x10], 0	      1913	fold.c	FUNCTION_56	IF_3
0x4004b8e	      0xe800000000	                          call 0x4004b93	      1914	fold.c	FUNCTION_56	IF_3	CALL_4
0x4004b93	          0x4889ee	                            mov rsi, rbp	      1915	fold.c	FUNCTION_56	IF_3	CALL_5
0x4004b96	      0xbf19000000	                           mov edi, 0x19	      1915	fold.c	FUNCTION_56	IF_3	CALL_5
0x4004b9b	      0xe800000000	                          call 0x4004ba0	      1915	fold.c	FUNCTION_56	IF_3	CALL_5
0x4004ba0	    0x448b05000000	            mov r8d, dword [0x04004ba7] 	      1918	fold.c	FUNCTION_56	IF_3	IF_5
0x4004ba7	          0x4585c0	                           test r8d, r8d	      1918	fold.c	FUNCTION_56	IF_3	IF_5
0x4004baa	     0xf84f8000000	                            je 0x4004ca8	      1918	fold.c	FUNCTION_56	IF_3	IF_5
0x4004bb0	      0xbaffffffff	                     mov edx, 0xffffffff	      1937	fold.c	FUNCTION_56	IF_3	CALL_8
0x4004bb5	            0x31f6	                            xor esi, esi	      1937	fold.c	FUNCTION_56	IF_3	CALL_8
0x4004bb7	      0xbf18000000	                           mov edi, 0x18	      1937	fold.c	FUNCTION_56	IF_3	CALL_8
0x4004bbc	    0x4c892d000000	            mov qword [0x04004bc3], r13 	      1935	fold.c	FUNCTION_56	IF_3
0x4004bc3	    0x48891d000000	            mov qword [0x04004bca], rbx 	      1936	fold.c	FUNCTION_56	IF_3
0x4004bca	      0xe800000000	                          call 0x4004bcf	      1937	fold.c	FUNCTION_56	IF_3	CALL_8
0x4004bcf	    0x8b1500000000	            mov edx, dword [0x04004bd5] 	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x4004bd5	            0x85d2	                           test edx, edx	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x4004bd7	     0xf85ebfeffff	                           jne 0x4004ac8	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x4004bdd	          0x4585ff	                         test r15d, r15d	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x4004be0	     0xf84e2feffff	                            je 0x4004ac8	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x4004be6	            0x31ed	                            xor ebp, ebp	      1879	fold.c	FUNCTION_56
0x4004be8	    0x44893d000000	           mov dword [0x04004bef], r15d 	      1940	fold.c	FUNCTION_56	IF_3	IF_7
0x4004bef	          0x4885ed	                           test rbp, rbp	      1942	fold.c	FUNCTION_56	IF_3	IF_8
0x4004bf2	     0xf84d0feffff	                            je 0x4004ac8	      1942	fold.c	FUNCTION_56	IF_3	IF_8
0x4004bf8	        0x807d0000	                       cmp byte [rbp], 0	      1946	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1
0x4004bfc	     0xf84fffeffff	                            je 0x4004b01	      1946	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1
0x4004c02	          0x4889eb	                            mov rbx, rbp	      1946	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1
0x4004c05	            0xeb1d	                           jmp 0x4004c24	      1946	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1
0x4004c07	    0x660f1f840000	                    nop word [rax + rax]	      1946	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1
0x4004c10	          0xc60320	                    mov byte [rbx], 0x20	      1960	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_1	IF_11
0x4004c13	          0x4889d8	                            mov rax, rbx	      1960	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_1	IF_11
0x4004c16	        0x80780100	                   cmp byte [rax + 1], 0	      1946	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1
0x4004c1a	        0x488d5801	                      lea rbx, [rax + 1]	      1946	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1
0x4004c1e	     0xf84ddfeffff	                            je 0x4004b01	      1946	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1
0x4004c24	    0x8b0d00000000	            mov ecx, dword [0x04004c2a] 	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x4004c2a	            0x85c9	                           test ecx, ecx	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x4004c2c	            0x751a	                           jne 0x4004c48	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x4004c2e	          0x803b09	                       cmp byte [rbx], 9	      1959	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_1	IF_11
0x4004c31	            0x74dd	                            je 0x4004c10	      1959	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_1	IF_11
0x4004c33	          0x4889df	                            mov rdi, rbx	      1961	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_2	IF_12	CALL_10
0x4004c36	      0xe800000000	                          call 0x4004c3b	      1961	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_2	IF_12	CALL_10
0x4004c3b	          0x83f801	                              cmp eax, 1	      1961	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_2	IF_12	CALL_10
0x4004c3e	            0x7f38	                            jg 0x4004c78	      1961	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_2	IF_12	CALL_10
0x4004c40	          0x4889d8	                            mov rax, rbx	      1961	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_2	IF_12	CALL_10
0x4004c43	            0xebd1	                           jmp 0x4004c16	      1961	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_2	IF_12	CALL_10
0x4004c45	           0xf1f00	                         nop dword [rax]	      1961	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_2	IF_12	CALL_10
0x4004c48	          0x4889df	                            mov rdi, rbx	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x4004c4b	    0xff1500000000	                 call qword [0x04004c51]	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x4004c51	          0x4c63f8	                         movsxd r15, eax	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x4004c54	        0x4183ff01	                             cmp r15d, 1	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x4004c58	            0x7ed4	                           jle 0x4004c2e	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x4004c5a	          0x4889df	                            mov rdi, rbx	      1953	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9	IF_10	CALL_9
0x4004c5d	    0xff1500000000	                 call qword [0x04004c63]	      1953	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9	IF_10	CALL_9
0x4004c63	            0x89c7	                            mov edi, eax	      1953	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9	IF_10	CALL_9
0x4004c65	      0xe800000000	                          call 0x4004c6a	      1953	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9	IF_10	CALL_9
0x4004c6a	            0x85c0	                           test eax, eax	      1953	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9	IF_10	CALL_9
0x4004c6c	            0x740a	                            je 0x4004c78	      1953	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9	IF_10	CALL_9
0x4004c6e	      0x4a8d443bff	                lea rax, [rbx + r15 - 1]	      1955	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x4004c73	            0xeba1	                           jmp 0x4004c16	      1955	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x4004c75	           0xf1f00	                         nop dword [rax]	      1955	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x4004c78	          0x803b00	                       cmp byte [rbx], 0	      1964	fold.c	FUNCTION_56	IF_3	IF_8	IF_13
0x4004c7b	     0xf8480feffff	                            je 0x4004b01	      1964	fold.c	FUNCTION_56	IF_3	IF_8	IF_13
0x4004c81	          0x4889ef	                            mov rdi, rbp	      1966	fold.c	FUNCTION_56	IF_3	IF_8	IF_13	CALL_11
0x4004c84	      0xe800000000	                          call 0x4004c89	      1966	fold.c	FUNCTION_56	IF_3	IF_8	IF_13	CALL_11
0x4004c89	          0x4889ef	                            mov rdi, rbp	      1967	fold.c	FUNCTION_56	IF_3	IF_8	IF_13	CALL_12
0x4004c8c	          0x4889c3	                            mov rbx, rax	      1966	fold.c	FUNCTION_56	IF_3	IF_8	IF_13	CALL_11
0x4004c8f	      0xe800000000	                          call 0x4004c94	      1967	fold.c	FUNCTION_56	IF_3	IF_8	IF_13	CALL_12
0x4004c94	          0x4885db	                           test rbx, rbx	      1972	fold.c	FUNCTION_56	IF_14
0x4004c97	     0xf842bfeffff	                            je 0x4004ac8	      1972	fold.c	FUNCTION_56	IF_14
0x4004c9d	          0x4889dd	                            mov rbp, rbx	      1972	fold.c	FUNCTION_56	IF_14
0x4004ca0	      0xe95cfeffff	                           jmp 0x4004b01	      1972	fold.c	FUNCTION_56	IF_14
0x4004ca5	           0xf1f00	                         nop dword [rax]	      1972	fold.c	FUNCTION_56	IF_14
0x4004ca8	    0x488b0d000000	            mov rcx, qword [0x04004caf] 	      1920	fold.c	FUNCTION_56	IF_3	IF_5
0x4004caf	        0x488b4308	                mov rax, qword [rbx + 8]	      1922	fold.c	FUNCTION_56	IF_3	IF_5
0x4004cb3	      0xbe04000000	                              mov esi, 4	      1925	fold.c	FUNCTION_56	IF_3	IF_5	CALL_6
0x4004cb8	      0xbf00000000	                              mov edi, 0	      1925	fold.c	FUNCTION_56	IF_3	IF_5	CALL_6
0x4004cbd	    0x830500000000	               add dword [0x04004cc4], 1	      1924	fold.c	FUNCTION_56	IF_3	IF_5
0x4004cc4	    0x48891d000000	            mov qword [0x04004ccb], rbx 	      1921	fold.c	FUNCTION_56	IF_3	IF_5
0x4004ccb	      0x48894c2408	                mov qword [rsp + 8], rcx	      1920	fold.c	FUNCTION_56	IF_3	IF_5
0x4004cd0	    0x488905000000	            mov qword [0x04004cd7], rax 	      1922	fold.c	FUNCTION_56	IF_3	IF_5
0x4004cd7	      0xe800000000	                          call 0x4004cdc	      1925	fold.c	FUNCTION_56	IF_3	IF_5	CALL_6
0x4004cdc	    0x488bbb200200	           mov rdi, qword [rbx + 0x220] 	      1925	fold.c	FUNCTION_56	IF_3	IF_5	CALL_6
0x4004ce3	            0x31f6	                            xor esi, esi	      1925	fold.c	FUNCTION_56	IF_3	IF_5	CALL_6
0x4004ce5	            0x89c2	                            mov edx, eax	      1925	fold.c	FUNCTION_56	IF_3	IF_5	CALL_6
0x4004ce7	      0xe800000000	                          call 0x4004cec	      1925	fold.c	FUNCTION_56	IF_3	IF_5	CALL_6
0x4004cec	    0x832d00000000	               sub dword [0x04004cf3], 1	      1927	fold.c	FUNCTION_56	IF_3	IF_5
0x4004cf3	          0x4885c0	                           test rax, rax	      1929	fold.c	FUNCTION_56	IF_3	IF_5	IF_6
0x4004cf6	          0x4889c5	                            mov rbp, rax	      1925	fold.c	FUNCTION_56	IF_3	IF_5	CALL_6
0x4004cf9	      0x488b4c2408	                mov rcx, qword [rsp + 8]	      1929	fold.c	FUNCTION_56	IF_3	IF_5	IF_6
0x4004cfe	            0x740a	                            je 0x4004d0a	      1929	fold.c	FUNCTION_56	IF_3	IF_5	IF_6
0x4004d00	    0x8b3d00000000	            mov edi, dword [0x04004d06] 	      1929	fold.c	FUNCTION_56	IF_3	IF_5	IF_6
0x4004d06	            0x85ff	                           test edi, edi	      1929	fold.c	FUNCTION_56	IF_3	IF_5	IF_6
0x4004d08	            0x745e	                            je 0x4004d68	      1929	fold.c	FUNCTION_56	IF_3	IF_5	IF_6
0x4004d0a	        0x488b4108	                mov rax, qword [rcx + 8]	      1933	fold.c	FUNCTION_56	IF_3	IF_5
0x4004d0e	            0x31f6	                            xor esi, esi	      1937	fold.c	FUNCTION_56	IF_3	CALL_8
0x4004d10	      0xbaffffffff	                     mov edx, 0xffffffff	      1937	fold.c	FUNCTION_56	IF_3	CALL_8
0x4004d15	      0xbf18000000	                           mov edi, 0x18	      1937	fold.c	FUNCTION_56	IF_3	CALL_8
0x4004d1a	    0xc70500000000	               mov dword [0x04004d24], 1	      1930	fold.c	FUNCTION_56	IF_3	IF_5	IF_6
0x4004d24	    0x48890d000000	            mov qword [0x04004d2b], rcx 	      1932	fold.c	FUNCTION_56	IF_3	IF_5
0x4004d2b	    0x4c892d000000	            mov qword [0x04004d32], r13 	      1935	fold.c	FUNCTION_56	IF_3
0x4004d32	    0x48891d000000	            mov qword [0x04004d39], rbx 	      1936	fold.c	FUNCTION_56	IF_3
0x4004d39	    0x488905000000	            mov qword [0x04004d40], rax 	      1933	fold.c	FUNCTION_56	IF_3	IF_5
0x4004d40	      0xe800000000	                          call 0x4004d45	      1937	fold.c	FUNCTION_56	IF_3	CALL_8
0x4004d45	    0x8b3500000000	            mov esi, dword [0x04004d4b] 	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x4004d4b	            0x85f6	                           test esi, esi	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x4004d4d	     0xf859cfeffff	                           jne 0x4004bef	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x4004d53	          0x4585ff	                         test r15d, r15d	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x4004d56	     0xf8493feffff	                            je 0x4004bef	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x4004d5c	      0xe987feffff	                           jmp 0x4004be8	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x4004d61	     0xf1f80000000	                         nop dword [rax]	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x4004d68	        0x488b4108	                mov rax, qword [rcx + 8]	      1933	fold.c	FUNCTION_56	IF_3	IF_5
0x4004d6c	            0x31f6	                            xor esi, esi	      1937	fold.c	FUNCTION_56	IF_3	CALL_8
0x4004d6e	      0xbaffffffff	                     mov edx, 0xffffffff	      1937	fold.c	FUNCTION_56	IF_3	CALL_8
0x4004d73	      0xbf18000000	                           mov edi, 0x18	      1937	fold.c	FUNCTION_56	IF_3	CALL_8
0x4004d78	    0x48890d000000	            mov qword [0x04004d7f], rcx 	      1932	fold.c	FUNCTION_56	IF_3	IF_5
0x4004d7f	    0x4c892d000000	            mov qword [0x04004d86], r13 	      1935	fold.c	FUNCTION_56	IF_3
0x4004d86	    0x48891d000000	            mov qword [0x04004d8d], rbx 	      1936	fold.c	FUNCTION_56	IF_3
0x4004d8d	    0x488905000000	            mov qword [0x04004d94], rax 	      1933	fold.c	FUNCTION_56	IF_3	IF_5
0x4004d94	      0xe800000000	                          call 0x4004d99	      1937	fold.c	FUNCTION_56	IF_3	CALL_8
0x4004d99	    0x8b0500000000	            mov eax, dword [0x04004d9f] 	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x4004d9f	            0x85c0	                           test eax, eax	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x4004da1	     0xf8551feffff	                           jne 0x4004bf8	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x4004da7	          0x4585ff	                         test r15d, r15d	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x4004daa	     0xf8538feffff	                           jne 0x4004be8	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x4004db0	      0xe943feffff	                           jmp 0x4004bf8	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x4004db5	           0xf1f00	                         nop dword [rax]	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x4004db8	      0xe800000000	                          call 0x4004dbd	      1984	fold.c	FUNCTION_56
openFold	FOR,0:functions,0:IF,0:ELSE,0:CALL,1:DO,0:SWITCH,0:WHILE,0	2
0x4003ba0	      0xba01000000	                              mov edx, 1	       426	fold.c	FUNCTION_17	CALL_1
0x4003ba5	      0xe946ffffff	                   jmp sym.setFoldRepeat	       426	fold.c	FUNCTION_17	CALL_1
foldMarkAdjust	FOR,0:functions,0:IF,2:ELSE,0:CALL,1:DO,0:SWITCH,0:WHILE,0	25
0x40049a0	    0x4881f9ffffff	                     cmp rcx, 0x7fffffff	      1475	fold.c	FUNCTION_45	IF_1
0x40049a7	            0x7516	                           jne 0x40049bf	      1475	fold.c	FUNCTION_45	IF_1
0x40049a9	          0x4839f2	                            cmp rdx, rsi	      1475	fold.c	FUNCTION_45	IF_1
0x40049ac	            0x7c11	                            jl 0x40049bf	      1475	fold.c	FUNCTION_45	IF_1
0x40049ae	          0x4989d1	                             mov r9, rdx	      1475	fold.c	FUNCTION_45	IF_1
0x40049b1	          0x4c89c0	                             mov rax, r8	      1475	fold.c	FUNCTION_45	IF_1
0x40049b4	          0x4929f1	                             sub r9, rsi	      1475	fold.c	FUNCTION_45	IF_1
0x40049b7	          0x48f7d8	                                 neg rax	      1475	fold.c	FUNCTION_45	IF_1
0x40049ba	          0x4939c1	                             cmp r9, rax	      1475	fold.c	FUNCTION_45	IF_1
0x40049bd	            0x7d31	                           jge 0x40049f0	      1475	fold.c	FUNCTION_45	IF_1
0x40049bf	    0xf60500000000	           test byte [0x040049c6], 0x10 	      1479	fold.c	FUNCTION_45	IF_2
0x40049c6	            0x7416	                            je 0x40049de	      1479	fold.c	FUNCTION_45	IF_2
0x40049c8	        0x4883f901	                              cmp rcx, 1	      1479	fold.c	FUNCTION_45	IF_2
0x40049cc	            0x7510	                           jne 0x40049de	      1479	fold.c	FUNCTION_45	IF_2
0x40049ce	    0x4881faffffff	                     cmp rdx, 0x7fffffff	      1479	fold.c	FUNCTION_45	IF_2
0x40049d5	           0xf94c0	                                 sete al	      1479	fold.c	FUNCTION_45	IF_2
0x40049d8	            0x3c01	                               cmp al, 1	      1480	fold.c	FUNCTION_45	IF_2
0x40049da	        0x4883d6ff	             adc rsi, 0xffffffffffffffff	      1480	fold.c	FUNCTION_45	IF_2
0x40049de	    0x4881c7080100	                          add rdi, 0x108	      1481	fold.c	FUNCTION_45	CALL_1
0x40049e5	      0xe986ccffff	           jmp sym.foldMarkAdjustRecurse	      1481	fold.c	FUNCTION_45	CALL_1
0x40049ea	    0x660f1f440000	                    nop word [rax + rax]	      1481	fold.c	FUNCTION_45	CALL_1
0x40049f0	          0x4889f2	                            mov rdx, rsi	      1476	fold.c	FUNCTION_45	IF_1
0x40049f3	          0x4c29c2	                             sub rdx, r8	      1476	fold.c	FUNCTION_45	IF_1
0x40049f6	        0x4883ea01	                              sub rdx, 1	      1476	fold.c	FUNCTION_45	IF_1
0x40049fa	            0xebc3	                           jmp 0x40049bf	      1476	fold.c	FUNCTION_45	IF_1
foldCreate	FOR,3:functions,0:IF,15:ELSE,2:CALL,11:DO,0:SWITCH,0:WHILE,0	280
0x4003f20	            0x4157	                                push r15	       576	fold.c	FUNCTION_25
0x4003f22	            0x4156	                                push r14	       576	fold.c	FUNCTION_25
0x4003f24	          0x4889f8	                            mov rax, rdi	       576	fold.c	FUNCTION_25
0x4003f27	            0x4155	                                push r13	       576	fold.c	FUNCTION_25
0x4003f29	            0x4154	                                push r12	       576	fold.c	FUNCTION_25
0x4003f2b	          0x4989f4	                            mov r12, rsi	       576	fold.c	FUNCTION_25
0x4003f2e	              0x55	                                push rbp	       576	fold.c	FUNCTION_25
0x4003f2f	              0x53	                                push rbx	       576	fold.c	FUNCTION_25
0x4003f30	        0x4883ec58	                           sub rsp, 0x58	       576	fold.c	FUNCTION_25
0x4003f34	      0x48897c2408	                mov qword [rsp + 8], rdi	       576	fold.c	FUNCTION_25
0x4003f39	    0x64488b3c2528	                mov rdi, qword fs:[0x28]	       576	fold.c	FUNCTION_25
0x4003f42	      0x48897c2448	             mov qword [rsp + 0x48], rdi	       576	fold.c	FUNCTION_25
0x4003f47	            0x31ff	                            xor edi, edi	       576	fold.c	FUNCTION_25
0x4003f49	          0x4839f0	                            cmp rax, rsi	       588	fold.c	FUNCTION_25	IF_1
0x4003f4c	            0x7e08	                           jle 0x4003f56	       588	fold.c	FUNCTION_25	IF_1
0x4003f4e	      0x4889742408	                mov qword [rsp + 8], rsi	       588	fold.c	FUNCTION_25	IF_1
0x4003f53	          0x4989c4	                            mov r12, rax	       588	fold.c	FUNCTION_25	IF_1
0x4003f56	    0x488b3d000000	            mov rdi, qword [0x04003f5d] 	       598	fold.c	FUNCTION_25	IF_2	CALL_1
0x4003f5d	    0x488b87f80100	           mov rax, qword [rdi + 0x1f8] 	       337	fold.c	FUNCTION_11
0x4003f64	        0x80780272	                cmp byte [rax + 2], 0x72	       598	fold.c	FUNCTION_25	IF_2	CALL_1
0x4003f68	     0xf8486020000	                            je 0x40041f4	       598	fold.c	FUNCTION_25	IF_2	CALL_1
0x4003f6e	    0x80bf21010000	               cmp byte [rdi + 0x121], 0	      1187	fold.c	FUNCTION_38	IF_1
0x4003f75	     0xf851f010000	                           jne 0x400409a	      1187	fold.c	FUNCTION_38	IF_1
0x4003f7b	      0x488b6c2408	                mov rbp, qword [rsp + 8]	       607	fold.c	FUNCTION_25
0x4003f80	    0x4c8daf080100	                  lea r13, [rdi + 0x108]	       607	fold.c	FUNCTION_25
0x4003f87	          0x4531d2	                          xor r10d, r10d	       607	fold.c	FUNCTION_25
0x4003f8a	          0x4531f6	                          xor r14d, r14d	       583	fold.c	FUNCTION_25
0x4003f8d	          0x4531ff	                          xor r15d, r15d	       582	fold.c	FUNCTION_25
0x4003f90	    0x41bb01000000	                             mov r11d, 1	       620	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5
0x4003f96	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       620	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5
0x4003fa0	        0x418b4500	                    mov eax, dword [r13]	      1132	fold.c	FUNCTION_36
0x4003fa4	          0x4589d0	                           mov r8d, r10d	      1132	fold.c	FUNCTION_36
0x4003fa7	        0x4d8b4d10	              mov r9, qword [r13 + 0x10]	      1132	fold.c	FUNCTION_36
0x4003fab	          0x8d48ff	                      lea ecx, [rax - 1]	      1132	fold.c	FUNCTION_36
0x4003fae	          0x4863c9	                         movsxd rcx, ecx	      1132	fold.c	FUNCTION_36
0x4003fb1	          0x4885c9	                           test rcx, rcx	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003fb4	     0xf88d9000000	                            js 0x4004093	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003fba	            0x31d2	                            xor edx, edx	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003fbc	            0xeb0d	                           jmp 0x4003fcb	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003fbe	            0x6690	                                     nop	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003fc0	          0x83e801	                              sub eax, 1	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4003fc3	          0x4863c8	                         movsxd rcx, eax	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4003fc6	          0x4839ca	                            cmp rdx, rcx	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003fc9	            0x7f31	                            jg 0x4003ffc	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003fcb	        0x488d0411	                    lea rax, [rcx + rdx]	      1135	fold.c	FUNCTION_36	WHILE_1
0x4003fcf	          0x48d1f8	                              sar rax, 1	      1135	fold.c	FUNCTION_36	WHILE_1
0x4003fd2	        0x488d1c40	                  lea rbx, [rax + rax*2]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4003fd6	        0x48c1e304	                              shl rbx, 4	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4003fda	          0x4c01cb	                             add rbx, r9	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4003fdd	          0x488b33	                    mov rsi, qword [rbx]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4003fe0	          0x4839f5	                            cmp rbp, rsi	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4003fe3	            0x7cdb	                            jl 0x4003fc0	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4003fe5	          0x4889f2	                            mov rdx, rsi	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4003fe8	        0x48035308	                add rdx, qword [rbx + 8]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4003fec	          0x4839d5	                            cmp rbp, rdx	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4003fef	            0x7c5f	                            jl 0x4004050	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4003ff1	          0x83c001	                              add eax, 1	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4003ff4	          0x4863d0	                         movsxd rdx, eax	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4003ff7	          0x4839ca	                            cmp rdx, rcx	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003ffa	            0x7ecf	                           jle 0x4003fcb	      1133	fold.c	FUNCTION_36	WHILE_1
0x4003ffc	        0x488d1c52	                  lea rbx, [rdx + rdx*2]	      1133	fold.c	FUNCTION_36	WHILE_1
0x4004000	        0x48c1e304	                              shl rbx, 4	      1133	fold.c	FUNCTION_36	WHILE_1
0x4004004	          0x4c01cb	                             add rbx, r9	      1149	fold.c	FUNCTION_36
0x4004007	      0xbe01000000	                              mov esi, 1	       637	fold.c	FUNCTION_25	IF_8	CALL_5
0x400400c	          0x4c89ef	                            mov rdi, r13	       637	fold.c	FUNCTION_25	IF_8	CALL_5
0x400400f	      0x4c894c2418	              mov qword [rsp + 0x18], r9	       637	fold.c	FUNCTION_25	IF_8	CALL_5
0x4004014	      0x4489442410	             mov dword [rsp + 0x10], r8d	       637	fold.c	FUNCTION_25	IF_8	CALL_5
0x4004019	      0xe800000000	                          call 0x400401e	       637	fold.c	FUNCTION_25	IF_8	CALL_5
0x400401e	          0x83f801	                              cmp eax, 1	       637	fold.c	FUNCTION_25	IF_8	CALL_5
0x4004021	      0x448b442410	            mov r8d, dword [rsp + 0x10] 	       637	fold.c	FUNCTION_25	IF_8	CALL_5
0x4004026	      0x4c8b4c2418	              mov r9, qword [rsp + 0x18]	       637	fold.c	FUNCTION_25	IF_8	CALL_5
0x400402b	            0x747e	                            je 0x40040ab	       637	fold.c	FUNCTION_25	IF_8	CALL_5
0x400402d	      0x488b442448	            mov rax, qword [rsp + 0x48] 	       691	fold.c	FUNCTION_25
0x4004032	    0x644833042528	                xor rax, qword fs:[0x28]	       691	fold.c	FUNCTION_25
0x400403b	     0xf8543030000	                           jne 0x4004384	       691	fold.c	FUNCTION_25
0x4004041	        0x4883c458	                           add rsp, 0x58	       691	fold.c	FUNCTION_25
0x4004045	              0x5b	                                 pop rbx	       691	fold.c	FUNCTION_25
0x4004046	              0x5d	                                 pop rbp	       691	fold.c	FUNCTION_25
0x4004047	            0x415c	                                 pop r12	       691	fold.c	FUNCTION_25
0x4004049	            0x415d	                                 pop r13	       691	fold.c	FUNCTION_25
0x400404b	            0x415e	                                 pop r14	       691	fold.c	FUNCTION_25
0x400404d	            0x415f	                                 pop r15	       691	fold.c	FUNCTION_25
0x400404f	              0xc3	                                     ret	       691	fold.c	FUNCTION_25
0x4004050	          0x4939d4	                            cmp r12, rdx	       612	fold.c	FUNCTION_25	FOR_1	IF_4
0x4004053	            0x7db2	                           jge 0x4004007	       612	fold.c	FUNCTION_25	FOR_1	IF_4
0x4004055	          0x4829f5	                            sub rbp, rsi	       616	fold.c	FUNCTION_25	FOR_1	IF_4
0x4004058	          0x4929f4	                            sub r12, rsi	       617	fold.c	FUNCTION_25	FOR_1	IF_4
0x400405b	          0x4585ff	                         test r15d, r15d	       618	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5
0x400405e	        0x4c8d6b10	                   lea r13, [rbx + 0x10]	       615	fold.c	FUNCTION_25	FOR_1	IF_4
0x4004062	            0x751c	                           jne 0x4004080	       618	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5
0x4004064	         0xfb64328	           movzx eax, byte [rbx + 0x28] 	       618	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5
0x4004068	            0x3c02	                               cmp al, 2	       618	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5
0x400406a	            0x7414	                            je 0x4004080	       618	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5
0x400406c	            0x3c01	                               cmp al, 1	       625	fold.c	FUNCTION_25	FOR_1	IF_4	ELSE_1	IF_7
0x400406e	        0x450f44f3	                        cmove r14d, r11d	       625	fold.c	FUNCTION_25	FOR_1	IF_4	ELSE_1	IF_7
0x4004072	        0x4983c201	                              add r10, 1	       625	fold.c	FUNCTION_25	FOR_1	IF_4	ELSE_1	IF_7
0x4004076	      0xe925ffffff	                           jmp 0x4003fa0	       634	fold.c	FUNCTION_25	FOR_1
0x400407b	       0xf1f440000	                   nop dword [rax + rax]	       634	fold.c	FUNCTION_25	FOR_1
0x4004080	    0x4c3b97e80100	           cmp r10, qword [rdi + 0x1e8] 	       620	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5
0x4004087	    0x41bf01000000	                             mov r15d, 1	       620	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5
0x400408d	        0x450f4df3	                       cmovge r14d, r11d	       620	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5
0x4004091	            0xebdf	                           jmp 0x4004072	       620	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5
0x4004093	            0x31db	                            xor ebx, ebx	      1133	fold.c	FUNCTION_36	WHILE_1
0x4004095	      0xe96affffff	                           jmp 0x4004004	      1133	fold.c	FUNCTION_36	WHILE_1
0x400409a	      0xe8d1f0ffff	            call sym.checkupdate.part.17	      1133	fold.c	FUNCTION_36	WHILE_1
0x400409f	    0x488b3d000000	            mov rdi, qword [0x040040a6] 	      1133	fold.c	FUNCTION_36	WHILE_1
0x40040a6	      0xe9d0feffff	                           jmp 0x4003f7b	      1133	fold.c	FUNCTION_36	WHILE_1
0x40040ab	          0x4889d8	                            mov rax, rbx	       636	fold.c	FUNCTION_25
0x40040ae	    0x48b9abaaaaaa	          movabs rcx, 0xaaaaaaaaaaaaaaab	       636	fold.c	FUNCTION_25
0x40040b8	      0x488d7c2430	                   lea rdi, [rsp + 0x30]	       640	fold.c	FUNCTION_25	IF_8	CALL_6
0x40040bd	          0x4c29c8	                             sub rax, r9	       636	fold.c	FUNCTION_25
0x40040c0	      0xba0a000000	                            mov edx, 0xa	       640	fold.c	FUNCTION_25	IF_8	CALL_6
0x40040c5	      0xbe30000000	                           mov esi, 0x30	       640	fold.c	FUNCTION_25	IF_8	CALL_6
0x40040ca	        0x48c1f804	                              sar rax, 4	       636	fold.c	FUNCTION_25
0x40040ce	      0x4489442424	             mov dword [rsp + 0x24], r8d	       636	fold.c	FUNCTION_25
0x40040d3	        0x480fafc8	                           imul rcx, rax	       636	fold.c	FUNCTION_25
0x40040d7	          0x4863c1	                         movsxd rax, ecx	       639	fold.c	FUNCTION_25	IF_8
0x40040da	        0x894c2418	             mov dword [rsp + 0x18], ecx	       636	fold.c	FUNCTION_25
0x40040de	      0x48894c2410	             mov qword [rsp + 0x10], rcx	       639	fold.c	FUNCTION_25	IF_8
0x40040e3	        0x4c8d0c40	                   lea r9, [rax + rax*2]	       639	fold.c	FUNCTION_25	IF_8
0x40040e7	        0x49c1e104	                               shl r9, 4	       639	fold.c	FUNCTION_25	IF_8
0x40040eb	          0x4c89cb	                             mov rbx, r9	       639	fold.c	FUNCTION_25	IF_8
0x40040ee	        0x49035d10	             add rbx, qword [r13 + 0x10]	       639	fold.c	FUNCTION_25	IF_8
0x40040f2	      0xe800000000	                          call 0x40040f7	       640	fold.c	FUNCTION_25	IF_8	CALL_6
0x40040f7	        0x418b4500	                    mov eax, dword [r13]	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x40040fb	      0x488b4c2410	            mov rcx, qword [rsp + 0x10] 	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x4004100	      0x4c63442424	          movsxd r8, dword [rsp + 0x24] 	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x4004105	            0x39c1	                            cmp ecx, eax	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x4004107	     0xf8d70020000	                           jge 0x400437d	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x400410d	          0x4c3b23	                    cmp r12, qword [rbx]	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x4004110	      0x4c635c2418	         movsxd r11, dword [rsp + 0x18] 	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x4004115	     0xf8c60010000	                            jl 0x400427b	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x400411b	        0x488d7b30	                   lea rdi, [rbx + 0x30]	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x400411f	            0x89ce	                            mov esi, ecx	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x4004121	            0x29c8	                            sub eax, ecx	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x4004123	            0x31c9	                            xor ecx, ecx	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x4004125	      0x48897c2410	             mov qword [rsp + 0x10], rdi	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x400412a	          0x4889fa	                            mov rdx, rdi	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x400412d	            0xeb0a	                           jmp 0x4004139	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x400412f	        0x4883c230	                           add rdx, 0x30	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x4004133	        0x4c3b62d0	             cmp r12, qword [rdx - 0x30]	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x4004137	            0x7c0b	                            jl 0x4004144	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x4004139	          0x83c101	                              add ecx, 1	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x400413c	            0x39c1	                            cmp ecx, eax	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x400413e	        0x448d1431	                   lea r10d, [rcx + rsi]	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x4004142	            0x75eb	                           jne 0x400412f	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x4004144	      0x488d7c2430	                   lea rdi, [rsp + 0x30]	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0x4004149	            0x89ce	                            mov esi, ecx	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0x400414b	      0x448954242c	            mov dword [rsp + 0x2c], r10d	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0x4004150	      0x4489442428	             mov dword [rsp + 0x28], r8d	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0x4004155	      0x44895c2424	            mov dword [rsp + 0x24], r11d	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0x400415a	        0x894c2418	             mov dword [rsp + 0x18], ecx	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0x400415e	      0xe800000000	                          call 0x4004163	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0x4004163	          0x83f801	                              cmp eax, 1	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0x4004166	        0x8b4c2418	            mov ecx, dword [rsp + 0x18] 	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0x400416a	      0x4c635c2424	         movsxd r11, dword [rsp + 0x24] 	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0x400416f	      0x4c63442428	          movsxd r8, dword [rsp + 0x28] 	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0x4004174	      0x448b54242c	           mov r10d, dword [rsp + 0x2c] 	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0x4004179	     0xf8479010000	                            je 0x40042f8	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0x400417f	        0x418b4500	                    mov eax, dword [r13]	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0x4004183	          0x4139c3	                           cmp r11d, eax	       668	fold.c	FUNCTION_25	IF_8	IF_13
0x4004186	     0xf8cfa000000	                            jl 0x4004286	       668	fold.c	FUNCTION_25	IF_8	IF_13
0x400418c	          0x83c001	                              add eax, 1	       671	fold.c	FUNCTION_25	IF_8
0x400418f	        0x4183f601	                             xor r14d, 1	       681	fold.c	FUNCTION_25	IF_8	IF_14
0x4004193	            0x29c8	                            sub eax, ecx	       671	fold.c	FUNCTION_25	IF_8
0x4004195	        0x41894500	                    mov dword [r13], eax	       671	fold.c	FUNCTION_25	IF_8
0x4004199	      0x488b442430	            mov rax, qword [rsp + 0x30] 	       674	fold.c	FUNCTION_25	IF_8
0x400419e	        0x48894310	             mov qword [rbx + 0x10], rax	       674	fold.c	FUNCTION_25	IF_8
0x40041a2	      0x488b442438	            mov rax, qword [rsp + 0x38] 	       674	fold.c	FUNCTION_25	IF_8
0x40041a7	        0x48894318	             mov qword [rbx + 0x18], rax	       674	fold.c	FUNCTION_25	IF_8
0x40041ab	      0x488b442440	            mov rax, qword [rsp + 0x40] 	       674	fold.c	FUNCTION_25	IF_8
0x40041b0	          0x48892b	                    mov qword [rbx], rbp	       675	fold.c	FUNCTION_25	IF_8
0x40041b3	        0x48894320	             mov qword [rbx + 0x20], rax	       674	fold.c	FUNCTION_25	IF_8
0x40041b7	          0x4c89e0	                            mov rax, r12	       676	fold.c	FUNCTION_25	IF_8
0x40041ba	          0x4829e8	                            sub rax, rbp	       676	fold.c	FUNCTION_25	IF_8
0x40041bd	        0x4883c001	                              add rax, 1	       676	fold.c	FUNCTION_25	IF_8
0x40041c1	          0x4585fe	                         test r14d, r15d	       681	fold.c	FUNCTION_25	IF_8	IF_14
0x40041c4	        0x48894308	                mov qword [rbx + 8], rax	       676	fold.c	FUNCTION_25	IF_8
0x40041c8	     0xf8491000000	                            je 0x400425f	       681	fold.c	FUNCTION_25	IF_8	IF_14
0x40041ce	    0x488b05000000	            mov rax, qword [0x040041d5] 	       681	fold.c	FUNCTION_25	IF_8	IF_14
0x40041d5	    0x4c3b80e80100	            cmp r8, qword [rax + 0x1e8] 	       681	fold.c	FUNCTION_25	IF_8	IF_14
0x40041dc	     0xf8c00010000	                            jl 0x40042e2	       681	fold.c	FUNCTION_25	IF_8	IF_14
0x40041e2	        0xc6432801	                mov byte [rbx + 0x28], 1	       685	fold.c	FUNCTION_25	IF_8
0x40041e6	        0xc6432902	                mov byte [rbx + 0x29], 2	       686	fold.c	FUNCTION_25	IF_8
0x40041ea	      0xe800000000	                          call 0x40041ef	       689	fold.c	FUNCTION_25	IF_8	CALL_11
0x40041ef	      0xe939feffff	                           jmp 0x400402d	       689	fold.c	FUNCTION_25	IF_8	CALL_11
0x40041f4	    0x488b05000000	            mov rax, qword [0x040041fb] 	      1735	fold.c	FUNCTION_52	IF_1
0x40041fb	    0x8b8040150000	          mov eax, dword [rax + 0x1540] 	      1735	fold.c	FUNCTION_52	IF_1
0x4004201	            0x85c0	                           test eax, eax	      1735	fold.c	FUNCTION_52	IF_1
0x4004203	     0xf84bb000000	                            je 0x40042c4	      1735	fold.c	FUNCTION_52	IF_1
0x4004209	    0x4881c7280200	                          add rdi, 0x228	      1735	fold.c	FUNCTION_52	IF_1
0x4004210	      0xe81bcbffff	             call sym.parseMarker.isra.8	      1740	fold.c	FUNCTION_52	CALL_3
0x4004215	    0x488b05000000	            mov rax, qword [0x0400421c] 	      1742	fold.c	FUNCTION_52	CALL_4
0x400421c	      0x488b5c2408	                mov rbx, qword [rsp + 8]	      1742	fold.c	FUNCTION_52	CALL_4
0x4004221	    0x8b1500000000	            mov edx, dword [0x04004227] 	      1742	fold.c	FUNCTION_52	CALL_4
0x4004227	    0x488bb0280200	           mov rsi, qword [rax + 0x228] 	      1742	fold.c	FUNCTION_52	CALL_4
0x400422e	          0x4889df	                            mov rdi, rbx	      1742	fold.c	FUNCTION_52	CALL_4
0x4004231	      0xe8babfffff	                  call sym.foldAddMarker	      1742	fold.c	FUNCTION_52	CALL_4
0x4004236	    0x8b1500000000	            mov edx, dword [0x0400423c] 	      1743	fold.c	FUNCTION_52	CALL_5
0x400423c	    0x488b35000000	            mov rsi, qword [0x04004243] 	      1743	fold.c	FUNCTION_52	CALL_5
0x4004243	          0x4c89e7	                            mov rdi, r12	      1743	fold.c	FUNCTION_52	CALL_5
0x4004246	      0xe8a5bfffff	                  call sym.foldAddMarker	      1743	fold.c	FUNCTION_52	CALL_5
0x400424b	            0x31c9	                            xor ecx, ecx	      1747	fold.c	FUNCTION_52	CALL_6
0x400424d	          0x4c89e2	                            mov rdx, r12	      1747	fold.c	FUNCTION_52	CALL_6
0x4004250	            0x31f6	                            xor esi, esi	      1747	fold.c	FUNCTION_52	CALL_6
0x4004252	          0x4889df	                            mov rdi, rbx	      1747	fold.c	FUNCTION_52	CALL_6
0x4004255	      0xe800000000	                          call 0x400425a	      1747	fold.c	FUNCTION_52	CALL_6
0x400425a	      0xe9cefdffff	                           jmp 0x400402d	      1747	fold.c	FUNCTION_52	CALL_6
0x400425f	          0x4585ff	                         test r15d, r15d	       683	fold.c	FUNCTION_25	IF_8	IF_15
0x4004262	     0xf857affffff	                           jne 0x40041e2	       683	fold.c	FUNCTION_25	IF_8	IF_15
0x4004268	    0x488b05000000	            mov rax, qword [0x0400426f] 	       684	fold.c	FUNCTION_25	IF_8	IF_15
0x400426f	    0xc68020010000	               mov byte [rax + 0x120], 1	       684	fold.c	FUNCTION_25	IF_8	IF_15
0x4004276	      0xe967ffffff	                           jmp 0x40041e2	       684	fold.c	FUNCTION_25	IF_8	IF_15
0x400427b	        0x488d7b30	                   lea rdi, [rbx + 0x30]	       684	fold.c	FUNCTION_25	IF_8	IF_15
0x400427f	            0x31c9	                            xor ecx, ecx	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x4004281	      0x48897c2410	             mov qword [rsp + 0x10], rdi	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x4004286	        0x4b8d345b	                  lea rsi, [r11 + r11*2]	        59	string3.h	FUNCTION_78	CALL_3
0x400428a	          0x4429d8	                           sub eax, r11d	        59	string3.h	FUNCTION_78	CALL_3
0x400428d	      0x488b7c2410	            mov rdi, qword [rsp + 0x10] 	        59	string3.h	FUNCTION_78	CALL_3
0x4004292	            0x4898	                                    cdqe	        59	string3.h	FUNCTION_78	CALL_3
0x4004294	        0x894c2424	             mov dword [rsp + 0x24], ecx	        59	string3.h	FUNCTION_78	CALL_3
0x4004298	      0x4489442418	             mov dword [rsp + 0x18], r8d	        59	string3.h	FUNCTION_78	CALL_3
0x400429d	        0x48c1e604	                              shl rsi, 4	        59	string3.h	FUNCTION_78	CALL_3
0x40042a1	        0x49037510	             add rsi, qword [r13 + 0x10]	        59	string3.h	FUNCTION_78	CALL_3
0x40042a5	        0x488d1440	                  lea rdx, [rax + rax*2]	        59	string3.h	FUNCTION_78	CALL_3
0x40042a9	        0x48c1e204	                              shl rdx, 4	        59	string3.h	FUNCTION_78	CALL_3
0x40042ad	      0xe800000000	                          call 0x40042b2	        59	string3.h	FUNCTION_78	CALL_3
0x40042b2	        0x418b4500	                    mov eax, dword [r13]	        59	string3.h	FUNCTION_78	CALL_3
0x40042b6	      0x4c63442418	          movsxd r8, dword [rsp + 0x18] 	        59	string3.h	FUNCTION_78	CALL_3
0x40042bb	        0x8b4c2424	            mov ecx, dword [rsp + 0x24] 	        59	string3.h	FUNCTION_78	CALL_3
0x40042bf	      0xe9c8feffff	                           jmp 0x400418c	        59	string3.h	FUNCTION_78	CALL_3
0x40042c4	            0x31ff	                            xor edi, edi	      1737	fold.c	FUNCTION_52	IF_1	CALL_2
0x40042c6	      0xba05000000	                              mov edx, 5	      1737	fold.c	FUNCTION_52	IF_1	CALL_2
0x40042cb	      0xbe00000000	                              mov esi, 0	      1737	fold.c	FUNCTION_52	IF_1	CALL_2
0x40042d0	      0xe800000000	                          call 0x40042d5	      1737	fold.c	FUNCTION_52	IF_1	CALL_2
0x40042d5	          0x4889c7	                            mov rdi, rax	      1737	fold.c	FUNCTION_52	IF_1	CALL_2
0x40042d8	      0xe800000000	                          call 0x40042dd	      1737	fold.c	FUNCTION_52	IF_1	CALL_2
0x40042dd	      0xe94bfdffff	                           jmp 0x400402d	      1737	fold.c	FUNCTION_52	IF_1	CALL_2
0x40042e2	      0x488b7c2408	                mov rdi, qword [rsp + 8]	       368	fold.c	FUNCTION_14	CALL_1
0x40042e7	            0x31d2	                            xor edx, edx	       368	fold.c	FUNCTION_14	CALL_1
0x40042e9	      0xbe01000000	                              mov esi, 1	       368	fold.c	FUNCTION_14	CALL_1
0x40042ee	      0xe8fdf7ffff	                  call sym.setFoldRepeat	       368	fold.c	FUNCTION_14	CALL_1
0x40042f3	      0xe9eafeffff	                           jmp 0x40041e2	       368	fold.c	FUNCTION_14	CALL_1
0x40042f8	          0x488b03	                    mov rax, qword [rbx]	       650	fold.c	FUNCTION_25	IF_8	IF_10	IF_11
0x40042fb	      0x488b7c2440	            mov rdi, qword [rsp + 0x40] 	        59	string3.h	FUNCTION_78	CALL_3
0x4004300	      0x4489542428	            mov dword [rsp + 0x28], r10d	        59	string3.h	FUNCTION_78	CALL_3
0x4004305	      0x4489442424	             mov dword [rsp + 0x24], r8d	        59	string3.h	FUNCTION_78	CALL_3
0x400430a	        0x894c2418	             mov dword [rsp + 0x18], ecx	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x400430e	          0x4839c5	                            cmp rbp, rax	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4004311	        0x480f4fe8	                          cmovg rbp, rax	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4004315	          0x4863c1	                         movsxd rax, ecx	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4004318	        0x488d1440	                  lea rdx, [rax + rax*2]	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x400431c	        0x48c1e204	                              shl rdx, 4	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4004320	      0x488d7413d0	             lea rsi, [rbx + rdx - 0x30]	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4004325	        0x488b4608	                mov rax, qword [rsi + 8]	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4004329	          0x480306	                    add rax, qword [rsi]	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x400432c	          0x4889de	                            mov rsi, rbx	        59	string3.h	FUNCTION_78	CALL_3
0x400432f	        0x4883e801	                              sub rax, 1	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4004333	          0x4939c4	                            cmp r12, rax	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4004336	        0x4c0f4ce0	                          cmovl r12, rax	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x400433a	      0xe800000000	                          call 0x400433f	        59	string3.h	FUNCTION_78	CALL_3
0x400433f	        0x8b4c2418	            mov ecx, dword [rsp + 0x18] 	       659	fold.c	FUNCTION_25	IF_8	IF_10
0x4004343	      0x488b442440	            mov rax, qword [rsp + 0x40] 	       659	fold.c	FUNCTION_25	IF_8	IF_10
0x4004348	         0x14c2430	             add dword [rsp + 0x30], ecx	       659	fold.c	FUNCTION_25	IF_8	IF_10
0x400434c	      0x4c63442424	          movsxd r8, dword [rsp + 0x24] 	       659	fold.c	FUNCTION_25	IF_8	IF_10
0x4004351	      0x448b542428	           mov r10d, dword [rsp + 0x28] 	       659	fold.c	FUNCTION_25	IF_8	IF_10
0x4004356	          0x8d51ff	                      lea edx, [rcx - 1]	       659	fold.c	FUNCTION_25	IF_8	IF_10
0x4004359	      0x488d545203	              lea rdx, [rdx + rdx*2 + 3]	       659	fold.c	FUNCTION_25	IF_8	IF_10
0x400435e	        0x48c1e204	                              shl rdx, 4	       659	fold.c	FUNCTION_25	IF_8	IF_10
0x4004362	          0x4801c2	                            add rdx, rax	       659	fold.c	FUNCTION_25	IF_8	IF_10
0x4004365	          0x482928	                    sub qword [rax], rbp	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x4004368	        0x4883c030	                           add rax, 0x30	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x400436c	          0x4839d0	                            cmp rax, rdx	       664	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x400436f	            0x75f4	                           jne 0x4004365	       664	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x4004371	        0x418b4500	                    mov eax, dword [r13]	       664	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x4004375	          0x4d63da	                        movsxd r11, r10d	       664	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x4004378	      0xe906feffff	                           jmp 0x4004183	       664	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x400437d	            0x31c9	                            xor ecx, ecx	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x400437f	      0xe908feffff	                           jmp 0x400418c	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x4004384	      0xe800000000	                          call 0x4004389	       691	fold.c	FUNCTION_25
foldlevelDiff	FOR,0:functions,0:IF,1:ELSE,1:CALL,1:DO,0:SWITCH,0:WHILE,0	12
0x4000630	              0x53	                                push rbx	      3239	fold.c	FUNCTION_68
0x4000631	        0x488b7710	            mov rsi, qword [rdi + 0x10] 	      3240	fold.c	FUNCTION_68	IF_1	CALL_1
0x4000635	          0x4889fb	                            mov rbx, rdi	      3239	fold.c	FUNCTION_68
0x4000638	        0x48037708	                add rsi, qword [rdi + 8]	      3240	fold.c	FUNCTION_68	IF_1	CALL_1
0x400063c	          0x488b3f	                    mov rdi, qword [rdi]	      3240	fold.c	FUNCTION_68	IF_1	CALL_1
0x400063f	      0xe800000000	                          call 0x4000644	      3240	fold.c	FUNCTION_68	IF_1	CALL_1
0x4000644	            0x85c0	                           test eax, eax	      3241	fold.c	FUNCTION_68	IF_1
0x4000646	           0xf95c0	                                setne al	      3241	fold.c	FUNCTION_68	IF_1
0x4000649	           0xfb6c0	                           movzx eax, al	      3241	fold.c	FUNCTION_68	IF_1
0x400064c	          0x894320	             mov dword [rbx + 0x20], eax	      3241	fold.c	FUNCTION_68	IF_1
0x400064f	              0x5b	                                 pop rbx	      3244	fold.c	FUNCTION_68	ELSE_1
0x4000650	              0xc3	                                     ret	      3244	fold.c	FUNCTION_68	ELSE_1
foldLevelWin	FOR,1:functions,0:IF,1:ELSE,0:CALL,1:DO,0:SWITCH,0:WHILE,0	39
0x4000040	    0x4881c7080100	                          add rdi, 0x108	      1166	fold.c	FUNCTION_37
0x4000047	            0x31c0	                            xor eax, eax	      1162	fold.c	FUNCTION_37
0x4000049	     0xf1f80000000	                         nop dword [rax]	      1162	fold.c	FUNCTION_37
0x4000050	            0x8b17	                    mov edx, dword [rdi]	      1132	fold.c	FUNCTION_36
0x4000052	        0x4c8b5710	            mov r10, qword [rdi + 0x10] 	      1132	fold.c	FUNCTION_36
0x4000056	          0x83ea01	                              sub edx, 1	      1132	fold.c	FUNCTION_36
0x4000059	          0x4c63c2	                          movsxd r8, edx	      1132	fold.c	FUNCTION_36
0x400005c	          0x4d85c0	                             test r8, r8	      1133	fold.c	FUNCTION_36	WHILE_1
0x400005f	            0x785b	                            js 0x40000bc	      1133	fold.c	FUNCTION_36	WHILE_1
0x4000061	            0x31c9	                            xor ecx, ecx	      1133	fold.c	FUNCTION_36	WHILE_1
0x4000063	            0xeb0e	                           jmp 0x4000073	      1133	fold.c	FUNCTION_36	WHILE_1
0x4000065	           0xf1f00	                         nop dword [rax]	      1133	fold.c	FUNCTION_36	WHILE_1
0x4000068	          0x83ea01	                              sub edx, 1	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x400006b	          0x4c63c2	                          movsxd r8, edx	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x400006e	          0x4c39c1	                             cmp rcx, r8	      1133	fold.c	FUNCTION_36	WHILE_1
0x4000071	            0x7f31	                            jg 0x40000a4	      1133	fold.c	FUNCTION_36	WHILE_1
0x4000073	        0x498d1408	                     lea rdx, [r8 + rcx]	      1135	fold.c	FUNCTION_36	WHILE_1
0x4000077	          0x48d1fa	                              sar rdx, 1	      1135	fold.c	FUNCTION_36	WHILE_1
0x400007a	        0x488d3c52	                  lea rdi, [rdx + rdx*2]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x400007e	        0x48c1e704	                              shl rdi, 4	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4000082	          0x4c01d7	                            add rdi, r10	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4000085	          0x4c8b0f	                     mov r9, qword [rdi]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4000088	          0x4c39ce	                             cmp rsi, r9	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x400008b	            0x7cdb	                            jl 0x4000068	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x400008d	          0x4c89c9	                             mov rcx, r9	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4000090	        0x48034f08	                add rcx, qword [rdi + 8]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4000094	          0x4839ce	                            cmp rsi, rcx	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4000097	            0x7c17	                            jl 0x40000b0	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4000099	          0x8d4a01	                      lea ecx, [rdx + 1]	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x400009c	          0x4863c9	                         movsxd rcx, ecx	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x400009f	          0x4c39c1	                             cmp rcx, r8	      1133	fold.c	FUNCTION_36	WHILE_1
0x40000a2	            0x7ecf	                           jle 0x4000073	      1133	fold.c	FUNCTION_36	WHILE_1
0x40000a4	            0xf3c3	                                     ret	      1133	fold.c	FUNCTION_36	WHILE_1
0x40000a6	    0x662e0f1f8400	                 nop word cs:[rax + rax]	      1133	fold.c	FUNCTION_36	WHILE_1
0x40000b0	        0x4883c710	                           add rdi, 0x10	      1172	fold.c	FUNCTION_37	FOR_1
0x40000b4	          0x4c29ce	                             sub rsi, r9	      1173	fold.c	FUNCTION_37	FOR_1
0x40000b7	          0x83c001	                              add eax, 1	      1174	fold.c	FUNCTION_37	FOR_1
0x40000ba	            0xeb94	                           jmp 0x4000050	      1175	fold.c	FUNCTION_37	FOR_1
0x40000bc	            0xf3c3	                                     ret	      1178	fold.c	FUNCTION_37
lineFolded	FOR,0:functions,0:IF,0:ELSE,0:CALL,1:DO,0:SWITCH,0:WHILE,0	8
0x4003660	        0x4883ec08	                              sub rsp, 8	       277	fold.c	FUNCTION_6
0x4003664	            0x31d2	                            xor edx, edx	       278	fold.c	FUNCTION_6	CALL_1
0x4003666	      0xe800000000	                          call 0x400366b	       278	fold.c	FUNCTION_6	CALL_1
0x400366b	          0x4885c0	                           test rax, rax	       278	fold.c	FUNCTION_6	CALL_1
0x400366e	           0xf95c0	                                setne al	       278	fold.c	FUNCTION_6	CALL_1
0x4003671	        0x4883c408	                              add rsp, 8	       279	fold.c	FUNCTION_6
0x4003675	           0xfb6c0	                           movzx eax, al	       278	fold.c	FUNCTION_6	CALL_1
0x4003678	              0xc3	                                     ret	       279	fold.c	FUNCTION_6
