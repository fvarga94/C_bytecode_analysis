vterm_keyboard_key	WHILE,0:SWITCH,1:ELSE,11:FOR,0:DO,0:CALL,10:IF,16:functions,0	134
0x4000149	        0x4883ec08	                              sub rsp, 8	       131	keyboard.c	FUNCTION_2
0x400014d	            0x85f6	                           test esi, esi	       134	keyboard.c	FUNCTION_2	IF_1
0x400014f	     0xf8438020000	                            je 0x400038d	       134	keyboard.c	FUNCTION_2	IF_1
0x4000155	    0x81feff000000	                           cmp esi, 0xff	       137	keyboard.c	FUNCTION_2	IF_2
0x400015b	            0x772a	                            ja 0x4000187	       137	keyboard.c	FUNCTION_2	IF_2
0x400015d	          0x83fe0e	                            cmp esi, 0xe	       138	keyboard.c	FUNCTION_2	IF_2	IF_3
0x4000160	     0xf8727020000	                            ja 0x400038d	       138	keyboard.c	FUNCTION_2	IF_2	IF_3
0x4000166	            0x89f6	                            mov esi, esi	       140	keyboard.c	FUNCTION_2	IF_2
0x4000168	        0x488d0476	                  lea rax, [rsi + rsi*2]	       140	keyboard.c	FUNCTION_2	IF_2
0x400016c	        0x48c1e002	                              shl rax, 2	       140	keyboard.c	FUNCTION_2	IF_2
0x4000170	    0x488d88000000	                          lea rcx, [rax]	       140	keyboard.c	FUNCTION_2	IF_2
0x4000177	    0x8b8000000000	                    mov eax, dword [rax]	       140	keyboard.c	FUNCTION_2	IF_2
0x400017d	      0x440fb64104	               movzx r8d, byte [rcx + 4]	       140	keyboard.c	FUNCTION_2	IF_2
0x4000182	          0x8b4908	                mov ecx, dword [rcx + 8]	       140	keyboard.c	FUNCTION_2	IF_2
0x4000185	            0xeb72	                           jmp 0x40001f9	       140	keyboard.c	FUNCTION_2	IF_2
0x4000187	    0x448d9600ffff	                 lea r10d, [rsi - 0x100]	       142	keyboard.c	FUNCTION_2	ELSE_1	IF_4
0x400018e	    0x4181faff0000	                          cmp r10d, 0xff	       142	keyboard.c	FUNCTION_2	ELSE_1	IF_4
0x4000195	            0x772c	                            ja 0x40001c3	       142	keyboard.c	FUNCTION_2	ELSE_1	IF_4
0x4000197	        0x4183fa0c	                           cmp r10d, 0xc	       143	keyboard.c	FUNCTION_2	ELSE_1	IF_4	IF_5
0x400019b	     0xf87ec010000	                            ja 0x400038d	       143	keyboard.c	FUNCTION_2	ELSE_1	IF_4	IF_5
0x40001a1	          0x4589d2	                          mov r10d, r10d	       145	keyboard.c	FUNCTION_2	ELSE_1	IF_4
0x40001a4	        0x4b8d0452	                  lea rax, [r10 + r10*2]	       145	keyboard.c	FUNCTION_2	ELSE_1	IF_4
0x40001a8	        0x48c1e002	                              shl rax, 2	       145	keyboard.c	FUNCTION_2	ELSE_1	IF_4
0x40001ac	    0x488d88000000	                          lea rcx, [rax]	       145	keyboard.c	FUNCTION_2	ELSE_1	IF_4
0x40001b3	    0x8b8000000000	                    mov eax, dword [rax]	       145	keyboard.c	FUNCTION_2	ELSE_1	IF_4
0x40001b9	      0x440fb64104	               movzx r8d, byte [rcx + 4]	       145	keyboard.c	FUNCTION_2	ELSE_1	IF_4
0x40001be	          0x8b4908	                mov ecx, dword [rcx + 8]	       145	keyboard.c	FUNCTION_2	ELSE_1	IF_4
0x40001c1	            0xeb36	                           jmp 0x40001f9	       145	keyboard.c	FUNCTION_2	ELSE_1	IF_4
0x40001c3	    0x81feff010000	                          cmp esi, 0x1ff	       147	keyboard.c	FUNCTION_2	ELSE_2	IF_6
0x40001c9	            0x762e	                           jbe 0x40001f9	       147	keyboard.c	FUNCTION_2	ELSE_2	IF_6
0x40001cb	    0x81ee00020000	                          sub esi, 0x200	       148	keyboard.c	FUNCTION_2	ELSE_2	IF_6	IF_7
0x40001d1	          0x83fe11	                           cmp esi, 0x11	       148	keyboard.c	FUNCTION_2	ELSE_2	IF_6	IF_7
0x40001d4	     0xf87b3010000	                            ja 0x400038d	       148	keyboard.c	FUNCTION_2	ELSE_2	IF_6	IF_7
0x40001da	            0x89f6	                            mov esi, esi	       150	keyboard.c	FUNCTION_2	ELSE_2	IF_6
0x40001dc	        0x488d0476	                  lea rax, [rsi + rsi*2]	       150	keyboard.c	FUNCTION_2	ELSE_2	IF_6
0x40001e0	        0x48c1e002	                              shl rax, 2	       150	keyboard.c	FUNCTION_2	ELSE_2	IF_6
0x40001e4	    0x488d88000000	                          lea rcx, [rax]	       150	keyboard.c	FUNCTION_2	ELSE_2	IF_6
0x40001eb	    0x8b8000000000	                    mov eax, dword [rax]	       150	keyboard.c	FUNCTION_2	ELSE_2	IF_6
0x40001f1	      0x440fb64104	               movzx r8d, byte [rcx + 4]	       150	keyboard.c	FUNCTION_2	ELSE_2	IF_6
0x40001f6	          0x8b4908	                mov ecx, dword [rcx + 8]	       150	keyboard.c	FUNCTION_2	ELSE_2	IF_6
0x40001f9	          0x83f808	                              cmp eax, 8	       153	keyboard.c	FUNCTION_2	SWITCH_1
0x40001fc	     0xf878b010000	                            ja 0x400038d	       153	keyboard.c	FUNCTION_2	SWITCH_1
0x4000202	            0x89c0	                            mov eax, eax	       153	keyboard.c	FUNCTION_2	SWITCH_1
0x4000204	    0xff24c5000000	                       jmp qword [rax*8]	       153	keyboard.c	FUNCTION_2	SWITCH_1
0x400020b	          0x83fa01	                              cmp edx, 1	       159	keyboard.c	FUNCTION_2	SWITCH_1	IF_8
0x400020e	            0x7519	                           jne 0x4000229	       159	keyboard.c	FUNCTION_2	SWITCH_1	IF_8
0x4000210	      0xba00000000	                              mov edx, 0	       160	keyboard.c	FUNCTION_2	SWITCH_1	CALL_1
0x4000215	      0xbe9b000000	                           mov esi, 0x9b	       160	keyboard.c	FUNCTION_2	SWITCH_1	CALL_1
0x400021a	      0xb800000000	                              mov eax, 0	       160	keyboard.c	FUNCTION_2	SWITCH_1	CALL_1
0x400021f	      0xe800000000	                          call 0x4000224	       160	keyboard.c	FUNCTION_2	SWITCH_1	CALL_1
0x4000224	      0xe964010000	                           jmp 0x400038d	       160	keyboard.c	FUNCTION_2	SWITCH_1	CALL_1
0x4000229	          0xf6c201	                              test dl, 1	       161	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_3	IF_9
0x400022c	            0x7440	                            je 0x400026e	       161	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_3	IF_9
0x400022e	          0x8d4a01	                      lea ecx, [rdx + 1]	       162	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_3	IF_9
0x4000231	      0xba00000000	                              mov edx, 0	       162	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_3	IF_9
0x4000236	      0xbe9b000000	                           mov esi, 0x9b	       162	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_3	IF_9
0x400023b	      0xb800000000	                              mov eax, 0	       162	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_3	IF_9
0x4000240	      0xe800000000	                          call 0x4000245	       162	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_3	IF_9
0x4000245	      0xe943010000	                           jmp 0x400038d	       162	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_3	IF_9
0x400024a	    0x488b87180100	           mov rax, qword [rdi + 0x118] 	       169	keyboard.c	FUNCTION_2	SWITCH_1	IF_10
0x4000251	    0xf68094000000	           test byte [rax + 0x94], 0x10 	       169	keyboard.c	FUNCTION_2	SWITCH_1	IF_10
0x4000258	            0x7414	                            je 0x400026e	       169	keyboard.c	FUNCTION_2	SWITCH_1	IF_10
0x400025a	      0xbe00000000	                              mov esi, 0	       170	keyboard.c	FUNCTION_2	SWITCH_1	CALL_3
0x400025f	      0xb800000000	                              mov eax, 0	       170	keyboard.c	FUNCTION_2	SWITCH_1	CALL_3
0x4000264	      0xe800000000	                          call 0x4000269	       170	keyboard.c	FUNCTION_2	SWITCH_1	CALL_3
0x4000269	      0xe91f010000	                           jmp 0x400038d	       173	keyboard.c	FUNCTION_2	SWITCH_1
0x400026e	          0xf6c205	                              test dl, 5	       176	keyboard.c	FUNCTION_2	SWITCH_1	IF_11
0x4000271	            0x7421	                            je 0x4000294	       176	keyboard.c	FUNCTION_2	SWITCH_1	IF_11
0x4000273	        0x410fbec8	                          movsx ecx, r8b	       177	keyboard.c	FUNCTION_2	SWITCH_1	CALL_4
0x4000277	        0x448d4201	                      lea r8d, [rdx + 1]	       177	keyboard.c	FUNCTION_2	SWITCH_1	CALL_4
0x400027b	      0xba00000000	                              mov edx, 0	       177	keyboard.c	FUNCTION_2	SWITCH_1	CALL_4
0x4000280	      0xbe9b000000	                           mov esi, 0x9b	       177	keyboard.c	FUNCTION_2	SWITCH_1	CALL_4
0x4000285	      0xb800000000	                              mov eax, 0	       177	keyboard.c	FUNCTION_2	SWITCH_1	CALL_4
0x400028a	      0xe800000000	                          call 0x400028f	       177	keyboard.c	FUNCTION_2	SWITCH_1	CALL_4
0x400028f	      0xe9f9000000	                           jmp 0x400038d	       177	keyboard.c	FUNCTION_2	SWITCH_1	CALL_4
0x4000294	        0x450fbec0	                          movsx r8d, r8b	       179	keyboard.c	FUNCTION_2	SWITCH_1	CALL_5
0x4000298	            0x89d1	                            mov ecx, edx	       179	keyboard.c	FUNCTION_2	SWITCH_1	CALL_5
0x400029a	          0x83e102	                              and ecx, 2	       179	keyboard.c	FUNCTION_2	SWITCH_1	CALL_5
0x400029d	      0xbe00000000	                              mov esi, 0	       179	keyboard.c	FUNCTION_2	SWITCH_1	CALL_5
0x40002a2	      0xb800000000	                              mov eax, 0	       179	keyboard.c	FUNCTION_2	SWITCH_1	CALL_5
0x40002a7	        0x480f45f0	                         cmovne rsi, rax	       179	keyboard.c	FUNCTION_2	SWITCH_1	CALL_5
0x40002ab	          0x4489c2	                            mov edx, r8d	       179	keyboard.c	FUNCTION_2	SWITCH_1	CALL_5
0x40002ae	      0xb800000000	                              mov eax, 0	       179	keyboard.c	FUNCTION_2	SWITCH_1	CALL_5
0x40002b3	      0xe800000000	                          call 0x40002b8	       179	keyboard.c	FUNCTION_2	SWITCH_1	CALL_5
0x40002b8	      0xe9d0000000	                           jmp 0x400038d	       179	keyboard.c	FUNCTION_2	SWITCH_1	CALL_5
0x40002bd	            0x85d2	                           test edx, edx	       183	keyboard.c	FUNCTION_2	SWITCH_1	IF_12
0x40002bf	            0x753e	                           jne 0x40002ff	       183	keyboard.c	FUNCTION_2	SWITCH_1	IF_12
0x40002c1	        0x410fbec8	                          movsx ecx, r8b	       184	keyboard.c	FUNCTION_2	SWITCH_1	CALL_6
0x40002c5	      0xba00000000	                              mov edx, 0	       184	keyboard.c	FUNCTION_2	SWITCH_1	CALL_6
0x40002ca	      0xbe8f000000	                           mov esi, 0x8f	       184	keyboard.c	FUNCTION_2	SWITCH_1	CALL_6
0x40002cf	      0xb800000000	                              mov eax, 0	       184	keyboard.c	FUNCTION_2	SWITCH_1	CALL_6
0x40002d4	      0xe800000000	                          call 0x40002d9	       184	keyboard.c	FUNCTION_2	SWITCH_1	CALL_6
0x40002d9	      0xe9af000000	                           jmp 0x400038d	       187	keyboard.c	FUNCTION_2	SWITCH_1
0x40002de	            0x85d2	                           test edx, edx	       190	keyboard.c	FUNCTION_2	SWITCH_1	IF_13
0x40002e0	            0x751d	                           jne 0x40002ff	       190	keyboard.c	FUNCTION_2	SWITCH_1	IF_13
0x40002e2	        0x410fbec8	                          movsx ecx, r8b	       191	keyboard.c	FUNCTION_2	SWITCH_1	CALL_7
0x40002e6	      0xba00000000	                              mov edx, 0	       191	keyboard.c	FUNCTION_2	SWITCH_1	CALL_7
0x40002eb	      0xbe9b000000	                           mov esi, 0x9b	       191	keyboard.c	FUNCTION_2	SWITCH_1	CALL_7
0x40002f0	      0xb800000000	                              mov eax, 0	       191	keyboard.c	FUNCTION_2	SWITCH_1	CALL_7
0x40002f5	      0xe800000000	                          call 0x40002fa	       191	keyboard.c	FUNCTION_2	SWITCH_1	CALL_7
0x40002fa	      0xe98e000000	                           jmp 0x400038d	       191	keyboard.c	FUNCTION_2	SWITCH_1	CALL_7
0x40002ff	          0x8d4a01	                      lea ecx, [rdx + 1]	       193	keyboard.c	FUNCTION_2	SWITCH_1	CALL_8
0x4000302	        0x450fbec0	                          movsx r8d, r8b	       193	keyboard.c	FUNCTION_2	SWITCH_1	CALL_8
0x4000306	      0xba00000000	                              mov edx, 0	       193	keyboard.c	FUNCTION_2	SWITCH_1	CALL_8
0x400030b	      0xbe9b000000	                           mov esi, 0x9b	       193	keyboard.c	FUNCTION_2	SWITCH_1	CALL_8
0x4000310	      0xb800000000	                              mov eax, 0	       193	keyboard.c	FUNCTION_2	SWITCH_1	CALL_8
0x4000315	      0xe800000000	                          call 0x400031a	       193	keyboard.c	FUNCTION_2	SWITCH_1	CALL_8
0x400031a	            0xeb71	                           jmp 0x400038d	       193	keyboard.c	FUNCTION_2	SWITCH_1	CALL_8
0x400031c	            0x85d2	                           test edx, edx	       197	keyboard.c	FUNCTION_2	SWITCH_1	IF_14
0x400031e	            0x751a	                           jne 0x400033a	       197	keyboard.c	FUNCTION_2	SWITCH_1	IF_14
0x4000320	        0x450fbec0	                          movsx r8d, r8b	       198	keyboard.c	FUNCTION_2	SWITCH_1	CALL_9
0x4000324	      0xba00000000	                              mov edx, 0	       198	keyboard.c	FUNCTION_2	SWITCH_1	CALL_9
0x4000329	      0xbe9b000000	                           mov esi, 0x9b	       198	keyboard.c	FUNCTION_2	SWITCH_1	CALL_9
0x400032e	      0xb800000000	                              mov eax, 0	       198	keyboard.c	FUNCTION_2	SWITCH_1	CALL_9
0x4000333	      0xe800000000	                          call 0x4000338	       198	keyboard.c	FUNCTION_2	SWITCH_1	CALL_9
0x4000338	            0xeb53	                           jmp 0x400038d	       198	keyboard.c	FUNCTION_2	SWITCH_1	CALL_9
0x400033a	        0x450fbec8	                          movsx r9d, r8b	       200	keyboard.c	FUNCTION_2	SWITCH_1	CALL_10
0x400033e	        0x448d4201	                      lea r8d, [rdx + 1]	       200	keyboard.c	FUNCTION_2	SWITCH_1	CALL_10
0x4000342	      0xba00000000	                              mov edx, 0	       200	keyboard.c	FUNCTION_2	SWITCH_1	CALL_10
0x4000347	      0xbe9b000000	                           mov esi, 0x9b	       200	keyboard.c	FUNCTION_2	SWITCH_1	CALL_10
0x400034c	      0xb800000000	                              mov eax, 0	       200	keyboard.c	FUNCTION_2	SWITCH_1	CALL_10
0x4000351	      0xe800000000	                          call 0x4000356	       200	keyboard.c	FUNCTION_2	SWITCH_1	CALL_10
0x4000356	            0xeb35	                           jmp 0x400038d	       200	keyboard.c	FUNCTION_2	SWITCH_1	CALL_10
0x4000358	    0x488b87180100	           mov rax, qword [rdi + 0x118] 	       204	keyboard.c	FUNCTION_2	SWITCH_1	IF_15
0x400035f	    0xf68094000000	               test byte [rax + 0x94], 2	       204	keyboard.c	FUNCTION_2	SWITCH_1	IF_15
0x4000366	     0xf8551ffffff	                           jne 0x40002bd	       204	keyboard.c	FUNCTION_2	SWITCH_1	IF_15
0x400036c	      0xe96dffffff	                           jmp 0x40002de	       204	keyboard.c	FUNCTION_2	SWITCH_1	IF_15
0x4000371	    0x488b87180100	           mov rax, qword [rdi + 0x118] 	       210	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_10	IF_16
0x4000378	    0xf68094000000	               test byte [rax + 0x94], 1	       210	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_10	IF_16
0x400037f	     0xf84e9feffff	                            je 0x400026e	       210	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_10	IF_16
0x4000385	          0x4189c8	                            mov r8d, ecx	       211	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_10	IF_16
0x4000388	      0xe930ffffff	                           jmp 0x40002bd	       212	keyboard.c	FUNCTION_2	SWITCH_1	ELSE_10	IF_16
0x400038d	        0x4883c408	                              add rsp, 8	       217	keyboard.c	FUNCTION_2	ELSE_11
0x4000391	              0xc3	                                     ret	       217	keyboard.c	FUNCTION_2	ELSE_11
vterm_keyboard_end_paste	WHILE,0:SWITCH,0:ELSE,0:FOR,0:DO,0:CALL,1:IF,1:functions,0	10
0x40003c0	    0x488b87180100	           mov rax, qword [rdi + 0x118] 	       227	keyboard.c	FUNCTION_4	IF_1
0x40003c7	    0xf68095000000	           test byte [rax + 0x95], 0x20 	       227	keyboard.c	FUNCTION_4	IF_1
0x40003ce	            0x741c	                            je 0x40003ec	       227	keyboard.c	FUNCTION_4	IF_1
0x40003d0	        0x4883ec08	                              sub rsp, 8	       226	keyboard.c	FUNCTION_4
0x40003d4	      0xba00000000	                              mov edx, 0	       228	keyboard.c	FUNCTION_4	CALL_1
0x40003d9	      0xbe9b000000	                           mov esi, 0x9b	       228	keyboard.c	FUNCTION_4	CALL_1
0x40003de	      0xb800000000	                              mov eax, 0	       228	keyboard.c	FUNCTION_4	CALL_1
0x40003e3	      0xe800000000	                          call 0x40003e8	       228	keyboard.c	FUNCTION_4	CALL_1
0x40003e8	        0x4883c408	                              add rsp, 8	       229	keyboard.c	FUNCTION_4
0x40003ec	            0xf3c3	                                     ret	       229	keyboard.c	FUNCTION_4
vterm_keyboard_unichar	WHILE,0:SWITCH,1:ELSE,0:FOR,0:DO,0:CALL,4:IF,4:functions,0	81
0x4000040	              0x53	                                push rbx	         8	keyboard.c	FUNCTION_1
0x4000041	        0x4883ec10	                           sub rsp, 0x10	         8	keyboard.c	FUNCTION_1
0x4000045	          0x4889fb	                            mov rbx, rdi	         8	keyboard.c	FUNCTION_1
0x4000048	    0x64488b042528	                mov rax, qword fs:[0x28]	         8	keyboard.c	FUNCTION_1
0x4000051	      0x4889442408	                mov qword [rsp + 8], rax	         8	keyboard.c	FUNCTION_1
0x4000056	            0x31c0	                            xor eax, eax	         8	keyboard.c	FUNCTION_1
0x4000058	          0x83fe20	                           cmp esi, 0x20	        14	keyboard.c	FUNCTION_1	IF_1
0x400005b	     0xf84c4000000	                            je 0x4000125	        14	keyboard.c	FUNCTION_1	IF_1
0x4000061	          0x83e2fe	                     and edx, 0xfffffffe	        17	keyboard.c	FUNCTION_1	IF_2
0x4000064	            0x751d	                           jne 0x4000083	        17	keyboard.c	FUNCTION_1	IF_2
0x4000066	            0x89f7	                            mov edi, esi	        20	keyboard.c	FUNCTION_1	IF_2	CALL_1
0x4000068	          0x4889e6	                            mov rsi, rsp	        20	keyboard.c	FUNCTION_1	IF_2	CALL_1
0x400006b	      0xe800000000	                          call 0x4000070	        20	keyboard.c	FUNCTION_1	IF_2	CALL_1
0x4000070	          0x4863d0	                         movsxd rdx, eax	        21	keyboard.c	FUNCTION_1	IF_2	CALL_2
0x4000073	          0x4889e6	                            mov rsi, rsp	        21	keyboard.c	FUNCTION_1	IF_2	CALL_2
0x4000076	          0x4889df	                            mov rdi, rbx	        21	keyboard.c	FUNCTION_1	IF_2	CALL_2
0x4000079	      0xe800000000	                          call 0x400007e	        21	keyboard.c	FUNCTION_1	IF_2	CALL_2
0x400007e	      0xe9ab000000	                           jmp 0x400012e	        21	keyboard.c	FUNCTION_1	IF_2	CALL_2
0x4000083	          0x83fe5f	                           cmp esi, 0x5f	        25	keyboard.c	FUNCTION_1	SWITCH_1
0x4000086	            0x7711	                            ja 0x4000099	        25	keyboard.c	FUNCTION_1	SWITCH_1
0x4000088	          0x83fe5c	                           cmp esi, 0x5c	        25	keyboard.c	FUNCTION_1	SWITCH_1
0x400008b	            0x7362	                           jae 0x40000ef	        25	keyboard.c	FUNCTION_1	SWITCH_1
0x400008d	          0x83fe20	                           cmp esi, 0x20	        25	keyboard.c	FUNCTION_1	SWITCH_1
0x4000090	            0x7418	                            je 0x40000aa	        25	keyboard.c	FUNCTION_1	SWITCH_1
0x4000092	          0x83fe5b	                           cmp esi, 0x5b	        25	keyboard.c	FUNCTION_1	SWITCH_1
0x4000095	            0x751a	                           jne 0x40000b1	        25	keyboard.c	FUNCTION_1	SWITCH_1
0x4000097	            0xeb26	                           jmp 0x40000bf	        25	keyboard.c	FUNCTION_1	SWITCH_1
0x4000099	          0x83fe69	                           cmp esi, 0x69	        25	keyboard.c	FUNCTION_1	SWITCH_1
0x400009c	            0x7213	                            jb 0x40000b1	        25	keyboard.c	FUNCTION_1	SWITCH_1
0x400009e	          0x83fe6a	                           cmp esi, 0x6a	        25	keyboard.c	FUNCTION_1	SWITCH_1
0x40000a1	            0x761c	                           jbe 0x40000bf	        25	keyboard.c	FUNCTION_1	SWITCH_1
0x40000a3	          0x83fe6d	                           cmp esi, 0x6d	        25	keyboard.c	FUNCTION_1	SWITCH_1
0x40000a6	            0x7417	                            je 0x40000bf	        25	keyboard.c	FUNCTION_1	SWITCH_1
0x40000a8	            0xeb07	                           jmp 0x40000b1	        25	keyboard.c	FUNCTION_1	SWITCH_1
0x40000aa	            0x89d0	                            mov eax, edx	        36	keyboard.c	FUNCTION_1	SWITCH_1
0x40000ac	          0x83e001	                              and eax, 1	        36	keyboard.c	FUNCTION_1	SWITCH_1
0x40000af	            0xeb13	                           jmp 0x40000c4	        37	keyboard.c	FUNCTION_1	SWITCH_1
0x40000b1	          0x8d469f	                   lea eax, [rsi - 0x61]	        40	keyboard.c	FUNCTION_1	SWITCH_1
0x40000b4	          0x83f819	                           cmp eax, 0x19	        40	keyboard.c	FUNCTION_1	SWITCH_1
0x40000b7	           0xf97c0	                                 seta al	        40	keyboard.c	FUNCTION_1	SWITCH_1
0x40000ba	           0xfb6c0	                           movzx eax, al	        40	keyboard.c	FUNCTION_1	SWITCH_1
0x40000bd	            0xeb05	                           jmp 0x40000c4	        40	keyboard.c	FUNCTION_1	SWITCH_1
0x40000bf	      0xb801000000	                              mov eax, 1	        28	keyboard.c	FUNCTION_1	SWITCH_1
0x40000c4	            0x85c0	                           test eax, eax	        44	keyboard.c	FUNCTION_1	IF_3
0x40000c6	            0x7427	                            je 0x40000ef	        44	keyboard.c	FUNCTION_1	IF_3
0x40000c8	    0xf7c2fdffffff	                    test edx, 0xfffffffd	        44	keyboard.c	FUNCTION_1	IF_3
0x40000ce	            0x741f	                            je 0x40000ef	        44	keyboard.c	FUNCTION_1	IF_3
0x40000d0	        0x448d4201	                      lea r8d, [rdx + 1]	        45	keyboard.c	FUNCTION_1	IF_3	CALL_3
0x40000d4	            0x89f1	                            mov ecx, esi	        45	keyboard.c	FUNCTION_1	IF_3	CALL_3
0x40000d6	      0xba00000000	                              mov edx, 0	        45	keyboard.c	FUNCTION_1	IF_3	CALL_3
0x40000db	      0xbe9b000000	                           mov esi, 0x9b	        45	keyboard.c	FUNCTION_1	IF_3	CALL_3
0x40000e0	          0x4889df	                            mov rdi, rbx	        45	keyboard.c	FUNCTION_1	IF_3	CALL_3
0x40000e3	      0xb800000000	                              mov eax, 0	        45	keyboard.c	FUNCTION_1	IF_3	CALL_3
0x40000e8	      0xe800000000	                          call 0x40000ed	        45	keyboard.c	FUNCTION_1	IF_3	CALL_3
0x40000ed	            0xeb3f	                           jmp 0x400012e	        46	keyboard.c	FUNCTION_1	IF_3
0x40000ef	            0x89d1	                            mov ecx, edx	        49	keyboard.c	FUNCTION_1	IF_4
0x40000f1	          0x83e104	                              and ecx, 4	        49	keyboard.c	FUNCTION_1	IF_4
0x40000f4	            0x89f0	                            mov eax, esi	        50	keyboard.c	FUNCTION_1	IF_4
0x40000f6	          0x83e01f	                           and eax, 0x1f	        50	keyboard.c	FUNCTION_1	IF_4
0x40000f9	            0x85c9	                           test ecx, ecx	        50	keyboard.c	FUNCTION_1	IF_4
0x40000fb	           0xf45f0	                         cmovne esi, eax	        50	keyboard.c	FUNCTION_1	IF_4
0x40000fe	          0x83e202	                              and edx, 2	        52	keyboard.c	FUNCTION_1	CALL_4
0x4000101	      0xba00000000	                              mov edx, 0	        52	keyboard.c	FUNCTION_1	CALL_4
0x4000106	      0xb800000000	                              mov eax, 0	        52	keyboard.c	FUNCTION_1	CALL_4
0x400010b	        0x480f45d0	                         cmovne rdx, rax	        52	keyboard.c	FUNCTION_1	CALL_4
0x400010f	            0x89f1	                            mov ecx, esi	        52	keyboard.c	FUNCTION_1	CALL_4
0x4000111	      0xbe00000000	                              mov esi, 0	        52	keyboard.c	FUNCTION_1	CALL_4
0x4000116	          0x4889df	                            mov rdi, rbx	        52	keyboard.c	FUNCTION_1	CALL_4
0x4000119	      0xb800000000	                              mov eax, 0	        52	keyboard.c	FUNCTION_1	CALL_4
0x400011e	      0xe800000000	                          call 0x4000123	        52	keyboard.c	FUNCTION_1	CALL_4
0x4000123	            0xeb09	                           jmp 0x400012e	        52	keyboard.c	FUNCTION_1	CALL_4
0x4000125	            0x85d2	                           test edx, edx	        17	keyboard.c	FUNCTION_1	IF_2
0x4000127	            0x7581	                           jne 0x40000aa	        17	keyboard.c	FUNCTION_1	IF_2
0x4000129	      0xe938ffffff	                           jmp 0x4000066	        17	keyboard.c	FUNCTION_1	IF_2
0x400012e	      0x488b442408	                mov rax, qword [rsp + 8]	        53	keyboard.c	FUNCTION_1
0x4000133	    0x644833042528	                xor rax, qword fs:[0x28]	        53	keyboard.c	FUNCTION_1
0x400013c	            0x7405	                            je 0x4000143	        53	keyboard.c	FUNCTION_1
0x400013e	      0xe800000000	                          call 0x4000143	        53	keyboard.c	FUNCTION_1
0x4000143	        0x4883c410	                           add rsp, 0x10	        53	keyboard.c	FUNCTION_1
0x4000147	              0x5b	                                 pop rbx	        53	keyboard.c	FUNCTION_1
0x4000148	              0xc3	                                     ret	        53	keyboard.c	FUNCTION_1
vterm_keyboard_start_paste	WHILE,0:SWITCH,0:ELSE,0:FOR,0:DO,0:CALL,1:IF,1:functions,0	10
0x4000392	    0x488b87180100	           mov rax, qword [rdi + 0x118] 	       221	keyboard.c	ELSE_11	FUNCTION_3	IF_1
0x4000399	    0xf68095000000	           test byte [rax + 0x95], 0x20 	       221	keyboard.c	ELSE_11	FUNCTION_3	IF_1
0x40003a0	            0x741c	                            je 0x40003be	       221	keyboard.c	ELSE_11	FUNCTION_3	IF_1
0x40003a2	        0x4883ec08	                              sub rsp, 8	       220	keyboard.c	ELSE_11	FUNCTION_3
0x40003a6	      0xba00000000	                              mov edx, 0	       222	keyboard.c	ELSE_11	FUNCTION_3	CALL_1
0x40003ab	      0xbe9b000000	                           mov esi, 0x9b	       222	keyboard.c	ELSE_11	FUNCTION_3	CALL_1
0x40003b0	      0xb800000000	                              mov eax, 0	       222	keyboard.c	ELSE_11	FUNCTION_3	CALL_1
0x40003b5	      0xe800000000	                          call 0x40003ba	       222	keyboard.c	ELSE_11	FUNCTION_3	CALL_1
0x40003ba	        0x4883c408	                              add rsp, 8	       223	keyboard.c	ELSE_11	FUNCTION_3
0x40003be	            0xf3c3	                                     ret	       223	keyboard.c	ELSE_11	FUNCTION_3
